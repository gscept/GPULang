{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "GPULang",
	"patterns": [
		{
			"include": "#comment"
		}, {
			"include": "#keywords"
		}, {
			"include": "#semantics"
		}, {
			"include": "#strings"
		}, {
			"include": "#declarations"
		}, {
			"include": "#constants"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control",
					"match": "\\b(if|else|while|for|return|continue|break)\\b"
				}, {
					"name": "entity.name.type",
					"match": "\\b(void|i32|i32x2|i32x3|i32x4|u32|u32x2|u32x3|u32x4|f32|f32x2|f32x3|f32x4|f32x2x2|f32x2x3|f32x2x4|f32x3x2|f32x3x3|f32x3x4|f32x4x2|f32x4x3|f32x4x4|b8|b8x2|b8x3|b8x4|texture1D|texture1DArray|texture2D|texture2DArray|texture2DMS|texture2DMSArray|textureCube|textureCubeArray|texture3D|sampler)\\b"
				}, {
					"name": "keyword.other",
					"match": "\\b(entry_point)\\b"
				}, {
					"begin": "\\b(gpl(.*)|textureSample|textureLoad|textureStore)\\(\\b",
					"end": "\\)",
					"patterns": [ {"include": "#parameters"}],
					"beginCaptures": {
						"1": { "name": "support.function" }
					}
				}, {
					"match": "\\b(gplIs(.*)Shader)\\b",
					"name": "support.constant"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.numeric",
					"match": "\\b\\d((\\.\\d*f?)|u?)\\b"
				}
			]
		},
		"declarations": {
			"patterns": [
				{
					"match": "\\s*(var|const|uniform|inline|workgroup|link_defined)\\s*([A-z][A-z0-9]*)\\s*(:\\s*([\\*]*\\s*(mutable|sampled|literal)\\s*[A-z][A-z0-9]*))?",
					"captures": {
						"1": {
							"name": "storage.modifier"
						},
						"2": {
							"name": "variable"
						},
						"5": {
							"name": "keyword.other"
						},
						"6": {
							"name": "entity.name.type"
						}
					}
				}
			]
		},
		"parameters": {
			"patterns": [
				{
					"include": "#constants"
				},
				{
					"match": "\\s*(in|out)?\\s*([A-z][A-z0-9]*)\\s*(:\\s*[\\*]*([A-z][A-z0-9]*))?",
					"captures": {
						"1": {
							"name": "storage.modifier"
						},
						"2": {
							"name": "variable"
						},
						"4": {
							"name": "entity.name.type"
						}
					}
				},
				{
					"match": "([A-z][A-z0-9]*)",
					"captures": {
						"1": {
							"name": "variable"
						}
					}
				}
			]
		},
		"enums": {
			"patterns": [
				{
					"match": "\\s*([A-z][A-z0-9]*)\\s*(=\\s*([A-z][A-z0-9]*))?(,)?",
					"captures": {
						"1": { "name": "variable" },
						"3": { "name": "constant" }
					}
				}
			]
		},
		"semantics": {
			"patterns": [
				{
					"name": "meta.annotation",
					"match": "\\s*@[a-zA-Z]+[a-zA-Z]*\\s*"
				}, {
					
					"match": "^(\\s*\\#\\s*[a-zA-Z_][a-zA-Z0-9]*)\\s*(.*)$",
					"captures": {
						"1": {
							"name": "meta.preprocessor"
						},
						"2": {
							"name": "string"
						}
					}
				}, {
					"match": "\\s*(render_state|sampler_state|program)\\s*([A-z]+[A-z]*)",
					"captures": {
						"1": {
							"name": "keyword"
						},
						"2": {
							"name": "entity.name"
						}
					}
				}, {
					"begin": "(struct)\\s*([A-z][A-z0-9]*)",
					"end": "}",
					"patterns": [ {"include": "#parameters"}],
					"beginCaptures": {
						"1": {
							"name": "keyword"
						},
						"2": {
							"name": "entity.name"
						}
					},
					"endCaptures": {}
				}, {
					"begin": "(enum)\\s*([A-z][A-z0-9]*)\\s*((:)\\s*([A-z][A-z0-9]*))?\\s*",
					"end" : "}",
					"patterns": [ 
							{
								"match": "\\s*([A-z][A-z0-9]*)\\s*(\\=\\s*([0-9]*))?(,)?",
								"captures": {
									"1": { "name": "variable" },
									"3": { "name": "constant" }
							}
						}
					],
					"beginCaptures": {
						"1": {
							"name": "keyword"
						},
						"2": {
							"name": "entity.name"
						},
						"5": {
							"name": "entity.name.type"
						}
					},
					"endCaptures": {}
				}, {
					"match": "\\s*(VertexShader|HullShader|DomainShader|GeometryShader|PixelShader|ComputeShader|TaskShader|MeshShader|RayGenShader|RayAnyHitShader|RayClosestHitShader|RayMissShader|RayIntersectionShader|RayCallableShader)\\s*=\\s*([A-z][A-z0-9]*)",
					"captures": {
						"1": {
							"name": "keyword"
						},
						"2": {
							"name": "entity.name.function"
						}
					}
				}, {
					"match": "\\s*(RenderState)\\s*=\\s*([A-z][A-z0-9]*)",
					"captures": {
						"1": {
							"name": "keyword"
						},
						"2": {
							"name": "constant"
						}
					}
				}, {					
					"begin": "\\b([A-z][A-z0-9]*)\\s*\\(",
					"end": "\\s*\\)\\s*([A-z][A-z0-9]*)\\b",
					"patterns": [{ "include": "#parameters"	}],
					"beginCaptures": {
						"1": { "name": "entity.name.function" }
					},
					"endCaptures": {
						"1": { "name": "entity.name.type" }
					}
				},  {					
					"begin": "\\s*([A-z][A-z0-9]*)\\s*\\(",
					"end": "\\s*\\)",
					"patterns": [{ "include": "#parameters"	}],
					"beginCaptures": {
						"1": { "name": "entity.name.function" }
					},
					"endCaptures": {}
				}, {
					"name": "entity.name.type",
					"match": "\\b(render_state|sampler_state|program)\\b.*"
				}
				
			]
		},
		"strings": {
			"name": "string.quoted.double.gpulang",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.gpulang",
					"match": "\\\\."
				}
			]
		},
		"comment": {
			"name": "comment.line.double-slash",
			"begin": "//",
			"end": "\n"
		}
	},
	"scopeName": "source.gpulang"
}