[
    {
        "name": "abs",
        "documentation": "Returns the absolute value of the input.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "abs(val: i32) i32"
            },
            {
                "signature": "abs(val: i32x2) i32x2"
            },
            {
                "signature": "abs(val: i32x3) i32x3"
            },
            {
                "signature": "abs(val: i32x4) i32x4"
            },
            {
                "signature": "abs(val: i16) i16"
            },
            {
                "signature": "abs(val: i16x2) i16x2"
            },
            {
                "signature": "abs(val: i16x3) i16x3"
            },
            {
                "signature": "abs(val: i16x4) i16x4"
            },
            {
                "signature": "abs(val: f32) f32"
            },
            {
                "signature": "abs(val: f32x2) f32x2"
            },
            {
                "signature": "abs(val: f32x3) f32x3"
            },
            {
                "signature": "abs(val: f32x4) f32x4"
            },
            {
                "signature": "abs(val: f16) f16"
            },
            {
                "signature": "abs(val: f16x2) f16x2"
            },
            {
                "signature": "abs(val: f16x3) f16x3"
            },
            {
                "signature": "abs(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "acos",
        "documentation": "Returns the arc cosine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "acos(val: f32) f32"
            },
            {
                "signature": "acos(val: f32x2) f32x2"
            },
            {
                "signature": "acos(val: f32x3) f32x3"
            },
            {
                "signature": "acos(val: f32x4) f32x4"
            },
            {
                "signature": "acos(val: f16) f16"
            },
            {
                "signature": "acos(val: f16x2) f16x2"
            },
            {
                "signature": "acos(val: f16x3) f16x3"
            },
            {
                "signature": "acos(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "acosh",
        "documentation": "Returns the hyperbolic arc cosine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "acosh(val: f32) f32"
            },
            {
                "signature": "acosh(val: f32x2) f32x2"
            },
            {
                "signature": "acosh(val: f32x3) f32x3"
            },
            {
                "signature": "acosh(val: f32x4) f32x4"
            },
            {
                "signature": "acosh(val: f16) f16"
            },
            {
                "signature": "acosh(val: f16x2) f16x2"
            },
            {
                "signature": "acosh(val: f16x3) f16x3"
            },
            {
                "signature": "acosh(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "all",
        "documentation": "Returns true if all components of the vector are non-zero.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "all(val: b8) b8"
            },
            {
                "signature": "all(val: b8x2) b8"
            },
            {
                "signature": "all(val: b8x3) b8"
            },
            {
                "signature": "all(val: b8x4) b8"
            }
        ]
    },
    {
        "name": "any",
        "documentation": "Returns true if any component of the vector is non-zero.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "any(val: b8) b8"
            },
            {
                "signature": "any(val: b8x2) b8"
            },
            {
                "signature": "any(val: b8x3) b8"
            },
            {
                "signature": "any(val: b8x4) b8"
            }
        ]
    },
    {
        "name": "asin",
        "documentation": "Returns the arc sine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "asin(val: f32) f32"
            },
            {
                "signature": "asin(val: f32x2) f32x2"
            },
            {
                "signature": "asin(val: f32x3) f32x3"
            },
            {
                "signature": "asin(val: f32x4) f32x4"
            },
            {
                "signature": "asin(val: f16) f16"
            },
            {
                "signature": "asin(val: f16x2) f16x2"
            },
            {
                "signature": "asin(val: f16x3) f16x3"
            },
            {
                "signature": "asin(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "asinh",
        "documentation": "Returns the hyperbolic arc sine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "asinh(val: f32) f32"
            },
            {
                "signature": "asinh(val: f32x2) f32x2"
            },
            {
                "signature": "asinh(val: f32x3) f32x3"
            },
            {
                "signature": "asinh(val: f32x4) f32x4"
            },
            {
                "signature": "asinh(val: f16) f16"
            },
            {
                "signature": "asinh(val: f16x2) f16x2"
            },
            {
                "signature": "asinh(val: f16x3) f16x3"
            },
            {
                "signature": "asinh(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "atan",
        "documentation": "Returns the arc tangent of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atan(val: f32) f32"
            },
            {
                "signature": "atan(val: f32x2) f32x2"
            },
            {
                "signature": "atan(val: f32x3) f32x3"
            },
            {
                "signature": "atan(val: f32x4) f32x4"
            },
            {
                "signature": "atan(val: f16) f16"
            },
            {
                "signature": "atan(val: f16x2) f16x2"
            },
            {
                "signature": "atan(val: f16x3) f16x3"
            },
            {
                "signature": "atan(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "atan2",
        "documentation": "Returns the angle whose tangent is the quotient of the two specified numbers.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atan2(y: f32, x: f32) f32"
            },
            {
                "signature": "atan2(y: f32x2, x: f32x2) f32x2"
            },
            {
                "signature": "atan2(y: f32x3, x: f32x3) f32x3"
            },
            {
                "signature": "atan2(y: f32x4, x: f32x4) f32x4"
            },
            {
                "signature": "atan2(y: f16, x: f16) f16"
            },
            {
                "signature": "atan2(y: f16x2, x: f16x2) f16x2"
            },
            {
                "signature": "atan2(y: f16x3, x: f16x3) f16x3"
            },
            {
                "signature": "atan2(y: f16x4, x: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "atanh",
        "documentation": "Returns the hyperbolic arc tangent of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atanh(val: f32) f32"
            },
            {
                "signature": "atanh(val: f32x2) f32x2"
            },
            {
                "signature": "atanh(val: f32x3) f32x3"
            },
            {
                "signature": "atanh(val: f32x4) f32x4"
            },
            {
                "signature": "atanh(val: f16) f16"
            },
            {
                "signature": "atanh(val: f16x2) f16x2"
            },
            {
                "signature": "atanh(val: f16x3) f16x3"
            },
            {
                "signature": "atanh(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "atomicAdd",
        "documentation": "Adds the value to the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicAdd(ptr: *u32, value: u32, semantics: literal MemorySemantics) u32"
            },
            {
                "signature": "atomicAdd(ptr: *i32, value: i32, semantics: literal MemorySemantics) i32"
            },
            {
                "signature": "atomicAdd(ptr: *u16, value: u16, semantics: literal MemorySemantics) u16"
            },
            {
                "signature": "atomicAdd(ptr: *i16, value: i16, semantics: literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicAnd",
        "documentation": "Performs a bitwise AND operation with the value at the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicAnd(ptr: *u32, value: u32, semantics: literal MemorySemantics) u32"
            },
            {
                "signature": "atomicAnd(ptr: *i32, value: i32, semantics: literal MemorySemantics) i32"
            },
            {
                "signature": "atomicAnd(ptr: *u16, value: u16, semantics: literal MemorySemantics) u16"
            },
            {
                "signature": "atomicAnd(ptr: *i16, value: i16, semantics: literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicCompareExchange",
        "documentation": "Compares the value at the pointer location with the comparison, and exchanges it with value if they are identical using the specified memory semantics, always returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicCompareExchange(ptr: *f16, value: f16, compare: f16, semantics: literal MemorySemantics) f16"
            },
            {
                "signature": "atomicCompareExchange(ptr: *f16, value: f16, compare: f16, semantics: literal MemorySemantics) f16"
            },
            {
                "signature": "atomicCompareExchange(ptr: *f16, value: f16, compare: f16, semantics: literal MemorySemantics) f16"
            },
            {
                "signature": "atomicCompareExchange(ptr: *f16, value: f16, compare: f16, semantics: literal MemorySemantics) f16"
            }
        ]
    },
    {
        "name": "atomicDecrement",
        "documentation": "Decrements the value at the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicDecrement(ptr: *u32, semantics: literal MemorySemantics) u32"
            },
            {
                "signature": "atomicDecrement(ptr: *i32, semantics: literal MemorySemantics) i32"
            },
            {
                "signature": "atomicDecrement(ptr: *u16, semantics: literal MemorySemantics) u16"
            },
            {
                "signature": "atomicDecrement(ptr: *i16, semantics: literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicExchange",
        "documentation": "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicExchange(ptr: *u32, value: u32, semantics: literal MemorySemantics) u32"
            },
            {
                "signature": "atomicExchange(ptr: *i32, value: i32, semantics: literal MemorySemantics) i32"
            },
            {
                "signature": "atomicExchange(ptr: *u16, value: u16, semantics: literal MemorySemantics) u16"
            },
            {
                "signature": "atomicExchange(ptr: *i16, value: i16, semantics: literal MemorySemantics) i16"
            },
            {
                "signature": "atomicExchange(ptr: *f32, value: f32, semantics: literal MemorySemantics) f32"
            },
            {
                "signature": "atomicExchange(ptr: *f16, value: f16, semantics: literal MemorySemantics) f16"
            }
        ]
    },
    {
        "name": "atomicIncrement",
        "documentation": "Increments the value at the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicIncrement(ptr: *u32, semantics: literal MemorySemantics) u32"
            },
            {
                "signature": "atomicIncrement(ptr: *i32, semantics: literal MemorySemantics) i32"
            },
            {
                "signature": "atomicIncrement(ptr: *u16, semantics: literal MemorySemantics) u16"
            },
            {
                "signature": "atomicIncrement(ptr: *i16, semantics: literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicLoad",
        "documentation": "Loads the value at the pointer location with the specified memory semantics",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicLoad(ptr: *u32, semantics: literal MemorySemantics) u32"
            },
            {
                "signature": "atomicLoad(ptr: *i32, semantics: literal MemorySemantics) i32"
            },
            {
                "signature": "atomicLoad(ptr: *u16, semantics: literal MemorySemantics) u16"
            },
            {
                "signature": "atomicLoad(ptr: *i16, semantics: literal MemorySemantics) i16"
            },
            {
                "signature": "atomicLoad(ptr: *f32, semantics: literal MemorySemantics) f32"
            },
            {
                "signature": "atomicLoad(ptr: *f16, semantics: literal MemorySemantics) f16"
            }
        ]
    },
    {
        "name": "atomicMax",
        "documentation": "Compares the value at the pointer with the comparand, and stores the largest value in the pointer, returns old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicMax(ptr: *f16, compare: f16, semantics: literal MemorySemantics) f16"
            },
            {
                "signature": "atomicMax(ptr: *f16, compare: f16, semantics: literal MemorySemantics) f16"
            },
            {
                "signature": "atomicMax(ptr: *f16, compare: f16, semantics: literal MemorySemantics) f16"
            },
            {
                "signature": "atomicMax(ptr: *f16, compare: f16, semantics: literal MemorySemantics) f16"
            }
        ]
    },
    {
        "name": "atomicMin",
        "documentation": "Compares the value at the pointer with the comparand, and stores the smallest value in the pointer, returns old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicMin(ptr: *f16, compare: f16, semantics: literal MemorySemantics) f16"
            },
            {
                "signature": "atomicMin(ptr: *f16, compare: f16, semantics: literal MemorySemantics) f16"
            },
            {
                "signature": "atomicMin(ptr: *f16, compare: f16, semantics: literal MemorySemantics) f16"
            },
            {
                "signature": "atomicMin(ptr: *f16, compare: f16, semantics: literal MemorySemantics) f16"
            }
        ]
    },
    {
        "name": "atomicOr",
        "documentation": "Performs a bitwise OR operation with the value at the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicOr(ptr: *u32, value: u32, semantics: literal MemorySemantics) u32"
            },
            {
                "signature": "atomicOr(ptr: *i32, value: i32, semantics: literal MemorySemantics) i32"
            },
            {
                "signature": "atomicOr(ptr: *u16, value: u16, semantics: literal MemorySemantics) u16"
            },
            {
                "signature": "atomicOr(ptr: *i16, value: i16, semantics: literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicStore",
        "documentation": "Stores the value at the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicStore(ptr: *u32, value: u32, semantics: literal MemorySemantics) void"
            },
            {
                "signature": "atomicStore(ptr: *i32, value: i32, semantics: literal MemorySemantics) void"
            },
            {
                "signature": "atomicStore(ptr: *u16, value: u16, semantics: literal MemorySemantics) void"
            },
            {
                "signature": "atomicStore(ptr: *i16, value: i16, semantics: literal MemorySemantics) void"
            },
            {
                "signature": "atomicStore(ptr: *f32, value: f32, semantics: literal MemorySemantics) void"
            },
            {
                "signature": "atomicStore(ptr: *f16, value: f16, semantics: literal MemorySemantics) void"
            }
        ]
    },
    {
        "name": "atomicSubtract",
        "documentation": "Subtracts the value from the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicSubtract(ptr: *u32, value: u32, semantics: literal MemorySemantics) u32"
            },
            {
                "signature": "atomicSubtract(ptr: *i32, value: i32, semantics: literal MemorySemantics) i32"
            },
            {
                "signature": "atomicSubtract(ptr: *u16, value: u16, semantics: literal MemorySemantics) u16"
            },
            {
                "signature": "atomicSubtract(ptr: *i16, value: i16, semantics: literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicXor",
        "documentation": "Performs a bitwise XOR operation with the value at the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicXor(ptr: *u32, value: u32, semantics: literal MemorySemantics) u32"
            },
            {
                "signature": "atomicXor(ptr: *i32, value: i32, semantics: literal MemorySemantics) i32"
            },
            {
                "signature": "atomicXor(ptr: *u16, value: u16, semantics: literal MemorySemantics) u16"
            },
            {
                "signature": "atomicXor(ptr: *i16, value: i16, semantics: literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "bitCount",
        "documentation": "Counts the number of bits set to 1 in a bitmask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "bitCount(base: u32) u32"
            },
            {
                "signature": "bitCount(base: i32) i32"
            },
            {
                "signature": "bitCount(base: u16) u16"
            },
            {
                "signature": "bitCount(base: i16) i16"
            }
        ]
    },
    {
        "name": "bitExtract",
        "documentation": "Extract a specific bit from a bitmask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "bitExtract(base: u32, offset: u32, count: u32) u32"
            },
            {
                "signature": "bitExtract(base: i32, offset: i32, count: i32) i32"
            },
            {
                "signature": "bitExtract(base: u16, offset: u16, count: u16) u16"
            },
            {
                "signature": "bitExtract(base: i16, offset: i16, count: i16) i16"
            }
        ]
    },
    {
        "name": "bitInsert",
        "documentation": "Insert bit into bitmask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "bitInsert(base: u16, value: u16, offset: u16, count: u16) u16"
            },
            {
                "signature": "bitInsert(base: u32, value: u32, offset: u32, count: u32) u32"
            }
        ]
    },
    {
        "name": "bitReverse",
        "documentation": "Reverses the bits in a bitmask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "bitReverse(base: u32) u32"
            },
            {
                "signature": "bitReverse(base: i32) i32"
            },
            {
                "signature": "bitReverse(base: u16) u16"
            },
            {
                "signature": "bitReverse(base: i16) i16"
            }
        ]
    },
    {
        "name": "castToF16",
        "documentation": "Casts to type Float16 without conversion.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "castToF16(val: u16) f16"
            },
            {
                "signature": "castToF16(val: i16) f16"
            }
        ]
    },
    {
        "name": "castToF32",
        "documentation": "Casts to type Float32 without conversion.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "castToF32(val: u32) f32"
            },
            {
                "signature": "castToF32(val: i32) f32"
            }
        ]
    },
    {
        "name": "castToI16",
        "documentation": "Casts to type Int16 without conversion.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "castToI16(val: f16) i16"
            },
            {
                "signature": "castToI16(val: u16) i16"
            }
        ]
    },
    {
        "name": "castToI32",
        "documentation": "Casts to type Int32 without conversion.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "castToI32(val: f32) i32"
            },
            {
                "signature": "castToI32(val: u32) i32"
            }
        ]
    },
    {
        "name": "castToU16",
        "documentation": "Casts to type UInt16 without conversion.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "castToU16(val: f16) u16"
            },
            {
                "signature": "castToU16(val: i16) u16"
            }
        ]
    },
    {
        "name": "castToU32",
        "documentation": "Casts to type UInt32 without conversion.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "castToU32(val: f32) u32"
            },
            {
                "signature": "castToU32(val: i32) u32"
            }
        ]
    },
    {
        "name": "ceil",
        "documentation": "Returns the smallest integer value that is greater than or equal to the input.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "ceil(val: f32) f32"
            },
            {
                "signature": "ceil(val: f32x2) f32x2"
            },
            {
                "signature": "ceil(val: f32x3) f32x3"
            },
            {
                "signature": "ceil(val: f32x4) f32x4"
            },
            {
                "signature": "ceil(val: f16) f16"
            },
            {
                "signature": "ceil(val: f16x2) f16x2"
            },
            {
                "signature": "ceil(val: f16x3) f16x3"
            },
            {
                "signature": "ceil(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "clamp",
        "documentation": "Returns the value clamped between min and max.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "clamp(val: f32, min: f32, max: f32) f32"
            },
            {
                "signature": "clamp(val: f32x2, min: f32x2, max: f32x2) f32x2"
            },
            {
                "signature": "clamp(val: f32x3, min: f32x3, max: f32x3) f32x3"
            },
            {
                "signature": "clamp(val: f32x4, min: f32x4, max: f32x4) f32x4"
            },
            {
                "signature": "clamp(val: f16, min: f16, max: f16) f16"
            },
            {
                "signature": "clamp(val: f16x2, min: f16x2, max: f16x2) f16x2"
            },
            {
                "signature": "clamp(val: f16x3, min: f16x3, max: f16x3) f16x3"
            },
            {
                "signature": "clamp(val: f16x4, min: f16x4, max: f16x4) f16x4"
            },
            {
                "signature": "clamp(val: i32, min: i32, max: i32) i32"
            },
            {
                "signature": "clamp(val: i32x2, min: i32x2, max: i32x2) i32x2"
            },
            {
                "signature": "clamp(val: i32x3, min: i32x3, max: i32x3) i32x3"
            },
            {
                "signature": "clamp(val: i32x4, min: i32x4, max: i32x4) i32x4"
            },
            {
                "signature": "clamp(val: i16, min: i16, max: i16) i16"
            },
            {
                "signature": "clamp(val: i16x2, min: i16x2, max: i16x2) i16x2"
            },
            {
                "signature": "clamp(val: i16x3, min: i16x3, max: i16x3) i16x3"
            },
            {
                "signature": "clamp(val: i16x4, min: i16x4, max: i16x4) i16x4"
            },
            {
                "signature": "clamp(val: u32, min: u32, max: u32) u32"
            },
            {
                "signature": "clamp(val: u32x2, min: u32x2, max: u32x2) u32x2"
            },
            {
                "signature": "clamp(val: u32x3, min: u32x3, max: u32x3) u32x3"
            },
            {
                "signature": "clamp(val: u32x4, min: u32x4, max: u32x4) u32x4"
            },
            {
                "signature": "clamp(val: u16, min: u16, max: u16) u16"
            },
            {
                "signature": "clamp(val: u16x2, min: u16x2, max: u16x2) u16x2"
            },
            {
                "signature": "clamp(val: u16x3, min: u16x3, max: u16x3) u16x3"
            },
            {
                "signature": "clamp(val: u16x4, min: u16x4, max: u16x4) u16x4"
            }
        ]
    },
    {
        "name": "computeGetGlobalThreadIndices",
        "documentation": "Returns the global thread indices in the dispatch",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "computeGetGlobalThreadIndices() u32x3"
            }
        ]
    },
    {
        "name": "computeGetIndexInWorkgroup",
        "documentation": "Returns flattened index of the current thread in the workgroup using (x * workgroupSize.y + y) * workgroupSize.x + z",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "computeGetIndexInWorkgroup() u32"
            }
        ]
    },
    {
        "name": "computeGetLocalThreadIndices",
        "documentation": "Returns the local thread indices within the workgroup",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "computeGetLocalThreadIndices() u32x3"
            }
        ]
    },
    {
        "name": "computeGetWorkGroupDimensions",
        "documentation": "Returns the dimensions of the workgroup in the dispatch",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "computeGetWorkGroupDimensions() u32x3"
            }
        ]
    },
    {
        "name": "computeGetWorkgroupIndices",
        "documentation": "Returns the workgroup indices in the dispatch",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "computeGetWorkgroupIndices() u32x3"
            }
        ]
    },
    {
        "name": "cos",
        "documentation": "Returns the cosine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "cos(val: f32) f32"
            },
            {
                "signature": "cos(val: f32x2) f32x2"
            },
            {
                "signature": "cos(val: f32x3) f32x3"
            },
            {
                "signature": "cos(val: f32x4) f32x4"
            },
            {
                "signature": "cos(val: f16) f16"
            },
            {
                "signature": "cos(val: f16x2) f16x2"
            },
            {
                "signature": "cos(val: f16x3) f16x3"
            },
            {
                "signature": "cos(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "cosh",
        "documentation": "Returns the hyperbolic cosine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "cosh(val: f32) f32"
            },
            {
                "signature": "cosh(val: f32x2) f32x2"
            },
            {
                "signature": "cosh(val: f32x3) f32x3"
            },
            {
                "signature": "cosh(val: f32x4) f32x4"
            },
            {
                "signature": "cosh(val: f16) f16"
            },
            {
                "signature": "cosh(val: f16x2) f16x2"
            },
            {
                "signature": "cosh(val: f16x3) f16x3"
            },
            {
                "signature": "cosh(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "cross",
        "documentation": "Returns the cross product of two vectors.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "cross(v0: f32x3, v1: f32x3) f32x3"
            },
            {
                "signature": "cross(v0: f16x3, v1: f16x3) f16x3"
            }
        ]
    },
    {
        "name": "ddx",
        "documentation": "Returns the derivative of the input with respect to the screen x coordinate.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "ddx(val: f32) f32"
            },
            {
                "signature": "ddx(val: f32x2) f32x2"
            },
            {
                "signature": "ddx(val: f32x3) f32x3"
            },
            {
                "signature": "ddx(val: f32x4) f32x4"
            },
            {
                "signature": "ddx(val: f16) f16"
            },
            {
                "signature": "ddx(val: f16x2) f16x2"
            },
            {
                "signature": "ddx(val: f16x3) f16x3"
            },
            {
                "signature": "ddx(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "ddy",
        "documentation": "Returns the derivative of the input with respect to the screen y coordinate.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "ddy(val: f32) f32"
            },
            {
                "signature": "ddy(val: f32x2) f32x2"
            },
            {
                "signature": "ddy(val: f32x3) f32x3"
            },
            {
                "signature": "ddy(val: f32x4) f32x4"
            },
            {
                "signature": "ddy(val: f16) f16"
            },
            {
                "signature": "ddy(val: f16x2) f16x2"
            },
            {
                "signature": "ddy(val: f16x3) f16x3"
            },
            {
                "signature": "ddy(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "distance",
        "documentation": "Returns the distance between two points.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "distance(p0: f32x2, p1: f32x2) f32x2"
            },
            {
                "signature": "distance(p0: f32x3, p1: f32x3) f32x3"
            },
            {
                "signature": "distance(p0: f32x4, p1: f32x4) f32x4"
            },
            {
                "signature": "distance(p0: f16x2, p1: f16x2) f16x2"
            },
            {
                "signature": "distance(p0: f16x3, p1: f16x3) f16x3"
            },
            {
                "signature": "distance(p0: f16x4, p1: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "domainGetInvocationIndex",
        "documentation": "Gets the primitive index being processed. If the previous stage was a GeometryShader, it must call ExportPrimitiveIndex to set the value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "domainGetInvocationIndex() u32"
            }
        ]
    },
    {
        "name": "domainGetPrimitiveIndex",
        "documentation": "Gets the primitive index being processed. If the previous stage was a GeometryShader, it must call ExportPrimitiveIndex to set the value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "domainGetPrimitiveIndex(index: u32) u32"
            }
        ]
    },
    {
        "name": "domainGetTessellationCoordinates",
        "documentation": "Returns the tessellation coordinates of the point being processed. For quads, the z coordinate is meaningless and will always be 0, and x,y are bilinear weights. For triangles, x,y,z form barycentric coordinates.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "domainGetTessellationCoordinates() f32x3"
            }
        ]
    },
    {
        "name": "dot",
        "documentation": "Returns the dot product of two vectors.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "dot(x: f32x2, y: f32x2) f32"
            },
            {
                "signature": "dot(x: f32x3, y: f32x3) f32"
            },
            {
                "signature": "dot(x: f32x4, y: f32x4) f32"
            },
            {
                "signature": "dot(x: f16x2, y: f16x2) f16"
            },
            {
                "signature": "dot(x: f16x3, y: f16x3) f16"
            },
            {
                "signature": "dot(x: f16x4, y: f16x4) f16"
            }
        ]
    },
    {
        "name": "executionBarrier",
        "documentation": "Execution barrier to ensure all threads have reached this point before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "executionBarrier() void"
            }
        ]
    },
    {
        "name": "executionBarrierSubgroup",
        "documentation": "Execution barrier to ensure all threads in the subgroup have reached this point before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "executionBarrierSubgroup() void"
            }
        ]
    },
    {
        "name": "executionBarrierWorkgroup",
        "documentation": "Execution barrier to ensure all threads in the workgroup have reached this point before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "executionBarrierWorkgroup() void"
            }
        ]
    },
    {
        "name": "exp",
        "documentation": "Returns the exponential of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "exp(val: f32) f32"
            },
            {
                "signature": "exp(val: f32x2) f32x2"
            },
            {
                "signature": "exp(val: f32x3) f32x3"
            },
            {
                "signature": "exp(val: f32x4) f32x4"
            },
            {
                "signature": "exp(val: f16) f16"
            },
            {
                "signature": "exp(val: f16x2) f16x2"
            },
            {
                "signature": "exp(val: f16x3) f16x3"
            },
            {
                "signature": "exp(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "exp2",
        "documentation": "Returns the base 2 exponential of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "exp2(val: f32) f32"
            },
            {
                "signature": "exp2(val: f32x2) f32x2"
            },
            {
                "signature": "exp2(val: f32x3) f32x3"
            },
            {
                "signature": "exp2(val: f32x4) f32x4"
            },
            {
                "signature": "exp2(val: f16) f16"
            },
            {
                "signature": "exp2(val: f16x2) f16x2"
            },
            {
                "signature": "exp2(val: f16x3) f16x3"
            },
            {
                "signature": "exp2(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "floor",
        "documentation": "Returns the largest integer value that is less than or equal to the input.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "floor(val: f32) f32"
            },
            {
                "signature": "floor(val: f32x2) f32x2"
            },
            {
                "signature": "floor(val: f32x3) f32x3"
            },
            {
                "signature": "floor(val: f32x4) f32x4"
            },
            {
                "signature": "floor(val: f16) f16"
            },
            {
                "signature": "floor(val: f16x2) f16x2"
            },
            {
                "signature": "floor(val: f16x3) f16x3"
            },
            {
                "signature": "floor(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "fract",
        "documentation": "Returns the fractional part of the input.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "fract(val: f32) f32"
            },
            {
                "signature": "fract(val: f32x2) f32x2"
            },
            {
                "signature": "fract(val: f32x3) f32x3"
            },
            {
                "signature": "fract(val: f32x4) f32x4"
            },
            {
                "signature": "fract(val: f16) f16"
            },
            {
                "signature": "fract(val: f16x2) f16x2"
            },
            {
                "signature": "fract(val: f16x3) f16x3"
            },
            {
                "signature": "fract(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "fwidth",
        "documentation": "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "fwidth(val: f32) f32"
            },
            {
                "signature": "fwidth(val: f32x2) f32x2"
            },
            {
                "signature": "fwidth(val: f32x3) f32x3"
            },
            {
                "signature": "fwidth(val: f32x4) f32x4"
            },
            {
                "signature": "fwidth(val: f16) f16"
            },
            {
                "signature": "fwidth(val: f16x2) f16x2"
            },
            {
                "signature": "fwidth(val: f16x3) f16x3"
            },
            {
                "signature": "fwidth(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "geometryExportPrimitive",
        "documentation": "Gets the primitive index being processed. If the previous stage was a GeometryShader, it must call ExportPrimitiveIndex to set the value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "geometryExportPrimitive() void"
            }
        ]
    },
    {
        "name": "geometryExportPrimitiveIndex",
        "documentation": "Sets the output viewport for the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "geometryExportPrimitiveIndex(index: u32) u32"
            }
        ]
    },
    {
        "name": "geometryExportVertex",
        "documentation": "Exports the state of all *out* values as vertex data, and sets the argument *val* as the rasterization position. This function must be called for each point in the topology given by output_primitive. This is the same as writing `gl_Position` followed by calling EmitVertex() in GLSL.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "geometryExportVertex(val: f32x4) void"
            },
            {
                "signature": "geometryExportVertex(val: f16x4) void"
            }
        ]
    },
    {
        "name": "geometryGetInvocationIndex",
        "documentation": "Gets the primitive index being processed. If the previous stage was a GeometryShader, it must call ExportPrimitiveIndex to set the value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "geometryGetInvocationIndex() u32"
            }
        ]
    },
    {
        "name": "geometryGetLine",
        "documentation": "Returns a struct of the current line.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "geometryGetLine() GeometryLine"
            }
        ]
    },
    {
        "name": "geometryGetPoint",
        "documentation": "Returns a struct of the current point.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "geometryGetPoint() GeometryPoint"
            }
        ]
    },
    {
        "name": "geometryGetTriangle",
        "documentation": "Returns a struct of the current triangle.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "geometryGetTriangle() GeometryTriangle"
            }
        ]
    },
    {
        "name": "hullExportInnerTessellationLevels",
        "documentation": "Sets the inner tessellation levels for the current patch. This function must be called once per patch.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "hullExportInnerTessellationLevels(levels: f32x2) void"
            }
        ]
    },
    {
        "name": "hullExportOuterTessellationLevels",
        "documentation": "Sets the outer tessellation levels for the current patch. This function must be called once per patch.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "hullExportOuterTessellationLevels(levels: f32x4) void"
            }
        ]
    },
    {
        "name": "hullGetPrimitiveIndex",
        "documentation": "Gets the primitive index being processed. If the previous stage was a GeometryShader, it must call ExportPrimitiveIndex to set the value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "hullGetPrimitiveIndex(index: u32) u32"
            }
        ]
    },
    {
        "name": "invSqrt",
        "documentation": "Returns the inverse square root of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "invSqrt(val: f32) f32"
            },
            {
                "signature": "invSqrt(val: f32x2) f32x2"
            },
            {
                "signature": "invSqrt(val: f32x3) f32x3"
            },
            {
                "signature": "invSqrt(val: f32x4) f32x4"
            },
            {
                "signature": "invSqrt(val: f16) f16"
            },
            {
                "signature": "invSqrt(val: f16x2) f16x2"
            },
            {
                "signature": "invSqrt(val: f16x3) f16x3"
            },
            {
                "signature": "invSqrt(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "inverse",
        "documentation": "Returns the inverse of the matrix.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "inverse(val: f32x2x2) f32x2x2"
            },
            {
                "signature": "inverse(val: f16x2x2) f16x2x2"
            },
            {
                "signature": "inverse(val: f32x2x3) f32x2x3"
            },
            {
                "signature": "inverse(val: f16x2x3) f16x2x3"
            },
            {
                "signature": "inverse(val: f32x2x4) f32x2x4"
            },
            {
                "signature": "inverse(val: f16x2x4) f16x2x4"
            },
            {
                "signature": "inverse(val: f32x3x2) f32x3x2"
            },
            {
                "signature": "inverse(val: f16x3x2) f16x3x2"
            },
            {
                "signature": "inverse(val: f32x3x3) f32x3x3"
            },
            {
                "signature": "inverse(val: f16x3x3) f16x3x3"
            },
            {
                "signature": "inverse(val: f32x3x4) f32x3x4"
            },
            {
                "signature": "inverse(val: f16x3x4) f16x3x4"
            },
            {
                "signature": "inverse(val: f32x4x2) f32x4x2"
            },
            {
                "signature": "inverse(val: f16x4x2) f16x4x2"
            },
            {
                "signature": "inverse(val: f32x4x3) f32x4x3"
            },
            {
                "signature": "inverse(val: f16x4x3) f16x4x3"
            },
            {
                "signature": "inverse(val: f32x4x4) f32x4x4"
            },
            {
                "signature": "inverse(val: f16x4x4) f16x4x4"
            }
        ]
    },
    {
        "name": "length",
        "documentation": "Returns the length of the vector.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "length(val: f32x2) f32"
            },
            {
                "signature": "length(val: f32x3) f32"
            },
            {
                "signature": "length(val: f32x4) f32"
            },
            {
                "signature": "length(val: f16x2) f32"
            },
            {
                "signature": "length(val: f16x3) f32"
            },
            {
                "signature": "length(val: f16x4) f32"
            }
        ]
    },
    {
        "name": "lerp",
        "documentation": "Returns the linear interpolation between a and b by t.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "lerp(a: f32, b: f32, t: f32) f32"
            },
            {
                "signature": "lerp(a: f32x2, b: f32x2, t: f32x2) f32x2"
            },
            {
                "signature": "lerp(a: f32x3, b: f32x3, t: f32x3) f32x3"
            },
            {
                "signature": "lerp(a: f32x4, b: f32x4, t: f32x4) f32x4"
            },
            {
                "signature": "lerp(a: f16, b: f16, t: f16) f16"
            },
            {
                "signature": "lerp(a: f16x2, b: f16x2, t: f16x2) f16x2"
            },
            {
                "signature": "lerp(a: f16x3, b: f16x3, t: f16x3) f16x3"
            },
            {
                "signature": "lerp(a: f16x4, b: f16x4, t: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "log",
        "documentation": "Returns the natural logarithm of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "log(val: f32) f32"
            },
            {
                "signature": "log(val: f32x2) f32x2"
            },
            {
                "signature": "log(val: f32x3) f32x3"
            },
            {
                "signature": "log(val: f32x4) f32x4"
            },
            {
                "signature": "log(val: f16) f16"
            },
            {
                "signature": "log(val: f16x2) f16x2"
            },
            {
                "signature": "log(val: f16x3) f16x3"
            },
            {
                "signature": "log(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "log2",
        "documentation": "Returns the base 2 logarithm of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "log2(val: f32) f32"
            },
            {
                "signature": "log2(val: f32x2) f32x2"
            },
            {
                "signature": "log2(val: f32x3) f32x3"
            },
            {
                "signature": "log2(val: f32x4) f32x4"
            },
            {
                "signature": "log2(val: f16) f16"
            },
            {
                "signature": "log2(val: f16x2) f16x2"
            },
            {
                "signature": "log2(val: f16x3) f16x3"
            },
            {
                "signature": "log2(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "mad",
        "documentation": "Returns the result of multiplying a value by a multiplier and adding an addend.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "mad(val: f32, multiplier: f32, addend: f32) f32"
            },
            {
                "signature": "mad(val: f32x2, multiplier: f32x2, addend: f32x2) f32x2"
            },
            {
                "signature": "mad(val: f32x3, multiplier: f32x3, addend: f32x3) f32x3"
            },
            {
                "signature": "mad(val: f32x4, multiplier: f32x4, addend: f32x4) f32x4"
            },
            {
                "signature": "mad(val: f16, multiplier: f16, addend: f16) f16"
            },
            {
                "signature": "mad(val: f16x2, multiplier: f16x2, addend: f16x2) f16x2"
            },
            {
                "signature": "mad(val: f16x3, multiplier: f16x3, addend: f16x3) f16x3"
            },
            {
                "signature": "mad(val: f16x4, multiplier: f16x4, addend: f16x4) f16x4"
            },
            {
                "signature": "mad(val: i32, multiplier: i32, addend: i32) i32"
            },
            {
                "signature": "mad(val: i32x2, multiplier: i32x2, addend: i32x2) i32x2"
            },
            {
                "signature": "mad(val: i32x3, multiplier: i32x3, addend: i32x3) i32x3"
            },
            {
                "signature": "mad(val: i32x4, multiplier: i32x4, addend: i32x4) i32x4"
            },
            {
                "signature": "mad(val: i16, multiplier: i16, addend: i16) i16"
            },
            {
                "signature": "mad(val: i16x2, multiplier: i16x2, addend: i16x2) i16x2"
            },
            {
                "signature": "mad(val: i16x3, multiplier: i16x3, addend: i16x3) i16x3"
            },
            {
                "signature": "mad(val: i16x4, multiplier: i16x4, addend: i16x4) i16x4"
            },
            {
                "signature": "mad(val: u32, multiplier: u32, addend: u32) u32"
            },
            {
                "signature": "mad(val: u32x2, multiplier: u32x2, addend: u32x2) u32x2"
            },
            {
                "signature": "mad(val: u32x3, multiplier: u32x3, addend: u32x3) u32x3"
            },
            {
                "signature": "mad(val: u32x4, multiplier: u32x4, addend: u32x4) u32x4"
            },
            {
                "signature": "mad(val: u16, multiplier: u16, addend: u16) u16"
            },
            {
                "signature": "mad(val: u16x2, multiplier: u16x2, addend: u16x2) u16x2"
            },
            {
                "signature": "mad(val: u16x3, multiplier: u16x3, addend: u16x3) u16x3"
            },
            {
                "signature": "mad(val: u16x4, multiplier: u16x4, addend: u16x4) u16x4"
            }
        ]
    },
    {
        "name": "max",
        "documentation": "Returns the maximum of x and y.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "max(x: f32, y: f32) f32"
            },
            {
                "signature": "max(x: f32x2, y: f32x2) f32x2"
            },
            {
                "signature": "max(x: f32x3, y: f32x3) f32x3"
            },
            {
                "signature": "max(x: f32x4, y: f32x4) f32x4"
            },
            {
                "signature": "max(x: f16, y: f16) f16"
            },
            {
                "signature": "max(x: f16x2, y: f16x2) f16x2"
            },
            {
                "signature": "max(x: f16x3, y: f16x3) f16x3"
            },
            {
                "signature": "max(x: f16x4, y: f16x4) f16x4"
            },
            {
                "signature": "max(x: i32, y: i32) i32"
            },
            {
                "signature": "max(x: i32x2, y: i32x2) i32x2"
            },
            {
                "signature": "max(x: i32x3, y: i32x3) i32x3"
            },
            {
                "signature": "max(x: i32x4, y: i32x4) i32x4"
            },
            {
                "signature": "max(x: i16, y: i16) i16"
            },
            {
                "signature": "max(x: i16x2, y: i16x2) i16x2"
            },
            {
                "signature": "max(x: i16x3, y: i16x3) i16x3"
            },
            {
                "signature": "max(x: i16x4, y: i16x4) i16x4"
            },
            {
                "signature": "max(x: u32, y: u32) u32"
            },
            {
                "signature": "max(x: u32x2, y: u32x2) u32x2"
            },
            {
                "signature": "max(x: u32x3, y: u32x3) u32x3"
            },
            {
                "signature": "max(x: u32x4, y: u32x4) u32x4"
            },
            {
                "signature": "max(x: u16, y: u16) u16"
            },
            {
                "signature": "max(x: u16x2, y: u16x2) u16x2"
            },
            {
                "signature": "max(x: u16x3, y: u16x3) u16x3"
            },
            {
                "signature": "max(x: u16x4, y: u16x4) u16x4"
            }
        ]
    },
    {
        "name": "memoryBarrier",
        "documentation": "Memory barrier to ensure memory operations are completed before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "memoryBarrier() void"
            }
        ]
    },
    {
        "name": "memoryBarrierAtomic",
        "documentation": "Memory barrier to ensure atomic memory operations are completed before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "memoryBarrierAtomic() void"
            }
        ]
    },
    {
        "name": "memoryBarrierBuffer",
        "documentation": "Memory barrier to ensure buffer memory operations are completed before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "memoryBarrierBuffer() void"
            }
        ]
    },
    {
        "name": "memoryBarrierSubgroup",
        "documentation": "Memory barrier to ensure subgroup memory operations are completed before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "memoryBarrierSubgroup() void"
            }
        ]
    },
    {
        "name": "memoryBarrierTexture",
        "documentation": "Memory barrier to ensure texture memory operations are completed before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "memoryBarrierTexture() void"
            }
        ]
    },
    {
        "name": "memoryBarrierWorkgroup",
        "documentation": "Memory barrier to ensure workgroup memory operations are completed before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "memoryBarrierWorkgroup() void"
            }
        ]
    },
    {
        "name": "min",
        "documentation": "Returns the minimum of x and y.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "min(x: f32, y: f32) f32"
            },
            {
                "signature": "min(x: f32x2, y: f32x2) f32x2"
            },
            {
                "signature": "min(x: f32x3, y: f32x3) f32x3"
            },
            {
                "signature": "min(x: f32x4, y: f32x4) f32x4"
            },
            {
                "signature": "min(x: f16, y: f16) f16"
            },
            {
                "signature": "min(x: f16x2, y: f16x2) f16x2"
            },
            {
                "signature": "min(x: f16x3, y: f16x3) f16x3"
            },
            {
                "signature": "min(x: f16x4, y: f16x4) f16x4"
            },
            {
                "signature": "min(x: i32, y: i32) i32"
            },
            {
                "signature": "min(x: i32x2, y: i32x2) i32x2"
            },
            {
                "signature": "min(x: i32x3, y: i32x3) i32x3"
            },
            {
                "signature": "min(x: i32x4, y: i32x4) i32x4"
            },
            {
                "signature": "min(x: i16, y: i16) i16"
            },
            {
                "signature": "min(x: i16x2, y: i16x2) i16x2"
            },
            {
                "signature": "min(x: i16x3, y: i16x3) i16x3"
            },
            {
                "signature": "min(x: i16x4, y: i16x4) i16x4"
            },
            {
                "signature": "min(x: u32, y: u32) u32"
            },
            {
                "signature": "min(x: u32x2, y: u32x2) u32x2"
            },
            {
                "signature": "min(x: u32x3, y: u32x3) u32x3"
            },
            {
                "signature": "min(x: u32x4, y: u32x4) u32x4"
            },
            {
                "signature": "min(x: u16, y: u16) u16"
            },
            {
                "signature": "min(x: u16x2, y: u16x2) u16x2"
            },
            {
                "signature": "min(x: u16x3, y: u16x3) u16x3"
            },
            {
                "signature": "min(x: u16x4, y: u16x4) u16x4"
            }
        ]
    },
    {
        "name": "normalize",
        "documentation": "Returns the normalized vector.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "normalize(val: f32x2) f32x2"
            },
            {
                "signature": "normalize(val: f32x3) f32x3"
            },
            {
                "signature": "normalize(val: f32x4) f32x4"
            },
            {
                "signature": "normalize(val: f16x2) f16x2"
            },
            {
                "signature": "normalize(val: f16x3) f16x3"
            },
            {
                "signature": "normalize(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "pixelExportColor",
        "documentation": "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "pixelExportColor(color: f32, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: f32, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: f32, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: f32, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: f32x2, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: f32x2, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: f32x2, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: f32x2, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: f32x3, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: f32x3, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: f32x3, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: f32x3, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: f32x4, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: f32x4, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: f32x4, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: f32x4, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: f16, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: f16, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: f16, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: f16, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: f16x2, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: f16x2, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: f16x2, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: f16x2, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: f16x3, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: f16x3, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: f16x3, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: f16x3, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: f16x4, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: f16x4, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: f16x4, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: f16x4, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: i32, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: i32, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: i32, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: i32, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: i32x2, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: i32x2, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: i32x2, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: i32x2, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: i32x3, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: i32x3, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: i32x3, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: i32x3, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: i32x4, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: i32x4, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: i32x4, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: i32x4, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: i16, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: i16, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: i16, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: i16, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: i16x2, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: i16x2, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: i16x2, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: i16x2, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: i16x3, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: i16x3, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: i16x3, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: i16x3, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: i16x4, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: i16x4, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: i16x4, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: i16x4, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: u32, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: u32, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: u32, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: u32, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: u32x2, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: u32x2, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: u32x2, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: u32x2, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: u32x3, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: u32x3, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: u32x3, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: u32x3, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: u32x4, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: u32x4, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: u32x4, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: u32x4, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: u16, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: u16, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: u16, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: u16, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: u16x2, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: u16x2, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: u16x2, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: u16x2, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: u16x3, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: u16x3, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: u16x3, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: u16x3, index: literal u16) void"
            },
            {
                "signature": "pixelExportColor(color: u16x4, index: literal i32) void"
            },
            {
                "signature": "pixelExportColor(color: u16x4, index: literal u32) void"
            },
            {
                "signature": "pixelExportColor(color: u16x4, index: literal i16) void"
            },
            {
                "signature": "pixelExportColor(color: u16x4, index: literal u16) void"
            }
        ]
    },
    {
        "name": "pixelGetCoordinates",
        "documentation": "Returns the post transformation coordinates of the current pixel. xy is the pixel position in non-normalized coordinates, z is the depth in the range [0, 1] or [-1, 1] based on the graphics API.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "pixelGetCoordinates() f32x4"
            },
            {
                "signature": "pixelGetCoordinates() f16x4"
            }
        ]
    },
    {
        "name": "pixelGetDepth",
        "documentation": "Returns the depth value for the current pixel",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "pixelGetDepth() f32"
            }
        ]
    },
    {
        "name": "pixelGetFrontFacing",
        "documentation": "Returns the facing direction of the current pixel",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "pixelGetFrontFacing() b8"
            }
        ]
    },
    {
        "name": "pixelGetPrimitiveIndex",
        "documentation": "Gets the primitive index being processed. If the previous stage was a GeometryShader, it must call ExportPrimitiveIndex to set the value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "pixelGetPrimitiveIndex(index: u32) u32"
            }
        ]
    },
    {
        "name": "pixelSetDepth",
        "documentation": "Sets the depth value for the current pixel",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "pixelSetDepth(val: f32) void"
            }
        ]
    },
    {
        "name": "pow",
        "documentation": "Returns the result of raising a value to the power of an exponent.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "pow(val: f32, exponent: f32) f32"
            },
            {
                "signature": "pow(val: f32x2, exponent: f32x2) f32x2"
            },
            {
                "signature": "pow(val: f32x3, exponent: f32x3) f32x3"
            },
            {
                "signature": "pow(val: f32x4, exponent: f32x4) f32x4"
            },
            {
                "signature": "pow(val: f16, exponent: f16) f16"
            },
            {
                "signature": "pow(val: f16x2, exponent: f16x2) f16x2"
            },
            {
                "signature": "pow(val: f16x3, exponent: f16x3) f16x3"
            },
            {
                "signature": "pow(val: f16x4, exponent: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "reflect",
        "documentation": "Returns the reflection of a vector through a surface using an incident vector and normal.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "reflect(incident: f32x2, normal: f32x2) f32x2"
            },
            {
                "signature": "reflect(incident: f32x3, normal: f32x3) f32x3"
            },
            {
                "signature": "reflect(incident: f32x4, normal: f32x4) f32x4"
            },
            {
                "signature": "reflect(incident: f16x2, normal: f16x2) f16x2"
            },
            {
                "signature": "reflect(incident: f16x3, normal: f16x3) f16x3"
            },
            {
                "signature": "reflect(incident: f16x4, normal: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "refract",
        "documentation": "Returns the refraction of a vector through a surface using an incident vector, normal and an index of refraction.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "refract(incident: f32x2, normal: f32x2, ior: f32x2) f32x2"
            },
            {
                "signature": "refract(incident: f32x3, normal: f32x3, ior: f32x3) f32x3"
            },
            {
                "signature": "refract(incident: f32x4, normal: f32x4, ior: f32x4) f32x4"
            },
            {
                "signature": "refract(incident: f16x2, normal: f16x2, ior: f16x2) f16x2"
            },
            {
                "signature": "refract(incident: f16x3, normal: f16x3, ior: f16x3) f16x3"
            },
            {
                "signature": "refract(incident: f16x4, normal: f16x4, ior: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "saturate",
        "documentation": "Returns the input clamped to the range [0, 1].",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "saturate(val: f32) f32"
            },
            {
                "signature": "saturate(val: f32x2) f32x2"
            },
            {
                "signature": "saturate(val: f32x3) f32x3"
            },
            {
                "signature": "saturate(val: f32x4) f32x4"
            },
            {
                "signature": "saturate(val: f16) f16"
            },
            {
                "signature": "saturate(val: f16x2) f16x2"
            },
            {
                "signature": "saturate(val: f16x3) f16x3"
            },
            {
                "signature": "saturate(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "sign",
        "documentation": "Returns the sign of the value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "sign(val: i32) i32"
            },
            {
                "signature": "sign(val: i32x2) i32x2"
            },
            {
                "signature": "sign(val: i32x3) i32x3"
            },
            {
                "signature": "sign(val: i32x4) i32x4"
            },
            {
                "signature": "sign(val: i16) i16"
            },
            {
                "signature": "sign(val: i16x2) i16x2"
            },
            {
                "signature": "sign(val: i16x3) i16x3"
            },
            {
                "signature": "sign(val: i16x4) i16x4"
            },
            {
                "signature": "sign(val: f32) f32"
            },
            {
                "signature": "sign(val: f32x2) f32x2"
            },
            {
                "signature": "sign(val: f32x3) f32x3"
            },
            {
                "signature": "sign(val: f32x4) f32x4"
            },
            {
                "signature": "sign(val: f16) f16"
            },
            {
                "signature": "sign(val: f16x2) f16x2"
            },
            {
                "signature": "sign(val: f16x3) f16x3"
            },
            {
                "signature": "sign(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "sin",
        "documentation": "Returns the sine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "sin(val: f32) f32"
            },
            {
                "signature": "sin(val: f32x2) f32x2"
            },
            {
                "signature": "sin(val: f32x3) f32x3"
            },
            {
                "signature": "sin(val: f32x4) f32x4"
            },
            {
                "signature": "sin(val: f16) f16"
            },
            {
                "signature": "sin(val: f16x2) f16x2"
            },
            {
                "signature": "sin(val: f16x3) f16x3"
            },
            {
                "signature": "sin(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "sinh",
        "documentation": "Returns the hyperbolic sine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "sinh(val: f32) f32"
            },
            {
                "signature": "sinh(val: f32x2) f32x2"
            },
            {
                "signature": "sinh(val: f32x3) f32x3"
            },
            {
                "signature": "sinh(val: f32x4) f32x4"
            },
            {
                "signature": "sinh(val: f16) f16"
            },
            {
                "signature": "sinh(val: f16x2) f16x2"
            },
            {
                "signature": "sinh(val: f16x3) f16x3"
            },
            {
                "signature": "sinh(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "smoothstep",
        "documentation": "Returns the smoothstep interpolation of the input.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "smoothstep(edge0: f32, edge1: f32, x: f32) f32"
            },
            {
                "signature": "smoothstep(edge0: f32x2, edge1: f32x2, x: f32x2) f32x2"
            },
            {
                "signature": "smoothstep(edge0: f32x3, edge1: f32x3, x: f32x3) f32x3"
            },
            {
                "signature": "smoothstep(edge0: f32x4, edge1: f32x4, x: f32x4) f32x4"
            },
            {
                "signature": "smoothstep(edge0: f16, edge1: f16, x: f16) f16"
            },
            {
                "signature": "smoothstep(edge0: f16x2, edge1: f16x2, x: f16x2) f16x2"
            },
            {
                "signature": "smoothstep(edge0: f16x3, edge1: f16x3, x: f16x3) f16x3"
            },
            {
                "signature": "smoothstep(edge0: f16x4, edge1: f16x4, x: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "sqrt",
        "documentation": "Returns the square root of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "sqrt(val: f32) f32"
            },
            {
                "signature": "sqrt(val: f32x2) f32x2"
            },
            {
                "signature": "sqrt(val: f32x3) f32x3"
            },
            {
                "signature": "sqrt(val: f32x4) f32x4"
            },
            {
                "signature": "sqrt(val: f16) f16"
            },
            {
                "signature": "sqrt(val: f16x2) f16x2"
            },
            {
                "signature": "sqrt(val: f16x3) f16x3"
            },
            {
                "signature": "sqrt(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "step",
        "documentation": "Returns 0.0 if x < edge, otherwise returns 1.0.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "step(edge: f32, x: f32) f32"
            },
            {
                "signature": "step(edge: f32x2, x: f32x2) f32x2"
            },
            {
                "signature": "step(edge: f32x3, x: f32x3) f32x3"
            },
            {
                "signature": "step(edge: f32x4, x: f32x4) f32x4"
            },
            {
                "signature": "step(edge: f16, x: f16) f16"
            },
            {
                "signature": "step(edge: f16x2, x: f16x2) f16x2"
            },
            {
                "signature": "step(edge: f16x3, x: f16x3) f16x3"
            },
            {
                "signature": "step(edge: f16x4, x: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "subgroupBallot",
        "documentation": "Constructs a 128 bit subgroup thread mask to the value of the predicate argument for each active thread",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupBallot(predicate: b8) u32x4"
            }
        ]
    },
    {
        "name": "subgroupBallotBit",
        "documentation": "Extracts a specific bit from a 128 bit subgroup thread mask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupBallotBit(mask: u32x4, index: literal u32) u32"
            }
        ]
    },
    {
        "name": "subgroupBallotBitCount",
        "documentation": "Returns the number of bits set to 1 in a 128 bit subgroup thread mask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupBallotBitCount(value: u32x4) u32"
            }
        ]
    },
    {
        "name": "subgroupBallotFirstOne",
        "documentation": "Returns the first one (ctz) in a 128 bit subgroup thread mask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupBallotFirstOne(value: u32x4) u32"
            }
        ]
    },
    {
        "name": "subgroupBallotLastOne",
        "documentation": "Returns the last one (clz) in a 128 bit subgroup thread mask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupBallotLastOne(value: u32x4) u32"
            }
        ]
    },
    {
        "name": "subgroupBroadcastFirstActiveThread",
        "documentation": "Returns the value of the provided argument for the first active thread in the subgroup",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: f32) f32"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: f32x2) f32x2"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: f32x3) f32x3"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: f32x4) f32x4"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: f16) f16"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: f16x2) f16x2"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: f16x3) f16x3"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: f16x4) f16x4"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: i32) i32"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: i32x2) i32x2"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: i32x3) i32x3"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: i32x4) i32x4"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: i16) i16"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: i16x2) i16x2"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: i16x3) i16x3"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: i16x4) i16x4"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: u32) u32"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: u32x2) u32x2"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: u32x3) u32x3"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: u32x4) u32x4"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: u16) u16"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: u16x2) u16x2"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: u16x3) u16x3"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(value: u16x4) u16x4"
            }
        ]
    },
    {
        "name": "subgroupGetFirstActiveThread",
        "documentation": "Returns the ID of the first active thread in the subgroup. If no threads are active, returns 0.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetFirstActiveThread() u32"
            }
        ]
    },
    {
        "name": "subgroupGetGreaterMask",
        "documentation": "Returns a 128 bit subgroup mask where all greater threads are active",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetGreaterMask() u32x4"
            }
        ]
    },
    {
        "name": "subgroupGetId",
        "documentation": "Returns the subgroup ID of the current thread",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetId() u32x3"
            }
        ]
    },
    {
        "name": "subgroupGetLowerMask",
        "documentation": "Returns a 128 bit subgroup mask where all lower threads are active",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetLowerMask() u32x4"
            }
        ]
    },
    {
        "name": "subgroupGetNum",
        "documentation": "Returns the number of subgroups in the workgroup",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetNum() u32x3"
            }
        ]
    },
    {
        "name": "subgroupGetSize",
        "documentation": "Returns the size of the subgroup",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetSize() u32x3"
            }
        ]
    },
    {
        "name": "subgroupGetThreadAndGreaterMask",
        "documentation": "Returns a 128 bit subgroup mask where the current thread and all greater threads are active",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetThreadAndGreaterMask() u32x4"
            }
        ]
    },
    {
        "name": "subgroupGetThreadAndLowerMask",
        "documentation": "Returns a 128 bit subgroup mask where the current thread and all lower threads are active",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetThreadAndLowerMask() u32x4"
            }
        ]
    },
    {
        "name": "subgroupGetThreadMask",
        "documentation": "Returns a 128 bit subgroup mask where the current thread is active",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetThreadMask() u32x4"
            }
        ]
    },
    {
        "name": "subgroupInverseBallot",
        "documentation": "Constructs a 128 bit subgroup thread mask to the inverse of the value of the predicate argument for each active thread",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupInverseBallot(predicate: b8) u32x4"
            }
        ]
    },
    {
        "name": "subgroupSwapDiagonal",
        "documentation": "Swaps the value at the current thread with the value at the diagonal thread in the subgroup",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupSwapDiagonal(value: f32) f32"
            },
            {
                "signature": "subgroupSwapDiagonal(value: f32x2) f32x2"
            },
            {
                "signature": "subgroupSwapDiagonal(value: f32x3) f32x3"
            },
            {
                "signature": "subgroupSwapDiagonal(value: f32x4) f32x4"
            },
            {
                "signature": "subgroupSwapDiagonal(value: f16) f16"
            },
            {
                "signature": "subgroupSwapDiagonal(value: f16x2) f16x2"
            },
            {
                "signature": "subgroupSwapDiagonal(value: f16x3) f16x3"
            },
            {
                "signature": "subgroupSwapDiagonal(value: f16x4) f16x4"
            },
            {
                "signature": "subgroupSwapDiagonal(value: i32) i32"
            },
            {
                "signature": "subgroupSwapDiagonal(value: i32x2) i32x2"
            },
            {
                "signature": "subgroupSwapDiagonal(value: i32x3) i32x3"
            },
            {
                "signature": "subgroupSwapDiagonal(value: i32x4) i32x4"
            },
            {
                "signature": "subgroupSwapDiagonal(value: i16) i16"
            },
            {
                "signature": "subgroupSwapDiagonal(value: i16x2) i16x2"
            },
            {
                "signature": "subgroupSwapDiagonal(value: i16x3) i16x3"
            },
            {
                "signature": "subgroupSwapDiagonal(value: i16x4) i16x4"
            },
            {
                "signature": "subgroupSwapDiagonal(value: u32) u32"
            },
            {
                "signature": "subgroupSwapDiagonal(value: u32x2) u32x2"
            },
            {
                "signature": "subgroupSwapDiagonal(value: u32x3) u32x3"
            },
            {
                "signature": "subgroupSwapDiagonal(value: u32x4) u32x4"
            },
            {
                "signature": "subgroupSwapDiagonal(value: u16) u16"
            },
            {
                "signature": "subgroupSwapDiagonal(value: u16x2) u16x2"
            },
            {
                "signature": "subgroupSwapDiagonal(value: u16x3) u16x3"
            },
            {
                "signature": "subgroupSwapDiagonal(value: u16x4) u16x4"
            }
        ]
    },
    {
        "name": "subgroupSwapHorizontal",
        "documentation": "Swaps the value at the current thread with the value at the horizontal thread in the subgroup",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupSwapHorizontal(value: f32) f32"
            },
            {
                "signature": "subgroupSwapHorizontal(value: f32x2) f32x2"
            },
            {
                "signature": "subgroupSwapHorizontal(value: f32x3) f32x3"
            },
            {
                "signature": "subgroupSwapHorizontal(value: f32x4) f32x4"
            },
            {
                "signature": "subgroupSwapHorizontal(value: f16) f16"
            },
            {
                "signature": "subgroupSwapHorizontal(value: f16x2) f16x2"
            },
            {
                "signature": "subgroupSwapHorizontal(value: f16x3) f16x3"
            },
            {
                "signature": "subgroupSwapHorizontal(value: f16x4) f16x4"
            },
            {
                "signature": "subgroupSwapHorizontal(value: i32) i32"
            },
            {
                "signature": "subgroupSwapHorizontal(value: i32x2) i32x2"
            },
            {
                "signature": "subgroupSwapHorizontal(value: i32x3) i32x3"
            },
            {
                "signature": "subgroupSwapHorizontal(value: i32x4) i32x4"
            },
            {
                "signature": "subgroupSwapHorizontal(value: i16) i16"
            },
            {
                "signature": "subgroupSwapHorizontal(value: i16x2) i16x2"
            },
            {
                "signature": "subgroupSwapHorizontal(value: i16x3) i16x3"
            },
            {
                "signature": "subgroupSwapHorizontal(value: i16x4) i16x4"
            },
            {
                "signature": "subgroupSwapHorizontal(value: u32) u32"
            },
            {
                "signature": "subgroupSwapHorizontal(value: u32x2) u32x2"
            },
            {
                "signature": "subgroupSwapHorizontal(value: u32x3) u32x3"
            },
            {
                "signature": "subgroupSwapHorizontal(value: u32x4) u32x4"
            },
            {
                "signature": "subgroupSwapHorizontal(value: u16) u16"
            },
            {
                "signature": "subgroupSwapHorizontal(value: u16x2) u16x2"
            },
            {
                "signature": "subgroupSwapHorizontal(value: u16x3) u16x3"
            },
            {
                "signature": "subgroupSwapHorizontal(value: u16x4) u16x4"
            }
        ]
    },
    {
        "name": "subgroupSwapVertical",
        "documentation": "Swaps the value at the current thread with the value at the vertical thread in the subgroup",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupSwapVertical(value: f32) f32"
            },
            {
                "signature": "subgroupSwapVertical(value: f32x2) f32x2"
            },
            {
                "signature": "subgroupSwapVertical(value: f32x3) f32x3"
            },
            {
                "signature": "subgroupSwapVertical(value: f32x4) f32x4"
            },
            {
                "signature": "subgroupSwapVertical(value: f16) f16"
            },
            {
                "signature": "subgroupSwapVertical(value: f16x2) f16x2"
            },
            {
                "signature": "subgroupSwapVertical(value: f16x3) f16x3"
            },
            {
                "signature": "subgroupSwapVertical(value: f16x4) f16x4"
            },
            {
                "signature": "subgroupSwapVertical(value: i32) i32"
            },
            {
                "signature": "subgroupSwapVertical(value: i32x2) i32x2"
            },
            {
                "signature": "subgroupSwapVertical(value: i32x3) i32x3"
            },
            {
                "signature": "subgroupSwapVertical(value: i32x4) i32x4"
            },
            {
                "signature": "subgroupSwapVertical(value: i16) i16"
            },
            {
                "signature": "subgroupSwapVertical(value: i16x2) i16x2"
            },
            {
                "signature": "subgroupSwapVertical(value: i16x3) i16x3"
            },
            {
                "signature": "subgroupSwapVertical(value: i16x4) i16x4"
            },
            {
                "signature": "subgroupSwapVertical(value: u32) u32"
            },
            {
                "signature": "subgroupSwapVertical(value: u32x2) u32x2"
            },
            {
                "signature": "subgroupSwapVertical(value: u32x3) u32x3"
            },
            {
                "signature": "subgroupSwapVertical(value: u32x4) u32x4"
            },
            {
                "signature": "subgroupSwapVertical(value: u16) u16"
            },
            {
                "signature": "subgroupSwapVertical(value: u16x2) u16x2"
            },
            {
                "signature": "subgroupSwapVertical(value: u16x3) u16x3"
            },
            {
                "signature": "subgroupSwapVertical(value: u16x4) u16x4"
            }
        ]
    },
    {
        "name": "tan",
        "documentation": "Returns the tangent of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "tan(val: f32) f32"
            },
            {
                "signature": "tan(val: f32x2) f32x2"
            },
            {
                "signature": "tan(val: f32x3) f32x3"
            },
            {
                "signature": "tan(val: f32x4) f32x4"
            },
            {
                "signature": "tan(val: f16) f16"
            },
            {
                "signature": "tan(val: f16x2) f16x2"
            },
            {
                "signature": "tan(val: f16x3) f16x3"
            },
            {
                "signature": "tan(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "tanh",
        "documentation": "Returns the hyperbolic tangent of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "tanh(val: f32) f32"
            },
            {
                "signature": "tanh(val: f32x2) f32x2"
            },
            {
                "signature": "tanh(val: f32x3) f32x3"
            },
            {
                "signature": "tanh(val: f32x4) f32x4"
            },
            {
                "signature": "tanh(val: f16) f16"
            },
            {
                "signature": "tanh(val: f16x2) f16x2"
            },
            {
                "signature": "tanh(val: f16x3) f16x3"
            },
            {
                "signature": "tanh(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "textureAtomicAdd",
        "documentation": "Get a pointer to a texel. This enables it to be used for atomic operations.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureAtomicAdd(uniform texture: *texture1D, coordinate: i32, value: u32) u32"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture1D, coordinate: i32, value: i32) i32"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture1D, coordinate: i32, value: u16) u16"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture1D, coordinate: i32, value: i16) i16"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture2D, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture2D, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture2D, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture2D, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture3D, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture3D, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture3D, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture3D, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *textureCube, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *textureCube, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *textureCube, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *textureCube, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture1DArray, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture1DArray, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture1DArray, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture1DArray, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture2DArray, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture2DArray, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture2DArray, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *texture2DArray, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *textureCubeArray, coordinate: i32x4, value: u32) u32"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *textureCubeArray, coordinate: i32x4, value: i32) i32"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *textureCubeArray, coordinate: i32x4, value: u16) u16"
            },
            {
                "signature": "textureAtomicAdd(uniform texture: *textureCubeArray, coordinate: i32x4, value: i16) i16"
            }
        ]
    },
    {
        "name": "textureAtomicAnd",
        "documentation": "Get a pointer to a texel. This enables it to be used for atomic operations.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureAtomicAnd(uniform texture: *texture1D, coordinate: i32, value: u32) u32"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture1D, coordinate: i32, value: i32) i32"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture1D, coordinate: i32, value: u16) u16"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture1D, coordinate: i32, value: i16) i16"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture2D, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture2D, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture2D, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture2D, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture3D, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture3D, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture3D, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture3D, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *textureCube, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *textureCube, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *textureCube, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *textureCube, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture1DArray, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture1DArray, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture1DArray, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture1DArray, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture2DArray, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture2DArray, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture2DArray, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *texture2DArray, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *textureCubeArray, coordinate: i32x4, value: u32) u32"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *textureCubeArray, coordinate: i32x4, value: i32) i32"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *textureCubeArray, coordinate: i32x4, value: u16) u16"
            },
            {
                "signature": "textureAtomicAnd(uniform texture: *textureCubeArray, coordinate: i32x4, value: i16) i16"
            }
        ]
    },
    {
        "name": "textureAtomicCompareExchange",
        "documentation": "Get a pointer to a texel. This enables it to be used for atomic operations.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture1D, coordinate: i32, value: u32) u32"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture1D, coordinate: i32, value: i32) i32"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture1D, coordinate: i32, value: u16) u16"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture1D, coordinate: i32, value: i16) i16"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture2D, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture2D, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture2D, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture2D, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture3D, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture3D, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture3D, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture3D, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *textureCube, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *textureCube, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *textureCube, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *textureCube, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture1DArray, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture1DArray, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture1DArray, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture1DArray, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture2DArray, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture2DArray, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture2DArray, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *texture2DArray, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *textureCubeArray, coordinate: i32x4, value: u32) u32"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *textureCubeArray, coordinate: i32x4, value: i32) i32"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *textureCubeArray, coordinate: i32x4, value: u16) u16"
            },
            {
                "signature": "textureAtomicCompareExchange(uniform texture: *textureCubeArray, coordinate: i32x4, value: i16) i16"
            }
        ]
    },
    {
        "name": "textureAtomicExchange",
        "documentation": "Get a pointer to a texel. This enables it to be used for atomic operations.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureAtomicExchange(uniform texture: *texture1D, coordinate: i32, value: f32) f32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture1D, coordinate: i32, value: u32) u32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture1D, coordinate: i32, value: i32) i32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture1D, coordinate: i32, value: f16) f16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture1D, coordinate: i32, value: u16) u16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture1D, coordinate: i32, value: i16) i16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture2D, coordinate: i32x2, value: f32) f32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture2D, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture2D, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture2D, coordinate: i32x2, value: f16) f16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture2D, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture2D, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture3D, coordinate: i32x3, value: f32) f32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture3D, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture3D, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture3D, coordinate: i32x3, value: f16) f16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture3D, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture3D, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *textureCube, coordinate: i32x3, value: f32) f32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *textureCube, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *textureCube, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *textureCube, coordinate: i32x3, value: f16) f16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *textureCube, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *textureCube, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture1DArray, coordinate: i32x2, value: f32) f32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture1DArray, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture1DArray, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture1DArray, coordinate: i32x2, value: f16) f16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture1DArray, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture1DArray, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture2DArray, coordinate: i32x3, value: f32) f32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture2DArray, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture2DArray, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture2DArray, coordinate: i32x3, value: f16) f16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture2DArray, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *texture2DArray, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *textureCubeArray, coordinate: i32x4, value: f32) f32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *textureCubeArray, coordinate: i32x4, value: u32) u32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *textureCubeArray, coordinate: i32x4, value: i32) i32"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *textureCubeArray, coordinate: i32x4, value: f16) f16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *textureCubeArray, coordinate: i32x4, value: u16) u16"
            },
            {
                "signature": "textureAtomicExchange(uniform texture: *textureCubeArray, coordinate: i32x4, value: i16) i16"
            }
        ]
    },
    {
        "name": "textureAtomicLoad",
        "documentation": "Get a pointer to a texel. This enables it to be used for atomic operations.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureAtomicLoad(uniform texture: *texture1D, coordinate: i32, value: f32) f32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture1D, coordinate: i32, value: u32) u32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture1D, coordinate: i32, value: i32) i32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture1D, coordinate: i32, value: f16) f16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture1D, coordinate: i32, value: u16) u16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture1D, coordinate: i32, value: i16) i16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture2D, coordinate: i32x2, value: f32) f32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture2D, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture2D, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture2D, coordinate: i32x2, value: f16) f16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture2D, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture2D, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture3D, coordinate: i32x3, value: f32) f32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture3D, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture3D, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture3D, coordinate: i32x3, value: f16) f16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture3D, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture3D, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *textureCube, coordinate: i32x3, value: f32) f32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *textureCube, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *textureCube, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *textureCube, coordinate: i32x3, value: f16) f16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *textureCube, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *textureCube, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture1DArray, coordinate: i32x2, value: f32) f32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture1DArray, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture1DArray, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture1DArray, coordinate: i32x2, value: f16) f16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture1DArray, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture1DArray, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture2DArray, coordinate: i32x3, value: f32) f32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture2DArray, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture2DArray, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture2DArray, coordinate: i32x3, value: f16) f16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture2DArray, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *texture2DArray, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *textureCubeArray, coordinate: i32x4, value: f32) f32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *textureCubeArray, coordinate: i32x4, value: u32) u32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *textureCubeArray, coordinate: i32x4, value: i32) i32"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *textureCubeArray, coordinate: i32x4, value: f16) f16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *textureCubeArray, coordinate: i32x4, value: u16) u16"
            },
            {
                "signature": "textureAtomicLoad(uniform texture: *textureCubeArray, coordinate: i32x4, value: i16) i16"
            }
        ]
    },
    {
        "name": "textureAtomicMax",
        "documentation": "Get a pointer to a texel. This enables it to be used for atomic operations.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureAtomicMax(uniform texture: *texture1D, coordinate: i32, value: u32) u32"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture1D, coordinate: i32, value: i32) i32"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture1D, coordinate: i32, value: u16) u16"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture1D, coordinate: i32, value: i16) i16"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture2D, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture2D, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture2D, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture2D, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture3D, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture3D, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture3D, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture3D, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *textureCube, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *textureCube, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *textureCube, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *textureCube, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture1DArray, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture1DArray, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture1DArray, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture1DArray, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture2DArray, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture2DArray, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture2DArray, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *texture2DArray, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *textureCubeArray, coordinate: i32x4, value: u32) u32"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *textureCubeArray, coordinate: i32x4, value: i32) i32"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *textureCubeArray, coordinate: i32x4, value: u16) u16"
            },
            {
                "signature": "textureAtomicMax(uniform texture: *textureCubeArray, coordinate: i32x4, value: i16) i16"
            }
        ]
    },
    {
        "name": "textureAtomicMin",
        "documentation": "Get a pointer to a texel. This enables it to be used for atomic operations.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureAtomicMin(uniform texture: *texture1D, coordinate: i32, value: u32) u32"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture1D, coordinate: i32, value: i32) i32"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture1D, coordinate: i32, value: u16) u16"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture1D, coordinate: i32, value: i16) i16"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture2D, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture2D, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture2D, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture2D, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture3D, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture3D, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture3D, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture3D, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *textureCube, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *textureCube, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *textureCube, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *textureCube, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture1DArray, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture1DArray, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture1DArray, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture1DArray, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture2DArray, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture2DArray, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture2DArray, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *texture2DArray, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *textureCubeArray, coordinate: i32x4, value: u32) u32"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *textureCubeArray, coordinate: i32x4, value: i32) i32"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *textureCubeArray, coordinate: i32x4, value: u16) u16"
            },
            {
                "signature": "textureAtomicMin(uniform texture: *textureCubeArray, coordinate: i32x4, value: i16) i16"
            }
        ]
    },
    {
        "name": "textureAtomicOr",
        "documentation": "Get a pointer to a texel. This enables it to be used for atomic operations.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureAtomicOr(uniform texture: *texture1D, coordinate: i32, value: u32) u32"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture1D, coordinate: i32, value: i32) i32"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture1D, coordinate: i32, value: u16) u16"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture1D, coordinate: i32, value: i16) i16"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture2D, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture2D, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture2D, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture2D, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture3D, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture3D, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture3D, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture3D, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *textureCube, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *textureCube, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *textureCube, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *textureCube, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture1DArray, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture1DArray, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture1DArray, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture1DArray, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture2DArray, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture2DArray, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture2DArray, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *texture2DArray, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *textureCubeArray, coordinate: i32x4, value: u32) u32"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *textureCubeArray, coordinate: i32x4, value: i32) i32"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *textureCubeArray, coordinate: i32x4, value: u16) u16"
            },
            {
                "signature": "textureAtomicOr(uniform texture: *textureCubeArray, coordinate: i32x4, value: i16) i16"
            }
        ]
    },
    {
        "name": "textureAtomicStore",
        "documentation": "Get a pointer to a texel. This enables it to be used for atomic operations.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureAtomicStore(uniform texture: *texture1D, coordinate: i32, value: f32) f32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture1D, coordinate: i32, value: u32) u32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture1D, coordinate: i32, value: i32) i32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture1D, coordinate: i32, value: f16) f16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture1D, coordinate: i32, value: u16) u16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture1D, coordinate: i32, value: i16) i16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture2D, coordinate: i32x2, value: f32) f32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture2D, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture2D, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture2D, coordinate: i32x2, value: f16) f16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture2D, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture2D, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture3D, coordinate: i32x3, value: f32) f32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture3D, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture3D, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture3D, coordinate: i32x3, value: f16) f16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture3D, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture3D, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *textureCube, coordinate: i32x3, value: f32) f32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *textureCube, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *textureCube, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *textureCube, coordinate: i32x3, value: f16) f16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *textureCube, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *textureCube, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture1DArray, coordinate: i32x2, value: f32) f32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture1DArray, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture1DArray, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture1DArray, coordinate: i32x2, value: f16) f16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture1DArray, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture1DArray, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture2DArray, coordinate: i32x3, value: f32) f32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture2DArray, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture2DArray, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture2DArray, coordinate: i32x3, value: f16) f16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture2DArray, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *texture2DArray, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *textureCubeArray, coordinate: i32x4, value: f32) f32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *textureCubeArray, coordinate: i32x4, value: u32) u32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *textureCubeArray, coordinate: i32x4, value: i32) i32"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *textureCubeArray, coordinate: i32x4, value: f16) f16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *textureCubeArray, coordinate: i32x4, value: u16) u16"
            },
            {
                "signature": "textureAtomicStore(uniform texture: *textureCubeArray, coordinate: i32x4, value: i16) i16"
            }
        ]
    },
    {
        "name": "textureAtomicSubtract",
        "documentation": "Get a pointer to a texel. This enables it to be used for atomic operations.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture1D, coordinate: i32, value: u32) u32"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture1D, coordinate: i32, value: i32) i32"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture1D, coordinate: i32, value: u16) u16"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture1D, coordinate: i32, value: i16) i16"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture2D, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture2D, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture2D, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture2D, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture3D, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture3D, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture3D, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture3D, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *textureCube, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *textureCube, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *textureCube, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *textureCube, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture1DArray, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture1DArray, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture1DArray, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture1DArray, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture2DArray, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture2DArray, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture2DArray, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *texture2DArray, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *textureCubeArray, coordinate: i32x4, value: u32) u32"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *textureCubeArray, coordinate: i32x4, value: i32) i32"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *textureCubeArray, coordinate: i32x4, value: u16) u16"
            },
            {
                "signature": "textureAtomicSubtract(uniform texture: *textureCubeArray, coordinate: i32x4, value: i16) i16"
            }
        ]
    },
    {
        "name": "textureAtomicXor",
        "documentation": "Get a pointer to a texel. This enables it to be used for atomic operations.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureAtomicXor(uniform texture: *texture1D, coordinate: i32, value: u32) u32"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture1D, coordinate: i32, value: i32) i32"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture1D, coordinate: i32, value: u16) u16"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture1D, coordinate: i32, value: i16) i16"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture2D, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture2D, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture2D, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture2D, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture3D, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture3D, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture3D, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture3D, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *textureCube, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *textureCube, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *textureCube, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *textureCube, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture1DArray, coordinate: i32x2, value: u32) u32"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture1DArray, coordinate: i32x2, value: i32) i32"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture1DArray, coordinate: i32x2, value: u16) u16"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture1DArray, coordinate: i32x2, value: i16) i16"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture2DArray, coordinate: i32x3, value: u32) u32"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture2DArray, coordinate: i32x3, value: i32) i32"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture2DArray, coordinate: i32x3, value: u16) u16"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *texture2DArray, coordinate: i32x3, value: i16) i16"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *textureCubeArray, coordinate: i32x4, value: u32) u32"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *textureCubeArray, coordinate: i32x4, value: i32) i32"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *textureCubeArray, coordinate: i32x4, value: u16) u16"
            },
            {
                "signature": "textureAtomicXor(uniform texture: *textureCubeArray, coordinate: i32x4, value: i16) i16"
            }
        ]
    },
    {
        "name": "textureFetch",
        "documentation": "Fetch a single texel without using a sampler value at a coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureFetch(uniform texture: *texture1D, coordinate: i32, lod: u32) f32x4"
            },
            {
                "signature": "textureFetch(uniform texture: *texture2D, coordinate: i32x2, lod: u32) f32x4"
            },
            {
                "signature": "textureFetch(uniform texture: *texture3D, coordinate: i32x3, lod: u32) f32x4"
            },
            {
                "signature": "textureFetch(uniform texture: *texture1DArray, coordinate: i32x2, lod: u32) f32x4"
            },
            {
                "signature": "textureFetch(uniform texture: *texture2DArray, coordinate: i32x3, lod: u32) f32x4"
            },
            {
                "signature": "textureFetch(uniform texture: *texture2DMS, coordinate: i32x2, lod: u32) f32x4"
            },
            {
                "signature": "textureFetch(uniform texture: *texture2DMSArray, coordinate: i32x3, lod: u32) f32x4"
            }
        ]
    },
    {
        "name": "textureFetchSample",
        "documentation": "Fetch a single texel without using a sampler value at a coordinate at a specific sample index",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureFetchSample(uniform texture: *texture1D, coordinate: i32, lod: u32, sample: u32) f32x4"
            },
            {
                "signature": "textureFetchSample(uniform texture: *texture2D, coordinate: i32x2, lod: u32, sample: u32) f32x4"
            },
            {
                "signature": "textureFetchSample(uniform texture: *texture3D, coordinate: i32x3, lod: u32, sample: u32) f32x4"
            },
            {
                "signature": "textureFetchSample(uniform texture: *texture1DArray, coordinate: i32x2, lod: u32, sample: u32) f32x4"
            },
            {
                "signature": "textureFetchSample(uniform texture: *texture2DArray, coordinate: i32x3, lod: u32, sample: u32) f32x4"
            },
            {
                "signature": "textureFetchSample(uniform texture: *texture2DMS, coordinate: i32x2, lod: u32, sample: u32) f32x4"
            },
            {
                "signature": "textureFetchSample(uniform texture: *texture2DMSArray, coordinate: i32x3, lod: u32, sample: u32) f32x4"
            }
        ]
    },
    {
        "name": "textureGather",
        "documentation": "Gather 4 values of a quad at a coordinate where the component is the channel to read",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureGather(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: i32x2, component: i32) f32x4"
            },
            {
                "signature": "textureGather(uniform texture: *textureSampled2D, coordinate: i32x2, component: i32) f32x4"
            },
            {
                "signature": "textureGather(uniform texture: *textureCube, uniform sampler: *sampler, coordinate: i32x3, component: i32) f32x4"
            },
            {
                "signature": "textureGather(uniform texture: *textureSampledCube, coordinate: i32x3, component: i32) f32x4"
            },
            {
                "signature": "textureGather(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: i32x3, component: i32) f32x4"
            },
            {
                "signature": "textureGather(uniform texture: *textureSampled2DArray, coordinate: i32x3, component: i32) f32x4"
            },
            {
                "signature": "textureGather(uniform texture: *textureCubeArray, uniform sampler: *sampler, coordinate: i32x4, component: i32) f32x4"
            },
            {
                "signature": "textureGather(uniform texture: *textureSampledCubeArray, coordinate: i32x4, component: i32) f32x4"
            }
        ]
    },
    {
        "name": "textureGatherOffset",
        "documentation": "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureGatherOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: i32x2, component: i32, offset: u32) f32x4"
            },
            {
                "signature": "textureGatherOffset(uniform texture: *textureSampled2D, coordinate: i32x2, component: i32, offset: u32) f32x4"
            },
            {
                "signature": "textureGatherOffset(uniform texture: *textureCube, uniform sampler: *sampler, coordinate: i32x3, component: i32, offset: u32) f32x4"
            },
            {
                "signature": "textureGatherOffset(uniform texture: *textureSampledCube, coordinate: i32x3, component: i32, offset: u32) f32x4"
            },
            {
                "signature": "textureGatherOffset(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: i32x3, component: i32, offset: u32) f32x4"
            },
            {
                "signature": "textureGatherOffset(uniform texture: *textureSampled2DArray, coordinate: i32x3, component: i32, offset: u32) f32x4"
            },
            {
                "signature": "textureGatherOffset(uniform texture: *textureCubeArray, uniform sampler: *sampler, coordinate: i32x4, component: i32, offset: u32) f32x4"
            },
            {
                "signature": "textureGatherOffset(uniform texture: *textureSampledCubeArray, coordinate: i32x4, component: i32, offset: u32) f32x4"
            }
        ]
    },
    {
        "name": "textureGetMips",
        "documentation": "Get the number of mips in a texture",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureGetMips(uniform texture: *texture1D) texture1D"
            },
            {
                "signature": "textureGetMips(uniform texture: *texture2D) texture2D"
            },
            {
                "signature": "textureGetMips(uniform texture: *texture3D) texture3D"
            },
            {
                "signature": "textureGetMips(uniform texture: *textureCube) textureCube"
            },
            {
                "signature": "textureGetMips(uniform texture: *texture1DArray) texture1DArray"
            },
            {
                "signature": "textureGetMips(uniform texture: *texture2DArray) texture2DArray"
            },
            {
                "signature": "textureGetMips(uniform texture: *textureCubeArray) textureCubeArray"
            }
        ]
    },
    {
        "name": "textureGetSampledMip",
        "documentation": "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureGetSampledMip(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform texture: *textureSampled1D, coordinate: f32) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform texture: *textureSampled2D, coordinate: f32x2) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform texture: *textureSampled3D, coordinate: f32x3) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform texture: *textureCube, uniform sampler: *sampler, coordinate: f32x3) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform texture: *textureSampledCube, coordinate: f32x3) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform texture: *textureSampled1DArray, coordinate: f32x2) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform texture: *textureSampled2DArray, coordinate: f32x3) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform texture: *textureCubeArray, uniform sampler: *sampler, coordinate: f32x4) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform texture: *textureSampledCubeArray, coordinate: f32x4) f32x2"
            }
        ]
    },
    {
        "name": "textureGetSamples",
        "documentation": "Get the number of samples in a multisampled texture",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureGetSamples(uniform texture: *texture2DMS) texture2DMS"
            },
            {
                "signature": "textureGetSamples(uniform texture: *texture2DMSArray) texture2DMSArray"
            }
        ]
    },
    {
        "name": "textureGetSize",
        "documentation": "Get the size of a texture",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureGetSize(uniform texture: *mutable texture1D) u32"
            },
            {
                "signature": "textureGetSize(uniform texture: *mutable texture2D) u32x2"
            },
            {
                "signature": "textureGetSize(uniform texture: *mutable texture3D) u32x3"
            },
            {
                "signature": "textureGetSize(uniform texture: *mutable textureCube) u32x3"
            },
            {
                "signature": "textureGetSize(uniform texture: *mutable texture1DArray) u32x2"
            },
            {
                "signature": "textureGetSize(uniform texture: *mutable texture2DArray) u32x3"
            },
            {
                "signature": "textureGetSize(uniform texture: *mutable textureCubeArray) u32x4"
            }
        ]
    },
    {
        "name": "textureGetSizeMip",
        "documentation": "Get the size of a texture at a specific mip level",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureGetSizeMip(uniform texture: *texture1D, mip: u32) u32"
            },
            {
                "signature": "textureGetSizeMip(uniform texture: *texture2D, mip: u32) u32x2"
            },
            {
                "signature": "textureGetSizeMip(uniform texture: *texture3D, mip: u32) u32x3"
            },
            {
                "signature": "textureGetSizeMip(uniform texture: *textureCube, mip: u32) u32x3"
            },
            {
                "signature": "textureGetSizeMip(uniform texture: *texture1DArray, mip: u32) u32x2"
            },
            {
                "signature": "textureGetSizeMip(uniform texture: *texture2DArray, mip: u32) u32x3"
            },
            {
                "signature": "textureGetSizeMip(uniform texture: *textureCubeArray, mip: u32) u32x4"
            }
        ]
    },
    {
        "name": "textureLoad",
        "documentation": "Load a single texel without using a sampler value at an absolute non-normalized coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureLoad(uniform texture: *mutable texture1D, coordinate: i32) f32x4"
            },
            {
                "signature": "textureLoad(uniform texture: *mutable texture2D, coordinate: i32x2) f32x4"
            },
            {
                "signature": "textureLoad(uniform texture: *mutable texture3D, coordinate: i32x3) f32x4"
            },
            {
                "signature": "textureLoad(uniform texture: *mutable textureCube, coordinate: i32x3) f32x4"
            },
            {
                "signature": "textureLoad(uniform texture: *mutable texture1DArray, coordinate: i32x2) f32x4"
            },
            {
                "signature": "textureLoad(uniform texture: *mutable texture2DArray, coordinate: i32x3) f32x4"
            },
            {
                "signature": "textureLoad(uniform texture: *mutable textureCubeArray, coordinate: i32x4) f32x4"
            },
            {
                "signature": "textureLoad(uniform texture: *mutable texture2DMS, coordinate: i32x2) f32x4"
            },
            {
                "signature": "textureLoad(uniform texture: *mutable texture2DMSArray, coordinate: i32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureLoadMip",
        "documentation": "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureLoadMip(uniform texture: *mutable texture1D, coordinate: i32, mip: i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform texture: *mutable texture2D, coordinate: i32x2, mip: i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform texture: *mutable texture3D, coordinate: i32x3, mip: i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform texture: *mutable textureCube, coordinate: i32x3, mip: i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform texture: *mutable texture1DArray, coordinate: i32x2, mip: i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform texture: *mutable texture2DArray, coordinate: i32x3, mip: i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform texture: *mutable textureCubeArray, coordinate: i32x4, mip: i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform texture: *mutable texture2DMS, coordinate: i32x2, mip: i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform texture: *mutable texture2DMSArray, coordinate: i32x3, mip: i32) f32x4"
            }
        ]
    },
    {
        "name": "texturePixelCacheLoad",
        "documentation": "Load a pixel value from a previous thread",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "texturePixelCacheLoad(uniform texture: *pixelCache) pixelCache"
            },
            {
                "signature": "texturePixelCacheLoad(uniform texture: *pixelCacheMS, sample: u32) pixelCacheMS"
            }
        ]
    },
    {
        "name": "textureSample",
        "documentation": "Sample a texture at coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSample(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32) f32x4"
            },
            {
                "signature": "textureSample(uniform texture: *textureSampled1D, coordinate: f32) f32x4"
            },
            {
                "signature": "textureSample(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2) f32x4"
            },
            {
                "signature": "textureSample(uniform texture: *textureSampled2D, coordinate: f32x2) f32x4"
            },
            {
                "signature": "textureSample(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3) f32x4"
            },
            {
                "signature": "textureSample(uniform texture: *textureSampled3D, coordinate: f32x3) f32x4"
            },
            {
                "signature": "textureSample(uniform texture: *textureCube, uniform sampler: *sampler, coordinate: f32x3) f32x4"
            },
            {
                "signature": "textureSample(uniform texture: *textureSampledCube, coordinate: f32x3) f32x4"
            },
            {
                "signature": "textureSample(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2) f32x4"
            },
            {
                "signature": "textureSample(uniform texture: *textureSampled1DArray, coordinate: f32x2) f32x4"
            },
            {
                "signature": "textureSample(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3) f32x4"
            },
            {
                "signature": "textureSample(uniform texture: *textureSampled2DArray, coordinate: f32x3) f32x4"
            },
            {
                "signature": "textureSample(uniform texture: *textureCubeArray, uniform sampler: *sampler, coordinate: f32x4) f32x4"
            },
            {
                "signature": "textureSample(uniform texture: *textureSampledCubeArray, coordinate: f32x4) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleBias",
        "documentation": "Sample a texture at coordinate with a mip bias",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBias(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, bias: f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform texture: *textureSampled1D, coordinate: f32, bias: f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, bias: f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform texture: *textureSampled2D, coordinate: f32x2, bias: f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, bias: f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform texture: *textureSampled3D, coordinate: f32x3, bias: f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform texture: *textureCube, uniform sampler: *sampler, coordinate: f32x3, bias: f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform texture: *textureSampledCube, coordinate: f32x3, bias: f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2, bias: f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform texture: *textureSampled1DArray, coordinate: f32x2, bias: f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3, bias: f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform texture: *textureSampled2DArray, coordinate: f32x3, bias: f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform texture: *textureCubeArray, uniform sampler: *sampler, coordinate: f32x4, bias: f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform texture: *textureSampledCubeArray, coordinate: f32x4, bias: f32) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleBiasCompare",
        "documentation": "Sample a texture at coordinate with a mip bias with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBiasCompare(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, bias: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform texture: *textureSampled1D, coordinate: f32, bias: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, bias: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform texture: *textureSampled2D, coordinate: f32x2, bias: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, bias: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform texture: *textureSampled3D, coordinate: f32x3, bias: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2, bias: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform texture: *textureSampled1DArray, coordinate: f32x2, bias: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3, bias: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform texture: *textureSampled2DArray, coordinate: f32x3, bias: f32, compare: f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleBiasCompareOffset",
        "documentation": "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBiasCompareOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, bias: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform texture: *textureSampled1D, coordinate: f32, bias: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, bias: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform texture: *textureSampled2D, coordinate: f32x2, bias: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, bias: f32, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform texture: *textureSampled3D, coordinate: f32x3, bias: f32, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2, bias: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform texture: *textureSampled1DArray, coordinate: f32x2, bias: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3, bias: f32, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform texture: *textureSampled2DArray, coordinate: f32x3, bias: f32, compare: f32, offset: f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleBiasOffset",
        "documentation": "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBiasOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, bias: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform texture: *textureSampled1D, coordinate: f32, bias: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, bias: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform texture: *textureSampled2D, coordinate: f32x2, bias: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, bias: f32, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform texture: *textureSampled3D, coordinate: f32x3, bias: f32, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2, bias: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform texture: *textureSampled1DArray, coordinate: f32x2, bias: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3, bias: f32, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform texture: *textureSampled2DArray, coordinate: f32x3, bias: f32, offset: f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleBiasProj",
        "documentation": "Sample a texture at coordinate with a mip bias with projection",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBiasProj(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, bias: f32, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleBiasProj(uniform texture: *textureSampled1D, coordinate: f32, bias: f32, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleBiasProj(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, bias: f32, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleBiasProj(uniform texture: *textureSampled2D, coordinate: f32x2, bias: f32, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleBiasProj(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, bias: f32, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleBiasProj(uniform texture: *textureSampled3D, coordinate: f32x3, bias: f32, proj: f32) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleBiasProjCompare",
        "documentation": "Sample a texture at coordinate with a mip bias with projection with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBiasProjCompare(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, bias: f32, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleBiasProjCompare(uniform texture: *textureSampled1D, coordinate: f32, bias: f32, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleBiasProjCompare(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, bias: f32, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleBiasProjCompare(uniform texture: *textureSampled2D, coordinate: f32x2, bias: f32, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleBiasProjCompare(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, bias: f32, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleBiasProjCompare(uniform texture: *textureSampled3D, coordinate: f32x3, bias: f32, proj: f32, compare: f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleBiasProjCompareOffset",
        "documentation": "Sample a texture at coordinate with a mip bias with projection with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBiasProjCompareOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, bias: f32, proj: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleBiasProjCompareOffset(uniform texture: *textureSampled1D, coordinate: f32, bias: f32, proj: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleBiasProjCompareOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, bias: f32, proj: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleBiasProjCompareOffset(uniform texture: *textureSampled2D, coordinate: f32x2, bias: f32, proj: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleBiasProjCompareOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, bias: f32, proj: f32, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleBiasProjCompareOffset(uniform texture: *textureSampled3D, coordinate: f32x3, bias: f32, proj: f32, compare: f32, offset: f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleBiasProjOffset",
        "documentation": "Sample a texture at coordinate with a mip bias with projection with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBiasProjOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, bias: f32, proj: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleBiasProjOffset(uniform texture: *textureSampled1D, coordinate: f32, bias: f32, proj: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleBiasProjOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, bias: f32, proj: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleBiasProjOffset(uniform texture: *textureSampled2D, coordinate: f32x2, bias: f32, proj: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleBiasProjOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, bias: f32, proj: f32, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleBiasProjOffset(uniform texture: *textureSampled3D, coordinate: f32x3, bias: f32, proj: f32, offset: f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleCompare",
        "documentation": "Sample a texture at coordinate with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleCompare(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform texture: *textureSampled1D, coordinate: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, compare: f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform texture: *textureSampled2D, coordinate: f32x2, compare: f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, compare: f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform texture: *textureSampled3D, coordinate: f32x3, compare: f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2, compare: f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform texture: *textureSampled1DArray, coordinate: f32x2, compare: f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3, compare: f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform texture: *textureSampled2DArray, coordinate: f32x3, compare: f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleCompareOffset",
        "documentation": "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleCompareOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform texture: *textureSampled1D, coordinate: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform texture: *textureSampled2D, coordinate: f32x2, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform texture: *textureSampled3D, coordinate: f32x3, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform texture: *textureSampled1DArray, coordinate: f32x2, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform texture: *textureSampled2DArray, coordinate: f32x3, compare: f32, offset: f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleGrad",
        "documentation": "Sample a texture at coordinate with explicit gradient",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGrad(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, grad_x: f32, grad_y: f32) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform texture: *textureSampled1D, coordinate: f32, grad_x: f32, grad_y: f32) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform texture: *textureSampled2D, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform texture: *textureSampled3D, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform texture: *textureCube, uniform sampler: *sampler, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform texture: *textureSampledCube, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform texture: *textureSampled1DArray, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform texture: *textureSampled2DArray, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform texture: *textureCubeArray, uniform sampler: *sampler, coordinate: f32x4, grad_x: f32x4, grad_y: f32x4) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform texture: *textureSampledCubeArray, coordinate: f32x4, grad_x: f32x4, grad_y: f32x4) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleGradCompare",
        "documentation": "Sample a texture at coordinate with explicit gradient with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGradCompare(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, grad_x: f32, grad_y: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform texture: *textureSampled1D, coordinate: f32, grad_x: f32, grad_y: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, compare: f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform texture: *textureSampled2D, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, compare: f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, compare: f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform texture: *textureSampled3D, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, compare: f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, compare: f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform texture: *textureSampled1DArray, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, compare: f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, compare: f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform texture: *textureSampled2DArray, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, compare: f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleGradCompareOffset",
        "documentation": "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGradCompareOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, grad_x: f32, grad_y: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform texture: *textureSampled1D, coordinate: f32, grad_x: f32, grad_y: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform texture: *textureSampled2D, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform texture: *textureSampled3D, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform texture: *textureSampled1DArray, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform texture: *textureSampled2DArray, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, compare: f32, offset: f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleGradOffset",
        "documentation": "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGradOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, grad_x: f32, grad_y: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform texture: *textureSampled1D, coordinate: f32, grad_x: f32, grad_y: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform texture: *textureSampled2D, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform texture: *textureSampled3D, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform texture: *textureSampled1DArray, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform texture: *textureSampled2DArray, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, offset: f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleGradProj",
        "documentation": "Sample a texture at coordinate with explicit gradient with projection",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGradProj(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, grad_x: f32, grad_y: f32, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleGradProj(uniform texture: *textureSampled1D, coordinate: f32, grad_x: f32, grad_y: f32, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleGradProj(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleGradProj(uniform texture: *textureSampled2D, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleGradProj(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleGradProj(uniform texture: *textureSampled3D, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, proj: f32) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleGradProjCompare",
        "documentation": "Sample a texture at coordinate with explicit gradient with projection with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGradProjCompare(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, grad_x: f32, grad_y: f32, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleGradProjCompare(uniform texture: *textureSampled1D, coordinate: f32, grad_x: f32, grad_y: f32, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleGradProjCompare(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleGradProjCompare(uniform texture: *textureSampled2D, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleGradProjCompare(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleGradProjCompare(uniform texture: *textureSampled3D, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, proj: f32, compare: f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleGradProjCompareOffset",
        "documentation": "Sample a texture at coordinate with explicit gradient with projection with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGradProjCompareOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, grad_x: f32, grad_y: f32, proj: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleGradProjCompareOffset(uniform texture: *textureSampled1D, coordinate: f32, grad_x: f32, grad_y: f32, proj: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleGradProjCompareOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, proj: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleGradProjCompareOffset(uniform texture: *textureSampled2D, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, proj: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleGradProjCompareOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, proj: f32, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleGradProjCompareOffset(uniform texture: *textureSampled3D, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, proj: f32, compare: f32, offset: f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleGradProjOffset",
        "documentation": "Sample a texture at coordinate with explicit gradient with projection with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGradProjOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, grad_x: f32, grad_y: f32, proj: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleGradProjOffset(uniform texture: *textureSampled1D, coordinate: f32, grad_x: f32, grad_y: f32, proj: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleGradProjOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, proj: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleGradProjOffset(uniform texture: *textureSampled2D, coordinate: f32x2, grad_x: f32x2, grad_y: f32x2, proj: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleGradProjOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, proj: f32, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleGradProjOffset(uniform texture: *textureSampled3D, coordinate: f32x3, grad_x: f32x3, grad_y: f32x3, proj: f32, offset: f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleLod",
        "documentation": "Sample a texture at coordinate with explicit level of detail",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLod(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, lod: f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform texture: *textureSampled1D, coordinate: f32, lod: f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, lod: f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform texture: *textureSampled2D, coordinate: f32x2, lod: f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, lod: f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform texture: *textureSampled3D, coordinate: f32x3, lod: f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform texture: *textureCube, uniform sampler: *sampler, coordinate: f32x3, lod: f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform texture: *textureSampledCube, coordinate: f32x3, lod: f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2, lod: f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform texture: *textureSampled1DArray, coordinate: f32x2, lod: f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3, lod: f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform texture: *textureSampled2DArray, coordinate: f32x3, lod: f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform texture: *textureCubeArray, uniform sampler: *sampler, coordinate: f32x4, lod: f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform texture: *textureSampledCubeArray, coordinate: f32x4, lod: f32) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleLodCompare",
        "documentation": "Sample a texture at coordinate with explicit level of detail with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLodCompare(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, lod: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform texture: *textureSampled1D, coordinate: f32, lod: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, lod: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform texture: *textureSampled2D, coordinate: f32x2, lod: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, lod: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform texture: *textureSampled3D, coordinate: f32x3, lod: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2, lod: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform texture: *textureSampled1DArray, coordinate: f32x2, lod: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3, lod: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform texture: *textureSampled2DArray, coordinate: f32x3, lod: f32, compare: f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleLodCompareOffset",
        "documentation": "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLodCompareOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, lod: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform texture: *textureSampled1D, coordinate: f32, lod: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, lod: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform texture: *textureSampled2D, coordinate: f32x2, lod: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, lod: f32, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform texture: *textureSampled3D, coordinate: f32x3, lod: f32, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2, lod: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform texture: *textureSampled1DArray, coordinate: f32x2, lod: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3, lod: f32, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform texture: *textureSampled2DArray, coordinate: f32x3, lod: f32, compare: f32, offset: f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleLodOffset",
        "documentation": "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLodOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, lod: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform texture: *textureSampled1D, coordinate: f32, lod: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, lod: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform texture: *textureSampled2D, coordinate: f32x2, lod: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, lod: f32, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform texture: *textureSampled3D, coordinate: f32x3, lod: f32, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2, lod: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform texture: *textureSampled1DArray, coordinate: f32x2, lod: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3, lod: f32, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform texture: *textureSampled2DArray, coordinate: f32x3, lod: f32, offset: f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleLodProj",
        "documentation": "Sample a texture at coordinate with explicit level of detail with projection",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLodProj(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, lod: f32, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleLodProj(uniform texture: *textureSampled1D, coordinate: f32, lod: f32, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleLodProj(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, lod: f32, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleLodProj(uniform texture: *textureSampled2D, coordinate: f32x2, lod: f32, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleLodProj(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, lod: f32, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleLodProj(uniform texture: *textureSampled3D, coordinate: f32x3, lod: f32, proj: f32) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleLodProjCompare",
        "documentation": "Sample a texture at coordinate with explicit level of detail with projection with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLodProjCompare(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, lod: f32, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleLodProjCompare(uniform texture: *textureSampled1D, coordinate: f32, lod: f32, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleLodProjCompare(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, lod: f32, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleLodProjCompare(uniform texture: *textureSampled2D, coordinate: f32x2, lod: f32, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleLodProjCompare(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, lod: f32, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleLodProjCompare(uniform texture: *textureSampled3D, coordinate: f32x3, lod: f32, proj: f32, compare: f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleLodProjCompareOffset",
        "documentation": "Sample a texture at coordinate with explicit level of detail with projection with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLodProjCompareOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, lod: f32, proj: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleLodProjCompareOffset(uniform texture: *textureSampled1D, coordinate: f32, lod: f32, proj: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleLodProjCompareOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, lod: f32, proj: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleLodProjCompareOffset(uniform texture: *textureSampled2D, coordinate: f32x2, lod: f32, proj: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleLodProjCompareOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, lod: f32, proj: f32, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleLodProjCompareOffset(uniform texture: *textureSampled3D, coordinate: f32x3, lod: f32, proj: f32, compare: f32, offset: f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleLodProjOffset",
        "documentation": "Sample a texture at coordinate with explicit level of detail with projection with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLodProjOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, lod: f32, proj: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleLodProjOffset(uniform texture: *textureSampled1D, coordinate: f32, lod: f32, proj: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleLodProjOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, lod: f32, proj: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleLodProjOffset(uniform texture: *textureSampled2D, coordinate: f32x2, lod: f32, proj: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleLodProjOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, lod: f32, proj: f32, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleLodProjOffset(uniform texture: *textureSampled3D, coordinate: f32x3, lod: f32, proj: f32, offset: f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleOffset",
        "documentation": "Sample a texture at coordinate with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform texture: *textureSampled1D, coordinate: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform texture: *textureSampled2D, coordinate: f32x2, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform texture: *textureSampled3D, coordinate: f32x3, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform texture: *texture1DArray, uniform sampler: *sampler, coordinate: f32x2, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform texture: *textureSampled1DArray, coordinate: f32x2, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform texture: *texture2DArray, uniform sampler: *sampler, coordinate: f32x3, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform texture: *textureSampled2DArray, coordinate: f32x3, offset: f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleProj",
        "documentation": "Sample a texture at coordinate with projection",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleProj(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleProj(uniform texture: *textureSampled1D, coordinate: f32, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleProj(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleProj(uniform texture: *textureSampled2D, coordinate: f32x2, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleProj(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, proj: f32) f32x4"
            },
            {
                "signature": "textureSampleProj(uniform texture: *textureSampled3D, coordinate: f32x3, proj: f32) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleProjCompare",
        "documentation": "Sample a texture at coordinate with projection with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleProjCompare(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleProjCompare(uniform texture: *textureSampled1D, coordinate: f32, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleProjCompare(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleProjCompare(uniform texture: *textureSampled2D, coordinate: f32x2, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleProjCompare(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, proj: f32, compare: f32) f32"
            },
            {
                "signature": "textureSampleProjCompare(uniform texture: *textureSampled3D, coordinate: f32x3, proj: f32, compare: f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleProjCompareOffset",
        "documentation": "Sample a texture at coordinate with projection with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleProjCompareOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, proj: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleProjCompareOffset(uniform texture: *textureSampled1D, coordinate: f32, proj: f32, compare: f32, offset: f32) f32"
            },
            {
                "signature": "textureSampleProjCompareOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, proj: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleProjCompareOffset(uniform texture: *textureSampled2D, coordinate: f32x2, proj: f32, compare: f32, offset: f32x2) f32"
            },
            {
                "signature": "textureSampleProjCompareOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, proj: f32, compare: f32, offset: f32x3) f32"
            },
            {
                "signature": "textureSampleProjCompareOffset(uniform texture: *textureSampled3D, coordinate: f32x3, proj: f32, compare: f32, offset: f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleProjOffset",
        "documentation": "Sample a texture at coordinate with projection with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleProjOffset(uniform texture: *texture1D, uniform sampler: *sampler, coordinate: f32, proj: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleProjOffset(uniform texture: *textureSampled1D, coordinate: f32, proj: f32, offset: f32) f32x4"
            },
            {
                "signature": "textureSampleProjOffset(uniform texture: *texture2D, uniform sampler: *sampler, coordinate: f32x2, proj: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleProjOffset(uniform texture: *textureSampled2D, coordinate: f32x2, proj: f32, offset: f32x2) f32x4"
            },
            {
                "signature": "textureSampleProjOffset(uniform texture: *texture3D, uniform sampler: *sampler, coordinate: f32x3, proj: f32, offset: f32x3) f32x4"
            },
            {
                "signature": "textureSampleProjOffset(uniform texture: *textureSampled3D, coordinate: f32x3, proj: f32, offset: f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureStore",
        "documentation": "Store a single texel without using a sampler value at an absolute non-normalized coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureStore(uniform texture: *mutable texture1D, coordinate: i32, value: f32x4) void"
            },
            {
                "signature": "textureStore(uniform texture: *mutable texture2D, coordinate: i32x2, value: f32x4) void"
            },
            {
                "signature": "textureStore(uniform texture: *mutable texture3D, coordinate: i32x3, value: f32x4) void"
            },
            {
                "signature": "textureStore(uniform texture: *mutable textureCube, coordinate: i32x3, value: f32x4) void"
            },
            {
                "signature": "textureStore(uniform texture: *mutable texture1DArray, coordinate: i32x2, value: f32x4) void"
            },
            {
                "signature": "textureStore(uniform texture: *mutable texture2DArray, coordinate: i32x3, value: f32x4) void"
            },
            {
                "signature": "textureStore(uniform texture: *mutable textureCubeArray, coordinate: i32x4, value: f32x4) void"
            },
            {
                "signature": "textureStore(uniform texture: *mutable texture2DMS, coordinate: i32x2, value: f32x4) void"
            },
            {
                "signature": "textureStore(uniform texture: *mutable texture2DMSArray, coordinate: i32x3, value: f32x4) void"
            }
        ]
    },
    {
        "name": "textureStoreMip",
        "documentation": "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureStoreMip(uniform texture: *mutable texture1D, coordinate: i32, mip: i32, value: f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform texture: *mutable texture2D, coordinate: i32x2, mip: i32, value: f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform texture: *mutable texture3D, coordinate: i32x3, mip: i32, value: f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform texture: *mutable textureCube, coordinate: i32x3, mip: i32, value: f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform texture: *mutable texture1DArray, coordinate: i32x2, mip: i32, value: f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform texture: *mutable texture2DArray, coordinate: i32x3, mip: i32, value: f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform texture: *mutable textureCubeArray, coordinate: i32x4, mip: i32, value: f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform texture: *mutable texture2DMS, coordinate: i32x2, mip: i32, value: f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform texture: *mutable texture2DMSArray, coordinate: i32x3, mip: i32, value: f32x4) void"
            }
        ]
    },
    {
        "name": "transpose",
        "documentation": "Returns the transposed matrix.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "transpose(val: f32x2x2) f32x2x2"
            },
            {
                "signature": "transpose(val: f16x2x2) f16x2x2"
            },
            {
                "signature": "transpose(val: f32x2x3) f32x2x3"
            },
            {
                "signature": "transpose(val: f16x2x3) f16x2x3"
            },
            {
                "signature": "transpose(val: f32x2x4) f32x2x4"
            },
            {
                "signature": "transpose(val: f16x2x4) f16x2x4"
            },
            {
                "signature": "transpose(val: f32x3x2) f32x3x2"
            },
            {
                "signature": "transpose(val: f16x3x2) f16x3x2"
            },
            {
                "signature": "transpose(val: f32x3x3) f32x3x3"
            },
            {
                "signature": "transpose(val: f16x3x3) f16x3x3"
            },
            {
                "signature": "transpose(val: f32x3x4) f32x3x4"
            },
            {
                "signature": "transpose(val: f16x3x4) f16x3x4"
            },
            {
                "signature": "transpose(val: f32x4x2) f32x4x2"
            },
            {
                "signature": "transpose(val: f16x4x2) f16x4x2"
            },
            {
                "signature": "transpose(val: f32x4x3) f32x4x3"
            },
            {
                "signature": "transpose(val: f16x4x3) f16x4x3"
            },
            {
                "signature": "transpose(val: f32x4x4) f32x4x4"
            },
            {
                "signature": "transpose(val: f16x4x4) f16x4x4"
            }
        ]
    },
    {
        "name": "trunc",
        "documentation": "Returns the integer part of the input, removing any fractional part.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "trunc(val: f32) f32"
            },
            {
                "signature": "trunc(val: f32x2) f32x2"
            },
            {
                "signature": "trunc(val: f32x3) f32x3"
            },
            {
                "signature": "trunc(val: f32x4) f32x4"
            },
            {
                "signature": "trunc(val: f16) f16"
            },
            {
                "signature": "trunc(val: f16x2) f16x2"
            },
            {
                "signature": "trunc(val: f16x3) f16x3"
            },
            {
                "signature": "trunc(val: f16x4) f16x4"
            }
        ]
    },
    {
        "name": "vertexExportCoordinates",
        "documentation": "Exports the value as the vertex position to the rasterizer. This function must be called at least once in a vertex shader. This is the same as the `SV_POSITION` in HLSL or `gl_Position` in GLSL.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexExportCoordinates(val: f32x4) void"
            },
            {
                "signature": "vertexExportCoordinates(val: f16x4) void"
            }
        ]
    },
    {
        "name": "vertexGetBaseIndex",
        "documentation": "Returns the base index of the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexGetBaseIndex() u32"
            }
        ]
    },
    {
        "name": "vertexGetBaseInstanceIndex",
        "documentation": "Returns the base instance index of the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexGetBaseInstanceIndex() u32"
            }
        ]
    },
    {
        "name": "vertexGetDrawIndex",
        "documentation": "Returns the draw index of the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexGetDrawIndex() u32"
            }
        ]
    },
    {
        "name": "vertexGetIndex",
        "documentation": "Returns the index of the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexGetIndex() u32"
            }
        ]
    },
    {
        "name": "vertexGetInstanceIndex",
        "documentation": "Returns the instance index of the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexGetInstanceIndex() u32"
            }
        ]
    },
    {
        "name": "vertexGetOutputLayer",
        "documentation": "Returns the output layer for the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexGetOutputLayer() u32"
            }
        ]
    },
    {
        "name": "vertexGetOutputViewport",
        "documentation": "Returns the output viewport for the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexGetOutputViewport() u32"
            }
        ]
    },
    {
        "name": "vertexSetOutputLayer",
        "documentation": "Sets the output layer for the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexSetOutputLayer(val: u16) void"
            },
            {
                "signature": "vertexSetOutputLayer(val: u32) void"
            }
        ]
    },
    {
        "name": "vertexSetOutputViewport",
        "documentation": "Sets the output viewport for the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexSetOutputViewport(val: u16) void"
            },
            {
                "signature": "vertexSetOutputViewport(val: u32) void"
            }
        ]
    }
]