[
    {
        "name": "abs",
        "documentation": "Returns the absolute value of the input.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "abs(i32) i32"
            },
            {
                "signature": "abs(i32x2) i32x2"
            },
            {
                "signature": "abs(i32x3) i32x3"
            },
            {
                "signature": "abs(i32x4) i32x4"
            },
            {
                "signature": "abs(i16) i16"
            },
            {
                "signature": "abs(i16x2) i16x2"
            },
            {
                "signature": "abs(i16x3) i16x3"
            },
            {
                "signature": "abs(i16x4) i16x4"
            },
            {
                "signature": "abs(f32) f32"
            },
            {
                "signature": "abs(f32x2) f32x2"
            },
            {
                "signature": "abs(f32x3) f32x3"
            },
            {
                "signature": "abs(f32x4) f32x4"
            },
            {
                "signature": "abs(f16) f16"
            },
            {
                "signature": "abs(f16x2) f16x2"
            },
            {
                "signature": "abs(f16x3) f16x3"
            },
            {
                "signature": "abs(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "acos",
        "documentation": "Returns the arc cosine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "acos(f32) f32"
            },
            {
                "signature": "acos(f32x2) f32x2"
            },
            {
                "signature": "acos(f32x3) f32x3"
            },
            {
                "signature": "acos(f32x4) f32x4"
            },
            {
                "signature": "acos(f16) f16"
            },
            {
                "signature": "acos(f16x2) f16x2"
            },
            {
                "signature": "acos(f16x3) f16x3"
            },
            {
                "signature": "acos(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "acosh",
        "documentation": "Returns the hyperbolic arc cosine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "acosh(f32) f32"
            },
            {
                "signature": "acosh(f32x2) f32x2"
            },
            {
                "signature": "acosh(f32x3) f32x3"
            },
            {
                "signature": "acosh(f32x4) f32x4"
            },
            {
                "signature": "acosh(f16) f16"
            },
            {
                "signature": "acosh(f16x2) f16x2"
            },
            {
                "signature": "acosh(f16x3) f16x3"
            },
            {
                "signature": "acosh(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "all",
        "documentation": "Returns true if all components of the vector are non-zero.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "all(b8) b8"
            },
            {
                "signature": "all(b8x2) b8x2"
            },
            {
                "signature": "all(b8x3) b8x3"
            },
            {
                "signature": "all(b8x4) b8x4"
            }
        ]
    },
    {
        "name": "any",
        "documentation": "Returns true if any component of the vector is non-zero.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "any(b8) b8"
            },
            {
                "signature": "any(b8x2) b8x2"
            },
            {
                "signature": "any(b8x3) b8x3"
            },
            {
                "signature": "any(b8x4) b8x4"
            }
        ]
    },
    {
        "name": "asin",
        "documentation": "Returns the arc sine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "asin(f32) f32"
            },
            {
                "signature": "asin(f32x2) f32x2"
            },
            {
                "signature": "asin(f32x3) f32x3"
            },
            {
                "signature": "asin(f32x4) f32x4"
            },
            {
                "signature": "asin(f16) f16"
            },
            {
                "signature": "asin(f16x2) f16x2"
            },
            {
                "signature": "asin(f16x3) f16x3"
            },
            {
                "signature": "asin(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "asinh",
        "documentation": "Returns the hyperbolic arc sine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "asinh(f32) f32"
            },
            {
                "signature": "asinh(f32x2) f32x2"
            },
            {
                "signature": "asinh(f32x3) f32x3"
            },
            {
                "signature": "asinh(f32x4) f32x4"
            },
            {
                "signature": "asinh(f16) f16"
            },
            {
                "signature": "asinh(f16x2) f16x2"
            },
            {
                "signature": "asinh(f16x3) f16x3"
            },
            {
                "signature": "asinh(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "atan",
        "documentation": "Returns the arc tangent of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atan(f32) f32"
            },
            {
                "signature": "atan(f32x2) f32x2"
            },
            {
                "signature": "atan(f32x3) f32x3"
            },
            {
                "signature": "atan(f32x4) f32x4"
            },
            {
                "signature": "atan(f16) f16"
            },
            {
                "signature": "atan(f16x2) f16x2"
            },
            {
                "signature": "atan(f16x3) f16x3"
            },
            {
                "signature": "atan(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "atanh",
        "documentation": "Returns the hyperbolic arc tangent of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atanh(f32) f32"
            },
            {
                "signature": "atanh(f32x2) f32x2"
            },
            {
                "signature": "atanh(f32x3) f32x3"
            },
            {
                "signature": "atanh(f32x4) f32x4"
            },
            {
                "signature": "atanh(f16) f16"
            },
            {
                "signature": "atanh(f16x2) f16x2"
            },
            {
                "signature": "atanh(f16x3) f16x3"
            },
            {
                "signature": "atanh(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "atomicAdd",
        "documentation": "Adds the value to the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicAdd(*u32, u32, literal MemorySemantics) u32"
            },
            {
                "signature": "atomicAdd(*i32, i32, literal MemorySemantics) i32"
            },
            {
                "signature": "atomicAdd(*u16, u16, literal MemorySemantics) u16"
            },
            {
                "signature": "atomicAdd(*i16, i16, literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicAnd",
        "documentation": "Performs a bitwise AND operation with the value at the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicAnd(*u32, u32, literal MemorySemantics) u32"
            },
            {
                "signature": "atomicAnd(*i32, i32, literal MemorySemantics) i32"
            },
            {
                "signature": "atomicAnd(*u16, u16, literal MemorySemantics) u16"
            },
            {
                "signature": "atomicAnd(*i16, i16, literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicCompareExchange",
        "documentation": "Compares the value at the pointer location with the comparison, and exchanges it with value if they are identical using the specified memory semantics, always returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicCompareExchange(*i16, i16, i16, literal MemorySemantics) i16"
            },
            {
                "signature": "atomicCompareExchange(*i16, i16, i16, literal MemorySemantics) i16"
            },
            {
                "signature": "atomicCompareExchange(*i16, i16, i16, literal MemorySemantics) i16"
            },
            {
                "signature": "atomicCompareExchange(*i16, i16, i16, literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicDecrement",
        "documentation": "Decrements the value at the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicDecrement(*u32, literal MemorySemantics) u32"
            },
            {
                "signature": "atomicDecrement(*i32, literal MemorySemantics) i32"
            },
            {
                "signature": "atomicDecrement(*u16, literal MemorySemantics) u16"
            },
            {
                "signature": "atomicDecrement(*i16, literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicExchange",
        "documentation": "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicExchange(*u32, u32, literal MemorySemantics) u32"
            },
            {
                "signature": "atomicExchange(*i32, i32, literal MemorySemantics) i32"
            },
            {
                "signature": "atomicExchange(*u16, u16, literal MemorySemantics) u16"
            },
            {
                "signature": "atomicExchange(*i16, i16, literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicIncrement",
        "documentation": "Increments the value at the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicIncrement(*u32, literal MemorySemantics) u32"
            },
            {
                "signature": "atomicIncrement(*i32, literal MemorySemantics) i32"
            },
            {
                "signature": "atomicIncrement(*u16, literal MemorySemantics) u16"
            },
            {
                "signature": "atomicIncrement(*i16, literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicLoad",
        "documentation": "Loads the value at the pointer location with the specified memory semantics",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicLoad(*u32, literal MemorySemantics) u32"
            },
            {
                "signature": "atomicLoad(*i32, literal MemorySemantics) i32"
            },
            {
                "signature": "atomicLoad(*u16, literal MemorySemantics) u16"
            },
            {
                "signature": "atomicLoad(*i16, literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicOr",
        "documentation": "Performs a bitwise OR operation with the value at the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicOr(*u32, u32, literal MemorySemantics) u32"
            },
            {
                "signature": "atomicOr(*i32, i32, literal MemorySemantics) i32"
            },
            {
                "signature": "atomicOr(*u16, u16, literal MemorySemantics) u16"
            },
            {
                "signature": "atomicOr(*i16, i16, literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicStore",
        "documentation": "Stores the value at the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicStore(*u32, u32, literal MemorySemantics) u32"
            },
            {
                "signature": "atomicStore(*i32, i32, literal MemorySemantics) i32"
            },
            {
                "signature": "atomicStore(*u16, u16, literal MemorySemantics) u16"
            },
            {
                "signature": "atomicStore(*i16, i16, literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicSubtract",
        "documentation": "Subtracts the value from the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicSubtract(*u32, u32, literal MemorySemantics) u32"
            },
            {
                "signature": "atomicSubtract(*i32, i32, literal MemorySemantics) i32"
            },
            {
                "signature": "atomicSubtract(*u16, u16, literal MemorySemantics) u16"
            },
            {
                "signature": "atomicSubtract(*i16, i16, literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "atomicXor",
        "documentation": "Performs a bitwise XOR operation with the value at the pointer location with the specified memory semantics, returns the old value",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "atomicXor(*u32, u32, literal MemorySemantics) u32"
            },
            {
                "signature": "atomicXor(*i32, i32, literal MemorySemantics) i32"
            },
            {
                "signature": "atomicXor(*u16, u16, literal MemorySemantics) u16"
            },
            {
                "signature": "atomicXor(*i16, i16, literal MemorySemantics) i16"
            }
        ]
    },
    {
        "name": "bitCount",
        "documentation": "Counts the number of bits set to 1 in a bitmask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "bitCount(u32) u32"
            },
            {
                "signature": "bitCount(i32) i32"
            },
            {
                "signature": "bitCount(u16) u16"
            },
            {
                "signature": "bitCount(i16) i16"
            }
        ]
    },
    {
        "name": "bitExtract",
        "documentation": "Extract a specific bit from a bitmask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "bitExtract(u32, u32, u32) u32"
            },
            {
                "signature": "bitExtract(i32, i32, i32) i32"
            },
            {
                "signature": "bitExtract(u16, u16, u16) u16"
            },
            {
                "signature": "bitExtract(i16, i16, i16) i16"
            }
        ]
    },
    {
        "name": "bitInsert",
        "documentation": "Insert bit into bitmask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "bitInsert(u16, u16, u16, u16) u16"
            },
            {
                "signature": "bitInsert(u32, u32, u32, u32) u32"
            }
        ]
    },
    {
        "name": "bitReverse",
        "documentation": "Reverses the bits in a bitmask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "bitReverse(u32) u32"
            },
            {
                "signature": "bitReverse(i32) i32"
            },
            {
                "signature": "bitReverse(u16) u16"
            },
            {
                "signature": "bitReverse(i16) i16"
            }
        ]
    },
    {
        "name": "castToF16",
        "documentation": "Casts to type Float16 without conversion.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "castToF16(u16) f16"
            },
            {
                "signature": "castToF16(i16) f16"
            }
        ]
    },
    {
        "name": "castToF32",
        "documentation": "Casts to type Float32 without conversion.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "castToF32(u32) f32"
            },
            {
                "signature": "castToF32(i32) f32"
            }
        ]
    },
    {
        "name": "castToI16",
        "documentation": "Casts to type Int16 without conversion.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "castToI16(f16) i16"
            },
            {
                "signature": "castToI16(u16) i16"
            }
        ]
    },
    {
        "name": "castToI32",
        "documentation": "Casts to type Int32 without conversion.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "castToI32(f32) i32"
            },
            {
                "signature": "castToI32(u32) i32"
            }
        ]
    },
    {
        "name": "castToU16",
        "documentation": "Casts to type UInt16 without conversion.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "castToU16(f16) u16"
            },
            {
                "signature": "castToU16(i16) u16"
            }
        ]
    },
    {
        "name": "castToU32",
        "documentation": "Casts to type UInt32 without conversion.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "castToU32(f32) u32"
            },
            {
                "signature": "castToU32(i32) u32"
            }
        ]
    },
    {
        "name": "ceil",
        "documentation": "Returns the smallest integer value that is greater than or equal to the input.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "ceil(f32) f32"
            },
            {
                "signature": "ceil(f32x2) f32x2"
            },
            {
                "signature": "ceil(f32x3) f32x3"
            },
            {
                "signature": "ceil(f32x4) f32x4"
            },
            {
                "signature": "ceil(f16) f16"
            },
            {
                "signature": "ceil(f16x2) f16x2"
            },
            {
                "signature": "ceil(f16x3) f16x3"
            },
            {
                "signature": "ceil(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "clamp",
        "documentation": "Returns the value clamped between min and max.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "clamp(f32, f32, f32) f32"
            },
            {
                "signature": "clamp(f32x2, f32x2, f32x2) f32x2"
            },
            {
                "signature": "clamp(f32x3, f32x3, f32x3) f32x3"
            },
            {
                "signature": "clamp(f32x4, f32x4, f32x4) f32x4"
            },
            {
                "signature": "clamp(f16, f16, f16) f16"
            },
            {
                "signature": "clamp(f16x2, f16x2, f16x2) f16x2"
            },
            {
                "signature": "clamp(f16x3, f16x3, f16x3) f16x3"
            },
            {
                "signature": "clamp(f16x4, f16x4, f16x4) f16x4"
            },
            {
                "signature": "clamp(i32, i32, i32) i32"
            },
            {
                "signature": "clamp(i32x2, i32x2, i32x2) i32x2"
            },
            {
                "signature": "clamp(i32x3, i32x3, i32x3) i32x3"
            },
            {
                "signature": "clamp(i32x4, i32x4, i32x4) i32x4"
            },
            {
                "signature": "clamp(i16, i16, i16) i16"
            },
            {
                "signature": "clamp(i16x2, i16x2, i16x2) i16x2"
            },
            {
                "signature": "clamp(i16x3, i16x3, i16x3) i16x3"
            },
            {
                "signature": "clamp(i16x4, i16x4, i16x4) i16x4"
            },
            {
                "signature": "clamp(u32, u32, u32) u32"
            },
            {
                "signature": "clamp(u32x2, u32x2, u32x2) u32x2"
            },
            {
                "signature": "clamp(u32x3, u32x3, u32x3) u32x3"
            },
            {
                "signature": "clamp(u32x4, u32x4, u32x4) u32x4"
            },
            {
                "signature": "clamp(u16, u16, u16) u16"
            },
            {
                "signature": "clamp(u16x2, u16x2, u16x2) u16x2"
            },
            {
                "signature": "clamp(u16x3, u16x3, u16x3) u16x3"
            },
            {
                "signature": "clamp(u16x4, u16x4, u16x4) u16x4"
            }
        ]
    },
    {
        "name": "computeGetGlobalThreadIndices",
        "documentation": "Returns the global thread indices in the dispatch",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "computeGetGlobalThreadIndices() u32x3"
            }
        ]
    },
    {
        "name": "computeGetIndexInWorkgroup",
        "documentation": "Returns flattened index of the current thread in the workgroup using (x * workgroupSize.y + y) * workgroupSize.x + z",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "computeGetIndexInWorkgroup() u32"
            }
        ]
    },
    {
        "name": "computeGetLocalThreadIndices",
        "documentation": "Returns the local thread indices within the workgroup",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "computeGetLocalThreadIndices() u32x3"
            }
        ]
    },
    {
        "name": "computeGetWorkGroupDimensions",
        "documentation": "Returns the dimensions of the workgroup in the dispatch",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "computeGetWorkGroupDimensions() u32x3"
            }
        ]
    },
    {
        "name": "computeGetWorkgroupIndices",
        "documentation": "Returns the workgroup indices in the dispatch",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "computeGetWorkgroupIndices() u32x3"
            }
        ]
    },
    {
        "name": "cos",
        "documentation": "Returns the cosine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "cos(f32) f32"
            },
            {
                "signature": "cos(f32x2) f32x2"
            },
            {
                "signature": "cos(f32x3) f32x3"
            },
            {
                "signature": "cos(f32x4) f32x4"
            },
            {
                "signature": "cos(f16) f16"
            },
            {
                "signature": "cos(f16x2) f16x2"
            },
            {
                "signature": "cos(f16x3) f16x3"
            },
            {
                "signature": "cos(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "cosh",
        "documentation": "Returns the hyperbolic cosine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "cosh(f32) f32"
            },
            {
                "signature": "cosh(f32x2) f32x2"
            },
            {
                "signature": "cosh(f32x3) f32x3"
            },
            {
                "signature": "cosh(f32x4) f32x4"
            },
            {
                "signature": "cosh(f16) f16"
            },
            {
                "signature": "cosh(f16x2) f16x2"
            },
            {
                "signature": "cosh(f16x3) f16x3"
            },
            {
                "signature": "cosh(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "cross",
        "documentation": "Returns the cross product of two vectors.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "cross(f32x3, f32x3) f32x3"
            },
            {
                "signature": "cross(f16x3, f16x3) f16x3"
            }
        ]
    },
    {
        "name": "ddx",
        "documentation": "Returns the derivative of the input with respect to the screen x coordinate.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "ddx(f32) f32"
            },
            {
                "signature": "ddx(f32x2) f32x2"
            },
            {
                "signature": "ddx(f32x3) f32x3"
            },
            {
                "signature": "ddx(f32x4) f32x4"
            },
            {
                "signature": "ddx(f16) f16"
            },
            {
                "signature": "ddx(f16x2) f16x2"
            },
            {
                "signature": "ddx(f16x3) f16x3"
            },
            {
                "signature": "ddx(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "ddy",
        "documentation": "Returns the derivative of the input with respect to the screen y coordinate.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "ddy(f32) f32"
            },
            {
                "signature": "ddy(f32x2) f32x2"
            },
            {
                "signature": "ddy(f32x3) f32x3"
            },
            {
                "signature": "ddy(f32x4) f32x4"
            },
            {
                "signature": "ddy(f16) f16"
            },
            {
                "signature": "ddy(f16x2) f16x2"
            },
            {
                "signature": "ddy(f16x3) f16x3"
            },
            {
                "signature": "ddy(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "distance",
        "documentation": "Returns the distance between two points.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "distance(f32x2, f32x2) f32x2"
            },
            {
                "signature": "distance(f32x3, f32x3) f32x3"
            },
            {
                "signature": "distance(f32x4, f32x4) f32x4"
            },
            {
                "signature": "distance(f16x2, f16x2) f16x2"
            },
            {
                "signature": "distance(f16x3, f16x3) f16x3"
            },
            {
                "signature": "distance(f16x4, f16x4) f16x4"
            }
        ]
    },
    {
        "name": "dot",
        "documentation": "Returns the dot product of two vectors.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "dot(f32x2, f32x2) f32"
            },
            {
                "signature": "dot(f32x3, f32x3) f32"
            },
            {
                "signature": "dot(f32x4, f32x4) f32"
            },
            {
                "signature": "dot(f16x2, f16x2) f16"
            },
            {
                "signature": "dot(f16x3, f16x3) f16"
            },
            {
                "signature": "dot(f16x4, f16x4) f16"
            }
        ]
    },
    {
        "name": "executionBarrier",
        "documentation": "Execution barrier to ensure all threads have reached this point before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "executionBarrier() void"
            }
        ]
    },
    {
        "name": "executionBarrierSubgroup",
        "documentation": "Execution barrier to ensure all threads in the subgroup have reached this point before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "executionBarrierSubgroup() void"
            }
        ]
    },
    {
        "name": "executionBarrierWorkgroup",
        "documentation": "Execution barrier to ensure all threads in the workgroup have reached this point before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "executionBarrierWorkgroup() void"
            }
        ]
    },
    {
        "name": "exp",
        "documentation": "Returns the exponential of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "exp(f32) f32"
            },
            {
                "signature": "exp(f32x2) f32x2"
            },
            {
                "signature": "exp(f32x3) f32x3"
            },
            {
                "signature": "exp(f32x4) f32x4"
            },
            {
                "signature": "exp(f16) f16"
            },
            {
                "signature": "exp(f16x2) f16x2"
            },
            {
                "signature": "exp(f16x3) f16x3"
            },
            {
                "signature": "exp(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "exp2",
        "documentation": "Returns the base 2 exponential of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "exp2(f32) f32"
            },
            {
                "signature": "exp2(f32x2) f32x2"
            },
            {
                "signature": "exp2(f32x3) f32x3"
            },
            {
                "signature": "exp2(f32x4) f32x4"
            },
            {
                "signature": "exp2(f16) f16"
            },
            {
                "signature": "exp2(f16x2) f16x2"
            },
            {
                "signature": "exp2(f16x3) f16x3"
            },
            {
                "signature": "exp2(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "floor",
        "documentation": "Returns the largest integer value that is less than or equal to the input.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "floor(f32) f32"
            },
            {
                "signature": "floor(f32x2) f32x2"
            },
            {
                "signature": "floor(f32x3) f32x3"
            },
            {
                "signature": "floor(f32x4) f32x4"
            },
            {
                "signature": "floor(f16) f16"
            },
            {
                "signature": "floor(f16x2) f16x2"
            },
            {
                "signature": "floor(f16x3) f16x3"
            },
            {
                "signature": "floor(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "fract",
        "documentation": "Returns the fractional part of the input.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "fract(f32) f32"
            },
            {
                "signature": "fract(f32x2) f32x2"
            },
            {
                "signature": "fract(f32x3) f32x3"
            },
            {
                "signature": "fract(f32x4) f32x4"
            },
            {
                "signature": "fract(f16) f16"
            },
            {
                "signature": "fract(f16x2) f16x2"
            },
            {
                "signature": "fract(f16x3) f16x3"
            },
            {
                "signature": "fract(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "fwidth",
        "documentation": "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "fwidth(f32) f32"
            },
            {
                "signature": "fwidth(f32x2) f32x2"
            },
            {
                "signature": "fwidth(f32x3) f32x3"
            },
            {
                "signature": "fwidth(f32x4) f32x4"
            },
            {
                "signature": "fwidth(f16) f16"
            },
            {
                "signature": "fwidth(f16x2) f16x2"
            },
            {
                "signature": "fwidth(f16x3) f16x3"
            },
            {
                "signature": "fwidth(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "geometryExportPrimitive",
        "documentation": "Exports the current primitive to the output stream. This function must be called after all vertices of a primitive have been exported.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "geometryExportPrimitive() void"
            }
        ]
    },
    {
        "name": "geometryExportVertex",
        "documentation": "Exports the current vertex to the output stream. This function must be called for each vertex in a geometry shader.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "geometryExportVertex() void"
            }
        ]
    },
    {
        "name": "invSqrt",
        "documentation": "Returns the inverse square root of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "invSqrt(f32) f32"
            },
            {
                "signature": "invSqrt(f32x2) f32x2"
            },
            {
                "signature": "invSqrt(f32x3) f32x3"
            },
            {
                "signature": "invSqrt(f32x4) f32x4"
            },
            {
                "signature": "invSqrt(f16) f16"
            },
            {
                "signature": "invSqrt(f16x2) f16x2"
            },
            {
                "signature": "invSqrt(f16x3) f16x3"
            },
            {
                "signature": "invSqrt(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "inverse",
        "documentation": "Returns the inverse of the matrix.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "inverse(f32x2x2) f32x2x2"
            },
            {
                "signature": "inverse(f16x2x2) f16x2x2"
            },
            {
                "signature": "inverse(f32x2x3) f32x2x3"
            },
            {
                "signature": "inverse(f16x2x3) f16x2x3"
            },
            {
                "signature": "inverse(f32x2x4) f32x2x4"
            },
            {
                "signature": "inverse(f16x2x4) f16x2x4"
            },
            {
                "signature": "inverse(f32x3x2) f32x3x2"
            },
            {
                "signature": "inverse(f16x3x2) f16x3x2"
            },
            {
                "signature": "inverse(f32x3x3) f32x3x3"
            },
            {
                "signature": "inverse(f16x3x3) f16x3x3"
            },
            {
                "signature": "inverse(f32x3x4) f32x3x4"
            },
            {
                "signature": "inverse(f16x3x4) f16x3x4"
            },
            {
                "signature": "inverse(f32x4x2) f32x4x2"
            },
            {
                "signature": "inverse(f16x4x2) f16x4x2"
            },
            {
                "signature": "inverse(f32x4x3) f32x4x3"
            },
            {
                "signature": "inverse(f16x4x3) f16x4x3"
            },
            {
                "signature": "inverse(f32x4x4) f32x4x4"
            },
            {
                "signature": "inverse(f16x4x4) f16x4x4"
            }
        ]
    },
    {
        "name": "length",
        "documentation": "Returns the length of the vector.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "length(f32x2) f32x2"
            },
            {
                "signature": "length(f32x3) f32x3"
            },
            {
                "signature": "length(f32x4) f32x4"
            },
            {
                "signature": "length(f16x2) f16x2"
            },
            {
                "signature": "length(f16x3) f16x3"
            },
            {
                "signature": "length(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "lerp",
        "documentation": "Returns the linear interpolation between a and b by t.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "lerp(f32x2, f32x2, f32x2) f32x2"
            },
            {
                "signature": "lerp(f32x3, f32x3, f32x3) f32x3"
            },
            {
                "signature": "lerp(f32x4, f32x4, f32x4) f32x4"
            },
            {
                "signature": "lerp(f16x2, f16x2, f16x2) f16x2"
            },
            {
                "signature": "lerp(f16x3, f16x3, f16x3) f16x3"
            },
            {
                "signature": "lerp(f16x4, f16x4, f16x4) f16x4"
            }
        ]
    },
    {
        "name": "log",
        "documentation": "Returns the natural logarithm of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "log(f32) f32"
            },
            {
                "signature": "log(f32x2) f32x2"
            },
            {
                "signature": "log(f32x3) f32x3"
            },
            {
                "signature": "log(f32x4) f32x4"
            },
            {
                "signature": "log(f16) f16"
            },
            {
                "signature": "log(f16x2) f16x2"
            },
            {
                "signature": "log(f16x3) f16x3"
            },
            {
                "signature": "log(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "log2",
        "documentation": "Returns the base 2 logarithm of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "log2(f32) f32"
            },
            {
                "signature": "log2(f32x2) f32x2"
            },
            {
                "signature": "log2(f32x3) f32x3"
            },
            {
                "signature": "log2(f32x4) f32x4"
            },
            {
                "signature": "log2(f16) f16"
            },
            {
                "signature": "log2(f16x2) f16x2"
            },
            {
                "signature": "log2(f16x3) f16x3"
            },
            {
                "signature": "log2(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "mad",
        "documentation": "Returns the result of multiplying a value by a multiplier and adding an addend.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "mad(f32, f32, f32) f32"
            },
            {
                "signature": "mad(f32x2, f32x2, f32x2) f32x2"
            },
            {
                "signature": "mad(f32x3, f32x3, f32x3) f32x3"
            },
            {
                "signature": "mad(f32x4, f32x4, f32x4) f32x4"
            },
            {
                "signature": "mad(f16, f16, f16) f16"
            },
            {
                "signature": "mad(f16x2, f16x2, f16x2) f16x2"
            },
            {
                "signature": "mad(f16x3, f16x3, f16x3) f16x3"
            },
            {
                "signature": "mad(f16x4, f16x4, f16x4) f16x4"
            },
            {
                "signature": "mad(i32, i32, i32) i32"
            },
            {
                "signature": "mad(i32x2, i32x2, i32x2) i32x2"
            },
            {
                "signature": "mad(i32x3, i32x3, i32x3) i32x3"
            },
            {
                "signature": "mad(i32x4, i32x4, i32x4) i32x4"
            },
            {
                "signature": "mad(i16, i16, i16) i16"
            },
            {
                "signature": "mad(i16x2, i16x2, i16x2) i16x2"
            },
            {
                "signature": "mad(i16x3, i16x3, i16x3) i16x3"
            },
            {
                "signature": "mad(i16x4, i16x4, i16x4) i16x4"
            },
            {
                "signature": "mad(u32, u32, u32) u32"
            },
            {
                "signature": "mad(u32x2, u32x2, u32x2) u32x2"
            },
            {
                "signature": "mad(u32x3, u32x3, u32x3) u32x3"
            },
            {
                "signature": "mad(u32x4, u32x4, u32x4) u32x4"
            },
            {
                "signature": "mad(u16, u16, u16) u16"
            },
            {
                "signature": "mad(u16x2, u16x2, u16x2) u16x2"
            },
            {
                "signature": "mad(u16x3, u16x3, u16x3) u16x3"
            },
            {
                "signature": "mad(u16x4, u16x4, u16x4) u16x4"
            }
        ]
    },
    {
        "name": "max",
        "documentation": "Returns the maximum of x and y.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "max(f32, f32) f32"
            },
            {
                "signature": "max(f32x2, f32x2) f32x2"
            },
            {
                "signature": "max(f32x3, f32x3) f32x3"
            },
            {
                "signature": "max(f32x4, f32x4) f32x4"
            },
            {
                "signature": "max(f16, f16) f16"
            },
            {
                "signature": "max(f16x2, f16x2) f16x2"
            },
            {
                "signature": "max(f16x3, f16x3) f16x3"
            },
            {
                "signature": "max(f16x4, f16x4) f16x4"
            },
            {
                "signature": "max(i32, i32) i32"
            },
            {
                "signature": "max(i32x2, i32x2) i32x2"
            },
            {
                "signature": "max(i32x3, i32x3) i32x3"
            },
            {
                "signature": "max(i32x4, i32x4) i32x4"
            },
            {
                "signature": "max(i16, i16) i16"
            },
            {
                "signature": "max(i16x2, i16x2) i16x2"
            },
            {
                "signature": "max(i16x3, i16x3) i16x3"
            },
            {
                "signature": "max(i16x4, i16x4) i16x4"
            },
            {
                "signature": "max(u32, u32) u32"
            },
            {
                "signature": "max(u32x2, u32x2) u32x2"
            },
            {
                "signature": "max(u32x3, u32x3) u32x3"
            },
            {
                "signature": "max(u32x4, u32x4) u32x4"
            },
            {
                "signature": "max(u16, u16) u16"
            },
            {
                "signature": "max(u16x2, u16x2) u16x2"
            },
            {
                "signature": "max(u16x3, u16x3) u16x3"
            },
            {
                "signature": "max(u16x4, u16x4) u16x4"
            }
        ]
    },
    {
        "name": "memoryBarrier",
        "documentation": "Memory barrier to ensure memory operations are completed before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "memoryBarrier() void"
            }
        ]
    },
    {
        "name": "memoryBarrierAtomic",
        "documentation": "Memory barrier to ensure atomic memory operations are completed before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "memoryBarrierAtomic() void"
            }
        ]
    },
    {
        "name": "memoryBarrierBuffer",
        "documentation": "Memory barrier to ensure buffer memory operations are completed before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "memoryBarrierBuffer() void"
            }
        ]
    },
    {
        "name": "memoryBarrierSubgroup",
        "documentation": "Memory barrier to ensure subgroup memory operations are completed before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "memoryBarrierSubgroup() void"
            }
        ]
    },
    {
        "name": "memoryBarrierTexture",
        "documentation": "Memory barrier to ensure texture memory operations are completed before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "memoryBarrierTexture() void"
            }
        ]
    },
    {
        "name": "memoryBarrierWorkgroup",
        "documentation": "Memory barrier to ensure workgroup memory operations are completed before proceeding",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "memoryBarrierWorkgroup() void"
            }
        ]
    },
    {
        "name": "min",
        "documentation": "Returns the minimum of x and y.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "min(f32, f32) f32"
            },
            {
                "signature": "min(f32x2, f32x2) f32x2"
            },
            {
                "signature": "min(f32x3, f32x3) f32x3"
            },
            {
                "signature": "min(f32x4, f32x4) f32x4"
            },
            {
                "signature": "min(f16, f16) f16"
            },
            {
                "signature": "min(f16x2, f16x2) f16x2"
            },
            {
                "signature": "min(f16x3, f16x3) f16x3"
            },
            {
                "signature": "min(f16x4, f16x4) f16x4"
            },
            {
                "signature": "min(i32, i32) i32"
            },
            {
                "signature": "min(i32x2, i32x2) i32x2"
            },
            {
                "signature": "min(i32x3, i32x3) i32x3"
            },
            {
                "signature": "min(i32x4, i32x4) i32x4"
            },
            {
                "signature": "min(i16, i16) i16"
            },
            {
                "signature": "min(i16x2, i16x2) i16x2"
            },
            {
                "signature": "min(i16x3, i16x3) i16x3"
            },
            {
                "signature": "min(i16x4, i16x4) i16x4"
            },
            {
                "signature": "min(u32, u32) u32"
            },
            {
                "signature": "min(u32x2, u32x2) u32x2"
            },
            {
                "signature": "min(u32x3, u32x3) u32x3"
            },
            {
                "signature": "min(u32x4, u32x4) u32x4"
            },
            {
                "signature": "min(u16, u16) u16"
            },
            {
                "signature": "min(u16x2, u16x2) u16x2"
            },
            {
                "signature": "min(u16x3, u16x3) u16x3"
            },
            {
                "signature": "min(u16x4, u16x4) u16x4"
            }
        ]
    },
    {
        "name": "normalize",
        "documentation": "Returns the normalized vector.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "normalize(f32x2) f32x2"
            },
            {
                "signature": "normalize(f32x3) f32x3"
            },
            {
                "signature": "normalize(f32x4) f32x4"
            },
            {
                "signature": "normalize(f16x2) f16x2"
            },
            {
                "signature": "normalize(f16x3) f16x3"
            },
            {
                "signature": "normalize(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "pixelExportColor",
        "documentation": "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "pixelExportColor(f32, literal i32) void"
            },
            {
                "signature": "pixelExportColor(f32, literal u32) void"
            },
            {
                "signature": "pixelExportColor(f32, literal i16) void"
            },
            {
                "signature": "pixelExportColor(f32, literal u16) void"
            },
            {
                "signature": "pixelExportColor(f32x2, literal i32) void"
            },
            {
                "signature": "pixelExportColor(f32x2, literal u32) void"
            },
            {
                "signature": "pixelExportColor(f32x2, literal i16) void"
            },
            {
                "signature": "pixelExportColor(f32x2, literal u16) void"
            },
            {
                "signature": "pixelExportColor(f32x3, literal i32) void"
            },
            {
                "signature": "pixelExportColor(f32x3, literal u32) void"
            },
            {
                "signature": "pixelExportColor(f32x3, literal i16) void"
            },
            {
                "signature": "pixelExportColor(f32x3, literal u16) void"
            },
            {
                "signature": "pixelExportColor(f32x4, literal i32) void"
            },
            {
                "signature": "pixelExportColor(f32x4, literal u32) void"
            },
            {
                "signature": "pixelExportColor(f32x4, literal i16) void"
            },
            {
                "signature": "pixelExportColor(f32x4, literal u16) void"
            },
            {
                "signature": "pixelExportColor(f16, literal i32) void"
            },
            {
                "signature": "pixelExportColor(f16, literal u32) void"
            },
            {
                "signature": "pixelExportColor(f16, literal i16) void"
            },
            {
                "signature": "pixelExportColor(f16, literal u16) void"
            },
            {
                "signature": "pixelExportColor(f16x2, literal i32) void"
            },
            {
                "signature": "pixelExportColor(f16x2, literal u32) void"
            },
            {
                "signature": "pixelExportColor(f16x2, literal i16) void"
            },
            {
                "signature": "pixelExportColor(f16x2, literal u16) void"
            },
            {
                "signature": "pixelExportColor(f16x3, literal i32) void"
            },
            {
                "signature": "pixelExportColor(f16x3, literal u32) void"
            },
            {
                "signature": "pixelExportColor(f16x3, literal i16) void"
            },
            {
                "signature": "pixelExportColor(f16x3, literal u16) void"
            },
            {
                "signature": "pixelExportColor(f16x4, literal i32) void"
            },
            {
                "signature": "pixelExportColor(f16x4, literal u32) void"
            },
            {
                "signature": "pixelExportColor(f16x4, literal i16) void"
            },
            {
                "signature": "pixelExportColor(f16x4, literal u16) void"
            },
            {
                "signature": "pixelExportColor(i32, literal i32) void"
            },
            {
                "signature": "pixelExportColor(i32, literal u32) void"
            },
            {
                "signature": "pixelExportColor(i32, literal i16) void"
            },
            {
                "signature": "pixelExportColor(i32, literal u16) void"
            },
            {
                "signature": "pixelExportColor(i32x2, literal i32) void"
            },
            {
                "signature": "pixelExportColor(i32x2, literal u32) void"
            },
            {
                "signature": "pixelExportColor(i32x2, literal i16) void"
            },
            {
                "signature": "pixelExportColor(i32x2, literal u16) void"
            },
            {
                "signature": "pixelExportColor(i32x3, literal i32) void"
            },
            {
                "signature": "pixelExportColor(i32x3, literal u32) void"
            },
            {
                "signature": "pixelExportColor(i32x3, literal i16) void"
            },
            {
                "signature": "pixelExportColor(i32x3, literal u16) void"
            },
            {
                "signature": "pixelExportColor(i32x4, literal i32) void"
            },
            {
                "signature": "pixelExportColor(i32x4, literal u32) void"
            },
            {
                "signature": "pixelExportColor(i32x4, literal i16) void"
            },
            {
                "signature": "pixelExportColor(i32x4, literal u16) void"
            },
            {
                "signature": "pixelExportColor(i16, literal i32) void"
            },
            {
                "signature": "pixelExportColor(i16, literal u32) void"
            },
            {
                "signature": "pixelExportColor(i16, literal i16) void"
            },
            {
                "signature": "pixelExportColor(i16, literal u16) void"
            },
            {
                "signature": "pixelExportColor(i16x2, literal i32) void"
            },
            {
                "signature": "pixelExportColor(i16x2, literal u32) void"
            },
            {
                "signature": "pixelExportColor(i16x2, literal i16) void"
            },
            {
                "signature": "pixelExportColor(i16x2, literal u16) void"
            },
            {
                "signature": "pixelExportColor(i16x3, literal i32) void"
            },
            {
                "signature": "pixelExportColor(i16x3, literal u32) void"
            },
            {
                "signature": "pixelExportColor(i16x3, literal i16) void"
            },
            {
                "signature": "pixelExportColor(i16x3, literal u16) void"
            },
            {
                "signature": "pixelExportColor(i16x4, literal i32) void"
            },
            {
                "signature": "pixelExportColor(i16x4, literal u32) void"
            },
            {
                "signature": "pixelExportColor(i16x4, literal i16) void"
            },
            {
                "signature": "pixelExportColor(i16x4, literal u16) void"
            },
            {
                "signature": "pixelExportColor(u32, literal i32) void"
            },
            {
                "signature": "pixelExportColor(u32, literal u32) void"
            },
            {
                "signature": "pixelExportColor(u32, literal i16) void"
            },
            {
                "signature": "pixelExportColor(u32, literal u16) void"
            },
            {
                "signature": "pixelExportColor(u32x2, literal i32) void"
            },
            {
                "signature": "pixelExportColor(u32x2, literal u32) void"
            },
            {
                "signature": "pixelExportColor(u32x2, literal i16) void"
            },
            {
                "signature": "pixelExportColor(u32x2, literal u16) void"
            },
            {
                "signature": "pixelExportColor(u32x3, literal i32) void"
            },
            {
                "signature": "pixelExportColor(u32x3, literal u32) void"
            },
            {
                "signature": "pixelExportColor(u32x3, literal i16) void"
            },
            {
                "signature": "pixelExportColor(u32x3, literal u16) void"
            },
            {
                "signature": "pixelExportColor(u32x4, literal i32) void"
            },
            {
                "signature": "pixelExportColor(u32x4, literal u32) void"
            },
            {
                "signature": "pixelExportColor(u32x4, literal i16) void"
            },
            {
                "signature": "pixelExportColor(u32x4, literal u16) void"
            },
            {
                "signature": "pixelExportColor(u16, literal i32) void"
            },
            {
                "signature": "pixelExportColor(u16, literal u32) void"
            },
            {
                "signature": "pixelExportColor(u16, literal i16) void"
            },
            {
                "signature": "pixelExportColor(u16, literal u16) void"
            },
            {
                "signature": "pixelExportColor(u16x2, literal i32) void"
            },
            {
                "signature": "pixelExportColor(u16x2, literal u32) void"
            },
            {
                "signature": "pixelExportColor(u16x2, literal i16) void"
            },
            {
                "signature": "pixelExportColor(u16x2, literal u16) void"
            },
            {
                "signature": "pixelExportColor(u16x3, literal i32) void"
            },
            {
                "signature": "pixelExportColor(u16x3, literal u32) void"
            },
            {
                "signature": "pixelExportColor(u16x3, literal i16) void"
            },
            {
                "signature": "pixelExportColor(u16x3, literal u16) void"
            },
            {
                "signature": "pixelExportColor(u16x4, literal i32) void"
            },
            {
                "signature": "pixelExportColor(u16x4, literal u32) void"
            },
            {
                "signature": "pixelExportColor(u16x4, literal i16) void"
            },
            {
                "signature": "pixelExportColor(u16x4, literal u16) void"
            }
        ]
    },
    {
        "name": "pixelGetCoordinates",
        "documentation": "Returns the post transformation coordinates of the current pixel. xy is the pixel position in non-normalized coordinates, z is the depth in the range [0, 1] or [-1, 1] based on the graphics API.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "pixelGetCoordinates() f32x4"
            },
            {
                "signature": "pixelGetCoordinates() f16x4"
            }
        ]
    },
    {
        "name": "pixelGetDepth",
        "documentation": "Returns the depth value for the current pixel",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "pixelGetDepth() f32"
            }
        ]
    },
    {
        "name": "pixelSetDepth",
        "documentation": "Sets the depth value for the current pixel",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "pixelSetDepth(f32) void"
            }
        ]
    },
    {
        "name": "pow",
        "documentation": "Returns the result of raising a value to the power of an exponent.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "pow(f32, f32) f32"
            },
            {
                "signature": "pow(f32x2, f32x2) f32x2"
            },
            {
                "signature": "pow(f32x3, f32x3) f32x3"
            },
            {
                "signature": "pow(f32x4, f32x4) f32x4"
            },
            {
                "signature": "pow(f16, f16) f16"
            },
            {
                "signature": "pow(f16x2, f16x2) f16x2"
            },
            {
                "signature": "pow(f16x3, f16x3) f16x3"
            },
            {
                "signature": "pow(f16x4, f16x4) f16x4"
            }
        ]
    },
    {
        "name": "reflect",
        "documentation": "Returns the reflection of a vector through a surface using an incident vector and normal.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "reflect(f32x2, f32x2) f32x2"
            },
            {
                "signature": "reflect(f32x3, f32x3) f32x3"
            },
            {
                "signature": "reflect(f32x4, f32x4) f32x4"
            },
            {
                "signature": "reflect(f16x2, f16x2) f16x2"
            },
            {
                "signature": "reflect(f16x3, f16x3) f16x3"
            },
            {
                "signature": "reflect(f16x4, f16x4) f16x4"
            }
        ]
    },
    {
        "name": "refract",
        "documentation": "Returns the refraction of a vector through a surface using an incident vector, normal and an index of refraction.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "refract(f32x2, f32x2, f32x2) f32x2"
            },
            {
                "signature": "refract(f32x3, f32x3, f32x3) f32x3"
            },
            {
                "signature": "refract(f32x4, f32x4, f32x4) f32x4"
            },
            {
                "signature": "refract(f16x2, f16x2, f16x2) f16x2"
            },
            {
                "signature": "refract(f16x3, f16x3, f16x3) f16x3"
            },
            {
                "signature": "refract(f16x4, f16x4, f16x4) f16x4"
            }
        ]
    },
    {
        "name": "saturate",
        "documentation": "Returns the input clamped to the range [0, 1].",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "saturate(f32) f32"
            },
            {
                "signature": "saturate(f32x2) f32x2"
            },
            {
                "signature": "saturate(f32x3) f32x3"
            },
            {
                "signature": "saturate(f32x4) f32x4"
            },
            {
                "signature": "saturate(f16) f16"
            },
            {
                "signature": "saturate(f16x2) f16x2"
            },
            {
                "signature": "saturate(f16x3) f16x3"
            },
            {
                "signature": "saturate(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "sign",
        "documentation": "Returns the sign of the value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "sign(i32) i32"
            },
            {
                "signature": "sign(i32x2) i32x2"
            },
            {
                "signature": "sign(i32x3) i32x3"
            },
            {
                "signature": "sign(i32x4) i32x4"
            },
            {
                "signature": "sign(i16) i16"
            },
            {
                "signature": "sign(i16x2) i16x2"
            },
            {
                "signature": "sign(i16x3) i16x3"
            },
            {
                "signature": "sign(i16x4) i16x4"
            },
            {
                "signature": "sign(f32) f32"
            },
            {
                "signature": "sign(f32x2) f32x2"
            },
            {
                "signature": "sign(f32x3) f32x3"
            },
            {
                "signature": "sign(f32x4) f32x4"
            },
            {
                "signature": "sign(f16) f16"
            },
            {
                "signature": "sign(f16x2) f16x2"
            },
            {
                "signature": "sign(f16x3) f16x3"
            },
            {
                "signature": "sign(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "sin",
        "documentation": "Returns the sine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "sin(f32) f32"
            },
            {
                "signature": "sin(f32x2) f32x2"
            },
            {
                "signature": "sin(f32x3) f32x3"
            },
            {
                "signature": "sin(f32x4) f32x4"
            },
            {
                "signature": "sin(f16) f16"
            },
            {
                "signature": "sin(f16x2) f16x2"
            },
            {
                "signature": "sin(f16x3) f16x3"
            },
            {
                "signature": "sin(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "sinh",
        "documentation": "Returns the hyperbolic sine of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "sinh(f32) f32"
            },
            {
                "signature": "sinh(f32x2) f32x2"
            },
            {
                "signature": "sinh(f32x3) f32x3"
            },
            {
                "signature": "sinh(f32x4) f32x4"
            },
            {
                "signature": "sinh(f16) f16"
            },
            {
                "signature": "sinh(f16x2) f16x2"
            },
            {
                "signature": "sinh(f16x3) f16x3"
            },
            {
                "signature": "sinh(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "smoothstep",
        "documentation": "Returns the smoothstep interpolation of the input.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "smoothstep(f32, f32, f32) f32"
            },
            {
                "signature": "smoothstep(f32x2, f32x2, f32x2) f32x2"
            },
            {
                "signature": "smoothstep(f32x3, f32x3, f32x3) f32x3"
            },
            {
                "signature": "smoothstep(f32x4, f32x4, f32x4) f32x4"
            },
            {
                "signature": "smoothstep(f16, f16, f16) f16"
            },
            {
                "signature": "smoothstep(f16x2, f16x2, f16x2) f16x2"
            },
            {
                "signature": "smoothstep(f16x3, f16x3, f16x3) f16x3"
            },
            {
                "signature": "smoothstep(f16x4, f16x4, f16x4) f16x4"
            }
        ]
    },
    {
        "name": "sqrt",
        "documentation": "Returns the square root of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "sqrt(f32) f32"
            },
            {
                "signature": "sqrt(f32x2) f32x2"
            },
            {
                "signature": "sqrt(f32x3) f32x3"
            },
            {
                "signature": "sqrt(f32x4) f32x4"
            },
            {
                "signature": "sqrt(f16) f16"
            },
            {
                "signature": "sqrt(f16x2) f16x2"
            },
            {
                "signature": "sqrt(f16x3) f16x3"
            },
            {
                "signature": "sqrt(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "step",
        "documentation": "Returns 0.0 if x < edge, otherwise returns 1.0.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "step(f32, f32) f32"
            },
            {
                "signature": "step(f32x2, f32x2) f32x2"
            },
            {
                "signature": "step(f32x3, f32x3) f32x3"
            },
            {
                "signature": "step(f32x4, f32x4) f32x4"
            },
            {
                "signature": "step(f16, f16) f16"
            },
            {
                "signature": "step(f16x2, f16x2) f16x2"
            },
            {
                "signature": "step(f16x3, f16x3) f16x3"
            },
            {
                "signature": "step(f16x4, f16x4) f16x4"
            }
        ]
    },
    {
        "name": "subgroupBallot",
        "documentation": "Constructs a 128 bit subgroup thread mask to the value of the predicate argument for each active thread",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupBallot(b8) u32x4"
            }
        ]
    },
    {
        "name": "subgroupBallotBit",
        "documentation": "Extracts a specific bit from a 128 bit subgroup thread mask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupBallotBit(u32x4, literal u32) u32"
            }
        ]
    },
    {
        "name": "subgroupBallotBitCount",
        "documentation": "Returns the number of bits set to 1 in a 128 bit subgroup thread mask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupBallotBitCount(u32x4) u32"
            }
        ]
    },
    {
        "name": "subgroupBallotFirstOne",
        "documentation": "Returns the first one (ctz) in a 128 bit subgroup thread mask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupBallotFirstOne(u32x4) u32"
            }
        ]
    },
    {
        "name": "subgroupBallotLastOne",
        "documentation": "Returns the last one (clz) in a 128 bit subgroup thread mask",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupBallotLastOne(u32x4) u32"
            }
        ]
    },
    {
        "name": "subgroupBroadcastFirstActiveThread",
        "documentation": "Returns the value of the provided argument for the first active thread in the subgroup",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupBroadcastFirstActiveThread(f32) f32"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(f32x2) f32x2"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(f32x3) f32x3"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(f32x4) f32x4"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(f16) f16"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(f16x2) f16x2"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(f16x3) f16x3"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(f16x4) f16x4"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(i32) i32"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(i32x2) i32x2"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(i32x3) i32x3"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(i32x4) i32x4"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(i16) i16"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(i16x2) i16x2"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(i16x3) i16x3"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(i16x4) i16x4"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(u32) u32"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(u32x2) u32x2"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(u32x3) u32x3"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(u32x4) u32x4"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(u16) u16"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(u16x2) u16x2"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(u16x3) u16x3"
            },
            {
                "signature": "subgroupBroadcastFirstActiveThread(u16x4) u16x4"
            }
        ]
    },
    {
        "name": "subgroupGetFirstActiveThread",
        "documentation": null,
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetFirstActiveThread() u32"
            }
        ]
    },
    {
        "name": "subgroupGetGreaterMask",
        "documentation": "Returns a 128 bit subgroup mask where all greater threads are active",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetGreaterMask() u32x4"
            }
        ]
    },
    {
        "name": "subgroupGetId",
        "documentation": "Returns the subgroup ID of the current thread",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetId() u32x3"
            }
        ]
    },
    {
        "name": "subgroupGetLowerMask",
        "documentation": "Returns a 128 bit subgroup mask where all lower threads are active",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetLowerMask() u32x4"
            }
        ]
    },
    {
        "name": "subgroupGetNum",
        "documentation": "Returns the number of subgroups in the workgroup",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetNum() u32x3"
            }
        ]
    },
    {
        "name": "subgroupGetSize",
        "documentation": "Returns the size of the subgroup",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetSize() u32x3"
            }
        ]
    },
    {
        "name": "subgroupGetThreadAndGreaterMask",
        "documentation": "Returns a 128 bit subgroup mask where the current thread and all greater threads are active",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetThreadAndGreaterMask() u32x4"
            }
        ]
    },
    {
        "name": "subgroupGetThreadAndLowerMask",
        "documentation": "Returns a 128 bit subgroup mask where the current thread and all lower threads are active",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetThreadAndLowerMask() u32x4"
            }
        ]
    },
    {
        "name": "subgroupGetThreadMask",
        "documentation": "Returns a 128 bit subgroup mask where the current thread is active",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupGetThreadMask() u32x4"
            }
        ]
    },
    {
        "name": "subgroupInverseBallot",
        "documentation": "Constructs a 128 bit subgroup thread mask to the inverse of the value of the predicate argument for each active thread",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupInverseBallot(b8) u32x4"
            }
        ]
    },
    {
        "name": "subgroupSwapDiagonal",
        "documentation": "Swaps the value at the current thread with the value at the diagonal thread in the subgroup",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupSwapDiagonal(f32) f32"
            },
            {
                "signature": "subgroupSwapDiagonal(f32x2) f32x2"
            },
            {
                "signature": "subgroupSwapDiagonal(f32x3) f32x3"
            },
            {
                "signature": "subgroupSwapDiagonal(f32x4) f32x4"
            },
            {
                "signature": "subgroupSwapDiagonal(f16) f16"
            },
            {
                "signature": "subgroupSwapDiagonal(f16x2) f16x2"
            },
            {
                "signature": "subgroupSwapDiagonal(f16x3) f16x3"
            },
            {
                "signature": "subgroupSwapDiagonal(f16x4) f16x4"
            },
            {
                "signature": "subgroupSwapDiagonal(i32) i32"
            },
            {
                "signature": "subgroupSwapDiagonal(i32x2) i32x2"
            },
            {
                "signature": "subgroupSwapDiagonal(i32x3) i32x3"
            },
            {
                "signature": "subgroupSwapDiagonal(i32x4) i32x4"
            },
            {
                "signature": "subgroupSwapDiagonal(i16) i16"
            },
            {
                "signature": "subgroupSwapDiagonal(i16x2) i16x2"
            },
            {
                "signature": "subgroupSwapDiagonal(i16x3) i16x3"
            },
            {
                "signature": "subgroupSwapDiagonal(i16x4) i16x4"
            },
            {
                "signature": "subgroupSwapDiagonal(u32) u32"
            },
            {
                "signature": "subgroupSwapDiagonal(u32x2) u32x2"
            },
            {
                "signature": "subgroupSwapDiagonal(u32x3) u32x3"
            },
            {
                "signature": "subgroupSwapDiagonal(u32x4) u32x4"
            },
            {
                "signature": "subgroupSwapDiagonal(u16) u16"
            },
            {
                "signature": "subgroupSwapDiagonal(u16x2) u16x2"
            },
            {
                "signature": "subgroupSwapDiagonal(u16x3) u16x3"
            },
            {
                "signature": "subgroupSwapDiagonal(u16x4) u16x4"
            }
        ]
    },
    {
        "name": "subgroupSwapHorizontal",
        "documentation": "Swaps the value at the current thread with the value at the horizontal thread in the subgroup",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupSwapHorizontal(f32) f32"
            },
            {
                "signature": "subgroupSwapHorizontal(f32x2) f32x2"
            },
            {
                "signature": "subgroupSwapHorizontal(f32x3) f32x3"
            },
            {
                "signature": "subgroupSwapHorizontal(f32x4) f32x4"
            },
            {
                "signature": "subgroupSwapHorizontal(f16) f16"
            },
            {
                "signature": "subgroupSwapHorizontal(f16x2) f16x2"
            },
            {
                "signature": "subgroupSwapHorizontal(f16x3) f16x3"
            },
            {
                "signature": "subgroupSwapHorizontal(f16x4) f16x4"
            },
            {
                "signature": "subgroupSwapHorizontal(i32) i32"
            },
            {
                "signature": "subgroupSwapHorizontal(i32x2) i32x2"
            },
            {
                "signature": "subgroupSwapHorizontal(i32x3) i32x3"
            },
            {
                "signature": "subgroupSwapHorizontal(i32x4) i32x4"
            },
            {
                "signature": "subgroupSwapHorizontal(i16) i16"
            },
            {
                "signature": "subgroupSwapHorizontal(i16x2) i16x2"
            },
            {
                "signature": "subgroupSwapHorizontal(i16x3) i16x3"
            },
            {
                "signature": "subgroupSwapHorizontal(i16x4) i16x4"
            },
            {
                "signature": "subgroupSwapHorizontal(u32) u32"
            },
            {
                "signature": "subgroupSwapHorizontal(u32x2) u32x2"
            },
            {
                "signature": "subgroupSwapHorizontal(u32x3) u32x3"
            },
            {
                "signature": "subgroupSwapHorizontal(u32x4) u32x4"
            },
            {
                "signature": "subgroupSwapHorizontal(u16) u16"
            },
            {
                "signature": "subgroupSwapHorizontal(u16x2) u16x2"
            },
            {
                "signature": "subgroupSwapHorizontal(u16x3) u16x3"
            },
            {
                "signature": "subgroupSwapHorizontal(u16x4) u16x4"
            }
        ]
    },
    {
        "name": "subgroupSwapVertical",
        "documentation": "Swaps the value at the current thread with the value at the vertical thread in the subgroup",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "subgroupSwapVertical(f32) f32"
            },
            {
                "signature": "subgroupSwapVertical(f32x2) f32x2"
            },
            {
                "signature": "subgroupSwapVertical(f32x3) f32x3"
            },
            {
                "signature": "subgroupSwapVertical(f32x4) f32x4"
            },
            {
                "signature": "subgroupSwapVertical(f16) f16"
            },
            {
                "signature": "subgroupSwapVertical(f16x2) f16x2"
            },
            {
                "signature": "subgroupSwapVertical(f16x3) f16x3"
            },
            {
                "signature": "subgroupSwapVertical(f16x4) f16x4"
            },
            {
                "signature": "subgroupSwapVertical(i32) i32"
            },
            {
                "signature": "subgroupSwapVertical(i32x2) i32x2"
            },
            {
                "signature": "subgroupSwapVertical(i32x3) i32x3"
            },
            {
                "signature": "subgroupSwapVertical(i32x4) i32x4"
            },
            {
                "signature": "subgroupSwapVertical(i16) i16"
            },
            {
                "signature": "subgroupSwapVertical(i16x2) i16x2"
            },
            {
                "signature": "subgroupSwapVertical(i16x3) i16x3"
            },
            {
                "signature": "subgroupSwapVertical(i16x4) i16x4"
            },
            {
                "signature": "subgroupSwapVertical(u32) u32"
            },
            {
                "signature": "subgroupSwapVertical(u32x2) u32x2"
            },
            {
                "signature": "subgroupSwapVertical(u32x3) u32x3"
            },
            {
                "signature": "subgroupSwapVertical(u32x4) u32x4"
            },
            {
                "signature": "subgroupSwapVertical(u16) u16"
            },
            {
                "signature": "subgroupSwapVertical(u16x2) u16x2"
            },
            {
                "signature": "subgroupSwapVertical(u16x3) u16x3"
            },
            {
                "signature": "subgroupSwapVertical(u16x4) u16x4"
            }
        ]
    },
    {
        "name": "tan",
        "documentation": "Returns the tangent of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "tan(f32) f32"
            },
            {
                "signature": "tan(f32x2) f32x2"
            },
            {
                "signature": "tan(f32x3) f32x3"
            },
            {
                "signature": "tan(f32x4) f32x4"
            },
            {
                "signature": "tan(f16) f16"
            },
            {
                "signature": "tan(f16x2) f16x2"
            },
            {
                "signature": "tan(f16x3) f16x3"
            },
            {
                "signature": "tan(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "tanh",
        "documentation": "Returns the hyperbolic tangent of a value.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "tanh(f32) f32"
            },
            {
                "signature": "tanh(f32x2) f32x2"
            },
            {
                "signature": "tanh(f32x3) f32x3"
            },
            {
                "signature": "tanh(f32x4) f32x4"
            },
            {
                "signature": "tanh(f16) f16"
            },
            {
                "signature": "tanh(f16x2) f16x2"
            },
            {
                "signature": "tanh(f16x3) f16x3"
            },
            {
                "signature": "tanh(f16x4) f16x4"
            },
            {
                "signature": "tanh(f32, f32) f32"
            },
            {
                "signature": "tanh(f32x2, f32x2) f32x2"
            },
            {
                "signature": "tanh(f32x3, f32x3) f32x3"
            },
            {
                "signature": "tanh(f32x4, f32x4) f32x4"
            },
            {
                "signature": "tanh(f16, f16) f16"
            },
            {
                "signature": "tanh(f16x2, f16x2) f16x2"
            },
            {
                "signature": "tanh(f16x3, f16x3) f16x3"
            },
            {
                "signature": "tanh(f16x4, f16x4) f16x4"
            }
        ]
    },
    {
        "name": "textureFetch",
        "documentation": "Fetch a single texel without using a sampler value at a coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureFetch(uniform *texture1D, i32, u32) f32x4"
            },
            {
                "signature": "textureFetch(uniform *texture2D, i32x2, u32) f32x4"
            },
            {
                "signature": "textureFetch(uniform *texture3D, i32x3, u32) f32x4"
            },
            {
                "signature": "textureFetch(uniform *texture1DArray, i32x2, u32) f32x4"
            },
            {
                "signature": "textureFetch(uniform *texture2DArray, i32x3, u32) f32x4"
            },
            {
                "signature": "textureFetch(uniform *texture2DMS, i32x2, u32) f32x4"
            },
            {
                "signature": "textureFetch(uniform *texture2DMSArray, i32x3, u32) f32x4"
            }
        ]
    },
    {
        "name": "textureFetchSample",
        "documentation": "Fetch a single texel without using a sampler value at a coordinate at a specific sample index",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureFetchSample(uniform *texture1D, i32, u32, u32) f32x4"
            },
            {
                "signature": "textureFetchSample(uniform *texture2D, i32x2, u32, u32) f32x4"
            },
            {
                "signature": "textureFetchSample(uniform *texture3D, i32x3, u32, u32) f32x4"
            },
            {
                "signature": "textureFetchSample(uniform *texture1DArray, i32x2, u32, u32) f32x4"
            },
            {
                "signature": "textureFetchSample(uniform *texture2DArray, i32x3, u32, u32) f32x4"
            },
            {
                "signature": "textureFetchSample(uniform *texture2DMS, i32x2, u32, u32) f32x4"
            },
            {
                "signature": "textureFetchSample(uniform *texture2DMSArray, i32x3, u32, u32) f32x4"
            }
        ]
    },
    {
        "name": "textureGather",
        "documentation": "Gather 4 values of a quad at a coordinate where the component is the channel to read",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureGather(uniform *texture2D, uniform *sampler, i32x2, i32) f32x4"
            },
            {
                "signature": "textureGather(uniform *sampled texture2D, i32x2, i32) f32x4"
            },
            {
                "signature": "textureGather(uniform *textureCube, uniform *sampler, i32x3, i32) f32x4"
            },
            {
                "signature": "textureGather(uniform *sampled textureCube, i32x3, i32) f32x4"
            },
            {
                "signature": "textureGather(uniform *texture2DArray, uniform *sampler, i32x3, i32) f32x4"
            },
            {
                "signature": "textureGather(uniform *sampled texture2DArray, i32x3, i32) f32x4"
            },
            {
                "signature": "textureGather(uniform *textureCubeArray, uniform *sampler, i32x4, i32) f32x4"
            },
            {
                "signature": "textureGather(uniform *sampled textureCubeArray, i32x4, i32) f32x4"
            }
        ]
    },
    {
        "name": "textureGatherOffset",
        "documentation": "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureGatherOffset(uniform *texture2D, uniform *sampler, i32x2, i32, u32) f32x4"
            },
            {
                "signature": "textureGatherOffset(uniform *sampled texture2D, i32x2, i32, u32) f32x4"
            },
            {
                "signature": "textureGatherOffset(uniform *textureCube, uniform *sampler, i32x3, i32, u32) f32x4"
            },
            {
                "signature": "textureGatherOffset(uniform *sampled textureCube, i32x3, i32, u32) f32x4"
            },
            {
                "signature": "textureGatherOffset(uniform *texture2DArray, uniform *sampler, i32x3, i32, u32) f32x4"
            },
            {
                "signature": "textureGatherOffset(uniform *sampled texture2DArray, i32x3, i32, u32) f32x4"
            },
            {
                "signature": "textureGatherOffset(uniform *textureCubeArray, uniform *sampler, i32x4, i32, u32) f32x4"
            },
            {
                "signature": "textureGatherOffset(uniform *sampled textureCubeArray, i32x4, i32, u32) f32x4"
            }
        ]
    },
    {
        "name": "textureGetMips",
        "documentation": "Get the number of mips in a texture",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureGetMips(uniform *texture1D) texture1D"
            },
            {
                "signature": "textureGetMips(uniform *texture2D) texture2D"
            },
            {
                "signature": "textureGetMips(uniform *texture3D) texture3D"
            },
            {
                "signature": "textureGetMips(uniform *textureCube) textureCube"
            },
            {
                "signature": "textureGetMips(uniform *texture1DArray) texture1DArray"
            },
            {
                "signature": "textureGetMips(uniform *texture2DArray) texture2DArray"
            },
            {
                "signature": "textureGetMips(uniform *textureCubeArray) textureCubeArray"
            }
        ]
    },
    {
        "name": "textureGetSampledMip",
        "documentation": "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureGetSampledMip(uniform *texture1D, uniform *sampler, f32) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform *sampled texture1D, f32) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform *texture2D, uniform *sampler, f32x2) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform *sampled texture2D, f32x2) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform *texture3D, uniform *sampler, f32x3) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform *sampled texture3D, f32x3) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform *textureCube, uniform *sampler, f32x3) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform *sampled textureCube, f32x3) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform *texture1DArray, uniform *sampler, f32x2) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform *sampled texture1DArray, f32x2) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform *texture2DArray, uniform *sampler, f32x3) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform *sampled texture2DArray, f32x3) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform *textureCubeArray, uniform *sampler, f32x4) f32x2"
            },
            {
                "signature": "textureGetSampledMip(uniform *sampled textureCubeArray, f32x4) f32x2"
            }
        ]
    },
    {
        "name": "textureGetSamples",
        "documentation": "Get the number of samples in a multisampled texture",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureGetSamples(uniform *texture2DMS) texture2DMS"
            },
            {
                "signature": "textureGetSamples(uniform *texture2DMSArray) texture2DMSArray"
            }
        ]
    },
    {
        "name": "textureGetSize",
        "documentation": "Get the size of a texture",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureGetSize(uniform *texture1D) u32"
            },
            {
                "signature": "textureGetSize(uniform *texture2D) u32x2"
            },
            {
                "signature": "textureGetSize(uniform *texture3D) u32x3"
            },
            {
                "signature": "textureGetSize(uniform *textureCube) u32x3"
            },
            {
                "signature": "textureGetSize(uniform *texture1DArray) u32x2"
            },
            {
                "signature": "textureGetSize(uniform *texture2DArray) u32x3"
            },
            {
                "signature": "textureGetSize(uniform *textureCubeArray) u32x4"
            }
        ]
    },
    {
        "name": "textureGetSizeMip",
        "documentation": "Get the size of a texture at a specific mip level",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureGetSizeMip(uniform *texture1D, u32) u32"
            },
            {
                "signature": "textureGetSizeMip(uniform *texture2D, u32) u32x2"
            },
            {
                "signature": "textureGetSizeMip(uniform *texture3D, u32) u32x3"
            },
            {
                "signature": "textureGetSizeMip(uniform *textureCube, u32) u32x3"
            },
            {
                "signature": "textureGetSizeMip(uniform *texture1DArray, u32) u32x2"
            },
            {
                "signature": "textureGetSizeMip(uniform *texture2DArray, u32) u32x3"
            },
            {
                "signature": "textureGetSizeMip(uniform *textureCubeArray, u32) u32x4"
            }
        ]
    },
    {
        "name": "textureLoad",
        "documentation": "Load a single texel without using a sampler value at an absolute non-normalized coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureLoad(uniform *mutable texture1D, i32) f32x4"
            },
            {
                "signature": "textureLoad(uniform *mutable texture2D, i32x2) f32x4"
            },
            {
                "signature": "textureLoad(uniform *mutable texture3D, i32x3) f32x4"
            },
            {
                "signature": "textureLoad(uniform *mutable textureCube, i32x3) f32x4"
            },
            {
                "signature": "textureLoad(uniform *mutable texture1DArray, i32x2) f32x4"
            },
            {
                "signature": "textureLoad(uniform *mutable texture2DArray, i32x3) f32x4"
            },
            {
                "signature": "textureLoad(uniform *mutable textureCubeArray, i32x4) f32x4"
            },
            {
                "signature": "textureLoad(uniform *mutable texture2DMS, i32x2) f32x4"
            },
            {
                "signature": "textureLoad(uniform *mutable texture2DMSArray, i32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureLoadMip",
        "documentation": "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureLoadMip(uniform *mutable texture1D, i32, i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform *mutable texture2D, i32x2, i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform *mutable texture3D, i32x3, i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform *mutable textureCube, i32x3, i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform *mutable texture1DArray, i32x2, i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform *mutable texture2DArray, i32x3, i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform *mutable textureCubeArray, i32x4, i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform *mutable texture2DMS, i32x2, i32) f32x4"
            },
            {
                "signature": "textureLoadMip(uniform *mutable texture2DMSArray, i32x3, i32) f32x4"
            }
        ]
    },
    {
        "name": "texturePixelCacheLoad",
        "documentation": "Load a pixel value from a previous thread",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "texturePixelCacheLoad(uniform *pixelCache) pixelCache"
            },
            {
                "signature": "texturePixelCacheLoad(uniform *pixelCacheMS, u32) pixelCacheMS"
            }
        ]
    },
    {
        "name": "textureSample",
        "documentation": "Sample a texture at coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSample(uniform *texture1D, uniform *sampler, f32) f32x4"
            },
            {
                "signature": "textureSample(uniform *sampled texture1D, f32) f32x4"
            },
            {
                "signature": "textureSample(uniform *texture2D, uniform *sampler, f32x2) f32x4"
            },
            {
                "signature": "textureSample(uniform *sampled texture2D, f32x2) f32x4"
            },
            {
                "signature": "textureSample(uniform *texture3D, uniform *sampler, f32x3) f32x4"
            },
            {
                "signature": "textureSample(uniform *sampled texture3D, f32x3) f32x4"
            },
            {
                "signature": "textureSample(uniform *textureCube, uniform *sampler, f32x3) f32x4"
            },
            {
                "signature": "textureSample(uniform *sampled textureCube, f32x3) f32x4"
            },
            {
                "signature": "textureSample(uniform *texture1DArray, uniform *sampler, f32x2) f32x4"
            },
            {
                "signature": "textureSample(uniform *sampled texture1DArray, f32x2) f32x4"
            },
            {
                "signature": "textureSample(uniform *texture2DArray, uniform *sampler, f32x3) f32x4"
            },
            {
                "signature": "textureSample(uniform *sampled texture2DArray, f32x3) f32x4"
            },
            {
                "signature": "textureSample(uniform *textureCubeArray, uniform *sampler, f32x4) f32x4"
            },
            {
                "signature": "textureSample(uniform *sampled textureCubeArray, f32x4) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleBias",
        "documentation": "Sample a texture at coordinate with a mip bias",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBias(uniform *texture1D, uniform *sampler, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform *sampled texture1D, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform *texture2D, uniform *sampler, f32x2, f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform *sampled texture2D, f32x2, f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform *texture3D, uniform *sampler, f32x3, f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform *sampled texture3D, f32x3, f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform *textureCube, uniform *sampler, f32x3, f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform *sampled textureCube, f32x3, f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform *texture1DArray, uniform *sampler, f32x2, f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform *sampled texture1DArray, f32x2, f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform *texture2DArray, uniform *sampler, f32x3, f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform *sampled texture2DArray, f32x3, f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform *textureCubeArray, uniform *sampler, f32x4, f32) f32x4"
            },
            {
                "signature": "textureSampleBias(uniform *sampled textureCubeArray, f32x4, f32) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleBiasCompare",
        "documentation": "Sample a texture at coordinate with a mip bias with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBiasCompare(uniform *texture1D, uniform *sampler, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform *sampled texture1D, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform *texture2D, uniform *sampler, f32x2, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform *sampled texture2D, f32x2, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform *texture3D, uniform *sampler, f32x3, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform *sampled texture3D, f32x3, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform *texture1DArray, uniform *sampler, f32x2, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform *sampled texture1DArray, f32x2, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform *texture2DArray, uniform *sampler, f32x3, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasCompare(uniform *sampled texture2DArray, f32x3, f32, f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleBiasCompareOffset",
        "documentation": "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBiasCompareOffset(uniform *texture1D, uniform *sampler, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform *sampled texture1D, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform *texture2D, uniform *sampler, f32x2, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform *sampled texture2D, f32x2, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform *texture3D, uniform *sampler, f32x3, f32, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform *sampled texture3D, f32x3, f32, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform *texture1DArray, uniform *sampler, f32x2, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform *sampled texture1DArray, f32x2, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform *texture2DArray, uniform *sampler, f32x3, f32, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleBiasCompareOffset(uniform *sampled texture2DArray, f32x3, f32, f32, f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleBiasOffset",
        "documentation": "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBiasOffset(uniform *texture1D, uniform *sampler, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform *sampled texture1D, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform *texture2D, uniform *sampler, f32x2, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform *sampled texture2D, f32x2, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform *texture3D, uniform *sampler, f32x3, f32, f32x3) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform *sampled texture3D, f32x3, f32, f32x3) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform *texture1DArray, uniform *sampler, f32x2, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform *sampled texture1DArray, f32x2, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform *texture2DArray, uniform *sampler, f32x3, f32, f32x3) f32x4"
            },
            {
                "signature": "textureSampleBiasOffset(uniform *sampled texture2DArray, f32x3, f32, f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleBiasProj",
        "documentation": "Sample a texture at coordinate with a mip bias with projection",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBiasProj(uniform *texture1D, uniform *sampler, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleBiasProj(uniform *sampled texture1D, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleBiasProj(uniform *texture2D, uniform *sampler, f32x2, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleBiasProj(uniform *sampled texture2D, f32x2, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleBiasProj(uniform *texture3D, uniform *sampler, f32x3, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleBiasProj(uniform *sampled texture3D, f32x3, f32, f32) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleBiasProjCompare",
        "documentation": "Sample a texture at coordinate with a mip bias with projection with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBiasProjCompare(uniform *texture1D, uniform *sampler, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasProjCompare(uniform *sampled texture1D, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasProjCompare(uniform *texture2D, uniform *sampler, f32x2, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasProjCompare(uniform *sampled texture2D, f32x2, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasProjCompare(uniform *texture3D, uniform *sampler, f32x3, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasProjCompare(uniform *sampled texture3D, f32x3, f32, f32, f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleBiasProjCompareOffset",
        "documentation": "Sample a texture at coordinate with a mip bias with projection with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBiasProjCompareOffset(uniform *texture1D, uniform *sampler, f32, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasProjCompareOffset(uniform *sampled texture1D, f32, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleBiasProjCompareOffset(uniform *texture2D, uniform *sampler, f32x2, f32, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleBiasProjCompareOffset(uniform *sampled texture2D, f32x2, f32, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleBiasProjCompareOffset(uniform *texture3D, uniform *sampler, f32x3, f32, f32, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleBiasProjCompareOffset(uniform *sampled texture3D, f32x3, f32, f32, f32, f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleBiasProjOffset",
        "documentation": "Sample a texture at coordinate with a mip bias with projection with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleBiasProjOffset(uniform *texture1D, uniform *sampler, f32, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleBiasProjOffset(uniform *sampled texture1D, f32, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleBiasProjOffset(uniform *texture2D, uniform *sampler, f32x2, f32, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleBiasProjOffset(uniform *sampled texture2D, f32x2, f32, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleBiasProjOffset(uniform *texture3D, uniform *sampler, f32x3, f32, f32, f32x3) f32x4"
            },
            {
                "signature": "textureSampleBiasProjOffset(uniform *sampled texture3D, f32x3, f32, f32, f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleCompare",
        "documentation": "Sample a texture at coordinate with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleCompare(uniform *texture1D, uniform *sampler, f32, f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform *sampled texture1D, f32, f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform *texture2D, uniform *sampler, f32x2, f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform *sampled texture2D, f32x2, f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform *texture3D, uniform *sampler, f32x3, f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform *sampled texture3D, f32x3, f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform *texture1DArray, uniform *sampler, f32x2, f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform *sampled texture1DArray, f32x2, f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform *texture2DArray, uniform *sampler, f32x3, f32) f32"
            },
            {
                "signature": "textureSampleCompare(uniform *sampled texture2DArray, f32x3, f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleCompareOffset",
        "documentation": "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleCompareOffset(uniform *texture1D, uniform *sampler, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform *sampled texture1D, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform *texture2D, uniform *sampler, f32x2, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform *sampled texture2D, f32x2, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform *texture3D, uniform *sampler, f32x3, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform *sampled texture3D, f32x3, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform *texture1DArray, uniform *sampler, f32x2, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform *sampled texture1DArray, f32x2, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform *texture2DArray, uniform *sampler, f32x3, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleCompareOffset(uniform *sampled texture2DArray, f32x3, f32, f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleGrad",
        "documentation": "Sample a texture at coordinate with explicit gradient",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGrad(uniform *texture1D, uniform *sampler, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform *sampled texture1D, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform *texture2D, uniform *sampler, f32x2, f32x2, f32x2) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform *sampled texture2D, f32x2, f32x2, f32x2) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform *texture3D, uniform *sampler, f32x3, f32x3, f32x3) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform *sampled texture3D, f32x3, f32x3, f32x3) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform *textureCube, uniform *sampler, f32x3, f32x3, f32x3) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform *sampled textureCube, f32x3, f32x3, f32x3) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform *texture1DArray, uniform *sampler, f32x2, f32x2, f32x2) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform *sampled texture1DArray, f32x2, f32x2, f32x2) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform *texture2DArray, uniform *sampler, f32x3, f32x3, f32x3) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform *sampled texture2DArray, f32x3, f32x3, f32x3) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform *textureCubeArray, uniform *sampler, f32x4, f32x4, f32x4) f32x4"
            },
            {
                "signature": "textureSampleGrad(uniform *sampled textureCubeArray, f32x4, f32x4, f32x4) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleGradCompare",
        "documentation": "Sample a texture at coordinate with explicit gradient with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGradCompare(uniform *texture1D, uniform *sampler, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform *sampled texture1D, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform *texture2D, uniform *sampler, f32x2, f32x2, f32x2, f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform *sampled texture2D, f32x2, f32x2, f32x2, f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform *texture3D, uniform *sampler, f32x3, f32x3, f32x3, f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform *sampled texture3D, f32x3, f32x3, f32x3, f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform *texture1DArray, uniform *sampler, f32x2, f32x2, f32x2, f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform *sampled texture1DArray, f32x2, f32x2, f32x2, f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform *texture2DArray, uniform *sampler, f32x3, f32x3, f32x3, f32) f32"
            },
            {
                "signature": "textureSampleGradCompare(uniform *sampled texture2DArray, f32x3, f32x3, f32x3, f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleGradCompareOffset",
        "documentation": "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGradCompareOffset(uniform *texture1D, uniform *sampler, f32, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform *sampled texture1D, f32, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform *texture2D, uniform *sampler, f32x2, f32x2, f32x2, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform *sampled texture2D, f32x2, f32x2, f32x2, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform *texture3D, uniform *sampler, f32x3, f32x3, f32x3, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform *sampled texture3D, f32x3, f32x3, f32x3, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform *texture1DArray, uniform *sampler, f32x2, f32x2, f32x2, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform *sampled texture1DArray, f32x2, f32x2, f32x2, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform *texture2DArray, uniform *sampler, f32x3, f32x3, f32x3, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleGradCompareOffset(uniform *sampled texture2DArray, f32x3, f32x3, f32x3, f32, f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleGradOffset",
        "documentation": "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGradOffset(uniform *texture1D, uniform *sampler, f32, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform *sampled texture1D, f32, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform *texture2D, uniform *sampler, f32x2, f32x2, f32x2, f32x2) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform *sampled texture2D, f32x2, f32x2, f32x2, f32x2) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform *texture3D, uniform *sampler, f32x3, f32x3, f32x3, f32x3) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform *sampled texture3D, f32x3, f32x3, f32x3, f32x3) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform *texture1DArray, uniform *sampler, f32x2, f32x2, f32x2, f32x2) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform *sampled texture1DArray, f32x2, f32x2, f32x2, f32x2) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform *texture2DArray, uniform *sampler, f32x3, f32x3, f32x3, f32x3) f32x4"
            },
            {
                "signature": "textureSampleGradOffset(uniform *sampled texture2DArray, f32x3, f32x3, f32x3, f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleGradProj",
        "documentation": "Sample a texture at coordinate with explicit gradient with projection",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGradProj(uniform *texture1D, uniform *sampler, f32, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleGradProj(uniform *sampled texture1D, f32, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleGradProj(uniform *texture2D, uniform *sampler, f32x2, f32x2, f32x2, f32) f32x4"
            },
            {
                "signature": "textureSampleGradProj(uniform *sampled texture2D, f32x2, f32x2, f32x2, f32) f32x4"
            },
            {
                "signature": "textureSampleGradProj(uniform *texture3D, uniform *sampler, f32x3, f32x3, f32x3, f32) f32x4"
            },
            {
                "signature": "textureSampleGradProj(uniform *sampled texture3D, f32x3, f32x3, f32x3, f32) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleGradProjCompare",
        "documentation": "Sample a texture at coordinate with explicit gradient with projection with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGradProjCompare(uniform *texture1D, uniform *sampler, f32, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleGradProjCompare(uniform *sampled texture1D, f32, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleGradProjCompare(uniform *texture2D, uniform *sampler, f32x2, f32x2, f32x2, f32, f32) f32"
            },
            {
                "signature": "textureSampleGradProjCompare(uniform *sampled texture2D, f32x2, f32x2, f32x2, f32, f32) f32"
            },
            {
                "signature": "textureSampleGradProjCompare(uniform *texture3D, uniform *sampler, f32x3, f32x3, f32x3, f32, f32) f32"
            },
            {
                "signature": "textureSampleGradProjCompare(uniform *sampled texture3D, f32x3, f32x3, f32x3, f32, f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleGradProjCompareOffset",
        "documentation": "Sample a texture at coordinate with explicit gradient with projection with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGradProjCompareOffset(uniform *texture1D, uniform *sampler, f32, f32, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleGradProjCompareOffset(uniform *sampled texture1D, f32, f32, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleGradProjCompareOffset(uniform *texture2D, uniform *sampler, f32x2, f32x2, f32x2, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleGradProjCompareOffset(uniform *sampled texture2D, f32x2, f32x2, f32x2, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleGradProjCompareOffset(uniform *texture3D, uniform *sampler, f32x3, f32x3, f32x3, f32, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleGradProjCompareOffset(uniform *sampled texture3D, f32x3, f32x3, f32x3, f32, f32, f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleGradProjOffset",
        "documentation": "Sample a texture at coordinate with explicit gradient with projection with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleGradProjOffset(uniform *texture1D, uniform *sampler, f32, f32, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleGradProjOffset(uniform *sampled texture1D, f32, f32, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleGradProjOffset(uniform *texture2D, uniform *sampler, f32x2, f32x2, f32x2, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleGradProjOffset(uniform *sampled texture2D, f32x2, f32x2, f32x2, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleGradProjOffset(uniform *texture3D, uniform *sampler, f32x3, f32x3, f32x3, f32, f32x3) f32x4"
            },
            {
                "signature": "textureSampleGradProjOffset(uniform *sampled texture3D, f32x3, f32x3, f32x3, f32, f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleLod",
        "documentation": "Sample a texture at coordinate with explicit level of detail",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLod(uniform *texture1D, uniform *sampler, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform *sampled texture1D, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform *texture2D, uniform *sampler, f32x2, f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform *sampled texture2D, f32x2, f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform *texture3D, uniform *sampler, f32x3, f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform *sampled texture3D, f32x3, f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform *textureCube, uniform *sampler, f32x3, f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform *sampled textureCube, f32x3, f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform *texture1DArray, uniform *sampler, f32x2, f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform *sampled texture1DArray, f32x2, f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform *texture2DArray, uniform *sampler, f32x3, f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform *sampled texture2DArray, f32x3, f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform *textureCubeArray, uniform *sampler, f32x4, f32) f32x4"
            },
            {
                "signature": "textureSampleLod(uniform *sampled textureCubeArray, f32x4, f32) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleLodCompare",
        "documentation": "Sample a texture at coordinate with explicit level of detail with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLodCompare(uniform *texture1D, uniform *sampler, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform *sampled texture1D, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform *texture2D, uniform *sampler, f32x2, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform *sampled texture2D, f32x2, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform *texture3D, uniform *sampler, f32x3, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform *sampled texture3D, f32x3, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform *texture1DArray, uniform *sampler, f32x2, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform *sampled texture1DArray, f32x2, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform *texture2DArray, uniform *sampler, f32x3, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodCompare(uniform *sampled texture2DArray, f32x3, f32, f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleLodCompareOffset",
        "documentation": "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLodCompareOffset(uniform *texture1D, uniform *sampler, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform *sampled texture1D, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform *texture2D, uniform *sampler, f32x2, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform *sampled texture2D, f32x2, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform *texture3D, uniform *sampler, f32x3, f32, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform *sampled texture3D, f32x3, f32, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform *texture1DArray, uniform *sampler, f32x2, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform *sampled texture1DArray, f32x2, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform *texture2DArray, uniform *sampler, f32x3, f32, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleLodCompareOffset(uniform *sampled texture2DArray, f32x3, f32, f32, f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleLodOffset",
        "documentation": "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLodOffset(uniform *texture1D, uniform *sampler, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform *sampled texture1D, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform *texture2D, uniform *sampler, f32x2, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform *sampled texture2D, f32x2, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform *texture3D, uniform *sampler, f32x3, f32, f32x3) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform *sampled texture3D, f32x3, f32, f32x3) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform *texture1DArray, uniform *sampler, f32x2, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform *sampled texture1DArray, f32x2, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform *texture2DArray, uniform *sampler, f32x3, f32, f32x3) f32x4"
            },
            {
                "signature": "textureSampleLodOffset(uniform *sampled texture2DArray, f32x3, f32, f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleLodProj",
        "documentation": "Sample a texture at coordinate with explicit level of detail with projection",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLodProj(uniform *texture1D, uniform *sampler, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleLodProj(uniform *sampled texture1D, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleLodProj(uniform *texture2D, uniform *sampler, f32x2, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleLodProj(uniform *sampled texture2D, f32x2, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleLodProj(uniform *texture3D, uniform *sampler, f32x3, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleLodProj(uniform *sampled texture3D, f32x3, f32, f32) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleLodProjCompare",
        "documentation": "Sample a texture at coordinate with explicit level of detail with projection with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLodProjCompare(uniform *texture1D, uniform *sampler, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodProjCompare(uniform *sampled texture1D, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodProjCompare(uniform *texture2D, uniform *sampler, f32x2, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodProjCompare(uniform *sampled texture2D, f32x2, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodProjCompare(uniform *texture3D, uniform *sampler, f32x3, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodProjCompare(uniform *sampled texture3D, f32x3, f32, f32, f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleLodProjCompareOffset",
        "documentation": "Sample a texture at coordinate with explicit level of detail with projection with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLodProjCompareOffset(uniform *texture1D, uniform *sampler, f32, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodProjCompareOffset(uniform *sampled texture1D, f32, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleLodProjCompareOffset(uniform *texture2D, uniform *sampler, f32x2, f32, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleLodProjCompareOffset(uniform *sampled texture2D, f32x2, f32, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleLodProjCompareOffset(uniform *texture3D, uniform *sampler, f32x3, f32, f32, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleLodProjCompareOffset(uniform *sampled texture3D, f32x3, f32, f32, f32, f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleLodProjOffset",
        "documentation": "Sample a texture at coordinate with explicit level of detail with projection with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleLodProjOffset(uniform *texture1D, uniform *sampler, f32, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleLodProjOffset(uniform *sampled texture1D, f32, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleLodProjOffset(uniform *texture2D, uniform *sampler, f32x2, f32, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleLodProjOffset(uniform *sampled texture2D, f32x2, f32, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleLodProjOffset(uniform *texture3D, uniform *sampler, f32x3, f32, f32, f32x3) f32x4"
            },
            {
                "signature": "textureSampleLodProjOffset(uniform *sampled texture3D, f32x3, f32, f32, f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleOffset",
        "documentation": "Sample a texture at coordinate with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleOffset(uniform *texture1D, uniform *sampler, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform *sampled texture1D, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform *texture2D, uniform *sampler, f32x2, f32x2) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform *sampled texture2D, f32x2, f32x2) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform *texture3D, uniform *sampler, f32x3, f32x3) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform *sampled texture3D, f32x3, f32x3) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform *texture1DArray, uniform *sampler, f32x2, f32x2) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform *sampled texture1DArray, f32x2, f32x2) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform *texture2DArray, uniform *sampler, f32x3, f32x3) f32x4"
            },
            {
                "signature": "textureSampleOffset(uniform *sampled texture2DArray, f32x3, f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleProj",
        "documentation": "Sample a texture at coordinate with projection",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleProj(uniform *texture1D, uniform *sampler, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleProj(uniform *sampled texture1D, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleProj(uniform *texture2D, uniform *sampler, f32x2, f32) f32x4"
            },
            {
                "signature": "textureSampleProj(uniform *sampled texture2D, f32x2, f32) f32x4"
            },
            {
                "signature": "textureSampleProj(uniform *texture3D, uniform *sampler, f32x3, f32) f32x4"
            },
            {
                "signature": "textureSampleProj(uniform *sampled texture3D, f32x3, f32) f32x4"
            }
        ]
    },
    {
        "name": "textureSampleProjCompare",
        "documentation": "Sample a texture at coordinate with projection with depth comparison",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleProjCompare(uniform *texture1D, uniform *sampler, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleProjCompare(uniform *sampled texture1D, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleProjCompare(uniform *texture2D, uniform *sampler, f32x2, f32, f32) f32"
            },
            {
                "signature": "textureSampleProjCompare(uniform *sampled texture2D, f32x2, f32, f32) f32"
            },
            {
                "signature": "textureSampleProjCompare(uniform *texture3D, uniform *sampler, f32x3, f32, f32) f32"
            },
            {
                "signature": "textureSampleProjCompare(uniform *sampled texture3D, f32x3, f32, f32) f32"
            }
        ]
    },
    {
        "name": "textureSampleProjCompareOffset",
        "documentation": "Sample a texture at coordinate with projection with depth comparison with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleProjCompareOffset(uniform *texture1D, uniform *sampler, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleProjCompareOffset(uniform *sampled texture1D, f32, f32, f32, f32) f32"
            },
            {
                "signature": "textureSampleProjCompareOffset(uniform *texture2D, uniform *sampler, f32x2, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleProjCompareOffset(uniform *sampled texture2D, f32x2, f32, f32, f32x2) f32"
            },
            {
                "signature": "textureSampleProjCompareOffset(uniform *texture3D, uniform *sampler, f32x3, f32, f32, f32x3) f32"
            },
            {
                "signature": "textureSampleProjCompareOffset(uniform *sampled texture3D, f32x3, f32, f32, f32x3) f32"
            }
        ]
    },
    {
        "name": "textureSampleProjOffset",
        "documentation": "Sample a texture at coordinate with projection with an offset applied to the coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureSampleProjOffset(uniform *texture1D, uniform *sampler, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleProjOffset(uniform *sampled texture1D, f32, f32, f32) f32x4"
            },
            {
                "signature": "textureSampleProjOffset(uniform *texture2D, uniform *sampler, f32x2, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleProjOffset(uniform *sampled texture2D, f32x2, f32, f32x2) f32x4"
            },
            {
                "signature": "textureSampleProjOffset(uniform *texture3D, uniform *sampler, f32x3, f32, f32x3) f32x4"
            },
            {
                "signature": "textureSampleProjOffset(uniform *sampled texture3D, f32x3, f32, f32x3) f32x4"
            }
        ]
    },
    {
        "name": "textureStore",
        "documentation": "Store a single texel without using a sampler value at an absolute non-normalized coordinate",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureStore(uniform *mutable texture1D, i32, f32x4) void"
            },
            {
                "signature": "textureStore(uniform *mutable texture2D, i32x2, f32x4) void"
            },
            {
                "signature": "textureStore(uniform *mutable texture3D, i32x3, f32x4) void"
            },
            {
                "signature": "textureStore(uniform *mutable textureCube, i32x3, f32x4) void"
            },
            {
                "signature": "textureStore(uniform *mutable texture1DArray, i32x2, f32x4) void"
            },
            {
                "signature": "textureStore(uniform *mutable texture2DArray, i32x3, f32x4) void"
            },
            {
                "signature": "textureStore(uniform *mutable textureCubeArray, i32x4, f32x4) void"
            },
            {
                "signature": "textureStore(uniform *mutable texture2DMS, i32x2, f32x4) void"
            },
            {
                "signature": "textureStore(uniform *mutable texture2DMSArray, i32x3, f32x4) void"
            }
        ]
    },
    {
        "name": "textureStoreMip",
        "documentation": "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "textureStoreMip(uniform *mutable texture1D, i32, i32, f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform *mutable texture2D, i32x2, i32, f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform *mutable texture3D, i32x3, i32, f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform *mutable textureCube, i32x3, i32, f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform *mutable texture1DArray, i32x2, i32, f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform *mutable texture2DArray, i32x3, i32, f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform *mutable textureCubeArray, i32x4, i32, f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform *mutable texture2DMS, i32x2, i32, f32x4) void"
            },
            {
                "signature": "textureStoreMip(uniform *mutable texture2DMSArray, i32x3, i32, f32x4) void"
            }
        ]
    },
    {
        "name": "transpose",
        "documentation": "Returns the transposed matrix.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "transpose(f32x2x2) f32x2x2"
            },
            {
                "signature": "transpose(f16x2x2) f16x2x2"
            },
            {
                "signature": "transpose(f32x2x3) f32x2x3"
            },
            {
                "signature": "transpose(f16x2x3) f16x2x3"
            },
            {
                "signature": "transpose(f32x2x4) f32x2x4"
            },
            {
                "signature": "transpose(f16x2x4) f16x2x4"
            },
            {
                "signature": "transpose(f32x3x2) f32x3x2"
            },
            {
                "signature": "transpose(f16x3x2) f16x3x2"
            },
            {
                "signature": "transpose(f32x3x3) f32x3x3"
            },
            {
                "signature": "transpose(f16x3x3) f16x3x3"
            },
            {
                "signature": "transpose(f32x3x4) f32x3x4"
            },
            {
                "signature": "transpose(f16x3x4) f16x3x4"
            },
            {
                "signature": "transpose(f32x4x2) f32x4x2"
            },
            {
                "signature": "transpose(f16x4x2) f16x4x2"
            },
            {
                "signature": "transpose(f32x4x3) f32x4x3"
            },
            {
                "signature": "transpose(f16x4x3) f16x4x3"
            },
            {
                "signature": "transpose(f32x4x4) f32x4x4"
            },
            {
                "signature": "transpose(f16x4x4) f16x4x4"
            }
        ]
    },
    {
        "name": "trunc",
        "documentation": "Returns the integer part of the input, removing any fractional part.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "trunc(f32) f32"
            },
            {
                "signature": "trunc(f32x2) f32x2"
            },
            {
                "signature": "trunc(f32x3) f32x3"
            },
            {
                "signature": "trunc(f32x4) f32x4"
            },
            {
                "signature": "trunc(f16) f16"
            },
            {
                "signature": "trunc(f16x2) f16x2"
            },
            {
                "signature": "trunc(f16x3) f16x3"
            },
            {
                "signature": "trunc(f16x4) f16x4"
            }
        ]
    },
    {
        "name": "vertexExportCoordinates",
        "documentation": "Exports the value as the vertex position to the rasterizer. This function must be called at least once in a vertex shader. This is the same as the `SV_POSITION` in HLSL or `gl_Position` in GLSL.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexExportCoordinates(f32x4) void"
            },
            {
                "signature": "vertexExportCoordinates(f16x4) void"
            }
        ]
    },
    {
        "name": "vertexGetBaseIndex",
        "documentation": "Returns the base index of the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexGetBaseIndex() u32"
            }
        ]
    },
    {
        "name": "vertexGetBaseInstanceIndex",
        "documentation": "Returns the base instance index of the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexGetBaseInstanceIndex() u32"
            }
        ]
    },
    {
        "name": "vertexGetDrawIndex",
        "documentation": "Returns the draw index of the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexGetDrawIndex() u32"
            }
        ]
    },
    {
        "name": "vertexGetIndex",
        "documentation": "Returns the index of the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexGetIndex() u32"
            }
        ]
    },
    {
        "name": "vertexGetInstanceIndex",
        "documentation": "Returns the instance index of the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexGetInstanceIndex() u32"
            }
        ]
    },
    {
        "name": "vertexGetOutputLayer",
        "documentation": "Returns the output layer for the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexGetOutputLayer() u32"
            }
        ]
    },
    {
        "name": "vertexGetOutputViewport",
        "documentation": "Returns the output viewport for the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexGetOutputViewport() u32"
            }
        ]
    },
    {
        "name": "vertexSetOutputLayer",
        "documentation": "Sets the output layer for the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexSetOutputLayer(u16) void"
            },
            {
                "signature": "vertexSetOutputLayer(u32) void"
            }
        ]
    },
    {
        "name": "vertexSetOutputViewport",
        "documentation": "Sets the output viewport for the current vertex.",
        "target_support": [
            1,
            1,
            1,
            1
        ],
        "overloads": [
            {
                "signature": "vertexSetOutputViewport(u16) void"
            },
            {
                "signature": "vertexSetOutputViewport(u32) void"
            }
        ]
    }
]