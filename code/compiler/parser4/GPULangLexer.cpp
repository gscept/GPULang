
    #include <string>
    #include <vector>
    #include "gpulangtoken.h"


// Generated from antlr4/grammar/GPULang.g4 by ANTLR 4.13.2


#include "GPULangLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct GPULangLexerStaticData final {
  GPULangLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  GPULangLexerStaticData(const GPULangLexerStaticData&) = delete;
  GPULangLexerStaticData(GPULangLexerStaticData&&) = delete;
  GPULangLexerStaticData& operator=(const GPULangLexerStaticData&) = delete;
  GPULangLexerStaticData& operator=(GPULangLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag gpulanglexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<GPULangLexerStaticData> gpulanglexerLexerStaticData = nullptr;

void gpulanglexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (gpulanglexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(gpulanglexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<GPULangLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "SC", "CO", "COL", "LP", "RP", 
      "LB", "RB", "LL", "RR", "DOT", "NOT", "EQ", "QO", "QU", "AND", "ANDSET", 
      "OR", "ORSET", "XOR", "XORSET", "CONJUGATE", "Q", "NU", "FORWARDSLASH", 
      "LESS", "LESSEQ", "GREATER", "GREATEREQ", "LOGICEQ", "NOTEQ", "LOGICAND", 
      "LOGICOR", "MOD", "UNDERSC", "SOBAKA", "ADD_OP", "SUB_OP", "DIV_OP", 
      "MUL_OP", "ARROW", "INTEGER", "INTEGERLITERAL", "UINTEGERLITERAL", 
      "COMMENT", "ML_COMMENT", "FLOATLITERAL", "EXPONENT", "DOUBLELITERAL", 
      "HEX", "ALPHABET", "IDENTIFIER", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'true'", "'false'", "'#line'", "'alias'", "'as'", "'struct'", 
      "'enum'", "'program'", "'sampler_state'", "'render_state'", "'if'", 
      "'else'", "'for'", "'..'", "'while'", "'do'", "'return'", "'discard'", 
      "'ray_ignore'", "'ray_terminate'", "'continue'", "'switch'", "'case'", 
      "'default'", "'break'", "'+='", "'-='", "'*='", "'/='", "'%='", "'<<='", 
      "'>>='", "'<<'", "'>>'", "'++'", "'--'", "'::'", "';'", "','", "':'", 
      "'('", "')'", "'{'", "'}'", "'['", "']'", "'.'", "'!'", "'='", "'\"'", 
      "'\\u003F'", "'&'", "'&='", "'|'", "'|='", "'^'", "'^='", "'~'", "'''", 
      "'#'", "'\\'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'&&'", 
      "'||'", "'%'", "'_'", "'@'", "'+'", "'-'", "'/'", "'*'", "'->'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "SC", "CO", "COL", "LP", "RP", "LB", "RB", "LL", "RR", 
      "DOT", "NOT", "EQ", "QO", "QU", "AND", "ANDSET", "OR", "ORSET", "XOR", 
      "XORSET", "CONJUGATE", "Q", "NU", "FORWARDSLASH", "LESS", "LESSEQ", 
      "GREATER", "GREATEREQ", "LOGICEQ", "NOTEQ", "LOGICAND", "LOGICOR", 
      "MOD", "UNDERSC", "SOBAKA", "ADD_OP", "SUB_OP", "DIV_OP", "MUL_OP", 
      "ARROW", "INTEGERLITERAL", "UINTEGERLITERAL", "COMMENT", "ML_COMMENT", 
      "FLOATLITERAL", "EXPONENT", "DOUBLELITERAL", "HEX", "IDENTIFIER", 
      "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,87,634,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,1,0,1,0,1,0,1,0,1,0,1,1,
  	1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
  	4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
  	1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
  	8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
  	10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,
  	14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
  	16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,
  	18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
  	19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
  	20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,
  	25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,
  	30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,
  	34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,
  	39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,
  	46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,
  	53,1,53,1,54,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,
  	59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,64,1,64,1,64,1,
  	65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,
  	70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,
  	76,1,77,1,77,1,78,4,78,483,8,78,11,78,12,78,484,1,79,4,79,488,8,79,11,
  	79,12,79,489,1,79,1,79,1,80,1,80,1,80,1,80,5,80,498,8,80,10,80,12,80,
  	501,9,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,5,81,511,8,81,10,81,
  	12,81,514,9,81,1,81,1,81,1,81,1,81,1,81,1,82,4,82,522,8,82,11,82,12,82,
  	523,1,82,1,82,5,82,528,8,82,10,82,12,82,531,9,82,1,82,3,82,534,8,82,1,
  	82,1,82,1,82,1,82,5,82,540,8,82,10,82,12,82,543,9,82,1,82,3,82,546,8,
  	82,1,82,1,82,1,82,4,82,551,8,82,11,82,12,82,552,1,82,3,82,556,8,82,1,
  	82,1,82,3,82,560,8,82,1,83,1,83,3,83,564,8,83,1,83,4,83,567,8,83,11,83,
  	12,83,568,1,84,4,84,572,8,84,11,84,12,84,573,1,84,1,84,5,84,578,8,84,
  	10,84,12,84,581,9,84,1,84,3,84,584,8,84,1,84,1,84,1,84,3,84,589,8,84,
  	1,84,4,84,592,8,84,11,84,12,84,593,1,84,1,84,3,84,598,8,84,1,85,1,85,
  	1,85,5,85,603,8,85,10,85,12,85,606,9,85,1,85,3,85,609,8,85,1,86,1,86,
  	1,87,5,87,614,8,87,10,87,12,87,617,9,87,1,87,1,87,1,87,1,87,5,87,623,
  	8,87,10,87,12,87,626,9,87,1,88,4,88,629,8,88,11,88,12,88,630,1,88,1,88,
  	2,499,512,0,89,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
  	12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
  	47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
  	35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
  	93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
  	57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,
  	67,135,68,137,69,139,70,141,71,143,72,145,73,147,74,149,75,151,76,153,
  	77,155,0,157,78,159,79,161,80,163,81,165,82,167,83,169,84,171,85,173,
  	0,175,86,177,87,1,0,6,2,0,85,85,117,117,2,0,69,69,101,101,2,0,43,43,45,
  	45,3,0,48,57,65,70,97,102,2,0,65,90,97,122,3,0,9,10,12,13,32,32,660,0,
  	1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
  	0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
  	23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
  	0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
  	0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
  	55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
  	0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
  	0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
  	87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,
  	0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,
  	0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,
  	0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,
  	0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,
  	0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,
  	0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,157,1,0,0,0,0,159,1,
  	0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,
  	0,0,0,0,171,1,0,0,0,0,175,1,0,0,0,0,177,1,0,0,0,1,179,1,0,0,0,3,184,1,
  	0,0,0,5,190,1,0,0,0,7,196,1,0,0,0,9,202,1,0,0,0,11,205,1,0,0,0,13,212,
  	1,0,0,0,15,217,1,0,0,0,17,225,1,0,0,0,19,239,1,0,0,0,21,252,1,0,0,0,23,
  	255,1,0,0,0,25,260,1,0,0,0,27,264,1,0,0,0,29,267,1,0,0,0,31,273,1,0,0,
  	0,33,276,1,0,0,0,35,283,1,0,0,0,37,291,1,0,0,0,39,302,1,0,0,0,41,316,
  	1,0,0,0,43,325,1,0,0,0,45,332,1,0,0,0,47,337,1,0,0,0,49,345,1,0,0,0,51,
  	351,1,0,0,0,53,354,1,0,0,0,55,357,1,0,0,0,57,360,1,0,0,0,59,363,1,0,0,
  	0,61,366,1,0,0,0,63,370,1,0,0,0,65,374,1,0,0,0,67,377,1,0,0,0,69,380,
  	1,0,0,0,71,383,1,0,0,0,73,386,1,0,0,0,75,389,1,0,0,0,77,391,1,0,0,0,79,
  	393,1,0,0,0,81,395,1,0,0,0,83,397,1,0,0,0,85,399,1,0,0,0,87,401,1,0,0,
  	0,89,403,1,0,0,0,91,405,1,0,0,0,93,407,1,0,0,0,95,409,1,0,0,0,97,411,
  	1,0,0,0,99,413,1,0,0,0,101,415,1,0,0,0,103,417,1,0,0,0,105,419,1,0,0,
  	0,107,422,1,0,0,0,109,424,1,0,0,0,111,427,1,0,0,0,113,429,1,0,0,0,115,
  	432,1,0,0,0,117,434,1,0,0,0,119,436,1,0,0,0,121,438,1,0,0,0,123,440,1,
  	0,0,0,125,442,1,0,0,0,127,445,1,0,0,0,129,447,1,0,0,0,131,450,1,0,0,0,
  	133,453,1,0,0,0,135,456,1,0,0,0,137,459,1,0,0,0,139,462,1,0,0,0,141,464,
  	1,0,0,0,143,466,1,0,0,0,145,468,1,0,0,0,147,470,1,0,0,0,149,472,1,0,0,
  	0,151,474,1,0,0,0,153,476,1,0,0,0,155,479,1,0,0,0,157,482,1,0,0,0,159,
  	487,1,0,0,0,161,493,1,0,0,0,163,506,1,0,0,0,165,559,1,0,0,0,167,561,1,
  	0,0,0,169,597,1,0,0,0,171,599,1,0,0,0,173,610,1,0,0,0,175,615,1,0,0,0,
  	177,628,1,0,0,0,179,180,5,116,0,0,180,181,5,114,0,0,181,182,5,117,0,0,
  	182,183,5,101,0,0,183,2,1,0,0,0,184,185,5,102,0,0,185,186,5,97,0,0,186,
  	187,5,108,0,0,187,188,5,115,0,0,188,189,5,101,0,0,189,4,1,0,0,0,190,191,
  	5,35,0,0,191,192,5,108,0,0,192,193,5,105,0,0,193,194,5,110,0,0,194,195,
  	5,101,0,0,195,6,1,0,0,0,196,197,5,97,0,0,197,198,5,108,0,0,198,199,5,
  	105,0,0,199,200,5,97,0,0,200,201,5,115,0,0,201,8,1,0,0,0,202,203,5,97,
  	0,0,203,204,5,115,0,0,204,10,1,0,0,0,205,206,5,115,0,0,206,207,5,116,
  	0,0,207,208,5,114,0,0,208,209,5,117,0,0,209,210,5,99,0,0,210,211,5,116,
  	0,0,211,12,1,0,0,0,212,213,5,101,0,0,213,214,5,110,0,0,214,215,5,117,
  	0,0,215,216,5,109,0,0,216,14,1,0,0,0,217,218,5,112,0,0,218,219,5,114,
  	0,0,219,220,5,111,0,0,220,221,5,103,0,0,221,222,5,114,0,0,222,223,5,97,
  	0,0,223,224,5,109,0,0,224,16,1,0,0,0,225,226,5,115,0,0,226,227,5,97,0,
  	0,227,228,5,109,0,0,228,229,5,112,0,0,229,230,5,108,0,0,230,231,5,101,
  	0,0,231,232,5,114,0,0,232,233,5,95,0,0,233,234,5,115,0,0,234,235,5,116,
  	0,0,235,236,5,97,0,0,236,237,5,116,0,0,237,238,5,101,0,0,238,18,1,0,0,
  	0,239,240,5,114,0,0,240,241,5,101,0,0,241,242,5,110,0,0,242,243,5,100,
  	0,0,243,244,5,101,0,0,244,245,5,114,0,0,245,246,5,95,0,0,246,247,5,115,
  	0,0,247,248,5,116,0,0,248,249,5,97,0,0,249,250,5,116,0,0,250,251,5,101,
  	0,0,251,20,1,0,0,0,252,253,5,105,0,0,253,254,5,102,0,0,254,22,1,0,0,0,
  	255,256,5,101,0,0,256,257,5,108,0,0,257,258,5,115,0,0,258,259,5,101,0,
  	0,259,24,1,0,0,0,260,261,5,102,0,0,261,262,5,111,0,0,262,263,5,114,0,
  	0,263,26,1,0,0,0,264,265,5,46,0,0,265,266,5,46,0,0,266,28,1,0,0,0,267,
  	268,5,119,0,0,268,269,5,104,0,0,269,270,5,105,0,0,270,271,5,108,0,0,271,
  	272,5,101,0,0,272,30,1,0,0,0,273,274,5,100,0,0,274,275,5,111,0,0,275,
  	32,1,0,0,0,276,277,5,114,0,0,277,278,5,101,0,0,278,279,5,116,0,0,279,
  	280,5,117,0,0,280,281,5,114,0,0,281,282,5,110,0,0,282,34,1,0,0,0,283,
  	284,5,100,0,0,284,285,5,105,0,0,285,286,5,115,0,0,286,287,5,99,0,0,287,
  	288,5,97,0,0,288,289,5,114,0,0,289,290,5,100,0,0,290,36,1,0,0,0,291,292,
  	5,114,0,0,292,293,5,97,0,0,293,294,5,121,0,0,294,295,5,95,0,0,295,296,
  	5,105,0,0,296,297,5,103,0,0,297,298,5,110,0,0,298,299,5,111,0,0,299,300,
  	5,114,0,0,300,301,5,101,0,0,301,38,1,0,0,0,302,303,5,114,0,0,303,304,
  	5,97,0,0,304,305,5,121,0,0,305,306,5,95,0,0,306,307,5,116,0,0,307,308,
  	5,101,0,0,308,309,5,114,0,0,309,310,5,109,0,0,310,311,5,105,0,0,311,312,
  	5,110,0,0,312,313,5,97,0,0,313,314,5,116,0,0,314,315,5,101,0,0,315,40,
  	1,0,0,0,316,317,5,99,0,0,317,318,5,111,0,0,318,319,5,110,0,0,319,320,
  	5,116,0,0,320,321,5,105,0,0,321,322,5,110,0,0,322,323,5,117,0,0,323,324,
  	5,101,0,0,324,42,1,0,0,0,325,326,5,115,0,0,326,327,5,119,0,0,327,328,
  	5,105,0,0,328,329,5,116,0,0,329,330,5,99,0,0,330,331,5,104,0,0,331,44,
  	1,0,0,0,332,333,5,99,0,0,333,334,5,97,0,0,334,335,5,115,0,0,335,336,5,
  	101,0,0,336,46,1,0,0,0,337,338,5,100,0,0,338,339,5,101,0,0,339,340,5,
  	102,0,0,340,341,5,97,0,0,341,342,5,117,0,0,342,343,5,108,0,0,343,344,
  	5,116,0,0,344,48,1,0,0,0,345,346,5,98,0,0,346,347,5,114,0,0,347,348,5,
  	101,0,0,348,349,5,97,0,0,349,350,5,107,0,0,350,50,1,0,0,0,351,352,5,43,
  	0,0,352,353,5,61,0,0,353,52,1,0,0,0,354,355,5,45,0,0,355,356,5,61,0,0,
  	356,54,1,0,0,0,357,358,5,42,0,0,358,359,5,61,0,0,359,56,1,0,0,0,360,361,
  	5,47,0,0,361,362,5,61,0,0,362,58,1,0,0,0,363,364,5,37,0,0,364,365,5,61,
  	0,0,365,60,1,0,0,0,366,367,5,60,0,0,367,368,5,60,0,0,368,369,5,61,0,0,
  	369,62,1,0,0,0,370,371,5,62,0,0,371,372,5,62,0,0,372,373,5,61,0,0,373,
  	64,1,0,0,0,374,375,5,60,0,0,375,376,5,60,0,0,376,66,1,0,0,0,377,378,5,
  	62,0,0,378,379,5,62,0,0,379,68,1,0,0,0,380,381,5,43,0,0,381,382,5,43,
  	0,0,382,70,1,0,0,0,383,384,5,45,0,0,384,385,5,45,0,0,385,72,1,0,0,0,386,
  	387,5,58,0,0,387,388,5,58,0,0,388,74,1,0,0,0,389,390,5,59,0,0,390,76,
  	1,0,0,0,391,392,5,44,0,0,392,78,1,0,0,0,393,394,5,58,0,0,394,80,1,0,0,
  	0,395,396,5,40,0,0,396,82,1,0,0,0,397,398,5,41,0,0,398,84,1,0,0,0,399,
  	400,5,123,0,0,400,86,1,0,0,0,401,402,5,125,0,0,402,88,1,0,0,0,403,404,
  	5,91,0,0,404,90,1,0,0,0,405,406,5,93,0,0,406,92,1,0,0,0,407,408,5,46,
  	0,0,408,94,1,0,0,0,409,410,5,33,0,0,410,96,1,0,0,0,411,412,5,61,0,0,412,
  	98,1,0,0,0,413,414,5,34,0,0,414,100,1,0,0,0,415,416,5,63,0,0,416,102,
  	1,0,0,0,417,418,5,38,0,0,418,104,1,0,0,0,419,420,5,38,0,0,420,421,5,61,
  	0,0,421,106,1,0,0,0,422,423,5,124,0,0,423,108,1,0,0,0,424,425,5,124,0,
  	0,425,426,5,61,0,0,426,110,1,0,0,0,427,428,5,94,0,0,428,112,1,0,0,0,429,
  	430,5,94,0,0,430,431,5,61,0,0,431,114,1,0,0,0,432,433,5,126,0,0,433,116,
  	1,0,0,0,434,435,5,39,0,0,435,118,1,0,0,0,436,437,5,35,0,0,437,120,1,0,
  	0,0,438,439,5,92,0,0,439,122,1,0,0,0,440,441,5,60,0,0,441,124,1,0,0,0,
  	442,443,5,60,0,0,443,444,5,61,0,0,444,126,1,0,0,0,445,446,5,62,0,0,446,
  	128,1,0,0,0,447,448,5,62,0,0,448,449,5,61,0,0,449,130,1,0,0,0,450,451,
  	5,61,0,0,451,452,5,61,0,0,452,132,1,0,0,0,453,454,5,33,0,0,454,455,5,
  	61,0,0,455,134,1,0,0,0,456,457,5,38,0,0,457,458,5,38,0,0,458,136,1,0,
  	0,0,459,460,5,124,0,0,460,461,5,124,0,0,461,138,1,0,0,0,462,463,5,37,
  	0,0,463,140,1,0,0,0,464,465,5,95,0,0,465,142,1,0,0,0,466,467,5,64,0,0,
  	467,144,1,0,0,0,468,469,5,43,0,0,469,146,1,0,0,0,470,471,5,45,0,0,471,
  	148,1,0,0,0,472,473,5,47,0,0,473,150,1,0,0,0,474,475,5,42,0,0,475,152,
  	1,0,0,0,476,477,5,45,0,0,477,478,5,62,0,0,478,154,1,0,0,0,479,480,2,48,
  	57,0,480,156,1,0,0,0,481,483,3,155,77,0,482,481,1,0,0,0,483,484,1,0,0,
  	0,484,482,1,0,0,0,484,485,1,0,0,0,485,158,1,0,0,0,486,488,3,155,77,0,
  	487,486,1,0,0,0,488,489,1,0,0,0,489,487,1,0,0,0,489,490,1,0,0,0,490,491,
  	1,0,0,0,491,492,7,0,0,0,492,160,1,0,0,0,493,494,5,47,0,0,494,495,5,47,
  	0,0,495,499,1,0,0,0,496,498,9,0,0,0,497,496,1,0,0,0,498,501,1,0,0,0,499,
  	500,1,0,0,0,499,497,1,0,0,0,500,502,1,0,0,0,501,499,1,0,0,0,502,503,5,
  	10,0,0,503,504,1,0,0,0,504,505,6,80,0,0,505,162,1,0,0,0,506,507,5,47,
  	0,0,507,508,5,42,0,0,508,512,1,0,0,0,509,511,9,0,0,0,510,509,1,0,0,0,
  	511,514,1,0,0,0,512,513,1,0,0,0,512,510,1,0,0,0,513,515,1,0,0,0,514,512,
  	1,0,0,0,515,516,5,42,0,0,516,517,5,47,0,0,517,518,1,0,0,0,518,519,6,81,
  	0,0,519,164,1,0,0,0,520,522,3,155,77,0,521,520,1,0,0,0,522,523,1,0,0,
  	0,523,521,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,529,3,93,46,0,526,
  	528,3,155,77,0,527,526,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,530,
  	1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,0,532,534,3,167,83,0,533,532,1,
  	0,0,0,533,534,1,0,0,0,534,535,1,0,0,0,535,536,5,102,0,0,536,560,1,0,0,
  	0,537,541,3,93,46,0,538,540,3,155,77,0,539,538,1,0,0,0,540,543,1,0,0,
  	0,541,539,1,0,0,0,541,542,1,0,0,0,542,545,1,0,0,0,543,541,1,0,0,0,544,
  	546,3,167,83,0,545,544,1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,548,
  	5,102,0,0,548,560,1,0,0,0,549,551,3,155,77,0,550,549,1,0,0,0,551,552,
  	1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,556,3,167,
  	83,0,555,554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,558,5,102,0,
  	0,558,560,1,0,0,0,559,521,1,0,0,0,559,537,1,0,0,0,559,550,1,0,0,0,560,
  	166,1,0,0,0,561,563,7,1,0,0,562,564,7,2,0,0,563,562,1,0,0,0,563,564,1,
  	0,0,0,564,566,1,0,0,0,565,567,3,155,77,0,566,565,1,0,0,0,567,568,1,0,
  	0,0,568,566,1,0,0,0,568,569,1,0,0,0,569,168,1,0,0,0,570,572,3,155,77,
  	0,571,570,1,0,0,0,572,573,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,
  	575,1,0,0,0,575,579,3,93,46,0,576,578,3,155,77,0,577,576,1,0,0,0,578,
  	581,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,583,1,0,0,0,581,579,1,
  	0,0,0,582,584,3,167,83,0,583,582,1,0,0,0,583,584,1,0,0,0,584,598,1,0,
  	0,0,585,586,3,93,46,0,586,588,3,155,77,0,587,589,3,167,83,0,588,587,1,
  	0,0,0,588,589,1,0,0,0,589,598,1,0,0,0,590,592,3,155,77,0,591,590,1,0,
  	0,0,592,593,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,595,1,0,0,0,595,
  	596,3,167,83,0,596,598,1,0,0,0,597,571,1,0,0,0,597,585,1,0,0,0,597,591,
  	1,0,0,0,598,170,1,0,0,0,599,600,5,48,0,0,600,604,5,120,0,0,601,603,7,
  	3,0,0,602,601,1,0,0,0,603,606,1,0,0,0,604,602,1,0,0,0,604,605,1,0,0,0,
  	605,608,1,0,0,0,606,604,1,0,0,0,607,609,7,0,0,0,608,607,1,0,0,0,608,609,
  	1,0,0,0,609,172,1,0,0,0,610,611,7,4,0,0,611,174,1,0,0,0,612,614,5,95,
  	0,0,613,612,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,615,616,1,0,0,0,616,
  	618,1,0,0,0,617,615,1,0,0,0,618,624,3,173,86,0,619,623,3,173,86,0,620,
  	623,3,157,78,0,621,623,5,95,0,0,622,619,1,0,0,0,622,620,1,0,0,0,622,621,
  	1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,176,1,0,0,
  	0,626,624,1,0,0,0,627,629,7,5,0,0,628,627,1,0,0,0,629,630,1,0,0,0,630,
  	628,1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,633,6,88,0,0,633,178,
  	1,0,0,0,27,0,484,489,499,512,523,529,533,541,545,552,555,559,563,568,
  	573,579,583,588,593,597,604,608,615,622,624,630,1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  gpulanglexerLexerStaticData = std::move(staticData);
}

}

GPULangLexer::GPULangLexer(CharStream *input) : Lexer(input) {
  GPULangLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *gpulanglexerLexerStaticData->atn, gpulanglexerLexerStaticData->decisionToDFA, gpulanglexerLexerStaticData->sharedContextCache);
}

GPULangLexer::~GPULangLexer() {
  delete _interpreter;
}

std::string GPULangLexer::getGrammarFileName() const {
  return "GPULang.g4";
}

const std::vector<std::string>& GPULangLexer::getRuleNames() const {
  return gpulanglexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& GPULangLexer::getChannelNames() const {
  return gpulanglexerLexerStaticData->channelNames;
}

const std::vector<std::string>& GPULangLexer::getModeNames() const {
  return gpulanglexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& GPULangLexer::getVocabulary() const {
  return gpulanglexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView GPULangLexer::getSerializedATN() const {
  return gpulanglexerLexerStaticData->serializedATN;
}

const atn::ATN& GPULangLexer::getATN() const {
  return *gpulanglexerLexerStaticData->atn;
}




void GPULangLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  gpulanglexerLexerInitialize();
#else
  ::antlr4::internal::call_once(gpulanglexerLexerOnceFlag, gpulanglexerLexerInitialize);
#endif
}
