
    #include <string>
    #include <vector>
    #include "gpulangtoken.h"


// Generated from antlr4/grammar/GPULang.g4 by ANTLR 4.13.2


#include "GPULangLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct GPULangLexerStaticData final {
  GPULangLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  GPULangLexerStaticData(const GPULangLexerStaticData&) = delete;
  GPULangLexerStaticData(GPULangLexerStaticData&&) = delete;
  GPULangLexerStaticData& operator=(const GPULangLexerStaticData&) = delete;
  GPULangLexerStaticData& operator=(GPULangLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag gpulanglexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<GPULangLexerStaticData> gpulanglexerLexerStaticData = nullptr;

void gpulanglexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (gpulanglexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(gpulanglexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<GPULangLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "SC", "CO", 
      "COL", "LP", "RP", "LB", "RB", "LL", "RR", "DOT", "NOT", "EQ", "QO", 
      "QU", "AND", "ANDSET", "OR", "ORSET", "XOR", "XORSET", "CONJUGATE", 
      "Q", "NU", "FORWARDSLASH", "LESS", "LESSEQ", "GREATER", "GREATEREQ", 
      "LOGICEQ", "NOTEQ", "LOGICAND", "LOGICOR", "MOD", "UNDERSC", "SOBAKA", 
      "ADD_OP", "SUB_OP", "DIV_OP", "MUL_OP", "ARROW", "INTEGER", "INTEGERLITERAL", 
      "UINTEGERLITERAL", "COMMENT", "ML_COMMENT", "EXPONENT", "FLOATLITERAL", 
      "DOUBLELITERAL", "HEX", "ALPHABET", "IDENTIFIER", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'true'", "'false'", "'#line'", "'alias'", "'as'", "'generate'", 
      "'if'", "'else'", "'struct'", "'enum'", "'program'", "'sampler_state'", 
      "'render_state'", "'for'", "'..'", "'for_uniform'", "'while'", "'do'", 
      "'return'", "'discard'", "'ray_ignore'", "'ray_terminate'", "'continue'", 
      "'switch'", "'case'", "'default'", "'break'", "'++'", "'--'", "'<<'", 
      "'>>'", "'+='", "'-='", "'*='", "'/='", "'%='", "'<<='", "'>>='", 
      "'declared'", "';'", "','", "':'", "'('", "')'", "'{'", "'}'", "'['", 
      "']'", "'.'", "'!'", "'='", "'\"'", "'\\u003F'", "'&'", "'&='", "'|'", 
      "'|='", "'^'", "'^='", "'~'", "'''", "'#'", "'\\'", "'<'", "'<='", 
      "'>'", "'>='", "'=='", "'!='", "'&&'", "'||'", "'%'", "'_'", "'@'", 
      "'+'", "'-'", "'/'", "'*'", "'->'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "SC", "CO", "COL", "LP", "RP", "LB", "RB", 
      "LL", "RR", "DOT", "NOT", "EQ", "QO", "QU", "AND", "ANDSET", "OR", 
      "ORSET", "XOR", "XORSET", "CONJUGATE", "Q", "NU", "FORWARDSLASH", 
      "LESS", "LESSEQ", "GREATER", "GREATEREQ", "LOGICEQ", "NOTEQ", "LOGICAND", 
      "LOGICOR", "MOD", "UNDERSC", "SOBAKA", "ADD_OP", "SUB_OP", "DIV_OP", 
      "MUL_OP", "ARROW", "INTEGERLITERAL", "UINTEGERLITERAL", "COMMENT", 
      "ML_COMMENT", "FLOATLITERAL", "DOUBLELITERAL", "HEX", "IDENTIFIER", 
      "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,88,668,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,1,0,
  	1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,
  	3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,
  	1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
  	9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
  	1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,
  	1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,
  	1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
  	1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,
  	1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,
  	1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,
  	1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
  	1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,
  	1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,
  	1,52,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,58,
  	1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,
  	1,64,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,
  	1,69,1,70,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,
  	1,76,1,76,1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,80,4,80,514,8,80,11,80,
  	12,80,515,1,81,4,81,519,8,81,11,81,12,81,520,1,81,1,81,1,82,1,82,1,82,
  	1,82,5,82,529,8,82,10,82,12,82,532,9,82,1,82,1,82,1,82,1,82,1,83,1,83,
  	1,83,1,83,5,83,542,8,83,10,83,12,83,545,9,83,1,83,1,83,1,83,1,83,1,83,
  	1,84,1,84,3,84,554,8,84,1,84,4,84,557,8,84,11,84,12,84,558,1,85,4,85,
  	562,8,85,11,85,12,85,563,1,85,1,85,5,85,568,8,85,10,85,12,85,571,9,85,
  	1,85,3,85,574,8,85,1,85,1,85,1,85,1,85,4,85,580,8,85,11,85,12,85,581,
  	1,85,3,85,585,8,85,1,85,1,85,1,85,4,85,590,8,85,11,85,12,85,591,1,85,
  	3,85,595,8,85,1,85,1,85,3,85,599,8,85,1,86,4,86,602,8,86,11,86,12,86,
  	603,1,86,1,86,5,86,608,8,86,10,86,12,86,611,9,86,1,86,3,86,614,8,86,1,
  	86,1,86,4,86,618,8,86,11,86,12,86,619,1,86,3,86,623,8,86,1,86,4,86,626,
  	8,86,11,86,12,86,627,1,86,1,86,3,86,632,8,86,1,87,1,87,1,87,5,87,637,
  	8,87,10,87,12,87,640,9,87,1,87,3,87,643,8,87,1,88,1,88,1,89,5,89,648,
  	8,89,10,89,12,89,651,9,89,1,89,1,89,1,89,1,89,5,89,657,8,89,10,89,12,
  	89,660,9,89,1,90,4,90,663,8,90,11,90,12,90,664,1,90,1,90,2,530,543,0,
  	91,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
  	14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
  	51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
  	37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,
  	97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,
  	59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,
  	69,139,70,141,71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,
  	79,159,0,161,80,163,81,165,82,167,83,169,0,171,84,173,85,175,86,177,0,
  	179,87,181,88,1,0,6,2,0,85,85,117,117,2,0,69,69,101,101,2,0,43,43,45,
  	45,3,0,48,57,65,70,97,102,2,0,65,90,97,122,3,0,9,10,12,13,32,32,694,0,
  	1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
  	0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
  	23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
  	0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
  	0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
  	55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
  	0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
  	0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
  	87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,
  	0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,
  	0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,
  	0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,
  	0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,
  	0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,
  	0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,
  	0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,171,1,
  	0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,1,183,1,
  	0,0,0,3,188,1,0,0,0,5,194,1,0,0,0,7,200,1,0,0,0,9,206,1,0,0,0,11,209,
  	1,0,0,0,13,218,1,0,0,0,15,221,1,0,0,0,17,226,1,0,0,0,19,233,1,0,0,0,21,
  	238,1,0,0,0,23,246,1,0,0,0,25,260,1,0,0,0,27,273,1,0,0,0,29,277,1,0,0,
  	0,31,280,1,0,0,0,33,292,1,0,0,0,35,298,1,0,0,0,37,301,1,0,0,0,39,308,
  	1,0,0,0,41,316,1,0,0,0,43,327,1,0,0,0,45,341,1,0,0,0,47,350,1,0,0,0,49,
  	357,1,0,0,0,51,362,1,0,0,0,53,370,1,0,0,0,55,376,1,0,0,0,57,379,1,0,0,
  	0,59,382,1,0,0,0,61,385,1,0,0,0,63,388,1,0,0,0,65,391,1,0,0,0,67,394,
  	1,0,0,0,69,397,1,0,0,0,71,400,1,0,0,0,73,403,1,0,0,0,75,407,1,0,0,0,77,
  	411,1,0,0,0,79,420,1,0,0,0,81,422,1,0,0,0,83,424,1,0,0,0,85,426,1,0,0,
  	0,87,428,1,0,0,0,89,430,1,0,0,0,91,432,1,0,0,0,93,434,1,0,0,0,95,436,
  	1,0,0,0,97,438,1,0,0,0,99,440,1,0,0,0,101,442,1,0,0,0,103,444,1,0,0,0,
  	105,446,1,0,0,0,107,448,1,0,0,0,109,450,1,0,0,0,111,453,1,0,0,0,113,455,
  	1,0,0,0,115,458,1,0,0,0,117,460,1,0,0,0,119,463,1,0,0,0,121,465,1,0,0,
  	0,123,467,1,0,0,0,125,469,1,0,0,0,127,471,1,0,0,0,129,473,1,0,0,0,131,
  	476,1,0,0,0,133,478,1,0,0,0,135,481,1,0,0,0,137,484,1,0,0,0,139,487,1,
  	0,0,0,141,490,1,0,0,0,143,493,1,0,0,0,145,495,1,0,0,0,147,497,1,0,0,0,
  	149,499,1,0,0,0,151,501,1,0,0,0,153,503,1,0,0,0,155,505,1,0,0,0,157,507,
  	1,0,0,0,159,510,1,0,0,0,161,513,1,0,0,0,163,518,1,0,0,0,165,524,1,0,0,
  	0,167,537,1,0,0,0,169,551,1,0,0,0,171,598,1,0,0,0,173,631,1,0,0,0,175,
  	633,1,0,0,0,177,644,1,0,0,0,179,649,1,0,0,0,181,662,1,0,0,0,183,184,5,
  	116,0,0,184,185,5,114,0,0,185,186,5,117,0,0,186,187,5,101,0,0,187,2,1,
  	0,0,0,188,189,5,102,0,0,189,190,5,97,0,0,190,191,5,108,0,0,191,192,5,
  	115,0,0,192,193,5,101,0,0,193,4,1,0,0,0,194,195,5,35,0,0,195,196,5,108,
  	0,0,196,197,5,105,0,0,197,198,5,110,0,0,198,199,5,101,0,0,199,6,1,0,0,
  	0,200,201,5,97,0,0,201,202,5,108,0,0,202,203,5,105,0,0,203,204,5,97,0,
  	0,204,205,5,115,0,0,205,8,1,0,0,0,206,207,5,97,0,0,207,208,5,115,0,0,
  	208,10,1,0,0,0,209,210,5,103,0,0,210,211,5,101,0,0,211,212,5,110,0,0,
  	212,213,5,101,0,0,213,214,5,114,0,0,214,215,5,97,0,0,215,216,5,116,0,
  	0,216,217,5,101,0,0,217,12,1,0,0,0,218,219,5,105,0,0,219,220,5,102,0,
  	0,220,14,1,0,0,0,221,222,5,101,0,0,222,223,5,108,0,0,223,224,5,115,0,
  	0,224,225,5,101,0,0,225,16,1,0,0,0,226,227,5,115,0,0,227,228,5,116,0,
  	0,228,229,5,114,0,0,229,230,5,117,0,0,230,231,5,99,0,0,231,232,5,116,
  	0,0,232,18,1,0,0,0,233,234,5,101,0,0,234,235,5,110,0,0,235,236,5,117,
  	0,0,236,237,5,109,0,0,237,20,1,0,0,0,238,239,5,112,0,0,239,240,5,114,
  	0,0,240,241,5,111,0,0,241,242,5,103,0,0,242,243,5,114,0,0,243,244,5,97,
  	0,0,244,245,5,109,0,0,245,22,1,0,0,0,246,247,5,115,0,0,247,248,5,97,0,
  	0,248,249,5,109,0,0,249,250,5,112,0,0,250,251,5,108,0,0,251,252,5,101,
  	0,0,252,253,5,114,0,0,253,254,5,95,0,0,254,255,5,115,0,0,255,256,5,116,
  	0,0,256,257,5,97,0,0,257,258,5,116,0,0,258,259,5,101,0,0,259,24,1,0,0,
  	0,260,261,5,114,0,0,261,262,5,101,0,0,262,263,5,110,0,0,263,264,5,100,
  	0,0,264,265,5,101,0,0,265,266,5,114,0,0,266,267,5,95,0,0,267,268,5,115,
  	0,0,268,269,5,116,0,0,269,270,5,97,0,0,270,271,5,116,0,0,271,272,5,101,
  	0,0,272,26,1,0,0,0,273,274,5,102,0,0,274,275,5,111,0,0,275,276,5,114,
  	0,0,276,28,1,0,0,0,277,278,5,46,0,0,278,279,5,46,0,0,279,30,1,0,0,0,280,
  	281,5,102,0,0,281,282,5,111,0,0,282,283,5,114,0,0,283,284,5,95,0,0,284,
  	285,5,117,0,0,285,286,5,110,0,0,286,287,5,105,0,0,287,288,5,102,0,0,288,
  	289,5,111,0,0,289,290,5,114,0,0,290,291,5,109,0,0,291,32,1,0,0,0,292,
  	293,5,119,0,0,293,294,5,104,0,0,294,295,5,105,0,0,295,296,5,108,0,0,296,
  	297,5,101,0,0,297,34,1,0,0,0,298,299,5,100,0,0,299,300,5,111,0,0,300,
  	36,1,0,0,0,301,302,5,114,0,0,302,303,5,101,0,0,303,304,5,116,0,0,304,
  	305,5,117,0,0,305,306,5,114,0,0,306,307,5,110,0,0,307,38,1,0,0,0,308,
  	309,5,100,0,0,309,310,5,105,0,0,310,311,5,115,0,0,311,312,5,99,0,0,312,
  	313,5,97,0,0,313,314,5,114,0,0,314,315,5,100,0,0,315,40,1,0,0,0,316,317,
  	5,114,0,0,317,318,5,97,0,0,318,319,5,121,0,0,319,320,5,95,0,0,320,321,
  	5,105,0,0,321,322,5,103,0,0,322,323,5,110,0,0,323,324,5,111,0,0,324,325,
  	5,114,0,0,325,326,5,101,0,0,326,42,1,0,0,0,327,328,5,114,0,0,328,329,
  	5,97,0,0,329,330,5,121,0,0,330,331,5,95,0,0,331,332,5,116,0,0,332,333,
  	5,101,0,0,333,334,5,114,0,0,334,335,5,109,0,0,335,336,5,105,0,0,336,337,
  	5,110,0,0,337,338,5,97,0,0,338,339,5,116,0,0,339,340,5,101,0,0,340,44,
  	1,0,0,0,341,342,5,99,0,0,342,343,5,111,0,0,343,344,5,110,0,0,344,345,
  	5,116,0,0,345,346,5,105,0,0,346,347,5,110,0,0,347,348,5,117,0,0,348,349,
  	5,101,0,0,349,46,1,0,0,0,350,351,5,115,0,0,351,352,5,119,0,0,352,353,
  	5,105,0,0,353,354,5,116,0,0,354,355,5,99,0,0,355,356,5,104,0,0,356,48,
  	1,0,0,0,357,358,5,99,0,0,358,359,5,97,0,0,359,360,5,115,0,0,360,361,5,
  	101,0,0,361,50,1,0,0,0,362,363,5,100,0,0,363,364,5,101,0,0,364,365,5,
  	102,0,0,365,366,5,97,0,0,366,367,5,117,0,0,367,368,5,108,0,0,368,369,
  	5,116,0,0,369,52,1,0,0,0,370,371,5,98,0,0,371,372,5,114,0,0,372,373,5,
  	101,0,0,373,374,5,97,0,0,374,375,5,107,0,0,375,54,1,0,0,0,376,377,5,43,
  	0,0,377,378,5,43,0,0,378,56,1,0,0,0,379,380,5,45,0,0,380,381,5,45,0,0,
  	381,58,1,0,0,0,382,383,5,60,0,0,383,384,5,60,0,0,384,60,1,0,0,0,385,386,
  	5,62,0,0,386,387,5,62,0,0,387,62,1,0,0,0,388,389,5,43,0,0,389,390,5,61,
  	0,0,390,64,1,0,0,0,391,392,5,45,0,0,392,393,5,61,0,0,393,66,1,0,0,0,394,
  	395,5,42,0,0,395,396,5,61,0,0,396,68,1,0,0,0,397,398,5,47,0,0,398,399,
  	5,61,0,0,399,70,1,0,0,0,400,401,5,37,0,0,401,402,5,61,0,0,402,72,1,0,
  	0,0,403,404,5,60,0,0,404,405,5,60,0,0,405,406,5,61,0,0,406,74,1,0,0,0,
  	407,408,5,62,0,0,408,409,5,62,0,0,409,410,5,61,0,0,410,76,1,0,0,0,411,
  	412,5,100,0,0,412,413,5,101,0,0,413,414,5,99,0,0,414,415,5,108,0,0,415,
  	416,5,97,0,0,416,417,5,114,0,0,417,418,5,101,0,0,418,419,5,100,0,0,419,
  	78,1,0,0,0,420,421,5,59,0,0,421,80,1,0,0,0,422,423,5,44,0,0,423,82,1,
  	0,0,0,424,425,5,58,0,0,425,84,1,0,0,0,426,427,5,40,0,0,427,86,1,0,0,0,
  	428,429,5,41,0,0,429,88,1,0,0,0,430,431,5,123,0,0,431,90,1,0,0,0,432,
  	433,5,125,0,0,433,92,1,0,0,0,434,435,5,91,0,0,435,94,1,0,0,0,436,437,
  	5,93,0,0,437,96,1,0,0,0,438,439,5,46,0,0,439,98,1,0,0,0,440,441,5,33,
  	0,0,441,100,1,0,0,0,442,443,5,61,0,0,443,102,1,0,0,0,444,445,5,34,0,0,
  	445,104,1,0,0,0,446,447,5,63,0,0,447,106,1,0,0,0,448,449,5,38,0,0,449,
  	108,1,0,0,0,450,451,5,38,0,0,451,452,5,61,0,0,452,110,1,0,0,0,453,454,
  	5,124,0,0,454,112,1,0,0,0,455,456,5,124,0,0,456,457,5,61,0,0,457,114,
  	1,0,0,0,458,459,5,94,0,0,459,116,1,0,0,0,460,461,5,94,0,0,461,462,5,61,
  	0,0,462,118,1,0,0,0,463,464,5,126,0,0,464,120,1,0,0,0,465,466,5,39,0,
  	0,466,122,1,0,0,0,467,468,5,35,0,0,468,124,1,0,0,0,469,470,5,92,0,0,470,
  	126,1,0,0,0,471,472,5,60,0,0,472,128,1,0,0,0,473,474,5,60,0,0,474,475,
  	5,61,0,0,475,130,1,0,0,0,476,477,5,62,0,0,477,132,1,0,0,0,478,479,5,62,
  	0,0,479,480,5,61,0,0,480,134,1,0,0,0,481,482,5,61,0,0,482,483,5,61,0,
  	0,483,136,1,0,0,0,484,485,5,33,0,0,485,486,5,61,0,0,486,138,1,0,0,0,487,
  	488,5,38,0,0,488,489,5,38,0,0,489,140,1,0,0,0,490,491,5,124,0,0,491,492,
  	5,124,0,0,492,142,1,0,0,0,493,494,5,37,0,0,494,144,1,0,0,0,495,496,5,
  	95,0,0,496,146,1,0,0,0,497,498,5,64,0,0,498,148,1,0,0,0,499,500,5,43,
  	0,0,500,150,1,0,0,0,501,502,5,45,0,0,502,152,1,0,0,0,503,504,5,47,0,0,
  	504,154,1,0,0,0,505,506,5,42,0,0,506,156,1,0,0,0,507,508,5,45,0,0,508,
  	509,5,62,0,0,509,158,1,0,0,0,510,511,2,48,57,0,511,160,1,0,0,0,512,514,
  	3,159,79,0,513,512,1,0,0,0,514,515,1,0,0,0,515,513,1,0,0,0,515,516,1,
  	0,0,0,516,162,1,0,0,0,517,519,3,159,79,0,518,517,1,0,0,0,519,520,1,0,
  	0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,0,522,523,7,0,0,0,523,
  	164,1,0,0,0,524,525,5,47,0,0,525,526,5,47,0,0,526,530,1,0,0,0,527,529,
  	9,0,0,0,528,527,1,0,0,0,529,532,1,0,0,0,530,531,1,0,0,0,530,528,1,0,0,
  	0,531,533,1,0,0,0,532,530,1,0,0,0,533,534,5,10,0,0,534,535,1,0,0,0,535,
  	536,6,82,0,0,536,166,1,0,0,0,537,538,5,47,0,0,538,539,5,42,0,0,539,543,
  	1,0,0,0,540,542,9,0,0,0,541,540,1,0,0,0,542,545,1,0,0,0,543,544,1,0,0,
  	0,543,541,1,0,0,0,544,546,1,0,0,0,545,543,1,0,0,0,546,547,5,42,0,0,547,
  	548,5,47,0,0,548,549,1,0,0,0,549,550,6,83,0,0,550,168,1,0,0,0,551,553,
  	7,1,0,0,552,554,7,2,0,0,553,552,1,0,0,0,553,554,1,0,0,0,554,556,1,0,0,
  	0,555,557,3,159,79,0,556,555,1,0,0,0,557,558,1,0,0,0,558,556,1,0,0,0,
  	558,559,1,0,0,0,559,170,1,0,0,0,560,562,3,159,79,0,561,560,1,0,0,0,562,
  	563,1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,565,1,0,0,0,565,569,3,
  	97,48,0,566,568,3,159,79,0,567,566,1,0,0,0,568,571,1,0,0,0,569,567,1,
  	0,0,0,569,570,1,0,0,0,570,573,1,0,0,0,571,569,1,0,0,0,572,574,3,169,84,
  	0,573,572,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,576,5,102,0,0,576,
  	599,1,0,0,0,577,579,3,97,48,0,578,580,3,159,79,0,579,578,1,0,0,0,580,
  	581,1,0,0,0,581,579,1,0,0,0,581,582,1,0,0,0,582,584,1,0,0,0,583,585,3,
  	169,84,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,587,5,102,
  	0,0,587,599,1,0,0,0,588,590,3,159,79,0,589,588,1,0,0,0,590,591,1,0,0,
  	0,591,589,1,0,0,0,591,592,1,0,0,0,592,594,1,0,0,0,593,595,3,169,84,0,
  	594,593,1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,597,5,102,0,0,597,
  	599,1,0,0,0,598,561,1,0,0,0,598,577,1,0,0,0,598,589,1,0,0,0,599,172,1,
  	0,0,0,600,602,3,159,79,0,601,600,1,0,0,0,602,603,1,0,0,0,603,601,1,0,
  	0,0,603,604,1,0,0,0,604,605,1,0,0,0,605,609,3,97,48,0,606,608,3,159,79,
  	0,607,606,1,0,0,0,608,611,1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,
  	613,1,0,0,0,611,609,1,0,0,0,612,614,3,169,84,0,613,612,1,0,0,0,613,614,
  	1,0,0,0,614,632,1,0,0,0,615,617,3,97,48,0,616,618,3,159,79,0,617,616,
  	1,0,0,0,618,619,1,0,0,0,619,617,1,0,0,0,619,620,1,0,0,0,620,622,1,0,0,
  	0,621,623,3,169,84,0,622,621,1,0,0,0,622,623,1,0,0,0,623,632,1,0,0,0,
  	624,626,3,159,79,0,625,624,1,0,0,0,626,627,1,0,0,0,627,625,1,0,0,0,627,
  	628,1,0,0,0,628,629,1,0,0,0,629,630,3,169,84,0,630,632,1,0,0,0,631,601,
  	1,0,0,0,631,615,1,0,0,0,631,625,1,0,0,0,632,174,1,0,0,0,633,634,5,48,
  	0,0,634,638,5,120,0,0,635,637,7,3,0,0,636,635,1,0,0,0,637,640,1,0,0,0,
  	638,636,1,0,0,0,638,639,1,0,0,0,639,642,1,0,0,0,640,638,1,0,0,0,641,643,
  	7,0,0,0,642,641,1,0,0,0,642,643,1,0,0,0,643,176,1,0,0,0,644,645,7,4,0,
  	0,645,178,1,0,0,0,646,648,5,95,0,0,647,646,1,0,0,0,648,651,1,0,0,0,649,
  	647,1,0,0,0,649,650,1,0,0,0,650,652,1,0,0,0,651,649,1,0,0,0,652,658,3,
  	177,88,0,653,657,3,177,88,0,654,657,3,161,80,0,655,657,5,95,0,0,656,653,
  	1,0,0,0,656,654,1,0,0,0,656,655,1,0,0,0,657,660,1,0,0,0,658,656,1,0,0,
  	0,658,659,1,0,0,0,659,180,1,0,0,0,660,658,1,0,0,0,661,663,7,5,0,0,662,
  	661,1,0,0,0,663,664,1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,665,666,1,
  	0,0,0,666,667,6,90,0,0,667,182,1,0,0,0,28,0,515,520,530,543,553,558,563,
  	569,573,581,584,591,594,598,603,609,613,619,622,627,631,638,642,649,656,
  	658,664,1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  gpulanglexerLexerStaticData = std::move(staticData);
}

}

GPULangLexer::GPULangLexer(CharStream *input) : Lexer(input) {
  GPULangLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *gpulanglexerLexerStaticData->atn, gpulanglexerLexerStaticData->decisionToDFA, gpulanglexerLexerStaticData->sharedContextCache);
}

GPULangLexer::~GPULangLexer() {
  delete _interpreter;
}

std::string GPULangLexer::getGrammarFileName() const {
  return "GPULang.g4";
}

const std::vector<std::string>& GPULangLexer::getRuleNames() const {
  return gpulanglexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& GPULangLexer::getChannelNames() const {
  return gpulanglexerLexerStaticData->channelNames;
}

const std::vector<std::string>& GPULangLexer::getModeNames() const {
  return gpulanglexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& GPULangLexer::getVocabulary() const {
  return gpulanglexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView GPULangLexer::getSerializedATN() const {
  return gpulanglexerLexerStaticData->serializedATN;
}

const atn::ATN& GPULangLexer::getATN() const {
  return *gpulanglexerLexerStaticData->atn;
}




void GPULangLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  gpulanglexerLexerInitialize();
#else
  ::antlr4::internal::call_once(gpulanglexerLexerOnceFlag, gpulanglexerLexerInitialize);
#endif
}
