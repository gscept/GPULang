

// include std container
#include <vector>
#include <typeinfo>
#include <iostream>
#include <string>
#include <stack>
#include <tuple>

#include "gpulangtoken.h"
#include "gpulangcompiler.h"
#include "ast/alias.h"
#include "ast/annotation.h"
#include "ast/effect.h"
#include "ast/enumeration.h"
#include "ast/function.h"
#include "ast/program.h"
#include "ast/renderstate.h"
#include "ast/samplerstate.h"
#include "ast/state.h"
#include "ast/structure.h"
#include "ast/symbol.h"
#include "ast/variable.h"
#include "ast/statements/breakstatement.h"
#include "ast/statements/continuestatement.h"
#include "ast/statements/expressionstatement.h"
#include "ast/statements/forstatement.h"
#include "ast/statements/ifstatement.h"
#include "ast/statements/terminatestatement.h"
#include "ast/statements/scopestatement.h"
#include "ast/statements/statement.h"
#include "ast/statements/switchstatement.h"
#include "ast/statements/whilestatement.h"
#include "ast/expressions/accessexpression.h"
#include "ast/expressions/arrayindexexpression.h"
#include "ast/expressions/binaryexpression.h"
#include "ast/expressions/boolexpression.h"
#include "ast/expressions/callexpression.h"
#include "ast/expressions/commaexpression.h"
#include "ast/expressions/expression.h"
#include "ast/expressions/floatexpression.h"
#include "ast/expressions/initializerexpression.h"
#include "ast/expressions/arrayinitializerexpression.h"
#include "ast/expressions/intexpression.h"
#include "ast/expressions/stringexpression.h"
#include "ast/expressions/symbolexpression.h"
#include "ast/expressions/ternaryexpression.h"
#include "ast/expressions/uintexpression.h"
#include "ast/expressions/unaryexpression.h"
#include "util.h"
#include "memory.h"

using namespace GPULang;



// Generated from antlr4/grammar/GPULang.g4 by ANTLR 4.13.2


#include "GPULangListener.h"

#include "GPULangParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct GPULangParserStaticData final {
  GPULangParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  GPULangParserStaticData(const GPULangParserStaticData&) = delete;
  GPULangParserStaticData(GPULangParserStaticData&&) = delete;
  GPULangParserStaticData& operator=(const GPULangParserStaticData&) = delete;
  GPULangParserStaticData& operator=(GPULangParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag gpulangParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<GPULangParserStaticData> gpulangParserStaticData = nullptr;

void gpulangParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (gpulangParserStaticData != nullptr) {
    return;
  }
#else
  assert(gpulangParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<GPULangParserStaticData>(
    std::vector<std::string>{
      "string", "boolean", "entry", "effect", "linePreprocessorEntry", "alias", 
      "annotation", "attribute", "typeDeclaration", "variables", "structureDeclaration", 
      "structure", "enumeration", "parameter", "functionDeclaration", "function", 
      "program", "sampler", "state", "statement", "expressionStatement", 
      "ifStatement", "forStatement", "forRangeStatement", "whileStatement", 
      "scopeStatement", "terminateStatement", "continueStatement", "switchStatement", 
      "breakStatement", "expression", "commaExpression", "assignmentExpression", 
      "logicalOrExpression", "logicalAndExpression", "orExpression", "xorExpression", 
      "andExpression", "equivalencyExpression", "relationalExpression", 
      "shiftExpression", "addSubtractExpression", "multiplyDivideExpression", 
      "prefixExpression", "suffixExpression", "namespaceExpression", "binaryexpatom", 
      "initializerExpression", "arrayInitializerExpression"
    },
    std::vector<std::string>{
      "", "'true'", "'false'", "'#line'", "'alias'", "'as'", "'struct'", 
      "'enum'", "'program'", "'sampler_state'", "'render_state'", "'if'", 
      "'else'", "'for'", "'..'", "'while'", "'do'", "'return'", "'discard'", 
      "'ray_ignore'", "'ray_terminate'", "'continue'", "'switch'", "'case'", 
      "'default'", "'break'", "'+='", "'-='", "'*='", "'/='", "'%='", "'<<='", 
      "'>>='", "'<<'", "'>>'", "'++'", "'--'", "'::'", "';'", "','", "':'", 
      "'('", "')'", "'{'", "'}'", "'['", "']'", "'.'", "'!'", "'='", "'\"'", 
      "'\\u003F'", "'&'", "'&='", "'|'", "'|='", "'^'", "'^='", "'~'", "'''", 
      "'#'", "'\\'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'&&'", 
      "'||'", "'%'", "'_'", "'@'", "'+'", "'-'", "'/'", "'*'", "'->'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "SC", "CO", "COL", "LP", "RP", "LB", "RB", "LL", "RR", 
      "DOT", "NOT", "EQ", "QO", "QU", "AND", "ANDSET", "OR", "ORSET", "XOR", 
      "XORSET", "CONJUGATE", "Q", "NU", "FORWARDSLASH", "LESS", "LESSEQ", 
      "GREATER", "GREATEREQ", "LOGICEQ", "NOTEQ", "LOGICAND", "LOGICOR", 
      "MOD", "UNDERSC", "SOBAKA", "ADD_OP", "SUB_OP", "DIV_OP", "MUL_OP", 
      "ARROW", "INTEGERLITERAL", "UINTEGERLITERAL", "COMMENT", "ML_COMMENT", 
      "FLOATLITERAL", "EXPONENT", "DOUBLELITERAL", "HEX", "IDENTIFIER", 
      "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,87,970,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,
  	0,1,0,5,0,102,8,0,10,0,12,0,105,9,0,1,0,1,0,1,0,1,0,5,0,111,8,0,10,0,
  	12,0,114,9,0,1,0,3,0,117,8,0,1,1,1,1,1,1,1,1,3,1,123,8,1,1,2,1,2,1,2,
  	1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
  	3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
  	1,3,1,3,5,3,165,8,3,10,3,12,3,168,9,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,
  	1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
  	7,1,7,1,7,3,7,198,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,207,8,8,1,8,1,8,
  	1,8,5,8,212,8,8,10,8,12,8,215,9,8,1,8,1,8,1,8,1,9,1,9,1,9,5,9,223,8,9,
  	10,9,12,9,226,9,9,1,9,1,9,1,9,4,9,231,8,9,11,9,12,9,232,1,9,1,9,1,9,1,
  	9,1,9,5,9,240,8,9,10,9,12,9,243,9,9,1,9,1,9,1,9,1,9,3,9,249,8,9,1,9,1,
  	9,1,9,1,9,1,9,1,9,1,9,5,9,258,8,9,10,9,12,9,261,9,9,3,9,263,8,9,1,9,1,
  	9,1,10,1,10,1,10,5,10,270,8,10,10,10,12,10,273,9,10,1,10,1,10,1,10,5,
  	10,278,8,10,10,10,12,10,281,9,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
  	11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,300,8,11,1,11,5,
  	11,303,8,11,10,11,12,11,306,9,11,1,11,1,11,1,11,1,11,5,11,312,8,11,10,
  	11,12,11,315,9,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,
  	12,327,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,336,8,12,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,12,3,12,346,8,12,1,12,5,12,349,8,12,10,12,
  	12,12,352,9,12,3,12,354,8,12,1,12,1,12,1,12,1,13,1,13,1,13,5,13,362,8,
  	13,10,13,12,13,365,9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	3,13,376,8,13,1,13,1,13,1,14,1,14,1,14,5,14,383,8,14,10,14,12,14,386,
  	9,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,397,8,14,10,14,
  	12,14,400,9,14,3,14,402,8,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
  	1,15,1,15,1,16,1,16,1,16,5,16,417,8,16,10,16,12,16,420,9,16,1,16,1,16,
  	1,16,1,16,1,16,1,16,1,16,1,16,5,16,430,8,16,10,16,12,16,433,9,16,1,16,
  	1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,448,
  	8,17,10,17,12,17,451,9,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
  	1,18,1,18,1,18,1,18,5,18,466,8,18,10,18,12,18,469,9,18,1,18,1,18,1,18,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	3,19,502,8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,3,21,519,8,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
  	1,22,3,22,529,8,22,1,22,1,22,1,22,1,22,3,22,535,8,22,1,22,1,22,1,22,1,
  	22,3,22,541,8,22,1,22,1,22,1,22,1,22,5,22,547,8,22,10,22,12,22,550,9,
  	22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
  	24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,591,8,
  	24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,603,8,25,10,
  	25,12,25,606,9,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,3,26,616,8,
  	26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
  	26,3,26,632,8,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,
  	28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,653,8,28,5,28,655,8,28,
  	10,28,12,28,658,9,28,1,28,1,28,1,28,1,28,1,28,3,28,665,8,28,3,28,667,
  	8,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,
  	1,31,1,31,1,31,1,31,1,31,5,31,687,8,31,10,31,12,31,690,9,31,1,32,1,32,
  	1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,706,
  	8,32,10,32,12,32,709,9,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,5,33,718,
  	8,33,10,33,12,33,721,9,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,730,
  	8,34,10,34,12,34,733,9,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,742,
  	8,35,10,35,12,35,745,9,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,5,36,754,
  	8,36,10,36,12,36,757,9,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,5,37,766,
  	8,37,10,37,12,37,769,9,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,5,38,778,
  	8,38,10,38,12,38,781,9,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,790,
  	8,39,10,39,12,39,793,9,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,802,
  	8,40,10,40,12,40,805,9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,814,
  	8,41,10,41,12,41,817,9,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,5,42,826,
  	8,42,10,42,12,42,829,9,42,1,43,1,43,5,43,833,8,43,10,43,12,43,836,9,43,
  	1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,
  	851,8,44,10,44,12,44,854,9,44,3,44,856,8,44,1,44,1,44,1,44,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,875,
  	8,44,1,44,1,44,5,44,879,8,44,10,44,12,44,882,9,44,1,44,1,44,1,44,5,44,
  	887,8,44,10,44,12,44,890,9,44,1,44,1,44,3,44,894,8,44,1,45,1,45,1,45,
  	1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
  	1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
  	1,46,1,46,1,46,3,46,930,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
  	1,47,1,47,5,47,942,8,47,10,47,12,47,945,9,47,3,47,947,8,47,1,47,1,47,
  	1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,960,8,48,10,48,12,48,
  	963,9,48,3,48,965,8,48,1,48,1,48,1,48,1,48,1,166,0,49,0,2,4,6,8,10,12,
  	14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
  	60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,0,10,1,0,50,
  	50,1,0,59,59,5,0,26,32,49,49,53,53,55,55,57,57,1,0,66,67,1,0,62,65,1,
  	0,33,34,1,0,73,74,2,0,70,70,75,76,5,0,35,36,48,48,58,58,73,74,76,76,1,
  	0,35,36,1027,0,116,1,0,0,0,2,122,1,0,0,0,4,124,1,0,0,0,6,166,1,0,0,0,
  	8,169,1,0,0,0,10,175,1,0,0,0,12,182,1,0,0,0,14,197,1,0,0,0,16,213,1,0,
  	0,0,18,224,1,0,0,0,20,271,1,0,0,0,22,286,1,0,0,0,24,319,1,0,0,0,26,363,
  	1,0,0,0,28,384,1,0,0,0,30,407,1,0,0,0,32,418,1,0,0,0,34,437,1,0,0,0,36,
  	455,1,0,0,0,38,501,1,0,0,0,40,503,1,0,0,0,42,506,1,0,0,0,44,522,1,0,0,
  	0,46,555,1,0,0,0,48,590,1,0,0,0,50,592,1,0,0,0,52,631,1,0,0,0,54,633,
  	1,0,0,0,56,638,1,0,0,0,58,671,1,0,0,0,60,676,1,0,0,0,62,679,1,0,0,0,64,
  	691,1,0,0,0,66,710,1,0,0,0,68,722,1,0,0,0,70,734,1,0,0,0,72,746,1,0,0,
  	0,74,758,1,0,0,0,76,770,1,0,0,0,78,782,1,0,0,0,80,794,1,0,0,0,82,806,
  	1,0,0,0,84,818,1,0,0,0,86,834,1,0,0,0,88,893,1,0,0,0,90,895,1,0,0,0,92,
  	929,1,0,0,0,94,931,1,0,0,0,96,951,1,0,0,0,98,103,5,50,0,0,99,100,8,0,
  	0,0,100,102,6,0,-1,0,101,99,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,
  	104,1,0,0,0,104,106,1,0,0,0,105,103,1,0,0,0,106,117,5,50,0,0,107,112,
  	5,59,0,0,108,109,8,1,0,0,109,111,6,0,-1,0,110,108,1,0,0,0,111,114,1,0,
  	0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,112,1,0,0,0,115,
  	117,5,59,0,0,116,98,1,0,0,0,116,107,1,0,0,0,117,1,1,0,0,0,118,119,5,1,
  	0,0,119,123,6,1,-1,0,120,121,5,2,0,0,121,123,6,1,-1,0,122,118,1,0,0,0,
  	122,120,1,0,0,0,123,3,1,0,0,0,124,125,3,6,3,0,125,126,6,2,-1,0,126,127,
  	5,0,0,1,127,5,1,0,0,0,128,165,3,8,4,0,129,130,3,10,5,0,130,131,5,38,0,
  	0,131,132,6,3,-1,0,132,165,1,0,0,0,133,134,3,28,14,0,134,135,5,38,0,0,
  	135,136,6,3,-1,0,136,165,1,0,0,0,137,138,3,30,15,0,138,139,6,3,-1,0,139,
  	165,1,0,0,0,140,141,3,18,9,0,141,142,5,38,0,0,142,143,6,3,-1,0,143,165,
  	1,0,0,0,144,145,3,22,11,0,145,146,5,38,0,0,146,147,6,3,-1,0,147,165,1,
  	0,0,0,148,149,3,24,12,0,149,150,5,38,0,0,150,151,6,3,-1,0,151,165,1,0,
  	0,0,152,153,3,36,18,0,153,154,5,38,0,0,154,155,6,3,-1,0,155,165,1,0,0,
  	0,156,157,3,34,17,0,157,158,5,38,0,0,158,159,6,3,-1,0,159,165,1,0,0,0,
  	160,161,3,32,16,0,161,162,5,38,0,0,162,163,6,3,-1,0,163,165,1,0,0,0,164,
  	128,1,0,0,0,164,129,1,0,0,0,164,133,1,0,0,0,164,137,1,0,0,0,164,140,1,
  	0,0,0,164,144,1,0,0,0,164,148,1,0,0,0,164,152,1,0,0,0,164,156,1,0,0,0,
  	164,160,1,0,0,0,165,168,1,0,0,0,166,167,1,0,0,0,166,164,1,0,0,0,167,7,
  	1,0,0,0,168,166,1,0,0,0,169,170,5,3,0,0,170,171,6,4,-1,0,171,172,5,78,
  	0,0,172,173,3,0,0,0,173,174,6,4,-1,0,174,9,1,0,0,0,175,176,5,4,0,0,176,
  	177,5,86,0,0,177,178,5,5,0,0,178,179,5,86,0,0,179,180,6,5,-1,0,180,181,
  	6,5,-1,0,181,11,1,0,0,0,182,183,5,72,0,0,183,184,5,86,0,0,184,185,5,41,
  	0,0,185,186,3,60,30,0,186,187,5,42,0,0,187,188,6,6,-1,0,188,13,1,0,0,
  	0,189,190,5,86,0,0,190,191,5,41,0,0,191,192,3,60,30,0,192,193,5,42,0,
  	0,193,194,6,7,-1,0,194,198,1,0,0,0,195,196,5,86,0,0,196,198,6,7,-1,0,
  	197,189,1,0,0,0,197,195,1,0,0,0,198,15,1,0,0,0,199,200,5,76,0,0,200,212,
  	6,8,-1,0,201,202,5,45,0,0,202,206,6,8,-1,0,203,204,3,60,30,0,204,205,
  	6,8,-1,0,205,207,1,0,0,0,206,203,1,0,0,0,206,207,1,0,0,0,207,208,1,0,
  	0,0,208,212,5,46,0,0,209,210,5,86,0,0,210,212,6,8,-1,0,211,199,1,0,0,
  	0,211,201,1,0,0,0,211,209,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,
  	214,1,0,0,0,214,216,1,0,0,0,215,213,1,0,0,0,216,217,5,86,0,0,217,218,
  	6,8,-1,0,218,17,1,0,0,0,219,220,3,12,6,0,220,221,6,9,-1,0,221,223,1,0,
  	0,0,222,219,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,
  	230,1,0,0,0,226,224,1,0,0,0,227,228,3,14,7,0,228,229,6,9,-1,0,229,231,
  	1,0,0,0,230,227,1,0,0,0,231,232,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,
  	0,233,234,1,0,0,0,234,235,5,86,0,0,235,241,6,9,-1,0,236,237,5,39,0,0,
  	237,238,5,86,0,0,238,240,6,9,-1,0,239,236,1,0,0,0,240,243,1,0,0,0,241,
  	239,1,0,0,0,241,242,1,0,0,0,242,248,1,0,0,0,243,241,1,0,0,0,244,245,5,
  	40,0,0,245,246,3,16,8,0,246,247,6,9,-1,0,247,249,1,0,0,0,248,244,1,0,
  	0,0,248,249,1,0,0,0,249,262,1,0,0,0,250,251,5,49,0,0,251,252,3,66,33,
  	0,252,259,6,9,-1,0,253,254,5,39,0,0,254,255,3,66,33,0,255,256,6,9,-1,
  	0,256,258,1,0,0,0,257,253,1,0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,
  	260,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,262,250,1,0,0,0,262,263,1,
  	0,0,0,263,264,1,0,0,0,264,265,6,9,-1,0,265,19,1,0,0,0,266,267,3,12,6,
  	0,267,268,6,10,-1,0,268,270,1,0,0,0,269,266,1,0,0,0,270,273,1,0,0,0,271,
  	269,1,0,0,0,271,272,1,0,0,0,272,279,1,0,0,0,273,271,1,0,0,0,274,275,3,
  	14,7,0,275,276,6,10,-1,0,276,278,1,0,0,0,277,274,1,0,0,0,278,281,1,0,
  	0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,282,1,0,0,0,281,279,1,0,0,0,282,
  	283,5,6,0,0,283,284,5,86,0,0,284,285,6,10,-1,0,285,21,1,0,0,0,286,287,
  	3,20,10,0,287,288,6,11,-1,0,288,313,5,43,0,0,289,290,5,86,0,0,290,291,
  	6,11,-1,0,291,304,5,40,0,0,292,293,5,76,0,0,293,303,6,11,-1,0,294,295,
  	5,45,0,0,295,299,6,11,-1,0,296,297,3,60,30,0,297,298,6,11,-1,0,298,300,
  	1,0,0,0,299,296,1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,0,301,303,5,46,
  	0,0,302,292,1,0,0,0,302,294,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,
  	305,1,0,0,0,305,307,1,0,0,0,306,304,1,0,0,0,307,308,5,86,0,0,308,309,
  	6,11,-1,0,309,310,5,38,0,0,310,312,6,11,-1,0,311,289,1,0,0,0,312,315,
  	1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,313,1,0,0,
  	0,316,317,5,44,0,0,317,318,6,11,-1,0,318,23,1,0,0,0,319,320,5,7,0,0,320,
  	321,5,86,0,0,321,326,6,12,-1,0,322,323,5,40,0,0,323,324,3,16,8,0,324,
  	325,6,12,-1,0,325,327,1,0,0,0,326,322,1,0,0,0,326,327,1,0,0,0,327,328,
  	1,0,0,0,328,353,5,43,0,0,329,330,5,86,0,0,330,335,6,12,-1,0,331,332,5,
  	49,0,0,332,333,3,60,30,0,333,334,6,12,-1,0,334,336,1,0,0,0,335,331,1,
  	0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,350,6,12,-1,0,338,339,5,39,
  	0,0,339,340,5,86,0,0,340,345,6,12,-1,0,341,342,5,49,0,0,342,343,3,60,
  	30,0,343,344,6,12,-1,0,344,346,1,0,0,0,345,341,1,0,0,0,345,346,1,0,0,
  	0,346,347,1,0,0,0,347,349,6,12,-1,0,348,338,1,0,0,0,349,352,1,0,0,0,350,
  	348,1,0,0,0,350,351,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,353,329,1,
  	0,0,0,353,354,1,0,0,0,354,355,1,0,0,0,355,356,5,44,0,0,356,357,6,12,-1,
  	0,357,25,1,0,0,0,358,359,3,14,7,0,359,360,6,13,-1,0,360,362,1,0,0,0,361,
  	358,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,364,1,0,0,0,364,366,1,
  	0,0,0,365,363,1,0,0,0,366,367,5,86,0,0,367,368,6,13,-1,0,368,369,5,40,
  	0,0,369,370,3,16,8,0,370,375,6,13,-1,0,371,372,5,49,0,0,372,373,3,66,
  	33,0,373,374,6,13,-1,0,374,376,1,0,0,0,375,371,1,0,0,0,375,376,1,0,0,
  	0,376,377,1,0,0,0,377,378,6,13,-1,0,378,27,1,0,0,0,379,380,3,14,7,0,380,
  	381,6,14,-1,0,381,383,1,0,0,0,382,379,1,0,0,0,383,386,1,0,0,0,384,382,
  	1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,384,1,0,0,0,387,388,5,86,
  	0,0,388,389,6,14,-1,0,389,401,5,41,0,0,390,391,3,26,13,0,391,398,6,14,
  	-1,0,392,393,5,39,0,0,393,394,3,26,13,0,394,395,6,14,-1,0,395,397,1,0,
  	0,0,396,392,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,
  	402,1,0,0,0,400,398,1,0,0,0,401,390,1,0,0,0,401,402,1,0,0,0,402,403,1,
  	0,0,0,403,404,5,42,0,0,404,405,3,16,8,0,405,406,6,14,-1,0,406,29,1,0,
  	0,0,407,408,3,28,14,0,408,409,6,15,-1,0,409,410,6,15,-1,0,410,411,3,50,
  	25,0,411,412,6,15,-1,0,412,31,1,0,0,0,413,414,3,12,6,0,414,415,6,16,-1,
  	0,415,417,1,0,0,0,416,413,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,
  	419,1,0,0,0,419,421,1,0,0,0,420,418,1,0,0,0,421,422,5,8,0,0,422,423,5,
  	86,0,0,423,424,6,16,-1,0,424,431,5,43,0,0,425,426,3,60,30,0,426,427,6,
  	16,-1,0,427,428,5,38,0,0,428,430,1,0,0,0,429,425,1,0,0,0,430,433,1,0,
  	0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,434,1,0,0,0,433,431,1,0,0,0,434,
  	435,5,44,0,0,435,436,6,16,-1,0,436,33,1,0,0,0,437,438,5,9,0,0,438,439,
  	6,17,-1,0,439,440,1,0,0,0,440,441,5,86,0,0,441,442,6,17,-1,0,442,449,
  	5,43,0,0,443,444,3,60,30,0,444,445,6,17,-1,0,445,446,5,38,0,0,446,448,
  	1,0,0,0,447,443,1,0,0,0,448,451,1,0,0,0,449,447,1,0,0,0,449,450,1,0,0,
  	0,450,452,1,0,0,0,451,449,1,0,0,0,452,453,5,44,0,0,453,454,6,17,-1,0,
  	454,35,1,0,0,0,455,456,5,10,0,0,456,457,6,18,-1,0,457,458,1,0,0,0,458,
  	459,5,86,0,0,459,460,6,18,-1,0,460,467,5,43,0,0,461,462,3,60,30,0,462,
  	463,6,18,-1,0,463,464,5,38,0,0,464,466,1,0,0,0,465,461,1,0,0,0,466,469,
  	1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,470,1,0,0,0,469,467,1,0,0,
  	0,470,471,5,44,0,0,471,472,6,18,-1,0,472,37,1,0,0,0,473,474,3,42,21,0,
  	474,475,6,19,-1,0,475,502,1,0,0,0,476,477,3,50,25,0,477,478,6,19,-1,0,
  	478,502,1,0,0,0,479,480,3,44,22,0,480,481,6,19,-1,0,481,502,1,0,0,0,482,
  	483,3,48,24,0,483,484,6,19,-1,0,484,502,1,0,0,0,485,486,3,56,28,0,486,
  	487,6,19,-1,0,487,502,1,0,0,0,488,489,3,52,26,0,489,490,6,19,-1,0,490,
  	502,1,0,0,0,491,492,3,54,27,0,492,493,6,19,-1,0,493,502,1,0,0,0,494,495,
  	3,58,29,0,495,496,6,19,-1,0,496,502,1,0,0,0,497,498,3,40,20,0,498,499,
  	5,38,0,0,499,500,6,19,-1,0,500,502,1,0,0,0,501,473,1,0,0,0,501,476,1,
  	0,0,0,501,479,1,0,0,0,501,482,1,0,0,0,501,485,1,0,0,0,501,488,1,0,0,0,
  	501,491,1,0,0,0,501,494,1,0,0,0,501,497,1,0,0,0,502,39,1,0,0,0,503,504,
  	3,60,30,0,504,505,6,20,-1,0,505,41,1,0,0,0,506,507,5,11,0,0,507,508,6,
  	21,-1,0,508,509,5,41,0,0,509,510,3,60,30,0,510,511,6,21,-1,0,511,512,
  	5,42,0,0,512,513,3,38,19,0,513,518,6,21,-1,0,514,515,5,12,0,0,515,516,
  	3,38,19,0,516,517,6,21,-1,0,517,519,1,0,0,0,518,514,1,0,0,0,518,519,1,
  	0,0,0,519,520,1,0,0,0,520,521,6,21,-1,0,521,43,1,0,0,0,522,523,5,13,0,
  	0,523,524,6,22,-1,0,524,528,5,41,0,0,525,526,3,18,9,0,526,527,6,22,-1,
  	0,527,529,1,0,0,0,528,525,1,0,0,0,528,529,1,0,0,0,529,530,1,0,0,0,530,
  	534,5,38,0,0,531,532,3,60,30,0,532,533,6,22,-1,0,533,535,1,0,0,0,534,
  	531,1,0,0,0,534,535,1,0,0,0,535,536,1,0,0,0,536,540,5,38,0,0,537,538,
  	3,60,30,0,538,539,6,22,-1,0,539,541,1,0,0,0,540,537,1,0,0,0,540,541,1,
  	0,0,0,541,542,1,0,0,0,542,548,5,42,0,0,543,544,3,14,7,0,544,545,6,22,
  	-1,0,545,547,1,0,0,0,546,543,1,0,0,0,547,550,1,0,0,0,548,546,1,0,0,0,
  	548,549,1,0,0,0,549,551,1,0,0,0,550,548,1,0,0,0,551,552,3,38,19,0,552,
  	553,6,22,-1,0,553,554,6,22,-1,0,554,45,1,0,0,0,555,556,5,13,0,0,556,557,
  	6,23,-1,0,557,558,5,41,0,0,558,559,5,86,0,0,559,560,5,40,0,0,560,561,
  	5,86,0,0,561,562,5,14,0,0,562,563,5,86,0,0,563,564,5,42,0,0,564,565,3,
  	38,19,0,565,566,6,23,-1,0,566,567,6,23,-1,0,567,47,1,0,0,0,568,569,5,
  	15,0,0,569,570,6,24,-1,0,570,571,5,41,0,0,571,572,3,60,30,0,572,573,6,
  	24,-1,0,573,574,5,42,0,0,574,575,3,38,19,0,575,576,6,24,-1,0,576,577,
  	6,24,-1,0,577,591,1,0,0,0,578,579,5,16,0,0,579,580,6,24,-1,0,580,581,
  	3,38,19,0,581,582,6,24,-1,0,582,583,5,15,0,0,583,584,5,41,0,0,584,585,
  	3,60,30,0,585,586,6,24,-1,0,586,587,5,42,0,0,587,588,5,38,0,0,588,589,
  	6,24,-1,0,589,591,1,0,0,0,590,568,1,0,0,0,590,578,1,0,0,0,591,49,1,0,
  	0,0,592,593,5,43,0,0,593,604,6,25,-1,0,594,595,3,18,9,0,595,596,5,38,
  	0,0,596,597,6,25,-1,0,597,603,1,0,0,0,598,599,3,38,19,0,599,600,6,25,
  	-1,0,600,603,1,0,0,0,601,603,3,8,4,0,602,594,1,0,0,0,602,598,1,0,0,0,
  	602,601,1,0,0,0,603,606,1,0,0,0,604,602,1,0,0,0,604,605,1,0,0,0,605,607,
  	1,0,0,0,606,604,1,0,0,0,607,608,5,44,0,0,608,609,6,25,-1,0,609,51,1,0,
  	0,0,610,611,5,17,0,0,611,615,6,26,-1,0,612,613,3,60,30,0,613,614,6,26,
  	-1,0,614,616,1,0,0,0,615,612,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,
  	617,618,5,38,0,0,618,632,6,26,-1,0,619,620,5,18,0,0,620,621,6,26,-1,0,
  	621,622,5,38,0,0,622,632,6,26,-1,0,623,624,5,19,0,0,624,625,6,26,-1,0,
  	625,626,5,38,0,0,626,632,6,26,-1,0,627,628,5,20,0,0,628,629,6,26,-1,0,
  	629,630,5,38,0,0,630,632,6,26,-1,0,631,610,1,0,0,0,631,619,1,0,0,0,631,
  	623,1,0,0,0,631,627,1,0,0,0,632,53,1,0,0,0,633,634,5,21,0,0,634,635,6,
  	27,-1,0,635,636,5,38,0,0,636,637,6,27,-1,0,637,55,1,0,0,0,638,639,5,22,
  	0,0,639,640,6,28,-1,0,640,641,5,41,0,0,641,642,3,60,30,0,642,643,5,42,
  	0,0,643,644,6,28,-1,0,644,656,5,43,0,0,645,646,5,23,0,0,646,647,3,60,
  	30,0,647,648,5,40,0,0,648,652,6,28,-1,0,649,650,3,38,19,0,650,651,6,28,
  	-1,0,651,653,1,0,0,0,652,649,1,0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,
  	654,645,1,0,0,0,655,658,1,0,0,0,656,654,1,0,0,0,656,657,1,0,0,0,657,666,
  	1,0,0,0,658,656,1,0,0,0,659,660,5,24,0,0,660,664,5,40,0,0,661,662,3,38,
  	19,0,662,663,6,28,-1,0,663,665,1,0,0,0,664,661,1,0,0,0,664,665,1,0,0,
  	0,665,667,1,0,0,0,666,659,1,0,0,0,666,667,1,0,0,0,667,668,1,0,0,0,668,
  	669,5,44,0,0,669,670,6,28,-1,0,670,57,1,0,0,0,671,672,5,25,0,0,672,673,
  	6,29,-1,0,673,674,5,38,0,0,674,675,6,29,-1,0,675,59,1,0,0,0,676,677,3,
  	62,31,0,677,678,6,30,-1,0,678,61,1,0,0,0,679,680,3,64,32,0,680,688,6,
  	31,-1,0,681,682,5,39,0,0,682,683,6,31,-1,0,683,684,3,64,32,0,684,685,
  	6,31,-1,0,685,687,1,0,0,0,686,681,1,0,0,0,687,690,1,0,0,0,688,686,1,0,
  	0,0,688,689,1,0,0,0,689,63,1,0,0,0,690,688,1,0,0,0,691,692,3,66,33,0,
  	692,707,6,32,-1,0,693,694,7,2,0,0,694,695,6,32,-1,0,695,696,3,66,33,0,
  	696,697,6,32,-1,0,697,706,1,0,0,0,698,699,5,51,0,0,699,700,6,32,-1,0,
  	700,701,3,60,30,0,701,702,5,40,0,0,702,703,3,60,30,0,703,704,6,32,-1,
  	0,704,706,1,0,0,0,705,693,1,0,0,0,705,698,1,0,0,0,706,709,1,0,0,0,707,
  	705,1,0,0,0,707,708,1,0,0,0,708,65,1,0,0,0,709,707,1,0,0,0,710,711,3,
  	68,34,0,711,719,6,33,-1,0,712,713,5,69,0,0,713,714,6,33,-1,0,714,715,
  	3,68,34,0,715,716,6,33,-1,0,716,718,1,0,0,0,717,712,1,0,0,0,718,721,1,
  	0,0,0,719,717,1,0,0,0,719,720,1,0,0,0,720,67,1,0,0,0,721,719,1,0,0,0,
  	722,723,3,70,35,0,723,731,6,34,-1,0,724,725,5,68,0,0,725,726,6,34,-1,
  	0,726,727,3,70,35,0,727,728,6,34,-1,0,728,730,1,0,0,0,729,724,1,0,0,0,
  	730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,69,1,0,0,0,733,731,
  	1,0,0,0,734,735,3,72,36,0,735,743,6,35,-1,0,736,737,5,54,0,0,737,738,
  	6,35,-1,0,738,739,3,72,36,0,739,740,6,35,-1,0,740,742,1,0,0,0,741,736,
  	1,0,0,0,742,745,1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,71,1,0,0,
  	0,745,743,1,0,0,0,746,747,3,74,37,0,747,755,6,36,-1,0,748,749,5,56,0,
  	0,749,750,6,36,-1,0,750,751,3,74,37,0,751,752,6,36,-1,0,752,754,1,0,0,
  	0,753,748,1,0,0,0,754,757,1,0,0,0,755,753,1,0,0,0,755,756,1,0,0,0,756,
  	73,1,0,0,0,757,755,1,0,0,0,758,759,3,76,38,0,759,767,6,37,-1,0,760,761,
  	5,52,0,0,761,762,6,37,-1,0,762,763,3,76,38,0,763,764,6,37,-1,0,764,766,
  	1,0,0,0,765,760,1,0,0,0,766,769,1,0,0,0,767,765,1,0,0,0,767,768,1,0,0,
  	0,768,75,1,0,0,0,769,767,1,0,0,0,770,771,3,78,39,0,771,779,6,38,-1,0,
  	772,773,7,3,0,0,773,774,6,38,-1,0,774,775,3,78,39,0,775,776,6,38,-1,0,
  	776,778,1,0,0,0,777,772,1,0,0,0,778,781,1,0,0,0,779,777,1,0,0,0,779,780,
  	1,0,0,0,780,77,1,0,0,0,781,779,1,0,0,0,782,783,3,80,40,0,783,791,6,39,
  	-1,0,784,785,7,4,0,0,785,786,6,39,-1,0,786,787,3,80,40,0,787,788,6,39,
  	-1,0,788,790,1,0,0,0,789,784,1,0,0,0,790,793,1,0,0,0,791,789,1,0,0,0,
  	791,792,1,0,0,0,792,79,1,0,0,0,793,791,1,0,0,0,794,795,3,82,41,0,795,
  	803,6,40,-1,0,796,797,7,5,0,0,797,798,6,40,-1,0,798,799,3,82,41,0,799,
  	800,6,40,-1,0,800,802,1,0,0,0,801,796,1,0,0,0,802,805,1,0,0,0,803,801,
  	1,0,0,0,803,804,1,0,0,0,804,81,1,0,0,0,805,803,1,0,0,0,806,807,3,84,42,
  	0,807,815,6,41,-1,0,808,809,7,6,0,0,809,810,6,41,-1,0,810,811,3,84,42,
  	0,811,812,6,41,-1,0,812,814,1,0,0,0,813,808,1,0,0,0,814,817,1,0,0,0,815,
  	813,1,0,0,0,815,816,1,0,0,0,816,83,1,0,0,0,817,815,1,0,0,0,818,819,3,
  	86,43,0,819,827,6,42,-1,0,820,821,7,7,0,0,821,822,6,42,-1,0,822,823,3,
  	86,43,0,823,824,6,42,-1,0,824,826,1,0,0,0,825,820,1,0,0,0,826,829,1,0,
  	0,0,827,825,1,0,0,0,827,828,1,0,0,0,828,85,1,0,0,0,829,827,1,0,0,0,830,
  	831,7,8,0,0,831,833,6,43,-1,0,832,830,1,0,0,0,833,836,1,0,0,0,834,832,
  	1,0,0,0,834,835,1,0,0,0,835,837,1,0,0,0,836,834,1,0,0,0,837,838,3,88,
  	44,0,838,839,6,43,-1,0,839,87,1,0,0,0,840,841,3,92,46,0,841,880,6,44,
  	-1,0,842,843,5,41,0,0,843,855,6,44,-1,0,844,845,3,66,33,0,845,852,6,44,
  	-1,0,846,847,5,39,0,0,847,848,3,66,33,0,848,849,6,44,-1,0,849,851,1,0,
  	0,0,850,846,1,0,0,0,851,854,1,0,0,0,852,850,1,0,0,0,852,853,1,0,0,0,853,
  	856,1,0,0,0,854,852,1,0,0,0,855,844,1,0,0,0,855,856,1,0,0,0,856,857,1,
  	0,0,0,857,858,5,42,0,0,858,879,6,44,-1,0,859,860,5,47,0,0,860,861,6,44,
  	-1,0,861,862,3,88,44,0,862,863,6,44,-1,0,863,879,1,0,0,0,864,865,5,77,
  	0,0,865,866,6,44,-1,0,866,867,3,88,44,0,867,868,6,44,-1,0,868,879,1,0,
  	0,0,869,870,5,45,0,0,870,874,6,44,-1,0,871,872,3,60,30,0,872,873,6,44,
  	-1,0,873,875,1,0,0,0,874,871,1,0,0,0,874,875,1,0,0,0,875,876,1,0,0,0,
  	876,877,5,46,0,0,877,879,6,44,-1,0,878,842,1,0,0,0,878,859,1,0,0,0,878,
  	864,1,0,0,0,878,869,1,0,0,0,879,882,1,0,0,0,880,878,1,0,0,0,880,881,1,
  	0,0,0,881,894,1,0,0,0,882,880,1,0,0,0,883,888,3,92,46,0,884,885,7,9,0,
  	0,885,887,6,44,-1,0,886,884,1,0,0,0,887,890,1,0,0,0,888,886,1,0,0,0,888,
  	889,1,0,0,0,889,891,1,0,0,0,890,888,1,0,0,0,891,892,6,44,-1,0,892,894,
  	1,0,0,0,893,840,1,0,0,0,893,883,1,0,0,0,894,89,1,0,0,0,895,896,3,92,46,
  	0,896,897,5,37,0,0,897,898,3,92,46,0,898,899,6,45,-1,0,899,91,1,0,0,0,
  	900,901,3,94,47,0,901,902,6,46,-1,0,902,930,1,0,0,0,903,904,3,96,48,0,
  	904,905,6,46,-1,0,905,930,1,0,0,0,906,907,5,41,0,0,907,908,3,60,30,0,
  	908,909,5,42,0,0,909,910,6,46,-1,0,910,930,1,0,0,0,911,912,5,78,0,0,912,
  	930,6,46,-1,0,913,914,5,79,0,0,914,930,6,46,-1,0,915,916,5,82,0,0,916,
  	930,6,46,-1,0,917,918,5,84,0,0,918,930,6,46,-1,0,919,920,5,85,0,0,920,
  	930,6,46,-1,0,921,922,3,0,0,0,922,923,6,46,-1,0,923,930,1,0,0,0,924,925,
  	5,86,0,0,925,930,6,46,-1,0,926,927,3,2,1,0,927,928,6,46,-1,0,928,930,
  	1,0,0,0,929,900,1,0,0,0,929,903,1,0,0,0,929,906,1,0,0,0,929,911,1,0,0,
  	0,929,913,1,0,0,0,929,915,1,0,0,0,929,917,1,0,0,0,929,919,1,0,0,0,929,
  	921,1,0,0,0,929,924,1,0,0,0,929,926,1,0,0,0,930,93,1,0,0,0,931,932,5,
  	86,0,0,932,933,6,47,-1,0,933,934,5,43,0,0,934,946,6,47,-1,0,935,936,3,
  	66,33,0,936,943,6,47,-1,0,937,938,5,39,0,0,938,939,3,66,33,0,939,940,
  	6,47,-1,0,940,942,1,0,0,0,941,937,1,0,0,0,942,945,1,0,0,0,943,941,1,0,
  	0,0,943,944,1,0,0,0,944,947,1,0,0,0,945,943,1,0,0,0,946,935,1,0,0,0,946,
  	947,1,0,0,0,947,948,1,0,0,0,948,949,5,44,0,0,949,950,6,47,-1,0,950,95,
  	1,0,0,0,951,952,5,45,0,0,952,964,6,48,-1,0,953,954,3,66,33,0,954,961,
  	6,48,-1,0,955,956,5,39,0,0,956,957,3,66,33,0,957,958,6,48,-1,0,958,960,
  	1,0,0,0,959,955,1,0,0,0,960,963,1,0,0,0,961,959,1,0,0,0,961,962,1,0,0,
  	0,962,965,1,0,0,0,963,961,1,0,0,0,964,953,1,0,0,0,964,965,1,0,0,0,965,
  	966,1,0,0,0,966,967,5,46,0,0,967,968,6,48,-1,0,968,97,1,0,0,0,77,103,
  	112,116,122,164,166,197,206,211,213,224,232,241,248,259,262,271,279,299,
  	302,304,313,326,335,345,350,353,363,375,384,398,401,418,431,449,467,501,
  	518,528,534,540,548,590,602,604,615,631,652,656,664,666,688,705,707,719,
  	731,743,755,767,779,791,803,815,827,834,852,855,874,878,880,888,893,929,
  	943,946,961,964
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  gpulangParserStaticData = std::move(staticData);
}

}

GPULangParser::GPULangParser(TokenStream *input) : GPULangParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

GPULangParser::GPULangParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  GPULangParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *gpulangParserStaticData->atn, gpulangParserStaticData->decisionToDFA, gpulangParserStaticData->sharedContextCache, options);
}

GPULangParser::~GPULangParser() {
  delete _interpreter;
}

const atn::ATN& GPULangParser::getATN() const {
  return *gpulangParserStaticData->atn;
}

std::string GPULangParser::getGrammarFileName() const {
  return "GPULang.g4";
}

const std::vector<std::string>& GPULangParser::getRuleNames() const {
  return gpulangParserStaticData->ruleNames;
}

const dfa::Vocabulary& GPULangParser::getVocabulary() const {
  return gpulangParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView GPULangParser::getSerializedATN() const {
  return gpulangParserStaticData->serializedATN;
}


std::vector<std::tuple<size_t, size_t, std::string>> GPULangParser::LineStack;


//----------------- StringContext ------------------------------------------------------------------

GPULangParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::StringContext::QO() {
  return getTokens(GPULangParser::QO);
}

tree::TerminalNode* GPULangParser::StringContext::QO(size_t i) {
  return getToken(GPULangParser::QO, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StringContext::Q() {
  return getTokens(GPULangParser::Q);
}

tree::TerminalNode* GPULangParser::StringContext::Q(size_t i) {
  return getToken(GPULangParser::Q, i);
}


size_t GPULangParser::StringContext::getRuleIndex() const {
  return GPULangParser::RuleString;
}

void GPULangParser::StringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString(this);
}

void GPULangParser::StringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString(this);
}

GPULangParser::StringContext* GPULangParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 0, GPULangParser::RuleString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(116);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::QO: {
        enterOuterAlt(_localctx, 1);
        setState(98);
        match(GPULangParser::QO);
        setState(103);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -1125899906842626) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 16777215) != 0)) {
          setState(99);
          antlrcpp::downCast<StringContext *>(_localctx)->data = _input->LT(1);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == GPULangParser::QO)) {
            antlrcpp::downCast<StringContext *>(_localctx)->data = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           _localctx->val.append((antlrcpp::downCast<StringContext *>(_localctx)->data != nullptr ? antlrcpp::downCast<StringContext *>(_localctx)->data->getText() : "")); 
          setState(105);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(106);
        match(GPULangParser::QO);
        break;
      }

      case GPULangParser::Q: {
        enterOuterAlt(_localctx, 2);
        setState(107);
        match(GPULangParser::Q);
        setState(112);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -576460752303423490) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 16777215) != 0)) {
          setState(108);
          antlrcpp::downCast<StringContext *>(_localctx)->data = _input->LT(1);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == GPULangParser::Q)) {
            antlrcpp::downCast<StringContext *>(_localctx)->data = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           _localctx->val.append((antlrcpp::downCast<StringContext *>(_localctx)->data != nullptr ? antlrcpp::downCast<StringContext *>(_localctx)->data->getText() : "")); 
          setState(114);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(115);
        match(GPULangParser::Q);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanContext ------------------------------------------------------------------

GPULangParser::BooleanContext::BooleanContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GPULangParser::BooleanContext::getRuleIndex() const {
  return GPULangParser::RuleBoolean;
}

void GPULangParser::BooleanContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean(this);
}

void GPULangParser::BooleanContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean(this);
}

GPULangParser::BooleanContext* GPULangParser::boolean() {
  BooleanContext *_localctx = _tracker.createInstance<BooleanContext>(_ctx, getState());
  enterRule(_localctx, 2, GPULangParser::RuleBoolean);

          antlrcpp::downCast<BooleanContext *>(_localctx)->val =  false;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(122);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__0: {
        enterOuterAlt(_localctx, 1);
        setState(118);
        match(GPULangParser::T__0);
         antlrcpp::downCast<BooleanContext *>(_localctx)->val =  true; 
        break;
      }

      case GPULangParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(120);
        match(GPULangParser::T__1);
         antlrcpp::downCast<BooleanContext *>(_localctx)->val =  false; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EntryContext ------------------------------------------------------------------

GPULangParser::EntryContext::EntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::EffectContext* GPULangParser::EntryContext::effect() {
  return getRuleContext<GPULangParser::EffectContext>(0);
}

tree::TerminalNode* GPULangParser::EntryContext::EOF() {
  return getToken(GPULangParser::EOF, 0);
}


size_t GPULangParser::EntryContext::getRuleIndex() const {
  return GPULangParser::RuleEntry;
}

void GPULangParser::EntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry(this);
}

void GPULangParser::EntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry(this);
}

GPULangParser::EntryContext* GPULangParser::entry() {
  EntryContext *_localctx = _tracker.createInstance<EntryContext>(_ctx, getState());
  enterRule(_localctx, 4, GPULangParser::RuleEntry);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(124);
    antlrcpp::downCast<EntryContext *>(_localctx)->effectContext = effect();

            antlrcpp::downCast<EntryContext *>(_localctx)->returnEffect =  antlrcpp::downCast<EntryContext *>(_localctx)->effectContext->eff;
        
    setState(126);
    match(GPULangParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EffectContext ------------------------------------------------------------------

GPULangParser::EffectContext::EffectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::EffectContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::EffectContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::AliasContext *> GPULangParser::EffectContext::alias() {
  return getRuleContexts<GPULangParser::AliasContext>();
}

GPULangParser::AliasContext* GPULangParser::EffectContext::alias(size_t i) {
  return getRuleContext<GPULangParser::AliasContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::EffectContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::EffectContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::FunctionDeclarationContext *> GPULangParser::EffectContext::functionDeclaration() {
  return getRuleContexts<GPULangParser::FunctionDeclarationContext>();
}

GPULangParser::FunctionDeclarationContext* GPULangParser::EffectContext::functionDeclaration(size_t i) {
  return getRuleContext<GPULangParser::FunctionDeclarationContext>(i);
}

std::vector<GPULangParser::FunctionContext *> GPULangParser::EffectContext::function() {
  return getRuleContexts<GPULangParser::FunctionContext>();
}

GPULangParser::FunctionContext* GPULangParser::EffectContext::function(size_t i) {
  return getRuleContext<GPULangParser::FunctionContext>(i);
}

std::vector<GPULangParser::VariablesContext *> GPULangParser::EffectContext::variables() {
  return getRuleContexts<GPULangParser::VariablesContext>();
}

GPULangParser::VariablesContext* GPULangParser::EffectContext::variables(size_t i) {
  return getRuleContext<GPULangParser::VariablesContext>(i);
}

std::vector<GPULangParser::StructureContext *> GPULangParser::EffectContext::structure() {
  return getRuleContexts<GPULangParser::StructureContext>();
}

GPULangParser::StructureContext* GPULangParser::EffectContext::structure(size_t i) {
  return getRuleContext<GPULangParser::StructureContext>(i);
}

std::vector<GPULangParser::EnumerationContext *> GPULangParser::EffectContext::enumeration() {
  return getRuleContexts<GPULangParser::EnumerationContext>();
}

GPULangParser::EnumerationContext* GPULangParser::EffectContext::enumeration(size_t i) {
  return getRuleContext<GPULangParser::EnumerationContext>(i);
}

std::vector<GPULangParser::StateContext *> GPULangParser::EffectContext::state() {
  return getRuleContexts<GPULangParser::StateContext>();
}

GPULangParser::StateContext* GPULangParser::EffectContext::state(size_t i) {
  return getRuleContext<GPULangParser::StateContext>(i);
}

std::vector<GPULangParser::SamplerContext *> GPULangParser::EffectContext::sampler() {
  return getRuleContexts<GPULangParser::SamplerContext>();
}

GPULangParser::SamplerContext* GPULangParser::EffectContext::sampler(size_t i) {
  return getRuleContext<GPULangParser::SamplerContext>(i);
}

std::vector<GPULangParser::ProgramContext *> GPULangParser::EffectContext::program() {
  return getRuleContexts<GPULangParser::ProgramContext>();
}

GPULangParser::ProgramContext* GPULangParser::EffectContext::program(size_t i) {
  return getRuleContext<GPULangParser::ProgramContext>(i);
}


size_t GPULangParser::EffectContext::getRuleIndex() const {
  return GPULangParser::RuleEffect;
}

void GPULangParser::EffectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEffect(this);
}

void GPULangParser::EffectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEffect(this);
}

GPULangParser::EffectContext* GPULangParser::effect() {
  EffectContext *_localctx = _tracker.createInstance<EffectContext>(_ctx, getState());
  enterRule(_localctx, 6, GPULangParser::RuleEffect);

          antlrcpp::downCast<EffectContext *>(_localctx)->eff =  Alloc<Effect>();
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(166);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
    while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1 + 1) {
        setState(164);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
        case 1: {
          setState(128);
          linePreprocessorEntry();
          break;
        }

        case 2: {
          setState(129);
          antlrcpp::downCast<EffectContext *>(_localctx)->aliasContext = alias();
          setState(130);
          match(GPULangParser::SC);
           _localctx->eff->symbols.push_back(antlrcpp::downCast<EffectContext *>(_localctx)->aliasContext->sym); 
          break;
        }

        case 3: {
          setState(133);
          antlrcpp::downCast<EffectContext *>(_localctx)->functionDeclarationContext = functionDeclaration();
          setState(134);
          match(GPULangParser::SC);
           _localctx->eff->symbols.push_back(antlrcpp::downCast<EffectContext *>(_localctx)->functionDeclarationContext->sym); 
          break;
        }

        case 4: {
          setState(137);
          antlrcpp::downCast<EffectContext *>(_localctx)->functionContext = function();
           _localctx->eff->symbols.push_back(antlrcpp::downCast<EffectContext *>(_localctx)->functionContext->sym); 
          break;
        }

        case 5: {
          setState(140);
          antlrcpp::downCast<EffectContext *>(_localctx)->variablesContext = variables();
          setState(141);
          match(GPULangParser::SC);
           for (Variable* var : antlrcpp::downCast<EffectContext *>(_localctx)->variablesContext->list) { _localctx->eff->symbols.push_back(var); } 
          break;
        }

        case 6: {
          setState(144);
          antlrcpp::downCast<EffectContext *>(_localctx)->structureContext = structure();
          setState(145);
          match(GPULangParser::SC);
           _localctx->eff->symbols.push_back(antlrcpp::downCast<EffectContext *>(_localctx)->structureContext->sym); 
          break;
        }

        case 7: {
          setState(148);
          antlrcpp::downCast<EffectContext *>(_localctx)->enumerationContext = enumeration();
          setState(149);
          match(GPULangParser::SC);
           _localctx->eff->symbols.push_back(antlrcpp::downCast<EffectContext *>(_localctx)->enumerationContext->sym); 
          break;
        }

        case 8: {
          setState(152);
          antlrcpp::downCast<EffectContext *>(_localctx)->stateContext = state();
          setState(153);
          match(GPULangParser::SC);
           _localctx->eff->symbols.push_back(antlrcpp::downCast<EffectContext *>(_localctx)->stateContext->sym); 
          break;
        }

        case 9: {
          setState(156);
          antlrcpp::downCast<EffectContext *>(_localctx)->samplerContext = sampler();
          setState(157);
          match(GPULangParser::SC);
           _localctx->eff->symbols.push_back(antlrcpp::downCast<EffectContext *>(_localctx)->samplerContext->sym); 
          break;
        }

        case 10: {
          setState(160);
          antlrcpp::downCast<EffectContext *>(_localctx)->programContext = program();
          setState(161);
          match(GPULangParser::SC);
           _localctx->eff->symbols.push_back(antlrcpp::downCast<EffectContext *>(_localctx)->programContext->sym); 
          break;
        }

        default:
          break;
        } 
      }
      setState(168);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinePreprocessorEntryContext ------------------------------------------------------------------

GPULangParser::LinePreprocessorEntryContext::LinePreprocessorEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::LinePreprocessorEntryContext::INTEGERLITERAL() {
  return getToken(GPULangParser::INTEGERLITERAL, 0);
}

GPULangParser::StringContext* GPULangParser::LinePreprocessorEntryContext::string() {
  return getRuleContext<GPULangParser::StringContext>(0);
}


size_t GPULangParser::LinePreprocessorEntryContext::getRuleIndex() const {
  return GPULangParser::RuleLinePreprocessorEntry;
}

void GPULangParser::LinePreprocessorEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLinePreprocessorEntry(this);
}

void GPULangParser::LinePreprocessorEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLinePreprocessorEntry(this);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::linePreprocessorEntry() {
  LinePreprocessorEntryContext *_localctx = _tracker.createInstance<LinePreprocessorEntryContext>(_ctx, getState());
  enterRule(_localctx, 8, GPULangParser::RuleLinePreprocessorEntry);

          size_t origLine;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(169);
    match(GPULangParser::T__2);
     origLine = _input->LT(-1)->getLine(); 
    setState(171);
    antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->line = match(GPULangParser::INTEGERLITERAL);
    setState(172);
    antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->path = string();
     LineStack.push_back( {origLine, atoi((antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->line != nullptr ? antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->line->getText() : "").c_str()), antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->path->val }); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasContext ------------------------------------------------------------------

GPULangParser::AliasContext::AliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::AliasContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::AliasContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}


size_t GPULangParser::AliasContext::getRuleIndex() const {
  return GPULangParser::RuleAlias;
}

void GPULangParser::AliasContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlias(this);
}

void GPULangParser::AliasContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlias(this);
}

GPULangParser::AliasContext* GPULangParser::alias() {
  AliasContext *_localctx = _tracker.createInstance<AliasContext>(_ctx, getState());
  enterRule(_localctx, 10, GPULangParser::RuleAlias);

          antlrcpp::downCast<AliasContext *>(_localctx)->sym =  nullptr;
          std::string name;
          std::string type;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(175);
    match(GPULangParser::T__3);
    setState(176);
    antlrcpp::downCast<AliasContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
    setState(177);
    match(GPULangParser::T__4);
    setState(178);
    antlrcpp::downCast<AliasContext *>(_localctx)->type = match(GPULangParser::IDENTIFIER);
     name = (antlrcpp::downCast<AliasContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AliasContext *>(_localctx)->name->getText() : ""); type = (antlrcpp::downCast<AliasContext *>(_localctx)->type != nullptr ? antlrcpp::downCast<AliasContext *>(_localctx)->type->getText() : ""); 

            antlrcpp::downCast<AliasContext *>(_localctx)->sym =  Alloc<Alias>();
            _localctx->sym->name = name;
            _localctx->sym->type = type;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

GPULangParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::AnnotationContext::SOBAKA() {
  return getToken(GPULangParser::SOBAKA, 0);
}

tree::TerminalNode* GPULangParser::AnnotationContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::AnnotationContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::AnnotationContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::ExpressionContext* GPULangParser::AnnotationContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}


size_t GPULangParser::AnnotationContext::getRuleIndex() const {
  return GPULangParser::RuleAnnotation;
}

void GPULangParser::AnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation(this);
}

void GPULangParser::AnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation(this);
}

GPULangParser::AnnotationContext* GPULangParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 12, GPULangParser::RuleAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(182);
    match(GPULangParser::SOBAKA);

    setState(183);
    antlrcpp::downCast<AnnotationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
    setState(184);
    match(GPULangParser::LP);
    setState(185);
    antlrcpp::downCast<AnnotationContext *>(_localctx)->value = expression();
    setState(186);
    match(GPULangParser::RP);
     _localctx->annot.name = (antlrcpp::downCast<AnnotationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AnnotationContext *>(_localctx)->name->getText() : ""); _localctx->annot.value = antlrcpp::downCast<AnnotationContext *>(_localctx)->value->tree; 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeContext ------------------------------------------------------------------

GPULangParser::AttributeContext::AttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::AttributeContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::AttributeContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

tree::TerminalNode* GPULangParser::AttributeContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::AttributeContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}


size_t GPULangParser::AttributeContext::getRuleIndex() const {
  return GPULangParser::RuleAttribute;
}

void GPULangParser::AttributeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute(this);
}

void GPULangParser::AttributeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute(this);
}

GPULangParser::AttributeContext* GPULangParser::attribute() {
  AttributeContext *_localctx = _tracker.createInstance<AttributeContext>(_ctx, getState());
  enterRule(_localctx, 14, GPULangParser::RuleAttribute);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(197);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(189);
      antlrcpp::downCast<AttributeContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
      setState(190);
      match(GPULangParser::LP);
      setState(191);
      antlrcpp::downCast<AttributeContext *>(_localctx)->expressionContext = expression();
      setState(192);
      match(GPULangParser::RP);
       _localctx->attr.name = (antlrcpp::downCast<AttributeContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AttributeContext *>(_localctx)->name->getText() : ""); _localctx->attr.expression = antlrcpp::downCast<AttributeContext *>(_localctx)->expressionContext->tree; 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(195);
      antlrcpp::downCast<AttributeContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
       _localctx->attr.name = (antlrcpp::downCast<AttributeContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AttributeContext *>(_localctx)->name->getText() : ""); _localctx->attr.expression = nullptr; 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclarationContext ------------------------------------------------------------------

GPULangParser::TypeDeclarationContext::TypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::MUL_OP() {
  return getTokens(GPULangParser::MUL_OP);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::MUL_OP(size_t i) {
  return getToken(GPULangParser::MUL_OP, i);
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::LL() {
  return getTokens(GPULangParser::LL);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::LL(size_t i) {
  return getToken(GPULangParser::LL, i);
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::RR() {
  return getTokens(GPULangParser::RR);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::RR(size_t i) {
  return getToken(GPULangParser::RR, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::TypeDeclarationContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::TypeDeclarationContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::TypeDeclarationContext::getRuleIndex() const {
  return GPULangParser::RuleTypeDeclaration;
}

void GPULangParser::TypeDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeDeclaration(this);
}

void GPULangParser::TypeDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeDeclaration(this);
}

GPULangParser::TypeDeclarationContext* GPULangParser::typeDeclaration() {
  TypeDeclarationContext *_localctx = _tracker.createInstance<TypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 16, GPULangParser::RuleTypeDeclaration);

          _localctx->type.name = "";
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(213);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(211);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case GPULangParser::MUL_OP: {
            setState(199);
            match(GPULangParser::MUL_OP);
             _localctx->type.AddModifier(Type::FullType::Modifier::Pointer); 
            break;
          }

          case GPULangParser::LL: {
            setState(201);
            match(GPULangParser::LL);
             _localctx->type.AddModifier(Type::FullType::Modifier::Array); 
            setState(206);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if ((((_la & ~ 0x3fULL) == 0) &&
              ((1ULL << _la) & 866135989813248006) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
              ((1ULL << (_la - 73)) & 14955) != 0)) {
              setState(203);
              antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->arraySize0 = expression();
               _localctx->type.UpdateValue(antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->arraySize0->tree); 
            }
            setState(208);
            match(GPULangParser::RR);
            break;
          }

          case GPULangParser::IDENTIFIER: {
            setState(209);
            antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->identifierToken = match(GPULangParser::IDENTIFIER);
             _localctx->type.AddQualifier((antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->identifierToken != nullptr ? antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->identifierToken->getText() : "")); 
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(215);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    }
    setState(216);
    antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->typeName = match(GPULangParser::IDENTIFIER);
     _localctx->type.name = (antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->typeName != nullptr ? antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->typeName->getText() : ""); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariablesContext ------------------------------------------------------------------

GPULangParser::VariablesContext::VariablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::VariablesContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::VariablesContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

std::vector<GPULangParser::AnnotationContext *> GPULangParser::VariablesContext::annotation() {
  return getRuleContexts<GPULangParser::AnnotationContext>();
}

GPULangParser::AnnotationContext* GPULangParser::VariablesContext::annotation(size_t i) {
  return getRuleContext<GPULangParser::AnnotationContext>(i);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::VariablesContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::VariablesContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::VariablesContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::VariablesContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}

tree::TerminalNode* GPULangParser::VariablesContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::VariablesContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

tree::TerminalNode* GPULangParser::VariablesContext::EQ() {
  return getToken(GPULangParser::EQ, 0);
}

std::vector<GPULangParser::LogicalOrExpressionContext *> GPULangParser::VariablesContext::logicalOrExpression() {
  return getRuleContexts<GPULangParser::LogicalOrExpressionContext>();
}

GPULangParser::LogicalOrExpressionContext* GPULangParser::VariablesContext::logicalOrExpression(size_t i) {
  return getRuleContext<GPULangParser::LogicalOrExpressionContext>(i);
}


size_t GPULangParser::VariablesContext::getRuleIndex() const {
  return GPULangParser::RuleVariables;
}

void GPULangParser::VariablesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariables(this);
}

void GPULangParser::VariablesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariables(this);
}

GPULangParser::VariablesContext* GPULangParser::variables() {
  VariablesContext *_localctx = _tracker.createInstance<VariablesContext>(_ctx, getState());
  enterRule(_localctx, 18, GPULangParser::RuleVariables);

          std::vector<Annotation> annotations;
          std::vector<Attribute> attributes;
          std::vector<std::string> names;
          std::vector<Expression*> valueExpressions;
          std::vector<Symbol::Location> locations;
          unsigned initCounter = 0;
          Type::FullType type = { "<undefined>" };
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(224);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::SOBAKA) {
      setState(219);
      antlrcpp::downCast<VariablesContext *>(_localctx)->annotationContext = annotation();
       annotations.push_back(std::move(antlrcpp::downCast<VariablesContext *>(_localctx)->annotationContext->annot)); 
      setState(226);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(230); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(227);
              antlrcpp::downCast<VariablesContext *>(_localctx)->attributeContext = attribute();
               attributes.push_back(std::move(antlrcpp::downCast<VariablesContext *>(_localctx)->attributeContext->attr)); 
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(232); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(234);
    antlrcpp::downCast<VariablesContext *>(_localctx)->varName = match(GPULangParser::IDENTIFIER);
     names.push_back((antlrcpp::downCast<VariablesContext *>(_localctx)->varName != nullptr ? antlrcpp::downCast<VariablesContext *>(_localctx)->varName->getText() : "")); valueExpressions.push_back(nullptr); locations.push_back(SetupFile()); 
    setState(241);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::CO) {
      setState(236);
      match(GPULangParser::CO);
      setState(237);
      antlrcpp::downCast<VariablesContext *>(_localctx)->varNameN = match(GPULangParser::IDENTIFIER);
       names.push_back((antlrcpp::downCast<VariablesContext *>(_localctx)->varNameN != nullptr ? antlrcpp::downCast<VariablesContext *>(_localctx)->varNameN->getText() : "")); valueExpressions.push_back(nullptr); locations.push_back(SetupFile()); 
      setState(243);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(248);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::COL) {
      setState(244);
      match(GPULangParser::COL);
      setState(245);
      antlrcpp::downCast<VariablesContext *>(_localctx)->typeDeclarationContext = typeDeclaration();
       type = antlrcpp::downCast<VariablesContext *>(_localctx)->typeDeclarationContext->type; 
    }
    setState(262);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::EQ) {
      setState(250);
      match(GPULangParser::EQ);
      setState(251);
      antlrcpp::downCast<VariablesContext *>(_localctx)->valueExpr = logicalOrExpression();
       if (initCounter < names.size()) { valueExpressions[initCounter++] = antlrcpp::downCast<VariablesContext *>(_localctx)->valueExpr->tree; }  
      setState(259);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GPULangParser::CO) {
        setState(253);
        match(GPULangParser::CO);
        setState(254);
        antlrcpp::downCast<VariablesContext *>(_localctx)->valueExprN = logicalOrExpression();
         if (initCounter < names.size()) { valueExpressions[initCounter++] = antlrcpp::downCast<VariablesContext *>(_localctx)->valueExprN->tree; }; 
        setState(261);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }

            for (size_t i = 0; i < names.size(); i++)
            {
                Variable* var = Alloc<Variable>(); 
                var->type = type; 
                var->location = locations[i]; 
                var->annotations = annotations;
                var->attributes = attributes;
                var->name = names[i];
                var->valueExpression = valueExpressions[i];
                _localctx->list.push_back(var);
            }
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureDeclarationContext ------------------------------------------------------------------

GPULangParser::StructureDeclarationContext::StructureDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::StructureDeclarationContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<GPULangParser::AnnotationContext *> GPULangParser::StructureDeclarationContext::annotation() {
  return getRuleContexts<GPULangParser::AnnotationContext>();
}

GPULangParser::AnnotationContext* GPULangParser::StructureDeclarationContext::annotation(size_t i) {
  return getRuleContext<GPULangParser::AnnotationContext>(i);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::StructureDeclarationContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::StructureDeclarationContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}


size_t GPULangParser::StructureDeclarationContext::getRuleIndex() const {
  return GPULangParser::RuleStructureDeclaration;
}

void GPULangParser::StructureDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructureDeclaration(this);
}

void GPULangParser::StructureDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructureDeclaration(this);
}

GPULangParser::StructureDeclarationContext* GPULangParser::structureDeclaration() {
  StructureDeclarationContext *_localctx = _tracker.createInstance<StructureDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 20, GPULangParser::RuleStructureDeclaration);

          antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->sym =  nullptr;
          std::vector<Annotation> annotations;
          std::vector<Attribute> attributes;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(271);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::SOBAKA) {
      setState(266);
      antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->annotationContext = annotation();
       annotations.push_back(std::move(antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->annotationContext->annot)); 
      setState(273);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(279);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::IDENTIFIER) {
      setState(274);
      antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->attributeContext = attribute();
       attributes.push_back(std::move(antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->attributeContext->attr)); 
      setState(281);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(282);
    match(GPULangParser::T__5);
    setState(283);
    antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     
            antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->sym =  Alloc<Structure>();
            _localctx->sym->name = (antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->name->getText() : ""); 
            _localctx->sym->annotations = std::move(annotations);
            _localctx->sym->attributes = std::move(attributes);
            _localctx->sym->location = SetupFile();
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureContext ------------------------------------------------------------------

GPULangParser::StructureContext::StructureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::StructureDeclarationContext* GPULangParser::StructureContext::structureDeclaration() {
  return getRuleContext<GPULangParser::StructureDeclarationContext>(0);
}

tree::TerminalNode* GPULangParser::StructureContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::StructureContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::COL() {
  return getTokens(GPULangParser::COL);
}

tree::TerminalNode* GPULangParser::StructureContext::COL(size_t i) {
  return getToken(GPULangParser::COL, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::StructureContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::StructureContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::MUL_OP() {
  return getTokens(GPULangParser::MUL_OP);
}

tree::TerminalNode* GPULangParser::StructureContext::MUL_OP(size_t i) {
  return getToken(GPULangParser::MUL_OP, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::LL() {
  return getTokens(GPULangParser::LL);
}

tree::TerminalNode* GPULangParser::StructureContext::LL(size_t i) {
  return getToken(GPULangParser::LL, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::RR() {
  return getTokens(GPULangParser::RR);
}

tree::TerminalNode* GPULangParser::StructureContext::RR(size_t i) {
  return getToken(GPULangParser::RR, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::StructureContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::StructureContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::StructureContext::getRuleIndex() const {
  return GPULangParser::RuleStructure;
}

void GPULangParser::StructureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure(this);
}

void GPULangParser::StructureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure(this);
}

GPULangParser::StructureContext* GPULangParser::structure() {
  StructureContext *_localctx = _tracker.createInstance<StructureContext>(_ctx, getState());
  enterRule(_localctx, 22, GPULangParser::RuleStructure);

          antlrcpp::downCast<StructureContext *>(_localctx)->sym =  nullptr;
          std::vector<Symbol*> members;
          bool isArray = false;
          Expression* arraySizeExpression = nullptr;
          std::string instanceName;
          Symbol::Location varLocation;
          Type::FullType varType;
          std::string varName;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(286);
    antlrcpp::downCast<StructureContext *>(_localctx)->structureDeclarationContext = structureDeclaration();
     antlrcpp::downCast<StructureContext *>(_localctx)->sym =  antlrcpp::downCast<StructureContext *>(_localctx)->structureDeclarationContext->sym; 
    setState(288);
    match(GPULangParser::LB);
    setState(313);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::IDENTIFIER) {
      setState(289);
      antlrcpp::downCast<StructureContext *>(_localctx)->varName = match(GPULangParser::IDENTIFIER);
       varName = (antlrcpp::downCast<StructureContext *>(_localctx)->varName != nullptr ? antlrcpp::downCast<StructureContext *>(_localctx)->varName->getText() : ""); varLocation = SetupFile(); 
      setState(291);
      match(GPULangParser::COL);
      setState(304);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GPULangParser::LL

      || _la == GPULangParser::MUL_OP) {
        setState(302);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case GPULangParser::MUL_OP: {
            setState(292);
            match(GPULangParser::MUL_OP);
             varType.AddModifier(Type::FullType::Modifier::Pointer); 
            break;
          }

          case GPULangParser::LL: {
            setState(294);
            match(GPULangParser::LL);
             varType.AddModifier(Type::FullType::Modifier::Array); 
            setState(299);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if ((((_la & ~ 0x3fULL) == 0) &&
              ((1ULL << _la) & 866135989813248006) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
              ((1ULL << (_la - 73)) & 14955) != 0)) {
              setState(296);
              antlrcpp::downCast<StructureContext *>(_localctx)->arraySize0 = expression();
               varType.UpdateValue(antlrcpp::downCast<StructureContext *>(_localctx)->arraySize0->tree); 
            }
            setState(301);
            match(GPULangParser::RR);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(306);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(307);
      antlrcpp::downCast<StructureContext *>(_localctx)->varTypeName = match(GPULangParser::IDENTIFIER);
       varType.name = (antlrcpp::downCast<StructureContext *>(_localctx)->varTypeName != nullptr ? antlrcpp::downCast<StructureContext *>(_localctx)->varTypeName->getText() : ""); 
      setState(309);
      match(GPULangParser::SC);

                      Variable* var = Alloc<Variable>(); 
                      var->type = varType; 
                      var->location = varLocation; 
                      var->name = varName;
                      var->valueExpression = nullptr;
                      members.push_back(var);
                      
                      varType = Type::FullType();
                  
      setState(315);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(316);
    match(GPULangParser::RB);
     
            _localctx->sym->symbols = members; 
            //_localctx->sym->instanceName = instanceName;
            //_localctx->sym->isArray = isArray;
            //_localctx->sym->arraySizeExpression = arraySizeExpression;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumerationContext ------------------------------------------------------------------

GPULangParser::EnumerationContext::EnumerationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::EnumerationContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::EnumerationContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::EnumerationContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::EnumerationContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

tree::TerminalNode* GPULangParser::EnumerationContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::EnumerationContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::EnumerationContext::EQ() {
  return getTokens(GPULangParser::EQ);
}

tree::TerminalNode* GPULangParser::EnumerationContext::EQ(size_t i) {
  return getToken(GPULangParser::EQ, i);
}

std::vector<tree::TerminalNode *> GPULangParser::EnumerationContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::EnumerationContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::EnumerationContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::EnumerationContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::EnumerationContext::getRuleIndex() const {
  return GPULangParser::RuleEnumeration;
}

void GPULangParser::EnumerationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration(this);
}

void GPULangParser::EnumerationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration(this);
}

GPULangParser::EnumerationContext* GPULangParser::enumeration() {
  EnumerationContext *_localctx = _tracker.createInstance<EnumerationContext>(_ctx, getState());
  enterRule(_localctx, 24, GPULangParser::RuleEnumeration);

          antlrcpp::downCast<EnumerationContext *>(_localctx)->sym =  nullptr;
          std::vector<std::string> enumLabels;
          std::vector<Expression*> enumValues;
          std::string name;
          Type::FullType type = { "u32" };
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(319);
    match(GPULangParser::T__6);
    setState(320);
    antlrcpp::downCast<EnumerationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     name = (antlrcpp::downCast<EnumerationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<EnumerationContext *>(_localctx)->name->getText() : ""); location = SetupFile(); 
    setState(326);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::COL) {
      setState(322);
      match(GPULangParser::COL);
      setState(323);
      antlrcpp::downCast<EnumerationContext *>(_localctx)->typeDeclarationContext = typeDeclaration();
       type = antlrcpp::downCast<EnumerationContext *>(_localctx)->typeDeclarationContext->type; 
    }
    setState(328);
    match(GPULangParser::LB);
    setState(353);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::IDENTIFIER) {
      setState(329);
      antlrcpp::downCast<EnumerationContext *>(_localctx)->label = match(GPULangParser::IDENTIFIER);
       Expression* expr = nullptr; 
      setState(335);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GPULangParser::EQ) {
        setState(331);
        match(GPULangParser::EQ);
        setState(332);
        antlrcpp::downCast<EnumerationContext *>(_localctx)->value = expression();
         expr = antlrcpp::downCast<EnumerationContext *>(_localctx)->value->tree; 
      }

                      enumLabels.push_back((antlrcpp::downCast<EnumerationContext *>(_localctx)->label != nullptr ? antlrcpp::downCast<EnumerationContext *>(_localctx)->label->getText() : ""));
                      enumValues.push_back(expr);
                  
      setState(350);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GPULangParser::CO) {
        setState(338);
        match(GPULangParser::CO);
        setState(339);
        antlrcpp::downCast<EnumerationContext *>(_localctx)->label = match(GPULangParser::IDENTIFIER);
         Expression* expr = nullptr; 
        setState(345);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GPULangParser::EQ) {
          setState(341);
          match(GPULangParser::EQ);
          setState(342);
          antlrcpp::downCast<EnumerationContext *>(_localctx)->value = expression();
           expr = antlrcpp::downCast<EnumerationContext *>(_localctx)->value->tree; 
        }

                            enumLabels.push_back((antlrcpp::downCast<EnumerationContext *>(_localctx)->label != nullptr ? antlrcpp::downCast<EnumerationContext *>(_localctx)->label->getText() : ""));
                            enumValues.push_back(expr);
                        
        setState(352);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(355);
    match(GPULangParser::RB);

            antlrcpp::downCast<EnumerationContext *>(_localctx)->sym =  Alloc<Enumeration>();
            _localctx->sym->name = name;
            type.literal = true;
            _localctx->sym->type = type;
            _localctx->sym->labels = enumLabels;
            _localctx->sym->values = enumValues;
            _localctx->sym->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterContext ------------------------------------------------------------------

GPULangParser::ParameterContext::ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ParameterContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::ParameterContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

tree::TerminalNode* GPULangParser::ParameterContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::ParameterContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::ParameterContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

tree::TerminalNode* GPULangParser::ParameterContext::EQ() {
  return getToken(GPULangParser::EQ, 0);
}

GPULangParser::LogicalOrExpressionContext* GPULangParser::ParameterContext::logicalOrExpression() {
  return getRuleContext<GPULangParser::LogicalOrExpressionContext>(0);
}


size_t GPULangParser::ParameterContext::getRuleIndex() const {
  return GPULangParser::RuleParameter;
}

void GPULangParser::ParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter(this);
}

void GPULangParser::ParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter(this);
}

GPULangParser::ParameterContext* GPULangParser::parameter() {
  ParameterContext *_localctx = _tracker.createInstance<ParameterContext>(_ctx, getState());
  enterRule(_localctx, 26, GPULangParser::RuleParameter);

          std::vector<Attribute> attributes;
          std::string name;
          Expression* valueExpression = nullptr;
          Symbol::Location location;
          Type::FullType type = { "unknown" };
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(363);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(358);
        antlrcpp::downCast<ParameterContext *>(_localctx)->attributeContext = attribute();
         attributes.push_back(std::move(antlrcpp::downCast<ParameterContext *>(_localctx)->attributeContext->attr));  
      }
      setState(365);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
    }
    setState(366);
    antlrcpp::downCast<ParameterContext *>(_localctx)->varName = match(GPULangParser::IDENTIFIER);
     name = (antlrcpp::downCast<ParameterContext *>(_localctx)->varName != nullptr ? antlrcpp::downCast<ParameterContext *>(_localctx)->varName->getText() : ""); location = SetupFile(); 
    setState(368);
    match(GPULangParser::COL);
    setState(369);
    antlrcpp::downCast<ParameterContext *>(_localctx)->typeDeclarationContext = typeDeclaration();
     type = antlrcpp::downCast<ParameterContext *>(_localctx)->typeDeclarationContext->type; 
    setState(375);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::EQ) {
      setState(371);
      match(GPULangParser::EQ);
      setState(372);
      antlrcpp::downCast<ParameterContext *>(_localctx)->valueExpr = logicalOrExpression();
       valueExpression = antlrcpp::downCast<ParameterContext *>(_localctx)->valueExpr->tree; 
    }

                antlrcpp::downCast<ParameterContext *>(_localctx)->sym =  Alloc<Variable>(); 
                _localctx->sym->type = type; 
                _localctx->sym->location = location; 
                _localctx->sym->attributes = std::move(attributes);
                _localctx->sym->name = name;
                _localctx->sym->valueExpression = valueExpression;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDeclarationContext ------------------------------------------------------------------

GPULangParser::FunctionDeclarationContext::FunctionDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::FunctionDeclarationContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::FunctionDeclarationContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::FunctionDeclarationContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

std::vector<GPULangParser::ParameterContext *> GPULangParser::FunctionDeclarationContext::parameter() {
  return getRuleContexts<GPULangParser::ParameterContext>();
}

GPULangParser::ParameterContext* GPULangParser::FunctionDeclarationContext::parameter(size_t i) {
  return getRuleContext<GPULangParser::ParameterContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::FunctionDeclarationContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::FunctionDeclarationContext::getRuleIndex() const {
  return GPULangParser::RuleFunctionDeclaration;
}

void GPULangParser::FunctionDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionDeclaration(this);
}

void GPULangParser::FunctionDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionDeclaration(this);
}

GPULangParser::FunctionDeclarationContext* GPULangParser::functionDeclaration() {
  FunctionDeclarationContext *_localctx = _tracker.createInstance<FunctionDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 28, GPULangParser::RuleFunctionDeclaration);

          antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->sym =  nullptr;
          std::vector<Variable*> variables;
          std::vector<Attribute> attributes;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(384);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(379);
        antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->attributeContext = attribute();
         attributes.push_back(std::move(antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->attributeContext->attr));  
      }
      setState(386);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
    }
    setState(387);
    antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     location = SetupFile(); 
    setState(389);
    match(GPULangParser::LP);
    setState(401);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::IDENTIFIER) {
      setState(390);
      antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->arg0 = parameter();
       variables.push_back(antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->arg0->sym); 
      setState(398);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GPULangParser::CO) {
        setState(392);
        match(GPULangParser::CO);
        setState(393);
        antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->argn = parameter();
         variables.push_back(antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->argn->sym); 
        setState(400);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(403);
    match(GPULangParser::RP);
    setState(404);
    antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->returnType = typeDeclaration();

            antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->sym =  Alloc<Function>(); 
            _localctx->sym->hasBody = false;
            _localctx->sym->location = location;
            _localctx->sym->returnType = antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->returnType->type; 
            _localctx->sym->name = (antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->name->getText() : ""); 
            _localctx->sym->parameters = variables; 
            _localctx->sym->attributes = std::move(attributes);
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionContext ------------------------------------------------------------------

GPULangParser::FunctionContext::FunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::FunctionDeclarationContext* GPULangParser::FunctionContext::functionDeclaration() {
  return getRuleContext<GPULangParser::FunctionDeclarationContext>(0);
}

GPULangParser::ScopeStatementContext* GPULangParser::FunctionContext::scopeStatement() {
  return getRuleContext<GPULangParser::ScopeStatementContext>(0);
}


size_t GPULangParser::FunctionContext::getRuleIndex() const {
  return GPULangParser::RuleFunction;
}

void GPULangParser::FunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction(this);
}

void GPULangParser::FunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction(this);
}

GPULangParser::FunctionContext* GPULangParser::function() {
  FunctionContext *_localctx = _tracker.createInstance<FunctionContext>(_ctx, getState());
  enterRule(_localctx, 30, GPULangParser::RuleFunction);

          antlrcpp::downCast<FunctionContext *>(_localctx)->sym =  nullptr;
          Token* startToken = nullptr;
          Token* endToken = nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(407);
    antlrcpp::downCast<FunctionContext *>(_localctx)->functionDeclarationContext = functionDeclaration();
     antlrcpp::downCast<FunctionContext *>(_localctx)->sym =  antlrcpp::downCast<FunctionContext *>(_localctx)->functionDeclarationContext->sym; 

            startToken = _input->LT(2);
        
    setState(410);
    antlrcpp::downCast<FunctionContext *>(_localctx)->scopeStatementContext = scopeStatement();

            endToken = _input->LT(-2);

            // extract code from between tokens
            antlr4::misc::Interval interval;
            interval.a = startToken->getTokenIndex();
            interval.b = endToken->getTokenIndex();
            _localctx->sym->body = _input->getText(interval);
            _localctx->sym->hasBody = true;
            _localctx->sym->ast = antlrcpp::downCast<FunctionContext *>(_localctx)->scopeStatementContext->tree;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

GPULangParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ProgramContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::ProgramContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::ProgramContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<GPULangParser::AnnotationContext *> GPULangParser::ProgramContext::annotation() {
  return getRuleContexts<GPULangParser::AnnotationContext>();
}

GPULangParser::AnnotationContext* GPULangParser::ProgramContext::annotation(size_t i) {
  return getRuleContext<GPULangParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::ProgramContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::ProgramContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::ProgramContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::ProgramContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::ProgramContext::getRuleIndex() const {
  return GPULangParser::RuleProgram;
}

void GPULangParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void GPULangParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}

GPULangParser::ProgramContext* GPULangParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 32, GPULangParser::RuleProgram);

          antlrcpp::downCast<ProgramContext *>(_localctx)->sym =  nullptr;
          Symbol::Location location;
          std::vector<Program::SubroutineMapping> subroutines;
          std::vector<Expression*> entries;
          std::vector<Annotation> annotations;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(418);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::SOBAKA) {
      setState(413);
      antlrcpp::downCast<ProgramContext *>(_localctx)->annotationContext = annotation();
       annotations.push_back(std::move(antlrcpp::downCast<ProgramContext *>(_localctx)->annotationContext->annot)); 
      setState(420);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(421);
    match(GPULangParser::T__7);
    setState(422);
    antlrcpp::downCast<ProgramContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     location = SetupFile(); 
    setState(424);
    match(GPULangParser::LB);
    setState(431);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866135989813248006) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 14955) != 0)) {
      setState(425);
      antlrcpp::downCast<ProgramContext *>(_localctx)->assignment = expression();
       entries.push_back(antlrcpp::downCast<ProgramContext *>(_localctx)->assignment->tree); 
      setState(427);
      match(GPULangParser::SC);
      setState(433);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(434);
    match(GPULangParser::RB);
     
            antlrcpp::downCast<ProgramContext *>(_localctx)->sym =  Alloc<Program>();
            _localctx->sym->location = location;
            _localctx->sym->name = (antlrcpp::downCast<ProgramContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<ProgramContext *>(_localctx)->name->getText() : "");
            _localctx->sym->annotations = std::move(annotations);
            _localctx->sym->entries = entries;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SamplerContext ------------------------------------------------------------------

GPULangParser::SamplerContext::SamplerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::SamplerContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::SamplerContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::SamplerContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::SamplerContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::SamplerContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::SamplerContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::SamplerContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::SamplerContext::getRuleIndex() const {
  return GPULangParser::RuleSampler;
}

void GPULangParser::SamplerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSampler(this);
}

void GPULangParser::SamplerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSampler(this);
}

GPULangParser::SamplerContext* GPULangParser::sampler() {
  SamplerContext *_localctx = _tracker.createInstance<SamplerContext>(_ctx, getState());
  enterRule(_localctx, 34, GPULangParser::RuleSampler);

          std::vector<Expression*> entries;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(437);
    match(GPULangParser::T__8);
     antlrcpp::downCast<SamplerContext *>(_localctx)->sym =  Alloc<SamplerState>(); _localctx->sym->isImmutable = true; 
    setState(440);
    antlrcpp::downCast<SamplerContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     _localctx->sym->location = SetupFile(); 
    setState(442);
    match(GPULangParser::LB);
    setState(449);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866135989813248006) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 14955) != 0)) {
      setState(443);
      antlrcpp::downCast<SamplerContext *>(_localctx)->assign = expression();
       entries.push_back(antlrcpp::downCast<SamplerContext *>(_localctx)->assign->tree); 
      setState(445);
      match(GPULangParser::SC);
      setState(451);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(452);
    match(GPULangParser::RB);

            _localctx->sym->name = (antlrcpp::downCast<SamplerContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<SamplerContext *>(_localctx)->name->getText() : "");
            _localctx->sym->entries = entries;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StateContext ------------------------------------------------------------------

GPULangParser::StateContext::StateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::StateContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::StateContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::StateContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::StateContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::StateContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::StateContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::StateContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::StateContext::getRuleIndex() const {
  return GPULangParser::RuleState;
}

void GPULangParser::StateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterState(this);
}

void GPULangParser::StateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitState(this);
}

GPULangParser::StateContext* GPULangParser::state() {
  StateContext *_localctx = _tracker.createInstance<StateContext>(_ctx, getState());
  enterRule(_localctx, 36, GPULangParser::RuleState);

          std::vector<Expression*> entries;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(455);
    match(GPULangParser::T__9);
     antlrcpp::downCast<StateContext *>(_localctx)->sym =  Alloc<RenderState>(); 
    setState(458);
    antlrcpp::downCast<StateContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     _localctx->sym->location = SetupFile(); 
    setState(460);
    match(GPULangParser::LB);
    setState(467);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866135989813248006) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 14955) != 0)) {
      setState(461);
      antlrcpp::downCast<StateContext *>(_localctx)->assign = expression();
       entries.push_back(antlrcpp::downCast<StateContext *>(_localctx)->assign->tree); 
      setState(463);
      match(GPULangParser::SC);
      setState(469);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(470);
    match(GPULangParser::RB);

            _localctx->sym->name = (antlrcpp::downCast<StateContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<StateContext *>(_localctx)->name->getText() : "");
            _localctx->sym->entries = entries;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

GPULangParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::IfStatementContext* GPULangParser::StatementContext::ifStatement() {
  return getRuleContext<GPULangParser::IfStatementContext>(0);
}

GPULangParser::ScopeStatementContext* GPULangParser::StatementContext::scopeStatement() {
  return getRuleContext<GPULangParser::ScopeStatementContext>(0);
}

GPULangParser::ForStatementContext* GPULangParser::StatementContext::forStatement() {
  return getRuleContext<GPULangParser::ForStatementContext>(0);
}

GPULangParser::WhileStatementContext* GPULangParser::StatementContext::whileStatement() {
  return getRuleContext<GPULangParser::WhileStatementContext>(0);
}

GPULangParser::SwitchStatementContext* GPULangParser::StatementContext::switchStatement() {
  return getRuleContext<GPULangParser::SwitchStatementContext>(0);
}

GPULangParser::TerminateStatementContext* GPULangParser::StatementContext::terminateStatement() {
  return getRuleContext<GPULangParser::TerminateStatementContext>(0);
}

GPULangParser::ContinueStatementContext* GPULangParser::StatementContext::continueStatement() {
  return getRuleContext<GPULangParser::ContinueStatementContext>(0);
}

GPULangParser::BreakStatementContext* GPULangParser::StatementContext::breakStatement() {
  return getRuleContext<GPULangParser::BreakStatementContext>(0);
}

GPULangParser::ExpressionStatementContext* GPULangParser::StatementContext::expressionStatement() {
  return getRuleContext<GPULangParser::ExpressionStatementContext>(0);
}

tree::TerminalNode* GPULangParser::StatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::StatementContext::getRuleIndex() const {
  return GPULangParser::RuleStatement;
}

void GPULangParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void GPULangParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

GPULangParser::StatementContext* GPULangParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 38, GPULangParser::RuleStatement);

          antlrcpp::downCast<StatementContext *>(_localctx)->tree =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(501);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__10: {
        enterOuterAlt(_localctx, 1);
        setState(473);
        antlrcpp::downCast<StatementContext *>(_localctx)->ifStatementContext = ifStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->ifStatementContext->tree; 
        break;
      }

      case GPULangParser::LB: {
        enterOuterAlt(_localctx, 2);
        setState(476);
        antlrcpp::downCast<StatementContext *>(_localctx)->scopeStatementContext = scopeStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->scopeStatementContext->tree; 
        break;
      }

      case GPULangParser::T__12: {
        enterOuterAlt(_localctx, 3);
        setState(479);
        antlrcpp::downCast<StatementContext *>(_localctx)->forStatementContext = forStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->forStatementContext->tree; 
        break;
      }

      case GPULangParser::T__14:
      case GPULangParser::T__15: {
        enterOuterAlt(_localctx, 4);
        setState(482);
        antlrcpp::downCast<StatementContext *>(_localctx)->whileStatementContext = whileStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->whileStatementContext->tree; 
        break;
      }

      case GPULangParser::T__21: {
        enterOuterAlt(_localctx, 5);
        setState(485);
        antlrcpp::downCast<StatementContext *>(_localctx)->switchStatementContext = switchStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->switchStatementContext->tree; 
        break;
      }

      case GPULangParser::T__16:
      case GPULangParser::T__17:
      case GPULangParser::T__18:
      case GPULangParser::T__19: {
        enterOuterAlt(_localctx, 6);
        setState(488);
        antlrcpp::downCast<StatementContext *>(_localctx)->terminateStatementContext = terminateStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->terminateStatementContext->tree; 
        break;
      }

      case GPULangParser::T__20: {
        enterOuterAlt(_localctx, 7);
        setState(491);
        antlrcpp::downCast<StatementContext *>(_localctx)->continueStatementContext = continueStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->continueStatementContext->tree; 
        break;
      }

      case GPULangParser::T__24: {
        enterOuterAlt(_localctx, 8);
        setState(494);
        antlrcpp::downCast<StatementContext *>(_localctx)->breakStatementContext = breakStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->breakStatementContext->tree; 
        break;
      }

      case GPULangParser::T__0:
      case GPULangParser::T__1:
      case GPULangParser::T__34:
      case GPULangParser::T__35:
      case GPULangParser::LP:
      case GPULangParser::LL:
      case GPULangParser::NOT:
      case GPULangParser::QO:
      case GPULangParser::CONJUGATE:
      case GPULangParser::Q:
      case GPULangParser::ADD_OP:
      case GPULangParser::SUB_OP:
      case GPULangParser::MUL_OP:
      case GPULangParser::INTEGERLITERAL:
      case GPULangParser::UINTEGERLITERAL:
      case GPULangParser::FLOATLITERAL:
      case GPULangParser::DOUBLELITERAL:
      case GPULangParser::HEX:
      case GPULangParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 9);
        setState(497);
        antlrcpp::downCast<StatementContext *>(_localctx)->expressionStatementContext = expressionStatement();
        setState(498);
        match(GPULangParser::SC);
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->expressionStatementContext->tree; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

GPULangParser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::ExpressionContext* GPULangParser::ExpressionStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}


size_t GPULangParser::ExpressionStatementContext::getRuleIndex() const {
  return GPULangParser::RuleExpressionStatement;
}

void GPULangParser::ExpressionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement(this);
}

void GPULangParser::ExpressionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement(this);
}

GPULangParser::ExpressionStatementContext* GPULangParser::expressionStatement() {
  ExpressionStatementContext *_localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
  enterRule(_localctx, 40, GPULangParser::RuleExpressionStatement);

          antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->tree =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(503);
    antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->expressionContext = expression();

            antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->tree =  Alloc<ExpressionStatement>((antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->expressionContext->tree));
            _localctx->tree->location = SetupFile();
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStatementContext ------------------------------------------------------------------

GPULangParser::IfStatementContext::IfStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::IfStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::IfStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::IfStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

std::vector<GPULangParser::StatementContext *> GPULangParser::IfStatementContext::statement() {
  return getRuleContexts<GPULangParser::StatementContext>();
}

GPULangParser::StatementContext* GPULangParser::IfStatementContext::statement(size_t i) {
  return getRuleContext<GPULangParser::StatementContext>(i);
}


size_t GPULangParser::IfStatementContext::getRuleIndex() const {
  return GPULangParser::RuleIfStatement;
}

void GPULangParser::IfStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfStatement(this);
}

void GPULangParser::IfStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfStatement(this);
}

GPULangParser::IfStatementContext* GPULangParser::ifStatement() {
  IfStatementContext *_localctx = _tracker.createInstance<IfStatementContext>(_ctx, getState());
  enterRule(_localctx, 42, GPULangParser::RuleIfStatement);

          antlrcpp::downCast<IfStatementContext *>(_localctx)->tree =  nullptr;
          Expression* condition = nullptr;
          Statement* ifBody = nullptr;
          Statement* elseBody = nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(506);
    match(GPULangParser::T__10);
     location = SetupFile(); 
    setState(508);
    match(GPULangParser::LP);
    setState(509);
    antlrcpp::downCast<IfStatementContext *>(_localctx)->condition = expression();
     condition = antlrcpp::downCast<IfStatementContext *>(_localctx)->condition->tree; 
    setState(511);
    match(GPULangParser::RP);
    setState(512);
    antlrcpp::downCast<IfStatementContext *>(_localctx)->ifBody = statement();
     ifBody = antlrcpp::downCast<IfStatementContext *>(_localctx)->ifBody->tree; 
    setState(518);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      setState(514);
      match(GPULangParser::T__11);
      setState(515);
      antlrcpp::downCast<IfStatementContext *>(_localctx)->elseBody = statement();
       elseBody = antlrcpp::downCast<IfStatementContext *>(_localctx)->elseBody->tree; 
      break;
    }

    default:
      break;
    }

            antlrcpp::downCast<IfStatementContext *>(_localctx)->tree =  Alloc<IfStatement>(condition, ifBody, elseBody);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementContext ------------------------------------------------------------------

GPULangParser::ForStatementContext::ForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ForStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::ForStatementContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::ForStatementContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

tree::TerminalNode* GPULangParser::ForStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::StatementContext* GPULangParser::ForStatementContext::statement() {
  return getRuleContext<GPULangParser::StatementContext>(0);
}

GPULangParser::VariablesContext* GPULangParser::ForStatementContext::variables() {
  return getRuleContext<GPULangParser::VariablesContext>(0);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::ForStatementContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::ForStatementContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::ForStatementContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::ForStatementContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::ForStatementContext::getRuleIndex() const {
  return GPULangParser::RuleForStatement;
}

void GPULangParser::ForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatement(this);
}

void GPULangParser::ForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatement(this);
}

GPULangParser::ForStatementContext* GPULangParser::forStatement() {
  ForStatementContext *_localctx = _tracker.createInstance<ForStatementContext>(_ctx, getState());
  enterRule(_localctx, 44, GPULangParser::RuleForStatement);

          antlrcpp::downCast<ForStatementContext *>(_localctx)->tree =  nullptr;
          std::vector<Variable*> declarations;
          Expression* conditionExpression = nullptr;
          Expression* loopExpression = nullptr;
          Statement* contents = nullptr;
          std::vector<Attribute> attributes;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(522);
    match(GPULangParser::T__12);
     location = SetupFile(); 
    setState(524);
    match(GPULangParser::LP);
    setState(528);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::SOBAKA

    || _la == GPULangParser::IDENTIFIER) {
      setState(525);
      antlrcpp::downCast<ForStatementContext *>(_localctx)->variablesContext = variables();
       declarations = antlrcpp::downCast<ForStatementContext *>(_localctx)->variablesContext->list; 
    }
    setState(530);
    match(GPULangParser::SC);
    setState(534);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866135989813248006) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 14955) != 0)) {
      setState(531);
      antlrcpp::downCast<ForStatementContext *>(_localctx)->condition = expression();
       conditionExpression = antlrcpp::downCast<ForStatementContext *>(_localctx)->condition->tree; 
    }
    setState(536);
    match(GPULangParser::SC);
    setState(540);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866135989813248006) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 14955) != 0)) {
      setState(537);
      antlrcpp::downCast<ForStatementContext *>(_localctx)->loop = expression();
       loopExpression = antlrcpp::downCast<ForStatementContext *>(_localctx)->loop->tree; 
    }
    setState(542);
    match(GPULangParser::RP);
    setState(548);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(543);
        antlrcpp::downCast<ForStatementContext *>(_localctx)->attributeContext = attribute();
         attributes.push_back(std::move(antlrcpp::downCast<ForStatementContext *>(_localctx)->attributeContext->attr));  
      }
      setState(550);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx);
    }
    setState(551);
    antlrcpp::downCast<ForStatementContext *>(_localctx)->content = statement();
     contents = antlrcpp::downCast<ForStatementContext *>(_localctx)->content->tree; 

            antlrcpp::downCast<ForStatementContext *>(_localctx)->tree =  Alloc<ForStatement>(declarations, conditionExpression, loopExpression, contents);
            _localctx->tree->location = location;
            _localctx->tree->attributes = std::move(attributes);
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForRangeStatementContext ------------------------------------------------------------------

GPULangParser::ForRangeStatementContext::ForRangeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::ForRangeStatementContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

GPULangParser::StatementContext* GPULangParser::ForRangeStatementContext::statement() {
  return getRuleContext<GPULangParser::StatementContext>(0);
}


size_t GPULangParser::ForRangeStatementContext::getRuleIndex() const {
  return GPULangParser::RuleForRangeStatement;
}

void GPULangParser::ForRangeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForRangeStatement(this);
}

void GPULangParser::ForRangeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForRangeStatement(this);
}

GPULangParser::ForRangeStatementContext* GPULangParser::forRangeStatement() {
  ForRangeStatementContext *_localctx = _tracker.createInstance<ForRangeStatementContext>(_ctx, getState());
  enterRule(_localctx, 46, GPULangParser::RuleForRangeStatement);

          antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->tree =  nullptr;
          Statement* contents = nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(555);
    match(GPULangParser::T__12);
     location = SetupFile(); 
    setState(557);
    match(GPULangParser::LP);
    setState(558);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->iterator = match(GPULangParser::IDENTIFIER);
    setState(559);
    match(GPULangParser::COL);
    setState(560);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->start = match(GPULangParser::IDENTIFIER);
    setState(561);
    match(GPULangParser::T__13);
    setState(562);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->end = match(GPULangParser::IDENTIFIER);
    setState(563);
    match(GPULangParser::RP);
    setState(564);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->content = statement();
     contents = antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->content->tree; 


        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementContext ------------------------------------------------------------------

GPULangParser::WhileStatementContext::WhileStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::WhileStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::WhileStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::WhileStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

GPULangParser::StatementContext* GPULangParser::WhileStatementContext::statement() {
  return getRuleContext<GPULangParser::StatementContext>(0);
}

tree::TerminalNode* GPULangParser::WhileStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::WhileStatementContext::getRuleIndex() const {
  return GPULangParser::RuleWhileStatement;
}

void GPULangParser::WhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatement(this);
}

void GPULangParser::WhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatement(this);
}

GPULangParser::WhileStatementContext* GPULangParser::whileStatement() {
  WhileStatementContext *_localctx = _tracker.createInstance<WhileStatementContext>(_ctx, getState());
  enterRule(_localctx, 48, GPULangParser::RuleWhileStatement);

          antlrcpp::downCast<WhileStatementContext *>(_localctx)->tree =  nullptr;
          Expression* conditionExpression = nullptr;
          Statement* contents = nullptr;
          bool isDoWhile = false;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(590);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__14: {
        enterOuterAlt(_localctx, 1);
        setState(568);
        match(GPULangParser::T__14);
         location = SetupFile(); 
        setState(570);
        match(GPULangParser::LP);
        setState(571);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition = expression();
         conditionExpression = antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition->tree; 
        setState(573);
        match(GPULangParser::RP);
        setState(574);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->content = statement();
         contents = antlrcpp::downCast<WhileStatementContext *>(_localctx)->content->tree; 

                antlrcpp::downCast<WhileStatementContext *>(_localctx)->tree =  Alloc<WhileStatement>(conditionExpression, contents, isDoWhile);
                _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__15: {
        enterOuterAlt(_localctx, 2);
        setState(578);
        match(GPULangParser::T__15);
         location = SetupFile(); 
        setState(580);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->content = statement();
         contents = antlrcpp::downCast<WhileStatementContext *>(_localctx)->content->tree; isDoWhile = true; 
        setState(582);
        match(GPULangParser::T__14);
        setState(583);
        match(GPULangParser::LP);
        setState(584);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition = expression();
         conditionExpression = antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition->tree; 
        setState(586);
        match(GPULangParser::RP);
        setState(587);
        match(GPULangParser::SC);

                antlrcpp::downCast<WhileStatementContext *>(_localctx)->tree =  Alloc<WhileStatement>(conditionExpression, contents, isDoWhile);
                _localctx->tree->location = location;
            
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScopeStatementContext ------------------------------------------------------------------

GPULangParser::ScopeStatementContext::ScopeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ScopeStatementContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::ScopeStatementContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<GPULangParser::VariablesContext *> GPULangParser::ScopeStatementContext::variables() {
  return getRuleContexts<GPULangParser::VariablesContext>();
}

GPULangParser::VariablesContext* GPULangParser::ScopeStatementContext::variables(size_t i) {
  return getRuleContext<GPULangParser::VariablesContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::ScopeStatementContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::ScopeStatementContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::StatementContext *> GPULangParser::ScopeStatementContext::statement() {
  return getRuleContexts<GPULangParser::StatementContext>();
}

GPULangParser::StatementContext* GPULangParser::ScopeStatementContext::statement(size_t i) {
  return getRuleContext<GPULangParser::StatementContext>(i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::ScopeStatementContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::ScopeStatementContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}


size_t GPULangParser::ScopeStatementContext::getRuleIndex() const {
  return GPULangParser::RuleScopeStatement;
}

void GPULangParser::ScopeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScopeStatement(this);
}

void GPULangParser::ScopeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScopeStatement(this);
}

GPULangParser::ScopeStatementContext* GPULangParser::scopeStatement() {
  ScopeStatementContext *_localctx = _tracker.createInstance<ScopeStatementContext>(_ctx, getState());
  enterRule(_localctx, 50, GPULangParser::RuleScopeStatement);

          antlrcpp::downCast<ScopeStatementContext *>(_localctx)->tree =  nullptr;
          std::vector<Symbol*> contents;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(592);
    match(GPULangParser::LB);
     location = SetupFile(); 
    setState(604);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866144785948190734) != 0) || ((((_la - 72) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 72)) & 29911) != 0)) {
      setState(602);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
      case 1: {
        setState(594);
        antlrcpp::downCast<ScopeStatementContext *>(_localctx)->variablesContext = variables();
        setState(595);
        match(GPULangParser::SC);
         for(Variable* var : antlrcpp::downCast<ScopeStatementContext *>(_localctx)->variablesContext->list) { contents.push_back(var); } 
        break;
      }

      case 2: {
        setState(598);
        antlrcpp::downCast<ScopeStatementContext *>(_localctx)->statementContext = statement();
         contents.push_back(antlrcpp::downCast<ScopeStatementContext *>(_localctx)->statementContext->tree); 
        break;
      }

      case 3: {
        setState(601);
        linePreprocessorEntry();
        break;
      }

      default:
        break;
      }
      setState(606);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(607);
    match(GPULangParser::RB);

            antlrcpp::downCast<ScopeStatementContext *>(_localctx)->tree =  Alloc<ScopeStatement>(contents);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TerminateStatementContext ------------------------------------------------------------------

GPULangParser::TerminateStatementContext::TerminateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::TerminateStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}

GPULangParser::ExpressionContext* GPULangParser::TerminateStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}


size_t GPULangParser::TerminateStatementContext::getRuleIndex() const {
  return GPULangParser::RuleTerminateStatement;
}

void GPULangParser::TerminateStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerminateStatement(this);
}

void GPULangParser::TerminateStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerminateStatement(this);
}

GPULangParser::TerminateStatementContext* GPULangParser::terminateStatement() {
  TerminateStatementContext *_localctx = _tracker.createInstance<TerminateStatementContext>(_ctx, getState());
  enterRule(_localctx, 52, GPULangParser::RuleTerminateStatement);

          antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  nullptr;
          Expression* returnValue = nullptr;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(631);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__16: {
        enterOuterAlt(_localctx, 1);
        setState(610);
        match(GPULangParser::T__16);
         location = SetupFile(); 
        setState(615);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 866135989813248006) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 73)) & 14955) != 0)) {
          setState(612);
          antlrcpp::downCast<TerminateStatementContext *>(_localctx)->value = expression();
           returnValue = antlrcpp::downCast<TerminateStatementContext *>(_localctx)->value->tree; 
        }
        setState(617);
        match(GPULangParser::SC);

                antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::Return);
                _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__17: {
        enterOuterAlt(_localctx, 2);
        setState(619);
        match(GPULangParser::T__17);
         location = SetupFile(); 
        setState(621);
        match(GPULangParser::SC);

              antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::Discard);
              _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__18: {
        enterOuterAlt(_localctx, 3);
        setState(623);
        match(GPULangParser::T__18);
         location = SetupFile(); 
        setState(625);
        match(GPULangParser::SC);

              antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::RayIgnoreIntersection);
              _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__19: {
        enterOuterAlt(_localctx, 4);
        setState(627);
        match(GPULangParser::T__19);
         location = SetupFile(); 
        setState(629);
        match(GPULangParser::SC);

              antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::RayTerminate);
              _localctx->tree->location = location;
            
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContinueStatementContext ------------------------------------------------------------------

GPULangParser::ContinueStatementContext::ContinueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ContinueStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::ContinueStatementContext::getRuleIndex() const {
  return GPULangParser::RuleContinueStatement;
}

void GPULangParser::ContinueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinueStatement(this);
}

void GPULangParser::ContinueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinueStatement(this);
}

GPULangParser::ContinueStatementContext* GPULangParser::continueStatement() {
  ContinueStatementContext *_localctx = _tracker.createInstance<ContinueStatementContext>(_ctx, getState());
  enterRule(_localctx, 54, GPULangParser::RuleContinueStatement);

          antlrcpp::downCast<ContinueStatementContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(633);
    match(GPULangParser::T__20);
     location = SetupFile(); 
    setState(635);
    match(GPULangParser::SC);

            antlrcpp::downCast<ContinueStatementContext *>(_localctx)->tree =  Alloc<ContinueStatement>();
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStatementContext ------------------------------------------------------------------

GPULangParser::SwitchStatementContext::SwitchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::SwitchStatementContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::SwitchStatementContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::SwitchStatementContext::COL() {
  return getTokens(GPULangParser::COL);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::COL(size_t i) {
  return getToken(GPULangParser::COL, i);
}

std::vector<GPULangParser::StatementContext *> GPULangParser::SwitchStatementContext::statement() {
  return getRuleContexts<GPULangParser::StatementContext>();
}

GPULangParser::StatementContext* GPULangParser::SwitchStatementContext::statement(size_t i) {
  return getRuleContext<GPULangParser::StatementContext>(i);
}


size_t GPULangParser::SwitchStatementContext::getRuleIndex() const {
  return GPULangParser::RuleSwitchStatement;
}

void GPULangParser::SwitchStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchStatement(this);
}

void GPULangParser::SwitchStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchStatement(this);
}

GPULangParser::SwitchStatementContext* GPULangParser::switchStatement() {
  SwitchStatementContext *_localctx = _tracker.createInstance<SwitchStatementContext>(_ctx, getState());
  enterRule(_localctx, 56, GPULangParser::RuleSwitchStatement);

          antlrcpp::downCast<SwitchStatementContext *>(_localctx)->tree =  nullptr;
          Expression* switchExpression;
          std::vector<Expression*> caseExpressions;
          std::vector<Statement*> caseStatements;
          Symbol::Location location;
          Statement* defaultStatement = nullptr;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(638);
    match(GPULangParser::T__21);
     location = SetupFile(); 
    setState(640);
    match(GPULangParser::LP);
    setState(641);
    antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext = expression();
    setState(642);
    match(GPULangParser::RP);
     switchExpression = antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext->tree; 
    setState(644);
    match(GPULangParser::LB);
    setState(656);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__22) {
      setState(645);
      match(GPULangParser::T__22);
      setState(646);
      antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext = expression();
      setState(647);
      match(GPULangParser::COL);
       caseExpressions.push_back(antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext->tree); caseStatements.push_back(nullptr); 
      setState(652);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 866144785948190726) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 73)) & 14955) != 0)) {
        setState(649);
        antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext = statement();
         
                            caseStatements.back() = antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext->tree;
                        
      }
      setState(658);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(666);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__23) {
      setState(659);
      match(GPULangParser::T__23);
      setState(660);
      match(GPULangParser::COL);
      setState(664);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 866144785948190726) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 73)) & 14955) != 0)) {
        setState(661);
        antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext = statement();

                            defaultStatement = antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext->tree;
                        
      }
    }
    setState(668);
    match(GPULangParser::RB);

            antlrcpp::downCast<SwitchStatementContext *>(_localctx)->tree =  Alloc<SwitchStatement>(switchExpression, caseExpressions, caseStatements, defaultStatement);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BreakStatementContext ------------------------------------------------------------------

GPULangParser::BreakStatementContext::BreakStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::BreakStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::BreakStatementContext::getRuleIndex() const {
  return GPULangParser::RuleBreakStatement;
}

void GPULangParser::BreakStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreakStatement(this);
}

void GPULangParser::BreakStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreakStatement(this);
}

GPULangParser::BreakStatementContext* GPULangParser::breakStatement() {
  BreakStatementContext *_localctx = _tracker.createInstance<BreakStatementContext>(_ctx, getState());
  enterRule(_localctx, 58, GPULangParser::RuleBreakStatement);

          antlrcpp::downCast<BreakStatementContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(671);
    match(GPULangParser::T__24);
     location = SetupFile(); 
    setState(673);
    match(GPULangParser::SC);

            antlrcpp::downCast<BreakStatementContext *>(_localctx)->tree =  Alloc<BreakStatement>();
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

GPULangParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::CommaExpressionContext* GPULangParser::ExpressionContext::commaExpression() {
  return getRuleContext<GPULangParser::CommaExpressionContext>(0);
}


size_t GPULangParser::ExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleExpression;
}

void GPULangParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void GPULangParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}

GPULangParser::ExpressionContext* GPULangParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 60, GPULangParser::RuleExpression);

          antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(676);
    antlrcpp::downCast<ExpressionContext *>(_localctx)->commaExpressionContext = commaExpression();
     antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->commaExpressionContext->tree; _localctx->tree->location = SetupFile(); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommaExpressionContext ------------------------------------------------------------------

GPULangParser::CommaExpressionContext::CommaExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::AssignmentExpressionContext *> GPULangParser::CommaExpressionContext::assignmentExpression() {
  return getRuleContexts<GPULangParser::AssignmentExpressionContext>();
}

GPULangParser::AssignmentExpressionContext* GPULangParser::CommaExpressionContext::assignmentExpression(size_t i) {
  return getRuleContext<GPULangParser::AssignmentExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::CommaExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::CommaExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::CommaExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleCommaExpression;
}

void GPULangParser::CommaExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommaExpression(this);
}

void GPULangParser::CommaExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommaExpression(this);
}

GPULangParser::CommaExpressionContext* GPULangParser::commaExpression() {
  CommaExpressionContext *_localctx = _tracker.createInstance<CommaExpressionContext>(_ctx, getState());
  enterRule(_localctx, 62, GPULangParser::RuleCommaExpression);

          antlrcpp::downCast<CommaExpressionContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(679);
    antlrcpp::downCast<CommaExpressionContext *>(_localctx)->e1 = assignmentExpression();
     antlrcpp::downCast<CommaExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<CommaExpressionContext *>(_localctx)->e1->tree; 
    setState(688);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(681);
        match(GPULangParser::CO);
         location = SetupFile(); 
        setState(683);
        antlrcpp::downCast<CommaExpressionContext *>(_localctx)->e2 = assignmentExpression();

                    CommaExpression* expr = Alloc<CommaExpression>(_localctx->tree, antlrcpp::downCast<CommaExpressionContext *>(_localctx)->e2->tree);
                    expr->location = location;
                    antlrcpp::downCast<CommaExpressionContext *>(_localctx)->tree =  expr;
                 
      }
      setState(690);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentExpressionContext ------------------------------------------------------------------

GPULangParser::AssignmentExpressionContext::AssignmentExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::LogicalOrExpressionContext *> GPULangParser::AssignmentExpressionContext::logicalOrExpression() {
  return getRuleContexts<GPULangParser::LogicalOrExpressionContext>();
}

GPULangParser::LogicalOrExpressionContext* GPULangParser::AssignmentExpressionContext::logicalOrExpression(size_t i) {
  return getRuleContext<GPULangParser::LogicalOrExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::AssignmentExpressionContext::QU() {
  return getTokens(GPULangParser::QU);
}

tree::TerminalNode* GPULangParser::AssignmentExpressionContext::QU(size_t i) {
  return getToken(GPULangParser::QU, i);
}

std::vector<tree::TerminalNode *> GPULangParser::AssignmentExpressionContext::COL() {
  return getTokens(GPULangParser::COL);
}

tree::TerminalNode* GPULangParser::AssignmentExpressionContext::COL(size_t i) {
  return getToken(GPULangParser::COL, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::AssignmentExpressionContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::AssignmentExpressionContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::AssignmentExpressionContext::ANDSET() {
  return getTokens(GPULangParser::ANDSET);
}

tree::TerminalNode* GPULangParser::AssignmentExpressionContext::ANDSET(size_t i) {
  return getToken(GPULangParser::ANDSET, i);
}

std::vector<tree::TerminalNode *> GPULangParser::AssignmentExpressionContext::XORSET() {
  return getTokens(GPULangParser::XORSET);
}

tree::TerminalNode* GPULangParser::AssignmentExpressionContext::XORSET(size_t i) {
  return getToken(GPULangParser::XORSET, i);
}

std::vector<tree::TerminalNode *> GPULangParser::AssignmentExpressionContext::ORSET() {
  return getTokens(GPULangParser::ORSET);
}

tree::TerminalNode* GPULangParser::AssignmentExpressionContext::ORSET(size_t i) {
  return getToken(GPULangParser::ORSET, i);
}

std::vector<tree::TerminalNode *> GPULangParser::AssignmentExpressionContext::EQ() {
  return getTokens(GPULangParser::EQ);
}

tree::TerminalNode* GPULangParser::AssignmentExpressionContext::EQ(size_t i) {
  return getToken(GPULangParser::EQ, i);
}


size_t GPULangParser::AssignmentExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleAssignmentExpression;
}

void GPULangParser::AssignmentExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentExpression(this);
}

void GPULangParser::AssignmentExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentExpression(this);
}

GPULangParser::AssignmentExpressionContext* GPULangParser::assignmentExpression() {
  AssignmentExpressionContext *_localctx = _tracker.createInstance<AssignmentExpressionContext>(_ctx, getState());
  enterRule(_localctx, 64, GPULangParser::RuleAssignmentExpression);

          antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(691);
    antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->e1 = logicalOrExpression();
     antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->e1->tree; 
    setState(707);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(705);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case GPULangParser::T__25:
          case GPULangParser::T__26:
          case GPULangParser::T__27:
          case GPULangParser::T__28:
          case GPULangParser::T__29:
          case GPULangParser::T__30:
          case GPULangParser::T__31:
          case GPULangParser::EQ:
          case GPULangParser::ANDSET:
          case GPULangParser::ORSET:
          case GPULangParser::XORSET: {
            setState(693);
            antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->op = _input->LT(1);
            _la = _input->LA(1);
            if (!((((_la & ~ 0x3fULL) == 0) &&
              ((1ULL << _la) & 189714142825807872) != 0))) {
              antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
             location = SetupFile(); 
            setState(695);
            antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->e2 = logicalOrExpression();
             
                        BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->e2->tree);
                        expr->location = location;
                        antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->tree =  expr;
                    
            break;
          }

          case GPULangParser::QU: {
            setState(698);
            match(GPULangParser::QU);
             location = SetupFile(); 
            setState(700);
            antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->ifBody = expression();
            setState(701);
            match(GPULangParser::COL);
            setState(702);
            antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->elseBody = expression();
             
                        TernaryExpression* expr = Alloc<TernaryExpression>(_localctx->tree, antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->ifBody->tree, antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->elseBody->tree);
                        expr->location = location;
                        antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->tree =  expr;
                    
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(709);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalOrExpressionContext ------------------------------------------------------------------

GPULangParser::LogicalOrExpressionContext::LogicalOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::LogicalAndExpressionContext *> GPULangParser::LogicalOrExpressionContext::logicalAndExpression() {
  return getRuleContexts<GPULangParser::LogicalAndExpressionContext>();
}

GPULangParser::LogicalAndExpressionContext* GPULangParser::LogicalOrExpressionContext::logicalAndExpression(size_t i) {
  return getRuleContext<GPULangParser::LogicalAndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::LogicalOrExpressionContext::LOGICOR() {
  return getTokens(GPULangParser::LOGICOR);
}

tree::TerminalNode* GPULangParser::LogicalOrExpressionContext::LOGICOR(size_t i) {
  return getToken(GPULangParser::LOGICOR, i);
}


size_t GPULangParser::LogicalOrExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleLogicalOrExpression;
}

void GPULangParser::LogicalOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalOrExpression(this);
}

void GPULangParser::LogicalOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalOrExpression(this);
}

GPULangParser::LogicalOrExpressionContext* GPULangParser::logicalOrExpression() {
  LogicalOrExpressionContext *_localctx = _tracker.createInstance<LogicalOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 66, GPULangParser::RuleLogicalOrExpression);

          antlrcpp::downCast<LogicalOrExpressionContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(710);
    antlrcpp::downCast<LogicalOrExpressionContext *>(_localctx)->e1 = logicalAndExpression();
     antlrcpp::downCast<LogicalOrExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<LogicalOrExpressionContext *>(_localctx)->e1->tree; 
    setState(719);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::LOGICOR) {
      setState(712);
      match(GPULangParser::LOGICOR);
       location = SetupFile(); 
      setState(714);
      antlrcpp::downCast<LogicalOrExpressionContext *>(_localctx)->e2 = logicalAndExpression();

                  BinaryExpression* expr = Alloc<BinaryExpression>('||', _localctx->tree, antlrcpp::downCast<LogicalOrExpressionContext *>(_localctx)->e2->tree);
                  expr->location = location;
                  antlrcpp::downCast<LogicalOrExpressionContext *>(_localctx)->tree =  expr;
              
      setState(721);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalAndExpressionContext ------------------------------------------------------------------

GPULangParser::LogicalAndExpressionContext::LogicalAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::OrExpressionContext *> GPULangParser::LogicalAndExpressionContext::orExpression() {
  return getRuleContexts<GPULangParser::OrExpressionContext>();
}

GPULangParser::OrExpressionContext* GPULangParser::LogicalAndExpressionContext::orExpression(size_t i) {
  return getRuleContext<GPULangParser::OrExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::LogicalAndExpressionContext::LOGICAND() {
  return getTokens(GPULangParser::LOGICAND);
}

tree::TerminalNode* GPULangParser::LogicalAndExpressionContext::LOGICAND(size_t i) {
  return getToken(GPULangParser::LOGICAND, i);
}


size_t GPULangParser::LogicalAndExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleLogicalAndExpression;
}

void GPULangParser::LogicalAndExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalAndExpression(this);
}

void GPULangParser::LogicalAndExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalAndExpression(this);
}

GPULangParser::LogicalAndExpressionContext* GPULangParser::logicalAndExpression() {
  LogicalAndExpressionContext *_localctx = _tracker.createInstance<LogicalAndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 68, GPULangParser::RuleLogicalAndExpression);

          antlrcpp::downCast<LogicalAndExpressionContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;

      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(722);
    antlrcpp::downCast<LogicalAndExpressionContext *>(_localctx)->e1 = orExpression();
     antlrcpp::downCast<LogicalAndExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<LogicalAndExpressionContext *>(_localctx)->e1->tree; 
    setState(731);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::LOGICAND) {
      setState(724);
      match(GPULangParser::LOGICAND);
       location = SetupFile(); 
      setState(726);
      antlrcpp::downCast<LogicalAndExpressionContext *>(_localctx)->e2 = orExpression();

                  BinaryExpression* expr = Alloc<BinaryExpression>('&&', _localctx->tree, antlrcpp::downCast<LogicalAndExpressionContext *>(_localctx)->e2->tree);
                  expr->location = location;
                  antlrcpp::downCast<LogicalAndExpressionContext *>(_localctx)->tree =  expr;
              
      setState(733);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrExpressionContext ------------------------------------------------------------------

GPULangParser::OrExpressionContext::OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::XorExpressionContext *> GPULangParser::OrExpressionContext::xorExpression() {
  return getRuleContexts<GPULangParser::XorExpressionContext>();
}

GPULangParser::XorExpressionContext* GPULangParser::OrExpressionContext::xorExpression(size_t i) {
  return getRuleContext<GPULangParser::XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::OrExpressionContext::OR() {
  return getTokens(GPULangParser::OR);
}

tree::TerminalNode* GPULangParser::OrExpressionContext::OR(size_t i) {
  return getToken(GPULangParser::OR, i);
}


size_t GPULangParser::OrExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleOrExpression;
}

void GPULangParser::OrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrExpression(this);
}

void GPULangParser::OrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrExpression(this);
}

GPULangParser::OrExpressionContext* GPULangParser::orExpression() {
  OrExpressionContext *_localctx = _tracker.createInstance<OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 70, GPULangParser::RuleOrExpression);

          antlrcpp::downCast<OrExpressionContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;

      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(734);
    antlrcpp::downCast<OrExpressionContext *>(_localctx)->e1 = xorExpression();
     antlrcpp::downCast<OrExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<OrExpressionContext *>(_localctx)->e1->tree; 
    setState(743);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::OR) {
      setState(736);
      match(GPULangParser::OR);
       location = SetupFile(); 
      setState(738);
      antlrcpp::downCast<OrExpressionContext *>(_localctx)->e2 = xorExpression();

                  BinaryExpression* expr = Alloc<BinaryExpression>('|', _localctx->tree, antlrcpp::downCast<OrExpressionContext *>(_localctx)->e2->tree);
                  expr->location = location;
                  antlrcpp::downCast<OrExpressionContext *>(_localctx)->tree =  expr;
              
      setState(745);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XorExpressionContext ------------------------------------------------------------------

GPULangParser::XorExpressionContext::XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::AndExpressionContext *> GPULangParser::XorExpressionContext::andExpression() {
  return getRuleContexts<GPULangParser::AndExpressionContext>();
}

GPULangParser::AndExpressionContext* GPULangParser::XorExpressionContext::andExpression(size_t i) {
  return getRuleContext<GPULangParser::AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::XorExpressionContext::XOR() {
  return getTokens(GPULangParser::XOR);
}

tree::TerminalNode* GPULangParser::XorExpressionContext::XOR(size_t i) {
  return getToken(GPULangParser::XOR, i);
}


size_t GPULangParser::XorExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleXorExpression;
}

void GPULangParser::XorExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXorExpression(this);
}

void GPULangParser::XorExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXorExpression(this);
}

GPULangParser::XorExpressionContext* GPULangParser::xorExpression() {
  XorExpressionContext *_localctx = _tracker.createInstance<XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 72, GPULangParser::RuleXorExpression);

          antlrcpp::downCast<XorExpressionContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(746);
    antlrcpp::downCast<XorExpressionContext *>(_localctx)->e1 = andExpression();
     antlrcpp::downCast<XorExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<XorExpressionContext *>(_localctx)->e1->tree; 
    setState(755);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::XOR) {
      setState(748);
      match(GPULangParser::XOR);
       location = SetupFile(); 
      setState(750);
      antlrcpp::downCast<XorExpressionContext *>(_localctx)->e2 = andExpression();

                  BinaryExpression* expr = Alloc<BinaryExpression>('^', _localctx->tree, antlrcpp::downCast<XorExpressionContext *>(_localctx)->e2->tree);
                  expr->location = location;
                  antlrcpp::downCast<XorExpressionContext *>(_localctx)->tree =  expr;
              
      setState(757);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AndExpressionContext ------------------------------------------------------------------

GPULangParser::AndExpressionContext::AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::EquivalencyExpressionContext *> GPULangParser::AndExpressionContext::equivalencyExpression() {
  return getRuleContexts<GPULangParser::EquivalencyExpressionContext>();
}

GPULangParser::EquivalencyExpressionContext* GPULangParser::AndExpressionContext::equivalencyExpression(size_t i) {
  return getRuleContext<GPULangParser::EquivalencyExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::AndExpressionContext::AND() {
  return getTokens(GPULangParser::AND);
}

tree::TerminalNode* GPULangParser::AndExpressionContext::AND(size_t i) {
  return getToken(GPULangParser::AND, i);
}


size_t GPULangParser::AndExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleAndExpression;
}

void GPULangParser::AndExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAndExpression(this);
}

void GPULangParser::AndExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAndExpression(this);
}

GPULangParser::AndExpressionContext* GPULangParser::andExpression() {
  AndExpressionContext *_localctx = _tracker.createInstance<AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 74, GPULangParser::RuleAndExpression);

          antlrcpp::downCast<AndExpressionContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(758);
    antlrcpp::downCast<AndExpressionContext *>(_localctx)->e1 = equivalencyExpression();
     antlrcpp::downCast<AndExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<AndExpressionContext *>(_localctx)->e1->tree;	
    setState(767);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::AND) {
      setState(760);
      match(GPULangParser::AND);
       location = SetupFile(); 
      setState(762);
      antlrcpp::downCast<AndExpressionContext *>(_localctx)->e2 = equivalencyExpression();

                  BinaryExpression* expr = Alloc<BinaryExpression>('&', _localctx->tree, antlrcpp::downCast<AndExpressionContext *>(_localctx)->e2->tree);
                  expr->location = location;
                  antlrcpp::downCast<AndExpressionContext *>(_localctx)->tree =  expr;
              
      setState(769);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EquivalencyExpressionContext ------------------------------------------------------------------

GPULangParser::EquivalencyExpressionContext::EquivalencyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::RelationalExpressionContext *> GPULangParser::EquivalencyExpressionContext::relationalExpression() {
  return getRuleContexts<GPULangParser::RelationalExpressionContext>();
}

GPULangParser::RelationalExpressionContext* GPULangParser::EquivalencyExpressionContext::relationalExpression(size_t i) {
  return getRuleContext<GPULangParser::RelationalExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::EquivalencyExpressionContext::LOGICEQ() {
  return getTokens(GPULangParser::LOGICEQ);
}

tree::TerminalNode* GPULangParser::EquivalencyExpressionContext::LOGICEQ(size_t i) {
  return getToken(GPULangParser::LOGICEQ, i);
}

std::vector<tree::TerminalNode *> GPULangParser::EquivalencyExpressionContext::NOTEQ() {
  return getTokens(GPULangParser::NOTEQ);
}

tree::TerminalNode* GPULangParser::EquivalencyExpressionContext::NOTEQ(size_t i) {
  return getToken(GPULangParser::NOTEQ, i);
}


size_t GPULangParser::EquivalencyExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleEquivalencyExpression;
}

void GPULangParser::EquivalencyExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEquivalencyExpression(this);
}

void GPULangParser::EquivalencyExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEquivalencyExpression(this);
}

GPULangParser::EquivalencyExpressionContext* GPULangParser::equivalencyExpression() {
  EquivalencyExpressionContext *_localctx = _tracker.createInstance<EquivalencyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 76, GPULangParser::RuleEquivalencyExpression);

          antlrcpp::downCast<EquivalencyExpressionContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(770);
    antlrcpp::downCast<EquivalencyExpressionContext *>(_localctx)->e1 = relationalExpression();
     antlrcpp::downCast<EquivalencyExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<EquivalencyExpressionContext *>(_localctx)->e1->tree; 
    setState(779);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::LOGICEQ

    || _la == GPULangParser::NOTEQ) {
      setState(772);
      antlrcpp::downCast<EquivalencyExpressionContext *>(_localctx)->op = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == GPULangParser::LOGICEQ

      || _la == GPULangParser::NOTEQ)) {
        antlrcpp::downCast<EquivalencyExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
       location = SetupFile(); 
      setState(774);
      antlrcpp::downCast<EquivalencyExpressionContext *>(_localctx)->e2 = relationalExpression();

                  BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<EquivalencyExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<EquivalencyExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<EquivalencyExpressionContext *>(_localctx)->e2->tree);
                  expr->location = location;
                  antlrcpp::downCast<EquivalencyExpressionContext *>(_localctx)->tree =  expr;
              
      setState(781);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

GPULangParser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::ShiftExpressionContext *> GPULangParser::RelationalExpressionContext::shiftExpression() {
  return getRuleContexts<GPULangParser::ShiftExpressionContext>();
}

GPULangParser::ShiftExpressionContext* GPULangParser::RelationalExpressionContext::shiftExpression(size_t i) {
  return getRuleContext<GPULangParser::ShiftExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::RelationalExpressionContext::LESS() {
  return getTokens(GPULangParser::LESS);
}

tree::TerminalNode* GPULangParser::RelationalExpressionContext::LESS(size_t i) {
  return getToken(GPULangParser::LESS, i);
}

std::vector<tree::TerminalNode *> GPULangParser::RelationalExpressionContext::GREATER() {
  return getTokens(GPULangParser::GREATER);
}

tree::TerminalNode* GPULangParser::RelationalExpressionContext::GREATER(size_t i) {
  return getToken(GPULangParser::GREATER, i);
}

std::vector<tree::TerminalNode *> GPULangParser::RelationalExpressionContext::LESSEQ() {
  return getTokens(GPULangParser::LESSEQ);
}

tree::TerminalNode* GPULangParser::RelationalExpressionContext::LESSEQ(size_t i) {
  return getToken(GPULangParser::LESSEQ, i);
}

std::vector<tree::TerminalNode *> GPULangParser::RelationalExpressionContext::GREATEREQ() {
  return getTokens(GPULangParser::GREATEREQ);
}

tree::TerminalNode* GPULangParser::RelationalExpressionContext::GREATEREQ(size_t i) {
  return getToken(GPULangParser::GREATEREQ, i);
}


size_t GPULangParser::RelationalExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleRelationalExpression;
}

void GPULangParser::RelationalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpression(this);
}

void GPULangParser::RelationalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpression(this);
}

GPULangParser::RelationalExpressionContext* GPULangParser::relationalExpression() {
  RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 78, GPULangParser::RuleRelationalExpression);

          antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(782);
    antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->e1 = shiftExpression();
     antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->e1->tree; 
    setState(791);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 62) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 62)) & 15) != 0)) {
      setState(784);
      antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->op = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 62) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 62)) & 15) != 0))) {
        antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
       location = SetupFile(); 
      setState(786);
      antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->e2 = shiftExpression();

                  BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->e2->tree);
                  expr->location = location;
                  antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->tree =  expr;
              
      setState(793);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftExpressionContext ------------------------------------------------------------------

GPULangParser::ShiftExpressionContext::ShiftExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::AddSubtractExpressionContext *> GPULangParser::ShiftExpressionContext::addSubtractExpression() {
  return getRuleContexts<GPULangParser::AddSubtractExpressionContext>();
}

GPULangParser::AddSubtractExpressionContext* GPULangParser::ShiftExpressionContext::addSubtractExpression(size_t i) {
  return getRuleContext<GPULangParser::AddSubtractExpressionContext>(i);
}


size_t GPULangParser::ShiftExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleShiftExpression;
}

void GPULangParser::ShiftExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShiftExpression(this);
}

void GPULangParser::ShiftExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShiftExpression(this);
}

GPULangParser::ShiftExpressionContext* GPULangParser::shiftExpression() {
  ShiftExpressionContext *_localctx = _tracker.createInstance<ShiftExpressionContext>(_ctx, getState());
  enterRule(_localctx, 80, GPULangParser::RuleShiftExpression);

          antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(794);
    antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->e1 = addSubtractExpression();
     antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->e1->tree; 
    setState(803);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__32

    || _la == GPULangParser::T__33) {
      setState(796);
      antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->op = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == GPULangParser::T__32

      || _la == GPULangParser::T__33)) {
        antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
       location = SetupFile(); 
      setState(798);
      antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->e2 = addSubtractExpression();

                  BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->e2->tree);
                  expr->location = location;
                  antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->tree =  expr;
              
      setState(805);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddSubtractExpressionContext ------------------------------------------------------------------

GPULangParser::AddSubtractExpressionContext::AddSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::MultiplyDivideExpressionContext *> GPULangParser::AddSubtractExpressionContext::multiplyDivideExpression() {
  return getRuleContexts<GPULangParser::MultiplyDivideExpressionContext>();
}

GPULangParser::MultiplyDivideExpressionContext* GPULangParser::AddSubtractExpressionContext::multiplyDivideExpression(size_t i) {
  return getRuleContext<GPULangParser::MultiplyDivideExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::AddSubtractExpressionContext::ADD_OP() {
  return getTokens(GPULangParser::ADD_OP);
}

tree::TerminalNode* GPULangParser::AddSubtractExpressionContext::ADD_OP(size_t i) {
  return getToken(GPULangParser::ADD_OP, i);
}

std::vector<tree::TerminalNode *> GPULangParser::AddSubtractExpressionContext::SUB_OP() {
  return getTokens(GPULangParser::SUB_OP);
}

tree::TerminalNode* GPULangParser::AddSubtractExpressionContext::SUB_OP(size_t i) {
  return getToken(GPULangParser::SUB_OP, i);
}


size_t GPULangParser::AddSubtractExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleAddSubtractExpression;
}

void GPULangParser::AddSubtractExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAddSubtractExpression(this);
}

void GPULangParser::AddSubtractExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAddSubtractExpression(this);
}

GPULangParser::AddSubtractExpressionContext* GPULangParser::addSubtractExpression() {
  AddSubtractExpressionContext *_localctx = _tracker.createInstance<AddSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 82, GPULangParser::RuleAddSubtractExpression);

          antlrcpp::downCast<AddSubtractExpressionContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(806);
    antlrcpp::downCast<AddSubtractExpressionContext *>(_localctx)->e1 = multiplyDivideExpression();
     antlrcpp::downCast<AddSubtractExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<AddSubtractExpressionContext *>(_localctx)->e1->tree; 
    setState(815);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::ADD_OP

    || _la == GPULangParser::SUB_OP) {
      setState(808);
      antlrcpp::downCast<AddSubtractExpressionContext *>(_localctx)->op = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == GPULangParser::ADD_OP

      || _la == GPULangParser::SUB_OP)) {
        antlrcpp::downCast<AddSubtractExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
       location = SetupFile(); 
      setState(810);
      antlrcpp::downCast<AddSubtractExpressionContext *>(_localctx)->e2 = multiplyDivideExpression();

                  BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<AddSubtractExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<AddSubtractExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<AddSubtractExpressionContext *>(_localctx)->e2->tree);
                  expr->location = location;
                  antlrcpp::downCast<AddSubtractExpressionContext *>(_localctx)->tree =  expr;
              
      setState(817);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplyDivideExpressionContext ------------------------------------------------------------------

GPULangParser::MultiplyDivideExpressionContext::MultiplyDivideExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::PrefixExpressionContext *> GPULangParser::MultiplyDivideExpressionContext::prefixExpression() {
  return getRuleContexts<GPULangParser::PrefixExpressionContext>();
}

GPULangParser::PrefixExpressionContext* GPULangParser::MultiplyDivideExpressionContext::prefixExpression(size_t i) {
  return getRuleContext<GPULangParser::PrefixExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::MultiplyDivideExpressionContext::MUL_OP() {
  return getTokens(GPULangParser::MUL_OP);
}

tree::TerminalNode* GPULangParser::MultiplyDivideExpressionContext::MUL_OP(size_t i) {
  return getToken(GPULangParser::MUL_OP, i);
}

std::vector<tree::TerminalNode *> GPULangParser::MultiplyDivideExpressionContext::DIV_OP() {
  return getTokens(GPULangParser::DIV_OP);
}

tree::TerminalNode* GPULangParser::MultiplyDivideExpressionContext::DIV_OP(size_t i) {
  return getToken(GPULangParser::DIV_OP, i);
}

std::vector<tree::TerminalNode *> GPULangParser::MultiplyDivideExpressionContext::MOD() {
  return getTokens(GPULangParser::MOD);
}

tree::TerminalNode* GPULangParser::MultiplyDivideExpressionContext::MOD(size_t i) {
  return getToken(GPULangParser::MOD, i);
}


size_t GPULangParser::MultiplyDivideExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleMultiplyDivideExpression;
}

void GPULangParser::MultiplyDivideExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplyDivideExpression(this);
}

void GPULangParser::MultiplyDivideExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplyDivideExpression(this);
}

GPULangParser::MultiplyDivideExpressionContext* GPULangParser::multiplyDivideExpression() {
  MultiplyDivideExpressionContext *_localctx = _tracker.createInstance<MultiplyDivideExpressionContext>(_ctx, getState());
  enterRule(_localctx, 84, GPULangParser::RuleMultiplyDivideExpression);

          antlrcpp::downCast<MultiplyDivideExpressionContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(818);
    antlrcpp::downCast<MultiplyDivideExpressionContext *>(_localctx)->e1 = prefixExpression();
     antlrcpp::downCast<MultiplyDivideExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<MultiplyDivideExpressionContext *>(_localctx)->e1->tree; 
    setState(827);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 97) != 0)) {
      setState(820);
      antlrcpp::downCast<MultiplyDivideExpressionContext *>(_localctx)->op = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 70) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 70)) & 97) != 0))) {
        antlrcpp::downCast<MultiplyDivideExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
       location = SetupFile(); 
      setState(822);
      antlrcpp::downCast<MultiplyDivideExpressionContext *>(_localctx)->e2 = prefixExpression();

                  BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<MultiplyDivideExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<MultiplyDivideExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<MultiplyDivideExpressionContext *>(_localctx)->e2->tree);
                  expr->location = location;
                  antlrcpp::downCast<MultiplyDivideExpressionContext *>(_localctx)->tree =  expr;
              
      setState(829);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrefixExpressionContext ------------------------------------------------------------------

GPULangParser::PrefixExpressionContext::PrefixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::SuffixExpressionContext* GPULangParser::PrefixExpressionContext::suffixExpression() {
  return getRuleContext<GPULangParser::SuffixExpressionContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::PrefixExpressionContext::SUB_OP() {
  return getTokens(GPULangParser::SUB_OP);
}

tree::TerminalNode* GPULangParser::PrefixExpressionContext::SUB_OP(size_t i) {
  return getToken(GPULangParser::SUB_OP, i);
}

std::vector<tree::TerminalNode *> GPULangParser::PrefixExpressionContext::ADD_OP() {
  return getTokens(GPULangParser::ADD_OP);
}

tree::TerminalNode* GPULangParser::PrefixExpressionContext::ADD_OP(size_t i) {
  return getToken(GPULangParser::ADD_OP, i);
}

std::vector<tree::TerminalNode *> GPULangParser::PrefixExpressionContext::NOT() {
  return getTokens(GPULangParser::NOT);
}

tree::TerminalNode* GPULangParser::PrefixExpressionContext::NOT(size_t i) {
  return getToken(GPULangParser::NOT, i);
}

std::vector<tree::TerminalNode *> GPULangParser::PrefixExpressionContext::CONJUGATE() {
  return getTokens(GPULangParser::CONJUGATE);
}

tree::TerminalNode* GPULangParser::PrefixExpressionContext::CONJUGATE(size_t i) {
  return getToken(GPULangParser::CONJUGATE, i);
}

std::vector<tree::TerminalNode *> GPULangParser::PrefixExpressionContext::MUL_OP() {
  return getTokens(GPULangParser::MUL_OP);
}

tree::TerminalNode* GPULangParser::PrefixExpressionContext::MUL_OP(size_t i) {
  return getToken(GPULangParser::MUL_OP, i);
}


size_t GPULangParser::PrefixExpressionContext::getRuleIndex() const {
  return GPULangParser::RulePrefixExpression;
}

void GPULangParser::PrefixExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrefixExpression(this);
}

void GPULangParser::PrefixExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrefixExpression(this);
}

GPULangParser::PrefixExpressionContext* GPULangParser::prefixExpression() {
  PrefixExpressionContext *_localctx = _tracker.createInstance<PrefixExpressionContext>(_ctx, getState());
  enterRule(_localctx, 86, GPULangParser::RulePrefixExpression);

          antlrcpp::downCast<PrefixExpressionContext *>(_localctx)->tree =  nullptr;
          std::vector<uint32_t> ops;
          std::vector<Symbol::Location> locations;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(834);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 35) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 35)) & 3023665373187) != 0)) {
      setState(830);
      antlrcpp::downCast<PrefixExpressionContext *>(_localctx)->op = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 35) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 35)) & 3023665373187) != 0))) {
        antlrcpp::downCast<PrefixExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
       ops.push_back(StringToFourCC((antlrcpp::downCast<PrefixExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<PrefixExpressionContext *>(_localctx)->op->getText() : ""))); locations.push_back(SetupFile()); 
      setState(836);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(837);
    antlrcpp::downCast<PrefixExpressionContext *>(_localctx)->e1 = suffixExpression();

            antlrcpp::downCast<PrefixExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<PrefixExpressionContext *>(_localctx)->e1->tree;
            _localctx->tree->location = SetupFile();
            for (size_t i = 0; i < ops.size(); i++)
            {
                antlrcpp::downCast<PrefixExpressionContext *>(_localctx)->tree =  Alloc<UnaryExpression>(ops[i], true, _localctx->tree);
                _localctx->tree->location = locations[i];
            }
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuffixExpressionContext ------------------------------------------------------------------

GPULangParser::SuffixExpressionContext::SuffixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::BinaryexpatomContext* GPULangParser::SuffixExpressionContext::binaryexpatom() {
  return getRuleContext<GPULangParser::BinaryexpatomContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::SuffixExpressionContext::LP() {
  return getTokens(GPULangParser::LP);
}

tree::TerminalNode* GPULangParser::SuffixExpressionContext::LP(size_t i) {
  return getToken(GPULangParser::LP, i);
}

std::vector<tree::TerminalNode *> GPULangParser::SuffixExpressionContext::RP() {
  return getTokens(GPULangParser::RP);
}

tree::TerminalNode* GPULangParser::SuffixExpressionContext::RP(size_t i) {
  return getToken(GPULangParser::RP, i);
}

std::vector<tree::TerminalNode *> GPULangParser::SuffixExpressionContext::DOT() {
  return getTokens(GPULangParser::DOT);
}

tree::TerminalNode* GPULangParser::SuffixExpressionContext::DOT(size_t i) {
  return getToken(GPULangParser::DOT, i);
}

std::vector<tree::TerminalNode *> GPULangParser::SuffixExpressionContext::ARROW() {
  return getTokens(GPULangParser::ARROW);
}

tree::TerminalNode* GPULangParser::SuffixExpressionContext::ARROW(size_t i) {
  return getToken(GPULangParser::ARROW, i);
}

std::vector<tree::TerminalNode *> GPULangParser::SuffixExpressionContext::LL() {
  return getTokens(GPULangParser::LL);
}

tree::TerminalNode* GPULangParser::SuffixExpressionContext::LL(size_t i) {
  return getToken(GPULangParser::LL, i);
}

std::vector<tree::TerminalNode *> GPULangParser::SuffixExpressionContext::RR() {
  return getTokens(GPULangParser::RR);
}

tree::TerminalNode* GPULangParser::SuffixExpressionContext::RR(size_t i) {
  return getToken(GPULangParser::RR, i);
}

std::vector<GPULangParser::SuffixExpressionContext *> GPULangParser::SuffixExpressionContext::suffixExpression() {
  return getRuleContexts<GPULangParser::SuffixExpressionContext>();
}

GPULangParser::SuffixExpressionContext* GPULangParser::SuffixExpressionContext::suffixExpression(size_t i) {
  return getRuleContext<GPULangParser::SuffixExpressionContext>(i);
}

std::vector<GPULangParser::LogicalOrExpressionContext *> GPULangParser::SuffixExpressionContext::logicalOrExpression() {
  return getRuleContexts<GPULangParser::LogicalOrExpressionContext>();
}

GPULangParser::LogicalOrExpressionContext* GPULangParser::SuffixExpressionContext::logicalOrExpression(size_t i) {
  return getRuleContext<GPULangParser::LogicalOrExpressionContext>(i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::SuffixExpressionContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::SuffixExpressionContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::SuffixExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::SuffixExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::SuffixExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleSuffixExpression;
}

void GPULangParser::SuffixExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuffixExpression(this);
}

void GPULangParser::SuffixExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuffixExpression(this);
}

GPULangParser::SuffixExpressionContext* GPULangParser::suffixExpression() {
  SuffixExpressionContext *_localctx = _tracker.createInstance<SuffixExpressionContext>(_ctx, getState());
  enterRule(_localctx, 88, GPULangParser::RuleSuffixExpression);

          antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->tree =  nullptr;

          Symbol::Location location;
          std::vector<Expression*> args;
          Expression* arrayIndexExpr = nullptr;

          std::vector<uint32_t> ops;
          std::vector<Symbol::Location> locations;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(893);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(840);
      antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->e1 = binaryexpatom();

              antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->e1->tree;
          
      setState(880);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(878);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case GPULangParser::LP: {
              setState(842);
              match(GPULangParser::LP);
               location = SetupFile(); 
              setState(855);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if ((((_la & ~ 0x3fULL) == 0) &&
                ((1ULL << _la) & 866135989813248006) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
                ((1ULL << (_la - 73)) & 14955) != 0)) {
                setState(844);
                antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->arg0 = logicalOrExpression();
                 args.push_back(antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->arg0->tree); 
                setState(852);
                _errHandler->sync(this);
                _la = _input->LA(1);
                while (_la == GPULangParser::CO) {
                  setState(846);
                  match(GPULangParser::CO);
                  setState(847);
                  antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->argn = logicalOrExpression();
                   args.push_back(antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->argn->tree); 
                  setState(854);
                  _errHandler->sync(this);
                  _la = _input->LA(1);
                }
              }
              setState(857);
              match(GPULangParser::RP);

                          CallExpression* expr = Alloc<CallExpression>(_localctx->tree, args);
                          expr->location = location;
                          antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->tree =  expr;
                      
              break;
            }

            case GPULangParser::DOT: {
              setState(859);
              match(GPULangParser::DOT);
               location = SetupFile(); 
              setState(861);
              antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->e2 = suffixExpression();

                          AccessExpression* expr = Alloc<AccessExpression>(_localctx->tree, antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->e2->tree, false);
                          expr->location = location;
                          antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->tree =  expr;
                      
              break;
            }

            case GPULangParser::ARROW: {
              setState(864);
              match(GPULangParser::ARROW);
               location = SetupFile(); 
              setState(866);
              antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->e2 = suffixExpression();

                          AccessExpression* expr = Alloc<AccessExpression>(_localctx->tree, antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->e2->tree, true);
                          expr->location = location;
                          antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->tree =  expr;
                      
              break;
            }

            case GPULangParser::LL: {
              setState(869);
              match(GPULangParser::LL);
               location = SetupFile(); 
              setState(874);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if ((((_la & ~ 0x3fULL) == 0) &&
                ((1ULL << _la) & 866135989813248006) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
                ((1ULL << (_la - 73)) & 14955) != 0)) {
                setState(871);
                antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->e3 = expression();
                 arrayIndexExpr = antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->e3->tree; 
              }
              setState(876);
              match(GPULangParser::RR);

                          ArrayIndexExpression* expr = Alloc<ArrayIndexExpression>(_localctx->tree, arrayIndexExpr);
                          expr->location = location;
                          antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->tree =  expr;
                      
              break;
            }

          default:
            throw NoViableAltException(this);
          } 
        }
        setState(882);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(883);
      antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->e1 = binaryexpatom();
      setState(888);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GPULangParser::T__34

      || _la == GPULangParser::T__35) {
        setState(884);
        antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->op = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == GPULangParser::T__34

        || _la == GPULangParser::T__35)) {
          antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         ops.push_back(StringToFourCC((antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->op->getText() : ""))); locations.push_back(SetupFile()); 
        setState(890);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }

              antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->e1->tree;
              _localctx->tree->location = SetupFile();
              for (size_t i = 0; i < ops.size(); i++)
              {
                  antlrcpp::downCast<SuffixExpressionContext *>(_localctx)->tree =  Alloc<UnaryExpression>(ops[i], false, _localctx->tree);
                  _localctx->tree->location = locations[i];
              }
          
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespaceExpressionContext ------------------------------------------------------------------

GPULangParser::NamespaceExpressionContext::NamespaceExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::BinaryexpatomContext *> GPULangParser::NamespaceExpressionContext::binaryexpatom() {
  return getRuleContexts<GPULangParser::BinaryexpatomContext>();
}

GPULangParser::BinaryexpatomContext* GPULangParser::NamespaceExpressionContext::binaryexpatom(size_t i) {
  return getRuleContext<GPULangParser::BinaryexpatomContext>(i);
}


size_t GPULangParser::NamespaceExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleNamespaceExpression;
}

void GPULangParser::NamespaceExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespaceExpression(this);
}

void GPULangParser::NamespaceExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespaceExpression(this);
}

GPULangParser::NamespaceExpressionContext* GPULangParser::namespaceExpression() {
  NamespaceExpressionContext *_localctx = _tracker.createInstance<NamespaceExpressionContext>(_ctx, getState());
  enterRule(_localctx, 90, GPULangParser::RuleNamespaceExpression);

          antlrcpp::downCast<NamespaceExpressionContext *>(_localctx)->tree =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(895);
    antlrcpp::downCast<NamespaceExpressionContext *>(_localctx)->e1 = binaryexpatom();
    setState(896);
    match(GPULangParser::T__36);
    setState(897);
    antlrcpp::downCast<NamespaceExpressionContext *>(_localctx)->e2 = binaryexpatom();


        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BinaryexpatomContext ------------------------------------------------------------------

GPULangParser::BinaryexpatomContext::BinaryexpatomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::InitializerExpressionContext* GPULangParser::BinaryexpatomContext::initializerExpression() {
  return getRuleContext<GPULangParser::InitializerExpressionContext>(0);
}

GPULangParser::ArrayInitializerExpressionContext* GPULangParser::BinaryexpatomContext::arrayInitializerExpression() {
  return getRuleContext<GPULangParser::ArrayInitializerExpressionContext>(0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::BinaryexpatomContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::INTEGERLITERAL() {
  return getToken(GPULangParser::INTEGERLITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::UINTEGERLITERAL() {
  return getToken(GPULangParser::UINTEGERLITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::FLOATLITERAL() {
  return getToken(GPULangParser::FLOATLITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::DOUBLELITERAL() {
  return getToken(GPULangParser::DOUBLELITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::HEX() {
  return getToken(GPULangParser::HEX, 0);
}

GPULangParser::StringContext* GPULangParser::BinaryexpatomContext::string() {
  return getRuleContext<GPULangParser::StringContext>(0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::BooleanContext* GPULangParser::BinaryexpatomContext::boolean() {
  return getRuleContext<GPULangParser::BooleanContext>(0);
}


size_t GPULangParser::BinaryexpatomContext::getRuleIndex() const {
  return GPULangParser::RuleBinaryexpatom;
}

void GPULangParser::BinaryexpatomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinaryexpatom(this);
}

void GPULangParser::BinaryexpatomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinaryexpatom(this);
}

GPULangParser::BinaryexpatomContext* GPULangParser::binaryexpatom() {
  BinaryexpatomContext *_localctx = _tracker.createInstance<BinaryexpatomContext>(_ctx, getState());
  enterRule(_localctx, 92, GPULangParser::RuleBinaryexpatom);

          antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(929);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(900);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->initializerExpressionContext = initializerExpression();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->initializerExpressionContext->tree; 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(903);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->arrayInitializerExpressionContext = arrayInitializerExpression();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->arrayInitializerExpressionContext->tree; 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(906);
      match(GPULangParser::LP);
      setState(907);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->expressionContext = expression();
      setState(908);
      match(GPULangParser::RP);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->expressionContext->tree; 
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(911);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->integerliteralToken = match(GPULangParser::INTEGERLITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<IntExpression>(atoi((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->integerliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->integerliteralToken->getText() : "").c_str())); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(913);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->uintegerliteralToken = match(GPULangParser::UINTEGERLITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<UIntExpression>(strtoul((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->uintegerliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->uintegerliteralToken->getText() : "").c_str(), nullptr, 10)); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(915);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->floatliteralToken = match(GPULangParser::FLOATLITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<FloatExpression>(atof((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->floatliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->floatliteralToken->getText() : "").c_str())); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(917);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->doubleliteralToken = match(GPULangParser::DOUBLELITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<FloatExpression>(atof((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->doubleliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->doubleliteralToken->getText() : "").c_str())); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(919);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->hexToken = match(GPULangParser::HEX);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<UIntExpression>(strtoul((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->hexToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->hexToken->getText() : "").c_str(), nullptr, 16)); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(921);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->stringContext = string();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<StringExpression>(antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->stringContext->val); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(924);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->identifierToken = match(GPULangParser::IDENTIFIER);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<SymbolExpression>((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->identifierToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->identifierToken->getText() : "")); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(926);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->booleanContext = boolean();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<BoolExpression>(antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->booleanContext->val); _localctx->tree->location = SetupFile(); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerExpressionContext ------------------------------------------------------------------

GPULangParser::InitializerExpressionContext::InitializerExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::InitializerExpressionContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::InitializerExpressionContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::InitializerExpressionContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<GPULangParser::LogicalOrExpressionContext *> GPULangParser::InitializerExpressionContext::logicalOrExpression() {
  return getRuleContexts<GPULangParser::LogicalOrExpressionContext>();
}

GPULangParser::LogicalOrExpressionContext* GPULangParser::InitializerExpressionContext::logicalOrExpression(size_t i) {
  return getRuleContext<GPULangParser::LogicalOrExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::InitializerExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::InitializerExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::InitializerExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleInitializerExpression;
}

void GPULangParser::InitializerExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializerExpression(this);
}

void GPULangParser::InitializerExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializerExpression(this);
}

GPULangParser::InitializerExpressionContext* GPULangParser::initializerExpression() {
  InitializerExpressionContext *_localctx = _tracker.createInstance<InitializerExpressionContext>(_ctx, getState());
  enterRule(_localctx, 94, GPULangParser::RuleInitializerExpression);

          antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->tree =  nullptr;
          std::vector<Expression*> exprs;
          std::string type = "";
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(931);
    antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->type = match(GPULangParser::IDENTIFIER);
     type = (antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->type != nullptr ? antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->type->getText() : ""); 
    setState(933);
    match(GPULangParser::LB);
     location = SetupFile(); 
    setState(946);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866135989813248006) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 14955) != 0)) {
      setState(935);
      antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->arg0 = logicalOrExpression();
       exprs.push_back(antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->arg0->tree); 
      setState(943);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GPULangParser::CO) {
        setState(937);
        match(GPULangParser::CO);
        setState(938);
        antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->argN = logicalOrExpression();
         exprs.push_back(antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->argN->tree); 
        setState(945);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(948);
    match(GPULangParser::RB);

            antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->tree =  Alloc<InitializerExpression>(exprs, type);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayInitializerExpressionContext ------------------------------------------------------------------

GPULangParser::ArrayInitializerExpressionContext::ArrayInitializerExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ArrayInitializerExpressionContext::LL() {
  return getToken(GPULangParser::LL, 0);
}

tree::TerminalNode* GPULangParser::ArrayInitializerExpressionContext::RR() {
  return getToken(GPULangParser::RR, 0);
}

std::vector<GPULangParser::LogicalOrExpressionContext *> GPULangParser::ArrayInitializerExpressionContext::logicalOrExpression() {
  return getRuleContexts<GPULangParser::LogicalOrExpressionContext>();
}

GPULangParser::LogicalOrExpressionContext* GPULangParser::ArrayInitializerExpressionContext::logicalOrExpression(size_t i) {
  return getRuleContext<GPULangParser::LogicalOrExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::ArrayInitializerExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::ArrayInitializerExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::ArrayInitializerExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleArrayInitializerExpression;
}

void GPULangParser::ArrayInitializerExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayInitializerExpression(this);
}

void GPULangParser::ArrayInitializerExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayInitializerExpression(this);
}

GPULangParser::ArrayInitializerExpressionContext* GPULangParser::arrayInitializerExpression() {
  ArrayInitializerExpressionContext *_localctx = _tracker.createInstance<ArrayInitializerExpressionContext>(_ctx, getState());
  enterRule(_localctx, 96, GPULangParser::RuleArrayInitializerExpression);

          antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->tree =  nullptr;
          std::vector<Expression*> exprs;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(951);
    match(GPULangParser::LL);
     location = SetupFile(); 
    setState(964);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866135989813248006) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 14955) != 0)) {
      setState(953);
      antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->arg0 = logicalOrExpression();
       exprs.push_back(antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->arg0->tree); 
      setState(961);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GPULangParser::CO) {
        setState(955);
        match(GPULangParser::CO);
        setState(956);
        antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->argN = logicalOrExpression();
         exprs.push_back(antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->argN->tree); 
        setState(963);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(966);
    match(GPULangParser::RR);

            antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->tree =  Alloc<ArrayInitializerExpression>(exprs);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void GPULangParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  gpulangParserInitialize();
#else
  ::antlr4::internal::call_once(gpulangParserOnceFlag, gpulangParserInitialize);
#endif
}
