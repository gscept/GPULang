

// include std container
#include <vector>
#include <typeinfo>
#include <iostream>
#include <string>
#include <stack>
#include <tuple>

#include "gpulangtoken.h"
#include "gpulangcompiler.h"
#include "ast/alias.h"
#include "ast/annotation.h"
#include "ast/effect.h"
#include "ast/enumeration.h"
#include "ast/function.h"
#include "ast/program.h"
#include "ast/renderstate.h"
#include "ast/samplerstate.h"
#include "ast/state.h"
#include "ast/structure.h"
#include "ast/symbol.h"
#include "ast/preprocessor.h"
#include "ast/variable.h"
#include "ast/generate.h"
#include "ast/statements/breakstatement.h"
#include "ast/statements/continuestatement.h"
#include "ast/statements/expressionstatement.h"
#include "ast/statements/forstatement.h"
#include "ast/statements/ifstatement.h"
#include "ast/statements/terminatestatement.h"
#include "ast/statements/scopestatement.h"
#include "ast/statements/statement.h"
#include "ast/statements/switchstatement.h"
#include "ast/statements/whilestatement.h"
#include "ast/expressions/accessexpression.h"
#include "ast/expressions/arrayindexexpression.h"
#include "ast/expressions/binaryexpression.h"
#include "ast/expressions/boolexpression.h"
#include "ast/expressions/boolvecexpression.h"
#include "ast/expressions/callexpression.h"
#include "ast/expressions/commaexpression.h"
#include "ast/expressions/expression.h"
#include "ast/expressions/floatexpression.h"
#include "ast/expressions/floatvecexpression.h"
#include "ast/expressions/initializerexpression.h"
#include "ast/expressions/arrayinitializerexpression.h"
#include "ast/expressions/intexpression.h"
#include "ast/expressions/intvecexpression.h"
#include "ast/expressions/stringexpression.h"
#include "ast/expressions/symbolexpression.h"
#include "ast/expressions/ternaryexpression.h"
#include "ast/expressions/uintexpression.h"
#include "ast/expressions/uintvecexpression.h"
#include "ast/expressions/unaryexpression.h"
#include "ast/expressions/declaredexpression.h"
#include "util.h"
#include "memory.h"

using namespace GPULang;



// Generated from antlr4/grammar/GPULang.g4 by ANTLR 4.13.2


#include "GPULangListener.h"

#include "GPULangParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct GPULangParserStaticData final {
  GPULangParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  GPULangParserStaticData(const GPULangParserStaticData&) = delete;
  GPULangParserStaticData(GPULangParserStaticData&&) = delete;
  GPULangParserStaticData& operator=(const GPULangParserStaticData&) = delete;
  GPULangParserStaticData& operator=(GPULangParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag gpulangParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<GPULangParserStaticData> gpulangParserStaticData = nullptr;

void gpulangParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (gpulangParserStaticData != nullptr) {
    return;
  }
#else
  assert(gpulangParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<GPULangParserStaticData>(
    std::vector<std::string>{
      "string", "path", "boolean", "entry", "effect", "linePreprocessorEntry", 
      "alias", "annotation", "attribute", "typeDeclaration", "generate", 
      "gen_statement", "gen_scope_statement", "gen_if_statement", "variables", 
      "structureDeclaration", "structure", "enumeration", "parameter", "functionDeclaration", 
      "function", "program", "sampler", "state", "statement", "expressionStatement", 
      "ifStatement", "forStatement", "forRangeStatement", "forUniformValueStatement", 
      "whileStatement", "scopeStatement", "terminateStatement", "continueStatement", 
      "switchStatement", "breakStatement", "expressionList", "expression", 
      "binaryexpatom", "initializerExpression", "arrayInitializerExpression", 
      "floatVecLiteralExpression", "doubleVecLiteralExpression", "intVecLiteralExpression", 
      "uintVecLiteralExpression", "booleanVecLiteralExpression"
    },
    std::vector<std::string>{
      "", "'true'", "'false'", "'#line'", "'alias'", "'as'", "'generate'", 
      "'if'", "'else'", "'struct'", "'enum'", "'program'", "'sampler_state'", 
      "'render_state'", "'for'", "'..'", "'for_uniform'", "'while'", "'do'", 
      "'return'", "'discard'", "'ray_ignore'", "'ray_terminate'", "'continue'", 
      "'switch'", "'case'", "'default'", "'break'", "'++'", "'--'", "'<<'", 
      "'>>'", "'+='", "'-='", "'*='", "'/='", "'%='", "'<<='", "'>>='", 
      "'declared'", "';'", "','", "':'", "'('", "')'", "'{'", "'}'", "'['", 
      "']'", "'.'", "'!'", "'='", "'\"'", "'\\u003F'", "'&'", "'&='", "'|'", 
      "'|='", "'^'", "'^='", "'~'", "'''", "'#'", "'\\'", "'<'", "'<='", 
      "'>'", "'>='", "'=='", "'!='", "'&&'", "'||'", "'%'", "'_'", "'@'", 
      "'+'", "'-'", "'/'", "'*'", "'->'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "SC", "CO", "COL", "LP", "RP", "LB", "RB", 
      "LL", "RR", "DOT", "NOT", "EQ", "QO", "QU", "AND", "ANDSET", "OR", 
      "ORSET", "XOR", "XORSET", "CONJUGATE", "Q", "NU", "FORWARDSLASH", 
      "LESS", "LESSEQ", "GREATER", "GREATEREQ", "LOGICEQ", "NOTEQ", "LOGICAND", 
      "LOGICOR", "MOD", "UNDERSC", "SOBAKA", "ADD_OP", "SUB_OP", "DIV_OP", 
      "MUL_OP", "ARROW", "INTEGERLITERAL", "UINTEGERLITERAL", "COMMENT", 
      "ML_COMMENT", "FLOATLITERAL", "DOUBLELITERAL", "HEX", "IDENTIFIER", 
      "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,88,1150,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,1,0,5,0,96,8,0,10,0,12,0,99,
  	9,0,1,0,1,0,1,0,1,0,5,0,105,8,0,10,0,12,0,108,9,0,1,0,3,0,111,8,0,1,1,
  	1,1,1,1,5,1,116,8,1,10,1,12,1,119,9,1,1,1,1,1,1,1,1,1,5,1,125,8,1,10,
  	1,12,1,128,9,1,1,1,3,1,131,8,1,1,2,1,2,1,2,1,2,3,2,137,8,2,1,3,1,3,1,
  	3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
  	1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
  	4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,183,8,4,10,4,12,4,186,9,4,1,5,1,5,1,5,1,
  	5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
  	1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,219,8,8,1,9,1,9,1,9,1,9,1,
  	9,1,9,1,9,1,9,3,9,229,8,9,1,9,1,9,1,9,1,9,5,9,235,8,9,10,9,12,9,238,9,
  	9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,264,8,10,10,10,
  	12,10,267,9,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,278,
  	8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,301,8,12,10,12,12,12,304,
  	9,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	1,13,1,13,1,13,3,13,322,8,13,1,13,1,13,1,14,5,14,327,8,14,10,14,12,14,
  	330,9,14,1,14,1,14,1,14,5,14,335,8,14,10,14,12,14,338,9,14,1,14,1,14,
  	1,14,4,14,343,8,14,11,14,12,14,344,1,14,1,14,1,14,3,14,350,8,14,1,14,
  	1,14,1,14,1,14,5,14,356,8,14,10,14,12,14,359,9,14,1,14,1,14,1,14,1,14,
  	3,14,365,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,375,8,14,10,
  	14,12,14,378,9,14,3,14,380,8,14,1,14,1,14,1,15,5,15,385,8,15,10,15,12,
  	15,388,9,15,1,15,1,15,1,15,5,15,393,8,15,10,15,12,15,396,9,15,1,15,1,
  	15,1,15,5,15,401,8,15,10,15,12,15,404,9,15,1,15,1,15,1,15,1,15,1,16,1,
  	16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,424,
  	8,16,1,16,5,16,427,8,16,10,16,12,16,430,9,16,1,16,1,16,1,16,1,16,1,16,
  	5,16,437,8,16,10,16,12,16,440,9,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
  	1,17,1,17,1,17,3,17,452,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,
  	461,8,17,1,17,1,17,3,17,465,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,
  	17,474,8,17,1,17,1,17,5,17,478,8,17,10,17,12,17,481,9,17,1,17,3,17,484,
  	8,17,1,17,1,17,1,17,1,18,5,18,490,8,18,10,18,12,18,493,9,18,1,18,1,18,
  	1,18,5,18,498,8,18,10,18,12,18,501,9,18,1,18,1,18,1,18,1,18,1,18,1,18,
  	1,18,1,18,1,18,3,18,512,8,18,1,18,1,18,1,19,1,19,1,19,5,19,519,8,19,10,
  	19,12,19,522,9,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,530,8,19,1,19,1,
  	19,1,19,1,19,1,19,5,19,537,8,19,10,19,12,19,540,9,19,3,19,542,8,19,1,
  	19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,5,21,556,8,
  	21,10,21,12,21,559,9,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	5,21,570,8,21,10,21,12,21,573,9,21,1,21,1,21,1,21,1,22,1,22,1,22,5,22,
  	581,8,22,10,22,12,22,584,9,22,1,22,1,22,1,22,5,22,589,8,22,10,22,12,22,
  	592,9,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,604,8,
  	22,10,22,12,22,607,9,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,5,23,622,8,23,10,23,12,23,625,9,23,1,23,1,23,1,23,
  	1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
  	1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
  	3,24,658,8,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,26,3,26,675,8,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
  	1,27,3,27,685,8,27,1,27,1,27,1,27,1,27,3,27,691,8,27,1,27,1,27,1,27,1,
  	27,3,27,697,8,27,1,27,1,27,1,27,1,27,5,27,703,8,27,10,27,12,27,706,9,
  	27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
  	28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,
  	30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
  	30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,756,8,30,1,31,1,31,1,31,1,31,1,
  	31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,772,8,31,10,31,12,
  	31,775,9,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,3,32,786,8,32,
  	1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
  	3,32,802,8,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,
  	1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,823,8,34,5,34,825,8,34,10,
  	34,12,34,828,9,34,1,34,1,34,1,34,1,34,1,34,3,34,835,8,34,3,34,837,8,34,
  	1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,3,36,848,8,36,1,36,1,36,
  	1,36,1,36,1,36,1,36,1,36,5,36,857,8,36,10,36,12,36,860,9,36,1,36,1,36,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,872,8,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,985,8,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,3,37,994,8,37,1,37,1,37,5,37,998,8,37,10,
  	37,12,37,1001,9,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
  	1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
  	1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1039,
  	8,38,1,39,1,39,1,39,1,39,1,39,3,39,1046,8,39,1,39,1,39,1,39,1,40,1,40,
  	1,40,3,40,1054,8,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,
  	1065,8,41,1,41,1,41,1,41,4,41,1070,8,41,11,41,12,41,1071,1,41,1,41,1,
  	41,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1083,8,42,1,42,1,42,1,42,4,42,1088,
  	8,42,11,42,12,42,1089,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,3,
  	43,1101,8,43,1,43,1,43,1,43,4,43,1106,8,43,11,43,12,43,1107,1,43,1,43,
  	1,43,1,44,1,44,1,44,1,44,1,44,1,44,3,44,1119,8,44,1,44,1,44,1,44,4,44,
  	1124,8,44,11,44,12,44,1125,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,
  	45,3,45,1137,8,45,1,45,1,45,1,45,1,45,4,45,1143,8,45,11,45,12,45,1144,
  	1,45,1,45,1,45,1,45,1,184,1,74,46,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
  	28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
  	74,76,78,80,82,84,86,88,90,0,11,1,0,52,52,1,0,61,61,1,0,66,66,5,0,28,
  	29,50,50,60,60,75,76,78,78,2,0,72,72,77,78,1,0,75,76,1,0,30,31,1,0,64,
  	67,1,0,68,69,5,0,32,38,51,51,55,55,57,57,59,59,1,0,28,29,1253,0,110,1,
  	0,0,0,2,130,1,0,0,0,4,136,1,0,0,0,6,138,1,0,0,0,8,184,1,0,0,0,10,187,
  	1,0,0,0,12,193,1,0,0,0,14,200,1,0,0,0,16,218,1,0,0,0,18,220,1,0,0,0,20,
  	242,1,0,0,0,22,277,1,0,0,0,24,279,1,0,0,0,26,309,1,0,0,0,28,328,1,0,0,
  	0,30,386,1,0,0,0,32,409,1,0,0,0,34,444,1,0,0,0,36,491,1,0,0,0,38,520,
  	1,0,0,0,40,547,1,0,0,0,42,557,1,0,0,0,44,582,1,0,0,0,46,611,1,0,0,0,48,
  	657,1,0,0,0,50,659,1,0,0,0,52,662,1,0,0,0,54,678,1,0,0,0,56,711,1,0,0,
  	0,58,724,1,0,0,0,60,755,1,0,0,0,62,757,1,0,0,0,64,801,1,0,0,0,66,803,
  	1,0,0,0,68,808,1,0,0,0,70,841,1,0,0,0,72,847,1,0,0,0,74,871,1,0,0,0,76,
  	1038,1,0,0,0,78,1040,1,0,0,0,80,1050,1,0,0,0,82,1058,1,0,0,0,84,1076,
  	1,0,0,0,86,1094,1,0,0,0,88,1112,1,0,0,0,90,1130,1,0,0,0,92,97,5,52,0,
  	0,93,94,8,0,0,0,94,96,6,0,-1,0,95,93,1,0,0,0,96,99,1,0,0,0,97,95,1,0,
  	0,0,97,98,1,0,0,0,98,100,1,0,0,0,99,97,1,0,0,0,100,111,5,52,0,0,101,106,
  	5,61,0,0,102,103,8,1,0,0,103,105,6,0,-1,0,104,102,1,0,0,0,105,108,1,0,
  	0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,109,1,0,0,0,108,106,1,0,0,0,109,
  	111,5,61,0,0,110,92,1,0,0,0,110,101,1,0,0,0,111,1,1,0,0,0,112,117,5,52,
  	0,0,113,114,8,0,0,0,114,116,6,1,-1,0,115,113,1,0,0,0,116,119,1,0,0,0,
  	117,115,1,0,0,0,117,118,1,0,0,0,118,120,1,0,0,0,119,117,1,0,0,0,120,131,
  	5,52,0,0,121,126,5,64,0,0,122,123,8,2,0,0,123,125,6,1,-1,0,124,122,1,
  	0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,129,1,0,0,0,
  	128,126,1,0,0,0,129,131,5,66,0,0,130,112,1,0,0,0,130,121,1,0,0,0,131,
  	3,1,0,0,0,132,133,5,1,0,0,133,137,6,2,-1,0,134,135,5,2,0,0,135,137,6,
  	2,-1,0,136,132,1,0,0,0,136,134,1,0,0,0,137,5,1,0,0,0,138,139,3,8,4,0,
  	139,140,6,3,-1,0,140,141,5,0,0,1,141,7,1,0,0,0,142,183,3,10,5,0,143,144,
  	3,20,10,0,144,145,5,40,0,0,145,146,6,4,-1,0,146,183,1,0,0,0,147,148,3,
  	12,6,0,148,149,5,40,0,0,149,150,6,4,-1,0,150,183,1,0,0,0,151,152,3,38,
  	19,0,152,153,5,40,0,0,153,154,6,4,-1,0,154,183,1,0,0,0,155,156,3,40,20,
  	0,156,157,6,4,-1,0,157,183,1,0,0,0,158,159,3,28,14,0,159,160,5,40,0,0,
  	160,161,6,4,-1,0,161,183,1,0,0,0,162,163,3,32,16,0,163,164,5,40,0,0,164,
  	165,6,4,-1,0,165,183,1,0,0,0,166,167,3,34,17,0,167,168,5,40,0,0,168,169,
  	6,4,-1,0,169,183,1,0,0,0,170,171,3,46,23,0,171,172,5,40,0,0,172,173,6,
  	4,-1,0,173,183,1,0,0,0,174,175,3,44,22,0,175,176,5,40,0,0,176,177,6,4,
  	-1,0,177,183,1,0,0,0,178,179,3,42,21,0,179,180,5,40,0,0,180,181,6,4,-1,
  	0,181,183,1,0,0,0,182,142,1,0,0,0,182,143,1,0,0,0,182,147,1,0,0,0,182,
  	151,1,0,0,0,182,155,1,0,0,0,182,158,1,0,0,0,182,162,1,0,0,0,182,166,1,
  	0,0,0,182,170,1,0,0,0,182,174,1,0,0,0,182,178,1,0,0,0,183,186,1,0,0,0,
  	184,185,1,0,0,0,184,182,1,0,0,0,185,9,1,0,0,0,186,184,1,0,0,0,187,188,
  	5,3,0,0,188,189,6,5,-1,0,189,190,5,80,0,0,190,191,3,0,0,0,191,192,6,5,
  	-1,0,192,11,1,0,0,0,193,194,5,4,0,0,194,195,5,87,0,0,195,196,5,5,0,0,
  	196,197,5,87,0,0,197,198,6,6,-1,0,198,199,6,6,-1,0,199,13,1,0,0,0,200,
  	201,5,74,0,0,201,202,6,7,-1,0,202,203,5,87,0,0,203,204,6,7,-1,0,204,205,
  	5,43,0,0,205,206,3,74,37,0,206,207,5,44,0,0,207,208,6,7,-1,0,208,15,1,
  	0,0,0,209,210,5,87,0,0,210,211,6,8,-1,0,211,212,5,43,0,0,212,213,3,74,
  	37,0,213,214,5,44,0,0,214,215,6,8,-1,0,215,219,1,0,0,0,216,217,5,87,0,
  	0,217,219,6,8,-1,0,218,209,1,0,0,0,218,216,1,0,0,0,219,17,1,0,0,0,220,
  	236,6,9,-1,0,221,222,5,78,0,0,222,235,6,9,-1,0,223,224,5,47,0,0,224,228,
  	6,9,-1,0,225,226,3,74,37,0,226,227,6,9,-1,0,227,229,1,0,0,0,228,225,1,
  	0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,235,5,48,0,0,231,232,5,87,0,
  	0,232,235,6,9,-1,0,233,235,3,10,5,0,234,221,1,0,0,0,234,223,1,0,0,0,234,
  	231,1,0,0,0,234,233,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,
  	0,0,0,237,239,1,0,0,0,238,236,1,0,0,0,239,240,5,87,0,0,240,241,6,9,-1,
  	0,241,19,1,0,0,0,242,243,5,6,0,0,243,244,6,10,-1,0,244,265,5,64,0,0,245,
  	246,3,28,14,0,246,247,5,40,0,0,247,248,6,10,-1,0,248,264,1,0,0,0,249,
  	250,3,22,11,0,250,251,6,10,-1,0,251,264,1,0,0,0,252,253,3,12,6,0,253,
  	254,5,40,0,0,254,255,6,10,-1,0,255,264,1,0,0,0,256,257,3,38,19,0,257,
  	258,5,40,0,0,258,259,6,10,-1,0,259,264,1,0,0,0,260,261,3,40,20,0,261,
  	262,6,10,-1,0,262,264,1,0,0,0,263,245,1,0,0,0,263,249,1,0,0,0,263,252,
  	1,0,0,0,263,256,1,0,0,0,263,260,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,
  	0,265,266,1,0,0,0,266,268,1,0,0,0,267,265,1,0,0,0,268,269,5,66,0,0,269,
  	270,6,10,-1,0,270,21,1,0,0,0,271,272,3,26,13,0,272,273,6,11,-1,0,273,
  	278,1,0,0,0,274,275,3,24,12,0,275,276,6,11,-1,0,276,278,1,0,0,0,277,271,
  	1,0,0,0,277,274,1,0,0,0,278,23,1,0,0,0,279,280,5,64,0,0,280,302,6,12,
  	-1,0,281,282,3,28,14,0,282,283,5,40,0,0,283,284,6,12,-1,0,284,301,1,0,
  	0,0,285,286,3,22,11,0,286,287,6,12,-1,0,287,301,1,0,0,0,288,289,3,12,
  	6,0,289,290,5,40,0,0,290,291,6,12,-1,0,291,301,1,0,0,0,292,293,3,38,19,
  	0,293,294,5,40,0,0,294,295,6,12,-1,0,295,301,1,0,0,0,296,297,3,40,20,
  	0,297,298,6,12,-1,0,298,301,1,0,0,0,299,301,3,10,5,0,300,281,1,0,0,0,
  	300,285,1,0,0,0,300,288,1,0,0,0,300,292,1,0,0,0,300,296,1,0,0,0,300,299,
  	1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,305,1,0,0,
  	0,304,302,1,0,0,0,305,306,5,66,0,0,306,307,6,12,-1,0,307,308,6,12,-1,
  	0,308,25,1,0,0,0,309,310,5,7,0,0,310,311,6,13,-1,0,311,312,5,43,0,0,312,
  	313,3,74,37,0,313,314,6,13,-1,0,314,315,5,44,0,0,315,316,3,22,11,0,316,
  	321,6,13,-1,0,317,318,5,8,0,0,318,319,3,22,11,0,319,320,6,13,-1,0,320,
  	322,1,0,0,0,321,317,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,6,
  	13,-1,0,324,27,1,0,0,0,325,327,3,10,5,0,326,325,1,0,0,0,327,330,1,0,0,
  	0,328,326,1,0,0,0,328,329,1,0,0,0,329,336,1,0,0,0,330,328,1,0,0,0,331,
  	332,3,14,7,0,332,333,6,14,-1,0,333,335,1,0,0,0,334,331,1,0,0,0,335,338,
  	1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,342,1,0,0,0,338,336,1,0,0,
  	0,339,340,3,16,8,0,340,341,6,14,-1,0,341,343,1,0,0,0,342,339,1,0,0,0,
  	343,344,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,346,1,0,0,0,346,347,
  	5,87,0,0,347,349,6,14,-1,0,348,350,3,10,5,0,349,348,1,0,0,0,349,350,1,
  	0,0,0,350,357,1,0,0,0,351,352,5,41,0,0,352,353,5,87,0,0,353,356,6,14,
  	-1,0,354,356,3,10,5,0,355,351,1,0,0,0,355,354,1,0,0,0,356,359,1,0,0,0,
  	357,355,1,0,0,0,357,358,1,0,0,0,358,364,1,0,0,0,359,357,1,0,0,0,360,361,
  	5,42,0,0,361,362,3,18,9,0,362,363,6,14,-1,0,363,365,1,0,0,0,364,360,1,
  	0,0,0,364,365,1,0,0,0,365,379,1,0,0,0,366,367,5,51,0,0,367,368,3,74,37,
  	0,368,376,6,14,-1,0,369,370,5,41,0,0,370,371,3,74,37,0,371,372,6,14,-1,
  	0,372,375,1,0,0,0,373,375,3,10,5,0,374,369,1,0,0,0,374,373,1,0,0,0,375,
  	378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,380,1,0,0,0,378,376,1,
  	0,0,0,379,366,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,382,6,14,-1,
  	0,382,29,1,0,0,0,383,385,3,10,5,0,384,383,1,0,0,0,385,388,1,0,0,0,386,
  	384,1,0,0,0,386,387,1,0,0,0,387,394,1,0,0,0,388,386,1,0,0,0,389,390,3,
  	14,7,0,390,391,6,15,-1,0,391,393,1,0,0,0,392,389,1,0,0,0,393,396,1,0,
  	0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,402,1,0,0,0,396,394,1,0,0,0,397,
  	398,3,16,8,0,398,399,6,15,-1,0,399,401,1,0,0,0,400,397,1,0,0,0,401,404,
  	1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,405,1,0,0,0,404,402,1,0,0,
  	0,405,406,5,9,0,0,406,407,5,87,0,0,407,408,6,15,-1,0,408,31,1,0,0,0,409,
  	410,3,30,15,0,410,411,6,16,-1,0,411,438,5,45,0,0,412,413,5,87,0,0,413,
  	414,6,16,-1,0,414,415,5,42,0,0,415,428,6,16,-1,0,416,417,5,78,0,0,417,
  	427,6,16,-1,0,418,419,5,47,0,0,419,423,6,16,-1,0,420,421,3,74,37,0,421,
  	422,6,16,-1,0,422,424,1,0,0,0,423,420,1,0,0,0,423,424,1,0,0,0,424,425,
  	1,0,0,0,425,427,5,48,0,0,426,416,1,0,0,0,426,418,1,0,0,0,427,430,1,0,
  	0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,428,1,0,0,0,431,
  	432,5,87,0,0,432,433,6,16,-1,0,433,434,5,40,0,0,434,437,6,16,-1,0,435,
  	437,3,10,5,0,436,412,1,0,0,0,436,435,1,0,0,0,437,440,1,0,0,0,438,436,
  	1,0,0,0,438,439,1,0,0,0,439,441,1,0,0,0,440,438,1,0,0,0,441,442,5,46,
  	0,0,442,443,6,16,-1,0,443,33,1,0,0,0,444,445,5,10,0,0,445,446,5,87,0,
  	0,446,451,6,17,-1,0,447,448,5,42,0,0,448,449,3,18,9,0,449,450,6,17,-1,
  	0,450,452,1,0,0,0,451,447,1,0,0,0,451,452,1,0,0,0,452,453,1,0,0,0,453,
  	483,5,45,0,0,454,455,5,87,0,0,455,460,6,17,-1,0,456,457,5,51,0,0,457,
  	458,3,74,37,0,458,459,6,17,-1,0,459,461,1,0,0,0,460,456,1,0,0,0,460,461,
  	1,0,0,0,461,462,1,0,0,0,462,464,6,17,-1,0,463,465,3,10,5,0,464,463,1,
  	0,0,0,464,465,1,0,0,0,465,479,1,0,0,0,466,467,5,41,0,0,467,468,5,87,0,
  	0,468,473,6,17,-1,0,469,470,5,51,0,0,470,471,3,74,37,0,471,472,6,17,-1,
  	0,472,474,1,0,0,0,473,469,1,0,0,0,473,474,1,0,0,0,474,475,1,0,0,0,475,
  	478,6,17,-1,0,476,478,3,10,5,0,477,466,1,0,0,0,477,476,1,0,0,0,478,481,
  	1,0,0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,484,1,0,0,0,481,479,1,0,0,
  	0,482,484,3,10,5,0,483,454,1,0,0,0,483,482,1,0,0,0,483,484,1,0,0,0,484,
  	485,1,0,0,0,485,486,5,46,0,0,486,487,6,17,-1,0,487,35,1,0,0,0,488,490,
  	3,10,5,0,489,488,1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,
  	0,0,492,499,1,0,0,0,493,491,1,0,0,0,494,495,3,16,8,0,495,496,6,18,-1,
  	0,496,498,1,0,0,0,497,494,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,
  	500,1,0,0,0,500,502,1,0,0,0,501,499,1,0,0,0,502,503,5,87,0,0,503,504,
  	6,18,-1,0,504,505,5,42,0,0,505,506,3,18,9,0,506,511,6,18,-1,0,507,508,
  	5,51,0,0,508,509,3,74,37,0,509,510,6,18,-1,0,510,512,1,0,0,0,511,507,
  	1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,0,513,514,6,18,-1,0,514,37,1,0,
  	0,0,515,516,3,16,8,0,516,517,6,19,-1,0,517,519,1,0,0,0,518,515,1,0,0,
  	0,519,522,1,0,0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,523,1,0,0,0,522,
  	520,1,0,0,0,523,524,5,87,0,0,524,525,6,19,-1,0,525,541,5,43,0,0,526,527,
  	3,36,18,0,527,529,6,19,-1,0,528,530,3,10,5,0,529,528,1,0,0,0,529,530,
  	1,0,0,0,530,538,1,0,0,0,531,532,5,41,0,0,532,533,3,36,18,0,533,534,6,
  	19,-1,0,534,537,1,0,0,0,535,537,3,10,5,0,536,531,1,0,0,0,536,535,1,0,
  	0,0,537,540,1,0,0,0,538,536,1,0,0,0,538,539,1,0,0,0,539,542,1,0,0,0,540,
  	538,1,0,0,0,541,526,1,0,0,0,541,542,1,0,0,0,542,543,1,0,0,0,543,544,5,
  	44,0,0,544,545,3,18,9,0,545,546,6,19,-1,0,546,39,1,0,0,0,547,548,3,38,
  	19,0,548,549,6,20,-1,0,549,550,3,62,31,0,550,551,6,20,-1,0,551,41,1,0,
  	0,0,552,553,3,14,7,0,553,554,6,21,-1,0,554,556,1,0,0,0,555,552,1,0,0,
  	0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,560,1,0,0,0,559,
  	557,1,0,0,0,560,561,5,11,0,0,561,562,6,21,-1,0,562,563,5,87,0,0,563,564,
  	6,21,-1,0,564,571,5,45,0,0,565,566,3,74,37,0,566,567,6,21,-1,0,567,568,
  	5,40,0,0,568,570,1,0,0,0,569,565,1,0,0,0,570,573,1,0,0,0,571,569,1,0,
  	0,0,571,572,1,0,0,0,572,574,1,0,0,0,573,571,1,0,0,0,574,575,5,46,0,0,
  	575,576,6,21,-1,0,576,43,1,0,0,0,577,578,3,14,7,0,578,579,6,22,-1,0,579,
  	581,1,0,0,0,580,577,1,0,0,0,581,584,1,0,0,0,582,580,1,0,0,0,582,583,1,
  	0,0,0,583,590,1,0,0,0,584,582,1,0,0,0,585,586,3,16,8,0,586,587,6,22,-1,
  	0,587,589,1,0,0,0,588,585,1,0,0,0,589,592,1,0,0,0,590,588,1,0,0,0,590,
  	591,1,0,0,0,591,593,1,0,0,0,592,590,1,0,0,0,593,594,5,12,0,0,594,595,
  	6,22,-1,0,595,596,1,0,0,0,596,597,5,87,0,0,597,598,6,22,-1,0,598,605,
  	5,45,0,0,599,600,3,74,37,0,600,601,6,22,-1,0,601,602,5,40,0,0,602,604,
  	1,0,0,0,603,599,1,0,0,0,604,607,1,0,0,0,605,603,1,0,0,0,605,606,1,0,0,
  	0,606,608,1,0,0,0,607,605,1,0,0,0,608,609,5,46,0,0,609,610,6,22,-1,0,
  	610,45,1,0,0,0,611,612,5,13,0,0,612,613,6,23,-1,0,613,614,1,0,0,0,614,
  	615,5,87,0,0,615,616,6,23,-1,0,616,623,5,45,0,0,617,618,3,74,37,0,618,
  	619,6,23,-1,0,619,620,5,40,0,0,620,622,1,0,0,0,621,617,1,0,0,0,622,625,
  	1,0,0,0,623,621,1,0,0,0,623,624,1,0,0,0,624,626,1,0,0,0,625,623,1,0,0,
  	0,626,627,5,46,0,0,627,628,6,23,-1,0,628,47,1,0,0,0,629,630,3,52,26,0,
  	630,631,6,24,-1,0,631,658,1,0,0,0,632,633,3,62,31,0,633,634,6,24,-1,0,
  	634,658,1,0,0,0,635,636,3,54,27,0,636,637,6,24,-1,0,637,658,1,0,0,0,638,
  	639,3,60,30,0,639,640,6,24,-1,0,640,658,1,0,0,0,641,642,3,68,34,0,642,
  	643,6,24,-1,0,643,658,1,0,0,0,644,645,3,64,32,0,645,646,6,24,-1,0,646,
  	658,1,0,0,0,647,648,3,66,33,0,648,649,6,24,-1,0,649,658,1,0,0,0,650,651,
  	3,70,35,0,651,652,6,24,-1,0,652,658,1,0,0,0,653,654,3,50,25,0,654,655,
  	5,40,0,0,655,656,6,24,-1,0,656,658,1,0,0,0,657,629,1,0,0,0,657,632,1,
  	0,0,0,657,635,1,0,0,0,657,638,1,0,0,0,657,641,1,0,0,0,657,644,1,0,0,0,
  	657,647,1,0,0,0,657,650,1,0,0,0,657,653,1,0,0,0,658,49,1,0,0,0,659,660,
  	3,72,36,0,660,661,6,25,-1,0,661,51,1,0,0,0,662,663,5,7,0,0,663,664,6,
  	26,-1,0,664,665,5,43,0,0,665,666,3,74,37,0,666,667,6,26,-1,0,667,668,
  	5,44,0,0,668,669,3,48,24,0,669,674,6,26,-1,0,670,671,5,8,0,0,671,672,
  	3,48,24,0,672,673,6,26,-1,0,673,675,1,0,0,0,674,670,1,0,0,0,674,675,1,
  	0,0,0,675,676,1,0,0,0,676,677,6,26,-1,0,677,53,1,0,0,0,678,679,5,14,0,
  	0,679,680,6,27,-1,0,680,684,5,43,0,0,681,682,3,28,14,0,682,683,6,27,-1,
  	0,683,685,1,0,0,0,684,681,1,0,0,0,684,685,1,0,0,0,685,686,1,0,0,0,686,
  	690,5,40,0,0,687,688,3,74,37,0,688,689,6,27,-1,0,689,691,1,0,0,0,690,
  	687,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,696,5,40,0,0,693,694,
  	3,74,37,0,694,695,6,27,-1,0,695,697,1,0,0,0,696,693,1,0,0,0,696,697,1,
  	0,0,0,697,698,1,0,0,0,698,704,5,44,0,0,699,700,3,16,8,0,700,701,6,27,
  	-1,0,701,703,1,0,0,0,702,699,1,0,0,0,703,706,1,0,0,0,704,702,1,0,0,0,
  	704,705,1,0,0,0,705,707,1,0,0,0,706,704,1,0,0,0,707,708,3,48,24,0,708,
  	709,6,27,-1,0,709,710,6,27,-1,0,710,55,1,0,0,0,711,712,5,14,0,0,712,713,
  	6,28,-1,0,713,714,5,43,0,0,714,715,5,87,0,0,715,716,5,42,0,0,716,717,
  	5,87,0,0,717,718,5,15,0,0,718,719,5,87,0,0,719,720,5,44,0,0,720,721,3,
  	48,24,0,721,722,6,28,-1,0,722,723,6,28,-1,0,723,57,1,0,0,0,724,725,5,
  	16,0,0,725,726,6,29,-1,0,726,727,5,43,0,0,727,728,3,74,37,0,728,729,5,
  	44,0,0,729,730,3,48,24,0,730,731,6,29,-1,0,731,732,6,29,-1,0,732,59,1,
  	0,0,0,733,734,5,17,0,0,734,735,6,30,-1,0,735,736,5,43,0,0,736,737,3,74,
  	37,0,737,738,6,30,-1,0,738,739,5,44,0,0,739,740,3,48,24,0,740,741,6,30,
  	-1,0,741,742,6,30,-1,0,742,756,1,0,0,0,743,744,5,18,0,0,744,745,6,30,
  	-1,0,745,746,3,48,24,0,746,747,6,30,-1,0,747,748,5,17,0,0,748,749,5,43,
  	0,0,749,750,3,74,37,0,750,751,6,30,-1,0,751,752,5,44,0,0,752,753,5,40,
  	0,0,753,754,6,30,-1,0,754,756,1,0,0,0,755,733,1,0,0,0,755,743,1,0,0,0,
  	756,61,1,0,0,0,757,758,5,45,0,0,758,773,6,31,-1,0,759,760,3,28,14,0,760,
  	761,5,40,0,0,761,762,6,31,-1,0,762,772,1,0,0,0,763,764,3,48,24,0,764,
  	765,6,31,-1,0,765,772,1,0,0,0,766,767,3,12,6,0,767,768,5,40,0,0,768,769,
  	6,31,-1,0,769,772,1,0,0,0,770,772,3,10,5,0,771,759,1,0,0,0,771,763,1,
  	0,0,0,771,766,1,0,0,0,771,770,1,0,0,0,772,775,1,0,0,0,773,771,1,0,0,0,
  	773,774,1,0,0,0,774,776,1,0,0,0,775,773,1,0,0,0,776,777,5,46,0,0,777,
  	778,6,31,-1,0,778,779,6,31,-1,0,779,63,1,0,0,0,780,781,5,19,0,0,781,785,
  	6,32,-1,0,782,783,3,74,37,0,783,784,6,32,-1,0,784,786,1,0,0,0,785,782,
  	1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,788,5,40,0,0,788,802,6,32,
  	-1,0,789,790,5,20,0,0,790,791,6,32,-1,0,791,792,5,40,0,0,792,802,6,32,
  	-1,0,793,794,5,21,0,0,794,795,6,32,-1,0,795,796,5,40,0,0,796,802,6,32,
  	-1,0,797,798,5,22,0,0,798,799,6,32,-1,0,799,800,5,40,0,0,800,802,6,32,
  	-1,0,801,780,1,0,0,0,801,789,1,0,0,0,801,793,1,0,0,0,801,797,1,0,0,0,
  	802,65,1,0,0,0,803,804,5,23,0,0,804,805,6,33,-1,0,805,806,5,40,0,0,806,
  	807,6,33,-1,0,807,67,1,0,0,0,808,809,5,24,0,0,809,810,6,34,-1,0,810,811,
  	5,43,0,0,811,812,3,74,37,0,812,813,5,44,0,0,813,814,6,34,-1,0,814,826,
  	5,45,0,0,815,816,5,25,0,0,816,817,3,74,37,0,817,818,5,42,0,0,818,822,
  	6,34,-1,0,819,820,3,48,24,0,820,821,6,34,-1,0,821,823,1,0,0,0,822,819,
  	1,0,0,0,822,823,1,0,0,0,823,825,1,0,0,0,824,815,1,0,0,0,825,828,1,0,0,
  	0,826,824,1,0,0,0,826,827,1,0,0,0,827,836,1,0,0,0,828,826,1,0,0,0,829,
  	830,5,26,0,0,830,834,5,42,0,0,831,832,3,48,24,0,832,833,6,34,-1,0,833,
  	835,1,0,0,0,834,831,1,0,0,0,834,835,1,0,0,0,835,837,1,0,0,0,836,829,1,
  	0,0,0,836,837,1,0,0,0,837,838,1,0,0,0,838,839,5,46,0,0,839,840,6,34,-1,
  	0,840,69,1,0,0,0,841,842,5,27,0,0,842,843,6,35,-1,0,843,844,5,40,0,0,
  	844,845,6,35,-1,0,845,71,1,0,0,0,846,848,3,10,5,0,847,846,1,0,0,0,847,
  	848,1,0,0,0,848,849,1,0,0,0,849,850,3,74,37,0,850,858,6,36,-1,0,851,852,
  	5,41,0,0,852,853,3,74,37,0,853,854,6,36,-1,0,854,857,1,0,0,0,855,857,
  	3,10,5,0,856,851,1,0,0,0,856,855,1,0,0,0,857,860,1,0,0,0,858,856,1,0,
  	0,0,858,859,1,0,0,0,859,861,1,0,0,0,860,858,1,0,0,0,861,862,6,36,-1,0,
  	862,73,1,0,0,0,863,864,6,37,-1,0,864,865,7,3,0,0,865,866,3,74,37,14,866,
  	867,6,37,-1,0,867,872,1,0,0,0,868,869,3,76,38,0,869,870,6,37,-1,0,870,
  	872,1,0,0,0,871,863,1,0,0,0,871,868,1,0,0,0,872,999,1,0,0,0,873,874,10,
  	17,0,0,874,875,6,37,-1,0,875,876,5,49,0,0,876,877,6,37,-1,0,877,878,3,
  	74,37,18,878,879,6,37,-1,0,879,998,1,0,0,0,880,881,10,16,0,0,881,882,
  	6,37,-1,0,882,883,5,79,0,0,883,884,6,37,-1,0,884,885,3,74,37,17,885,886,
  	6,37,-1,0,886,998,1,0,0,0,887,888,10,13,0,0,888,889,6,37,-1,0,889,890,
  	7,4,0,0,890,891,6,37,-1,0,891,892,3,74,37,14,892,893,6,37,-1,0,893,998,
  	1,0,0,0,894,895,10,12,0,0,895,896,6,37,-1,0,896,897,7,5,0,0,897,898,6,
  	37,-1,0,898,899,3,74,37,13,899,900,6,37,-1,0,900,998,1,0,0,0,901,902,
  	10,11,0,0,902,903,6,37,-1,0,903,904,7,6,0,0,904,905,6,37,-1,0,905,906,
  	3,74,37,12,906,907,6,37,-1,0,907,998,1,0,0,0,908,909,10,10,0,0,909,910,
  	6,37,-1,0,910,911,7,7,0,0,911,912,6,37,-1,0,912,913,3,74,37,11,913,914,
  	6,37,-1,0,914,998,1,0,0,0,915,916,10,9,0,0,916,917,6,37,-1,0,917,918,
  	7,8,0,0,918,919,6,37,-1,0,919,920,3,74,37,10,920,921,6,37,-1,0,921,998,
  	1,0,0,0,922,923,10,8,0,0,923,924,6,37,-1,0,924,925,5,54,0,0,925,926,6,
  	37,-1,0,926,927,3,74,37,9,927,928,6,37,-1,0,928,998,1,0,0,0,929,930,10,
  	7,0,0,930,931,6,37,-1,0,931,932,5,58,0,0,932,933,6,37,-1,0,933,934,3,
  	74,37,8,934,935,6,37,-1,0,935,998,1,0,0,0,936,937,10,6,0,0,937,938,6,
  	37,-1,0,938,939,5,56,0,0,939,940,6,37,-1,0,940,941,3,74,37,7,941,942,
  	6,37,-1,0,942,998,1,0,0,0,943,944,10,5,0,0,944,945,6,37,-1,0,945,946,
  	5,70,0,0,946,947,6,37,-1,0,947,948,3,74,37,6,948,949,6,37,-1,0,949,998,
  	1,0,0,0,950,951,10,4,0,0,951,952,6,37,-1,0,952,953,5,71,0,0,953,954,6,
  	37,-1,0,954,955,3,74,37,5,955,956,6,37,-1,0,956,998,1,0,0,0,957,958,10,
  	3,0,0,958,959,5,53,0,0,959,960,6,37,-1,0,960,961,3,74,37,0,961,962,5,
  	42,0,0,962,963,3,74,37,3,963,964,6,37,-1,0,964,998,1,0,0,0,965,966,10,
  	2,0,0,966,967,6,37,-1,0,967,968,7,9,0,0,968,969,6,37,-1,0,969,970,3,74,
  	37,2,970,971,6,37,-1,0,971,998,1,0,0,0,972,973,10,19,0,0,973,974,6,37,
  	-1,0,974,975,7,10,0,0,975,976,6,37,-1,0,976,998,6,37,-1,0,977,978,10,
  	18,0,0,978,979,6,37,-1,0,979,980,5,43,0,0,980,984,6,37,-1,0,981,982,3,
  	72,36,0,982,983,6,37,-1,0,983,985,1,0,0,0,984,981,1,0,0,0,984,985,1,0,
  	0,0,985,986,1,0,0,0,986,987,5,44,0,0,987,998,6,37,-1,0,988,989,10,15,
  	0,0,989,990,6,37,-1,0,990,991,5,47,0,0,991,993,6,37,-1,0,992,994,3,74,
  	37,0,993,992,1,0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,996,5,48,0,0,
  	996,998,6,37,-1,0,997,873,1,0,0,0,997,880,1,0,0,0,997,887,1,0,0,0,997,
  	894,1,0,0,0,997,901,1,0,0,0,997,908,1,0,0,0,997,915,1,0,0,0,997,922,1,
  	0,0,0,997,929,1,0,0,0,997,936,1,0,0,0,997,943,1,0,0,0,997,950,1,0,0,0,
  	997,957,1,0,0,0,997,965,1,0,0,0,997,972,1,0,0,0,997,977,1,0,0,0,997,988,
  	1,0,0,0,998,1001,1,0,0,0,999,997,1,0,0,0,999,1000,1,0,0,0,1000,75,1,0,
  	0,0,1001,999,1,0,0,0,1002,1003,3,78,39,0,1003,1004,6,38,-1,0,1004,1039,
  	1,0,0,0,1005,1006,3,80,40,0,1006,1007,6,38,-1,0,1007,1039,1,0,0,0,1008,
  	1009,5,43,0,0,1009,1010,3,74,37,0,1010,1011,5,44,0,0,1011,1012,6,38,-1,
  	0,1012,1039,1,0,0,0,1013,1014,5,80,0,0,1014,1039,6,38,-1,0,1015,1016,
  	5,81,0,0,1016,1039,6,38,-1,0,1017,1018,5,84,0,0,1018,1039,6,38,-1,0,1019,
  	1020,5,85,0,0,1020,1039,6,38,-1,0,1021,1022,5,86,0,0,1022,1039,6,38,-1,
  	0,1023,1024,3,0,0,0,1024,1025,6,38,-1,0,1025,1039,1,0,0,0,1026,1027,5,
  	87,0,0,1027,1039,6,38,-1,0,1028,1029,3,4,2,0,1029,1030,6,38,-1,0,1030,
  	1039,1,0,0,0,1031,1032,5,39,0,0,1032,1033,6,38,-1,0,1033,1034,5,64,0,
  	0,1034,1035,5,87,0,0,1035,1036,5,66,0,0,1036,1039,6,38,-1,0,1037,1039,
  	3,10,5,0,1038,1002,1,0,0,0,1038,1005,1,0,0,0,1038,1008,1,0,0,0,1038,1013,
  	1,0,0,0,1038,1015,1,0,0,0,1038,1017,1,0,0,0,1038,1019,1,0,0,0,1038,1021,
  	1,0,0,0,1038,1023,1,0,0,0,1038,1026,1,0,0,0,1038,1028,1,0,0,0,1038,1031,
  	1,0,0,0,1038,1037,1,0,0,0,1039,77,1,0,0,0,1040,1041,5,87,0,0,1041,1042,
  	6,39,-1,0,1042,1043,5,45,0,0,1043,1045,6,39,-1,0,1044,1046,3,72,36,0,
  	1045,1044,1,0,0,0,1045,1046,1,0,0,0,1046,1047,1,0,0,0,1047,1048,5,46,
  	0,0,1048,1049,6,39,-1,0,1049,79,1,0,0,0,1050,1051,5,47,0,0,1051,1053,
  	6,40,-1,0,1052,1054,3,72,36,0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,
  	1055,1,0,0,0,1055,1056,5,48,0,0,1056,1057,6,40,-1,0,1057,81,1,0,0,0,1058,
  	1059,5,64,0,0,1059,1060,6,41,-1,0,1060,1061,5,84,0,0,1061,1062,6,41,-1,
  	0,1062,1064,1,0,0,0,1063,1065,3,10,5,0,1064,1063,1,0,0,0,1064,1065,1,
  	0,0,0,1065,1069,1,0,0,0,1066,1067,5,41,0,0,1067,1068,5,84,0,0,1068,1070,
  	6,41,-1,0,1069,1066,1,0,0,0,1070,1071,1,0,0,0,1071,1069,1,0,0,0,1071,
  	1072,1,0,0,0,1072,1073,1,0,0,0,1073,1074,5,66,0,0,1074,1075,6,41,-1,0,
  	1075,83,1,0,0,0,1076,1077,5,64,0,0,1077,1078,6,42,-1,0,1078,1079,5,85,
  	0,0,1079,1080,6,42,-1,0,1080,1082,1,0,0,0,1081,1083,3,10,5,0,1082,1081,
  	1,0,0,0,1082,1083,1,0,0,0,1083,1087,1,0,0,0,1084,1085,5,41,0,0,1085,1086,
  	5,85,0,0,1086,1088,6,42,-1,0,1087,1084,1,0,0,0,1088,1089,1,0,0,0,1089,
  	1087,1,0,0,0,1089,1090,1,0,0,0,1090,1091,1,0,0,0,1091,1092,5,66,0,0,1092,
  	1093,6,42,-1,0,1093,85,1,0,0,0,1094,1095,5,64,0,0,1095,1096,6,43,-1,0,
  	1096,1097,5,80,0,0,1097,1098,6,43,-1,0,1098,1100,1,0,0,0,1099,1101,3,
  	10,5,0,1100,1099,1,0,0,0,1100,1101,1,0,0,0,1101,1105,1,0,0,0,1102,1103,
  	5,41,0,0,1103,1104,5,80,0,0,1104,1106,6,43,-1,0,1105,1102,1,0,0,0,1106,
  	1107,1,0,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,1109,
  	1110,5,66,0,0,1110,1111,6,43,-1,0,1111,87,1,0,0,0,1112,1113,5,64,0,0,
  	1113,1114,6,44,-1,0,1114,1115,5,81,0,0,1115,1116,6,44,-1,0,1116,1118,
  	1,0,0,0,1117,1119,3,10,5,0,1118,1117,1,0,0,0,1118,1119,1,0,0,0,1119,1123,
  	1,0,0,0,1120,1121,5,41,0,0,1121,1122,5,81,0,0,1122,1124,6,44,-1,0,1123,
  	1120,1,0,0,0,1124,1125,1,0,0,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,
  	1127,1,0,0,0,1127,1128,5,66,0,0,1128,1129,6,44,-1,0,1129,89,1,0,0,0,1130,
  	1131,5,64,0,0,1131,1132,6,45,-1,0,1132,1133,3,4,2,0,1133,1134,6,45,-1,
  	0,1134,1136,1,0,0,0,1135,1137,3,10,5,0,1136,1135,1,0,0,0,1136,1137,1,
  	0,0,0,1137,1142,1,0,0,0,1138,1139,5,41,0,0,1139,1140,3,4,2,0,1140,1141,
  	6,45,-1,0,1141,1143,1,0,0,0,1142,1138,1,0,0,0,1143,1144,1,0,0,0,1144,
  	1142,1,0,0,0,1144,1145,1,0,0,0,1145,1146,1,0,0,0,1146,1147,5,66,0,0,1147,
  	1148,6,45,-1,0,1148,91,1,0,0,0,94,97,106,110,117,126,130,136,182,184,
  	218,228,234,236,263,265,277,300,302,321,328,336,344,349,355,357,364,374,
  	376,379,386,394,402,423,426,428,436,438,451,460,464,473,477,479,483,491,
  	499,511,520,529,536,538,541,557,571,582,590,605,623,657,674,684,690,696,
  	704,755,771,773,785,801,822,826,834,836,847,856,858,871,984,993,997,999,
  	1038,1045,1053,1064,1071,1082,1089,1100,1107,1118,1125,1136,1144
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  gpulangParserStaticData = std::move(staticData);
}

}

GPULangParser::GPULangParser(TokenStream *input) : GPULangParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

GPULangParser::GPULangParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  GPULangParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *gpulangParserStaticData->atn, gpulangParserStaticData->decisionToDFA, gpulangParserStaticData->sharedContextCache, options);
}

GPULangParser::~GPULangParser() {
  delete _interpreter;
}

const atn::ATN& GPULangParser::getATN() const {
  return *gpulangParserStaticData->atn;
}

std::string GPULangParser::getGrammarFileName() const {
  return "GPULang.g4";
}

const std::vector<std::string>& GPULangParser::getRuleNames() const {
  return gpulangParserStaticData->ruleNames;
}

const dfa::Vocabulary& GPULangParser::getVocabulary() const {
  return gpulangParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView GPULangParser::getSerializedATN() const {
  return gpulangParserStaticData->serializedATN;
}


std::vector<std::tuple<size_t, size_t, std::string>> GPULangParser::LineStack;


//----------------- StringContext ------------------------------------------------------------------

GPULangParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::StringContext::QO() {
  return getTokens(GPULangParser::QO);
}

tree::TerminalNode* GPULangParser::StringContext::QO(size_t i) {
  return getToken(GPULangParser::QO, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StringContext::Q() {
  return getTokens(GPULangParser::Q);
}

tree::TerminalNode* GPULangParser::StringContext::Q(size_t i) {
  return getToken(GPULangParser::Q, i);
}


size_t GPULangParser::StringContext::getRuleIndex() const {
  return GPULangParser::RuleString;
}

void GPULangParser::StringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString(this);
}

void GPULangParser::StringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString(this);
}

GPULangParser::StringContext* GPULangParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 0, GPULangParser::RuleString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(110);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::QO: {
        enterOuterAlt(_localctx, 1);
        setState(92);
        match(GPULangParser::QO);
        setState(97);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -4503599627370498) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 33554431) != 0)) {
          setState(93);
          antlrcpp::downCast<StringContext *>(_localctx)->data = _input->LT(1);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == GPULangParser::QO)) {
            antlrcpp::downCast<StringContext *>(_localctx)->data = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           _localctx->val.append((antlrcpp::downCast<StringContext *>(_localctx)->data != nullptr ? antlrcpp::downCast<StringContext *>(_localctx)->data->getText() : "")); 
          setState(99);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(100);
        match(GPULangParser::QO);
        break;
      }

      case GPULangParser::Q: {
        enterOuterAlt(_localctx, 2);
        setState(101);
        match(GPULangParser::Q);
        setState(106);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -2305843009213693954) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 33554431) != 0)) {
          setState(102);
          antlrcpp::downCast<StringContext *>(_localctx)->data = _input->LT(1);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == GPULangParser::Q)) {
            antlrcpp::downCast<StringContext *>(_localctx)->data = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           _localctx->val.append((antlrcpp::downCast<StringContext *>(_localctx)->data != nullptr ? antlrcpp::downCast<StringContext *>(_localctx)->data->getText() : "")); 
          setState(108);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(109);
        match(GPULangParser::Q);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathContext ------------------------------------------------------------------

GPULangParser::PathContext::PathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::PathContext::QO() {
  return getTokens(GPULangParser::QO);
}

tree::TerminalNode* GPULangParser::PathContext::QO(size_t i) {
  return getToken(GPULangParser::QO, i);
}

tree::TerminalNode* GPULangParser::PathContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::PathContext::GREATER() {
  return getTokens(GPULangParser::GREATER);
}

tree::TerminalNode* GPULangParser::PathContext::GREATER(size_t i) {
  return getToken(GPULangParser::GREATER, i);
}


size_t GPULangParser::PathContext::getRuleIndex() const {
  return GPULangParser::RulePath;
}

void GPULangParser::PathContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPath(this);
}

void GPULangParser::PathContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPath(this);
}

GPULangParser::PathContext* GPULangParser::path() {
  PathContext *_localctx = _tracker.createInstance<PathContext>(_ctx, getState());
  enterRule(_localctx, 2, GPULangParser::RulePath);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(130);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::QO: {
        enterOuterAlt(_localctx, 1);
        setState(112);
        match(GPULangParser::QO);
        setState(117);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -4503599627370498) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 33554431) != 0)) {
          setState(113);
          antlrcpp::downCast<PathContext *>(_localctx)->data = _input->LT(1);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == GPULangParser::QO)) {
            antlrcpp::downCast<PathContext *>(_localctx)->data = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           _localctx->val.append((antlrcpp::downCast<PathContext *>(_localctx)->data != nullptr ? antlrcpp::downCast<PathContext *>(_localctx)->data->getText() : "")); 
          setState(119);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(120);
        match(GPULangParser::QO);
        break;
      }

      case GPULangParser::LESS: {
        enterOuterAlt(_localctx, 2);
        setState(121);
        match(GPULangParser::LESS);
        setState(126);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -2) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 33554427) != 0)) {
          setState(122);
          antlrcpp::downCast<PathContext *>(_localctx)->data = _input->LT(1);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == GPULangParser::GREATER)) {
            antlrcpp::downCast<PathContext *>(_localctx)->data = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           _localctx->val.append((antlrcpp::downCast<PathContext *>(_localctx)->data != nullptr ? antlrcpp::downCast<PathContext *>(_localctx)->data->getText() : "")); 
          setState(128);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(129);
        match(GPULangParser::GREATER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanContext ------------------------------------------------------------------

GPULangParser::BooleanContext::BooleanContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GPULangParser::BooleanContext::getRuleIndex() const {
  return GPULangParser::RuleBoolean;
}

void GPULangParser::BooleanContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean(this);
}

void GPULangParser::BooleanContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean(this);
}

GPULangParser::BooleanContext* GPULangParser::boolean() {
  BooleanContext *_localctx = _tracker.createInstance<BooleanContext>(_ctx, getState());
  enterRule(_localctx, 4, GPULangParser::RuleBoolean);

          antlrcpp::downCast<BooleanContext *>(_localctx)->val =  false;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(136);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__0: {
        enterOuterAlt(_localctx, 1);
        setState(132);
        match(GPULangParser::T__0);
         antlrcpp::downCast<BooleanContext *>(_localctx)->val =  true; 
        break;
      }

      case GPULangParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(134);
        match(GPULangParser::T__1);
         antlrcpp::downCast<BooleanContext *>(_localctx)->val =  false; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EntryContext ------------------------------------------------------------------

GPULangParser::EntryContext::EntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::EffectContext* GPULangParser::EntryContext::effect() {
  return getRuleContext<GPULangParser::EffectContext>(0);
}

tree::TerminalNode* GPULangParser::EntryContext::EOF() {
  return getToken(GPULangParser::EOF, 0);
}


size_t GPULangParser::EntryContext::getRuleIndex() const {
  return GPULangParser::RuleEntry;
}

void GPULangParser::EntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry(this);
}

void GPULangParser::EntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry(this);
}

GPULangParser::EntryContext* GPULangParser::entry() {
  EntryContext *_localctx = _tracker.createInstance<EntryContext>(_ctx, getState());
  enterRule(_localctx, 6, GPULangParser::RuleEntry);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(138);
    antlrcpp::downCast<EntryContext *>(_localctx)->effectContext = effect();

            antlrcpp::downCast<EntryContext *>(_localctx)->returnEffect =  antlrcpp::downCast<EntryContext *>(_localctx)->effectContext->eff;
        
    setState(140);
    match(GPULangParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EffectContext ------------------------------------------------------------------

GPULangParser::EffectContext::EffectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::EffectContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::EffectContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::GenerateContext *> GPULangParser::EffectContext::generate() {
  return getRuleContexts<GPULangParser::GenerateContext>();
}

GPULangParser::GenerateContext* GPULangParser::EffectContext::generate(size_t i) {
  return getRuleContext<GPULangParser::GenerateContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::EffectContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::EffectContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::AliasContext *> GPULangParser::EffectContext::alias() {
  return getRuleContexts<GPULangParser::AliasContext>();
}

GPULangParser::AliasContext* GPULangParser::EffectContext::alias(size_t i) {
  return getRuleContext<GPULangParser::AliasContext>(i);
}

std::vector<GPULangParser::FunctionDeclarationContext *> GPULangParser::EffectContext::functionDeclaration() {
  return getRuleContexts<GPULangParser::FunctionDeclarationContext>();
}

GPULangParser::FunctionDeclarationContext* GPULangParser::EffectContext::functionDeclaration(size_t i) {
  return getRuleContext<GPULangParser::FunctionDeclarationContext>(i);
}

std::vector<GPULangParser::FunctionContext *> GPULangParser::EffectContext::function() {
  return getRuleContexts<GPULangParser::FunctionContext>();
}

GPULangParser::FunctionContext* GPULangParser::EffectContext::function(size_t i) {
  return getRuleContext<GPULangParser::FunctionContext>(i);
}

std::vector<GPULangParser::VariablesContext *> GPULangParser::EffectContext::variables() {
  return getRuleContexts<GPULangParser::VariablesContext>();
}

GPULangParser::VariablesContext* GPULangParser::EffectContext::variables(size_t i) {
  return getRuleContext<GPULangParser::VariablesContext>(i);
}

std::vector<GPULangParser::StructureContext *> GPULangParser::EffectContext::structure() {
  return getRuleContexts<GPULangParser::StructureContext>();
}

GPULangParser::StructureContext* GPULangParser::EffectContext::structure(size_t i) {
  return getRuleContext<GPULangParser::StructureContext>(i);
}

std::vector<GPULangParser::EnumerationContext *> GPULangParser::EffectContext::enumeration() {
  return getRuleContexts<GPULangParser::EnumerationContext>();
}

GPULangParser::EnumerationContext* GPULangParser::EffectContext::enumeration(size_t i) {
  return getRuleContext<GPULangParser::EnumerationContext>(i);
}

std::vector<GPULangParser::StateContext *> GPULangParser::EffectContext::state() {
  return getRuleContexts<GPULangParser::StateContext>();
}

GPULangParser::StateContext* GPULangParser::EffectContext::state(size_t i) {
  return getRuleContext<GPULangParser::StateContext>(i);
}

std::vector<GPULangParser::SamplerContext *> GPULangParser::EffectContext::sampler() {
  return getRuleContexts<GPULangParser::SamplerContext>();
}

GPULangParser::SamplerContext* GPULangParser::EffectContext::sampler(size_t i) {
  return getRuleContext<GPULangParser::SamplerContext>(i);
}

std::vector<GPULangParser::ProgramContext *> GPULangParser::EffectContext::program() {
  return getRuleContexts<GPULangParser::ProgramContext>();
}

GPULangParser::ProgramContext* GPULangParser::EffectContext::program(size_t i) {
  return getRuleContext<GPULangParser::ProgramContext>(i);
}


size_t GPULangParser::EffectContext::getRuleIndex() const {
  return GPULangParser::RuleEffect;
}

void GPULangParser::EffectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEffect(this);
}

void GPULangParser::EffectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEffect(this);
}

GPULangParser::EffectContext* GPULangParser::effect() {
  EffectContext *_localctx = _tracker.createInstance<EffectContext>(_ctx, getState());
  enterRule(_localctx, 8, GPULangParser::RuleEffect);

          antlrcpp::downCast<EffectContext *>(_localctx)->eff =  Alloc<Effect>();
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(184);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1 + 1) {
        setState(182);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
        case 1: {
          setState(142);
          linePreprocessorEntry();
          break;
        }

        case 2: {
          setState(143);
          antlrcpp::downCast<EffectContext *>(_localctx)->generateContext = generate();
          setState(144);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->generateContext->sym); 
          break;
        }

        case 3: {
          setState(147);
          antlrcpp::downCast<EffectContext *>(_localctx)->aliasContext = alias();
          setState(148);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->aliasContext->sym); 
          break;
        }

        case 4: {
          setState(151);
          antlrcpp::downCast<EffectContext *>(_localctx)->functionDeclarationContext = functionDeclaration();
          setState(152);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->functionDeclarationContext->sym); 
          break;
        }

        case 5: {
          setState(155);
          antlrcpp::downCast<EffectContext *>(_localctx)->functionContext = function();
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->functionContext->sym); 
          break;
        }

        case 6: {
          setState(158);
          antlrcpp::downCast<EffectContext *>(_localctx)->variablesContext = variables();
          setState(159);
          match(GPULangParser::SC);
           for (Variable* var : antlrcpp::downCast<EffectContext *>(_localctx)->variablesContext->vars) { _localctx->eff->symbols.Append(var); } 
          break;
        }

        case 7: {
          setState(162);
          antlrcpp::downCast<EffectContext *>(_localctx)->structureContext = structure();
          setState(163);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->structureContext->sym); 
          break;
        }

        case 8: {
          setState(166);
          antlrcpp::downCast<EffectContext *>(_localctx)->enumerationContext = enumeration();
          setState(167);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->enumerationContext->sym); 
          break;
        }

        case 9: {
          setState(170);
          antlrcpp::downCast<EffectContext *>(_localctx)->stateContext = state();
          setState(171);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->stateContext->sym); 
          break;
        }

        case 10: {
          setState(174);
          antlrcpp::downCast<EffectContext *>(_localctx)->samplerContext = sampler();
          setState(175);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->samplerContext->sym); 
          break;
        }

        case 11: {
          setState(178);
          antlrcpp::downCast<EffectContext *>(_localctx)->programContext = program();
          setState(179);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->programContext->sym); 
          break;
        }

        default:
          break;
        } 
      }
      setState(186);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinePreprocessorEntryContext ------------------------------------------------------------------

GPULangParser::LinePreprocessorEntryContext::LinePreprocessorEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::LinePreprocessorEntryContext::INTEGERLITERAL() {
  return getToken(GPULangParser::INTEGERLITERAL, 0);
}

GPULangParser::StringContext* GPULangParser::LinePreprocessorEntryContext::string() {
  return getRuleContext<GPULangParser::StringContext>(0);
}


size_t GPULangParser::LinePreprocessorEntryContext::getRuleIndex() const {
  return GPULangParser::RuleLinePreprocessorEntry;
}

void GPULangParser::LinePreprocessorEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLinePreprocessorEntry(this);
}

void GPULangParser::LinePreprocessorEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLinePreprocessorEntry(this);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::linePreprocessorEntry() {
  LinePreprocessorEntryContext *_localctx = _tracker.createInstance<LinePreprocessorEntryContext>(_ctx, getState());
  enterRule(_localctx, 10, GPULangParser::RuleLinePreprocessorEntry);

          size_t origLine;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(187);
    match(GPULangParser::T__2);
     origLine = _input->LT(-1)->getLine(); 
    setState(189);
    antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->line = match(GPULangParser::INTEGERLITERAL);
    setState(190);
    antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->p = string();
     LineStack.push_back( {origLine, atoi((antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->line != nullptr ? antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->line->getText() : "").c_str()), antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->p->val }); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasContext ------------------------------------------------------------------

GPULangParser::AliasContext::AliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::AliasContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::AliasContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}


size_t GPULangParser::AliasContext::getRuleIndex() const {
  return GPULangParser::RuleAlias;
}

void GPULangParser::AliasContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlias(this);
}

void GPULangParser::AliasContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlias(this);
}

GPULangParser::AliasContext* GPULangParser::alias() {
  AliasContext *_localctx = _tracker.createInstance<AliasContext>(_ctx, getState());
  enterRule(_localctx, 12, GPULangParser::RuleAlias);

          antlrcpp::downCast<AliasContext *>(_localctx)->sym =  nullptr;
          FixedString name;
          FixedString type;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(193);
    match(GPULangParser::T__3);
    setState(194);
    antlrcpp::downCast<AliasContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
    setState(195);
    match(GPULangParser::T__4);
    setState(196);
    antlrcpp::downCast<AliasContext *>(_localctx)->type = match(GPULangParser::IDENTIFIER);
     name = FixedString((antlrcpp::downCast<AliasContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AliasContext *>(_localctx)->name->getText() : "")); type = FixedString((antlrcpp::downCast<AliasContext *>(_localctx)->type != nullptr ? antlrcpp::downCast<AliasContext *>(_localctx)->type->getText() : "")); 

            antlrcpp::downCast<AliasContext *>(_localctx)->sym =  Alloc<Alias>();
            _localctx->sym->name = name;
            _localctx->sym->type = type;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

GPULangParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::AnnotationContext::SOBAKA() {
  return getToken(GPULangParser::SOBAKA, 0);
}

tree::TerminalNode* GPULangParser::AnnotationContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::AnnotationContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::AnnotationContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::ExpressionContext* GPULangParser::AnnotationContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}


size_t GPULangParser::AnnotationContext::getRuleIndex() const {
  return GPULangParser::RuleAnnotation;
}

void GPULangParser::AnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation(this);
}

void GPULangParser::AnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation(this);
}

GPULangParser::AnnotationContext* GPULangParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 14, GPULangParser::RuleAnnotation);

          antlrcpp::downCast<AnnotationContext *>(_localctx)->annot =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(200);
    match(GPULangParser::SOBAKA);
     antlrcpp::downCast<AnnotationContext *>(_localctx)->annot =  Alloc<Annotation>(); 

    setState(202);
    antlrcpp::downCast<AnnotationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     _localctx->annot->location = SetupFile(); 
    setState(204);
    match(GPULangParser::LP);
    setState(205);
    antlrcpp::downCast<AnnotationContext *>(_localctx)->value = expression(0);
    setState(206);
    match(GPULangParser::RP);
     _localctx->annot->name = (antlrcpp::downCast<AnnotationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AnnotationContext *>(_localctx)->name->getText() : ""); _localctx->annot->value = antlrcpp::downCast<AnnotationContext *>(_localctx)->value->tree; 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeContext ------------------------------------------------------------------

GPULangParser::AttributeContext::AttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::AttributeContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::AttributeContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::AttributeContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::ExpressionContext* GPULangParser::AttributeContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}


size_t GPULangParser::AttributeContext::getRuleIndex() const {
  return GPULangParser::RuleAttribute;
}

void GPULangParser::AttributeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute(this);
}

void GPULangParser::AttributeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute(this);
}

GPULangParser::AttributeContext* GPULangParser::attribute() {
  AttributeContext *_localctx = _tracker.createInstance<AttributeContext>(_ctx, getState());
  enterRule(_localctx, 16, GPULangParser::RuleAttribute);

          antlrcpp::downCast<AttributeContext *>(_localctx)->attr =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(218);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(209);
      antlrcpp::downCast<AttributeContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
       antlrcpp::downCast<AttributeContext *>(_localctx)->attr =  Alloc<Attribute>(); _localctx->attr->location = SetupFile(); _localctx->attr->name = (antlrcpp::downCast<AttributeContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AttributeContext *>(_localctx)->name->getText() : ""); 
      setState(211);
      match(GPULangParser::LP);
      setState(212);
      antlrcpp::downCast<AttributeContext *>(_localctx)->e = antlrcpp::downCast<AttributeContext *>(_localctx)->expressionContext = expression(0);
      setState(213);
      match(GPULangParser::RP);
       _localctx->attr->expression = antlrcpp::downCast<AttributeContext *>(_localctx)->expressionContext->tree; 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(216);
      antlrcpp::downCast<AttributeContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
       antlrcpp::downCast<AttributeContext *>(_localctx)->attr =  Alloc<Attribute>(); _localctx->attr->location = SetupFile(); _localctx->attr->name = (antlrcpp::downCast<AttributeContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AttributeContext *>(_localctx)->name->getText() : ""); _localctx->attr->expression = nullptr; 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclarationContext ------------------------------------------------------------------

GPULangParser::TypeDeclarationContext::TypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::MUL_OP() {
  return getTokens(GPULangParser::MUL_OP);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::MUL_OP(size_t i) {
  return getToken(GPULangParser::MUL_OP, i);
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::LL() {
  return getTokens(GPULangParser::LL);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::LL(size_t i) {
  return getToken(GPULangParser::LL, i);
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::RR() {
  return getTokens(GPULangParser::RR);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::RR(size_t i) {
  return getToken(GPULangParser::RR, i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::TypeDeclarationContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::TypeDeclarationContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::TypeDeclarationContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::TypeDeclarationContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::TypeDeclarationContext::getRuleIndex() const {
  return GPULangParser::RuleTypeDeclaration;
}

void GPULangParser::TypeDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeDeclaration(this);
}

void GPULangParser::TypeDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeDeclaration(this);
}

GPULangParser::TypeDeclarationContext* GPULangParser::typeDeclaration() {
  TypeDeclarationContext *_localctx = _tracker.createInstance<TypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 18, GPULangParser::RuleTypeDeclaration);

          _localctx->type.type.name = "";
          Symbol::Location typeRange;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
     typeRange = BeginLocationRange(); 
    setState(236);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(234);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case GPULangParser::MUL_OP: {
            setState(221);
            match(GPULangParser::MUL_OP);
             _localctx->type.type.AddModifier(Type::FullType::Modifier::Pointer); 
            break;
          }

          case GPULangParser::LL: {
            setState(223);
            match(GPULangParser::LL);
             _localctx->type.type.AddModifier(Type::FullType::Modifier::Array); 
            setState(228);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if ((((_la & ~ 0x3fULL) == 0) &&
              ((1ULL << _la) & 3464544097497251854) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
              ((1ULL << (_la - 75)) & 7787) != 0)) {
              setState(225);
              antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->arraySize0 = expression(0);
               _localctx->type.type.UpdateValue(antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->arraySize0->tree); 
            }
            setState(230);
            match(GPULangParser::RR);
            break;
          }

          case GPULangParser::IDENTIFIER: {
            setState(231);
            antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->qual = match(GPULangParser::IDENTIFIER);
             _localctx->type.type.AddQualifier(FixedString((antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->qual != nullptr ? antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->qual->getText() : ""))); 
            break;
          }

          case GPULangParser::T__2: {
            setState(233);
            linePreprocessorEntry();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(238);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    }
    setState(239);
    antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->typeName = match(GPULangParser::IDENTIFIER);
     _localctx->type.type.name = (antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->typeName != nullptr ? antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->typeName->getText() : ""); _localctx->type.location = EndLocationRange(typeRange); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenerateContext ------------------------------------------------------------------

GPULangParser::GenerateContext::GenerateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::GenerateContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::GenerateContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<GPULangParser::VariablesContext *> GPULangParser::GenerateContext::variables() {
  return getRuleContexts<GPULangParser::VariablesContext>();
}

GPULangParser::VariablesContext* GPULangParser::GenerateContext::variables(size_t i) {
  return getRuleContext<GPULangParser::VariablesContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::GenerateContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::GenerateContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::Gen_statementContext *> GPULangParser::GenerateContext::gen_statement() {
  return getRuleContexts<GPULangParser::Gen_statementContext>();
}

GPULangParser::Gen_statementContext* GPULangParser::GenerateContext::gen_statement(size_t i) {
  return getRuleContext<GPULangParser::Gen_statementContext>(i);
}

std::vector<GPULangParser::AliasContext *> GPULangParser::GenerateContext::alias() {
  return getRuleContexts<GPULangParser::AliasContext>();
}

GPULangParser::AliasContext* GPULangParser::GenerateContext::alias(size_t i) {
  return getRuleContext<GPULangParser::AliasContext>(i);
}

std::vector<GPULangParser::FunctionDeclarationContext *> GPULangParser::GenerateContext::functionDeclaration() {
  return getRuleContexts<GPULangParser::FunctionDeclarationContext>();
}

GPULangParser::FunctionDeclarationContext* GPULangParser::GenerateContext::functionDeclaration(size_t i) {
  return getRuleContext<GPULangParser::FunctionDeclarationContext>(i);
}

std::vector<GPULangParser::FunctionContext *> GPULangParser::GenerateContext::function() {
  return getRuleContexts<GPULangParser::FunctionContext>();
}

GPULangParser::FunctionContext* GPULangParser::GenerateContext::function(size_t i) {
  return getRuleContext<GPULangParser::FunctionContext>(i);
}


size_t GPULangParser::GenerateContext::getRuleIndex() const {
  return GPULangParser::RuleGenerate;
}

void GPULangParser::GenerateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenerate(this);
}

void GPULangParser::GenerateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenerate(this);
}

GPULangParser::GenerateContext* GPULangParser::generate() {
  GenerateContext *_localctx = _tracker.createInstance<GenerateContext>(_ctx, getState());
  enterRule(_localctx, 20, GPULangParser::RuleGenerate);

          PinnedArray<Symbol*> symbols = 0xFFFFF;
  	    Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(242);
    match(GPULangParser::T__5);
     location = SetupFile(); 
    setState(244);
    match(GPULangParser::LESS);
    setState(265);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 152) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 8389633) != 0)) {
      setState(263);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
      case 1: {
        setState(245);
        antlrcpp::downCast<GenerateContext *>(_localctx)->variablesContext = variables();
        setState(246);
        match(GPULangParser::SC);
         for(Variable* var : antlrcpp::downCast<GenerateContext *>(_localctx)->variablesContext->vars) { symbols.Append(var); } 
        break;
      }

      case 2: {
        setState(249);
        antlrcpp::downCast<GenerateContext *>(_localctx)->gen_statementContext = gen_statement();
         symbols.Append(antlrcpp::downCast<GenerateContext *>(_localctx)->gen_statementContext->tree); 
        break;
      }

      case 3: {
        setState(252);
        antlrcpp::downCast<GenerateContext *>(_localctx)->aliasContext = alias();
        setState(253);
        match(GPULangParser::SC);
         symbols.Append(antlrcpp::downCast<GenerateContext *>(_localctx)->aliasContext->sym); 
        break;
      }

      case 4: {
        setState(256);
        antlrcpp::downCast<GenerateContext *>(_localctx)->functionDeclarationContext = functionDeclaration();
        setState(257);
        match(GPULangParser::SC);
         symbols.Append(antlrcpp::downCast<GenerateContext *>(_localctx)->functionDeclarationContext->sym); 
        break;
      }

      case 5: {
        setState(260);
        antlrcpp::downCast<GenerateContext *>(_localctx)->functionContext = function();
         symbols.Append(antlrcpp::downCast<GenerateContext *>(_localctx)->functionContext->sym); 
        break;
      }

      default:
        break;
      }
      setState(267);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(268);
    match(GPULangParser::GREATER);

    	antlrcpp::downCast<GenerateContext *>(_localctx)->sym =  Alloc<Generate>(symbols);
    	_localctx->sym->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Gen_statementContext ------------------------------------------------------------------

GPULangParser::Gen_statementContext::Gen_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::Gen_if_statementContext* GPULangParser::Gen_statementContext::gen_if_statement() {
  return getRuleContext<GPULangParser::Gen_if_statementContext>(0);
}

GPULangParser::Gen_scope_statementContext* GPULangParser::Gen_statementContext::gen_scope_statement() {
  return getRuleContext<GPULangParser::Gen_scope_statementContext>(0);
}


size_t GPULangParser::Gen_statementContext::getRuleIndex() const {
  return GPULangParser::RuleGen_statement;
}

void GPULangParser::Gen_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGen_statement(this);
}

void GPULangParser::Gen_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGen_statement(this);
}

GPULangParser::Gen_statementContext* GPULangParser::gen_statement() {
  Gen_statementContext *_localctx = _tracker.createInstance<Gen_statementContext>(_ctx, getState());
  enterRule(_localctx, 22, GPULangParser::RuleGen_statement);

          antlrcpp::downCast<Gen_statementContext *>(_localctx)->tree =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(277);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__6: {
        enterOuterAlt(_localctx, 1);
        setState(271);
        antlrcpp::downCast<Gen_statementContext *>(_localctx)->gen_if_statementContext = gen_if_statement();
         antlrcpp::downCast<Gen_statementContext *>(_localctx)->tree =  antlrcpp::downCast<Gen_statementContext *>(_localctx)->gen_if_statementContext->tree; 
        break;
      }

      case GPULangParser::LESS: {
        enterOuterAlt(_localctx, 2);
        setState(274);
        antlrcpp::downCast<Gen_statementContext *>(_localctx)->gen_scope_statementContext = gen_scope_statement();
         antlrcpp::downCast<Gen_statementContext *>(_localctx)->tree =  antlrcpp::downCast<Gen_statementContext *>(_localctx)->gen_scope_statementContext->tree; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Gen_scope_statementContext ------------------------------------------------------------------

GPULangParser::Gen_scope_statementContext::Gen_scope_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::Gen_scope_statementContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::Gen_scope_statementContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<GPULangParser::VariablesContext *> GPULangParser::Gen_scope_statementContext::variables() {
  return getRuleContexts<GPULangParser::VariablesContext>();
}

GPULangParser::VariablesContext* GPULangParser::Gen_scope_statementContext::variables(size_t i) {
  return getRuleContext<GPULangParser::VariablesContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::Gen_scope_statementContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::Gen_scope_statementContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::Gen_statementContext *> GPULangParser::Gen_scope_statementContext::gen_statement() {
  return getRuleContexts<GPULangParser::Gen_statementContext>();
}

GPULangParser::Gen_statementContext* GPULangParser::Gen_scope_statementContext::gen_statement(size_t i) {
  return getRuleContext<GPULangParser::Gen_statementContext>(i);
}

std::vector<GPULangParser::AliasContext *> GPULangParser::Gen_scope_statementContext::alias() {
  return getRuleContexts<GPULangParser::AliasContext>();
}

GPULangParser::AliasContext* GPULangParser::Gen_scope_statementContext::alias(size_t i) {
  return getRuleContext<GPULangParser::AliasContext>(i);
}

std::vector<GPULangParser::FunctionDeclarationContext *> GPULangParser::Gen_scope_statementContext::functionDeclaration() {
  return getRuleContexts<GPULangParser::FunctionDeclarationContext>();
}

GPULangParser::FunctionDeclarationContext* GPULangParser::Gen_scope_statementContext::functionDeclaration(size_t i) {
  return getRuleContext<GPULangParser::FunctionDeclarationContext>(i);
}

std::vector<GPULangParser::FunctionContext *> GPULangParser::Gen_scope_statementContext::function() {
  return getRuleContexts<GPULangParser::FunctionContext>();
}

GPULangParser::FunctionContext* GPULangParser::Gen_scope_statementContext::function(size_t i) {
  return getRuleContext<GPULangParser::FunctionContext>(i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::Gen_scope_statementContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::Gen_scope_statementContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}


size_t GPULangParser::Gen_scope_statementContext::getRuleIndex() const {
  return GPULangParser::RuleGen_scope_statement;
}

void GPULangParser::Gen_scope_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGen_scope_statement(this);
}

void GPULangParser::Gen_scope_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGen_scope_statement(this);
}

GPULangParser::Gen_scope_statementContext* GPULangParser::gen_scope_statement() {
  Gen_scope_statementContext *_localctx = _tracker.createInstance<Gen_scope_statementContext>(_ctx, getState());
  enterRule(_localctx, 24, GPULangParser::RuleGen_scope_statement);

          antlrcpp::downCast<Gen_scope_statementContext *>(_localctx)->tree =  nullptr;
          PinnedArray<Symbol*> contents(0xFFFFFF);
  	    std::vector<Expression*> unfinished;
          Symbol::Location location;
          Symbol::Location ends;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(279);
    match(GPULangParser::LESS);
     location = SetupFile(); 
    setState(302);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 152) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 8389633) != 0)) {
      setState(300);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
      case 1: {
        setState(281);
        antlrcpp::downCast<Gen_scope_statementContext *>(_localctx)->variablesContext = variables();
        setState(282);
        match(GPULangParser::SC);
         for(Variable* var : antlrcpp::downCast<Gen_scope_statementContext *>(_localctx)->variablesContext->vars) { contents.Append(var); } 
        break;
      }

      case 2: {
        setState(285);
        antlrcpp::downCast<Gen_scope_statementContext *>(_localctx)->gen_statementContext = gen_statement();
         contents.Append(antlrcpp::downCast<Gen_scope_statementContext *>(_localctx)->gen_statementContext->tree); 
        break;
      }

      case 3: {
        setState(288);
        antlrcpp::downCast<Gen_scope_statementContext *>(_localctx)->aliasContext = alias();
        setState(289);
        match(GPULangParser::SC);
         contents.Append(antlrcpp::downCast<Gen_scope_statementContext *>(_localctx)->aliasContext->sym); 
        break;
      }

      case 4: {
        setState(292);
        antlrcpp::downCast<Gen_scope_statementContext *>(_localctx)->functionDeclarationContext = functionDeclaration();
        setState(293);
        match(GPULangParser::SC);
         contents.Append(antlrcpp::downCast<Gen_scope_statementContext *>(_localctx)->functionDeclarationContext->sym); 
        break;
      }

      case 5: {
        setState(296);
        antlrcpp::downCast<Gen_scope_statementContext *>(_localctx)->functionContext = function();
         contents.Append(antlrcpp::downCast<Gen_scope_statementContext *>(_localctx)->functionContext->sym); 
        break;
      }

      case 6: {
        setState(299);
        linePreprocessorEntry();
        break;
      }

      default:
        break;
      }
      setState(304);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(305);
    match(GPULangParser::GREATER);
     ends = SetupFile(); 

            antlrcpp::downCast<Gen_scope_statementContext *>(_localctx)->tree =  Alloc<ScopeStatement>(std::move(contents), unfinished);
            _localctx->tree->ends = ends;
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Gen_if_statementContext ------------------------------------------------------------------

GPULangParser::Gen_if_statementContext::Gen_if_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::Gen_if_statementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::Gen_if_statementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::Gen_if_statementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

std::vector<GPULangParser::Gen_statementContext *> GPULangParser::Gen_if_statementContext::gen_statement() {
  return getRuleContexts<GPULangParser::Gen_statementContext>();
}

GPULangParser::Gen_statementContext* GPULangParser::Gen_if_statementContext::gen_statement(size_t i) {
  return getRuleContext<GPULangParser::Gen_statementContext>(i);
}


size_t GPULangParser::Gen_if_statementContext::getRuleIndex() const {
  return GPULangParser::RuleGen_if_statement;
}

void GPULangParser::Gen_if_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGen_if_statement(this);
}

void GPULangParser::Gen_if_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGen_if_statement(this);
}

GPULangParser::Gen_if_statementContext* GPULangParser::gen_if_statement() {
  Gen_if_statementContext *_localctx = _tracker.createInstance<Gen_if_statementContext>(_ctx, getState());
  enterRule(_localctx, 26, GPULangParser::RuleGen_if_statement);

          antlrcpp::downCast<Gen_if_statementContext *>(_localctx)->tree =  nullptr;
          Expression* condition = nullptr;
          Statement* ifBody = nullptr;
          Statement* elseBody = nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(309);
    match(GPULangParser::T__6);
     location = SetupFile(); 
    setState(311);
    match(GPULangParser::LP);
    setState(312);
    antlrcpp::downCast<Gen_if_statementContext *>(_localctx)->condition = expression(0);
     condition = antlrcpp::downCast<Gen_if_statementContext *>(_localctx)->condition->tree; 
    setState(314);
    match(GPULangParser::RP);
    setState(315);
    antlrcpp::downCast<Gen_if_statementContext *>(_localctx)->ifBody = gen_statement();
     ifBody = antlrcpp::downCast<Gen_if_statementContext *>(_localctx)->ifBody->tree; 
    setState(321);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      setState(317);
      match(GPULangParser::T__7);
      setState(318);
      antlrcpp::downCast<Gen_if_statementContext *>(_localctx)->elseBody = gen_statement();
       elseBody = antlrcpp::downCast<Gen_if_statementContext *>(_localctx)->elseBody->tree; 
      break;
    }

    default:
      break;
    }

            antlrcpp::downCast<Gen_if_statementContext *>(_localctx)->tree =  Alloc<IfStatement>(condition, ifBody, elseBody);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariablesContext ------------------------------------------------------------------

GPULangParser::VariablesContext::VariablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::VariablesContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::VariablesContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::VariablesContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::VariablesContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::AnnotationContext *> GPULangParser::VariablesContext::annotation() {
  return getRuleContexts<GPULangParser::AnnotationContext>();
}

GPULangParser::AnnotationContext* GPULangParser::VariablesContext::annotation(size_t i) {
  return getRuleContext<GPULangParser::AnnotationContext>(i);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::VariablesContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::VariablesContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::VariablesContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::VariablesContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}

tree::TerminalNode* GPULangParser::VariablesContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::VariablesContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

tree::TerminalNode* GPULangParser::VariablesContext::EQ() {
  return getToken(GPULangParser::EQ, 0);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::VariablesContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::VariablesContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::VariablesContext::getRuleIndex() const {
  return GPULangParser::RuleVariables;
}

void GPULangParser::VariablesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariables(this);
}

void GPULangParser::VariablesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariables(this);
}

GPULangParser::VariablesContext* GPULangParser::variables() {
  VariablesContext *_localctx = _tracker.createInstance<VariablesContext>(_ctx, getState());
  enterRule(_localctx, 28, GPULangParser::RuleVariables);

          TransientArray<Variable*> list(256);
          TransientArray<Annotation*> annotations(32);
          TransientArray<Attribute*> attributes(32);
          TransientArray<FixedString> names(256);
          TransientArray<Expression*> valueExpressions(256);
          TransientArray<Symbol::Location> locations(256);
          unsigned initCounter = 0;
          TypeDeclaration type = TypeDeclaration{ .type = Type::FullType{UNDEFINED_TYPE} };
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(328);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2) {
      setState(325);
      linePreprocessorEntry();
      setState(330);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(336);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::SOBAKA) {
      setState(331);
      antlrcpp::downCast<VariablesContext *>(_localctx)->annotationContext = annotation();
       if (annotations.Full()) { throw IndexOutOfBoundsException("Maximum of 32 annotations reached"); } annotations.Append(std::move(antlrcpp::downCast<VariablesContext *>(_localctx)->annotationContext->annot)); 
      setState(338);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(342); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(339);
              antlrcpp::downCast<VariablesContext *>(_localctx)->attributeContext = attribute();
               if (attributes.Full()) { throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); } attributes.Append(std::move(antlrcpp::downCast<VariablesContext *>(_localctx)->attributeContext->attr)); 
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(344); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(346);
    antlrcpp::downCast<VariablesContext *>(_localctx)->varName = match(GPULangParser::IDENTIFIER);
     names.Append(FixedString((antlrcpp::downCast<VariablesContext *>(_localctx)->varName != nullptr ? antlrcpp::downCast<VariablesContext *>(_localctx)->varName->getText() : ""))); valueExpressions.Append(nullptr); locations.Append(SetupFile()); 
    setState(349);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      setState(348);
      linePreprocessorEntry();
      break;
    }

    default:
      break;
    }
    setState(357);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2

    || _la == GPULangParser::CO) {
      setState(355);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case GPULangParser::CO: {
          setState(351);
          match(GPULangParser::CO);
          setState(352);
          antlrcpp::downCast<VariablesContext *>(_localctx)->varNameN = match(GPULangParser::IDENTIFIER);
           if (names.Full()) { throw IndexOutOfBoundsException("Maximum of 256 variable declarations reached"); } names.Append(FixedString((antlrcpp::downCast<VariablesContext *>(_localctx)->varNameN != nullptr ? antlrcpp::downCast<VariablesContext *>(_localctx)->varNameN->getText() : ""))); valueExpressions.Append(nullptr); locations.Append(SetupFile()); 
          break;
        }

        case GPULangParser::T__2: {
          setState(354);
          linePreprocessorEntry();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(359);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(364);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::COL) {
      setState(360);
      match(GPULangParser::COL);
      setState(361);
      antlrcpp::downCast<VariablesContext *>(_localctx)->typeDeclarationContext = typeDeclaration();
       type = antlrcpp::downCast<VariablesContext *>(_localctx)->typeDeclarationContext->type; 
    }
    setState(379);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::EQ) {
      setState(366);
      match(GPULangParser::EQ);
      setState(367);
      antlrcpp::downCast<VariablesContext *>(_localctx)->valueExpr = expression(0);
       if (initCounter < names.size) { valueExpressions[initCounter++] = antlrcpp::downCast<VariablesContext *>(_localctx)->valueExpr->tree; }  
      setState(376);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GPULangParser::T__2

      || _la == GPULangParser::CO) {
        setState(374);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case GPULangParser::CO: {
            setState(369);
            match(GPULangParser::CO);
            setState(370);
            antlrcpp::downCast<VariablesContext *>(_localctx)->valueExprN = expression(0);
             if (initCounter < names.size) { valueExpressions[initCounter++] = antlrcpp::downCast<VariablesContext *>(_localctx)->valueExprN->tree; }; 
            break;
          }

          case GPULangParser::T__2: {
            setState(373);
            linePreprocessorEntry();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(378);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }

            for (size_t i = 0; i < names.size; i++)
            {
                Variable* var = Alloc<Variable>(); 
                var->type = type.type; 
                var->typeLocation = type.location;
                var->location = locations[i]; 
                var->annotations = annotations;
                var->attributes = attributes;
                var->name = names[i];
                var->valueExpression = valueExpressions[i];
                list.Append(var);
            }
            antlrcpp::downCast<VariablesContext *>(_localctx)->vars =  list;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureDeclarationContext ------------------------------------------------------------------

GPULangParser::StructureDeclarationContext::StructureDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::StructureDeclarationContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::StructureDeclarationContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::StructureDeclarationContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::AnnotationContext *> GPULangParser::StructureDeclarationContext::annotation() {
  return getRuleContexts<GPULangParser::AnnotationContext>();
}

GPULangParser::AnnotationContext* GPULangParser::StructureDeclarationContext::annotation(size_t i) {
  return getRuleContext<GPULangParser::AnnotationContext>(i);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::StructureDeclarationContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::StructureDeclarationContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}


size_t GPULangParser::StructureDeclarationContext::getRuleIndex() const {
  return GPULangParser::RuleStructureDeclaration;
}

void GPULangParser::StructureDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructureDeclaration(this);
}

void GPULangParser::StructureDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructureDeclaration(this);
}

GPULangParser::StructureDeclarationContext* GPULangParser::structureDeclaration() {
  StructureDeclarationContext *_localctx = _tracker.createInstance<StructureDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 30, GPULangParser::RuleStructureDeclaration);

          antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->sym =  nullptr;
          TransientArray<Annotation*> annotations(32);
          TransientArray<Attribute*> attributes(32);
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(386);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2) {
      setState(383);
      linePreprocessorEntry();
      setState(388);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(394);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::SOBAKA) {
      setState(389);
      antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->annotationContext = annotation();
       if (annotations.Full()) { throw IndexOutOfBoundsException("Maximum of 32 annotations reached"); } annotations.Append(std::move(antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->annotationContext->annot)); 
      setState(396);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(402);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::IDENTIFIER) {
      setState(397);
      antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->attributeContext = attribute();
       if (attributes.Full()) { throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); } attributes.Append(std::move(antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->attributeContext->attr)); 
      setState(404);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(405);
    match(GPULangParser::T__8);
    setState(406);
    antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     
            antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->sym =  Alloc<Structure>();
            _localctx->sym->name = (antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->name->getText() : ""); 
            _localctx->sym->annotations = annotations;
            _localctx->sym->attributes = attributes;
            _localctx->sym->location = SetupFile();
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureContext ------------------------------------------------------------------

GPULangParser::StructureContext::StructureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::StructureDeclarationContext* GPULangParser::StructureContext::structureDeclaration() {
  return getRuleContext<GPULangParser::StructureDeclarationContext>(0);
}

tree::TerminalNode* GPULangParser::StructureContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::StructureContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::COL() {
  return getTokens(GPULangParser::COL);
}

tree::TerminalNode* GPULangParser::StructureContext::COL(size_t i) {
  return getToken(GPULangParser::COL, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::StructureContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::StructureContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::StructureContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::StructureContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::MUL_OP() {
  return getTokens(GPULangParser::MUL_OP);
}

tree::TerminalNode* GPULangParser::StructureContext::MUL_OP(size_t i) {
  return getToken(GPULangParser::MUL_OP, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::LL() {
  return getTokens(GPULangParser::LL);
}

tree::TerminalNode* GPULangParser::StructureContext::LL(size_t i) {
  return getToken(GPULangParser::LL, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::RR() {
  return getTokens(GPULangParser::RR);
}

tree::TerminalNode* GPULangParser::StructureContext::RR(size_t i) {
  return getToken(GPULangParser::RR, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::StructureContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::StructureContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::StructureContext::getRuleIndex() const {
  return GPULangParser::RuleStructure;
}

void GPULangParser::StructureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure(this);
}

void GPULangParser::StructureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure(this);
}

GPULangParser::StructureContext* GPULangParser::structure() {
  StructureContext *_localctx = _tracker.createInstance<StructureContext>(_ctx, getState());
  enterRule(_localctx, 32, GPULangParser::RuleStructure);

          antlrcpp::downCast<StructureContext *>(_localctx)->sym =  nullptr;
          TransientArray<Symbol*> members(1024);
          bool isArray = false;
          Expression* arraySizeExpression = nullptr;
          FixedString instanceName;
          Symbol::Location varLocation;
          Type::FullType varType;
          Symbol::Location varTypeLocation;
          Symbol::Location typeRange;
          FixedString varName;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(409);
    antlrcpp::downCast<StructureContext *>(_localctx)->structureDeclarationContext = structureDeclaration();
     antlrcpp::downCast<StructureContext *>(_localctx)->sym =  antlrcpp::downCast<StructureContext *>(_localctx)->structureDeclarationContext->sym; 
    setState(411);
    match(GPULangParser::LB);
    setState(438);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2 || _la == GPULangParser::IDENTIFIER) {
      setState(436);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case GPULangParser::IDENTIFIER: {
          setState(412);
          antlrcpp::downCast<StructureContext *>(_localctx)->varName = match(GPULangParser::IDENTIFIER);
           varName = FixedString((antlrcpp::downCast<StructureContext *>(_localctx)->varName != nullptr ? antlrcpp::downCast<StructureContext *>(_localctx)->varName->getText() : "")); varLocation = SetupFile(); 
          setState(414);
          match(GPULangParser::COL);
           typeRange = BeginLocationRange(); 
          setState(428);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == GPULangParser::LL

          || _la == GPULangParser::MUL_OP) {
            setState(426);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case GPULangParser::MUL_OP: {
                setState(416);
                match(GPULangParser::MUL_OP);
                 varType.AddModifier(Type::FullType::Modifier::Pointer); 
                break;
              }

              case GPULangParser::LL: {
                setState(418);
                match(GPULangParser::LL);
                 varType.AddModifier(Type::FullType::Modifier::Array); 
                setState(423);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if ((((_la & ~ 0x3fULL) == 0) &&
                  ((1ULL << _la) & 3464544097497251854) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
                  ((1ULL << (_la - 75)) & 7787) != 0)) {
                  setState(420);
                  antlrcpp::downCast<StructureContext *>(_localctx)->arraySize0 = expression(0);
                   varType.UpdateValue(antlrcpp::downCast<StructureContext *>(_localctx)->arraySize0->tree); 
                }
                setState(425);
                match(GPULangParser::RR);
                break;
              }

            default:
              throw NoViableAltException(this);
            }
            setState(430);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(431);
          antlrcpp::downCast<StructureContext *>(_localctx)->varTypeName = match(GPULangParser::IDENTIFIER);
           if (members.Full()) { throw IndexOutOfBoundsException("Maximum of 1024 struct members reached"); } varType.name = (antlrcpp::downCast<StructureContext *>(_localctx)->varTypeName != nullptr ? antlrcpp::downCast<StructureContext *>(_localctx)->varTypeName->getText() : ""); varTypeLocation = EndLocationRange(typeRange); 
          setState(433);
          match(GPULangParser::SC);

                          Variable* var = Alloc<Variable>(); 
                          var->type = varType; 
                          var->location = varLocation; 
                          var->typeLocation = varTypeLocation;
                          var->name = varName;
                          var->valueExpression = nullptr;
                          members.Append(var);
                          
                          varType = Type::FullType();
                      
          break;
        }

        case GPULangParser::T__2: {
          setState(435);
          linePreprocessorEntry();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(440);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(441);
    match(GPULangParser::RB);
     
            _localctx->sym->symbols = members; 
            //_localctx->sym->instanceName = instanceName;
            //_localctx->sym->isArray = isArray;
            //_localctx->sym->arraySizeExpression = arraySizeExpression;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumerationContext ------------------------------------------------------------------

GPULangParser::EnumerationContext::EnumerationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::EnumerationContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::EnumerationContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::EnumerationContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::EnumerationContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

tree::TerminalNode* GPULangParser::EnumerationContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::EnumerationContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::EnumerationContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::EnumerationContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::EnumerationContext::EQ() {
  return getTokens(GPULangParser::EQ);
}

tree::TerminalNode* GPULangParser::EnumerationContext::EQ(size_t i) {
  return getToken(GPULangParser::EQ, i);
}

std::vector<tree::TerminalNode *> GPULangParser::EnumerationContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::EnumerationContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::EnumerationContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::EnumerationContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::EnumerationContext::getRuleIndex() const {
  return GPULangParser::RuleEnumeration;
}

void GPULangParser::EnumerationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration(this);
}

void GPULangParser::EnumerationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration(this);
}

GPULangParser::EnumerationContext* GPULangParser::enumeration() {
  EnumerationContext *_localctx = _tracker.createInstance<EnumerationContext>(_ctx, getState());
  enterRule(_localctx, 34, GPULangParser::RuleEnumeration);

          antlrcpp::downCast<EnumerationContext *>(_localctx)->sym =  nullptr;
          TransientArray<FixedString> enumLabels(256);
          TransientArray<Expression*> enumValues(256);
          TransientArray<Symbol::Location> enumLocations(256);
          FixedString name;
          TypeDeclaration type = TypeDeclaration{ .type = Type::FullType{ConstantString("u32")} };
          Symbol::Location location;
          Symbol::Location labelLocation;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(444);
    match(GPULangParser::T__9);
    setState(445);
    antlrcpp::downCast<EnumerationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     name = FixedString((antlrcpp::downCast<EnumerationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<EnumerationContext *>(_localctx)->name->getText() : "")); location = SetupFile(); 
    setState(451);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::COL) {
      setState(447);
      match(GPULangParser::COL);
      setState(448);
      antlrcpp::downCast<EnumerationContext *>(_localctx)->typeDeclarationContext = typeDeclaration();
       type = antlrcpp::downCast<EnumerationContext *>(_localctx)->typeDeclarationContext->type; 
    }
    setState(453);
    match(GPULangParser::LB);
    setState(483);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::IDENTIFIER: {
        setState(454);
        antlrcpp::downCast<EnumerationContext *>(_localctx)->label = match(GPULangParser::IDENTIFIER);
         Expression* expr = nullptr; labelLocation = SetupFile(); 
        setState(460);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GPULangParser::EQ) {
          setState(456);
          match(GPULangParser::EQ);
          setState(457);
          antlrcpp::downCast<EnumerationContext *>(_localctx)->value = expression(0);
           expr = antlrcpp::downCast<EnumerationContext *>(_localctx)->value->tree; 
        }

                        enumLabels.Append(FixedString((antlrcpp::downCast<EnumerationContext *>(_localctx)->label != nullptr ? antlrcpp::downCast<EnumerationContext *>(_localctx)->label->getText() : "")));
                        enumValues.Append(expr);
                        enumLocations.Append(labelLocation);
                    
        setState(464);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
        case 1: {
          setState(463);
          linePreprocessorEntry();
          break;
        }

        default:
          break;
        }
        setState(479);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == GPULangParser::T__2

        || _la == GPULangParser::CO) {
          setState(477);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case GPULangParser::CO: {
              setState(466);
              match(GPULangParser::CO);
              setState(467);
              antlrcpp::downCast<EnumerationContext *>(_localctx)->label = match(GPULangParser::IDENTIFIER);
               if (enumLabels.Full()) { throw IndexOutOfBoundsException("Maximum of 256 enum labels"); } Expression* expr = nullptr; labelLocation = SetupFile(); 
              setState(473);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == GPULangParser::EQ) {
                setState(469);
                match(GPULangParser::EQ);
                setState(470);
                antlrcpp::downCast<EnumerationContext *>(_localctx)->value = expression(0);
                 expr = antlrcpp::downCast<EnumerationContext *>(_localctx)->value->tree; 
              }

                                  enumLabels.Append(FixedString((antlrcpp::downCast<EnumerationContext *>(_localctx)->label != nullptr ? antlrcpp::downCast<EnumerationContext *>(_localctx)->label->getText() : "")));
                                  enumValues.Append(expr);
                                  enumLocations.Append(labelLocation);
                              
              break;
            }

            case GPULangParser::T__2: {
              setState(476);
              linePreprocessorEntry();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(481);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case GPULangParser::T__2: {
        setState(482);
        linePreprocessorEntry();
        break;
      }

      case GPULangParser::RB: {
        break;
      }

    default:
      break;
    }
    setState(485);
    match(GPULangParser::RB);

            antlrcpp::downCast<EnumerationContext *>(_localctx)->sym =  Alloc<Enumeration>();
            _localctx->sym->name = name;
            _localctx->sym->type = type.type;
            _localctx->sym->type.literal = true;
            _localctx->sym->labels = enumLabels;
            _localctx->sym->values = enumValues;
            _localctx->sym->labelLocations = enumLocations;
            _localctx->sym->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterContext ------------------------------------------------------------------

GPULangParser::ParameterContext::ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ParameterContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::ParameterContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

tree::TerminalNode* GPULangParser::ParameterContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::ParameterContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::ParameterContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::ParameterContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::ParameterContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

tree::TerminalNode* GPULangParser::ParameterContext::EQ() {
  return getToken(GPULangParser::EQ, 0);
}

GPULangParser::ExpressionContext* GPULangParser::ParameterContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}


size_t GPULangParser::ParameterContext::getRuleIndex() const {
  return GPULangParser::RuleParameter;
}

void GPULangParser::ParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter(this);
}

void GPULangParser::ParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter(this);
}

GPULangParser::ParameterContext* GPULangParser::parameter() {
  ParameterContext *_localctx = _tracker.createInstance<ParameterContext>(_ctx, getState());
  enterRule(_localctx, 36, GPULangParser::RuleParameter);

          TransientArray<Attribute*> attributes(32);
          FixedString name;
          Expression* valueExpression = nullptr;
          Symbol::Location location;
          TypeDeclaration type = TypeDeclaration{ .type = Type::FullType{UNDEFINED_TYPE} };
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(491);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2) {
      setState(488);
      linePreprocessorEntry();
      setState(493);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(499);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(494);
        antlrcpp::downCast<ParameterContext *>(_localctx)->attributeContext = attribute();
         if (attributes.Full()) { throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); } attributes.Append(std::move(antlrcpp::downCast<ParameterContext *>(_localctx)->attributeContext->attr));  
      }
      setState(501);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx);
    }
    setState(502);
    antlrcpp::downCast<ParameterContext *>(_localctx)->varName = match(GPULangParser::IDENTIFIER);
     name = FixedString((antlrcpp::downCast<ParameterContext *>(_localctx)->varName != nullptr ? antlrcpp::downCast<ParameterContext *>(_localctx)->varName->getText() : "")); location = SetupFile(); 
    setState(504);
    match(GPULangParser::COL);
    setState(505);
    antlrcpp::downCast<ParameterContext *>(_localctx)->typeDeclarationContext = typeDeclaration();
     type = antlrcpp::downCast<ParameterContext *>(_localctx)->typeDeclarationContext->type; 
    setState(511);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::EQ) {
      setState(507);
      match(GPULangParser::EQ);
      setState(508);
      antlrcpp::downCast<ParameterContext *>(_localctx)->valueExpr = expression(0);
       valueExpression = antlrcpp::downCast<ParameterContext *>(_localctx)->valueExpr->tree; 
    }

                antlrcpp::downCast<ParameterContext *>(_localctx)->sym =  Alloc<Variable>(); 
                _localctx->sym->type = type.type; 
                _localctx->sym->typeLocation = type.location;
                _localctx->sym->location = location; 
                _localctx->sym->attributes = std::move(attributes);
                _localctx->sym->name = name;
                _localctx->sym->valueExpression = valueExpression;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDeclarationContext ------------------------------------------------------------------

GPULangParser::FunctionDeclarationContext::FunctionDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::FunctionDeclarationContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::FunctionDeclarationContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::FunctionDeclarationContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

std::vector<GPULangParser::ParameterContext *> GPULangParser::FunctionDeclarationContext::parameter() {
  return getRuleContexts<GPULangParser::ParameterContext>();
}

GPULangParser::ParameterContext* GPULangParser::FunctionDeclarationContext::parameter(size_t i) {
  return getRuleContext<GPULangParser::ParameterContext>(i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::FunctionDeclarationContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::FunctionDeclarationContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::FunctionDeclarationContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::FunctionDeclarationContext::getRuleIndex() const {
  return GPULangParser::RuleFunctionDeclaration;
}

void GPULangParser::FunctionDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionDeclaration(this);
}

void GPULangParser::FunctionDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionDeclaration(this);
}

GPULangParser::FunctionDeclarationContext* GPULangParser::functionDeclaration() {
  FunctionDeclarationContext *_localctx = _tracker.createInstance<FunctionDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 38, GPULangParser::RuleFunctionDeclaration);

          antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->sym =  nullptr;
          TransientArray<Variable*> variables(32);
          TransientArray<Attribute*> attributes(32);
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(520);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(515);
        antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->attributeContext = attribute();
         if (attributes.Full()) { throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); } attributes.Append(std::move(antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->attributeContext->attr));  
      }
      setState(522);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx);
    }
    setState(523);
    antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     location = SetupFile(); 
    setState(525);
    match(GPULangParser::LP);
    setState(541);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2 || _la == GPULangParser::IDENTIFIER) {
      setState(526);
      antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->arg0 = parameter();
       variables.Append(antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->arg0->sym); 
      setState(529);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
      case 1: {
        setState(528);
        linePreprocessorEntry();
        break;
      }

      default:
        break;
      }
      setState(538);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GPULangParser::T__2

      || _la == GPULangParser::CO) {
        setState(536);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case GPULangParser::CO: {
            setState(531);
            match(GPULangParser::CO);
            setState(532);
            antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->argn = parameter();
             if (variables.Full()) throw IndexOutOfBoundsException("Maximum of 32 variables reached"); variables.Append(antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->argn->sym); 
            break;
          }

          case GPULangParser::T__2: {
            setState(535);
            linePreprocessorEntry();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(540);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(543);
    match(GPULangParser::RP);
    setState(544);
    antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->returnType = typeDeclaration();

            antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->sym =  Alloc<Function>(); 
            _localctx->sym->hasBody = false;
            _localctx->sym->location = location;
            _localctx->sym->returnType = antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->returnType->type.type; 
            _localctx->sym->returnTypeLocation = antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->returnType->type.location;
            _localctx->sym->name = (antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->name->getText() : ""); 
            _localctx->sym->parameters = variables; 
            _localctx->sym->attributes = attributes;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionContext ------------------------------------------------------------------

GPULangParser::FunctionContext::FunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::FunctionDeclarationContext* GPULangParser::FunctionContext::functionDeclaration() {
  return getRuleContext<GPULangParser::FunctionDeclarationContext>(0);
}

GPULangParser::ScopeStatementContext* GPULangParser::FunctionContext::scopeStatement() {
  return getRuleContext<GPULangParser::ScopeStatementContext>(0);
}


size_t GPULangParser::FunctionContext::getRuleIndex() const {
  return GPULangParser::RuleFunction;
}

void GPULangParser::FunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction(this);
}

void GPULangParser::FunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction(this);
}

GPULangParser::FunctionContext* GPULangParser::function() {
  FunctionContext *_localctx = _tracker.createInstance<FunctionContext>(_ctx, getState());
  enterRule(_localctx, 40, GPULangParser::RuleFunction);

          antlrcpp::downCast<FunctionContext *>(_localctx)->sym =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(547);
    antlrcpp::downCast<FunctionContext *>(_localctx)->functionDeclarationContext = functionDeclaration();
     antlrcpp::downCast<FunctionContext *>(_localctx)->sym =  antlrcpp::downCast<FunctionContext *>(_localctx)->functionDeclarationContext->sym; 
    setState(549);
    antlrcpp::downCast<FunctionContext *>(_localctx)->scopeStatementContext = scopeStatement();

            _localctx->sym->hasBody = true;
            _localctx->sym->ast = antlrcpp::downCast<FunctionContext *>(_localctx)->scopeStatementContext->tree;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

GPULangParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ProgramContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::ProgramContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::ProgramContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<GPULangParser::AnnotationContext *> GPULangParser::ProgramContext::annotation() {
  return getRuleContexts<GPULangParser::AnnotationContext>();
}

GPULangParser::AnnotationContext* GPULangParser::ProgramContext::annotation(size_t i) {
  return getRuleContext<GPULangParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::ProgramContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::ProgramContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::ProgramContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::ProgramContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::ProgramContext::getRuleIndex() const {
  return GPULangParser::RuleProgram;
}

void GPULangParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void GPULangParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}

GPULangParser::ProgramContext* GPULangParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 42, GPULangParser::RuleProgram);

          antlrcpp::downCast<ProgramContext *>(_localctx)->sym =  nullptr;
          TransientArray<Expression*> entries(32);
          TransientArray<Annotation*> annotations(32);
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(557);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::SOBAKA) {
      setState(552);
      antlrcpp::downCast<ProgramContext *>(_localctx)->annotationContext = annotation();
       if (annotations.Full()) { throw IndexOutOfBoundsException("Maximum of 32 annotations reached"); } annotations.Append(std::move(antlrcpp::downCast<ProgramContext *>(_localctx)->annotationContext->annot)); 
      setState(559);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(560);
    match(GPULangParser::T__10);
     antlrcpp::downCast<ProgramContext *>(_localctx)->sym =  Alloc<Program>(); 
    setState(562);
    antlrcpp::downCast<ProgramContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     _localctx->sym->location = SetupFile(); 
    setState(564);
    match(GPULangParser::LB);
    setState(571);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3464544097497251854) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 7787) != 0)) {
      setState(565);
      antlrcpp::downCast<ProgramContext *>(_localctx)->assignment = expression(0);
       if (entries.Full()) throw IndexOutOfBoundsException("Maximum of 32 entries reached"); entries.Append(antlrcpp::downCast<ProgramContext *>(_localctx)->assignment->tree); 
      setState(567);
      match(GPULangParser::SC);
      setState(573);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(574);
    match(GPULangParser::RB);
     
            _localctx->sym->name = (antlrcpp::downCast<ProgramContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<ProgramContext *>(_localctx)->name->getText() : "");
            _localctx->sym->annotations = annotations;
            _localctx->sym->entries = entries;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SamplerContext ------------------------------------------------------------------

GPULangParser::SamplerContext::SamplerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::SamplerContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::SamplerContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::SamplerContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::SamplerContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::SamplerContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::SamplerContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::SamplerContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}

std::vector<GPULangParser::AnnotationContext *> GPULangParser::SamplerContext::annotation() {
  return getRuleContexts<GPULangParser::AnnotationContext>();
}

GPULangParser::AnnotationContext* GPULangParser::SamplerContext::annotation(size_t i) {
  return getRuleContext<GPULangParser::AnnotationContext>(i);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::SamplerContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::SamplerContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}


size_t GPULangParser::SamplerContext::getRuleIndex() const {
  return GPULangParser::RuleSampler;
}

void GPULangParser::SamplerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSampler(this);
}

void GPULangParser::SamplerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSampler(this);
}

GPULangParser::SamplerContext* GPULangParser::sampler() {
  SamplerContext *_localctx = _tracker.createInstance<SamplerContext>(_ctx, getState());
  enterRule(_localctx, 44, GPULangParser::RuleSampler);

          TransientArray<Attribute*> attributes(32);
          TransientArray<Annotation*> annotations(32);
          TransientArray<Expression*> entries(32);
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(582);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::SOBAKA) {
      setState(577);
      antlrcpp::downCast<SamplerContext *>(_localctx)->annotationContext = annotation();
       if (annotations.Full()) throw IndexOutOfBoundsException("Maximum of 32 annotations reached"); annotations.Append(std::move(antlrcpp::downCast<SamplerContext *>(_localctx)->annotationContext->annot)); 
      setState(584);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(590);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::IDENTIFIER) {
      setState(585);
      antlrcpp::downCast<SamplerContext *>(_localctx)->attributeContext = attribute();
       if (attributes.Full()) throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); attributes.Append(std::move(antlrcpp::downCast<SamplerContext *>(_localctx)->attributeContext->attr)); 
      setState(592);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(593);
    match(GPULangParser::T__11);
     antlrcpp::downCast<SamplerContext *>(_localctx)->sym =  Alloc<SamplerState>(); _localctx->sym->isImmutable = true; 
    setState(596);
    antlrcpp::downCast<SamplerContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     _localctx->sym->location = SetupFile(); 
    setState(598);
    match(GPULangParser::LB);
    setState(605);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3464544097497251854) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 7787) != 0)) {
      setState(599);
      antlrcpp::downCast<SamplerContext *>(_localctx)->assign = expression(0);
       if (entries.Full()) throw IndexOutOfBoundsException("Maximum of 32 entries reached"); entries.Append(antlrcpp::downCast<SamplerContext *>(_localctx)->assign->tree); 
      setState(601);
      match(GPULangParser::SC);
      setState(607);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(608);
    match(GPULangParser::RB);

            _localctx->sym->name = (antlrcpp::downCast<SamplerContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<SamplerContext *>(_localctx)->name->getText() : "");
            _localctx->sym->attributes = attributes;
            _localctx->sym->annotations = annotations;
            _localctx->sym->entries = entries;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StateContext ------------------------------------------------------------------

GPULangParser::StateContext::StateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::StateContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::StateContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::StateContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::StateContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::StateContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::StateContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::StateContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::StateContext::getRuleIndex() const {
  return GPULangParser::RuleState;
}

void GPULangParser::StateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterState(this);
}

void GPULangParser::StateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitState(this);
}

GPULangParser::StateContext* GPULangParser::state() {
  StateContext *_localctx = _tracker.createInstance<StateContext>(_ctx, getState());
  enterRule(_localctx, 46, GPULangParser::RuleState);

          TransientArray<Expression*> entries(32);
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(611);
    match(GPULangParser::T__12);
     antlrcpp::downCast<StateContext *>(_localctx)->sym =  Alloc<RenderState>(); 
    setState(614);
    antlrcpp::downCast<StateContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     _localctx->sym->location = SetupFile(); 
    setState(616);
    match(GPULangParser::LB);
    setState(623);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3464544097497251854) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 7787) != 0)) {
      setState(617);
      antlrcpp::downCast<StateContext *>(_localctx)->assign = expression(0);
       if (entries.Full()) throw IndexOutOfBoundsException("Maximum of 32 entries reached"); entries.Append(antlrcpp::downCast<StateContext *>(_localctx)->assign->tree); 
      setState(619);
      match(GPULangParser::SC);
      setState(625);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(626);
    match(GPULangParser::RB);

            _localctx->sym->name = (antlrcpp::downCast<StateContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<StateContext *>(_localctx)->name->getText() : "");
            _localctx->sym->entries = entries;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

GPULangParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::IfStatementContext* GPULangParser::StatementContext::ifStatement() {
  return getRuleContext<GPULangParser::IfStatementContext>(0);
}

GPULangParser::ScopeStatementContext* GPULangParser::StatementContext::scopeStatement() {
  return getRuleContext<GPULangParser::ScopeStatementContext>(0);
}

GPULangParser::ForStatementContext* GPULangParser::StatementContext::forStatement() {
  return getRuleContext<GPULangParser::ForStatementContext>(0);
}

GPULangParser::WhileStatementContext* GPULangParser::StatementContext::whileStatement() {
  return getRuleContext<GPULangParser::WhileStatementContext>(0);
}

GPULangParser::SwitchStatementContext* GPULangParser::StatementContext::switchStatement() {
  return getRuleContext<GPULangParser::SwitchStatementContext>(0);
}

GPULangParser::TerminateStatementContext* GPULangParser::StatementContext::terminateStatement() {
  return getRuleContext<GPULangParser::TerminateStatementContext>(0);
}

GPULangParser::ContinueStatementContext* GPULangParser::StatementContext::continueStatement() {
  return getRuleContext<GPULangParser::ContinueStatementContext>(0);
}

GPULangParser::BreakStatementContext* GPULangParser::StatementContext::breakStatement() {
  return getRuleContext<GPULangParser::BreakStatementContext>(0);
}

GPULangParser::ExpressionStatementContext* GPULangParser::StatementContext::expressionStatement() {
  return getRuleContext<GPULangParser::ExpressionStatementContext>(0);
}

tree::TerminalNode* GPULangParser::StatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::StatementContext::getRuleIndex() const {
  return GPULangParser::RuleStatement;
}

void GPULangParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void GPULangParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

GPULangParser::StatementContext* GPULangParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 48, GPULangParser::RuleStatement);

          antlrcpp::downCast<StatementContext *>(_localctx)->tree =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(657);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__6: {
        enterOuterAlt(_localctx, 1);
        setState(629);
        antlrcpp::downCast<StatementContext *>(_localctx)->ifStatementContext = ifStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->ifStatementContext->tree; 
        break;
      }

      case GPULangParser::LB: {
        enterOuterAlt(_localctx, 2);
        setState(632);
        antlrcpp::downCast<StatementContext *>(_localctx)->scopeStatementContext = scopeStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->scopeStatementContext->tree; 
        break;
      }

      case GPULangParser::T__13: {
        enterOuterAlt(_localctx, 3);
        setState(635);
        antlrcpp::downCast<StatementContext *>(_localctx)->forStatementContext = forStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->forStatementContext->tree; 
        break;
      }

      case GPULangParser::T__16:
      case GPULangParser::T__17: {
        enterOuterAlt(_localctx, 4);
        setState(638);
        antlrcpp::downCast<StatementContext *>(_localctx)->whileStatementContext = whileStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->whileStatementContext->tree; 
        break;
      }

      case GPULangParser::T__23: {
        enterOuterAlt(_localctx, 5);
        setState(641);
        antlrcpp::downCast<StatementContext *>(_localctx)->switchStatementContext = switchStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->switchStatementContext->tree; 
        break;
      }

      case GPULangParser::T__18:
      case GPULangParser::T__19:
      case GPULangParser::T__20:
      case GPULangParser::T__21: {
        enterOuterAlt(_localctx, 6);
        setState(644);
        antlrcpp::downCast<StatementContext *>(_localctx)->terminateStatementContext = terminateStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->terminateStatementContext->tree; 
        break;
      }

      case GPULangParser::T__22: {
        enterOuterAlt(_localctx, 7);
        setState(647);
        antlrcpp::downCast<StatementContext *>(_localctx)->continueStatementContext = continueStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->continueStatementContext->tree; 
        break;
      }

      case GPULangParser::T__26: {
        enterOuterAlt(_localctx, 8);
        setState(650);
        antlrcpp::downCast<StatementContext *>(_localctx)->breakStatementContext = breakStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->breakStatementContext->tree; 
        break;
      }

      case GPULangParser::T__0:
      case GPULangParser::T__1:
      case GPULangParser::T__2:
      case GPULangParser::T__27:
      case GPULangParser::T__28:
      case GPULangParser::T__38:
      case GPULangParser::LP:
      case GPULangParser::LL:
      case GPULangParser::NOT:
      case GPULangParser::QO:
      case GPULangParser::CONJUGATE:
      case GPULangParser::Q:
      case GPULangParser::ADD_OP:
      case GPULangParser::SUB_OP:
      case GPULangParser::MUL_OP:
      case GPULangParser::INTEGERLITERAL:
      case GPULangParser::UINTEGERLITERAL:
      case GPULangParser::FLOATLITERAL:
      case GPULangParser::DOUBLELITERAL:
      case GPULangParser::HEX:
      case GPULangParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 9);
        setState(653);
        antlrcpp::downCast<StatementContext *>(_localctx)->expressionStatementContext = expressionStatement();
        setState(654);
        match(GPULangParser::SC);
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->expressionStatementContext->tree; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

GPULangParser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::ExpressionListContext* GPULangParser::ExpressionStatementContext::expressionList() {
  return getRuleContext<GPULangParser::ExpressionListContext>(0);
}


size_t GPULangParser::ExpressionStatementContext::getRuleIndex() const {
  return GPULangParser::RuleExpressionStatement;
}

void GPULangParser::ExpressionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement(this);
}

void GPULangParser::ExpressionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement(this);
}

GPULangParser::ExpressionStatementContext* GPULangParser::expressionStatement() {
  ExpressionStatementContext *_localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
  enterRule(_localctx, 50, GPULangParser::RuleExpressionStatement);

          antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->tree =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(659);
    antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->expressionListContext = expressionList();

            antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->tree =  Alloc<ExpressionStatement>(antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->expressionListContext->expressions);
            _localctx->tree->location = antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->expressionListContext->expressions[0]->location; 
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStatementContext ------------------------------------------------------------------

GPULangParser::IfStatementContext::IfStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::IfStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::IfStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::IfStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

std::vector<GPULangParser::StatementContext *> GPULangParser::IfStatementContext::statement() {
  return getRuleContexts<GPULangParser::StatementContext>();
}

GPULangParser::StatementContext* GPULangParser::IfStatementContext::statement(size_t i) {
  return getRuleContext<GPULangParser::StatementContext>(i);
}


size_t GPULangParser::IfStatementContext::getRuleIndex() const {
  return GPULangParser::RuleIfStatement;
}

void GPULangParser::IfStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfStatement(this);
}

void GPULangParser::IfStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfStatement(this);
}

GPULangParser::IfStatementContext* GPULangParser::ifStatement() {
  IfStatementContext *_localctx = _tracker.createInstance<IfStatementContext>(_ctx, getState());
  enterRule(_localctx, 52, GPULangParser::RuleIfStatement);

          antlrcpp::downCast<IfStatementContext *>(_localctx)->tree =  nullptr;
          Expression* condition = nullptr;
          Statement* ifBody = nullptr;
          Statement* elseBody = nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(662);
    match(GPULangParser::T__6);
     location = SetupFile(); 
    setState(664);
    match(GPULangParser::LP);
    setState(665);
    antlrcpp::downCast<IfStatementContext *>(_localctx)->condition = expression(0);
     condition = antlrcpp::downCast<IfStatementContext *>(_localctx)->condition->tree; 
    setState(667);
    match(GPULangParser::RP);
    setState(668);
    antlrcpp::downCast<IfStatementContext *>(_localctx)->ifBody = statement();
     ifBody = antlrcpp::downCast<IfStatementContext *>(_localctx)->ifBody->tree; 
    setState(674);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      setState(670);
      match(GPULangParser::T__7);
      setState(671);
      antlrcpp::downCast<IfStatementContext *>(_localctx)->elseBody = statement();
       elseBody = antlrcpp::downCast<IfStatementContext *>(_localctx)->elseBody->tree; 
      break;
    }

    default:
      break;
    }

            antlrcpp::downCast<IfStatementContext *>(_localctx)->tree =  Alloc<IfStatement>(condition, ifBody, elseBody);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementContext ------------------------------------------------------------------

GPULangParser::ForStatementContext::ForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ForStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::ForStatementContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::ForStatementContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

tree::TerminalNode* GPULangParser::ForStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::StatementContext* GPULangParser::ForStatementContext::statement() {
  return getRuleContext<GPULangParser::StatementContext>(0);
}

GPULangParser::VariablesContext* GPULangParser::ForStatementContext::variables() {
  return getRuleContext<GPULangParser::VariablesContext>(0);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::ForStatementContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::ForStatementContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::ForStatementContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::ForStatementContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::ForStatementContext::getRuleIndex() const {
  return GPULangParser::RuleForStatement;
}

void GPULangParser::ForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatement(this);
}

void GPULangParser::ForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatement(this);
}

GPULangParser::ForStatementContext* GPULangParser::forStatement() {
  ForStatementContext *_localctx = _tracker.createInstance<ForStatementContext>(_ctx, getState());
  enterRule(_localctx, 54, GPULangParser::RuleForStatement);

          antlrcpp::downCast<ForStatementContext *>(_localctx)->tree =  nullptr;
          FixedArray<Variable*> declarations;
          Expression* conditionExpression = nullptr;
          Expression* loopExpression = nullptr;
          Statement* contents = nullptr;
          TransientArray<Attribute*> attributes(32);
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(678);
    match(GPULangParser::T__13);
     location = SetupFile(); 
    setState(680);
    match(GPULangParser::LP);
    setState(684);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2 || _la == GPULangParser::SOBAKA

    || _la == GPULangParser::IDENTIFIER) {
      setState(681);
      antlrcpp::downCast<ForStatementContext *>(_localctx)->variablesContext = variables();
       declarations = antlrcpp::downCast<ForStatementContext *>(_localctx)->variablesContext->vars; 
    }
    setState(686);
    match(GPULangParser::SC);
    setState(690);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3464544097497251854) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 7787) != 0)) {
      setState(687);
      antlrcpp::downCast<ForStatementContext *>(_localctx)->condition = expression(0);
       conditionExpression = antlrcpp::downCast<ForStatementContext *>(_localctx)->condition->tree; 
    }
    setState(692);
    match(GPULangParser::SC);
    setState(696);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3464544097497251854) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 7787) != 0)) {
      setState(693);
      antlrcpp::downCast<ForStatementContext *>(_localctx)->loop = expression(0);
       loopExpression = antlrcpp::downCast<ForStatementContext *>(_localctx)->loop->tree; 
    }
    setState(698);
    match(GPULangParser::RP);
    setState(704);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(699);
        antlrcpp::downCast<ForStatementContext *>(_localctx)->attributeContext = attribute();
         if (attributes.Full()) { throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); } attributes.Append(std::move(antlrcpp::downCast<ForStatementContext *>(_localctx)->attributeContext->attr));  
      }
      setState(706);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
    }
    setState(707);
    antlrcpp::downCast<ForStatementContext *>(_localctx)->content = statement();
     contents = antlrcpp::downCast<ForStatementContext *>(_localctx)->content->tree; 

            antlrcpp::downCast<ForStatementContext *>(_localctx)->tree =  Alloc<ForStatement>(declarations, conditionExpression, loopExpression, contents);
            _localctx->tree->location = location;
            _localctx->tree->attributes = std::move(attributes);
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForRangeStatementContext ------------------------------------------------------------------

GPULangParser::ForRangeStatementContext::ForRangeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::ForRangeStatementContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

GPULangParser::StatementContext* GPULangParser::ForRangeStatementContext::statement() {
  return getRuleContext<GPULangParser::StatementContext>(0);
}


size_t GPULangParser::ForRangeStatementContext::getRuleIndex() const {
  return GPULangParser::RuleForRangeStatement;
}

void GPULangParser::ForRangeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForRangeStatement(this);
}

void GPULangParser::ForRangeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForRangeStatement(this);
}

GPULangParser::ForRangeStatementContext* GPULangParser::forRangeStatement() {
  ForRangeStatementContext *_localctx = _tracker.createInstance<ForRangeStatementContext>(_ctx, getState());
  enterRule(_localctx, 56, GPULangParser::RuleForRangeStatement);

          antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->tree =  nullptr;
          Statement* contents = nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(711);
    match(GPULangParser::T__13);
     location = SetupFile(); 
    setState(713);
    match(GPULangParser::LP);
    setState(714);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->iterator = match(GPULangParser::IDENTIFIER);
    setState(715);
    match(GPULangParser::COL);
    setState(716);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->start = match(GPULangParser::IDENTIFIER);
    setState(717);
    match(GPULangParser::T__14);
    setState(718);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->end = match(GPULangParser::IDENTIFIER);
    setState(719);
    match(GPULangParser::RP);
    setState(720);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->content = statement();
     contents = antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->content->tree; 


        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForUniformValueStatementContext ------------------------------------------------------------------

GPULangParser::ForUniformValueStatementContext::ForUniformValueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ForUniformValueStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::ForUniformValueStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

tree::TerminalNode* GPULangParser::ForUniformValueStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::StatementContext* GPULangParser::ForUniformValueStatementContext::statement() {
  return getRuleContext<GPULangParser::StatementContext>(0);
}


size_t GPULangParser::ForUniformValueStatementContext::getRuleIndex() const {
  return GPULangParser::RuleForUniformValueStatement;
}

void GPULangParser::ForUniformValueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForUniformValueStatement(this);
}

void GPULangParser::ForUniformValueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForUniformValueStatement(this);
}

GPULangParser::ForUniformValueStatementContext* GPULangParser::forUniformValueStatement() {
  ForUniformValueStatementContext *_localctx = _tracker.createInstance<ForUniformValueStatementContext>(_ctx, getState());
  enterRule(_localctx, 58, GPULangParser::RuleForUniformValueStatement);

          antlrcpp::downCast<ForUniformValueStatementContext *>(_localctx)->tree =  nullptr;
          Statement* contents = nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(724);
    match(GPULangParser::T__15);
     location = SetupFile(); 
    setState(726);
    match(GPULangParser::LP);
    setState(727);
    expression(0);
    setState(728);
    match(GPULangParser::RP);
    setState(729);
    antlrcpp::downCast<ForUniformValueStatementContext *>(_localctx)->content = statement();
     contents = antlrcpp::downCast<ForUniformValueStatementContext *>(_localctx)->content->tree; 

        
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementContext ------------------------------------------------------------------

GPULangParser::WhileStatementContext::WhileStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::WhileStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::WhileStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::WhileStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

GPULangParser::StatementContext* GPULangParser::WhileStatementContext::statement() {
  return getRuleContext<GPULangParser::StatementContext>(0);
}

tree::TerminalNode* GPULangParser::WhileStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::WhileStatementContext::getRuleIndex() const {
  return GPULangParser::RuleWhileStatement;
}

void GPULangParser::WhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatement(this);
}

void GPULangParser::WhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatement(this);
}

GPULangParser::WhileStatementContext* GPULangParser::whileStatement() {
  WhileStatementContext *_localctx = _tracker.createInstance<WhileStatementContext>(_ctx, getState());
  enterRule(_localctx, 60, GPULangParser::RuleWhileStatement);

          antlrcpp::downCast<WhileStatementContext *>(_localctx)->tree =  nullptr;
          Expression* conditionExpression = nullptr;
          Statement* contents = nullptr;
          bool isDoWhile = false;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(755);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__16: {
        enterOuterAlt(_localctx, 1);
        setState(733);
        match(GPULangParser::T__16);
         location = SetupFile(); 
        setState(735);
        match(GPULangParser::LP);
        setState(736);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition = expression(0);
         conditionExpression = antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition->tree; 
        setState(738);
        match(GPULangParser::RP);
        setState(739);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->content = statement();
         contents = antlrcpp::downCast<WhileStatementContext *>(_localctx)->content->tree; 

                antlrcpp::downCast<WhileStatementContext *>(_localctx)->tree =  Alloc<WhileStatement>(conditionExpression, contents, isDoWhile);
                _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__17: {
        enterOuterAlt(_localctx, 2);
        setState(743);
        match(GPULangParser::T__17);
         location = SetupFile(); 
        setState(745);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->content = statement();
         contents = antlrcpp::downCast<WhileStatementContext *>(_localctx)->content->tree; isDoWhile = true; 
        setState(747);
        match(GPULangParser::T__16);
        setState(748);
        match(GPULangParser::LP);
        setState(749);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition = expression(0);
         conditionExpression = antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition->tree; 
        setState(751);
        match(GPULangParser::RP);
        setState(752);
        match(GPULangParser::SC);

                antlrcpp::downCast<WhileStatementContext *>(_localctx)->tree =  Alloc<WhileStatement>(conditionExpression, contents, isDoWhile);
                _localctx->tree->location = location;
            
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScopeStatementContext ------------------------------------------------------------------

GPULangParser::ScopeStatementContext::ScopeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ScopeStatementContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::ScopeStatementContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<GPULangParser::VariablesContext *> GPULangParser::ScopeStatementContext::variables() {
  return getRuleContexts<GPULangParser::VariablesContext>();
}

GPULangParser::VariablesContext* GPULangParser::ScopeStatementContext::variables(size_t i) {
  return getRuleContext<GPULangParser::VariablesContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::ScopeStatementContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::ScopeStatementContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::StatementContext *> GPULangParser::ScopeStatementContext::statement() {
  return getRuleContexts<GPULangParser::StatementContext>();
}

GPULangParser::StatementContext* GPULangParser::ScopeStatementContext::statement(size_t i) {
  return getRuleContext<GPULangParser::StatementContext>(i);
}

std::vector<GPULangParser::AliasContext *> GPULangParser::ScopeStatementContext::alias() {
  return getRuleContexts<GPULangParser::AliasContext>();
}

GPULangParser::AliasContext* GPULangParser::ScopeStatementContext::alias(size_t i) {
  return getRuleContext<GPULangParser::AliasContext>(i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::ScopeStatementContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::ScopeStatementContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}


size_t GPULangParser::ScopeStatementContext::getRuleIndex() const {
  return GPULangParser::RuleScopeStatement;
}

void GPULangParser::ScopeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScopeStatement(this);
}

void GPULangParser::ScopeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScopeStatement(this);
}

GPULangParser::ScopeStatementContext* GPULangParser::scopeStatement() {
  ScopeStatementContext *_localctx = _tracker.createInstance<ScopeStatementContext>(_ctx, getState());
  enterRule(_localctx, 62, GPULangParser::RuleScopeStatement);

          antlrcpp::downCast<ScopeStatementContext *>(_localctx)->tree =  nullptr;
          PinnedArray<Symbol*> contents(0xFFFFFF);
  	    std::vector<Expression*> unfinished;
          Symbol::Location location;
          Symbol::Location ends;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(757);
    match(GPULangParser::LB);
     location = SetupFile(); 
    setState(773);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3464579282036998302) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 15575) != 0)) {
      setState(771);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
      case 1: {
        setState(759);
        antlrcpp::downCast<ScopeStatementContext *>(_localctx)->variablesContext = variables();
        setState(760);
        match(GPULangParser::SC);
         for(Variable* var : antlrcpp::downCast<ScopeStatementContext *>(_localctx)->variablesContext->vars) { contents.Append(var); } 
        break;
      }

      case 2: {
        setState(763);
        antlrcpp::downCast<ScopeStatementContext *>(_localctx)->statementContext = statement();
         contents.Append(antlrcpp::downCast<ScopeStatementContext *>(_localctx)->statementContext->tree); 
        break;
      }

      case 3: {
        setState(766);
        antlrcpp::downCast<ScopeStatementContext *>(_localctx)->aliasContext = alias();
        setState(767);
        match(GPULangParser::SC);
         contents.Append(antlrcpp::downCast<ScopeStatementContext *>(_localctx)->aliasContext->sym); 
        break;
      }

      case 4: {
        setState(770);
        linePreprocessorEntry();
        break;
      }

      default:
        break;
      }
      setState(775);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(776);
    match(GPULangParser::RB);
     ends = SetupFile(); 

            antlrcpp::downCast<ScopeStatementContext *>(_localctx)->tree =  Alloc<ScopeStatement>(std::move(contents), unfinished);
            _localctx->tree->ends = ends;
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TerminateStatementContext ------------------------------------------------------------------

GPULangParser::TerminateStatementContext::TerminateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::TerminateStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}

GPULangParser::ExpressionContext* GPULangParser::TerminateStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}


size_t GPULangParser::TerminateStatementContext::getRuleIndex() const {
  return GPULangParser::RuleTerminateStatement;
}

void GPULangParser::TerminateStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerminateStatement(this);
}

void GPULangParser::TerminateStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerminateStatement(this);
}

GPULangParser::TerminateStatementContext* GPULangParser::terminateStatement() {
  TerminateStatementContext *_localctx = _tracker.createInstance<TerminateStatementContext>(_ctx, getState());
  enterRule(_localctx, 64, GPULangParser::RuleTerminateStatement);

          antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  nullptr;
          Expression* returnValue = nullptr;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(801);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__18: {
        enterOuterAlt(_localctx, 1);
        setState(780);
        match(GPULangParser::T__18);
         location = SetupFile(); 
        setState(785);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3464544097497251854) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 75)) & 7787) != 0)) {
          setState(782);
          antlrcpp::downCast<TerminateStatementContext *>(_localctx)->value = expression(0);
           returnValue = antlrcpp::downCast<TerminateStatementContext *>(_localctx)->value->tree; 
        }
        setState(787);
        match(GPULangParser::SC);

                antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::Return);
                _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__19: {
        enterOuterAlt(_localctx, 2);
        setState(789);
        match(GPULangParser::T__19);
         location = SetupFile(); 
        setState(791);
        match(GPULangParser::SC);

              antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::Discard);
              _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__20: {
        enterOuterAlt(_localctx, 3);
        setState(793);
        match(GPULangParser::T__20);
         location = SetupFile(); 
        setState(795);
        match(GPULangParser::SC);

              antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::RayIgnoreIntersection);
              _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__21: {
        enterOuterAlt(_localctx, 4);
        setState(797);
        match(GPULangParser::T__21);
         location = SetupFile(); 
        setState(799);
        match(GPULangParser::SC);

              antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::RayTerminate);
              _localctx->tree->location = location;
            
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContinueStatementContext ------------------------------------------------------------------

GPULangParser::ContinueStatementContext::ContinueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ContinueStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::ContinueStatementContext::getRuleIndex() const {
  return GPULangParser::RuleContinueStatement;
}

void GPULangParser::ContinueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinueStatement(this);
}

void GPULangParser::ContinueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinueStatement(this);
}

GPULangParser::ContinueStatementContext* GPULangParser::continueStatement() {
  ContinueStatementContext *_localctx = _tracker.createInstance<ContinueStatementContext>(_ctx, getState());
  enterRule(_localctx, 66, GPULangParser::RuleContinueStatement);

          antlrcpp::downCast<ContinueStatementContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(803);
    match(GPULangParser::T__22);
     location = SetupFile(); 
    setState(805);
    match(GPULangParser::SC);

            antlrcpp::downCast<ContinueStatementContext *>(_localctx)->tree =  Alloc<ContinueStatement>();
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStatementContext ------------------------------------------------------------------

GPULangParser::SwitchStatementContext::SwitchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::SwitchStatementContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::SwitchStatementContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::SwitchStatementContext::COL() {
  return getTokens(GPULangParser::COL);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::COL(size_t i) {
  return getToken(GPULangParser::COL, i);
}

std::vector<GPULangParser::StatementContext *> GPULangParser::SwitchStatementContext::statement() {
  return getRuleContexts<GPULangParser::StatementContext>();
}

GPULangParser::StatementContext* GPULangParser::SwitchStatementContext::statement(size_t i) {
  return getRuleContext<GPULangParser::StatementContext>(i);
}


size_t GPULangParser::SwitchStatementContext::getRuleIndex() const {
  return GPULangParser::RuleSwitchStatement;
}

void GPULangParser::SwitchStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchStatement(this);
}

void GPULangParser::SwitchStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchStatement(this);
}

GPULangParser::SwitchStatementContext* GPULangParser::switchStatement() {
  SwitchStatementContext *_localctx = _tracker.createInstance<SwitchStatementContext>(_ctx, getState());
  enterRule(_localctx, 68, GPULangParser::RuleSwitchStatement);

          antlrcpp::downCast<SwitchStatementContext *>(_localctx)->tree =  nullptr;
          Expression* switchExpression;
          TransientArray<Expression*> caseExpressions(256);
          TransientArray<Statement*> caseStatements(256);
          Symbol::Location location;
          Statement* defaultStatement = nullptr;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(808);
    match(GPULangParser::T__23);
     location = SetupFile(); 
    setState(810);
    match(GPULangParser::LP);
    setState(811);
    antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext = expression(0);
    setState(812);
    match(GPULangParser::RP);
     switchExpression = antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext->tree; 
    setState(814);
    match(GPULangParser::LB);
    setState(826);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__24) {
      setState(815);
      match(GPULangParser::T__24);
      setState(816);
      antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext = expression(0);
      setState(817);
      match(GPULangParser::COL);
       if (caseExpressions.Full()) { throw IndexOutOfBoundsException("Maximum of 256 case expressions reached"); } caseExpressions.Append(antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext->tree); caseStatements.Append(nullptr); 
      setState(822);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3464579282036998286) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 75)) & 7787) != 0)) {
        setState(819);
        antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext = statement();
         
                            caseStatements.back() = antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext->tree;
                        
      }
      setState(828);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(836);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__25) {
      setState(829);
      match(GPULangParser::T__25);
      setState(830);
      match(GPULangParser::COL);
      setState(834);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3464579282036998286) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 75)) & 7787) != 0)) {
        setState(831);
        antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext = statement();

                            defaultStatement = antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext->tree;
                        
      }
    }
    setState(838);
    match(GPULangParser::RB);

            antlrcpp::downCast<SwitchStatementContext *>(_localctx)->tree =  Alloc<SwitchStatement>(switchExpression, std::move(caseExpressions), std::move(caseStatements), defaultStatement);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BreakStatementContext ------------------------------------------------------------------

GPULangParser::BreakStatementContext::BreakStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::BreakStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::BreakStatementContext::getRuleIndex() const {
  return GPULangParser::RuleBreakStatement;
}

void GPULangParser::BreakStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreakStatement(this);
}

void GPULangParser::BreakStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreakStatement(this);
}

GPULangParser::BreakStatementContext* GPULangParser::breakStatement() {
  BreakStatementContext *_localctx = _tracker.createInstance<BreakStatementContext>(_ctx, getState());
  enterRule(_localctx, 70, GPULangParser::RuleBreakStatement);

          antlrcpp::downCast<BreakStatementContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(841);
    match(GPULangParser::T__26);
     location = SetupFile(); 
    setState(843);
    match(GPULangParser::SC);

            antlrcpp::downCast<BreakStatementContext *>(_localctx)->tree =  Alloc<BreakStatement>();
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionListContext ------------------------------------------------------------------

GPULangParser::ExpressionListContext::ExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::ExpressionListContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::ExpressionListContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::ExpressionListContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::ExpressionListContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::ExpressionListContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::ExpressionListContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::ExpressionListContext::getRuleIndex() const {
  return GPULangParser::RuleExpressionList;
}

void GPULangParser::ExpressionListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionList(this);
}

void GPULangParser::ExpressionListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionList(this);
}

GPULangParser::ExpressionListContext* GPULangParser::expressionList() {
  ExpressionListContext *_localctx = _tracker.createInstance<ExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 72, GPULangParser::RuleExpressionList);

          TransientArray<Expression*> list(256);
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(847);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      setState(846);
      linePreprocessorEntry();
      break;
    }

    default:
      break;
    }
    setState(849);
    antlrcpp::downCast<ExpressionListContext *>(_localctx)->e1 = expression(0);
     list.Append(antlrcpp::downCast<ExpressionListContext *>(_localctx)->e1->tree); 
    setState(858);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2

    || _la == GPULangParser::CO) {
      setState(856);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case GPULangParser::CO: {
          setState(851);
          match(GPULangParser::CO);
          setState(852);
          antlrcpp::downCast<ExpressionListContext *>(_localctx)->e2 = expression(0);

                  list.Append(antlrcpp::downCast<ExpressionListContext *>(_localctx)->e2->tree);
              
          break;
        }

        case GPULangParser::T__2: {
          setState(855);
          linePreprocessorEntry();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(860);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }

            antlrcpp::downCast<ExpressionListContext *>(_localctx)->expressions =  std::move(list);
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

GPULangParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::ExpressionContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::ExpressionContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}

tree::TerminalNode* GPULangParser::ExpressionContext::SUB_OP() {
  return getToken(GPULangParser::SUB_OP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::ADD_OP() {
  return getToken(GPULangParser::ADD_OP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::NOT() {
  return getToken(GPULangParser::NOT, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::CONJUGATE() {
  return getToken(GPULangParser::CONJUGATE, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::MUL_OP() {
  return getToken(GPULangParser::MUL_OP, 0);
}

GPULangParser::BinaryexpatomContext* GPULangParser::ExpressionContext::binaryexpatom() {
  return getRuleContext<GPULangParser::BinaryexpatomContext>(0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::DOT() {
  return getToken(GPULangParser::DOT, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::ARROW() {
  return getToken(GPULangParser::ARROW, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::DIV_OP() {
  return getToken(GPULangParser::DIV_OP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::MOD() {
  return getToken(GPULangParser::MOD, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LESSEQ() {
  return getToken(GPULangParser::LESSEQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::GREATEREQ() {
  return getToken(GPULangParser::GREATEREQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LOGICEQ() {
  return getToken(GPULangParser::LOGICEQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::NOTEQ() {
  return getToken(GPULangParser::NOTEQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::AND() {
  return getToken(GPULangParser::AND, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::XOR() {
  return getToken(GPULangParser::XOR, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::OR() {
  return getToken(GPULangParser::OR, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LOGICAND() {
  return getToken(GPULangParser::LOGICAND, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LOGICOR() {
  return getToken(GPULangParser::LOGICOR, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::QU() {
  return getToken(GPULangParser::QU, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::ANDSET() {
  return getToken(GPULangParser::ANDSET, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::XORSET() {
  return getToken(GPULangParser::XORSET, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::ORSET() {
  return getToken(GPULangParser::ORSET, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::EQ() {
  return getToken(GPULangParser::EQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::ExpressionListContext* GPULangParser::ExpressionContext::expressionList() {
  return getRuleContext<GPULangParser::ExpressionListContext>(0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LL() {
  return getToken(GPULangParser::LL, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::RR() {
  return getToken(GPULangParser::RR, 0);
}


size_t GPULangParser::ExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleExpression;
}

void GPULangParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void GPULangParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}


GPULangParser::ExpressionContext* GPULangParser::expression() {
   return expression(0);
}

GPULangParser::ExpressionContext* GPULangParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GPULangParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  GPULangParser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 74;
  enterRecursionRule(_localctx, 74, GPULangParser::RuleExpression, precedence);


            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  nullptr;
            Symbol::Location location;
            FixedArray<Expression*> args;
        
    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(871);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__27:
      case GPULangParser::T__28:
      case GPULangParser::NOT:
      case GPULangParser::CONJUGATE:
      case GPULangParser::ADD_OP:
      case GPULangParser::SUB_OP:
      case GPULangParser::MUL_OP: {
        setState(864);
        antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
        _la = _input->LA(1);
        if (!(((((_la - 28) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 28)) & 1548116671070211) != 0))) {
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(865);
        antlrcpp::downCast<ExpressionContext *>(_localctx)->p = expression(14);

                antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  Alloc<UnaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), true, antlrcpp::downCast<ExpressionContext *>(_localctx)->p->tree);
                _localctx->tree->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->p->tree->location;
            
        break;
      }

      case GPULangParser::T__0:
      case GPULangParser::T__1:
      case GPULangParser::T__2:
      case GPULangParser::T__38:
      case GPULangParser::LP:
      case GPULangParser::LL:
      case GPULangParser::QO:
      case GPULangParser::Q:
      case GPULangParser::INTEGERLITERAL:
      case GPULangParser::UINTEGERLITERAL:
      case GPULangParser::FLOATLITERAL:
      case GPULangParser::DOUBLELITERAL:
      case GPULangParser::HEX:
      case GPULangParser::IDENTIFIER: {
        setState(868);
        antlrcpp::downCast<ExpressionContext *>(_localctx)->atom = binaryexpatom();
         antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->atom->tree; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(999);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(997);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(873);

          if (!(precpred(_ctx, 17))) throw FailedPredicateException(this, "precpred(_ctx, 17)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(875);
          match(GPULangParser::DOT);
           location = SetupFile(); 
          setState(877);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(18);

                            AccessExpression* expr = Alloc<AccessExpression>(_localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree, false);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(880);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(882);
          match(GPULangParser::ARROW);
           location = SetupFile(); 
          setState(884);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(17);

                            AccessExpression* expr = Alloc<AccessExpression>(_localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree, true);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(887);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(889);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 72) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 72)) & 97) != 0))) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(891);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(14);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(894);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(896);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GPULangParser::ADD_OP

          || _la == GPULangParser::SUB_OP)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(898);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(13);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(901);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(903);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GPULangParser::T__29

          || _la == GPULangParser::T__30)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(905);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(12);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(908);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(910);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 64) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 64)) & 15) != 0))) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(912);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(11);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 7: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(915);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(917);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GPULangParser::LOGICEQ

          || _la == GPULangParser::NOTEQ)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(919);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(10);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 8: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(922);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(924);
          match(GPULangParser::AND);
           location = SetupFile(); 
          setState(926);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(9);

                            BinaryExpression* expr = Alloc<BinaryExpression>('&', _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 9: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(929);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(931);
          match(GPULangParser::XOR);
           location = SetupFile(); 
          setState(933);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(8);

                            BinaryExpression* expr = Alloc<BinaryExpression>('^', _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 10: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(936);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(938);
          match(GPULangParser::OR);
           location = SetupFile(); 
          setState(940);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(7);

                            BinaryExpression* expr = Alloc<BinaryExpression>('|', _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 11: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(943);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(945);
          match(GPULangParser::LOGICAND);
           location = SetupFile(); 
          setState(947);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(6);

                            BinaryExpression* expr = Alloc<BinaryExpression>('&&', _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 12: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(950);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(952);
          match(GPULangParser::LOGICOR);
           location = SetupFile(); 
          setState(954);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(5);

                            BinaryExpression* expr = Alloc<BinaryExpression>('||', _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 13: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(957);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(958);
          match(GPULangParser::QU);
           location = SetupFile(); 
          setState(960);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->ifBody = expression(0);
          setState(961);
          match(GPULangParser::COL);
          setState(962);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->elseBody = expression(3);
           
                            TernaryExpression* expr = Alloc<TernaryExpression>(antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->ifBody->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->elseBody->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 14: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(965);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(967);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 758857082672775168) != 0))) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(969);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(2);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 15: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(972);

          if (!(precpred(_ctx, 19))) throw FailedPredicateException(this, "precpred(_ctx, 19)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(974);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GPULangParser::T__27

          || _la == GPULangParser::T__28)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 

                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  Alloc<UnaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), false, _localctx->tree);
                            _localctx->tree->location = location;
                        
          break;
        }

        case 16: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(977);

          if (!(precpred(_ctx, 18))) throw FailedPredicateException(this, "precpred(_ctx, 18)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(979);
          match(GPULangParser::LP);
           location = SetupFile(); 
          setState(984);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 3464544097497251854) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 75)) & 7787) != 0)) {
            setState(981);
            antlrcpp::downCast<ExpressionContext *>(_localctx)->list = expressionList();
             args = std::move(antlrcpp::downCast<ExpressionContext *>(_localctx)->list->expressions); 
          }
          setState(986);
          match(GPULangParser::RP);
                   
                            CallExpression* expr = Alloc<CallExpression>(_localctx->tree, std::move(args));
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 17: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(988);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(990);
          match(GPULangParser::LL);
           location = SetupFile(); 
          setState(993);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 3464544097497251854) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 75)) & 7787) != 0)) {
            setState(992);
            antlrcpp::downCast<ExpressionContext *>(_localctx)->e3 = expression(0);
          }
          setState(995);
          match(GPULangParser::RR);

                            ArrayIndexExpression* expr = Alloc<ArrayIndexExpression>(_localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e3->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        default:
          break;
        } 
      }
      setState(1001);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BinaryexpatomContext ------------------------------------------------------------------

GPULangParser::BinaryexpatomContext::BinaryexpatomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::InitializerExpressionContext* GPULangParser::BinaryexpatomContext::initializerExpression() {
  return getRuleContext<GPULangParser::InitializerExpressionContext>(0);
}

GPULangParser::ArrayInitializerExpressionContext* GPULangParser::BinaryexpatomContext::arrayInitializerExpression() {
  return getRuleContext<GPULangParser::ArrayInitializerExpressionContext>(0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::BinaryexpatomContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::INTEGERLITERAL() {
  return getToken(GPULangParser::INTEGERLITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::UINTEGERLITERAL() {
  return getToken(GPULangParser::UINTEGERLITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::FLOATLITERAL() {
  return getToken(GPULangParser::FLOATLITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::DOUBLELITERAL() {
  return getToken(GPULangParser::DOUBLELITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::HEX() {
  return getToken(GPULangParser::HEX, 0);
}

GPULangParser::StringContext* GPULangParser::BinaryexpatomContext::string() {
  return getRuleContext<GPULangParser::StringContext>(0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::BooleanContext* GPULangParser::BinaryexpatomContext::boolean() {
  return getRuleContext<GPULangParser::BooleanContext>(0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::BinaryexpatomContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}


size_t GPULangParser::BinaryexpatomContext::getRuleIndex() const {
  return GPULangParser::RuleBinaryexpatom;
}

void GPULangParser::BinaryexpatomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinaryexpatom(this);
}

void GPULangParser::BinaryexpatomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinaryexpatom(this);
}

GPULangParser::BinaryexpatomContext* GPULangParser::binaryexpatom() {
  BinaryexpatomContext *_localctx = _tracker.createInstance<BinaryexpatomContext>(_ctx, getState());
  enterRule(_localctx, 76, GPULangParser::RuleBinaryexpatom);

          antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  nullptr;
          Symbol::Location begin = BeginLocationRange();
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1038);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1002);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->initializerExpressionContext = initializerExpression();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->initializerExpressionContext->tree; 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1005);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->arrayInitializerExpressionContext = arrayInitializerExpression();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->arrayInitializerExpressionContext->tree; 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1008);
      match(GPULangParser::LP);
      setState(1009);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->expressionContext = expression(0);
      setState(1010);
      match(GPULangParser::RP);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->expressionContext->tree; 
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1013);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->integerliteralToken = match(GPULangParser::INTEGERLITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<IntExpression>(atoi((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->integerliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->integerliteralToken->getText() : "").c_str())); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1015);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->uintegerliteralToken = match(GPULangParser::UINTEGERLITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<UIntExpression>(strtoul((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->uintegerliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->uintegerliteralToken->getText() : "").c_str(), nullptr, 10)); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1017);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->floatliteralToken = match(GPULangParser::FLOATLITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<FloatExpression>(atof((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->floatliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->floatliteralToken->getText() : "").c_str())); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1019);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->doubleliteralToken = match(GPULangParser::DOUBLELITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<FloatExpression>(atof((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->doubleliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->doubleliteralToken->getText() : "").c_str())); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1021);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->hexToken = match(GPULangParser::HEX);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<UIntExpression>(strtoul((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->hexToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->hexToken->getText() : "").c_str(), nullptr, 16)); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1023);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->stringContext = string();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<StringExpression>(antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->stringContext->val); _localctx->tree->location = EndLocationRange(begin); 
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1026);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->identifierToken = match(GPULangParser::IDENTIFIER);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<SymbolExpression>(FixedString((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->identifierToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->identifierToken->getText() : ""))); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1028);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->booleanContext = boolean();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<BoolExpression>(antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->booleanContext->val); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1031);
      match(GPULangParser::T__38);
       begin = SetupFile(); 
      setState(1033);
      match(GPULangParser::LESS);
      setState(1034);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->ident = match(GPULangParser::IDENTIFIER);
      setState(1035);
      match(GPULangParser::GREATER);

      	antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<DeclaredExpression>(FixedString((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->ident != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->ident->getText() : "")));
              _localctx->tree->location = begin ; 
          
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1037);
      linePreprocessorEntry();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerExpressionContext ------------------------------------------------------------------

GPULangParser::InitializerExpressionContext::InitializerExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::InitializerExpressionContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::InitializerExpressionContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::InitializerExpressionContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::ExpressionListContext* GPULangParser::InitializerExpressionContext::expressionList() {
  return getRuleContext<GPULangParser::ExpressionListContext>(0);
}


size_t GPULangParser::InitializerExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleInitializerExpression;
}

void GPULangParser::InitializerExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializerExpression(this);
}

void GPULangParser::InitializerExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializerExpression(this);
}

GPULangParser::InitializerExpressionContext* GPULangParser::initializerExpression() {
  InitializerExpressionContext *_localctx = _tracker.createInstance<InitializerExpressionContext>(_ctx, getState());
  enterRule(_localctx, 78, GPULangParser::RuleInitializerExpression);

          antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->tree =  nullptr;
          FixedString type;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1040);
    antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->type = match(GPULangParser::IDENTIFIER);
     type = FixedString((antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->type != nullptr ? antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->type->getText() : "")); 
    setState(1042);
    match(GPULangParser::LB);
     location = SetupFile(); 
    setState(1045);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3464544097497251854) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 7787) != 0)) {
      setState(1044);
      antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->list = expressionList();
    }
    setState(1047);
    match(GPULangParser::RB);

            antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->tree =  Alloc<InitializerExpression>(antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->list->expressions, type);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayInitializerExpressionContext ------------------------------------------------------------------

GPULangParser::ArrayInitializerExpressionContext::ArrayInitializerExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ArrayInitializerExpressionContext::LL() {
  return getToken(GPULangParser::LL, 0);
}

tree::TerminalNode* GPULangParser::ArrayInitializerExpressionContext::RR() {
  return getToken(GPULangParser::RR, 0);
}

GPULangParser::ExpressionListContext* GPULangParser::ArrayInitializerExpressionContext::expressionList() {
  return getRuleContext<GPULangParser::ExpressionListContext>(0);
}


size_t GPULangParser::ArrayInitializerExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleArrayInitializerExpression;
}

void GPULangParser::ArrayInitializerExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayInitializerExpression(this);
}

void GPULangParser::ArrayInitializerExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayInitializerExpression(this);
}

GPULangParser::ArrayInitializerExpressionContext* GPULangParser::arrayInitializerExpression() {
  ArrayInitializerExpressionContext *_localctx = _tracker.createInstance<ArrayInitializerExpressionContext>(_ctx, getState());
  enterRule(_localctx, 80, GPULangParser::RuleArrayInitializerExpression);

          antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1050);
    match(GPULangParser::LL);
     location = SetupFile(); 
    setState(1053);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3464544097497251854) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 7787) != 0)) {
      setState(1052);
      antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->list = expressionList();
    }
    setState(1055);
    match(GPULangParser::RR);

            antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->tree =  Alloc<ArrayInitializerExpression>(antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->list->expressions);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatVecLiteralExpressionContext ------------------------------------------------------------------

GPULangParser::FloatVecLiteralExpressionContext::FloatVecLiteralExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::FloatVecLiteralExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::FloatVecLiteralExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::FloatVecLiteralExpressionContext::FLOATLITERAL() {
  return getTokens(GPULangParser::FLOATLITERAL);
}

tree::TerminalNode* GPULangParser::FloatVecLiteralExpressionContext::FLOATLITERAL(size_t i) {
  return getToken(GPULangParser::FLOATLITERAL, i);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::FloatVecLiteralExpressionContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::FloatVecLiteralExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::FloatVecLiteralExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::FloatVecLiteralExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleFloatVecLiteralExpression;
}

void GPULangParser::FloatVecLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFloatVecLiteralExpression(this);
}

void GPULangParser::FloatVecLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFloatVecLiteralExpression(this);
}

GPULangParser::FloatVecLiteralExpressionContext* GPULangParser::floatVecLiteralExpression() {
  FloatVecLiteralExpressionContext *_localctx = _tracker.createInstance<FloatVecLiteralExpressionContext>(_ctx, getState());
  enterRule(_localctx, 82, GPULangParser::RuleFloatVecLiteralExpression);

          antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->tree =  nullptr;
          TransientArray<float> values(32);
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1058);
    match(GPULangParser::LESS);
     location = SetupFile(); 

    setState(1060);
    antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->arg0 = match(GPULangParser::FLOATLITERAL);
     values.Append(atof((antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->arg0 != nullptr ? antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->arg0->getText() : "").c_str())); 
    setState(1064);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2) {
      setState(1063);
      linePreprocessorEntry();
    }
    setState(1069); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1066);
      match(GPULangParser::CO);
      setState(1067);
      antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->argN = match(GPULangParser::FLOATLITERAL);
       values.Append(atof((antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->argN != nullptr ? antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->argN->getText() : "").c_str())); 
      setState(1071); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GPULangParser::CO);
    setState(1073);
    match(GPULangParser::GREATER);

            antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->tree =  Alloc<FloatVecExpression>(values);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoubleVecLiteralExpressionContext ------------------------------------------------------------------

GPULangParser::DoubleVecLiteralExpressionContext::DoubleVecLiteralExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::DoubleVecLiteralExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::DoubleVecLiteralExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::DoubleVecLiteralExpressionContext::DOUBLELITERAL() {
  return getTokens(GPULangParser::DOUBLELITERAL);
}

tree::TerminalNode* GPULangParser::DoubleVecLiteralExpressionContext::DOUBLELITERAL(size_t i) {
  return getToken(GPULangParser::DOUBLELITERAL, i);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::DoubleVecLiteralExpressionContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::DoubleVecLiteralExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::DoubleVecLiteralExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::DoubleVecLiteralExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleDoubleVecLiteralExpression;
}

void GPULangParser::DoubleVecLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoubleVecLiteralExpression(this);
}

void GPULangParser::DoubleVecLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoubleVecLiteralExpression(this);
}

GPULangParser::DoubleVecLiteralExpressionContext* GPULangParser::doubleVecLiteralExpression() {
  DoubleVecLiteralExpressionContext *_localctx = _tracker.createInstance<DoubleVecLiteralExpressionContext>(_ctx, getState());
  enterRule(_localctx, 84, GPULangParser::RuleDoubleVecLiteralExpression);

          antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->tree =  nullptr;
          TransientArray<float> values(32);
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1076);
    match(GPULangParser::LESS);
     location = SetupFile(); 

    setState(1078);
    antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->arg0 = match(GPULangParser::DOUBLELITERAL);
     values.Append(atof((antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->arg0 != nullptr ? antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->arg0->getText() : "").c_str())); 
    setState(1082);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2) {
      setState(1081);
      linePreprocessorEntry();
    }
    setState(1087); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1084);
      match(GPULangParser::CO);
      setState(1085);
      antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->argN = match(GPULangParser::DOUBLELITERAL);
       values.Append(atof((antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->argN != nullptr ? antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->argN->getText() : "").c_str())); 
      setState(1089); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GPULangParser::CO);
    setState(1091);
    match(GPULangParser::GREATER);

            antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->tree =  Alloc<FloatVecExpression>(values);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntVecLiteralExpressionContext ------------------------------------------------------------------

GPULangParser::IntVecLiteralExpressionContext::IntVecLiteralExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::IntVecLiteralExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::IntVecLiteralExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::IntVecLiteralExpressionContext::INTEGERLITERAL() {
  return getTokens(GPULangParser::INTEGERLITERAL);
}

tree::TerminalNode* GPULangParser::IntVecLiteralExpressionContext::INTEGERLITERAL(size_t i) {
  return getToken(GPULangParser::INTEGERLITERAL, i);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::IntVecLiteralExpressionContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::IntVecLiteralExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::IntVecLiteralExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::IntVecLiteralExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleIntVecLiteralExpression;
}

void GPULangParser::IntVecLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntVecLiteralExpression(this);
}

void GPULangParser::IntVecLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntVecLiteralExpression(this);
}

GPULangParser::IntVecLiteralExpressionContext* GPULangParser::intVecLiteralExpression() {
  IntVecLiteralExpressionContext *_localctx = _tracker.createInstance<IntVecLiteralExpressionContext>(_ctx, getState());
  enterRule(_localctx, 86, GPULangParser::RuleIntVecLiteralExpression);

          antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->tree =  nullptr;
          TransientArray<int> values(32);
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1094);
    match(GPULangParser::LESS);
     location = SetupFile(); 

    setState(1096);
    antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->arg0 = match(GPULangParser::INTEGERLITERAL);
     values.Append(atof((antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->arg0 != nullptr ? antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->arg0->getText() : "").c_str())); 
    setState(1100);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2) {
      setState(1099);
      linePreprocessorEntry();
    }
    setState(1105); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1102);
      match(GPULangParser::CO);
      setState(1103);
      antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->argN = match(GPULangParser::INTEGERLITERAL);
       values.Append(atof((antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->argN != nullptr ? antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->argN->getText() : "").c_str())); 
      setState(1107); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GPULangParser::CO);
    setState(1109);
    match(GPULangParser::GREATER);

            antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->tree =  Alloc<IntVecExpression>(values);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UintVecLiteralExpressionContext ------------------------------------------------------------------

GPULangParser::UintVecLiteralExpressionContext::UintVecLiteralExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::UintVecLiteralExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::UintVecLiteralExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::UintVecLiteralExpressionContext::UINTEGERLITERAL() {
  return getTokens(GPULangParser::UINTEGERLITERAL);
}

tree::TerminalNode* GPULangParser::UintVecLiteralExpressionContext::UINTEGERLITERAL(size_t i) {
  return getToken(GPULangParser::UINTEGERLITERAL, i);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::UintVecLiteralExpressionContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::UintVecLiteralExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::UintVecLiteralExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::UintVecLiteralExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleUintVecLiteralExpression;
}

void GPULangParser::UintVecLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUintVecLiteralExpression(this);
}

void GPULangParser::UintVecLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUintVecLiteralExpression(this);
}

GPULangParser::UintVecLiteralExpressionContext* GPULangParser::uintVecLiteralExpression() {
  UintVecLiteralExpressionContext *_localctx = _tracker.createInstance<UintVecLiteralExpressionContext>(_ctx, getState());
  enterRule(_localctx, 88, GPULangParser::RuleUintVecLiteralExpression);

          antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->tree =  nullptr;
          TransientArray<unsigned int> values(32);
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1112);
    match(GPULangParser::LESS);
     location = SetupFile(); 

    setState(1114);
    antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->arg0 = match(GPULangParser::UINTEGERLITERAL);
     values.Append(atof((antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->arg0 != nullptr ? antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->arg0->getText() : "").c_str())); 
    setState(1118);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2) {
      setState(1117);
      linePreprocessorEntry();
    }
    setState(1123); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1120);
      match(GPULangParser::CO);
      setState(1121);
      antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->argN = match(GPULangParser::UINTEGERLITERAL);
       values.Append(atof((antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->argN != nullptr ? antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->argN->getText() : "").c_str())); 
      setState(1125); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GPULangParser::CO);
    setState(1127);
    match(GPULangParser::GREATER);

            antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->tree =  Alloc<UIntVecExpression>(values);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanVecLiteralExpressionContext ------------------------------------------------------------------

GPULangParser::BooleanVecLiteralExpressionContext::BooleanVecLiteralExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::BooleanVecLiteralExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::BooleanVecLiteralExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<GPULangParser::BooleanContext *> GPULangParser::BooleanVecLiteralExpressionContext::boolean() {
  return getRuleContexts<GPULangParser::BooleanContext>();
}

GPULangParser::BooleanContext* GPULangParser::BooleanVecLiteralExpressionContext::boolean(size_t i) {
  return getRuleContext<GPULangParser::BooleanContext>(i);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::BooleanVecLiteralExpressionContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::BooleanVecLiteralExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::BooleanVecLiteralExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::BooleanVecLiteralExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleBooleanVecLiteralExpression;
}

void GPULangParser::BooleanVecLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBooleanVecLiteralExpression(this);
}

void GPULangParser::BooleanVecLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBooleanVecLiteralExpression(this);
}

GPULangParser::BooleanVecLiteralExpressionContext* GPULangParser::booleanVecLiteralExpression() {
  BooleanVecLiteralExpressionContext *_localctx = _tracker.createInstance<BooleanVecLiteralExpressionContext>(_ctx, getState());
  enterRule(_localctx, 90, GPULangParser::RuleBooleanVecLiteralExpression);

          antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->tree =  nullptr;
          TransientArray<bool> values(32);
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1130);
    match(GPULangParser::LESS);
     location = SetupFile(); 

    setState(1132);
    antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->arg0 = boolean();
     values.Append(atof((antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->arg0 != nullptr ? _input->getText(antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->arg0->start, antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->arg0->stop) : nullptr).c_str())); 
    setState(1136);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2) {
      setState(1135);
      linePreprocessorEntry();
    }
    setState(1142); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1138);
      match(GPULangParser::CO);
      setState(1139);
      antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->argN = boolean();
       values.Append(atof((antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->argN != nullptr ? _input->getText(antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->argN->start, antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->argN->stop) : nullptr).c_str())); 
      setState(1144); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GPULangParser::CO);
    setState(1146);
    match(GPULangParser::GREATER);

            antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->tree =  Alloc<BoolVecExpression>(values);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool GPULangParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 37: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool GPULangParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 17);
    case 1: return precpred(_ctx, 16);
    case 2: return precpred(_ctx, 13);
    case 3: return precpred(_ctx, 12);
    case 4: return precpred(_ctx, 11);
    case 5: return precpred(_ctx, 10);
    case 6: return precpred(_ctx, 9);
    case 7: return precpred(_ctx, 8);
    case 8: return precpred(_ctx, 7);
    case 9: return precpred(_ctx, 6);
    case 10: return precpred(_ctx, 5);
    case 11: return precpred(_ctx, 4);
    case 12: return precpred(_ctx, 3);
    case 13: return precpred(_ctx, 2);
    case 14: return precpred(_ctx, 19);
    case 15: return precpred(_ctx, 18);
    case 16: return precpred(_ctx, 15);

  default:
    break;
  }
  return true;
}

void GPULangParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  gpulangParserInitialize();
#else
  ::antlr4::internal::call_once(gpulangParserOnceFlag, gpulangParserInitialize);
#endif
}
