

// include std container
#include <vector>
#include <typeinfo>
#include <iostream>
#include <string>
#include <stack>
#include <tuple>

#include "gpulangtoken.h"
#include "gpulangcompiler.h"
#include "ast/alias.h"
#include "ast/annotation.h"
#include "ast/effect.h"
#include "ast/enumeration.h"
#include "ast/function.h"
#include "ast/program.h"
#include "ast/renderstate.h"
#include "ast/samplerstate.h"
#include "ast/state.h"
#include "ast/structure.h"
#include "ast/symbol.h"
#include "ast/preprocessor.h"
#include "ast/variable.h"
#include "ast/statements/breakstatement.h"
#include "ast/statements/continuestatement.h"
#include "ast/statements/expressionstatement.h"
#include "ast/statements/forstatement.h"
#include "ast/statements/ifstatement.h"
#include "ast/statements/terminatestatement.h"
#include "ast/statements/scopestatement.h"
#include "ast/statements/statement.h"
#include "ast/statements/switchstatement.h"
#include "ast/statements/whilestatement.h"
#include "ast/expressions/accessexpression.h"
#include "ast/expressions/arrayindexexpression.h"
#include "ast/expressions/binaryexpression.h"
#include "ast/expressions/boolexpression.h"
#include "ast/expressions/boolvecexpression.h"
#include "ast/expressions/callexpression.h"
#include "ast/expressions/commaexpression.h"
#include "ast/expressions/expression.h"
#include "ast/expressions/floatexpression.h"
#include "ast/expressions/floatvecexpression.h"
#include "ast/expressions/initializerexpression.h"
#include "ast/expressions/arrayinitializerexpression.h"
#include "ast/expressions/intexpression.h"
#include "ast/expressions/intvecexpression.h"
#include "ast/expressions/stringexpression.h"
#include "ast/expressions/symbolexpression.h"
#include "ast/expressions/ternaryexpression.h"
#include "ast/expressions/uintexpression.h"
#include "ast/expressions/uintvecexpression.h"
#include "ast/expressions/unaryexpression.h"
#include "util.h"
#include "memory.h"

using namespace GPULang;



// Generated from antlr4/grammar/GPULang.g4 by ANTLR 4.13.2


#include "GPULangListener.h"
#include "GPULangVisitor.h"

#include "GPULangParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct GPULangParserStaticData final {
  GPULangParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  GPULangParserStaticData(const GPULangParserStaticData&) = delete;
  GPULangParserStaticData(GPULangParserStaticData&&) = delete;
  GPULangParserStaticData& operator=(const GPULangParserStaticData&) = delete;
  GPULangParserStaticData& operator=(GPULangParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag gpulangParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<GPULangParserStaticData> gpulangParserStaticData = nullptr;

void gpulangParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (gpulangParserStaticData != nullptr) {
    return;
  }
#else
  assert(gpulangParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<GPULangParserStaticData>(
    std::vector<std::string>{
      "string", "path", "boolean", "entry", "effect", "linePreprocessorEntry", 
      "alias", "annotation", "attribute", "typeDeclaration", "variables", 
      "structureDeclaration", "structure", "enumeration", "parameter", "functionDeclaration", 
      "function", "program", "sampler", "state", "statement", "expressionStatement", 
      "ifStatement", "forStatement", "forRangeStatement", "forUniformValueStatement", 
      "whileStatement", "scopeStatement", "terminateStatement", "continueStatement", 
      "switchStatement", "breakStatement", "expressionNoComma", "expression", 
      "binaryexpatom", "initializerExpression", "arrayInitializerExpression", 
      "floatVecLiteralExpression", "doubleVecLiteralExpression", "intVecLiteralExpression", 
      "uintVecLiteralExpression", "booleanVecLiteralExpression"
    },
    std::vector<std::string>{
      "", "'true'", "'false'", "'#line'", "'alias'", "'as'", "'struct'", 
      "'enum'", "'program'", "'sampler_state'", "'render_state'", "'if'", 
      "'else'", "'for'", "'..'", "'for_uniform'", "'while'", "'do'", "'return'", 
      "'discard'", "'ray_ignore'", "'ray_terminate'", "'continue'", "'switch'", 
      "'case'", "'default'", "'break'", "'++'", "'--'", "'<<'", "'>>'", 
      "'+='", "'-='", "'*='", "'/='", "'%='", "'<<='", "'>>='", "';'", "','", 
      "':'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'.'", "'!'", "'='", 
      "'\"'", "'\\u003F'", "'&'", "'&='", "'|'", "'|='", "'^'", "'^='", 
      "'~'", "'''", "'#'", "'\\'", "'<'", "'<='", "'>'", "'>='", "'=='", 
      "'!='", "'&&'", "'||'", "'%'", "'_'", "'@'", "'+'", "'-'", "'/'", 
      "'*'", "'->'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "SC", "CO", "COL", "LP", "RP", "LB", "RB", "LL", "RR", 
      "DOT", "NOT", "EQ", "QO", "QU", "AND", "ANDSET", "OR", "ORSET", "XOR", 
      "XORSET", "CONJUGATE", "Q", "NU", "FORWARDSLASH", "LESS", "LESSEQ", 
      "GREATER", "GREATEREQ", "LOGICEQ", "NOTEQ", "LOGICAND", "LOGICOR", 
      "MOD", "UNDERSC", "SOBAKA", "ADD_OP", "SUB_OP", "DIV_OP", "MUL_OP", 
      "ARROW", "INTEGERLITERAL", "UINTEGERLITERAL", "COMMENT", "ML_COMMENT", 
      "FLOATLITERAL", "DOUBLELITERAL", "HEX", "IDENTIFIER", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,86,1221,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,1,0,1,
  	0,1,0,5,0,88,8,0,10,0,12,0,91,9,0,1,0,1,0,1,0,1,0,5,0,97,8,0,10,0,12,
  	0,100,9,0,1,0,3,0,103,8,0,1,1,1,1,1,1,5,1,108,8,1,10,1,12,1,111,9,1,1,
  	1,1,1,1,1,1,1,5,1,117,8,1,10,1,12,1,120,9,1,1,1,3,1,123,8,1,1,2,1,2,1,
  	2,1,2,3,2,129,8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
  	1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
  	4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,171,8,4,10,4,12,4,174,9,4,1,
  	5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
  	1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,205,8,8,1,9,1,9,1,9,1,
  	9,1,9,1,9,1,9,1,9,3,9,215,8,9,1,9,1,9,1,9,1,9,5,9,221,8,9,10,9,12,9,224,
  	9,9,1,9,1,9,1,9,1,10,5,10,230,8,10,10,10,12,10,233,9,10,1,10,1,10,1,10,
  	5,10,238,8,10,10,10,12,10,241,9,10,1,10,1,10,1,10,4,10,246,8,10,11,10,
  	12,10,247,1,10,1,10,1,10,3,10,253,8,10,1,10,1,10,1,10,1,10,5,10,259,8,
  	10,10,10,12,10,262,9,10,1,10,1,10,1,10,1,10,3,10,268,8,10,1,10,1,10,1,
  	10,1,10,1,10,1,10,1,10,1,10,5,10,278,8,10,10,10,12,10,281,9,10,3,10,283,
  	8,10,1,10,1,10,1,11,5,11,288,8,11,10,11,12,11,291,9,11,1,11,1,11,1,11,
  	5,11,296,8,11,10,11,12,11,299,9,11,1,11,1,11,1,11,5,11,304,8,11,10,11,
  	12,11,307,9,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,327,8,12,1,12,5,12,330,8,12,10,
  	12,12,12,333,9,12,1,12,1,12,1,12,1,12,1,12,5,12,340,8,12,10,12,12,12,
  	343,9,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,355,8,
  	13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,364,8,13,1,13,1,13,3,13,368,
  	8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,377,8,13,1,13,1,13,5,13,
  	381,8,13,10,13,12,13,384,9,13,1,13,3,13,387,8,13,1,13,1,13,1,13,1,14,
  	5,14,393,8,14,10,14,12,14,396,9,14,1,14,1,14,1,14,5,14,401,8,14,10,14,
  	12,14,404,9,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,415,
  	8,14,1,14,1,14,1,15,1,15,1,15,5,15,422,8,15,10,15,12,15,425,9,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,3,15,433,8,15,1,15,1,15,1,15,1,15,1,15,5,15,
  	440,8,15,10,15,12,15,443,9,15,3,15,445,8,15,1,15,1,15,1,15,1,15,1,16,
  	1,16,1,16,1,16,1,16,1,17,1,17,1,17,5,17,459,8,17,10,17,12,17,462,9,17,
  	1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,472,8,17,10,17,12,17,475,
  	9,17,1,17,1,17,1,17,1,18,1,18,1,18,5,18,483,8,18,10,18,12,18,486,9,18,
  	1,18,1,18,1,18,5,18,491,8,18,10,18,12,18,494,9,18,1,18,1,18,1,18,1,18,
  	1,18,1,18,1,18,1,18,1,18,1,18,5,18,506,8,18,10,18,12,18,509,9,18,1,18,
  	1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,524,
  	8,19,10,19,12,19,527,9,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,560,8,20,1,21,1,21,1,21,
  	1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,577,
  	8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,587,8,23,1,23,1,23,
  	1,23,1,23,3,23,593,8,23,1,23,1,23,1,23,1,23,3,23,599,8,23,1,23,1,23,1,
  	23,1,23,5,23,605,8,23,10,23,12,23,608,9,23,1,23,1,23,1,23,1,23,1,24,1,
  	24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,
  	25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
  	26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
  	26,3,26,658,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,
  	27,670,8,27,10,27,12,27,673,9,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
  	28,1,28,3,28,684,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
  	28,1,28,1,28,1,28,1,28,3,28,700,8,28,1,29,1,29,1,29,1,29,1,29,1,30,1,
  	30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,721,
  	8,30,5,30,723,8,30,10,30,12,30,726,9,30,1,30,1,30,1,30,1,30,1,30,3,30,
  	733,8,30,3,30,735,8,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,
  	32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,753,8,32,1,32,1,32,1,32,1,32,1,
  	32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
  	32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
  	32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
  	32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
  	32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
  	32,1,32,1,32,1,32,1,32,1,32,3,32,835,8,32,1,32,1,32,1,32,1,32,1,32,5,
  	32,842,8,32,10,32,12,32,845,9,32,3,32,847,8,32,1,32,1,32,1,32,1,32,1,
  	32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,866,
  	8,32,1,32,1,32,3,32,870,8,32,3,32,872,8,32,1,32,1,32,1,32,1,32,1,32,1,
  	32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,888,8,32,5,32,890,8,32,
  	10,32,12,32,893,9,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,903,
  	8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,3,33,992,8,33,1,33,1,33,1,33,1,33,1,33,5,33,999,8,
  	33,10,33,12,33,1002,9,33,3,33,1004,8,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,1023,8,33,
  	1,33,1,33,3,33,1027,8,33,3,33,1029,8,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,1045,8,33,5,33,1047,8,33,
  	10,33,12,33,1050,9,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,1082,8,34,1,35,1,35,1,35,1,35,1,
  	35,1,35,1,35,3,35,1091,8,35,1,35,1,35,1,35,1,35,1,35,5,35,1098,8,35,10,
  	35,12,35,1101,9,35,3,35,1103,8,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,
  	1,36,3,36,1113,8,36,1,36,1,36,1,36,1,36,1,36,5,36,1120,8,36,10,36,12,
  	36,1123,9,36,3,36,1125,8,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,
  	37,3,37,1136,8,37,1,37,1,37,1,37,4,37,1141,8,37,11,37,12,37,1142,1,37,
  	1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1154,8,38,1,38,1,38,1,38,
  	4,38,1159,8,38,11,38,12,38,1160,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,
  	39,1,39,3,39,1172,8,39,1,39,1,39,1,39,4,39,1177,8,39,11,39,12,39,1178,
  	1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1190,8,40,1,40,1,40,
  	1,40,4,40,1195,8,40,11,40,12,40,1196,1,40,1,40,1,40,1,41,1,41,1,41,1,
  	41,1,41,1,41,3,41,1208,8,41,1,41,1,41,1,41,1,41,4,41,1214,8,41,11,41,
  	12,41,1215,1,41,1,41,1,41,1,41,1,172,2,64,66,42,0,2,4,6,8,10,12,14,16,
  	18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
  	64,66,68,70,72,74,76,78,80,82,0,11,1,0,50,50,1,0,59,59,1,0,64,64,5,0,
  	27,28,48,48,58,58,73,74,76,76,2,0,70,70,75,76,1,0,73,74,1,0,29,30,1,0,
  	62,65,1,0,66,67,1,0,27,28,5,0,31,37,49,49,53,53,55,55,57,57,1342,0,102,
  	1,0,0,0,2,122,1,0,0,0,4,128,1,0,0,0,6,130,1,0,0,0,8,172,1,0,0,0,10,175,
  	1,0,0,0,12,181,1,0,0,0,14,188,1,0,0,0,16,204,1,0,0,0,18,206,1,0,0,0,20,
  	231,1,0,0,0,22,289,1,0,0,0,24,312,1,0,0,0,26,347,1,0,0,0,28,394,1,0,0,
  	0,30,423,1,0,0,0,32,450,1,0,0,0,34,460,1,0,0,0,36,484,1,0,0,0,38,513,
  	1,0,0,0,40,559,1,0,0,0,42,561,1,0,0,0,44,564,1,0,0,0,46,580,1,0,0,0,48,
  	613,1,0,0,0,50,626,1,0,0,0,52,657,1,0,0,0,54,659,1,0,0,0,56,699,1,0,0,
  	0,58,701,1,0,0,0,60,706,1,0,0,0,62,739,1,0,0,0,64,752,1,0,0,0,66,902,
  	1,0,0,0,68,1081,1,0,0,0,70,1083,1,0,0,0,72,1107,1,0,0,0,74,1129,1,0,0,
  	0,76,1147,1,0,0,0,78,1165,1,0,0,0,80,1183,1,0,0,0,82,1201,1,0,0,0,84,
  	89,5,50,0,0,85,86,8,0,0,0,86,88,6,0,-1,0,87,85,1,0,0,0,88,91,1,0,0,0,
  	89,87,1,0,0,0,89,90,1,0,0,0,90,92,1,0,0,0,91,89,1,0,0,0,92,103,5,50,0,
  	0,93,98,5,59,0,0,94,95,8,1,0,0,95,97,6,0,-1,0,96,94,1,0,0,0,97,100,1,
  	0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,101,1,0,0,0,100,98,1,0,0,0,101,103,
  	5,59,0,0,102,84,1,0,0,0,102,93,1,0,0,0,103,1,1,0,0,0,104,109,5,50,0,0,
  	105,106,8,0,0,0,106,108,6,1,-1,0,107,105,1,0,0,0,108,111,1,0,0,0,109,
  	107,1,0,0,0,109,110,1,0,0,0,110,112,1,0,0,0,111,109,1,0,0,0,112,123,5,
  	50,0,0,113,118,5,62,0,0,114,115,8,2,0,0,115,117,6,1,-1,0,116,114,1,0,
  	0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,121,1,0,0,0,120,
  	118,1,0,0,0,121,123,5,64,0,0,122,104,1,0,0,0,122,113,1,0,0,0,123,3,1,
  	0,0,0,124,125,5,1,0,0,125,129,6,2,-1,0,126,127,5,2,0,0,127,129,6,2,-1,
  	0,128,124,1,0,0,0,128,126,1,0,0,0,129,5,1,0,0,0,130,131,3,8,4,0,131,132,
  	6,3,-1,0,132,133,5,0,0,1,133,7,1,0,0,0,134,171,3,10,5,0,135,136,3,12,
  	6,0,136,137,5,38,0,0,137,138,6,4,-1,0,138,171,1,0,0,0,139,140,3,30,15,
  	0,140,141,5,38,0,0,141,142,6,4,-1,0,142,171,1,0,0,0,143,144,3,32,16,0,
  	144,145,6,4,-1,0,145,171,1,0,0,0,146,147,3,20,10,0,147,148,5,38,0,0,148,
  	149,6,4,-1,0,149,171,1,0,0,0,150,151,3,24,12,0,151,152,5,38,0,0,152,153,
  	6,4,-1,0,153,171,1,0,0,0,154,155,3,26,13,0,155,156,5,38,0,0,156,157,6,
  	4,-1,0,157,171,1,0,0,0,158,159,3,38,19,0,159,160,5,38,0,0,160,161,6,4,
  	-1,0,161,171,1,0,0,0,162,163,3,36,18,0,163,164,5,38,0,0,164,165,6,4,-1,
  	0,165,171,1,0,0,0,166,167,3,34,17,0,167,168,5,38,0,0,168,169,6,4,-1,0,
  	169,171,1,0,0,0,170,134,1,0,0,0,170,135,1,0,0,0,170,139,1,0,0,0,170,143,
  	1,0,0,0,170,146,1,0,0,0,170,150,1,0,0,0,170,154,1,0,0,0,170,158,1,0,0,
  	0,170,162,1,0,0,0,170,166,1,0,0,0,171,174,1,0,0,0,172,173,1,0,0,0,172,
  	170,1,0,0,0,173,9,1,0,0,0,174,172,1,0,0,0,175,176,5,3,0,0,176,177,6,5,
  	-1,0,177,178,5,78,0,0,178,179,3,0,0,0,179,180,6,5,-1,0,180,11,1,0,0,0,
  	181,182,5,4,0,0,182,183,5,85,0,0,183,184,5,5,0,0,184,185,5,85,0,0,185,
  	186,6,6,-1,0,186,187,6,6,-1,0,187,13,1,0,0,0,188,189,5,72,0,0,189,190,
  	5,85,0,0,190,191,5,41,0,0,191,192,3,66,33,0,192,193,5,42,0,0,193,194,
  	6,7,-1,0,194,15,1,0,0,0,195,196,5,85,0,0,196,197,6,8,-1,0,197,198,5,41,
  	0,0,198,199,3,66,33,0,199,200,5,42,0,0,200,201,6,8,-1,0,201,205,1,0,0,
  	0,202,203,5,85,0,0,203,205,6,8,-1,0,204,195,1,0,0,0,204,202,1,0,0,0,205,
  	17,1,0,0,0,206,222,6,9,-1,0,207,208,5,76,0,0,208,221,6,9,-1,0,209,210,
  	5,45,0,0,210,214,6,9,-1,0,211,212,3,66,33,0,212,213,6,9,-1,0,213,215,
  	1,0,0,0,214,211,1,0,0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,221,5,46,
  	0,0,217,218,5,85,0,0,218,221,6,9,-1,0,219,221,3,10,5,0,220,207,1,0,0,
  	0,220,209,1,0,0,0,220,217,1,0,0,0,220,219,1,0,0,0,221,224,1,0,0,0,222,
  	220,1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,222,1,0,0,0,225,226,5,
  	85,0,0,226,227,6,9,-1,0,227,19,1,0,0,0,228,230,3,10,5,0,229,228,1,0,0,
  	0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,239,1,0,0,0,233,
  	231,1,0,0,0,234,235,3,14,7,0,235,236,6,10,-1,0,236,238,1,0,0,0,237,234,
  	1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,245,1,0,0,
  	0,241,239,1,0,0,0,242,243,3,16,8,0,243,244,6,10,-1,0,244,246,1,0,0,0,
  	245,242,1,0,0,0,246,247,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,249,
  	1,0,0,0,249,250,5,85,0,0,250,252,6,10,-1,0,251,253,3,10,5,0,252,251,1,
  	0,0,0,252,253,1,0,0,0,253,260,1,0,0,0,254,255,5,39,0,0,255,256,5,85,0,
  	0,256,259,6,10,-1,0,257,259,3,10,5,0,258,254,1,0,0,0,258,257,1,0,0,0,
  	259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,267,1,0,0,0,262,260,
  	1,0,0,0,263,264,5,40,0,0,264,265,3,18,9,0,265,266,6,10,-1,0,266,268,1,
  	0,0,0,267,263,1,0,0,0,267,268,1,0,0,0,268,282,1,0,0,0,269,270,5,49,0,
  	0,270,271,3,64,32,0,271,279,6,10,-1,0,272,273,5,39,0,0,273,274,3,64,32,
  	0,274,275,6,10,-1,0,275,278,1,0,0,0,276,278,3,10,5,0,277,272,1,0,0,0,
  	277,276,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,283,
  	1,0,0,0,281,279,1,0,0,0,282,269,1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,
  	0,284,285,6,10,-1,0,285,21,1,0,0,0,286,288,3,10,5,0,287,286,1,0,0,0,288,
  	291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,297,1,0,0,0,291,289,1,
  	0,0,0,292,293,3,14,7,0,293,294,6,11,-1,0,294,296,1,0,0,0,295,292,1,0,
  	0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,305,1,0,0,0,299,
  	297,1,0,0,0,300,301,3,16,8,0,301,302,6,11,-1,0,302,304,1,0,0,0,303,300,
  	1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,308,1,0,0,
  	0,307,305,1,0,0,0,308,309,5,6,0,0,309,310,5,85,0,0,310,311,6,11,-1,0,
  	311,23,1,0,0,0,312,313,3,22,11,0,313,314,6,12,-1,0,314,341,5,43,0,0,315,
  	316,5,85,0,0,316,317,6,12,-1,0,317,318,5,40,0,0,318,331,6,12,-1,0,319,
  	320,5,76,0,0,320,330,6,12,-1,0,321,322,5,45,0,0,322,326,6,12,-1,0,323,
  	324,3,66,33,0,324,325,6,12,-1,0,325,327,1,0,0,0,326,323,1,0,0,0,326,327,
  	1,0,0,0,327,328,1,0,0,0,328,330,5,46,0,0,329,319,1,0,0,0,329,321,1,0,
  	0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,334,1,0,0,0,333,
  	331,1,0,0,0,334,335,5,85,0,0,335,336,6,12,-1,0,336,337,5,38,0,0,337,340,
  	6,12,-1,0,338,340,3,10,5,0,339,315,1,0,0,0,339,338,1,0,0,0,340,343,1,
  	0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,341,1,0,0,0,
  	344,345,5,44,0,0,345,346,6,12,-1,0,346,25,1,0,0,0,347,348,5,7,0,0,348,
  	349,5,85,0,0,349,354,6,13,-1,0,350,351,5,40,0,0,351,352,3,18,9,0,352,
  	353,6,13,-1,0,353,355,1,0,0,0,354,350,1,0,0,0,354,355,1,0,0,0,355,356,
  	1,0,0,0,356,386,5,43,0,0,357,358,5,85,0,0,358,363,6,13,-1,0,359,360,5,
  	49,0,0,360,361,3,66,33,0,361,362,6,13,-1,0,362,364,1,0,0,0,363,359,1,
  	0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,367,6,13,-1,0,366,368,3,10,
  	5,0,367,366,1,0,0,0,367,368,1,0,0,0,368,382,1,0,0,0,369,370,5,39,0,0,
  	370,371,5,85,0,0,371,376,6,13,-1,0,372,373,5,49,0,0,373,374,3,66,33,0,
  	374,375,6,13,-1,0,375,377,1,0,0,0,376,372,1,0,0,0,376,377,1,0,0,0,377,
  	378,1,0,0,0,378,381,6,13,-1,0,379,381,3,10,5,0,380,369,1,0,0,0,380,379,
  	1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,387,1,0,0,
  	0,384,382,1,0,0,0,385,387,3,10,5,0,386,357,1,0,0,0,386,385,1,0,0,0,386,
  	387,1,0,0,0,387,388,1,0,0,0,388,389,5,44,0,0,389,390,6,13,-1,0,390,27,
  	1,0,0,0,391,393,3,10,5,0,392,391,1,0,0,0,393,396,1,0,0,0,394,392,1,0,
  	0,0,394,395,1,0,0,0,395,402,1,0,0,0,396,394,1,0,0,0,397,398,3,16,8,0,
  	398,399,6,14,-1,0,399,401,1,0,0,0,400,397,1,0,0,0,401,404,1,0,0,0,402,
  	400,1,0,0,0,402,403,1,0,0,0,403,405,1,0,0,0,404,402,1,0,0,0,405,406,5,
  	85,0,0,406,407,6,14,-1,0,407,408,5,40,0,0,408,409,3,18,9,0,409,414,6,
  	14,-1,0,410,411,5,49,0,0,411,412,3,64,32,0,412,413,6,14,-1,0,413,415,
  	1,0,0,0,414,410,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,417,6,14,
  	-1,0,417,29,1,0,0,0,418,419,3,16,8,0,419,420,6,15,-1,0,420,422,1,0,0,
  	0,421,418,1,0,0,0,422,425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,
  	426,1,0,0,0,425,423,1,0,0,0,426,427,5,85,0,0,427,428,6,15,-1,0,428,444,
  	5,41,0,0,429,430,3,28,14,0,430,432,6,15,-1,0,431,433,3,10,5,0,432,431,
  	1,0,0,0,432,433,1,0,0,0,433,441,1,0,0,0,434,435,5,39,0,0,435,436,3,28,
  	14,0,436,437,6,15,-1,0,437,440,1,0,0,0,438,440,3,10,5,0,439,434,1,0,0,
  	0,439,438,1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,
  	445,1,0,0,0,443,441,1,0,0,0,444,429,1,0,0,0,444,445,1,0,0,0,445,446,1,
  	0,0,0,446,447,5,42,0,0,447,448,3,18,9,0,448,449,6,15,-1,0,449,31,1,0,
  	0,0,450,451,3,30,15,0,451,452,6,16,-1,0,452,453,3,54,27,0,453,454,6,16,
  	-1,0,454,33,1,0,0,0,455,456,3,14,7,0,456,457,6,17,-1,0,457,459,1,0,0,
  	0,458,455,1,0,0,0,459,462,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,
  	463,1,0,0,0,462,460,1,0,0,0,463,464,5,8,0,0,464,465,5,85,0,0,465,466,
  	6,17,-1,0,466,473,5,43,0,0,467,468,3,66,33,0,468,469,6,17,-1,0,469,470,
  	5,38,0,0,470,472,1,0,0,0,471,467,1,0,0,0,472,475,1,0,0,0,473,471,1,0,
  	0,0,473,474,1,0,0,0,474,476,1,0,0,0,475,473,1,0,0,0,476,477,5,44,0,0,
  	477,478,6,17,-1,0,478,35,1,0,0,0,479,480,3,14,7,0,480,481,6,18,-1,0,481,
  	483,1,0,0,0,482,479,1,0,0,0,483,486,1,0,0,0,484,482,1,0,0,0,484,485,1,
  	0,0,0,485,492,1,0,0,0,486,484,1,0,0,0,487,488,3,16,8,0,488,489,6,18,-1,
  	0,489,491,1,0,0,0,490,487,1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,492,
  	493,1,0,0,0,493,495,1,0,0,0,494,492,1,0,0,0,495,496,5,9,0,0,496,497,6,
  	18,-1,0,497,498,1,0,0,0,498,499,5,85,0,0,499,500,6,18,-1,0,500,507,5,
  	43,0,0,501,502,3,66,33,0,502,503,6,18,-1,0,503,504,5,38,0,0,504,506,1,
  	0,0,0,505,501,1,0,0,0,506,509,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,
  	508,510,1,0,0,0,509,507,1,0,0,0,510,511,5,44,0,0,511,512,6,18,-1,0,512,
  	37,1,0,0,0,513,514,5,10,0,0,514,515,6,19,-1,0,515,516,1,0,0,0,516,517,
  	5,85,0,0,517,518,6,19,-1,0,518,525,5,43,0,0,519,520,3,66,33,0,520,521,
  	6,19,-1,0,521,522,5,38,0,0,522,524,1,0,0,0,523,519,1,0,0,0,524,527,1,
  	0,0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,528,1,0,0,0,527,525,1,0,0,0,
  	528,529,5,44,0,0,529,530,6,19,-1,0,530,39,1,0,0,0,531,532,3,44,22,0,532,
  	533,6,20,-1,0,533,560,1,0,0,0,534,535,3,54,27,0,535,536,6,20,-1,0,536,
  	560,1,0,0,0,537,538,3,46,23,0,538,539,6,20,-1,0,539,560,1,0,0,0,540,541,
  	3,52,26,0,541,542,6,20,-1,0,542,560,1,0,0,0,543,544,3,60,30,0,544,545,
  	6,20,-1,0,545,560,1,0,0,0,546,547,3,56,28,0,547,548,6,20,-1,0,548,560,
  	1,0,0,0,549,550,3,58,29,0,550,551,6,20,-1,0,551,560,1,0,0,0,552,553,3,
  	62,31,0,553,554,6,20,-1,0,554,560,1,0,0,0,555,556,3,42,21,0,556,557,5,
  	38,0,0,557,558,6,20,-1,0,558,560,1,0,0,0,559,531,1,0,0,0,559,534,1,0,
  	0,0,559,537,1,0,0,0,559,540,1,0,0,0,559,543,1,0,0,0,559,546,1,0,0,0,559,
  	549,1,0,0,0,559,552,1,0,0,0,559,555,1,0,0,0,560,41,1,0,0,0,561,562,3,
  	66,33,0,562,563,6,21,-1,0,563,43,1,0,0,0,564,565,5,11,0,0,565,566,6,22,
  	-1,0,566,567,5,41,0,0,567,568,3,66,33,0,568,569,6,22,-1,0,569,570,5,42,
  	0,0,570,571,3,40,20,0,571,576,6,22,-1,0,572,573,5,12,0,0,573,574,3,40,
  	20,0,574,575,6,22,-1,0,575,577,1,0,0,0,576,572,1,0,0,0,576,577,1,0,0,
  	0,577,578,1,0,0,0,578,579,6,22,-1,0,579,45,1,0,0,0,580,581,5,13,0,0,581,
  	582,6,23,-1,0,582,586,5,41,0,0,583,584,3,20,10,0,584,585,6,23,-1,0,585,
  	587,1,0,0,0,586,583,1,0,0,0,586,587,1,0,0,0,587,588,1,0,0,0,588,592,5,
  	38,0,0,589,590,3,66,33,0,590,591,6,23,-1,0,591,593,1,0,0,0,592,589,1,
  	0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,594,598,5,38,0,0,595,596,3,66,33,
  	0,596,597,6,23,-1,0,597,599,1,0,0,0,598,595,1,0,0,0,598,599,1,0,0,0,599,
  	600,1,0,0,0,600,606,5,42,0,0,601,602,3,16,8,0,602,603,6,23,-1,0,603,605,
  	1,0,0,0,604,601,1,0,0,0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,1,0,0,
  	0,607,609,1,0,0,0,608,606,1,0,0,0,609,610,3,40,20,0,610,611,6,23,-1,0,
  	611,612,6,23,-1,0,612,47,1,0,0,0,613,614,5,13,0,0,614,615,6,24,-1,0,615,
  	616,5,41,0,0,616,617,5,85,0,0,617,618,5,40,0,0,618,619,5,85,0,0,619,620,
  	5,14,0,0,620,621,5,85,0,0,621,622,5,42,0,0,622,623,3,40,20,0,623,624,
  	6,24,-1,0,624,625,6,24,-1,0,625,49,1,0,0,0,626,627,5,15,0,0,627,628,6,
  	25,-1,0,628,629,5,41,0,0,629,630,3,66,33,0,630,631,5,42,0,0,631,632,3,
  	40,20,0,632,633,6,25,-1,0,633,634,6,25,-1,0,634,51,1,0,0,0,635,636,5,
  	16,0,0,636,637,6,26,-1,0,637,638,5,41,0,0,638,639,3,66,33,0,639,640,6,
  	26,-1,0,640,641,5,42,0,0,641,642,3,40,20,0,642,643,6,26,-1,0,643,644,
  	6,26,-1,0,644,658,1,0,0,0,645,646,5,17,0,0,646,647,6,26,-1,0,647,648,
  	3,40,20,0,648,649,6,26,-1,0,649,650,5,16,0,0,650,651,5,41,0,0,651,652,
  	3,66,33,0,652,653,6,26,-1,0,653,654,5,42,0,0,654,655,5,38,0,0,655,656,
  	6,26,-1,0,656,658,1,0,0,0,657,635,1,0,0,0,657,645,1,0,0,0,658,53,1,0,
  	0,0,659,660,5,43,0,0,660,671,6,27,-1,0,661,662,3,20,10,0,662,663,5,38,
  	0,0,663,664,6,27,-1,0,664,670,1,0,0,0,665,666,3,40,20,0,666,667,6,27,
  	-1,0,667,670,1,0,0,0,668,670,3,10,5,0,669,661,1,0,0,0,669,665,1,0,0,0,
  	669,668,1,0,0,0,670,673,1,0,0,0,671,669,1,0,0,0,671,672,1,0,0,0,672,674,
  	1,0,0,0,673,671,1,0,0,0,674,675,5,44,0,0,675,676,6,27,-1,0,676,677,6,
  	27,-1,0,677,55,1,0,0,0,678,679,5,18,0,0,679,683,6,28,-1,0,680,681,3,66,
  	33,0,681,682,6,28,-1,0,682,684,1,0,0,0,683,680,1,0,0,0,683,684,1,0,0,
  	0,684,685,1,0,0,0,685,686,5,38,0,0,686,700,6,28,-1,0,687,688,5,19,0,0,
  	688,689,6,28,-1,0,689,690,5,38,0,0,690,700,6,28,-1,0,691,692,5,20,0,0,
  	692,693,6,28,-1,0,693,694,5,38,0,0,694,700,6,28,-1,0,695,696,5,21,0,0,
  	696,697,6,28,-1,0,697,698,5,38,0,0,698,700,6,28,-1,0,699,678,1,0,0,0,
  	699,687,1,0,0,0,699,691,1,0,0,0,699,695,1,0,0,0,700,57,1,0,0,0,701,702,
  	5,22,0,0,702,703,6,29,-1,0,703,704,5,38,0,0,704,705,6,29,-1,0,705,59,
  	1,0,0,0,706,707,5,23,0,0,707,708,6,30,-1,0,708,709,5,41,0,0,709,710,3,
  	66,33,0,710,711,5,42,0,0,711,712,6,30,-1,0,712,724,5,43,0,0,713,714,5,
  	24,0,0,714,715,3,66,33,0,715,716,5,40,0,0,716,720,6,30,-1,0,717,718,3,
  	40,20,0,718,719,6,30,-1,0,719,721,1,0,0,0,720,717,1,0,0,0,720,721,1,0,
  	0,0,721,723,1,0,0,0,722,713,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,724,
  	725,1,0,0,0,725,734,1,0,0,0,726,724,1,0,0,0,727,728,5,25,0,0,728,732,
  	5,40,0,0,729,730,3,40,20,0,730,731,6,30,-1,0,731,733,1,0,0,0,732,729,
  	1,0,0,0,732,733,1,0,0,0,733,735,1,0,0,0,734,727,1,0,0,0,734,735,1,0,0,
  	0,735,736,1,0,0,0,736,737,5,44,0,0,737,738,6,30,-1,0,738,61,1,0,0,0,739,
  	740,5,26,0,0,740,741,6,31,-1,0,741,742,5,38,0,0,742,743,6,31,-1,0,743,
  	63,1,0,0,0,744,745,6,32,-1,0,745,746,7,3,0,0,746,747,3,64,32,13,747,748,
  	6,32,-1,0,748,753,1,0,0,0,749,750,3,68,34,0,750,751,6,32,-1,0,751,753,
  	1,0,0,0,752,744,1,0,0,0,752,749,1,0,0,0,753,891,1,0,0,0,754,755,10,12,
  	0,0,755,756,6,32,-1,0,756,757,7,4,0,0,757,758,6,32,-1,0,758,759,3,64,
  	32,13,759,760,6,32,-1,0,760,890,1,0,0,0,761,762,10,11,0,0,762,763,6,32,
  	-1,0,763,764,7,5,0,0,764,765,6,32,-1,0,765,766,3,64,32,12,766,767,6,32,
  	-1,0,767,890,1,0,0,0,768,769,10,10,0,0,769,770,6,32,-1,0,770,771,7,6,
  	0,0,771,772,6,32,-1,0,772,773,3,64,32,11,773,774,6,32,-1,0,774,890,1,
  	0,0,0,775,776,10,9,0,0,776,777,6,32,-1,0,777,778,7,7,0,0,778,779,6,32,
  	-1,0,779,780,3,64,32,10,780,781,6,32,-1,0,781,890,1,0,0,0,782,783,10,
  	8,0,0,783,784,6,32,-1,0,784,785,7,8,0,0,785,786,6,32,-1,0,786,787,3,64,
  	32,9,787,788,6,32,-1,0,788,890,1,0,0,0,789,790,10,7,0,0,790,791,6,32,
  	-1,0,791,792,5,52,0,0,792,793,6,32,-1,0,793,794,3,64,32,8,794,795,6,32,
  	-1,0,795,890,1,0,0,0,796,797,10,6,0,0,797,798,6,32,-1,0,798,799,5,56,
  	0,0,799,800,6,32,-1,0,800,801,3,64,32,7,801,802,6,32,-1,0,802,890,1,0,
  	0,0,803,804,10,5,0,0,804,805,6,32,-1,0,805,806,5,54,0,0,806,807,6,32,
  	-1,0,807,808,3,64,32,6,808,809,6,32,-1,0,809,890,1,0,0,0,810,811,10,4,
  	0,0,811,812,6,32,-1,0,812,813,5,68,0,0,813,814,6,32,-1,0,814,815,3,64,
  	32,5,815,816,6,32,-1,0,816,890,1,0,0,0,817,818,10,3,0,0,818,819,6,32,
  	-1,0,819,820,5,69,0,0,820,821,6,32,-1,0,821,822,3,64,32,4,822,823,6,32,
  	-1,0,823,890,1,0,0,0,824,825,10,14,0,0,825,871,6,32,-1,0,826,827,7,9,
  	0,0,827,828,6,32,-1,0,828,872,6,32,-1,0,829,830,5,41,0,0,830,846,6,32,
  	-1,0,831,832,3,64,32,0,832,834,6,32,-1,0,833,835,3,10,5,0,834,833,1,0,
  	0,0,834,835,1,0,0,0,835,843,1,0,0,0,836,837,5,39,0,0,837,838,3,64,32,
  	0,838,839,6,32,-1,0,839,842,1,0,0,0,840,842,3,10,5,0,841,836,1,0,0,0,
  	841,840,1,0,0,0,842,845,1,0,0,0,843,841,1,0,0,0,843,844,1,0,0,0,844,847,
  	1,0,0,0,845,843,1,0,0,0,846,831,1,0,0,0,846,847,1,0,0,0,847,848,1,0,0,
  	0,848,849,5,42,0,0,849,870,6,32,-1,0,850,851,5,47,0,0,851,852,6,32,-1,
  	0,852,853,3,64,32,0,853,854,6,32,-1,0,854,870,1,0,0,0,855,856,5,77,0,
  	0,856,857,6,32,-1,0,857,858,3,64,32,0,858,859,6,32,-1,0,859,870,1,0,0,
  	0,860,861,5,45,0,0,861,865,6,32,-1,0,862,863,3,64,32,0,863,864,6,32,-1,
  	0,864,866,1,0,0,0,865,862,1,0,0,0,865,866,1,0,0,0,866,867,1,0,0,0,867,
  	868,5,46,0,0,868,870,6,32,-1,0,869,829,1,0,0,0,869,850,1,0,0,0,869,855,
  	1,0,0,0,869,860,1,0,0,0,870,872,1,0,0,0,871,826,1,0,0,0,871,869,1,0,0,
  	0,872,890,1,0,0,0,873,874,10,2,0,0,874,887,6,32,-1,0,875,876,5,51,0,0,
  	876,877,6,32,-1,0,877,878,3,64,32,0,878,879,5,40,0,0,879,880,3,64,32,
  	0,880,881,6,32,-1,0,881,888,1,0,0,0,882,883,7,10,0,0,883,884,6,32,-1,
  	0,884,885,3,64,32,0,885,886,6,32,-1,0,886,888,1,0,0,0,887,875,1,0,0,0,
  	887,882,1,0,0,0,888,890,1,0,0,0,889,754,1,0,0,0,889,761,1,0,0,0,889,768,
  	1,0,0,0,889,775,1,0,0,0,889,782,1,0,0,0,889,789,1,0,0,0,889,796,1,0,0,
  	0,889,803,1,0,0,0,889,810,1,0,0,0,889,817,1,0,0,0,889,824,1,0,0,0,889,
  	873,1,0,0,0,890,893,1,0,0,0,891,889,1,0,0,0,891,892,1,0,0,0,892,65,1,
  	0,0,0,893,891,1,0,0,0,894,895,6,33,-1,0,895,896,7,3,0,0,896,897,3,66,
  	33,14,897,898,6,33,-1,0,898,903,1,0,0,0,899,900,3,68,34,0,900,901,6,33,
  	-1,0,901,903,1,0,0,0,902,894,1,0,0,0,902,899,1,0,0,0,903,1048,1,0,0,0,
  	904,905,10,13,0,0,905,906,6,33,-1,0,906,907,7,4,0,0,907,908,6,33,-1,0,
  	908,909,3,66,33,14,909,910,6,33,-1,0,910,1047,1,0,0,0,911,912,10,12,0,
  	0,912,913,6,33,-1,0,913,914,7,5,0,0,914,915,6,33,-1,0,915,916,3,66,33,
  	13,916,917,6,33,-1,0,917,1047,1,0,0,0,918,919,10,11,0,0,919,920,6,33,
  	-1,0,920,921,7,6,0,0,921,922,6,33,-1,0,922,923,3,66,33,12,923,924,6,33,
  	-1,0,924,1047,1,0,0,0,925,926,10,10,0,0,926,927,6,33,-1,0,927,928,7,7,
  	0,0,928,929,6,33,-1,0,929,930,3,66,33,11,930,931,6,33,-1,0,931,1047,1,
  	0,0,0,932,933,10,9,0,0,933,934,6,33,-1,0,934,935,7,8,0,0,935,936,6,33,
  	-1,0,936,937,3,66,33,10,937,938,6,33,-1,0,938,1047,1,0,0,0,939,940,10,
  	8,0,0,940,941,6,33,-1,0,941,942,5,52,0,0,942,943,6,33,-1,0,943,944,3,
  	66,33,9,944,945,6,33,-1,0,945,1047,1,0,0,0,946,947,10,7,0,0,947,948,6,
  	33,-1,0,948,949,5,56,0,0,949,950,6,33,-1,0,950,951,3,66,33,8,951,952,
  	6,33,-1,0,952,1047,1,0,0,0,953,954,10,6,0,0,954,955,6,33,-1,0,955,956,
  	5,54,0,0,956,957,6,33,-1,0,957,958,3,66,33,7,958,959,6,33,-1,0,959,1047,
  	1,0,0,0,960,961,10,5,0,0,961,962,6,33,-1,0,962,963,5,68,0,0,963,964,6,
  	33,-1,0,964,965,3,66,33,6,965,966,6,33,-1,0,966,1047,1,0,0,0,967,968,
  	10,4,0,0,968,969,6,33,-1,0,969,970,5,69,0,0,970,971,6,33,-1,0,971,972,
  	3,66,33,5,972,973,6,33,-1,0,973,1047,1,0,0,0,974,975,10,2,0,0,975,976,
  	6,33,-1,0,976,977,5,39,0,0,977,978,6,33,-1,0,978,979,3,66,33,3,979,980,
  	6,33,-1,0,980,1047,1,0,0,0,981,982,10,15,0,0,982,1028,6,33,-1,0,983,984,
  	7,9,0,0,984,985,6,33,-1,0,985,1029,6,33,-1,0,986,987,5,41,0,0,987,1003,
  	6,33,-1,0,988,989,3,64,32,0,989,991,6,33,-1,0,990,992,3,10,5,0,991,990,
  	1,0,0,0,991,992,1,0,0,0,992,1000,1,0,0,0,993,994,5,39,0,0,994,995,3,64,
  	32,0,995,996,6,33,-1,0,996,999,1,0,0,0,997,999,3,10,5,0,998,993,1,0,0,
  	0,998,997,1,0,0,0,999,1002,1,0,0,0,1000,998,1,0,0,0,1000,1001,1,0,0,0,
  	1001,1004,1,0,0,0,1002,1000,1,0,0,0,1003,988,1,0,0,0,1003,1004,1,0,0,
  	0,1004,1005,1,0,0,0,1005,1006,5,42,0,0,1006,1027,6,33,-1,0,1007,1008,
  	5,47,0,0,1008,1009,6,33,-1,0,1009,1010,3,66,33,0,1010,1011,6,33,-1,0,
  	1011,1027,1,0,0,0,1012,1013,5,77,0,0,1013,1014,6,33,-1,0,1014,1015,3,
  	66,33,0,1015,1016,6,33,-1,0,1016,1027,1,0,0,0,1017,1018,5,45,0,0,1018,
  	1022,6,33,-1,0,1019,1020,3,66,33,0,1020,1021,6,33,-1,0,1021,1023,1,0,
  	0,0,1022,1019,1,0,0,0,1022,1023,1,0,0,0,1023,1024,1,0,0,0,1024,1025,5,
  	46,0,0,1025,1027,6,33,-1,0,1026,986,1,0,0,0,1026,1007,1,0,0,0,1026,1012,
  	1,0,0,0,1026,1017,1,0,0,0,1027,1029,1,0,0,0,1028,983,1,0,0,0,1028,1026,
  	1,0,0,0,1029,1047,1,0,0,0,1030,1031,10,3,0,0,1031,1044,6,33,-1,0,1032,
  	1033,5,51,0,0,1033,1034,6,33,-1,0,1034,1035,3,66,33,0,1035,1036,5,40,
  	0,0,1036,1037,3,66,33,0,1037,1038,6,33,-1,0,1038,1045,1,0,0,0,1039,1040,
  	7,10,0,0,1040,1041,6,33,-1,0,1041,1042,3,66,33,0,1042,1043,6,33,-1,0,
  	1043,1045,1,0,0,0,1044,1032,1,0,0,0,1044,1039,1,0,0,0,1045,1047,1,0,0,
  	0,1046,904,1,0,0,0,1046,911,1,0,0,0,1046,918,1,0,0,0,1046,925,1,0,0,0,
  	1046,932,1,0,0,0,1046,939,1,0,0,0,1046,946,1,0,0,0,1046,953,1,0,0,0,1046,
  	960,1,0,0,0,1046,967,1,0,0,0,1046,974,1,0,0,0,1046,981,1,0,0,0,1046,1030,
  	1,0,0,0,1047,1050,1,0,0,0,1048,1046,1,0,0,0,1048,1049,1,0,0,0,1049,67,
  	1,0,0,0,1050,1048,1,0,0,0,1051,1052,3,70,35,0,1052,1053,6,34,-1,0,1053,
  	1082,1,0,0,0,1054,1055,3,72,36,0,1055,1056,6,34,-1,0,1056,1082,1,0,0,
  	0,1057,1058,5,41,0,0,1058,1059,3,66,33,0,1059,1060,5,42,0,0,1060,1061,
  	6,34,-1,0,1061,1082,1,0,0,0,1062,1063,5,78,0,0,1063,1082,6,34,-1,0,1064,
  	1065,5,79,0,0,1065,1082,6,34,-1,0,1066,1067,5,82,0,0,1067,1082,6,34,-1,
  	0,1068,1069,5,83,0,0,1069,1082,6,34,-1,0,1070,1071,5,84,0,0,1071,1082,
  	6,34,-1,0,1072,1073,3,0,0,0,1073,1074,6,34,-1,0,1074,1082,1,0,0,0,1075,
  	1076,5,85,0,0,1076,1082,6,34,-1,0,1077,1078,3,4,2,0,1078,1079,6,34,-1,
  	0,1079,1082,1,0,0,0,1080,1082,3,10,5,0,1081,1051,1,0,0,0,1081,1054,1,
  	0,0,0,1081,1057,1,0,0,0,1081,1062,1,0,0,0,1081,1064,1,0,0,0,1081,1066,
  	1,0,0,0,1081,1068,1,0,0,0,1081,1070,1,0,0,0,1081,1072,1,0,0,0,1081,1075,
  	1,0,0,0,1081,1077,1,0,0,0,1081,1080,1,0,0,0,1082,69,1,0,0,0,1083,1084,
  	5,85,0,0,1084,1085,6,35,-1,0,1085,1086,5,43,0,0,1086,1102,6,35,-1,0,1087,
  	1088,3,64,32,0,1088,1090,6,35,-1,0,1089,1091,3,10,5,0,1090,1089,1,0,0,
  	0,1090,1091,1,0,0,0,1091,1099,1,0,0,0,1092,1093,5,39,0,0,1093,1094,3,
  	64,32,0,1094,1095,6,35,-1,0,1095,1098,1,0,0,0,1096,1098,3,10,5,0,1097,
  	1092,1,0,0,0,1097,1096,1,0,0,0,1098,1101,1,0,0,0,1099,1097,1,0,0,0,1099,
  	1100,1,0,0,0,1100,1103,1,0,0,0,1101,1099,1,0,0,0,1102,1087,1,0,0,0,1102,
  	1103,1,0,0,0,1103,1104,1,0,0,0,1104,1105,5,44,0,0,1105,1106,6,35,-1,0,
  	1106,71,1,0,0,0,1107,1108,5,45,0,0,1108,1124,6,36,-1,0,1109,1110,3,64,
  	32,0,1110,1112,6,36,-1,0,1111,1113,3,10,5,0,1112,1111,1,0,0,0,1112,1113,
  	1,0,0,0,1113,1121,1,0,0,0,1114,1115,5,39,0,0,1115,1116,3,64,32,0,1116,
  	1117,6,36,-1,0,1117,1120,1,0,0,0,1118,1120,3,10,5,0,1119,1114,1,0,0,0,
  	1119,1118,1,0,0,0,1120,1123,1,0,0,0,1121,1119,1,0,0,0,1121,1122,1,0,0,
  	0,1122,1125,1,0,0,0,1123,1121,1,0,0,0,1124,1109,1,0,0,0,1124,1125,1,0,
  	0,0,1125,1126,1,0,0,0,1126,1127,5,46,0,0,1127,1128,6,36,-1,0,1128,73,
  	1,0,0,0,1129,1130,5,62,0,0,1130,1131,6,37,-1,0,1131,1132,5,82,0,0,1132,
  	1133,6,37,-1,0,1133,1135,1,0,0,0,1134,1136,3,10,5,0,1135,1134,1,0,0,0,
  	1135,1136,1,0,0,0,1136,1140,1,0,0,0,1137,1138,5,39,0,0,1138,1139,5,82,
  	0,0,1139,1141,6,37,-1,0,1140,1137,1,0,0,0,1141,1142,1,0,0,0,1142,1140,
  	1,0,0,0,1142,1143,1,0,0,0,1143,1144,1,0,0,0,1144,1145,5,64,0,0,1145,1146,
  	6,37,-1,0,1146,75,1,0,0,0,1147,1148,5,62,0,0,1148,1149,6,38,-1,0,1149,
  	1150,5,83,0,0,1150,1151,6,38,-1,0,1151,1153,1,0,0,0,1152,1154,3,10,5,
  	0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,1158,1,0,0,0,1155,1156,5,39,
  	0,0,1156,1157,5,83,0,0,1157,1159,6,38,-1,0,1158,1155,1,0,0,0,1159,1160,
  	1,0,0,0,1160,1158,1,0,0,0,1160,1161,1,0,0,0,1161,1162,1,0,0,0,1162,1163,
  	5,64,0,0,1163,1164,6,38,-1,0,1164,77,1,0,0,0,1165,1166,5,62,0,0,1166,
  	1167,6,39,-1,0,1167,1168,5,78,0,0,1168,1169,6,39,-1,0,1169,1171,1,0,0,
  	0,1170,1172,3,10,5,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,1176,1,
  	0,0,0,1173,1174,5,39,0,0,1174,1175,5,78,0,0,1175,1177,6,39,-1,0,1176,
  	1173,1,0,0,0,1177,1178,1,0,0,0,1178,1176,1,0,0,0,1178,1179,1,0,0,0,1179,
  	1180,1,0,0,0,1180,1181,5,64,0,0,1181,1182,6,39,-1,0,1182,79,1,0,0,0,1183,
  	1184,5,62,0,0,1184,1185,6,40,-1,0,1185,1186,5,79,0,0,1186,1187,6,40,-1,
  	0,1187,1189,1,0,0,0,1188,1190,3,10,5,0,1189,1188,1,0,0,0,1189,1190,1,
  	0,0,0,1190,1194,1,0,0,0,1191,1192,5,39,0,0,1192,1193,5,79,0,0,1193,1195,
  	6,40,-1,0,1194,1191,1,0,0,0,1195,1196,1,0,0,0,1196,1194,1,0,0,0,1196,
  	1197,1,0,0,0,1197,1198,1,0,0,0,1198,1199,5,64,0,0,1199,1200,6,40,-1,0,
  	1200,81,1,0,0,0,1201,1202,5,62,0,0,1202,1203,6,41,-1,0,1203,1204,3,4,
  	2,0,1204,1205,6,41,-1,0,1205,1207,1,0,0,0,1206,1208,3,10,5,0,1207,1206,
  	1,0,0,0,1207,1208,1,0,0,0,1208,1213,1,0,0,0,1209,1210,5,39,0,0,1210,1211,
  	3,4,2,0,1211,1212,6,41,-1,0,1212,1214,1,0,0,0,1213,1209,1,0,0,0,1214,
  	1215,1,0,0,0,1215,1213,1,0,0,0,1215,1216,1,0,0,0,1216,1217,1,0,0,0,1217,
  	1218,5,64,0,0,1218,1219,6,41,-1,0,1219,83,1,0,0,0,108,89,98,102,109,118,
  	122,128,170,172,204,214,220,222,231,239,247,252,258,260,267,277,279,282,
  	289,297,305,326,329,331,339,341,354,363,367,376,380,382,386,394,402,414,
  	423,432,439,441,444,460,473,484,492,507,525,559,576,586,592,598,606,657,
  	669,671,683,699,720,724,732,734,752,834,841,843,846,865,869,871,887,889,
  	891,902,991,998,1000,1003,1022,1026,1028,1044,1046,1048,1081,1090,1097,
  	1099,1102,1112,1119,1121,1124,1135,1142,1153,1160,1171,1178,1189,1196,
  	1207,1215
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  gpulangParserStaticData = std::move(staticData);
}

}

GPULangParser::GPULangParser(TokenStream *input) : GPULangParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

GPULangParser::GPULangParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  GPULangParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *gpulangParserStaticData->atn, gpulangParserStaticData->decisionToDFA, gpulangParserStaticData->sharedContextCache, options);
}

GPULangParser::~GPULangParser() {
  delete _interpreter;
}

const atn::ATN& GPULangParser::getATN() const {
  return *gpulangParserStaticData->atn;
}

std::string GPULangParser::getGrammarFileName() const {
  return "GPULang.g4";
}

const std::vector<std::string>& GPULangParser::getRuleNames() const {
  return gpulangParserStaticData->ruleNames;
}

const dfa::Vocabulary& GPULangParser::getVocabulary() const {
  return gpulangParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView GPULangParser::getSerializedATN() const {
  return gpulangParserStaticData->serializedATN;
}


std::vector<std::tuple<size_t, size_t, std::string>> GPULangParser::LineStack;


//----------------- StringContext ------------------------------------------------------------------

GPULangParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::StringContext::QO() {
  return getTokens(GPULangParser::QO);
}

tree::TerminalNode* GPULangParser::StringContext::QO(size_t i) {
  return getToken(GPULangParser::QO, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StringContext::Q() {
  return getTokens(GPULangParser::Q);
}

tree::TerminalNode* GPULangParser::StringContext::Q(size_t i) {
  return getToken(GPULangParser::Q, i);
}


size_t GPULangParser::StringContext::getRuleIndex() const {
  return GPULangParser::RuleString;
}

void GPULangParser::StringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString(this);
}

void GPULangParser::StringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString(this);
}


std::any GPULangParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::StringContext* GPULangParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 0, GPULangParser::RuleString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(102);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::QO: {
        enterOuterAlt(_localctx, 1);
        setState(84);
        match(GPULangParser::QO);
        setState(89);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -1125899906842626) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 8388607) != 0)) {
          setState(85);
          antlrcpp::downCast<StringContext *>(_localctx)->data = _input->LT(1);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == GPULangParser::QO)) {
            antlrcpp::downCast<StringContext *>(_localctx)->data = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           _localctx->val.append((antlrcpp::downCast<StringContext *>(_localctx)->data != nullptr ? antlrcpp::downCast<StringContext *>(_localctx)->data->getText() : "")); 
          setState(91);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(92);
        match(GPULangParser::QO);
        break;
      }

      case GPULangParser::Q: {
        enterOuterAlt(_localctx, 2);
        setState(93);
        match(GPULangParser::Q);
        setState(98);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -576460752303423490) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 8388607) != 0)) {
          setState(94);
          antlrcpp::downCast<StringContext *>(_localctx)->data = _input->LT(1);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == GPULangParser::Q)) {
            antlrcpp::downCast<StringContext *>(_localctx)->data = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           _localctx->val.append((antlrcpp::downCast<StringContext *>(_localctx)->data != nullptr ? antlrcpp::downCast<StringContext *>(_localctx)->data->getText() : "")); 
          setState(100);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(101);
        match(GPULangParser::Q);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathContext ------------------------------------------------------------------

GPULangParser::PathContext::PathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::PathContext::QO() {
  return getTokens(GPULangParser::QO);
}

tree::TerminalNode* GPULangParser::PathContext::QO(size_t i) {
  return getToken(GPULangParser::QO, i);
}

tree::TerminalNode* GPULangParser::PathContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::PathContext::GREATER() {
  return getTokens(GPULangParser::GREATER);
}

tree::TerminalNode* GPULangParser::PathContext::GREATER(size_t i) {
  return getToken(GPULangParser::GREATER, i);
}


size_t GPULangParser::PathContext::getRuleIndex() const {
  return GPULangParser::RulePath;
}

void GPULangParser::PathContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPath(this);
}

void GPULangParser::PathContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPath(this);
}


std::any GPULangParser::PathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitPath(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::PathContext* GPULangParser::path() {
  PathContext *_localctx = _tracker.createInstance<PathContext>(_ctx, getState());
  enterRule(_localctx, 2, GPULangParser::RulePath);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(122);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::QO: {
        enterOuterAlt(_localctx, 1);
        setState(104);
        match(GPULangParser::QO);
        setState(109);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -1125899906842626) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 8388607) != 0)) {
          setState(105);
          antlrcpp::downCast<PathContext *>(_localctx)->data = _input->LT(1);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == GPULangParser::QO)) {
            antlrcpp::downCast<PathContext *>(_localctx)->data = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           _localctx->val.append((antlrcpp::downCast<PathContext *>(_localctx)->data != nullptr ? antlrcpp::downCast<PathContext *>(_localctx)->data->getText() : "")); 
          setState(111);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(112);
        match(GPULangParser::QO);
        break;
      }

      case GPULangParser::LESS: {
        enterOuterAlt(_localctx, 2);
        setState(113);
        match(GPULangParser::LESS);
        setState(118);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -2) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & 4194303) != 0)) {
          setState(114);
          antlrcpp::downCast<PathContext *>(_localctx)->data = _input->LT(1);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == GPULangParser::GREATER)) {
            antlrcpp::downCast<PathContext *>(_localctx)->data = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           _localctx->val.append((antlrcpp::downCast<PathContext *>(_localctx)->data != nullptr ? antlrcpp::downCast<PathContext *>(_localctx)->data->getText() : "")); 
          setState(120);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(121);
        match(GPULangParser::GREATER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanContext ------------------------------------------------------------------

GPULangParser::BooleanContext::BooleanContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GPULangParser::BooleanContext::getRuleIndex() const {
  return GPULangParser::RuleBoolean;
}

void GPULangParser::BooleanContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean(this);
}

void GPULangParser::BooleanContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean(this);
}


std::any GPULangParser::BooleanContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitBoolean(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::BooleanContext* GPULangParser::boolean() {
  BooleanContext *_localctx = _tracker.createInstance<BooleanContext>(_ctx, getState());
  enterRule(_localctx, 4, GPULangParser::RuleBoolean);

          antlrcpp::downCast<BooleanContext *>(_localctx)->val =  false;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(128);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__0: {
        enterOuterAlt(_localctx, 1);
        setState(124);
        match(GPULangParser::T__0);
         antlrcpp::downCast<BooleanContext *>(_localctx)->val =  true; 
        break;
      }

      case GPULangParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(126);
        match(GPULangParser::T__1);
         antlrcpp::downCast<BooleanContext *>(_localctx)->val =  false; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EntryContext ------------------------------------------------------------------

GPULangParser::EntryContext::EntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::EffectContext* GPULangParser::EntryContext::effect() {
  return getRuleContext<GPULangParser::EffectContext>(0);
}

tree::TerminalNode* GPULangParser::EntryContext::EOF() {
  return getToken(GPULangParser::EOF, 0);
}


size_t GPULangParser::EntryContext::getRuleIndex() const {
  return GPULangParser::RuleEntry;
}

void GPULangParser::EntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry(this);
}

void GPULangParser::EntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry(this);
}


std::any GPULangParser::EntryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitEntry(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::EntryContext* GPULangParser::entry() {
  EntryContext *_localctx = _tracker.createInstance<EntryContext>(_ctx, getState());
  enterRule(_localctx, 6, GPULangParser::RuleEntry);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(130);
    antlrcpp::downCast<EntryContext *>(_localctx)->effectContext = effect();

            antlrcpp::downCast<EntryContext *>(_localctx)->returnEffect =  antlrcpp::downCast<EntryContext *>(_localctx)->effectContext->eff;
        
    setState(132);
    match(GPULangParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EffectContext ------------------------------------------------------------------

GPULangParser::EffectContext::EffectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::EffectContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::EffectContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::AliasContext *> GPULangParser::EffectContext::alias() {
  return getRuleContexts<GPULangParser::AliasContext>();
}

GPULangParser::AliasContext* GPULangParser::EffectContext::alias(size_t i) {
  return getRuleContext<GPULangParser::AliasContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::EffectContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::EffectContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::FunctionDeclarationContext *> GPULangParser::EffectContext::functionDeclaration() {
  return getRuleContexts<GPULangParser::FunctionDeclarationContext>();
}

GPULangParser::FunctionDeclarationContext* GPULangParser::EffectContext::functionDeclaration(size_t i) {
  return getRuleContext<GPULangParser::FunctionDeclarationContext>(i);
}

std::vector<GPULangParser::FunctionContext *> GPULangParser::EffectContext::function() {
  return getRuleContexts<GPULangParser::FunctionContext>();
}

GPULangParser::FunctionContext* GPULangParser::EffectContext::function(size_t i) {
  return getRuleContext<GPULangParser::FunctionContext>(i);
}

std::vector<GPULangParser::VariablesContext *> GPULangParser::EffectContext::variables() {
  return getRuleContexts<GPULangParser::VariablesContext>();
}

GPULangParser::VariablesContext* GPULangParser::EffectContext::variables(size_t i) {
  return getRuleContext<GPULangParser::VariablesContext>(i);
}

std::vector<GPULangParser::StructureContext *> GPULangParser::EffectContext::structure() {
  return getRuleContexts<GPULangParser::StructureContext>();
}

GPULangParser::StructureContext* GPULangParser::EffectContext::structure(size_t i) {
  return getRuleContext<GPULangParser::StructureContext>(i);
}

std::vector<GPULangParser::EnumerationContext *> GPULangParser::EffectContext::enumeration() {
  return getRuleContexts<GPULangParser::EnumerationContext>();
}

GPULangParser::EnumerationContext* GPULangParser::EffectContext::enumeration(size_t i) {
  return getRuleContext<GPULangParser::EnumerationContext>(i);
}

std::vector<GPULangParser::StateContext *> GPULangParser::EffectContext::state() {
  return getRuleContexts<GPULangParser::StateContext>();
}

GPULangParser::StateContext* GPULangParser::EffectContext::state(size_t i) {
  return getRuleContext<GPULangParser::StateContext>(i);
}

std::vector<GPULangParser::SamplerContext *> GPULangParser::EffectContext::sampler() {
  return getRuleContexts<GPULangParser::SamplerContext>();
}

GPULangParser::SamplerContext* GPULangParser::EffectContext::sampler(size_t i) {
  return getRuleContext<GPULangParser::SamplerContext>(i);
}

std::vector<GPULangParser::ProgramContext *> GPULangParser::EffectContext::program() {
  return getRuleContexts<GPULangParser::ProgramContext>();
}

GPULangParser::ProgramContext* GPULangParser::EffectContext::program(size_t i) {
  return getRuleContext<GPULangParser::ProgramContext>(i);
}


size_t GPULangParser::EffectContext::getRuleIndex() const {
  return GPULangParser::RuleEffect;
}

void GPULangParser::EffectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEffect(this);
}

void GPULangParser::EffectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEffect(this);
}


std::any GPULangParser::EffectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitEffect(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::EffectContext* GPULangParser::effect() {
  EffectContext *_localctx = _tracker.createInstance<EffectContext>(_ctx, getState());
  enterRule(_localctx, 8, GPULangParser::RuleEffect);

          antlrcpp::downCast<EffectContext *>(_localctx)->eff =  Alloc<Effect>();
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(172);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1 + 1) {
        setState(170);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
        case 1: {
          setState(134);
          linePreprocessorEntry();
          break;
        }

        case 2: {
          setState(135);
          antlrcpp::downCast<EffectContext *>(_localctx)->aliasContext = alias();
          setState(136);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->aliasContext->sym); 
          break;
        }

        case 3: {
          setState(139);
          antlrcpp::downCast<EffectContext *>(_localctx)->functionDeclarationContext = functionDeclaration();
          setState(140);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->functionDeclarationContext->sym); 
          break;
        }

        case 4: {
          setState(143);
          antlrcpp::downCast<EffectContext *>(_localctx)->functionContext = function();
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->functionContext->sym); 
          break;
        }

        case 5: {
          setState(146);
          antlrcpp::downCast<EffectContext *>(_localctx)->variablesContext = variables();
          setState(147);
          match(GPULangParser::SC);
           for (Variable* var : antlrcpp::downCast<EffectContext *>(_localctx)->variablesContext->vars) { _localctx->eff->symbols.Append(var); } 
          break;
        }

        case 6: {
          setState(150);
          antlrcpp::downCast<EffectContext *>(_localctx)->structureContext = structure();
          setState(151);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->structureContext->sym); 
          break;
        }

        case 7: {
          setState(154);
          antlrcpp::downCast<EffectContext *>(_localctx)->enumerationContext = enumeration();
          setState(155);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->enumerationContext->sym); 
          break;
        }

        case 8: {
          setState(158);
          antlrcpp::downCast<EffectContext *>(_localctx)->stateContext = state();
          setState(159);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->stateContext->sym); 
          break;
        }

        case 9: {
          setState(162);
          antlrcpp::downCast<EffectContext *>(_localctx)->samplerContext = sampler();
          setState(163);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->samplerContext->sym); 
          break;
        }

        case 10: {
          setState(166);
          antlrcpp::downCast<EffectContext *>(_localctx)->programContext = program();
          setState(167);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->programContext->sym); 
          break;
        }

        default:
          break;
        } 
      }
      setState(174);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinePreprocessorEntryContext ------------------------------------------------------------------

GPULangParser::LinePreprocessorEntryContext::LinePreprocessorEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::LinePreprocessorEntryContext::INTEGERLITERAL() {
  return getToken(GPULangParser::INTEGERLITERAL, 0);
}

GPULangParser::StringContext* GPULangParser::LinePreprocessorEntryContext::string() {
  return getRuleContext<GPULangParser::StringContext>(0);
}


size_t GPULangParser::LinePreprocessorEntryContext::getRuleIndex() const {
  return GPULangParser::RuleLinePreprocessorEntry;
}

void GPULangParser::LinePreprocessorEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLinePreprocessorEntry(this);
}

void GPULangParser::LinePreprocessorEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLinePreprocessorEntry(this);
}


std::any GPULangParser::LinePreprocessorEntryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitLinePreprocessorEntry(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::linePreprocessorEntry() {
  LinePreprocessorEntryContext *_localctx = _tracker.createInstance<LinePreprocessorEntryContext>(_ctx, getState());
  enterRule(_localctx, 10, GPULangParser::RuleLinePreprocessorEntry);

          size_t origLine;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(175);
    match(GPULangParser::T__2);
     origLine = _input->LT(-1)->getLine(); 
    setState(177);
    antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->line = match(GPULangParser::INTEGERLITERAL);
    setState(178);
    antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->p = string();
     LineStack.push_back( {origLine, atoi((antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->line != nullptr ? antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->line->getText() : "").c_str()), antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->p->val }); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasContext ------------------------------------------------------------------

GPULangParser::AliasContext::AliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::AliasContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::AliasContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}


size_t GPULangParser::AliasContext::getRuleIndex() const {
  return GPULangParser::RuleAlias;
}

void GPULangParser::AliasContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlias(this);
}

void GPULangParser::AliasContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlias(this);
}


std::any GPULangParser::AliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitAlias(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::AliasContext* GPULangParser::alias() {
  AliasContext *_localctx = _tracker.createInstance<AliasContext>(_ctx, getState());
  enterRule(_localctx, 12, GPULangParser::RuleAlias);

          antlrcpp::downCast<AliasContext *>(_localctx)->sym =  nullptr;
          std::string name;
          std::string type;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(181);
    match(GPULangParser::T__3);
    setState(182);
    antlrcpp::downCast<AliasContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
    setState(183);
    match(GPULangParser::T__4);
    setState(184);
    antlrcpp::downCast<AliasContext *>(_localctx)->type = match(GPULangParser::IDENTIFIER);
     name = (antlrcpp::downCast<AliasContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AliasContext *>(_localctx)->name->getText() : ""); type = (antlrcpp::downCast<AliasContext *>(_localctx)->type != nullptr ? antlrcpp::downCast<AliasContext *>(_localctx)->type->getText() : ""); 

            antlrcpp::downCast<AliasContext *>(_localctx)->sym =  Alloc<Alias>();
            _localctx->sym->name = name;
            _localctx->sym->type = type;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

GPULangParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::AnnotationContext::SOBAKA() {
  return getToken(GPULangParser::SOBAKA, 0);
}

tree::TerminalNode* GPULangParser::AnnotationContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::AnnotationContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::AnnotationContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::ExpressionContext* GPULangParser::AnnotationContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}


size_t GPULangParser::AnnotationContext::getRuleIndex() const {
  return GPULangParser::RuleAnnotation;
}

void GPULangParser::AnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation(this);
}

void GPULangParser::AnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation(this);
}


std::any GPULangParser::AnnotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitAnnotation(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::AnnotationContext* GPULangParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 14, GPULangParser::RuleAnnotation);

          antlrcpp::downCast<AnnotationContext *>(_localctx)->annot =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(188);
    match(GPULangParser::SOBAKA);

    setState(189);
    antlrcpp::downCast<AnnotationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
    setState(190);
    match(GPULangParser::LP);
    setState(191);
    antlrcpp::downCast<AnnotationContext *>(_localctx)->value = expression(0);
    setState(192);
    match(GPULangParser::RP);
     antlrcpp::downCast<AnnotationContext *>(_localctx)->annot =  Alloc<Annotation>(); _localctx->annot->name = (antlrcpp::downCast<AnnotationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AnnotationContext *>(_localctx)->name->getText() : ""); _localctx->annot->value = antlrcpp::downCast<AnnotationContext *>(_localctx)->value->tree; 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeContext ------------------------------------------------------------------

GPULangParser::AttributeContext::AttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::AttributeContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::AttributeContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::AttributeContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::ExpressionContext* GPULangParser::AttributeContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}


size_t GPULangParser::AttributeContext::getRuleIndex() const {
  return GPULangParser::RuleAttribute;
}

void GPULangParser::AttributeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute(this);
}

void GPULangParser::AttributeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute(this);
}


std::any GPULangParser::AttributeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitAttribute(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::AttributeContext* GPULangParser::attribute() {
  AttributeContext *_localctx = _tracker.createInstance<AttributeContext>(_ctx, getState());
  enterRule(_localctx, 16, GPULangParser::RuleAttribute);

          antlrcpp::downCast<AttributeContext *>(_localctx)->attr =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(204);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(195);
      antlrcpp::downCast<AttributeContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
       antlrcpp::downCast<AttributeContext *>(_localctx)->attr =  Alloc<Attribute>(); _localctx->attr->location = SetupFile(); _localctx->attr->name = (antlrcpp::downCast<AttributeContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AttributeContext *>(_localctx)->name->getText() : ""); 
      setState(197);
      match(GPULangParser::LP);
      setState(198);
      antlrcpp::downCast<AttributeContext *>(_localctx)->e = antlrcpp::downCast<AttributeContext *>(_localctx)->expressionContext = expression(0);
      setState(199);
      match(GPULangParser::RP);
       _localctx->attr->expression = antlrcpp::downCast<AttributeContext *>(_localctx)->expressionContext->tree; 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(202);
      antlrcpp::downCast<AttributeContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
       antlrcpp::downCast<AttributeContext *>(_localctx)->attr =  Alloc<Attribute>(); _localctx->attr->location = SetupFile(); _localctx->attr->name = (antlrcpp::downCast<AttributeContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AttributeContext *>(_localctx)->name->getText() : ""); _localctx->attr->expression = nullptr; 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclarationContext ------------------------------------------------------------------

GPULangParser::TypeDeclarationContext::TypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::MUL_OP() {
  return getTokens(GPULangParser::MUL_OP);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::MUL_OP(size_t i) {
  return getToken(GPULangParser::MUL_OP, i);
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::LL() {
  return getTokens(GPULangParser::LL);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::LL(size_t i) {
  return getToken(GPULangParser::LL, i);
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::RR() {
  return getTokens(GPULangParser::RR);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::RR(size_t i) {
  return getToken(GPULangParser::RR, i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::TypeDeclarationContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::TypeDeclarationContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::TypeDeclarationContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::TypeDeclarationContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::TypeDeclarationContext::getRuleIndex() const {
  return GPULangParser::RuleTypeDeclaration;
}

void GPULangParser::TypeDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeDeclaration(this);
}

void GPULangParser::TypeDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeDeclaration(this);
}


std::any GPULangParser::TypeDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitTypeDeclaration(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::TypeDeclarationContext* GPULangParser::typeDeclaration() {
  TypeDeclarationContext *_localctx = _tracker.createInstance<TypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 18, GPULangParser::RuleTypeDeclaration);

          _localctx->type.type.name = "";
          Symbol::Location typeRange;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
     typeRange = BeginLocationRange(); 
    setState(222);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(220);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case GPULangParser::MUL_OP: {
            setState(207);
            match(GPULangParser::MUL_OP);
             _localctx->type.type.AddModifier(Type::FullType::Modifier::Pointer); 
            break;
          }

          case GPULangParser::LL: {
            setState(209);
            match(GPULangParser::LL);
             _localctx->type.type.AddModifier(Type::FullType::Modifier::Array); 
            setState(214);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if ((((_la & ~ 0x3fULL) == 0) &&
              ((1ULL << _la) & 866135887136686094) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
              ((1ULL << (_la - 73)) & 7787) != 0)) {
              setState(211);
              antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->arraySize0 = expression(0);
               _localctx->type.type.UpdateValue(antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->arraySize0->tree); 
            }
            setState(216);
            match(GPULangParser::RR);
            break;
          }

          case GPULangParser::IDENTIFIER: {
            setState(217);
            antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->qual = match(GPULangParser::IDENTIFIER);
             _localctx->type.type.AddQualifier(FixedString((antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->qual != nullptr ? antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->qual->getText() : ""))); 
            break;
          }

          case GPULangParser::T__2: {
            setState(219);
            linePreprocessorEntry();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(224);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    }
    setState(225);
    antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->typeName = match(GPULangParser::IDENTIFIER);
     _localctx->type.type.name = (antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->typeName != nullptr ? antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->typeName->getText() : ""); _localctx->type.location = EndLocationRange(typeRange); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariablesContext ------------------------------------------------------------------

GPULangParser::VariablesContext::VariablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::VariablesContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::VariablesContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::VariablesContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::VariablesContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::AnnotationContext *> GPULangParser::VariablesContext::annotation() {
  return getRuleContexts<GPULangParser::AnnotationContext>();
}

GPULangParser::AnnotationContext* GPULangParser::VariablesContext::annotation(size_t i) {
  return getRuleContext<GPULangParser::AnnotationContext>(i);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::VariablesContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::VariablesContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::VariablesContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::VariablesContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}

tree::TerminalNode* GPULangParser::VariablesContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::VariablesContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

tree::TerminalNode* GPULangParser::VariablesContext::EQ() {
  return getToken(GPULangParser::EQ, 0);
}

std::vector<GPULangParser::ExpressionNoCommaContext *> GPULangParser::VariablesContext::expressionNoComma() {
  return getRuleContexts<GPULangParser::ExpressionNoCommaContext>();
}

GPULangParser::ExpressionNoCommaContext* GPULangParser::VariablesContext::expressionNoComma(size_t i) {
  return getRuleContext<GPULangParser::ExpressionNoCommaContext>(i);
}


size_t GPULangParser::VariablesContext::getRuleIndex() const {
  return GPULangParser::RuleVariables;
}

void GPULangParser::VariablesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariables(this);
}

void GPULangParser::VariablesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariables(this);
}


std::any GPULangParser::VariablesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitVariables(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::VariablesContext* GPULangParser::variables() {
  VariablesContext *_localctx = _tracker.createInstance<VariablesContext>(_ctx, getState());
  enterRule(_localctx, 20, GPULangParser::RuleVariables);

          StackArray<Variable*> list(256);
          StackArray<Annotation*> annotations(32);
          StackArray<Attribute*> attributes(32);
          StackArray<std::string> names(256);
          StackArray<Expression*> valueExpressions(256);
          StackArray<Symbol::Location> locations(256);
          unsigned initCounter = 0;
          TypeDeclaration type = TypeDeclaration{ .type = Type::FullType{UNDEFINED_TYPE} };
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(231);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2) {
      setState(228);
      linePreprocessorEntry();
      setState(233);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(239);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::SOBAKA) {
      setState(234);
      antlrcpp::downCast<VariablesContext *>(_localctx)->annotationContext = annotation();
       if (annotations.Full()) { throw IndexOutOfBoundsException("Maximum of 32 annotations reached"); } annotations.Append(std::move(antlrcpp::downCast<VariablesContext *>(_localctx)->annotationContext->annot)); 
      setState(241);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(245); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(242);
              antlrcpp::downCast<VariablesContext *>(_localctx)->attributeContext = attribute();
               if (attributes.Full()) { throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); } attributes.Append(std::move(antlrcpp::downCast<VariablesContext *>(_localctx)->attributeContext->attr)); 
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(247); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(249);
    antlrcpp::downCast<VariablesContext *>(_localctx)->varName = match(GPULangParser::IDENTIFIER);
     names.Append((antlrcpp::downCast<VariablesContext *>(_localctx)->varName != nullptr ? antlrcpp::downCast<VariablesContext *>(_localctx)->varName->getText() : "")); valueExpressions.Append(nullptr); locations.Append(SetupFile()); 
    setState(252);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      setState(251);
      linePreprocessorEntry();
      break;
    }

    default:
      break;
    }
    setState(260);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2

    || _la == GPULangParser::CO) {
      setState(258);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case GPULangParser::CO: {
          setState(254);
          match(GPULangParser::CO);
          setState(255);
          antlrcpp::downCast<VariablesContext *>(_localctx)->varNameN = match(GPULangParser::IDENTIFIER);
           if (names.Full()) { throw IndexOutOfBoundsException("Maximum of 256 variable declarations reached"); } names.Append((antlrcpp::downCast<VariablesContext *>(_localctx)->varNameN != nullptr ? antlrcpp::downCast<VariablesContext *>(_localctx)->varNameN->getText() : "")); valueExpressions.Append(nullptr); locations.Append(SetupFile()); 
          break;
        }

        case GPULangParser::T__2: {
          setState(257);
          linePreprocessorEntry();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(262);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(267);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::COL) {
      setState(263);
      match(GPULangParser::COL);
      setState(264);
      antlrcpp::downCast<VariablesContext *>(_localctx)->typeDeclarationContext = typeDeclaration();
       type = antlrcpp::downCast<VariablesContext *>(_localctx)->typeDeclarationContext->type; 
    }
    setState(282);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::EQ) {
      setState(269);
      match(GPULangParser::EQ);
      setState(270);
      antlrcpp::downCast<VariablesContext *>(_localctx)->valueExpr = expressionNoComma(0);
       if (initCounter < names.size) { valueExpressions[initCounter++] = antlrcpp::downCast<VariablesContext *>(_localctx)->valueExpr->tree; }  
      setState(279);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GPULangParser::T__2

      || _la == GPULangParser::CO) {
        setState(277);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case GPULangParser::CO: {
            setState(272);
            match(GPULangParser::CO);
            setState(273);
            antlrcpp::downCast<VariablesContext *>(_localctx)->valueExprN = expressionNoComma(0);
             if (initCounter < names.size) { valueExpressions[initCounter++] = antlrcpp::downCast<VariablesContext *>(_localctx)->valueExprN->tree; }; 
            break;
          }

          case GPULangParser::T__2: {
            setState(276);
            linePreprocessorEntry();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(281);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }

            for (size_t i = 0; i < names.size; i++)
            {
                Variable* var = Alloc<Variable>(); 
                var->type = type.type; 
                var->typeLocation = type.location;
                var->location = locations[i]; 
                var->annotations = annotations;
                var->attributes = attributes;
                var->name = names[i];
                var->valueExpression = valueExpressions[i];
                list.Append(var);
            }
            antlrcpp::downCast<VariablesContext *>(_localctx)->vars =  list;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureDeclarationContext ------------------------------------------------------------------

GPULangParser::StructureDeclarationContext::StructureDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::StructureDeclarationContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::StructureDeclarationContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::StructureDeclarationContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::AnnotationContext *> GPULangParser::StructureDeclarationContext::annotation() {
  return getRuleContexts<GPULangParser::AnnotationContext>();
}

GPULangParser::AnnotationContext* GPULangParser::StructureDeclarationContext::annotation(size_t i) {
  return getRuleContext<GPULangParser::AnnotationContext>(i);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::StructureDeclarationContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::StructureDeclarationContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}


size_t GPULangParser::StructureDeclarationContext::getRuleIndex() const {
  return GPULangParser::RuleStructureDeclaration;
}

void GPULangParser::StructureDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructureDeclaration(this);
}

void GPULangParser::StructureDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructureDeclaration(this);
}


std::any GPULangParser::StructureDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitStructureDeclaration(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::StructureDeclarationContext* GPULangParser::structureDeclaration() {
  StructureDeclarationContext *_localctx = _tracker.createInstance<StructureDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 22, GPULangParser::RuleStructureDeclaration);

          antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->sym =  nullptr;
          StackArray<Annotation*> annotations(32);
          StackArray<Attribute*> attributes(32);
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(289);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2) {
      setState(286);
      linePreprocessorEntry();
      setState(291);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(297);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::SOBAKA) {
      setState(292);
      antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->annotationContext = annotation();
       if (annotations.Full()) { throw IndexOutOfBoundsException("Maximum of 32 annotations reached"); } annotations.Append(std::move(antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->annotationContext->annot)); 
      setState(299);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(305);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::IDENTIFIER) {
      setState(300);
      antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->attributeContext = attribute();
       if (attributes.Full()) { throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); } attributes.Append(std::move(antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->attributeContext->attr)); 
      setState(307);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(308);
    match(GPULangParser::T__5);
    setState(309);
    antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     
            antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->sym =  Alloc<Structure>();
            _localctx->sym->name = (antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->name->getText() : ""); 
            _localctx->sym->annotations = annotations;
            _localctx->sym->attributes = attributes;
            _localctx->sym->location = SetupFile();
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureContext ------------------------------------------------------------------

GPULangParser::StructureContext::StructureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::StructureDeclarationContext* GPULangParser::StructureContext::structureDeclaration() {
  return getRuleContext<GPULangParser::StructureDeclarationContext>(0);
}

tree::TerminalNode* GPULangParser::StructureContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::StructureContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::COL() {
  return getTokens(GPULangParser::COL);
}

tree::TerminalNode* GPULangParser::StructureContext::COL(size_t i) {
  return getToken(GPULangParser::COL, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::StructureContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::StructureContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::StructureContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::StructureContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::MUL_OP() {
  return getTokens(GPULangParser::MUL_OP);
}

tree::TerminalNode* GPULangParser::StructureContext::MUL_OP(size_t i) {
  return getToken(GPULangParser::MUL_OP, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::LL() {
  return getTokens(GPULangParser::LL);
}

tree::TerminalNode* GPULangParser::StructureContext::LL(size_t i) {
  return getToken(GPULangParser::LL, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::RR() {
  return getTokens(GPULangParser::RR);
}

tree::TerminalNode* GPULangParser::StructureContext::RR(size_t i) {
  return getToken(GPULangParser::RR, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::StructureContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::StructureContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::StructureContext::getRuleIndex() const {
  return GPULangParser::RuleStructure;
}

void GPULangParser::StructureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure(this);
}

void GPULangParser::StructureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure(this);
}


std::any GPULangParser::StructureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitStructure(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::StructureContext* GPULangParser::structure() {
  StructureContext *_localctx = _tracker.createInstance<StructureContext>(_ctx, getState());
  enterRule(_localctx, 24, GPULangParser::RuleStructure);

          antlrcpp::downCast<StructureContext *>(_localctx)->sym =  nullptr;
          StackArray<Symbol*> members(1024);
          bool isArray = false;
          Expression* arraySizeExpression = nullptr;
          std::string instanceName;
          Symbol::Location varLocation;
          Type::FullType varType;
          Symbol::Location varTypeLocation;
          Symbol::Location typeRange;
          std::string varName;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(312);
    antlrcpp::downCast<StructureContext *>(_localctx)->structureDeclarationContext = structureDeclaration();
     antlrcpp::downCast<StructureContext *>(_localctx)->sym =  antlrcpp::downCast<StructureContext *>(_localctx)->structureDeclarationContext->sym; 
    setState(314);
    match(GPULangParser::LB);
    setState(341);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2 || _la == GPULangParser::IDENTIFIER) {
      setState(339);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case GPULangParser::IDENTIFIER: {
          setState(315);
          antlrcpp::downCast<StructureContext *>(_localctx)->varName = match(GPULangParser::IDENTIFIER);
           varName = (antlrcpp::downCast<StructureContext *>(_localctx)->varName != nullptr ? antlrcpp::downCast<StructureContext *>(_localctx)->varName->getText() : ""); varLocation = SetupFile(); 
          setState(317);
          match(GPULangParser::COL);
           typeRange = BeginLocationRange(); 
          setState(331);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == GPULangParser::LL

          || _la == GPULangParser::MUL_OP) {
            setState(329);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case GPULangParser::MUL_OP: {
                setState(319);
                match(GPULangParser::MUL_OP);
                 varType.AddModifier(Type::FullType::Modifier::Pointer); 
                break;
              }

              case GPULangParser::LL: {
                setState(321);
                match(GPULangParser::LL);
                 varType.AddModifier(Type::FullType::Modifier::Array); 
                setState(326);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if ((((_la & ~ 0x3fULL) == 0) &&
                  ((1ULL << _la) & 866135887136686094) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
                  ((1ULL << (_la - 73)) & 7787) != 0)) {
                  setState(323);
                  antlrcpp::downCast<StructureContext *>(_localctx)->arraySize0 = expression(0);
                   varType.UpdateValue(antlrcpp::downCast<StructureContext *>(_localctx)->arraySize0->tree); 
                }
                setState(328);
                match(GPULangParser::RR);
                break;
              }

            default:
              throw NoViableAltException(this);
            }
            setState(333);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(334);
          antlrcpp::downCast<StructureContext *>(_localctx)->varTypeName = match(GPULangParser::IDENTIFIER);
           if (members.Full()) { throw IndexOutOfBoundsException("Maximum of 1024 struct members reached"); } varType.name = (antlrcpp::downCast<StructureContext *>(_localctx)->varTypeName != nullptr ? antlrcpp::downCast<StructureContext *>(_localctx)->varTypeName->getText() : ""); varTypeLocation = EndLocationRange(typeRange); 
          setState(336);
          match(GPULangParser::SC);

                          Variable* var = Alloc<Variable>(); 
                          var->type = varType; 
                          var->location = varLocation; 
                          var->typeLocation = varTypeLocation;
                          var->name = varName;
                          var->valueExpression = nullptr;
                          members.Append(var);
                          
                          varType = Type::FullType();
                      
          break;
        }

        case GPULangParser::T__2: {
          setState(338);
          linePreprocessorEntry();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(343);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(344);
    match(GPULangParser::RB);
     
            _localctx->sym->symbols = members; 
            //_localctx->sym->instanceName = instanceName;
            //_localctx->sym->isArray = isArray;
            //_localctx->sym->arraySizeExpression = arraySizeExpression;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumerationContext ------------------------------------------------------------------

GPULangParser::EnumerationContext::EnumerationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::EnumerationContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::EnumerationContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::EnumerationContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::EnumerationContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

tree::TerminalNode* GPULangParser::EnumerationContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::EnumerationContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::EnumerationContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::EnumerationContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::EnumerationContext::EQ() {
  return getTokens(GPULangParser::EQ);
}

tree::TerminalNode* GPULangParser::EnumerationContext::EQ(size_t i) {
  return getToken(GPULangParser::EQ, i);
}

std::vector<tree::TerminalNode *> GPULangParser::EnumerationContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::EnumerationContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::EnumerationContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::EnumerationContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::EnumerationContext::getRuleIndex() const {
  return GPULangParser::RuleEnumeration;
}

void GPULangParser::EnumerationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration(this);
}

void GPULangParser::EnumerationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration(this);
}


std::any GPULangParser::EnumerationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitEnumeration(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::EnumerationContext* GPULangParser::enumeration() {
  EnumerationContext *_localctx = _tracker.createInstance<EnumerationContext>(_ctx, getState());
  enterRule(_localctx, 26, GPULangParser::RuleEnumeration);

          antlrcpp::downCast<EnumerationContext *>(_localctx)->sym =  nullptr;
          StackArray<FixedString> enumLabels(256);
          StackArray<Expression*> enumValues(256);
          StackArray<Symbol::Location> enumLocations(256);
          std::string name;
          TypeDeclaration type = TypeDeclaration{ .type = Type::FullType{"u32"} };
          Symbol::Location location;
          Symbol::Location labelLocation;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(347);
    match(GPULangParser::T__6);
    setState(348);
    antlrcpp::downCast<EnumerationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     name = (antlrcpp::downCast<EnumerationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<EnumerationContext *>(_localctx)->name->getText() : ""); location = SetupFile(); 
    setState(354);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::COL) {
      setState(350);
      match(GPULangParser::COL);
      setState(351);
      antlrcpp::downCast<EnumerationContext *>(_localctx)->typeDeclarationContext = typeDeclaration();
       type = antlrcpp::downCast<EnumerationContext *>(_localctx)->typeDeclarationContext->type; 
    }
    setState(356);
    match(GPULangParser::LB);
    setState(386);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::IDENTIFIER: {
        setState(357);
        antlrcpp::downCast<EnumerationContext *>(_localctx)->label = match(GPULangParser::IDENTIFIER);
         Expression* expr = nullptr; labelLocation = SetupFile(); 
        setState(363);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GPULangParser::EQ) {
          setState(359);
          match(GPULangParser::EQ);
          setState(360);
          antlrcpp::downCast<EnumerationContext *>(_localctx)->value = expression(0);
           expr = antlrcpp::downCast<EnumerationContext *>(_localctx)->value->tree; 
        }

                        enumLabels.Append(FixedString((antlrcpp::downCast<EnumerationContext *>(_localctx)->label != nullptr ? antlrcpp::downCast<EnumerationContext *>(_localctx)->label->getText() : "")));
                        enumValues.Append(expr);
                        enumLocations.Append(labelLocation);
                    
        setState(367);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
        case 1: {
          setState(366);
          linePreprocessorEntry();
          break;
        }

        default:
          break;
        }
        setState(382);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == GPULangParser::T__2

        || _la == GPULangParser::CO) {
          setState(380);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case GPULangParser::CO: {
              setState(369);
              match(GPULangParser::CO);
              setState(370);
              antlrcpp::downCast<EnumerationContext *>(_localctx)->label = match(GPULangParser::IDENTIFIER);
               if (enumLabels.Full()) { throw IndexOutOfBoundsException("Maximum of 256 enum labels"); } Expression* expr = nullptr; labelLocation = SetupFile(); 
              setState(376);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == GPULangParser::EQ) {
                setState(372);
                match(GPULangParser::EQ);
                setState(373);
                antlrcpp::downCast<EnumerationContext *>(_localctx)->value = expression(0);
                 expr = antlrcpp::downCast<EnumerationContext *>(_localctx)->value->tree; 
              }

                                  enumLabels.Append(FixedString((antlrcpp::downCast<EnumerationContext *>(_localctx)->label != nullptr ? antlrcpp::downCast<EnumerationContext *>(_localctx)->label->getText() : "")));
                                  enumValues.Append(expr);
                                  enumLocations.Append(labelLocation);
                              
              break;
            }

            case GPULangParser::T__2: {
              setState(379);
              linePreprocessorEntry();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(384);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case GPULangParser::T__2: {
        setState(385);
        linePreprocessorEntry();
        break;
      }

      case GPULangParser::RB: {
        break;
      }

    default:
      break;
    }
    setState(388);
    match(GPULangParser::RB);

            antlrcpp::downCast<EnumerationContext *>(_localctx)->sym =  Alloc<Enumeration>();
            _localctx->sym->name = name;
            _localctx->sym->type = type.type;
            _localctx->sym->type.literal = true;
            _localctx->sym->labels = enumLabels;
            _localctx->sym->values = enumValues;
            _localctx->sym->labelLocations = enumLocations;
            _localctx->sym->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterContext ------------------------------------------------------------------

GPULangParser::ParameterContext::ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ParameterContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::ParameterContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

tree::TerminalNode* GPULangParser::ParameterContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::ParameterContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::ParameterContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::ParameterContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::ParameterContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

tree::TerminalNode* GPULangParser::ParameterContext::EQ() {
  return getToken(GPULangParser::EQ, 0);
}

GPULangParser::ExpressionNoCommaContext* GPULangParser::ParameterContext::expressionNoComma() {
  return getRuleContext<GPULangParser::ExpressionNoCommaContext>(0);
}


size_t GPULangParser::ParameterContext::getRuleIndex() const {
  return GPULangParser::RuleParameter;
}

void GPULangParser::ParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter(this);
}

void GPULangParser::ParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter(this);
}


std::any GPULangParser::ParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitParameter(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::ParameterContext* GPULangParser::parameter() {
  ParameterContext *_localctx = _tracker.createInstance<ParameterContext>(_ctx, getState());
  enterRule(_localctx, 28, GPULangParser::RuleParameter);

          StackArray<Attribute*> attributes(32);
          std::string name;
          Expression* valueExpression = nullptr;
          Symbol::Location location;
          TypeDeclaration type = TypeDeclaration{ .type = Type::FullType{UNDEFINED_TYPE} };
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(394);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2) {
      setState(391);
      linePreprocessorEntry();
      setState(396);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(402);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(397);
        antlrcpp::downCast<ParameterContext *>(_localctx)->attributeContext = attribute();
         if (attributes.Full()) { throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); } attributes.Append(std::move(antlrcpp::downCast<ParameterContext *>(_localctx)->attributeContext->attr));  
      }
      setState(404);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx);
    }
    setState(405);
    antlrcpp::downCast<ParameterContext *>(_localctx)->varName = match(GPULangParser::IDENTIFIER);
     name = (antlrcpp::downCast<ParameterContext *>(_localctx)->varName != nullptr ? antlrcpp::downCast<ParameterContext *>(_localctx)->varName->getText() : ""); location = SetupFile(); 
    setState(407);
    match(GPULangParser::COL);
    setState(408);
    antlrcpp::downCast<ParameterContext *>(_localctx)->typeDeclarationContext = typeDeclaration();
     type = antlrcpp::downCast<ParameterContext *>(_localctx)->typeDeclarationContext->type; 
    setState(414);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::EQ) {
      setState(410);
      match(GPULangParser::EQ);
      setState(411);
      antlrcpp::downCast<ParameterContext *>(_localctx)->valueExpr = expressionNoComma(0);
       valueExpression = antlrcpp::downCast<ParameterContext *>(_localctx)->valueExpr->tree; 
    }

                antlrcpp::downCast<ParameterContext *>(_localctx)->sym =  Alloc<Variable>(); 
                _localctx->sym->type = type.type; 
                _localctx->sym->typeLocation = type.location;
                _localctx->sym->location = location; 
                _localctx->sym->attributes = std::move(attributes);
                _localctx->sym->name = name;
                _localctx->sym->valueExpression = valueExpression;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDeclarationContext ------------------------------------------------------------------

GPULangParser::FunctionDeclarationContext::FunctionDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::FunctionDeclarationContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::FunctionDeclarationContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::FunctionDeclarationContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

std::vector<GPULangParser::ParameterContext *> GPULangParser::FunctionDeclarationContext::parameter() {
  return getRuleContexts<GPULangParser::ParameterContext>();
}

GPULangParser::ParameterContext* GPULangParser::FunctionDeclarationContext::parameter(size_t i) {
  return getRuleContext<GPULangParser::ParameterContext>(i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::FunctionDeclarationContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::FunctionDeclarationContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::FunctionDeclarationContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::FunctionDeclarationContext::getRuleIndex() const {
  return GPULangParser::RuleFunctionDeclaration;
}

void GPULangParser::FunctionDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionDeclaration(this);
}

void GPULangParser::FunctionDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionDeclaration(this);
}


std::any GPULangParser::FunctionDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitFunctionDeclaration(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::FunctionDeclarationContext* GPULangParser::functionDeclaration() {
  FunctionDeclarationContext *_localctx = _tracker.createInstance<FunctionDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 30, GPULangParser::RuleFunctionDeclaration);

          antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->sym =  nullptr;
          StackArray<Variable*> variables(32);
          StackArray<Attribute*> attributes(32);
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(423);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(418);
        antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->attributeContext = attribute();
         if (attributes.Full()) { throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); } attributes.Append(std::move(antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->attributeContext->attr));  
      }
      setState(425);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx);
    }
    setState(426);
    antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     location = SetupFile(); 
    setState(428);
    match(GPULangParser::LP);
    setState(444);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2 || _la == GPULangParser::IDENTIFIER) {
      setState(429);
      antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->arg0 = parameter();
       variables.Append(antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->arg0->sym); 
      setState(432);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
      case 1: {
        setState(431);
        linePreprocessorEntry();
        break;
      }

      default:
        break;
      }
      setState(441);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GPULangParser::T__2

      || _la == GPULangParser::CO) {
        setState(439);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case GPULangParser::CO: {
            setState(434);
            match(GPULangParser::CO);
            setState(435);
            antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->argn = parameter();
             if (variables.Full()) throw IndexOutOfBoundsException("Maximum of 32 variables reached"); variables.Append(antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->argn->sym); 
            break;
          }

          case GPULangParser::T__2: {
            setState(438);
            linePreprocessorEntry();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(443);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(446);
    match(GPULangParser::RP);
    setState(447);
    antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->returnType = typeDeclaration();

            antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->sym =  Alloc<Function>(); 
            _localctx->sym->hasBody = false;
            _localctx->sym->location = location;
            _localctx->sym->returnType = antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->returnType->type.type; 
            _localctx->sym->returnTypeLocation = antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->returnType->type.location;
            _localctx->sym->name = (antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->name->getText() : ""); 
            _localctx->sym->parameters = variables; 
            _localctx->sym->attributes = attributes;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionContext ------------------------------------------------------------------

GPULangParser::FunctionContext::FunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::FunctionDeclarationContext* GPULangParser::FunctionContext::functionDeclaration() {
  return getRuleContext<GPULangParser::FunctionDeclarationContext>(0);
}

GPULangParser::ScopeStatementContext* GPULangParser::FunctionContext::scopeStatement() {
  return getRuleContext<GPULangParser::ScopeStatementContext>(0);
}


size_t GPULangParser::FunctionContext::getRuleIndex() const {
  return GPULangParser::RuleFunction;
}

void GPULangParser::FunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction(this);
}

void GPULangParser::FunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction(this);
}


std::any GPULangParser::FunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitFunction(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::FunctionContext* GPULangParser::function() {
  FunctionContext *_localctx = _tracker.createInstance<FunctionContext>(_ctx, getState());
  enterRule(_localctx, 32, GPULangParser::RuleFunction);

          antlrcpp::downCast<FunctionContext *>(_localctx)->sym =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(450);
    antlrcpp::downCast<FunctionContext *>(_localctx)->functionDeclarationContext = functionDeclaration();
     antlrcpp::downCast<FunctionContext *>(_localctx)->sym =  antlrcpp::downCast<FunctionContext *>(_localctx)->functionDeclarationContext->sym; 
    setState(452);
    antlrcpp::downCast<FunctionContext *>(_localctx)->scopeStatementContext = scopeStatement();

            _localctx->sym->hasBody = true;
            _localctx->sym->ast = antlrcpp::downCast<FunctionContext *>(_localctx)->scopeStatementContext->tree;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

GPULangParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ProgramContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::ProgramContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::ProgramContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<GPULangParser::AnnotationContext *> GPULangParser::ProgramContext::annotation() {
  return getRuleContexts<GPULangParser::AnnotationContext>();
}

GPULangParser::AnnotationContext* GPULangParser::ProgramContext::annotation(size_t i) {
  return getRuleContext<GPULangParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::ProgramContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::ProgramContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::ProgramContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::ProgramContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::ProgramContext::getRuleIndex() const {
  return GPULangParser::RuleProgram;
}

void GPULangParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void GPULangParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}


std::any GPULangParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::ProgramContext* GPULangParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 34, GPULangParser::RuleProgram);

          antlrcpp::downCast<ProgramContext *>(_localctx)->sym =  nullptr;
          Symbol::Location location;
          StackArray<Expression*> entries(32);
          StackArray<Annotation*> annotations(32);
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(460);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::SOBAKA) {
      setState(455);
      antlrcpp::downCast<ProgramContext *>(_localctx)->annotationContext = annotation();
       if (annotations.Full()) { throw IndexOutOfBoundsException("Maximum of 32 annotations reached"); } annotations.Append(std::move(antlrcpp::downCast<ProgramContext *>(_localctx)->annotationContext->annot)); 
      setState(462);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(463);
    match(GPULangParser::T__7);
    setState(464);
    antlrcpp::downCast<ProgramContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     location = SetupFile(); 
    setState(466);
    match(GPULangParser::LB);
    setState(473);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866135887136686094) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 7787) != 0)) {
      setState(467);
      antlrcpp::downCast<ProgramContext *>(_localctx)->assignment = expression(0);
       if (entries.Full()) throw IndexOutOfBoundsException("Maximum of 32 entries reached"); entries.Append(antlrcpp::downCast<ProgramContext *>(_localctx)->assignment->tree); 
      setState(469);
      match(GPULangParser::SC);
      setState(475);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(476);
    match(GPULangParser::RB);
     
            antlrcpp::downCast<ProgramContext *>(_localctx)->sym =  Alloc<Program>();
            _localctx->sym->location = location;
            _localctx->sym->name = (antlrcpp::downCast<ProgramContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<ProgramContext *>(_localctx)->name->getText() : "");
            _localctx->sym->annotations = annotations;
            _localctx->sym->entries = entries;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SamplerContext ------------------------------------------------------------------

GPULangParser::SamplerContext::SamplerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::SamplerContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::SamplerContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::SamplerContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::SamplerContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::SamplerContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::SamplerContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::SamplerContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}

std::vector<GPULangParser::AnnotationContext *> GPULangParser::SamplerContext::annotation() {
  return getRuleContexts<GPULangParser::AnnotationContext>();
}

GPULangParser::AnnotationContext* GPULangParser::SamplerContext::annotation(size_t i) {
  return getRuleContext<GPULangParser::AnnotationContext>(i);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::SamplerContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::SamplerContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}


size_t GPULangParser::SamplerContext::getRuleIndex() const {
  return GPULangParser::RuleSampler;
}

void GPULangParser::SamplerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSampler(this);
}

void GPULangParser::SamplerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSampler(this);
}


std::any GPULangParser::SamplerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitSampler(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::SamplerContext* GPULangParser::sampler() {
  SamplerContext *_localctx = _tracker.createInstance<SamplerContext>(_ctx, getState());
  enterRule(_localctx, 36, GPULangParser::RuleSampler);

          StackArray<Attribute*> attributes(32);
          StackArray<Annotation*> annotations(32);
          StackArray<Expression*> entries(32);
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(484);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::SOBAKA) {
      setState(479);
      antlrcpp::downCast<SamplerContext *>(_localctx)->annotationContext = annotation();
       if (annotations.Full()) throw IndexOutOfBoundsException("Maximum of 32 annotations reached"); annotations.Append(std::move(antlrcpp::downCast<SamplerContext *>(_localctx)->annotationContext->annot)); 
      setState(486);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(492);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::IDENTIFIER) {
      setState(487);
      antlrcpp::downCast<SamplerContext *>(_localctx)->attributeContext = attribute();
       if (attributes.Full()) throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); attributes.Append(std::move(antlrcpp::downCast<SamplerContext *>(_localctx)->attributeContext->attr)); 
      setState(494);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(495);
    match(GPULangParser::T__8);
     antlrcpp::downCast<SamplerContext *>(_localctx)->sym =  Alloc<SamplerState>(); _localctx->sym->isImmutable = true; 
    setState(498);
    antlrcpp::downCast<SamplerContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     _localctx->sym->location = SetupFile(); 
    setState(500);
    match(GPULangParser::LB);
    setState(507);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866135887136686094) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 7787) != 0)) {
      setState(501);
      antlrcpp::downCast<SamplerContext *>(_localctx)->assign = expression(0);
       if (entries.Full()) throw IndexOutOfBoundsException("Maximum of 32 entries reached"); entries.Append(antlrcpp::downCast<SamplerContext *>(_localctx)->assign->tree); 
      setState(503);
      match(GPULangParser::SC);
      setState(509);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(510);
    match(GPULangParser::RB);

            _localctx->sym->name = (antlrcpp::downCast<SamplerContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<SamplerContext *>(_localctx)->name->getText() : "");
            _localctx->sym->attributes = attributes;
            _localctx->sym->annotations = annotations;
            _localctx->sym->entries = entries;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StateContext ------------------------------------------------------------------

GPULangParser::StateContext::StateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::StateContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::StateContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::StateContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::StateContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::StateContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::StateContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::StateContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::StateContext::getRuleIndex() const {
  return GPULangParser::RuleState;
}

void GPULangParser::StateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterState(this);
}

void GPULangParser::StateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitState(this);
}


std::any GPULangParser::StateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitState(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::StateContext* GPULangParser::state() {
  StateContext *_localctx = _tracker.createInstance<StateContext>(_ctx, getState());
  enterRule(_localctx, 38, GPULangParser::RuleState);

          StackArray<Expression*> entries(32);
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(513);
    match(GPULangParser::T__9);
     antlrcpp::downCast<StateContext *>(_localctx)->sym =  Alloc<RenderState>(); 
    setState(516);
    antlrcpp::downCast<StateContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     _localctx->sym->location = SetupFile(); 
    setState(518);
    match(GPULangParser::LB);
    setState(525);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866135887136686094) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 7787) != 0)) {
      setState(519);
      antlrcpp::downCast<StateContext *>(_localctx)->assign = expression(0);
       if (entries.Full()) throw IndexOutOfBoundsException("Maximum of 32 entries reached"); entries.Append(antlrcpp::downCast<StateContext *>(_localctx)->assign->tree); 
      setState(521);
      match(GPULangParser::SC);
      setState(527);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(528);
    match(GPULangParser::RB);

            _localctx->sym->name = (antlrcpp::downCast<StateContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<StateContext *>(_localctx)->name->getText() : "");
            _localctx->sym->entries = entries;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

GPULangParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::IfStatementContext* GPULangParser::StatementContext::ifStatement() {
  return getRuleContext<GPULangParser::IfStatementContext>(0);
}

GPULangParser::ScopeStatementContext* GPULangParser::StatementContext::scopeStatement() {
  return getRuleContext<GPULangParser::ScopeStatementContext>(0);
}

GPULangParser::ForStatementContext* GPULangParser::StatementContext::forStatement() {
  return getRuleContext<GPULangParser::ForStatementContext>(0);
}

GPULangParser::WhileStatementContext* GPULangParser::StatementContext::whileStatement() {
  return getRuleContext<GPULangParser::WhileStatementContext>(0);
}

GPULangParser::SwitchStatementContext* GPULangParser::StatementContext::switchStatement() {
  return getRuleContext<GPULangParser::SwitchStatementContext>(0);
}

GPULangParser::TerminateStatementContext* GPULangParser::StatementContext::terminateStatement() {
  return getRuleContext<GPULangParser::TerminateStatementContext>(0);
}

GPULangParser::ContinueStatementContext* GPULangParser::StatementContext::continueStatement() {
  return getRuleContext<GPULangParser::ContinueStatementContext>(0);
}

GPULangParser::BreakStatementContext* GPULangParser::StatementContext::breakStatement() {
  return getRuleContext<GPULangParser::BreakStatementContext>(0);
}

GPULangParser::ExpressionStatementContext* GPULangParser::StatementContext::expressionStatement() {
  return getRuleContext<GPULangParser::ExpressionStatementContext>(0);
}

tree::TerminalNode* GPULangParser::StatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::StatementContext::getRuleIndex() const {
  return GPULangParser::RuleStatement;
}

void GPULangParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void GPULangParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}


std::any GPULangParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::StatementContext* GPULangParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 40, GPULangParser::RuleStatement);

          antlrcpp::downCast<StatementContext *>(_localctx)->tree =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(559);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__10: {
        enterOuterAlt(_localctx, 1);
        setState(531);
        antlrcpp::downCast<StatementContext *>(_localctx)->ifStatementContext = ifStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->ifStatementContext->tree; 
        break;
      }

      case GPULangParser::LB: {
        enterOuterAlt(_localctx, 2);
        setState(534);
        antlrcpp::downCast<StatementContext *>(_localctx)->scopeStatementContext = scopeStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->scopeStatementContext->tree; 
        break;
      }

      case GPULangParser::T__12: {
        enterOuterAlt(_localctx, 3);
        setState(537);
        antlrcpp::downCast<StatementContext *>(_localctx)->forStatementContext = forStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->forStatementContext->tree; 
        break;
      }

      case GPULangParser::T__15:
      case GPULangParser::T__16: {
        enterOuterAlt(_localctx, 4);
        setState(540);
        antlrcpp::downCast<StatementContext *>(_localctx)->whileStatementContext = whileStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->whileStatementContext->tree; 
        break;
      }

      case GPULangParser::T__22: {
        enterOuterAlt(_localctx, 5);
        setState(543);
        antlrcpp::downCast<StatementContext *>(_localctx)->switchStatementContext = switchStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->switchStatementContext->tree; 
        break;
      }

      case GPULangParser::T__17:
      case GPULangParser::T__18:
      case GPULangParser::T__19:
      case GPULangParser::T__20: {
        enterOuterAlt(_localctx, 6);
        setState(546);
        antlrcpp::downCast<StatementContext *>(_localctx)->terminateStatementContext = terminateStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->terminateStatementContext->tree; 
        break;
      }

      case GPULangParser::T__21: {
        enterOuterAlt(_localctx, 7);
        setState(549);
        antlrcpp::downCast<StatementContext *>(_localctx)->continueStatementContext = continueStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->continueStatementContext->tree; 
        break;
      }

      case GPULangParser::T__25: {
        enterOuterAlt(_localctx, 8);
        setState(552);
        antlrcpp::downCast<StatementContext *>(_localctx)->breakStatementContext = breakStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->breakStatementContext->tree; 
        break;
      }

      case GPULangParser::T__0:
      case GPULangParser::T__1:
      case GPULangParser::T__2:
      case GPULangParser::T__26:
      case GPULangParser::T__27:
      case GPULangParser::LP:
      case GPULangParser::LL:
      case GPULangParser::NOT:
      case GPULangParser::QO:
      case GPULangParser::CONJUGATE:
      case GPULangParser::Q:
      case GPULangParser::ADD_OP:
      case GPULangParser::SUB_OP:
      case GPULangParser::MUL_OP:
      case GPULangParser::INTEGERLITERAL:
      case GPULangParser::UINTEGERLITERAL:
      case GPULangParser::FLOATLITERAL:
      case GPULangParser::DOUBLELITERAL:
      case GPULangParser::HEX:
      case GPULangParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 9);
        setState(555);
        antlrcpp::downCast<StatementContext *>(_localctx)->expressionStatementContext = expressionStatement();
        setState(556);
        match(GPULangParser::SC);
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->expressionStatementContext->tree; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

GPULangParser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::ExpressionContext* GPULangParser::ExpressionStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}


size_t GPULangParser::ExpressionStatementContext::getRuleIndex() const {
  return GPULangParser::RuleExpressionStatement;
}

void GPULangParser::ExpressionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement(this);
}

void GPULangParser::ExpressionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement(this);
}


std::any GPULangParser::ExpressionStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitExpressionStatement(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::ExpressionStatementContext* GPULangParser::expressionStatement() {
  ExpressionStatementContext *_localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
  enterRule(_localctx, 42, GPULangParser::RuleExpressionStatement);

          antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->tree =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(561);
    antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->expressionContext = expression(0);

            antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->tree =  Alloc<ExpressionStatement>(antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->expressionContext->tree);
            _localctx->tree->location = antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->expressionContext->tree->location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStatementContext ------------------------------------------------------------------

GPULangParser::IfStatementContext::IfStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::IfStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::IfStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::IfStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

std::vector<GPULangParser::StatementContext *> GPULangParser::IfStatementContext::statement() {
  return getRuleContexts<GPULangParser::StatementContext>();
}

GPULangParser::StatementContext* GPULangParser::IfStatementContext::statement(size_t i) {
  return getRuleContext<GPULangParser::StatementContext>(i);
}


size_t GPULangParser::IfStatementContext::getRuleIndex() const {
  return GPULangParser::RuleIfStatement;
}

void GPULangParser::IfStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfStatement(this);
}

void GPULangParser::IfStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfStatement(this);
}


std::any GPULangParser::IfStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitIfStatement(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::IfStatementContext* GPULangParser::ifStatement() {
  IfStatementContext *_localctx = _tracker.createInstance<IfStatementContext>(_ctx, getState());
  enterRule(_localctx, 44, GPULangParser::RuleIfStatement);

          antlrcpp::downCast<IfStatementContext *>(_localctx)->tree =  nullptr;
          Expression* condition = nullptr;
          Statement* ifBody = nullptr;
          Statement* elseBody = nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(564);
    match(GPULangParser::T__10);
     location = SetupFile(); 
    setState(566);
    match(GPULangParser::LP);
    setState(567);
    antlrcpp::downCast<IfStatementContext *>(_localctx)->condition = expression(0);
     condition = antlrcpp::downCast<IfStatementContext *>(_localctx)->condition->tree; 
    setState(569);
    match(GPULangParser::RP);
    setState(570);
    antlrcpp::downCast<IfStatementContext *>(_localctx)->ifBody = statement();
     ifBody = antlrcpp::downCast<IfStatementContext *>(_localctx)->ifBody->tree; 
    setState(576);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      setState(572);
      match(GPULangParser::T__11);
      setState(573);
      antlrcpp::downCast<IfStatementContext *>(_localctx)->elseBody = statement();
       elseBody = antlrcpp::downCast<IfStatementContext *>(_localctx)->elseBody->tree; 
      break;
    }

    default:
      break;
    }

            antlrcpp::downCast<IfStatementContext *>(_localctx)->tree =  Alloc<IfStatement>(condition, ifBody, elseBody);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementContext ------------------------------------------------------------------

GPULangParser::ForStatementContext::ForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ForStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::ForStatementContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::ForStatementContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

tree::TerminalNode* GPULangParser::ForStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::StatementContext* GPULangParser::ForStatementContext::statement() {
  return getRuleContext<GPULangParser::StatementContext>(0);
}

GPULangParser::VariablesContext* GPULangParser::ForStatementContext::variables() {
  return getRuleContext<GPULangParser::VariablesContext>(0);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::ForStatementContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::ForStatementContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::ForStatementContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::ForStatementContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::ForStatementContext::getRuleIndex() const {
  return GPULangParser::RuleForStatement;
}

void GPULangParser::ForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatement(this);
}

void GPULangParser::ForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatement(this);
}


std::any GPULangParser::ForStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitForStatement(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::ForStatementContext* GPULangParser::forStatement() {
  ForStatementContext *_localctx = _tracker.createInstance<ForStatementContext>(_ctx, getState());
  enterRule(_localctx, 46, GPULangParser::RuleForStatement);

          antlrcpp::downCast<ForStatementContext *>(_localctx)->tree =  nullptr;
          FixedArray<Variable*> declarations;
          Expression* conditionExpression = nullptr;
          Expression* loopExpression = nullptr;
          Statement* contents = nullptr;
          StackArray<Attribute*> attributes(32);
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(580);
    match(GPULangParser::T__12);
     location = SetupFile(); 
    setState(582);
    match(GPULangParser::LP);
    setState(586);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2 || _la == GPULangParser::SOBAKA

    || _la == GPULangParser::IDENTIFIER) {
      setState(583);
      antlrcpp::downCast<ForStatementContext *>(_localctx)->variablesContext = variables();
       declarations = antlrcpp::downCast<ForStatementContext *>(_localctx)->variablesContext->vars; 
    }
    setState(588);
    match(GPULangParser::SC);
    setState(592);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866135887136686094) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 7787) != 0)) {
      setState(589);
      antlrcpp::downCast<ForStatementContext *>(_localctx)->condition = expression(0);
       conditionExpression = antlrcpp::downCast<ForStatementContext *>(_localctx)->condition->tree; 
    }
    setState(594);
    match(GPULangParser::SC);
    setState(598);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866135887136686094) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 7787) != 0)) {
      setState(595);
      antlrcpp::downCast<ForStatementContext *>(_localctx)->loop = expression(0);
       loopExpression = antlrcpp::downCast<ForStatementContext *>(_localctx)->loop->tree; 
    }
    setState(600);
    match(GPULangParser::RP);
    setState(606);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(601);
        antlrcpp::downCast<ForStatementContext *>(_localctx)->attributeContext = attribute();
         if (attributes.Full()) { throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); } attributes.Append(std::move(antlrcpp::downCast<ForStatementContext *>(_localctx)->attributeContext->attr));  
      }
      setState(608);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    }
    setState(609);
    antlrcpp::downCast<ForStatementContext *>(_localctx)->content = statement();
     contents = antlrcpp::downCast<ForStatementContext *>(_localctx)->content->tree; 

            antlrcpp::downCast<ForStatementContext *>(_localctx)->tree =  Alloc<ForStatement>(declarations, conditionExpression, loopExpression, contents);
            _localctx->tree->location = location;
            _localctx->tree->attributes = std::move(attributes);
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForRangeStatementContext ------------------------------------------------------------------

GPULangParser::ForRangeStatementContext::ForRangeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::ForRangeStatementContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

GPULangParser::StatementContext* GPULangParser::ForRangeStatementContext::statement() {
  return getRuleContext<GPULangParser::StatementContext>(0);
}


size_t GPULangParser::ForRangeStatementContext::getRuleIndex() const {
  return GPULangParser::RuleForRangeStatement;
}

void GPULangParser::ForRangeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForRangeStatement(this);
}

void GPULangParser::ForRangeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForRangeStatement(this);
}


std::any GPULangParser::ForRangeStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitForRangeStatement(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::ForRangeStatementContext* GPULangParser::forRangeStatement() {
  ForRangeStatementContext *_localctx = _tracker.createInstance<ForRangeStatementContext>(_ctx, getState());
  enterRule(_localctx, 48, GPULangParser::RuleForRangeStatement);

          antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->tree =  nullptr;
          Statement* contents = nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(613);
    match(GPULangParser::T__12);
     location = SetupFile(); 
    setState(615);
    match(GPULangParser::LP);
    setState(616);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->iterator = match(GPULangParser::IDENTIFIER);
    setState(617);
    match(GPULangParser::COL);
    setState(618);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->start = match(GPULangParser::IDENTIFIER);
    setState(619);
    match(GPULangParser::T__13);
    setState(620);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->end = match(GPULangParser::IDENTIFIER);
    setState(621);
    match(GPULangParser::RP);
    setState(622);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->content = statement();
     contents = antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->content->tree; 


        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForUniformValueStatementContext ------------------------------------------------------------------

GPULangParser::ForUniformValueStatementContext::ForUniformValueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ForUniformValueStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::ForUniformValueStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

tree::TerminalNode* GPULangParser::ForUniformValueStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::StatementContext* GPULangParser::ForUniformValueStatementContext::statement() {
  return getRuleContext<GPULangParser::StatementContext>(0);
}


size_t GPULangParser::ForUniformValueStatementContext::getRuleIndex() const {
  return GPULangParser::RuleForUniformValueStatement;
}

void GPULangParser::ForUniformValueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForUniformValueStatement(this);
}

void GPULangParser::ForUniformValueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForUniformValueStatement(this);
}


std::any GPULangParser::ForUniformValueStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitForUniformValueStatement(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::ForUniformValueStatementContext* GPULangParser::forUniformValueStatement() {
  ForUniformValueStatementContext *_localctx = _tracker.createInstance<ForUniformValueStatementContext>(_ctx, getState());
  enterRule(_localctx, 50, GPULangParser::RuleForUniformValueStatement);

          antlrcpp::downCast<ForUniformValueStatementContext *>(_localctx)->tree =  nullptr;
          Statement* contents = nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(626);
    match(GPULangParser::T__14);
     location = SetupFile(); 
    setState(628);
    match(GPULangParser::LP);
    setState(629);
    expression(0);
    setState(630);
    match(GPULangParser::RP);
    setState(631);
    antlrcpp::downCast<ForUniformValueStatementContext *>(_localctx)->content = statement();
     contents = antlrcpp::downCast<ForUniformValueStatementContext *>(_localctx)->content->tree; 

        
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementContext ------------------------------------------------------------------

GPULangParser::WhileStatementContext::WhileStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::WhileStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::WhileStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::WhileStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

GPULangParser::StatementContext* GPULangParser::WhileStatementContext::statement() {
  return getRuleContext<GPULangParser::StatementContext>(0);
}

tree::TerminalNode* GPULangParser::WhileStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::WhileStatementContext::getRuleIndex() const {
  return GPULangParser::RuleWhileStatement;
}

void GPULangParser::WhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatement(this);
}

void GPULangParser::WhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatement(this);
}


std::any GPULangParser::WhileStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitWhileStatement(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::WhileStatementContext* GPULangParser::whileStatement() {
  WhileStatementContext *_localctx = _tracker.createInstance<WhileStatementContext>(_ctx, getState());
  enterRule(_localctx, 52, GPULangParser::RuleWhileStatement);

          antlrcpp::downCast<WhileStatementContext *>(_localctx)->tree =  nullptr;
          Expression* conditionExpression = nullptr;
          Statement* contents = nullptr;
          bool isDoWhile = false;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(657);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__15: {
        enterOuterAlt(_localctx, 1);
        setState(635);
        match(GPULangParser::T__15);
         location = SetupFile(); 
        setState(637);
        match(GPULangParser::LP);
        setState(638);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition = expression(0);
         conditionExpression = antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition->tree; 
        setState(640);
        match(GPULangParser::RP);
        setState(641);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->content = statement();
         contents = antlrcpp::downCast<WhileStatementContext *>(_localctx)->content->tree; 

                antlrcpp::downCast<WhileStatementContext *>(_localctx)->tree =  Alloc<WhileStatement>(conditionExpression, contents, isDoWhile);
                _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__16: {
        enterOuterAlt(_localctx, 2);
        setState(645);
        match(GPULangParser::T__16);
         location = SetupFile(); 
        setState(647);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->content = statement();
         contents = antlrcpp::downCast<WhileStatementContext *>(_localctx)->content->tree; isDoWhile = true; 
        setState(649);
        match(GPULangParser::T__15);
        setState(650);
        match(GPULangParser::LP);
        setState(651);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition = expression(0);
         conditionExpression = antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition->tree; 
        setState(653);
        match(GPULangParser::RP);
        setState(654);
        match(GPULangParser::SC);

                antlrcpp::downCast<WhileStatementContext *>(_localctx)->tree =  Alloc<WhileStatement>(conditionExpression, contents, isDoWhile);
                _localctx->tree->location = location;
            
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScopeStatementContext ------------------------------------------------------------------

GPULangParser::ScopeStatementContext::ScopeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ScopeStatementContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::ScopeStatementContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<GPULangParser::VariablesContext *> GPULangParser::ScopeStatementContext::variables() {
  return getRuleContexts<GPULangParser::VariablesContext>();
}

GPULangParser::VariablesContext* GPULangParser::ScopeStatementContext::variables(size_t i) {
  return getRuleContext<GPULangParser::VariablesContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::ScopeStatementContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::ScopeStatementContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::StatementContext *> GPULangParser::ScopeStatementContext::statement() {
  return getRuleContexts<GPULangParser::StatementContext>();
}

GPULangParser::StatementContext* GPULangParser::ScopeStatementContext::statement(size_t i) {
  return getRuleContext<GPULangParser::StatementContext>(i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::ScopeStatementContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::ScopeStatementContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}


size_t GPULangParser::ScopeStatementContext::getRuleIndex() const {
  return GPULangParser::RuleScopeStatement;
}

void GPULangParser::ScopeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScopeStatement(this);
}

void GPULangParser::ScopeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScopeStatement(this);
}


std::any GPULangParser::ScopeStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitScopeStatement(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::ScopeStatementContext* GPULangParser::scopeStatement() {
  ScopeStatementContext *_localctx = _tracker.createInstance<ScopeStatementContext>(_ctx, getState());
  enterRule(_localctx, 54, GPULangParser::RuleScopeStatement);

          antlrcpp::downCast<ScopeStatementContext *>(_localctx)->tree =  nullptr;
          PinnedArray<Symbol*> contents(0xFFFFFF);
  	    std::vector<Expression*> unfinished;
          Symbol::Location location;
          Symbol::Location ends;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(659);
    match(GPULangParser::LB);
     location = SetupFile(); 
    setState(671);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866144683313539086) != 0) || ((((_la - 72) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 72)) & 15575) != 0)) {
      setState(669);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
      case 1: {
        setState(661);
        antlrcpp::downCast<ScopeStatementContext *>(_localctx)->variablesContext = variables();
        setState(662);
        match(GPULangParser::SC);
         for(Variable* var : antlrcpp::downCast<ScopeStatementContext *>(_localctx)->variablesContext->vars) { contents.Append(var); } 
        break;
      }

      case 2: {
        setState(665);
        antlrcpp::downCast<ScopeStatementContext *>(_localctx)->statementContext = statement();
         contents.Append(antlrcpp::downCast<ScopeStatementContext *>(_localctx)->statementContext->tree); 
        break;
      }

      case 3: {
        setState(668);
        linePreprocessorEntry();
        break;
      }

      default:
        break;
      }
      setState(673);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(674);
    match(GPULangParser::RB);
     ends = SetupFile(); 

            antlrcpp::downCast<ScopeStatementContext *>(_localctx)->tree =  Alloc<ScopeStatement>(std::move(contents), unfinished);
            _localctx->tree->ends = ends;
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TerminateStatementContext ------------------------------------------------------------------

GPULangParser::TerminateStatementContext::TerminateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::TerminateStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}

GPULangParser::ExpressionContext* GPULangParser::TerminateStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}


size_t GPULangParser::TerminateStatementContext::getRuleIndex() const {
  return GPULangParser::RuleTerminateStatement;
}

void GPULangParser::TerminateStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerminateStatement(this);
}

void GPULangParser::TerminateStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerminateStatement(this);
}


std::any GPULangParser::TerminateStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitTerminateStatement(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::TerminateStatementContext* GPULangParser::terminateStatement() {
  TerminateStatementContext *_localctx = _tracker.createInstance<TerminateStatementContext>(_ctx, getState());
  enterRule(_localctx, 56, GPULangParser::RuleTerminateStatement);

          antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  nullptr;
          Expression* returnValue = nullptr;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(699);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__17: {
        enterOuterAlt(_localctx, 1);
        setState(678);
        match(GPULangParser::T__17);
         location = SetupFile(); 
        setState(683);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 866135887136686094) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 73)) & 7787) != 0)) {
          setState(680);
          antlrcpp::downCast<TerminateStatementContext *>(_localctx)->value = expression(0);
           returnValue = antlrcpp::downCast<TerminateStatementContext *>(_localctx)->value->tree; 
        }
        setState(685);
        match(GPULangParser::SC);

                antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::Return);
                _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__18: {
        enterOuterAlt(_localctx, 2);
        setState(687);
        match(GPULangParser::T__18);
         location = SetupFile(); 
        setState(689);
        match(GPULangParser::SC);

              antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::Discard);
              _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__19: {
        enterOuterAlt(_localctx, 3);
        setState(691);
        match(GPULangParser::T__19);
         location = SetupFile(); 
        setState(693);
        match(GPULangParser::SC);

              antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::RayIgnoreIntersection);
              _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__20: {
        enterOuterAlt(_localctx, 4);
        setState(695);
        match(GPULangParser::T__20);
         location = SetupFile(); 
        setState(697);
        match(GPULangParser::SC);

              antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::RayTerminate);
              _localctx->tree->location = location;
            
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContinueStatementContext ------------------------------------------------------------------

GPULangParser::ContinueStatementContext::ContinueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ContinueStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::ContinueStatementContext::getRuleIndex() const {
  return GPULangParser::RuleContinueStatement;
}

void GPULangParser::ContinueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinueStatement(this);
}

void GPULangParser::ContinueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinueStatement(this);
}


std::any GPULangParser::ContinueStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitContinueStatement(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::ContinueStatementContext* GPULangParser::continueStatement() {
  ContinueStatementContext *_localctx = _tracker.createInstance<ContinueStatementContext>(_ctx, getState());
  enterRule(_localctx, 58, GPULangParser::RuleContinueStatement);

          antlrcpp::downCast<ContinueStatementContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(701);
    match(GPULangParser::T__21);
     location = SetupFile(); 
    setState(703);
    match(GPULangParser::SC);

            antlrcpp::downCast<ContinueStatementContext *>(_localctx)->tree =  Alloc<ContinueStatement>();
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStatementContext ------------------------------------------------------------------

GPULangParser::SwitchStatementContext::SwitchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::SwitchStatementContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::SwitchStatementContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::SwitchStatementContext::COL() {
  return getTokens(GPULangParser::COL);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::COL(size_t i) {
  return getToken(GPULangParser::COL, i);
}

std::vector<GPULangParser::StatementContext *> GPULangParser::SwitchStatementContext::statement() {
  return getRuleContexts<GPULangParser::StatementContext>();
}

GPULangParser::StatementContext* GPULangParser::SwitchStatementContext::statement(size_t i) {
  return getRuleContext<GPULangParser::StatementContext>(i);
}


size_t GPULangParser::SwitchStatementContext::getRuleIndex() const {
  return GPULangParser::RuleSwitchStatement;
}

void GPULangParser::SwitchStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchStatement(this);
}

void GPULangParser::SwitchStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchStatement(this);
}


std::any GPULangParser::SwitchStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitSwitchStatement(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::SwitchStatementContext* GPULangParser::switchStatement() {
  SwitchStatementContext *_localctx = _tracker.createInstance<SwitchStatementContext>(_ctx, getState());
  enterRule(_localctx, 60, GPULangParser::RuleSwitchStatement);

          antlrcpp::downCast<SwitchStatementContext *>(_localctx)->tree =  nullptr;
          Expression* switchExpression;
          StackArray<Expression*> caseExpressions(256);
          StackArray<Statement*> caseStatements(256);
          Symbol::Location location;
          Statement* defaultStatement = nullptr;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(706);
    match(GPULangParser::T__22);
     location = SetupFile(); 
    setState(708);
    match(GPULangParser::LP);
    setState(709);
    antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext = expression(0);
    setState(710);
    match(GPULangParser::RP);
     switchExpression = antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext->tree; 
    setState(712);
    match(GPULangParser::LB);
    setState(724);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__23) {
      setState(713);
      match(GPULangParser::T__23);
      setState(714);
      antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext = expression(0);
      setState(715);
      match(GPULangParser::COL);
       if (caseExpressions.Full()) { throw IndexOutOfBoundsException("Maximum of 256 case expressions reached"); } caseExpressions.Append(antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext->tree); caseStatements.Append(nullptr); 
      setState(720);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 866144683313539086) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 73)) & 7787) != 0)) {
        setState(717);
        antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext = statement();
         
                            caseStatements.back() = antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext->tree;
                        
      }
      setState(726);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(734);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__24) {
      setState(727);
      match(GPULangParser::T__24);
      setState(728);
      match(GPULangParser::COL);
      setState(732);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 866144683313539086) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 73)) & 7787) != 0)) {
        setState(729);
        antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext = statement();

                            defaultStatement = antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext->tree;
                        
      }
    }
    setState(736);
    match(GPULangParser::RB);

            antlrcpp::downCast<SwitchStatementContext *>(_localctx)->tree =  Alloc<SwitchStatement>(switchExpression, std::move(caseExpressions), std::move(caseStatements), defaultStatement);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BreakStatementContext ------------------------------------------------------------------

GPULangParser::BreakStatementContext::BreakStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::BreakStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::BreakStatementContext::getRuleIndex() const {
  return GPULangParser::RuleBreakStatement;
}

void GPULangParser::BreakStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreakStatement(this);
}

void GPULangParser::BreakStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreakStatement(this);
}


std::any GPULangParser::BreakStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitBreakStatement(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::BreakStatementContext* GPULangParser::breakStatement() {
  BreakStatementContext *_localctx = _tracker.createInstance<BreakStatementContext>(_ctx, getState());
  enterRule(_localctx, 62, GPULangParser::RuleBreakStatement);

          antlrcpp::downCast<BreakStatementContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(739);
    match(GPULangParser::T__25);
     location = SetupFile(); 
    setState(741);
    match(GPULangParser::SC);

            antlrcpp::downCast<BreakStatementContext *>(_localctx)->tree =  Alloc<BreakStatement>();
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionNoCommaContext ------------------------------------------------------------------

GPULangParser::ExpressionNoCommaContext::ExpressionNoCommaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::ExpressionNoCommaContext *> GPULangParser::ExpressionNoCommaContext::expressionNoComma() {
  return getRuleContexts<GPULangParser::ExpressionNoCommaContext>();
}

GPULangParser::ExpressionNoCommaContext* GPULangParser::ExpressionNoCommaContext::expressionNoComma(size_t i) {
  return getRuleContext<GPULangParser::ExpressionNoCommaContext>(i);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::SUB_OP() {
  return getToken(GPULangParser::SUB_OP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::ADD_OP() {
  return getToken(GPULangParser::ADD_OP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::NOT() {
  return getToken(GPULangParser::NOT, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::CONJUGATE() {
  return getToken(GPULangParser::CONJUGATE, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::MUL_OP() {
  return getToken(GPULangParser::MUL_OP, 0);
}

GPULangParser::BinaryexpatomContext* GPULangParser::ExpressionNoCommaContext::binaryexpatom() {
  return getRuleContext<GPULangParser::BinaryexpatomContext>(0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::DIV_OP() {
  return getToken(GPULangParser::DIV_OP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::MOD() {
  return getToken(GPULangParser::MOD, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::LESSEQ() {
  return getToken(GPULangParser::LESSEQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::GREATEREQ() {
  return getToken(GPULangParser::GREATEREQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::LOGICEQ() {
  return getToken(GPULangParser::LOGICEQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::NOTEQ() {
  return getToken(GPULangParser::NOTEQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::AND() {
  return getToken(GPULangParser::AND, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::XOR() {
  return getToken(GPULangParser::XOR, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::OR() {
  return getToken(GPULangParser::OR, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::LOGICAND() {
  return getToken(GPULangParser::LOGICAND, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::LOGICOR() {
  return getToken(GPULangParser::LOGICOR, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::DOT() {
  return getToken(GPULangParser::DOT, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::ARROW() {
  return getToken(GPULangParser::ARROW, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::LL() {
  return getToken(GPULangParser::LL, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::RR() {
  return getToken(GPULangParser::RR, 0);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::ExpressionNoCommaContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::ExpressionNoCommaContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::ExpressionNoCommaContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::QU() {
  return getToken(GPULangParser::QU, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::ANDSET() {
  return getToken(GPULangParser::ANDSET, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::XORSET() {
  return getToken(GPULangParser::XORSET, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::ORSET() {
  return getToken(GPULangParser::ORSET, 0);
}

tree::TerminalNode* GPULangParser::ExpressionNoCommaContext::EQ() {
  return getToken(GPULangParser::EQ, 0);
}


size_t GPULangParser::ExpressionNoCommaContext::getRuleIndex() const {
  return GPULangParser::RuleExpressionNoComma;
}

void GPULangParser::ExpressionNoCommaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionNoComma(this);
}

void GPULangParser::ExpressionNoCommaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionNoComma(this);
}


std::any GPULangParser::ExpressionNoCommaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitExpressionNoComma(this);
  else
    return visitor->visitChildren(this);
}


GPULangParser::ExpressionNoCommaContext* GPULangParser::expressionNoComma() {
   return expressionNoComma(0);
}

GPULangParser::ExpressionNoCommaContext* GPULangParser::expressionNoComma(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GPULangParser::ExpressionNoCommaContext *_localctx = _tracker.createInstance<ExpressionNoCommaContext>(_ctx, parentState);
  GPULangParser::ExpressionNoCommaContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 64;
  enterRecursionRule(_localctx, 64, GPULangParser::RuleExpressionNoComma, precedence);


            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  nullptr;
            Symbol::Location location;
            StackArray<Expression*> args(256);
            Symbol::Location begin = BeginLocationRange();
            Expression* arrayIndexExpr = nullptr;
        
    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(752);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__26:
      case GPULangParser::T__27:
      case GPULangParser::NOT:
      case GPULangParser::CONJUGATE:
      case GPULangParser::ADD_OP:
      case GPULangParser::SUB_OP:
      case GPULangParser::MUL_OP: {
        setState(745);
        antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _input->LT(1);
        _la = _input->LA(1);
        if (!(((((_la - 27) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 27)) & 774058335535107) != 0))) {
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(746);
        antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->p = expressionNoComma(13);

                antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  Alloc<UnaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op->getText() : "")), true, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->p->tree);
                _localctx->tree->location = SetupFile();
            
        break;
      }

      case GPULangParser::T__0:
      case GPULangParser::T__1:
      case GPULangParser::T__2:
      case GPULangParser::LP:
      case GPULangParser::LL:
      case GPULangParser::QO:
      case GPULangParser::Q:
      case GPULangParser::INTEGERLITERAL:
      case GPULangParser::UINTEGERLITERAL:
      case GPULangParser::FLOATLITERAL:
      case GPULangParser::DOUBLELITERAL:
      case GPULangParser::HEX:
      case GPULangParser::IDENTIFIER: {
        setState(749);
        antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->atom = binaryexpatom();
         antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->atom->tree; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(891);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(889);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ExpressionNoCommaContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpressionNoComma);
          setState(754);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
           antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e1->tree; 
          setState(756);
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 70) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 70)) & 97) != 0))) {
            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(758);
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2 = expressionNoComma(13);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ExpressionNoCommaContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpressionNoComma);
          setState(761);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
           antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e1->tree; 
          setState(763);
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GPULangParser::ADD_OP

          || _la == GPULangParser::SUB_OP)) {
            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(765);
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2 = expressionNoComma(12);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ExpressionNoCommaContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpressionNoComma);
          setState(768);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
           antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e1->tree; 
          setState(770);
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GPULangParser::T__28

          || _la == GPULangParser::T__29)) {
            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(772);
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2 = expressionNoComma(11);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<ExpressionNoCommaContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpressionNoComma);
          setState(775);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
           antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e1->tree; 
          setState(777);
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 62) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 62)) & 15) != 0))) {
            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(779);
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2 = expressionNoComma(10);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<ExpressionNoCommaContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpressionNoComma);
          setState(782);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
           antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e1->tree; 
          setState(784);
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GPULangParser::LOGICEQ

          || _la == GPULangParser::NOTEQ)) {
            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(786);
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2 = expressionNoComma(9);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<ExpressionNoCommaContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpressionNoComma);
          setState(789);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
           antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e1->tree; 
          setState(791);
          match(GPULangParser::AND);
           location = SetupFile(); 
          setState(793);
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2 = expressionNoComma(8);

                            BinaryExpression* expr = Alloc<BinaryExpression>('&', _localctx->tree, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 7: {
          _localctx = _tracker.createInstance<ExpressionNoCommaContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpressionNoComma);
          setState(796);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
           antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e1->tree; 
          setState(798);
          match(GPULangParser::XOR);
           location = SetupFile(); 
          setState(800);
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2 = expressionNoComma(7);

                            BinaryExpression* expr = Alloc<BinaryExpression>('^', _localctx->tree, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 8: {
          _localctx = _tracker.createInstance<ExpressionNoCommaContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpressionNoComma);
          setState(803);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
           antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e1->tree; 
          setState(805);
          match(GPULangParser::OR);
           location = SetupFile(); 
          setState(807);
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2 = expressionNoComma(6);

                            BinaryExpression* expr = Alloc<BinaryExpression>('|', _localctx->tree, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 9: {
          _localctx = _tracker.createInstance<ExpressionNoCommaContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpressionNoComma);
          setState(810);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
           antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e1->tree; 
          setState(812);
          match(GPULangParser::LOGICAND);
           location = SetupFile(); 
          setState(814);
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2 = expressionNoComma(5);

                            BinaryExpression* expr = Alloc<BinaryExpression>('&&', _localctx->tree, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 10: {
          _localctx = _tracker.createInstance<ExpressionNoCommaContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpressionNoComma);
          setState(817);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
           antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e1->tree; 
          setState(819);
          match(GPULangParser::LOGICOR);
           location = SetupFile(); 
          setState(821);
          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2 = expressionNoComma(4);

                            BinaryExpression* expr = Alloc<BinaryExpression>('||', _localctx->tree, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 11: {
          _localctx = _tracker.createInstance<ExpressionNoCommaContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpressionNoComma);
          setState(824);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
           antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e1->tree; 
          setState(871);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case GPULangParser::T__26:
            case GPULangParser::T__27: {
              setState(826);
              antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _input->LT(1);
              _la = _input->LA(1);
              if (!(_la == GPULangParser::T__26

              || _la == GPULangParser::T__27)) {
                antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _errHandler->recoverInline(this);
              }
              else {
                _errHandler->reportMatch(this);
                consume();
              }
               location = SetupFile(); 

                                    antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  Alloc<UnaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op->getText() : "")), false, _localctx->tree);
                                    _localctx->tree->location = location;
                                
              break;
            }

            case GPULangParser::LP:
            case GPULangParser::LL:
            case GPULangParser::DOT:
            case GPULangParser::ARROW: {
              setState(869);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case GPULangParser::LP: {
                  setState(829);
                  match(GPULangParser::LP);
                   location = SetupFile(); 
                  setState(846);
                  _errHandler->sync(this);

                  _la = _input->LA(1);
                  if ((((_la & ~ 0x3fULL) == 0) &&
                    ((1ULL << _la) & 866135887136686094) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
                    ((1ULL << (_la - 73)) & 7787) != 0)) {
                    setState(831);
                    antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->arg0 = expressionNoComma(0);
                     args.Append(antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->arg0->tree); 
                    setState(834);
                    _errHandler->sync(this);

                    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
                    case 1: {
                      setState(833);
                      linePreprocessorEntry();
                      break;
                    }

                    default:
                      break;
                    }
                    setState(843);
                    _errHandler->sync(this);
                    _la = _input->LA(1);
                    while (_la == GPULangParser::T__2

                    || _la == GPULangParser::CO) {
                      setState(841);
                      _errHandler->sync(this);
                      switch (_input->LA(1)) {
                        case GPULangParser::CO: {
                          setState(836);
                          match(GPULangParser::CO);
                          setState(837);
                          antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->argn = expressionNoComma(0);
                           if (args.Full()) { throw IndexOutOfBoundsException("Maximum of 256 arguments reached"); } args.Append(antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->argn->tree); 
                          break;
                        }

                        case GPULangParser::T__2: {
                          setState(840);
                          linePreprocessorEntry();
                          break;
                        }

                      default:
                        throw NoViableAltException(this);
                      }
                      setState(845);
                      _errHandler->sync(this);
                      _la = _input->LA(1);
                    }
                  }
                  setState(848);
                  match(GPULangParser::RP);

                                            CallExpression* expr = Alloc<CallExpression>(_localctx->tree, std::move(FixedArray<Expression*>(args)));
                                            expr->location = location;
                                            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                                        
                  break;
                }

                case GPULangParser::DOT: {
                  setState(850);
                  match(GPULangParser::DOT);
                   location = SetupFile(); 
                  setState(852);
                  antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2 = expressionNoComma(0);

                                            AccessExpression* expr = Alloc<AccessExpression>(_localctx->tree, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2->tree, false);
                                            expr->location = location;
                                            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                                        
                  break;
                }

                case GPULangParser::ARROW: {
                  setState(855);
                  match(GPULangParser::ARROW);
                   location = SetupFile(); 
                  setState(857);
                  antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2 = expressionNoComma(0);

                                            AccessExpression* expr = Alloc<AccessExpression>(_localctx->tree, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2->tree, true);
                                            expr->location = location;
                                            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                                        
                  break;
                }

                case GPULangParser::LL: {
                  setState(860);
                  match(GPULangParser::LL);
                   location = SetupFile(); 
                  setState(865);
                  _errHandler->sync(this);

                  _la = _input->LA(1);
                  if ((((_la & ~ 0x3fULL) == 0) &&
                    ((1ULL << _la) & 866135887136686094) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
                    ((1ULL << (_la - 73)) & 7787) != 0)) {
                    setState(862);
                    antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e3 = expressionNoComma(0);
                     arrayIndexExpr = antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e3->tree; 
                  }
                  setState(867);
                  match(GPULangParser::RR);

                                            ArrayIndexExpression* expr = Alloc<ArrayIndexExpression>(_localctx->tree, arrayIndexExpr);
                                            expr->location = location;
                                            antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                                        
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          break;
        }

        case 12: {
          _localctx = _tracker.createInstance<ExpressionNoCommaContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpressionNoComma);
          setState(873);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
           antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e1->tree; 
          setState(887);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case GPULangParser::QU: {
              setState(875);
              match(GPULangParser::QU);
               location = SetupFile(); 
              setState(877);
              antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->ifBody = expressionNoComma(0);
              setState(878);
              match(GPULangParser::COL);
              setState(879);
              antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->elseBody = expressionNoComma(0);
               
                                    TernaryExpression* expr = Alloc<TernaryExpression>(_localctx->tree, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->ifBody->tree, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->elseBody->tree);
                                    expr->location = location;
                                    antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                                
              break;
            }

            case GPULangParser::T__30:
            case GPULangParser::T__31:
            case GPULangParser::T__32:
            case GPULangParser::T__33:
            case GPULangParser::T__34:
            case GPULangParser::T__35:
            case GPULangParser::T__36:
            case GPULangParser::EQ:
            case GPULangParser::ANDSET:
            case GPULangParser::ORSET:
            case GPULangParser::XORSET: {
              setState(882);
              antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _input->LT(1);
              _la = _input->LA(1);
              if (!((((_la & ~ 0x3fULL) == 0) &&
                ((1ULL << _la) & 189714407033405440) != 0))) {
                antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op = _errHandler->recoverInline(this);
              }
              else {
                _errHandler->reportMatch(this);
                consume();
              }
               location = SetupFile(); 
              setState(884);
              antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2 = expressionNoComma(0);

                                    BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->e2->tree);
                                    expr->location = location;
                                    antlrcpp::downCast<ExpressionNoCommaContext *>(_localctx)->tree =  expr;
                                
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(893);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

GPULangParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::ExpressionContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::ExpressionContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}

tree::TerminalNode* GPULangParser::ExpressionContext::SUB_OP() {
  return getToken(GPULangParser::SUB_OP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::ADD_OP() {
  return getToken(GPULangParser::ADD_OP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::NOT() {
  return getToken(GPULangParser::NOT, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::CONJUGATE() {
  return getToken(GPULangParser::CONJUGATE, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::MUL_OP() {
  return getToken(GPULangParser::MUL_OP, 0);
}

GPULangParser::BinaryexpatomContext* GPULangParser::ExpressionContext::binaryexpatom() {
  return getRuleContext<GPULangParser::BinaryexpatomContext>(0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::DIV_OP() {
  return getToken(GPULangParser::DIV_OP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::MOD() {
  return getToken(GPULangParser::MOD, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LESSEQ() {
  return getToken(GPULangParser::LESSEQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::GREATEREQ() {
  return getToken(GPULangParser::GREATEREQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LOGICEQ() {
  return getToken(GPULangParser::LOGICEQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::NOTEQ() {
  return getToken(GPULangParser::NOTEQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::AND() {
  return getToken(GPULangParser::AND, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::XOR() {
  return getToken(GPULangParser::XOR, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::OR() {
  return getToken(GPULangParser::OR, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LOGICAND() {
  return getToken(GPULangParser::LOGICAND, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LOGICOR() {
  return getToken(GPULangParser::LOGICOR, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::ExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::ExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::DOT() {
  return getToken(GPULangParser::DOT, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::ARROW() {
  return getToken(GPULangParser::ARROW, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LL() {
  return getToken(GPULangParser::LL, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::RR() {
  return getToken(GPULangParser::RR, 0);
}

std::vector<GPULangParser::ExpressionNoCommaContext *> GPULangParser::ExpressionContext::expressionNoComma() {
  return getRuleContexts<GPULangParser::ExpressionNoCommaContext>();
}

GPULangParser::ExpressionNoCommaContext* GPULangParser::ExpressionContext::expressionNoComma(size_t i) {
  return getRuleContext<GPULangParser::ExpressionNoCommaContext>(i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::ExpressionContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::ExpressionContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

tree::TerminalNode* GPULangParser::ExpressionContext::QU() {
  return getToken(GPULangParser::QU, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::ANDSET() {
  return getToken(GPULangParser::ANDSET, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::XORSET() {
  return getToken(GPULangParser::XORSET, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::ORSET() {
  return getToken(GPULangParser::ORSET, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::EQ() {
  return getToken(GPULangParser::EQ, 0);
}


size_t GPULangParser::ExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleExpression;
}

void GPULangParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void GPULangParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}


std::any GPULangParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}


GPULangParser::ExpressionContext* GPULangParser::expression() {
   return expression(0);
}

GPULangParser::ExpressionContext* GPULangParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GPULangParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  GPULangParser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 66;
  enterRecursionRule(_localctx, 66, GPULangParser::RuleExpression, precedence);


            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  nullptr;
            Symbol::Location location;
            StackArray<Expression*> args(256);
            Symbol::Location begin = BeginLocationRange();
            Expression* arrayIndexExpr = nullptr;
        
    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(902);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__26:
      case GPULangParser::T__27:
      case GPULangParser::NOT:
      case GPULangParser::CONJUGATE:
      case GPULangParser::ADD_OP:
      case GPULangParser::SUB_OP:
      case GPULangParser::MUL_OP: {
        setState(895);
        antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
        _la = _input->LA(1);
        if (!(((((_la - 27) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 27)) & 774058335535107) != 0))) {
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(896);
        antlrcpp::downCast<ExpressionContext *>(_localctx)->p = expression(14);

                antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  Alloc<UnaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), true, antlrcpp::downCast<ExpressionContext *>(_localctx)->p->tree);
                _localctx->tree->location = SetupFile();
            
        break;
      }

      case GPULangParser::T__0:
      case GPULangParser::T__1:
      case GPULangParser::T__2:
      case GPULangParser::LP:
      case GPULangParser::LL:
      case GPULangParser::QO:
      case GPULangParser::Q:
      case GPULangParser::INTEGERLITERAL:
      case GPULangParser::UINTEGERLITERAL:
      case GPULangParser::FLOATLITERAL:
      case GPULangParser::DOUBLELITERAL:
      case GPULangParser::HEX:
      case GPULangParser::IDENTIFIER: {
        setState(899);
        antlrcpp::downCast<ExpressionContext *>(_localctx)->atom = binaryexpatom();
         antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->atom->tree; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(1048);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1046);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(904);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(906);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 70) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 70)) & 97) != 0))) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(908);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(14);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(911);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(913);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GPULangParser::ADD_OP

          || _la == GPULangParser::SUB_OP)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(915);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(13);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(918);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(920);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GPULangParser::T__28

          || _la == GPULangParser::T__29)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(922);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(12);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(925);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(927);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 62) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 62)) & 15) != 0))) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(929);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(11);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(932);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(934);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GPULangParser::LOGICEQ

          || _la == GPULangParser::NOTEQ)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(936);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(10);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(939);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(941);
          match(GPULangParser::AND);
           location = SetupFile(); 
          setState(943);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(9);

                            BinaryExpression* expr = Alloc<BinaryExpression>('&', _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 7: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(946);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(948);
          match(GPULangParser::XOR);
           location = SetupFile(); 
          setState(950);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(8);

                            BinaryExpression* expr = Alloc<BinaryExpression>('^', _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 8: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(953);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(955);
          match(GPULangParser::OR);
           location = SetupFile(); 
          setState(957);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(7);

                            BinaryExpression* expr = Alloc<BinaryExpression>('|', _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 9: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(960);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(962);
          match(GPULangParser::LOGICAND);
           location = SetupFile(); 
          setState(964);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(6);

                            BinaryExpression* expr = Alloc<BinaryExpression>('&&', _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 10: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(967);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(969);
          match(GPULangParser::LOGICOR);
           location = SetupFile(); 
          setState(971);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(5);

                            BinaryExpression* expr = Alloc<BinaryExpression>('||', _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 11: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(974);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(976);
          match(GPULangParser::CO);
           location = SetupFile(); 
          setState(978);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(3);

                            CommaExpression* expr = Alloc<CommaExpression>(_localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 12: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(981);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(1028);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case GPULangParser::T__26:
            case GPULangParser::T__27: {
              setState(983);
              antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
              _la = _input->LA(1);
              if (!(_la == GPULangParser::T__26

              || _la == GPULangParser::T__27)) {
                antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
              }
              else {
                _errHandler->reportMatch(this);
                consume();
              }
               location = SetupFile(); 

                                    antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  Alloc<UnaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), false, _localctx->tree);
                                    _localctx->tree->location = location;
                                
              break;
            }

            case GPULangParser::LP:
            case GPULangParser::LL:
            case GPULangParser::DOT:
            case GPULangParser::ARROW: {
              setState(1026);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case GPULangParser::LP: {
                  setState(986);
                  match(GPULangParser::LP);
                   location = SetupFile(); 
                  setState(1003);
                  _errHandler->sync(this);

                  _la = _input->LA(1);
                  if ((((_la & ~ 0x3fULL) == 0) &&
                    ((1ULL << _la) & 866135887136686094) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
                    ((1ULL << (_la - 73)) & 7787) != 0)) {
                    setState(988);
                    antlrcpp::downCast<ExpressionContext *>(_localctx)->arg0 = expressionNoComma(0);
                     args.Append(antlrcpp::downCast<ExpressionContext *>(_localctx)->arg0->tree); 
                    setState(991);
                    _errHandler->sync(this);

                    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
                    case 1: {
                      setState(990);
                      linePreprocessorEntry();
                      break;
                    }

                    default:
                      break;
                    }
                    setState(1000);
                    _errHandler->sync(this);
                    _la = _input->LA(1);
                    while (_la == GPULangParser::T__2

                    || _la == GPULangParser::CO) {
                      setState(998);
                      _errHandler->sync(this);
                      switch (_input->LA(1)) {
                        case GPULangParser::CO: {
                          setState(993);
                          match(GPULangParser::CO);
                          setState(994);
                          antlrcpp::downCast<ExpressionContext *>(_localctx)->argn = expressionNoComma(0);
                           if (args.Full()) { throw IndexOutOfBoundsException("Maximum of 256 arguments reached"); } args.Append(antlrcpp::downCast<ExpressionContext *>(_localctx)->argn->tree); 
                          break;
                        }

                        case GPULangParser::T__2: {
                          setState(997);
                          linePreprocessorEntry();
                          break;
                        }

                      default:
                        throw NoViableAltException(this);
                      }
                      setState(1002);
                      _errHandler->sync(this);
                      _la = _input->LA(1);
                    }
                  }
                  setState(1005);
                  match(GPULangParser::RP);

                                            CallExpression* expr = Alloc<CallExpression>(_localctx->tree, std::move(FixedArray<Expression*>(args)));
                                            expr->location = location;
                                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                                        
                  break;
                }

                case GPULangParser::DOT: {
                  setState(1007);
                  match(GPULangParser::DOT);
                   location = SetupFile(); 
                  setState(1009);
                  antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(0);

                                            AccessExpression* expr = Alloc<AccessExpression>(_localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree, false);
                                            expr->location = location;
                                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                                        
                  break;
                }

                case GPULangParser::ARROW: {
                  setState(1012);
                  match(GPULangParser::ARROW);
                   location = SetupFile(); 
                  setState(1014);
                  antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(0);

                                            AccessExpression* expr = Alloc<AccessExpression>(_localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree, true);
                                            expr->location = location;
                                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                                        
                  break;
                }

                case GPULangParser::LL: {
                  setState(1017);
                  match(GPULangParser::LL);
                   location = SetupFile(); 
                  setState(1022);
                  _errHandler->sync(this);

                  _la = _input->LA(1);
                  if ((((_la & ~ 0x3fULL) == 0) &&
                    ((1ULL << _la) & 866135887136686094) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
                    ((1ULL << (_la - 73)) & 7787) != 0)) {
                    setState(1019);
                    antlrcpp::downCast<ExpressionContext *>(_localctx)->e3 = expression(0);
                     arrayIndexExpr = antlrcpp::downCast<ExpressionContext *>(_localctx)->e3->tree; 
                  }
                  setState(1024);
                  match(GPULangParser::RR);

                                            ArrayIndexExpression* expr = Alloc<ArrayIndexExpression>(_localctx->tree, arrayIndexExpr);
                                            expr->location = location;
                                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                                        
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          break;
        }

        case 13: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1030);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(1044);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case GPULangParser::QU: {
              setState(1032);
              match(GPULangParser::QU);
               location = SetupFile(); 
              setState(1034);
              antlrcpp::downCast<ExpressionContext *>(_localctx)->ifBody = expression(0);
              setState(1035);
              match(GPULangParser::COL);
              setState(1036);
              antlrcpp::downCast<ExpressionContext *>(_localctx)->elseBody = expression(0);
               
                                    TernaryExpression* expr = Alloc<TernaryExpression>(_localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->ifBody->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->elseBody->tree);
                                    expr->location = location;
                                    antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                                
              break;
            }

            case GPULangParser::T__30:
            case GPULangParser::T__31:
            case GPULangParser::T__32:
            case GPULangParser::T__33:
            case GPULangParser::T__34:
            case GPULangParser::T__35:
            case GPULangParser::T__36:
            case GPULangParser::EQ:
            case GPULangParser::ANDSET:
            case GPULangParser::ORSET:
            case GPULangParser::XORSET: {
              setState(1039);
              antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
              _la = _input->LA(1);
              if (!((((_la & ~ 0x3fULL) == 0) &&
                ((1ULL << _la) & 189714407033405440) != 0))) {
                antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
              }
              else {
                _errHandler->reportMatch(this);
                consume();
              }
               location = SetupFile(); 
              setState(1041);
              antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(0);

                                    BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                                    expr->location = location;
                                    antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                                
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(1050);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BinaryexpatomContext ------------------------------------------------------------------

GPULangParser::BinaryexpatomContext::BinaryexpatomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::InitializerExpressionContext* GPULangParser::BinaryexpatomContext::initializerExpression() {
  return getRuleContext<GPULangParser::InitializerExpressionContext>(0);
}

GPULangParser::ArrayInitializerExpressionContext* GPULangParser::BinaryexpatomContext::arrayInitializerExpression() {
  return getRuleContext<GPULangParser::ArrayInitializerExpressionContext>(0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::BinaryexpatomContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::INTEGERLITERAL() {
  return getToken(GPULangParser::INTEGERLITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::UINTEGERLITERAL() {
  return getToken(GPULangParser::UINTEGERLITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::FLOATLITERAL() {
  return getToken(GPULangParser::FLOATLITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::DOUBLELITERAL() {
  return getToken(GPULangParser::DOUBLELITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::HEX() {
  return getToken(GPULangParser::HEX, 0);
}

GPULangParser::StringContext* GPULangParser::BinaryexpatomContext::string() {
  return getRuleContext<GPULangParser::StringContext>(0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::BooleanContext* GPULangParser::BinaryexpatomContext::boolean() {
  return getRuleContext<GPULangParser::BooleanContext>(0);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::BinaryexpatomContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}


size_t GPULangParser::BinaryexpatomContext::getRuleIndex() const {
  return GPULangParser::RuleBinaryexpatom;
}

void GPULangParser::BinaryexpatomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinaryexpatom(this);
}

void GPULangParser::BinaryexpatomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinaryexpatom(this);
}


std::any GPULangParser::BinaryexpatomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitBinaryexpatom(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::BinaryexpatomContext* GPULangParser::binaryexpatom() {
  BinaryexpatomContext *_localctx = _tracker.createInstance<BinaryexpatomContext>(_ctx, getState());
  enterRule(_localctx, 68, GPULangParser::RuleBinaryexpatom);

          antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  nullptr;
          Symbol::Location begin = BeginLocationRange();
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1081);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1051);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->initializerExpressionContext = initializerExpression();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->initializerExpressionContext->tree; 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1054);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->arrayInitializerExpressionContext = arrayInitializerExpression();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->arrayInitializerExpressionContext->tree; 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1057);
      match(GPULangParser::LP);
      setState(1058);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->expressionContext = expression(0);
      setState(1059);
      match(GPULangParser::RP);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->expressionContext->tree; 
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1062);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->integerliteralToken = match(GPULangParser::INTEGERLITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<IntExpression>(atoi((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->integerliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->integerliteralToken->getText() : "").c_str())); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1064);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->uintegerliteralToken = match(GPULangParser::UINTEGERLITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<UIntExpression>(strtoul((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->uintegerliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->uintegerliteralToken->getText() : "").c_str(), nullptr, 10)); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1066);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->floatliteralToken = match(GPULangParser::FLOATLITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<FloatExpression>(atof((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->floatliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->floatliteralToken->getText() : "").c_str())); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1068);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->doubleliteralToken = match(GPULangParser::DOUBLELITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<FloatExpression>(atof((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->doubleliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->doubleliteralToken->getText() : "").c_str())); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1070);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->hexToken = match(GPULangParser::HEX);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<UIntExpression>(strtoul((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->hexToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->hexToken->getText() : "").c_str(), nullptr, 16)); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1072);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->stringContext = string();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<StringExpression>(antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->stringContext->val); _localctx->tree->location = EndLocationRange(begin); 
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1075);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->identifierToken = match(GPULangParser::IDENTIFIER);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<SymbolExpression>((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->identifierToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->identifierToken->getText() : "")); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1077);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->booleanContext = boolean();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<BoolExpression>(antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->booleanContext->val); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1080);
      linePreprocessorEntry();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerExpressionContext ------------------------------------------------------------------

GPULangParser::InitializerExpressionContext::InitializerExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::InitializerExpressionContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::InitializerExpressionContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::InitializerExpressionContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<GPULangParser::ExpressionNoCommaContext *> GPULangParser::InitializerExpressionContext::expressionNoComma() {
  return getRuleContexts<GPULangParser::ExpressionNoCommaContext>();
}

GPULangParser::ExpressionNoCommaContext* GPULangParser::InitializerExpressionContext::expressionNoComma(size_t i) {
  return getRuleContext<GPULangParser::ExpressionNoCommaContext>(i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::InitializerExpressionContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::InitializerExpressionContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::InitializerExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::InitializerExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::InitializerExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleInitializerExpression;
}

void GPULangParser::InitializerExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializerExpression(this);
}

void GPULangParser::InitializerExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializerExpression(this);
}


std::any GPULangParser::InitializerExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitInitializerExpression(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::InitializerExpressionContext* GPULangParser::initializerExpression() {
  InitializerExpressionContext *_localctx = _tracker.createInstance<InitializerExpressionContext>(_ctx, getState());
  enterRule(_localctx, 70, GPULangParser::RuleInitializerExpression);

          antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->tree =  nullptr;
          StackArray<Expression*> exprs(4096);
          std::string type = "";
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1083);
    antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->type = match(GPULangParser::IDENTIFIER);
     type = (antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->type != nullptr ? antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->type->getText() : ""); 
    setState(1085);
    match(GPULangParser::LB);
     location = SetupFile(); 
    setState(1102);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866135887136686094) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 7787) != 0)) {
      setState(1087);
      antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->arg0 = expressionNoComma(0);
       if (antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->arg0->tree != nullptr) exprs.Append(antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->arg0->tree); 
      setState(1090);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
      case 1: {
        setState(1089);
        linePreprocessorEntry();
        break;
      }

      default:
        break;
      }
      setState(1099);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GPULangParser::T__2

      || _la == GPULangParser::CO) {
        setState(1097);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case GPULangParser::CO: {
            setState(1092);
            match(GPULangParser::CO);
            setState(1093);
            antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->argN = expressionNoComma(0);
             if (exprs.Full()) { throw IndexOutOfBoundsException("Maximum of 4096 expressions reached"); } exprs.Append(antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->argN->tree); 
            break;
          }

          case GPULangParser::T__2: {
            setState(1096);
            linePreprocessorEntry();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1101);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1104);
    match(GPULangParser::RB);

            antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->tree =  Alloc<InitializerExpression>(exprs, type);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayInitializerExpressionContext ------------------------------------------------------------------

GPULangParser::ArrayInitializerExpressionContext::ArrayInitializerExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ArrayInitializerExpressionContext::LL() {
  return getToken(GPULangParser::LL, 0);
}

tree::TerminalNode* GPULangParser::ArrayInitializerExpressionContext::RR() {
  return getToken(GPULangParser::RR, 0);
}

std::vector<GPULangParser::ExpressionNoCommaContext *> GPULangParser::ArrayInitializerExpressionContext::expressionNoComma() {
  return getRuleContexts<GPULangParser::ExpressionNoCommaContext>();
}

GPULangParser::ExpressionNoCommaContext* GPULangParser::ArrayInitializerExpressionContext::expressionNoComma(size_t i) {
  return getRuleContext<GPULangParser::ExpressionNoCommaContext>(i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::ArrayInitializerExpressionContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::ArrayInitializerExpressionContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::ArrayInitializerExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::ArrayInitializerExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::ArrayInitializerExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleArrayInitializerExpression;
}

void GPULangParser::ArrayInitializerExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayInitializerExpression(this);
}

void GPULangParser::ArrayInitializerExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayInitializerExpression(this);
}


std::any GPULangParser::ArrayInitializerExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitArrayInitializerExpression(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::ArrayInitializerExpressionContext* GPULangParser::arrayInitializerExpression() {
  ArrayInitializerExpressionContext *_localctx = _tracker.createInstance<ArrayInitializerExpressionContext>(_ctx, getState());
  enterRule(_localctx, 72, GPULangParser::RuleArrayInitializerExpression);

          antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->tree =  nullptr;
          StackArray<Expression*> exprs(4096);
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1107);
    match(GPULangParser::LL);
     location = SetupFile(); 
    setState(1124);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 866135887136686094) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 7787) != 0)) {
      setState(1109);
      antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->arg0 = expressionNoComma(0);
       if (antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->arg0->tree != nullptr) exprs.Append(antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->arg0->tree); 
      setState(1112);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
      case 1: {
        setState(1111);
        linePreprocessorEntry();
        break;
      }

      default:
        break;
      }
      setState(1121);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GPULangParser::T__2

      || _la == GPULangParser::CO) {
        setState(1119);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case GPULangParser::CO: {
            setState(1114);
            match(GPULangParser::CO);
            setState(1115);
            antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->argN = expressionNoComma(0);
             if (exprs.Full()) { throw IndexOutOfBoundsException("Maximum of 4096 expressions reached"); } exprs.Append(antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->argN->tree); 
            break;
          }

          case GPULangParser::T__2: {
            setState(1118);
            linePreprocessorEntry();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1123);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1126);
    match(GPULangParser::RR);

            antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->tree =  Alloc<ArrayInitializerExpression>(exprs);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatVecLiteralExpressionContext ------------------------------------------------------------------

GPULangParser::FloatVecLiteralExpressionContext::FloatVecLiteralExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::FloatVecLiteralExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::FloatVecLiteralExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::FloatVecLiteralExpressionContext::FLOATLITERAL() {
  return getTokens(GPULangParser::FLOATLITERAL);
}

tree::TerminalNode* GPULangParser::FloatVecLiteralExpressionContext::FLOATLITERAL(size_t i) {
  return getToken(GPULangParser::FLOATLITERAL, i);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::FloatVecLiteralExpressionContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::FloatVecLiteralExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::FloatVecLiteralExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::FloatVecLiteralExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleFloatVecLiteralExpression;
}

void GPULangParser::FloatVecLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFloatVecLiteralExpression(this);
}

void GPULangParser::FloatVecLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFloatVecLiteralExpression(this);
}


std::any GPULangParser::FloatVecLiteralExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitFloatVecLiteralExpression(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::FloatVecLiteralExpressionContext* GPULangParser::floatVecLiteralExpression() {
  FloatVecLiteralExpressionContext *_localctx = _tracker.createInstance<FloatVecLiteralExpressionContext>(_ctx, getState());
  enterRule(_localctx, 74, GPULangParser::RuleFloatVecLiteralExpression);

          antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->tree =  nullptr;
          std::vector<float> values;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1129);
    match(GPULangParser::LESS);
     location = SetupFile(); 

    setState(1131);
    antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->arg0 = match(GPULangParser::FLOATLITERAL);
     values.push_back(atof((antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->arg0 != nullptr ? antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->arg0->getText() : "").c_str())); 
    setState(1135);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2) {
      setState(1134);
      linePreprocessorEntry();
    }
    setState(1140); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1137);
      match(GPULangParser::CO);
      setState(1138);
      antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->argN = match(GPULangParser::FLOATLITERAL);
       values.push_back(atof((antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->argN != nullptr ? antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->argN->getText() : "").c_str())); 
      setState(1142); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GPULangParser::CO);
    setState(1144);
    match(GPULangParser::GREATER);

            antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->tree =  Alloc<FloatVecExpression>(values);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoubleVecLiteralExpressionContext ------------------------------------------------------------------

GPULangParser::DoubleVecLiteralExpressionContext::DoubleVecLiteralExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::DoubleVecLiteralExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::DoubleVecLiteralExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::DoubleVecLiteralExpressionContext::DOUBLELITERAL() {
  return getTokens(GPULangParser::DOUBLELITERAL);
}

tree::TerminalNode* GPULangParser::DoubleVecLiteralExpressionContext::DOUBLELITERAL(size_t i) {
  return getToken(GPULangParser::DOUBLELITERAL, i);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::DoubleVecLiteralExpressionContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::DoubleVecLiteralExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::DoubleVecLiteralExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::DoubleVecLiteralExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleDoubleVecLiteralExpression;
}

void GPULangParser::DoubleVecLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoubleVecLiteralExpression(this);
}

void GPULangParser::DoubleVecLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoubleVecLiteralExpression(this);
}


std::any GPULangParser::DoubleVecLiteralExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitDoubleVecLiteralExpression(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::DoubleVecLiteralExpressionContext* GPULangParser::doubleVecLiteralExpression() {
  DoubleVecLiteralExpressionContext *_localctx = _tracker.createInstance<DoubleVecLiteralExpressionContext>(_ctx, getState());
  enterRule(_localctx, 76, GPULangParser::RuleDoubleVecLiteralExpression);

          antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->tree =  nullptr;
          std::vector<float> values;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1147);
    match(GPULangParser::LESS);
     location = SetupFile(); 

    setState(1149);
    antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->arg0 = match(GPULangParser::DOUBLELITERAL);
     values.push_back(atof((antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->arg0 != nullptr ? antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->arg0->getText() : "").c_str())); 
    setState(1153);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2) {
      setState(1152);
      linePreprocessorEntry();
    }
    setState(1158); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1155);
      match(GPULangParser::CO);
      setState(1156);
      antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->argN = match(GPULangParser::DOUBLELITERAL);
       values.push_back(atof((antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->argN != nullptr ? antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->argN->getText() : "").c_str())); 
      setState(1160); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GPULangParser::CO);
    setState(1162);
    match(GPULangParser::GREATER);

            antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->tree =  Alloc<FloatVecExpression>(values);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntVecLiteralExpressionContext ------------------------------------------------------------------

GPULangParser::IntVecLiteralExpressionContext::IntVecLiteralExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::IntVecLiteralExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::IntVecLiteralExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::IntVecLiteralExpressionContext::INTEGERLITERAL() {
  return getTokens(GPULangParser::INTEGERLITERAL);
}

tree::TerminalNode* GPULangParser::IntVecLiteralExpressionContext::INTEGERLITERAL(size_t i) {
  return getToken(GPULangParser::INTEGERLITERAL, i);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::IntVecLiteralExpressionContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::IntVecLiteralExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::IntVecLiteralExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::IntVecLiteralExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleIntVecLiteralExpression;
}

void GPULangParser::IntVecLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntVecLiteralExpression(this);
}

void GPULangParser::IntVecLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntVecLiteralExpression(this);
}


std::any GPULangParser::IntVecLiteralExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitIntVecLiteralExpression(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::IntVecLiteralExpressionContext* GPULangParser::intVecLiteralExpression() {
  IntVecLiteralExpressionContext *_localctx = _tracker.createInstance<IntVecLiteralExpressionContext>(_ctx, getState());
  enterRule(_localctx, 78, GPULangParser::RuleIntVecLiteralExpression);

          antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->tree =  nullptr;
          std::vector<int> values;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1165);
    match(GPULangParser::LESS);
     location = SetupFile(); 

    setState(1167);
    antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->arg0 = match(GPULangParser::INTEGERLITERAL);
     values.push_back(atof((antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->arg0 != nullptr ? antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->arg0->getText() : "").c_str())); 
    setState(1171);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2) {
      setState(1170);
      linePreprocessorEntry();
    }
    setState(1176); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1173);
      match(GPULangParser::CO);
      setState(1174);
      antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->argN = match(GPULangParser::INTEGERLITERAL);
       values.push_back(atof((antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->argN != nullptr ? antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->argN->getText() : "").c_str())); 
      setState(1178); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GPULangParser::CO);
    setState(1180);
    match(GPULangParser::GREATER);

            antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->tree =  Alloc<IntVecExpression>(values);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UintVecLiteralExpressionContext ------------------------------------------------------------------

GPULangParser::UintVecLiteralExpressionContext::UintVecLiteralExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::UintVecLiteralExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::UintVecLiteralExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::UintVecLiteralExpressionContext::UINTEGERLITERAL() {
  return getTokens(GPULangParser::UINTEGERLITERAL);
}

tree::TerminalNode* GPULangParser::UintVecLiteralExpressionContext::UINTEGERLITERAL(size_t i) {
  return getToken(GPULangParser::UINTEGERLITERAL, i);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::UintVecLiteralExpressionContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::UintVecLiteralExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::UintVecLiteralExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::UintVecLiteralExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleUintVecLiteralExpression;
}

void GPULangParser::UintVecLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUintVecLiteralExpression(this);
}

void GPULangParser::UintVecLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUintVecLiteralExpression(this);
}


std::any GPULangParser::UintVecLiteralExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitUintVecLiteralExpression(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::UintVecLiteralExpressionContext* GPULangParser::uintVecLiteralExpression() {
  UintVecLiteralExpressionContext *_localctx = _tracker.createInstance<UintVecLiteralExpressionContext>(_ctx, getState());
  enterRule(_localctx, 80, GPULangParser::RuleUintVecLiteralExpression);

          antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->tree =  nullptr;
          std::vector<unsigned int> values;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1183);
    match(GPULangParser::LESS);
     location = SetupFile(); 

    setState(1185);
    antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->arg0 = match(GPULangParser::UINTEGERLITERAL);
     values.push_back(atof((antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->arg0 != nullptr ? antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->arg0->getText() : "").c_str())); 
    setState(1189);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2) {
      setState(1188);
      linePreprocessorEntry();
    }
    setState(1194); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1191);
      match(GPULangParser::CO);
      setState(1192);
      antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->argN = match(GPULangParser::UINTEGERLITERAL);
       values.push_back(atof((antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->argN != nullptr ? antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->argN->getText() : "").c_str())); 
      setState(1196); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GPULangParser::CO);
    setState(1198);
    match(GPULangParser::GREATER);

            antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->tree =  Alloc<UIntVecExpression>(values);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanVecLiteralExpressionContext ------------------------------------------------------------------

GPULangParser::BooleanVecLiteralExpressionContext::BooleanVecLiteralExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::BooleanVecLiteralExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::BooleanVecLiteralExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<GPULangParser::BooleanContext *> GPULangParser::BooleanVecLiteralExpressionContext::boolean() {
  return getRuleContexts<GPULangParser::BooleanContext>();
}

GPULangParser::BooleanContext* GPULangParser::BooleanVecLiteralExpressionContext::boolean(size_t i) {
  return getRuleContext<GPULangParser::BooleanContext>(i);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::BooleanVecLiteralExpressionContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::BooleanVecLiteralExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::BooleanVecLiteralExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::BooleanVecLiteralExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleBooleanVecLiteralExpression;
}

void GPULangParser::BooleanVecLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBooleanVecLiteralExpression(this);
}

void GPULangParser::BooleanVecLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBooleanVecLiteralExpression(this);
}


std::any GPULangParser::BooleanVecLiteralExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GPULangVisitor*>(visitor))
    return parserVisitor->visitBooleanVecLiteralExpression(this);
  else
    return visitor->visitChildren(this);
}

GPULangParser::BooleanVecLiteralExpressionContext* GPULangParser::booleanVecLiteralExpression() {
  BooleanVecLiteralExpressionContext *_localctx = _tracker.createInstance<BooleanVecLiteralExpressionContext>(_ctx, getState());
  enterRule(_localctx, 82, GPULangParser::RuleBooleanVecLiteralExpression);

          antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->tree =  nullptr;
          std::vector<bool> values;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1201);
    match(GPULangParser::LESS);
     location = SetupFile(); 

    setState(1203);
    antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->arg0 = boolean();
     values.push_back(atof((antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->arg0 != nullptr ? _input->getText(antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->arg0->start, antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->arg0->stop) : nullptr).c_str())); 
    setState(1207);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2) {
      setState(1206);
      linePreprocessorEntry();
    }
    setState(1213); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1209);
      match(GPULangParser::CO);
      setState(1210);
      antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->argN = boolean();
       values.push_back(atof((antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->argN != nullptr ? _input->getText(antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->argN->start, antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->argN->stop) : nullptr).c_str())); 
      setState(1215); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GPULangParser::CO);
    setState(1217);
    match(GPULangParser::GREATER);

            antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->tree =  Alloc<BoolVecExpression>(values);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool GPULangParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 32: return expressionNoCommaSempred(antlrcpp::downCast<ExpressionNoCommaContext *>(context), predicateIndex);
    case 33: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool GPULangParser::expressionNoCommaSempred(ExpressionNoCommaContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 12);
    case 1: return precpred(_ctx, 11);
    case 2: return precpred(_ctx, 10);
    case 3: return precpred(_ctx, 9);
    case 4: return precpred(_ctx, 8);
    case 5: return precpred(_ctx, 7);
    case 6: return precpred(_ctx, 6);
    case 7: return precpred(_ctx, 5);
    case 8: return precpred(_ctx, 4);
    case 9: return precpred(_ctx, 3);
    case 10: return precpred(_ctx, 14);
    case 11: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool GPULangParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 12: return precpred(_ctx, 13);
    case 13: return precpred(_ctx, 12);
    case 14: return precpred(_ctx, 11);
    case 15: return precpred(_ctx, 10);
    case 16: return precpred(_ctx, 9);
    case 17: return precpred(_ctx, 8);
    case 18: return precpred(_ctx, 7);
    case 19: return precpred(_ctx, 6);
    case 20: return precpred(_ctx, 5);
    case 21: return precpred(_ctx, 4);
    case 22: return precpred(_ctx, 2);
    case 23: return precpred(_ctx, 15);
    case 24: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

void GPULangParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  gpulangParserInitialize();
#else
  ::antlr4::internal::call_once(gpulangParserOnceFlag, gpulangParserInitialize);
#endif
}
