

// include std container
#include <vector>
#include <typeinfo>
#include <iostream>
#include <string>
#include <stack>
#include <tuple>

#include "gpulangtoken.h"
#include "gpulangcompiler.h"
#include "ast/alias.h"
#include "ast/annotation.h"
#include "ast/effect.h"
#include "ast/enumeration.h"
#include "ast/function.h"
#include "ast/program.h"
#include "ast/renderstate.h"
#include "ast/samplerstate.h"
#include "ast/state.h"
#include "ast/structure.h"
#include "ast/symbol.h"
#include "ast/preprocessor.h"
#include "ast/variable.h"
#include "ast/statements/breakstatement.h"
#include "ast/statements/continuestatement.h"
#include "ast/statements/expressionstatement.h"
#include "ast/statements/forstatement.h"
#include "ast/statements/ifstatement.h"
#include "ast/statements/terminatestatement.h"
#include "ast/statements/scopestatement.h"
#include "ast/statements/statement.h"
#include "ast/statements/switchstatement.h"
#include "ast/statements/whilestatement.h"
#include "ast/expressions/accessexpression.h"
#include "ast/expressions/arrayindexexpression.h"
#include "ast/expressions/binaryexpression.h"
#include "ast/expressions/boolexpression.h"
#include "ast/expressions/boolvecexpression.h"
#include "ast/expressions/callexpression.h"
#include "ast/expressions/commaexpression.h"
#include "ast/expressions/expression.h"
#include "ast/expressions/floatexpression.h"
#include "ast/expressions/floatvecexpression.h"
#include "ast/expressions/initializerexpression.h"
#include "ast/expressions/arrayinitializerexpression.h"
#include "ast/expressions/intexpression.h"
#include "ast/expressions/intvecexpression.h"
#include "ast/expressions/stringexpression.h"
#include "ast/expressions/symbolexpression.h"
#include "ast/expressions/ternaryexpression.h"
#include "ast/expressions/uintexpression.h"
#include "ast/expressions/uintvecexpression.h"
#include "ast/expressions/unaryexpression.h"
#include "util.h"
#include "memory.h"

using namespace GPULang;



// Generated from antlr4/grammar/GPULang.g4 by ANTLR 4.13.2


#include "GPULangListener.h"

#include "GPULangParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct GPULangParserStaticData final {
  GPULangParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  GPULangParserStaticData(const GPULangParserStaticData&) = delete;
  GPULangParserStaticData(GPULangParserStaticData&&) = delete;
  GPULangParserStaticData& operator=(const GPULangParserStaticData&) = delete;
  GPULangParserStaticData& operator=(GPULangParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag gpulangParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<GPULangParserStaticData> gpulangParserStaticData = nullptr;

void gpulangParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (gpulangParserStaticData != nullptr) {
    return;
  }
#else
  assert(gpulangParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<GPULangParserStaticData>(
    std::vector<std::string>{
      "string", "path", "boolean", "entry", "effect", "linePreprocessorEntry", 
      "alias", "annotation", "attribute", "typeDeclaration", "generate", 
      "variables", "structureDeclaration", "structure", "enumeration", "parameter", 
      "functionDeclaration", "function", "program", "sampler", "state", 
      "statement", "expressionStatement", "ifStatement", "forStatement", 
      "forRangeStatement", "forUniformValueStatement", "whileStatement", 
      "scopeStatement", "terminateStatement", "continueStatement", "switchStatement", 
      "breakStatement", "expressionList", "expression", "binaryexpatom", 
      "initializerExpression", "arrayInitializerExpression", "floatVecLiteralExpression", 
      "doubleVecLiteralExpression", "intVecLiteralExpression", "uintVecLiteralExpression", 
      "booleanVecLiteralExpression"
    },
    std::vector<std::string>{
      "", "'true'", "'false'", "'#line'", "'alias'", "'as'", "'generate'", 
      "'struct'", "'enum'", "'program'", "'sampler_state'", "'render_state'", 
      "'if'", "'else'", "'for'", "'..'", "'for_uniform'", "'while'", "'do'", 
      "'return'", "'discard'", "'ray_ignore'", "'ray_terminate'", "'continue'", 
      "'switch'", "'case'", "'default'", "'break'", "'++'", "'--'", "'<<'", 
      "'>>'", "'+='", "'-='", "'*='", "'/='", "'%='", "'<<='", "'>>='", 
      "';'", "','", "':'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'.'", 
      "'!'", "'='", "'\"'", "'\\u003F'", "'&'", "'&='", "'|'", "'|='", "'^'", 
      "'^='", "'~'", "'''", "'#'", "'\\'", "'<'", "'<='", "'>'", "'>='", 
      "'=='", "'!='", "'&&'", "'||'", "'%'", "'_'", "'@'", "'+'", "'-'", 
      "'/'", "'*'", "'->'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "SC", "CO", "COL", "LP", "RP", "LB", "RB", "LL", 
      "RR", "DOT", "NOT", "EQ", "QO", "QU", "AND", "ANDSET", "OR", "ORSET", 
      "XOR", "XORSET", "CONJUGATE", "Q", "NU", "FORWARDSLASH", "LESS", "LESSEQ", 
      "GREATER", "GREATEREQ", "LOGICEQ", "NOTEQ", "LOGICAND", "LOGICOR", 
      "MOD", "UNDERSC", "SOBAKA", "ADD_OP", "SUB_OP", "DIV_OP", "MUL_OP", 
      "ARROW", "INTEGERLITERAL", "UINTEGERLITERAL", "COMMENT", "ML_COMMENT", 
      "FLOATLITERAL", "DOUBLELITERAL", "HEX", "IDENTIFIER", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,87,1063,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,1,0,1,0,1,0,5,0,90,8,0,10,0,12,0,93,9,0,1,0,1,0,1,0,1,0,5,0,99,8,0,
  	10,0,12,0,102,9,0,1,0,3,0,105,8,0,1,1,1,1,1,1,5,1,110,8,1,10,1,12,1,113,
  	9,1,1,1,1,1,1,1,1,1,5,1,119,8,1,10,1,12,1,122,9,1,1,1,3,1,125,8,1,1,2,
  	1,2,1,2,1,2,3,2,131,8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
  	4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
  	1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,177,8,
  	4,10,4,12,4,180,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
  	6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
  	1,8,3,8,213,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,223,8,9,1,9,1,9,1,
  	9,1,9,5,9,229,8,9,10,9,12,9,232,9,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
  	10,5,10,242,8,10,10,10,12,10,245,9,10,1,10,1,10,1,11,5,11,250,8,11,10,
  	11,12,11,253,9,11,1,11,1,11,1,11,5,11,258,8,11,10,11,12,11,261,9,11,1,
  	11,1,11,1,11,4,11,266,8,11,11,11,12,11,267,1,11,1,11,1,11,3,11,273,8,
  	11,1,11,1,11,1,11,1,11,5,11,279,8,11,10,11,12,11,282,9,11,1,11,1,11,1,
  	11,1,11,3,11,288,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,298,
  	8,11,10,11,12,11,301,9,11,3,11,303,8,11,1,11,1,11,1,12,5,12,308,8,12,
  	10,12,12,12,311,9,12,1,12,1,12,1,12,5,12,316,8,12,10,12,12,12,319,9,12,
  	1,12,1,12,1,12,5,12,324,8,12,10,12,12,12,327,9,12,1,12,1,12,1,12,1,12,
  	1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	3,13,347,8,13,1,13,5,13,350,8,13,10,13,12,13,353,9,13,1,13,1,13,1,13,
  	1,13,1,13,5,13,360,8,13,10,13,12,13,363,9,13,1,13,1,13,1,13,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,3,14,375,8,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,14,3,14,384,8,14,1,14,1,14,3,14,388,8,14,1,14,1,14,1,14,1,14,1,14,1,
  	14,1,14,3,14,397,8,14,1,14,1,14,5,14,401,8,14,10,14,12,14,404,9,14,1,
  	14,3,14,407,8,14,1,14,1,14,1,14,1,15,5,15,413,8,15,10,15,12,15,416,9,
  	15,1,15,1,15,1,15,5,15,421,8,15,10,15,12,15,424,9,15,1,15,1,15,1,15,1,
  	15,1,15,1,15,1,15,1,15,1,15,3,15,435,8,15,1,15,1,15,1,16,1,16,1,16,5,
  	16,442,8,16,10,16,12,16,445,9,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,453,
  	8,16,1,16,1,16,1,16,1,16,1,16,5,16,460,8,16,10,16,12,16,463,9,16,3,16,
  	465,8,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
  	5,18,479,8,18,10,18,12,18,482,9,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
  	1,18,1,18,5,18,493,8,18,10,18,12,18,496,9,18,1,18,1,18,1,18,1,19,1,19,
  	1,19,5,19,504,8,19,10,19,12,19,507,9,19,1,19,1,19,1,19,5,19,512,8,19,
  	10,19,12,19,515,9,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	5,19,527,8,19,10,19,12,19,530,9,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,5,20,545,8,20,10,20,12,20,548,9,20,1,20,
  	1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,3,21,581,8,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,23,3,23,598,8,23,1,23,1,23,1,24,1,24,1,24,
  	1,24,1,24,1,24,3,24,608,8,24,1,24,1,24,1,24,1,24,3,24,614,8,24,1,24,1,
  	24,1,24,1,24,3,24,620,8,24,1,24,1,24,1,24,1,24,5,24,626,8,24,10,24,12,
  	24,629,9,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
  	26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
  	27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,679,8,27,1,28,1,28,1,
  	28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,691,8,28,10,28,12,28,694,9,
  	28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,3,29,705,8,29,1,29,1,
  	29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,721,
  	8,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,31,1,31,1,31,1,31,3,31,742,8,31,5,31,744,8,31,10,31,12,31,
  	747,9,31,1,31,1,31,1,31,1,31,1,31,3,31,754,8,31,3,31,756,8,31,1,31,1,
  	31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,3,33,767,8,33,1,33,1,33,1,33,1,
  	33,1,33,1,33,1,33,5,33,776,8,33,10,33,12,33,779,9,33,1,33,1,33,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,791,8,34,1,34,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,904,8,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,3,34,913,8,34,1,34,1,34,5,34,917,8,34,10,34,12,
  	34,920,9,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
  	35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
  	35,1,35,1,35,1,35,1,35,3,35,952,8,35,1,36,1,36,1,36,1,36,1,36,3,36,959,
  	8,36,1,36,1,36,1,36,1,37,1,37,1,37,3,37,967,8,37,1,37,1,37,1,37,1,38,
  	1,38,1,38,1,38,1,38,1,38,3,38,978,8,38,1,38,1,38,1,38,4,38,983,8,38,11,
  	38,12,38,984,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,3,39,996,8,
  	39,1,39,1,39,1,39,4,39,1001,8,39,11,39,12,39,1002,1,39,1,39,1,39,1,40,
  	1,40,1,40,1,40,1,40,1,40,3,40,1014,8,40,1,40,1,40,1,40,4,40,1019,8,40,
  	11,40,12,40,1020,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1032,
  	8,41,1,41,1,41,1,41,4,41,1037,8,41,11,41,12,41,1038,1,41,1,41,1,41,1,
  	42,1,42,1,42,1,42,1,42,1,42,3,42,1050,8,42,1,42,1,42,1,42,1,42,4,42,1056,
  	8,42,11,42,12,42,1057,1,42,1,42,1,42,1,42,1,178,1,68,43,0,2,4,6,8,10,
  	12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
  	58,60,62,64,66,68,70,72,74,76,78,80,82,84,0,11,1,0,51,51,1,0,60,60,1,
  	0,65,65,5,0,28,29,49,49,59,59,74,75,77,77,2,0,71,71,76,77,1,0,74,75,1,
  	0,30,31,1,0,63,66,1,0,67,68,5,0,32,38,50,50,54,54,56,56,58,58,1,0,28,
  	29,1155,0,104,1,0,0,0,2,124,1,0,0,0,4,130,1,0,0,0,6,132,1,0,0,0,8,178,
  	1,0,0,0,10,181,1,0,0,0,12,187,1,0,0,0,14,194,1,0,0,0,16,212,1,0,0,0,18,
  	214,1,0,0,0,20,236,1,0,0,0,22,251,1,0,0,0,24,309,1,0,0,0,26,332,1,0,0,
  	0,28,367,1,0,0,0,30,414,1,0,0,0,32,443,1,0,0,0,34,470,1,0,0,0,36,480,
  	1,0,0,0,38,505,1,0,0,0,40,534,1,0,0,0,42,580,1,0,0,0,44,582,1,0,0,0,46,
  	585,1,0,0,0,48,601,1,0,0,0,50,634,1,0,0,0,52,647,1,0,0,0,54,678,1,0,0,
  	0,56,680,1,0,0,0,58,720,1,0,0,0,60,722,1,0,0,0,62,727,1,0,0,0,64,760,
  	1,0,0,0,66,766,1,0,0,0,68,790,1,0,0,0,70,951,1,0,0,0,72,953,1,0,0,0,74,
  	963,1,0,0,0,76,971,1,0,0,0,78,989,1,0,0,0,80,1007,1,0,0,0,82,1025,1,0,
  	0,0,84,1043,1,0,0,0,86,91,5,51,0,0,87,88,8,0,0,0,88,90,6,0,-1,0,89,87,
  	1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,94,1,0,0,0,93,91,
  	1,0,0,0,94,105,5,51,0,0,95,100,5,60,0,0,96,97,8,1,0,0,97,99,6,0,-1,0,
  	98,96,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,103,1,
  	0,0,0,102,100,1,0,0,0,103,105,5,60,0,0,104,86,1,0,0,0,104,95,1,0,0,0,
  	105,1,1,0,0,0,106,111,5,51,0,0,107,108,8,0,0,0,108,110,6,1,-1,0,109,107,
  	1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,114,1,0,0,
  	0,113,111,1,0,0,0,114,125,5,51,0,0,115,120,5,63,0,0,116,117,8,2,0,0,117,
  	119,6,1,-1,0,118,116,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,
  	1,0,0,0,121,123,1,0,0,0,122,120,1,0,0,0,123,125,5,65,0,0,124,106,1,0,
  	0,0,124,115,1,0,0,0,125,3,1,0,0,0,126,127,5,1,0,0,127,131,6,2,-1,0,128,
  	129,5,2,0,0,129,131,6,2,-1,0,130,126,1,0,0,0,130,128,1,0,0,0,131,5,1,
  	0,0,0,132,133,3,8,4,0,133,134,6,3,-1,0,134,135,5,0,0,1,135,7,1,0,0,0,
  	136,177,3,10,5,0,137,138,3,20,10,0,138,139,5,39,0,0,139,140,6,4,-1,0,
  	140,177,1,0,0,0,141,142,3,12,6,0,142,143,5,39,0,0,143,144,6,4,-1,0,144,
  	177,1,0,0,0,145,146,3,32,16,0,146,147,5,39,0,0,147,148,6,4,-1,0,148,177,
  	1,0,0,0,149,150,3,34,17,0,150,151,6,4,-1,0,151,177,1,0,0,0,152,153,3,
  	22,11,0,153,154,5,39,0,0,154,155,6,4,-1,0,155,177,1,0,0,0,156,157,3,26,
  	13,0,157,158,5,39,0,0,158,159,6,4,-1,0,159,177,1,0,0,0,160,161,3,28,14,
  	0,161,162,5,39,0,0,162,163,6,4,-1,0,163,177,1,0,0,0,164,165,3,40,20,0,
  	165,166,5,39,0,0,166,167,6,4,-1,0,167,177,1,0,0,0,168,169,3,38,19,0,169,
  	170,5,39,0,0,170,171,6,4,-1,0,171,177,1,0,0,0,172,173,3,36,18,0,173,174,
  	5,39,0,0,174,175,6,4,-1,0,175,177,1,0,0,0,176,136,1,0,0,0,176,137,1,0,
  	0,0,176,141,1,0,0,0,176,145,1,0,0,0,176,149,1,0,0,0,176,152,1,0,0,0,176,
  	156,1,0,0,0,176,160,1,0,0,0,176,164,1,0,0,0,176,168,1,0,0,0,176,172,1,
  	0,0,0,177,180,1,0,0,0,178,179,1,0,0,0,178,176,1,0,0,0,179,9,1,0,0,0,180,
  	178,1,0,0,0,181,182,5,3,0,0,182,183,6,5,-1,0,183,184,5,79,0,0,184,185,
  	3,0,0,0,185,186,6,5,-1,0,186,11,1,0,0,0,187,188,5,4,0,0,188,189,5,86,
  	0,0,189,190,5,5,0,0,190,191,5,86,0,0,191,192,6,6,-1,0,192,193,6,6,-1,
  	0,193,13,1,0,0,0,194,195,5,73,0,0,195,196,6,7,-1,0,196,197,5,86,0,0,197,
  	198,6,7,-1,0,198,199,5,42,0,0,199,200,3,68,34,0,200,201,5,43,0,0,201,
  	202,6,7,-1,0,202,15,1,0,0,0,203,204,5,86,0,0,204,205,6,8,-1,0,205,206,
  	5,42,0,0,206,207,3,68,34,0,207,208,5,43,0,0,208,209,6,8,-1,0,209,213,
  	1,0,0,0,210,211,5,86,0,0,211,213,6,8,-1,0,212,203,1,0,0,0,212,210,1,0,
  	0,0,213,17,1,0,0,0,214,230,6,9,-1,0,215,216,5,77,0,0,216,229,6,9,-1,0,
  	217,218,5,46,0,0,218,222,6,9,-1,0,219,220,3,68,34,0,220,221,6,9,-1,0,
  	221,223,1,0,0,0,222,219,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,229,
  	5,47,0,0,225,226,5,86,0,0,226,229,6,9,-1,0,227,229,3,10,5,0,228,215,1,
  	0,0,0,228,217,1,0,0,0,228,225,1,0,0,0,228,227,1,0,0,0,229,232,1,0,0,0,
  	230,228,1,0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,230,1,0,0,0,233,234,
  	5,86,0,0,234,235,6,9,-1,0,235,19,1,0,0,0,236,237,5,6,0,0,237,243,5,63,
  	0,0,238,239,3,42,21,0,239,240,6,10,-1,0,240,242,1,0,0,0,241,238,1,0,0,
  	0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,
  	243,1,0,0,0,246,247,5,65,0,0,247,21,1,0,0,0,248,250,3,10,5,0,249,248,
  	1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,259,1,0,0,
  	0,253,251,1,0,0,0,254,255,3,14,7,0,255,256,6,11,-1,0,256,258,1,0,0,0,
  	257,254,1,0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,265,
  	1,0,0,0,261,259,1,0,0,0,262,263,3,16,8,0,263,264,6,11,-1,0,264,266,1,
  	0,0,0,265,262,1,0,0,0,266,267,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,
  	268,269,1,0,0,0,269,270,5,86,0,0,270,272,6,11,-1,0,271,273,3,10,5,0,272,
  	271,1,0,0,0,272,273,1,0,0,0,273,280,1,0,0,0,274,275,5,40,0,0,275,276,
  	5,86,0,0,276,279,6,11,-1,0,277,279,3,10,5,0,278,274,1,0,0,0,278,277,1,
  	0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,287,1,0,0,0,
  	282,280,1,0,0,0,283,284,5,41,0,0,284,285,3,18,9,0,285,286,6,11,-1,0,286,
  	288,1,0,0,0,287,283,1,0,0,0,287,288,1,0,0,0,288,302,1,0,0,0,289,290,5,
  	50,0,0,290,291,3,68,34,0,291,299,6,11,-1,0,292,293,5,40,0,0,293,294,3,
  	68,34,0,294,295,6,11,-1,0,295,298,1,0,0,0,296,298,3,10,5,0,297,292,1,
  	0,0,0,297,296,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,
  	300,303,1,0,0,0,301,299,1,0,0,0,302,289,1,0,0,0,302,303,1,0,0,0,303,304,
  	1,0,0,0,304,305,6,11,-1,0,305,23,1,0,0,0,306,308,3,10,5,0,307,306,1,0,
  	0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,317,1,0,0,0,311,
  	309,1,0,0,0,312,313,3,14,7,0,313,314,6,12,-1,0,314,316,1,0,0,0,315,312,
  	1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,325,1,0,0,
  	0,319,317,1,0,0,0,320,321,3,16,8,0,321,322,6,12,-1,0,322,324,1,0,0,0,
  	323,320,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,328,
  	1,0,0,0,327,325,1,0,0,0,328,329,5,7,0,0,329,330,5,86,0,0,330,331,6,12,
  	-1,0,331,25,1,0,0,0,332,333,3,24,12,0,333,334,6,13,-1,0,334,361,5,44,
  	0,0,335,336,5,86,0,0,336,337,6,13,-1,0,337,338,5,41,0,0,338,351,6,13,
  	-1,0,339,340,5,77,0,0,340,350,6,13,-1,0,341,342,5,46,0,0,342,346,6,13,
  	-1,0,343,344,3,68,34,0,344,345,6,13,-1,0,345,347,1,0,0,0,346,343,1,0,
  	0,0,346,347,1,0,0,0,347,348,1,0,0,0,348,350,5,47,0,0,349,339,1,0,0,0,
  	349,341,1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,354,
  	1,0,0,0,353,351,1,0,0,0,354,355,5,86,0,0,355,356,6,13,-1,0,356,357,5,
  	39,0,0,357,360,6,13,-1,0,358,360,3,10,5,0,359,335,1,0,0,0,359,358,1,0,
  	0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,
  	361,1,0,0,0,364,365,5,45,0,0,365,366,6,13,-1,0,366,27,1,0,0,0,367,368,
  	5,8,0,0,368,369,5,86,0,0,369,374,6,14,-1,0,370,371,5,41,0,0,371,372,3,
  	18,9,0,372,373,6,14,-1,0,373,375,1,0,0,0,374,370,1,0,0,0,374,375,1,0,
  	0,0,375,376,1,0,0,0,376,406,5,44,0,0,377,378,5,86,0,0,378,383,6,14,-1,
  	0,379,380,5,50,0,0,380,381,3,68,34,0,381,382,6,14,-1,0,382,384,1,0,0,
  	0,383,379,1,0,0,0,383,384,1,0,0,0,384,385,1,0,0,0,385,387,6,14,-1,0,386,
  	388,3,10,5,0,387,386,1,0,0,0,387,388,1,0,0,0,388,402,1,0,0,0,389,390,
  	5,40,0,0,390,391,5,86,0,0,391,396,6,14,-1,0,392,393,5,50,0,0,393,394,
  	3,68,34,0,394,395,6,14,-1,0,395,397,1,0,0,0,396,392,1,0,0,0,396,397,1,
  	0,0,0,397,398,1,0,0,0,398,401,6,14,-1,0,399,401,3,10,5,0,400,389,1,0,
  	0,0,400,399,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,
  	407,1,0,0,0,404,402,1,0,0,0,405,407,3,10,5,0,406,377,1,0,0,0,406,405,
  	1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,409,5,45,0,0,409,410,6,14,
  	-1,0,410,29,1,0,0,0,411,413,3,10,5,0,412,411,1,0,0,0,413,416,1,0,0,0,
  	414,412,1,0,0,0,414,415,1,0,0,0,415,422,1,0,0,0,416,414,1,0,0,0,417,418,
  	3,16,8,0,418,419,6,15,-1,0,419,421,1,0,0,0,420,417,1,0,0,0,421,424,1,
  	0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,422,1,0,0,0,
  	425,426,5,86,0,0,426,427,6,15,-1,0,427,428,5,41,0,0,428,429,3,18,9,0,
  	429,434,6,15,-1,0,430,431,5,50,0,0,431,432,3,68,34,0,432,433,6,15,-1,
  	0,433,435,1,0,0,0,434,430,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,
  	437,6,15,-1,0,437,31,1,0,0,0,438,439,3,16,8,0,439,440,6,16,-1,0,440,442,
  	1,0,0,0,441,438,1,0,0,0,442,445,1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,
  	0,444,446,1,0,0,0,445,443,1,0,0,0,446,447,5,86,0,0,447,448,6,16,-1,0,
  	448,464,5,42,0,0,449,450,3,30,15,0,450,452,6,16,-1,0,451,453,3,10,5,0,
  	452,451,1,0,0,0,452,453,1,0,0,0,453,461,1,0,0,0,454,455,5,40,0,0,455,
  	456,3,30,15,0,456,457,6,16,-1,0,457,460,1,0,0,0,458,460,3,10,5,0,459,
  	454,1,0,0,0,459,458,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,1,
  	0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,464,449,1,0,0,0,464,465,1,0,0,0,
  	465,466,1,0,0,0,466,467,5,43,0,0,467,468,3,18,9,0,468,469,6,16,-1,0,469,
  	33,1,0,0,0,470,471,3,32,16,0,471,472,6,17,-1,0,472,473,3,56,28,0,473,
  	474,6,17,-1,0,474,35,1,0,0,0,475,476,3,14,7,0,476,477,6,18,-1,0,477,479,
  	1,0,0,0,478,475,1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,
  	0,481,483,1,0,0,0,482,480,1,0,0,0,483,484,5,9,0,0,484,485,6,18,-1,0,485,
  	486,5,86,0,0,486,487,6,18,-1,0,487,494,5,44,0,0,488,489,3,68,34,0,489,
  	490,6,18,-1,0,490,491,5,39,0,0,491,493,1,0,0,0,492,488,1,0,0,0,493,496,
  	1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,497,1,0,0,0,496,494,1,0,0,
  	0,497,498,5,45,0,0,498,499,6,18,-1,0,499,37,1,0,0,0,500,501,3,14,7,0,
  	501,502,6,19,-1,0,502,504,1,0,0,0,503,500,1,0,0,0,504,507,1,0,0,0,505,
  	503,1,0,0,0,505,506,1,0,0,0,506,513,1,0,0,0,507,505,1,0,0,0,508,509,3,
  	16,8,0,509,510,6,19,-1,0,510,512,1,0,0,0,511,508,1,0,0,0,512,515,1,0,
  	0,0,513,511,1,0,0,0,513,514,1,0,0,0,514,516,1,0,0,0,515,513,1,0,0,0,516,
  	517,5,10,0,0,517,518,6,19,-1,0,518,519,1,0,0,0,519,520,5,86,0,0,520,521,
  	6,19,-1,0,521,528,5,44,0,0,522,523,3,68,34,0,523,524,6,19,-1,0,524,525,
  	5,39,0,0,525,527,1,0,0,0,526,522,1,0,0,0,527,530,1,0,0,0,528,526,1,0,
  	0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,528,1,0,0,0,531,532,5,45,0,0,
  	532,533,6,19,-1,0,533,39,1,0,0,0,534,535,5,11,0,0,535,536,6,20,-1,0,536,
  	537,1,0,0,0,537,538,5,86,0,0,538,539,6,20,-1,0,539,546,5,44,0,0,540,541,
  	3,68,34,0,541,542,6,20,-1,0,542,543,5,39,0,0,543,545,1,0,0,0,544,540,
  	1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,546,547,1,0,0,0,547,549,1,0,0,
  	0,548,546,1,0,0,0,549,550,5,45,0,0,550,551,6,20,-1,0,551,41,1,0,0,0,552,
  	553,3,46,23,0,553,554,6,21,-1,0,554,581,1,0,0,0,555,556,3,56,28,0,556,
  	557,6,21,-1,0,557,581,1,0,0,0,558,559,3,48,24,0,559,560,6,21,-1,0,560,
  	581,1,0,0,0,561,562,3,54,27,0,562,563,6,21,-1,0,563,581,1,0,0,0,564,565,
  	3,62,31,0,565,566,6,21,-1,0,566,581,1,0,0,0,567,568,3,58,29,0,568,569,
  	6,21,-1,0,569,581,1,0,0,0,570,571,3,60,30,0,571,572,6,21,-1,0,572,581,
  	1,0,0,0,573,574,3,64,32,0,574,575,6,21,-1,0,575,581,1,0,0,0,576,577,3,
  	44,22,0,577,578,5,39,0,0,578,579,6,21,-1,0,579,581,1,0,0,0,580,552,1,
  	0,0,0,580,555,1,0,0,0,580,558,1,0,0,0,580,561,1,0,0,0,580,564,1,0,0,0,
  	580,567,1,0,0,0,580,570,1,0,0,0,580,573,1,0,0,0,580,576,1,0,0,0,581,43,
  	1,0,0,0,582,583,3,66,33,0,583,584,6,22,-1,0,584,45,1,0,0,0,585,586,5,
  	12,0,0,586,587,6,23,-1,0,587,588,5,42,0,0,588,589,3,68,34,0,589,590,6,
  	23,-1,0,590,591,5,43,0,0,591,592,3,42,21,0,592,597,6,23,-1,0,593,594,
  	5,13,0,0,594,595,3,42,21,0,595,596,6,23,-1,0,596,598,1,0,0,0,597,593,
  	1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,600,6,23,-1,0,600,47,1,0,
  	0,0,601,602,5,14,0,0,602,603,6,24,-1,0,603,607,5,42,0,0,604,605,3,22,
  	11,0,605,606,6,24,-1,0,606,608,1,0,0,0,607,604,1,0,0,0,607,608,1,0,0,
  	0,608,609,1,0,0,0,609,613,5,39,0,0,610,611,3,68,34,0,611,612,6,24,-1,
  	0,612,614,1,0,0,0,613,610,1,0,0,0,613,614,1,0,0,0,614,615,1,0,0,0,615,
  	619,5,39,0,0,616,617,3,68,34,0,617,618,6,24,-1,0,618,620,1,0,0,0,619,
  	616,1,0,0,0,619,620,1,0,0,0,620,621,1,0,0,0,621,627,5,43,0,0,622,623,
  	3,16,8,0,623,624,6,24,-1,0,624,626,1,0,0,0,625,622,1,0,0,0,626,629,1,
  	0,0,0,627,625,1,0,0,0,627,628,1,0,0,0,628,630,1,0,0,0,629,627,1,0,0,0,
  	630,631,3,42,21,0,631,632,6,24,-1,0,632,633,6,24,-1,0,633,49,1,0,0,0,
  	634,635,5,14,0,0,635,636,6,25,-1,0,636,637,5,42,0,0,637,638,5,86,0,0,
  	638,639,5,41,0,0,639,640,5,86,0,0,640,641,5,15,0,0,641,642,5,86,0,0,642,
  	643,5,43,0,0,643,644,3,42,21,0,644,645,6,25,-1,0,645,646,6,25,-1,0,646,
  	51,1,0,0,0,647,648,5,16,0,0,648,649,6,26,-1,0,649,650,5,42,0,0,650,651,
  	3,68,34,0,651,652,5,43,0,0,652,653,3,42,21,0,653,654,6,26,-1,0,654,655,
  	6,26,-1,0,655,53,1,0,0,0,656,657,5,17,0,0,657,658,6,27,-1,0,658,659,5,
  	42,0,0,659,660,3,68,34,0,660,661,6,27,-1,0,661,662,5,43,0,0,662,663,3,
  	42,21,0,663,664,6,27,-1,0,664,665,6,27,-1,0,665,679,1,0,0,0,666,667,5,
  	18,0,0,667,668,6,27,-1,0,668,669,3,42,21,0,669,670,6,27,-1,0,670,671,
  	5,17,0,0,671,672,5,42,0,0,672,673,3,68,34,0,673,674,6,27,-1,0,674,675,
  	5,43,0,0,675,676,5,39,0,0,676,677,6,27,-1,0,677,679,1,0,0,0,678,656,1,
  	0,0,0,678,666,1,0,0,0,679,55,1,0,0,0,680,681,5,44,0,0,681,692,6,28,-1,
  	0,682,683,3,22,11,0,683,684,5,39,0,0,684,685,6,28,-1,0,685,691,1,0,0,
  	0,686,687,3,42,21,0,687,688,6,28,-1,0,688,691,1,0,0,0,689,691,3,10,5,
  	0,690,682,1,0,0,0,690,686,1,0,0,0,690,689,1,0,0,0,691,694,1,0,0,0,692,
  	690,1,0,0,0,692,693,1,0,0,0,693,695,1,0,0,0,694,692,1,0,0,0,695,696,5,
  	45,0,0,696,697,6,28,-1,0,697,698,6,28,-1,0,698,57,1,0,0,0,699,700,5,19,
  	0,0,700,704,6,29,-1,0,701,702,3,68,34,0,702,703,6,29,-1,0,703,705,1,0,
  	0,0,704,701,1,0,0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,707,5,39,0,0,
  	707,721,6,29,-1,0,708,709,5,20,0,0,709,710,6,29,-1,0,710,711,5,39,0,0,
  	711,721,6,29,-1,0,712,713,5,21,0,0,713,714,6,29,-1,0,714,715,5,39,0,0,
  	715,721,6,29,-1,0,716,717,5,22,0,0,717,718,6,29,-1,0,718,719,5,39,0,0,
  	719,721,6,29,-1,0,720,699,1,0,0,0,720,708,1,0,0,0,720,712,1,0,0,0,720,
  	716,1,0,0,0,721,59,1,0,0,0,722,723,5,23,0,0,723,724,6,30,-1,0,724,725,
  	5,39,0,0,725,726,6,30,-1,0,726,61,1,0,0,0,727,728,5,24,0,0,728,729,6,
  	31,-1,0,729,730,5,42,0,0,730,731,3,68,34,0,731,732,5,43,0,0,732,733,6,
  	31,-1,0,733,745,5,44,0,0,734,735,5,25,0,0,735,736,3,68,34,0,736,737,5,
  	41,0,0,737,741,6,31,-1,0,738,739,3,42,21,0,739,740,6,31,-1,0,740,742,
  	1,0,0,0,741,738,1,0,0,0,741,742,1,0,0,0,742,744,1,0,0,0,743,734,1,0,0,
  	0,744,747,1,0,0,0,745,743,1,0,0,0,745,746,1,0,0,0,746,755,1,0,0,0,747,
  	745,1,0,0,0,748,749,5,26,0,0,749,753,5,41,0,0,750,751,3,42,21,0,751,752,
  	6,31,-1,0,752,754,1,0,0,0,753,750,1,0,0,0,753,754,1,0,0,0,754,756,1,0,
  	0,0,755,748,1,0,0,0,755,756,1,0,0,0,756,757,1,0,0,0,757,758,5,45,0,0,
  	758,759,6,31,-1,0,759,63,1,0,0,0,760,761,5,27,0,0,761,762,6,32,-1,0,762,
  	763,5,39,0,0,763,764,6,32,-1,0,764,65,1,0,0,0,765,767,3,10,5,0,766,765,
  	1,0,0,0,766,767,1,0,0,0,767,768,1,0,0,0,768,769,3,68,34,0,769,777,6,33,
  	-1,0,770,771,5,40,0,0,771,772,3,68,34,0,772,773,6,33,-1,0,773,776,1,0,
  	0,0,774,776,3,10,5,0,775,770,1,0,0,0,775,774,1,0,0,0,776,779,1,0,0,0,
  	777,775,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,779,777,1,0,0,0,780,781,
  	6,33,-1,0,781,67,1,0,0,0,782,783,6,34,-1,0,783,784,7,3,0,0,784,785,3,
  	68,34,14,785,786,6,34,-1,0,786,791,1,0,0,0,787,788,3,70,35,0,788,789,
  	6,34,-1,0,789,791,1,0,0,0,790,782,1,0,0,0,790,787,1,0,0,0,791,918,1,0,
  	0,0,792,793,10,17,0,0,793,794,6,34,-1,0,794,795,5,48,0,0,795,796,6,34,
  	-1,0,796,797,3,68,34,18,797,798,6,34,-1,0,798,917,1,0,0,0,799,800,10,
  	16,0,0,800,801,6,34,-1,0,801,802,5,78,0,0,802,803,6,34,-1,0,803,804,3,
  	68,34,17,804,805,6,34,-1,0,805,917,1,0,0,0,806,807,10,13,0,0,807,808,
  	6,34,-1,0,808,809,7,4,0,0,809,810,6,34,-1,0,810,811,3,68,34,14,811,812,
  	6,34,-1,0,812,917,1,0,0,0,813,814,10,12,0,0,814,815,6,34,-1,0,815,816,
  	7,5,0,0,816,817,6,34,-1,0,817,818,3,68,34,13,818,819,6,34,-1,0,819,917,
  	1,0,0,0,820,821,10,11,0,0,821,822,6,34,-1,0,822,823,7,6,0,0,823,824,6,
  	34,-1,0,824,825,3,68,34,12,825,826,6,34,-1,0,826,917,1,0,0,0,827,828,
  	10,10,0,0,828,829,6,34,-1,0,829,830,7,7,0,0,830,831,6,34,-1,0,831,832,
  	3,68,34,11,832,833,6,34,-1,0,833,917,1,0,0,0,834,835,10,9,0,0,835,836,
  	6,34,-1,0,836,837,7,8,0,0,837,838,6,34,-1,0,838,839,3,68,34,10,839,840,
  	6,34,-1,0,840,917,1,0,0,0,841,842,10,8,0,0,842,843,6,34,-1,0,843,844,
  	5,53,0,0,844,845,6,34,-1,0,845,846,3,68,34,9,846,847,6,34,-1,0,847,917,
  	1,0,0,0,848,849,10,7,0,0,849,850,6,34,-1,0,850,851,5,57,0,0,851,852,6,
  	34,-1,0,852,853,3,68,34,8,853,854,6,34,-1,0,854,917,1,0,0,0,855,856,10,
  	6,0,0,856,857,6,34,-1,0,857,858,5,55,0,0,858,859,6,34,-1,0,859,860,3,
  	68,34,7,860,861,6,34,-1,0,861,917,1,0,0,0,862,863,10,5,0,0,863,864,6,
  	34,-1,0,864,865,5,69,0,0,865,866,6,34,-1,0,866,867,3,68,34,6,867,868,
  	6,34,-1,0,868,917,1,0,0,0,869,870,10,4,0,0,870,871,6,34,-1,0,871,872,
  	5,70,0,0,872,873,6,34,-1,0,873,874,3,68,34,5,874,875,6,34,-1,0,875,917,
  	1,0,0,0,876,877,10,3,0,0,877,878,5,52,0,0,878,879,6,34,-1,0,879,880,3,
  	68,34,0,880,881,5,41,0,0,881,882,3,68,34,3,882,883,6,34,-1,0,883,917,
  	1,0,0,0,884,885,10,2,0,0,885,886,6,34,-1,0,886,887,7,9,0,0,887,888,6,
  	34,-1,0,888,889,3,68,34,2,889,890,6,34,-1,0,890,917,1,0,0,0,891,892,10,
  	19,0,0,892,893,6,34,-1,0,893,894,7,10,0,0,894,895,6,34,-1,0,895,917,6,
  	34,-1,0,896,897,10,18,0,0,897,898,6,34,-1,0,898,899,5,42,0,0,899,903,
  	6,34,-1,0,900,901,3,66,33,0,901,902,6,34,-1,0,902,904,1,0,0,0,903,900,
  	1,0,0,0,903,904,1,0,0,0,904,905,1,0,0,0,905,906,5,43,0,0,906,917,6,34,
  	-1,0,907,908,10,15,0,0,908,909,6,34,-1,0,909,910,5,46,0,0,910,912,6,34,
  	-1,0,911,913,3,68,34,0,912,911,1,0,0,0,912,913,1,0,0,0,913,914,1,0,0,
  	0,914,915,5,47,0,0,915,917,6,34,-1,0,916,792,1,0,0,0,916,799,1,0,0,0,
  	916,806,1,0,0,0,916,813,1,0,0,0,916,820,1,0,0,0,916,827,1,0,0,0,916,834,
  	1,0,0,0,916,841,1,0,0,0,916,848,1,0,0,0,916,855,1,0,0,0,916,862,1,0,0,
  	0,916,869,1,0,0,0,916,876,1,0,0,0,916,884,1,0,0,0,916,891,1,0,0,0,916,
  	896,1,0,0,0,916,907,1,0,0,0,917,920,1,0,0,0,918,916,1,0,0,0,918,919,1,
  	0,0,0,919,69,1,0,0,0,920,918,1,0,0,0,921,922,3,72,36,0,922,923,6,35,-1,
  	0,923,952,1,0,0,0,924,925,3,74,37,0,925,926,6,35,-1,0,926,952,1,0,0,0,
  	927,928,5,42,0,0,928,929,3,68,34,0,929,930,5,43,0,0,930,931,6,35,-1,0,
  	931,952,1,0,0,0,932,933,5,79,0,0,933,952,6,35,-1,0,934,935,5,80,0,0,935,
  	952,6,35,-1,0,936,937,5,83,0,0,937,952,6,35,-1,0,938,939,5,84,0,0,939,
  	952,6,35,-1,0,940,941,5,85,0,0,941,952,6,35,-1,0,942,943,3,0,0,0,943,
  	944,6,35,-1,0,944,952,1,0,0,0,945,946,5,86,0,0,946,952,6,35,-1,0,947,
  	948,3,4,2,0,948,949,6,35,-1,0,949,952,1,0,0,0,950,952,3,10,5,0,951,921,
  	1,0,0,0,951,924,1,0,0,0,951,927,1,0,0,0,951,932,1,0,0,0,951,934,1,0,0,
  	0,951,936,1,0,0,0,951,938,1,0,0,0,951,940,1,0,0,0,951,942,1,0,0,0,951,
  	945,1,0,0,0,951,947,1,0,0,0,951,950,1,0,0,0,952,71,1,0,0,0,953,954,5,
  	86,0,0,954,955,6,36,-1,0,955,956,5,44,0,0,956,958,6,36,-1,0,957,959,3,
  	66,33,0,958,957,1,0,0,0,958,959,1,0,0,0,959,960,1,0,0,0,960,961,5,45,
  	0,0,961,962,6,36,-1,0,962,73,1,0,0,0,963,964,5,46,0,0,964,966,6,37,-1,
  	0,965,967,3,66,33,0,966,965,1,0,0,0,966,967,1,0,0,0,967,968,1,0,0,0,968,
  	969,5,47,0,0,969,970,6,37,-1,0,970,75,1,0,0,0,971,972,5,63,0,0,972,973,
  	6,38,-1,0,973,974,5,83,0,0,974,975,6,38,-1,0,975,977,1,0,0,0,976,978,
  	3,10,5,0,977,976,1,0,0,0,977,978,1,0,0,0,978,982,1,0,0,0,979,980,5,40,
  	0,0,980,981,5,83,0,0,981,983,6,38,-1,0,982,979,1,0,0,0,983,984,1,0,0,
  	0,984,982,1,0,0,0,984,985,1,0,0,0,985,986,1,0,0,0,986,987,5,65,0,0,987,
  	988,6,38,-1,0,988,77,1,0,0,0,989,990,5,63,0,0,990,991,6,39,-1,0,991,992,
  	5,84,0,0,992,993,6,39,-1,0,993,995,1,0,0,0,994,996,3,10,5,0,995,994,1,
  	0,0,0,995,996,1,0,0,0,996,1000,1,0,0,0,997,998,5,40,0,0,998,999,5,84,
  	0,0,999,1001,6,39,-1,0,1000,997,1,0,0,0,1001,1002,1,0,0,0,1002,1000,1,
  	0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,0,0,1004,1005,5,65,0,0,1005,1006,
  	6,39,-1,0,1006,79,1,0,0,0,1007,1008,5,63,0,0,1008,1009,6,40,-1,0,1009,
  	1010,5,79,0,0,1010,1011,6,40,-1,0,1011,1013,1,0,0,0,1012,1014,3,10,5,
  	0,1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,1018,1,0,0,0,1015,1016,5,40,
  	0,0,1016,1017,5,79,0,0,1017,1019,6,40,-1,0,1018,1015,1,0,0,0,1019,1020,
  	1,0,0,0,1020,1018,1,0,0,0,1020,1021,1,0,0,0,1021,1022,1,0,0,0,1022,1023,
  	5,65,0,0,1023,1024,6,40,-1,0,1024,81,1,0,0,0,1025,1026,5,63,0,0,1026,
  	1027,6,41,-1,0,1027,1028,5,80,0,0,1028,1029,6,41,-1,0,1029,1031,1,0,0,
  	0,1030,1032,3,10,5,0,1031,1030,1,0,0,0,1031,1032,1,0,0,0,1032,1036,1,
  	0,0,0,1033,1034,5,40,0,0,1034,1035,5,80,0,0,1035,1037,6,41,-1,0,1036,
  	1033,1,0,0,0,1037,1038,1,0,0,0,1038,1036,1,0,0,0,1038,1039,1,0,0,0,1039,
  	1040,1,0,0,0,1040,1041,5,65,0,0,1041,1042,6,41,-1,0,1042,83,1,0,0,0,1043,
  	1044,5,63,0,0,1044,1045,6,42,-1,0,1045,1046,3,4,2,0,1046,1047,6,42,-1,
  	0,1047,1049,1,0,0,0,1048,1050,3,10,5,0,1049,1048,1,0,0,0,1049,1050,1,
  	0,0,0,1050,1055,1,0,0,0,1051,1052,5,40,0,0,1052,1053,3,4,2,0,1053,1054,
  	6,42,-1,0,1054,1056,1,0,0,0,1055,1051,1,0,0,0,1056,1057,1,0,0,0,1057,
  	1055,1,0,0,0,1057,1058,1,0,0,0,1058,1059,1,0,0,0,1059,1060,5,65,0,0,1060,
  	1061,6,42,-1,0,1061,85,1,0,0,0,89,91,100,104,111,120,124,130,176,178,
  	212,222,228,230,243,251,259,267,272,278,280,287,297,299,302,309,317,325,
  	346,349,351,359,361,374,383,387,396,400,402,406,414,422,434,443,452,459,
  	461,464,480,494,505,513,528,546,580,597,607,613,619,627,678,690,692,704,
  	720,741,745,753,755,766,775,777,790,903,912,916,918,951,958,966,977,984,
  	995,1002,1013,1020,1031,1038,1049,1057
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  gpulangParserStaticData = std::move(staticData);
}

}

GPULangParser::GPULangParser(TokenStream *input) : GPULangParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

GPULangParser::GPULangParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  GPULangParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *gpulangParserStaticData->atn, gpulangParserStaticData->decisionToDFA, gpulangParserStaticData->sharedContextCache, options);
}

GPULangParser::~GPULangParser() {
  delete _interpreter;
}

const atn::ATN& GPULangParser::getATN() const {
  return *gpulangParserStaticData->atn;
}

std::string GPULangParser::getGrammarFileName() const {
  return "GPULang.g4";
}

const std::vector<std::string>& GPULangParser::getRuleNames() const {
  return gpulangParserStaticData->ruleNames;
}

const dfa::Vocabulary& GPULangParser::getVocabulary() const {
  return gpulangParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView GPULangParser::getSerializedATN() const {
  return gpulangParserStaticData->serializedATN;
}


std::vector<std::tuple<size_t, size_t, std::string>> GPULangParser::LineStack;


//----------------- StringContext ------------------------------------------------------------------

GPULangParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::StringContext::QO() {
  return getTokens(GPULangParser::QO);
}

tree::TerminalNode* GPULangParser::StringContext::QO(size_t i) {
  return getToken(GPULangParser::QO, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StringContext::Q() {
  return getTokens(GPULangParser::Q);
}

tree::TerminalNode* GPULangParser::StringContext::Q(size_t i) {
  return getToken(GPULangParser::Q, i);
}


size_t GPULangParser::StringContext::getRuleIndex() const {
  return GPULangParser::RuleString;
}

void GPULangParser::StringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString(this);
}

void GPULangParser::StringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString(this);
}

GPULangParser::StringContext* GPULangParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 0, GPULangParser::RuleString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(104);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::QO: {
        enterOuterAlt(_localctx, 1);
        setState(86);
        match(GPULangParser::QO);
        setState(91);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -2251799813685250) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 16777215) != 0)) {
          setState(87);
          antlrcpp::downCast<StringContext *>(_localctx)->data = _input->LT(1);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == GPULangParser::QO)) {
            antlrcpp::downCast<StringContext *>(_localctx)->data = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           _localctx->val.append((antlrcpp::downCast<StringContext *>(_localctx)->data != nullptr ? antlrcpp::downCast<StringContext *>(_localctx)->data->getText() : "")); 
          setState(93);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(94);
        match(GPULangParser::QO);
        break;
      }

      case GPULangParser::Q: {
        enterOuterAlt(_localctx, 2);
        setState(95);
        match(GPULangParser::Q);
        setState(100);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -1152921504606846978) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 16777215) != 0)) {
          setState(96);
          antlrcpp::downCast<StringContext *>(_localctx)->data = _input->LT(1);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == GPULangParser::Q)) {
            antlrcpp::downCast<StringContext *>(_localctx)->data = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           _localctx->val.append((antlrcpp::downCast<StringContext *>(_localctx)->data != nullptr ? antlrcpp::downCast<StringContext *>(_localctx)->data->getText() : "")); 
          setState(102);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(103);
        match(GPULangParser::Q);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathContext ------------------------------------------------------------------

GPULangParser::PathContext::PathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::PathContext::QO() {
  return getTokens(GPULangParser::QO);
}

tree::TerminalNode* GPULangParser::PathContext::QO(size_t i) {
  return getToken(GPULangParser::QO, i);
}

tree::TerminalNode* GPULangParser::PathContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::PathContext::GREATER() {
  return getTokens(GPULangParser::GREATER);
}

tree::TerminalNode* GPULangParser::PathContext::GREATER(size_t i) {
  return getToken(GPULangParser::GREATER, i);
}


size_t GPULangParser::PathContext::getRuleIndex() const {
  return GPULangParser::RulePath;
}

void GPULangParser::PathContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPath(this);
}

void GPULangParser::PathContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPath(this);
}

GPULangParser::PathContext* GPULangParser::path() {
  PathContext *_localctx = _tracker.createInstance<PathContext>(_ctx, getState());
  enterRule(_localctx, 2, GPULangParser::RulePath);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(124);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::QO: {
        enterOuterAlt(_localctx, 1);
        setState(106);
        match(GPULangParser::QO);
        setState(111);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -2251799813685250) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 16777215) != 0)) {
          setState(107);
          antlrcpp::downCast<PathContext *>(_localctx)->data = _input->LT(1);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == GPULangParser::QO)) {
            antlrcpp::downCast<PathContext *>(_localctx)->data = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           _localctx->val.append((antlrcpp::downCast<PathContext *>(_localctx)->data != nullptr ? antlrcpp::downCast<PathContext *>(_localctx)->data->getText() : "")); 
          setState(113);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(114);
        match(GPULangParser::QO);
        break;
      }

      case GPULangParser::LESS: {
        enterOuterAlt(_localctx, 2);
        setState(115);
        match(GPULangParser::LESS);
        setState(120);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -2) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 16777213) != 0)) {
          setState(116);
          antlrcpp::downCast<PathContext *>(_localctx)->data = _input->LT(1);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == GPULangParser::GREATER)) {
            antlrcpp::downCast<PathContext *>(_localctx)->data = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           _localctx->val.append((antlrcpp::downCast<PathContext *>(_localctx)->data != nullptr ? antlrcpp::downCast<PathContext *>(_localctx)->data->getText() : "")); 
          setState(122);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(123);
        match(GPULangParser::GREATER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanContext ------------------------------------------------------------------

GPULangParser::BooleanContext::BooleanContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GPULangParser::BooleanContext::getRuleIndex() const {
  return GPULangParser::RuleBoolean;
}

void GPULangParser::BooleanContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean(this);
}

void GPULangParser::BooleanContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean(this);
}

GPULangParser::BooleanContext* GPULangParser::boolean() {
  BooleanContext *_localctx = _tracker.createInstance<BooleanContext>(_ctx, getState());
  enterRule(_localctx, 4, GPULangParser::RuleBoolean);

          antlrcpp::downCast<BooleanContext *>(_localctx)->val =  false;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(130);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__0: {
        enterOuterAlt(_localctx, 1);
        setState(126);
        match(GPULangParser::T__0);
         antlrcpp::downCast<BooleanContext *>(_localctx)->val =  true; 
        break;
      }

      case GPULangParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(128);
        match(GPULangParser::T__1);
         antlrcpp::downCast<BooleanContext *>(_localctx)->val =  false; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EntryContext ------------------------------------------------------------------

GPULangParser::EntryContext::EntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::EffectContext* GPULangParser::EntryContext::effect() {
  return getRuleContext<GPULangParser::EffectContext>(0);
}

tree::TerminalNode* GPULangParser::EntryContext::EOF() {
  return getToken(GPULangParser::EOF, 0);
}


size_t GPULangParser::EntryContext::getRuleIndex() const {
  return GPULangParser::RuleEntry;
}

void GPULangParser::EntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry(this);
}

void GPULangParser::EntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry(this);
}

GPULangParser::EntryContext* GPULangParser::entry() {
  EntryContext *_localctx = _tracker.createInstance<EntryContext>(_ctx, getState());
  enterRule(_localctx, 6, GPULangParser::RuleEntry);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(132);
    antlrcpp::downCast<EntryContext *>(_localctx)->effectContext = effect();

            antlrcpp::downCast<EntryContext *>(_localctx)->returnEffect =  antlrcpp::downCast<EntryContext *>(_localctx)->effectContext->eff;
        
    setState(134);
    match(GPULangParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EffectContext ------------------------------------------------------------------

GPULangParser::EffectContext::EffectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::EffectContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::EffectContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::GenerateContext *> GPULangParser::EffectContext::generate() {
  return getRuleContexts<GPULangParser::GenerateContext>();
}

GPULangParser::GenerateContext* GPULangParser::EffectContext::generate(size_t i) {
  return getRuleContext<GPULangParser::GenerateContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::EffectContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::EffectContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::AliasContext *> GPULangParser::EffectContext::alias() {
  return getRuleContexts<GPULangParser::AliasContext>();
}

GPULangParser::AliasContext* GPULangParser::EffectContext::alias(size_t i) {
  return getRuleContext<GPULangParser::AliasContext>(i);
}

std::vector<GPULangParser::FunctionDeclarationContext *> GPULangParser::EffectContext::functionDeclaration() {
  return getRuleContexts<GPULangParser::FunctionDeclarationContext>();
}

GPULangParser::FunctionDeclarationContext* GPULangParser::EffectContext::functionDeclaration(size_t i) {
  return getRuleContext<GPULangParser::FunctionDeclarationContext>(i);
}

std::vector<GPULangParser::FunctionContext *> GPULangParser::EffectContext::function() {
  return getRuleContexts<GPULangParser::FunctionContext>();
}

GPULangParser::FunctionContext* GPULangParser::EffectContext::function(size_t i) {
  return getRuleContext<GPULangParser::FunctionContext>(i);
}

std::vector<GPULangParser::VariablesContext *> GPULangParser::EffectContext::variables() {
  return getRuleContexts<GPULangParser::VariablesContext>();
}

GPULangParser::VariablesContext* GPULangParser::EffectContext::variables(size_t i) {
  return getRuleContext<GPULangParser::VariablesContext>(i);
}

std::vector<GPULangParser::StructureContext *> GPULangParser::EffectContext::structure() {
  return getRuleContexts<GPULangParser::StructureContext>();
}

GPULangParser::StructureContext* GPULangParser::EffectContext::structure(size_t i) {
  return getRuleContext<GPULangParser::StructureContext>(i);
}

std::vector<GPULangParser::EnumerationContext *> GPULangParser::EffectContext::enumeration() {
  return getRuleContexts<GPULangParser::EnumerationContext>();
}

GPULangParser::EnumerationContext* GPULangParser::EffectContext::enumeration(size_t i) {
  return getRuleContext<GPULangParser::EnumerationContext>(i);
}

std::vector<GPULangParser::StateContext *> GPULangParser::EffectContext::state() {
  return getRuleContexts<GPULangParser::StateContext>();
}

GPULangParser::StateContext* GPULangParser::EffectContext::state(size_t i) {
  return getRuleContext<GPULangParser::StateContext>(i);
}

std::vector<GPULangParser::SamplerContext *> GPULangParser::EffectContext::sampler() {
  return getRuleContexts<GPULangParser::SamplerContext>();
}

GPULangParser::SamplerContext* GPULangParser::EffectContext::sampler(size_t i) {
  return getRuleContext<GPULangParser::SamplerContext>(i);
}

std::vector<GPULangParser::ProgramContext *> GPULangParser::EffectContext::program() {
  return getRuleContexts<GPULangParser::ProgramContext>();
}

GPULangParser::ProgramContext* GPULangParser::EffectContext::program(size_t i) {
  return getRuleContext<GPULangParser::ProgramContext>(i);
}


size_t GPULangParser::EffectContext::getRuleIndex() const {
  return GPULangParser::RuleEffect;
}

void GPULangParser::EffectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEffect(this);
}

void GPULangParser::EffectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEffect(this);
}

GPULangParser::EffectContext* GPULangParser::effect() {
  EffectContext *_localctx = _tracker.createInstance<EffectContext>(_ctx, getState());
  enterRule(_localctx, 8, GPULangParser::RuleEffect);

          antlrcpp::downCast<EffectContext *>(_localctx)->eff =  Alloc<Effect>();
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(178);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1 + 1) {
        setState(176);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
        case 1: {
          setState(136);
          linePreprocessorEntry();
          break;
        }

        case 2: {
          setState(137);
          antlrcpp::downCast<EffectContext *>(_localctx)->generateContext = generate();
          setState(138);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->generateContext->sym); 
          break;
        }

        case 3: {
          setState(141);
          antlrcpp::downCast<EffectContext *>(_localctx)->aliasContext = alias();
          setState(142);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->aliasContext->sym); 
          break;
        }

        case 4: {
          setState(145);
          antlrcpp::downCast<EffectContext *>(_localctx)->functionDeclarationContext = functionDeclaration();
          setState(146);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->functionDeclarationContext->sym); 
          break;
        }

        case 5: {
          setState(149);
          antlrcpp::downCast<EffectContext *>(_localctx)->functionContext = function();
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->functionContext->sym); 
          break;
        }

        case 6: {
          setState(152);
          antlrcpp::downCast<EffectContext *>(_localctx)->variablesContext = variables();
          setState(153);
          match(GPULangParser::SC);
           for (Variable* var : antlrcpp::downCast<EffectContext *>(_localctx)->variablesContext->vars) { _localctx->eff->symbols.Append(var); } 
          break;
        }

        case 7: {
          setState(156);
          antlrcpp::downCast<EffectContext *>(_localctx)->structureContext = structure();
          setState(157);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->structureContext->sym); 
          break;
        }

        case 8: {
          setState(160);
          antlrcpp::downCast<EffectContext *>(_localctx)->enumerationContext = enumeration();
          setState(161);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->enumerationContext->sym); 
          break;
        }

        case 9: {
          setState(164);
          antlrcpp::downCast<EffectContext *>(_localctx)->stateContext = state();
          setState(165);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->stateContext->sym); 
          break;
        }

        case 10: {
          setState(168);
          antlrcpp::downCast<EffectContext *>(_localctx)->samplerContext = sampler();
          setState(169);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->samplerContext->sym); 
          break;
        }

        case 11: {
          setState(172);
          antlrcpp::downCast<EffectContext *>(_localctx)->programContext = program();
          setState(173);
          match(GPULangParser::SC);
           _localctx->eff->symbols.Append(antlrcpp::downCast<EffectContext *>(_localctx)->programContext->sym); 
          break;
        }

        default:
          break;
        } 
      }
      setState(180);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinePreprocessorEntryContext ------------------------------------------------------------------

GPULangParser::LinePreprocessorEntryContext::LinePreprocessorEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::LinePreprocessorEntryContext::INTEGERLITERAL() {
  return getToken(GPULangParser::INTEGERLITERAL, 0);
}

GPULangParser::StringContext* GPULangParser::LinePreprocessorEntryContext::string() {
  return getRuleContext<GPULangParser::StringContext>(0);
}


size_t GPULangParser::LinePreprocessorEntryContext::getRuleIndex() const {
  return GPULangParser::RuleLinePreprocessorEntry;
}

void GPULangParser::LinePreprocessorEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLinePreprocessorEntry(this);
}

void GPULangParser::LinePreprocessorEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLinePreprocessorEntry(this);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::linePreprocessorEntry() {
  LinePreprocessorEntryContext *_localctx = _tracker.createInstance<LinePreprocessorEntryContext>(_ctx, getState());
  enterRule(_localctx, 10, GPULangParser::RuleLinePreprocessorEntry);

          size_t origLine;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(181);
    match(GPULangParser::T__2);
     origLine = _input->LT(-1)->getLine(); 
    setState(183);
    antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->line = match(GPULangParser::INTEGERLITERAL);
    setState(184);
    antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->p = string();
     LineStack.push_back( {origLine, atoi((antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->line != nullptr ? antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->line->getText() : "").c_str()), antlrcpp::downCast<LinePreprocessorEntryContext *>(_localctx)->p->val }); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasContext ------------------------------------------------------------------

GPULangParser::AliasContext::AliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::AliasContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::AliasContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}


size_t GPULangParser::AliasContext::getRuleIndex() const {
  return GPULangParser::RuleAlias;
}

void GPULangParser::AliasContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlias(this);
}

void GPULangParser::AliasContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlias(this);
}

GPULangParser::AliasContext* GPULangParser::alias() {
  AliasContext *_localctx = _tracker.createInstance<AliasContext>(_ctx, getState());
  enterRule(_localctx, 12, GPULangParser::RuleAlias);

          antlrcpp::downCast<AliasContext *>(_localctx)->sym =  nullptr;
          std::string name;
          std::string type;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(187);
    match(GPULangParser::T__3);
    setState(188);
    antlrcpp::downCast<AliasContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
    setState(189);
    match(GPULangParser::T__4);
    setState(190);
    antlrcpp::downCast<AliasContext *>(_localctx)->type = match(GPULangParser::IDENTIFIER);
     name = (antlrcpp::downCast<AliasContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AliasContext *>(_localctx)->name->getText() : ""); type = (antlrcpp::downCast<AliasContext *>(_localctx)->type != nullptr ? antlrcpp::downCast<AliasContext *>(_localctx)->type->getText() : ""); 

            antlrcpp::downCast<AliasContext *>(_localctx)->sym =  Alloc<Alias>();
            _localctx->sym->name = name;
            _localctx->sym->type = type;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

GPULangParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::AnnotationContext::SOBAKA() {
  return getToken(GPULangParser::SOBAKA, 0);
}

tree::TerminalNode* GPULangParser::AnnotationContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::AnnotationContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::AnnotationContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::ExpressionContext* GPULangParser::AnnotationContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}


size_t GPULangParser::AnnotationContext::getRuleIndex() const {
  return GPULangParser::RuleAnnotation;
}

void GPULangParser::AnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation(this);
}

void GPULangParser::AnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation(this);
}

GPULangParser::AnnotationContext* GPULangParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 14, GPULangParser::RuleAnnotation);

          antlrcpp::downCast<AnnotationContext *>(_localctx)->annot =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(194);
    match(GPULangParser::SOBAKA);
     antlrcpp::downCast<AnnotationContext *>(_localctx)->annot =  Alloc<Annotation>(); 

    setState(196);
    antlrcpp::downCast<AnnotationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     _localctx->annot->location = SetupFile(); 
    setState(198);
    match(GPULangParser::LP);
    setState(199);
    antlrcpp::downCast<AnnotationContext *>(_localctx)->value = expression(0);
    setState(200);
    match(GPULangParser::RP);
     _localctx->annot->name = (antlrcpp::downCast<AnnotationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AnnotationContext *>(_localctx)->name->getText() : ""); _localctx->annot->value = antlrcpp::downCast<AnnotationContext *>(_localctx)->value->tree; 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeContext ------------------------------------------------------------------

GPULangParser::AttributeContext::AttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::AttributeContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::AttributeContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::AttributeContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::ExpressionContext* GPULangParser::AttributeContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}


size_t GPULangParser::AttributeContext::getRuleIndex() const {
  return GPULangParser::RuleAttribute;
}

void GPULangParser::AttributeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute(this);
}

void GPULangParser::AttributeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute(this);
}

GPULangParser::AttributeContext* GPULangParser::attribute() {
  AttributeContext *_localctx = _tracker.createInstance<AttributeContext>(_ctx, getState());
  enterRule(_localctx, 16, GPULangParser::RuleAttribute);

          antlrcpp::downCast<AttributeContext *>(_localctx)->attr =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(212);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(203);
      antlrcpp::downCast<AttributeContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
       antlrcpp::downCast<AttributeContext *>(_localctx)->attr =  Alloc<Attribute>(); _localctx->attr->location = SetupFile(); _localctx->attr->name = (antlrcpp::downCast<AttributeContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AttributeContext *>(_localctx)->name->getText() : ""); 
      setState(205);
      match(GPULangParser::LP);
      setState(206);
      antlrcpp::downCast<AttributeContext *>(_localctx)->e = antlrcpp::downCast<AttributeContext *>(_localctx)->expressionContext = expression(0);
      setState(207);
      match(GPULangParser::RP);
       _localctx->attr->expression = antlrcpp::downCast<AttributeContext *>(_localctx)->expressionContext->tree; 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(210);
      antlrcpp::downCast<AttributeContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
       antlrcpp::downCast<AttributeContext *>(_localctx)->attr =  Alloc<Attribute>(); _localctx->attr->location = SetupFile(); _localctx->attr->name = (antlrcpp::downCast<AttributeContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<AttributeContext *>(_localctx)->name->getText() : ""); _localctx->attr->expression = nullptr; 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclarationContext ------------------------------------------------------------------

GPULangParser::TypeDeclarationContext::TypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::MUL_OP() {
  return getTokens(GPULangParser::MUL_OP);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::MUL_OP(size_t i) {
  return getToken(GPULangParser::MUL_OP, i);
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::LL() {
  return getTokens(GPULangParser::LL);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::LL(size_t i) {
  return getToken(GPULangParser::LL, i);
}

std::vector<tree::TerminalNode *> GPULangParser::TypeDeclarationContext::RR() {
  return getTokens(GPULangParser::RR);
}

tree::TerminalNode* GPULangParser::TypeDeclarationContext::RR(size_t i) {
  return getToken(GPULangParser::RR, i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::TypeDeclarationContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::TypeDeclarationContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::TypeDeclarationContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::TypeDeclarationContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::TypeDeclarationContext::getRuleIndex() const {
  return GPULangParser::RuleTypeDeclaration;
}

void GPULangParser::TypeDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeDeclaration(this);
}

void GPULangParser::TypeDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeDeclaration(this);
}

GPULangParser::TypeDeclarationContext* GPULangParser::typeDeclaration() {
  TypeDeclarationContext *_localctx = _tracker.createInstance<TypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 18, GPULangParser::RuleTypeDeclaration);

          _localctx->type.type.name = "";
          Symbol::Location typeRange;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
     typeRange = BeginLocationRange(); 
    setState(230);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(228);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case GPULangParser::MUL_OP: {
            setState(215);
            match(GPULangParser::MUL_OP);
             _localctx->type.type.AddModifier(Type::FullType::Modifier::Pointer); 
            break;
          }

          case GPULangParser::LL: {
            setState(217);
            match(GPULangParser::LL);
             _localctx->type.type.AddModifier(Type::FullType::Modifier::Array); 
            setState(222);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if ((((_la & ~ 0x3fULL) == 0) &&
              ((1ULL << _la) & 1732271774273372174) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
              ((1ULL << (_la - 74)) & 7787) != 0)) {
              setState(219);
              antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->arraySize0 = expression(0);
               _localctx->type.type.UpdateValue(antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->arraySize0->tree); 
            }
            setState(224);
            match(GPULangParser::RR);
            break;
          }

          case GPULangParser::IDENTIFIER: {
            setState(225);
            antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->qual = match(GPULangParser::IDENTIFIER);
             _localctx->type.type.AddQualifier(FixedString((antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->qual != nullptr ? antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->qual->getText() : ""))); 
            break;
          }

          case GPULangParser::T__2: {
            setState(227);
            linePreprocessorEntry();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(232);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    }
    setState(233);
    antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->typeName = match(GPULangParser::IDENTIFIER);
     _localctx->type.type.name = (antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->typeName != nullptr ? antlrcpp::downCast<TypeDeclarationContext *>(_localctx)->typeName->getText() : ""); _localctx->type.location = EndLocationRange(typeRange); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenerateContext ------------------------------------------------------------------

GPULangParser::GenerateContext::GenerateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::GenerateContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::GenerateContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<GPULangParser::StatementContext *> GPULangParser::GenerateContext::statement() {
  return getRuleContexts<GPULangParser::StatementContext>();
}

GPULangParser::StatementContext* GPULangParser::GenerateContext::statement(size_t i) {
  return getRuleContext<GPULangParser::StatementContext>(i);
}


size_t GPULangParser::GenerateContext::getRuleIndex() const {
  return GPULangParser::RuleGenerate;
}

void GPULangParser::GenerateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenerate(this);
}

void GPULangParser::GenerateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenerate(this);
}

GPULangParser::GenerateContext* GPULangParser::generate() {
  GenerateContext *_localctx = _tracker.createInstance<GenerateContext>(_ctx, getState());
  enterRule(_localctx, 20, GPULangParser::RuleGenerate);

          PinnedArray<Symbol*> symbols = 0xFFFFF;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(236);
    match(GPULangParser::T__5);
    setState(237);
    match(GPULangParser::LESS);
    setState(243);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1732289366627078158) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 7787) != 0)) {
      setState(238);
      antlrcpp::downCast<GenerateContext *>(_localctx)->statementContext = statement();
       symbols.Append(antlrcpp::downCast<GenerateContext *>(_localctx)->statementContext->tree); 
      setState(245);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(246);
    match(GPULangParser::GREATER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariablesContext ------------------------------------------------------------------

GPULangParser::VariablesContext::VariablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GPULangParser::VariablesContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::VariablesContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::VariablesContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::VariablesContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::AnnotationContext *> GPULangParser::VariablesContext::annotation() {
  return getRuleContexts<GPULangParser::AnnotationContext>();
}

GPULangParser::AnnotationContext* GPULangParser::VariablesContext::annotation(size_t i) {
  return getRuleContext<GPULangParser::AnnotationContext>(i);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::VariablesContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::VariablesContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::VariablesContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::VariablesContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}

tree::TerminalNode* GPULangParser::VariablesContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::VariablesContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

tree::TerminalNode* GPULangParser::VariablesContext::EQ() {
  return getToken(GPULangParser::EQ, 0);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::VariablesContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::VariablesContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::VariablesContext::getRuleIndex() const {
  return GPULangParser::RuleVariables;
}

void GPULangParser::VariablesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariables(this);
}

void GPULangParser::VariablesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariables(this);
}

GPULangParser::VariablesContext* GPULangParser::variables() {
  VariablesContext *_localctx = _tracker.createInstance<VariablesContext>(_ctx, getState());
  enterRule(_localctx, 22, GPULangParser::RuleVariables);

          StackArray<Variable*> list(256);
          StackArray<Annotation*> annotations(32);
          StackArray<Attribute*> attributes(32);
          StackArray<std::string> names(256);
          StackArray<Expression*> valueExpressions(256);
          StackArray<Symbol::Location> locations(256);
          unsigned initCounter = 0;
          TypeDeclaration type = TypeDeclaration{ .type = Type::FullType{UNDEFINED_TYPE} };
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(251);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2) {
      setState(248);
      linePreprocessorEntry();
      setState(253);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(259);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::SOBAKA) {
      setState(254);
      antlrcpp::downCast<VariablesContext *>(_localctx)->annotationContext = annotation();
       if (annotations.Full()) { throw IndexOutOfBoundsException("Maximum of 32 annotations reached"); } annotations.Append(std::move(antlrcpp::downCast<VariablesContext *>(_localctx)->annotationContext->annot)); 
      setState(261);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(265); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(262);
              antlrcpp::downCast<VariablesContext *>(_localctx)->attributeContext = attribute();
               if (attributes.Full()) { throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); } attributes.Append(std::move(antlrcpp::downCast<VariablesContext *>(_localctx)->attributeContext->attr)); 
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(267); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(269);
    antlrcpp::downCast<VariablesContext *>(_localctx)->varName = match(GPULangParser::IDENTIFIER);
     names.Append((antlrcpp::downCast<VariablesContext *>(_localctx)->varName != nullptr ? antlrcpp::downCast<VariablesContext *>(_localctx)->varName->getText() : "")); valueExpressions.Append(nullptr); locations.Append(SetupFile()); 
    setState(272);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      setState(271);
      linePreprocessorEntry();
      break;
    }

    default:
      break;
    }
    setState(280);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2

    || _la == GPULangParser::CO) {
      setState(278);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case GPULangParser::CO: {
          setState(274);
          match(GPULangParser::CO);
          setState(275);
          antlrcpp::downCast<VariablesContext *>(_localctx)->varNameN = match(GPULangParser::IDENTIFIER);
           if (names.Full()) { throw IndexOutOfBoundsException("Maximum of 256 variable declarations reached"); } names.Append((antlrcpp::downCast<VariablesContext *>(_localctx)->varNameN != nullptr ? antlrcpp::downCast<VariablesContext *>(_localctx)->varNameN->getText() : "")); valueExpressions.Append(nullptr); locations.Append(SetupFile()); 
          break;
        }

        case GPULangParser::T__2: {
          setState(277);
          linePreprocessorEntry();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(282);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(287);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::COL) {
      setState(283);
      match(GPULangParser::COL);
      setState(284);
      antlrcpp::downCast<VariablesContext *>(_localctx)->typeDeclarationContext = typeDeclaration();
       type = antlrcpp::downCast<VariablesContext *>(_localctx)->typeDeclarationContext->type; 
    }
    setState(302);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::EQ) {
      setState(289);
      match(GPULangParser::EQ);
      setState(290);
      antlrcpp::downCast<VariablesContext *>(_localctx)->valueExpr = expression(0);
       if (initCounter < names.size) { valueExpressions[initCounter++] = antlrcpp::downCast<VariablesContext *>(_localctx)->valueExpr->tree; }  
      setState(299);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GPULangParser::T__2

      || _la == GPULangParser::CO) {
        setState(297);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case GPULangParser::CO: {
            setState(292);
            match(GPULangParser::CO);
            setState(293);
            antlrcpp::downCast<VariablesContext *>(_localctx)->valueExprN = expression(0);
             if (initCounter < names.size) { valueExpressions[initCounter++] = antlrcpp::downCast<VariablesContext *>(_localctx)->valueExprN->tree; }; 
            break;
          }

          case GPULangParser::T__2: {
            setState(296);
            linePreprocessorEntry();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(301);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }

            for (size_t i = 0; i < names.size; i++)
            {
                Variable* var = Alloc<Variable>(); 
                var->type = type.type; 
                var->typeLocation = type.location;
                var->location = locations[i]; 
                var->annotations = annotations;
                var->attributes = attributes;
                var->name = names[i];
                var->valueExpression = valueExpressions[i];
                list.Append(var);
            }
            antlrcpp::downCast<VariablesContext *>(_localctx)->vars =  list;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureDeclarationContext ------------------------------------------------------------------

GPULangParser::StructureDeclarationContext::StructureDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::StructureDeclarationContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::StructureDeclarationContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::StructureDeclarationContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::AnnotationContext *> GPULangParser::StructureDeclarationContext::annotation() {
  return getRuleContexts<GPULangParser::AnnotationContext>();
}

GPULangParser::AnnotationContext* GPULangParser::StructureDeclarationContext::annotation(size_t i) {
  return getRuleContext<GPULangParser::AnnotationContext>(i);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::StructureDeclarationContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::StructureDeclarationContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}


size_t GPULangParser::StructureDeclarationContext::getRuleIndex() const {
  return GPULangParser::RuleStructureDeclaration;
}

void GPULangParser::StructureDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructureDeclaration(this);
}

void GPULangParser::StructureDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructureDeclaration(this);
}

GPULangParser::StructureDeclarationContext* GPULangParser::structureDeclaration() {
  StructureDeclarationContext *_localctx = _tracker.createInstance<StructureDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 24, GPULangParser::RuleStructureDeclaration);

          antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->sym =  nullptr;
          StackArray<Annotation*> annotations(32);
          StackArray<Attribute*> attributes(32);
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(309);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2) {
      setState(306);
      linePreprocessorEntry();
      setState(311);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(317);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::SOBAKA) {
      setState(312);
      antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->annotationContext = annotation();
       if (annotations.Full()) { throw IndexOutOfBoundsException("Maximum of 32 annotations reached"); } annotations.Append(std::move(antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->annotationContext->annot)); 
      setState(319);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(325);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::IDENTIFIER) {
      setState(320);
      antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->attributeContext = attribute();
       if (attributes.Full()) { throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); } attributes.Append(std::move(antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->attributeContext->attr)); 
      setState(327);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(328);
    match(GPULangParser::T__6);
    setState(329);
    antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     
            antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->sym =  Alloc<Structure>();
            _localctx->sym->name = (antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<StructureDeclarationContext *>(_localctx)->name->getText() : ""); 
            _localctx->sym->annotations = annotations;
            _localctx->sym->attributes = attributes;
            _localctx->sym->location = SetupFile();
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureContext ------------------------------------------------------------------

GPULangParser::StructureContext::StructureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::StructureDeclarationContext* GPULangParser::StructureContext::structureDeclaration() {
  return getRuleContext<GPULangParser::StructureDeclarationContext>(0);
}

tree::TerminalNode* GPULangParser::StructureContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::StructureContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::COL() {
  return getTokens(GPULangParser::COL);
}

tree::TerminalNode* GPULangParser::StructureContext::COL(size_t i) {
  return getToken(GPULangParser::COL, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::StructureContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::StructureContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::StructureContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::StructureContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::MUL_OP() {
  return getTokens(GPULangParser::MUL_OP);
}

tree::TerminalNode* GPULangParser::StructureContext::MUL_OP(size_t i) {
  return getToken(GPULangParser::MUL_OP, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::LL() {
  return getTokens(GPULangParser::LL);
}

tree::TerminalNode* GPULangParser::StructureContext::LL(size_t i) {
  return getToken(GPULangParser::LL, i);
}

std::vector<tree::TerminalNode *> GPULangParser::StructureContext::RR() {
  return getTokens(GPULangParser::RR);
}

tree::TerminalNode* GPULangParser::StructureContext::RR(size_t i) {
  return getToken(GPULangParser::RR, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::StructureContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::StructureContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::StructureContext::getRuleIndex() const {
  return GPULangParser::RuleStructure;
}

void GPULangParser::StructureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure(this);
}

void GPULangParser::StructureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure(this);
}

GPULangParser::StructureContext* GPULangParser::structure() {
  StructureContext *_localctx = _tracker.createInstance<StructureContext>(_ctx, getState());
  enterRule(_localctx, 26, GPULangParser::RuleStructure);

          antlrcpp::downCast<StructureContext *>(_localctx)->sym =  nullptr;
          StackArray<Symbol*> members(1024);
          bool isArray = false;
          Expression* arraySizeExpression = nullptr;
          std::string instanceName;
          Symbol::Location varLocation;
          Type::FullType varType;
          Symbol::Location varTypeLocation;
          Symbol::Location typeRange;
          std::string varName;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(332);
    antlrcpp::downCast<StructureContext *>(_localctx)->structureDeclarationContext = structureDeclaration();
     antlrcpp::downCast<StructureContext *>(_localctx)->sym =  antlrcpp::downCast<StructureContext *>(_localctx)->structureDeclarationContext->sym; 
    setState(334);
    match(GPULangParser::LB);
    setState(361);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2 || _la == GPULangParser::IDENTIFIER) {
      setState(359);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case GPULangParser::IDENTIFIER: {
          setState(335);
          antlrcpp::downCast<StructureContext *>(_localctx)->varName = match(GPULangParser::IDENTIFIER);
           varName = (antlrcpp::downCast<StructureContext *>(_localctx)->varName != nullptr ? antlrcpp::downCast<StructureContext *>(_localctx)->varName->getText() : ""); varLocation = SetupFile(); 
          setState(337);
          match(GPULangParser::COL);
           typeRange = BeginLocationRange(); 
          setState(351);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == GPULangParser::LL

          || _la == GPULangParser::MUL_OP) {
            setState(349);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case GPULangParser::MUL_OP: {
                setState(339);
                match(GPULangParser::MUL_OP);
                 varType.AddModifier(Type::FullType::Modifier::Pointer); 
                break;
              }

              case GPULangParser::LL: {
                setState(341);
                match(GPULangParser::LL);
                 varType.AddModifier(Type::FullType::Modifier::Array); 
                setState(346);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if ((((_la & ~ 0x3fULL) == 0) &&
                  ((1ULL << _la) & 1732271774273372174) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
                  ((1ULL << (_la - 74)) & 7787) != 0)) {
                  setState(343);
                  antlrcpp::downCast<StructureContext *>(_localctx)->arraySize0 = expression(0);
                   varType.UpdateValue(antlrcpp::downCast<StructureContext *>(_localctx)->arraySize0->tree); 
                }
                setState(348);
                match(GPULangParser::RR);
                break;
              }

            default:
              throw NoViableAltException(this);
            }
            setState(353);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(354);
          antlrcpp::downCast<StructureContext *>(_localctx)->varTypeName = match(GPULangParser::IDENTIFIER);
           if (members.Full()) { throw IndexOutOfBoundsException("Maximum of 1024 struct members reached"); } varType.name = (antlrcpp::downCast<StructureContext *>(_localctx)->varTypeName != nullptr ? antlrcpp::downCast<StructureContext *>(_localctx)->varTypeName->getText() : ""); varTypeLocation = EndLocationRange(typeRange); 
          setState(356);
          match(GPULangParser::SC);

                          Variable* var = Alloc<Variable>(); 
                          var->type = varType; 
                          var->location = varLocation; 
                          var->typeLocation = varTypeLocation;
                          var->name = varName;
                          var->valueExpression = nullptr;
                          members.Append(var);
                          
                          varType = Type::FullType();
                      
          break;
        }

        case GPULangParser::T__2: {
          setState(358);
          linePreprocessorEntry();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(363);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(364);
    match(GPULangParser::RB);
     
            _localctx->sym->symbols = members; 
            //_localctx->sym->instanceName = instanceName;
            //_localctx->sym->isArray = isArray;
            //_localctx->sym->arraySizeExpression = arraySizeExpression;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumerationContext ------------------------------------------------------------------

GPULangParser::EnumerationContext::EnumerationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::EnumerationContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::EnumerationContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::EnumerationContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::EnumerationContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

tree::TerminalNode* GPULangParser::EnumerationContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::EnumerationContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::EnumerationContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::EnumerationContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::EnumerationContext::EQ() {
  return getTokens(GPULangParser::EQ);
}

tree::TerminalNode* GPULangParser::EnumerationContext::EQ(size_t i) {
  return getToken(GPULangParser::EQ, i);
}

std::vector<tree::TerminalNode *> GPULangParser::EnumerationContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::EnumerationContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::EnumerationContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::EnumerationContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::EnumerationContext::getRuleIndex() const {
  return GPULangParser::RuleEnumeration;
}

void GPULangParser::EnumerationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration(this);
}

void GPULangParser::EnumerationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration(this);
}

GPULangParser::EnumerationContext* GPULangParser::enumeration() {
  EnumerationContext *_localctx = _tracker.createInstance<EnumerationContext>(_ctx, getState());
  enterRule(_localctx, 28, GPULangParser::RuleEnumeration);

          antlrcpp::downCast<EnumerationContext *>(_localctx)->sym =  nullptr;
          StackArray<FixedString> enumLabels(256);
          StackArray<Expression*> enumValues(256);
          StackArray<Symbol::Location> enumLocations(256);
          std::string name;
          TypeDeclaration type = TypeDeclaration{ .type = Type::FullType{"u32"} };
          Symbol::Location location;
          Symbol::Location labelLocation;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(367);
    match(GPULangParser::T__7);
    setState(368);
    antlrcpp::downCast<EnumerationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     name = (antlrcpp::downCast<EnumerationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<EnumerationContext *>(_localctx)->name->getText() : ""); location = SetupFile(); 
    setState(374);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::COL) {
      setState(370);
      match(GPULangParser::COL);
      setState(371);
      antlrcpp::downCast<EnumerationContext *>(_localctx)->typeDeclarationContext = typeDeclaration();
       type = antlrcpp::downCast<EnumerationContext *>(_localctx)->typeDeclarationContext->type; 
    }
    setState(376);
    match(GPULangParser::LB);
    setState(406);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::IDENTIFIER: {
        setState(377);
        antlrcpp::downCast<EnumerationContext *>(_localctx)->label = match(GPULangParser::IDENTIFIER);
         Expression* expr = nullptr; labelLocation = SetupFile(); 
        setState(383);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GPULangParser::EQ) {
          setState(379);
          match(GPULangParser::EQ);
          setState(380);
          antlrcpp::downCast<EnumerationContext *>(_localctx)->value = expression(0);
           expr = antlrcpp::downCast<EnumerationContext *>(_localctx)->value->tree; 
        }

                        enumLabels.Append(FixedString((antlrcpp::downCast<EnumerationContext *>(_localctx)->label != nullptr ? antlrcpp::downCast<EnumerationContext *>(_localctx)->label->getText() : "")));
                        enumValues.Append(expr);
                        enumLocations.Append(labelLocation);
                    
        setState(387);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
        case 1: {
          setState(386);
          linePreprocessorEntry();
          break;
        }

        default:
          break;
        }
        setState(402);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == GPULangParser::T__2

        || _la == GPULangParser::CO) {
          setState(400);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case GPULangParser::CO: {
              setState(389);
              match(GPULangParser::CO);
              setState(390);
              antlrcpp::downCast<EnumerationContext *>(_localctx)->label = match(GPULangParser::IDENTIFIER);
               if (enumLabels.Full()) { throw IndexOutOfBoundsException("Maximum of 256 enum labels"); } Expression* expr = nullptr; labelLocation = SetupFile(); 
              setState(396);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == GPULangParser::EQ) {
                setState(392);
                match(GPULangParser::EQ);
                setState(393);
                antlrcpp::downCast<EnumerationContext *>(_localctx)->value = expression(0);
                 expr = antlrcpp::downCast<EnumerationContext *>(_localctx)->value->tree; 
              }

                                  enumLabels.Append(FixedString((antlrcpp::downCast<EnumerationContext *>(_localctx)->label != nullptr ? antlrcpp::downCast<EnumerationContext *>(_localctx)->label->getText() : "")));
                                  enumValues.Append(expr);
                                  enumLocations.Append(labelLocation);
                              
              break;
            }

            case GPULangParser::T__2: {
              setState(399);
              linePreprocessorEntry();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(404);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case GPULangParser::T__2: {
        setState(405);
        linePreprocessorEntry();
        break;
      }

      case GPULangParser::RB: {
        break;
      }

    default:
      break;
    }
    setState(408);
    match(GPULangParser::RB);

            antlrcpp::downCast<EnumerationContext *>(_localctx)->sym =  Alloc<Enumeration>();
            _localctx->sym->name = name;
            _localctx->sym->type = type.type;
            _localctx->sym->type.literal = true;
            _localctx->sym->labels = enumLabels;
            _localctx->sym->values = enumValues;
            _localctx->sym->labelLocations = enumLocations;
            _localctx->sym->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterContext ------------------------------------------------------------------

GPULangParser::ParameterContext::ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ParameterContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::ParameterContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

tree::TerminalNode* GPULangParser::ParameterContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::ParameterContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::ParameterContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::ParameterContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::ParameterContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

tree::TerminalNode* GPULangParser::ParameterContext::EQ() {
  return getToken(GPULangParser::EQ, 0);
}

GPULangParser::ExpressionContext* GPULangParser::ParameterContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}


size_t GPULangParser::ParameterContext::getRuleIndex() const {
  return GPULangParser::RuleParameter;
}

void GPULangParser::ParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter(this);
}

void GPULangParser::ParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter(this);
}

GPULangParser::ParameterContext* GPULangParser::parameter() {
  ParameterContext *_localctx = _tracker.createInstance<ParameterContext>(_ctx, getState());
  enterRule(_localctx, 30, GPULangParser::RuleParameter);

          StackArray<Attribute*> attributes(32);
          std::string name;
          Expression* valueExpression = nullptr;
          Symbol::Location location;
          TypeDeclaration type = TypeDeclaration{ .type = Type::FullType{UNDEFINED_TYPE} };
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(414);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2) {
      setState(411);
      linePreprocessorEntry();
      setState(416);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(422);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(417);
        antlrcpp::downCast<ParameterContext *>(_localctx)->attributeContext = attribute();
         if (attributes.Full()) { throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); } attributes.Append(std::move(antlrcpp::downCast<ParameterContext *>(_localctx)->attributeContext->attr));  
      }
      setState(424);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
    }
    setState(425);
    antlrcpp::downCast<ParameterContext *>(_localctx)->varName = match(GPULangParser::IDENTIFIER);
     name = (antlrcpp::downCast<ParameterContext *>(_localctx)->varName != nullptr ? antlrcpp::downCast<ParameterContext *>(_localctx)->varName->getText() : ""); location = SetupFile(); 
    setState(427);
    match(GPULangParser::COL);
    setState(428);
    antlrcpp::downCast<ParameterContext *>(_localctx)->typeDeclarationContext = typeDeclaration();
     type = antlrcpp::downCast<ParameterContext *>(_localctx)->typeDeclarationContext->type; 
    setState(434);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::EQ) {
      setState(430);
      match(GPULangParser::EQ);
      setState(431);
      antlrcpp::downCast<ParameterContext *>(_localctx)->valueExpr = expression(0);
       valueExpression = antlrcpp::downCast<ParameterContext *>(_localctx)->valueExpr->tree; 
    }

                antlrcpp::downCast<ParameterContext *>(_localctx)->sym =  Alloc<Variable>(); 
                _localctx->sym->type = type.type; 
                _localctx->sym->typeLocation = type.location;
                _localctx->sym->location = location; 
                _localctx->sym->attributes = std::move(attributes);
                _localctx->sym->name = name;
                _localctx->sym->valueExpression = valueExpression;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDeclarationContext ------------------------------------------------------------------

GPULangParser::FunctionDeclarationContext::FunctionDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::TypeDeclarationContext* GPULangParser::FunctionDeclarationContext::typeDeclaration() {
  return getRuleContext<GPULangParser::TypeDeclarationContext>(0);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::FunctionDeclarationContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::FunctionDeclarationContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

std::vector<GPULangParser::ParameterContext *> GPULangParser::FunctionDeclarationContext::parameter() {
  return getRuleContexts<GPULangParser::ParameterContext>();
}

GPULangParser::ParameterContext* GPULangParser::FunctionDeclarationContext::parameter(size_t i) {
  return getRuleContext<GPULangParser::ParameterContext>(i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::FunctionDeclarationContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::FunctionDeclarationContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::FunctionDeclarationContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::FunctionDeclarationContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::FunctionDeclarationContext::getRuleIndex() const {
  return GPULangParser::RuleFunctionDeclaration;
}

void GPULangParser::FunctionDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionDeclaration(this);
}

void GPULangParser::FunctionDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionDeclaration(this);
}

GPULangParser::FunctionDeclarationContext* GPULangParser::functionDeclaration() {
  FunctionDeclarationContext *_localctx = _tracker.createInstance<FunctionDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 32, GPULangParser::RuleFunctionDeclaration);

          antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->sym =  nullptr;
          StackArray<Variable*> variables(32);
          StackArray<Attribute*> attributes(32);
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(443);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(438);
        antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->attributeContext = attribute();
         if (attributes.Full()) { throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); } attributes.Append(std::move(antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->attributeContext->attr));  
      }
      setState(445);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx);
    }
    setState(446);
    antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     location = SetupFile(); 
    setState(448);
    match(GPULangParser::LP);
    setState(464);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2 || _la == GPULangParser::IDENTIFIER) {
      setState(449);
      antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->arg0 = parameter();
       variables.Append(antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->arg0->sym); 
      setState(452);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
      case 1: {
        setState(451);
        linePreprocessorEntry();
        break;
      }

      default:
        break;
      }
      setState(461);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GPULangParser::T__2

      || _la == GPULangParser::CO) {
        setState(459);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case GPULangParser::CO: {
            setState(454);
            match(GPULangParser::CO);
            setState(455);
            antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->argn = parameter();
             if (variables.Full()) throw IndexOutOfBoundsException("Maximum of 32 variables reached"); variables.Append(antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->argn->sym); 
            break;
          }

          case GPULangParser::T__2: {
            setState(458);
            linePreprocessorEntry();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(463);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(466);
    match(GPULangParser::RP);
    setState(467);
    antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->returnType = typeDeclaration();

            antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->sym =  Alloc<Function>(); 
            _localctx->sym->hasBody = false;
            _localctx->sym->location = location;
            _localctx->sym->returnType = antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->returnType->type.type; 
            _localctx->sym->returnTypeLocation = antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->returnType->type.location;
            _localctx->sym->name = (antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<FunctionDeclarationContext *>(_localctx)->name->getText() : ""); 
            _localctx->sym->parameters = variables; 
            _localctx->sym->attributes = attributes;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionContext ------------------------------------------------------------------

GPULangParser::FunctionContext::FunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::FunctionDeclarationContext* GPULangParser::FunctionContext::functionDeclaration() {
  return getRuleContext<GPULangParser::FunctionDeclarationContext>(0);
}

GPULangParser::ScopeStatementContext* GPULangParser::FunctionContext::scopeStatement() {
  return getRuleContext<GPULangParser::ScopeStatementContext>(0);
}


size_t GPULangParser::FunctionContext::getRuleIndex() const {
  return GPULangParser::RuleFunction;
}

void GPULangParser::FunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction(this);
}

void GPULangParser::FunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction(this);
}

GPULangParser::FunctionContext* GPULangParser::function() {
  FunctionContext *_localctx = _tracker.createInstance<FunctionContext>(_ctx, getState());
  enterRule(_localctx, 34, GPULangParser::RuleFunction);

          antlrcpp::downCast<FunctionContext *>(_localctx)->sym =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(470);
    antlrcpp::downCast<FunctionContext *>(_localctx)->functionDeclarationContext = functionDeclaration();
     antlrcpp::downCast<FunctionContext *>(_localctx)->sym =  antlrcpp::downCast<FunctionContext *>(_localctx)->functionDeclarationContext->sym; 
    setState(472);
    antlrcpp::downCast<FunctionContext *>(_localctx)->scopeStatementContext = scopeStatement();

            _localctx->sym->hasBody = true;
            _localctx->sym->ast = antlrcpp::downCast<FunctionContext *>(_localctx)->scopeStatementContext->tree;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

GPULangParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ProgramContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::ProgramContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::ProgramContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<GPULangParser::AnnotationContext *> GPULangParser::ProgramContext::annotation() {
  return getRuleContexts<GPULangParser::AnnotationContext>();
}

GPULangParser::AnnotationContext* GPULangParser::ProgramContext::annotation(size_t i) {
  return getRuleContext<GPULangParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::ProgramContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::ProgramContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::ProgramContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::ProgramContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::ProgramContext::getRuleIndex() const {
  return GPULangParser::RuleProgram;
}

void GPULangParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void GPULangParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}

GPULangParser::ProgramContext* GPULangParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 36, GPULangParser::RuleProgram);

          antlrcpp::downCast<ProgramContext *>(_localctx)->sym =  nullptr;
          StackArray<Expression*> entries(32);
          StackArray<Annotation*> annotations(32);
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(480);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::SOBAKA) {
      setState(475);
      antlrcpp::downCast<ProgramContext *>(_localctx)->annotationContext = annotation();
       if (annotations.Full()) { throw IndexOutOfBoundsException("Maximum of 32 annotations reached"); } annotations.Append(std::move(antlrcpp::downCast<ProgramContext *>(_localctx)->annotationContext->annot)); 
      setState(482);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(483);
    match(GPULangParser::T__8);
     antlrcpp::downCast<ProgramContext *>(_localctx)->sym =  Alloc<Program>(); 
    setState(485);
    antlrcpp::downCast<ProgramContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     _localctx->sym->location = SetupFile(); 
    setState(487);
    match(GPULangParser::LB);
    setState(494);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1732271774273372174) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 7787) != 0)) {
      setState(488);
      antlrcpp::downCast<ProgramContext *>(_localctx)->assignment = expression(0);
       if (entries.Full()) throw IndexOutOfBoundsException("Maximum of 32 entries reached"); entries.Append(antlrcpp::downCast<ProgramContext *>(_localctx)->assignment->tree); 
      setState(490);
      match(GPULangParser::SC);
      setState(496);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(497);
    match(GPULangParser::RB);
     
            _localctx->sym->name = (antlrcpp::downCast<ProgramContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<ProgramContext *>(_localctx)->name->getText() : "");
            _localctx->sym->annotations = annotations;
            _localctx->sym->entries = entries;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SamplerContext ------------------------------------------------------------------

GPULangParser::SamplerContext::SamplerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::SamplerContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::SamplerContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::SamplerContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::SamplerContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::SamplerContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::SamplerContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::SamplerContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}

std::vector<GPULangParser::AnnotationContext *> GPULangParser::SamplerContext::annotation() {
  return getRuleContexts<GPULangParser::AnnotationContext>();
}

GPULangParser::AnnotationContext* GPULangParser::SamplerContext::annotation(size_t i) {
  return getRuleContext<GPULangParser::AnnotationContext>(i);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::SamplerContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::SamplerContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}


size_t GPULangParser::SamplerContext::getRuleIndex() const {
  return GPULangParser::RuleSampler;
}

void GPULangParser::SamplerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSampler(this);
}

void GPULangParser::SamplerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSampler(this);
}

GPULangParser::SamplerContext* GPULangParser::sampler() {
  SamplerContext *_localctx = _tracker.createInstance<SamplerContext>(_ctx, getState());
  enterRule(_localctx, 38, GPULangParser::RuleSampler);

          StackArray<Attribute*> attributes(32);
          StackArray<Annotation*> annotations(32);
          StackArray<Expression*> entries(32);
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(505);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::SOBAKA) {
      setState(500);
      antlrcpp::downCast<SamplerContext *>(_localctx)->annotationContext = annotation();
       if (annotations.Full()) throw IndexOutOfBoundsException("Maximum of 32 annotations reached"); annotations.Append(std::move(antlrcpp::downCast<SamplerContext *>(_localctx)->annotationContext->annot)); 
      setState(507);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(513);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::IDENTIFIER) {
      setState(508);
      antlrcpp::downCast<SamplerContext *>(_localctx)->attributeContext = attribute();
       if (attributes.Full()) throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); attributes.Append(std::move(antlrcpp::downCast<SamplerContext *>(_localctx)->attributeContext->attr)); 
      setState(515);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(516);
    match(GPULangParser::T__9);
     antlrcpp::downCast<SamplerContext *>(_localctx)->sym =  Alloc<SamplerState>(); _localctx->sym->isImmutable = true; 
    setState(519);
    antlrcpp::downCast<SamplerContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     _localctx->sym->location = SetupFile(); 
    setState(521);
    match(GPULangParser::LB);
    setState(528);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1732271774273372174) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 7787) != 0)) {
      setState(522);
      antlrcpp::downCast<SamplerContext *>(_localctx)->assign = expression(0);
       if (entries.Full()) throw IndexOutOfBoundsException("Maximum of 32 entries reached"); entries.Append(antlrcpp::downCast<SamplerContext *>(_localctx)->assign->tree); 
      setState(524);
      match(GPULangParser::SC);
      setState(530);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(531);
    match(GPULangParser::RB);

            _localctx->sym->name = (antlrcpp::downCast<SamplerContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<SamplerContext *>(_localctx)->name->getText() : "");
            _localctx->sym->attributes = attributes;
            _localctx->sym->annotations = annotations;
            _localctx->sym->entries = entries;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StateContext ------------------------------------------------------------------

GPULangParser::StateContext::StateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::StateContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::StateContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::StateContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::StateContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::StateContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::StateContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::StateContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::StateContext::getRuleIndex() const {
  return GPULangParser::RuleState;
}

void GPULangParser::StateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterState(this);
}

void GPULangParser::StateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitState(this);
}

GPULangParser::StateContext* GPULangParser::state() {
  StateContext *_localctx = _tracker.createInstance<StateContext>(_ctx, getState());
  enterRule(_localctx, 40, GPULangParser::RuleState);

          StackArray<Expression*> entries(32);
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(534);
    match(GPULangParser::T__10);
     antlrcpp::downCast<StateContext *>(_localctx)->sym =  Alloc<RenderState>(); 
    setState(537);
    antlrcpp::downCast<StateContext *>(_localctx)->name = match(GPULangParser::IDENTIFIER);
     _localctx->sym->location = SetupFile(); 
    setState(539);
    match(GPULangParser::LB);
    setState(546);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1732271774273372174) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 7787) != 0)) {
      setState(540);
      antlrcpp::downCast<StateContext *>(_localctx)->assign = expression(0);
       if (entries.Full()) throw IndexOutOfBoundsException("Maximum of 32 entries reached"); entries.Append(antlrcpp::downCast<StateContext *>(_localctx)->assign->tree); 
      setState(542);
      match(GPULangParser::SC);
      setState(548);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(549);
    match(GPULangParser::RB);

            _localctx->sym->name = (antlrcpp::downCast<StateContext *>(_localctx)->name != nullptr ? antlrcpp::downCast<StateContext *>(_localctx)->name->getText() : "");
            _localctx->sym->entries = entries;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

GPULangParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::IfStatementContext* GPULangParser::StatementContext::ifStatement() {
  return getRuleContext<GPULangParser::IfStatementContext>(0);
}

GPULangParser::ScopeStatementContext* GPULangParser::StatementContext::scopeStatement() {
  return getRuleContext<GPULangParser::ScopeStatementContext>(0);
}

GPULangParser::ForStatementContext* GPULangParser::StatementContext::forStatement() {
  return getRuleContext<GPULangParser::ForStatementContext>(0);
}

GPULangParser::WhileStatementContext* GPULangParser::StatementContext::whileStatement() {
  return getRuleContext<GPULangParser::WhileStatementContext>(0);
}

GPULangParser::SwitchStatementContext* GPULangParser::StatementContext::switchStatement() {
  return getRuleContext<GPULangParser::SwitchStatementContext>(0);
}

GPULangParser::TerminateStatementContext* GPULangParser::StatementContext::terminateStatement() {
  return getRuleContext<GPULangParser::TerminateStatementContext>(0);
}

GPULangParser::ContinueStatementContext* GPULangParser::StatementContext::continueStatement() {
  return getRuleContext<GPULangParser::ContinueStatementContext>(0);
}

GPULangParser::BreakStatementContext* GPULangParser::StatementContext::breakStatement() {
  return getRuleContext<GPULangParser::BreakStatementContext>(0);
}

GPULangParser::ExpressionStatementContext* GPULangParser::StatementContext::expressionStatement() {
  return getRuleContext<GPULangParser::ExpressionStatementContext>(0);
}

tree::TerminalNode* GPULangParser::StatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::StatementContext::getRuleIndex() const {
  return GPULangParser::RuleStatement;
}

void GPULangParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void GPULangParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

GPULangParser::StatementContext* GPULangParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 42, GPULangParser::RuleStatement);

          antlrcpp::downCast<StatementContext *>(_localctx)->tree =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(580);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__11: {
        enterOuterAlt(_localctx, 1);
        setState(552);
        antlrcpp::downCast<StatementContext *>(_localctx)->ifStatementContext = ifStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->ifStatementContext->tree; 
        break;
      }

      case GPULangParser::LB: {
        enterOuterAlt(_localctx, 2);
        setState(555);
        antlrcpp::downCast<StatementContext *>(_localctx)->scopeStatementContext = scopeStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->scopeStatementContext->tree; 
        break;
      }

      case GPULangParser::T__13: {
        enterOuterAlt(_localctx, 3);
        setState(558);
        antlrcpp::downCast<StatementContext *>(_localctx)->forStatementContext = forStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->forStatementContext->tree; 
        break;
      }

      case GPULangParser::T__16:
      case GPULangParser::T__17: {
        enterOuterAlt(_localctx, 4);
        setState(561);
        antlrcpp::downCast<StatementContext *>(_localctx)->whileStatementContext = whileStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->whileStatementContext->tree; 
        break;
      }

      case GPULangParser::T__23: {
        enterOuterAlt(_localctx, 5);
        setState(564);
        antlrcpp::downCast<StatementContext *>(_localctx)->switchStatementContext = switchStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->switchStatementContext->tree; 
        break;
      }

      case GPULangParser::T__18:
      case GPULangParser::T__19:
      case GPULangParser::T__20:
      case GPULangParser::T__21: {
        enterOuterAlt(_localctx, 6);
        setState(567);
        antlrcpp::downCast<StatementContext *>(_localctx)->terminateStatementContext = terminateStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->terminateStatementContext->tree; 
        break;
      }

      case GPULangParser::T__22: {
        enterOuterAlt(_localctx, 7);
        setState(570);
        antlrcpp::downCast<StatementContext *>(_localctx)->continueStatementContext = continueStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->continueStatementContext->tree; 
        break;
      }

      case GPULangParser::T__26: {
        enterOuterAlt(_localctx, 8);
        setState(573);
        antlrcpp::downCast<StatementContext *>(_localctx)->breakStatementContext = breakStatement();
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->breakStatementContext->tree; 
        break;
      }

      case GPULangParser::T__0:
      case GPULangParser::T__1:
      case GPULangParser::T__2:
      case GPULangParser::T__27:
      case GPULangParser::T__28:
      case GPULangParser::LP:
      case GPULangParser::LL:
      case GPULangParser::NOT:
      case GPULangParser::QO:
      case GPULangParser::CONJUGATE:
      case GPULangParser::Q:
      case GPULangParser::ADD_OP:
      case GPULangParser::SUB_OP:
      case GPULangParser::MUL_OP:
      case GPULangParser::INTEGERLITERAL:
      case GPULangParser::UINTEGERLITERAL:
      case GPULangParser::FLOATLITERAL:
      case GPULangParser::DOUBLELITERAL:
      case GPULangParser::HEX:
      case GPULangParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 9);
        setState(576);
        antlrcpp::downCast<StatementContext *>(_localctx)->expressionStatementContext = expressionStatement();
        setState(577);
        match(GPULangParser::SC);
         antlrcpp::downCast<StatementContext *>(_localctx)->tree =  antlrcpp::downCast<StatementContext *>(_localctx)->expressionStatementContext->tree; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

GPULangParser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::ExpressionListContext* GPULangParser::ExpressionStatementContext::expressionList() {
  return getRuleContext<GPULangParser::ExpressionListContext>(0);
}


size_t GPULangParser::ExpressionStatementContext::getRuleIndex() const {
  return GPULangParser::RuleExpressionStatement;
}

void GPULangParser::ExpressionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement(this);
}

void GPULangParser::ExpressionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement(this);
}

GPULangParser::ExpressionStatementContext* GPULangParser::expressionStatement() {
  ExpressionStatementContext *_localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
  enterRule(_localctx, 44, GPULangParser::RuleExpressionStatement);

          antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->tree =  nullptr;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(582);
    antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->expressionListContext = expressionList();

            antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->tree =  Alloc<ExpressionStatement>(antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->expressionListContext->expressions);
            _localctx->tree->location = antlrcpp::downCast<ExpressionStatementContext *>(_localctx)->expressionListContext->expressions[0]->location; 
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStatementContext ------------------------------------------------------------------

GPULangParser::IfStatementContext::IfStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::IfStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::IfStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::IfStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

std::vector<GPULangParser::StatementContext *> GPULangParser::IfStatementContext::statement() {
  return getRuleContexts<GPULangParser::StatementContext>();
}

GPULangParser::StatementContext* GPULangParser::IfStatementContext::statement(size_t i) {
  return getRuleContext<GPULangParser::StatementContext>(i);
}


size_t GPULangParser::IfStatementContext::getRuleIndex() const {
  return GPULangParser::RuleIfStatement;
}

void GPULangParser::IfStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfStatement(this);
}

void GPULangParser::IfStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfStatement(this);
}

GPULangParser::IfStatementContext* GPULangParser::ifStatement() {
  IfStatementContext *_localctx = _tracker.createInstance<IfStatementContext>(_ctx, getState());
  enterRule(_localctx, 46, GPULangParser::RuleIfStatement);

          antlrcpp::downCast<IfStatementContext *>(_localctx)->tree =  nullptr;
          Expression* condition = nullptr;
          Statement* ifBody = nullptr;
          Statement* elseBody = nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(585);
    match(GPULangParser::T__11);
     location = SetupFile(); 
    setState(587);
    match(GPULangParser::LP);
    setState(588);
    antlrcpp::downCast<IfStatementContext *>(_localctx)->condition = expression(0);
     condition = antlrcpp::downCast<IfStatementContext *>(_localctx)->condition->tree; 
    setState(590);
    match(GPULangParser::RP);
    setState(591);
    antlrcpp::downCast<IfStatementContext *>(_localctx)->ifBody = statement();
     ifBody = antlrcpp::downCast<IfStatementContext *>(_localctx)->ifBody->tree; 
    setState(597);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
    case 1: {
      setState(593);
      match(GPULangParser::T__12);
      setState(594);
      antlrcpp::downCast<IfStatementContext *>(_localctx)->elseBody = statement();
       elseBody = antlrcpp::downCast<IfStatementContext *>(_localctx)->elseBody->tree; 
      break;
    }

    default:
      break;
    }

            antlrcpp::downCast<IfStatementContext *>(_localctx)->tree =  Alloc<IfStatement>(condition, ifBody, elseBody);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementContext ------------------------------------------------------------------

GPULangParser::ForStatementContext::ForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ForStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::ForStatementContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::ForStatementContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

tree::TerminalNode* GPULangParser::ForStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::StatementContext* GPULangParser::ForStatementContext::statement() {
  return getRuleContext<GPULangParser::StatementContext>(0);
}

GPULangParser::VariablesContext* GPULangParser::ForStatementContext::variables() {
  return getRuleContext<GPULangParser::VariablesContext>(0);
}

std::vector<GPULangParser::AttributeContext *> GPULangParser::ForStatementContext::attribute() {
  return getRuleContexts<GPULangParser::AttributeContext>();
}

GPULangParser::AttributeContext* GPULangParser::ForStatementContext::attribute(size_t i) {
  return getRuleContext<GPULangParser::AttributeContext>(i);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::ForStatementContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::ForStatementContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}


size_t GPULangParser::ForStatementContext::getRuleIndex() const {
  return GPULangParser::RuleForStatement;
}

void GPULangParser::ForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatement(this);
}

void GPULangParser::ForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatement(this);
}

GPULangParser::ForStatementContext* GPULangParser::forStatement() {
  ForStatementContext *_localctx = _tracker.createInstance<ForStatementContext>(_ctx, getState());
  enterRule(_localctx, 48, GPULangParser::RuleForStatement);

          antlrcpp::downCast<ForStatementContext *>(_localctx)->tree =  nullptr;
          FixedArray<Variable*> declarations;
          Expression* conditionExpression = nullptr;
          Expression* loopExpression = nullptr;
          Statement* contents = nullptr;
          StackArray<Attribute*> attributes(32);
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(601);
    match(GPULangParser::T__13);
     location = SetupFile(); 
    setState(603);
    match(GPULangParser::LP);
    setState(607);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2 || _la == GPULangParser::SOBAKA

    || _la == GPULangParser::IDENTIFIER) {
      setState(604);
      antlrcpp::downCast<ForStatementContext *>(_localctx)->variablesContext = variables();
       declarations = antlrcpp::downCast<ForStatementContext *>(_localctx)->variablesContext->vars; 
    }
    setState(609);
    match(GPULangParser::SC);
    setState(613);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1732271774273372174) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 7787) != 0)) {
      setState(610);
      antlrcpp::downCast<ForStatementContext *>(_localctx)->condition = expression(0);
       conditionExpression = antlrcpp::downCast<ForStatementContext *>(_localctx)->condition->tree; 
    }
    setState(615);
    match(GPULangParser::SC);
    setState(619);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1732271774273372174) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 7787) != 0)) {
      setState(616);
      antlrcpp::downCast<ForStatementContext *>(_localctx)->loop = expression(0);
       loopExpression = antlrcpp::downCast<ForStatementContext *>(_localctx)->loop->tree; 
    }
    setState(621);
    match(GPULangParser::RP);
    setState(627);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(622);
        antlrcpp::downCast<ForStatementContext *>(_localctx)->attributeContext = attribute();
         if (attributes.Full()) { throw IndexOutOfBoundsException("Maximum of 32 attributes reached"); } attributes.Append(std::move(antlrcpp::downCast<ForStatementContext *>(_localctx)->attributeContext->attr));  
      }
      setState(629);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    }
    setState(630);
    antlrcpp::downCast<ForStatementContext *>(_localctx)->content = statement();
     contents = antlrcpp::downCast<ForStatementContext *>(_localctx)->content->tree; 

            antlrcpp::downCast<ForStatementContext *>(_localctx)->tree =  Alloc<ForStatement>(declarations, conditionExpression, loopExpression, contents);
            _localctx->tree->location = location;
            _localctx->tree->attributes = std::move(attributes);
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForRangeStatementContext ------------------------------------------------------------------

GPULangParser::ForRangeStatementContext::ForRangeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::ForRangeStatementContext::IDENTIFIER() {
  return getTokens(GPULangParser::IDENTIFIER);
}

tree::TerminalNode* GPULangParser::ForRangeStatementContext::IDENTIFIER(size_t i) {
  return getToken(GPULangParser::IDENTIFIER, i);
}

GPULangParser::StatementContext* GPULangParser::ForRangeStatementContext::statement() {
  return getRuleContext<GPULangParser::StatementContext>(0);
}


size_t GPULangParser::ForRangeStatementContext::getRuleIndex() const {
  return GPULangParser::RuleForRangeStatement;
}

void GPULangParser::ForRangeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForRangeStatement(this);
}

void GPULangParser::ForRangeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForRangeStatement(this);
}

GPULangParser::ForRangeStatementContext* GPULangParser::forRangeStatement() {
  ForRangeStatementContext *_localctx = _tracker.createInstance<ForRangeStatementContext>(_ctx, getState());
  enterRule(_localctx, 50, GPULangParser::RuleForRangeStatement);

          antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->tree =  nullptr;
          Statement* contents = nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(634);
    match(GPULangParser::T__13);
     location = SetupFile(); 
    setState(636);
    match(GPULangParser::LP);
    setState(637);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->iterator = match(GPULangParser::IDENTIFIER);
    setState(638);
    match(GPULangParser::COL);
    setState(639);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->start = match(GPULangParser::IDENTIFIER);
    setState(640);
    match(GPULangParser::T__14);
    setState(641);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->end = match(GPULangParser::IDENTIFIER);
    setState(642);
    match(GPULangParser::RP);
    setState(643);
    antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->content = statement();
     contents = antlrcpp::downCast<ForRangeStatementContext *>(_localctx)->content->tree; 


        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForUniformValueStatementContext ------------------------------------------------------------------

GPULangParser::ForUniformValueStatementContext::ForUniformValueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ForUniformValueStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::ForUniformValueStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

tree::TerminalNode* GPULangParser::ForUniformValueStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::StatementContext* GPULangParser::ForUniformValueStatementContext::statement() {
  return getRuleContext<GPULangParser::StatementContext>(0);
}


size_t GPULangParser::ForUniformValueStatementContext::getRuleIndex() const {
  return GPULangParser::RuleForUniformValueStatement;
}

void GPULangParser::ForUniformValueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForUniformValueStatement(this);
}

void GPULangParser::ForUniformValueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForUniformValueStatement(this);
}

GPULangParser::ForUniformValueStatementContext* GPULangParser::forUniformValueStatement() {
  ForUniformValueStatementContext *_localctx = _tracker.createInstance<ForUniformValueStatementContext>(_ctx, getState());
  enterRule(_localctx, 52, GPULangParser::RuleForUniformValueStatement);

          antlrcpp::downCast<ForUniformValueStatementContext *>(_localctx)->tree =  nullptr;
          Statement* contents = nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(647);
    match(GPULangParser::T__15);
     location = SetupFile(); 
    setState(649);
    match(GPULangParser::LP);
    setState(650);
    expression(0);
    setState(651);
    match(GPULangParser::RP);
    setState(652);
    antlrcpp::downCast<ForUniformValueStatementContext *>(_localctx)->content = statement();
     contents = antlrcpp::downCast<ForUniformValueStatementContext *>(_localctx)->content->tree; 

        
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementContext ------------------------------------------------------------------

GPULangParser::WhileStatementContext::WhileStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::WhileStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::WhileStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::WhileStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

GPULangParser::StatementContext* GPULangParser::WhileStatementContext::statement() {
  return getRuleContext<GPULangParser::StatementContext>(0);
}

tree::TerminalNode* GPULangParser::WhileStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::WhileStatementContext::getRuleIndex() const {
  return GPULangParser::RuleWhileStatement;
}

void GPULangParser::WhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatement(this);
}

void GPULangParser::WhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatement(this);
}

GPULangParser::WhileStatementContext* GPULangParser::whileStatement() {
  WhileStatementContext *_localctx = _tracker.createInstance<WhileStatementContext>(_ctx, getState());
  enterRule(_localctx, 54, GPULangParser::RuleWhileStatement);

          antlrcpp::downCast<WhileStatementContext *>(_localctx)->tree =  nullptr;
          Expression* conditionExpression = nullptr;
          Statement* contents = nullptr;
          bool isDoWhile = false;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(678);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__16: {
        enterOuterAlt(_localctx, 1);
        setState(656);
        match(GPULangParser::T__16);
         location = SetupFile(); 
        setState(658);
        match(GPULangParser::LP);
        setState(659);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition = expression(0);
         conditionExpression = antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition->tree; 
        setState(661);
        match(GPULangParser::RP);
        setState(662);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->content = statement();
         contents = antlrcpp::downCast<WhileStatementContext *>(_localctx)->content->tree; 

                antlrcpp::downCast<WhileStatementContext *>(_localctx)->tree =  Alloc<WhileStatement>(conditionExpression, contents, isDoWhile);
                _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__17: {
        enterOuterAlt(_localctx, 2);
        setState(666);
        match(GPULangParser::T__17);
         location = SetupFile(); 
        setState(668);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->content = statement();
         contents = antlrcpp::downCast<WhileStatementContext *>(_localctx)->content->tree; isDoWhile = true; 
        setState(670);
        match(GPULangParser::T__16);
        setState(671);
        match(GPULangParser::LP);
        setState(672);
        antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition = expression(0);
         conditionExpression = antlrcpp::downCast<WhileStatementContext *>(_localctx)->condition->tree; 
        setState(674);
        match(GPULangParser::RP);
        setState(675);
        match(GPULangParser::SC);

                antlrcpp::downCast<WhileStatementContext *>(_localctx)->tree =  Alloc<WhileStatement>(conditionExpression, contents, isDoWhile);
                _localctx->tree->location = location;
            
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScopeStatementContext ------------------------------------------------------------------

GPULangParser::ScopeStatementContext::ScopeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ScopeStatementContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::ScopeStatementContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<GPULangParser::VariablesContext *> GPULangParser::ScopeStatementContext::variables() {
  return getRuleContexts<GPULangParser::VariablesContext>();
}

GPULangParser::VariablesContext* GPULangParser::ScopeStatementContext::variables(size_t i) {
  return getRuleContext<GPULangParser::VariablesContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::ScopeStatementContext::SC() {
  return getTokens(GPULangParser::SC);
}

tree::TerminalNode* GPULangParser::ScopeStatementContext::SC(size_t i) {
  return getToken(GPULangParser::SC, i);
}

std::vector<GPULangParser::StatementContext *> GPULangParser::ScopeStatementContext::statement() {
  return getRuleContexts<GPULangParser::StatementContext>();
}

GPULangParser::StatementContext* GPULangParser::ScopeStatementContext::statement(size_t i) {
  return getRuleContext<GPULangParser::StatementContext>(i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::ScopeStatementContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::ScopeStatementContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}


size_t GPULangParser::ScopeStatementContext::getRuleIndex() const {
  return GPULangParser::RuleScopeStatement;
}

void GPULangParser::ScopeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScopeStatement(this);
}

void GPULangParser::ScopeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScopeStatement(this);
}

GPULangParser::ScopeStatementContext* GPULangParser::scopeStatement() {
  ScopeStatementContext *_localctx = _tracker.createInstance<ScopeStatementContext>(_ctx, getState());
  enterRule(_localctx, 56, GPULangParser::RuleScopeStatement);

          antlrcpp::downCast<ScopeStatementContext *>(_localctx)->tree =  nullptr;
          PinnedArray<Symbol*> contents(0xFFFFFF);
  	    std::vector<Expression*> unfinished;
          Symbol::Location location;
          Symbol::Location ends;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(680);
    match(GPULangParser::LB);
     location = SetupFile(); 
    setState(692);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1732289366627078158) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 15575) != 0)) {
      setState(690);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
      case 1: {
        setState(682);
        antlrcpp::downCast<ScopeStatementContext *>(_localctx)->variablesContext = variables();
        setState(683);
        match(GPULangParser::SC);
         for(Variable* var : antlrcpp::downCast<ScopeStatementContext *>(_localctx)->variablesContext->vars) { contents.Append(var); } 
        break;
      }

      case 2: {
        setState(686);
        antlrcpp::downCast<ScopeStatementContext *>(_localctx)->statementContext = statement();
         contents.Append(antlrcpp::downCast<ScopeStatementContext *>(_localctx)->statementContext->tree); 
        break;
      }

      case 3: {
        setState(689);
        linePreprocessorEntry();
        break;
      }

      default:
        break;
      }
      setState(694);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(695);
    match(GPULangParser::RB);
     ends = SetupFile(); 

            antlrcpp::downCast<ScopeStatementContext *>(_localctx)->tree =  Alloc<ScopeStatement>(std::move(contents), unfinished);
            _localctx->tree->ends = ends;
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TerminateStatementContext ------------------------------------------------------------------

GPULangParser::TerminateStatementContext::TerminateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::TerminateStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}

GPULangParser::ExpressionContext* GPULangParser::TerminateStatementContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}


size_t GPULangParser::TerminateStatementContext::getRuleIndex() const {
  return GPULangParser::RuleTerminateStatement;
}

void GPULangParser::TerminateStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerminateStatement(this);
}

void GPULangParser::TerminateStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerminateStatement(this);
}

GPULangParser::TerminateStatementContext* GPULangParser::terminateStatement() {
  TerminateStatementContext *_localctx = _tracker.createInstance<TerminateStatementContext>(_ctx, getState());
  enterRule(_localctx, 58, GPULangParser::RuleTerminateStatement);

          antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  nullptr;
          Expression* returnValue = nullptr;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(720);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__18: {
        enterOuterAlt(_localctx, 1);
        setState(699);
        match(GPULangParser::T__18);
         location = SetupFile(); 
        setState(704);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 1732271774273372174) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 74)) & 7787) != 0)) {
          setState(701);
          antlrcpp::downCast<TerminateStatementContext *>(_localctx)->value = expression(0);
           returnValue = antlrcpp::downCast<TerminateStatementContext *>(_localctx)->value->tree; 
        }
        setState(706);
        match(GPULangParser::SC);

                antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::Return);
                _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__19: {
        enterOuterAlt(_localctx, 2);
        setState(708);
        match(GPULangParser::T__19);
         location = SetupFile(); 
        setState(710);
        match(GPULangParser::SC);

              antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::Discard);
              _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__20: {
        enterOuterAlt(_localctx, 3);
        setState(712);
        match(GPULangParser::T__20);
         location = SetupFile(); 
        setState(714);
        match(GPULangParser::SC);

              antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::RayIgnoreIntersection);
              _localctx->tree->location = location;
            
        break;
      }

      case GPULangParser::T__21: {
        enterOuterAlt(_localctx, 4);
        setState(716);
        match(GPULangParser::T__21);
         location = SetupFile(); 
        setState(718);
        match(GPULangParser::SC);

              antlrcpp::downCast<TerminateStatementContext *>(_localctx)->tree =  Alloc<TerminateStatement>(returnValue, TerminateStatement::TerminationType::RayTerminate);
              _localctx->tree->location = location;
            
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContinueStatementContext ------------------------------------------------------------------

GPULangParser::ContinueStatementContext::ContinueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ContinueStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::ContinueStatementContext::getRuleIndex() const {
  return GPULangParser::RuleContinueStatement;
}

void GPULangParser::ContinueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinueStatement(this);
}

void GPULangParser::ContinueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinueStatement(this);
}

GPULangParser::ContinueStatementContext* GPULangParser::continueStatement() {
  ContinueStatementContext *_localctx = _tracker.createInstance<ContinueStatementContext>(_ctx, getState());
  enterRule(_localctx, 60, GPULangParser::RuleContinueStatement);

          antlrcpp::downCast<ContinueStatementContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(722);
    match(GPULangParser::T__22);
     location = SetupFile(); 
    setState(724);
    match(GPULangParser::SC);

            antlrcpp::downCast<ContinueStatementContext *>(_localctx)->tree =  Alloc<ContinueStatement>();
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStatementContext ------------------------------------------------------------------

GPULangParser::SwitchStatementContext::SwitchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::SwitchStatementContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::SwitchStatementContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::SwitchStatementContext::COL() {
  return getTokens(GPULangParser::COL);
}

tree::TerminalNode* GPULangParser::SwitchStatementContext::COL(size_t i) {
  return getToken(GPULangParser::COL, i);
}

std::vector<GPULangParser::StatementContext *> GPULangParser::SwitchStatementContext::statement() {
  return getRuleContexts<GPULangParser::StatementContext>();
}

GPULangParser::StatementContext* GPULangParser::SwitchStatementContext::statement(size_t i) {
  return getRuleContext<GPULangParser::StatementContext>(i);
}


size_t GPULangParser::SwitchStatementContext::getRuleIndex() const {
  return GPULangParser::RuleSwitchStatement;
}

void GPULangParser::SwitchStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchStatement(this);
}

void GPULangParser::SwitchStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchStatement(this);
}

GPULangParser::SwitchStatementContext* GPULangParser::switchStatement() {
  SwitchStatementContext *_localctx = _tracker.createInstance<SwitchStatementContext>(_ctx, getState());
  enterRule(_localctx, 62, GPULangParser::RuleSwitchStatement);

          antlrcpp::downCast<SwitchStatementContext *>(_localctx)->tree =  nullptr;
          Expression* switchExpression;
          StackArray<Expression*> caseExpressions(256);
          StackArray<Statement*> caseStatements(256);
          Symbol::Location location;
          Statement* defaultStatement = nullptr;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(727);
    match(GPULangParser::T__23);
     location = SetupFile(); 
    setState(729);
    match(GPULangParser::LP);
    setState(730);
    antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext = expression(0);
    setState(731);
    match(GPULangParser::RP);
     switchExpression = antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext->tree; 
    setState(733);
    match(GPULangParser::LB);
    setState(745);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__24) {
      setState(734);
      match(GPULangParser::T__24);
      setState(735);
      antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext = expression(0);
      setState(736);
      match(GPULangParser::COL);
       if (caseExpressions.Full()) { throw IndexOutOfBoundsException("Maximum of 256 case expressions reached"); } caseExpressions.Append(antlrcpp::downCast<SwitchStatementContext *>(_localctx)->expressionContext->tree); caseStatements.Append(nullptr); 
      setState(741);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1732289366627078158) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 7787) != 0)) {
        setState(738);
        antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext = statement();
         
                            caseStatements.back() = antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext->tree;
                        
      }
      setState(747);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(755);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__25) {
      setState(748);
      match(GPULangParser::T__25);
      setState(749);
      match(GPULangParser::COL);
      setState(753);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1732289366627078158) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 7787) != 0)) {
        setState(750);
        antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext = statement();

                            defaultStatement = antlrcpp::downCast<SwitchStatementContext *>(_localctx)->statementContext->tree;
                        
      }
    }
    setState(757);
    match(GPULangParser::RB);

            antlrcpp::downCast<SwitchStatementContext *>(_localctx)->tree =  Alloc<SwitchStatement>(switchExpression, std::move(caseExpressions), std::move(caseStatements), defaultStatement);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BreakStatementContext ------------------------------------------------------------------

GPULangParser::BreakStatementContext::BreakStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::BreakStatementContext::SC() {
  return getToken(GPULangParser::SC, 0);
}


size_t GPULangParser::BreakStatementContext::getRuleIndex() const {
  return GPULangParser::RuleBreakStatement;
}

void GPULangParser::BreakStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreakStatement(this);
}

void GPULangParser::BreakStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreakStatement(this);
}

GPULangParser::BreakStatementContext* GPULangParser::breakStatement() {
  BreakStatementContext *_localctx = _tracker.createInstance<BreakStatementContext>(_ctx, getState());
  enterRule(_localctx, 64, GPULangParser::RuleBreakStatement);

          antlrcpp::downCast<BreakStatementContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(760);
    match(GPULangParser::T__26);
     location = SetupFile(); 
    setState(762);
    match(GPULangParser::SC);

            antlrcpp::downCast<BreakStatementContext *>(_localctx)->tree =  Alloc<BreakStatement>();
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionListContext ------------------------------------------------------------------

GPULangParser::ExpressionListContext::ExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::ExpressionListContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::ExpressionListContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}

std::vector<GPULangParser::LinePreprocessorEntryContext *> GPULangParser::ExpressionListContext::linePreprocessorEntry() {
  return getRuleContexts<GPULangParser::LinePreprocessorEntryContext>();
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::ExpressionListContext::linePreprocessorEntry(size_t i) {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(i);
}

std::vector<tree::TerminalNode *> GPULangParser::ExpressionListContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::ExpressionListContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::ExpressionListContext::getRuleIndex() const {
  return GPULangParser::RuleExpressionList;
}

void GPULangParser::ExpressionListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionList(this);
}

void GPULangParser::ExpressionListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionList(this);
}

GPULangParser::ExpressionListContext* GPULangParser::expressionList() {
  ExpressionListContext *_localctx = _tracker.createInstance<ExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 66, GPULangParser::RuleExpressionList);

          StackArray<Expression*> list(256);
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(766);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
    case 1: {
      setState(765);
      linePreprocessorEntry();
      break;
    }

    default:
      break;
    }
    setState(768);
    antlrcpp::downCast<ExpressionListContext *>(_localctx)->e1 = expression(0);
     list.Append(antlrcpp::downCast<ExpressionListContext *>(_localctx)->e1->tree); 
    setState(777);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GPULangParser::T__2

    || _la == GPULangParser::CO) {
      setState(775);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case GPULangParser::CO: {
          setState(770);
          match(GPULangParser::CO);
          setState(771);
          antlrcpp::downCast<ExpressionListContext *>(_localctx)->e2 = expression(0);

                  list.Append(antlrcpp::downCast<ExpressionListContext *>(_localctx)->e2->tree);
              
          break;
        }

        case GPULangParser::T__2: {
          setState(774);
          linePreprocessorEntry();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(779);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }

            antlrcpp::downCast<ExpressionListContext *>(_localctx)->expressions =  std::move(list);
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

GPULangParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GPULangParser::ExpressionContext *> GPULangParser::ExpressionContext::expression() {
  return getRuleContexts<GPULangParser::ExpressionContext>();
}

GPULangParser::ExpressionContext* GPULangParser::ExpressionContext::expression(size_t i) {
  return getRuleContext<GPULangParser::ExpressionContext>(i);
}

tree::TerminalNode* GPULangParser::ExpressionContext::SUB_OP() {
  return getToken(GPULangParser::SUB_OP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::ADD_OP() {
  return getToken(GPULangParser::ADD_OP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::NOT() {
  return getToken(GPULangParser::NOT, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::CONJUGATE() {
  return getToken(GPULangParser::CONJUGATE, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::MUL_OP() {
  return getToken(GPULangParser::MUL_OP, 0);
}

GPULangParser::BinaryexpatomContext* GPULangParser::ExpressionContext::binaryexpatom() {
  return getRuleContext<GPULangParser::BinaryexpatomContext>(0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::DOT() {
  return getToken(GPULangParser::DOT, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::ARROW() {
  return getToken(GPULangParser::ARROW, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::DIV_OP() {
  return getToken(GPULangParser::DIV_OP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::MOD() {
  return getToken(GPULangParser::MOD, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LESSEQ() {
  return getToken(GPULangParser::LESSEQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::GREATEREQ() {
  return getToken(GPULangParser::GREATEREQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LOGICEQ() {
  return getToken(GPULangParser::LOGICEQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::NOTEQ() {
  return getToken(GPULangParser::NOTEQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::AND() {
  return getToken(GPULangParser::AND, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::XOR() {
  return getToken(GPULangParser::XOR, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::OR() {
  return getToken(GPULangParser::OR, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LOGICAND() {
  return getToken(GPULangParser::LOGICAND, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LOGICOR() {
  return getToken(GPULangParser::LOGICOR, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::QU() {
  return getToken(GPULangParser::QU, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::COL() {
  return getToken(GPULangParser::COL, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::ANDSET() {
  return getToken(GPULangParser::ANDSET, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::XORSET() {
  return getToken(GPULangParser::XORSET, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::ORSET() {
  return getToken(GPULangParser::ORSET, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::EQ() {
  return getToken(GPULangParser::EQ, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

GPULangParser::ExpressionListContext* GPULangParser::ExpressionContext::expressionList() {
  return getRuleContext<GPULangParser::ExpressionListContext>(0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::LL() {
  return getToken(GPULangParser::LL, 0);
}

tree::TerminalNode* GPULangParser::ExpressionContext::RR() {
  return getToken(GPULangParser::RR, 0);
}


size_t GPULangParser::ExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleExpression;
}

void GPULangParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void GPULangParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}


GPULangParser::ExpressionContext* GPULangParser::expression() {
   return expression(0);
}

GPULangParser::ExpressionContext* GPULangParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GPULangParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  GPULangParser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 68;
  enterRecursionRule(_localctx, 68, GPULangParser::RuleExpression, precedence);


            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  nullptr;
            Symbol::Location location;
            FixedArray<Expression*> args;
        
    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(790);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GPULangParser::T__27:
      case GPULangParser::T__28:
      case GPULangParser::NOT:
      case GPULangParser::CONJUGATE:
      case GPULangParser::ADD_OP:
      case GPULangParser::SUB_OP:
      case GPULangParser::MUL_OP: {
        setState(783);
        antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
        _la = _input->LA(1);
        if (!(((((_la - 28) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 28)) & 774058335535107) != 0))) {
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(784);
        antlrcpp::downCast<ExpressionContext *>(_localctx)->p = expression(14);

                antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  Alloc<UnaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), true, antlrcpp::downCast<ExpressionContext *>(_localctx)->p->tree);
                _localctx->tree->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->p->tree->location;
            
        break;
      }

      case GPULangParser::T__0:
      case GPULangParser::T__1:
      case GPULangParser::T__2:
      case GPULangParser::LP:
      case GPULangParser::LL:
      case GPULangParser::QO:
      case GPULangParser::Q:
      case GPULangParser::INTEGERLITERAL:
      case GPULangParser::UINTEGERLITERAL:
      case GPULangParser::FLOATLITERAL:
      case GPULangParser::DOUBLELITERAL:
      case GPULangParser::HEX:
      case GPULangParser::IDENTIFIER: {
        setState(787);
        antlrcpp::downCast<ExpressionContext *>(_localctx)->atom = binaryexpatom();
         antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->atom->tree; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(918);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(916);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(792);

          if (!(precpred(_ctx, 17))) throw FailedPredicateException(this, "precpred(_ctx, 17)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(794);
          match(GPULangParser::DOT);
           location = SetupFile(); 
          setState(796);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(18);

                            AccessExpression* expr = Alloc<AccessExpression>(_localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree, false);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(799);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(801);
          match(GPULangParser::ARROW);
           location = SetupFile(); 
          setState(803);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(17);

                            AccessExpression* expr = Alloc<AccessExpression>(_localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree, true);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(806);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(808);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 71) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 71)) & 97) != 0))) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(810);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(14);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(813);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(815);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GPULangParser::ADD_OP

          || _la == GPULangParser::SUB_OP)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(817);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(13);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(820);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(822);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GPULangParser::T__29

          || _la == GPULangParser::T__30)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(824);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(12);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(827);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(829);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 63) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 63)) & 15) != 0))) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(831);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(11);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 7: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(834);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(836);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GPULangParser::LOGICEQ

          || _la == GPULangParser::NOTEQ)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(838);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(10);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 8: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(841);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(843);
          match(GPULangParser::AND);
           location = SetupFile(); 
          setState(845);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(9);

                            BinaryExpression* expr = Alloc<BinaryExpression>('&', _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 9: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(848);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(850);
          match(GPULangParser::XOR);
           location = SetupFile(); 
          setState(852);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(8);

                            BinaryExpression* expr = Alloc<BinaryExpression>('^', _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 10: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(855);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(857);
          match(GPULangParser::OR);
           location = SetupFile(); 
          setState(859);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(7);

                            BinaryExpression* expr = Alloc<BinaryExpression>('|', _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 11: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(862);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(864);
          match(GPULangParser::LOGICAND);
           location = SetupFile(); 
          setState(866);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(6);

                            BinaryExpression* expr = Alloc<BinaryExpression>('&&', _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 12: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(869);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(871);
          match(GPULangParser::LOGICOR);
           location = SetupFile(); 
          setState(873);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(5);

                            BinaryExpression* expr = Alloc<BinaryExpression>('||', _localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 13: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(876);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(877);
          match(GPULangParser::QU);
           location = SetupFile(); 
          setState(879);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->ifBody = expression(0);
          setState(880);
          match(GPULangParser::COL);
          setState(881);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->elseBody = expression(3);
           
                            TernaryExpression* expr = Alloc<TernaryExpression>(antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->ifBody->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->elseBody->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 14: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(884);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(886);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 379428814066810880) != 0))) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 
          setState(888);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->e2 = expression(2);

                            BinaryExpression* expr = Alloc<BinaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e2->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 15: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(891);

          if (!(precpred(_ctx, 19))) throw FailedPredicateException(this, "precpred(_ctx, 19)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(893);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GPULangParser::T__27

          || _la == GPULangParser::T__28)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
           location = SetupFile(); 

                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  Alloc<UnaryExpression>(StringToFourCC((antlrcpp::downCast<ExpressionContext *>(_localctx)->op != nullptr ? antlrcpp::downCast<ExpressionContext *>(_localctx)->op->getText() : "")), false, _localctx->tree);
                            _localctx->tree->location = location;
                        
          break;
        }

        case 16: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(896);

          if (!(precpred(_ctx, 18))) throw FailedPredicateException(this, "precpred(_ctx, 18)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(898);
          match(GPULangParser::LP);
           location = SetupFile(); 
          setState(903);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 1732271774273372174) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 74)) & 7787) != 0)) {
            setState(900);
            antlrcpp::downCast<ExpressionContext *>(_localctx)->list = expressionList();
             args = std::move(antlrcpp::downCast<ExpressionContext *>(_localctx)->list->expressions); 
          }
          setState(905);
          match(GPULangParser::RP);
                   
                            CallExpression* expr = Alloc<CallExpression>(_localctx->tree, std::move(args));
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        case 17: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          _localctx->e1 = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(907);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
           antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree; 
          setState(909);
          match(GPULangParser::LL);
           location = SetupFile(); 
          setState(912);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 1732271774273372174) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 74)) & 7787) != 0)) {
            setState(911);
            antlrcpp::downCast<ExpressionContext *>(_localctx)->e3 = expression(0);
          }
          setState(914);
          match(GPULangParser::RR);

                            ArrayIndexExpression* expr = Alloc<ArrayIndexExpression>(_localctx->tree, antlrcpp::downCast<ExpressionContext *>(_localctx)->e3->tree);
                            expr->location = antlrcpp::downCast<ExpressionContext *>(_localctx)->e1->tree->location;
                            antlrcpp::downCast<ExpressionContext *>(_localctx)->tree =  expr;
                        
          break;
        }

        default:
          break;
        } 
      }
      setState(920);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BinaryexpatomContext ------------------------------------------------------------------

GPULangParser::BinaryexpatomContext::BinaryexpatomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GPULangParser::InitializerExpressionContext* GPULangParser::BinaryexpatomContext::initializerExpression() {
  return getRuleContext<GPULangParser::InitializerExpressionContext>(0);
}

GPULangParser::ArrayInitializerExpressionContext* GPULangParser::BinaryexpatomContext::arrayInitializerExpression() {
  return getRuleContext<GPULangParser::ArrayInitializerExpressionContext>(0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::LP() {
  return getToken(GPULangParser::LP, 0);
}

GPULangParser::ExpressionContext* GPULangParser::BinaryexpatomContext::expression() {
  return getRuleContext<GPULangParser::ExpressionContext>(0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::RP() {
  return getToken(GPULangParser::RP, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::INTEGERLITERAL() {
  return getToken(GPULangParser::INTEGERLITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::UINTEGERLITERAL() {
  return getToken(GPULangParser::UINTEGERLITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::FLOATLITERAL() {
  return getToken(GPULangParser::FLOATLITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::DOUBLELITERAL() {
  return getToken(GPULangParser::DOUBLELITERAL, 0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::HEX() {
  return getToken(GPULangParser::HEX, 0);
}

GPULangParser::StringContext* GPULangParser::BinaryexpatomContext::string() {
  return getRuleContext<GPULangParser::StringContext>(0);
}

tree::TerminalNode* GPULangParser::BinaryexpatomContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::BooleanContext* GPULangParser::BinaryexpatomContext::boolean() {
  return getRuleContext<GPULangParser::BooleanContext>(0);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::BinaryexpatomContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}


size_t GPULangParser::BinaryexpatomContext::getRuleIndex() const {
  return GPULangParser::RuleBinaryexpatom;
}

void GPULangParser::BinaryexpatomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinaryexpatom(this);
}

void GPULangParser::BinaryexpatomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinaryexpatom(this);
}

GPULangParser::BinaryexpatomContext* GPULangParser::binaryexpatom() {
  BinaryexpatomContext *_localctx = _tracker.createInstance<BinaryexpatomContext>(_ctx, getState());
  enterRule(_localctx, 70, GPULangParser::RuleBinaryexpatom);

          antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  nullptr;
          Symbol::Location begin = BeginLocationRange();
      

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(951);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(921);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->initializerExpressionContext = initializerExpression();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->initializerExpressionContext->tree; 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(924);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->arrayInitializerExpressionContext = arrayInitializerExpression();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->arrayInitializerExpressionContext->tree; 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(927);
      match(GPULangParser::LP);
      setState(928);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->expressionContext = expression(0);
      setState(929);
      match(GPULangParser::RP);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->expressionContext->tree; 
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(932);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->integerliteralToken = match(GPULangParser::INTEGERLITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<IntExpression>(atoi((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->integerliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->integerliteralToken->getText() : "").c_str())); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(934);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->uintegerliteralToken = match(GPULangParser::UINTEGERLITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<UIntExpression>(strtoul((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->uintegerliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->uintegerliteralToken->getText() : "").c_str(), nullptr, 10)); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(936);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->floatliteralToken = match(GPULangParser::FLOATLITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<FloatExpression>(atof((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->floatliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->floatliteralToken->getText() : "").c_str())); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(938);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->doubleliteralToken = match(GPULangParser::DOUBLELITERAL);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<FloatExpression>(atof((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->doubleliteralToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->doubleliteralToken->getText() : "").c_str())); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(940);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->hexToken = match(GPULangParser::HEX);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<UIntExpression>(strtoul((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->hexToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->hexToken->getText() : "").c_str(), nullptr, 16)); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(942);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->stringContext = string();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<StringExpression>(antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->stringContext->val); _localctx->tree->location = EndLocationRange(begin); 
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(945);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->identifierToken = match(GPULangParser::IDENTIFIER);
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<SymbolExpression>(FixedString((antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->identifierToken != nullptr ? antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->identifierToken->getText() : ""))); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(947);
      antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->booleanContext = boolean();
       antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->tree =  Alloc<BoolExpression>(antlrcpp::downCast<BinaryexpatomContext *>(_localctx)->booleanContext->val); _localctx->tree->location = SetupFile(); 
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(950);
      linePreprocessorEntry();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerExpressionContext ------------------------------------------------------------------

GPULangParser::InitializerExpressionContext::InitializerExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::InitializerExpressionContext::LB() {
  return getToken(GPULangParser::LB, 0);
}

tree::TerminalNode* GPULangParser::InitializerExpressionContext::RB() {
  return getToken(GPULangParser::RB, 0);
}

tree::TerminalNode* GPULangParser::InitializerExpressionContext::IDENTIFIER() {
  return getToken(GPULangParser::IDENTIFIER, 0);
}

GPULangParser::ExpressionListContext* GPULangParser::InitializerExpressionContext::expressionList() {
  return getRuleContext<GPULangParser::ExpressionListContext>(0);
}


size_t GPULangParser::InitializerExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleInitializerExpression;
}

void GPULangParser::InitializerExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializerExpression(this);
}

void GPULangParser::InitializerExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializerExpression(this);
}

GPULangParser::InitializerExpressionContext* GPULangParser::initializerExpression() {
  InitializerExpressionContext *_localctx = _tracker.createInstance<InitializerExpressionContext>(_ctx, getState());
  enterRule(_localctx, 72, GPULangParser::RuleInitializerExpression);

          antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->tree =  nullptr;
          std::string type = "";
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(953);
    antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->type = match(GPULangParser::IDENTIFIER);
     type = (antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->type != nullptr ? antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->type->getText() : ""); 
    setState(955);
    match(GPULangParser::LB);
     location = SetupFile(); 
    setState(958);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1732271774273372174) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 7787) != 0)) {
      setState(957);
      antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->list = expressionList();
    }
    setState(960);
    match(GPULangParser::RB);

            antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->tree =  Alloc<InitializerExpression>(antlrcpp::downCast<InitializerExpressionContext *>(_localctx)->list->expressions, type);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayInitializerExpressionContext ------------------------------------------------------------------

GPULangParser::ArrayInitializerExpressionContext::ArrayInitializerExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::ArrayInitializerExpressionContext::LL() {
  return getToken(GPULangParser::LL, 0);
}

tree::TerminalNode* GPULangParser::ArrayInitializerExpressionContext::RR() {
  return getToken(GPULangParser::RR, 0);
}

GPULangParser::ExpressionListContext* GPULangParser::ArrayInitializerExpressionContext::expressionList() {
  return getRuleContext<GPULangParser::ExpressionListContext>(0);
}


size_t GPULangParser::ArrayInitializerExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleArrayInitializerExpression;
}

void GPULangParser::ArrayInitializerExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayInitializerExpression(this);
}

void GPULangParser::ArrayInitializerExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayInitializerExpression(this);
}

GPULangParser::ArrayInitializerExpressionContext* GPULangParser::arrayInitializerExpression() {
  ArrayInitializerExpressionContext *_localctx = _tracker.createInstance<ArrayInitializerExpressionContext>(_ctx, getState());
  enterRule(_localctx, 74, GPULangParser::RuleArrayInitializerExpression);

          antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->tree =  nullptr;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(963);
    match(GPULangParser::LL);
     location = SetupFile(); 
    setState(966);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1732271774273372174) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 7787) != 0)) {
      setState(965);
      antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->list = expressionList();
    }
    setState(968);
    match(GPULangParser::RR);

            antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->tree =  Alloc<ArrayInitializerExpression>(antlrcpp::downCast<ArrayInitializerExpressionContext *>(_localctx)->list->expressions);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatVecLiteralExpressionContext ------------------------------------------------------------------

GPULangParser::FloatVecLiteralExpressionContext::FloatVecLiteralExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::FloatVecLiteralExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::FloatVecLiteralExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::FloatVecLiteralExpressionContext::FLOATLITERAL() {
  return getTokens(GPULangParser::FLOATLITERAL);
}

tree::TerminalNode* GPULangParser::FloatVecLiteralExpressionContext::FLOATLITERAL(size_t i) {
  return getToken(GPULangParser::FLOATLITERAL, i);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::FloatVecLiteralExpressionContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::FloatVecLiteralExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::FloatVecLiteralExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::FloatVecLiteralExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleFloatVecLiteralExpression;
}

void GPULangParser::FloatVecLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFloatVecLiteralExpression(this);
}

void GPULangParser::FloatVecLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFloatVecLiteralExpression(this);
}

GPULangParser::FloatVecLiteralExpressionContext* GPULangParser::floatVecLiteralExpression() {
  FloatVecLiteralExpressionContext *_localctx = _tracker.createInstance<FloatVecLiteralExpressionContext>(_ctx, getState());
  enterRule(_localctx, 76, GPULangParser::RuleFloatVecLiteralExpression);

          antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->tree =  nullptr;
          std::vector<float> values;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(971);
    match(GPULangParser::LESS);
     location = SetupFile(); 

    setState(973);
    antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->arg0 = match(GPULangParser::FLOATLITERAL);
     values.push_back(atof((antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->arg0 != nullptr ? antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->arg0->getText() : "").c_str())); 
    setState(977);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2) {
      setState(976);
      linePreprocessorEntry();
    }
    setState(982); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(979);
      match(GPULangParser::CO);
      setState(980);
      antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->argN = match(GPULangParser::FLOATLITERAL);
       values.push_back(atof((antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->argN != nullptr ? antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->argN->getText() : "").c_str())); 
      setState(984); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GPULangParser::CO);
    setState(986);
    match(GPULangParser::GREATER);

            antlrcpp::downCast<FloatVecLiteralExpressionContext *>(_localctx)->tree =  Alloc<FloatVecExpression>(values);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoubleVecLiteralExpressionContext ------------------------------------------------------------------

GPULangParser::DoubleVecLiteralExpressionContext::DoubleVecLiteralExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::DoubleVecLiteralExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::DoubleVecLiteralExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::DoubleVecLiteralExpressionContext::DOUBLELITERAL() {
  return getTokens(GPULangParser::DOUBLELITERAL);
}

tree::TerminalNode* GPULangParser::DoubleVecLiteralExpressionContext::DOUBLELITERAL(size_t i) {
  return getToken(GPULangParser::DOUBLELITERAL, i);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::DoubleVecLiteralExpressionContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::DoubleVecLiteralExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::DoubleVecLiteralExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::DoubleVecLiteralExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleDoubleVecLiteralExpression;
}

void GPULangParser::DoubleVecLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoubleVecLiteralExpression(this);
}

void GPULangParser::DoubleVecLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoubleVecLiteralExpression(this);
}

GPULangParser::DoubleVecLiteralExpressionContext* GPULangParser::doubleVecLiteralExpression() {
  DoubleVecLiteralExpressionContext *_localctx = _tracker.createInstance<DoubleVecLiteralExpressionContext>(_ctx, getState());
  enterRule(_localctx, 78, GPULangParser::RuleDoubleVecLiteralExpression);

          antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->tree =  nullptr;
          std::vector<float> values;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(989);
    match(GPULangParser::LESS);
     location = SetupFile(); 

    setState(991);
    antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->arg0 = match(GPULangParser::DOUBLELITERAL);
     values.push_back(atof((antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->arg0 != nullptr ? antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->arg0->getText() : "").c_str())); 
    setState(995);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2) {
      setState(994);
      linePreprocessorEntry();
    }
    setState(1000); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(997);
      match(GPULangParser::CO);
      setState(998);
      antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->argN = match(GPULangParser::DOUBLELITERAL);
       values.push_back(atof((antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->argN != nullptr ? antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->argN->getText() : "").c_str())); 
      setState(1002); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GPULangParser::CO);
    setState(1004);
    match(GPULangParser::GREATER);

            antlrcpp::downCast<DoubleVecLiteralExpressionContext *>(_localctx)->tree =  Alloc<FloatVecExpression>(values);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntVecLiteralExpressionContext ------------------------------------------------------------------

GPULangParser::IntVecLiteralExpressionContext::IntVecLiteralExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::IntVecLiteralExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::IntVecLiteralExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::IntVecLiteralExpressionContext::INTEGERLITERAL() {
  return getTokens(GPULangParser::INTEGERLITERAL);
}

tree::TerminalNode* GPULangParser::IntVecLiteralExpressionContext::INTEGERLITERAL(size_t i) {
  return getToken(GPULangParser::INTEGERLITERAL, i);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::IntVecLiteralExpressionContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::IntVecLiteralExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::IntVecLiteralExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::IntVecLiteralExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleIntVecLiteralExpression;
}

void GPULangParser::IntVecLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntVecLiteralExpression(this);
}

void GPULangParser::IntVecLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntVecLiteralExpression(this);
}

GPULangParser::IntVecLiteralExpressionContext* GPULangParser::intVecLiteralExpression() {
  IntVecLiteralExpressionContext *_localctx = _tracker.createInstance<IntVecLiteralExpressionContext>(_ctx, getState());
  enterRule(_localctx, 80, GPULangParser::RuleIntVecLiteralExpression);

          antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->tree =  nullptr;
          std::vector<int> values;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1007);
    match(GPULangParser::LESS);
     location = SetupFile(); 

    setState(1009);
    antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->arg0 = match(GPULangParser::INTEGERLITERAL);
     values.push_back(atof((antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->arg0 != nullptr ? antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->arg0->getText() : "").c_str())); 
    setState(1013);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2) {
      setState(1012);
      linePreprocessorEntry();
    }
    setState(1018); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1015);
      match(GPULangParser::CO);
      setState(1016);
      antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->argN = match(GPULangParser::INTEGERLITERAL);
       values.push_back(atof((antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->argN != nullptr ? antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->argN->getText() : "").c_str())); 
      setState(1020); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GPULangParser::CO);
    setState(1022);
    match(GPULangParser::GREATER);

            antlrcpp::downCast<IntVecLiteralExpressionContext *>(_localctx)->tree =  Alloc<IntVecExpression>(values);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UintVecLiteralExpressionContext ------------------------------------------------------------------

GPULangParser::UintVecLiteralExpressionContext::UintVecLiteralExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::UintVecLiteralExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::UintVecLiteralExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<tree::TerminalNode *> GPULangParser::UintVecLiteralExpressionContext::UINTEGERLITERAL() {
  return getTokens(GPULangParser::UINTEGERLITERAL);
}

tree::TerminalNode* GPULangParser::UintVecLiteralExpressionContext::UINTEGERLITERAL(size_t i) {
  return getToken(GPULangParser::UINTEGERLITERAL, i);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::UintVecLiteralExpressionContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::UintVecLiteralExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::UintVecLiteralExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::UintVecLiteralExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleUintVecLiteralExpression;
}

void GPULangParser::UintVecLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUintVecLiteralExpression(this);
}

void GPULangParser::UintVecLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUintVecLiteralExpression(this);
}

GPULangParser::UintVecLiteralExpressionContext* GPULangParser::uintVecLiteralExpression() {
  UintVecLiteralExpressionContext *_localctx = _tracker.createInstance<UintVecLiteralExpressionContext>(_ctx, getState());
  enterRule(_localctx, 82, GPULangParser::RuleUintVecLiteralExpression);

          antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->tree =  nullptr;
          std::vector<unsigned int> values;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1025);
    match(GPULangParser::LESS);
     location = SetupFile(); 

    setState(1027);
    antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->arg0 = match(GPULangParser::UINTEGERLITERAL);
     values.push_back(atof((antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->arg0 != nullptr ? antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->arg0->getText() : "").c_str())); 
    setState(1031);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2) {
      setState(1030);
      linePreprocessorEntry();
    }
    setState(1036); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1033);
      match(GPULangParser::CO);
      setState(1034);
      antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->argN = match(GPULangParser::UINTEGERLITERAL);
       values.push_back(atof((antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->argN != nullptr ? antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->argN->getText() : "").c_str())); 
      setState(1038); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GPULangParser::CO);
    setState(1040);
    match(GPULangParser::GREATER);

            antlrcpp::downCast<UintVecLiteralExpressionContext *>(_localctx)->tree =  Alloc<UIntVecExpression>(values);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanVecLiteralExpressionContext ------------------------------------------------------------------

GPULangParser::BooleanVecLiteralExpressionContext::BooleanVecLiteralExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GPULangParser::BooleanVecLiteralExpressionContext::LESS() {
  return getToken(GPULangParser::LESS, 0);
}

tree::TerminalNode* GPULangParser::BooleanVecLiteralExpressionContext::GREATER() {
  return getToken(GPULangParser::GREATER, 0);
}

std::vector<GPULangParser::BooleanContext *> GPULangParser::BooleanVecLiteralExpressionContext::boolean() {
  return getRuleContexts<GPULangParser::BooleanContext>();
}

GPULangParser::BooleanContext* GPULangParser::BooleanVecLiteralExpressionContext::boolean(size_t i) {
  return getRuleContext<GPULangParser::BooleanContext>(i);
}

GPULangParser::LinePreprocessorEntryContext* GPULangParser::BooleanVecLiteralExpressionContext::linePreprocessorEntry() {
  return getRuleContext<GPULangParser::LinePreprocessorEntryContext>(0);
}

std::vector<tree::TerminalNode *> GPULangParser::BooleanVecLiteralExpressionContext::CO() {
  return getTokens(GPULangParser::CO);
}

tree::TerminalNode* GPULangParser::BooleanVecLiteralExpressionContext::CO(size_t i) {
  return getToken(GPULangParser::CO, i);
}


size_t GPULangParser::BooleanVecLiteralExpressionContext::getRuleIndex() const {
  return GPULangParser::RuleBooleanVecLiteralExpression;
}

void GPULangParser::BooleanVecLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBooleanVecLiteralExpression(this);
}

void GPULangParser::BooleanVecLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<GPULangListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBooleanVecLiteralExpression(this);
}

GPULangParser::BooleanVecLiteralExpressionContext* GPULangParser::booleanVecLiteralExpression() {
  BooleanVecLiteralExpressionContext *_localctx = _tracker.createInstance<BooleanVecLiteralExpressionContext>(_ctx, getState());
  enterRule(_localctx, 84, GPULangParser::RuleBooleanVecLiteralExpression);

          antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->tree =  nullptr;
          std::vector<bool> values;
          Symbol::Location location;
      
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1043);
    match(GPULangParser::LESS);
     location = SetupFile(); 

    setState(1045);
    antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->arg0 = boolean();
     values.push_back(atof((antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->arg0 != nullptr ? _input->getText(antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->arg0->start, antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->arg0->stop) : nullptr).c_str())); 
    setState(1049);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GPULangParser::T__2) {
      setState(1048);
      linePreprocessorEntry();
    }
    setState(1055); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1051);
      match(GPULangParser::CO);
      setState(1052);
      antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->argN = boolean();
       values.push_back(atof((antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->argN != nullptr ? _input->getText(antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->argN->start, antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->argN->stop) : nullptr).c_str())); 
      setState(1057); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GPULangParser::CO);
    setState(1059);
    match(GPULangParser::GREATER);

            antlrcpp::downCast<BooleanVecLiteralExpressionContext *>(_localctx)->tree =  Alloc<BoolVecExpression>(values);
            _localctx->tree->location = location;
        
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool GPULangParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 34: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool GPULangParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 17);
    case 1: return precpred(_ctx, 16);
    case 2: return precpred(_ctx, 13);
    case 3: return precpred(_ctx, 12);
    case 4: return precpred(_ctx, 11);
    case 5: return precpred(_ctx, 10);
    case 6: return precpred(_ctx, 9);
    case 7: return precpred(_ctx, 8);
    case 8: return precpred(_ctx, 7);
    case 9: return precpred(_ctx, 6);
    case 10: return precpred(_ctx, 5);
    case 11: return precpred(_ctx, 4);
    case 12: return precpred(_ctx, 3);
    case 13: return precpred(_ctx, 2);
    case 14: return precpred(_ctx, 19);
    case 15: return precpred(_ctx, 18);
    case 16: return precpred(_ctx, 15);

  default:
    break;
  }
  return true;
}

void GPULangParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  gpulangParserInitialize();
#else
  ::antlr4::internal::call_once(gpulangParserOnceFlag, gpulangParserInitialize);
#endif
}
