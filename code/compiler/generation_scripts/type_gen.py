
import os


os.makedirs('../generated', exist_ok=True)
open_file = open('../generated/swizzle.h', 'w')
open_file.write("//-------------------------------------------------\n")
open_file.write("// *** Generated by type_gen.py. ***\n")
open_file.write("// DO NOT MODIFY!!!\n")
open_file.write("//-------------------------------------------------\n\n")

def generate_swizzle_four():
    components = ['x', 'y', 'z', 'w']
    open_file.write("#define SWIZZLE4()\\\n")
    for x in components:
        open_file.write(f"X(" + x + ")\\\n")
        for y in components:
            open_file.write(f"X(" + x + y + ")\\\n")
            for z in components:
                open_file.write(f"X(" + x + y + z + ")\\\n")
                for w in components:
                    open_file.write(f"X(" + x + y + z + w + ")\\\n")
    components = ['r', 'g', 'b', 'a']
    for x in components:
        open_file.write(f"X(" + x + ")\\\n")
        for y in components:
            open_file.write(f"X(" + x + y + ")\\\n")
            for z in components:
                open_file.write(f"X(" + x + y + z + ")\\\n")
                for w in components:
                    open_file.write(f"X(" + x + y + z + w + ")\\\n")
    open_file.write("\n")

def generate_swizzle_three():
    components = ['x', 'y', 'z']

    open_file.write("#define SWIZZLE3()\\\n")
    for x in components:
        open_file.write(f"X(" + x + ")\\\n")
        for y in components:
            open_file.write(f"X(" + x + y + ")\\\n")
            for z in components:
                open_file.write(f"X(" + x + y + z + ")\\\n")
    components = ['r', 'g', 'b']
    for x in components:
        open_file.write(f"X(" + x + ")\\\n")
        for y in components:
            open_file.write(f"X(" + x + y + ")\\\n")
            for z in components:
                open_file.write(f"X(" + x + y + z + ")\\\n")
    open_file.write("\n")

def generate_swizzle_two():
    components = ['x', 'y']
    open_file.write("#define SWIZZLE2()\\\n")
    for x in components:
        open_file.write(f"X(" + x + ")\\\n")
        for y in components:
            open_file.write(f"X(" + x + y + ")\\\n")
    components = ['r', 'g']
    for x in components:
        open_file.write(f"X(" + x + ")\\\n")
        for y in components:
            open_file.write(f"X(" + x + y + ")\\\n")
    open_file.write("\n")

def generate_vec_constructors():
    types = ["Float", "UInt", "Int"]
    data_types = ["f32", "u32", "i32"]
    for type, data_type in zip(types, data_types):
        open_file.write('#define DECL_{}3_ctors()\\\n'.format(type))
        open_file.write('extern Function {}3_ctor_{}_{}_{}\\\n'.format(type, type, type, type))
        open_file.write('extern Function {}3_ctor_{}2_{}\\\n'.format(type, type, type))
        open_file.write('extern Function {}3_ctor_{}_{}2\n'.format(type, type, type))
        open_file.write("\n")

        open_file.write('#define DEF_{}3_ctors()\\\n'.format(type))
        open_file.write('Function {}3_ctor_{}_{}_{}\\\n'.format(type, type, type, type))
        open_file.write('Function {}3_ctor_{}2_{}\\\n'.format(type, type, type))
        open_file.write('Function {}3_ctor_{}_{}2\n'.format(type, type, type))
        open_file.write("\n")

        open_file.write('#define {}3_ctor_list()\\\n'.format(type))
        open_file.write('std::pair{{"{}x3", &{}3_ctor_{}_{}_{}}}\\\n'.format(data_type, type, type, type, type))
        open_file.write('std::pair{{"{}x3", &{}3_ctor_{}2_{}}}\\\n'.format(data_type, type, type, type))
        open_file.write('std::pair{{"{}x3", &{}3_ctor_{}_{}2}}\n'.format(data_type, type, type, type))
        open_file.write("\n")

    for type, data_type in zip(types, data_types):
        open_file.write('#define DECL_{}4_ctors()\\\n'.format(type))
        for type2 in types:
            open_file.write('extern Function {}4_convert_{}4\\\n'.format(type, type2))
        for type2 in types:
            open_file.write('extern Function {}4_splat_{}\\\n'.format(type, type2))
        open_file.write('extern Function {}4_ctor_{}_{}_{}_{}\\\n'.format(type, type, type, type, type))
        open_file.write('extern Function {}4_ctor_{}2_{}_{}\\\n'.format(type, type, type, type))
        open_file.write('extern Function {}4_ctor_{}_{}2_{}\\\n'.format(type, type, type, type))
        open_file.write('extern Function {}4_ctor_{}_{}_{}2\\\n'.format(type, type, type, type))
        open_file.write('extern Function {}4_ctor_{}2_{}2\\\n'.format(type, type, type))
        open_file.write('extern Function {}4_ctor_{}3_{}\\\n'.format(type, type, type))
        open_file.write('extern Function {}4_ctor_{}_{}3\n'.format(type, type, type))
        open_file.write("\n")

        open_file.write('#define DEF_{}4_ctors()\\\n'.format(type))
        for type2 in types:
            open_file.write('Function {}4_convert_{}4\\\n'.format(type, type2))
        for type2 in types:
            open_file.write('Function {}4_splat_{}\\\n'.format(type, type2))
        open_file.write('Function {}4_ctor_{}_{}_{}_{}\\\n'.format(type, type, type, type, type))
        open_file.write('Function {}4_ctor_{}2_{}_{}\\\n'.format(type, type, type, type))
        open_file.write('Function {}4_ctor_{}_{}2_{}\\\n'.format(type, type, type, type))
        open_file.write('Function {}4_ctor_{}_{}_{}2\\\n'.format(type, type, type, type))
        open_file.write('Function {}4_ctor_{}2_{}2\\\n'.format(type, type, type))
        open_file.write('Function {}4_ctor_{}3_{}\\\n'.format(type, type, type))
        open_file.write('Function {}4_ctor_{}_{}3\n'.format(type, type, type))
        open_file.write("\n")

        open_file.write('#define {}4_ctor_list()\\\n'.format(type))
        for type2 in types:
            open_file.write('Function {}4_convert_{}4\\\n'.format(type, type2))
        for type2 in types:
            open_file.write('std::pair{{"{}x4", &{}4_convert_{}}}\\\n'.format(data_type, type, type2))
        open_file.write('std::pair{{"{}x4", &{}4_ctor_{}_{}_{}_{}}}\\\n'.format(data_type, type, type, type, type, type))
        open_file.write('std::pair{{"{}x4", &{}4_ctor_{}2_{}_{}}}\\\n'.format(data_type, type, type, type, type))
        open_file.write('std::pair{{"{}x4", &{}4_ctor_{}_{}2_{}}}\\\n'.format(data_type, type, type, type, type))
        open_file.write('std::pair{{"{}x4", &{}4_ctor_{}_{}_{}2}}\\\n'.format(data_type, type, type, type, type))
        open_file.write('std::pair{{"{}x4", &{}4_ctor_{}2_{}2}}\\\n'.format(data_type, type, type, type))
        open_file.write('std::pair{{"{}x4", &{}4_ctor_{}3_{}}}\\\n'.format(data_type, type, type, type))
        open_file.write('std::pair{{"{}x4", &{}4_ctor_{}_{}3}}\n'.format(data_type, type, type, type))
        open_file.write("\n")



generate_swizzle_four()
generate_swizzle_three()
generate_swizzle_two()
generate_vec_constructors()

open_file.close()
print("Swizzle definitions generated in swizzle.h")