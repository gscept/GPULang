//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// textureAtomicStore with Texture2D, Int32x2, Int16
Variable TextureAtomicStore_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicStore_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture2D_Int16_coordinate;
Variable TextureAtomicStore_Texture2D_Int16_value;
Function TextureAtomicStore_Texture2D_Int16;
inline constexpr std::array TextureAtomicStore_Texture2D_Int16_args = { &TextureAtomicStore_Texture2D_Int16_texture, &TextureAtomicStore_Texture2D_Int16_coordinate, &TextureAtomicStore_Texture2D_Int16_value };

/// textureAtomicStore with Texture3D, Int32x3, Float32
Variable TextureAtomicStore_Texture3D_Float32_texture;
inline constexpr std::array TextureAtomicStore_Texture3D_Float32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture3D_Float32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture3D_Float32_coordinate;
Variable TextureAtomicStore_Texture3D_Float32_value;
Function TextureAtomicStore_Texture3D_Float32;
inline constexpr std::array TextureAtomicStore_Texture3D_Float32_args = { &TextureAtomicStore_Texture3D_Float32_texture, &TextureAtomicStore_Texture3D_Float32_coordinate, &TextureAtomicStore_Texture3D_Float32_value };

/// textureAtomicStore with Texture3D, Int32x3, UInt32
Variable TextureAtomicStore_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicStore_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture3D_UInt32_coordinate;
Variable TextureAtomicStore_Texture3D_UInt32_value;
Function TextureAtomicStore_Texture3D_UInt32;
inline constexpr std::array TextureAtomicStore_Texture3D_UInt32_args = { &TextureAtomicStore_Texture3D_UInt32_texture, &TextureAtomicStore_Texture3D_UInt32_coordinate, &TextureAtomicStore_Texture3D_UInt32_value };

/// textureAtomicStore with Texture3D, Int32x3, Int32
Variable TextureAtomicStore_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicStore_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture3D_Int32_coordinate;
Variable TextureAtomicStore_Texture3D_Int32_value;
Function TextureAtomicStore_Texture3D_Int32;
inline constexpr std::array TextureAtomicStore_Texture3D_Int32_args = { &TextureAtomicStore_Texture3D_Int32_texture, &TextureAtomicStore_Texture3D_Int32_coordinate, &TextureAtomicStore_Texture3D_Int32_value };

/// textureAtomicStore with Texture3D, Int32x3, Float16
Variable TextureAtomicStore_Texture3D_Float16_texture;
inline constexpr std::array TextureAtomicStore_Texture3D_Float16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture3D_Float16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture3D_Float16_coordinate;
Variable TextureAtomicStore_Texture3D_Float16_value;
Function TextureAtomicStore_Texture3D_Float16;
inline constexpr std::array TextureAtomicStore_Texture3D_Float16_args = { &TextureAtomicStore_Texture3D_Float16_texture, &TextureAtomicStore_Texture3D_Float16_coordinate, &TextureAtomicStore_Texture3D_Float16_value };

/// textureAtomicStore with Texture3D, Int32x3, UInt16
Variable TextureAtomicStore_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicStore_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture3D_UInt16_coordinate;
Variable TextureAtomicStore_Texture3D_UInt16_value;
Function TextureAtomicStore_Texture3D_UInt16;
inline constexpr std::array TextureAtomicStore_Texture3D_UInt16_args = { &TextureAtomicStore_Texture3D_UInt16_texture, &TextureAtomicStore_Texture3D_UInt16_coordinate, &TextureAtomicStore_Texture3D_UInt16_value };

/// textureAtomicStore with Texture3D, Int32x3, Int16
Variable TextureAtomicStore_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicStore_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture3D_Int16_coordinate;
Variable TextureAtomicStore_Texture3D_Int16_value;
Function TextureAtomicStore_Texture3D_Int16;
inline constexpr std::array TextureAtomicStore_Texture3D_Int16_args = { &TextureAtomicStore_Texture3D_Int16_texture, &TextureAtomicStore_Texture3D_Int16_coordinate, &TextureAtomicStore_Texture3D_Int16_value };

/// textureAtomicStore with TextureCube, Int32x3, Float32
Variable TextureAtomicStore_TextureCube_Float32_texture;
inline constexpr std::array TextureAtomicStore_TextureCube_Float32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_TextureCube_Float32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_TextureCube_Float32_coordinate;
Variable TextureAtomicStore_TextureCube_Float32_value;
Function TextureAtomicStore_TextureCube_Float32;
inline constexpr std::array TextureAtomicStore_TextureCube_Float32_args = { &TextureAtomicStore_TextureCube_Float32_texture, &TextureAtomicStore_TextureCube_Float32_coordinate, &TextureAtomicStore_TextureCube_Float32_value };

/// textureAtomicStore with TextureCube, Int32x3, UInt32
Variable TextureAtomicStore_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicStore_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_TextureCube_UInt32_coordinate;
Variable TextureAtomicStore_TextureCube_UInt32_value;
Function TextureAtomicStore_TextureCube_UInt32;
inline constexpr std::array TextureAtomicStore_TextureCube_UInt32_args = { &TextureAtomicStore_TextureCube_UInt32_texture, &TextureAtomicStore_TextureCube_UInt32_coordinate, &TextureAtomicStore_TextureCube_UInt32_value };

/// textureAtomicStore with TextureCube, Int32x3, Int32
Variable TextureAtomicStore_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicStore_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_TextureCube_Int32_coordinate;
Variable TextureAtomicStore_TextureCube_Int32_value;
Function TextureAtomicStore_TextureCube_Int32;
inline constexpr std::array TextureAtomicStore_TextureCube_Int32_args = { &TextureAtomicStore_TextureCube_Int32_texture, &TextureAtomicStore_TextureCube_Int32_coordinate, &TextureAtomicStore_TextureCube_Int32_value };

/// textureAtomicStore with TextureCube, Int32x3, Float16
Variable TextureAtomicStore_TextureCube_Float16_texture;
inline constexpr std::array TextureAtomicStore_TextureCube_Float16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_TextureCube_Float16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_TextureCube_Float16_coordinate;
Variable TextureAtomicStore_TextureCube_Float16_value;
Function TextureAtomicStore_TextureCube_Float16;
inline constexpr std::array TextureAtomicStore_TextureCube_Float16_args = { &TextureAtomicStore_TextureCube_Float16_texture, &TextureAtomicStore_TextureCube_Float16_coordinate, &TextureAtomicStore_TextureCube_Float16_value };

/// textureAtomicStore with TextureCube, Int32x3, UInt16
Variable TextureAtomicStore_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicStore_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_TextureCube_UInt16_coordinate;
Variable TextureAtomicStore_TextureCube_UInt16_value;
Function TextureAtomicStore_TextureCube_UInt16;
inline constexpr std::array TextureAtomicStore_TextureCube_UInt16_args = { &TextureAtomicStore_TextureCube_UInt16_texture, &TextureAtomicStore_TextureCube_UInt16_coordinate, &TextureAtomicStore_TextureCube_UInt16_value };

/// textureAtomicStore with TextureCube, Int32x3, Int16
Variable TextureAtomicStore_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicStore_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_TextureCube_Int16_coordinate;
Variable TextureAtomicStore_TextureCube_Int16_value;
Function TextureAtomicStore_TextureCube_Int16;
inline constexpr std::array TextureAtomicStore_TextureCube_Int16_args = { &TextureAtomicStore_TextureCube_Int16_texture, &TextureAtomicStore_TextureCube_Int16_coordinate, &TextureAtomicStore_TextureCube_Int16_value };

/// textureAtomicStore with Texture1DArray, Int32x2, Float32
Variable TextureAtomicStore_Texture1DArray_Float32_texture;
inline constexpr std::array TextureAtomicStore_Texture1DArray_Float32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture1DArray_Float32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture1DArray_Float32_coordinate;
Variable TextureAtomicStore_Texture1DArray_Float32_value;
Function TextureAtomicStore_Texture1DArray_Float32;
inline constexpr std::array TextureAtomicStore_Texture1DArray_Float32_args = { &TextureAtomicStore_Texture1DArray_Float32_texture, &TextureAtomicStore_Texture1DArray_Float32_coordinate, &TextureAtomicStore_Texture1DArray_Float32_value };

/// textureAtomicStore with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicStore_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicStore_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicStore_Texture1DArray_UInt32_value;
Function TextureAtomicStore_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicStore_Texture1DArray_UInt32_args = { &TextureAtomicStore_Texture1DArray_UInt32_texture, &TextureAtomicStore_Texture1DArray_UInt32_coordinate, &TextureAtomicStore_Texture1DArray_UInt32_value };

/// textureAtomicStore with Texture1DArray, Int32x2, Int32
Variable TextureAtomicStore_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicStore_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture1DArray_Int32_coordinate;
Variable TextureAtomicStore_Texture1DArray_Int32_value;
Function TextureAtomicStore_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicStore_Texture1DArray_Int32_args = { &TextureAtomicStore_Texture1DArray_Int32_texture, &TextureAtomicStore_Texture1DArray_Int32_coordinate, &TextureAtomicStore_Texture1DArray_Int32_value };

/// textureAtomicStore with Texture1DArray, Int32x2, Float16
Variable TextureAtomicStore_Texture1DArray_Float16_texture;
inline constexpr std::array TextureAtomicStore_Texture1DArray_Float16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture1DArray_Float16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture1DArray_Float16_coordinate;
Variable TextureAtomicStore_Texture1DArray_Float16_value;
Function TextureAtomicStore_Texture1DArray_Float16;
inline constexpr std::array TextureAtomicStore_Texture1DArray_Float16_args = { &TextureAtomicStore_Texture1DArray_Float16_texture, &TextureAtomicStore_Texture1DArray_Float16_coordinate, &TextureAtomicStore_Texture1DArray_Float16_value };

/// textureAtomicStore with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicStore_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicStore_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicStore_Texture1DArray_UInt16_value;
Function TextureAtomicStore_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicStore_Texture1DArray_UInt16_args = { &TextureAtomicStore_Texture1DArray_UInt16_texture, &TextureAtomicStore_Texture1DArray_UInt16_coordinate, &TextureAtomicStore_Texture1DArray_UInt16_value };

/// textureAtomicStore with Texture1DArray, Int32x2, Int16
Variable TextureAtomicStore_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicStore_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture1DArray_Int16_coordinate;
Variable TextureAtomicStore_Texture1DArray_Int16_value;
Function TextureAtomicStore_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicStore_Texture1DArray_Int16_args = { &TextureAtomicStore_Texture1DArray_Int16_texture, &TextureAtomicStore_Texture1DArray_Int16_coordinate, &TextureAtomicStore_Texture1DArray_Int16_value };

/// textureAtomicStore with Texture2DArray, Int32x3, Float32
Variable TextureAtomicStore_Texture2DArray_Float32_texture;
inline constexpr std::array TextureAtomicStore_Texture2DArray_Float32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture2DArray_Float32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture2DArray_Float32_coordinate;
Variable TextureAtomicStore_Texture2DArray_Float32_value;
Function TextureAtomicStore_Texture2DArray_Float32;
inline constexpr std::array TextureAtomicStore_Texture2DArray_Float32_args = { &TextureAtomicStore_Texture2DArray_Float32_texture, &TextureAtomicStore_Texture2DArray_Float32_coordinate, &TextureAtomicStore_Texture2DArray_Float32_value };

/// textureAtomicStore with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicStore_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicStore_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicStore_Texture2DArray_UInt32_value;
Function TextureAtomicStore_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicStore_Texture2DArray_UInt32_args = { &TextureAtomicStore_Texture2DArray_UInt32_texture, &TextureAtomicStore_Texture2DArray_UInt32_coordinate, &TextureAtomicStore_Texture2DArray_UInt32_value };

/// textureAtomicStore with Texture2DArray, Int32x3, Int32
Variable TextureAtomicStore_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicStore_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture2DArray_Int32_coordinate;
Variable TextureAtomicStore_Texture2DArray_Int32_value;
Function TextureAtomicStore_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicStore_Texture2DArray_Int32_args = { &TextureAtomicStore_Texture2DArray_Int32_texture, &TextureAtomicStore_Texture2DArray_Int32_coordinate, &TextureAtomicStore_Texture2DArray_Int32_value };

/// textureAtomicStore with Texture2DArray, Int32x3, Float16
Variable TextureAtomicStore_Texture2DArray_Float16_texture;
inline constexpr std::array TextureAtomicStore_Texture2DArray_Float16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture2DArray_Float16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture2DArray_Float16_coordinate;
Variable TextureAtomicStore_Texture2DArray_Float16_value;
Function TextureAtomicStore_Texture2DArray_Float16;
inline constexpr std::array TextureAtomicStore_Texture2DArray_Float16_args = { &TextureAtomicStore_Texture2DArray_Float16_texture, &TextureAtomicStore_Texture2DArray_Float16_coordinate, &TextureAtomicStore_Texture2DArray_Float16_value };

/// textureAtomicStore with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicStore_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicStore_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicStore_Texture2DArray_UInt16_value;
Function TextureAtomicStore_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicStore_Texture2DArray_UInt16_args = { &TextureAtomicStore_Texture2DArray_UInt16_texture, &TextureAtomicStore_Texture2DArray_UInt16_coordinate, &TextureAtomicStore_Texture2DArray_UInt16_value };

/// textureAtomicStore with Texture2DArray, Int32x3, Int16
Variable TextureAtomicStore_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicStore_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_Texture2DArray_Int16_coordinate;
Variable TextureAtomicStore_Texture2DArray_Int16_value;
Function TextureAtomicStore_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicStore_Texture2DArray_Int16_args = { &TextureAtomicStore_Texture2DArray_Int16_texture, &TextureAtomicStore_Texture2DArray_Int16_coordinate, &TextureAtomicStore_Texture2DArray_Int16_value };

/// textureAtomicStore with TextureCubeArray, Int32x4, Float32
Variable TextureAtomicStore_TextureCubeArray_Float32_texture;
inline constexpr std::array TextureAtomicStore_TextureCubeArray_Float32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_TextureCubeArray_Float32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_TextureCubeArray_Float32_coordinate;
Variable TextureAtomicStore_TextureCubeArray_Float32_value;
Function TextureAtomicStore_TextureCubeArray_Float32;
inline constexpr std::array TextureAtomicStore_TextureCubeArray_Float32_args = { &TextureAtomicStore_TextureCubeArray_Float32_texture, &TextureAtomicStore_TextureCubeArray_Float32_coordinate, &TextureAtomicStore_TextureCubeArray_Float32_value };

/// textureAtomicStore with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicStore_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicStore_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicStore_TextureCubeArray_UInt32_value;
Function TextureAtomicStore_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicStore_TextureCubeArray_UInt32_args = { &TextureAtomicStore_TextureCubeArray_UInt32_texture, &TextureAtomicStore_TextureCubeArray_UInt32_coordinate, &TextureAtomicStore_TextureCubeArray_UInt32_value };

/// textureAtomicStore with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicStore_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicStore_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicStore_TextureCubeArray_Int32_value;
Function TextureAtomicStore_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicStore_TextureCubeArray_Int32_args = { &TextureAtomicStore_TextureCubeArray_Int32_texture, &TextureAtomicStore_TextureCubeArray_Int32_coordinate, &TextureAtomicStore_TextureCubeArray_Int32_value };

/// textureAtomicStore with TextureCubeArray, Int32x4, Float16
Variable TextureAtomicStore_TextureCubeArray_Float16_texture;
inline constexpr std::array TextureAtomicStore_TextureCubeArray_Float16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_TextureCubeArray_Float16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_TextureCubeArray_Float16_coordinate;
Variable TextureAtomicStore_TextureCubeArray_Float16_value;
Function TextureAtomicStore_TextureCubeArray_Float16;
inline constexpr std::array TextureAtomicStore_TextureCubeArray_Float16_args = { &TextureAtomicStore_TextureCubeArray_Float16_texture, &TextureAtomicStore_TextureCubeArray_Float16_coordinate, &TextureAtomicStore_TextureCubeArray_Float16_value };

/// textureAtomicStore with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicStore_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicStore_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicStore_TextureCubeArray_UInt16_value;
Function TextureAtomicStore_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicStore_TextureCubeArray_UInt16_args = { &TextureAtomicStore_TextureCubeArray_UInt16_texture, &TextureAtomicStore_TextureCubeArray_UInt16_coordinate, &TextureAtomicStore_TextureCubeArray_UInt16_value };

/// textureAtomicStore with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicStore_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicStore_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicStore_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicStore_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicStore_TextureCubeArray_Int16_value;
Function TextureAtomicStore_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicStore_TextureCubeArray_Int16_args = { &TextureAtomicStore_TextureCubeArray_Int16_texture, &TextureAtomicStore_TextureCubeArray_Int16_coordinate, &TextureAtomicStore_TextureCubeArray_Int16_value };

/// textureAtomicExchange with Texture1D, Int32, Float32
Variable TextureAtomicExchange_Texture1D_Float32_texture;
inline constexpr std::array TextureAtomicExchange_Texture1D_Float32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture1D_Float32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture1D_Float32_coordinate;
Variable TextureAtomicExchange_Texture1D_Float32_value;
Function TextureAtomicExchange_Texture1D_Float32;
inline constexpr std::array TextureAtomicExchange_Texture1D_Float32_args = { &TextureAtomicExchange_Texture1D_Float32_texture, &TextureAtomicExchange_Texture1D_Float32_coordinate, &TextureAtomicExchange_Texture1D_Float32_value };

/// textureAtomicExchange with Texture1D, Int32, UInt32
Variable TextureAtomicExchange_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicExchange_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture1D_UInt32_coordinate;
Variable TextureAtomicExchange_Texture1D_UInt32_value;
Function TextureAtomicExchange_Texture1D_UInt32;
inline constexpr std::array TextureAtomicExchange_Texture1D_UInt32_args = { &TextureAtomicExchange_Texture1D_UInt32_texture, &TextureAtomicExchange_Texture1D_UInt32_coordinate, &TextureAtomicExchange_Texture1D_UInt32_value };

/// textureAtomicExchange with Texture1D, Int32, Int32
Variable TextureAtomicExchange_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicExchange_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture1D_Int32_coordinate;
Variable TextureAtomicExchange_Texture1D_Int32_value;
Function TextureAtomicExchange_Texture1D_Int32;
inline constexpr std::array TextureAtomicExchange_Texture1D_Int32_args = { &TextureAtomicExchange_Texture1D_Int32_texture, &TextureAtomicExchange_Texture1D_Int32_coordinate, &TextureAtomicExchange_Texture1D_Int32_value };

/// textureAtomicExchange with Texture1D, Int32, Float16
Variable TextureAtomicExchange_Texture1D_Float16_texture;
inline constexpr std::array TextureAtomicExchange_Texture1D_Float16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture1D_Float16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture1D_Float16_coordinate;
Variable TextureAtomicExchange_Texture1D_Float16_value;
Function TextureAtomicExchange_Texture1D_Float16;
inline constexpr std::array TextureAtomicExchange_Texture1D_Float16_args = { &TextureAtomicExchange_Texture1D_Float16_texture, &TextureAtomicExchange_Texture1D_Float16_coordinate, &TextureAtomicExchange_Texture1D_Float16_value };

/// textureAtomicExchange with Texture1D, Int32, UInt16
Variable TextureAtomicExchange_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicExchange_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture1D_UInt16_coordinate;
Variable TextureAtomicExchange_Texture1D_UInt16_value;
Function TextureAtomicExchange_Texture1D_UInt16;
inline constexpr std::array TextureAtomicExchange_Texture1D_UInt16_args = { &TextureAtomicExchange_Texture1D_UInt16_texture, &TextureAtomicExchange_Texture1D_UInt16_coordinate, &TextureAtomicExchange_Texture1D_UInt16_value };

/// textureAtomicExchange with Texture1D, Int32, Int16
Variable TextureAtomicExchange_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicExchange_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture1D_Int16_coordinate;
Variable TextureAtomicExchange_Texture1D_Int16_value;
Function TextureAtomicExchange_Texture1D_Int16;
inline constexpr std::array TextureAtomicExchange_Texture1D_Int16_args = { &TextureAtomicExchange_Texture1D_Int16_texture, &TextureAtomicExchange_Texture1D_Int16_coordinate, &TextureAtomicExchange_Texture1D_Int16_value };

/// textureAtomicExchange with Texture2D, Int32x2, Float32
Variable TextureAtomicExchange_Texture2D_Float32_texture;
inline constexpr std::array TextureAtomicExchange_Texture2D_Float32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture2D_Float32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture2D_Float32_coordinate;
Variable TextureAtomicExchange_Texture2D_Float32_value;
Function TextureAtomicExchange_Texture2D_Float32;
inline constexpr std::array TextureAtomicExchange_Texture2D_Float32_args = { &TextureAtomicExchange_Texture2D_Float32_texture, &TextureAtomicExchange_Texture2D_Float32_coordinate, &TextureAtomicExchange_Texture2D_Float32_value };

/// textureAtomicExchange with Texture2D, Int32x2, UInt32
Variable TextureAtomicExchange_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicExchange_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture2D_UInt32_coordinate;
Variable TextureAtomicExchange_Texture2D_UInt32_value;
Function TextureAtomicExchange_Texture2D_UInt32;
inline constexpr std::array TextureAtomicExchange_Texture2D_UInt32_args = { &TextureAtomicExchange_Texture2D_UInt32_texture, &TextureAtomicExchange_Texture2D_UInt32_coordinate, &TextureAtomicExchange_Texture2D_UInt32_value };

/// textureAtomicExchange with Texture2D, Int32x2, Int32
Variable TextureAtomicExchange_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicExchange_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture2D_Int32_coordinate;
Variable TextureAtomicExchange_Texture2D_Int32_value;
Function TextureAtomicExchange_Texture2D_Int32;
inline constexpr std::array TextureAtomicExchange_Texture2D_Int32_args = { &TextureAtomicExchange_Texture2D_Int32_texture, &TextureAtomicExchange_Texture2D_Int32_coordinate, &TextureAtomicExchange_Texture2D_Int32_value };

/// textureAtomicExchange with Texture2D, Int32x2, Float16
Variable TextureAtomicExchange_Texture2D_Float16_texture;
inline constexpr std::array TextureAtomicExchange_Texture2D_Float16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture2D_Float16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture2D_Float16_coordinate;
Variable TextureAtomicExchange_Texture2D_Float16_value;
Function TextureAtomicExchange_Texture2D_Float16;
inline constexpr std::array TextureAtomicExchange_Texture2D_Float16_args = { &TextureAtomicExchange_Texture2D_Float16_texture, &TextureAtomicExchange_Texture2D_Float16_coordinate, &TextureAtomicExchange_Texture2D_Float16_value };

/// textureAtomicExchange with Texture2D, Int32x2, UInt16
Variable TextureAtomicExchange_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicExchange_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture2D_UInt16_coordinate;
Variable TextureAtomicExchange_Texture2D_UInt16_value;
Function TextureAtomicExchange_Texture2D_UInt16;
inline constexpr std::array TextureAtomicExchange_Texture2D_UInt16_args = { &TextureAtomicExchange_Texture2D_UInt16_texture, &TextureAtomicExchange_Texture2D_UInt16_coordinate, &TextureAtomicExchange_Texture2D_UInt16_value };

/// textureAtomicExchange with Texture2D, Int32x2, Int16
Variable TextureAtomicExchange_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicExchange_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture2D_Int16_coordinate;
Variable TextureAtomicExchange_Texture2D_Int16_value;
Function TextureAtomicExchange_Texture2D_Int16;
inline constexpr std::array TextureAtomicExchange_Texture2D_Int16_args = { &TextureAtomicExchange_Texture2D_Int16_texture, &TextureAtomicExchange_Texture2D_Int16_coordinate, &TextureAtomicExchange_Texture2D_Int16_value };

/// textureAtomicExchange with Texture3D, Int32x3, Float32
Variable TextureAtomicExchange_Texture3D_Float32_texture;
inline constexpr std::array TextureAtomicExchange_Texture3D_Float32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture3D_Float32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture3D_Float32_coordinate;
Variable TextureAtomicExchange_Texture3D_Float32_value;
Function TextureAtomicExchange_Texture3D_Float32;
inline constexpr std::array TextureAtomicExchange_Texture3D_Float32_args = { &TextureAtomicExchange_Texture3D_Float32_texture, &TextureAtomicExchange_Texture3D_Float32_coordinate, &TextureAtomicExchange_Texture3D_Float32_value };

/// textureAtomicExchange with Texture3D, Int32x3, UInt32
Variable TextureAtomicExchange_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicExchange_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture3D_UInt32_coordinate;
Variable TextureAtomicExchange_Texture3D_UInt32_value;
Function TextureAtomicExchange_Texture3D_UInt32;
inline constexpr std::array TextureAtomicExchange_Texture3D_UInt32_args = { &TextureAtomicExchange_Texture3D_UInt32_texture, &TextureAtomicExchange_Texture3D_UInt32_coordinate, &TextureAtomicExchange_Texture3D_UInt32_value };

/// textureAtomicExchange with Texture3D, Int32x3, Int32
Variable TextureAtomicExchange_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicExchange_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture3D_Int32_coordinate;
Variable TextureAtomicExchange_Texture3D_Int32_value;
Function TextureAtomicExchange_Texture3D_Int32;
inline constexpr std::array TextureAtomicExchange_Texture3D_Int32_args = { &TextureAtomicExchange_Texture3D_Int32_texture, &TextureAtomicExchange_Texture3D_Int32_coordinate, &TextureAtomicExchange_Texture3D_Int32_value };

/// textureAtomicExchange with Texture3D, Int32x3, Float16
Variable TextureAtomicExchange_Texture3D_Float16_texture;
inline constexpr std::array TextureAtomicExchange_Texture3D_Float16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture3D_Float16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture3D_Float16_coordinate;
Variable TextureAtomicExchange_Texture3D_Float16_value;
Function TextureAtomicExchange_Texture3D_Float16;
inline constexpr std::array TextureAtomicExchange_Texture3D_Float16_args = { &TextureAtomicExchange_Texture3D_Float16_texture, &TextureAtomicExchange_Texture3D_Float16_coordinate, &TextureAtomicExchange_Texture3D_Float16_value };

/// textureAtomicExchange with Texture3D, Int32x3, UInt16
Variable TextureAtomicExchange_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicExchange_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture3D_UInt16_coordinate;
Variable TextureAtomicExchange_Texture3D_UInt16_value;
Function TextureAtomicExchange_Texture3D_UInt16;
inline constexpr std::array TextureAtomicExchange_Texture3D_UInt16_args = { &TextureAtomicExchange_Texture3D_UInt16_texture, &TextureAtomicExchange_Texture3D_UInt16_coordinate, &TextureAtomicExchange_Texture3D_UInt16_value };

/// textureAtomicExchange with Texture3D, Int32x3, Int16
Variable TextureAtomicExchange_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicExchange_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture3D_Int16_coordinate;
Variable TextureAtomicExchange_Texture3D_Int16_value;
Function TextureAtomicExchange_Texture3D_Int16;
inline constexpr std::array TextureAtomicExchange_Texture3D_Int16_args = { &TextureAtomicExchange_Texture3D_Int16_texture, &TextureAtomicExchange_Texture3D_Int16_coordinate, &TextureAtomicExchange_Texture3D_Int16_value };

/// textureAtomicExchange with TextureCube, Int32x3, Float32
Variable TextureAtomicExchange_TextureCube_Float32_texture;
inline constexpr std::array TextureAtomicExchange_TextureCube_Float32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_TextureCube_Float32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_TextureCube_Float32_coordinate;
Variable TextureAtomicExchange_TextureCube_Float32_value;
Function TextureAtomicExchange_TextureCube_Float32;
inline constexpr std::array TextureAtomicExchange_TextureCube_Float32_args = { &TextureAtomicExchange_TextureCube_Float32_texture, &TextureAtomicExchange_TextureCube_Float32_coordinate, &TextureAtomicExchange_TextureCube_Float32_value };

/// textureAtomicExchange with TextureCube, Int32x3, UInt32
Variable TextureAtomicExchange_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicExchange_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_TextureCube_UInt32_coordinate;
Variable TextureAtomicExchange_TextureCube_UInt32_value;
Function TextureAtomicExchange_TextureCube_UInt32;
inline constexpr std::array TextureAtomicExchange_TextureCube_UInt32_args = { &TextureAtomicExchange_TextureCube_UInt32_texture, &TextureAtomicExchange_TextureCube_UInt32_coordinate, &TextureAtomicExchange_TextureCube_UInt32_value };

/// textureAtomicExchange with TextureCube, Int32x3, Int32
Variable TextureAtomicExchange_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicExchange_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_TextureCube_Int32_coordinate;
Variable TextureAtomicExchange_TextureCube_Int32_value;
Function TextureAtomicExchange_TextureCube_Int32;
inline constexpr std::array TextureAtomicExchange_TextureCube_Int32_args = { &TextureAtomicExchange_TextureCube_Int32_texture, &TextureAtomicExchange_TextureCube_Int32_coordinate, &TextureAtomicExchange_TextureCube_Int32_value };

/// textureAtomicExchange with TextureCube, Int32x3, Float16
Variable TextureAtomicExchange_TextureCube_Float16_texture;
inline constexpr std::array TextureAtomicExchange_TextureCube_Float16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_TextureCube_Float16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_TextureCube_Float16_coordinate;
Variable TextureAtomicExchange_TextureCube_Float16_value;
Function TextureAtomicExchange_TextureCube_Float16;
inline constexpr std::array TextureAtomicExchange_TextureCube_Float16_args = { &TextureAtomicExchange_TextureCube_Float16_texture, &TextureAtomicExchange_TextureCube_Float16_coordinate, &TextureAtomicExchange_TextureCube_Float16_value };

/// textureAtomicExchange with TextureCube, Int32x3, UInt16
Variable TextureAtomicExchange_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicExchange_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_TextureCube_UInt16_coordinate;
Variable TextureAtomicExchange_TextureCube_UInt16_value;
Function TextureAtomicExchange_TextureCube_UInt16;
inline constexpr std::array TextureAtomicExchange_TextureCube_UInt16_args = { &TextureAtomicExchange_TextureCube_UInt16_texture, &TextureAtomicExchange_TextureCube_UInt16_coordinate, &TextureAtomicExchange_TextureCube_UInt16_value };

/// textureAtomicExchange with TextureCube, Int32x3, Int16
Variable TextureAtomicExchange_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicExchange_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_TextureCube_Int16_coordinate;
Variable TextureAtomicExchange_TextureCube_Int16_value;
Function TextureAtomicExchange_TextureCube_Int16;
inline constexpr std::array TextureAtomicExchange_TextureCube_Int16_args = { &TextureAtomicExchange_TextureCube_Int16_texture, &TextureAtomicExchange_TextureCube_Int16_coordinate, &TextureAtomicExchange_TextureCube_Int16_value };

/// textureAtomicExchange with Texture1DArray, Int32x2, Float32
Variable TextureAtomicExchange_Texture1DArray_Float32_texture;
inline constexpr std::array TextureAtomicExchange_Texture1DArray_Float32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture1DArray_Float32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture1DArray_Float32_coordinate;
Variable TextureAtomicExchange_Texture1DArray_Float32_value;
Function TextureAtomicExchange_Texture1DArray_Float32;
inline constexpr std::array TextureAtomicExchange_Texture1DArray_Float32_args = { &TextureAtomicExchange_Texture1DArray_Float32_texture, &TextureAtomicExchange_Texture1DArray_Float32_coordinate, &TextureAtomicExchange_Texture1DArray_Float32_value };

/// textureAtomicExchange with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicExchange_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicExchange_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicExchange_Texture1DArray_UInt32_value;
Function TextureAtomicExchange_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicExchange_Texture1DArray_UInt32_args = { &TextureAtomicExchange_Texture1DArray_UInt32_texture, &TextureAtomicExchange_Texture1DArray_UInt32_coordinate, &TextureAtomicExchange_Texture1DArray_UInt32_value };

/// textureAtomicExchange with Texture1DArray, Int32x2, Int32
Variable TextureAtomicExchange_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicExchange_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture1DArray_Int32_coordinate;
Variable TextureAtomicExchange_Texture1DArray_Int32_value;
Function TextureAtomicExchange_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicExchange_Texture1DArray_Int32_args = { &TextureAtomicExchange_Texture1DArray_Int32_texture, &TextureAtomicExchange_Texture1DArray_Int32_coordinate, &TextureAtomicExchange_Texture1DArray_Int32_value };

/// textureAtomicExchange with Texture1DArray, Int32x2, Float16
Variable TextureAtomicExchange_Texture1DArray_Float16_texture;
inline constexpr std::array TextureAtomicExchange_Texture1DArray_Float16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture1DArray_Float16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture1DArray_Float16_coordinate;
Variable TextureAtomicExchange_Texture1DArray_Float16_value;
Function TextureAtomicExchange_Texture1DArray_Float16;
inline constexpr std::array TextureAtomicExchange_Texture1DArray_Float16_args = { &TextureAtomicExchange_Texture1DArray_Float16_texture, &TextureAtomicExchange_Texture1DArray_Float16_coordinate, &TextureAtomicExchange_Texture1DArray_Float16_value };

/// textureAtomicExchange with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicExchange_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicExchange_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicExchange_Texture1DArray_UInt16_value;
Function TextureAtomicExchange_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicExchange_Texture1DArray_UInt16_args = { &TextureAtomicExchange_Texture1DArray_UInt16_texture, &TextureAtomicExchange_Texture1DArray_UInt16_coordinate, &TextureAtomicExchange_Texture1DArray_UInt16_value };

/// textureAtomicExchange with Texture1DArray, Int32x2, Int16
Variable TextureAtomicExchange_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicExchange_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture1DArray_Int16_coordinate;
Variable TextureAtomicExchange_Texture1DArray_Int16_value;
Function TextureAtomicExchange_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicExchange_Texture1DArray_Int16_args = { &TextureAtomicExchange_Texture1DArray_Int16_texture, &TextureAtomicExchange_Texture1DArray_Int16_coordinate, &TextureAtomicExchange_Texture1DArray_Int16_value };

/// textureAtomicExchange with Texture2DArray, Int32x3, Float32
Variable TextureAtomicExchange_Texture2DArray_Float32_texture;
inline constexpr std::array TextureAtomicExchange_Texture2DArray_Float32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture2DArray_Float32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture2DArray_Float32_coordinate;
Variable TextureAtomicExchange_Texture2DArray_Float32_value;
Function TextureAtomicExchange_Texture2DArray_Float32;
inline constexpr std::array TextureAtomicExchange_Texture2DArray_Float32_args = { &TextureAtomicExchange_Texture2DArray_Float32_texture, &TextureAtomicExchange_Texture2DArray_Float32_coordinate, &TextureAtomicExchange_Texture2DArray_Float32_value };

/// textureAtomicExchange with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicExchange_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicExchange_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicExchange_Texture2DArray_UInt32_value;
Function TextureAtomicExchange_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicExchange_Texture2DArray_UInt32_args = { &TextureAtomicExchange_Texture2DArray_UInt32_texture, &TextureAtomicExchange_Texture2DArray_UInt32_coordinate, &TextureAtomicExchange_Texture2DArray_UInt32_value };

/// textureAtomicExchange with Texture2DArray, Int32x3, Int32
Variable TextureAtomicExchange_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicExchange_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture2DArray_Int32_coordinate;
Variable TextureAtomicExchange_Texture2DArray_Int32_value;
Function TextureAtomicExchange_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicExchange_Texture2DArray_Int32_args = { &TextureAtomicExchange_Texture2DArray_Int32_texture, &TextureAtomicExchange_Texture2DArray_Int32_coordinate, &TextureAtomicExchange_Texture2DArray_Int32_value };

/// textureAtomicExchange with Texture2DArray, Int32x3, Float16
Variable TextureAtomicExchange_Texture2DArray_Float16_texture;
inline constexpr std::array TextureAtomicExchange_Texture2DArray_Float16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture2DArray_Float16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture2DArray_Float16_coordinate;
Variable TextureAtomicExchange_Texture2DArray_Float16_value;
Function TextureAtomicExchange_Texture2DArray_Float16;
inline constexpr std::array TextureAtomicExchange_Texture2DArray_Float16_args = { &TextureAtomicExchange_Texture2DArray_Float16_texture, &TextureAtomicExchange_Texture2DArray_Float16_coordinate, &TextureAtomicExchange_Texture2DArray_Float16_value };

/// textureAtomicExchange with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicExchange_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicExchange_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicExchange_Texture2DArray_UInt16_value;
Function TextureAtomicExchange_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicExchange_Texture2DArray_UInt16_args = { &TextureAtomicExchange_Texture2DArray_UInt16_texture, &TextureAtomicExchange_Texture2DArray_UInt16_coordinate, &TextureAtomicExchange_Texture2DArray_UInt16_value };

/// textureAtomicExchange with Texture2DArray, Int32x3, Int16
Variable TextureAtomicExchange_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicExchange_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_Texture2DArray_Int16_coordinate;
Variable TextureAtomicExchange_Texture2DArray_Int16_value;
Function TextureAtomicExchange_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicExchange_Texture2DArray_Int16_args = { &TextureAtomicExchange_Texture2DArray_Int16_texture, &TextureAtomicExchange_Texture2DArray_Int16_coordinate, &TextureAtomicExchange_Texture2DArray_Int16_value };

/// textureAtomicExchange with TextureCubeArray, Int32x4, Float32
Variable TextureAtomicExchange_TextureCubeArray_Float32_texture;
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_Float32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_Float32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_TextureCubeArray_Float32_coordinate;
Variable TextureAtomicExchange_TextureCubeArray_Float32_value;
Function TextureAtomicExchange_TextureCubeArray_Float32;
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_Float32_args = { &TextureAtomicExchange_TextureCubeArray_Float32_texture, &TextureAtomicExchange_TextureCubeArray_Float32_coordinate, &TextureAtomicExchange_TextureCubeArray_Float32_value };

/// textureAtomicExchange with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicExchange_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicExchange_TextureCubeArray_UInt32_value;
Function TextureAtomicExchange_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_UInt32_args = { &TextureAtomicExchange_TextureCubeArray_UInt32_texture, &TextureAtomicExchange_TextureCubeArray_UInt32_coordinate, &TextureAtomicExchange_TextureCubeArray_UInt32_value };

/// textureAtomicExchange with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicExchange_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicExchange_TextureCubeArray_Int32_value;
Function TextureAtomicExchange_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_Int32_args = { &TextureAtomicExchange_TextureCubeArray_Int32_texture, &TextureAtomicExchange_TextureCubeArray_Int32_coordinate, &TextureAtomicExchange_TextureCubeArray_Int32_value };

/// textureAtomicExchange with TextureCubeArray, Int32x4, Float16
Variable TextureAtomicExchange_TextureCubeArray_Float16_texture;
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_Float16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_Float16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_TextureCubeArray_Float16_coordinate;
Variable TextureAtomicExchange_TextureCubeArray_Float16_value;
Function TextureAtomicExchange_TextureCubeArray_Float16;
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_Float16_args = { &TextureAtomicExchange_TextureCubeArray_Float16_texture, &TextureAtomicExchange_TextureCubeArray_Float16_coordinate, &TextureAtomicExchange_TextureCubeArray_Float16_value };

/// textureAtomicExchange with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicExchange_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicExchange_TextureCubeArray_UInt16_value;
Function TextureAtomicExchange_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_UInt16_args = { &TextureAtomicExchange_TextureCubeArray_UInt16_texture, &TextureAtomicExchange_TextureCubeArray_UInt16_coordinate, &TextureAtomicExchange_TextureCubeArray_UInt16_value };

/// textureAtomicExchange with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicExchange_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicExchange_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicExchange_TextureCubeArray_Int16_value;
Function TextureAtomicExchange_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicExchange_TextureCubeArray_Int16_args = { &TextureAtomicExchange_TextureCubeArray_Int16_texture, &TextureAtomicExchange_TextureCubeArray_Int16_coordinate, &TextureAtomicExchange_TextureCubeArray_Int16_value };

/// textureAtomicCompareExchange with Texture1D, Int32, UInt32
Variable TextureAtomicCompareExchange_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture1D_UInt32_coordinate;
Variable TextureAtomicCompareExchange_Texture1D_UInt32_value;
Function TextureAtomicCompareExchange_Texture1D_UInt32;
inline constexpr std::array TextureAtomicCompareExchange_Texture1D_UInt32_args = { &TextureAtomicCompareExchange_Texture1D_UInt32_texture, &TextureAtomicCompareExchange_Texture1D_UInt32_coordinate, &TextureAtomicCompareExchange_Texture1D_UInt32_value };

/// textureAtomicCompareExchange with Texture1D, Int32, Int32
Variable TextureAtomicCompareExchange_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture1D_Int32_coordinate;
Variable TextureAtomicCompareExchange_Texture1D_Int32_value;
Function TextureAtomicCompareExchange_Texture1D_Int32;
inline constexpr std::array TextureAtomicCompareExchange_Texture1D_Int32_args = { &TextureAtomicCompareExchange_Texture1D_Int32_texture, &TextureAtomicCompareExchange_Texture1D_Int32_coordinate, &TextureAtomicCompareExchange_Texture1D_Int32_value };

/// textureAtomicCompareExchange with Texture1D, Int32, UInt16
Variable TextureAtomicCompareExchange_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture1D_UInt16_coordinate;
Variable TextureAtomicCompareExchange_Texture1D_UInt16_value;
Function TextureAtomicCompareExchange_Texture1D_UInt16;
inline constexpr std::array TextureAtomicCompareExchange_Texture1D_UInt16_args = { &TextureAtomicCompareExchange_Texture1D_UInt16_texture, &TextureAtomicCompareExchange_Texture1D_UInt16_coordinate, &TextureAtomicCompareExchange_Texture1D_UInt16_value };

/// textureAtomicCompareExchange with Texture1D, Int32, Int16
Variable TextureAtomicCompareExchange_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture1D_Int16_coordinate;
Variable TextureAtomicCompareExchange_Texture1D_Int16_value;
Function TextureAtomicCompareExchange_Texture1D_Int16;
inline constexpr std::array TextureAtomicCompareExchange_Texture1D_Int16_args = { &TextureAtomicCompareExchange_Texture1D_Int16_texture, &TextureAtomicCompareExchange_Texture1D_Int16_coordinate, &TextureAtomicCompareExchange_Texture1D_Int16_value };

/// textureAtomicCompareExchange with Texture2D, Int32x2, UInt32
Variable TextureAtomicCompareExchange_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture2D_UInt32_coordinate;
Variable TextureAtomicCompareExchange_Texture2D_UInt32_value;
Function TextureAtomicCompareExchange_Texture2D_UInt32;
inline constexpr std::array TextureAtomicCompareExchange_Texture2D_UInt32_args = { &TextureAtomicCompareExchange_Texture2D_UInt32_texture, &TextureAtomicCompareExchange_Texture2D_UInt32_coordinate, &TextureAtomicCompareExchange_Texture2D_UInt32_value };

/// textureAtomicCompareExchange with Texture2D, Int32x2, Int32
Variable TextureAtomicCompareExchange_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture2D_Int32_coordinate;
Variable TextureAtomicCompareExchange_Texture2D_Int32_value;
Function TextureAtomicCompareExchange_Texture2D_Int32;
inline constexpr std::array TextureAtomicCompareExchange_Texture2D_Int32_args = { &TextureAtomicCompareExchange_Texture2D_Int32_texture, &TextureAtomicCompareExchange_Texture2D_Int32_coordinate, &TextureAtomicCompareExchange_Texture2D_Int32_value };

/// textureAtomicCompareExchange with Texture2D, Int32x2, UInt16
Variable TextureAtomicCompareExchange_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture2D_UInt16_coordinate;
Variable TextureAtomicCompareExchange_Texture2D_UInt16_value;
Function TextureAtomicCompareExchange_Texture2D_UInt16;
inline constexpr std::array TextureAtomicCompareExchange_Texture2D_UInt16_args = { &TextureAtomicCompareExchange_Texture2D_UInt16_texture, &TextureAtomicCompareExchange_Texture2D_UInt16_coordinate, &TextureAtomicCompareExchange_Texture2D_UInt16_value };

/// textureAtomicCompareExchange with Texture2D, Int32x2, Int16
Variable TextureAtomicCompareExchange_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture2D_Int16_coordinate;
Variable TextureAtomicCompareExchange_Texture2D_Int16_value;
Function TextureAtomicCompareExchange_Texture2D_Int16;
inline constexpr std::array TextureAtomicCompareExchange_Texture2D_Int16_args = { &TextureAtomicCompareExchange_Texture2D_Int16_texture, &TextureAtomicCompareExchange_Texture2D_Int16_coordinate, &TextureAtomicCompareExchange_Texture2D_Int16_value };

/// textureAtomicCompareExchange with Texture3D, Int32x3, UInt32
Variable TextureAtomicCompareExchange_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture3D_UInt32_coordinate;
Variable TextureAtomicCompareExchange_Texture3D_UInt32_value;
Function TextureAtomicCompareExchange_Texture3D_UInt32;
inline constexpr std::array TextureAtomicCompareExchange_Texture3D_UInt32_args = { &TextureAtomicCompareExchange_Texture3D_UInt32_texture, &TextureAtomicCompareExchange_Texture3D_UInt32_coordinate, &TextureAtomicCompareExchange_Texture3D_UInt32_value };

/// textureAtomicCompareExchange with Texture3D, Int32x3, Int32
Variable TextureAtomicCompareExchange_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture3D_Int32_coordinate;
Variable TextureAtomicCompareExchange_Texture3D_Int32_value;
Function TextureAtomicCompareExchange_Texture3D_Int32;
inline constexpr std::array TextureAtomicCompareExchange_Texture3D_Int32_args = { &TextureAtomicCompareExchange_Texture3D_Int32_texture, &TextureAtomicCompareExchange_Texture3D_Int32_coordinate, &TextureAtomicCompareExchange_Texture3D_Int32_value };

/// textureAtomicCompareExchange with Texture3D, Int32x3, UInt16
Variable TextureAtomicCompareExchange_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture3D_UInt16_coordinate;
Variable TextureAtomicCompareExchange_Texture3D_UInt16_value;
Function TextureAtomicCompareExchange_Texture3D_UInt16;
inline constexpr std::array TextureAtomicCompareExchange_Texture3D_UInt16_args = { &TextureAtomicCompareExchange_Texture3D_UInt16_texture, &TextureAtomicCompareExchange_Texture3D_UInt16_coordinate, &TextureAtomicCompareExchange_Texture3D_UInt16_value };

/// textureAtomicCompareExchange with Texture3D, Int32x3, Int16
Variable TextureAtomicCompareExchange_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture3D_Int16_coordinate;
Variable TextureAtomicCompareExchange_Texture3D_Int16_value;
Function TextureAtomicCompareExchange_Texture3D_Int16;
inline constexpr std::array TextureAtomicCompareExchange_Texture3D_Int16_args = { &TextureAtomicCompareExchange_Texture3D_Int16_texture, &TextureAtomicCompareExchange_Texture3D_Int16_coordinate, &TextureAtomicCompareExchange_Texture3D_Int16_value };

/// textureAtomicCompareExchange with TextureCube, Int32x3, UInt32
Variable TextureAtomicCompareExchange_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicCompareExchange_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_TextureCube_UInt32_coordinate;
Variable TextureAtomicCompareExchange_TextureCube_UInt32_value;
Function TextureAtomicCompareExchange_TextureCube_UInt32;
inline constexpr std::array TextureAtomicCompareExchange_TextureCube_UInt32_args = { &TextureAtomicCompareExchange_TextureCube_UInt32_texture, &TextureAtomicCompareExchange_TextureCube_UInt32_coordinate, &TextureAtomicCompareExchange_TextureCube_UInt32_value };

/// textureAtomicCompareExchange with TextureCube, Int32x3, Int32
Variable TextureAtomicCompareExchange_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicCompareExchange_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_TextureCube_Int32_coordinate;
Variable TextureAtomicCompareExchange_TextureCube_Int32_value;
Function TextureAtomicCompareExchange_TextureCube_Int32;
inline constexpr std::array TextureAtomicCompareExchange_TextureCube_Int32_args = { &TextureAtomicCompareExchange_TextureCube_Int32_texture, &TextureAtomicCompareExchange_TextureCube_Int32_coordinate, &TextureAtomicCompareExchange_TextureCube_Int32_value };

/// textureAtomicCompareExchange with TextureCube, Int32x3, UInt16
Variable TextureAtomicCompareExchange_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicCompareExchange_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_TextureCube_UInt16_coordinate;
Variable TextureAtomicCompareExchange_TextureCube_UInt16_value;
Function TextureAtomicCompareExchange_TextureCube_UInt16;
inline constexpr std::array TextureAtomicCompareExchange_TextureCube_UInt16_args = { &TextureAtomicCompareExchange_TextureCube_UInt16_texture, &TextureAtomicCompareExchange_TextureCube_UInt16_coordinate, &TextureAtomicCompareExchange_TextureCube_UInt16_value };

/// textureAtomicCompareExchange with TextureCube, Int32x3, Int16
Variable TextureAtomicCompareExchange_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicCompareExchange_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_TextureCube_Int16_coordinate;
Variable TextureAtomicCompareExchange_TextureCube_Int16_value;
Function TextureAtomicCompareExchange_TextureCube_Int16;
inline constexpr std::array TextureAtomicCompareExchange_TextureCube_Int16_args = { &TextureAtomicCompareExchange_TextureCube_Int16_texture, &TextureAtomicCompareExchange_TextureCube_Int16_coordinate, &TextureAtomicCompareExchange_TextureCube_Int16_value };

/// textureAtomicCompareExchange with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicCompareExchange_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicCompareExchange_Texture1DArray_UInt32_value;
Function TextureAtomicCompareExchange_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicCompareExchange_Texture1DArray_UInt32_args = { &TextureAtomicCompareExchange_Texture1DArray_UInt32_texture, &TextureAtomicCompareExchange_Texture1DArray_UInt32_coordinate, &TextureAtomicCompareExchange_Texture1DArray_UInt32_value };

/// textureAtomicCompareExchange with Texture1DArray, Int32x2, Int32
Variable TextureAtomicCompareExchange_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture1DArray_Int32_coordinate;
Variable TextureAtomicCompareExchange_Texture1DArray_Int32_value;
Function TextureAtomicCompareExchange_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicCompareExchange_Texture1DArray_Int32_args = { &TextureAtomicCompareExchange_Texture1DArray_Int32_texture, &TextureAtomicCompareExchange_Texture1DArray_Int32_coordinate, &TextureAtomicCompareExchange_Texture1DArray_Int32_value };

/// textureAtomicCompareExchange with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicCompareExchange_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicCompareExchange_Texture1DArray_UInt16_value;
Function TextureAtomicCompareExchange_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicCompareExchange_Texture1DArray_UInt16_args = { &TextureAtomicCompareExchange_Texture1DArray_UInt16_texture, &TextureAtomicCompareExchange_Texture1DArray_UInt16_coordinate, &TextureAtomicCompareExchange_Texture1DArray_UInt16_value };

/// textureAtomicCompareExchange with Texture1DArray, Int32x2, Int16
Variable TextureAtomicCompareExchange_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture1DArray_Int16_coordinate;
Variable TextureAtomicCompareExchange_Texture1DArray_Int16_value;
Function TextureAtomicCompareExchange_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicCompareExchange_Texture1DArray_Int16_args = { &TextureAtomicCompareExchange_Texture1DArray_Int16_texture, &TextureAtomicCompareExchange_Texture1DArray_Int16_coordinate, &TextureAtomicCompareExchange_Texture1DArray_Int16_value };

/// textureAtomicCompareExchange with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicCompareExchange_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicCompareExchange_Texture2DArray_UInt32_value;
Function TextureAtomicCompareExchange_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicCompareExchange_Texture2DArray_UInt32_args = { &TextureAtomicCompareExchange_Texture2DArray_UInt32_texture, &TextureAtomicCompareExchange_Texture2DArray_UInt32_coordinate, &TextureAtomicCompareExchange_Texture2DArray_UInt32_value };

/// textureAtomicCompareExchange with Texture2DArray, Int32x3, Int32
Variable TextureAtomicCompareExchange_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture2DArray_Int32_coordinate;
Variable TextureAtomicCompareExchange_Texture2DArray_Int32_value;
Function TextureAtomicCompareExchange_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicCompareExchange_Texture2DArray_Int32_args = { &TextureAtomicCompareExchange_Texture2DArray_Int32_texture, &TextureAtomicCompareExchange_Texture2DArray_Int32_coordinate, &TextureAtomicCompareExchange_Texture2DArray_Int32_value };

/// textureAtomicCompareExchange with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicCompareExchange_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicCompareExchange_Texture2DArray_UInt16_value;
Function TextureAtomicCompareExchange_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicCompareExchange_Texture2DArray_UInt16_args = { &TextureAtomicCompareExchange_Texture2DArray_UInt16_texture, &TextureAtomicCompareExchange_Texture2DArray_UInt16_coordinate, &TextureAtomicCompareExchange_Texture2DArray_UInt16_value };

/// textureAtomicCompareExchange with Texture2DArray, Int32x3, Int16
Variable TextureAtomicCompareExchange_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicCompareExchange_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_Texture2DArray_Int16_coordinate;
Variable TextureAtomicCompareExchange_Texture2DArray_Int16_value;
Function TextureAtomicCompareExchange_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicCompareExchange_Texture2DArray_Int16_args = { &TextureAtomicCompareExchange_Texture2DArray_Int16_texture, &TextureAtomicCompareExchange_Texture2DArray_Int16_coordinate, &TextureAtomicCompareExchange_Texture2DArray_Int16_value };

/// textureAtomicCompareExchange with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicCompareExchange_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicCompareExchange_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicCompareExchange_TextureCubeArray_UInt32_value;
Function TextureAtomicCompareExchange_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicCompareExchange_TextureCubeArray_UInt32_args = { &TextureAtomicCompareExchange_TextureCubeArray_UInt32_texture, &TextureAtomicCompareExchange_TextureCubeArray_UInt32_coordinate, &TextureAtomicCompareExchange_TextureCubeArray_UInt32_value };

/// textureAtomicCompareExchange with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicCompareExchange_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicCompareExchange_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicCompareExchange_TextureCubeArray_Int32_value;
Function TextureAtomicCompareExchange_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicCompareExchange_TextureCubeArray_Int32_args = { &TextureAtomicCompareExchange_TextureCubeArray_Int32_texture, &TextureAtomicCompareExchange_TextureCubeArray_Int32_coordinate, &TextureAtomicCompareExchange_TextureCubeArray_Int32_value };

/// textureAtomicCompareExchange with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicCompareExchange_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicCompareExchange_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicCompareExchange_TextureCubeArray_UInt16_value;
Function TextureAtomicCompareExchange_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicCompareExchange_TextureCubeArray_UInt16_args = { &TextureAtomicCompareExchange_TextureCubeArray_UInt16_texture, &TextureAtomicCompareExchange_TextureCubeArray_UInt16_coordinate, &TextureAtomicCompareExchange_TextureCubeArray_UInt16_value };

/// textureAtomicCompareExchange with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicCompareExchange_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicCompareExchange_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicCompareExchange_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicCompareExchange_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicCompareExchange_TextureCubeArray_Int16_value;
Function TextureAtomicCompareExchange_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicCompareExchange_TextureCubeArray_Int16_args = { &TextureAtomicCompareExchange_TextureCubeArray_Int16_texture, &TextureAtomicCompareExchange_TextureCubeArray_Int16_coordinate, &TextureAtomicCompareExchange_TextureCubeArray_Int16_value };

/// textureAtomicAdd with Texture1D, Int32, UInt32
Variable TextureAtomicAdd_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicAdd_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture1D_UInt32_coordinate;
Variable TextureAtomicAdd_Texture1D_UInt32_value;
Function TextureAtomicAdd_Texture1D_UInt32;
inline constexpr std::array TextureAtomicAdd_Texture1D_UInt32_args = { &TextureAtomicAdd_Texture1D_UInt32_texture, &TextureAtomicAdd_Texture1D_UInt32_coordinate, &TextureAtomicAdd_Texture1D_UInt32_value };

/// textureAtomicAdd with Texture1D, Int32, Int32
Variable TextureAtomicAdd_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicAdd_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture1D_Int32_coordinate;
Variable TextureAtomicAdd_Texture1D_Int32_value;
Function TextureAtomicAdd_Texture1D_Int32;
inline constexpr std::array TextureAtomicAdd_Texture1D_Int32_args = { &TextureAtomicAdd_Texture1D_Int32_texture, &TextureAtomicAdd_Texture1D_Int32_coordinate, &TextureAtomicAdd_Texture1D_Int32_value };

/// textureAtomicAdd with Texture1D, Int32, UInt16
Variable TextureAtomicAdd_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicAdd_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture1D_UInt16_coordinate;
Variable TextureAtomicAdd_Texture1D_UInt16_value;
Function TextureAtomicAdd_Texture1D_UInt16;
inline constexpr std::array TextureAtomicAdd_Texture1D_UInt16_args = { &TextureAtomicAdd_Texture1D_UInt16_texture, &TextureAtomicAdd_Texture1D_UInt16_coordinate, &TextureAtomicAdd_Texture1D_UInt16_value };

/// textureAtomicAdd with Texture1D, Int32, Int16
Variable TextureAtomicAdd_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicAdd_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture1D_Int16_coordinate;
Variable TextureAtomicAdd_Texture1D_Int16_value;
Function TextureAtomicAdd_Texture1D_Int16;
inline constexpr std::array TextureAtomicAdd_Texture1D_Int16_args = { &TextureAtomicAdd_Texture1D_Int16_texture, &TextureAtomicAdd_Texture1D_Int16_coordinate, &TextureAtomicAdd_Texture1D_Int16_value };

/// textureAtomicAdd with Texture2D, Int32x2, UInt32
Variable TextureAtomicAdd_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicAdd_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture2D_UInt32_coordinate;
Variable TextureAtomicAdd_Texture2D_UInt32_value;
Function TextureAtomicAdd_Texture2D_UInt32;
inline constexpr std::array TextureAtomicAdd_Texture2D_UInt32_args = { &TextureAtomicAdd_Texture2D_UInt32_texture, &TextureAtomicAdd_Texture2D_UInt32_coordinate, &TextureAtomicAdd_Texture2D_UInt32_value };

/// textureAtomicAdd with Texture2D, Int32x2, Int32
Variable TextureAtomicAdd_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicAdd_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture2D_Int32_coordinate;
Variable TextureAtomicAdd_Texture2D_Int32_value;
Function TextureAtomicAdd_Texture2D_Int32;
inline constexpr std::array TextureAtomicAdd_Texture2D_Int32_args = { &TextureAtomicAdd_Texture2D_Int32_texture, &TextureAtomicAdd_Texture2D_Int32_coordinate, &TextureAtomicAdd_Texture2D_Int32_value };

/// textureAtomicAdd with Texture2D, Int32x2, UInt16
Variable TextureAtomicAdd_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicAdd_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture2D_UInt16_coordinate;
Variable TextureAtomicAdd_Texture2D_UInt16_value;
Function TextureAtomicAdd_Texture2D_UInt16;
inline constexpr std::array TextureAtomicAdd_Texture2D_UInt16_args = { &TextureAtomicAdd_Texture2D_UInt16_texture, &TextureAtomicAdd_Texture2D_UInt16_coordinate, &TextureAtomicAdd_Texture2D_UInt16_value };

/// textureAtomicAdd with Texture2D, Int32x2, Int16
Variable TextureAtomicAdd_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicAdd_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture2D_Int16_coordinate;
Variable TextureAtomicAdd_Texture2D_Int16_value;
Function TextureAtomicAdd_Texture2D_Int16;
inline constexpr std::array TextureAtomicAdd_Texture2D_Int16_args = { &TextureAtomicAdd_Texture2D_Int16_texture, &TextureAtomicAdd_Texture2D_Int16_coordinate, &TextureAtomicAdd_Texture2D_Int16_value };

/// textureAtomicAdd with Texture3D, Int32x3, UInt32
Variable TextureAtomicAdd_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicAdd_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture3D_UInt32_coordinate;
Variable TextureAtomicAdd_Texture3D_UInt32_value;
Function TextureAtomicAdd_Texture3D_UInt32;
inline constexpr std::array TextureAtomicAdd_Texture3D_UInt32_args = { &TextureAtomicAdd_Texture3D_UInt32_texture, &TextureAtomicAdd_Texture3D_UInt32_coordinate, &TextureAtomicAdd_Texture3D_UInt32_value };

/// textureAtomicAdd with Texture3D, Int32x3, Int32
Variable TextureAtomicAdd_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicAdd_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture3D_Int32_coordinate;
Variable TextureAtomicAdd_Texture3D_Int32_value;
Function TextureAtomicAdd_Texture3D_Int32;
inline constexpr std::array TextureAtomicAdd_Texture3D_Int32_args = { &TextureAtomicAdd_Texture3D_Int32_texture, &TextureAtomicAdd_Texture3D_Int32_coordinate, &TextureAtomicAdd_Texture3D_Int32_value };

/// textureAtomicAdd with Texture3D, Int32x3, UInt16
Variable TextureAtomicAdd_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicAdd_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture3D_UInt16_coordinate;
Variable TextureAtomicAdd_Texture3D_UInt16_value;
Function TextureAtomicAdd_Texture3D_UInt16;
inline constexpr std::array TextureAtomicAdd_Texture3D_UInt16_args = { &TextureAtomicAdd_Texture3D_UInt16_texture, &TextureAtomicAdd_Texture3D_UInt16_coordinate, &TextureAtomicAdd_Texture3D_UInt16_value };

/// textureAtomicAdd with Texture3D, Int32x3, Int16
Variable TextureAtomicAdd_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicAdd_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture3D_Int16_coordinate;
Variable TextureAtomicAdd_Texture3D_Int16_value;
Function TextureAtomicAdd_Texture3D_Int16;
inline constexpr std::array TextureAtomicAdd_Texture3D_Int16_args = { &TextureAtomicAdd_Texture3D_Int16_texture, &TextureAtomicAdd_Texture3D_Int16_coordinate, &TextureAtomicAdd_Texture3D_Int16_value };

/// textureAtomicAdd with TextureCube, Int32x3, UInt32
Variable TextureAtomicAdd_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicAdd_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_TextureCube_UInt32_coordinate;
Variable TextureAtomicAdd_TextureCube_UInt32_value;
Function TextureAtomicAdd_TextureCube_UInt32;
inline constexpr std::array TextureAtomicAdd_TextureCube_UInt32_args = { &TextureAtomicAdd_TextureCube_UInt32_texture, &TextureAtomicAdd_TextureCube_UInt32_coordinate, &TextureAtomicAdd_TextureCube_UInt32_value };

/// textureAtomicAdd with TextureCube, Int32x3, Int32
Variable TextureAtomicAdd_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicAdd_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_TextureCube_Int32_coordinate;
Variable TextureAtomicAdd_TextureCube_Int32_value;
Function TextureAtomicAdd_TextureCube_Int32;
inline constexpr std::array TextureAtomicAdd_TextureCube_Int32_args = { &TextureAtomicAdd_TextureCube_Int32_texture, &TextureAtomicAdd_TextureCube_Int32_coordinate, &TextureAtomicAdd_TextureCube_Int32_value };

/// textureAtomicAdd with TextureCube, Int32x3, UInt16
Variable TextureAtomicAdd_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicAdd_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_TextureCube_UInt16_coordinate;
Variable TextureAtomicAdd_TextureCube_UInt16_value;
Function TextureAtomicAdd_TextureCube_UInt16;
inline constexpr std::array TextureAtomicAdd_TextureCube_UInt16_args = { &TextureAtomicAdd_TextureCube_UInt16_texture, &TextureAtomicAdd_TextureCube_UInt16_coordinate, &TextureAtomicAdd_TextureCube_UInt16_value };

/// textureAtomicAdd with TextureCube, Int32x3, Int16
Variable TextureAtomicAdd_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicAdd_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_TextureCube_Int16_coordinate;
Variable TextureAtomicAdd_TextureCube_Int16_value;
Function TextureAtomicAdd_TextureCube_Int16;
inline constexpr std::array TextureAtomicAdd_TextureCube_Int16_args = { &TextureAtomicAdd_TextureCube_Int16_texture, &TextureAtomicAdd_TextureCube_Int16_coordinate, &TextureAtomicAdd_TextureCube_Int16_value };

/// textureAtomicAdd with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicAdd_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicAdd_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicAdd_Texture1DArray_UInt32_value;
Function TextureAtomicAdd_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicAdd_Texture1DArray_UInt32_args = { &TextureAtomicAdd_Texture1DArray_UInt32_texture, &TextureAtomicAdd_Texture1DArray_UInt32_coordinate, &TextureAtomicAdd_Texture1DArray_UInt32_value };

/// textureAtomicAdd with Texture1DArray, Int32x2, Int32
Variable TextureAtomicAdd_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicAdd_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture1DArray_Int32_coordinate;
Variable TextureAtomicAdd_Texture1DArray_Int32_value;
Function TextureAtomicAdd_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicAdd_Texture1DArray_Int32_args = { &TextureAtomicAdd_Texture1DArray_Int32_texture, &TextureAtomicAdd_Texture1DArray_Int32_coordinate, &TextureAtomicAdd_Texture1DArray_Int32_value };

/// textureAtomicAdd with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicAdd_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicAdd_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicAdd_Texture1DArray_UInt16_value;
Function TextureAtomicAdd_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicAdd_Texture1DArray_UInt16_args = { &TextureAtomicAdd_Texture1DArray_UInt16_texture, &TextureAtomicAdd_Texture1DArray_UInt16_coordinate, &TextureAtomicAdd_Texture1DArray_UInt16_value };

/// textureAtomicAdd with Texture1DArray, Int32x2, Int16
Variable TextureAtomicAdd_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicAdd_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture1DArray_Int16_coordinate;
Variable TextureAtomicAdd_Texture1DArray_Int16_value;
Function TextureAtomicAdd_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicAdd_Texture1DArray_Int16_args = { &TextureAtomicAdd_Texture1DArray_Int16_texture, &TextureAtomicAdd_Texture1DArray_Int16_coordinate, &TextureAtomicAdd_Texture1DArray_Int16_value };

/// textureAtomicAdd with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicAdd_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicAdd_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicAdd_Texture2DArray_UInt32_value;
Function TextureAtomicAdd_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicAdd_Texture2DArray_UInt32_args = { &TextureAtomicAdd_Texture2DArray_UInt32_texture, &TextureAtomicAdd_Texture2DArray_UInt32_coordinate, &TextureAtomicAdd_Texture2DArray_UInt32_value };

/// textureAtomicAdd with Texture2DArray, Int32x3, Int32
Variable TextureAtomicAdd_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicAdd_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture2DArray_Int32_coordinate;
Variable TextureAtomicAdd_Texture2DArray_Int32_value;
Function TextureAtomicAdd_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicAdd_Texture2DArray_Int32_args = { &TextureAtomicAdd_Texture2DArray_Int32_texture, &TextureAtomicAdd_Texture2DArray_Int32_coordinate, &TextureAtomicAdd_Texture2DArray_Int32_value };

/// textureAtomicAdd with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicAdd_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicAdd_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicAdd_Texture2DArray_UInt16_value;
Function TextureAtomicAdd_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicAdd_Texture2DArray_UInt16_args = { &TextureAtomicAdd_Texture2DArray_UInt16_texture, &TextureAtomicAdd_Texture2DArray_UInt16_coordinate, &TextureAtomicAdd_Texture2DArray_UInt16_value };

/// textureAtomicAdd with Texture2DArray, Int32x3, Int16
Variable TextureAtomicAdd_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicAdd_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_Texture2DArray_Int16_coordinate;
Variable TextureAtomicAdd_Texture2DArray_Int16_value;
Function TextureAtomicAdd_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicAdd_Texture2DArray_Int16_args = { &TextureAtomicAdd_Texture2DArray_Int16_texture, &TextureAtomicAdd_Texture2DArray_Int16_coordinate, &TextureAtomicAdd_Texture2DArray_Int16_value };

/// textureAtomicAdd with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicAdd_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicAdd_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicAdd_TextureCubeArray_UInt32_value;
Function TextureAtomicAdd_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicAdd_TextureCubeArray_UInt32_args = { &TextureAtomicAdd_TextureCubeArray_UInt32_texture, &TextureAtomicAdd_TextureCubeArray_UInt32_coordinate, &TextureAtomicAdd_TextureCubeArray_UInt32_value };

/// textureAtomicAdd with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicAdd_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicAdd_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicAdd_TextureCubeArray_Int32_value;
Function TextureAtomicAdd_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicAdd_TextureCubeArray_Int32_args = { &TextureAtomicAdd_TextureCubeArray_Int32_texture, &TextureAtomicAdd_TextureCubeArray_Int32_coordinate, &TextureAtomicAdd_TextureCubeArray_Int32_value };

/// textureAtomicAdd with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicAdd_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicAdd_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAdd_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAdd_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicAdd_TextureCubeArray_UInt16_value;
Function TextureAtomicAdd_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicAdd_TextureCubeArray_UInt16_args = { &TextureAtomicAdd_TextureCubeArray_UInt16_texture, &TextureAtomicAdd_TextureCubeArray_UInt16_coordinate, &TextureAtomicAdd_TextureCubeArray_UInt16_value };

void SetupIntrinsics13()
{
    /// textureAtomicStore with Texture2D, Int32x2, Int16
    TextureAtomicStore_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicStore_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicStore_Texture2D_Int16_texture.type.modifiers = TextureAtomicStore_Texture2D_Int16_texture_modifiers;
    TextureAtomicStore_Texture2D_Int16_texture.type.modifierValues = TextureAtomicStore_Texture2D_Int16_texture_modifierValues;
    TextureAtomicStore_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicStore_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicStore_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicStore_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture2D_Int16.name = TextureAtomicStore_Texture2D_Int16_name;
    TextureAtomicStore_Texture2D_Int16.backendIndex = 2601;
    TextureAtomicStore_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicStore_Texture2D_Int16.parameters = TextureAtomicStore_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicStore_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicStore_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicStore_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicStore_Texture2D_Int16)->signature = "textureAtomicStore(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2D_Int16)->name = "textureAtomicStore(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2D_Int16)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicStore with Texture3D, Int32x3, Float32
    TextureAtomicStore_Texture3D_Float32_texture.name = "texture"_c;
    TextureAtomicStore_Texture3D_Float32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicStore_Texture3D_Float32_texture.type.modifiers = TextureAtomicStore_Texture3D_Float32_texture_modifiers;
    TextureAtomicStore_Texture3D_Float32_texture.type.modifierValues = TextureAtomicStore_Texture3D_Float32_texture_modifierValues;
    TextureAtomicStore_Texture3D_Float32_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture3D_Float32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_Texture3D_Float32_value.name = "value"_c;
    TextureAtomicStore_Texture3D_Float32_value.type = Type::FullType{ Float32Type.name };
    TextureAtomicStore_Texture3D_Float32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture3D_Float32.name = TextureAtomicStore_Texture3D_Float32_name;
    TextureAtomicStore_Texture3D_Float32.backendIndex = 2602;
    TextureAtomicStore_Texture3D_Float32.returnType = Type::FullType { Float32Type.name };
    TextureAtomicStore_Texture3D_Float32.parameters = TextureAtomicStore_Texture3D_Float32_args;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float32)->signature = "textureAtomicStore(uniform *texture3D,i32x3,f32) f32"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float32)->name = "textureAtomicStore(uniform *texture3D,i32x3,f32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float32)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture3D, coordinate : i32x3, value : f32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float32)->returnTypeSymbol = &Float32Type;

    /// textureAtomicStore with Texture3D, Int32x3, UInt32
    TextureAtomicStore_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicStore_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicStore_Texture3D_UInt32_texture.type.modifiers = TextureAtomicStore_Texture3D_UInt32_texture_modifiers;
    TextureAtomicStore_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicStore_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicStore_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicStore_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicStore_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture3D_UInt32.name = TextureAtomicStore_Texture3D_UInt32_name;
    TextureAtomicStore_Texture3D_UInt32.backendIndex = 2603;
    TextureAtomicStore_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicStore_Texture3D_UInt32.parameters = TextureAtomicStore_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt32)->signature = "textureAtomicStore(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt32)->name = "textureAtomicStore(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt32)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicStore with Texture3D, Int32x3, Int32
    TextureAtomicStore_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicStore_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicStore_Texture3D_Int32_texture.type.modifiers = TextureAtomicStore_Texture3D_Int32_texture_modifiers;
    TextureAtomicStore_Texture3D_Int32_texture.type.modifierValues = TextureAtomicStore_Texture3D_Int32_texture_modifierValues;
    TextureAtomicStore_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicStore_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicStore_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture3D_Int32.name = TextureAtomicStore_Texture3D_Int32_name;
    TextureAtomicStore_Texture3D_Int32.backendIndex = 2604;
    TextureAtomicStore_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicStore_Texture3D_Int32.parameters = TextureAtomicStore_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int32)->signature = "textureAtomicStore(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int32)->name = "textureAtomicStore(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int32)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicStore with Texture3D, Int32x3, Float16
    TextureAtomicStore_Texture3D_Float16_texture.name = "texture"_c;
    TextureAtomicStore_Texture3D_Float16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicStore_Texture3D_Float16_texture.type.modifiers = TextureAtomicStore_Texture3D_Float16_texture_modifiers;
    TextureAtomicStore_Texture3D_Float16_texture.type.modifierValues = TextureAtomicStore_Texture3D_Float16_texture_modifierValues;
    TextureAtomicStore_Texture3D_Float16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture3D_Float16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_Texture3D_Float16_value.name = "value"_c;
    TextureAtomicStore_Texture3D_Float16_value.type = Type::FullType{ Float16Type.name };
    TextureAtomicStore_Texture3D_Float16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture3D_Float16.name = TextureAtomicStore_Texture3D_Float16_name;
    TextureAtomicStore_Texture3D_Float16.backendIndex = 2605;
    TextureAtomicStore_Texture3D_Float16.returnType = Type::FullType { Float16Type.name };
    TextureAtomicStore_Texture3D_Float16.parameters = TextureAtomicStore_Texture3D_Float16_args;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float16)->signature = "textureAtomicStore(uniform *texture3D,i32x3,f16) f16"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float16)->name = "textureAtomicStore(uniform *texture3D,i32x3,f16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float16)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture3D, coordinate : i32x3, value : f16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Float16)->returnTypeSymbol = &Float16Type;

    /// textureAtomicStore with Texture3D, Int32x3, UInt16
    TextureAtomicStore_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicStore_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicStore_Texture3D_UInt16_texture.type.modifiers = TextureAtomicStore_Texture3D_UInt16_texture_modifiers;
    TextureAtomicStore_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicStore_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicStore_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicStore_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicStore_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture3D_UInt16.name = TextureAtomicStore_Texture3D_UInt16_name;
    TextureAtomicStore_Texture3D_UInt16.backendIndex = 2606;
    TextureAtomicStore_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicStore_Texture3D_UInt16.parameters = TextureAtomicStore_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt16)->signature = "textureAtomicStore(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt16)->name = "textureAtomicStore(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt16)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicStore with Texture3D, Int32x3, Int16
    TextureAtomicStore_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicStore_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicStore_Texture3D_Int16_texture.type.modifiers = TextureAtomicStore_Texture3D_Int16_texture_modifiers;
    TextureAtomicStore_Texture3D_Int16_texture.type.modifierValues = TextureAtomicStore_Texture3D_Int16_texture_modifierValues;
    TextureAtomicStore_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicStore_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicStore_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture3D_Int16.name = TextureAtomicStore_Texture3D_Int16_name;
    TextureAtomicStore_Texture3D_Int16.backendIndex = 2607;
    TextureAtomicStore_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicStore_Texture3D_Int16.parameters = TextureAtomicStore_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int16)->signature = "textureAtomicStore(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int16)->name = "textureAtomicStore(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int16)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicStore with TextureCube, Int32x3, Float32
    TextureAtomicStore_TextureCube_Float32_texture.name = "texture"_c;
    TextureAtomicStore_TextureCube_Float32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicStore_TextureCube_Float32_texture.type.modifiers = TextureAtomicStore_TextureCube_Float32_texture_modifiers;
    TextureAtomicStore_TextureCube_Float32_texture.type.modifierValues = TextureAtomicStore_TextureCube_Float32_texture_modifierValues;
    TextureAtomicStore_TextureCube_Float32_coordinate.name = "coordinate"_c;
    TextureAtomicStore_TextureCube_Float32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_TextureCube_Float32_value.name = "value"_c;
    TextureAtomicStore_TextureCube_Float32_value.type = Type::FullType{ Float32Type.name };
    TextureAtomicStore_TextureCube_Float32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_TextureCube_Float32.name = TextureAtomicStore_TextureCube_Float32_name;
    TextureAtomicStore_TextureCube_Float32.backendIndex = 2608;
    TextureAtomicStore_TextureCube_Float32.returnType = Type::FullType { Float32Type.name };
    TextureAtomicStore_TextureCube_Float32.parameters = TextureAtomicStore_TextureCube_Float32_args;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float32)->signature = "textureAtomicStore(uniform *textureCube,i32x3,f32) f32"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float32)->name = "textureAtomicStore(uniform *textureCube,i32x3,f32)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float32)->nameWithVarNames = "textureAtomicStore(texture : uniform *textureCube, coordinate : i32x3, value : f32)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float32)->returnTypeSymbol = &Float32Type;

    /// textureAtomicStore with TextureCube, Int32x3, UInt32
    TextureAtomicStore_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicStore_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicStore_TextureCube_UInt32_texture.type.modifiers = TextureAtomicStore_TextureCube_UInt32_texture_modifiers;
    TextureAtomicStore_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicStore_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicStore_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicStore_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicStore_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicStore_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_TextureCube_UInt32.name = TextureAtomicStore_TextureCube_UInt32_name;
    TextureAtomicStore_TextureCube_UInt32.backendIndex = 2609;
    TextureAtomicStore_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicStore_TextureCube_UInt32.parameters = TextureAtomicStore_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt32)->signature = "textureAtomicStore(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt32)->name = "textureAtomicStore(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt32)->nameWithVarNames = "textureAtomicStore(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicStore with TextureCube, Int32x3, Int32
    TextureAtomicStore_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicStore_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicStore_TextureCube_Int32_texture.type.modifiers = TextureAtomicStore_TextureCube_Int32_texture_modifiers;
    TextureAtomicStore_TextureCube_Int32_texture.type.modifierValues = TextureAtomicStore_TextureCube_Int32_texture_modifierValues;
    TextureAtomicStore_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicStore_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicStore_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicStore_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_TextureCube_Int32.name = TextureAtomicStore_TextureCube_Int32_name;
    TextureAtomicStore_TextureCube_Int32.backendIndex = 2610;
    TextureAtomicStore_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicStore_TextureCube_Int32.parameters = TextureAtomicStore_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int32)->signature = "textureAtomicStore(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int32)->name = "textureAtomicStore(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int32)->nameWithVarNames = "textureAtomicStore(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicStore with TextureCube, Int32x3, Float16
    TextureAtomicStore_TextureCube_Float16_texture.name = "texture"_c;
    TextureAtomicStore_TextureCube_Float16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicStore_TextureCube_Float16_texture.type.modifiers = TextureAtomicStore_TextureCube_Float16_texture_modifiers;
    TextureAtomicStore_TextureCube_Float16_texture.type.modifierValues = TextureAtomicStore_TextureCube_Float16_texture_modifierValues;
    TextureAtomicStore_TextureCube_Float16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_TextureCube_Float16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_TextureCube_Float16_value.name = "value"_c;
    TextureAtomicStore_TextureCube_Float16_value.type = Type::FullType{ Float16Type.name };
    TextureAtomicStore_TextureCube_Float16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_TextureCube_Float16.name = TextureAtomicStore_TextureCube_Float16_name;
    TextureAtomicStore_TextureCube_Float16.backendIndex = 2611;
    TextureAtomicStore_TextureCube_Float16.returnType = Type::FullType { Float16Type.name };
    TextureAtomicStore_TextureCube_Float16.parameters = TextureAtomicStore_TextureCube_Float16_args;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float16)->signature = "textureAtomicStore(uniform *textureCube,i32x3,f16) f16"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float16)->name = "textureAtomicStore(uniform *textureCube,i32x3,f16)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float16)->nameWithVarNames = "textureAtomicStore(texture : uniform *textureCube, coordinate : i32x3, value : f16)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Float16)->returnTypeSymbol = &Float16Type;

    /// textureAtomicStore with TextureCube, Int32x3, UInt16
    TextureAtomicStore_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicStore_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicStore_TextureCube_UInt16_texture.type.modifiers = TextureAtomicStore_TextureCube_UInt16_texture_modifiers;
    TextureAtomicStore_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicStore_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicStore_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicStore_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicStore_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_TextureCube_UInt16.name = TextureAtomicStore_TextureCube_UInt16_name;
    TextureAtomicStore_TextureCube_UInt16.backendIndex = 2612;
    TextureAtomicStore_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicStore_TextureCube_UInt16.parameters = TextureAtomicStore_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt16)->signature = "textureAtomicStore(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt16)->name = "textureAtomicStore(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt16)->nameWithVarNames = "textureAtomicStore(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicStore with TextureCube, Int32x3, Int16
    TextureAtomicStore_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicStore_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicStore_TextureCube_Int16_texture.type.modifiers = TextureAtomicStore_TextureCube_Int16_texture_modifiers;
    TextureAtomicStore_TextureCube_Int16_texture.type.modifierValues = TextureAtomicStore_TextureCube_Int16_texture_modifierValues;
    TextureAtomicStore_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicStore_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicStore_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_TextureCube_Int16.name = TextureAtomicStore_TextureCube_Int16_name;
    TextureAtomicStore_TextureCube_Int16.backendIndex = 2613;
    TextureAtomicStore_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicStore_TextureCube_Int16.parameters = TextureAtomicStore_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int16)->signature = "textureAtomicStore(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int16)->name = "textureAtomicStore(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int16)->nameWithVarNames = "textureAtomicStore(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicStore with Texture1DArray, Int32x2, Float32
    TextureAtomicStore_Texture1DArray_Float32_texture.name = "texture"_c;
    TextureAtomicStore_Texture1DArray_Float32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicStore_Texture1DArray_Float32_texture.type.modifiers = TextureAtomicStore_Texture1DArray_Float32_texture_modifiers;
    TextureAtomicStore_Texture1DArray_Float32_texture.type.modifierValues = TextureAtomicStore_Texture1DArray_Float32_texture_modifierValues;
    TextureAtomicStore_Texture1DArray_Float32_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture1DArray_Float32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicStore_Texture1DArray_Float32_value.name = "value"_c;
    TextureAtomicStore_Texture1DArray_Float32_value.type = Type::FullType{ Float32Type.name };
    TextureAtomicStore_Texture1DArray_Float32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture1DArray_Float32.name = TextureAtomicStore_Texture1DArray_Float32_name;
    TextureAtomicStore_Texture1DArray_Float32.backendIndex = 2614;
    TextureAtomicStore_Texture1DArray_Float32.returnType = Type::FullType { Float32Type.name };
    TextureAtomicStore_Texture1DArray_Float32.parameters = TextureAtomicStore_Texture1DArray_Float32_args;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float32)->signature = "textureAtomicStore(uniform *texture1DArray,i32x2,f32) f32"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float32)->name = "textureAtomicStore(uniform *texture1DArray,i32x2,f32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float32)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture1DArray, coordinate : i32x2, value : f32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float32)->returnTypeSymbol = &Float32Type;

    /// textureAtomicStore with Texture1DArray, Int32x2, UInt32
    TextureAtomicStore_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicStore_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicStore_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicStore_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicStore_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicStore_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicStore_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicStore_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicStore_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicStore_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture1DArray_UInt32.name = TextureAtomicStore_Texture1DArray_UInt32_name;
    TextureAtomicStore_Texture1DArray_UInt32.backendIndex = 2615;
    TextureAtomicStore_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicStore_Texture1DArray_UInt32.parameters = TextureAtomicStore_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt32)->signature = "textureAtomicStore(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt32)->name = "textureAtomicStore(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicStore with Texture1DArray, Int32x2, Int32
    TextureAtomicStore_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicStore_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicStore_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicStore_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicStore_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicStore_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicStore_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicStore_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicStore_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicStore_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture1DArray_Int32.name = TextureAtomicStore_Texture1DArray_Int32_name;
    TextureAtomicStore_Texture1DArray_Int32.backendIndex = 2616;
    TextureAtomicStore_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicStore_Texture1DArray_Int32.parameters = TextureAtomicStore_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int32)->signature = "textureAtomicStore(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int32)->name = "textureAtomicStore(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicStore with Texture1DArray, Int32x2, Float16
    TextureAtomicStore_Texture1DArray_Float16_texture.name = "texture"_c;
    TextureAtomicStore_Texture1DArray_Float16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicStore_Texture1DArray_Float16_texture.type.modifiers = TextureAtomicStore_Texture1DArray_Float16_texture_modifiers;
    TextureAtomicStore_Texture1DArray_Float16_texture.type.modifierValues = TextureAtomicStore_Texture1DArray_Float16_texture_modifierValues;
    TextureAtomicStore_Texture1DArray_Float16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture1DArray_Float16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicStore_Texture1DArray_Float16_value.name = "value"_c;
    TextureAtomicStore_Texture1DArray_Float16_value.type = Type::FullType{ Float16Type.name };
    TextureAtomicStore_Texture1DArray_Float16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture1DArray_Float16.name = TextureAtomicStore_Texture1DArray_Float16_name;
    TextureAtomicStore_Texture1DArray_Float16.backendIndex = 2617;
    TextureAtomicStore_Texture1DArray_Float16.returnType = Type::FullType { Float16Type.name };
    TextureAtomicStore_Texture1DArray_Float16.parameters = TextureAtomicStore_Texture1DArray_Float16_args;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float16)->signature = "textureAtomicStore(uniform *texture1DArray,i32x2,f16) f16"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float16)->name = "textureAtomicStore(uniform *texture1DArray,i32x2,f16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float16)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture1DArray, coordinate : i32x2, value : f16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Float16)->returnTypeSymbol = &Float16Type;

    /// textureAtomicStore with Texture1DArray, Int32x2, UInt16
    TextureAtomicStore_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicStore_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicStore_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicStore_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicStore_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicStore_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicStore_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicStore_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicStore_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicStore_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture1DArray_UInt16.name = TextureAtomicStore_Texture1DArray_UInt16_name;
    TextureAtomicStore_Texture1DArray_UInt16.backendIndex = 2618;
    TextureAtomicStore_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicStore_Texture1DArray_UInt16.parameters = TextureAtomicStore_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt16)->signature = "textureAtomicStore(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt16)->name = "textureAtomicStore(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicStore with Texture1DArray, Int32x2, Int16
    TextureAtomicStore_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicStore_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicStore_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicStore_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicStore_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicStore_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicStore_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicStore_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicStore_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicStore_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture1DArray_Int16.name = TextureAtomicStore_Texture1DArray_Int16_name;
    TextureAtomicStore_Texture1DArray_Int16.backendIndex = 2619;
    TextureAtomicStore_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicStore_Texture1DArray_Int16.parameters = TextureAtomicStore_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int16)->signature = "textureAtomicStore(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int16)->name = "textureAtomicStore(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicStore with Texture2DArray, Int32x3, Float32
    TextureAtomicStore_Texture2DArray_Float32_texture.name = "texture"_c;
    TextureAtomicStore_Texture2DArray_Float32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicStore_Texture2DArray_Float32_texture.type.modifiers = TextureAtomicStore_Texture2DArray_Float32_texture_modifiers;
    TextureAtomicStore_Texture2DArray_Float32_texture.type.modifierValues = TextureAtomicStore_Texture2DArray_Float32_texture_modifierValues;
    TextureAtomicStore_Texture2DArray_Float32_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture2DArray_Float32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_Texture2DArray_Float32_value.name = "value"_c;
    TextureAtomicStore_Texture2DArray_Float32_value.type = Type::FullType{ Float32Type.name };
    TextureAtomicStore_Texture2DArray_Float32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture2DArray_Float32.name = TextureAtomicStore_Texture2DArray_Float32_name;
    TextureAtomicStore_Texture2DArray_Float32.backendIndex = 2620;
    TextureAtomicStore_Texture2DArray_Float32.returnType = Type::FullType { Float32Type.name };
    TextureAtomicStore_Texture2DArray_Float32.parameters = TextureAtomicStore_Texture2DArray_Float32_args;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float32)->signature = "textureAtomicStore(uniform *texture2DArray,i32x3,f32) f32"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float32)->name = "textureAtomicStore(uniform *texture2DArray,i32x3,f32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float32)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture2DArray, coordinate : i32x3, value : f32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float32)->returnTypeSymbol = &Float32Type;

    /// textureAtomicStore with Texture2DArray, Int32x3, UInt32
    TextureAtomicStore_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicStore_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicStore_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicStore_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicStore_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicStore_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicStore_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicStore_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicStore_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture2DArray_UInt32.name = TextureAtomicStore_Texture2DArray_UInt32_name;
    TextureAtomicStore_Texture2DArray_UInt32.backendIndex = 2621;
    TextureAtomicStore_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicStore_Texture2DArray_UInt32.parameters = TextureAtomicStore_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt32)->signature = "textureAtomicStore(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt32)->name = "textureAtomicStore(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicStore with Texture2DArray, Int32x3, Int32
    TextureAtomicStore_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicStore_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicStore_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicStore_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicStore_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicStore_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicStore_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicStore_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicStore_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture2DArray_Int32.name = TextureAtomicStore_Texture2DArray_Int32_name;
    TextureAtomicStore_Texture2DArray_Int32.backendIndex = 2622;
    TextureAtomicStore_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicStore_Texture2DArray_Int32.parameters = TextureAtomicStore_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int32)->signature = "textureAtomicStore(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int32)->name = "textureAtomicStore(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicStore with Texture2DArray, Int32x3, Float16
    TextureAtomicStore_Texture2DArray_Float16_texture.name = "texture"_c;
    TextureAtomicStore_Texture2DArray_Float16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicStore_Texture2DArray_Float16_texture.type.modifiers = TextureAtomicStore_Texture2DArray_Float16_texture_modifiers;
    TextureAtomicStore_Texture2DArray_Float16_texture.type.modifierValues = TextureAtomicStore_Texture2DArray_Float16_texture_modifierValues;
    TextureAtomicStore_Texture2DArray_Float16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture2DArray_Float16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_Texture2DArray_Float16_value.name = "value"_c;
    TextureAtomicStore_Texture2DArray_Float16_value.type = Type::FullType{ Float16Type.name };
    TextureAtomicStore_Texture2DArray_Float16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture2DArray_Float16.name = TextureAtomicStore_Texture2DArray_Float16_name;
    TextureAtomicStore_Texture2DArray_Float16.backendIndex = 2623;
    TextureAtomicStore_Texture2DArray_Float16.returnType = Type::FullType { Float16Type.name };
    TextureAtomicStore_Texture2DArray_Float16.parameters = TextureAtomicStore_Texture2DArray_Float16_args;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float16)->signature = "textureAtomicStore(uniform *texture2DArray,i32x3,f16) f16"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float16)->name = "textureAtomicStore(uniform *texture2DArray,i32x3,f16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float16)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture2DArray, coordinate : i32x3, value : f16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Float16)->returnTypeSymbol = &Float16Type;

    /// textureAtomicStore with Texture2DArray, Int32x3, UInt16
    TextureAtomicStore_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicStore_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicStore_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicStore_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicStore_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicStore_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicStore_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicStore_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicStore_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture2DArray_UInt16.name = TextureAtomicStore_Texture2DArray_UInt16_name;
    TextureAtomicStore_Texture2DArray_UInt16.backendIndex = 2624;
    TextureAtomicStore_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicStore_Texture2DArray_UInt16.parameters = TextureAtomicStore_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt16)->signature = "textureAtomicStore(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt16)->name = "textureAtomicStore(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicStore with Texture2DArray, Int32x3, Int16
    TextureAtomicStore_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicStore_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicStore_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicStore_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicStore_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicStore_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicStore_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicStore_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicStore_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicStore_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_Texture2DArray_Int16.name = TextureAtomicStore_Texture2DArray_Int16_name;
    TextureAtomicStore_Texture2DArray_Int16.backendIndex = 2625;
    TextureAtomicStore_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicStore_Texture2DArray_Int16.parameters = TextureAtomicStore_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int16)->signature = "textureAtomicStore(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int16)->name = "textureAtomicStore(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicStore(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicStore_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicStore with TextureCubeArray, Int32x4, Float32
    TextureAtomicStore_TextureCubeArray_Float32_texture.name = "texture"_c;
    TextureAtomicStore_TextureCubeArray_Float32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicStore_TextureCubeArray_Float32_texture.type.modifiers = TextureAtomicStore_TextureCubeArray_Float32_texture_modifiers;
    TextureAtomicStore_TextureCubeArray_Float32_texture.type.modifierValues = TextureAtomicStore_TextureCubeArray_Float32_texture_modifierValues;
    TextureAtomicStore_TextureCubeArray_Float32_coordinate.name = "coordinate"_c;
    TextureAtomicStore_TextureCubeArray_Float32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicStore_TextureCubeArray_Float32_value.name = "value"_c;
    TextureAtomicStore_TextureCubeArray_Float32_value.type = Type::FullType{ Float32Type.name };
    TextureAtomicStore_TextureCubeArray_Float32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_TextureCubeArray_Float32.name = TextureAtomicStore_TextureCubeArray_Float32_name;
    TextureAtomicStore_TextureCubeArray_Float32.backendIndex = 2626;
    TextureAtomicStore_TextureCubeArray_Float32.returnType = Type::FullType { Float32Type.name };
    TextureAtomicStore_TextureCubeArray_Float32.parameters = TextureAtomicStore_TextureCubeArray_Float32_args;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float32)->signature = "textureAtomicStore(uniform *textureCubeArray,i32x4,f32) f32"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float32)->name = "textureAtomicStore(uniform *textureCubeArray,i32x4,f32)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float32)->nameWithVarNames = "textureAtomicStore(texture : uniform *textureCubeArray, coordinate : i32x4, value : f32)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float32)->returnTypeSymbol = &Float32Type;

    /// textureAtomicStore with TextureCubeArray, Int32x4, UInt32
    TextureAtomicStore_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicStore_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicStore_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicStore_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicStore_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicStore_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicStore_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicStore_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicStore_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicStore_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicStore_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_TextureCubeArray_UInt32.name = TextureAtomicStore_TextureCubeArray_UInt32_name;
    TextureAtomicStore_TextureCubeArray_UInt32.backendIndex = 2627;
    TextureAtomicStore_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicStore_TextureCubeArray_UInt32.parameters = TextureAtomicStore_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt32)->signature = "textureAtomicStore(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt32)->name = "textureAtomicStore(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicStore(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicStore with TextureCubeArray, Int32x4, Int32
    TextureAtomicStore_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicStore_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicStore_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicStore_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicStore_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicStore_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicStore_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicStore_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicStore_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicStore_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicStore_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_TextureCubeArray_Int32.name = TextureAtomicStore_TextureCubeArray_Int32_name;
    TextureAtomicStore_TextureCubeArray_Int32.backendIndex = 2628;
    TextureAtomicStore_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicStore_TextureCubeArray_Int32.parameters = TextureAtomicStore_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int32)->signature = "textureAtomicStore(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int32)->name = "textureAtomicStore(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicStore(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicStore with TextureCubeArray, Int32x4, Float16
    TextureAtomicStore_TextureCubeArray_Float16_texture.name = "texture"_c;
    TextureAtomicStore_TextureCubeArray_Float16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicStore_TextureCubeArray_Float16_texture.type.modifiers = TextureAtomicStore_TextureCubeArray_Float16_texture_modifiers;
    TextureAtomicStore_TextureCubeArray_Float16_texture.type.modifierValues = TextureAtomicStore_TextureCubeArray_Float16_texture_modifierValues;
    TextureAtomicStore_TextureCubeArray_Float16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_TextureCubeArray_Float16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicStore_TextureCubeArray_Float16_value.name = "value"_c;
    TextureAtomicStore_TextureCubeArray_Float16_value.type = Type::FullType{ Float16Type.name };
    TextureAtomicStore_TextureCubeArray_Float16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_TextureCubeArray_Float16.name = TextureAtomicStore_TextureCubeArray_Float16_name;
    TextureAtomicStore_TextureCubeArray_Float16.backendIndex = 2629;
    TextureAtomicStore_TextureCubeArray_Float16.returnType = Type::FullType { Float16Type.name };
    TextureAtomicStore_TextureCubeArray_Float16.parameters = TextureAtomicStore_TextureCubeArray_Float16_args;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float16)->signature = "textureAtomicStore(uniform *textureCubeArray,i32x4,f16) f16"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float16)->name = "textureAtomicStore(uniform *textureCubeArray,i32x4,f16)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float16)->nameWithVarNames = "textureAtomicStore(texture : uniform *textureCubeArray, coordinate : i32x4, value : f16)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Float16)->returnTypeSymbol = &Float16Type;

    /// textureAtomicStore with TextureCubeArray, Int32x4, UInt16
    TextureAtomicStore_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicStore_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicStore_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicStore_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicStore_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicStore_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicStore_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicStore_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicStore_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicStore_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_TextureCubeArray_UInt16.name = TextureAtomicStore_TextureCubeArray_UInt16_name;
    TextureAtomicStore_TextureCubeArray_UInt16.backendIndex = 2630;
    TextureAtomicStore_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicStore_TextureCubeArray_UInt16.parameters = TextureAtomicStore_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt16)->signature = "textureAtomicStore(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt16)->name = "textureAtomicStore(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicStore(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicStore with TextureCubeArray, Int32x4, Int16
    TextureAtomicStore_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicStore_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicStore_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicStore_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicStore_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicStore_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicStore_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicStore_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicStore_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicStore_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicStore_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicStore_TextureCubeArray_Int16.name = TextureAtomicStore_TextureCubeArray_Int16_name;
    TextureAtomicStore_TextureCubeArray_Int16.backendIndex = 2631;
    TextureAtomicStore_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicStore_TextureCubeArray_Int16.parameters = TextureAtomicStore_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int16)->signature = "textureAtomicStore(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int16)->name = "textureAtomicStore(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicStore(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicStore_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicExchange with Texture1D, Int32, Float32
    TextureAtomicExchange_Texture1D_Float32_texture.name = "texture"_c;
    TextureAtomicExchange_Texture1D_Float32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicExchange_Texture1D_Float32_texture.type.modifiers = TextureAtomicExchange_Texture1D_Float32_texture_modifiers;
    TextureAtomicExchange_Texture1D_Float32_texture.type.modifierValues = TextureAtomicExchange_Texture1D_Float32_texture_modifierValues;
    TextureAtomicExchange_Texture1D_Float32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture1D_Float32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicExchange_Texture1D_Float32_value.name = "value"_c;
    TextureAtomicExchange_Texture1D_Float32_value.type = Type::FullType{ Float32Type.name };
    TextureAtomicExchange_Texture1D_Float32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture1D_Float32.name = TextureAtomicExchange_Texture1D_Float32_name;
    TextureAtomicExchange_Texture1D_Float32.backendIndex = 2632;
    TextureAtomicExchange_Texture1D_Float32.returnType = Type::FullType { Float32Type.name };
    TextureAtomicExchange_Texture1D_Float32.parameters = TextureAtomicExchange_Texture1D_Float32_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float32)->signature = "textureAtomicExchange(uniform *texture1D,i32,f32) f32"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float32)->name = "textureAtomicExchange(uniform *texture1D,i32,f32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture1D, coordinate : i32, value : f32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float32)->returnTypeSymbol = &Float32Type;

    /// textureAtomicExchange with Texture1D, Int32, UInt32
    TextureAtomicExchange_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicExchange_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicExchange_Texture1D_UInt32_texture.type.modifiers = TextureAtomicExchange_Texture1D_UInt32_texture_modifiers;
    TextureAtomicExchange_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicExchange_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicExchange_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicExchange_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicExchange_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicExchange_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture1D_UInt32.name = TextureAtomicExchange_Texture1D_UInt32_name;
    TextureAtomicExchange_Texture1D_UInt32.backendIndex = 2633;
    TextureAtomicExchange_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicExchange_Texture1D_UInt32.parameters = TextureAtomicExchange_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt32)->signature = "textureAtomicExchange(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt32)->name = "textureAtomicExchange(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicExchange with Texture1D, Int32, Int32
    TextureAtomicExchange_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicExchange_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicExchange_Texture1D_Int32_texture.type.modifiers = TextureAtomicExchange_Texture1D_Int32_texture_modifiers;
    TextureAtomicExchange_Texture1D_Int32_texture.type.modifierValues = TextureAtomicExchange_Texture1D_Int32_texture_modifierValues;
    TextureAtomicExchange_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicExchange_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicExchange_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicExchange_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture1D_Int32.name = TextureAtomicExchange_Texture1D_Int32_name;
    TextureAtomicExchange_Texture1D_Int32.backendIndex = 2634;
    TextureAtomicExchange_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicExchange_Texture1D_Int32.parameters = TextureAtomicExchange_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int32)->signature = "textureAtomicExchange(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int32)->name = "textureAtomicExchange(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicExchange with Texture1D, Int32, Float16
    TextureAtomicExchange_Texture1D_Float16_texture.name = "texture"_c;
    TextureAtomicExchange_Texture1D_Float16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicExchange_Texture1D_Float16_texture.type.modifiers = TextureAtomicExchange_Texture1D_Float16_texture_modifiers;
    TextureAtomicExchange_Texture1D_Float16_texture.type.modifierValues = TextureAtomicExchange_Texture1D_Float16_texture_modifierValues;
    TextureAtomicExchange_Texture1D_Float16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture1D_Float16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicExchange_Texture1D_Float16_value.name = "value"_c;
    TextureAtomicExchange_Texture1D_Float16_value.type = Type::FullType{ Float16Type.name };
    TextureAtomicExchange_Texture1D_Float16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture1D_Float16.name = TextureAtomicExchange_Texture1D_Float16_name;
    TextureAtomicExchange_Texture1D_Float16.backendIndex = 2635;
    TextureAtomicExchange_Texture1D_Float16.returnType = Type::FullType { Float16Type.name };
    TextureAtomicExchange_Texture1D_Float16.parameters = TextureAtomicExchange_Texture1D_Float16_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float16)->signature = "textureAtomicExchange(uniform *texture1D,i32,f16) f16"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float16)->name = "textureAtomicExchange(uniform *texture1D,i32,f16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture1D, coordinate : i32, value : f16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Float16)->returnTypeSymbol = &Float16Type;

    /// textureAtomicExchange with Texture1D, Int32, UInt16
    TextureAtomicExchange_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicExchange_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicExchange_Texture1D_UInt16_texture.type.modifiers = TextureAtomicExchange_Texture1D_UInt16_texture_modifiers;
    TextureAtomicExchange_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicExchange_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicExchange_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicExchange_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicExchange_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicExchange_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture1D_UInt16.name = TextureAtomicExchange_Texture1D_UInt16_name;
    TextureAtomicExchange_Texture1D_UInt16.backendIndex = 2636;
    TextureAtomicExchange_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicExchange_Texture1D_UInt16.parameters = TextureAtomicExchange_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt16)->signature = "textureAtomicExchange(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt16)->name = "textureAtomicExchange(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicExchange with Texture1D, Int32, Int16
    TextureAtomicExchange_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicExchange_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicExchange_Texture1D_Int16_texture.type.modifiers = TextureAtomicExchange_Texture1D_Int16_texture_modifiers;
    TextureAtomicExchange_Texture1D_Int16_texture.type.modifierValues = TextureAtomicExchange_Texture1D_Int16_texture_modifierValues;
    TextureAtomicExchange_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicExchange_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicExchange_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicExchange_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture1D_Int16.name = TextureAtomicExchange_Texture1D_Int16_name;
    TextureAtomicExchange_Texture1D_Int16.backendIndex = 2637;
    TextureAtomicExchange_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicExchange_Texture1D_Int16.parameters = TextureAtomicExchange_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int16)->signature = "textureAtomicExchange(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int16)->name = "textureAtomicExchange(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicExchange with Texture2D, Int32x2, Float32
    TextureAtomicExchange_Texture2D_Float32_texture.name = "texture"_c;
    TextureAtomicExchange_Texture2D_Float32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicExchange_Texture2D_Float32_texture.type.modifiers = TextureAtomicExchange_Texture2D_Float32_texture_modifiers;
    TextureAtomicExchange_Texture2D_Float32_texture.type.modifierValues = TextureAtomicExchange_Texture2D_Float32_texture_modifierValues;
    TextureAtomicExchange_Texture2D_Float32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture2D_Float32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicExchange_Texture2D_Float32_value.name = "value"_c;
    TextureAtomicExchange_Texture2D_Float32_value.type = Type::FullType{ Float32Type.name };
    TextureAtomicExchange_Texture2D_Float32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture2D_Float32.name = TextureAtomicExchange_Texture2D_Float32_name;
    TextureAtomicExchange_Texture2D_Float32.backendIndex = 2638;
    TextureAtomicExchange_Texture2D_Float32.returnType = Type::FullType { Float32Type.name };
    TextureAtomicExchange_Texture2D_Float32.parameters = TextureAtomicExchange_Texture2D_Float32_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float32)->signature = "textureAtomicExchange(uniform *texture2D,i32x2,f32) f32"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float32)->name = "textureAtomicExchange(uniform *texture2D,i32x2,f32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture2D, coordinate : i32x2, value : f32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float32)->returnTypeSymbol = &Float32Type;

    /// textureAtomicExchange with Texture2D, Int32x2, UInt32
    TextureAtomicExchange_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicExchange_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicExchange_Texture2D_UInt32_texture.type.modifiers = TextureAtomicExchange_Texture2D_UInt32_texture_modifiers;
    TextureAtomicExchange_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicExchange_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicExchange_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicExchange_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicExchange_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicExchange_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture2D_UInt32.name = TextureAtomicExchange_Texture2D_UInt32_name;
    TextureAtomicExchange_Texture2D_UInt32.backendIndex = 2639;
    TextureAtomicExchange_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicExchange_Texture2D_UInt32.parameters = TextureAtomicExchange_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt32)->signature = "textureAtomicExchange(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt32)->name = "textureAtomicExchange(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicExchange with Texture2D, Int32x2, Int32
    TextureAtomicExchange_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicExchange_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicExchange_Texture2D_Int32_texture.type.modifiers = TextureAtomicExchange_Texture2D_Int32_texture_modifiers;
    TextureAtomicExchange_Texture2D_Int32_texture.type.modifierValues = TextureAtomicExchange_Texture2D_Int32_texture_modifierValues;
    TextureAtomicExchange_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicExchange_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicExchange_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicExchange_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture2D_Int32.name = TextureAtomicExchange_Texture2D_Int32_name;
    TextureAtomicExchange_Texture2D_Int32.backendIndex = 2640;
    TextureAtomicExchange_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicExchange_Texture2D_Int32.parameters = TextureAtomicExchange_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int32)->signature = "textureAtomicExchange(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int32)->name = "textureAtomicExchange(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicExchange with Texture2D, Int32x2, Float16
    TextureAtomicExchange_Texture2D_Float16_texture.name = "texture"_c;
    TextureAtomicExchange_Texture2D_Float16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicExchange_Texture2D_Float16_texture.type.modifiers = TextureAtomicExchange_Texture2D_Float16_texture_modifiers;
    TextureAtomicExchange_Texture2D_Float16_texture.type.modifierValues = TextureAtomicExchange_Texture2D_Float16_texture_modifierValues;
    TextureAtomicExchange_Texture2D_Float16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture2D_Float16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicExchange_Texture2D_Float16_value.name = "value"_c;
    TextureAtomicExchange_Texture2D_Float16_value.type = Type::FullType{ Float16Type.name };
    TextureAtomicExchange_Texture2D_Float16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture2D_Float16.name = TextureAtomicExchange_Texture2D_Float16_name;
    TextureAtomicExchange_Texture2D_Float16.backendIndex = 2641;
    TextureAtomicExchange_Texture2D_Float16.returnType = Type::FullType { Float16Type.name };
    TextureAtomicExchange_Texture2D_Float16.parameters = TextureAtomicExchange_Texture2D_Float16_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float16)->signature = "textureAtomicExchange(uniform *texture2D,i32x2,f16) f16"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float16)->name = "textureAtomicExchange(uniform *texture2D,i32x2,f16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture2D, coordinate : i32x2, value : f16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Float16)->returnTypeSymbol = &Float16Type;

    /// textureAtomicExchange with Texture2D, Int32x2, UInt16
    TextureAtomicExchange_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicExchange_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicExchange_Texture2D_UInt16_texture.type.modifiers = TextureAtomicExchange_Texture2D_UInt16_texture_modifiers;
    TextureAtomicExchange_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicExchange_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicExchange_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicExchange_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicExchange_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicExchange_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture2D_UInt16.name = TextureAtomicExchange_Texture2D_UInt16_name;
    TextureAtomicExchange_Texture2D_UInt16.backendIndex = 2642;
    TextureAtomicExchange_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicExchange_Texture2D_UInt16.parameters = TextureAtomicExchange_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt16)->signature = "textureAtomicExchange(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt16)->name = "textureAtomicExchange(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicExchange with Texture2D, Int32x2, Int16
    TextureAtomicExchange_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicExchange_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicExchange_Texture2D_Int16_texture.type.modifiers = TextureAtomicExchange_Texture2D_Int16_texture_modifiers;
    TextureAtomicExchange_Texture2D_Int16_texture.type.modifierValues = TextureAtomicExchange_Texture2D_Int16_texture_modifierValues;
    TextureAtomicExchange_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicExchange_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicExchange_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicExchange_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture2D_Int16.name = TextureAtomicExchange_Texture2D_Int16_name;
    TextureAtomicExchange_Texture2D_Int16.backendIndex = 2643;
    TextureAtomicExchange_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicExchange_Texture2D_Int16.parameters = TextureAtomicExchange_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int16)->signature = "textureAtomicExchange(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int16)->name = "textureAtomicExchange(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicExchange with Texture3D, Int32x3, Float32
    TextureAtomicExchange_Texture3D_Float32_texture.name = "texture"_c;
    TextureAtomicExchange_Texture3D_Float32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicExchange_Texture3D_Float32_texture.type.modifiers = TextureAtomicExchange_Texture3D_Float32_texture_modifiers;
    TextureAtomicExchange_Texture3D_Float32_texture.type.modifierValues = TextureAtomicExchange_Texture3D_Float32_texture_modifierValues;
    TextureAtomicExchange_Texture3D_Float32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture3D_Float32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_Texture3D_Float32_value.name = "value"_c;
    TextureAtomicExchange_Texture3D_Float32_value.type = Type::FullType{ Float32Type.name };
    TextureAtomicExchange_Texture3D_Float32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture3D_Float32.name = TextureAtomicExchange_Texture3D_Float32_name;
    TextureAtomicExchange_Texture3D_Float32.backendIndex = 2644;
    TextureAtomicExchange_Texture3D_Float32.returnType = Type::FullType { Float32Type.name };
    TextureAtomicExchange_Texture3D_Float32.parameters = TextureAtomicExchange_Texture3D_Float32_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float32)->signature = "textureAtomicExchange(uniform *texture3D,i32x3,f32) f32"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float32)->name = "textureAtomicExchange(uniform *texture3D,i32x3,f32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture3D, coordinate : i32x3, value : f32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float32)->returnTypeSymbol = &Float32Type;

    /// textureAtomicExchange with Texture3D, Int32x3, UInt32
    TextureAtomicExchange_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicExchange_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicExchange_Texture3D_UInt32_texture.type.modifiers = TextureAtomicExchange_Texture3D_UInt32_texture_modifiers;
    TextureAtomicExchange_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicExchange_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicExchange_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicExchange_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicExchange_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture3D_UInt32.name = TextureAtomicExchange_Texture3D_UInt32_name;
    TextureAtomicExchange_Texture3D_UInt32.backendIndex = 2645;
    TextureAtomicExchange_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicExchange_Texture3D_UInt32.parameters = TextureAtomicExchange_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt32)->signature = "textureAtomicExchange(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt32)->name = "textureAtomicExchange(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicExchange with Texture3D, Int32x3, Int32
    TextureAtomicExchange_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicExchange_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicExchange_Texture3D_Int32_texture.type.modifiers = TextureAtomicExchange_Texture3D_Int32_texture_modifiers;
    TextureAtomicExchange_Texture3D_Int32_texture.type.modifierValues = TextureAtomicExchange_Texture3D_Int32_texture_modifierValues;
    TextureAtomicExchange_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicExchange_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicExchange_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture3D_Int32.name = TextureAtomicExchange_Texture3D_Int32_name;
    TextureAtomicExchange_Texture3D_Int32.backendIndex = 2646;
    TextureAtomicExchange_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicExchange_Texture3D_Int32.parameters = TextureAtomicExchange_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int32)->signature = "textureAtomicExchange(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int32)->name = "textureAtomicExchange(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicExchange with Texture3D, Int32x3, Float16
    TextureAtomicExchange_Texture3D_Float16_texture.name = "texture"_c;
    TextureAtomicExchange_Texture3D_Float16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicExchange_Texture3D_Float16_texture.type.modifiers = TextureAtomicExchange_Texture3D_Float16_texture_modifiers;
    TextureAtomicExchange_Texture3D_Float16_texture.type.modifierValues = TextureAtomicExchange_Texture3D_Float16_texture_modifierValues;
    TextureAtomicExchange_Texture3D_Float16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture3D_Float16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_Texture3D_Float16_value.name = "value"_c;
    TextureAtomicExchange_Texture3D_Float16_value.type = Type::FullType{ Float16Type.name };
    TextureAtomicExchange_Texture3D_Float16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture3D_Float16.name = TextureAtomicExchange_Texture3D_Float16_name;
    TextureAtomicExchange_Texture3D_Float16.backendIndex = 2647;
    TextureAtomicExchange_Texture3D_Float16.returnType = Type::FullType { Float16Type.name };
    TextureAtomicExchange_Texture3D_Float16.parameters = TextureAtomicExchange_Texture3D_Float16_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float16)->signature = "textureAtomicExchange(uniform *texture3D,i32x3,f16) f16"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float16)->name = "textureAtomicExchange(uniform *texture3D,i32x3,f16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture3D, coordinate : i32x3, value : f16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Float16)->returnTypeSymbol = &Float16Type;

    /// textureAtomicExchange with Texture3D, Int32x3, UInt16
    TextureAtomicExchange_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicExchange_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicExchange_Texture3D_UInt16_texture.type.modifiers = TextureAtomicExchange_Texture3D_UInt16_texture_modifiers;
    TextureAtomicExchange_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicExchange_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicExchange_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicExchange_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicExchange_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture3D_UInt16.name = TextureAtomicExchange_Texture3D_UInt16_name;
    TextureAtomicExchange_Texture3D_UInt16.backendIndex = 2648;
    TextureAtomicExchange_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicExchange_Texture3D_UInt16.parameters = TextureAtomicExchange_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt16)->signature = "textureAtomicExchange(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt16)->name = "textureAtomicExchange(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicExchange with Texture3D, Int32x3, Int16
    TextureAtomicExchange_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicExchange_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicExchange_Texture3D_Int16_texture.type.modifiers = TextureAtomicExchange_Texture3D_Int16_texture_modifiers;
    TextureAtomicExchange_Texture3D_Int16_texture.type.modifierValues = TextureAtomicExchange_Texture3D_Int16_texture_modifierValues;
    TextureAtomicExchange_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicExchange_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicExchange_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture3D_Int16.name = TextureAtomicExchange_Texture3D_Int16_name;
    TextureAtomicExchange_Texture3D_Int16.backendIndex = 2649;
    TextureAtomicExchange_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicExchange_Texture3D_Int16.parameters = TextureAtomicExchange_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int16)->signature = "textureAtomicExchange(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int16)->name = "textureAtomicExchange(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicExchange with TextureCube, Int32x3, Float32
    TextureAtomicExchange_TextureCube_Float32_texture.name = "texture"_c;
    TextureAtomicExchange_TextureCube_Float32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicExchange_TextureCube_Float32_texture.type.modifiers = TextureAtomicExchange_TextureCube_Float32_texture_modifiers;
    TextureAtomicExchange_TextureCube_Float32_texture.type.modifierValues = TextureAtomicExchange_TextureCube_Float32_texture_modifierValues;
    TextureAtomicExchange_TextureCube_Float32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_TextureCube_Float32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_TextureCube_Float32_value.name = "value"_c;
    TextureAtomicExchange_TextureCube_Float32_value.type = Type::FullType{ Float32Type.name };
    TextureAtomicExchange_TextureCube_Float32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_TextureCube_Float32.name = TextureAtomicExchange_TextureCube_Float32_name;
    TextureAtomicExchange_TextureCube_Float32.backendIndex = 2650;
    TextureAtomicExchange_TextureCube_Float32.returnType = Type::FullType { Float32Type.name };
    TextureAtomicExchange_TextureCube_Float32.parameters = TextureAtomicExchange_TextureCube_Float32_args;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float32)->signature = "textureAtomicExchange(uniform *textureCube,i32x3,f32) f32"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float32)->name = "textureAtomicExchange(uniform *textureCube,i32x3,f32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *textureCube, coordinate : i32x3, value : f32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float32)->returnTypeSymbol = &Float32Type;

    /// textureAtomicExchange with TextureCube, Int32x3, UInt32
    TextureAtomicExchange_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicExchange_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicExchange_TextureCube_UInt32_texture.type.modifiers = TextureAtomicExchange_TextureCube_UInt32_texture_modifiers;
    TextureAtomicExchange_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicExchange_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicExchange_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicExchange_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicExchange_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_TextureCube_UInt32.name = TextureAtomicExchange_TextureCube_UInt32_name;
    TextureAtomicExchange_TextureCube_UInt32.backendIndex = 2651;
    TextureAtomicExchange_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicExchange_TextureCube_UInt32.parameters = TextureAtomicExchange_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt32)->signature = "textureAtomicExchange(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt32)->name = "textureAtomicExchange(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicExchange with TextureCube, Int32x3, Int32
    TextureAtomicExchange_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicExchange_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicExchange_TextureCube_Int32_texture.type.modifiers = TextureAtomicExchange_TextureCube_Int32_texture_modifiers;
    TextureAtomicExchange_TextureCube_Int32_texture.type.modifierValues = TextureAtomicExchange_TextureCube_Int32_texture_modifierValues;
    TextureAtomicExchange_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicExchange_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicExchange_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_TextureCube_Int32.name = TextureAtomicExchange_TextureCube_Int32_name;
    TextureAtomicExchange_TextureCube_Int32.backendIndex = 2652;
    TextureAtomicExchange_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicExchange_TextureCube_Int32.parameters = TextureAtomicExchange_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int32)->signature = "textureAtomicExchange(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int32)->name = "textureAtomicExchange(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicExchange with TextureCube, Int32x3, Float16
    TextureAtomicExchange_TextureCube_Float16_texture.name = "texture"_c;
    TextureAtomicExchange_TextureCube_Float16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicExchange_TextureCube_Float16_texture.type.modifiers = TextureAtomicExchange_TextureCube_Float16_texture_modifiers;
    TextureAtomicExchange_TextureCube_Float16_texture.type.modifierValues = TextureAtomicExchange_TextureCube_Float16_texture_modifierValues;
    TextureAtomicExchange_TextureCube_Float16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_TextureCube_Float16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_TextureCube_Float16_value.name = "value"_c;
    TextureAtomicExchange_TextureCube_Float16_value.type = Type::FullType{ Float16Type.name };
    TextureAtomicExchange_TextureCube_Float16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_TextureCube_Float16.name = TextureAtomicExchange_TextureCube_Float16_name;
    TextureAtomicExchange_TextureCube_Float16.backendIndex = 2653;
    TextureAtomicExchange_TextureCube_Float16.returnType = Type::FullType { Float16Type.name };
    TextureAtomicExchange_TextureCube_Float16.parameters = TextureAtomicExchange_TextureCube_Float16_args;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float16)->signature = "textureAtomicExchange(uniform *textureCube,i32x3,f16) f16"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float16)->name = "textureAtomicExchange(uniform *textureCube,i32x3,f16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *textureCube, coordinate : i32x3, value : f16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Float16)->returnTypeSymbol = &Float16Type;

    /// textureAtomicExchange with TextureCube, Int32x3, UInt16
    TextureAtomicExchange_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicExchange_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicExchange_TextureCube_UInt16_texture.type.modifiers = TextureAtomicExchange_TextureCube_UInt16_texture_modifiers;
    TextureAtomicExchange_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicExchange_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicExchange_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicExchange_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicExchange_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_TextureCube_UInt16.name = TextureAtomicExchange_TextureCube_UInt16_name;
    TextureAtomicExchange_TextureCube_UInt16.backendIndex = 2654;
    TextureAtomicExchange_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicExchange_TextureCube_UInt16.parameters = TextureAtomicExchange_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt16)->signature = "textureAtomicExchange(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt16)->name = "textureAtomicExchange(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicExchange with TextureCube, Int32x3, Int16
    TextureAtomicExchange_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicExchange_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicExchange_TextureCube_Int16_texture.type.modifiers = TextureAtomicExchange_TextureCube_Int16_texture_modifiers;
    TextureAtomicExchange_TextureCube_Int16_texture.type.modifierValues = TextureAtomicExchange_TextureCube_Int16_texture_modifierValues;
    TextureAtomicExchange_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicExchange_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicExchange_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_TextureCube_Int16.name = TextureAtomicExchange_TextureCube_Int16_name;
    TextureAtomicExchange_TextureCube_Int16.backendIndex = 2655;
    TextureAtomicExchange_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicExchange_TextureCube_Int16.parameters = TextureAtomicExchange_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int16)->signature = "textureAtomicExchange(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int16)->name = "textureAtomicExchange(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicExchange with Texture1DArray, Int32x2, Float32
    TextureAtomicExchange_Texture1DArray_Float32_texture.name = "texture"_c;
    TextureAtomicExchange_Texture1DArray_Float32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicExchange_Texture1DArray_Float32_texture.type.modifiers = TextureAtomicExchange_Texture1DArray_Float32_texture_modifiers;
    TextureAtomicExchange_Texture1DArray_Float32_texture.type.modifierValues = TextureAtomicExchange_Texture1DArray_Float32_texture_modifierValues;
    TextureAtomicExchange_Texture1DArray_Float32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture1DArray_Float32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicExchange_Texture1DArray_Float32_value.name = "value"_c;
    TextureAtomicExchange_Texture1DArray_Float32_value.type = Type::FullType{ Float32Type.name };
    TextureAtomicExchange_Texture1DArray_Float32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture1DArray_Float32.name = TextureAtomicExchange_Texture1DArray_Float32_name;
    TextureAtomicExchange_Texture1DArray_Float32.backendIndex = 2656;
    TextureAtomicExchange_Texture1DArray_Float32.returnType = Type::FullType { Float32Type.name };
    TextureAtomicExchange_Texture1DArray_Float32.parameters = TextureAtomicExchange_Texture1DArray_Float32_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float32)->signature = "textureAtomicExchange(uniform *texture1DArray,i32x2,f32) f32"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float32)->name = "textureAtomicExchange(uniform *texture1DArray,i32x2,f32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture1DArray, coordinate : i32x2, value : f32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float32)->returnTypeSymbol = &Float32Type;

    /// textureAtomicExchange with Texture1DArray, Int32x2, UInt32
    TextureAtomicExchange_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicExchange_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicExchange_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicExchange_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicExchange_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicExchange_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicExchange_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicExchange_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicExchange_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicExchange_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture1DArray_UInt32.name = TextureAtomicExchange_Texture1DArray_UInt32_name;
    TextureAtomicExchange_Texture1DArray_UInt32.backendIndex = 2657;
    TextureAtomicExchange_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicExchange_Texture1DArray_UInt32.parameters = TextureAtomicExchange_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt32)->signature = "textureAtomicExchange(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt32)->name = "textureAtomicExchange(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicExchange with Texture1DArray, Int32x2, Int32
    TextureAtomicExchange_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicExchange_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicExchange_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicExchange_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicExchange_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicExchange_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicExchange_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicExchange_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicExchange_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicExchange_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture1DArray_Int32.name = TextureAtomicExchange_Texture1DArray_Int32_name;
    TextureAtomicExchange_Texture1DArray_Int32.backendIndex = 2658;
    TextureAtomicExchange_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicExchange_Texture1DArray_Int32.parameters = TextureAtomicExchange_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int32)->signature = "textureAtomicExchange(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int32)->name = "textureAtomicExchange(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicExchange with Texture1DArray, Int32x2, Float16
    TextureAtomicExchange_Texture1DArray_Float16_texture.name = "texture"_c;
    TextureAtomicExchange_Texture1DArray_Float16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicExchange_Texture1DArray_Float16_texture.type.modifiers = TextureAtomicExchange_Texture1DArray_Float16_texture_modifiers;
    TextureAtomicExchange_Texture1DArray_Float16_texture.type.modifierValues = TextureAtomicExchange_Texture1DArray_Float16_texture_modifierValues;
    TextureAtomicExchange_Texture1DArray_Float16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture1DArray_Float16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicExchange_Texture1DArray_Float16_value.name = "value"_c;
    TextureAtomicExchange_Texture1DArray_Float16_value.type = Type::FullType{ Float16Type.name };
    TextureAtomicExchange_Texture1DArray_Float16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture1DArray_Float16.name = TextureAtomicExchange_Texture1DArray_Float16_name;
    TextureAtomicExchange_Texture1DArray_Float16.backendIndex = 2659;
    TextureAtomicExchange_Texture1DArray_Float16.returnType = Type::FullType { Float16Type.name };
    TextureAtomicExchange_Texture1DArray_Float16.parameters = TextureAtomicExchange_Texture1DArray_Float16_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float16)->signature = "textureAtomicExchange(uniform *texture1DArray,i32x2,f16) f16"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float16)->name = "textureAtomicExchange(uniform *texture1DArray,i32x2,f16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture1DArray, coordinate : i32x2, value : f16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Float16)->returnTypeSymbol = &Float16Type;

    /// textureAtomicExchange with Texture1DArray, Int32x2, UInt16
    TextureAtomicExchange_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicExchange_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicExchange_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicExchange_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicExchange_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicExchange_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicExchange_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicExchange_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicExchange_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicExchange_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture1DArray_UInt16.name = TextureAtomicExchange_Texture1DArray_UInt16_name;
    TextureAtomicExchange_Texture1DArray_UInt16.backendIndex = 2660;
    TextureAtomicExchange_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicExchange_Texture1DArray_UInt16.parameters = TextureAtomicExchange_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt16)->signature = "textureAtomicExchange(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt16)->name = "textureAtomicExchange(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicExchange with Texture1DArray, Int32x2, Int16
    TextureAtomicExchange_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicExchange_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicExchange_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicExchange_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicExchange_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicExchange_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicExchange_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicExchange_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicExchange_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicExchange_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture1DArray_Int16.name = TextureAtomicExchange_Texture1DArray_Int16_name;
    TextureAtomicExchange_Texture1DArray_Int16.backendIndex = 2661;
    TextureAtomicExchange_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicExchange_Texture1DArray_Int16.parameters = TextureAtomicExchange_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int16)->signature = "textureAtomicExchange(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int16)->name = "textureAtomicExchange(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicExchange with Texture2DArray, Int32x3, Float32
    TextureAtomicExchange_Texture2DArray_Float32_texture.name = "texture"_c;
    TextureAtomicExchange_Texture2DArray_Float32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicExchange_Texture2DArray_Float32_texture.type.modifiers = TextureAtomicExchange_Texture2DArray_Float32_texture_modifiers;
    TextureAtomicExchange_Texture2DArray_Float32_texture.type.modifierValues = TextureAtomicExchange_Texture2DArray_Float32_texture_modifierValues;
    TextureAtomicExchange_Texture2DArray_Float32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture2DArray_Float32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_Texture2DArray_Float32_value.name = "value"_c;
    TextureAtomicExchange_Texture2DArray_Float32_value.type = Type::FullType{ Float32Type.name };
    TextureAtomicExchange_Texture2DArray_Float32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture2DArray_Float32.name = TextureAtomicExchange_Texture2DArray_Float32_name;
    TextureAtomicExchange_Texture2DArray_Float32.backendIndex = 2662;
    TextureAtomicExchange_Texture2DArray_Float32.returnType = Type::FullType { Float32Type.name };
    TextureAtomicExchange_Texture2DArray_Float32.parameters = TextureAtomicExchange_Texture2DArray_Float32_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float32)->signature = "textureAtomicExchange(uniform *texture2DArray,i32x3,f32) f32"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float32)->name = "textureAtomicExchange(uniform *texture2DArray,i32x3,f32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture2DArray, coordinate : i32x3, value : f32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float32)->returnTypeSymbol = &Float32Type;

    /// textureAtomicExchange with Texture2DArray, Int32x3, UInt32
    TextureAtomicExchange_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicExchange_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicExchange_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicExchange_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicExchange_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicExchange_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicExchange_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicExchange_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicExchange_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture2DArray_UInt32.name = TextureAtomicExchange_Texture2DArray_UInt32_name;
    TextureAtomicExchange_Texture2DArray_UInt32.backendIndex = 2663;
    TextureAtomicExchange_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicExchange_Texture2DArray_UInt32.parameters = TextureAtomicExchange_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt32)->signature = "textureAtomicExchange(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt32)->name = "textureAtomicExchange(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicExchange with Texture2DArray, Int32x3, Int32
    TextureAtomicExchange_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicExchange_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicExchange_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicExchange_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicExchange_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicExchange_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicExchange_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicExchange_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicExchange_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture2DArray_Int32.name = TextureAtomicExchange_Texture2DArray_Int32_name;
    TextureAtomicExchange_Texture2DArray_Int32.backendIndex = 2664;
    TextureAtomicExchange_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicExchange_Texture2DArray_Int32.parameters = TextureAtomicExchange_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int32)->signature = "textureAtomicExchange(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int32)->name = "textureAtomicExchange(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicExchange with Texture2DArray, Int32x3, Float16
    TextureAtomicExchange_Texture2DArray_Float16_texture.name = "texture"_c;
    TextureAtomicExchange_Texture2DArray_Float16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicExchange_Texture2DArray_Float16_texture.type.modifiers = TextureAtomicExchange_Texture2DArray_Float16_texture_modifiers;
    TextureAtomicExchange_Texture2DArray_Float16_texture.type.modifierValues = TextureAtomicExchange_Texture2DArray_Float16_texture_modifierValues;
    TextureAtomicExchange_Texture2DArray_Float16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture2DArray_Float16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_Texture2DArray_Float16_value.name = "value"_c;
    TextureAtomicExchange_Texture2DArray_Float16_value.type = Type::FullType{ Float16Type.name };
    TextureAtomicExchange_Texture2DArray_Float16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture2DArray_Float16.name = TextureAtomicExchange_Texture2DArray_Float16_name;
    TextureAtomicExchange_Texture2DArray_Float16.backendIndex = 2665;
    TextureAtomicExchange_Texture2DArray_Float16.returnType = Type::FullType { Float16Type.name };
    TextureAtomicExchange_Texture2DArray_Float16.parameters = TextureAtomicExchange_Texture2DArray_Float16_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float16)->signature = "textureAtomicExchange(uniform *texture2DArray,i32x3,f16) f16"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float16)->name = "textureAtomicExchange(uniform *texture2DArray,i32x3,f16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture2DArray, coordinate : i32x3, value : f16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Float16)->returnTypeSymbol = &Float16Type;

    /// textureAtomicExchange with Texture2DArray, Int32x3, UInt16
    TextureAtomicExchange_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicExchange_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicExchange_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicExchange_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicExchange_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicExchange_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicExchange_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicExchange_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicExchange_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture2DArray_UInt16.name = TextureAtomicExchange_Texture2DArray_UInt16_name;
    TextureAtomicExchange_Texture2DArray_UInt16.backendIndex = 2666;
    TextureAtomicExchange_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicExchange_Texture2DArray_UInt16.parameters = TextureAtomicExchange_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt16)->signature = "textureAtomicExchange(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt16)->name = "textureAtomicExchange(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicExchange with Texture2DArray, Int32x3, Int16
    TextureAtomicExchange_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicExchange_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicExchange_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicExchange_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicExchange_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicExchange_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicExchange_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicExchange_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicExchange_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicExchange_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_Texture2DArray_Int16.name = TextureAtomicExchange_Texture2DArray_Int16_name;
    TextureAtomicExchange_Texture2DArray_Int16.backendIndex = 2667;
    TextureAtomicExchange_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicExchange_Texture2DArray_Int16.parameters = TextureAtomicExchange_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int16)->signature = "textureAtomicExchange(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int16)->name = "textureAtomicExchange(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicExchange with TextureCubeArray, Int32x4, Float32
    TextureAtomicExchange_TextureCubeArray_Float32_texture.name = "texture"_c;
    TextureAtomicExchange_TextureCubeArray_Float32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicExchange_TextureCubeArray_Float32_texture.type.modifiers = TextureAtomicExchange_TextureCubeArray_Float32_texture_modifiers;
    TextureAtomicExchange_TextureCubeArray_Float32_texture.type.modifierValues = TextureAtomicExchange_TextureCubeArray_Float32_texture_modifierValues;
    TextureAtomicExchange_TextureCubeArray_Float32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_TextureCubeArray_Float32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicExchange_TextureCubeArray_Float32_value.name = "value"_c;
    TextureAtomicExchange_TextureCubeArray_Float32_value.type = Type::FullType{ Float32Type.name };
    TextureAtomicExchange_TextureCubeArray_Float32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_TextureCubeArray_Float32.name = TextureAtomicExchange_TextureCubeArray_Float32_name;
    TextureAtomicExchange_TextureCubeArray_Float32.backendIndex = 2668;
    TextureAtomicExchange_TextureCubeArray_Float32.returnType = Type::FullType { Float32Type.name };
    TextureAtomicExchange_TextureCubeArray_Float32.parameters = TextureAtomicExchange_TextureCubeArray_Float32_args;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float32)->signature = "textureAtomicExchange(uniform *textureCubeArray,i32x4,f32) f32"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float32)->name = "textureAtomicExchange(uniform *textureCubeArray,i32x4,f32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *textureCubeArray, coordinate : i32x4, value : f32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float32)->returnTypeSymbol = &Float32Type;

    /// textureAtomicExchange with TextureCubeArray, Int32x4, UInt32
    TextureAtomicExchange_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicExchange_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicExchange_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicExchange_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicExchange_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicExchange_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicExchange_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicExchange_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicExchange_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicExchange_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_TextureCubeArray_UInt32.name = TextureAtomicExchange_TextureCubeArray_UInt32_name;
    TextureAtomicExchange_TextureCubeArray_UInt32.backendIndex = 2669;
    TextureAtomicExchange_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicExchange_TextureCubeArray_UInt32.parameters = TextureAtomicExchange_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt32)->signature = "textureAtomicExchange(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt32)->name = "textureAtomicExchange(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicExchange with TextureCubeArray, Int32x4, Int32
    TextureAtomicExchange_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicExchange_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicExchange_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicExchange_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicExchange_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicExchange_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicExchange_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicExchange_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicExchange_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicExchange_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_TextureCubeArray_Int32.name = TextureAtomicExchange_TextureCubeArray_Int32_name;
    TextureAtomicExchange_TextureCubeArray_Int32.backendIndex = 2670;
    TextureAtomicExchange_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicExchange_TextureCubeArray_Int32.parameters = TextureAtomicExchange_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int32)->signature = "textureAtomicExchange(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int32)->name = "textureAtomicExchange(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicExchange(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicExchange with TextureCubeArray, Int32x4, Float16
    TextureAtomicExchange_TextureCubeArray_Float16_texture.name = "texture"_c;
    TextureAtomicExchange_TextureCubeArray_Float16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicExchange_TextureCubeArray_Float16_texture.type.modifiers = TextureAtomicExchange_TextureCubeArray_Float16_texture_modifiers;
    TextureAtomicExchange_TextureCubeArray_Float16_texture.type.modifierValues = TextureAtomicExchange_TextureCubeArray_Float16_texture_modifierValues;
    TextureAtomicExchange_TextureCubeArray_Float16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_TextureCubeArray_Float16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicExchange_TextureCubeArray_Float16_value.name = "value"_c;
    TextureAtomicExchange_TextureCubeArray_Float16_value.type = Type::FullType{ Float16Type.name };
    TextureAtomicExchange_TextureCubeArray_Float16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_TextureCubeArray_Float16.name = TextureAtomicExchange_TextureCubeArray_Float16_name;
    TextureAtomicExchange_TextureCubeArray_Float16.backendIndex = 2671;
    TextureAtomicExchange_TextureCubeArray_Float16.returnType = Type::FullType { Float16Type.name };
    TextureAtomicExchange_TextureCubeArray_Float16.parameters = TextureAtomicExchange_TextureCubeArray_Float16_args;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float16)->signature = "textureAtomicExchange(uniform *textureCubeArray,i32x4,f16) f16"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float16)->name = "textureAtomicExchange(uniform *textureCubeArray,i32x4,f16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *textureCubeArray, coordinate : i32x4, value : f16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Float16)->returnTypeSymbol = &Float16Type;

    /// textureAtomicExchange with TextureCubeArray, Int32x4, UInt16
    TextureAtomicExchange_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicExchange_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicExchange_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicExchange_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicExchange_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicExchange_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicExchange_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicExchange_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicExchange_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicExchange_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_TextureCubeArray_UInt16.name = TextureAtomicExchange_TextureCubeArray_UInt16_name;
    TextureAtomicExchange_TextureCubeArray_UInt16.backendIndex = 2672;
    TextureAtomicExchange_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicExchange_TextureCubeArray_UInt16.parameters = TextureAtomicExchange_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt16)->signature = "textureAtomicExchange(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt16)->name = "textureAtomicExchange(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicExchange with TextureCubeArray, Int32x4, Int16
    TextureAtomicExchange_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicExchange_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicExchange_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicExchange_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicExchange_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicExchange_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicExchange_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicExchange_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicExchange_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicExchange_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicExchange_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicExchange_TextureCubeArray_Int16.name = TextureAtomicExchange_TextureCubeArray_Int16_name;
    TextureAtomicExchange_TextureCubeArray_Int16.backendIndex = 2673;
    TextureAtomicExchange_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicExchange_TextureCubeArray_Int16.parameters = TextureAtomicExchange_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int16)->signature = "textureAtomicExchange(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int16)->name = "textureAtomicExchange(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicExchange(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicExchange_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicCompareExchange with Texture1D, Int32, UInt32
    TextureAtomicCompareExchange_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicCompareExchange_Texture1D_UInt32_texture.type.modifiers = TextureAtomicCompareExchange_Texture1D_UInt32_texture_modifiers;
    TextureAtomicCompareExchange_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicCompareExchange_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicCompareExchange_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicCompareExchange_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicCompareExchange_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture1D_UInt32.name = TextureAtomicCompareExchange_Texture1D_UInt32_name;
    TextureAtomicCompareExchange_Texture1D_UInt32.backendIndex = 2674;
    TextureAtomicCompareExchange_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicCompareExchange_Texture1D_UInt32.parameters = TextureAtomicCompareExchange_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt32)->signature = "textureAtomicCompareExchange(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt32)->name = "textureAtomicCompareExchange(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt32)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicCompareExchange with Texture1D, Int32, Int32
    TextureAtomicCompareExchange_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicCompareExchange_Texture1D_Int32_texture.type.modifiers = TextureAtomicCompareExchange_Texture1D_Int32_texture_modifiers;
    TextureAtomicCompareExchange_Texture1D_Int32_texture.type.modifierValues = TextureAtomicCompareExchange_Texture1D_Int32_texture_modifierValues;
    TextureAtomicCompareExchange_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicCompareExchange_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicCompareExchange_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture1D_Int32.name = TextureAtomicCompareExchange_Texture1D_Int32_name;
    TextureAtomicCompareExchange_Texture1D_Int32.backendIndex = 2675;
    TextureAtomicCompareExchange_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicCompareExchange_Texture1D_Int32.parameters = TextureAtomicCompareExchange_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int32)->signature = "textureAtomicCompareExchange(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int32)->name = "textureAtomicCompareExchange(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int32)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicCompareExchange with Texture1D, Int32, UInt16
    TextureAtomicCompareExchange_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicCompareExchange_Texture1D_UInt16_texture.type.modifiers = TextureAtomicCompareExchange_Texture1D_UInt16_texture_modifiers;
    TextureAtomicCompareExchange_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicCompareExchange_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicCompareExchange_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicCompareExchange_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicCompareExchange_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture1D_UInt16.name = TextureAtomicCompareExchange_Texture1D_UInt16_name;
    TextureAtomicCompareExchange_Texture1D_UInt16.backendIndex = 2676;
    TextureAtomicCompareExchange_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicCompareExchange_Texture1D_UInt16.parameters = TextureAtomicCompareExchange_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt16)->signature = "textureAtomicCompareExchange(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt16)->name = "textureAtomicCompareExchange(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt16)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicCompareExchange with Texture1D, Int32, Int16
    TextureAtomicCompareExchange_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicCompareExchange_Texture1D_Int16_texture.type.modifiers = TextureAtomicCompareExchange_Texture1D_Int16_texture_modifiers;
    TextureAtomicCompareExchange_Texture1D_Int16_texture.type.modifierValues = TextureAtomicCompareExchange_Texture1D_Int16_texture_modifierValues;
    TextureAtomicCompareExchange_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicCompareExchange_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicCompareExchange_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture1D_Int16.name = TextureAtomicCompareExchange_Texture1D_Int16_name;
    TextureAtomicCompareExchange_Texture1D_Int16.backendIndex = 2677;
    TextureAtomicCompareExchange_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicCompareExchange_Texture1D_Int16.parameters = TextureAtomicCompareExchange_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int16)->signature = "textureAtomicCompareExchange(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int16)->name = "textureAtomicCompareExchange(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int16)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicCompareExchange with Texture2D, Int32x2, UInt32
    TextureAtomicCompareExchange_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicCompareExchange_Texture2D_UInt32_texture.type.modifiers = TextureAtomicCompareExchange_Texture2D_UInt32_texture_modifiers;
    TextureAtomicCompareExchange_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicCompareExchange_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicCompareExchange_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicCompareExchange_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicCompareExchange_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture2D_UInt32.name = TextureAtomicCompareExchange_Texture2D_UInt32_name;
    TextureAtomicCompareExchange_Texture2D_UInt32.backendIndex = 2678;
    TextureAtomicCompareExchange_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicCompareExchange_Texture2D_UInt32.parameters = TextureAtomicCompareExchange_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt32)->signature = "textureAtomicCompareExchange(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt32)->name = "textureAtomicCompareExchange(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt32)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicCompareExchange with Texture2D, Int32x2, Int32
    TextureAtomicCompareExchange_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicCompareExchange_Texture2D_Int32_texture.type.modifiers = TextureAtomicCompareExchange_Texture2D_Int32_texture_modifiers;
    TextureAtomicCompareExchange_Texture2D_Int32_texture.type.modifierValues = TextureAtomicCompareExchange_Texture2D_Int32_texture_modifierValues;
    TextureAtomicCompareExchange_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicCompareExchange_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicCompareExchange_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture2D_Int32.name = TextureAtomicCompareExchange_Texture2D_Int32_name;
    TextureAtomicCompareExchange_Texture2D_Int32.backendIndex = 2679;
    TextureAtomicCompareExchange_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicCompareExchange_Texture2D_Int32.parameters = TextureAtomicCompareExchange_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int32)->signature = "textureAtomicCompareExchange(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int32)->name = "textureAtomicCompareExchange(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int32)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicCompareExchange with Texture2D, Int32x2, UInt16
    TextureAtomicCompareExchange_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicCompareExchange_Texture2D_UInt16_texture.type.modifiers = TextureAtomicCompareExchange_Texture2D_UInt16_texture_modifiers;
    TextureAtomicCompareExchange_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicCompareExchange_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicCompareExchange_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicCompareExchange_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicCompareExchange_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture2D_UInt16.name = TextureAtomicCompareExchange_Texture2D_UInt16_name;
    TextureAtomicCompareExchange_Texture2D_UInt16.backendIndex = 2680;
    TextureAtomicCompareExchange_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicCompareExchange_Texture2D_UInt16.parameters = TextureAtomicCompareExchange_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt16)->signature = "textureAtomicCompareExchange(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt16)->name = "textureAtomicCompareExchange(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt16)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicCompareExchange with Texture2D, Int32x2, Int16
    TextureAtomicCompareExchange_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicCompareExchange_Texture2D_Int16_texture.type.modifiers = TextureAtomicCompareExchange_Texture2D_Int16_texture_modifiers;
    TextureAtomicCompareExchange_Texture2D_Int16_texture.type.modifierValues = TextureAtomicCompareExchange_Texture2D_Int16_texture_modifierValues;
    TextureAtomicCompareExchange_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicCompareExchange_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicCompareExchange_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture2D_Int16.name = TextureAtomicCompareExchange_Texture2D_Int16_name;
    TextureAtomicCompareExchange_Texture2D_Int16.backendIndex = 2681;
    TextureAtomicCompareExchange_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicCompareExchange_Texture2D_Int16.parameters = TextureAtomicCompareExchange_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int16)->signature = "textureAtomicCompareExchange(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int16)->name = "textureAtomicCompareExchange(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int16)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicCompareExchange with Texture3D, Int32x3, UInt32
    TextureAtomicCompareExchange_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicCompareExchange_Texture3D_UInt32_texture.type.modifiers = TextureAtomicCompareExchange_Texture3D_UInt32_texture_modifiers;
    TextureAtomicCompareExchange_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicCompareExchange_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicCompareExchange_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicCompareExchange_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicCompareExchange_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture3D_UInt32.name = TextureAtomicCompareExchange_Texture3D_UInt32_name;
    TextureAtomicCompareExchange_Texture3D_UInt32.backendIndex = 2682;
    TextureAtomicCompareExchange_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicCompareExchange_Texture3D_UInt32.parameters = TextureAtomicCompareExchange_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt32)->signature = "textureAtomicCompareExchange(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt32)->name = "textureAtomicCompareExchange(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt32)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicCompareExchange with Texture3D, Int32x3, Int32
    TextureAtomicCompareExchange_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicCompareExchange_Texture3D_Int32_texture.type.modifiers = TextureAtomicCompareExchange_Texture3D_Int32_texture_modifiers;
    TextureAtomicCompareExchange_Texture3D_Int32_texture.type.modifierValues = TextureAtomicCompareExchange_Texture3D_Int32_texture_modifierValues;
    TextureAtomicCompareExchange_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicCompareExchange_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicCompareExchange_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture3D_Int32.name = TextureAtomicCompareExchange_Texture3D_Int32_name;
    TextureAtomicCompareExchange_Texture3D_Int32.backendIndex = 2683;
    TextureAtomicCompareExchange_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicCompareExchange_Texture3D_Int32.parameters = TextureAtomicCompareExchange_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int32)->signature = "textureAtomicCompareExchange(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int32)->name = "textureAtomicCompareExchange(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int32)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicCompareExchange with Texture3D, Int32x3, UInt16
    TextureAtomicCompareExchange_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicCompareExchange_Texture3D_UInt16_texture.type.modifiers = TextureAtomicCompareExchange_Texture3D_UInt16_texture_modifiers;
    TextureAtomicCompareExchange_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicCompareExchange_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicCompareExchange_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicCompareExchange_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicCompareExchange_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture3D_UInt16.name = TextureAtomicCompareExchange_Texture3D_UInt16_name;
    TextureAtomicCompareExchange_Texture3D_UInt16.backendIndex = 2684;
    TextureAtomicCompareExchange_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicCompareExchange_Texture3D_UInt16.parameters = TextureAtomicCompareExchange_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt16)->signature = "textureAtomicCompareExchange(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt16)->name = "textureAtomicCompareExchange(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt16)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicCompareExchange with Texture3D, Int32x3, Int16
    TextureAtomicCompareExchange_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicCompareExchange_Texture3D_Int16_texture.type.modifiers = TextureAtomicCompareExchange_Texture3D_Int16_texture_modifiers;
    TextureAtomicCompareExchange_Texture3D_Int16_texture.type.modifierValues = TextureAtomicCompareExchange_Texture3D_Int16_texture_modifierValues;
    TextureAtomicCompareExchange_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicCompareExchange_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicCompareExchange_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture3D_Int16.name = TextureAtomicCompareExchange_Texture3D_Int16_name;
    TextureAtomicCompareExchange_Texture3D_Int16.backendIndex = 2685;
    TextureAtomicCompareExchange_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicCompareExchange_Texture3D_Int16.parameters = TextureAtomicCompareExchange_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int16)->signature = "textureAtomicCompareExchange(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int16)->name = "textureAtomicCompareExchange(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int16)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicCompareExchange with TextureCube, Int32x3, UInt32
    TextureAtomicCompareExchange_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicCompareExchange_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicCompareExchange_TextureCube_UInt32_texture.type.modifiers = TextureAtomicCompareExchange_TextureCube_UInt32_texture_modifiers;
    TextureAtomicCompareExchange_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicCompareExchange_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicCompareExchange_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicCompareExchange_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicCompareExchange_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicCompareExchange_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_TextureCube_UInt32.name = TextureAtomicCompareExchange_TextureCube_UInt32_name;
    TextureAtomicCompareExchange_TextureCube_UInt32.backendIndex = 2686;
    TextureAtomicCompareExchange_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicCompareExchange_TextureCube_UInt32.parameters = TextureAtomicCompareExchange_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt32)->signature = "textureAtomicCompareExchange(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt32)->name = "textureAtomicCompareExchange(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt32)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicCompareExchange with TextureCube, Int32x3, Int32
    TextureAtomicCompareExchange_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicCompareExchange_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicCompareExchange_TextureCube_Int32_texture.type.modifiers = TextureAtomicCompareExchange_TextureCube_Int32_texture_modifiers;
    TextureAtomicCompareExchange_TextureCube_Int32_texture.type.modifierValues = TextureAtomicCompareExchange_TextureCube_Int32_texture_modifierValues;
    TextureAtomicCompareExchange_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicCompareExchange_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicCompareExchange_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicCompareExchange_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_TextureCube_Int32.name = TextureAtomicCompareExchange_TextureCube_Int32_name;
    TextureAtomicCompareExchange_TextureCube_Int32.backendIndex = 2687;
    TextureAtomicCompareExchange_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicCompareExchange_TextureCube_Int32.parameters = TextureAtomicCompareExchange_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int32)->signature = "textureAtomicCompareExchange(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int32)->name = "textureAtomicCompareExchange(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int32)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicCompareExchange with TextureCube, Int32x3, UInt16
    TextureAtomicCompareExchange_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicCompareExchange_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicCompareExchange_TextureCube_UInt16_texture.type.modifiers = TextureAtomicCompareExchange_TextureCube_UInt16_texture_modifiers;
    TextureAtomicCompareExchange_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicCompareExchange_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicCompareExchange_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicCompareExchange_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicCompareExchange_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicCompareExchange_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_TextureCube_UInt16.name = TextureAtomicCompareExchange_TextureCube_UInt16_name;
    TextureAtomicCompareExchange_TextureCube_UInt16.backendIndex = 2688;
    TextureAtomicCompareExchange_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicCompareExchange_TextureCube_UInt16.parameters = TextureAtomicCompareExchange_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt16)->signature = "textureAtomicCompareExchange(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt16)->name = "textureAtomicCompareExchange(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt16)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicCompareExchange with TextureCube, Int32x3, Int16
    TextureAtomicCompareExchange_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicCompareExchange_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicCompareExchange_TextureCube_Int16_texture.type.modifiers = TextureAtomicCompareExchange_TextureCube_Int16_texture_modifiers;
    TextureAtomicCompareExchange_TextureCube_Int16_texture.type.modifierValues = TextureAtomicCompareExchange_TextureCube_Int16_texture_modifierValues;
    TextureAtomicCompareExchange_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicCompareExchange_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicCompareExchange_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicCompareExchange_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_TextureCube_Int16.name = TextureAtomicCompareExchange_TextureCube_Int16_name;
    TextureAtomicCompareExchange_TextureCube_Int16.backendIndex = 2689;
    TextureAtomicCompareExchange_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicCompareExchange_TextureCube_Int16.parameters = TextureAtomicCompareExchange_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int16)->signature = "textureAtomicCompareExchange(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int16)->name = "textureAtomicCompareExchange(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int16)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicCompareExchange with Texture1DArray, Int32x2, UInt32
    TextureAtomicCompareExchange_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicCompareExchange_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicCompareExchange_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicCompareExchange_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicCompareExchange_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicCompareExchange_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicCompareExchange_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicCompareExchange_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture1DArray_UInt32.name = TextureAtomicCompareExchange_Texture1DArray_UInt32_name;
    TextureAtomicCompareExchange_Texture1DArray_UInt32.backendIndex = 2690;
    TextureAtomicCompareExchange_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicCompareExchange_Texture1DArray_UInt32.parameters = TextureAtomicCompareExchange_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt32)->signature = "textureAtomicCompareExchange(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt32)->name = "textureAtomicCompareExchange(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicCompareExchange with Texture1DArray, Int32x2, Int32
    TextureAtomicCompareExchange_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicCompareExchange_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicCompareExchange_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicCompareExchange_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicCompareExchange_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicCompareExchange_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicCompareExchange_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicCompareExchange_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture1DArray_Int32.name = TextureAtomicCompareExchange_Texture1DArray_Int32_name;
    TextureAtomicCompareExchange_Texture1DArray_Int32.backendIndex = 2691;
    TextureAtomicCompareExchange_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicCompareExchange_Texture1DArray_Int32.parameters = TextureAtomicCompareExchange_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int32)->signature = "textureAtomicCompareExchange(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int32)->name = "textureAtomicCompareExchange(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicCompareExchange with Texture1DArray, Int32x2, UInt16
    TextureAtomicCompareExchange_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicCompareExchange_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicCompareExchange_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicCompareExchange_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicCompareExchange_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicCompareExchange_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicCompareExchange_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicCompareExchange_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture1DArray_UInt16.name = TextureAtomicCompareExchange_Texture1DArray_UInt16_name;
    TextureAtomicCompareExchange_Texture1DArray_UInt16.backendIndex = 2692;
    TextureAtomicCompareExchange_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicCompareExchange_Texture1DArray_UInt16.parameters = TextureAtomicCompareExchange_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt16)->signature = "textureAtomicCompareExchange(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt16)->name = "textureAtomicCompareExchange(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicCompareExchange with Texture1DArray, Int32x2, Int16
    TextureAtomicCompareExchange_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicCompareExchange_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicCompareExchange_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicCompareExchange_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicCompareExchange_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicCompareExchange_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicCompareExchange_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicCompareExchange_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture1DArray_Int16.name = TextureAtomicCompareExchange_Texture1DArray_Int16_name;
    TextureAtomicCompareExchange_Texture1DArray_Int16.backendIndex = 2693;
    TextureAtomicCompareExchange_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicCompareExchange_Texture1DArray_Int16.parameters = TextureAtomicCompareExchange_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int16)->signature = "textureAtomicCompareExchange(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int16)->name = "textureAtomicCompareExchange(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicCompareExchange with Texture2DArray, Int32x3, UInt32
    TextureAtomicCompareExchange_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicCompareExchange_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicCompareExchange_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicCompareExchange_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicCompareExchange_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicCompareExchange_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicCompareExchange_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicCompareExchange_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture2DArray_UInt32.name = TextureAtomicCompareExchange_Texture2DArray_UInt32_name;
    TextureAtomicCompareExchange_Texture2DArray_UInt32.backendIndex = 2694;
    TextureAtomicCompareExchange_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicCompareExchange_Texture2DArray_UInt32.parameters = TextureAtomicCompareExchange_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt32)->signature = "textureAtomicCompareExchange(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt32)->name = "textureAtomicCompareExchange(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicCompareExchange with Texture2DArray, Int32x3, Int32
    TextureAtomicCompareExchange_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicCompareExchange_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicCompareExchange_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicCompareExchange_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicCompareExchange_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicCompareExchange_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicCompareExchange_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicCompareExchange_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture2DArray_Int32.name = TextureAtomicCompareExchange_Texture2DArray_Int32_name;
    TextureAtomicCompareExchange_Texture2DArray_Int32.backendIndex = 2695;
    TextureAtomicCompareExchange_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicCompareExchange_Texture2DArray_Int32.parameters = TextureAtomicCompareExchange_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int32)->signature = "textureAtomicCompareExchange(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int32)->name = "textureAtomicCompareExchange(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicCompareExchange with Texture2DArray, Int32x3, UInt16
    TextureAtomicCompareExchange_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicCompareExchange_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicCompareExchange_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicCompareExchange_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicCompareExchange_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicCompareExchange_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicCompareExchange_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicCompareExchange_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture2DArray_UInt16.name = TextureAtomicCompareExchange_Texture2DArray_UInt16_name;
    TextureAtomicCompareExchange_Texture2DArray_UInt16.backendIndex = 2696;
    TextureAtomicCompareExchange_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicCompareExchange_Texture2DArray_UInt16.parameters = TextureAtomicCompareExchange_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt16)->signature = "textureAtomicCompareExchange(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt16)->name = "textureAtomicCompareExchange(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicCompareExchange with Texture2DArray, Int32x3, Int16
    TextureAtomicCompareExchange_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicCompareExchange_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicCompareExchange_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicCompareExchange_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicCompareExchange_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicCompareExchange_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicCompareExchange_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicCompareExchange_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicCompareExchange_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicCompareExchange_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_Texture2DArray_Int16.name = TextureAtomicCompareExchange_Texture2DArray_Int16_name;
    TextureAtomicCompareExchange_Texture2DArray_Int16.backendIndex = 2697;
    TextureAtomicCompareExchange_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicCompareExchange_Texture2DArray_Int16.parameters = TextureAtomicCompareExchange_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int16)->signature = "textureAtomicCompareExchange(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int16)->name = "textureAtomicCompareExchange(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicCompareExchange with TextureCubeArray, Int32x4, UInt32
    TextureAtomicCompareExchange_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicCompareExchange_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicCompareExchange_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicCompareExchange_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicCompareExchange_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicCompareExchange_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicCompareExchange_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicCompareExchange_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicCompareExchange_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicCompareExchange_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_TextureCubeArray_UInt32.name = TextureAtomicCompareExchange_TextureCubeArray_UInt32_name;
    TextureAtomicCompareExchange_TextureCubeArray_UInt32.backendIndex = 2698;
    TextureAtomicCompareExchange_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicCompareExchange_TextureCubeArray_UInt32.parameters = TextureAtomicCompareExchange_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt32)->signature = "textureAtomicCompareExchange(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt32)->name = "textureAtomicCompareExchange(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicCompareExchange with TextureCubeArray, Int32x4, Int32
    TextureAtomicCompareExchange_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicCompareExchange_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicCompareExchange_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicCompareExchange_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicCompareExchange_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicCompareExchange_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicCompareExchange_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicCompareExchange_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicCompareExchange_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicCompareExchange_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_TextureCubeArray_Int32.name = TextureAtomicCompareExchange_TextureCubeArray_Int32_name;
    TextureAtomicCompareExchange_TextureCubeArray_Int32.backendIndex = 2699;
    TextureAtomicCompareExchange_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicCompareExchange_TextureCubeArray_Int32.parameters = TextureAtomicCompareExchange_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int32)->signature = "textureAtomicCompareExchange(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int32)->name = "textureAtomicCompareExchange(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicCompareExchange with TextureCubeArray, Int32x4, UInt16
    TextureAtomicCompareExchange_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicCompareExchange_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicCompareExchange_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicCompareExchange_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicCompareExchange_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicCompareExchange_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicCompareExchange_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicCompareExchange_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicCompareExchange_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicCompareExchange_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_TextureCubeArray_UInt16.name = TextureAtomicCompareExchange_TextureCubeArray_UInt16_name;
    TextureAtomicCompareExchange_TextureCubeArray_UInt16.backendIndex = 2700;
    TextureAtomicCompareExchange_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicCompareExchange_TextureCubeArray_UInt16.parameters = TextureAtomicCompareExchange_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt16)->signature = "textureAtomicCompareExchange(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt16)->name = "textureAtomicCompareExchange(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicCompareExchange with TextureCubeArray, Int32x4, Int16
    TextureAtomicCompareExchange_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicCompareExchange_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicCompareExchange_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicCompareExchange_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicCompareExchange_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicCompareExchange_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicCompareExchange_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicCompareExchange_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicCompareExchange_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicCompareExchange_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicCompareExchange_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicCompareExchange_TextureCubeArray_Int16.name = TextureAtomicCompareExchange_TextureCubeArray_Int16_name;
    TextureAtomicCompareExchange_TextureCubeArray_Int16.backendIndex = 2701;
    TextureAtomicCompareExchange_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicCompareExchange_TextureCubeArray_Int16.parameters = TextureAtomicCompareExchange_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int16)->signature = "textureAtomicCompareExchange(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int16)->name = "textureAtomicCompareExchange(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicCompareExchange(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicCompareExchange_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAdd with Texture1D, Int32, UInt32
    TextureAtomicAdd_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicAdd_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAdd_Texture1D_UInt32_texture.type.modifiers = TextureAtomicAdd_Texture1D_UInt32_texture_modifiers;
    TextureAtomicAdd_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicAdd_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicAdd_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAdd_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicAdd_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAdd_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture1D_UInt32.name = TextureAtomicAdd_Texture1D_UInt32_name;
    TextureAtomicAdd_Texture1D_UInt32.backendIndex = 2702;
    TextureAtomicAdd_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAdd_Texture1D_UInt32.parameters = TextureAtomicAdd_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt32)->signature = "textureAtomicAdd(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt32)->name = "textureAtomicAdd(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt32)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAdd with Texture1D, Int32, Int32
    TextureAtomicAdd_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicAdd_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAdd_Texture1D_Int32_texture.type.modifiers = TextureAtomicAdd_Texture1D_Int32_texture_modifiers;
    TextureAtomicAdd_Texture1D_Int32_texture.type.modifierValues = TextureAtomicAdd_Texture1D_Int32_texture_modifierValues;
    TextureAtomicAdd_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAdd_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicAdd_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAdd_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture1D_Int32.name = TextureAtomicAdd_Texture1D_Int32_name;
    TextureAtomicAdd_Texture1D_Int32.backendIndex = 2703;
    TextureAtomicAdd_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAdd_Texture1D_Int32.parameters = TextureAtomicAdd_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int32)->signature = "textureAtomicAdd(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int32)->name = "textureAtomicAdd(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int32)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAdd with Texture1D, Int32, UInt16
    TextureAtomicAdd_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicAdd_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAdd_Texture1D_UInt16_texture.type.modifiers = TextureAtomicAdd_Texture1D_UInt16_texture_modifiers;
    TextureAtomicAdd_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicAdd_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicAdd_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAdd_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicAdd_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAdd_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture1D_UInt16.name = TextureAtomicAdd_Texture1D_UInt16_name;
    TextureAtomicAdd_Texture1D_UInt16.backendIndex = 2704;
    TextureAtomicAdd_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAdd_Texture1D_UInt16.parameters = TextureAtomicAdd_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt16)->signature = "textureAtomicAdd(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt16)->name = "textureAtomicAdd(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt16)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAdd with Texture1D, Int32, Int16
    TextureAtomicAdd_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicAdd_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAdd_Texture1D_Int16_texture.type.modifiers = TextureAtomicAdd_Texture1D_Int16_texture_modifiers;
    TextureAtomicAdd_Texture1D_Int16_texture.type.modifierValues = TextureAtomicAdd_Texture1D_Int16_texture_modifierValues;
    TextureAtomicAdd_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAdd_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicAdd_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAdd_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture1D_Int16.name = TextureAtomicAdd_Texture1D_Int16_name;
    TextureAtomicAdd_Texture1D_Int16.backendIndex = 2705;
    TextureAtomicAdd_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAdd_Texture1D_Int16.parameters = TextureAtomicAdd_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int16)->signature = "textureAtomicAdd(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int16)->name = "textureAtomicAdd(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int16)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAdd with Texture2D, Int32x2, UInt32
    TextureAtomicAdd_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicAdd_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAdd_Texture2D_UInt32_texture.type.modifiers = TextureAtomicAdd_Texture2D_UInt32_texture_modifiers;
    TextureAtomicAdd_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicAdd_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicAdd_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAdd_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicAdd_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAdd_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture2D_UInt32.name = TextureAtomicAdd_Texture2D_UInt32_name;
    TextureAtomicAdd_Texture2D_UInt32.backendIndex = 2706;
    TextureAtomicAdd_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAdd_Texture2D_UInt32.parameters = TextureAtomicAdd_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt32)->signature = "textureAtomicAdd(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt32)->name = "textureAtomicAdd(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt32)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAdd with Texture2D, Int32x2, Int32
    TextureAtomicAdd_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicAdd_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAdd_Texture2D_Int32_texture.type.modifiers = TextureAtomicAdd_Texture2D_Int32_texture_modifiers;
    TextureAtomicAdd_Texture2D_Int32_texture.type.modifierValues = TextureAtomicAdd_Texture2D_Int32_texture_modifierValues;
    TextureAtomicAdd_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAdd_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicAdd_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAdd_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture2D_Int32.name = TextureAtomicAdd_Texture2D_Int32_name;
    TextureAtomicAdd_Texture2D_Int32.backendIndex = 2707;
    TextureAtomicAdd_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAdd_Texture2D_Int32.parameters = TextureAtomicAdd_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int32)->signature = "textureAtomicAdd(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int32)->name = "textureAtomicAdd(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int32)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAdd with Texture2D, Int32x2, UInt16
    TextureAtomicAdd_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicAdd_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAdd_Texture2D_UInt16_texture.type.modifiers = TextureAtomicAdd_Texture2D_UInt16_texture_modifiers;
    TextureAtomicAdd_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicAdd_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicAdd_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAdd_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicAdd_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAdd_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture2D_UInt16.name = TextureAtomicAdd_Texture2D_UInt16_name;
    TextureAtomicAdd_Texture2D_UInt16.backendIndex = 2708;
    TextureAtomicAdd_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAdd_Texture2D_UInt16.parameters = TextureAtomicAdd_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt16)->signature = "textureAtomicAdd(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt16)->name = "textureAtomicAdd(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt16)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAdd with Texture2D, Int32x2, Int16
    TextureAtomicAdd_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicAdd_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAdd_Texture2D_Int16_texture.type.modifiers = TextureAtomicAdd_Texture2D_Int16_texture_modifiers;
    TextureAtomicAdd_Texture2D_Int16_texture.type.modifierValues = TextureAtomicAdd_Texture2D_Int16_texture_modifierValues;
    TextureAtomicAdd_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAdd_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicAdd_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAdd_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture2D_Int16.name = TextureAtomicAdd_Texture2D_Int16_name;
    TextureAtomicAdd_Texture2D_Int16.backendIndex = 2709;
    TextureAtomicAdd_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAdd_Texture2D_Int16.parameters = TextureAtomicAdd_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int16)->signature = "textureAtomicAdd(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int16)->name = "textureAtomicAdd(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int16)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAdd with Texture3D, Int32x3, UInt32
    TextureAtomicAdd_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicAdd_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAdd_Texture3D_UInt32_texture.type.modifiers = TextureAtomicAdd_Texture3D_UInt32_texture_modifiers;
    TextureAtomicAdd_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicAdd_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicAdd_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAdd_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicAdd_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAdd_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture3D_UInt32.name = TextureAtomicAdd_Texture3D_UInt32_name;
    TextureAtomicAdd_Texture3D_UInt32.backendIndex = 2710;
    TextureAtomicAdd_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAdd_Texture3D_UInt32.parameters = TextureAtomicAdd_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt32)->signature = "textureAtomicAdd(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt32)->name = "textureAtomicAdd(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt32)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAdd with Texture3D, Int32x3, Int32
    TextureAtomicAdd_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicAdd_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAdd_Texture3D_Int32_texture.type.modifiers = TextureAtomicAdd_Texture3D_Int32_texture_modifiers;
    TextureAtomicAdd_Texture3D_Int32_texture.type.modifierValues = TextureAtomicAdd_Texture3D_Int32_texture_modifierValues;
    TextureAtomicAdd_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAdd_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicAdd_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAdd_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture3D_Int32.name = TextureAtomicAdd_Texture3D_Int32_name;
    TextureAtomicAdd_Texture3D_Int32.backendIndex = 2711;
    TextureAtomicAdd_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAdd_Texture3D_Int32.parameters = TextureAtomicAdd_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int32)->signature = "textureAtomicAdd(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int32)->name = "textureAtomicAdd(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int32)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAdd with Texture3D, Int32x3, UInt16
    TextureAtomicAdd_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicAdd_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAdd_Texture3D_UInt16_texture.type.modifiers = TextureAtomicAdd_Texture3D_UInt16_texture_modifiers;
    TextureAtomicAdd_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicAdd_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicAdd_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAdd_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicAdd_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAdd_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture3D_UInt16.name = TextureAtomicAdd_Texture3D_UInt16_name;
    TextureAtomicAdd_Texture3D_UInt16.backendIndex = 2712;
    TextureAtomicAdd_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAdd_Texture3D_UInt16.parameters = TextureAtomicAdd_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt16)->signature = "textureAtomicAdd(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt16)->name = "textureAtomicAdd(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt16)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAdd with Texture3D, Int32x3, Int16
    TextureAtomicAdd_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicAdd_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAdd_Texture3D_Int16_texture.type.modifiers = TextureAtomicAdd_Texture3D_Int16_texture_modifiers;
    TextureAtomicAdd_Texture3D_Int16_texture.type.modifierValues = TextureAtomicAdd_Texture3D_Int16_texture_modifierValues;
    TextureAtomicAdd_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAdd_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicAdd_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAdd_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture3D_Int16.name = TextureAtomicAdd_Texture3D_Int16_name;
    TextureAtomicAdd_Texture3D_Int16.backendIndex = 2713;
    TextureAtomicAdd_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAdd_Texture3D_Int16.parameters = TextureAtomicAdd_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int16)->signature = "textureAtomicAdd(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int16)->name = "textureAtomicAdd(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int16)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAdd with TextureCube, Int32x3, UInt32
    TextureAtomicAdd_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicAdd_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAdd_TextureCube_UInt32_texture.type.modifiers = TextureAtomicAdd_TextureCube_UInt32_texture_modifiers;
    TextureAtomicAdd_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicAdd_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicAdd_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAdd_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicAdd_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAdd_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_TextureCube_UInt32.name = TextureAtomicAdd_TextureCube_UInt32_name;
    TextureAtomicAdd_TextureCube_UInt32.backendIndex = 2714;
    TextureAtomicAdd_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAdd_TextureCube_UInt32.parameters = TextureAtomicAdd_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt32)->signature = "textureAtomicAdd(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt32)->name = "textureAtomicAdd(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt32)->nameWithVarNames = "textureAtomicAdd(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAdd with TextureCube, Int32x3, Int32
    TextureAtomicAdd_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicAdd_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAdd_TextureCube_Int32_texture.type.modifiers = TextureAtomicAdd_TextureCube_Int32_texture_modifiers;
    TextureAtomicAdd_TextureCube_Int32_texture.type.modifierValues = TextureAtomicAdd_TextureCube_Int32_texture_modifierValues;
    TextureAtomicAdd_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAdd_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicAdd_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAdd_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_TextureCube_Int32.name = TextureAtomicAdd_TextureCube_Int32_name;
    TextureAtomicAdd_TextureCube_Int32.backendIndex = 2715;
    TextureAtomicAdd_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAdd_TextureCube_Int32.parameters = TextureAtomicAdd_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int32)->signature = "textureAtomicAdd(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int32)->name = "textureAtomicAdd(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int32)->nameWithVarNames = "textureAtomicAdd(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAdd with TextureCube, Int32x3, UInt16
    TextureAtomicAdd_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicAdd_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAdd_TextureCube_UInt16_texture.type.modifiers = TextureAtomicAdd_TextureCube_UInt16_texture_modifiers;
    TextureAtomicAdd_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicAdd_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicAdd_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAdd_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicAdd_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAdd_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_TextureCube_UInt16.name = TextureAtomicAdd_TextureCube_UInt16_name;
    TextureAtomicAdd_TextureCube_UInt16.backendIndex = 2716;
    TextureAtomicAdd_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAdd_TextureCube_UInt16.parameters = TextureAtomicAdd_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt16)->signature = "textureAtomicAdd(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt16)->name = "textureAtomicAdd(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt16)->nameWithVarNames = "textureAtomicAdd(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAdd with TextureCube, Int32x3, Int16
    TextureAtomicAdd_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicAdd_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAdd_TextureCube_Int16_texture.type.modifiers = TextureAtomicAdd_TextureCube_Int16_texture_modifiers;
    TextureAtomicAdd_TextureCube_Int16_texture.type.modifierValues = TextureAtomicAdd_TextureCube_Int16_texture_modifierValues;
    TextureAtomicAdd_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAdd_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicAdd_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAdd_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_TextureCube_Int16.name = TextureAtomicAdd_TextureCube_Int16_name;
    TextureAtomicAdd_TextureCube_Int16.backendIndex = 2717;
    TextureAtomicAdd_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAdd_TextureCube_Int16.parameters = TextureAtomicAdd_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int16)->signature = "textureAtomicAdd(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int16)->name = "textureAtomicAdd(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int16)->nameWithVarNames = "textureAtomicAdd(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAdd with Texture1DArray, Int32x2, UInt32
    TextureAtomicAdd_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicAdd_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAdd_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicAdd_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicAdd_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicAdd_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicAdd_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAdd_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicAdd_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAdd_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture1DArray_UInt32.name = TextureAtomicAdd_Texture1DArray_UInt32_name;
    TextureAtomicAdd_Texture1DArray_UInt32.backendIndex = 2718;
    TextureAtomicAdd_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAdd_Texture1DArray_UInt32.parameters = TextureAtomicAdd_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt32)->signature = "textureAtomicAdd(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt32)->name = "textureAtomicAdd(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAdd with Texture1DArray, Int32x2, Int32
    TextureAtomicAdd_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicAdd_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAdd_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicAdd_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicAdd_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicAdd_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicAdd_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAdd_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicAdd_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAdd_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture1DArray_Int32.name = TextureAtomicAdd_Texture1DArray_Int32_name;
    TextureAtomicAdd_Texture1DArray_Int32.backendIndex = 2719;
    TextureAtomicAdd_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAdd_Texture1DArray_Int32.parameters = TextureAtomicAdd_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int32)->signature = "textureAtomicAdd(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int32)->name = "textureAtomicAdd(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAdd with Texture1DArray, Int32x2, UInt16
    TextureAtomicAdd_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicAdd_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAdd_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicAdd_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicAdd_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicAdd_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicAdd_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAdd_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicAdd_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAdd_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture1DArray_UInt16.name = TextureAtomicAdd_Texture1DArray_UInt16_name;
    TextureAtomicAdd_Texture1DArray_UInt16.backendIndex = 2720;
    TextureAtomicAdd_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAdd_Texture1DArray_UInt16.parameters = TextureAtomicAdd_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt16)->signature = "textureAtomicAdd(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt16)->name = "textureAtomicAdd(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAdd with Texture1DArray, Int32x2, Int16
    TextureAtomicAdd_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicAdd_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAdd_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicAdd_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicAdd_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicAdd_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicAdd_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAdd_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicAdd_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAdd_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture1DArray_Int16.name = TextureAtomicAdd_Texture1DArray_Int16_name;
    TextureAtomicAdd_Texture1DArray_Int16.backendIndex = 2721;
    TextureAtomicAdd_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAdd_Texture1DArray_Int16.parameters = TextureAtomicAdd_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int16)->signature = "textureAtomicAdd(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int16)->name = "textureAtomicAdd(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAdd with Texture2DArray, Int32x3, UInt32
    TextureAtomicAdd_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicAdd_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAdd_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicAdd_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicAdd_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicAdd_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicAdd_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAdd_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicAdd_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAdd_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture2DArray_UInt32.name = TextureAtomicAdd_Texture2DArray_UInt32_name;
    TextureAtomicAdd_Texture2DArray_UInt32.backendIndex = 2722;
    TextureAtomicAdd_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAdd_Texture2DArray_UInt32.parameters = TextureAtomicAdd_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt32)->signature = "textureAtomicAdd(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt32)->name = "textureAtomicAdd(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAdd with Texture2DArray, Int32x3, Int32
    TextureAtomicAdd_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicAdd_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAdd_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicAdd_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicAdd_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicAdd_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicAdd_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAdd_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicAdd_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAdd_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture2DArray_Int32.name = TextureAtomicAdd_Texture2DArray_Int32_name;
    TextureAtomicAdd_Texture2DArray_Int32.backendIndex = 2723;
    TextureAtomicAdd_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAdd_Texture2DArray_Int32.parameters = TextureAtomicAdd_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int32)->signature = "textureAtomicAdd(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int32)->name = "textureAtomicAdd(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAdd with Texture2DArray, Int32x3, UInt16
    TextureAtomicAdd_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicAdd_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAdd_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicAdd_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicAdd_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicAdd_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicAdd_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAdd_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicAdd_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAdd_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture2DArray_UInt16.name = TextureAtomicAdd_Texture2DArray_UInt16_name;
    TextureAtomicAdd_Texture2DArray_UInt16.backendIndex = 2724;
    TextureAtomicAdd_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAdd_Texture2DArray_UInt16.parameters = TextureAtomicAdd_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt16)->signature = "textureAtomicAdd(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt16)->name = "textureAtomicAdd(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAdd with Texture2DArray, Int32x3, Int16
    TextureAtomicAdd_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicAdd_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAdd_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicAdd_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicAdd_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicAdd_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicAdd_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAdd_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicAdd_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAdd_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_Texture2DArray_Int16.name = TextureAtomicAdd_Texture2DArray_Int16_name;
    TextureAtomicAdd_Texture2DArray_Int16.backendIndex = 2725;
    TextureAtomicAdd_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAdd_Texture2DArray_Int16.parameters = TextureAtomicAdd_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int16)->signature = "textureAtomicAdd(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int16)->name = "textureAtomicAdd(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicAdd(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAdd with TextureCubeArray, Int32x4, UInt32
    TextureAtomicAdd_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicAdd_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAdd_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicAdd_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicAdd_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicAdd_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicAdd_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAdd_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicAdd_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAdd_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_TextureCubeArray_UInt32.name = TextureAtomicAdd_TextureCubeArray_UInt32_name;
    TextureAtomicAdd_TextureCubeArray_UInt32.backendIndex = 2726;
    TextureAtomicAdd_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAdd_TextureCubeArray_UInt32.parameters = TextureAtomicAdd_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt32)->signature = "textureAtomicAdd(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt32)->name = "textureAtomicAdd(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicAdd(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAdd with TextureCubeArray, Int32x4, Int32
    TextureAtomicAdd_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicAdd_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAdd_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicAdd_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicAdd_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicAdd_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicAdd_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAdd_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicAdd_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAdd_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_TextureCubeArray_Int32.name = TextureAtomicAdd_TextureCubeArray_Int32_name;
    TextureAtomicAdd_TextureCubeArray_Int32.backendIndex = 2727;
    TextureAtomicAdd_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAdd_TextureCubeArray_Int32.parameters = TextureAtomicAdd_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_Int32)->signature = "textureAtomicAdd(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_Int32)->name = "textureAtomicAdd(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicAdd(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAdd with TextureCubeArray, Int32x4, UInt16
    TextureAtomicAdd_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicAdd_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAdd_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicAdd_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicAdd_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicAdd_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicAdd_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAdd_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAdd_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicAdd_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAdd_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAdd_TextureCubeArray_UInt16.name = TextureAtomicAdd_TextureCubeArray_UInt16_name;
    TextureAtomicAdd_TextureCubeArray_UInt16.backendIndex = 2728;
    TextureAtomicAdd_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAdd_TextureCubeArray_UInt16.parameters = TextureAtomicAdd_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt16)->signature = "textureAtomicAdd(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt16)->name = "textureAtomicAdd(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicAdd(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAdd_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

}
} // namespace GPULang
