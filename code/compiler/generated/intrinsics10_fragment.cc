//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// bitExtract with UInt32, UInt32, UInt32
Variable BitExtract_UInt32_base;
Variable BitExtract_UInt32_offset;
Variable BitExtract_UInt32_count;
Function BitExtract_UInt32;
inline constexpr std::array BitExtract_UInt32_args = { &BitExtract_UInt32_base, &BitExtract_UInt32_offset, &BitExtract_UInt32_count };

/// bitExtract with Int32, Int32, Int32
Variable BitExtract_Int32_base;
Variable BitExtract_Int32_offset;
Variable BitExtract_Int32_count;
Function BitExtract_Int32;
inline constexpr std::array BitExtract_Int32_args = { &BitExtract_Int32_base, &BitExtract_Int32_offset, &BitExtract_Int32_count };

/// bitExtract with UInt16, UInt16, UInt16
Variable BitExtract_UInt16_base;
Variable BitExtract_UInt16_offset;
Variable BitExtract_UInt16_count;
Function BitExtract_UInt16;
inline constexpr std::array BitExtract_UInt16_args = { &BitExtract_UInt16_base, &BitExtract_UInt16_offset, &BitExtract_UInt16_count };

/// bitExtract with Int16, Int16, Int16
Variable BitExtract_Int16_base;
Variable BitExtract_Int16_offset;
Variable BitExtract_Int16_count;
Function BitExtract_Int16;
inline constexpr std::array BitExtract_Int16_args = { &BitExtract_Int16_base, &BitExtract_Int16_offset, &BitExtract_Int16_count };

/// bitReverse with UInt32
Variable BitReverse_UInt32_base;
Function BitReverse_UInt32;
inline constexpr std::array BitReverse_UInt32_args = { &BitReverse_UInt32_base };

/// bitReverse with Int32
Variable BitReverse_Int32_base;
Function BitReverse_Int32;
inline constexpr std::array BitReverse_Int32_args = { &BitReverse_Int32_base };

/// bitReverse with UInt16
Variable BitReverse_UInt16_base;
Function BitReverse_UInt16;
inline constexpr std::array BitReverse_UInt16_args = { &BitReverse_UInt16_base };

/// bitReverse with Int16
Variable BitReverse_Int16_base;
Function BitReverse_Int16;
inline constexpr std::array BitReverse_Int16_args = { &BitReverse_Int16_base };

/// bitCount with UInt32
Variable BitCount_UInt32_base;
Function BitCount_UInt32;
inline constexpr std::array BitCount_UInt32_args = { &BitCount_UInt32_base };

/// bitCount with Int32
Variable BitCount_Int32_base;
Function BitCount_Int32;
inline constexpr std::array BitCount_Int32_args = { &BitCount_Int32_base };

/// bitCount with UInt16
Variable BitCount_UInt16_base;
Function BitCount_UInt16;
inline constexpr std::array BitCount_UInt16_args = { &BitCount_UInt16_base };

/// bitCount with Int16
Variable BitCount_Int16_base;
Function BitCount_Int16;
inline constexpr std::array BitCount_Int16_args = { &BitCount_Int16_base };

/// executionBarrier
Function ExecutionBarrier;

/// executionBarrierSubgroup
Function ExecutionBarrierSubgroup;

/// executionBarrierWorkgroup
Function ExecutionBarrierWorkgroup;

/// memoryBarrier
Function MemoryBarrier;

/// memoryBarrierBuffer
Function MemoryBarrierBuffer;

/// memoryBarrierTexture
Function MemoryBarrierTexture;

/// memoryBarrierAtomic
Function MemoryBarrierAtomic;

/// memoryBarrierSubgroup
Function MemoryBarrierSubgroup;

/// memoryBarrierWorkgroup
Function MemoryBarrierWorkgroup;

/// textureGetSize with Texture1D
Variable TextureGetSize_Texture1D_texture;
inline constexpr std::array TextureGetSize_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSize_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSize_Texture1D;
inline constexpr std::array TextureGetSize_Texture1D_args = { &TextureGetSize_Texture1D_texture };

/// textureGetSize with Texture2D
Variable TextureGetSize_Texture2D_texture;
inline constexpr std::array TextureGetSize_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSize_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSize_Texture2D;
inline constexpr std::array TextureGetSize_Texture2D_args = { &TextureGetSize_Texture2D_texture };

/// textureGetSize with Texture3D
Variable TextureGetSize_Texture3D_texture;
inline constexpr std::array TextureGetSize_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSize_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSize_Texture3D;
inline constexpr std::array TextureGetSize_Texture3D_args = { &TextureGetSize_Texture3D_texture };

/// textureGetSize with TextureCube
Variable TextureGetSize_TextureCube_texture;
inline constexpr std::array TextureGetSize_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSize_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSize_TextureCube;
inline constexpr std::array TextureGetSize_TextureCube_args = { &TextureGetSize_TextureCube_texture };

/// textureGetSize with Texture1DArray
Variable TextureGetSize_Texture1DArray_texture;
inline constexpr std::array TextureGetSize_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSize_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSize_Texture1DArray;
inline constexpr std::array TextureGetSize_Texture1DArray_args = { &TextureGetSize_Texture1DArray_texture };

/// textureGetSize with Texture2DArray
Variable TextureGetSize_Texture2DArray_texture;
inline constexpr std::array TextureGetSize_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSize_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSize_Texture2DArray;
inline constexpr std::array TextureGetSize_Texture2DArray_args = { &TextureGetSize_Texture2DArray_texture };

/// textureGetSize with TextureCubeArray
Variable TextureGetSize_TextureCubeArray_texture;
inline constexpr std::array TextureGetSize_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSize_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSize_TextureCubeArray;
inline constexpr std::array TextureGetSize_TextureCubeArray_args = { &TextureGetSize_TextureCubeArray_texture };

/// textureGetSizeMip with Texture1D, UInt32
Variable TextureGetSizeMip_Texture1D_texture;
inline constexpr std::array TextureGetSizeMip_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSizeMip_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSizeMip_Texture1D_mip;
Function TextureGetSizeMip_Texture1D;
inline constexpr std::array TextureGetSizeMip_Texture1D_args = { &TextureGetSizeMip_Texture1D_texture, &TextureGetSizeMip_Texture1D_mip };

/// textureGetSizeMip with Texture2D, UInt32
Variable TextureGetSizeMip_Texture2D_texture;
inline constexpr std::array TextureGetSizeMip_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSizeMip_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSizeMip_Texture2D_mip;
Function TextureGetSizeMip_Texture2D;
inline constexpr std::array TextureGetSizeMip_Texture2D_args = { &TextureGetSizeMip_Texture2D_texture, &TextureGetSizeMip_Texture2D_mip };

/// textureGetSizeMip with Texture3D, UInt32
Variable TextureGetSizeMip_Texture3D_texture;
inline constexpr std::array TextureGetSizeMip_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSizeMip_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSizeMip_Texture3D_mip;
Function TextureGetSizeMip_Texture3D;
inline constexpr std::array TextureGetSizeMip_Texture3D_args = { &TextureGetSizeMip_Texture3D_texture, &TextureGetSizeMip_Texture3D_mip };

/// textureGetSizeMip with TextureCube, UInt32
Variable TextureGetSizeMip_TextureCube_texture;
inline constexpr std::array TextureGetSizeMip_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSizeMip_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSizeMip_TextureCube_mip;
Function TextureGetSizeMip_TextureCube;
inline constexpr std::array TextureGetSizeMip_TextureCube_args = { &TextureGetSizeMip_TextureCube_texture, &TextureGetSizeMip_TextureCube_mip };

/// textureGetSizeMip with Texture1DArray, UInt32
Variable TextureGetSizeMip_Texture1DArray_texture;
inline constexpr std::array TextureGetSizeMip_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSizeMip_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSizeMip_Texture1DArray_mip;
Function TextureGetSizeMip_Texture1DArray;
inline constexpr std::array TextureGetSizeMip_Texture1DArray_args = { &TextureGetSizeMip_Texture1DArray_texture, &TextureGetSizeMip_Texture1DArray_mip };

/// textureGetSizeMip with Texture2DArray, UInt32
Variable TextureGetSizeMip_Texture2DArray_texture;
inline constexpr std::array TextureGetSizeMip_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSizeMip_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSizeMip_Texture2DArray_mip;
Function TextureGetSizeMip_Texture2DArray;
inline constexpr std::array TextureGetSizeMip_Texture2DArray_args = { &TextureGetSizeMip_Texture2DArray_texture, &TextureGetSizeMip_Texture2DArray_mip };

/// textureGetSizeMip with TextureCubeArray, UInt32
Variable TextureGetSizeMip_TextureCubeArray_texture;
inline constexpr std::array TextureGetSizeMip_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSizeMip_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSizeMip_TextureCubeArray_mip;
Function TextureGetSizeMip_TextureCubeArray;
inline constexpr std::array TextureGetSizeMip_TextureCubeArray_args = { &TextureGetSizeMip_TextureCubeArray_texture, &TextureGetSizeMip_TextureCubeArray_mip };

/// textureGetMips with Texture1D
Variable TextureGetMips_Texture1D_texture;
inline constexpr std::array TextureGetMips_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetMips_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetMips_Texture1D;
inline constexpr std::array TextureGetMips_Texture1D_args = { &TextureGetMips_Texture1D_texture };

/// textureGetMips with Texture2D
Variable TextureGetMips_Texture2D_texture;
inline constexpr std::array TextureGetMips_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetMips_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetMips_Texture2D;
inline constexpr std::array TextureGetMips_Texture2D_args = { &TextureGetMips_Texture2D_texture };

/// textureGetMips with Texture3D
Variable TextureGetMips_Texture3D_texture;
inline constexpr std::array TextureGetMips_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetMips_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetMips_Texture3D;
inline constexpr std::array TextureGetMips_Texture3D_args = { &TextureGetMips_Texture3D_texture };

/// textureGetMips with TextureCube
Variable TextureGetMips_TextureCube_texture;
inline constexpr std::array TextureGetMips_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetMips_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetMips_TextureCube;
inline constexpr std::array TextureGetMips_TextureCube_args = { &TextureGetMips_TextureCube_texture };

/// textureGetMips with Texture1DArray
Variable TextureGetMips_Texture1DArray_texture;
inline constexpr std::array TextureGetMips_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetMips_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetMips_Texture1DArray;
inline constexpr std::array TextureGetMips_Texture1DArray_args = { &TextureGetMips_Texture1DArray_texture };

/// textureGetMips with Texture2DArray
Variable TextureGetMips_Texture2DArray_texture;
inline constexpr std::array TextureGetMips_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetMips_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetMips_Texture2DArray;
inline constexpr std::array TextureGetMips_Texture2DArray_args = { &TextureGetMips_Texture2DArray_texture };

/// textureGetMips with TextureCubeArray
Variable TextureGetMips_TextureCubeArray_texture;
inline constexpr std::array TextureGetMips_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetMips_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetMips_TextureCubeArray;
inline constexpr std::array TextureGetMips_TextureCubeArray_args = { &TextureGetMips_TextureCubeArray_texture };

/// textureGetSamples with Texture2DMS
Variable TextureGetSamples_Texture2DMS_texture;
inline constexpr std::array TextureGetSamples_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSamples_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSamples_Texture2DMS;
inline constexpr std::array TextureGetSamples_Texture2DMS_args = { &TextureGetSamples_Texture2DMS_texture };

/// textureGetSamples with Texture2DMSArray
Variable TextureGetSamples_Texture2DMSArray_texture;
inline constexpr std::array TextureGetSamples_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSamples_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSamples_Texture2DMSArray;
inline constexpr std::array TextureGetSamples_Texture2DMSArray_args = { &TextureGetSamples_Texture2DMSArray_texture };

/// textureGetSampledMip with Texture1D, Sampler, Float32
Variable TextureGetSampledMip_Texture1D_texture;
inline constexpr std::array TextureGetSampledMip_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture1D_sampler;
inline constexpr std::array TextureGetSampledMip_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture1D_coordinate;
Function TextureGetSampledMip_Texture1D;
inline constexpr std::array TextureGetSampledMip_Texture1D_args = { &TextureGetSampledMip_Texture1D_texture, &TextureGetSampledMip_Texture1D_sampler, &TextureGetSampledMip_Texture1D_coordinate };

/// textureGetSampledMip with SampledTexture1D, Float32
Variable SampledTextureGetSampledMip_Texture1D_texture;
inline constexpr std::array SampledTextureGetSampledMip_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGetSampledMip_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGetSampledMip_Texture1D_coordinate;
Function SampledTextureGetSampledMip_Texture1D;
inline constexpr std::array SampledTextureGetSampledMip_Texture1D_args = { &SampledTextureGetSampledMip_Texture1D_texture, &SampledTextureGetSampledMip_Texture1D_coordinate };

/// textureGetSampledMip with Texture2D, Sampler, Float32x2
Variable TextureGetSampledMip_Texture2D_texture;
inline constexpr std::array TextureGetSampledMip_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture2D_sampler;
inline constexpr std::array TextureGetSampledMip_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture2D_coordinate;
Function TextureGetSampledMip_Texture2D;
inline constexpr std::array TextureGetSampledMip_Texture2D_args = { &TextureGetSampledMip_Texture2D_texture, &TextureGetSampledMip_Texture2D_sampler, &TextureGetSampledMip_Texture2D_coordinate };

/// textureGetSampledMip with SampledTexture2D, Float32x2
Variable SampledTextureGetSampledMip_Texture2D_texture;
inline constexpr std::array SampledTextureGetSampledMip_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGetSampledMip_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGetSampledMip_Texture2D_coordinate;
Function SampledTextureGetSampledMip_Texture2D;
inline constexpr std::array SampledTextureGetSampledMip_Texture2D_args = { &SampledTextureGetSampledMip_Texture2D_texture, &SampledTextureGetSampledMip_Texture2D_coordinate };

/// textureGetSampledMip with Texture3D, Sampler, Float32x3
Variable TextureGetSampledMip_Texture3D_texture;
inline constexpr std::array TextureGetSampledMip_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture3D_sampler;
inline constexpr std::array TextureGetSampledMip_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture3D_coordinate;
Function TextureGetSampledMip_Texture3D;
inline constexpr std::array TextureGetSampledMip_Texture3D_args = { &TextureGetSampledMip_Texture3D_texture, &TextureGetSampledMip_Texture3D_sampler, &TextureGetSampledMip_Texture3D_coordinate };

/// textureGetSampledMip with SampledTexture3D, Float32x3
Variable SampledTextureGetSampledMip_Texture3D_texture;
inline constexpr std::array SampledTextureGetSampledMip_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGetSampledMip_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGetSampledMip_Texture3D_coordinate;
Function SampledTextureGetSampledMip_Texture3D;
inline constexpr std::array SampledTextureGetSampledMip_Texture3D_args = { &SampledTextureGetSampledMip_Texture3D_texture, &SampledTextureGetSampledMip_Texture3D_coordinate };

/// textureGetSampledMip with TextureCube, Sampler, Float32x3
Variable TextureGetSampledMip_TextureCube_texture;
inline constexpr std::array TextureGetSampledMip_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_TextureCube_sampler;
inline constexpr std::array TextureGetSampledMip_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_TextureCube_coordinate;
Function TextureGetSampledMip_TextureCube;
inline constexpr std::array TextureGetSampledMip_TextureCube_args = { &TextureGetSampledMip_TextureCube_texture, &TextureGetSampledMip_TextureCube_sampler, &TextureGetSampledMip_TextureCube_coordinate };

/// textureGetSampledMip with SampledTextureCube, Float32x3
Variable SampledTextureGetSampledMip_TextureCube_texture;
inline constexpr std::array SampledTextureGetSampledMip_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGetSampledMip_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGetSampledMip_TextureCube_coordinate;
Function SampledTextureGetSampledMip_TextureCube;
inline constexpr std::array SampledTextureGetSampledMip_TextureCube_args = { &SampledTextureGetSampledMip_TextureCube_texture, &SampledTextureGetSampledMip_TextureCube_coordinate };

/// textureGetSampledMip with Texture1DArray, Sampler, Float32x2
Variable TextureGetSampledMip_Texture1DArray_texture;
inline constexpr std::array TextureGetSampledMip_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture1DArray_sampler;
inline constexpr std::array TextureGetSampledMip_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture1DArray_coordinate;
Function TextureGetSampledMip_Texture1DArray;
inline constexpr std::array TextureGetSampledMip_Texture1DArray_args = { &TextureGetSampledMip_Texture1DArray_texture, &TextureGetSampledMip_Texture1DArray_sampler, &TextureGetSampledMip_Texture1DArray_coordinate };

/// textureGetSampledMip with SampledTexture1DArray, Float32x2
Variable SampledTextureGetSampledMip_Texture1DArray_texture;
inline constexpr std::array SampledTextureGetSampledMip_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGetSampledMip_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGetSampledMip_Texture1DArray_coordinate;
Function SampledTextureGetSampledMip_Texture1DArray;
inline constexpr std::array SampledTextureGetSampledMip_Texture1DArray_args = { &SampledTextureGetSampledMip_Texture1DArray_texture, &SampledTextureGetSampledMip_Texture1DArray_coordinate };

/// textureGetSampledMip with Texture2DArray, Sampler, Float32x3
Variable TextureGetSampledMip_Texture2DArray_texture;
inline constexpr std::array TextureGetSampledMip_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture2DArray_sampler;
inline constexpr std::array TextureGetSampledMip_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture2DArray_coordinate;
Function TextureGetSampledMip_Texture2DArray;
inline constexpr std::array TextureGetSampledMip_Texture2DArray_args = { &TextureGetSampledMip_Texture2DArray_texture, &TextureGetSampledMip_Texture2DArray_sampler, &TextureGetSampledMip_Texture2DArray_coordinate };

/// textureGetSampledMip with SampledTexture2DArray, Float32x3
Variable SampledTextureGetSampledMip_Texture2DArray_texture;
inline constexpr std::array SampledTextureGetSampledMip_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGetSampledMip_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGetSampledMip_Texture2DArray_coordinate;
Function SampledTextureGetSampledMip_Texture2DArray;
inline constexpr std::array SampledTextureGetSampledMip_Texture2DArray_args = { &SampledTextureGetSampledMip_Texture2DArray_texture, &SampledTextureGetSampledMip_Texture2DArray_coordinate };

/// textureGetSampledMip with TextureCubeArray, Sampler, Float32x4
Variable TextureGetSampledMip_TextureCubeArray_texture;
inline constexpr std::array TextureGetSampledMip_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_TextureCubeArray_sampler;
inline constexpr std::array TextureGetSampledMip_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_TextureCubeArray_coordinate;
Function TextureGetSampledMip_TextureCubeArray;
inline constexpr std::array TextureGetSampledMip_TextureCubeArray_args = { &TextureGetSampledMip_TextureCubeArray_texture, &TextureGetSampledMip_TextureCubeArray_sampler, &TextureGetSampledMip_TextureCubeArray_coordinate };

/// textureGetSampledMip with SampledTextureCubeArray, Float32x4
Variable SampledTextureGetSampledMip_TextureCubeArray_texture;
inline constexpr std::array SampledTextureGetSampledMip_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGetSampledMip_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGetSampledMip_TextureCubeArray_coordinate;
Function SampledTextureGetSampledMip_TextureCubeArray;
inline constexpr std::array SampledTextureGetSampledMip_TextureCubeArray_args = { &SampledTextureGetSampledMip_TextureCubeArray_texture, &SampledTextureGetSampledMip_TextureCubeArray_coordinate };

/// textureLoad with Texture1D, Int32
Variable TextureLoad_Texture1D_texture;
inline constexpr std::array TextureLoad_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture1D_coordinate;
Function TextureLoad_Texture1D;
inline constexpr std::array TextureLoad_Texture1D_args = { &TextureLoad_Texture1D_texture, &TextureLoad_Texture1D_coordinate };

/// textureLoadMip with Texture1D, Int32, Int32
Variable TextureLoadMip_Texture1D_texture;
inline constexpr std::array TextureLoadMip_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture1D_coordinate;
Variable TextureLoadMip_Texture1D_mip;
Function TextureLoadMip_Texture1D;
inline constexpr std::array TextureLoadMip_Texture1D_args = { &TextureLoadMip_Texture1D_texture, &TextureLoadMip_Texture1D_coordinate, &TextureLoadMip_Texture1D_mip };

/// textureStore with Texture1D, Int32, Float32x4
Variable TextureStore_Texture1D_texture;
inline constexpr std::array TextureStore_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture1D_coordinate;
Variable TextureStore_Texture1D_value;
Function TextureStore_Texture1D;
inline constexpr std::array TextureStore_Texture1D_args = { &TextureStore_Texture1D_texture, &TextureStore_Texture1D_coordinate, &TextureStore_Texture1D_value };

/// textureStoreMip with Texture1D, Int32, Int32, Float32x4
Variable TextureStoreMip_Texture1D_texture;
inline constexpr std::array TextureStoreMip_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture1D_coordinate;
Variable TextureStoreMip_Texture1D_mip;
Variable TextureStoreMip_Texture1D_value;
Function TextureStoreMip_Texture1D;
inline constexpr std::array TextureStoreMip_Texture1D_args = { &TextureStoreMip_Texture1D_texture, &TextureStoreMip_Texture1D_coordinate, &TextureStoreMip_Texture1D_mip, &TextureStoreMip_Texture1D_value };

/// textureLoad with Texture2D, Int32x2
Variable TextureLoad_Texture2D_texture;
inline constexpr std::array TextureLoad_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture2D_coordinate;
Function TextureLoad_Texture2D;
inline constexpr std::array TextureLoad_Texture2D_args = { &TextureLoad_Texture2D_texture, &TextureLoad_Texture2D_coordinate };

/// textureLoadMip with Texture2D, Int32x2, Int32
Variable TextureLoadMip_Texture2D_texture;
inline constexpr std::array TextureLoadMip_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture2D_coordinate;
Variable TextureLoadMip_Texture2D_mip;
Function TextureLoadMip_Texture2D;
inline constexpr std::array TextureLoadMip_Texture2D_args = { &TextureLoadMip_Texture2D_texture, &TextureLoadMip_Texture2D_coordinate, &TextureLoadMip_Texture2D_mip };

/// textureStore with Texture2D, Int32x2, Float32x4
Variable TextureStore_Texture2D_texture;
inline constexpr std::array TextureStore_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture2D_coordinate;
Variable TextureStore_Texture2D_value;
Function TextureStore_Texture2D;
inline constexpr std::array TextureStore_Texture2D_args = { &TextureStore_Texture2D_texture, &TextureStore_Texture2D_coordinate, &TextureStore_Texture2D_value };

/// textureStoreMip with Texture2D, Int32x2, Int32, Float32x4
Variable TextureStoreMip_Texture2D_texture;
inline constexpr std::array TextureStoreMip_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture2D_coordinate;
Variable TextureStoreMip_Texture2D_mip;
Variable TextureStoreMip_Texture2D_value;
Function TextureStoreMip_Texture2D;
inline constexpr std::array TextureStoreMip_Texture2D_args = { &TextureStoreMip_Texture2D_texture, &TextureStoreMip_Texture2D_coordinate, &TextureStoreMip_Texture2D_mip, &TextureStoreMip_Texture2D_value };

/// textureLoad with Texture3D, Int32x3
Variable TextureLoad_Texture3D_texture;
inline constexpr std::array TextureLoad_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture3D_coordinate;
Function TextureLoad_Texture3D;
inline constexpr std::array TextureLoad_Texture3D_args = { &TextureLoad_Texture3D_texture, &TextureLoad_Texture3D_coordinate };

/// textureLoadMip with Texture3D, Int32x3, Int32
Variable TextureLoadMip_Texture3D_texture;
inline constexpr std::array TextureLoadMip_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture3D_coordinate;
Variable TextureLoadMip_Texture3D_mip;
Function TextureLoadMip_Texture3D;
inline constexpr std::array TextureLoadMip_Texture3D_args = { &TextureLoadMip_Texture3D_texture, &TextureLoadMip_Texture3D_coordinate, &TextureLoadMip_Texture3D_mip };

/// textureStore with Texture3D, Int32x3, Float32x4
Variable TextureStore_Texture3D_texture;
inline constexpr std::array TextureStore_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture3D_coordinate;
Variable TextureStore_Texture3D_value;
Function TextureStore_Texture3D;
inline constexpr std::array TextureStore_Texture3D_args = { &TextureStore_Texture3D_texture, &TextureStore_Texture3D_coordinate, &TextureStore_Texture3D_value };

/// textureStoreMip with Texture3D, Int32x3, Int32, Float32x4
Variable TextureStoreMip_Texture3D_texture;
inline constexpr std::array TextureStoreMip_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture3D_coordinate;
Variable TextureStoreMip_Texture3D_mip;
Variable TextureStoreMip_Texture3D_value;
Function TextureStoreMip_Texture3D;
inline constexpr std::array TextureStoreMip_Texture3D_args = { &TextureStoreMip_Texture3D_texture, &TextureStoreMip_Texture3D_coordinate, &TextureStoreMip_Texture3D_mip, &TextureStoreMip_Texture3D_value };

/// textureLoad with TextureCube, Int32x3
Variable TextureLoad_TextureCube_texture;
inline constexpr std::array TextureLoad_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_TextureCube_coordinate;
Function TextureLoad_TextureCube;
inline constexpr std::array TextureLoad_TextureCube_args = { &TextureLoad_TextureCube_texture, &TextureLoad_TextureCube_coordinate };

/// textureLoadMip with TextureCube, Int32x3, Int32
Variable TextureLoadMip_TextureCube_texture;
inline constexpr std::array TextureLoadMip_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_TextureCube_coordinate;
Variable TextureLoadMip_TextureCube_mip;
Function TextureLoadMip_TextureCube;
inline constexpr std::array TextureLoadMip_TextureCube_args = { &TextureLoadMip_TextureCube_texture, &TextureLoadMip_TextureCube_coordinate, &TextureLoadMip_TextureCube_mip };

/// textureStore with TextureCube, Int32x3, Float32x4
Variable TextureStore_TextureCube_texture;
inline constexpr std::array TextureStore_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_TextureCube_coordinate;
Variable TextureStore_TextureCube_value;
Function TextureStore_TextureCube;
inline constexpr std::array TextureStore_TextureCube_args = { &TextureStore_TextureCube_texture, &TextureStore_TextureCube_coordinate, &TextureStore_TextureCube_value };

/// textureStoreMip with TextureCube, Int32x3, Int32, Float32x4
Variable TextureStoreMip_TextureCube_texture;
inline constexpr std::array TextureStoreMip_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_TextureCube_coordinate;
Variable TextureStoreMip_TextureCube_mip;
Variable TextureStoreMip_TextureCube_value;
Function TextureStoreMip_TextureCube;
inline constexpr std::array TextureStoreMip_TextureCube_args = { &TextureStoreMip_TextureCube_texture, &TextureStoreMip_TextureCube_coordinate, &TextureStoreMip_TextureCube_mip, &TextureStoreMip_TextureCube_value };

/// textureLoad with Texture1DArray, Int32x2
Variable TextureLoad_Texture1DArray_texture;
inline constexpr std::array TextureLoad_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture1DArray_coordinate;
Function TextureLoad_Texture1DArray;
inline constexpr std::array TextureLoad_Texture1DArray_args = { &TextureLoad_Texture1DArray_texture, &TextureLoad_Texture1DArray_coordinate };

/// textureLoadMip with Texture1DArray, Int32x2, Int32
Variable TextureLoadMip_Texture1DArray_texture;
inline constexpr std::array TextureLoadMip_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture1DArray_coordinate;
Variable TextureLoadMip_Texture1DArray_mip;
Function TextureLoadMip_Texture1DArray;
inline constexpr std::array TextureLoadMip_Texture1DArray_args = { &TextureLoadMip_Texture1DArray_texture, &TextureLoadMip_Texture1DArray_coordinate, &TextureLoadMip_Texture1DArray_mip };

/// textureStore with Texture1DArray, Int32x2, Float32x4
Variable TextureStore_Texture1DArray_texture;
inline constexpr std::array TextureStore_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture1DArray_coordinate;
Variable TextureStore_Texture1DArray_value;
Function TextureStore_Texture1DArray;
inline constexpr std::array TextureStore_Texture1DArray_args = { &TextureStore_Texture1DArray_texture, &TextureStore_Texture1DArray_coordinate, &TextureStore_Texture1DArray_value };

/// textureStoreMip with Texture1DArray, Int32x2, Int32, Float32x4
Variable TextureStoreMip_Texture1DArray_texture;
inline constexpr std::array TextureStoreMip_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture1DArray_coordinate;
Variable TextureStoreMip_Texture1DArray_mip;
Variable TextureStoreMip_Texture1DArray_value;
Function TextureStoreMip_Texture1DArray;
inline constexpr std::array TextureStoreMip_Texture1DArray_args = { &TextureStoreMip_Texture1DArray_texture, &TextureStoreMip_Texture1DArray_coordinate, &TextureStoreMip_Texture1DArray_mip, &TextureStoreMip_Texture1DArray_value };

/// textureLoad with Texture2DArray, Int32x3
Variable TextureLoad_Texture2DArray_texture;
inline constexpr std::array TextureLoad_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture2DArray_coordinate;
Function TextureLoad_Texture2DArray;
inline constexpr std::array TextureLoad_Texture2DArray_args = { &TextureLoad_Texture2DArray_texture, &TextureLoad_Texture2DArray_coordinate };

/// textureLoadMip with Texture2DArray, Int32x3, Int32
Variable TextureLoadMip_Texture2DArray_texture;
inline constexpr std::array TextureLoadMip_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture2DArray_coordinate;
Variable TextureLoadMip_Texture2DArray_mip;
Function TextureLoadMip_Texture2DArray;
inline constexpr std::array TextureLoadMip_Texture2DArray_args = { &TextureLoadMip_Texture2DArray_texture, &TextureLoadMip_Texture2DArray_coordinate, &TextureLoadMip_Texture2DArray_mip };

/// textureStore with Texture2DArray, Int32x3, Float32x4
Variable TextureStore_Texture2DArray_texture;
inline constexpr std::array TextureStore_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture2DArray_coordinate;
Variable TextureStore_Texture2DArray_value;
Function TextureStore_Texture2DArray;
inline constexpr std::array TextureStore_Texture2DArray_args = { &TextureStore_Texture2DArray_texture, &TextureStore_Texture2DArray_coordinate, &TextureStore_Texture2DArray_value };

/// textureStoreMip with Texture2DArray, Int32x3, Int32, Float32x4
Variable TextureStoreMip_Texture2DArray_texture;
inline constexpr std::array TextureStoreMip_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture2DArray_coordinate;
Variable TextureStoreMip_Texture2DArray_mip;
Variable TextureStoreMip_Texture2DArray_value;
Function TextureStoreMip_Texture2DArray;
inline constexpr std::array TextureStoreMip_Texture2DArray_args = { &TextureStoreMip_Texture2DArray_texture, &TextureStoreMip_Texture2DArray_coordinate, &TextureStoreMip_Texture2DArray_mip, &TextureStoreMip_Texture2DArray_value };

/// textureLoad with TextureCubeArray, Int32x4
Variable TextureLoad_TextureCubeArray_texture;
inline constexpr std::array TextureLoad_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_TextureCubeArray_coordinate;
Function TextureLoad_TextureCubeArray;
inline constexpr std::array TextureLoad_TextureCubeArray_args = { &TextureLoad_TextureCubeArray_texture, &TextureLoad_TextureCubeArray_coordinate };

/// textureLoadMip with TextureCubeArray, Int32x4, Int32
Variable TextureLoadMip_TextureCubeArray_texture;
inline constexpr std::array TextureLoadMip_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_TextureCubeArray_coordinate;
Variable TextureLoadMip_TextureCubeArray_mip;
Function TextureLoadMip_TextureCubeArray;
inline constexpr std::array TextureLoadMip_TextureCubeArray_args = { &TextureLoadMip_TextureCubeArray_texture, &TextureLoadMip_TextureCubeArray_coordinate, &TextureLoadMip_TextureCubeArray_mip };

/// textureStore with TextureCubeArray, Int32x4, Float32x4
Variable TextureStore_TextureCubeArray_texture;
inline constexpr std::array TextureStore_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_TextureCubeArray_coordinate;
Variable TextureStore_TextureCubeArray_value;
Function TextureStore_TextureCubeArray;
inline constexpr std::array TextureStore_TextureCubeArray_args = { &TextureStore_TextureCubeArray_texture, &TextureStore_TextureCubeArray_coordinate, &TextureStore_TextureCubeArray_value };

/// textureStoreMip with TextureCubeArray, Int32x4, Int32, Float32x4
Variable TextureStoreMip_TextureCubeArray_texture;
inline constexpr std::array TextureStoreMip_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_TextureCubeArray_coordinate;
Variable TextureStoreMip_TextureCubeArray_mip;
Variable TextureStoreMip_TextureCubeArray_value;
Function TextureStoreMip_TextureCubeArray;
inline constexpr std::array TextureStoreMip_TextureCubeArray_args = { &TextureStoreMip_TextureCubeArray_texture, &TextureStoreMip_TextureCubeArray_coordinate, &TextureStoreMip_TextureCubeArray_mip, &TextureStoreMip_TextureCubeArray_value };

/// textureLoad with Texture2DMS, Int32x2
Variable TextureLoad_Texture2DMS_texture;
inline constexpr std::array TextureLoad_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture2DMS_coordinate;
Function TextureLoad_Texture2DMS;
inline constexpr std::array TextureLoad_Texture2DMS_args = { &TextureLoad_Texture2DMS_texture, &TextureLoad_Texture2DMS_coordinate };

/// textureLoadMip with Texture2DMS, Int32x2, Int32
Variable TextureLoadMip_Texture2DMS_texture;
inline constexpr std::array TextureLoadMip_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture2DMS_coordinate;
Variable TextureLoadMip_Texture2DMS_mip;
Function TextureLoadMip_Texture2DMS;
inline constexpr std::array TextureLoadMip_Texture2DMS_args = { &TextureLoadMip_Texture2DMS_texture, &TextureLoadMip_Texture2DMS_coordinate, &TextureLoadMip_Texture2DMS_mip };

/// textureStore with Texture2DMS, Int32x2, Float32x4
Variable TextureStore_Texture2DMS_texture;
inline constexpr std::array TextureStore_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture2DMS_coordinate;
Variable TextureStore_Texture2DMS_value;
Function TextureStore_Texture2DMS;
inline constexpr std::array TextureStore_Texture2DMS_args = { &TextureStore_Texture2DMS_texture, &TextureStore_Texture2DMS_coordinate, &TextureStore_Texture2DMS_value };

/// textureStoreMip with Texture2DMS, Int32x2, Int32, Float32x4
Variable TextureStoreMip_Texture2DMS_texture;
inline constexpr std::array TextureStoreMip_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture2DMS_coordinate;
Variable TextureStoreMip_Texture2DMS_mip;
Variable TextureStoreMip_Texture2DMS_value;
Function TextureStoreMip_Texture2DMS;
inline constexpr std::array TextureStoreMip_Texture2DMS_args = { &TextureStoreMip_Texture2DMS_texture, &TextureStoreMip_Texture2DMS_coordinate, &TextureStoreMip_Texture2DMS_mip, &TextureStoreMip_Texture2DMS_value };

/// textureLoad with Texture2DMSArray, Int32x3
Variable TextureLoad_Texture2DMSArray_texture;
inline constexpr std::array TextureLoad_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture2DMSArray_coordinate;
Function TextureLoad_Texture2DMSArray;
inline constexpr std::array TextureLoad_Texture2DMSArray_args = { &TextureLoad_Texture2DMSArray_texture, &TextureLoad_Texture2DMSArray_coordinate };

/// textureLoadMip with Texture2DMSArray, Int32x3, Int32
Variable TextureLoadMip_Texture2DMSArray_texture;
inline constexpr std::array TextureLoadMip_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture2DMSArray_coordinate;
Variable TextureLoadMip_Texture2DMSArray_mip;
Function TextureLoadMip_Texture2DMSArray;
inline constexpr std::array TextureLoadMip_Texture2DMSArray_args = { &TextureLoadMip_Texture2DMSArray_texture, &TextureLoadMip_Texture2DMSArray_coordinate, &TextureLoadMip_Texture2DMSArray_mip };

/// textureStore with Texture2DMSArray, Int32x3, Float32x4
Variable TextureStore_Texture2DMSArray_texture;
inline constexpr std::array TextureStore_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture2DMSArray_coordinate;
Variable TextureStore_Texture2DMSArray_value;
Function TextureStore_Texture2DMSArray;
inline constexpr std::array TextureStore_Texture2DMSArray_args = { &TextureStore_Texture2DMSArray_texture, &TextureStore_Texture2DMSArray_coordinate, &TextureStore_Texture2DMSArray_value };

/// textureStoreMip with Texture2DMSArray, Int32x3, Int32, Float32x4
Variable TextureStoreMip_Texture2DMSArray_texture;
inline constexpr std::array TextureStoreMip_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture2DMSArray_coordinate;
Variable TextureStoreMip_Texture2DMSArray_mip;
Variable TextureStoreMip_Texture2DMSArray_value;
Function TextureStoreMip_Texture2DMSArray;
inline constexpr std::array TextureStoreMip_Texture2DMSArray_args = { &TextureStoreMip_Texture2DMSArray_texture, &TextureStoreMip_Texture2DMSArray_coordinate, &TextureStoreMip_Texture2DMSArray_mip, &TextureStoreMip_Texture2DMSArray_value };

/// textureFetch with Texture1D, Int32, UInt32
Variable TextureFetch_Texture1D_texture;
inline constexpr std::array TextureFetch_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture1D_coordinate;
Variable TextureFetch_Texture1D_lod;
Function TextureFetch_Texture1D;
inline constexpr std::array TextureFetch_Texture1D_args = { &TextureFetch_Texture1D_texture, &TextureFetch_Texture1D_coordinate, &TextureFetch_Texture1D_lod };

/// textureFetchSample with Texture1D, Int32, UInt32, UInt32
Variable TextureFetchSample_Texture1D_texture;
inline constexpr std::array TextureFetchSample_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture1D_coordinate;
Variable TextureFetchSample_Texture1D_lod;
Variable TextureFetchSample_Texture1D_sample;
Function TextureFetchSample_Texture1D;
inline constexpr std::array TextureFetchSample_Texture1D_args = { &TextureFetchSample_Texture1D_texture, &TextureFetchSample_Texture1D_coordinate, &TextureFetchSample_Texture1D_lod, &TextureFetchSample_Texture1D_sample };

/// textureFetch with Texture2D, Int32x2, UInt32
Variable TextureFetch_Texture2D_texture;
inline constexpr std::array TextureFetch_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture2D_coordinate;
Variable TextureFetch_Texture2D_lod;
Function TextureFetch_Texture2D;
inline constexpr std::array TextureFetch_Texture2D_args = { &TextureFetch_Texture2D_texture, &TextureFetch_Texture2D_coordinate, &TextureFetch_Texture2D_lod };

/// textureFetchSample with Texture2D, Int32x2, UInt32, UInt32
Variable TextureFetchSample_Texture2D_texture;
inline constexpr std::array TextureFetchSample_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture2D_coordinate;
Variable TextureFetchSample_Texture2D_lod;
Variable TextureFetchSample_Texture2D_sample;
Function TextureFetchSample_Texture2D;
inline constexpr std::array TextureFetchSample_Texture2D_args = { &TextureFetchSample_Texture2D_texture, &TextureFetchSample_Texture2D_coordinate, &TextureFetchSample_Texture2D_lod, &TextureFetchSample_Texture2D_sample };

/// textureFetch with Texture3D, Int32x3, UInt32
Variable TextureFetch_Texture3D_texture;
inline constexpr std::array TextureFetch_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture3D_coordinate;
Variable TextureFetch_Texture3D_lod;
Function TextureFetch_Texture3D;
inline constexpr std::array TextureFetch_Texture3D_args = { &TextureFetch_Texture3D_texture, &TextureFetch_Texture3D_coordinate, &TextureFetch_Texture3D_lod };

/// textureFetchSample with Texture3D, Int32x3, UInt32, UInt32
Variable TextureFetchSample_Texture3D_texture;
inline constexpr std::array TextureFetchSample_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture3D_coordinate;
Variable TextureFetchSample_Texture3D_lod;
Variable TextureFetchSample_Texture3D_sample;
Function TextureFetchSample_Texture3D;
inline constexpr std::array TextureFetchSample_Texture3D_args = { &TextureFetchSample_Texture3D_texture, &TextureFetchSample_Texture3D_coordinate, &TextureFetchSample_Texture3D_lod, &TextureFetchSample_Texture3D_sample };

/// textureFetch with Texture1DArray, Int32x2, UInt32
Variable TextureFetch_Texture1DArray_texture;
inline constexpr std::array TextureFetch_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture1DArray_coordinate;
Variable TextureFetch_Texture1DArray_lod;
Function TextureFetch_Texture1DArray;
inline constexpr std::array TextureFetch_Texture1DArray_args = { &TextureFetch_Texture1DArray_texture, &TextureFetch_Texture1DArray_coordinate, &TextureFetch_Texture1DArray_lod };

/// textureFetchSample with Texture1DArray, Int32x2, UInt32, UInt32
Variable TextureFetchSample_Texture1DArray_texture;
inline constexpr std::array TextureFetchSample_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture1DArray_coordinate;
Variable TextureFetchSample_Texture1DArray_lod;
Variable TextureFetchSample_Texture1DArray_sample;
Function TextureFetchSample_Texture1DArray;
inline constexpr std::array TextureFetchSample_Texture1DArray_args = { &TextureFetchSample_Texture1DArray_texture, &TextureFetchSample_Texture1DArray_coordinate, &TextureFetchSample_Texture1DArray_lod, &TextureFetchSample_Texture1DArray_sample };

/// textureFetch with Texture2DArray, Int32x3, UInt32
Variable TextureFetch_Texture2DArray_texture;
inline constexpr std::array TextureFetch_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture2DArray_coordinate;
Variable TextureFetch_Texture2DArray_lod;
Function TextureFetch_Texture2DArray;
inline constexpr std::array TextureFetch_Texture2DArray_args = { &TextureFetch_Texture2DArray_texture, &TextureFetch_Texture2DArray_coordinate, &TextureFetch_Texture2DArray_lod };

/// textureFetchSample with Texture2DArray, Int32x3, UInt32, UInt32
Variable TextureFetchSample_Texture2DArray_texture;
inline constexpr std::array TextureFetchSample_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture2DArray_coordinate;
Variable TextureFetchSample_Texture2DArray_lod;
Variable TextureFetchSample_Texture2DArray_sample;
Function TextureFetchSample_Texture2DArray;
inline constexpr std::array TextureFetchSample_Texture2DArray_args = { &TextureFetchSample_Texture2DArray_texture, &TextureFetchSample_Texture2DArray_coordinate, &TextureFetchSample_Texture2DArray_lod, &TextureFetchSample_Texture2DArray_sample };

/// textureFetch with Texture2DMS, Int32x2, UInt32
Variable TextureFetch_Texture2DMS_texture;
inline constexpr std::array TextureFetch_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture2DMS_coordinate;
Variable TextureFetch_Texture2DMS_lod;
Function TextureFetch_Texture2DMS;
inline constexpr std::array TextureFetch_Texture2DMS_args = { &TextureFetch_Texture2DMS_texture, &TextureFetch_Texture2DMS_coordinate, &TextureFetch_Texture2DMS_lod };

/// textureFetchSample with Texture2DMS, Int32x2, UInt32, UInt32
Variable TextureFetchSample_Texture2DMS_texture;
inline constexpr std::array TextureFetchSample_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture2DMS_coordinate;
Variable TextureFetchSample_Texture2DMS_lod;
Variable TextureFetchSample_Texture2DMS_sample;
Function TextureFetchSample_Texture2DMS;
inline constexpr std::array TextureFetchSample_Texture2DMS_args = { &TextureFetchSample_Texture2DMS_texture, &TextureFetchSample_Texture2DMS_coordinate, &TextureFetchSample_Texture2DMS_lod, &TextureFetchSample_Texture2DMS_sample };

/// textureFetch with Texture2DMSArray, Int32x3, UInt32
Variable TextureFetch_Texture2DMSArray_texture;
inline constexpr std::array TextureFetch_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture2DMSArray_coordinate;
Variable TextureFetch_Texture2DMSArray_lod;
Function TextureFetch_Texture2DMSArray;
inline constexpr std::array TextureFetch_Texture2DMSArray_args = { &TextureFetch_Texture2DMSArray_texture, &TextureFetch_Texture2DMSArray_coordinate, &TextureFetch_Texture2DMSArray_lod };

/// textureFetchSample with Texture2DMSArray, Int32x3, UInt32, UInt32
Variable TextureFetchSample_Texture2DMSArray_texture;
inline constexpr std::array TextureFetchSample_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture2DMSArray_coordinate;
Variable TextureFetchSample_Texture2DMSArray_lod;
Variable TextureFetchSample_Texture2DMSArray_sample;
Function TextureFetchSample_Texture2DMSArray;
inline constexpr std::array TextureFetchSample_Texture2DMSArray_args = { &TextureFetchSample_Texture2DMSArray_texture, &TextureFetchSample_Texture2DMSArray_coordinate, &TextureFetchSample_Texture2DMSArray_lod, &TextureFetchSample_Texture2DMSArray_sample };

/// textureGather with Texture2D, Sampler, Int32x2, Int32
Variable TextureGather_Texture2D_texture;
inline constexpr std::array TextureGather_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGather_Texture2D_sampler;
inline constexpr std::array TextureGather_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGather_Texture2D_coordinate;
Variable TextureGather_Texture2D_component;
Function TextureGather_Texture2D;
inline constexpr std::array TextureGather_Texture2D_args = { &TextureGather_Texture2D_texture, &TextureGather_Texture2D_sampler, &TextureGather_Texture2D_coordinate, &TextureGather_Texture2D_component };

/// textureGather with SampledTexture2D, Int32x2, Int32
Variable SampledTextureGather_Texture2D_texture;
inline constexpr std::array SampledTextureGather_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGather_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGather_Texture2D_coordinate;
Variable SampledTextureGather_Texture2D_component;
Function SampledTextureGather_Texture2D;
inline constexpr std::array SampledTextureGather_Texture2D_args = { &SampledTextureGather_Texture2D_texture, &SampledTextureGather_Texture2D_coordinate, &SampledTextureGather_Texture2D_component };

/// textureGatherOffset with Texture2D, Sampler, Int32x2, Int32, UInt32
Variable TextureGatherOffset_Texture2D_texture;
inline constexpr std::array TextureGatherOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_Texture2D_sampler;
inline constexpr std::array TextureGatherOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_Texture2D_coordinate;
Variable TextureGatherOffset_Texture2D_component;
Variable TextureGatherOffset_Texture2D_offset;
Function TextureGatherOffset_Texture2D;
inline constexpr std::array TextureGatherOffset_Texture2D_args = { &TextureGatherOffset_Texture2D_texture, &TextureGatherOffset_Texture2D_sampler, &TextureGatherOffset_Texture2D_coordinate, &TextureGatherOffset_Texture2D_component, &TextureGatherOffset_Texture2D_offset };

/// textureGatherOffset with SampledTexture2D, Int32x2, Int32, UInt32
Variable SampledTextureGatherOffset_Texture2D_texture;
inline constexpr std::array SampledTextureGatherOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGatherOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGatherOffset_Texture2D_coordinate;
Variable SampledTextureGatherOffset_Texture2D_component;
Variable SampledTextureGatherOffset_Texture2D_offset;
Function SampledTextureGatherOffset_Texture2D;
inline constexpr std::array SampledTextureGatherOffset_Texture2D_args = { &SampledTextureGatherOffset_Texture2D_texture, &SampledTextureGatherOffset_Texture2D_coordinate, &SampledTextureGatherOffset_Texture2D_component, &SampledTextureGatherOffset_Texture2D_offset };

/// textureGather with TextureCube, Sampler, Int32x3, Int32
Variable TextureGather_TextureCube_texture;
inline constexpr std::array TextureGather_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGather_TextureCube_sampler;
inline constexpr std::array TextureGather_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGather_TextureCube_coordinate;
Variable TextureGather_TextureCube_component;
Function TextureGather_TextureCube;
inline constexpr std::array TextureGather_TextureCube_args = { &TextureGather_TextureCube_texture, &TextureGather_TextureCube_sampler, &TextureGather_TextureCube_coordinate, &TextureGather_TextureCube_component };

/// textureGather with SampledTextureCube, Int32x3, Int32
Variable SampledTextureGather_TextureCube_texture;
inline constexpr std::array SampledTextureGather_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGather_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGather_TextureCube_coordinate;
Variable SampledTextureGather_TextureCube_component;
Function SampledTextureGather_TextureCube;
inline constexpr std::array SampledTextureGather_TextureCube_args = { &SampledTextureGather_TextureCube_texture, &SampledTextureGather_TextureCube_coordinate, &SampledTextureGather_TextureCube_component };

/// textureGatherOffset with TextureCube, Sampler, Int32x3, Int32, UInt32
Variable TextureGatherOffset_TextureCube_texture;
inline constexpr std::array TextureGatherOffset_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_TextureCube_sampler;
inline constexpr std::array TextureGatherOffset_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_TextureCube_coordinate;
Variable TextureGatherOffset_TextureCube_component;
Variable TextureGatherOffset_TextureCube_offset;
Function TextureGatherOffset_TextureCube;
inline constexpr std::array TextureGatherOffset_TextureCube_args = { &TextureGatherOffset_TextureCube_texture, &TextureGatherOffset_TextureCube_sampler, &TextureGatherOffset_TextureCube_coordinate, &TextureGatherOffset_TextureCube_component, &TextureGatherOffset_TextureCube_offset };

/// textureGatherOffset with SampledTextureCube, Int32x3, Int32, UInt32
Variable SampledTextureGatherOffset_TextureCube_texture;
inline constexpr std::array SampledTextureGatherOffset_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGatherOffset_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGatherOffset_TextureCube_coordinate;
Variable SampledTextureGatherOffset_TextureCube_component;
Variable SampledTextureGatherOffset_TextureCube_offset;
Function SampledTextureGatherOffset_TextureCube;
inline constexpr std::array SampledTextureGatherOffset_TextureCube_args = { &SampledTextureGatherOffset_TextureCube_texture, &SampledTextureGatherOffset_TextureCube_coordinate, &SampledTextureGatherOffset_TextureCube_component, &SampledTextureGatherOffset_TextureCube_offset };

/// textureGather with Texture2DArray, Sampler, Int32x3, Int32
Variable TextureGather_Texture2DArray_texture;
inline constexpr std::array TextureGather_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGather_Texture2DArray_sampler;
inline constexpr std::array TextureGather_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGather_Texture2DArray_coordinate;
Variable TextureGather_Texture2DArray_component;
Function TextureGather_Texture2DArray;
inline constexpr std::array TextureGather_Texture2DArray_args = { &TextureGather_Texture2DArray_texture, &TextureGather_Texture2DArray_sampler, &TextureGather_Texture2DArray_coordinate, &TextureGather_Texture2DArray_component };

/// textureGather with SampledTexture2DArray, Int32x3, Int32
Variable SampledTextureGather_Texture2DArray_texture;
inline constexpr std::array SampledTextureGather_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGather_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGather_Texture2DArray_coordinate;
Variable SampledTextureGather_Texture2DArray_component;
Function SampledTextureGather_Texture2DArray;
inline constexpr std::array SampledTextureGather_Texture2DArray_args = { &SampledTextureGather_Texture2DArray_texture, &SampledTextureGather_Texture2DArray_coordinate, &SampledTextureGather_Texture2DArray_component };

/// textureGatherOffset with Texture2DArray, Sampler, Int32x3, Int32, UInt32
Variable TextureGatherOffset_Texture2DArray_texture;
inline constexpr std::array TextureGatherOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_Texture2DArray_sampler;
inline constexpr std::array TextureGatherOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_Texture2DArray_coordinate;
Variable TextureGatherOffset_Texture2DArray_component;
Variable TextureGatherOffset_Texture2DArray_offset;
Function TextureGatherOffset_Texture2DArray;
inline constexpr std::array TextureGatherOffset_Texture2DArray_args = { &TextureGatherOffset_Texture2DArray_texture, &TextureGatherOffset_Texture2DArray_sampler, &TextureGatherOffset_Texture2DArray_coordinate, &TextureGatherOffset_Texture2DArray_component, &TextureGatherOffset_Texture2DArray_offset };

/// textureGatherOffset with SampledTexture2DArray, Int32x3, Int32, UInt32
Variable SampledTextureGatherOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureGatherOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGatherOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGatherOffset_Texture2DArray_coordinate;
Variable SampledTextureGatherOffset_Texture2DArray_component;
Variable SampledTextureGatherOffset_Texture2DArray_offset;
Function SampledTextureGatherOffset_Texture2DArray;
inline constexpr std::array SampledTextureGatherOffset_Texture2DArray_args = { &SampledTextureGatherOffset_Texture2DArray_texture, &SampledTextureGatherOffset_Texture2DArray_coordinate, &SampledTextureGatherOffset_Texture2DArray_component, &SampledTextureGatherOffset_Texture2DArray_offset };

/// textureGather with TextureCubeArray, Sampler, Int32x4, Int32
Variable TextureGather_TextureCubeArray_texture;
inline constexpr std::array TextureGather_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGather_TextureCubeArray_sampler;
inline constexpr std::array TextureGather_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGather_TextureCubeArray_coordinate;
Variable TextureGather_TextureCubeArray_component;
Function TextureGather_TextureCubeArray;
inline constexpr std::array TextureGather_TextureCubeArray_args = { &TextureGather_TextureCubeArray_texture, &TextureGather_TextureCubeArray_sampler, &TextureGather_TextureCubeArray_coordinate, &TextureGather_TextureCubeArray_component };

/// textureGather with SampledTextureCubeArray, Int32x4, Int32
Variable SampledTextureGather_TextureCubeArray_texture;
inline constexpr std::array SampledTextureGather_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGather_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGather_TextureCubeArray_coordinate;
Variable SampledTextureGather_TextureCubeArray_component;
Function SampledTextureGather_TextureCubeArray;
inline constexpr std::array SampledTextureGather_TextureCubeArray_args = { &SampledTextureGather_TextureCubeArray_texture, &SampledTextureGather_TextureCubeArray_coordinate, &SampledTextureGather_TextureCubeArray_component };

/// textureGatherOffset with TextureCubeArray, Sampler, Int32x4, Int32, UInt32
Variable TextureGatherOffset_TextureCubeArray_texture;
inline constexpr std::array TextureGatherOffset_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_TextureCubeArray_sampler;
inline constexpr std::array TextureGatherOffset_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_TextureCubeArray_coordinate;
Variable TextureGatherOffset_TextureCubeArray_component;
Variable TextureGatherOffset_TextureCubeArray_offset;
Function TextureGatherOffset_TextureCubeArray;
inline constexpr std::array TextureGatherOffset_TextureCubeArray_args = { &TextureGatherOffset_TextureCubeArray_texture, &TextureGatherOffset_TextureCubeArray_sampler, &TextureGatherOffset_TextureCubeArray_coordinate, &TextureGatherOffset_TextureCubeArray_component, &TextureGatherOffset_TextureCubeArray_offset };

/// textureGatherOffset with SampledTextureCubeArray, Int32x4, Int32, UInt32
Variable SampledTextureGatherOffset_TextureCubeArray_texture;
inline constexpr std::array SampledTextureGatherOffset_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGatherOffset_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGatherOffset_TextureCubeArray_coordinate;
Variable SampledTextureGatherOffset_TextureCubeArray_component;
Variable SampledTextureGatherOffset_TextureCubeArray_offset;
Function SampledTextureGatherOffset_TextureCubeArray;
inline constexpr std::array SampledTextureGatherOffset_TextureCubeArray_args = { &SampledTextureGatherOffset_TextureCubeArray_texture, &SampledTextureGatherOffset_TextureCubeArray_coordinate, &SampledTextureGatherOffset_TextureCubeArray_component, &SampledTextureGatherOffset_TextureCubeArray_offset };

/// texturePixelCacheLoad with PixelCache
Variable TexturePixelCacheLoad_PixelCache_texture;
inline constexpr std::array TexturePixelCacheLoad_PixelCache_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TexturePixelCacheLoad_PixelCache_texture_modifierValues = {(Expression*)nullptr};
Function TexturePixelCacheLoad_PixelCache;
inline constexpr std::array TexturePixelCacheLoad_PixelCache_args = { &TexturePixelCacheLoad_PixelCache_texture };

/// texturePixelCacheLoad with PixelCacheMS, UInt32
Variable TexturePixelCacheLoad_PixelCacheMS_texture;
inline constexpr std::array TexturePixelCacheLoad_PixelCacheMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TexturePixelCacheLoad_PixelCacheMS_texture_modifierValues = {(Expression*)nullptr};
Variable TexturePixelCacheLoad_PixelCacheMS_sample;
Function TexturePixelCacheLoad_PixelCacheMS;
inline constexpr std::array TexturePixelCacheLoad_PixelCacheMS_args = { &TexturePixelCacheLoad_PixelCacheMS_texture, &TexturePixelCacheLoad_PixelCacheMS_sample };

/// textureSample with Texture1D, Sampler, Float32
Variable TextureSample_Texture1D_texture;
inline constexpr std::array TextureSample_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture1D_sampler;
inline constexpr std::array TextureSample_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture1D_coordinate;
Function TextureSample_Texture1D;
inline constexpr std::array TextureSample_Texture1D_args = { &TextureSample_Texture1D_texture, &TextureSample_Texture1D_sampler, &TextureSample_Texture1D_coordinate };

/// textureSample with SampledTexture1D, Float32
Variable SampledTextureSample_Texture1D_texture;
inline constexpr std::array SampledTextureSample_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_Texture1D_coordinate;
Function SampledTextureSample_Texture1D;
inline constexpr std::array SampledTextureSample_Texture1D_args = { &SampledTextureSample_Texture1D_texture, &SampledTextureSample_Texture1D_coordinate };

void SetupIntrinsics10()
{
    /// bitExtract with UInt32, UInt32, UInt32
    BitExtract_UInt32_base.name = "base"_c;
    BitExtract_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitExtract_UInt32_offset.name = "offset"_c;
    BitExtract_UInt32_offset.type = Type::FullType{ UInt32Type.name };
    BitExtract_UInt32_count.name = "count"_c;
    BitExtract_UInt32_count.type = Type::FullType{ UInt32Type.name };
    BitExtract_UInt32.documentation = "Extract a specific bit from a bitmask"_c;
    BitExtract_UInt32.name = BitExtract_UInt32_name;
    BitExtract_UInt32.backendIndex = 2217;
    BitExtract_UInt32.returnType = Type::FullType { UInt32Type.name };
    BitExtract_UInt32.parameters = BitExtract_UInt32_args;
    Symbol::Resolved(&BitExtract_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitExtract_UInt32_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitExtract_UInt32_count)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitExtract_UInt32)->signature = "bitExtract(u32,u32,u32) u32"_c;
    Symbol::Resolved(&BitExtract_UInt32)->name = "bitExtract(u32,u32,u32)"_c;
    Symbol::Resolved(&BitExtract_UInt32)->nameWithVarNames = "bitExtract(base : u32, offset : u32, count : u32)"_c;
    Symbol::Resolved(&BitExtract_UInt32)->returnTypeSymbol = &UInt32Type;

    /// bitExtract with Int32, Int32, Int32
    BitExtract_Int32_base.name = "base"_c;
    BitExtract_Int32_base.type = Type::FullType{ Int32Type.name };
    BitExtract_Int32_offset.name = "offset"_c;
    BitExtract_Int32_offset.type = Type::FullType{ Int32Type.name };
    BitExtract_Int32_count.name = "count"_c;
    BitExtract_Int32_count.type = Type::FullType{ Int32Type.name };
    BitExtract_Int32.documentation = "Extract a specific bit from a bitmask"_c;
    BitExtract_Int32.name = BitExtract_Int32_name;
    BitExtract_Int32.backendIndex = 2218;
    BitExtract_Int32.returnType = Type::FullType { Int32Type.name };
    BitExtract_Int32.parameters = BitExtract_Int32_args;
    Symbol::Resolved(&BitExtract_Int32_base)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitExtract_Int32_offset)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitExtract_Int32_count)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitExtract_Int32)->signature = "bitExtract(i32,i32,i32) i32"_c;
    Symbol::Resolved(&BitExtract_Int32)->name = "bitExtract(i32,i32,i32)"_c;
    Symbol::Resolved(&BitExtract_Int32)->nameWithVarNames = "bitExtract(base : i32, offset : i32, count : i32)"_c;
    Symbol::Resolved(&BitExtract_Int32)->returnTypeSymbol = &Int32Type;

    /// bitExtract with UInt16, UInt16, UInt16
    BitExtract_UInt16_base.name = "base"_c;
    BitExtract_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitExtract_UInt16_offset.name = "offset"_c;
    BitExtract_UInt16_offset.type = Type::FullType{ UInt16Type.name };
    BitExtract_UInt16_count.name = "count"_c;
    BitExtract_UInt16_count.type = Type::FullType{ UInt16Type.name };
    BitExtract_UInt16.documentation = "Extract a specific bit from a bitmask"_c;
    BitExtract_UInt16.name = BitExtract_UInt16_name;
    BitExtract_UInt16.backendIndex = 2219;
    BitExtract_UInt16.returnType = Type::FullType { UInt16Type.name };
    BitExtract_UInt16.parameters = BitExtract_UInt16_args;
    Symbol::Resolved(&BitExtract_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitExtract_UInt16_offset)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitExtract_UInt16_count)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitExtract_UInt16)->signature = "bitExtract(u16,u16,u16) u16"_c;
    Symbol::Resolved(&BitExtract_UInt16)->name = "bitExtract(u16,u16,u16)"_c;
    Symbol::Resolved(&BitExtract_UInt16)->nameWithVarNames = "bitExtract(base : u16, offset : u16, count : u16)"_c;
    Symbol::Resolved(&BitExtract_UInt16)->returnTypeSymbol = &UInt16Type;

    /// bitExtract with Int16, Int16, Int16
    BitExtract_Int16_base.name = "base"_c;
    BitExtract_Int16_base.type = Type::FullType{ Int16Type.name };
    BitExtract_Int16_offset.name = "offset"_c;
    BitExtract_Int16_offset.type = Type::FullType{ Int16Type.name };
    BitExtract_Int16_count.name = "count"_c;
    BitExtract_Int16_count.type = Type::FullType{ Int16Type.name };
    BitExtract_Int16.documentation = "Extract a specific bit from a bitmask"_c;
    BitExtract_Int16.name = BitExtract_Int16_name;
    BitExtract_Int16.backendIndex = 2220;
    BitExtract_Int16.returnType = Type::FullType { Int16Type.name };
    BitExtract_Int16.parameters = BitExtract_Int16_args;
    Symbol::Resolved(&BitExtract_Int16_base)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitExtract_Int16_offset)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitExtract_Int16_count)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitExtract_Int16)->signature = "bitExtract(i16,i16,i16) i16"_c;
    Symbol::Resolved(&BitExtract_Int16)->name = "bitExtract(i16,i16,i16)"_c;
    Symbol::Resolved(&BitExtract_Int16)->nameWithVarNames = "bitExtract(base : i16, offset : i16, count : i16)"_c;
    Symbol::Resolved(&BitExtract_Int16)->returnTypeSymbol = &Int16Type;

    /// bitReverse with UInt32
    BitReverse_UInt32_base.name = "base"_c;
    BitReverse_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitReverse_UInt32.documentation = "Reverses the bits in a bitmask"_c;
    BitReverse_UInt32.name = BitReverse_UInt32_name;
    BitReverse_UInt32.backendIndex = 2221;
    BitReverse_UInt32.returnType = Type::FullType { UInt32Type.name };
    BitReverse_UInt32.parameters = BitReverse_UInt32_args;
    Symbol::Resolved(&BitReverse_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitReverse_UInt32)->signature = "bitReverse(u32) u32"_c;
    Symbol::Resolved(&BitReverse_UInt32)->name = "bitReverse(u32)"_c;
    Symbol::Resolved(&BitReverse_UInt32)->nameWithVarNames = "bitReverse(base : u32)"_c;
    Symbol::Resolved(&BitReverse_UInt32)->returnTypeSymbol = &UInt32Type;

    /// bitReverse with Int32
    BitReverse_Int32_base.name = "base"_c;
    BitReverse_Int32_base.type = Type::FullType{ Int32Type.name };
    BitReverse_Int32.documentation = "Reverses the bits in a bitmask"_c;
    BitReverse_Int32.name = BitReverse_Int32_name;
    BitReverse_Int32.backendIndex = 2222;
    BitReverse_Int32.returnType = Type::FullType { Int32Type.name };
    BitReverse_Int32.parameters = BitReverse_Int32_args;
    Symbol::Resolved(&BitReverse_Int32_base)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitReverse_Int32)->signature = "bitReverse(i32) i32"_c;
    Symbol::Resolved(&BitReverse_Int32)->name = "bitReverse(i32)"_c;
    Symbol::Resolved(&BitReverse_Int32)->nameWithVarNames = "bitReverse(base : i32)"_c;
    Symbol::Resolved(&BitReverse_Int32)->returnTypeSymbol = &Int32Type;

    /// bitReverse with UInt16
    BitReverse_UInt16_base.name = "base"_c;
    BitReverse_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitReverse_UInt16.documentation = "Reverses the bits in a bitmask"_c;
    BitReverse_UInt16.name = BitReverse_UInt16_name;
    BitReverse_UInt16.backendIndex = 2223;
    BitReverse_UInt16.returnType = Type::FullType { UInt16Type.name };
    BitReverse_UInt16.parameters = BitReverse_UInt16_args;
    Symbol::Resolved(&BitReverse_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitReverse_UInt16)->signature = "bitReverse(u16) u16"_c;
    Symbol::Resolved(&BitReverse_UInt16)->name = "bitReverse(u16)"_c;
    Symbol::Resolved(&BitReverse_UInt16)->nameWithVarNames = "bitReverse(base : u16)"_c;
    Symbol::Resolved(&BitReverse_UInt16)->returnTypeSymbol = &UInt16Type;

    /// bitReverse with Int16
    BitReverse_Int16_base.name = "base"_c;
    BitReverse_Int16_base.type = Type::FullType{ Int16Type.name };
    BitReverse_Int16.documentation = "Reverses the bits in a bitmask"_c;
    BitReverse_Int16.name = BitReverse_Int16_name;
    BitReverse_Int16.backendIndex = 2224;
    BitReverse_Int16.returnType = Type::FullType { Int16Type.name };
    BitReverse_Int16.parameters = BitReverse_Int16_args;
    Symbol::Resolved(&BitReverse_Int16_base)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitReverse_Int16)->signature = "bitReverse(i16) i16"_c;
    Symbol::Resolved(&BitReverse_Int16)->name = "bitReverse(i16)"_c;
    Symbol::Resolved(&BitReverse_Int16)->nameWithVarNames = "bitReverse(base : i16)"_c;
    Symbol::Resolved(&BitReverse_Int16)->returnTypeSymbol = &Int16Type;

    /// bitCount with UInt32
    BitCount_UInt32_base.name = "base"_c;
    BitCount_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitCount_UInt32.documentation = "Counts the number of bits set to 1 in a bitmask"_c;
    BitCount_UInt32.name = BitCount_UInt32_name;
    BitCount_UInt32.backendIndex = 2225;
    BitCount_UInt32.returnType = Type::FullType { UInt32Type.name };
    BitCount_UInt32.parameters = BitCount_UInt32_args;
    Symbol::Resolved(&BitCount_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitCount_UInt32)->signature = "bitCount(u32) u32"_c;
    Symbol::Resolved(&BitCount_UInt32)->name = "bitCount(u32)"_c;
    Symbol::Resolved(&BitCount_UInt32)->nameWithVarNames = "bitCount(base : u32)"_c;
    Symbol::Resolved(&BitCount_UInt32)->returnTypeSymbol = &UInt32Type;

    /// bitCount with Int32
    BitCount_Int32_base.name = "base"_c;
    BitCount_Int32_base.type = Type::FullType{ Int32Type.name };
    BitCount_Int32.documentation = "Counts the number of bits set to 1 in a bitmask"_c;
    BitCount_Int32.name = BitCount_Int32_name;
    BitCount_Int32.backendIndex = 2226;
    BitCount_Int32.returnType = Type::FullType { Int32Type.name };
    BitCount_Int32.parameters = BitCount_Int32_args;
    Symbol::Resolved(&BitCount_Int32_base)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitCount_Int32)->signature = "bitCount(i32) i32"_c;
    Symbol::Resolved(&BitCount_Int32)->name = "bitCount(i32)"_c;
    Symbol::Resolved(&BitCount_Int32)->nameWithVarNames = "bitCount(base : i32)"_c;
    Symbol::Resolved(&BitCount_Int32)->returnTypeSymbol = &Int32Type;

    /// bitCount with UInt16
    BitCount_UInt16_base.name = "base"_c;
    BitCount_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitCount_UInt16.documentation = "Counts the number of bits set to 1 in a bitmask"_c;
    BitCount_UInt16.name = BitCount_UInt16_name;
    BitCount_UInt16.backendIndex = 2227;
    BitCount_UInt16.returnType = Type::FullType { UInt16Type.name };
    BitCount_UInt16.parameters = BitCount_UInt16_args;
    Symbol::Resolved(&BitCount_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitCount_UInt16)->signature = "bitCount(u16) u16"_c;
    Symbol::Resolved(&BitCount_UInt16)->name = "bitCount(u16)"_c;
    Symbol::Resolved(&BitCount_UInt16)->nameWithVarNames = "bitCount(base : u16)"_c;
    Symbol::Resolved(&BitCount_UInt16)->returnTypeSymbol = &UInt16Type;

    /// bitCount with Int16
    BitCount_Int16_base.name = "base"_c;
    BitCount_Int16_base.type = Type::FullType{ Int16Type.name };
    BitCount_Int16.documentation = "Counts the number of bits set to 1 in a bitmask"_c;
    BitCount_Int16.name = BitCount_Int16_name;
    BitCount_Int16.backendIndex = 2228;
    BitCount_Int16.returnType = Type::FullType { Int16Type.name };
    BitCount_Int16.parameters = BitCount_Int16_args;
    Symbol::Resolved(&BitCount_Int16_base)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitCount_Int16)->signature = "bitCount(i16) i16"_c;
    Symbol::Resolved(&BitCount_Int16)->name = "bitCount(i16)"_c;
    Symbol::Resolved(&BitCount_Int16)->nameWithVarNames = "bitCount(base : i16)"_c;
    Symbol::Resolved(&BitCount_Int16)->returnTypeSymbol = &Int16Type;

    /// executionBarrier
    ExecutionBarrier.documentation = "Execution barrier to ensure all threads have reached this point before proceeding"_c;
    ExecutionBarrier.name = ExecutionBarrier_name;
    ExecutionBarrier.backendIndex = 2229;
    ExecutionBarrier.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&ExecutionBarrier)->signature = "executionBarrier() void"_c;
    Symbol::Resolved(&ExecutionBarrier)->name = "executionBarrier()"_c;
    Symbol::Resolved(&ExecutionBarrier)->nameWithVarNames = "executionBarrier()"_c;
    Symbol::Resolved(&ExecutionBarrier)->returnTypeSymbol = &VoidType;

    /// executionBarrierSubgroup
    ExecutionBarrierSubgroup.documentation = "Execution barrier to ensure all threads in the subgroup have reached this point before proceeding"_c;
    ExecutionBarrierSubgroup.name = ExecutionBarrierSubgroup_name;
    ExecutionBarrierSubgroup.backendIndex = 2230;
    ExecutionBarrierSubgroup.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&ExecutionBarrierSubgroup)->signature = "executionBarrierSubgroup() void"_c;
    Symbol::Resolved(&ExecutionBarrierSubgroup)->name = "executionBarrierSubgroup()"_c;
    Symbol::Resolved(&ExecutionBarrierSubgroup)->nameWithVarNames = "executionBarrierSubgroup()"_c;
    Symbol::Resolved(&ExecutionBarrierSubgroup)->returnTypeSymbol = &VoidType;

    /// executionBarrierWorkgroup
    ExecutionBarrierWorkgroup.documentation = "Execution barrier to ensure all threads in the workgroup have reached this point before proceeding"_c;
    ExecutionBarrierWorkgroup.name = ExecutionBarrierWorkgroup_name;
    ExecutionBarrierWorkgroup.backendIndex = 2231;
    ExecutionBarrierWorkgroup.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&ExecutionBarrierWorkgroup)->signature = "executionBarrierWorkgroup() void"_c;
    Symbol::Resolved(&ExecutionBarrierWorkgroup)->name = "executionBarrierWorkgroup()"_c;
    Symbol::Resolved(&ExecutionBarrierWorkgroup)->nameWithVarNames = "executionBarrierWorkgroup()"_c;
    Symbol::Resolved(&ExecutionBarrierWorkgroup)->returnTypeSymbol = &VoidType;

    /// memoryBarrier
    MemoryBarrier.documentation = "Memory barrier to ensure memory operations are completed before proceeding"_c;
    MemoryBarrier.name = MemoryBarrier_name;
    MemoryBarrier.backendIndex = 2232;
    MemoryBarrier.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&MemoryBarrier)->signature = "memoryBarrier() void"_c;
    Symbol::Resolved(&MemoryBarrier)->name = "memoryBarrier()"_c;
    Symbol::Resolved(&MemoryBarrier)->nameWithVarNames = "memoryBarrier()"_c;
    Symbol::Resolved(&MemoryBarrier)->returnTypeSymbol = &VoidType;

    /// memoryBarrierBuffer
    MemoryBarrierBuffer.documentation = "Memory barrier to ensure buffer memory operations are completed before proceeding"_c;
    MemoryBarrierBuffer.name = MemoryBarrierBuffer_name;
    MemoryBarrierBuffer.backendIndex = 2233;
    MemoryBarrierBuffer.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&MemoryBarrierBuffer)->signature = "memoryBarrierBuffer() void"_c;
    Symbol::Resolved(&MemoryBarrierBuffer)->name = "memoryBarrierBuffer()"_c;
    Symbol::Resolved(&MemoryBarrierBuffer)->nameWithVarNames = "memoryBarrierBuffer()"_c;
    Symbol::Resolved(&MemoryBarrierBuffer)->returnTypeSymbol = &VoidType;

    /// memoryBarrierTexture
    MemoryBarrierTexture.documentation = "Memory barrier to ensure texture memory operations are completed before proceeding"_c;
    MemoryBarrierTexture.name = MemoryBarrierTexture_name;
    MemoryBarrierTexture.backendIndex = 2234;
    MemoryBarrierTexture.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&MemoryBarrierTexture)->signature = "memoryBarrierTexture() void"_c;
    Symbol::Resolved(&MemoryBarrierTexture)->name = "memoryBarrierTexture()"_c;
    Symbol::Resolved(&MemoryBarrierTexture)->nameWithVarNames = "memoryBarrierTexture()"_c;
    Symbol::Resolved(&MemoryBarrierTexture)->returnTypeSymbol = &VoidType;

    /// memoryBarrierAtomic
    MemoryBarrierAtomic.documentation = "Memory barrier to ensure atomic memory operations are completed before proceeding"_c;
    MemoryBarrierAtomic.name = MemoryBarrierAtomic_name;
    MemoryBarrierAtomic.backendIndex = 2235;
    MemoryBarrierAtomic.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&MemoryBarrierAtomic)->signature = "memoryBarrierAtomic() void"_c;
    Symbol::Resolved(&MemoryBarrierAtomic)->name = "memoryBarrierAtomic()"_c;
    Symbol::Resolved(&MemoryBarrierAtomic)->nameWithVarNames = "memoryBarrierAtomic()"_c;
    Symbol::Resolved(&MemoryBarrierAtomic)->returnTypeSymbol = &VoidType;

    /// memoryBarrierSubgroup
    MemoryBarrierSubgroup.documentation = "Memory barrier to ensure subgroup memory operations are completed before proceeding"_c;
    MemoryBarrierSubgroup.name = MemoryBarrierSubgroup_name;
    MemoryBarrierSubgroup.backendIndex = 2236;
    MemoryBarrierSubgroup.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&MemoryBarrierSubgroup)->signature = "memoryBarrierSubgroup() void"_c;
    Symbol::Resolved(&MemoryBarrierSubgroup)->name = "memoryBarrierSubgroup()"_c;
    Symbol::Resolved(&MemoryBarrierSubgroup)->nameWithVarNames = "memoryBarrierSubgroup()"_c;
    Symbol::Resolved(&MemoryBarrierSubgroup)->returnTypeSymbol = &VoidType;

    /// memoryBarrierWorkgroup
    MemoryBarrierWorkgroup.documentation = "Memory barrier to ensure workgroup memory operations are completed before proceeding"_c;
    MemoryBarrierWorkgroup.name = MemoryBarrierWorkgroup_name;
    MemoryBarrierWorkgroup.backendIndex = 2237;
    MemoryBarrierWorkgroup.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&MemoryBarrierWorkgroup)->signature = "memoryBarrierWorkgroup() void"_c;
    Symbol::Resolved(&MemoryBarrierWorkgroup)->name = "memoryBarrierWorkgroup()"_c;
    Symbol::Resolved(&MemoryBarrierWorkgroup)->nameWithVarNames = "memoryBarrierWorkgroup()"_c;
    Symbol::Resolved(&MemoryBarrierWorkgroup)->returnTypeSymbol = &VoidType;

    /// textureGetSize with Texture1D
    TextureGetSize_Texture1D_texture.name = "texture"_c;
    TextureGetSize_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetSize_Texture1D_texture.type.strict = true;
    TextureGetSize_Texture1D_texture.type.mut = true;
    TextureGetSize_Texture1D_texture.type.modifiers = TextureGetSize_Texture1D_texture_modifiers;
    TextureGetSize_Texture1D_texture.type.modifierValues = TextureGetSize_Texture1D_texture_modifierValues;
    TextureGetSize_Texture1D.documentation = "Get the size of a texture"_c;
    TextureGetSize_Texture1D.name = TextureGetSize_Texture1D_name;
    TextureGetSize_Texture1D.backendIndex = 2238;
    TextureGetSize_Texture1D.returnType = Type::FullType { UInt32Type.name };
    TextureGetSize_Texture1D.parameters = TextureGetSize_Texture1D_args;
    Symbol::Resolved(&TextureGetSize_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetSize_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture1D)->signature = "textureGetSize(uniform *mutable texture1D) u32"_c;
    Symbol::Resolved(&TextureGetSize_Texture1D)->name = "textureGetSize(uniform *mutable texture1D)"_c;
    Symbol::Resolved(&TextureGetSize_Texture1D)->nameWithVarNames = "textureGetSize(texture : uniform *mutable texture1D)"_c;
    Symbol::Resolved(&TextureGetSize_Texture1D)->returnTypeSymbol = &UInt32Type;

    /// textureGetSize with Texture2D
    TextureGetSize_Texture2D_texture.name = "texture"_c;
    TextureGetSize_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetSize_Texture2D_texture.type.strict = true;
    TextureGetSize_Texture2D_texture.type.mut = true;
    TextureGetSize_Texture2D_texture.type.modifiers = TextureGetSize_Texture2D_texture_modifiers;
    TextureGetSize_Texture2D_texture.type.modifierValues = TextureGetSize_Texture2D_texture_modifierValues;
    TextureGetSize_Texture2D.documentation = "Get the size of a texture"_c;
    TextureGetSize_Texture2D.name = TextureGetSize_Texture2D_name;
    TextureGetSize_Texture2D.backendIndex = 2239;
    TextureGetSize_Texture2D.returnType = Type::FullType { UInt32x2Type.name };
    TextureGetSize_Texture2D.parameters = TextureGetSize_Texture2D_args;
    Symbol::Resolved(&TextureGetSize_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetSize_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture2D)->signature = "textureGetSize(uniform *mutable texture2D) u32x2"_c;
    Symbol::Resolved(&TextureGetSize_Texture2D)->name = "textureGetSize(uniform *mutable texture2D)"_c;
    Symbol::Resolved(&TextureGetSize_Texture2D)->nameWithVarNames = "textureGetSize(texture : uniform *mutable texture2D)"_c;
    Symbol::Resolved(&TextureGetSize_Texture2D)->returnTypeSymbol = &UInt32x2Type;

    /// textureGetSize with Texture3D
    TextureGetSize_Texture3D_texture.name = "texture"_c;
    TextureGetSize_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetSize_Texture3D_texture.type.strict = true;
    TextureGetSize_Texture3D_texture.type.mut = true;
    TextureGetSize_Texture3D_texture.type.modifiers = TextureGetSize_Texture3D_texture_modifiers;
    TextureGetSize_Texture3D_texture.type.modifierValues = TextureGetSize_Texture3D_texture_modifierValues;
    TextureGetSize_Texture3D.documentation = "Get the size of a texture"_c;
    TextureGetSize_Texture3D.name = TextureGetSize_Texture3D_name;
    TextureGetSize_Texture3D.backendIndex = 2240;
    TextureGetSize_Texture3D.returnType = Type::FullType { UInt32x3Type.name };
    TextureGetSize_Texture3D.parameters = TextureGetSize_Texture3D_args;
    Symbol::Resolved(&TextureGetSize_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetSize_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture3D)->signature = "textureGetSize(uniform *mutable texture3D) u32x3"_c;
    Symbol::Resolved(&TextureGetSize_Texture3D)->name = "textureGetSize(uniform *mutable texture3D)"_c;
    Symbol::Resolved(&TextureGetSize_Texture3D)->nameWithVarNames = "textureGetSize(texture : uniform *mutable texture3D)"_c;
    Symbol::Resolved(&TextureGetSize_Texture3D)->returnTypeSymbol = &UInt32x3Type;

    /// textureGetSize with TextureCube
    TextureGetSize_TextureCube_texture.name = "texture"_c;
    TextureGetSize_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetSize_TextureCube_texture.type.strict = true;
    TextureGetSize_TextureCube_texture.type.mut = true;
    TextureGetSize_TextureCube_texture.type.modifiers = TextureGetSize_TextureCube_texture_modifiers;
    TextureGetSize_TextureCube_texture.type.modifierValues = TextureGetSize_TextureCube_texture_modifierValues;
    TextureGetSize_TextureCube.documentation = "Get the size of a texture"_c;
    TextureGetSize_TextureCube.name = TextureGetSize_TextureCube_name;
    TextureGetSize_TextureCube.backendIndex = 2241;
    TextureGetSize_TextureCube.returnType = Type::FullType { UInt32x3Type.name };
    TextureGetSize_TextureCube.parameters = TextureGetSize_TextureCube_args;
    Symbol::Resolved(&TextureGetSize_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetSize_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_TextureCube)->signature = "textureGetSize(uniform *mutable textureCube) u32x3"_c;
    Symbol::Resolved(&TextureGetSize_TextureCube)->name = "textureGetSize(uniform *mutable textureCube)"_c;
    Symbol::Resolved(&TextureGetSize_TextureCube)->nameWithVarNames = "textureGetSize(texture : uniform *mutable textureCube)"_c;
    Symbol::Resolved(&TextureGetSize_TextureCube)->returnTypeSymbol = &UInt32x3Type;

    /// textureGetSize with Texture1DArray
    TextureGetSize_Texture1DArray_texture.name = "texture"_c;
    TextureGetSize_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetSize_Texture1DArray_texture.type.strict = true;
    TextureGetSize_Texture1DArray_texture.type.mut = true;
    TextureGetSize_Texture1DArray_texture.type.modifiers = TextureGetSize_Texture1DArray_texture_modifiers;
    TextureGetSize_Texture1DArray_texture.type.modifierValues = TextureGetSize_Texture1DArray_texture_modifierValues;
    TextureGetSize_Texture1DArray.documentation = "Get the size of a texture"_c;
    TextureGetSize_Texture1DArray.name = TextureGetSize_Texture1DArray_name;
    TextureGetSize_Texture1DArray.backendIndex = 2242;
    TextureGetSize_Texture1DArray.returnType = Type::FullType { UInt32x2Type.name };
    TextureGetSize_Texture1DArray.parameters = TextureGetSize_Texture1DArray_args;
    Symbol::Resolved(&TextureGetSize_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetSize_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture1DArray)->signature = "textureGetSize(uniform *mutable texture1DArray) u32x2"_c;
    Symbol::Resolved(&TextureGetSize_Texture1DArray)->name = "textureGetSize(uniform *mutable texture1DArray)"_c;
    Symbol::Resolved(&TextureGetSize_Texture1DArray)->nameWithVarNames = "textureGetSize(texture : uniform *mutable texture1DArray)"_c;
    Symbol::Resolved(&TextureGetSize_Texture1DArray)->returnTypeSymbol = &UInt32x2Type;

    /// textureGetSize with Texture2DArray
    TextureGetSize_Texture2DArray_texture.name = "texture"_c;
    TextureGetSize_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetSize_Texture2DArray_texture.type.strict = true;
    TextureGetSize_Texture2DArray_texture.type.mut = true;
    TextureGetSize_Texture2DArray_texture.type.modifiers = TextureGetSize_Texture2DArray_texture_modifiers;
    TextureGetSize_Texture2DArray_texture.type.modifierValues = TextureGetSize_Texture2DArray_texture_modifierValues;
    TextureGetSize_Texture2DArray.documentation = "Get the size of a texture"_c;
    TextureGetSize_Texture2DArray.name = TextureGetSize_Texture2DArray_name;
    TextureGetSize_Texture2DArray.backendIndex = 2243;
    TextureGetSize_Texture2DArray.returnType = Type::FullType { UInt32x3Type.name };
    TextureGetSize_Texture2DArray.parameters = TextureGetSize_Texture2DArray_args;
    Symbol::Resolved(&TextureGetSize_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetSize_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture2DArray)->signature = "textureGetSize(uniform *mutable texture2DArray) u32x3"_c;
    Symbol::Resolved(&TextureGetSize_Texture2DArray)->name = "textureGetSize(uniform *mutable texture2DArray)"_c;
    Symbol::Resolved(&TextureGetSize_Texture2DArray)->nameWithVarNames = "textureGetSize(texture : uniform *mutable texture2DArray)"_c;
    Symbol::Resolved(&TextureGetSize_Texture2DArray)->returnTypeSymbol = &UInt32x3Type;

    /// textureGetSize with TextureCubeArray
    TextureGetSize_TextureCubeArray_texture.name = "texture"_c;
    TextureGetSize_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetSize_TextureCubeArray_texture.type.strict = true;
    TextureGetSize_TextureCubeArray_texture.type.mut = true;
    TextureGetSize_TextureCubeArray_texture.type.modifiers = TextureGetSize_TextureCubeArray_texture_modifiers;
    TextureGetSize_TextureCubeArray_texture.type.modifierValues = TextureGetSize_TextureCubeArray_texture_modifierValues;
    TextureGetSize_TextureCubeArray.documentation = "Get the size of a texture"_c;
    TextureGetSize_TextureCubeArray.name = TextureGetSize_TextureCubeArray_name;
    TextureGetSize_TextureCubeArray.backendIndex = 2244;
    TextureGetSize_TextureCubeArray.returnType = Type::FullType { UInt32x4Type.name };
    TextureGetSize_TextureCubeArray.parameters = TextureGetSize_TextureCubeArray_args;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray)->signature = "textureGetSize(uniform *mutable textureCubeArray) u32x4"_c;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray)->name = "textureGetSize(uniform *mutable textureCubeArray)"_c;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray)->nameWithVarNames = "textureGetSize(texture : uniform *mutable textureCubeArray)"_c;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray)->returnTypeSymbol = &UInt32x4Type;

    /// textureGetSizeMip with Texture1D, UInt32
    TextureGetSizeMip_Texture1D_texture.name = "texture"_c;
    TextureGetSizeMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetSizeMip_Texture1D_texture.type.strict = true;
    TextureGetSizeMip_Texture1D_texture.type.modifiers = TextureGetSizeMip_Texture1D_texture_modifiers;
    TextureGetSizeMip_Texture1D_texture.type.modifierValues = TextureGetSizeMip_Texture1D_texture_modifierValues;
    TextureGetSizeMip_Texture1D_mip.name = "mip"_c;
    TextureGetSizeMip_Texture1D_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_Texture1D.documentation = "Get the size of a texture at a specific mip level"_c;
    TextureGetSizeMip_Texture1D.name = TextureGetSizeMip_Texture1D_name;
    TextureGetSizeMip_Texture1D.backendIndex = 2245;
    TextureGetSizeMip_Texture1D.returnType = Type::FullType { UInt32Type.name };
    TextureGetSizeMip_Texture1D.parameters = TextureGetSizeMip_Texture1D_args;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D)->signature = "textureGetSizeMip(uniform *texture1D,u32) u32"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D)->name = "textureGetSizeMip(uniform *texture1D,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D)->nameWithVarNames = "textureGetSizeMip(texture : uniform *texture1D, mip : u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D)->returnTypeSymbol = &UInt32Type;

    /// textureGetSizeMip with Texture2D, UInt32
    TextureGetSizeMip_Texture2D_texture.name = "texture"_c;
    TextureGetSizeMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetSizeMip_Texture2D_texture.type.strict = true;
    TextureGetSizeMip_Texture2D_texture.type.modifiers = TextureGetSizeMip_Texture2D_texture_modifiers;
    TextureGetSizeMip_Texture2D_texture.type.modifierValues = TextureGetSizeMip_Texture2D_texture_modifierValues;
    TextureGetSizeMip_Texture2D_mip.name = "mip"_c;
    TextureGetSizeMip_Texture2D_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_Texture2D.documentation = "Get the size of a texture at a specific mip level"_c;
    TextureGetSizeMip_Texture2D.name = TextureGetSizeMip_Texture2D_name;
    TextureGetSizeMip_Texture2D.backendIndex = 2246;
    TextureGetSizeMip_Texture2D.returnType = Type::FullType { UInt32x2Type.name };
    TextureGetSizeMip_Texture2D.parameters = TextureGetSizeMip_Texture2D_args;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D)->signature = "textureGetSizeMip(uniform *texture2D,u32) u32x2"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D)->name = "textureGetSizeMip(uniform *texture2D,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D)->nameWithVarNames = "textureGetSizeMip(texture : uniform *texture2D, mip : u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D)->returnTypeSymbol = &UInt32x2Type;

    /// textureGetSizeMip with Texture3D, UInt32
    TextureGetSizeMip_Texture3D_texture.name = "texture"_c;
    TextureGetSizeMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetSizeMip_Texture3D_texture.type.strict = true;
    TextureGetSizeMip_Texture3D_texture.type.modifiers = TextureGetSizeMip_Texture3D_texture_modifiers;
    TextureGetSizeMip_Texture3D_texture.type.modifierValues = TextureGetSizeMip_Texture3D_texture_modifierValues;
    TextureGetSizeMip_Texture3D_mip.name = "mip"_c;
    TextureGetSizeMip_Texture3D_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_Texture3D.documentation = "Get the size of a texture at a specific mip level"_c;
    TextureGetSizeMip_Texture3D.name = TextureGetSizeMip_Texture3D_name;
    TextureGetSizeMip_Texture3D.backendIndex = 2247;
    TextureGetSizeMip_Texture3D.returnType = Type::FullType { UInt32x3Type.name };
    TextureGetSizeMip_Texture3D.parameters = TextureGetSizeMip_Texture3D_args;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D)->signature = "textureGetSizeMip(uniform *texture3D,u32) u32x3"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D)->name = "textureGetSizeMip(uniform *texture3D,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D)->nameWithVarNames = "textureGetSizeMip(texture : uniform *texture3D, mip : u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D)->returnTypeSymbol = &UInt32x3Type;

    /// textureGetSizeMip with TextureCube, UInt32
    TextureGetSizeMip_TextureCube_texture.name = "texture"_c;
    TextureGetSizeMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetSizeMip_TextureCube_texture.type.strict = true;
    TextureGetSizeMip_TextureCube_texture.type.modifiers = TextureGetSizeMip_TextureCube_texture_modifiers;
    TextureGetSizeMip_TextureCube_texture.type.modifierValues = TextureGetSizeMip_TextureCube_texture_modifierValues;
    TextureGetSizeMip_TextureCube_mip.name = "mip"_c;
    TextureGetSizeMip_TextureCube_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_TextureCube.documentation = "Get the size of a texture at a specific mip level"_c;
    TextureGetSizeMip_TextureCube.name = TextureGetSizeMip_TextureCube_name;
    TextureGetSizeMip_TextureCube.backendIndex = 2248;
    TextureGetSizeMip_TextureCube.returnType = Type::FullType { UInt32x3Type.name };
    TextureGetSizeMip_TextureCube.parameters = TextureGetSizeMip_TextureCube_args;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube)->signature = "textureGetSizeMip(uniform *textureCube,u32) u32x3"_c;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube)->name = "textureGetSizeMip(uniform *textureCube,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube)->nameWithVarNames = "textureGetSizeMip(texture : uniform *textureCube, mip : u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube)->returnTypeSymbol = &UInt32x3Type;

    /// textureGetSizeMip with Texture1DArray, UInt32
    TextureGetSizeMip_Texture1DArray_texture.name = "texture"_c;
    TextureGetSizeMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetSizeMip_Texture1DArray_texture.type.strict = true;
    TextureGetSizeMip_Texture1DArray_texture.type.modifiers = TextureGetSizeMip_Texture1DArray_texture_modifiers;
    TextureGetSizeMip_Texture1DArray_texture.type.modifierValues = TextureGetSizeMip_Texture1DArray_texture_modifierValues;
    TextureGetSizeMip_Texture1DArray_mip.name = "mip"_c;
    TextureGetSizeMip_Texture1DArray_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_Texture1DArray.documentation = "Get the size of a texture at a specific mip level"_c;
    TextureGetSizeMip_Texture1DArray.name = TextureGetSizeMip_Texture1DArray_name;
    TextureGetSizeMip_Texture1DArray.backendIndex = 2249;
    TextureGetSizeMip_Texture1DArray.returnType = Type::FullType { UInt32x2Type.name };
    TextureGetSizeMip_Texture1DArray.parameters = TextureGetSizeMip_Texture1DArray_args;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray)->signature = "textureGetSizeMip(uniform *texture1DArray,u32) u32x2"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray)->name = "textureGetSizeMip(uniform *texture1DArray,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray)->nameWithVarNames = "textureGetSizeMip(texture : uniform *texture1DArray, mip : u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray)->returnTypeSymbol = &UInt32x2Type;

    /// textureGetSizeMip with Texture2DArray, UInt32
    TextureGetSizeMip_Texture2DArray_texture.name = "texture"_c;
    TextureGetSizeMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetSizeMip_Texture2DArray_texture.type.strict = true;
    TextureGetSizeMip_Texture2DArray_texture.type.modifiers = TextureGetSizeMip_Texture2DArray_texture_modifiers;
    TextureGetSizeMip_Texture2DArray_texture.type.modifierValues = TextureGetSizeMip_Texture2DArray_texture_modifierValues;
    TextureGetSizeMip_Texture2DArray_mip.name = "mip"_c;
    TextureGetSizeMip_Texture2DArray_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_Texture2DArray.documentation = "Get the size of a texture at a specific mip level"_c;
    TextureGetSizeMip_Texture2DArray.name = TextureGetSizeMip_Texture2DArray_name;
    TextureGetSizeMip_Texture2DArray.backendIndex = 2250;
    TextureGetSizeMip_Texture2DArray.returnType = Type::FullType { UInt32x3Type.name };
    TextureGetSizeMip_Texture2DArray.parameters = TextureGetSizeMip_Texture2DArray_args;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray)->signature = "textureGetSizeMip(uniform *texture2DArray,u32) u32x3"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray)->name = "textureGetSizeMip(uniform *texture2DArray,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray)->nameWithVarNames = "textureGetSizeMip(texture : uniform *texture2DArray, mip : u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray)->returnTypeSymbol = &UInt32x3Type;

    /// textureGetSizeMip with TextureCubeArray, UInt32
    TextureGetSizeMip_TextureCubeArray_texture.name = "texture"_c;
    TextureGetSizeMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetSizeMip_TextureCubeArray_texture.type.strict = true;
    TextureGetSizeMip_TextureCubeArray_texture.type.modifiers = TextureGetSizeMip_TextureCubeArray_texture_modifiers;
    TextureGetSizeMip_TextureCubeArray_texture.type.modifierValues = TextureGetSizeMip_TextureCubeArray_texture_modifierValues;
    TextureGetSizeMip_TextureCubeArray_mip.name = "mip"_c;
    TextureGetSizeMip_TextureCubeArray_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_TextureCubeArray.documentation = "Get the size of a texture at a specific mip level"_c;
    TextureGetSizeMip_TextureCubeArray.name = TextureGetSizeMip_TextureCubeArray_name;
    TextureGetSizeMip_TextureCubeArray.backendIndex = 2251;
    TextureGetSizeMip_TextureCubeArray.returnType = Type::FullType { UInt32x4Type.name };
    TextureGetSizeMip_TextureCubeArray.parameters = TextureGetSizeMip_TextureCubeArray_args;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray)->signature = "textureGetSizeMip(uniform *textureCubeArray,u32) u32x4"_c;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray)->name = "textureGetSizeMip(uniform *textureCubeArray,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray)->nameWithVarNames = "textureGetSizeMip(texture : uniform *textureCubeArray, mip : u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray)->returnTypeSymbol = &UInt32x4Type;

    /// textureGetMips with Texture1D
    TextureGetMips_Texture1D_texture.name = "texture"_c;
    TextureGetMips_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetMips_Texture1D_texture.type.modifiers = TextureGetMips_Texture1D_texture_modifiers;
    TextureGetMips_Texture1D_texture.type.modifierValues = TextureGetMips_Texture1D_texture_modifierValues;
    TextureGetMips_Texture1D.documentation = "Get the number of mips in a texture"_c;
    TextureGetMips_Texture1D.name = TextureGetMips_Texture1D_name;
    TextureGetMips_Texture1D.backendIndex = 2252;
    TextureGetMips_Texture1D.returnType = Type::FullType { Texture1DType.name };
    TextureGetMips_Texture1D.parameters = TextureGetMips_Texture1D_args;
    Symbol::Resolved(&TextureGetMips_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetMips_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture1D)->signature = "textureGetMips(uniform *texture1D) texture1D"_c;
    Symbol::Resolved(&TextureGetMips_Texture1D)->name = "textureGetMips(uniform *texture1D)"_c;
    Symbol::Resolved(&TextureGetMips_Texture1D)->nameWithVarNames = "textureGetMips(texture : uniform *texture1D)"_c;
    Symbol::Resolved(&TextureGetMips_Texture1D)->returnTypeSymbol = &Texture1DType;

    /// textureGetMips with Texture2D
    TextureGetMips_Texture2D_texture.name = "texture"_c;
    TextureGetMips_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetMips_Texture2D_texture.type.modifiers = TextureGetMips_Texture2D_texture_modifiers;
    TextureGetMips_Texture2D_texture.type.modifierValues = TextureGetMips_Texture2D_texture_modifierValues;
    TextureGetMips_Texture2D.documentation = "Get the number of mips in a texture"_c;
    TextureGetMips_Texture2D.name = TextureGetMips_Texture2D_name;
    TextureGetMips_Texture2D.backendIndex = 2253;
    TextureGetMips_Texture2D.returnType = Type::FullType { Texture2DType.name };
    TextureGetMips_Texture2D.parameters = TextureGetMips_Texture2D_args;
    Symbol::Resolved(&TextureGetMips_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetMips_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture2D)->signature = "textureGetMips(uniform *texture2D) texture2D"_c;
    Symbol::Resolved(&TextureGetMips_Texture2D)->name = "textureGetMips(uniform *texture2D)"_c;
    Symbol::Resolved(&TextureGetMips_Texture2D)->nameWithVarNames = "textureGetMips(texture : uniform *texture2D)"_c;
    Symbol::Resolved(&TextureGetMips_Texture2D)->returnTypeSymbol = &Texture2DType;

    /// textureGetMips with Texture3D
    TextureGetMips_Texture3D_texture.name = "texture"_c;
    TextureGetMips_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetMips_Texture3D_texture.type.modifiers = TextureGetMips_Texture3D_texture_modifiers;
    TextureGetMips_Texture3D_texture.type.modifierValues = TextureGetMips_Texture3D_texture_modifierValues;
    TextureGetMips_Texture3D.documentation = "Get the number of mips in a texture"_c;
    TextureGetMips_Texture3D.name = TextureGetMips_Texture3D_name;
    TextureGetMips_Texture3D.backendIndex = 2254;
    TextureGetMips_Texture3D.returnType = Type::FullType { Texture3DType.name };
    TextureGetMips_Texture3D.parameters = TextureGetMips_Texture3D_args;
    Symbol::Resolved(&TextureGetMips_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetMips_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture3D)->signature = "textureGetMips(uniform *texture3D) texture3D"_c;
    Symbol::Resolved(&TextureGetMips_Texture3D)->name = "textureGetMips(uniform *texture3D)"_c;
    Symbol::Resolved(&TextureGetMips_Texture3D)->nameWithVarNames = "textureGetMips(texture : uniform *texture3D)"_c;
    Symbol::Resolved(&TextureGetMips_Texture3D)->returnTypeSymbol = &Texture3DType;

    /// textureGetMips with TextureCube
    TextureGetMips_TextureCube_texture.name = "texture"_c;
    TextureGetMips_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetMips_TextureCube_texture.type.modifiers = TextureGetMips_TextureCube_texture_modifiers;
    TextureGetMips_TextureCube_texture.type.modifierValues = TextureGetMips_TextureCube_texture_modifierValues;
    TextureGetMips_TextureCube.documentation = "Get the number of mips in a texture"_c;
    TextureGetMips_TextureCube.name = TextureGetMips_TextureCube_name;
    TextureGetMips_TextureCube.backendIndex = 2255;
    TextureGetMips_TextureCube.returnType = Type::FullType { TextureCubeType.name };
    TextureGetMips_TextureCube.parameters = TextureGetMips_TextureCube_args;
    Symbol::Resolved(&TextureGetMips_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetMips_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_TextureCube)->signature = "textureGetMips(uniform *textureCube) textureCube"_c;
    Symbol::Resolved(&TextureGetMips_TextureCube)->name = "textureGetMips(uniform *textureCube)"_c;
    Symbol::Resolved(&TextureGetMips_TextureCube)->nameWithVarNames = "textureGetMips(texture : uniform *textureCube)"_c;
    Symbol::Resolved(&TextureGetMips_TextureCube)->returnTypeSymbol = &TextureCubeType;

    /// textureGetMips with Texture1DArray
    TextureGetMips_Texture1DArray_texture.name = "texture"_c;
    TextureGetMips_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetMips_Texture1DArray_texture.type.modifiers = TextureGetMips_Texture1DArray_texture_modifiers;
    TextureGetMips_Texture1DArray_texture.type.modifierValues = TextureGetMips_Texture1DArray_texture_modifierValues;
    TextureGetMips_Texture1DArray.documentation = "Get the number of mips in a texture"_c;
    TextureGetMips_Texture1DArray.name = TextureGetMips_Texture1DArray_name;
    TextureGetMips_Texture1DArray.backendIndex = 2256;
    TextureGetMips_Texture1DArray.returnType = Type::FullType { Texture1DArrayType.name };
    TextureGetMips_Texture1DArray.parameters = TextureGetMips_Texture1DArray_args;
    Symbol::Resolved(&TextureGetMips_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetMips_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture1DArray)->signature = "textureGetMips(uniform *texture1DArray) texture1DArray"_c;
    Symbol::Resolved(&TextureGetMips_Texture1DArray)->name = "textureGetMips(uniform *texture1DArray)"_c;
    Symbol::Resolved(&TextureGetMips_Texture1DArray)->nameWithVarNames = "textureGetMips(texture : uniform *texture1DArray)"_c;
    Symbol::Resolved(&TextureGetMips_Texture1DArray)->returnTypeSymbol = &Texture1DArrayType;

    /// textureGetMips with Texture2DArray
    TextureGetMips_Texture2DArray_texture.name = "texture"_c;
    TextureGetMips_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetMips_Texture2DArray_texture.type.modifiers = TextureGetMips_Texture2DArray_texture_modifiers;
    TextureGetMips_Texture2DArray_texture.type.modifierValues = TextureGetMips_Texture2DArray_texture_modifierValues;
    TextureGetMips_Texture2DArray.documentation = "Get the number of mips in a texture"_c;
    TextureGetMips_Texture2DArray.name = TextureGetMips_Texture2DArray_name;
    TextureGetMips_Texture2DArray.backendIndex = 2257;
    TextureGetMips_Texture2DArray.returnType = Type::FullType { Texture2DArrayType.name };
    TextureGetMips_Texture2DArray.parameters = TextureGetMips_Texture2DArray_args;
    Symbol::Resolved(&TextureGetMips_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetMips_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture2DArray)->signature = "textureGetMips(uniform *texture2DArray) texture2DArray"_c;
    Symbol::Resolved(&TextureGetMips_Texture2DArray)->name = "textureGetMips(uniform *texture2DArray)"_c;
    Symbol::Resolved(&TextureGetMips_Texture2DArray)->nameWithVarNames = "textureGetMips(texture : uniform *texture2DArray)"_c;
    Symbol::Resolved(&TextureGetMips_Texture2DArray)->returnTypeSymbol = &Texture2DArrayType;

    /// textureGetMips with TextureCubeArray
    TextureGetMips_TextureCubeArray_texture.name = "texture"_c;
    TextureGetMips_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetMips_TextureCubeArray_texture.type.modifiers = TextureGetMips_TextureCubeArray_texture_modifiers;
    TextureGetMips_TextureCubeArray_texture.type.modifierValues = TextureGetMips_TextureCubeArray_texture_modifierValues;
    TextureGetMips_TextureCubeArray.documentation = "Get the number of mips in a texture"_c;
    TextureGetMips_TextureCubeArray.name = TextureGetMips_TextureCubeArray_name;
    TextureGetMips_TextureCubeArray.backendIndex = 2258;
    TextureGetMips_TextureCubeArray.returnType = Type::FullType { TextureCubeArrayType.name };
    TextureGetMips_TextureCubeArray.parameters = TextureGetMips_TextureCubeArray_args;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray)->signature = "textureGetMips(uniform *textureCubeArray) textureCubeArray"_c;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray)->name = "textureGetMips(uniform *textureCubeArray)"_c;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray)->nameWithVarNames = "textureGetMips(texture : uniform *textureCubeArray)"_c;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray)->returnTypeSymbol = &TextureCubeArrayType;

    /// textureGetSamples with Texture2DMS
    TextureGetSamples_Texture2DMS_texture.name = "texture"_c;
    TextureGetSamples_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureGetSamples_Texture2DMS_texture.type.modifiers = TextureGetSamples_Texture2DMS_texture_modifiers;
    TextureGetSamples_Texture2DMS_texture.type.modifierValues = TextureGetSamples_Texture2DMS_texture_modifierValues;
    TextureGetSamples_Texture2DMS.documentation = "Get the number of samples in a multisampled texture"_c;
    TextureGetSamples_Texture2DMS.name = TextureGetSamples_Texture2DMS_name;
    TextureGetSamples_Texture2DMS.backendIndex = 2259;
    TextureGetSamples_Texture2DMS.returnType = Type::FullType { Texture2DMSType.name };
    TextureGetSamples_Texture2DMS.parameters = TextureGetSamples_Texture2DMS_args;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS)->signature = "textureGetSamples(uniform *texture2DMS) texture2DMS"_c;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS)->name = "textureGetSamples(uniform *texture2DMS)"_c;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS)->nameWithVarNames = "textureGetSamples(texture : uniform *texture2DMS)"_c;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS)->returnTypeSymbol = &Texture2DMSType;

    /// textureGetSamples with Texture2DMSArray
    TextureGetSamples_Texture2DMSArray_texture.name = "texture"_c;
    TextureGetSamples_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureGetSamples_Texture2DMSArray_texture.type.modifiers = TextureGetSamples_Texture2DMSArray_texture_modifiers;
    TextureGetSamples_Texture2DMSArray_texture.type.modifierValues = TextureGetSamples_Texture2DMSArray_texture_modifierValues;
    TextureGetSamples_Texture2DMSArray.documentation = "Get the number of samples in a multisampled texture"_c;
    TextureGetSamples_Texture2DMSArray.name = TextureGetSamples_Texture2DMSArray_name;
    TextureGetSamples_Texture2DMSArray.backendIndex = 2260;
    TextureGetSamples_Texture2DMSArray.returnType = Type::FullType { Texture2DMSArrayType.name };
    TextureGetSamples_Texture2DMSArray.parameters = TextureGetSamples_Texture2DMSArray_args;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray)->signature = "textureGetSamples(uniform *texture2DMSArray) texture2DMSArray"_c;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray)->name = "textureGetSamples(uniform *texture2DMSArray)"_c;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray)->nameWithVarNames = "textureGetSamples(texture : uniform *texture2DMSArray)"_c;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray)->returnTypeSymbol = &Texture2DMSArrayType;

    /// textureGetSampledMip with Texture1D, Sampler, Float32
    TextureGetSampledMip_Texture1D_texture.name = "texture"_c;
    TextureGetSampledMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetSampledMip_Texture1D_texture.type.modifiers = TextureGetSampledMip_Texture1D_texture_modifiers;
    TextureGetSampledMip_Texture1D_texture.type.modifierValues = TextureGetSampledMip_Texture1D_texture_modifierValues;
    TextureGetSampledMip_Texture1D_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture1D_sampler.type.modifiers = TextureGetSampledMip_Texture1D_sampler_modifiers;
    TextureGetSampledMip_Texture1D_sampler.type.modifierValues = TextureGetSampledMip_Texture1D_sampler_modifierValues;
    TextureGetSampledMip_Texture1D_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureGetSampledMip_Texture1D.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    TextureGetSampledMip_Texture1D.name = TextureGetSampledMip_Texture1D_name;
    TextureGetSampledMip_Texture1D.backendIndex = 2261;
    TextureGetSampledMip_Texture1D.returnType = Type::FullType { Float32x2Type.name };
    TextureGetSampledMip_Texture1D.parameters = TextureGetSampledMip_Texture1D_args;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D)->signature = "textureGetSampledMip(uniform *texture1D,uniform *sampler,f32) f32x2"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D)->name = "textureGetSampledMip(uniform *texture1D,uniform *sampler,f32)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D)->nameWithVarNames = "textureGetSampledMip(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with SampledTexture1D, Float32
    SampledTextureGetSampledMip_Texture1D_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureGetSampledMip_Texture1D_texture.type.modifiers = SampledTextureGetSampledMip_Texture1D_texture_modifiers;
    SampledTextureGetSampledMip_Texture1D_texture.type.modifierValues = SampledTextureGetSampledMip_Texture1D_texture_modifierValues;
    SampledTextureGetSampledMip_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureGetSampledMip_Texture1D.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    SampledTextureGetSampledMip_Texture1D.name = SampledTextureGetSampledMip_Texture1D_name;
    SampledTextureGetSampledMip_Texture1D.backendIndex = 2262;
    SampledTextureGetSampledMip_Texture1D.returnType = Type::FullType { Float32x2Type.name };
    SampledTextureGetSampledMip_Texture1D.parameters = SampledTextureGetSampledMip_Texture1D_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D)->signature = "textureGetSampledMip(uniform *textureSampled1D,f32) f32x2"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D)->name = "textureGetSampledMip(uniform *textureSampled1D,f32)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureSampled1D, coordinate : f32)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with Texture2D, Sampler, Float32x2
    TextureGetSampledMip_Texture2D_texture.name = "texture"_c;
    TextureGetSampledMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetSampledMip_Texture2D_texture.type.modifiers = TextureGetSampledMip_Texture2D_texture_modifiers;
    TextureGetSampledMip_Texture2D_texture.type.modifierValues = TextureGetSampledMip_Texture2D_texture_modifierValues;
    TextureGetSampledMip_Texture2D_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture2D_sampler.type.modifiers = TextureGetSampledMip_Texture2D_sampler_modifiers;
    TextureGetSampledMip_Texture2D_sampler.type.modifierValues = TextureGetSampledMip_Texture2D_sampler_modifierValues;
    TextureGetSampledMip_Texture2D_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureGetSampledMip_Texture2D.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    TextureGetSampledMip_Texture2D.name = TextureGetSampledMip_Texture2D_name;
    TextureGetSampledMip_Texture2D.backendIndex = 2263;
    TextureGetSampledMip_Texture2D.returnType = Type::FullType { Float32x2Type.name };
    TextureGetSampledMip_Texture2D.parameters = TextureGetSampledMip_Texture2D_args;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D)->signature = "textureGetSampledMip(uniform *texture2D,uniform *sampler,f32x2) f32x2"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D)->name = "textureGetSampledMip(uniform *texture2D,uniform *sampler,f32x2)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D)->nameWithVarNames = "textureGetSampledMip(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with SampledTexture2D, Float32x2
    SampledTextureGetSampledMip_Texture2D_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureGetSampledMip_Texture2D_texture.type.modifiers = SampledTextureGetSampledMip_Texture2D_texture_modifiers;
    SampledTextureGetSampledMip_Texture2D_texture.type.modifierValues = SampledTextureGetSampledMip_Texture2D_texture_modifierValues;
    SampledTextureGetSampledMip_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureGetSampledMip_Texture2D.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    SampledTextureGetSampledMip_Texture2D.name = SampledTextureGetSampledMip_Texture2D_name;
    SampledTextureGetSampledMip_Texture2D.backendIndex = 2264;
    SampledTextureGetSampledMip_Texture2D.returnType = Type::FullType { Float32x2Type.name };
    SampledTextureGetSampledMip_Texture2D.parameters = SampledTextureGetSampledMip_Texture2D_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D)->signature = "textureGetSampledMip(uniform *textureSampled2D,f32x2) f32x2"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D)->name = "textureGetSampledMip(uniform *textureSampled2D,f32x2)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureSampled2D, coordinate : f32x2)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with Texture3D, Sampler, Float32x3
    TextureGetSampledMip_Texture3D_texture.name = "texture"_c;
    TextureGetSampledMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetSampledMip_Texture3D_texture.type.modifiers = TextureGetSampledMip_Texture3D_texture_modifiers;
    TextureGetSampledMip_Texture3D_texture.type.modifierValues = TextureGetSampledMip_Texture3D_texture_modifierValues;
    TextureGetSampledMip_Texture3D_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture3D_sampler.type.modifiers = TextureGetSampledMip_Texture3D_sampler_modifiers;
    TextureGetSampledMip_Texture3D_sampler.type.modifierValues = TextureGetSampledMip_Texture3D_sampler_modifierValues;
    TextureGetSampledMip_Texture3D_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureGetSampledMip_Texture3D.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    TextureGetSampledMip_Texture3D.name = TextureGetSampledMip_Texture3D_name;
    TextureGetSampledMip_Texture3D.backendIndex = 2265;
    TextureGetSampledMip_Texture3D.returnType = Type::FullType { Float32x2Type.name };
    TextureGetSampledMip_Texture3D.parameters = TextureGetSampledMip_Texture3D_args;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D)->signature = "textureGetSampledMip(uniform *texture3D,uniform *sampler,f32x3) f32x2"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D)->name = "textureGetSampledMip(uniform *texture3D,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D)->nameWithVarNames = "textureGetSampledMip(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with SampledTexture3D, Float32x3
    SampledTextureGetSampledMip_Texture3D_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureGetSampledMip_Texture3D_texture.type.modifiers = SampledTextureGetSampledMip_Texture3D_texture_modifiers;
    SampledTextureGetSampledMip_Texture3D_texture.type.modifierValues = SampledTextureGetSampledMip_Texture3D_texture_modifierValues;
    SampledTextureGetSampledMip_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureGetSampledMip_Texture3D.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    SampledTextureGetSampledMip_Texture3D.name = SampledTextureGetSampledMip_Texture3D_name;
    SampledTextureGetSampledMip_Texture3D.backendIndex = 2266;
    SampledTextureGetSampledMip_Texture3D.returnType = Type::FullType { Float32x2Type.name };
    SampledTextureGetSampledMip_Texture3D.parameters = SampledTextureGetSampledMip_Texture3D_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D)->signature = "textureGetSampledMip(uniform *textureSampled3D,f32x3) f32x2"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D)->name = "textureGetSampledMip(uniform *textureSampled3D,f32x3)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureSampled3D, coordinate : f32x3)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with TextureCube, Sampler, Float32x3
    TextureGetSampledMip_TextureCube_texture.name = "texture"_c;
    TextureGetSampledMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetSampledMip_TextureCube_texture.type.modifiers = TextureGetSampledMip_TextureCube_texture_modifiers;
    TextureGetSampledMip_TextureCube_texture.type.modifierValues = TextureGetSampledMip_TextureCube_texture_modifierValues;
    TextureGetSampledMip_TextureCube_sampler.name = "sampler"_c;
    TextureGetSampledMip_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_TextureCube_sampler.type.modifiers = TextureGetSampledMip_TextureCube_sampler_modifiers;
    TextureGetSampledMip_TextureCube_sampler.type.modifierValues = TextureGetSampledMip_TextureCube_sampler_modifierValues;
    TextureGetSampledMip_TextureCube_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureGetSampledMip_TextureCube.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    TextureGetSampledMip_TextureCube.name = TextureGetSampledMip_TextureCube_name;
    TextureGetSampledMip_TextureCube.backendIndex = 2267;
    TextureGetSampledMip_TextureCube.returnType = Type::FullType { Float32x2Type.name };
    TextureGetSampledMip_TextureCube.parameters = TextureGetSampledMip_TextureCube_args;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube)->signature = "textureGetSampledMip(uniform *textureCube,uniform *sampler,f32x3) f32x2"_c;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube)->name = "textureGetSampledMip(uniform *textureCube,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : f32x3)"_c;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with SampledTextureCube, Float32x3
    SampledTextureGetSampledMip_TextureCube_texture.name = "texture"_c;
    SampledTextureGetSampledMip_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureGetSampledMip_TextureCube_texture.type.modifiers = SampledTextureGetSampledMip_TextureCube_texture_modifiers;
    SampledTextureGetSampledMip_TextureCube_texture.type.modifierValues = SampledTextureGetSampledMip_TextureCube_texture_modifierValues;
    SampledTextureGetSampledMip_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureGetSampledMip_TextureCube.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    SampledTextureGetSampledMip_TextureCube.name = SampledTextureGetSampledMip_TextureCube_name;
    SampledTextureGetSampledMip_TextureCube.backendIndex = 2268;
    SampledTextureGetSampledMip_TextureCube.returnType = Type::FullType { Float32x2Type.name };
    SampledTextureGetSampledMip_TextureCube.parameters = SampledTextureGetSampledMip_TextureCube_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube)->signature = "textureGetSampledMip(uniform *textureSampledCube,f32x3) f32x2"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube)->name = "textureGetSampledMip(uniform *textureSampledCube,f32x3)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureSampledCube, coordinate : f32x3)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with Texture1DArray, Sampler, Float32x2
    TextureGetSampledMip_Texture1DArray_texture.name = "texture"_c;
    TextureGetSampledMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetSampledMip_Texture1DArray_texture.type.modifiers = TextureGetSampledMip_Texture1DArray_texture_modifiers;
    TextureGetSampledMip_Texture1DArray_texture.type.modifierValues = TextureGetSampledMip_Texture1DArray_texture_modifierValues;
    TextureGetSampledMip_Texture1DArray_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture1DArray_sampler.type.modifiers = TextureGetSampledMip_Texture1DArray_sampler_modifiers;
    TextureGetSampledMip_Texture1DArray_sampler.type.modifierValues = TextureGetSampledMip_Texture1DArray_sampler_modifierValues;
    TextureGetSampledMip_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureGetSampledMip_Texture1DArray.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    TextureGetSampledMip_Texture1DArray.name = TextureGetSampledMip_Texture1DArray_name;
    TextureGetSampledMip_Texture1DArray.backendIndex = 2269;
    TextureGetSampledMip_Texture1DArray.returnType = Type::FullType { Float32x2Type.name };
    TextureGetSampledMip_Texture1DArray.parameters = TextureGetSampledMip_Texture1DArray_args;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray)->signature = "textureGetSampledMip(uniform *texture1DArray,uniform *sampler,f32x2) f32x2"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray)->name = "textureGetSampledMip(uniform *texture1DArray,uniform *sampler,f32x2)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray)->nameWithVarNames = "textureGetSampledMip(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with SampledTexture1DArray, Float32x2
    SampledTextureGetSampledMip_Texture1DArray_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureGetSampledMip_Texture1DArray_texture.type.modifiers = SampledTextureGetSampledMip_Texture1DArray_texture_modifiers;
    SampledTextureGetSampledMip_Texture1DArray_texture.type.modifierValues = SampledTextureGetSampledMip_Texture1DArray_texture_modifierValues;
    SampledTextureGetSampledMip_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureGetSampledMip_Texture1DArray.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    SampledTextureGetSampledMip_Texture1DArray.name = SampledTextureGetSampledMip_Texture1DArray_name;
    SampledTextureGetSampledMip_Texture1DArray.backendIndex = 2270;
    SampledTextureGetSampledMip_Texture1DArray.returnType = Type::FullType { Float32x2Type.name };
    SampledTextureGetSampledMip_Texture1DArray.parameters = SampledTextureGetSampledMip_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray)->signature = "textureGetSampledMip(uniform *textureSampled1DArray,f32x2) f32x2"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray)->name = "textureGetSampledMip(uniform *textureSampled1DArray,f32x2)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureSampled1DArray, coordinate : f32x2)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with Texture2DArray, Sampler, Float32x3
    TextureGetSampledMip_Texture2DArray_texture.name = "texture"_c;
    TextureGetSampledMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetSampledMip_Texture2DArray_texture.type.modifiers = TextureGetSampledMip_Texture2DArray_texture_modifiers;
    TextureGetSampledMip_Texture2DArray_texture.type.modifierValues = TextureGetSampledMip_Texture2DArray_texture_modifierValues;
    TextureGetSampledMip_Texture2DArray_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture2DArray_sampler.type.modifiers = TextureGetSampledMip_Texture2DArray_sampler_modifiers;
    TextureGetSampledMip_Texture2DArray_sampler.type.modifierValues = TextureGetSampledMip_Texture2DArray_sampler_modifierValues;
    TextureGetSampledMip_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureGetSampledMip_Texture2DArray.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    TextureGetSampledMip_Texture2DArray.name = TextureGetSampledMip_Texture2DArray_name;
    TextureGetSampledMip_Texture2DArray.backendIndex = 2271;
    TextureGetSampledMip_Texture2DArray.returnType = Type::FullType { Float32x2Type.name };
    TextureGetSampledMip_Texture2DArray.parameters = TextureGetSampledMip_Texture2DArray_args;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray)->signature = "textureGetSampledMip(uniform *texture2DArray,uniform *sampler,f32x3) f32x2"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray)->name = "textureGetSampledMip(uniform *texture2DArray,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray)->nameWithVarNames = "textureGetSampledMip(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with SampledTexture2DArray, Float32x3
    SampledTextureGetSampledMip_Texture2DArray_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureGetSampledMip_Texture2DArray_texture.type.modifiers = SampledTextureGetSampledMip_Texture2DArray_texture_modifiers;
    SampledTextureGetSampledMip_Texture2DArray_texture.type.modifierValues = SampledTextureGetSampledMip_Texture2DArray_texture_modifierValues;
    SampledTextureGetSampledMip_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureGetSampledMip_Texture2DArray.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    SampledTextureGetSampledMip_Texture2DArray.name = SampledTextureGetSampledMip_Texture2DArray_name;
    SampledTextureGetSampledMip_Texture2DArray.backendIndex = 2272;
    SampledTextureGetSampledMip_Texture2DArray.returnType = Type::FullType { Float32x2Type.name };
    SampledTextureGetSampledMip_Texture2DArray.parameters = SampledTextureGetSampledMip_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray)->signature = "textureGetSampledMip(uniform *textureSampled2DArray,f32x3) f32x2"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray)->name = "textureGetSampledMip(uniform *textureSampled2DArray,f32x3)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureSampled2DArray, coordinate : f32x3)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with TextureCubeArray, Sampler, Float32x4
    TextureGetSampledMip_TextureCubeArray_texture.name = "texture"_c;
    TextureGetSampledMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetSampledMip_TextureCubeArray_texture.type.modifiers = TextureGetSampledMip_TextureCubeArray_texture_modifiers;
    TextureGetSampledMip_TextureCubeArray_texture.type.modifierValues = TextureGetSampledMip_TextureCubeArray_texture_modifierValues;
    TextureGetSampledMip_TextureCubeArray_sampler.name = "sampler"_c;
    TextureGetSampledMip_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_TextureCubeArray_sampler.type.modifiers = TextureGetSampledMip_TextureCubeArray_sampler_modifiers;
    TextureGetSampledMip_TextureCubeArray_sampler.type.modifierValues = TextureGetSampledMip_TextureCubeArray_sampler_modifierValues;
    TextureGetSampledMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureGetSampledMip_TextureCubeArray.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    TextureGetSampledMip_TextureCubeArray.name = TextureGetSampledMip_TextureCubeArray_name;
    TextureGetSampledMip_TextureCubeArray.backendIndex = 2273;
    TextureGetSampledMip_TextureCubeArray.returnType = Type::FullType { Float32x2Type.name };
    TextureGetSampledMip_TextureCubeArray.parameters = TextureGetSampledMip_TextureCubeArray_args;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray)->signature = "textureGetSampledMip(uniform *textureCubeArray,uniform *sampler,f32x4) f32x2"_c;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray)->name = "textureGetSampledMip(uniform *textureCubeArray,uniform *sampler,f32x4)"_c;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : f32x4)"_c;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with SampledTextureCubeArray, Float32x4
    SampledTextureGetSampledMip_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureGetSampledMip_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureGetSampledMip_TextureCubeArray_texture.type.modifiers = SampledTextureGetSampledMip_TextureCubeArray_texture_modifiers;
    SampledTextureGetSampledMip_TextureCubeArray_texture.type.modifierValues = SampledTextureGetSampledMip_TextureCubeArray_texture_modifierValues;
    SampledTextureGetSampledMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureGetSampledMip_TextureCubeArray.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    SampledTextureGetSampledMip_TextureCubeArray.name = SampledTextureGetSampledMip_TextureCubeArray_name;
    SampledTextureGetSampledMip_TextureCubeArray.backendIndex = 2274;
    SampledTextureGetSampledMip_TextureCubeArray.returnType = Type::FullType { Float32x2Type.name };
    SampledTextureGetSampledMip_TextureCubeArray.parameters = SampledTextureGetSampledMip_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray)->signature = "textureGetSampledMip(uniform *textureSampledCubeArray,f32x4) f32x2"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray)->name = "textureGetSampledMip(uniform *textureSampledCubeArray,f32x4)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureSampledCubeArray, coordinate : f32x4)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray)->returnTypeSymbol = &Float32x2Type;

    /// textureLoad with Texture1D, Int32
    TextureLoad_Texture1D_texture.name = "texture"_c;
    TextureLoad_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureLoad_Texture1D_texture.type.mut = true;
    TextureLoad_Texture1D_texture.type.modifiers = TextureLoad_Texture1D_texture_modifiers;
    TextureLoad_Texture1D_texture.type.modifierValues = TextureLoad_Texture1D_texture_modifierValues;
    TextureLoad_Texture1D_coordinate.name = "coordinate"_c;
    TextureLoad_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureLoad_Texture1D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture1D.name = TextureLoad_Texture1D_name;
    TextureLoad_Texture1D.backendIndex = 2275;
    TextureLoad_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture1D.parameters = TextureLoad_Texture1D_args;
    Symbol::Resolved(&TextureLoad_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureLoad_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoad_Texture1D)->signature = "textureLoad(uniform *mutable texture1D,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoad_Texture1D)->name = "textureLoad(uniform *mutable texture1D,i32)"_c;
    Symbol::Resolved(&TextureLoad_Texture1D)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture1D, coordinate : i32)"_c;
    Symbol::Resolved(&TextureLoad_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture1D, Int32, Int32
    TextureLoadMip_Texture1D_texture.name = "texture"_c;
    TextureLoadMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureLoadMip_Texture1D_texture.type.mut = true;
    TextureLoadMip_Texture1D_texture.type.modifiers = TextureLoadMip_Texture1D_texture_modifiers;
    TextureLoadMip_Texture1D_texture.type.modifierValues = TextureLoadMip_Texture1D_texture_modifierValues;
    TextureLoadMip_Texture1D_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture1D_mip.name = "mip"_c;
    TextureLoadMip_Texture1D_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture1D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture1D.name = TextureLoadMip_Texture1D_name;
    TextureLoadMip_Texture1D.backendIndex = 2276;
    TextureLoadMip_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture1D.parameters = TextureLoadMip_Texture1D_args;
    Symbol::Resolved(&TextureLoadMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureLoadMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture1D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture1D)->signature = "textureLoadMip(uniform *mutable texture1D,i32,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1D)->name = "textureLoadMip(uniform *mutable texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1D)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture1D, coordinate : i32, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture1D, Int32, Float32x4
    TextureStore_Texture1D_texture.name = "texture"_c;
    TextureStore_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureStore_Texture1D_texture.type.mut = true;
    TextureStore_Texture1D_texture.type.modifiers = TextureStore_Texture1D_texture_modifiers;
    TextureStore_Texture1D_texture.type.modifierValues = TextureStore_Texture1D_texture_modifierValues;
    TextureStore_Texture1D_coordinate.name = "coordinate"_c;
    TextureStore_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureStore_Texture1D_value.name = "value"_c;
    TextureStore_Texture1D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture1D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture1D.name = TextureStore_Texture1D_name;
    TextureStore_Texture1D.backendIndex = 2277;
    TextureStore_Texture1D.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture1D.parameters = TextureStore_Texture1D_args;
    Symbol::Resolved(&TextureStore_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureStore_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStore_Texture1D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture1D)->signature = "textureStore(uniform *mutable texture1D,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_Texture1D)->name = "textureStore(uniform *mutable texture1D,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture1D)->nameWithVarNames = "textureStore(texture : uniform *mutable texture1D, coordinate : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture1D)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture1D, Int32, Int32, Float32x4
    TextureStoreMip_Texture1D_texture.name = "texture"_c;
    TextureStoreMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureStoreMip_Texture1D_texture.type.mut = true;
    TextureStoreMip_Texture1D_texture.type.modifiers = TextureStoreMip_Texture1D_texture_modifiers;
    TextureStoreMip_Texture1D_texture.type.modifierValues = TextureStoreMip_Texture1D_texture_modifierValues;
    TextureStoreMip_Texture1D_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture1D_mip.name = "mip"_c;
    TextureStoreMip_Texture1D_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture1D_value.name = "value"_c;
    TextureStoreMip_Texture1D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture1D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture1D.name = TextureStoreMip_Texture1D_name;
    TextureStoreMip_Texture1D.backendIndex = 2278;
    TextureStoreMip_Texture1D.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture1D.parameters = TextureStoreMip_Texture1D_args;
    Symbol::Resolved(&TextureStoreMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureStoreMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture1D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture1D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture1D)->signature = "textureStoreMip(uniform *mutable texture1D,i32,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1D)->name = "textureStoreMip(uniform *mutable texture1D,i32,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1D)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture1D, coordinate : i32, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1D)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2D, Int32x2
    TextureLoad_Texture2D_texture.name = "texture"_c;
    TextureLoad_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureLoad_Texture2D_texture.type.mut = true;
    TextureLoad_Texture2D_texture.type.modifiers = TextureLoad_Texture2D_texture_modifiers;
    TextureLoad_Texture2D_texture.type.modifierValues = TextureLoad_Texture2D_texture_modifierValues;
    TextureLoad_Texture2D_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoad_Texture2D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture2D.name = TextureLoad_Texture2D_name;
    TextureLoad_Texture2D.backendIndex = 2279;
    TextureLoad_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture2D.parameters = TextureLoad_Texture2D_args;
    Symbol::Resolved(&TextureLoad_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureLoad_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoad_Texture2D)->signature = "textureLoad(uniform *mutable texture2D,i32x2) f32x4"_c;
    Symbol::Resolved(&TextureLoad_Texture2D)->name = "textureLoad(uniform *mutable texture2D,i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture2D)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture2D, coordinate : i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture2D, Int32x2, Int32
    TextureLoadMip_Texture2D_texture.name = "texture"_c;
    TextureLoadMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureLoadMip_Texture2D_texture.type.mut = true;
    TextureLoadMip_Texture2D_texture.type.modifiers = TextureLoadMip_Texture2D_texture_modifiers;
    TextureLoadMip_Texture2D_texture.type.modifierValues = TextureLoadMip_Texture2D_texture_modifierValues;
    TextureLoadMip_Texture2D_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoadMip_Texture2D_mip.name = "mip"_c;
    TextureLoadMip_Texture2D_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture2D.name = TextureLoadMip_Texture2D_name;
    TextureLoadMip_Texture2D.backendIndex = 2280;
    TextureLoadMip_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture2D.parameters = TextureLoadMip_Texture2D_args;
    Symbol::Resolved(&TextureLoadMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureLoadMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoadMip_Texture2D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2D)->signature = "textureLoadMip(uniform *mutable texture2D,i32x2,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2D)->name = "textureLoadMip(uniform *mutable texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2D)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture2D, coordinate : i32x2, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture2D, Int32x2, Float32x4
    TextureStore_Texture2D_texture.name = "texture"_c;
    TextureStore_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureStore_Texture2D_texture.type.mut = true;
    TextureStore_Texture2D_texture.type.modifiers = TextureStore_Texture2D_texture_modifiers;
    TextureStore_Texture2D_texture.type.modifierValues = TextureStore_Texture2D_texture_modifierValues;
    TextureStore_Texture2D_coordinate.name = "coordinate"_c;
    TextureStore_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStore_Texture2D_value.name = "value"_c;
    TextureStore_Texture2D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture2D.name = TextureStore_Texture2D_name;
    TextureStore_Texture2D.backendIndex = 2281;
    TextureStore_Texture2D.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2D.parameters = TextureStore_Texture2D_args;
    Symbol::Resolved(&TextureStore_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureStore_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStore_Texture2D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2D)->signature = "textureStore(uniform *mutable texture2D,i32x2,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_Texture2D)->name = "textureStore(uniform *mutable texture2D,i32x2,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2D)->nameWithVarNames = "textureStore(texture : uniform *mutable texture2D, coordinate : i32x2, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2D)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2D, Int32x2, Int32, Float32x4
    TextureStoreMip_Texture2D_texture.name = "texture"_c;
    TextureStoreMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureStoreMip_Texture2D_texture.type.mut = true;
    TextureStoreMip_Texture2D_texture.type.modifiers = TextureStoreMip_Texture2D_texture_modifiers;
    TextureStoreMip_Texture2D_texture.type.modifierValues = TextureStoreMip_Texture2D_texture_modifierValues;
    TextureStoreMip_Texture2D_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStoreMip_Texture2D_mip.name = "mip"_c;
    TextureStoreMip_Texture2D_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2D_value.name = "value"_c;
    TextureStoreMip_Texture2D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture2D.name = TextureStoreMip_Texture2D_name;
    TextureStoreMip_Texture2D.backendIndex = 2282;
    TextureStoreMip_Texture2D.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2D.parameters = TextureStoreMip_Texture2D_args;
    Symbol::Resolved(&TextureStoreMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureStoreMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStoreMip_Texture2D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2D)->signature = "textureStoreMip(uniform *mutable texture2D,i32x2,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2D)->name = "textureStoreMip(uniform *mutable texture2D,i32x2,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2D)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture2D, coordinate : i32x2, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2D)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture3D, Int32x3
    TextureLoad_Texture3D_texture.name = "texture"_c;
    TextureLoad_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureLoad_Texture3D_texture.type.mut = true;
    TextureLoad_Texture3D_texture.type.modifiers = TextureLoad_Texture3D_texture_modifiers;
    TextureLoad_Texture3D_texture.type.modifierValues = TextureLoad_Texture3D_texture_modifierValues;
    TextureLoad_Texture3D_coordinate.name = "coordinate"_c;
    TextureLoad_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_Texture3D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture3D.name = TextureLoad_Texture3D_name;
    TextureLoad_Texture3D.backendIndex = 2283;
    TextureLoad_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture3D.parameters = TextureLoad_Texture3D_args;
    Symbol::Resolved(&TextureLoad_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureLoad_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_Texture3D)->signature = "textureLoad(uniform *mutable texture3D,i32x3) f32x4"_c;
    Symbol::Resolved(&TextureLoad_Texture3D)->name = "textureLoad(uniform *mutable texture3D,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture3D)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture3D, coordinate : i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture3D, Int32x3, Int32
    TextureLoadMip_Texture3D_texture.name = "texture"_c;
    TextureLoadMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureLoadMip_Texture3D_texture.type.mut = true;
    TextureLoadMip_Texture3D_texture.type.modifiers = TextureLoadMip_Texture3D_texture_modifiers;
    TextureLoadMip_Texture3D_texture.type.modifierValues = TextureLoadMip_Texture3D_texture_modifierValues;
    TextureLoadMip_Texture3D_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_Texture3D_mip.name = "mip"_c;
    TextureLoadMip_Texture3D_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture3D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture3D.name = TextureLoadMip_Texture3D_name;
    TextureLoadMip_Texture3D.backendIndex = 2284;
    TextureLoadMip_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture3D.parameters = TextureLoadMip_Texture3D_args;
    Symbol::Resolved(&TextureLoadMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureLoadMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_Texture3D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture3D)->signature = "textureLoadMip(uniform *mutable texture3D,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_Texture3D)->name = "textureLoadMip(uniform *mutable texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture3D)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture3D, coordinate : i32x3, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture3D, Int32x3, Float32x4
    TextureStore_Texture3D_texture.name = "texture"_c;
    TextureStore_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureStore_Texture3D_texture.type.mut = true;
    TextureStore_Texture3D_texture.type.modifiers = TextureStore_Texture3D_texture_modifiers;
    TextureStore_Texture3D_texture.type.modifierValues = TextureStore_Texture3D_texture_modifierValues;
    TextureStore_Texture3D_coordinate.name = "coordinate"_c;
    TextureStore_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_Texture3D_value.name = "value"_c;
    TextureStore_Texture3D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture3D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture3D.name = TextureStore_Texture3D_name;
    TextureStore_Texture3D.backendIndex = 2285;
    TextureStore_Texture3D.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture3D.parameters = TextureStore_Texture3D_args;
    Symbol::Resolved(&TextureStore_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureStore_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_Texture3D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture3D)->signature = "textureStore(uniform *mutable texture3D,i32x3,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_Texture3D)->name = "textureStore(uniform *mutable texture3D,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture3D)->nameWithVarNames = "textureStore(texture : uniform *mutable texture3D, coordinate : i32x3, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture3D)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture3D, Int32x3, Int32, Float32x4
    TextureStoreMip_Texture3D_texture.name = "texture"_c;
    TextureStoreMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureStoreMip_Texture3D_texture.type.mut = true;
    TextureStoreMip_Texture3D_texture.type.modifiers = TextureStoreMip_Texture3D_texture_modifiers;
    TextureStoreMip_Texture3D_texture.type.modifierValues = TextureStoreMip_Texture3D_texture_modifierValues;
    TextureStoreMip_Texture3D_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_Texture3D_mip.name = "mip"_c;
    TextureStoreMip_Texture3D_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture3D_value.name = "value"_c;
    TextureStoreMip_Texture3D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture3D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture3D.name = TextureStoreMip_Texture3D_name;
    TextureStoreMip_Texture3D.backendIndex = 2286;
    TextureStoreMip_Texture3D.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture3D.parameters = TextureStoreMip_Texture3D_args;
    Symbol::Resolved(&TextureStoreMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureStoreMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_Texture3D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture3D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture3D)->signature = "textureStoreMip(uniform *mutable texture3D,i32x3,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_Texture3D)->name = "textureStoreMip(uniform *mutable texture3D,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture3D)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture3D, coordinate : i32x3, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture3D)->returnTypeSymbol = &VoidType;

    /// textureLoad with TextureCube, Int32x3
    TextureLoad_TextureCube_texture.name = "texture"_c;
    TextureLoad_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureLoad_TextureCube_texture.type.mut = true;
    TextureLoad_TextureCube_texture.type.modifiers = TextureLoad_TextureCube_texture_modifiers;
    TextureLoad_TextureCube_texture.type.modifierValues = TextureLoad_TextureCube_texture_modifierValues;
    TextureLoad_TextureCube_coordinate.name = "coordinate"_c;
    TextureLoad_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_TextureCube.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_TextureCube.name = TextureLoad_TextureCube_name;
    TextureLoad_TextureCube.backendIndex = 2287;
    TextureLoad_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_TextureCube.parameters = TextureLoad_TextureCube_args;
    Symbol::Resolved(&TextureLoad_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureLoad_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_TextureCube)->signature = "textureLoad(uniform *mutable textureCube,i32x3) f32x4"_c;
    Symbol::Resolved(&TextureLoad_TextureCube)->name = "textureLoad(uniform *mutable textureCube,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_TextureCube)->nameWithVarNames = "textureLoad(texture : uniform *mutable textureCube, coordinate : i32x3)"_c;
    Symbol::Resolved(&TextureLoad_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with TextureCube, Int32x3, Int32
    TextureLoadMip_TextureCube_texture.name = "texture"_c;
    TextureLoadMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureLoadMip_TextureCube_texture.type.mut = true;
    TextureLoadMip_TextureCube_texture.type.modifiers = TextureLoadMip_TextureCube_texture_modifiers;
    TextureLoadMip_TextureCube_texture.type.modifierValues = TextureLoadMip_TextureCube_texture_modifierValues;
    TextureLoadMip_TextureCube_coordinate.name = "coordinate"_c;
    TextureLoadMip_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_TextureCube_mip.name = "mip"_c;
    TextureLoadMip_TextureCube_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_TextureCube.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_TextureCube.name = TextureLoadMip_TextureCube_name;
    TextureLoadMip_TextureCube.backendIndex = 2288;
    TextureLoadMip_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_TextureCube.parameters = TextureLoadMip_TextureCube_args;
    Symbol::Resolved(&TextureLoadMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureLoadMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_TextureCube_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_TextureCube)->signature = "textureLoadMip(uniform *mutable textureCube,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCube)->name = "textureLoadMip(uniform *mutable textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCube)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable textureCube, coordinate : i32x3, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with TextureCube, Int32x3, Float32x4
    TextureStore_TextureCube_texture.name = "texture"_c;
    TextureStore_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureStore_TextureCube_texture.type.mut = true;
    TextureStore_TextureCube_texture.type.modifiers = TextureStore_TextureCube_texture_modifiers;
    TextureStore_TextureCube_texture.type.modifierValues = TextureStore_TextureCube_texture_modifierValues;
    TextureStore_TextureCube_coordinate.name = "coordinate"_c;
    TextureStore_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_TextureCube_value.name = "value"_c;
    TextureStore_TextureCube_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_TextureCube.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_TextureCube.name = TextureStore_TextureCube_name;
    TextureStore_TextureCube.backendIndex = 2289;
    TextureStore_TextureCube.returnType = Type::FullType { VoidType.name };
    TextureStore_TextureCube.parameters = TextureStore_TextureCube_args;
    Symbol::Resolved(&TextureStore_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureStore_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_TextureCube_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_TextureCube)->signature = "textureStore(uniform *mutable textureCube,i32x3,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_TextureCube)->name = "textureStore(uniform *mutable textureCube,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_TextureCube)->nameWithVarNames = "textureStore(texture : uniform *mutable textureCube, coordinate : i32x3, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_TextureCube)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with TextureCube, Int32x3, Int32, Float32x4
    TextureStoreMip_TextureCube_texture.name = "texture"_c;
    TextureStoreMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureStoreMip_TextureCube_texture.type.mut = true;
    TextureStoreMip_TextureCube_texture.type.modifiers = TextureStoreMip_TextureCube_texture_modifiers;
    TextureStoreMip_TextureCube_texture.type.modifierValues = TextureStoreMip_TextureCube_texture_modifierValues;
    TextureStoreMip_TextureCube_coordinate.name = "coordinate"_c;
    TextureStoreMip_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_TextureCube_mip.name = "mip"_c;
    TextureStoreMip_TextureCube_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_TextureCube_value.name = "value"_c;
    TextureStoreMip_TextureCube_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_TextureCube.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_TextureCube.name = TextureStoreMip_TextureCube_name;
    TextureStoreMip_TextureCube.backendIndex = 2290;
    TextureStoreMip_TextureCube.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_TextureCube.parameters = TextureStoreMip_TextureCube_args;
    Symbol::Resolved(&TextureStoreMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureStoreMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_TextureCube_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_TextureCube_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_TextureCube)->signature = "textureStoreMip(uniform *mutable textureCube,i32x3,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCube)->name = "textureStoreMip(uniform *mutable textureCube,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCube)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable textureCube, coordinate : i32x3, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCube)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture1DArray, Int32x2
    TextureLoad_Texture1DArray_texture.name = "texture"_c;
    TextureLoad_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureLoad_Texture1DArray_texture.type.mut = true;
    TextureLoad_Texture1DArray_texture.type.modifiers = TextureLoad_Texture1DArray_texture_modifiers;
    TextureLoad_Texture1DArray_texture.type.modifierValues = TextureLoad_Texture1DArray_texture_modifierValues;
    TextureLoad_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureLoad_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoad_Texture1DArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture1DArray.name = TextureLoad_Texture1DArray_name;
    TextureLoad_Texture1DArray.backendIndex = 2291;
    TextureLoad_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture1DArray.parameters = TextureLoad_Texture1DArray_args;
    Symbol::Resolved(&TextureLoad_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureLoad_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoad_Texture1DArray)->signature = "textureLoad(uniform *mutable texture1DArray,i32x2) f32x4"_c;
    Symbol::Resolved(&TextureLoad_Texture1DArray)->name = "textureLoad(uniform *mutable texture1DArray,i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture1DArray)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture1DArray, coordinate : i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture1DArray, Int32x2, Int32
    TextureLoadMip_Texture1DArray_texture.name = "texture"_c;
    TextureLoadMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureLoadMip_Texture1DArray_texture.type.mut = true;
    TextureLoadMip_Texture1DArray_texture.type.modifiers = TextureLoadMip_Texture1DArray_texture_modifiers;
    TextureLoadMip_Texture1DArray_texture.type.modifierValues = TextureLoadMip_Texture1DArray_texture_modifierValues;
    TextureLoadMip_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoadMip_Texture1DArray_mip.name = "mip"_c;
    TextureLoadMip_Texture1DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture1DArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture1DArray.name = TextureLoadMip_Texture1DArray_name;
    TextureLoadMip_Texture1DArray.backendIndex = 2292;
    TextureLoadMip_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture1DArray.parameters = TextureLoadMip_Texture1DArray_args;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray)->signature = "textureLoadMip(uniform *mutable texture1DArray,i32x2,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray)->name = "textureLoadMip(uniform *mutable texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture1DArray, coordinate : i32x2, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture1DArray, Int32x2, Float32x4
    TextureStore_Texture1DArray_texture.name = "texture"_c;
    TextureStore_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureStore_Texture1DArray_texture.type.mut = true;
    TextureStore_Texture1DArray_texture.type.modifiers = TextureStore_Texture1DArray_texture_modifiers;
    TextureStore_Texture1DArray_texture.type.modifierValues = TextureStore_Texture1DArray_texture_modifierValues;
    TextureStore_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureStore_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStore_Texture1DArray_value.name = "value"_c;
    TextureStore_Texture1DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture1DArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture1DArray.name = TextureStore_Texture1DArray_name;
    TextureStore_Texture1DArray.backendIndex = 2293;
    TextureStore_Texture1DArray.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture1DArray.parameters = TextureStore_Texture1DArray_args;
    Symbol::Resolved(&TextureStore_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureStore_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStore_Texture1DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture1DArray)->signature = "textureStore(uniform *mutable texture1DArray,i32x2,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_Texture1DArray)->name = "textureStore(uniform *mutable texture1DArray,i32x2,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture1DArray)->nameWithVarNames = "textureStore(texture : uniform *mutable texture1DArray, coordinate : i32x2, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture1DArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture1DArray, Int32x2, Int32, Float32x4
    TextureStoreMip_Texture1DArray_texture.name = "texture"_c;
    TextureStoreMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureStoreMip_Texture1DArray_texture.type.mut = true;
    TextureStoreMip_Texture1DArray_texture.type.modifiers = TextureStoreMip_Texture1DArray_texture_modifiers;
    TextureStoreMip_Texture1DArray_texture.type.modifierValues = TextureStoreMip_Texture1DArray_texture_modifierValues;
    TextureStoreMip_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStoreMip_Texture1DArray_mip.name = "mip"_c;
    TextureStoreMip_Texture1DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture1DArray_value.name = "value"_c;
    TextureStoreMip_Texture1DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture1DArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture1DArray.name = TextureStoreMip_Texture1DArray_name;
    TextureStoreMip_Texture1DArray.backendIndex = 2294;
    TextureStoreMip_Texture1DArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture1DArray.parameters = TextureStoreMip_Texture1DArray_args;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray)->signature = "textureStoreMip(uniform *mutable texture1DArray,i32x2,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray)->name = "textureStoreMip(uniform *mutable texture1DArray,i32x2,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture1DArray, coordinate : i32x2, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2DArray, Int32x3
    TextureLoad_Texture2DArray_texture.name = "texture"_c;
    TextureLoad_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureLoad_Texture2DArray_texture.type.mut = true;
    TextureLoad_Texture2DArray_texture.type.modifiers = TextureLoad_Texture2DArray_texture_modifiers;
    TextureLoad_Texture2DArray_texture.type.modifierValues = TextureLoad_Texture2DArray_texture_modifierValues;
    TextureLoad_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_Texture2DArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture2DArray.name = TextureLoad_Texture2DArray_name;
    TextureLoad_Texture2DArray.backendIndex = 2295;
    TextureLoad_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture2DArray.parameters = TextureLoad_Texture2DArray_args;
    Symbol::Resolved(&TextureLoad_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureLoad_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_Texture2DArray)->signature = "textureLoad(uniform *mutable texture2DArray,i32x3) f32x4"_c;
    Symbol::Resolved(&TextureLoad_Texture2DArray)->name = "textureLoad(uniform *mutable texture2DArray,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DArray)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture2DArray, coordinate : i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture2DArray, Int32x3, Int32
    TextureLoadMip_Texture2DArray_texture.name = "texture"_c;
    TextureLoadMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureLoadMip_Texture2DArray_texture.type.mut = true;
    TextureLoadMip_Texture2DArray_texture.type.modifiers = TextureLoadMip_Texture2DArray_texture_modifiers;
    TextureLoadMip_Texture2DArray_texture.type.modifierValues = TextureLoadMip_Texture2DArray_texture_modifierValues;
    TextureLoadMip_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_Texture2DArray_mip.name = "mip"_c;
    TextureLoadMip_Texture2DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2DArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture2DArray.name = TextureLoadMip_Texture2DArray_name;
    TextureLoadMip_Texture2DArray.backendIndex = 2296;
    TextureLoadMip_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture2DArray.parameters = TextureLoadMip_Texture2DArray_args;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray)->signature = "textureLoadMip(uniform *mutable texture2DArray,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray)->name = "textureLoadMip(uniform *mutable texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture2DArray, coordinate : i32x3, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture2DArray, Int32x3, Float32x4
    TextureStore_Texture2DArray_texture.name = "texture"_c;
    TextureStore_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureStore_Texture2DArray_texture.type.mut = true;
    TextureStore_Texture2DArray_texture.type.modifiers = TextureStore_Texture2DArray_texture_modifiers;
    TextureStore_Texture2DArray_texture.type.modifierValues = TextureStore_Texture2DArray_texture_modifierValues;
    TextureStore_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureStore_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_Texture2DArray_value.name = "value"_c;
    TextureStore_Texture2DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2DArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture2DArray.name = TextureStore_Texture2DArray_name;
    TextureStore_Texture2DArray.backendIndex = 2297;
    TextureStore_Texture2DArray.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2DArray.parameters = TextureStore_Texture2DArray_args;
    Symbol::Resolved(&TextureStore_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureStore_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_Texture2DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2DArray)->signature = "textureStore(uniform *mutable texture2DArray,i32x3,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_Texture2DArray)->name = "textureStore(uniform *mutable texture2DArray,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DArray)->nameWithVarNames = "textureStore(texture : uniform *mutable texture2DArray, coordinate : i32x3, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2DArray, Int32x3, Int32, Float32x4
    TextureStoreMip_Texture2DArray_texture.name = "texture"_c;
    TextureStoreMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureStoreMip_Texture2DArray_texture.type.mut = true;
    TextureStoreMip_Texture2DArray_texture.type.modifiers = TextureStoreMip_Texture2DArray_texture_modifiers;
    TextureStoreMip_Texture2DArray_texture.type.modifierValues = TextureStoreMip_Texture2DArray_texture_modifierValues;
    TextureStoreMip_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_Texture2DArray_mip.name = "mip"_c;
    TextureStoreMip_Texture2DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2DArray_value.name = "value"_c;
    TextureStoreMip_Texture2DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2DArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture2DArray.name = TextureStoreMip_Texture2DArray_name;
    TextureStoreMip_Texture2DArray.backendIndex = 2298;
    TextureStoreMip_Texture2DArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2DArray.parameters = TextureStoreMip_Texture2DArray_args;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray)->signature = "textureStoreMip(uniform *mutable texture2DArray,i32x3,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray)->name = "textureStoreMip(uniform *mutable texture2DArray,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture2DArray, coordinate : i32x3, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray)->returnTypeSymbol = &VoidType;

    /// textureLoad with TextureCubeArray, Int32x4
    TextureLoad_TextureCubeArray_texture.name = "texture"_c;
    TextureLoad_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureLoad_TextureCubeArray_texture.type.mut = true;
    TextureLoad_TextureCubeArray_texture.type.modifiers = TextureLoad_TextureCubeArray_texture_modifiers;
    TextureLoad_TextureCubeArray_texture.type.modifierValues = TextureLoad_TextureCubeArray_texture_modifierValues;
    TextureLoad_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureLoad_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureLoad_TextureCubeArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_TextureCubeArray.name = TextureLoad_TextureCubeArray_name;
    TextureLoad_TextureCubeArray.backendIndex = 2299;
    TextureLoad_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_TextureCubeArray.parameters = TextureLoad_TextureCubeArray_args;
    Symbol::Resolved(&TextureLoad_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureLoad_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureLoad_TextureCubeArray)->signature = "textureLoad(uniform *mutable textureCubeArray,i32x4) f32x4"_c;
    Symbol::Resolved(&TextureLoad_TextureCubeArray)->name = "textureLoad(uniform *mutable textureCubeArray,i32x4)"_c;
    Symbol::Resolved(&TextureLoad_TextureCubeArray)->nameWithVarNames = "textureLoad(texture : uniform *mutable textureCubeArray, coordinate : i32x4)"_c;
    Symbol::Resolved(&TextureLoad_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with TextureCubeArray, Int32x4, Int32
    TextureLoadMip_TextureCubeArray_texture.name = "texture"_c;
    TextureLoadMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureLoadMip_TextureCubeArray_texture.type.mut = true;
    TextureLoadMip_TextureCubeArray_texture.type.modifiers = TextureLoadMip_TextureCubeArray_texture_modifiers;
    TextureLoadMip_TextureCubeArray_texture.type.modifierValues = TextureLoadMip_TextureCubeArray_texture_modifierValues;
    TextureLoadMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureLoadMip_TextureCubeArray_mip.name = "mip"_c;
    TextureLoadMip_TextureCubeArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_TextureCubeArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_TextureCubeArray.name = TextureLoadMip_TextureCubeArray_name;
    TextureLoadMip_TextureCubeArray.backendIndex = 2300;
    TextureLoadMip_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_TextureCubeArray.parameters = TextureLoadMip_TextureCubeArray_args;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray)->signature = "textureLoadMip(uniform *mutable textureCubeArray,i32x4,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray)->name = "textureLoadMip(uniform *mutable textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable textureCubeArray, coordinate : i32x4, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with TextureCubeArray, Int32x4, Float32x4
    TextureStore_TextureCubeArray_texture.name = "texture"_c;
    TextureStore_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureStore_TextureCubeArray_texture.type.mut = true;
    TextureStore_TextureCubeArray_texture.type.modifiers = TextureStore_TextureCubeArray_texture_modifiers;
    TextureStore_TextureCubeArray_texture.type.modifierValues = TextureStore_TextureCubeArray_texture_modifierValues;
    TextureStore_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureStore_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureStore_TextureCubeArray_value.name = "value"_c;
    TextureStore_TextureCubeArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_TextureCubeArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_TextureCubeArray.name = TextureStore_TextureCubeArray_name;
    TextureStore_TextureCubeArray.backendIndex = 2301;
    TextureStore_TextureCubeArray.returnType = Type::FullType { VoidType.name };
    TextureStore_TextureCubeArray.parameters = TextureStore_TextureCubeArray_args;
    Symbol::Resolved(&TextureStore_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureStore_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureStore_TextureCubeArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_TextureCubeArray)->signature = "textureStore(uniform *mutable textureCubeArray,i32x4,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_TextureCubeArray)->name = "textureStore(uniform *mutable textureCubeArray,i32x4,f32x4)"_c;
    Symbol::Resolved(&TextureStore_TextureCubeArray)->nameWithVarNames = "textureStore(texture : uniform *mutable textureCubeArray, coordinate : i32x4, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_TextureCubeArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with TextureCubeArray, Int32x4, Int32, Float32x4
    TextureStoreMip_TextureCubeArray_texture.name = "texture"_c;
    TextureStoreMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureStoreMip_TextureCubeArray_texture.type.mut = true;
    TextureStoreMip_TextureCubeArray_texture.type.modifiers = TextureStoreMip_TextureCubeArray_texture_modifiers;
    TextureStoreMip_TextureCubeArray_texture.type.modifierValues = TextureStoreMip_TextureCubeArray_texture_modifierValues;
    TextureStoreMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureStoreMip_TextureCubeArray_mip.name = "mip"_c;
    TextureStoreMip_TextureCubeArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_TextureCubeArray_value.name = "value"_c;
    TextureStoreMip_TextureCubeArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_TextureCubeArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_TextureCubeArray.name = TextureStoreMip_TextureCubeArray_name;
    TextureStoreMip_TextureCubeArray.backendIndex = 2302;
    TextureStoreMip_TextureCubeArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_TextureCubeArray.parameters = TextureStoreMip_TextureCubeArray_args;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray)->signature = "textureStoreMip(uniform *mutable textureCubeArray,i32x4,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray)->name = "textureStoreMip(uniform *mutable textureCubeArray,i32x4,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable textureCubeArray, coordinate : i32x4, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2DMS, Int32x2
    TextureLoad_Texture2DMS_texture.name = "texture"_c;
    TextureLoad_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureLoad_Texture2DMS_texture.type.mut = true;
    TextureLoad_Texture2DMS_texture.type.modifiers = TextureLoad_Texture2DMS_texture_modifiers;
    TextureLoad_Texture2DMS_texture.type.modifierValues = TextureLoad_Texture2DMS_texture_modifierValues;
    TextureLoad_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoad_Texture2DMS.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture2DMS.name = TextureLoad_Texture2DMS_name;
    TextureLoad_Texture2DMS.backendIndex = 2303;
    TextureLoad_Texture2DMS.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture2DMS.parameters = TextureLoad_Texture2DMS_args;
    Symbol::Resolved(&TextureLoad_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureLoad_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoad_Texture2DMS)->signature = "textureLoad(uniform *mutable texture2DMS,i32x2) f32x4"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMS)->name = "textureLoad(uniform *mutable texture2DMS,i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMS)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture2DMS, coordinate : i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMS)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture2DMS, Int32x2, Int32
    TextureLoadMip_Texture2DMS_texture.name = "texture"_c;
    TextureLoadMip_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureLoadMip_Texture2DMS_texture.type.mut = true;
    TextureLoadMip_Texture2DMS_texture.type.modifiers = TextureLoadMip_Texture2DMS_texture_modifiers;
    TextureLoadMip_Texture2DMS_texture.type.modifierValues = TextureLoadMip_Texture2DMS_texture_modifierValues;
    TextureLoadMip_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoadMip_Texture2DMS_mip.name = "mip"_c;
    TextureLoadMip_Texture2DMS_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2DMS.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture2DMS.name = TextureLoadMip_Texture2DMS_name;
    TextureLoadMip_Texture2DMS.backendIndex = 2304;
    TextureLoadMip_Texture2DMS.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture2DMS.parameters = TextureLoadMip_Texture2DMS_args;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS)->signature = "textureLoadMip(uniform *mutable texture2DMS,i32x2,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS)->name = "textureLoadMip(uniform *mutable texture2DMS,i32x2,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture2DMS, coordinate : i32x2, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture2DMS, Int32x2, Float32x4
    TextureStore_Texture2DMS_texture.name = "texture"_c;
    TextureStore_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureStore_Texture2DMS_texture.type.mut = true;
    TextureStore_Texture2DMS_texture.type.modifiers = TextureStore_Texture2DMS_texture_modifiers;
    TextureStore_Texture2DMS_texture.type.modifierValues = TextureStore_Texture2DMS_texture_modifierValues;
    TextureStore_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureStore_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStore_Texture2DMS_value.name = "value"_c;
    TextureStore_Texture2DMS_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2DMS.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture2DMS.name = TextureStore_Texture2DMS_name;
    TextureStore_Texture2DMS.backendIndex = 2305;
    TextureStore_Texture2DMS.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2DMS.parameters = TextureStore_Texture2DMS_args;
    Symbol::Resolved(&TextureStore_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureStore_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStore_Texture2DMS_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2DMS)->signature = "textureStore(uniform *mutable texture2DMS,i32x2,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_Texture2DMS)->name = "textureStore(uniform *mutable texture2DMS,i32x2,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DMS)->nameWithVarNames = "textureStore(texture : uniform *mutable texture2DMS, coordinate : i32x2, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DMS)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2DMS, Int32x2, Int32, Float32x4
    TextureStoreMip_Texture2DMS_texture.name = "texture"_c;
    TextureStoreMip_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureStoreMip_Texture2DMS_texture.type.mut = true;
    TextureStoreMip_Texture2DMS_texture.type.modifiers = TextureStoreMip_Texture2DMS_texture_modifiers;
    TextureStoreMip_Texture2DMS_texture.type.modifierValues = TextureStoreMip_Texture2DMS_texture_modifierValues;
    TextureStoreMip_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStoreMip_Texture2DMS_mip.name = "mip"_c;
    TextureStoreMip_Texture2DMS_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2DMS_value.name = "value"_c;
    TextureStoreMip_Texture2DMS_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2DMS.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture2DMS.name = TextureStoreMip_Texture2DMS_name;
    TextureStoreMip_Texture2DMS.backendIndex = 2306;
    TextureStoreMip_Texture2DMS.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2DMS.parameters = TextureStoreMip_Texture2DMS_args;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS)->signature = "textureStoreMip(uniform *mutable texture2DMS,i32x2,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS)->name = "textureStoreMip(uniform *mutable texture2DMS,i32x2,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture2DMS, coordinate : i32x2, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2DMSArray, Int32x3
    TextureLoad_Texture2DMSArray_texture.name = "texture"_c;
    TextureLoad_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureLoad_Texture2DMSArray_texture.type.mut = true;
    TextureLoad_Texture2DMSArray_texture.type.modifiers = TextureLoad_Texture2DMSArray_texture_modifiers;
    TextureLoad_Texture2DMSArray_texture.type.modifierValues = TextureLoad_Texture2DMSArray_texture_modifierValues;
    TextureLoad_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_Texture2DMSArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture2DMSArray.name = TextureLoad_Texture2DMSArray_name;
    TextureLoad_Texture2DMSArray.backendIndex = 2307;
    TextureLoad_Texture2DMSArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture2DMSArray.parameters = TextureLoad_Texture2DMSArray_args;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray)->signature = "textureLoad(uniform *mutable texture2DMSArray,i32x3) f32x4"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray)->name = "textureLoad(uniform *mutable texture2DMSArray,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture2DMSArray, coordinate : i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture2DMSArray, Int32x3, Int32
    TextureLoadMip_Texture2DMSArray_texture.name = "texture"_c;
    TextureLoadMip_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureLoadMip_Texture2DMSArray_texture.type.mut = true;
    TextureLoadMip_Texture2DMSArray_texture.type.modifiers = TextureLoadMip_Texture2DMSArray_texture_modifiers;
    TextureLoadMip_Texture2DMSArray_texture.type.modifierValues = TextureLoadMip_Texture2DMSArray_texture_modifierValues;
    TextureLoadMip_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_Texture2DMSArray_mip.name = "mip"_c;
    TextureLoadMip_Texture2DMSArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2DMSArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture2DMSArray.name = TextureLoadMip_Texture2DMSArray_name;
    TextureLoadMip_Texture2DMSArray.backendIndex = 2308;
    TextureLoadMip_Texture2DMSArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture2DMSArray.parameters = TextureLoadMip_Texture2DMSArray_args;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray)->signature = "textureLoadMip(uniform *mutable texture2DMSArray,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray)->name = "textureLoadMip(uniform *mutable texture2DMSArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture2DMSArray, coordinate : i32x3, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture2DMSArray, Int32x3, Float32x4
    TextureStore_Texture2DMSArray_texture.name = "texture"_c;
    TextureStore_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureStore_Texture2DMSArray_texture.type.mut = true;
    TextureStore_Texture2DMSArray_texture.type.modifiers = TextureStore_Texture2DMSArray_texture_modifiers;
    TextureStore_Texture2DMSArray_texture.type.modifierValues = TextureStore_Texture2DMSArray_texture_modifierValues;
    TextureStore_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureStore_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_Texture2DMSArray_value.name = "value"_c;
    TextureStore_Texture2DMSArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2DMSArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture2DMSArray.name = TextureStore_Texture2DMSArray_name;
    TextureStore_Texture2DMSArray.backendIndex = 2309;
    TextureStore_Texture2DMSArray.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2DMSArray.parameters = TextureStore_Texture2DMSArray_args;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2DMSArray)->signature = "textureStore(uniform *mutable texture2DMSArray,i32x3,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_Texture2DMSArray)->name = "textureStore(uniform *mutable texture2DMSArray,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DMSArray)->nameWithVarNames = "textureStore(texture : uniform *mutable texture2DMSArray, coordinate : i32x3, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DMSArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2DMSArray, Int32x3, Int32, Float32x4
    TextureStoreMip_Texture2DMSArray_texture.name = "texture"_c;
    TextureStoreMip_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureStoreMip_Texture2DMSArray_texture.type.mut = true;
    TextureStoreMip_Texture2DMSArray_texture.type.modifiers = TextureStoreMip_Texture2DMSArray_texture_modifiers;
    TextureStoreMip_Texture2DMSArray_texture.type.modifierValues = TextureStoreMip_Texture2DMSArray_texture_modifierValues;
    TextureStoreMip_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_Texture2DMSArray_mip.name = "mip"_c;
    TextureStoreMip_Texture2DMSArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2DMSArray_value.name = "value"_c;
    TextureStoreMip_Texture2DMSArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2DMSArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture2DMSArray.name = TextureStoreMip_Texture2DMSArray_name;
    TextureStoreMip_Texture2DMSArray.backendIndex = 2310;
    TextureStoreMip_Texture2DMSArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2DMSArray.parameters = TextureStoreMip_Texture2DMSArray_args;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray)->signature = "textureStoreMip(uniform *mutable texture2DMSArray,i32x3,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray)->name = "textureStoreMip(uniform *mutable texture2DMSArray,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture2DMSArray, coordinate : i32x3, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray)->returnTypeSymbol = &VoidType;

    /// textureFetch with Texture1D, Int32, UInt32
    TextureFetch_Texture1D_texture.name = "texture"_c;
    TextureFetch_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureFetch_Texture1D_texture.type.modifiers = TextureFetch_Texture1D_texture_modifiers;
    TextureFetch_Texture1D_texture.type.modifierValues = TextureFetch_Texture1D_texture_modifierValues;
    TextureFetch_Texture1D_coordinate.name = "coordinate"_c;
    TextureFetch_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureFetch_Texture1D_lod.name = "lod"_c;
    TextureFetch_Texture1D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture1D.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture1D.name = TextureFetch_Texture1D_name;
    TextureFetch_Texture1D.backendIndex = 2311;
    TextureFetch_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture1D.parameters = TextureFetch_Texture1D_args;
    Symbol::Resolved(&TextureFetch_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureFetch_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureFetch_Texture1D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture1D)->signature = "textureFetch(uniform *texture1D,i32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetch_Texture1D)->name = "textureFetch(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture1D)->nameWithVarNames = "textureFetch(texture : uniform *texture1D, coordinate : i32, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture1D, Int32, UInt32, UInt32
    TextureFetchSample_Texture1D_texture.name = "texture"_c;
    TextureFetchSample_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureFetchSample_Texture1D_texture.type.modifiers = TextureFetchSample_Texture1D_texture_modifiers;
    TextureFetchSample_Texture1D_texture.type.modifierValues = TextureFetchSample_Texture1D_texture_modifierValues;
    TextureFetchSample_Texture1D_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureFetchSample_Texture1D_lod.name = "lod"_c;
    TextureFetchSample_Texture1D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1D_sample.name = "sample"_c;
    TextureFetchSample_Texture1D_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1D.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture1D.name = TextureFetchSample_Texture1D_name;
    TextureFetchSample_Texture1D.backendIndex = 2312;
    TextureFetchSample_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture1D.parameters = TextureFetchSample_Texture1D_args;
    Symbol::Resolved(&TextureFetchSample_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureFetchSample_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1D_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1D)->signature = "textureFetchSample(uniform *texture1D,i32,u32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1D)->name = "textureFetchSample(uniform *texture1D,i32,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1D)->nameWithVarNames = "textureFetchSample(texture : uniform *texture1D, coordinate : i32, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture2D, Int32x2, UInt32
    TextureFetch_Texture2D_texture.name = "texture"_c;
    TextureFetch_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureFetch_Texture2D_texture.type.modifiers = TextureFetch_Texture2D_texture_modifiers;
    TextureFetch_Texture2D_texture.type.modifierValues = TextureFetch_Texture2D_texture_modifierValues;
    TextureFetch_Texture2D_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetch_Texture2D_lod.name = "lod"_c;
    TextureFetch_Texture2D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2D.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture2D.name = TextureFetch_Texture2D_name;
    TextureFetch_Texture2D.backendIndex = 2313;
    TextureFetch_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture2D.parameters = TextureFetch_Texture2D_args;
    Symbol::Resolved(&TextureFetch_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureFetch_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetch_Texture2D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2D)->signature = "textureFetch(uniform *texture2D,i32x2,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetch_Texture2D)->name = "textureFetch(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2D)->nameWithVarNames = "textureFetch(texture : uniform *texture2D, coordinate : i32x2, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture2D, Int32x2, UInt32, UInt32
    TextureFetchSample_Texture2D_texture.name = "texture"_c;
    TextureFetchSample_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureFetchSample_Texture2D_texture.type.modifiers = TextureFetchSample_Texture2D_texture_modifiers;
    TextureFetchSample_Texture2D_texture.type.modifierValues = TextureFetchSample_Texture2D_texture_modifierValues;
    TextureFetchSample_Texture2D_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetchSample_Texture2D_lod.name = "lod"_c;
    TextureFetchSample_Texture2D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2D_sample.name = "sample"_c;
    TextureFetchSample_Texture2D_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2D.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture2D.name = TextureFetchSample_Texture2D_name;
    TextureFetchSample_Texture2D.backendIndex = 2314;
    TextureFetchSample_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture2D.parameters = TextureFetchSample_Texture2D_args;
    Symbol::Resolved(&TextureFetchSample_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureFetchSample_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetchSample_Texture2D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2D_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2D)->signature = "textureFetchSample(uniform *texture2D,i32x2,u32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2D)->name = "textureFetchSample(uniform *texture2D,i32x2,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2D)->nameWithVarNames = "textureFetchSample(texture : uniform *texture2D, coordinate : i32x2, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture3D, Int32x3, UInt32
    TextureFetch_Texture3D_texture.name = "texture"_c;
    TextureFetch_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureFetch_Texture3D_texture.type.modifiers = TextureFetch_Texture3D_texture_modifiers;
    TextureFetch_Texture3D_texture.type.modifierValues = TextureFetch_Texture3D_texture_modifierValues;
    TextureFetch_Texture3D_coordinate.name = "coordinate"_c;
    TextureFetch_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetch_Texture3D_lod.name = "lod"_c;
    TextureFetch_Texture3D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture3D.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture3D.name = TextureFetch_Texture3D_name;
    TextureFetch_Texture3D.backendIndex = 2315;
    TextureFetch_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture3D.parameters = TextureFetch_Texture3D_args;
    Symbol::Resolved(&TextureFetch_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureFetch_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetch_Texture3D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture3D)->signature = "textureFetch(uniform *texture3D,i32x3,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetch_Texture3D)->name = "textureFetch(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture3D)->nameWithVarNames = "textureFetch(texture : uniform *texture3D, coordinate : i32x3, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture3D, Int32x3, UInt32, UInt32
    TextureFetchSample_Texture3D_texture.name = "texture"_c;
    TextureFetchSample_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureFetchSample_Texture3D_texture.type.modifiers = TextureFetchSample_Texture3D_texture_modifiers;
    TextureFetchSample_Texture3D_texture.type.modifierValues = TextureFetchSample_Texture3D_texture_modifierValues;
    TextureFetchSample_Texture3D_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetchSample_Texture3D_lod.name = "lod"_c;
    TextureFetchSample_Texture3D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture3D_sample.name = "sample"_c;
    TextureFetchSample_Texture3D_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture3D.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture3D.name = TextureFetchSample_Texture3D_name;
    TextureFetchSample_Texture3D.backendIndex = 2316;
    TextureFetchSample_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture3D.parameters = TextureFetchSample_Texture3D_args;
    Symbol::Resolved(&TextureFetchSample_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureFetchSample_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetchSample_Texture3D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture3D_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture3D)->signature = "textureFetchSample(uniform *texture3D,i32x3,u32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetchSample_Texture3D)->name = "textureFetchSample(uniform *texture3D,i32x3,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture3D)->nameWithVarNames = "textureFetchSample(texture : uniform *texture3D, coordinate : i32x3, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture1DArray, Int32x2, UInt32
    TextureFetch_Texture1DArray_texture.name = "texture"_c;
    TextureFetch_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureFetch_Texture1DArray_texture.type.modifiers = TextureFetch_Texture1DArray_texture_modifiers;
    TextureFetch_Texture1DArray_texture.type.modifierValues = TextureFetch_Texture1DArray_texture_modifierValues;
    TextureFetch_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureFetch_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetch_Texture1DArray_lod.name = "lod"_c;
    TextureFetch_Texture1DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture1DArray.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture1DArray.name = TextureFetch_Texture1DArray_name;
    TextureFetch_Texture1DArray.backendIndex = 2317;
    TextureFetch_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture1DArray.parameters = TextureFetch_Texture1DArray_args;
    Symbol::Resolved(&TextureFetch_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureFetch_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetch_Texture1DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture1DArray)->signature = "textureFetch(uniform *texture1DArray,i32x2,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetch_Texture1DArray)->name = "textureFetch(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture1DArray)->nameWithVarNames = "textureFetch(texture : uniform *texture1DArray, coordinate : i32x2, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture1DArray, Int32x2, UInt32, UInt32
    TextureFetchSample_Texture1DArray_texture.name = "texture"_c;
    TextureFetchSample_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureFetchSample_Texture1DArray_texture.type.modifiers = TextureFetchSample_Texture1DArray_texture_modifiers;
    TextureFetchSample_Texture1DArray_texture.type.modifierValues = TextureFetchSample_Texture1DArray_texture_modifierValues;
    TextureFetchSample_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetchSample_Texture1DArray_lod.name = "lod"_c;
    TextureFetchSample_Texture1DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1DArray_sample.name = "sample"_c;
    TextureFetchSample_Texture1DArray_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1DArray.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture1DArray.name = TextureFetchSample_Texture1DArray_name;
    TextureFetchSample_Texture1DArray.backendIndex = 2318;
    TextureFetchSample_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture1DArray.parameters = TextureFetchSample_Texture1DArray_args;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray)->signature = "textureFetchSample(uniform *texture1DArray,i32x2,u32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray)->name = "textureFetchSample(uniform *texture1DArray,i32x2,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray)->nameWithVarNames = "textureFetchSample(texture : uniform *texture1DArray, coordinate : i32x2, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture2DArray, Int32x3, UInt32
    TextureFetch_Texture2DArray_texture.name = "texture"_c;
    TextureFetch_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureFetch_Texture2DArray_texture.type.modifiers = TextureFetch_Texture2DArray_texture_modifiers;
    TextureFetch_Texture2DArray_texture.type.modifierValues = TextureFetch_Texture2DArray_texture_modifierValues;
    TextureFetch_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetch_Texture2DArray_lod.name = "lod"_c;
    TextureFetch_Texture2DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2DArray.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture2DArray.name = TextureFetch_Texture2DArray_name;
    TextureFetch_Texture2DArray.backendIndex = 2319;
    TextureFetch_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture2DArray.parameters = TextureFetch_Texture2DArray_args;
    Symbol::Resolved(&TextureFetch_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureFetch_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetch_Texture2DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2DArray)->signature = "textureFetch(uniform *texture2DArray,i32x3,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetch_Texture2DArray)->name = "textureFetch(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DArray)->nameWithVarNames = "textureFetch(texture : uniform *texture2DArray, coordinate : i32x3, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture2DArray, Int32x3, UInt32, UInt32
    TextureFetchSample_Texture2DArray_texture.name = "texture"_c;
    TextureFetchSample_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureFetchSample_Texture2DArray_texture.type.modifiers = TextureFetchSample_Texture2DArray_texture_modifiers;
    TextureFetchSample_Texture2DArray_texture.type.modifierValues = TextureFetchSample_Texture2DArray_texture_modifierValues;
    TextureFetchSample_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetchSample_Texture2DArray_lod.name = "lod"_c;
    TextureFetchSample_Texture2DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DArray_sample.name = "sample"_c;
    TextureFetchSample_Texture2DArray_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DArray.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture2DArray.name = TextureFetchSample_Texture2DArray_name;
    TextureFetchSample_Texture2DArray.backendIndex = 2320;
    TextureFetchSample_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture2DArray.parameters = TextureFetchSample_Texture2DArray_args;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray)->signature = "textureFetchSample(uniform *texture2DArray,i32x3,u32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray)->name = "textureFetchSample(uniform *texture2DArray,i32x3,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray)->nameWithVarNames = "textureFetchSample(texture : uniform *texture2DArray, coordinate : i32x3, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture2DMS, Int32x2, UInt32
    TextureFetch_Texture2DMS_texture.name = "texture"_c;
    TextureFetch_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureFetch_Texture2DMS_texture.type.modifiers = TextureFetch_Texture2DMS_texture_modifiers;
    TextureFetch_Texture2DMS_texture.type.modifierValues = TextureFetch_Texture2DMS_texture_modifierValues;
    TextureFetch_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetch_Texture2DMS_lod.name = "lod"_c;
    TextureFetch_Texture2DMS_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2DMS.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture2DMS.name = TextureFetch_Texture2DMS_name;
    TextureFetch_Texture2DMS.backendIndex = 2321;
    TextureFetch_Texture2DMS.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture2DMS.parameters = TextureFetch_Texture2DMS_args;
    Symbol::Resolved(&TextureFetch_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureFetch_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetch_Texture2DMS_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2DMS)->signature = "textureFetch(uniform *texture2DMS,i32x2,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMS)->name = "textureFetch(uniform *texture2DMS,i32x2,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMS)->nameWithVarNames = "textureFetch(texture : uniform *texture2DMS, coordinate : i32x2, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMS)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture2DMS, Int32x2, UInt32, UInt32
    TextureFetchSample_Texture2DMS_texture.name = "texture"_c;
    TextureFetchSample_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureFetchSample_Texture2DMS_texture.type.modifiers = TextureFetchSample_Texture2DMS_texture_modifiers;
    TextureFetchSample_Texture2DMS_texture.type.modifierValues = TextureFetchSample_Texture2DMS_texture_modifierValues;
    TextureFetchSample_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetchSample_Texture2DMS_lod.name = "lod"_c;
    TextureFetchSample_Texture2DMS_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMS_sample.name = "sample"_c;
    TextureFetchSample_Texture2DMS_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMS.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture2DMS.name = TextureFetchSample_Texture2DMS_name;
    TextureFetchSample_Texture2DMS.backendIndex = 2322;
    TextureFetchSample_Texture2DMS.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture2DMS.parameters = TextureFetchSample_Texture2DMS_args;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS)->signature = "textureFetchSample(uniform *texture2DMS,i32x2,u32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS)->name = "textureFetchSample(uniform *texture2DMS,i32x2,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS)->nameWithVarNames = "textureFetchSample(texture : uniform *texture2DMS, coordinate : i32x2, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture2DMSArray, Int32x3, UInt32
    TextureFetch_Texture2DMSArray_texture.name = "texture"_c;
    TextureFetch_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureFetch_Texture2DMSArray_texture.type.modifiers = TextureFetch_Texture2DMSArray_texture_modifiers;
    TextureFetch_Texture2DMSArray_texture.type.modifierValues = TextureFetch_Texture2DMSArray_texture_modifierValues;
    TextureFetch_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetch_Texture2DMSArray_lod.name = "lod"_c;
    TextureFetch_Texture2DMSArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2DMSArray.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture2DMSArray.name = TextureFetch_Texture2DMSArray_name;
    TextureFetch_Texture2DMSArray.backendIndex = 2323;
    TextureFetch_Texture2DMSArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture2DMSArray.parameters = TextureFetch_Texture2DMSArray_args;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray)->signature = "textureFetch(uniform *texture2DMSArray,i32x3,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray)->name = "textureFetch(uniform *texture2DMSArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray)->nameWithVarNames = "textureFetch(texture : uniform *texture2DMSArray, coordinate : i32x3, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture2DMSArray, Int32x3, UInt32, UInt32
    TextureFetchSample_Texture2DMSArray_texture.name = "texture"_c;
    TextureFetchSample_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureFetchSample_Texture2DMSArray_texture.type.modifiers = TextureFetchSample_Texture2DMSArray_texture_modifiers;
    TextureFetchSample_Texture2DMSArray_texture.type.modifierValues = TextureFetchSample_Texture2DMSArray_texture_modifierValues;
    TextureFetchSample_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetchSample_Texture2DMSArray_lod.name = "lod"_c;
    TextureFetchSample_Texture2DMSArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMSArray_sample.name = "sample"_c;
    TextureFetchSample_Texture2DMSArray_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMSArray.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture2DMSArray.name = TextureFetchSample_Texture2DMSArray_name;
    TextureFetchSample_Texture2DMSArray.backendIndex = 2324;
    TextureFetchSample_Texture2DMSArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture2DMSArray.parameters = TextureFetchSample_Texture2DMSArray_args;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray)->signature = "textureFetchSample(uniform *texture2DMSArray,i32x3,u32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray)->name = "textureFetchSample(uniform *texture2DMSArray,i32x3,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray)->nameWithVarNames = "textureFetchSample(texture : uniform *texture2DMSArray, coordinate : i32x3, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with Texture2D, Sampler, Int32x2, Int32
    TextureGather_Texture2D_texture.name = "texture"_c;
    TextureGather_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGather_Texture2D_texture.type.modifiers = TextureGather_Texture2D_texture_modifiers;
    TextureGather_Texture2D_texture.type.modifierValues = TextureGather_Texture2D_texture_modifierValues;
    TextureGather_Texture2D_sampler.name = "sampler"_c;
    TextureGather_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_Texture2D_sampler.type.modifiers = TextureGather_Texture2D_sampler_modifiers;
    TextureGather_Texture2D_sampler.type.modifierValues = TextureGather_Texture2D_sampler_modifierValues;
    TextureGather_Texture2D_coordinate.name = "coordinate"_c;
    TextureGather_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureGather_Texture2D_component.name = "component"_c;
    TextureGather_Texture2D_component.type = Type::FullType{ Int32Type.name };
    TextureGather_Texture2D.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    TextureGather_Texture2D.name = TextureGather_Texture2D_name;
    TextureGather_Texture2D.backendIndex = 2325;
    TextureGather_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureGather_Texture2D.parameters = TextureGather_Texture2D_args;
    Symbol::Resolved(&TextureGather_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGather_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureGather_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_Texture2D)->signature = "textureGather(uniform *texture2D,uniform *sampler,i32x2,i32) f32x4"_c;
    Symbol::Resolved(&TextureGather_Texture2D)->name = "textureGather(uniform *texture2D,uniform *sampler,i32x2,i32)"_c;
    Symbol::Resolved(&TextureGather_Texture2D)->nameWithVarNames = "textureGather(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : i32x2, component : i32)"_c;
    Symbol::Resolved(&TextureGather_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with SampledTexture2D, Int32x2, Int32
    SampledTextureGather_Texture2D_texture.name = "texture"_c;
    SampledTextureGather_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureGather_Texture2D_texture.type.modifiers = SampledTextureGather_Texture2D_texture_modifiers;
    SampledTextureGather_Texture2D_texture.type.modifierValues = SampledTextureGather_Texture2D_texture_modifierValues;
    SampledTextureGather_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureGather_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    SampledTextureGather_Texture2D_component.name = "component"_c;
    SampledTextureGather_Texture2D_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_Texture2D.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    SampledTextureGather_Texture2D.name = SampledTextureGather_Texture2D_name;
    SampledTextureGather_Texture2D.backendIndex = 2326;
    SampledTextureGather_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGather_Texture2D.parameters = SampledTextureGather_Texture2D_args;
    Symbol::Resolved(&SampledTextureGather_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureGather_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SampledTextureGather_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_Texture2D)->signature = "textureGather(uniform *textureSampled2D,i32x2,i32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2D)->name = "textureGather(uniform *textureSampled2D,i32x2,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2D)->nameWithVarNames = "textureGather(texture : uniform *textureSampled2D, coordinate : i32x2, component : i32)"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with Texture2D, Sampler, Int32x2, Int32, UInt32
    TextureGatherOffset_Texture2D_texture.name = "texture"_c;
    TextureGatherOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGatherOffset_Texture2D_texture.type.modifiers = TextureGatherOffset_Texture2D_texture_modifiers;
    TextureGatherOffset_Texture2D_texture.type.modifierValues = TextureGatherOffset_Texture2D_texture_modifierValues;
    TextureGatherOffset_Texture2D_sampler.name = "sampler"_c;
    TextureGatherOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_Texture2D_sampler.type.modifiers = TextureGatherOffset_Texture2D_sampler_modifiers;
    TextureGatherOffset_Texture2D_sampler.type.modifierValues = TextureGatherOffset_Texture2D_sampler_modifierValues;
    TextureGatherOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureGatherOffset_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureGatherOffset_Texture2D_component.name = "component"_c;
    TextureGatherOffset_Texture2D_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_Texture2D_offset.name = "offset"_c;
    TextureGatherOffset_Texture2D_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_Texture2D.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    TextureGatherOffset_Texture2D.name = TextureGatherOffset_Texture2D_name;
    TextureGatherOffset_Texture2D.backendIndex = 2327;
    TextureGatherOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureGatherOffset_Texture2D.parameters = TextureGatherOffset_Texture2D_args;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2D)->signature = "textureGatherOffset(uniform *texture2D,uniform *sampler,i32x2,i32,u32) f32x4"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2D)->name = "textureGatherOffset(uniform *texture2D,uniform *sampler,i32x2,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2D)->nameWithVarNames = "textureGatherOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : i32x2, component : i32, offset : u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with SampledTexture2D, Int32x2, Int32, UInt32
    SampledTextureGatherOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureGatherOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureGatherOffset_Texture2D_texture.type.modifiers = SampledTextureGatherOffset_Texture2D_texture_modifiers;
    SampledTextureGatherOffset_Texture2D_texture.type.modifierValues = SampledTextureGatherOffset_Texture2D_texture_modifierValues;
    SampledTextureGatherOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    SampledTextureGatherOffset_Texture2D_component.name = "component"_c;
    SampledTextureGatherOffset_Texture2D_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureGatherOffset_Texture2D_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_Texture2D.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    SampledTextureGatherOffset_Texture2D.name = SampledTextureGatherOffset_Texture2D_name;
    SampledTextureGatherOffset_Texture2D.backendIndex = 2328;
    SampledTextureGatherOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGatherOffset_Texture2D.parameters = SampledTextureGatherOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D)->signature = "textureGatherOffset(uniform *textureSampled2D,i32x2,i32,u32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D)->name = "textureGatherOffset(uniform *textureSampled2D,i32x2,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureSampled2D, coordinate : i32x2, component : i32, offset : u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with TextureCube, Sampler, Int32x3, Int32
    TextureGather_TextureCube_texture.name = "texture"_c;
    TextureGather_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGather_TextureCube_texture.type.modifiers = TextureGather_TextureCube_texture_modifiers;
    TextureGather_TextureCube_texture.type.modifierValues = TextureGather_TextureCube_texture_modifierValues;
    TextureGather_TextureCube_sampler.name = "sampler"_c;
    TextureGather_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_TextureCube_sampler.type.modifiers = TextureGather_TextureCube_sampler_modifiers;
    TextureGather_TextureCube_sampler.type.modifierValues = TextureGather_TextureCube_sampler_modifierValues;
    TextureGather_TextureCube_coordinate.name = "coordinate"_c;
    TextureGather_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGather_TextureCube_component.name = "component"_c;
    TextureGather_TextureCube_component.type = Type::FullType{ Int32Type.name };
    TextureGather_TextureCube.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    TextureGather_TextureCube.name = TextureGather_TextureCube_name;
    TextureGather_TextureCube.backendIndex = 2329;
    TextureGather_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureGather_TextureCube.parameters = TextureGather_TextureCube_args;
    Symbol::Resolved(&TextureGather_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGather_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGather_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_TextureCube)->signature = "textureGather(uniform *textureCube,uniform *sampler,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&TextureGather_TextureCube)->name = "textureGather(uniform *textureCube,uniform *sampler,i32x3,i32)"_c;
    Symbol::Resolved(&TextureGather_TextureCube)->nameWithVarNames = "textureGather(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : i32x3, component : i32)"_c;
    Symbol::Resolved(&TextureGather_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with SampledTextureCube, Int32x3, Int32
    SampledTextureGather_TextureCube_texture.name = "texture"_c;
    SampledTextureGather_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureGather_TextureCube_texture.type.modifiers = SampledTextureGather_TextureCube_texture_modifiers;
    SampledTextureGather_TextureCube_texture.type.modifierValues = SampledTextureGather_TextureCube_texture_modifierValues;
    SampledTextureGather_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureGather_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGather_TextureCube_component.name = "component"_c;
    SampledTextureGather_TextureCube_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_TextureCube.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    SampledTextureGather_TextureCube.name = SampledTextureGather_TextureCube_name;
    SampledTextureGather_TextureCube.backendIndex = 2330;
    SampledTextureGather_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGather_TextureCube.parameters = SampledTextureGather_TextureCube_args;
    Symbol::Resolved(&SampledTextureGather_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureGather_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGather_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_TextureCube)->signature = "textureGather(uniform *textureSampledCube,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCube)->name = "textureGather(uniform *textureSampledCube,i32x3,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCube)->nameWithVarNames = "textureGather(texture : uniform *textureSampledCube, coordinate : i32x3, component : i32)"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with TextureCube, Sampler, Int32x3, Int32, UInt32
    TextureGatherOffset_TextureCube_texture.name = "texture"_c;
    TextureGatherOffset_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGatherOffset_TextureCube_texture.type.modifiers = TextureGatherOffset_TextureCube_texture_modifiers;
    TextureGatherOffset_TextureCube_texture.type.modifierValues = TextureGatherOffset_TextureCube_texture_modifierValues;
    TextureGatherOffset_TextureCube_sampler.name = "sampler"_c;
    TextureGatherOffset_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_TextureCube_sampler.type.modifiers = TextureGatherOffset_TextureCube_sampler_modifiers;
    TextureGatherOffset_TextureCube_sampler.type.modifierValues = TextureGatherOffset_TextureCube_sampler_modifierValues;
    TextureGatherOffset_TextureCube_coordinate.name = "coordinate"_c;
    TextureGatherOffset_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGatherOffset_TextureCube_component.name = "component"_c;
    TextureGatherOffset_TextureCube_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_TextureCube_offset.name = "offset"_c;
    TextureGatherOffset_TextureCube_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_TextureCube.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    TextureGatherOffset_TextureCube.name = TextureGatherOffset_TextureCube_name;
    TextureGatherOffset_TextureCube.backendIndex = 2331;
    TextureGatherOffset_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureGatherOffset_TextureCube.parameters = TextureGatherOffset_TextureCube_args;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCube)->signature = "textureGatherOffset(uniform *textureCube,uniform *sampler,i32x3,i32,u32) f32x4"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCube)->name = "textureGatherOffset(uniform *textureCube,uniform *sampler,i32x3,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCube)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : i32x3, component : i32, offset : u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with SampledTextureCube, Int32x3, Int32, UInt32
    SampledTextureGatherOffset_TextureCube_texture.name = "texture"_c;
    SampledTextureGatherOffset_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureGatherOffset_TextureCube_texture.type.modifiers = SampledTextureGatherOffset_TextureCube_texture_modifiers;
    SampledTextureGatherOffset_TextureCube_texture.type.modifierValues = SampledTextureGatherOffset_TextureCube_texture_modifierValues;
    SampledTextureGatherOffset_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGatherOffset_TextureCube_component.name = "component"_c;
    SampledTextureGatherOffset_TextureCube_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_TextureCube_offset.name = "offset"_c;
    SampledTextureGatherOffset_TextureCube_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_TextureCube.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    SampledTextureGatherOffset_TextureCube.name = SampledTextureGatherOffset_TextureCube_name;
    SampledTextureGatherOffset_TextureCube.backendIndex = 2332;
    SampledTextureGatherOffset_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGatherOffset_TextureCube.parameters = SampledTextureGatherOffset_TextureCube_args;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube)->signature = "textureGatherOffset(uniform *textureSampledCube,i32x3,i32,u32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube)->name = "textureGatherOffset(uniform *textureSampledCube,i32x3,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureSampledCube, coordinate : i32x3, component : i32, offset : u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with Texture2DArray, Sampler, Int32x3, Int32
    TextureGather_Texture2DArray_texture.name = "texture"_c;
    TextureGather_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGather_Texture2DArray_texture.type.modifiers = TextureGather_Texture2DArray_texture_modifiers;
    TextureGather_Texture2DArray_texture.type.modifierValues = TextureGather_Texture2DArray_texture_modifierValues;
    TextureGather_Texture2DArray_sampler.name = "sampler"_c;
    TextureGather_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_Texture2DArray_sampler.type.modifiers = TextureGather_Texture2DArray_sampler_modifiers;
    TextureGather_Texture2DArray_sampler.type.modifierValues = TextureGather_Texture2DArray_sampler_modifierValues;
    TextureGather_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureGather_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGather_Texture2DArray_component.name = "component"_c;
    TextureGather_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    TextureGather_Texture2DArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    TextureGather_Texture2DArray.name = TextureGather_Texture2DArray_name;
    TextureGather_Texture2DArray.backendIndex = 2333;
    TextureGather_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureGather_Texture2DArray.parameters = TextureGather_Texture2DArray_args;
    Symbol::Resolved(&TextureGather_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGather_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGather_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_Texture2DArray)->signature = "textureGather(uniform *texture2DArray,uniform *sampler,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&TextureGather_Texture2DArray)->name = "textureGather(uniform *texture2DArray,uniform *sampler,i32x3,i32)"_c;
    Symbol::Resolved(&TextureGather_Texture2DArray)->nameWithVarNames = "textureGather(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : i32x3, component : i32)"_c;
    Symbol::Resolved(&TextureGather_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with SampledTexture2DArray, Int32x3, Int32
    SampledTextureGather_Texture2DArray_texture.name = "texture"_c;
    SampledTextureGather_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureGather_Texture2DArray_texture.type.modifiers = SampledTextureGather_Texture2DArray_texture_modifiers;
    SampledTextureGather_Texture2DArray_texture.type.modifierValues = SampledTextureGather_Texture2DArray_texture_modifierValues;
    SampledTextureGather_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureGather_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGather_Texture2DArray_component.name = "component"_c;
    SampledTextureGather_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_Texture2DArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    SampledTextureGather_Texture2DArray.name = SampledTextureGather_Texture2DArray_name;
    SampledTextureGather_Texture2DArray.backendIndex = 2334;
    SampledTextureGather_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGather_Texture2DArray.parameters = SampledTextureGather_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray)->signature = "textureGather(uniform *textureSampled2DArray,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray)->name = "textureGather(uniform *textureSampled2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray)->nameWithVarNames = "textureGather(texture : uniform *textureSampled2DArray, coordinate : i32x3, component : i32)"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with Texture2DArray, Sampler, Int32x3, Int32, UInt32
    TextureGatherOffset_Texture2DArray_texture.name = "texture"_c;
    TextureGatherOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGatherOffset_Texture2DArray_texture.type.modifiers = TextureGatherOffset_Texture2DArray_texture_modifiers;
    TextureGatherOffset_Texture2DArray_texture.type.modifierValues = TextureGatherOffset_Texture2DArray_texture_modifierValues;
    TextureGatherOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureGatherOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_Texture2DArray_sampler.type.modifiers = TextureGatherOffset_Texture2DArray_sampler_modifiers;
    TextureGatherOffset_Texture2DArray_sampler.type.modifierValues = TextureGatherOffset_Texture2DArray_sampler_modifierValues;
    TextureGatherOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureGatherOffset_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGatherOffset_Texture2DArray_component.name = "component"_c;
    TextureGatherOffset_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_Texture2DArray_offset.name = "offset"_c;
    TextureGatherOffset_Texture2DArray_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_Texture2DArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    TextureGatherOffset_Texture2DArray.name = TextureGatherOffset_Texture2DArray_name;
    TextureGatherOffset_Texture2DArray.backendIndex = 2335;
    TextureGatherOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureGatherOffset_Texture2DArray.parameters = TextureGatherOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray)->signature = "textureGatherOffset(uniform *texture2DArray,uniform *sampler,i32x3,i32,u32) f32x4"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray)->name = "textureGatherOffset(uniform *texture2DArray,uniform *sampler,i32x3,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray)->nameWithVarNames = "textureGatherOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : i32x3, component : i32, offset : u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with SampledTexture2DArray, Int32x3, Int32, UInt32
    SampledTextureGatherOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureGatherOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureGatherOffset_Texture2DArray_texture.type.modifiers = SampledTextureGatherOffset_Texture2DArray_texture_modifiers;
    SampledTextureGatherOffset_Texture2DArray_texture.type.modifierValues = SampledTextureGatherOffset_Texture2DArray_texture_modifierValues;
    SampledTextureGatherOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGatherOffset_Texture2DArray_component.name = "component"_c;
    SampledTextureGatherOffset_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureGatherOffset_Texture2DArray_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_Texture2DArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    SampledTextureGatherOffset_Texture2DArray.name = SampledTextureGatherOffset_Texture2DArray_name;
    SampledTextureGatherOffset_Texture2DArray.backendIndex = 2336;
    SampledTextureGatherOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGatherOffset_Texture2DArray.parameters = SampledTextureGatherOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray)->signature = "textureGatherOffset(uniform *textureSampled2DArray,i32x3,i32,u32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray)->name = "textureGatherOffset(uniform *textureSampled2DArray,i32x3,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureSampled2DArray, coordinate : i32x3, component : i32, offset : u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with TextureCubeArray, Sampler, Int32x4, Int32
    TextureGather_TextureCubeArray_texture.name = "texture"_c;
    TextureGather_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGather_TextureCubeArray_texture.type.modifiers = TextureGather_TextureCubeArray_texture_modifiers;
    TextureGather_TextureCubeArray_texture.type.modifierValues = TextureGather_TextureCubeArray_texture_modifierValues;
    TextureGather_TextureCubeArray_sampler.name = "sampler"_c;
    TextureGather_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_TextureCubeArray_sampler.type.modifiers = TextureGather_TextureCubeArray_sampler_modifiers;
    TextureGather_TextureCubeArray_sampler.type.modifierValues = TextureGather_TextureCubeArray_sampler_modifierValues;
    TextureGather_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureGather_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureGather_TextureCubeArray_component.name = "component"_c;
    TextureGather_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    TextureGather_TextureCubeArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    TextureGather_TextureCubeArray.name = TextureGather_TextureCubeArray_name;
    TextureGather_TextureCubeArray.backendIndex = 2337;
    TextureGather_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureGather_TextureCubeArray.parameters = TextureGather_TextureCubeArray_args;
    Symbol::Resolved(&TextureGather_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGather_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureGather_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_TextureCubeArray)->signature = "textureGather(uniform *textureCubeArray,uniform *sampler,i32x4,i32) f32x4"_c;
    Symbol::Resolved(&TextureGather_TextureCubeArray)->name = "textureGather(uniform *textureCubeArray,uniform *sampler,i32x4,i32)"_c;
    Symbol::Resolved(&TextureGather_TextureCubeArray)->nameWithVarNames = "textureGather(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : i32x4, component : i32)"_c;
    Symbol::Resolved(&TextureGather_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with SampledTextureCubeArray, Int32x4, Int32
    SampledTextureGather_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureGather_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureGather_TextureCubeArray_texture.type.modifiers = SampledTextureGather_TextureCubeArray_texture_modifiers;
    SampledTextureGather_TextureCubeArray_texture.type.modifierValues = SampledTextureGather_TextureCubeArray_texture_modifierValues;
    SampledTextureGather_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureGather_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    SampledTextureGather_TextureCubeArray_component.name = "component"_c;
    SampledTextureGather_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_TextureCubeArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    SampledTextureGather_TextureCubeArray.name = SampledTextureGather_TextureCubeArray_name;
    SampledTextureGather_TextureCubeArray.backendIndex = 2338;
    SampledTextureGather_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGather_TextureCubeArray.parameters = SampledTextureGather_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray)->signature = "textureGather(uniform *textureSampledCubeArray,i32x4,i32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray)->name = "textureGather(uniform *textureSampledCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray)->nameWithVarNames = "textureGather(texture : uniform *textureSampledCubeArray, coordinate : i32x4, component : i32)"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with TextureCubeArray, Sampler, Int32x4, Int32, UInt32
    TextureGatherOffset_TextureCubeArray_texture.name = "texture"_c;
    TextureGatherOffset_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGatherOffset_TextureCubeArray_texture.type.modifiers = TextureGatherOffset_TextureCubeArray_texture_modifiers;
    TextureGatherOffset_TextureCubeArray_texture.type.modifierValues = TextureGatherOffset_TextureCubeArray_texture_modifierValues;
    TextureGatherOffset_TextureCubeArray_sampler.name = "sampler"_c;
    TextureGatherOffset_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_TextureCubeArray_sampler.type.modifiers = TextureGatherOffset_TextureCubeArray_sampler_modifiers;
    TextureGatherOffset_TextureCubeArray_sampler.type.modifierValues = TextureGatherOffset_TextureCubeArray_sampler_modifierValues;
    TextureGatherOffset_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureGatherOffset_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureGatherOffset_TextureCubeArray_component.name = "component"_c;
    TextureGatherOffset_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_TextureCubeArray_offset.name = "offset"_c;
    TextureGatherOffset_TextureCubeArray_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_TextureCubeArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    TextureGatherOffset_TextureCubeArray.name = TextureGatherOffset_TextureCubeArray_name;
    TextureGatherOffset_TextureCubeArray.backendIndex = 2339;
    TextureGatherOffset_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureGatherOffset_TextureCubeArray.parameters = TextureGatherOffset_TextureCubeArray_args;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray)->signature = "textureGatherOffset(uniform *textureCubeArray,uniform *sampler,i32x4,i32,u32) f32x4"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray)->name = "textureGatherOffset(uniform *textureCubeArray,uniform *sampler,i32x4,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : i32x4, component : i32, offset : u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with SampledTextureCubeArray, Int32x4, Int32, UInt32
    SampledTextureGatherOffset_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureGatherOffset_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureGatherOffset_TextureCubeArray_texture.type.modifiers = SampledTextureGatherOffset_TextureCubeArray_texture_modifiers;
    SampledTextureGatherOffset_TextureCubeArray_texture.type.modifierValues = SampledTextureGatherOffset_TextureCubeArray_texture_modifierValues;
    SampledTextureGatherOffset_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    SampledTextureGatherOffset_TextureCubeArray_component.name = "component"_c;
    SampledTextureGatherOffset_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_TextureCubeArray_offset.name = "offset"_c;
    SampledTextureGatherOffset_TextureCubeArray_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_TextureCubeArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    SampledTextureGatherOffset_TextureCubeArray.name = SampledTextureGatherOffset_TextureCubeArray_name;
    SampledTextureGatherOffset_TextureCubeArray.backendIndex = 2340;
    SampledTextureGatherOffset_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGatherOffset_TextureCubeArray.parameters = SampledTextureGatherOffset_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray)->signature = "textureGatherOffset(uniform *textureSampledCubeArray,i32x4,i32,u32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray)->name = "textureGatherOffset(uniform *textureSampledCubeArray,i32x4,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureSampledCubeArray, coordinate : i32x4, component : i32, offset : u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// texturePixelCacheLoad with PixelCache
    TexturePixelCacheLoad_PixelCache_texture.name = "texture"_c;
    TexturePixelCacheLoad_PixelCache_texture.type = Type::FullType{ PixelCacheType.name };
    TexturePixelCacheLoad_PixelCache_texture.type.modifiers = TexturePixelCacheLoad_PixelCache_texture_modifiers;
    TexturePixelCacheLoad_PixelCache_texture.type.modifierValues = TexturePixelCacheLoad_PixelCache_texture_modifierValues;
    TexturePixelCacheLoad_PixelCache.documentation = "Load a pixel value from a previous thread"_c;
    TexturePixelCacheLoad_PixelCache.name = TexturePixelCacheLoad_PixelCache_name;
    TexturePixelCacheLoad_PixelCache.backendIndex = 2341;
    TexturePixelCacheLoad_PixelCache.returnType = Type::FullType { PixelCacheType.name };
    TexturePixelCacheLoad_PixelCache.parameters = TexturePixelCacheLoad_PixelCache_args;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache_texture)->typeSymbol = &PixelCacheType;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache)->signature = "texturePixelCacheLoad(uniform *pixelCache) pixelCache"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache)->name = "texturePixelCacheLoad(uniform *pixelCache)"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache)->nameWithVarNames = "texturePixelCacheLoad(texture : uniform *pixelCache)"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache)->returnTypeSymbol = &PixelCacheType;

    /// texturePixelCacheLoad with PixelCacheMS, UInt32
    TexturePixelCacheLoad_PixelCacheMS_texture.name = "texture"_c;
    TexturePixelCacheLoad_PixelCacheMS_texture.type = Type::FullType{ PixelCacheMSType.name };
    TexturePixelCacheLoad_PixelCacheMS_texture.type.modifiers = TexturePixelCacheLoad_PixelCacheMS_texture_modifiers;
    TexturePixelCacheLoad_PixelCacheMS_texture.type.modifierValues = TexturePixelCacheLoad_PixelCacheMS_texture_modifierValues;
    TexturePixelCacheLoad_PixelCacheMS_sample.name = "sample"_c;
    TexturePixelCacheLoad_PixelCacheMS_sample.type = Type::FullType{ UInt32Type.name };
    TexturePixelCacheLoad_PixelCacheMS.documentation = "Load a pixel value from a previous thread"_c;
    TexturePixelCacheLoad_PixelCacheMS.name = TexturePixelCacheLoad_PixelCacheMS_name;
    TexturePixelCacheLoad_PixelCacheMS.backendIndex = 2342;
    TexturePixelCacheLoad_PixelCacheMS.returnType = Type::FullType { PixelCacheMSType.name };
    TexturePixelCacheLoad_PixelCacheMS.parameters = TexturePixelCacheLoad_PixelCacheMS_args;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS_texture)->typeSymbol = &PixelCacheMSType;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS)->signature = "texturePixelCacheLoad(uniform *pixelCacheMS,u32) pixelCacheMS"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS)->name = "texturePixelCacheLoad(uniform *pixelCacheMS,u32)"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS)->nameWithVarNames = "texturePixelCacheLoad(texture : uniform *pixelCacheMS, sample : u32)"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS)->returnTypeSymbol = &PixelCacheMSType;

    /// textureSample with Texture1D, Sampler, Float32
    TextureSample_Texture1D_texture.name = "texture"_c;
    TextureSample_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSample_Texture1D_texture.type.modifiers = TextureSample_Texture1D_texture_modifiers;
    TextureSample_Texture1D_texture.type.modifierValues = TextureSample_Texture1D_texture_modifierValues;
    TextureSample_Texture1D_sampler.name = "sampler"_c;
    TextureSample_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture1D_sampler.type.modifiers = TextureSample_Texture1D_sampler_modifiers;
    TextureSample_Texture1D_sampler.type.modifierValues = TextureSample_Texture1D_sampler_modifierValues;
    TextureSample_Texture1D_coordinate.name = "coordinate"_c;
    TextureSample_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSample_Texture1D.documentation = "Sample a texture at coordinate"_c;
    TextureSample_Texture1D.name = TextureSample_Texture1D_name;
    TextureSample_Texture1D.backendIndex = 2343;
    TextureSample_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture1D.parameters = TextureSample_Texture1D_args;
    Symbol::Resolved(&TextureSample_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSample_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSample_Texture1D)->signature = "textureSample(uniform *texture1D,uniform *sampler,f32) f32x4"_c;
    Symbol::Resolved(&TextureSample_Texture1D)->name = "textureSample(uniform *texture1D,uniform *sampler,f32)"_c;
    Symbol::Resolved(&TextureSample_Texture1D)->nameWithVarNames = "textureSample(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32)"_c;
    Symbol::Resolved(&TextureSample_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTexture1D, Float32
    SampledTextureSample_Texture1D_texture.name = "texture"_c;
    SampledTextureSample_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSample_Texture1D_texture.type.modifiers = SampledTextureSample_Texture1D_texture_modifiers;
    SampledTextureSample_Texture1D_texture.type.modifierValues = SampledTextureSample_Texture1D_texture_modifierValues;
    SampledTextureSample_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSample_Texture1D.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_Texture1D.name = SampledTextureSample_Texture1D_name;
    SampledTextureSample_Texture1D.backendIndex = 2344;
    SampledTextureSample_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture1D.parameters = SampledTextureSample_Texture1D_args;
    Symbol::Resolved(&SampledTextureSample_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSample_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSample_Texture1D)->signature = "textureSample(uniform *textureSampled1D,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1D)->name = "textureSample(uniform *textureSampled1D,f32)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1D)->nameWithVarNames = "textureSample(texture : uniform *textureSampled1D, coordinate : f32)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1D)->returnTypeSymbol = &Float32x4Type;

}
} // namespace GPULang
