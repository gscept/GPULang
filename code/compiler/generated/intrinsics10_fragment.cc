//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// textureLoad with Texture1D, Int32
Variable TextureLoad_Texture1D_texture;
inline constexpr std::array TextureLoad_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture1D_coordinate;
Function TextureLoad_Texture1D;
inline constexpr std::array TextureLoad_Texture1D_args = { &TextureLoad_Texture1D_texture, &TextureLoad_Texture1D_coordinate };

/// textureLoadMip with Texture1D, Int32, Int32
Variable TextureLoadMip_Texture1D_texture;
inline constexpr std::array TextureLoadMip_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture1D_coordinate;
Variable TextureLoadMip_Texture1D_mip;
Function TextureLoadMip_Texture1D;
inline constexpr std::array TextureLoadMip_Texture1D_args = { &TextureLoadMip_Texture1D_texture, &TextureLoadMip_Texture1D_coordinate, &TextureLoadMip_Texture1D_mip };

/// textureStore with Texture1D, Int32, Float32x4
Variable TextureStore_Texture1D_texture;
inline constexpr std::array TextureStore_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture1D_coordinate;
Variable TextureStore_Texture1D_value;
Function TextureStore_Texture1D;
inline constexpr std::array TextureStore_Texture1D_args = { &TextureStore_Texture1D_texture, &TextureStore_Texture1D_coordinate, &TextureStore_Texture1D_value };

/// textureStoreMip with Texture1D, Int32, Int32, Float32x4
Variable TextureStoreMip_Texture1D_texture;
inline constexpr std::array TextureStoreMip_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture1D_coordinate;
Variable TextureStoreMip_Texture1D_mip;
Variable TextureStoreMip_Texture1D_value;
Function TextureStoreMip_Texture1D;
inline constexpr std::array TextureStoreMip_Texture1D_args = { &TextureStoreMip_Texture1D_texture, &TextureStoreMip_Texture1D_coordinate, &TextureStoreMip_Texture1D_mip, &TextureStoreMip_Texture1D_value };

/// textureLoad with Texture2D, Int32x2
Variable TextureLoad_Texture2D_texture;
inline constexpr std::array TextureLoad_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture2D_coordinate;
Function TextureLoad_Texture2D;
inline constexpr std::array TextureLoad_Texture2D_args = { &TextureLoad_Texture2D_texture, &TextureLoad_Texture2D_coordinate };

/// textureLoadMip with Texture2D, Int32x2, Int32
Variable TextureLoadMip_Texture2D_texture;
inline constexpr std::array TextureLoadMip_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture2D_coordinate;
Variable TextureLoadMip_Texture2D_mip;
Function TextureLoadMip_Texture2D;
inline constexpr std::array TextureLoadMip_Texture2D_args = { &TextureLoadMip_Texture2D_texture, &TextureLoadMip_Texture2D_coordinate, &TextureLoadMip_Texture2D_mip };

/// textureStore with Texture2D, Int32x2, Float32x4
Variable TextureStore_Texture2D_texture;
inline constexpr std::array TextureStore_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture2D_coordinate;
Variable TextureStore_Texture2D_value;
Function TextureStore_Texture2D;
inline constexpr std::array TextureStore_Texture2D_args = { &TextureStore_Texture2D_texture, &TextureStore_Texture2D_coordinate, &TextureStore_Texture2D_value };

/// textureStoreMip with Texture2D, Int32x2, Int32, Float32x4
Variable TextureStoreMip_Texture2D_texture;
inline constexpr std::array TextureStoreMip_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture2D_coordinate;
Variable TextureStoreMip_Texture2D_mip;
Variable TextureStoreMip_Texture2D_value;
Function TextureStoreMip_Texture2D;
inline constexpr std::array TextureStoreMip_Texture2D_args = { &TextureStoreMip_Texture2D_texture, &TextureStoreMip_Texture2D_coordinate, &TextureStoreMip_Texture2D_mip, &TextureStoreMip_Texture2D_value };

/// textureLoad with Texture3D, Int32x3
Variable TextureLoad_Texture3D_texture;
inline constexpr std::array TextureLoad_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture3D_coordinate;
Function TextureLoad_Texture3D;
inline constexpr std::array TextureLoad_Texture3D_args = { &TextureLoad_Texture3D_texture, &TextureLoad_Texture3D_coordinate };

/// textureLoadMip with Texture3D, Int32x3, Int32
Variable TextureLoadMip_Texture3D_texture;
inline constexpr std::array TextureLoadMip_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture3D_coordinate;
Variable TextureLoadMip_Texture3D_mip;
Function TextureLoadMip_Texture3D;
inline constexpr std::array TextureLoadMip_Texture3D_args = { &TextureLoadMip_Texture3D_texture, &TextureLoadMip_Texture3D_coordinate, &TextureLoadMip_Texture3D_mip };

/// textureStore with Texture3D, Int32x3, Float32x4
Variable TextureStore_Texture3D_texture;
inline constexpr std::array TextureStore_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture3D_coordinate;
Variable TextureStore_Texture3D_value;
Function TextureStore_Texture3D;
inline constexpr std::array TextureStore_Texture3D_args = { &TextureStore_Texture3D_texture, &TextureStore_Texture3D_coordinate, &TextureStore_Texture3D_value };

/// textureStoreMip with Texture3D, Int32x3, Int32, Float32x4
Variable TextureStoreMip_Texture3D_texture;
inline constexpr std::array TextureStoreMip_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture3D_coordinate;
Variable TextureStoreMip_Texture3D_mip;
Variable TextureStoreMip_Texture3D_value;
Function TextureStoreMip_Texture3D;
inline constexpr std::array TextureStoreMip_Texture3D_args = { &TextureStoreMip_Texture3D_texture, &TextureStoreMip_Texture3D_coordinate, &TextureStoreMip_Texture3D_mip, &TextureStoreMip_Texture3D_value };

/// textureLoad with TextureCube, Int32x3
Variable TextureLoad_TextureCube_texture;
inline constexpr std::array TextureLoad_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_TextureCube_coordinate;
Function TextureLoad_TextureCube;
inline constexpr std::array TextureLoad_TextureCube_args = { &TextureLoad_TextureCube_texture, &TextureLoad_TextureCube_coordinate };

/// textureLoadMip with TextureCube, Int32x3, Int32
Variable TextureLoadMip_TextureCube_texture;
inline constexpr std::array TextureLoadMip_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_TextureCube_coordinate;
Variable TextureLoadMip_TextureCube_mip;
Function TextureLoadMip_TextureCube;
inline constexpr std::array TextureLoadMip_TextureCube_args = { &TextureLoadMip_TextureCube_texture, &TextureLoadMip_TextureCube_coordinate, &TextureLoadMip_TextureCube_mip };

/// textureStore with TextureCube, Int32x3, Float32x4
Variable TextureStore_TextureCube_texture;
inline constexpr std::array TextureStore_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_TextureCube_coordinate;
Variable TextureStore_TextureCube_value;
Function TextureStore_TextureCube;
inline constexpr std::array TextureStore_TextureCube_args = { &TextureStore_TextureCube_texture, &TextureStore_TextureCube_coordinate, &TextureStore_TextureCube_value };

/// textureStoreMip with TextureCube, Int32x3, Int32, Float32x4
Variable TextureStoreMip_TextureCube_texture;
inline constexpr std::array TextureStoreMip_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_TextureCube_coordinate;
Variable TextureStoreMip_TextureCube_mip;
Variable TextureStoreMip_TextureCube_value;
Function TextureStoreMip_TextureCube;
inline constexpr std::array TextureStoreMip_TextureCube_args = { &TextureStoreMip_TextureCube_texture, &TextureStoreMip_TextureCube_coordinate, &TextureStoreMip_TextureCube_mip, &TextureStoreMip_TextureCube_value };

/// textureLoad with Texture1DArray, Int32x2
Variable TextureLoad_Texture1DArray_texture;
inline constexpr std::array TextureLoad_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture1DArray_coordinate;
Function TextureLoad_Texture1DArray;
inline constexpr std::array TextureLoad_Texture1DArray_args = { &TextureLoad_Texture1DArray_texture, &TextureLoad_Texture1DArray_coordinate };

/// textureLoadMip with Texture1DArray, Int32x2, Int32
Variable TextureLoadMip_Texture1DArray_texture;
inline constexpr std::array TextureLoadMip_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture1DArray_coordinate;
Variable TextureLoadMip_Texture1DArray_mip;
Function TextureLoadMip_Texture1DArray;
inline constexpr std::array TextureLoadMip_Texture1DArray_args = { &TextureLoadMip_Texture1DArray_texture, &TextureLoadMip_Texture1DArray_coordinate, &TextureLoadMip_Texture1DArray_mip };

/// textureStore with Texture1DArray, Int32x2, Float32x4
Variable TextureStore_Texture1DArray_texture;
inline constexpr std::array TextureStore_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture1DArray_coordinate;
Variable TextureStore_Texture1DArray_value;
Function TextureStore_Texture1DArray;
inline constexpr std::array TextureStore_Texture1DArray_args = { &TextureStore_Texture1DArray_texture, &TextureStore_Texture1DArray_coordinate, &TextureStore_Texture1DArray_value };

/// textureStoreMip with Texture1DArray, Int32x2, Int32, Float32x4
Variable TextureStoreMip_Texture1DArray_texture;
inline constexpr std::array TextureStoreMip_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture1DArray_coordinate;
Variable TextureStoreMip_Texture1DArray_mip;
Variable TextureStoreMip_Texture1DArray_value;
Function TextureStoreMip_Texture1DArray;
inline constexpr std::array TextureStoreMip_Texture1DArray_args = { &TextureStoreMip_Texture1DArray_texture, &TextureStoreMip_Texture1DArray_coordinate, &TextureStoreMip_Texture1DArray_mip, &TextureStoreMip_Texture1DArray_value };

/// textureLoad with Texture2DArray, Int32x3
Variable TextureLoad_Texture2DArray_texture;
inline constexpr std::array TextureLoad_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture2DArray_coordinate;
Function TextureLoad_Texture2DArray;
inline constexpr std::array TextureLoad_Texture2DArray_args = { &TextureLoad_Texture2DArray_texture, &TextureLoad_Texture2DArray_coordinate };

/// textureLoadMip with Texture2DArray, Int32x3, Int32
Variable TextureLoadMip_Texture2DArray_texture;
inline constexpr std::array TextureLoadMip_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture2DArray_coordinate;
Variable TextureLoadMip_Texture2DArray_mip;
Function TextureLoadMip_Texture2DArray;
inline constexpr std::array TextureLoadMip_Texture2DArray_args = { &TextureLoadMip_Texture2DArray_texture, &TextureLoadMip_Texture2DArray_coordinate, &TextureLoadMip_Texture2DArray_mip };

/// textureStore with Texture2DArray, Int32x3, Float32x4
Variable TextureStore_Texture2DArray_texture;
inline constexpr std::array TextureStore_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture2DArray_coordinate;
Variable TextureStore_Texture2DArray_value;
Function TextureStore_Texture2DArray;
inline constexpr std::array TextureStore_Texture2DArray_args = { &TextureStore_Texture2DArray_texture, &TextureStore_Texture2DArray_coordinate, &TextureStore_Texture2DArray_value };

/// textureStoreMip with Texture2DArray, Int32x3, Int32, Float32x4
Variable TextureStoreMip_Texture2DArray_texture;
inline constexpr std::array TextureStoreMip_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture2DArray_coordinate;
Variable TextureStoreMip_Texture2DArray_mip;
Variable TextureStoreMip_Texture2DArray_value;
Function TextureStoreMip_Texture2DArray;
inline constexpr std::array TextureStoreMip_Texture2DArray_args = { &TextureStoreMip_Texture2DArray_texture, &TextureStoreMip_Texture2DArray_coordinate, &TextureStoreMip_Texture2DArray_mip, &TextureStoreMip_Texture2DArray_value };

/// textureLoad with TextureCubeArray, Int32x4
Variable TextureLoad_TextureCubeArray_texture;
inline constexpr std::array TextureLoad_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_TextureCubeArray_coordinate;
Function TextureLoad_TextureCubeArray;
inline constexpr std::array TextureLoad_TextureCubeArray_args = { &TextureLoad_TextureCubeArray_texture, &TextureLoad_TextureCubeArray_coordinate };

/// textureLoadMip with TextureCubeArray, Int32x4, Int32
Variable TextureLoadMip_TextureCubeArray_texture;
inline constexpr std::array TextureLoadMip_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_TextureCubeArray_coordinate;
Variable TextureLoadMip_TextureCubeArray_mip;
Function TextureLoadMip_TextureCubeArray;
inline constexpr std::array TextureLoadMip_TextureCubeArray_args = { &TextureLoadMip_TextureCubeArray_texture, &TextureLoadMip_TextureCubeArray_coordinate, &TextureLoadMip_TextureCubeArray_mip };

/// textureStore with TextureCubeArray, Int32x4, Float32x4
Variable TextureStore_TextureCubeArray_texture;
inline constexpr std::array TextureStore_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_TextureCubeArray_coordinate;
Variable TextureStore_TextureCubeArray_value;
Function TextureStore_TextureCubeArray;
inline constexpr std::array TextureStore_TextureCubeArray_args = { &TextureStore_TextureCubeArray_texture, &TextureStore_TextureCubeArray_coordinate, &TextureStore_TextureCubeArray_value };

/// textureStoreMip with TextureCubeArray, Int32x4, Int32, Float32x4
Variable TextureStoreMip_TextureCubeArray_texture;
inline constexpr std::array TextureStoreMip_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_TextureCubeArray_coordinate;
Variable TextureStoreMip_TextureCubeArray_mip;
Variable TextureStoreMip_TextureCubeArray_value;
Function TextureStoreMip_TextureCubeArray;
inline constexpr std::array TextureStoreMip_TextureCubeArray_args = { &TextureStoreMip_TextureCubeArray_texture, &TextureStoreMip_TextureCubeArray_coordinate, &TextureStoreMip_TextureCubeArray_mip, &TextureStoreMip_TextureCubeArray_value };

/// textureLoad with Texture2DMS, Int32x2
Variable TextureLoad_Texture2DMS_texture;
inline constexpr std::array TextureLoad_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture2DMS_coordinate;
Function TextureLoad_Texture2DMS;
inline constexpr std::array TextureLoad_Texture2DMS_args = { &TextureLoad_Texture2DMS_texture, &TextureLoad_Texture2DMS_coordinate };

/// textureLoadMip with Texture2DMS, Int32x2, Int32
Variable TextureLoadMip_Texture2DMS_texture;
inline constexpr std::array TextureLoadMip_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture2DMS_coordinate;
Variable TextureLoadMip_Texture2DMS_mip;
Function TextureLoadMip_Texture2DMS;
inline constexpr std::array TextureLoadMip_Texture2DMS_args = { &TextureLoadMip_Texture2DMS_texture, &TextureLoadMip_Texture2DMS_coordinate, &TextureLoadMip_Texture2DMS_mip };

/// textureStore with Texture2DMS, Int32x2, Float32x4
Variable TextureStore_Texture2DMS_texture;
inline constexpr std::array TextureStore_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture2DMS_coordinate;
Variable TextureStore_Texture2DMS_value;
Function TextureStore_Texture2DMS;
inline constexpr std::array TextureStore_Texture2DMS_args = { &TextureStore_Texture2DMS_texture, &TextureStore_Texture2DMS_coordinate, &TextureStore_Texture2DMS_value };

/// textureStoreMip with Texture2DMS, Int32x2, Int32, Float32x4
Variable TextureStoreMip_Texture2DMS_texture;
inline constexpr std::array TextureStoreMip_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture2DMS_coordinate;
Variable TextureStoreMip_Texture2DMS_mip;
Variable TextureStoreMip_Texture2DMS_value;
Function TextureStoreMip_Texture2DMS;
inline constexpr std::array TextureStoreMip_Texture2DMS_args = { &TextureStoreMip_Texture2DMS_texture, &TextureStoreMip_Texture2DMS_coordinate, &TextureStoreMip_Texture2DMS_mip, &TextureStoreMip_Texture2DMS_value };

/// textureLoad with Texture2DMSArray, Int32x3
Variable TextureLoad_Texture2DMSArray_texture;
inline constexpr std::array TextureLoad_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture2DMSArray_coordinate;
Function TextureLoad_Texture2DMSArray;
inline constexpr std::array TextureLoad_Texture2DMSArray_args = { &TextureLoad_Texture2DMSArray_texture, &TextureLoad_Texture2DMSArray_coordinate };

/// textureLoadMip with Texture2DMSArray, Int32x3, Int32
Variable TextureLoadMip_Texture2DMSArray_texture;
inline constexpr std::array TextureLoadMip_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture2DMSArray_coordinate;
Variable TextureLoadMip_Texture2DMSArray_mip;
Function TextureLoadMip_Texture2DMSArray;
inline constexpr std::array TextureLoadMip_Texture2DMSArray_args = { &TextureLoadMip_Texture2DMSArray_texture, &TextureLoadMip_Texture2DMSArray_coordinate, &TextureLoadMip_Texture2DMSArray_mip };

/// textureStore with Texture2DMSArray, Int32x3, Float32x4
Variable TextureStore_Texture2DMSArray_texture;
inline constexpr std::array TextureStore_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture2DMSArray_coordinate;
Variable TextureStore_Texture2DMSArray_value;
Function TextureStore_Texture2DMSArray;
inline constexpr std::array TextureStore_Texture2DMSArray_args = { &TextureStore_Texture2DMSArray_texture, &TextureStore_Texture2DMSArray_coordinate, &TextureStore_Texture2DMSArray_value };

/// textureStoreMip with Texture2DMSArray, Int32x3, Int32, Float32x4
Variable TextureStoreMip_Texture2DMSArray_texture;
inline constexpr std::array TextureStoreMip_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture2DMSArray_coordinate;
Variable TextureStoreMip_Texture2DMSArray_mip;
Variable TextureStoreMip_Texture2DMSArray_value;
Function TextureStoreMip_Texture2DMSArray;
inline constexpr std::array TextureStoreMip_Texture2DMSArray_args = { &TextureStoreMip_Texture2DMSArray_texture, &TextureStoreMip_Texture2DMSArray_coordinate, &TextureStoreMip_Texture2DMSArray_mip, &TextureStoreMip_Texture2DMSArray_value };

/// textureFetch with Texture1D, Int32, UInt32
Variable TextureFetch_Texture1D_texture;
inline constexpr std::array TextureFetch_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture1D_coordinate;
Variable TextureFetch_Texture1D_lod;
Function TextureFetch_Texture1D;
inline constexpr std::array TextureFetch_Texture1D_args = { &TextureFetch_Texture1D_texture, &TextureFetch_Texture1D_coordinate, &TextureFetch_Texture1D_lod };

/// textureFetchSample with Texture1D, Int32, UInt32, UInt32
Variable TextureFetchSample_Texture1D_texture;
inline constexpr std::array TextureFetchSample_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture1D_coordinate;
Variable TextureFetchSample_Texture1D_lod;
Variable TextureFetchSample_Texture1D_sample;
Function TextureFetchSample_Texture1D;
inline constexpr std::array TextureFetchSample_Texture1D_args = { &TextureFetchSample_Texture1D_texture, &TextureFetchSample_Texture1D_coordinate, &TextureFetchSample_Texture1D_lod, &TextureFetchSample_Texture1D_sample };

/// textureFetch with Texture2D, Int32x2, UInt32
Variable TextureFetch_Texture2D_texture;
inline constexpr std::array TextureFetch_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture2D_coordinate;
Variable TextureFetch_Texture2D_lod;
Function TextureFetch_Texture2D;
inline constexpr std::array TextureFetch_Texture2D_args = { &TextureFetch_Texture2D_texture, &TextureFetch_Texture2D_coordinate, &TextureFetch_Texture2D_lod };

/// textureFetchSample with Texture2D, Int32x2, UInt32, UInt32
Variable TextureFetchSample_Texture2D_texture;
inline constexpr std::array TextureFetchSample_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture2D_coordinate;
Variable TextureFetchSample_Texture2D_lod;
Variable TextureFetchSample_Texture2D_sample;
Function TextureFetchSample_Texture2D;
inline constexpr std::array TextureFetchSample_Texture2D_args = { &TextureFetchSample_Texture2D_texture, &TextureFetchSample_Texture2D_coordinate, &TextureFetchSample_Texture2D_lod, &TextureFetchSample_Texture2D_sample };

/// textureFetch with Texture3D, Int32x3, UInt32
Variable TextureFetch_Texture3D_texture;
inline constexpr std::array TextureFetch_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture3D_coordinate;
Variable TextureFetch_Texture3D_lod;
Function TextureFetch_Texture3D;
inline constexpr std::array TextureFetch_Texture3D_args = { &TextureFetch_Texture3D_texture, &TextureFetch_Texture3D_coordinate, &TextureFetch_Texture3D_lod };

/// textureFetchSample with Texture3D, Int32x3, UInt32, UInt32
Variable TextureFetchSample_Texture3D_texture;
inline constexpr std::array TextureFetchSample_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture3D_coordinate;
Variable TextureFetchSample_Texture3D_lod;
Variable TextureFetchSample_Texture3D_sample;
Function TextureFetchSample_Texture3D;
inline constexpr std::array TextureFetchSample_Texture3D_args = { &TextureFetchSample_Texture3D_texture, &TextureFetchSample_Texture3D_coordinate, &TextureFetchSample_Texture3D_lod, &TextureFetchSample_Texture3D_sample };

/// textureFetch with Texture1DArray, Int32x2, UInt32
Variable TextureFetch_Texture1DArray_texture;
inline constexpr std::array TextureFetch_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture1DArray_coordinate;
Variable TextureFetch_Texture1DArray_lod;
Function TextureFetch_Texture1DArray;
inline constexpr std::array TextureFetch_Texture1DArray_args = { &TextureFetch_Texture1DArray_texture, &TextureFetch_Texture1DArray_coordinate, &TextureFetch_Texture1DArray_lod };

/// textureFetchSample with Texture1DArray, Int32x2, UInt32, UInt32
Variable TextureFetchSample_Texture1DArray_texture;
inline constexpr std::array TextureFetchSample_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture1DArray_coordinate;
Variable TextureFetchSample_Texture1DArray_lod;
Variable TextureFetchSample_Texture1DArray_sample;
Function TextureFetchSample_Texture1DArray;
inline constexpr std::array TextureFetchSample_Texture1DArray_args = { &TextureFetchSample_Texture1DArray_texture, &TextureFetchSample_Texture1DArray_coordinate, &TextureFetchSample_Texture1DArray_lod, &TextureFetchSample_Texture1DArray_sample };

/// textureFetch with Texture2DArray, Int32x3, UInt32
Variable TextureFetch_Texture2DArray_texture;
inline constexpr std::array TextureFetch_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture2DArray_coordinate;
Variable TextureFetch_Texture2DArray_lod;
Function TextureFetch_Texture2DArray;
inline constexpr std::array TextureFetch_Texture2DArray_args = { &TextureFetch_Texture2DArray_texture, &TextureFetch_Texture2DArray_coordinate, &TextureFetch_Texture2DArray_lod };

/// textureFetchSample with Texture2DArray, Int32x3, UInt32, UInt32
Variable TextureFetchSample_Texture2DArray_texture;
inline constexpr std::array TextureFetchSample_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture2DArray_coordinate;
Variable TextureFetchSample_Texture2DArray_lod;
Variable TextureFetchSample_Texture2DArray_sample;
Function TextureFetchSample_Texture2DArray;
inline constexpr std::array TextureFetchSample_Texture2DArray_args = { &TextureFetchSample_Texture2DArray_texture, &TextureFetchSample_Texture2DArray_coordinate, &TextureFetchSample_Texture2DArray_lod, &TextureFetchSample_Texture2DArray_sample };

/// textureFetch with Texture2DMS, Int32x2, UInt32
Variable TextureFetch_Texture2DMS_texture;
inline constexpr std::array TextureFetch_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture2DMS_coordinate;
Variable TextureFetch_Texture2DMS_lod;
Function TextureFetch_Texture2DMS;
inline constexpr std::array TextureFetch_Texture2DMS_args = { &TextureFetch_Texture2DMS_texture, &TextureFetch_Texture2DMS_coordinate, &TextureFetch_Texture2DMS_lod };

/// textureFetchSample with Texture2DMS, Int32x2, UInt32, UInt32
Variable TextureFetchSample_Texture2DMS_texture;
inline constexpr std::array TextureFetchSample_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture2DMS_coordinate;
Variable TextureFetchSample_Texture2DMS_lod;
Variable TextureFetchSample_Texture2DMS_sample;
Function TextureFetchSample_Texture2DMS;
inline constexpr std::array TextureFetchSample_Texture2DMS_args = { &TextureFetchSample_Texture2DMS_texture, &TextureFetchSample_Texture2DMS_coordinate, &TextureFetchSample_Texture2DMS_lod, &TextureFetchSample_Texture2DMS_sample };

/// textureFetch with Texture2DMSArray, Int32x3, UInt32
Variable TextureFetch_Texture2DMSArray_texture;
inline constexpr std::array TextureFetch_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture2DMSArray_coordinate;
Variable TextureFetch_Texture2DMSArray_lod;
Function TextureFetch_Texture2DMSArray;
inline constexpr std::array TextureFetch_Texture2DMSArray_args = { &TextureFetch_Texture2DMSArray_texture, &TextureFetch_Texture2DMSArray_coordinate, &TextureFetch_Texture2DMSArray_lod };

/// textureFetchSample with Texture2DMSArray, Int32x3, UInt32, UInt32
Variable TextureFetchSample_Texture2DMSArray_texture;
inline constexpr std::array TextureFetchSample_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture2DMSArray_coordinate;
Variable TextureFetchSample_Texture2DMSArray_lod;
Variable TextureFetchSample_Texture2DMSArray_sample;
Function TextureFetchSample_Texture2DMSArray;
inline constexpr std::array TextureFetchSample_Texture2DMSArray_args = { &TextureFetchSample_Texture2DMSArray_texture, &TextureFetchSample_Texture2DMSArray_coordinate, &TextureFetchSample_Texture2DMSArray_lod, &TextureFetchSample_Texture2DMSArray_sample };

/// textureGather with Texture2D, Sampler, Int32x2, Int32
Variable TextureGather_Texture2D_texture;
inline constexpr std::array TextureGather_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGather_Texture2D_sampler;
inline constexpr std::array TextureGather_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGather_Texture2D_coordinate;
Variable TextureGather_Texture2D_component;
Function TextureGather_Texture2D;
inline constexpr std::array TextureGather_Texture2D_args = { &TextureGather_Texture2D_texture, &TextureGather_Texture2D_sampler, &TextureGather_Texture2D_coordinate, &TextureGather_Texture2D_component };

/// textureGather with SampledTexture2D, Int32x2, Int32
Variable SampledTextureGather_Texture2D_texture;
inline constexpr std::array SampledTextureGather_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGather_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGather_Texture2D_coordinate;
Variable SampledTextureGather_Texture2D_component;
Function SampledTextureGather_Texture2D;
inline constexpr std::array SampledTextureGather_Texture2D_args = { &SampledTextureGather_Texture2D_texture, &SampledTextureGather_Texture2D_coordinate, &SampledTextureGather_Texture2D_component };

/// textureGatherOffset with Texture2D, Sampler, Int32x2, Int32, UInt32
Variable TextureGatherOffset_Texture2D_texture;
inline constexpr std::array TextureGatherOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_Texture2D_sampler;
inline constexpr std::array TextureGatherOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_Texture2D_coordinate;
Variable TextureGatherOffset_Texture2D_component;
Variable TextureGatherOffset_Texture2D_offset;
Function TextureGatherOffset_Texture2D;
inline constexpr std::array TextureGatherOffset_Texture2D_args = { &TextureGatherOffset_Texture2D_texture, &TextureGatherOffset_Texture2D_sampler, &TextureGatherOffset_Texture2D_coordinate, &TextureGatherOffset_Texture2D_component, &TextureGatherOffset_Texture2D_offset };

/// textureGatherOffset with SampledTexture2D, Int32x2, Int32, UInt32
Variable SampledTextureGatherOffset_Texture2D_texture;
inline constexpr std::array SampledTextureGatherOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGatherOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGatherOffset_Texture2D_coordinate;
Variable SampledTextureGatherOffset_Texture2D_component;
Variable SampledTextureGatherOffset_Texture2D_offset;
Function SampledTextureGatherOffset_Texture2D;
inline constexpr std::array SampledTextureGatherOffset_Texture2D_args = { &SampledTextureGatherOffset_Texture2D_texture, &SampledTextureGatherOffset_Texture2D_coordinate, &SampledTextureGatherOffset_Texture2D_component, &SampledTextureGatherOffset_Texture2D_offset };

/// textureGather with TextureCube, Sampler, Int32x3, Int32
Variable TextureGather_TextureCube_texture;
inline constexpr std::array TextureGather_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGather_TextureCube_sampler;
inline constexpr std::array TextureGather_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGather_TextureCube_coordinate;
Variable TextureGather_TextureCube_component;
Function TextureGather_TextureCube;
inline constexpr std::array TextureGather_TextureCube_args = { &TextureGather_TextureCube_texture, &TextureGather_TextureCube_sampler, &TextureGather_TextureCube_coordinate, &TextureGather_TextureCube_component };

/// textureGather with SampledTextureCube, Int32x3, Int32
Variable SampledTextureGather_TextureCube_texture;
inline constexpr std::array SampledTextureGather_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGather_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGather_TextureCube_coordinate;
Variable SampledTextureGather_TextureCube_component;
Function SampledTextureGather_TextureCube;
inline constexpr std::array SampledTextureGather_TextureCube_args = { &SampledTextureGather_TextureCube_texture, &SampledTextureGather_TextureCube_coordinate, &SampledTextureGather_TextureCube_component };

/// textureGatherOffset with TextureCube, Sampler, Int32x3, Int32, UInt32
Variable TextureGatherOffset_TextureCube_texture;
inline constexpr std::array TextureGatherOffset_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_TextureCube_sampler;
inline constexpr std::array TextureGatherOffset_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_TextureCube_coordinate;
Variable TextureGatherOffset_TextureCube_component;
Variable TextureGatherOffset_TextureCube_offset;
Function TextureGatherOffset_TextureCube;
inline constexpr std::array TextureGatherOffset_TextureCube_args = { &TextureGatherOffset_TextureCube_texture, &TextureGatherOffset_TextureCube_sampler, &TextureGatherOffset_TextureCube_coordinate, &TextureGatherOffset_TextureCube_component, &TextureGatherOffset_TextureCube_offset };

/// textureGatherOffset with SampledTextureCube, Int32x3, Int32, UInt32
Variable SampledTextureGatherOffset_TextureCube_texture;
inline constexpr std::array SampledTextureGatherOffset_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGatherOffset_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGatherOffset_TextureCube_coordinate;
Variable SampledTextureGatherOffset_TextureCube_component;
Variable SampledTextureGatherOffset_TextureCube_offset;
Function SampledTextureGatherOffset_TextureCube;
inline constexpr std::array SampledTextureGatherOffset_TextureCube_args = { &SampledTextureGatherOffset_TextureCube_texture, &SampledTextureGatherOffset_TextureCube_coordinate, &SampledTextureGatherOffset_TextureCube_component, &SampledTextureGatherOffset_TextureCube_offset };

/// textureGather with Texture2DArray, Sampler, Int32x3, Int32
Variable TextureGather_Texture2DArray_texture;
inline constexpr std::array TextureGather_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGather_Texture2DArray_sampler;
inline constexpr std::array TextureGather_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGather_Texture2DArray_coordinate;
Variable TextureGather_Texture2DArray_component;
Function TextureGather_Texture2DArray;
inline constexpr std::array TextureGather_Texture2DArray_args = { &TextureGather_Texture2DArray_texture, &TextureGather_Texture2DArray_sampler, &TextureGather_Texture2DArray_coordinate, &TextureGather_Texture2DArray_component };

/// textureGather with SampledTexture2DArray, Int32x3, Int32
Variable SampledTextureGather_Texture2DArray_texture;
inline constexpr std::array SampledTextureGather_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGather_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGather_Texture2DArray_coordinate;
Variable SampledTextureGather_Texture2DArray_component;
Function SampledTextureGather_Texture2DArray;
inline constexpr std::array SampledTextureGather_Texture2DArray_args = { &SampledTextureGather_Texture2DArray_texture, &SampledTextureGather_Texture2DArray_coordinate, &SampledTextureGather_Texture2DArray_component };

/// textureGatherOffset with Texture2DArray, Sampler, Int32x3, Int32, UInt32
Variable TextureGatherOffset_Texture2DArray_texture;
inline constexpr std::array TextureGatherOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_Texture2DArray_sampler;
inline constexpr std::array TextureGatherOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_Texture2DArray_coordinate;
Variable TextureGatherOffset_Texture2DArray_component;
Variable TextureGatherOffset_Texture2DArray_offset;
Function TextureGatherOffset_Texture2DArray;
inline constexpr std::array TextureGatherOffset_Texture2DArray_args = { &TextureGatherOffset_Texture2DArray_texture, &TextureGatherOffset_Texture2DArray_sampler, &TextureGatherOffset_Texture2DArray_coordinate, &TextureGatherOffset_Texture2DArray_component, &TextureGatherOffset_Texture2DArray_offset };

/// textureGatherOffset with SampledTexture2DArray, Int32x3, Int32, UInt32
Variable SampledTextureGatherOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureGatherOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGatherOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGatherOffset_Texture2DArray_coordinate;
Variable SampledTextureGatherOffset_Texture2DArray_component;
Variable SampledTextureGatherOffset_Texture2DArray_offset;
Function SampledTextureGatherOffset_Texture2DArray;
inline constexpr std::array SampledTextureGatherOffset_Texture2DArray_args = { &SampledTextureGatherOffset_Texture2DArray_texture, &SampledTextureGatherOffset_Texture2DArray_coordinate, &SampledTextureGatherOffset_Texture2DArray_component, &SampledTextureGatherOffset_Texture2DArray_offset };

/// textureGather with TextureCubeArray, Sampler, Int32x4, Int32
Variable TextureGather_TextureCubeArray_texture;
inline constexpr std::array TextureGather_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGather_TextureCubeArray_sampler;
inline constexpr std::array TextureGather_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGather_TextureCubeArray_coordinate;
Variable TextureGather_TextureCubeArray_component;
Function TextureGather_TextureCubeArray;
inline constexpr std::array TextureGather_TextureCubeArray_args = { &TextureGather_TextureCubeArray_texture, &TextureGather_TextureCubeArray_sampler, &TextureGather_TextureCubeArray_coordinate, &TextureGather_TextureCubeArray_component };

/// textureGather with SampledTextureCubeArray, Int32x4, Int32
Variable SampledTextureGather_TextureCubeArray_texture;
inline constexpr std::array SampledTextureGather_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGather_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGather_TextureCubeArray_coordinate;
Variable SampledTextureGather_TextureCubeArray_component;
Function SampledTextureGather_TextureCubeArray;
inline constexpr std::array SampledTextureGather_TextureCubeArray_args = { &SampledTextureGather_TextureCubeArray_texture, &SampledTextureGather_TextureCubeArray_coordinate, &SampledTextureGather_TextureCubeArray_component };

/// textureGatherOffset with TextureCubeArray, Sampler, Int32x4, Int32, UInt32
Variable TextureGatherOffset_TextureCubeArray_texture;
inline constexpr std::array TextureGatherOffset_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_TextureCubeArray_sampler;
inline constexpr std::array TextureGatherOffset_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_TextureCubeArray_coordinate;
Variable TextureGatherOffset_TextureCubeArray_component;
Variable TextureGatherOffset_TextureCubeArray_offset;
Function TextureGatherOffset_TextureCubeArray;
inline constexpr std::array TextureGatherOffset_TextureCubeArray_args = { &TextureGatherOffset_TextureCubeArray_texture, &TextureGatherOffset_TextureCubeArray_sampler, &TextureGatherOffset_TextureCubeArray_coordinate, &TextureGatherOffset_TextureCubeArray_component, &TextureGatherOffset_TextureCubeArray_offset };

/// textureGatherOffset with SampledTextureCubeArray, Int32x4, Int32, UInt32
Variable SampledTextureGatherOffset_TextureCubeArray_texture;
inline constexpr std::array SampledTextureGatherOffset_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGatherOffset_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGatherOffset_TextureCubeArray_coordinate;
Variable SampledTextureGatherOffset_TextureCubeArray_component;
Variable SampledTextureGatherOffset_TextureCubeArray_offset;
Function SampledTextureGatherOffset_TextureCubeArray;
inline constexpr std::array SampledTextureGatherOffset_TextureCubeArray_args = { &SampledTextureGatherOffset_TextureCubeArray_texture, &SampledTextureGatherOffset_TextureCubeArray_coordinate, &SampledTextureGatherOffset_TextureCubeArray_component, &SampledTextureGatherOffset_TextureCubeArray_offset };

/// texturePixelCacheLoad with PixelCache
Variable TexturePixelCacheLoad_PixelCache_texture;
inline constexpr std::array TexturePixelCacheLoad_PixelCache_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TexturePixelCacheLoad_PixelCache_texture_modifierValues = {(Expression*)nullptr};
Function TexturePixelCacheLoad_PixelCache;
inline constexpr std::array TexturePixelCacheLoad_PixelCache_args = { &TexturePixelCacheLoad_PixelCache_texture };

/// texturePixelCacheLoad with PixelCacheMS, UInt32
Variable TexturePixelCacheLoad_PixelCacheMS_texture;
inline constexpr std::array TexturePixelCacheLoad_PixelCacheMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TexturePixelCacheLoad_PixelCacheMS_texture_modifierValues = {(Expression*)nullptr};
Variable TexturePixelCacheLoad_PixelCacheMS_sample;
Function TexturePixelCacheLoad_PixelCacheMS;
inline constexpr std::array TexturePixelCacheLoad_PixelCacheMS_args = { &TexturePixelCacheLoad_PixelCacheMS_texture, &TexturePixelCacheLoad_PixelCacheMS_sample };

/// textureSample with Texture1D, Sampler, Float32
Variable TextureSample_Texture1D_texture;
inline constexpr std::array TextureSample_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture1D_sampler;
inline constexpr std::array TextureSample_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture1D_coordinate;
Function TextureSample_Texture1D;
inline constexpr std::array TextureSample_Texture1D_args = { &TextureSample_Texture1D_texture, &TextureSample_Texture1D_sampler, &TextureSample_Texture1D_coordinate };

/// textureSample with SampledTexture1D, Float32
Variable SampledTextureSample_Texture1D_texture;
inline constexpr std::array SampledTextureSample_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_Texture1D_coordinate;
Function SampledTextureSample_Texture1D;
inline constexpr std::array SampledTextureSample_Texture1D_args = { &SampledTextureSample_Texture1D_texture, &SampledTextureSample_Texture1D_coordinate };

/// textureSample with Texture2D, Sampler, Float32x2
Variable TextureSample_Texture2D_texture;
inline constexpr std::array TextureSample_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture2D_sampler;
inline constexpr std::array TextureSample_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture2D_coordinate;
Function TextureSample_Texture2D;
inline constexpr std::array TextureSample_Texture2D_args = { &TextureSample_Texture2D_texture, &TextureSample_Texture2D_sampler, &TextureSample_Texture2D_coordinate };

/// textureSample with SampledTexture2D, Float32x2
Variable SampledTextureSample_Texture2D_texture;
inline constexpr std::array SampledTextureSample_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_Texture2D_coordinate;
Function SampledTextureSample_Texture2D;
inline constexpr std::array SampledTextureSample_Texture2D_args = { &SampledTextureSample_Texture2D_texture, &SampledTextureSample_Texture2D_coordinate };

/// textureSample with Texture3D, Sampler, Float32x3
Variable TextureSample_Texture3D_texture;
inline constexpr std::array TextureSample_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture3D_sampler;
inline constexpr std::array TextureSample_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture3D_coordinate;
Function TextureSample_Texture3D;
inline constexpr std::array TextureSample_Texture3D_args = { &TextureSample_Texture3D_texture, &TextureSample_Texture3D_sampler, &TextureSample_Texture3D_coordinate };

/// textureSample with SampledTexture3D, Float32x3
Variable SampledTextureSample_Texture3D_texture;
inline constexpr std::array SampledTextureSample_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_Texture3D_coordinate;
Function SampledTextureSample_Texture3D;
inline constexpr std::array SampledTextureSample_Texture3D_args = { &SampledTextureSample_Texture3D_texture, &SampledTextureSample_Texture3D_coordinate };

/// textureSample with TextureCube, Sampler, Float32x3
Variable TextureSample_TextureCube_texture;
inline constexpr std::array TextureSample_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_TextureCube_sampler;
inline constexpr std::array TextureSample_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_TextureCube_coordinate;
Function TextureSample_TextureCube;
inline constexpr std::array TextureSample_TextureCube_args = { &TextureSample_TextureCube_texture, &TextureSample_TextureCube_sampler, &TextureSample_TextureCube_coordinate };

/// textureSample with SampledTextureCube, Float32x3
Variable SampledTextureSample_TextureCube_texture;
inline constexpr std::array SampledTextureSample_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_TextureCube_coordinate;
Function SampledTextureSample_TextureCube;
inline constexpr std::array SampledTextureSample_TextureCube_args = { &SampledTextureSample_TextureCube_texture, &SampledTextureSample_TextureCube_coordinate };

/// textureSample with Texture1DArray, Sampler, Float32x2
Variable TextureSample_Texture1DArray_texture;
inline constexpr std::array TextureSample_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture1DArray_sampler;
inline constexpr std::array TextureSample_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture1DArray_coordinate;
Function TextureSample_Texture1DArray;
inline constexpr std::array TextureSample_Texture1DArray_args = { &TextureSample_Texture1DArray_texture, &TextureSample_Texture1DArray_sampler, &TextureSample_Texture1DArray_coordinate };

/// textureSample with SampledTexture1DArray, Float32x2
Variable SampledTextureSample_Texture1DArray_texture;
inline constexpr std::array SampledTextureSample_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_Texture1DArray_coordinate;
Function SampledTextureSample_Texture1DArray;
inline constexpr std::array SampledTextureSample_Texture1DArray_args = { &SampledTextureSample_Texture1DArray_texture, &SampledTextureSample_Texture1DArray_coordinate };

/// textureSample with Texture2DArray, Sampler, Float32x3
Variable TextureSample_Texture2DArray_texture;
inline constexpr std::array TextureSample_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture2DArray_sampler;
inline constexpr std::array TextureSample_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture2DArray_coordinate;
Function TextureSample_Texture2DArray;
inline constexpr std::array TextureSample_Texture2DArray_args = { &TextureSample_Texture2DArray_texture, &TextureSample_Texture2DArray_sampler, &TextureSample_Texture2DArray_coordinate };

/// textureSample with SampledTexture2DArray, Float32x3
Variable SampledTextureSample_Texture2DArray_texture;
inline constexpr std::array SampledTextureSample_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_Texture2DArray_coordinate;
Function SampledTextureSample_Texture2DArray;
inline constexpr std::array SampledTextureSample_Texture2DArray_args = { &SampledTextureSample_Texture2DArray_texture, &SampledTextureSample_Texture2DArray_coordinate };

/// textureSample with TextureCubeArray, Sampler, Float32x4
Variable TextureSample_TextureCubeArray_texture;
inline constexpr std::array TextureSample_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_TextureCubeArray_sampler;
inline constexpr std::array TextureSample_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_TextureCubeArray_coordinate;
Function TextureSample_TextureCubeArray;
inline constexpr std::array TextureSample_TextureCubeArray_args = { &TextureSample_TextureCubeArray_texture, &TextureSample_TextureCubeArray_sampler, &TextureSample_TextureCubeArray_coordinate };

/// textureSample with SampledTextureCubeArray, Float32x4
Variable SampledTextureSample_TextureCubeArray_texture;
inline constexpr std::array SampledTextureSample_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_TextureCubeArray_coordinate;
Function SampledTextureSample_TextureCubeArray;
inline constexpr std::array SampledTextureSample_TextureCubeArray_args = { &SampledTextureSample_TextureCubeArray_texture, &SampledTextureSample_TextureCubeArray_coordinate };

/// textureSampleOffset with Texture1D, Sampler, Float32, Float32
Variable TextureSampleOffset_Texture1D_texture;
inline constexpr std::array TextureSampleOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture1D_coordinate;
Variable TextureSampleOffset_Texture1D_offset;
Function TextureSampleOffset_Texture1D;
inline constexpr std::array TextureSampleOffset_Texture1D_args = { &TextureSampleOffset_Texture1D_texture, &TextureSampleOffset_Texture1D_sampler, &TextureSampleOffset_Texture1D_coordinate, &TextureSampleOffset_Texture1D_offset };

/// textureSampleOffset with SampledTexture1D, Float32, Float32
Variable SampledTextureSampleOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleOffset_Texture1D_coordinate;
Variable SampledTextureSampleOffset_Texture1D_offset;
Function SampledTextureSampleOffset_Texture1D;
inline constexpr std::array SampledTextureSampleOffset_Texture1D_args = { &SampledTextureSampleOffset_Texture1D_texture, &SampledTextureSampleOffset_Texture1D_coordinate, &SampledTextureSampleOffset_Texture1D_offset };

/// textureSampleOffset with Texture2D, Sampler, Float32x2, Float32x2
Variable TextureSampleOffset_Texture2D_texture;
inline constexpr std::array TextureSampleOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture2D_coordinate;
Variable TextureSampleOffset_Texture2D_offset;
Function TextureSampleOffset_Texture2D;
inline constexpr std::array TextureSampleOffset_Texture2D_args = { &TextureSampleOffset_Texture2D_texture, &TextureSampleOffset_Texture2D_sampler, &TextureSampleOffset_Texture2D_coordinate, &TextureSampleOffset_Texture2D_offset };

/// textureSampleOffset with SampledTexture2D, Float32x2, Float32x2
Variable SampledTextureSampleOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleOffset_Texture2D_coordinate;
Variable SampledTextureSampleOffset_Texture2D_offset;
Function SampledTextureSampleOffset_Texture2D;
inline constexpr std::array SampledTextureSampleOffset_Texture2D_args = { &SampledTextureSampleOffset_Texture2D_texture, &SampledTextureSampleOffset_Texture2D_coordinate, &SampledTextureSampleOffset_Texture2D_offset };

/// textureSampleOffset with Texture3D, Sampler, Float32x3, Float32x3
Variable TextureSampleOffset_Texture3D_texture;
inline constexpr std::array TextureSampleOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture3D_coordinate;
Variable TextureSampleOffset_Texture3D_offset;
Function TextureSampleOffset_Texture3D;
inline constexpr std::array TextureSampleOffset_Texture3D_args = { &TextureSampleOffset_Texture3D_texture, &TextureSampleOffset_Texture3D_sampler, &TextureSampleOffset_Texture3D_coordinate, &TextureSampleOffset_Texture3D_offset };

/// textureSampleOffset with SampledTexture3D, Float32x3, Float32x3
Variable SampledTextureSampleOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleOffset_Texture3D_coordinate;
Variable SampledTextureSampleOffset_Texture3D_offset;
Function SampledTextureSampleOffset_Texture3D;
inline constexpr std::array SampledTextureSampleOffset_Texture3D_args = { &SampledTextureSampleOffset_Texture3D_texture, &SampledTextureSampleOffset_Texture3D_coordinate, &SampledTextureSampleOffset_Texture3D_offset };

/// textureSampleOffset with Texture1DArray, Sampler, Float32x2, Float32x2
Variable TextureSampleOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture1DArray_coordinate;
Variable TextureSampleOffset_Texture1DArray_offset;
Function TextureSampleOffset_Texture1DArray;
inline constexpr std::array TextureSampleOffset_Texture1DArray_args = { &TextureSampleOffset_Texture1DArray_texture, &TextureSampleOffset_Texture1DArray_sampler, &TextureSampleOffset_Texture1DArray_coordinate, &TextureSampleOffset_Texture1DArray_offset };

/// textureSampleOffset with SampledTexture1DArray, Float32x2, Float32x2
Variable SampledTextureSampleOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleOffset_Texture1DArray_offset;
Function SampledTextureSampleOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleOffset_Texture1DArray_args = { &SampledTextureSampleOffset_Texture1DArray_texture, &SampledTextureSampleOffset_Texture1DArray_coordinate, &SampledTextureSampleOffset_Texture1DArray_offset };

/// textureSampleOffset with Texture2DArray, Sampler, Float32x3, Float32x3
Variable TextureSampleOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture2DArray_coordinate;
Variable TextureSampleOffset_Texture2DArray_offset;
Function TextureSampleOffset_Texture2DArray;
inline constexpr std::array TextureSampleOffset_Texture2DArray_args = { &TextureSampleOffset_Texture2DArray_texture, &TextureSampleOffset_Texture2DArray_sampler, &TextureSampleOffset_Texture2DArray_coordinate, &TextureSampleOffset_Texture2DArray_offset };

/// textureSampleOffset with SampledTexture2DArray, Float32x3, Float32x3
Variable SampledTextureSampleOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleOffset_Texture2DArray_offset;
Function SampledTextureSampleOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleOffset_Texture2DArray_args = { &SampledTextureSampleOffset_Texture2DArray_texture, &SampledTextureSampleOffset_Texture2DArray_coordinate, &SampledTextureSampleOffset_Texture2DArray_offset };

/// textureSampleProj with Texture1D, Sampler, Float32, Float32
Variable TextureSampleProj_Texture1D_texture;
inline constexpr std::array TextureSampleProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture1D_sampler;
inline constexpr std::array TextureSampleProj_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture1D_coordinate;
Variable TextureSampleProj_Texture1D_proj;
Function TextureSampleProj_Texture1D;
inline constexpr std::array TextureSampleProj_Texture1D_args = { &TextureSampleProj_Texture1D_texture, &TextureSampleProj_Texture1D_sampler, &TextureSampleProj_Texture1D_coordinate, &TextureSampleProj_Texture1D_proj };

/// textureSampleProj with SampledTexture1D, Float32, Float32
Variable SampledTextureSampleProj_Texture1D_texture;
inline constexpr std::array SampledTextureSampleProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProj_Texture1D_coordinate;
Variable SampledTextureSampleProj_Texture1D_proj;
Function SampledTextureSampleProj_Texture1D;
inline constexpr std::array SampledTextureSampleProj_Texture1D_args = { &SampledTextureSampleProj_Texture1D_texture, &SampledTextureSampleProj_Texture1D_coordinate, &SampledTextureSampleProj_Texture1D_proj };

/// textureSampleProj with Texture2D, Sampler, Float32x2, Float32
Variable TextureSampleProj_Texture2D_texture;
inline constexpr std::array TextureSampleProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture2D_sampler;
inline constexpr std::array TextureSampleProj_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture2D_coordinate;
Variable TextureSampleProj_Texture2D_proj;
Function TextureSampleProj_Texture2D;
inline constexpr std::array TextureSampleProj_Texture2D_args = { &TextureSampleProj_Texture2D_texture, &TextureSampleProj_Texture2D_sampler, &TextureSampleProj_Texture2D_coordinate, &TextureSampleProj_Texture2D_proj };

/// textureSampleProj with SampledTexture2D, Float32x2, Float32
Variable SampledTextureSampleProj_Texture2D_texture;
inline constexpr std::array SampledTextureSampleProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProj_Texture2D_coordinate;
Variable SampledTextureSampleProj_Texture2D_proj;
Function SampledTextureSampleProj_Texture2D;
inline constexpr std::array SampledTextureSampleProj_Texture2D_args = { &SampledTextureSampleProj_Texture2D_texture, &SampledTextureSampleProj_Texture2D_coordinate, &SampledTextureSampleProj_Texture2D_proj };

/// textureSampleProj with Texture3D, Sampler, Float32x3, Float32
Variable TextureSampleProj_Texture3D_texture;
inline constexpr std::array TextureSampleProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture3D_sampler;
inline constexpr std::array TextureSampleProj_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture3D_coordinate;
Variable TextureSampleProj_Texture3D_proj;
Function TextureSampleProj_Texture3D;
inline constexpr std::array TextureSampleProj_Texture3D_args = { &TextureSampleProj_Texture3D_texture, &TextureSampleProj_Texture3D_sampler, &TextureSampleProj_Texture3D_coordinate, &TextureSampleProj_Texture3D_proj };

/// textureSampleProj with SampledTexture3D, Float32x3, Float32
Variable SampledTextureSampleProj_Texture3D_texture;
inline constexpr std::array SampledTextureSampleProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProj_Texture3D_coordinate;
Variable SampledTextureSampleProj_Texture3D_proj;
Function SampledTextureSampleProj_Texture3D;
inline constexpr std::array SampledTextureSampleProj_Texture3D_args = { &SampledTextureSampleProj_Texture3D_texture, &SampledTextureSampleProj_Texture3D_coordinate, &SampledTextureSampleProj_Texture3D_proj };

/// textureSampleProjOffset with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleProjOffset_Texture1D_texture;
inline constexpr std::array TextureSampleProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleProjOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture1D_coordinate;
Variable TextureSampleProjOffset_Texture1D_proj;
Variable TextureSampleProjOffset_Texture1D_offset;
Function TextureSampleProjOffset_Texture1D;
inline constexpr std::array TextureSampleProjOffset_Texture1D_args = { &TextureSampleProjOffset_Texture1D_texture, &TextureSampleProjOffset_Texture1D_sampler, &TextureSampleProjOffset_Texture1D_coordinate, &TextureSampleProjOffset_Texture1D_proj, &TextureSampleProjOffset_Texture1D_offset };

/// textureSampleProjOffset with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleProjOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjOffset_Texture1D_coordinate;
Variable SampledTextureSampleProjOffset_Texture1D_proj;
Variable SampledTextureSampleProjOffset_Texture1D_offset;
Function SampledTextureSampleProjOffset_Texture1D;
inline constexpr std::array SampledTextureSampleProjOffset_Texture1D_args = { &SampledTextureSampleProjOffset_Texture1D_texture, &SampledTextureSampleProjOffset_Texture1D_coordinate, &SampledTextureSampleProjOffset_Texture1D_proj, &SampledTextureSampleProjOffset_Texture1D_offset };

/// textureSampleProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleProjOffset_Texture2D_texture;
inline constexpr std::array TextureSampleProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleProjOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture2D_coordinate;
Variable TextureSampleProjOffset_Texture2D_proj;
Variable TextureSampleProjOffset_Texture2D_offset;
Function TextureSampleProjOffset_Texture2D;
inline constexpr std::array TextureSampleProjOffset_Texture2D_args = { &TextureSampleProjOffset_Texture2D_texture, &TextureSampleProjOffset_Texture2D_sampler, &TextureSampleProjOffset_Texture2D_coordinate, &TextureSampleProjOffset_Texture2D_proj, &TextureSampleProjOffset_Texture2D_offset };

/// textureSampleProjOffset with SampledTexture2D, Float32x2, Float32, Float32x2
Variable SampledTextureSampleProjOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjOffset_Texture2D_coordinate;
Variable SampledTextureSampleProjOffset_Texture2D_proj;
Variable SampledTextureSampleProjOffset_Texture2D_offset;
Function SampledTextureSampleProjOffset_Texture2D;
inline constexpr std::array SampledTextureSampleProjOffset_Texture2D_args = { &SampledTextureSampleProjOffset_Texture2D_texture, &SampledTextureSampleProjOffset_Texture2D_coordinate, &SampledTextureSampleProjOffset_Texture2D_proj, &SampledTextureSampleProjOffset_Texture2D_offset };

/// textureSampleProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleProjOffset_Texture3D_texture;
inline constexpr std::array TextureSampleProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleProjOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture3D_coordinate;
Variable TextureSampleProjOffset_Texture3D_proj;
Variable TextureSampleProjOffset_Texture3D_offset;
Function TextureSampleProjOffset_Texture3D;
inline constexpr std::array TextureSampleProjOffset_Texture3D_args = { &TextureSampleProjOffset_Texture3D_texture, &TextureSampleProjOffset_Texture3D_sampler, &TextureSampleProjOffset_Texture3D_coordinate, &TextureSampleProjOffset_Texture3D_proj, &TextureSampleProjOffset_Texture3D_offset };

/// textureSampleProjOffset with SampledTexture3D, Float32x3, Float32, Float32x3
Variable SampledTextureSampleProjOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjOffset_Texture3D_coordinate;
Variable SampledTextureSampleProjOffset_Texture3D_proj;
Variable SampledTextureSampleProjOffset_Texture3D_offset;
Function SampledTextureSampleProjOffset_Texture3D;
inline constexpr std::array SampledTextureSampleProjOffset_Texture3D_args = { &SampledTextureSampleProjOffset_Texture3D_texture, &SampledTextureSampleProjOffset_Texture3D_coordinate, &SampledTextureSampleProjOffset_Texture3D_proj, &SampledTextureSampleProjOffset_Texture3D_offset };

/// textureSampleCompare with Texture1D, Sampler, Float32, Float32
Variable TextureSampleCompare_Texture1D_texture;
inline constexpr std::array TextureSampleCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture1D_coordinate;
Variable TextureSampleCompare_Texture1D_compare;
Function TextureSampleCompare_Texture1D;
inline constexpr std::array TextureSampleCompare_Texture1D_args = { &TextureSampleCompare_Texture1D_texture, &TextureSampleCompare_Texture1D_sampler, &TextureSampleCompare_Texture1D_coordinate, &TextureSampleCompare_Texture1D_compare };

/// textureSampleCompare with SampledTexture1D, Float32, Float32
Variable SampledTextureSampleCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompare_Texture1D_coordinate;
Variable SampledTextureSampleCompare_Texture1D_compare;
Function SampledTextureSampleCompare_Texture1D;
inline constexpr std::array SampledTextureSampleCompare_Texture1D_args = { &SampledTextureSampleCompare_Texture1D_texture, &SampledTextureSampleCompare_Texture1D_coordinate, &SampledTextureSampleCompare_Texture1D_compare };

/// textureSampleCompare with Texture2D, Sampler, Float32x2, Float32
Variable TextureSampleCompare_Texture2D_texture;
inline constexpr std::array TextureSampleCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture2D_coordinate;
Variable TextureSampleCompare_Texture2D_compare;
Function TextureSampleCompare_Texture2D;
inline constexpr std::array TextureSampleCompare_Texture2D_args = { &TextureSampleCompare_Texture2D_texture, &TextureSampleCompare_Texture2D_sampler, &TextureSampleCompare_Texture2D_coordinate, &TextureSampleCompare_Texture2D_compare };

/// textureSampleCompare with SampledTexture2D, Float32x2, Float32
Variable SampledTextureSampleCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompare_Texture2D_coordinate;
Variable SampledTextureSampleCompare_Texture2D_compare;
Function SampledTextureSampleCompare_Texture2D;
inline constexpr std::array SampledTextureSampleCompare_Texture2D_args = { &SampledTextureSampleCompare_Texture2D_texture, &SampledTextureSampleCompare_Texture2D_coordinate, &SampledTextureSampleCompare_Texture2D_compare };

/// textureSampleCompare with Texture3D, Sampler, Float32x3, Float32
Variable TextureSampleCompare_Texture3D_texture;
inline constexpr std::array TextureSampleCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture3D_coordinate;
Variable TextureSampleCompare_Texture3D_compare;
Function TextureSampleCompare_Texture3D;
inline constexpr std::array TextureSampleCompare_Texture3D_args = { &TextureSampleCompare_Texture3D_texture, &TextureSampleCompare_Texture3D_sampler, &TextureSampleCompare_Texture3D_coordinate, &TextureSampleCompare_Texture3D_compare };

/// textureSampleCompare with SampledTexture3D, Float32x3, Float32
Variable SampledTextureSampleCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompare_Texture3D_coordinate;
Variable SampledTextureSampleCompare_Texture3D_compare;
Function SampledTextureSampleCompare_Texture3D;
inline constexpr std::array SampledTextureSampleCompare_Texture3D_args = { &SampledTextureSampleCompare_Texture3D_texture, &SampledTextureSampleCompare_Texture3D_coordinate, &SampledTextureSampleCompare_Texture3D_compare };

/// textureSampleCompare with Texture1DArray, Sampler, Float32x2, Float32
Variable TextureSampleCompare_Texture1DArray_texture;
inline constexpr std::array TextureSampleCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture1DArray_sampler;
inline constexpr std::array TextureSampleCompare_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture1DArray_coordinate;
Variable TextureSampleCompare_Texture1DArray_compare;
Function TextureSampleCompare_Texture1DArray;
inline constexpr std::array TextureSampleCompare_Texture1DArray_args = { &TextureSampleCompare_Texture1DArray_texture, &TextureSampleCompare_Texture1DArray_sampler, &TextureSampleCompare_Texture1DArray_coordinate, &TextureSampleCompare_Texture1DArray_compare };

/// textureSampleCompare with SampledTexture1DArray, Float32x2, Float32
Variable SampledTextureSampleCompare_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleCompare_Texture1DArray_compare;
Function SampledTextureSampleCompare_Texture1DArray;
inline constexpr std::array SampledTextureSampleCompare_Texture1DArray_args = { &SampledTextureSampleCompare_Texture1DArray_texture, &SampledTextureSampleCompare_Texture1DArray_coordinate, &SampledTextureSampleCompare_Texture1DArray_compare };

/// textureSampleCompare with Texture2DArray, Sampler, Float32x3, Float32
Variable TextureSampleCompare_Texture2DArray_texture;
inline constexpr std::array TextureSampleCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture2DArray_sampler;
inline constexpr std::array TextureSampleCompare_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture2DArray_coordinate;
Variable TextureSampleCompare_Texture2DArray_compare;
Function TextureSampleCompare_Texture2DArray;
inline constexpr std::array TextureSampleCompare_Texture2DArray_args = { &TextureSampleCompare_Texture2DArray_texture, &TextureSampleCompare_Texture2DArray_sampler, &TextureSampleCompare_Texture2DArray_coordinate, &TextureSampleCompare_Texture2DArray_compare };

/// textureSampleCompare with SampledTexture2DArray, Float32x3, Float32
Variable SampledTextureSampleCompare_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleCompare_Texture2DArray_compare;
Function SampledTextureSampleCompare_Texture2DArray;
inline constexpr std::array SampledTextureSampleCompare_Texture2DArray_args = { &SampledTextureSampleCompare_Texture2DArray_texture, &SampledTextureSampleCompare_Texture2DArray_coordinate, &SampledTextureSampleCompare_Texture2DArray_compare };

/// textureSampleCompareOffset with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture1D_coordinate;
Variable TextureSampleCompareOffset_Texture1D_compare;
Variable TextureSampleCompareOffset_Texture1D_offset;
Function TextureSampleCompareOffset_Texture1D;
inline constexpr std::array TextureSampleCompareOffset_Texture1D_args = { &TextureSampleCompareOffset_Texture1D_texture, &TextureSampleCompareOffset_Texture1D_sampler, &TextureSampleCompareOffset_Texture1D_coordinate, &TextureSampleCompareOffset_Texture1D_compare, &TextureSampleCompareOffset_Texture1D_offset };

/// textureSampleCompareOffset with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleCompareOffset_Texture1D_compare;
Variable SampledTextureSampleCompareOffset_Texture1D_offset;
Function SampledTextureSampleCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1D_args = { &SampledTextureSampleCompareOffset_Texture1D_texture, &SampledTextureSampleCompareOffset_Texture1D_coordinate, &SampledTextureSampleCompareOffset_Texture1D_compare, &SampledTextureSampleCompareOffset_Texture1D_offset };

/// textureSampleCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture2D_coordinate;
Variable TextureSampleCompareOffset_Texture2D_compare;
Variable TextureSampleCompareOffset_Texture2D_offset;
Function TextureSampleCompareOffset_Texture2D;
inline constexpr std::array TextureSampleCompareOffset_Texture2D_args = { &TextureSampleCompareOffset_Texture2D_texture, &TextureSampleCompareOffset_Texture2D_sampler, &TextureSampleCompareOffset_Texture2D_coordinate, &TextureSampleCompareOffset_Texture2D_compare, &TextureSampleCompareOffset_Texture2D_offset };

/// textureSampleCompareOffset with SampledTexture2D, Float32x2, Float32, Float32x2
Variable SampledTextureSampleCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleCompareOffset_Texture2D_compare;
Variable SampledTextureSampleCompareOffset_Texture2D_offset;
Function SampledTextureSampleCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2D_args = { &SampledTextureSampleCompareOffset_Texture2D_texture, &SampledTextureSampleCompareOffset_Texture2D_coordinate, &SampledTextureSampleCompareOffset_Texture2D_compare, &SampledTextureSampleCompareOffset_Texture2D_offset };

/// textureSampleCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture3D_coordinate;
Variable TextureSampleCompareOffset_Texture3D_compare;
Variable TextureSampleCompareOffset_Texture3D_offset;
Function TextureSampleCompareOffset_Texture3D;
inline constexpr std::array TextureSampleCompareOffset_Texture3D_args = { &TextureSampleCompareOffset_Texture3D_texture, &TextureSampleCompareOffset_Texture3D_sampler, &TextureSampleCompareOffset_Texture3D_coordinate, &TextureSampleCompareOffset_Texture3D_compare, &TextureSampleCompareOffset_Texture3D_offset };

/// textureSampleCompareOffset with SampledTexture3D, Float32x3, Float32, Float32x3
Variable SampledTextureSampleCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleCompareOffset_Texture3D_compare;
Variable SampledTextureSampleCompareOffset_Texture3D_offset;
Function SampledTextureSampleCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture3D_args = { &SampledTextureSampleCompareOffset_Texture3D_texture, &SampledTextureSampleCompareOffset_Texture3D_coordinate, &SampledTextureSampleCompareOffset_Texture3D_compare, &SampledTextureSampleCompareOffset_Texture3D_offset };

/// textureSampleCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleCompareOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture1DArray_coordinate;
Variable TextureSampleCompareOffset_Texture1DArray_compare;
Variable TextureSampleCompareOffset_Texture1DArray_offset;
Function TextureSampleCompareOffset_Texture1DArray;
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_args = { &TextureSampleCompareOffset_Texture1DArray_texture, &TextureSampleCompareOffset_Texture1DArray_sampler, &TextureSampleCompareOffset_Texture1DArray_coordinate, &TextureSampleCompareOffset_Texture1DArray_compare, &TextureSampleCompareOffset_Texture1DArray_offset };

/// textureSampleCompareOffset with SampledTexture1DArray, Float32x2, Float32, Float32x2
Variable SampledTextureSampleCompareOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompareOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleCompareOffset_Texture1DArray_compare;
Variable SampledTextureSampleCompareOffset_Texture1DArray_offset;
Function SampledTextureSampleCompareOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1DArray_args = { &SampledTextureSampleCompareOffset_Texture1DArray_texture, &SampledTextureSampleCompareOffset_Texture1DArray_coordinate, &SampledTextureSampleCompareOffset_Texture1DArray_compare, &SampledTextureSampleCompareOffset_Texture1DArray_offset };

/// textureSampleCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleCompareOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture2DArray_coordinate;
Variable TextureSampleCompareOffset_Texture2DArray_compare;
Variable TextureSampleCompareOffset_Texture2DArray_offset;
Function TextureSampleCompareOffset_Texture2DArray;
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_args = { &TextureSampleCompareOffset_Texture2DArray_texture, &TextureSampleCompareOffset_Texture2DArray_sampler, &TextureSampleCompareOffset_Texture2DArray_coordinate, &TextureSampleCompareOffset_Texture2DArray_compare, &TextureSampleCompareOffset_Texture2DArray_offset };

/// textureSampleCompareOffset with SampledTexture2DArray, Float32x3, Float32, Float32x3
Variable SampledTextureSampleCompareOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompareOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleCompareOffset_Texture2DArray_compare;
Variable SampledTextureSampleCompareOffset_Texture2DArray_offset;
Function SampledTextureSampleCompareOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2DArray_args = { &SampledTextureSampleCompareOffset_Texture2DArray_texture, &SampledTextureSampleCompareOffset_Texture2DArray_coordinate, &SampledTextureSampleCompareOffset_Texture2DArray_compare, &SampledTextureSampleCompareOffset_Texture2DArray_offset };

/// textureSampleProjCompare with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleProjCompare_Texture1D_texture;
inline constexpr std::array TextureSampleProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleProjCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture1D_coordinate;
Variable TextureSampleProjCompare_Texture1D_proj;
Variable TextureSampleProjCompare_Texture1D_compare;
Function TextureSampleProjCompare_Texture1D;
inline constexpr std::array TextureSampleProjCompare_Texture1D_args = { &TextureSampleProjCompare_Texture1D_texture, &TextureSampleProjCompare_Texture1D_sampler, &TextureSampleProjCompare_Texture1D_coordinate, &TextureSampleProjCompare_Texture1D_proj, &TextureSampleProjCompare_Texture1D_compare };

/// textureSampleProjCompare with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleProjCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleProjCompare_Texture1D_proj;
Variable SampledTextureSampleProjCompare_Texture1D_compare;
Function SampledTextureSampleProjCompare_Texture1D;
inline constexpr std::array SampledTextureSampleProjCompare_Texture1D_args = { &SampledTextureSampleProjCompare_Texture1D_texture, &SampledTextureSampleProjCompare_Texture1D_coordinate, &SampledTextureSampleProjCompare_Texture1D_proj, &SampledTextureSampleProjCompare_Texture1D_compare };

/// textureSampleProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleProjCompare_Texture2D_texture;
inline constexpr std::array TextureSampleProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleProjCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture2D_coordinate;
Variable TextureSampleProjCompare_Texture2D_proj;
Variable TextureSampleProjCompare_Texture2D_compare;
Function TextureSampleProjCompare_Texture2D;
inline constexpr std::array TextureSampleProjCompare_Texture2D_args = { &TextureSampleProjCompare_Texture2D_texture, &TextureSampleProjCompare_Texture2D_sampler, &TextureSampleProjCompare_Texture2D_coordinate, &TextureSampleProjCompare_Texture2D_proj, &TextureSampleProjCompare_Texture2D_compare };

/// textureSampleProjCompare with SampledTexture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleProjCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleProjCompare_Texture2D_proj;
Variable SampledTextureSampleProjCompare_Texture2D_compare;
Function SampledTextureSampleProjCompare_Texture2D;
inline constexpr std::array SampledTextureSampleProjCompare_Texture2D_args = { &SampledTextureSampleProjCompare_Texture2D_texture, &SampledTextureSampleProjCompare_Texture2D_coordinate, &SampledTextureSampleProjCompare_Texture2D_proj, &SampledTextureSampleProjCompare_Texture2D_compare };

void SetupIntrinsics10()
{
    /// textureLoad with Texture1D, Int32
    TextureLoad_Texture1D_texture.name = "texture"_c;
    TextureLoad_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureLoad_Texture1D_texture.type.modifiers = TextureLoad_Texture1D_texture_modifiers;
    TextureLoad_Texture1D_texture.type.modifierValues = TextureLoad_Texture1D_texture_modifierValues;
    TextureLoad_Texture1D_coordinate.name = "coordinate"_c;
    TextureLoad_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureLoad_Texture1D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture1D.name = TextureLoad_Texture1D_name;
    TextureLoad_Texture1D.backendIndex = 2217;
    TextureLoad_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture1D.parameters = TextureLoad_Texture1D_args;
    Symbol::Resolved(&TextureLoad_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureLoad_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoad_Texture1D)->signature = "textureLoad(uniform *mutable texture1D,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoad_Texture1D)->name = "textureLoad(uniform *mutable texture1D,i32)"_c;
    Symbol::Resolved(&TextureLoad_Texture1D)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture1D, coordinate : i32)"_c;
    Symbol::Resolved(&TextureLoad_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture1D, Int32, Int32
    TextureLoadMip_Texture1D_texture.name = "texture"_c;
    TextureLoadMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureLoadMip_Texture1D_texture.type.modifiers = TextureLoadMip_Texture1D_texture_modifiers;
    TextureLoadMip_Texture1D_texture.type.modifierValues = TextureLoadMip_Texture1D_texture_modifierValues;
    TextureLoadMip_Texture1D_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture1D_mip.name = "mip"_c;
    TextureLoadMip_Texture1D_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture1D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture1D.name = TextureLoadMip_Texture1D_name;
    TextureLoadMip_Texture1D.backendIndex = 2218;
    TextureLoadMip_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture1D.parameters = TextureLoadMip_Texture1D_args;
    Symbol::Resolved(&TextureLoadMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureLoadMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture1D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture1D)->signature = "textureLoadMip(uniform *mutable texture1D,i32,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1D)->name = "textureLoadMip(uniform *mutable texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1D)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture1D, coordinate : i32, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture1D, Int32, Float32x4
    TextureStore_Texture1D_texture.name = "texture"_c;
    TextureStore_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureStore_Texture1D_texture.type.modifiers = TextureStore_Texture1D_texture_modifiers;
    TextureStore_Texture1D_texture.type.modifierValues = TextureStore_Texture1D_texture_modifierValues;
    TextureStore_Texture1D_coordinate.name = "coordinate"_c;
    TextureStore_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureStore_Texture1D_value.name = "value"_c;
    TextureStore_Texture1D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture1D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture1D.name = TextureStore_Texture1D_name;
    TextureStore_Texture1D.backendIndex = 2219;
    TextureStore_Texture1D.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture1D.parameters = TextureStore_Texture1D_args;
    Symbol::Resolved(&TextureStore_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureStore_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStore_Texture1D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture1D)->signature = "textureStore(uniform *mutable texture1D,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_Texture1D)->name = "textureStore(uniform *mutable texture1D,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture1D)->nameWithVarNames = "textureStore(texture : uniform *mutable texture1D, coordinate : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture1D)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture1D, Int32, Int32, Float32x4
    TextureStoreMip_Texture1D_texture.name = "texture"_c;
    TextureStoreMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureStoreMip_Texture1D_texture.type.modifiers = TextureStoreMip_Texture1D_texture_modifiers;
    TextureStoreMip_Texture1D_texture.type.modifierValues = TextureStoreMip_Texture1D_texture_modifierValues;
    TextureStoreMip_Texture1D_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture1D_mip.name = "mip"_c;
    TextureStoreMip_Texture1D_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture1D_value.name = "value"_c;
    TextureStoreMip_Texture1D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture1D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture1D.name = TextureStoreMip_Texture1D_name;
    TextureStoreMip_Texture1D.backendIndex = 2220;
    TextureStoreMip_Texture1D.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture1D.parameters = TextureStoreMip_Texture1D_args;
    Symbol::Resolved(&TextureStoreMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureStoreMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture1D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture1D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture1D)->signature = "textureStoreMip(uniform *mutable texture1D,i32,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1D)->name = "textureStoreMip(uniform *mutable texture1D,i32,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1D)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture1D, coordinate : i32, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1D)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2D, Int32x2
    TextureLoad_Texture2D_texture.name = "texture"_c;
    TextureLoad_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureLoad_Texture2D_texture.type.modifiers = TextureLoad_Texture2D_texture_modifiers;
    TextureLoad_Texture2D_texture.type.modifierValues = TextureLoad_Texture2D_texture_modifierValues;
    TextureLoad_Texture2D_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoad_Texture2D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture2D.name = TextureLoad_Texture2D_name;
    TextureLoad_Texture2D.backendIndex = 2221;
    TextureLoad_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture2D.parameters = TextureLoad_Texture2D_args;
    Symbol::Resolved(&TextureLoad_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureLoad_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoad_Texture2D)->signature = "textureLoad(uniform *mutable texture2D,i32x2) f32x4"_c;
    Symbol::Resolved(&TextureLoad_Texture2D)->name = "textureLoad(uniform *mutable texture2D,i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture2D)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture2D, coordinate : i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture2D, Int32x2, Int32
    TextureLoadMip_Texture2D_texture.name = "texture"_c;
    TextureLoadMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureLoadMip_Texture2D_texture.type.modifiers = TextureLoadMip_Texture2D_texture_modifiers;
    TextureLoadMip_Texture2D_texture.type.modifierValues = TextureLoadMip_Texture2D_texture_modifierValues;
    TextureLoadMip_Texture2D_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoadMip_Texture2D_mip.name = "mip"_c;
    TextureLoadMip_Texture2D_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture2D.name = TextureLoadMip_Texture2D_name;
    TextureLoadMip_Texture2D.backendIndex = 2222;
    TextureLoadMip_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture2D.parameters = TextureLoadMip_Texture2D_args;
    Symbol::Resolved(&TextureLoadMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureLoadMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoadMip_Texture2D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2D)->signature = "textureLoadMip(uniform *mutable texture2D,i32x2,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2D)->name = "textureLoadMip(uniform *mutable texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2D)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture2D, coordinate : i32x2, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture2D, Int32x2, Float32x4
    TextureStore_Texture2D_texture.name = "texture"_c;
    TextureStore_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureStore_Texture2D_texture.type.modifiers = TextureStore_Texture2D_texture_modifiers;
    TextureStore_Texture2D_texture.type.modifierValues = TextureStore_Texture2D_texture_modifierValues;
    TextureStore_Texture2D_coordinate.name = "coordinate"_c;
    TextureStore_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStore_Texture2D_value.name = "value"_c;
    TextureStore_Texture2D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture2D.name = TextureStore_Texture2D_name;
    TextureStore_Texture2D.backendIndex = 2223;
    TextureStore_Texture2D.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2D.parameters = TextureStore_Texture2D_args;
    Symbol::Resolved(&TextureStore_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureStore_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStore_Texture2D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2D)->signature = "textureStore(uniform *mutable texture2D,i32x2,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_Texture2D)->name = "textureStore(uniform *mutable texture2D,i32x2,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2D)->nameWithVarNames = "textureStore(texture : uniform *mutable texture2D, coordinate : i32x2, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2D)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2D, Int32x2, Int32, Float32x4
    TextureStoreMip_Texture2D_texture.name = "texture"_c;
    TextureStoreMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureStoreMip_Texture2D_texture.type.modifiers = TextureStoreMip_Texture2D_texture_modifiers;
    TextureStoreMip_Texture2D_texture.type.modifierValues = TextureStoreMip_Texture2D_texture_modifierValues;
    TextureStoreMip_Texture2D_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStoreMip_Texture2D_mip.name = "mip"_c;
    TextureStoreMip_Texture2D_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2D_value.name = "value"_c;
    TextureStoreMip_Texture2D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture2D.name = TextureStoreMip_Texture2D_name;
    TextureStoreMip_Texture2D.backendIndex = 2224;
    TextureStoreMip_Texture2D.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2D.parameters = TextureStoreMip_Texture2D_args;
    Symbol::Resolved(&TextureStoreMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureStoreMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStoreMip_Texture2D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2D)->signature = "textureStoreMip(uniform *mutable texture2D,i32x2,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2D)->name = "textureStoreMip(uniform *mutable texture2D,i32x2,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2D)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture2D, coordinate : i32x2, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2D)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture3D, Int32x3
    TextureLoad_Texture3D_texture.name = "texture"_c;
    TextureLoad_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureLoad_Texture3D_texture.type.modifiers = TextureLoad_Texture3D_texture_modifiers;
    TextureLoad_Texture3D_texture.type.modifierValues = TextureLoad_Texture3D_texture_modifierValues;
    TextureLoad_Texture3D_coordinate.name = "coordinate"_c;
    TextureLoad_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_Texture3D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture3D.name = TextureLoad_Texture3D_name;
    TextureLoad_Texture3D.backendIndex = 2225;
    TextureLoad_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture3D.parameters = TextureLoad_Texture3D_args;
    Symbol::Resolved(&TextureLoad_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureLoad_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_Texture3D)->signature = "textureLoad(uniform *mutable texture3D,i32x3) f32x4"_c;
    Symbol::Resolved(&TextureLoad_Texture3D)->name = "textureLoad(uniform *mutable texture3D,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture3D)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture3D, coordinate : i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture3D, Int32x3, Int32
    TextureLoadMip_Texture3D_texture.name = "texture"_c;
    TextureLoadMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureLoadMip_Texture3D_texture.type.modifiers = TextureLoadMip_Texture3D_texture_modifiers;
    TextureLoadMip_Texture3D_texture.type.modifierValues = TextureLoadMip_Texture3D_texture_modifierValues;
    TextureLoadMip_Texture3D_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_Texture3D_mip.name = "mip"_c;
    TextureLoadMip_Texture3D_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture3D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture3D.name = TextureLoadMip_Texture3D_name;
    TextureLoadMip_Texture3D.backendIndex = 2226;
    TextureLoadMip_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture3D.parameters = TextureLoadMip_Texture3D_args;
    Symbol::Resolved(&TextureLoadMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureLoadMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_Texture3D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture3D)->signature = "textureLoadMip(uniform *mutable texture3D,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_Texture3D)->name = "textureLoadMip(uniform *mutable texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture3D)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture3D, coordinate : i32x3, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture3D, Int32x3, Float32x4
    TextureStore_Texture3D_texture.name = "texture"_c;
    TextureStore_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureStore_Texture3D_texture.type.modifiers = TextureStore_Texture3D_texture_modifiers;
    TextureStore_Texture3D_texture.type.modifierValues = TextureStore_Texture3D_texture_modifierValues;
    TextureStore_Texture3D_coordinate.name = "coordinate"_c;
    TextureStore_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_Texture3D_value.name = "value"_c;
    TextureStore_Texture3D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture3D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture3D.name = TextureStore_Texture3D_name;
    TextureStore_Texture3D.backendIndex = 2227;
    TextureStore_Texture3D.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture3D.parameters = TextureStore_Texture3D_args;
    Symbol::Resolved(&TextureStore_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureStore_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_Texture3D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture3D)->signature = "textureStore(uniform *mutable texture3D,i32x3,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_Texture3D)->name = "textureStore(uniform *mutable texture3D,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture3D)->nameWithVarNames = "textureStore(texture : uniform *mutable texture3D, coordinate : i32x3, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture3D)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture3D, Int32x3, Int32, Float32x4
    TextureStoreMip_Texture3D_texture.name = "texture"_c;
    TextureStoreMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureStoreMip_Texture3D_texture.type.modifiers = TextureStoreMip_Texture3D_texture_modifiers;
    TextureStoreMip_Texture3D_texture.type.modifierValues = TextureStoreMip_Texture3D_texture_modifierValues;
    TextureStoreMip_Texture3D_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_Texture3D_mip.name = "mip"_c;
    TextureStoreMip_Texture3D_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture3D_value.name = "value"_c;
    TextureStoreMip_Texture3D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture3D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture3D.name = TextureStoreMip_Texture3D_name;
    TextureStoreMip_Texture3D.backendIndex = 2228;
    TextureStoreMip_Texture3D.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture3D.parameters = TextureStoreMip_Texture3D_args;
    Symbol::Resolved(&TextureStoreMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureStoreMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_Texture3D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture3D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture3D)->signature = "textureStoreMip(uniform *mutable texture3D,i32x3,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_Texture3D)->name = "textureStoreMip(uniform *mutable texture3D,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture3D)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture3D, coordinate : i32x3, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture3D)->returnTypeSymbol = &VoidType;

    /// textureLoad with TextureCube, Int32x3
    TextureLoad_TextureCube_texture.name = "texture"_c;
    TextureLoad_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureLoad_TextureCube_texture.type.modifiers = TextureLoad_TextureCube_texture_modifiers;
    TextureLoad_TextureCube_texture.type.modifierValues = TextureLoad_TextureCube_texture_modifierValues;
    TextureLoad_TextureCube_coordinate.name = "coordinate"_c;
    TextureLoad_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_TextureCube.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_TextureCube.name = TextureLoad_TextureCube_name;
    TextureLoad_TextureCube.backendIndex = 2229;
    TextureLoad_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_TextureCube.parameters = TextureLoad_TextureCube_args;
    Symbol::Resolved(&TextureLoad_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureLoad_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_TextureCube)->signature = "textureLoad(uniform *mutable textureCube,i32x3) f32x4"_c;
    Symbol::Resolved(&TextureLoad_TextureCube)->name = "textureLoad(uniform *mutable textureCube,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_TextureCube)->nameWithVarNames = "textureLoad(texture : uniform *mutable textureCube, coordinate : i32x3)"_c;
    Symbol::Resolved(&TextureLoad_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with TextureCube, Int32x3, Int32
    TextureLoadMip_TextureCube_texture.name = "texture"_c;
    TextureLoadMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureLoadMip_TextureCube_texture.type.modifiers = TextureLoadMip_TextureCube_texture_modifiers;
    TextureLoadMip_TextureCube_texture.type.modifierValues = TextureLoadMip_TextureCube_texture_modifierValues;
    TextureLoadMip_TextureCube_coordinate.name = "coordinate"_c;
    TextureLoadMip_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_TextureCube_mip.name = "mip"_c;
    TextureLoadMip_TextureCube_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_TextureCube.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_TextureCube.name = TextureLoadMip_TextureCube_name;
    TextureLoadMip_TextureCube.backendIndex = 2230;
    TextureLoadMip_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_TextureCube.parameters = TextureLoadMip_TextureCube_args;
    Symbol::Resolved(&TextureLoadMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureLoadMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_TextureCube_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_TextureCube)->signature = "textureLoadMip(uniform *mutable textureCube,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCube)->name = "textureLoadMip(uniform *mutable textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCube)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable textureCube, coordinate : i32x3, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with TextureCube, Int32x3, Float32x4
    TextureStore_TextureCube_texture.name = "texture"_c;
    TextureStore_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureStore_TextureCube_texture.type.modifiers = TextureStore_TextureCube_texture_modifiers;
    TextureStore_TextureCube_texture.type.modifierValues = TextureStore_TextureCube_texture_modifierValues;
    TextureStore_TextureCube_coordinate.name = "coordinate"_c;
    TextureStore_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_TextureCube_value.name = "value"_c;
    TextureStore_TextureCube_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_TextureCube.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_TextureCube.name = TextureStore_TextureCube_name;
    TextureStore_TextureCube.backendIndex = 2231;
    TextureStore_TextureCube.returnType = Type::FullType { VoidType.name };
    TextureStore_TextureCube.parameters = TextureStore_TextureCube_args;
    Symbol::Resolved(&TextureStore_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureStore_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_TextureCube_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_TextureCube)->signature = "textureStore(uniform *mutable textureCube,i32x3,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_TextureCube)->name = "textureStore(uniform *mutable textureCube,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_TextureCube)->nameWithVarNames = "textureStore(texture : uniform *mutable textureCube, coordinate : i32x3, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_TextureCube)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with TextureCube, Int32x3, Int32, Float32x4
    TextureStoreMip_TextureCube_texture.name = "texture"_c;
    TextureStoreMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureStoreMip_TextureCube_texture.type.modifiers = TextureStoreMip_TextureCube_texture_modifiers;
    TextureStoreMip_TextureCube_texture.type.modifierValues = TextureStoreMip_TextureCube_texture_modifierValues;
    TextureStoreMip_TextureCube_coordinate.name = "coordinate"_c;
    TextureStoreMip_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_TextureCube_mip.name = "mip"_c;
    TextureStoreMip_TextureCube_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_TextureCube_value.name = "value"_c;
    TextureStoreMip_TextureCube_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_TextureCube.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_TextureCube.name = TextureStoreMip_TextureCube_name;
    TextureStoreMip_TextureCube.backendIndex = 2232;
    TextureStoreMip_TextureCube.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_TextureCube.parameters = TextureStoreMip_TextureCube_args;
    Symbol::Resolved(&TextureStoreMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureStoreMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_TextureCube_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_TextureCube_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_TextureCube)->signature = "textureStoreMip(uniform *mutable textureCube,i32x3,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCube)->name = "textureStoreMip(uniform *mutable textureCube,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCube)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable textureCube, coordinate : i32x3, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCube)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture1DArray, Int32x2
    TextureLoad_Texture1DArray_texture.name = "texture"_c;
    TextureLoad_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureLoad_Texture1DArray_texture.type.modifiers = TextureLoad_Texture1DArray_texture_modifiers;
    TextureLoad_Texture1DArray_texture.type.modifierValues = TextureLoad_Texture1DArray_texture_modifierValues;
    TextureLoad_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureLoad_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoad_Texture1DArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture1DArray.name = TextureLoad_Texture1DArray_name;
    TextureLoad_Texture1DArray.backendIndex = 2233;
    TextureLoad_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture1DArray.parameters = TextureLoad_Texture1DArray_args;
    Symbol::Resolved(&TextureLoad_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureLoad_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoad_Texture1DArray)->signature = "textureLoad(uniform *mutable texture1DArray,i32x2) f32x4"_c;
    Symbol::Resolved(&TextureLoad_Texture1DArray)->name = "textureLoad(uniform *mutable texture1DArray,i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture1DArray)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture1DArray, coordinate : i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture1DArray, Int32x2, Int32
    TextureLoadMip_Texture1DArray_texture.name = "texture"_c;
    TextureLoadMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureLoadMip_Texture1DArray_texture.type.modifiers = TextureLoadMip_Texture1DArray_texture_modifiers;
    TextureLoadMip_Texture1DArray_texture.type.modifierValues = TextureLoadMip_Texture1DArray_texture_modifierValues;
    TextureLoadMip_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoadMip_Texture1DArray_mip.name = "mip"_c;
    TextureLoadMip_Texture1DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture1DArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture1DArray.name = TextureLoadMip_Texture1DArray_name;
    TextureLoadMip_Texture1DArray.backendIndex = 2234;
    TextureLoadMip_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture1DArray.parameters = TextureLoadMip_Texture1DArray_args;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray)->signature = "textureLoadMip(uniform *mutable texture1DArray,i32x2,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray)->name = "textureLoadMip(uniform *mutable texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture1DArray, coordinate : i32x2, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture1DArray, Int32x2, Float32x4
    TextureStore_Texture1DArray_texture.name = "texture"_c;
    TextureStore_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureStore_Texture1DArray_texture.type.modifiers = TextureStore_Texture1DArray_texture_modifiers;
    TextureStore_Texture1DArray_texture.type.modifierValues = TextureStore_Texture1DArray_texture_modifierValues;
    TextureStore_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureStore_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStore_Texture1DArray_value.name = "value"_c;
    TextureStore_Texture1DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture1DArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture1DArray.name = TextureStore_Texture1DArray_name;
    TextureStore_Texture1DArray.backendIndex = 2235;
    TextureStore_Texture1DArray.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture1DArray.parameters = TextureStore_Texture1DArray_args;
    Symbol::Resolved(&TextureStore_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureStore_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStore_Texture1DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture1DArray)->signature = "textureStore(uniform *mutable texture1DArray,i32x2,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_Texture1DArray)->name = "textureStore(uniform *mutable texture1DArray,i32x2,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture1DArray)->nameWithVarNames = "textureStore(texture : uniform *mutable texture1DArray, coordinate : i32x2, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture1DArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture1DArray, Int32x2, Int32, Float32x4
    TextureStoreMip_Texture1DArray_texture.name = "texture"_c;
    TextureStoreMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureStoreMip_Texture1DArray_texture.type.modifiers = TextureStoreMip_Texture1DArray_texture_modifiers;
    TextureStoreMip_Texture1DArray_texture.type.modifierValues = TextureStoreMip_Texture1DArray_texture_modifierValues;
    TextureStoreMip_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStoreMip_Texture1DArray_mip.name = "mip"_c;
    TextureStoreMip_Texture1DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture1DArray_value.name = "value"_c;
    TextureStoreMip_Texture1DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture1DArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture1DArray.name = TextureStoreMip_Texture1DArray_name;
    TextureStoreMip_Texture1DArray.backendIndex = 2236;
    TextureStoreMip_Texture1DArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture1DArray.parameters = TextureStoreMip_Texture1DArray_args;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray)->signature = "textureStoreMip(uniform *mutable texture1DArray,i32x2,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray)->name = "textureStoreMip(uniform *mutable texture1DArray,i32x2,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture1DArray, coordinate : i32x2, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2DArray, Int32x3
    TextureLoad_Texture2DArray_texture.name = "texture"_c;
    TextureLoad_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureLoad_Texture2DArray_texture.type.modifiers = TextureLoad_Texture2DArray_texture_modifiers;
    TextureLoad_Texture2DArray_texture.type.modifierValues = TextureLoad_Texture2DArray_texture_modifierValues;
    TextureLoad_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_Texture2DArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture2DArray.name = TextureLoad_Texture2DArray_name;
    TextureLoad_Texture2DArray.backendIndex = 2237;
    TextureLoad_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture2DArray.parameters = TextureLoad_Texture2DArray_args;
    Symbol::Resolved(&TextureLoad_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureLoad_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_Texture2DArray)->signature = "textureLoad(uniform *mutable texture2DArray,i32x3) f32x4"_c;
    Symbol::Resolved(&TextureLoad_Texture2DArray)->name = "textureLoad(uniform *mutable texture2DArray,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DArray)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture2DArray, coordinate : i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture2DArray, Int32x3, Int32
    TextureLoadMip_Texture2DArray_texture.name = "texture"_c;
    TextureLoadMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureLoadMip_Texture2DArray_texture.type.modifiers = TextureLoadMip_Texture2DArray_texture_modifiers;
    TextureLoadMip_Texture2DArray_texture.type.modifierValues = TextureLoadMip_Texture2DArray_texture_modifierValues;
    TextureLoadMip_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_Texture2DArray_mip.name = "mip"_c;
    TextureLoadMip_Texture2DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2DArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture2DArray.name = TextureLoadMip_Texture2DArray_name;
    TextureLoadMip_Texture2DArray.backendIndex = 2238;
    TextureLoadMip_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture2DArray.parameters = TextureLoadMip_Texture2DArray_args;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray)->signature = "textureLoadMip(uniform *mutable texture2DArray,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray)->name = "textureLoadMip(uniform *mutable texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture2DArray, coordinate : i32x3, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture2DArray, Int32x3, Float32x4
    TextureStore_Texture2DArray_texture.name = "texture"_c;
    TextureStore_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureStore_Texture2DArray_texture.type.modifiers = TextureStore_Texture2DArray_texture_modifiers;
    TextureStore_Texture2DArray_texture.type.modifierValues = TextureStore_Texture2DArray_texture_modifierValues;
    TextureStore_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureStore_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_Texture2DArray_value.name = "value"_c;
    TextureStore_Texture2DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2DArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture2DArray.name = TextureStore_Texture2DArray_name;
    TextureStore_Texture2DArray.backendIndex = 2239;
    TextureStore_Texture2DArray.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2DArray.parameters = TextureStore_Texture2DArray_args;
    Symbol::Resolved(&TextureStore_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureStore_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_Texture2DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2DArray)->signature = "textureStore(uniform *mutable texture2DArray,i32x3,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_Texture2DArray)->name = "textureStore(uniform *mutable texture2DArray,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DArray)->nameWithVarNames = "textureStore(texture : uniform *mutable texture2DArray, coordinate : i32x3, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2DArray, Int32x3, Int32, Float32x4
    TextureStoreMip_Texture2DArray_texture.name = "texture"_c;
    TextureStoreMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureStoreMip_Texture2DArray_texture.type.modifiers = TextureStoreMip_Texture2DArray_texture_modifiers;
    TextureStoreMip_Texture2DArray_texture.type.modifierValues = TextureStoreMip_Texture2DArray_texture_modifierValues;
    TextureStoreMip_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_Texture2DArray_mip.name = "mip"_c;
    TextureStoreMip_Texture2DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2DArray_value.name = "value"_c;
    TextureStoreMip_Texture2DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2DArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture2DArray.name = TextureStoreMip_Texture2DArray_name;
    TextureStoreMip_Texture2DArray.backendIndex = 2240;
    TextureStoreMip_Texture2DArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2DArray.parameters = TextureStoreMip_Texture2DArray_args;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray)->signature = "textureStoreMip(uniform *mutable texture2DArray,i32x3,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray)->name = "textureStoreMip(uniform *mutable texture2DArray,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture2DArray, coordinate : i32x3, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray)->returnTypeSymbol = &VoidType;

    /// textureLoad with TextureCubeArray, Int32x4
    TextureLoad_TextureCubeArray_texture.name = "texture"_c;
    TextureLoad_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureLoad_TextureCubeArray_texture.type.modifiers = TextureLoad_TextureCubeArray_texture_modifiers;
    TextureLoad_TextureCubeArray_texture.type.modifierValues = TextureLoad_TextureCubeArray_texture_modifierValues;
    TextureLoad_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureLoad_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureLoad_TextureCubeArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_TextureCubeArray.name = TextureLoad_TextureCubeArray_name;
    TextureLoad_TextureCubeArray.backendIndex = 2241;
    TextureLoad_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_TextureCubeArray.parameters = TextureLoad_TextureCubeArray_args;
    Symbol::Resolved(&TextureLoad_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureLoad_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureLoad_TextureCubeArray)->signature = "textureLoad(uniform *mutable textureCubeArray,i32x4) f32x4"_c;
    Symbol::Resolved(&TextureLoad_TextureCubeArray)->name = "textureLoad(uniform *mutable textureCubeArray,i32x4)"_c;
    Symbol::Resolved(&TextureLoad_TextureCubeArray)->nameWithVarNames = "textureLoad(texture : uniform *mutable textureCubeArray, coordinate : i32x4)"_c;
    Symbol::Resolved(&TextureLoad_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with TextureCubeArray, Int32x4, Int32
    TextureLoadMip_TextureCubeArray_texture.name = "texture"_c;
    TextureLoadMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureLoadMip_TextureCubeArray_texture.type.modifiers = TextureLoadMip_TextureCubeArray_texture_modifiers;
    TextureLoadMip_TextureCubeArray_texture.type.modifierValues = TextureLoadMip_TextureCubeArray_texture_modifierValues;
    TextureLoadMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureLoadMip_TextureCubeArray_mip.name = "mip"_c;
    TextureLoadMip_TextureCubeArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_TextureCubeArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_TextureCubeArray.name = TextureLoadMip_TextureCubeArray_name;
    TextureLoadMip_TextureCubeArray.backendIndex = 2242;
    TextureLoadMip_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_TextureCubeArray.parameters = TextureLoadMip_TextureCubeArray_args;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray)->signature = "textureLoadMip(uniform *mutable textureCubeArray,i32x4,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray)->name = "textureLoadMip(uniform *mutable textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable textureCubeArray, coordinate : i32x4, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with TextureCubeArray, Int32x4, Float32x4
    TextureStore_TextureCubeArray_texture.name = "texture"_c;
    TextureStore_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureStore_TextureCubeArray_texture.type.modifiers = TextureStore_TextureCubeArray_texture_modifiers;
    TextureStore_TextureCubeArray_texture.type.modifierValues = TextureStore_TextureCubeArray_texture_modifierValues;
    TextureStore_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureStore_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureStore_TextureCubeArray_value.name = "value"_c;
    TextureStore_TextureCubeArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_TextureCubeArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_TextureCubeArray.name = TextureStore_TextureCubeArray_name;
    TextureStore_TextureCubeArray.backendIndex = 2243;
    TextureStore_TextureCubeArray.returnType = Type::FullType { VoidType.name };
    TextureStore_TextureCubeArray.parameters = TextureStore_TextureCubeArray_args;
    Symbol::Resolved(&TextureStore_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureStore_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureStore_TextureCubeArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_TextureCubeArray)->signature = "textureStore(uniform *mutable textureCubeArray,i32x4,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_TextureCubeArray)->name = "textureStore(uniform *mutable textureCubeArray,i32x4,f32x4)"_c;
    Symbol::Resolved(&TextureStore_TextureCubeArray)->nameWithVarNames = "textureStore(texture : uniform *mutable textureCubeArray, coordinate : i32x4, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_TextureCubeArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with TextureCubeArray, Int32x4, Int32, Float32x4
    TextureStoreMip_TextureCubeArray_texture.name = "texture"_c;
    TextureStoreMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureStoreMip_TextureCubeArray_texture.type.modifiers = TextureStoreMip_TextureCubeArray_texture_modifiers;
    TextureStoreMip_TextureCubeArray_texture.type.modifierValues = TextureStoreMip_TextureCubeArray_texture_modifierValues;
    TextureStoreMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureStoreMip_TextureCubeArray_mip.name = "mip"_c;
    TextureStoreMip_TextureCubeArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_TextureCubeArray_value.name = "value"_c;
    TextureStoreMip_TextureCubeArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_TextureCubeArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_TextureCubeArray.name = TextureStoreMip_TextureCubeArray_name;
    TextureStoreMip_TextureCubeArray.backendIndex = 2244;
    TextureStoreMip_TextureCubeArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_TextureCubeArray.parameters = TextureStoreMip_TextureCubeArray_args;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray)->signature = "textureStoreMip(uniform *mutable textureCubeArray,i32x4,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray)->name = "textureStoreMip(uniform *mutable textureCubeArray,i32x4,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable textureCubeArray, coordinate : i32x4, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2DMS, Int32x2
    TextureLoad_Texture2DMS_texture.name = "texture"_c;
    TextureLoad_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureLoad_Texture2DMS_texture.type.modifiers = TextureLoad_Texture2DMS_texture_modifiers;
    TextureLoad_Texture2DMS_texture.type.modifierValues = TextureLoad_Texture2DMS_texture_modifierValues;
    TextureLoad_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoad_Texture2DMS.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture2DMS.name = TextureLoad_Texture2DMS_name;
    TextureLoad_Texture2DMS.backendIndex = 2245;
    TextureLoad_Texture2DMS.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture2DMS.parameters = TextureLoad_Texture2DMS_args;
    Symbol::Resolved(&TextureLoad_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureLoad_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoad_Texture2DMS)->signature = "textureLoad(uniform *mutable texture2DMS,i32x2) f32x4"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMS)->name = "textureLoad(uniform *mutable texture2DMS,i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMS)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture2DMS, coordinate : i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMS)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture2DMS, Int32x2, Int32
    TextureLoadMip_Texture2DMS_texture.name = "texture"_c;
    TextureLoadMip_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureLoadMip_Texture2DMS_texture.type.modifiers = TextureLoadMip_Texture2DMS_texture_modifiers;
    TextureLoadMip_Texture2DMS_texture.type.modifierValues = TextureLoadMip_Texture2DMS_texture_modifierValues;
    TextureLoadMip_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoadMip_Texture2DMS_mip.name = "mip"_c;
    TextureLoadMip_Texture2DMS_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2DMS.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture2DMS.name = TextureLoadMip_Texture2DMS_name;
    TextureLoadMip_Texture2DMS.backendIndex = 2246;
    TextureLoadMip_Texture2DMS.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture2DMS.parameters = TextureLoadMip_Texture2DMS_args;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS)->signature = "textureLoadMip(uniform *mutable texture2DMS,i32x2,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS)->name = "textureLoadMip(uniform *mutable texture2DMS,i32x2,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture2DMS, coordinate : i32x2, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture2DMS, Int32x2, Float32x4
    TextureStore_Texture2DMS_texture.name = "texture"_c;
    TextureStore_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureStore_Texture2DMS_texture.type.modifiers = TextureStore_Texture2DMS_texture_modifiers;
    TextureStore_Texture2DMS_texture.type.modifierValues = TextureStore_Texture2DMS_texture_modifierValues;
    TextureStore_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureStore_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStore_Texture2DMS_value.name = "value"_c;
    TextureStore_Texture2DMS_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2DMS.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture2DMS.name = TextureStore_Texture2DMS_name;
    TextureStore_Texture2DMS.backendIndex = 2247;
    TextureStore_Texture2DMS.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2DMS.parameters = TextureStore_Texture2DMS_args;
    Symbol::Resolved(&TextureStore_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureStore_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStore_Texture2DMS_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2DMS)->signature = "textureStore(uniform *mutable texture2DMS,i32x2,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_Texture2DMS)->name = "textureStore(uniform *mutable texture2DMS,i32x2,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DMS)->nameWithVarNames = "textureStore(texture : uniform *mutable texture2DMS, coordinate : i32x2, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DMS)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2DMS, Int32x2, Int32, Float32x4
    TextureStoreMip_Texture2DMS_texture.name = "texture"_c;
    TextureStoreMip_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureStoreMip_Texture2DMS_texture.type.modifiers = TextureStoreMip_Texture2DMS_texture_modifiers;
    TextureStoreMip_Texture2DMS_texture.type.modifierValues = TextureStoreMip_Texture2DMS_texture_modifierValues;
    TextureStoreMip_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStoreMip_Texture2DMS_mip.name = "mip"_c;
    TextureStoreMip_Texture2DMS_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2DMS_value.name = "value"_c;
    TextureStoreMip_Texture2DMS_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2DMS.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture2DMS.name = TextureStoreMip_Texture2DMS_name;
    TextureStoreMip_Texture2DMS.backendIndex = 2248;
    TextureStoreMip_Texture2DMS.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2DMS.parameters = TextureStoreMip_Texture2DMS_args;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS)->signature = "textureStoreMip(uniform *mutable texture2DMS,i32x2,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS)->name = "textureStoreMip(uniform *mutable texture2DMS,i32x2,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture2DMS, coordinate : i32x2, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2DMSArray, Int32x3
    TextureLoad_Texture2DMSArray_texture.name = "texture"_c;
    TextureLoad_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureLoad_Texture2DMSArray_texture.type.modifiers = TextureLoad_Texture2DMSArray_texture_modifiers;
    TextureLoad_Texture2DMSArray_texture.type.modifierValues = TextureLoad_Texture2DMSArray_texture_modifierValues;
    TextureLoad_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_Texture2DMSArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture2DMSArray.name = TextureLoad_Texture2DMSArray_name;
    TextureLoad_Texture2DMSArray.backendIndex = 2249;
    TextureLoad_Texture2DMSArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture2DMSArray.parameters = TextureLoad_Texture2DMSArray_args;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray)->signature = "textureLoad(uniform *mutable texture2DMSArray,i32x3) f32x4"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray)->name = "textureLoad(uniform *mutable texture2DMSArray,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture2DMSArray, coordinate : i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture2DMSArray, Int32x3, Int32
    TextureLoadMip_Texture2DMSArray_texture.name = "texture"_c;
    TextureLoadMip_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureLoadMip_Texture2DMSArray_texture.type.modifiers = TextureLoadMip_Texture2DMSArray_texture_modifiers;
    TextureLoadMip_Texture2DMSArray_texture.type.modifierValues = TextureLoadMip_Texture2DMSArray_texture_modifierValues;
    TextureLoadMip_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_Texture2DMSArray_mip.name = "mip"_c;
    TextureLoadMip_Texture2DMSArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2DMSArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture2DMSArray.name = TextureLoadMip_Texture2DMSArray_name;
    TextureLoadMip_Texture2DMSArray.backendIndex = 2250;
    TextureLoadMip_Texture2DMSArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture2DMSArray.parameters = TextureLoadMip_Texture2DMSArray_args;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray)->signature = "textureLoadMip(uniform *mutable texture2DMSArray,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray)->name = "textureLoadMip(uniform *mutable texture2DMSArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture2DMSArray, coordinate : i32x3, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture2DMSArray, Int32x3, Float32x4
    TextureStore_Texture2DMSArray_texture.name = "texture"_c;
    TextureStore_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureStore_Texture2DMSArray_texture.type.modifiers = TextureStore_Texture2DMSArray_texture_modifiers;
    TextureStore_Texture2DMSArray_texture.type.modifierValues = TextureStore_Texture2DMSArray_texture_modifierValues;
    TextureStore_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureStore_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_Texture2DMSArray_value.name = "value"_c;
    TextureStore_Texture2DMSArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2DMSArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture2DMSArray.name = TextureStore_Texture2DMSArray_name;
    TextureStore_Texture2DMSArray.backendIndex = 2251;
    TextureStore_Texture2DMSArray.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2DMSArray.parameters = TextureStore_Texture2DMSArray_args;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2DMSArray)->signature = "textureStore(uniform *mutable texture2DMSArray,i32x3,f32x4) void"_c;
    Symbol::Resolved(&TextureStore_Texture2DMSArray)->name = "textureStore(uniform *mutable texture2DMSArray,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DMSArray)->nameWithVarNames = "textureStore(texture : uniform *mutable texture2DMSArray, coordinate : i32x3, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DMSArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2DMSArray, Int32x3, Int32, Float32x4
    TextureStoreMip_Texture2DMSArray_texture.name = "texture"_c;
    TextureStoreMip_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureStoreMip_Texture2DMSArray_texture.type.modifiers = TextureStoreMip_Texture2DMSArray_texture_modifiers;
    TextureStoreMip_Texture2DMSArray_texture.type.modifierValues = TextureStoreMip_Texture2DMSArray_texture_modifierValues;
    TextureStoreMip_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_Texture2DMSArray_mip.name = "mip"_c;
    TextureStoreMip_Texture2DMSArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2DMSArray_value.name = "value"_c;
    TextureStoreMip_Texture2DMSArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2DMSArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture2DMSArray.name = TextureStoreMip_Texture2DMSArray_name;
    TextureStoreMip_Texture2DMSArray.backendIndex = 2252;
    TextureStoreMip_Texture2DMSArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2DMSArray.parameters = TextureStoreMip_Texture2DMSArray_args;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray)->signature = "textureStoreMip(uniform *mutable texture2DMSArray,i32x3,i32,f32x4) void"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray)->name = "textureStoreMip(uniform *mutable texture2DMSArray,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture2DMSArray, coordinate : i32x3, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray)->returnTypeSymbol = &VoidType;

    /// textureFetch with Texture1D, Int32, UInt32
    TextureFetch_Texture1D_texture.name = "texture"_c;
    TextureFetch_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureFetch_Texture1D_texture.type.modifiers = TextureFetch_Texture1D_texture_modifiers;
    TextureFetch_Texture1D_texture.type.modifierValues = TextureFetch_Texture1D_texture_modifierValues;
    TextureFetch_Texture1D_coordinate.name = "coordinate"_c;
    TextureFetch_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureFetch_Texture1D_lod.name = "lod"_c;
    TextureFetch_Texture1D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture1D.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture1D.name = TextureFetch_Texture1D_name;
    TextureFetch_Texture1D.backendIndex = 2253;
    TextureFetch_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture1D.parameters = TextureFetch_Texture1D_args;
    Symbol::Resolved(&TextureFetch_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureFetch_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureFetch_Texture1D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture1D)->signature = "textureFetch(uniform *texture1D,i32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetch_Texture1D)->name = "textureFetch(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture1D)->nameWithVarNames = "textureFetch(texture : uniform *texture1D, coordinate : i32, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture1D, Int32, UInt32, UInt32
    TextureFetchSample_Texture1D_texture.name = "texture"_c;
    TextureFetchSample_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureFetchSample_Texture1D_texture.type.modifiers = TextureFetchSample_Texture1D_texture_modifiers;
    TextureFetchSample_Texture1D_texture.type.modifierValues = TextureFetchSample_Texture1D_texture_modifierValues;
    TextureFetchSample_Texture1D_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureFetchSample_Texture1D_lod.name = "lod"_c;
    TextureFetchSample_Texture1D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1D_sample.name = "sample"_c;
    TextureFetchSample_Texture1D_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1D.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture1D.name = TextureFetchSample_Texture1D_name;
    TextureFetchSample_Texture1D.backendIndex = 2254;
    TextureFetchSample_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture1D.parameters = TextureFetchSample_Texture1D_args;
    Symbol::Resolved(&TextureFetchSample_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureFetchSample_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1D_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1D)->signature = "textureFetchSample(uniform *texture1D,i32,u32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1D)->name = "textureFetchSample(uniform *texture1D,i32,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1D)->nameWithVarNames = "textureFetchSample(texture : uniform *texture1D, coordinate : i32, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture2D, Int32x2, UInt32
    TextureFetch_Texture2D_texture.name = "texture"_c;
    TextureFetch_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureFetch_Texture2D_texture.type.modifiers = TextureFetch_Texture2D_texture_modifiers;
    TextureFetch_Texture2D_texture.type.modifierValues = TextureFetch_Texture2D_texture_modifierValues;
    TextureFetch_Texture2D_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetch_Texture2D_lod.name = "lod"_c;
    TextureFetch_Texture2D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2D.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture2D.name = TextureFetch_Texture2D_name;
    TextureFetch_Texture2D.backendIndex = 2255;
    TextureFetch_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture2D.parameters = TextureFetch_Texture2D_args;
    Symbol::Resolved(&TextureFetch_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureFetch_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetch_Texture2D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2D)->signature = "textureFetch(uniform *texture2D,i32x2,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetch_Texture2D)->name = "textureFetch(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2D)->nameWithVarNames = "textureFetch(texture : uniform *texture2D, coordinate : i32x2, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture2D, Int32x2, UInt32, UInt32
    TextureFetchSample_Texture2D_texture.name = "texture"_c;
    TextureFetchSample_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureFetchSample_Texture2D_texture.type.modifiers = TextureFetchSample_Texture2D_texture_modifiers;
    TextureFetchSample_Texture2D_texture.type.modifierValues = TextureFetchSample_Texture2D_texture_modifierValues;
    TextureFetchSample_Texture2D_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetchSample_Texture2D_lod.name = "lod"_c;
    TextureFetchSample_Texture2D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2D_sample.name = "sample"_c;
    TextureFetchSample_Texture2D_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2D.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture2D.name = TextureFetchSample_Texture2D_name;
    TextureFetchSample_Texture2D.backendIndex = 2256;
    TextureFetchSample_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture2D.parameters = TextureFetchSample_Texture2D_args;
    Symbol::Resolved(&TextureFetchSample_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureFetchSample_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetchSample_Texture2D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2D_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2D)->signature = "textureFetchSample(uniform *texture2D,i32x2,u32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2D)->name = "textureFetchSample(uniform *texture2D,i32x2,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2D)->nameWithVarNames = "textureFetchSample(texture : uniform *texture2D, coordinate : i32x2, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture3D, Int32x3, UInt32
    TextureFetch_Texture3D_texture.name = "texture"_c;
    TextureFetch_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureFetch_Texture3D_texture.type.modifiers = TextureFetch_Texture3D_texture_modifiers;
    TextureFetch_Texture3D_texture.type.modifierValues = TextureFetch_Texture3D_texture_modifierValues;
    TextureFetch_Texture3D_coordinate.name = "coordinate"_c;
    TextureFetch_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetch_Texture3D_lod.name = "lod"_c;
    TextureFetch_Texture3D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture3D.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture3D.name = TextureFetch_Texture3D_name;
    TextureFetch_Texture3D.backendIndex = 2257;
    TextureFetch_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture3D.parameters = TextureFetch_Texture3D_args;
    Symbol::Resolved(&TextureFetch_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureFetch_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetch_Texture3D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture3D)->signature = "textureFetch(uniform *texture3D,i32x3,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetch_Texture3D)->name = "textureFetch(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture3D)->nameWithVarNames = "textureFetch(texture : uniform *texture3D, coordinate : i32x3, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture3D, Int32x3, UInt32, UInt32
    TextureFetchSample_Texture3D_texture.name = "texture"_c;
    TextureFetchSample_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureFetchSample_Texture3D_texture.type.modifiers = TextureFetchSample_Texture3D_texture_modifiers;
    TextureFetchSample_Texture3D_texture.type.modifierValues = TextureFetchSample_Texture3D_texture_modifierValues;
    TextureFetchSample_Texture3D_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetchSample_Texture3D_lod.name = "lod"_c;
    TextureFetchSample_Texture3D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture3D_sample.name = "sample"_c;
    TextureFetchSample_Texture3D_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture3D.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture3D.name = TextureFetchSample_Texture3D_name;
    TextureFetchSample_Texture3D.backendIndex = 2258;
    TextureFetchSample_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture3D.parameters = TextureFetchSample_Texture3D_args;
    Symbol::Resolved(&TextureFetchSample_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureFetchSample_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetchSample_Texture3D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture3D_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture3D)->signature = "textureFetchSample(uniform *texture3D,i32x3,u32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetchSample_Texture3D)->name = "textureFetchSample(uniform *texture3D,i32x3,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture3D)->nameWithVarNames = "textureFetchSample(texture : uniform *texture3D, coordinate : i32x3, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture1DArray, Int32x2, UInt32
    TextureFetch_Texture1DArray_texture.name = "texture"_c;
    TextureFetch_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureFetch_Texture1DArray_texture.type.modifiers = TextureFetch_Texture1DArray_texture_modifiers;
    TextureFetch_Texture1DArray_texture.type.modifierValues = TextureFetch_Texture1DArray_texture_modifierValues;
    TextureFetch_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureFetch_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetch_Texture1DArray_lod.name = "lod"_c;
    TextureFetch_Texture1DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture1DArray.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture1DArray.name = TextureFetch_Texture1DArray_name;
    TextureFetch_Texture1DArray.backendIndex = 2259;
    TextureFetch_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture1DArray.parameters = TextureFetch_Texture1DArray_args;
    Symbol::Resolved(&TextureFetch_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureFetch_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetch_Texture1DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture1DArray)->signature = "textureFetch(uniform *texture1DArray,i32x2,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetch_Texture1DArray)->name = "textureFetch(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture1DArray)->nameWithVarNames = "textureFetch(texture : uniform *texture1DArray, coordinate : i32x2, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture1DArray, Int32x2, UInt32, UInt32
    TextureFetchSample_Texture1DArray_texture.name = "texture"_c;
    TextureFetchSample_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureFetchSample_Texture1DArray_texture.type.modifiers = TextureFetchSample_Texture1DArray_texture_modifiers;
    TextureFetchSample_Texture1DArray_texture.type.modifierValues = TextureFetchSample_Texture1DArray_texture_modifierValues;
    TextureFetchSample_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetchSample_Texture1DArray_lod.name = "lod"_c;
    TextureFetchSample_Texture1DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1DArray_sample.name = "sample"_c;
    TextureFetchSample_Texture1DArray_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1DArray.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture1DArray.name = TextureFetchSample_Texture1DArray_name;
    TextureFetchSample_Texture1DArray.backendIndex = 2260;
    TextureFetchSample_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture1DArray.parameters = TextureFetchSample_Texture1DArray_args;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray)->signature = "textureFetchSample(uniform *texture1DArray,i32x2,u32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray)->name = "textureFetchSample(uniform *texture1DArray,i32x2,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray)->nameWithVarNames = "textureFetchSample(texture : uniform *texture1DArray, coordinate : i32x2, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture2DArray, Int32x3, UInt32
    TextureFetch_Texture2DArray_texture.name = "texture"_c;
    TextureFetch_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureFetch_Texture2DArray_texture.type.modifiers = TextureFetch_Texture2DArray_texture_modifiers;
    TextureFetch_Texture2DArray_texture.type.modifierValues = TextureFetch_Texture2DArray_texture_modifierValues;
    TextureFetch_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetch_Texture2DArray_lod.name = "lod"_c;
    TextureFetch_Texture2DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2DArray.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture2DArray.name = TextureFetch_Texture2DArray_name;
    TextureFetch_Texture2DArray.backendIndex = 2261;
    TextureFetch_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture2DArray.parameters = TextureFetch_Texture2DArray_args;
    Symbol::Resolved(&TextureFetch_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureFetch_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetch_Texture2DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2DArray)->signature = "textureFetch(uniform *texture2DArray,i32x3,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetch_Texture2DArray)->name = "textureFetch(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DArray)->nameWithVarNames = "textureFetch(texture : uniform *texture2DArray, coordinate : i32x3, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture2DArray, Int32x3, UInt32, UInt32
    TextureFetchSample_Texture2DArray_texture.name = "texture"_c;
    TextureFetchSample_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureFetchSample_Texture2DArray_texture.type.modifiers = TextureFetchSample_Texture2DArray_texture_modifiers;
    TextureFetchSample_Texture2DArray_texture.type.modifierValues = TextureFetchSample_Texture2DArray_texture_modifierValues;
    TextureFetchSample_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetchSample_Texture2DArray_lod.name = "lod"_c;
    TextureFetchSample_Texture2DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DArray_sample.name = "sample"_c;
    TextureFetchSample_Texture2DArray_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DArray.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture2DArray.name = TextureFetchSample_Texture2DArray_name;
    TextureFetchSample_Texture2DArray.backendIndex = 2262;
    TextureFetchSample_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture2DArray.parameters = TextureFetchSample_Texture2DArray_args;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray)->signature = "textureFetchSample(uniform *texture2DArray,i32x3,u32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray)->name = "textureFetchSample(uniform *texture2DArray,i32x3,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray)->nameWithVarNames = "textureFetchSample(texture : uniform *texture2DArray, coordinate : i32x3, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture2DMS, Int32x2, UInt32
    TextureFetch_Texture2DMS_texture.name = "texture"_c;
    TextureFetch_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureFetch_Texture2DMS_texture.type.modifiers = TextureFetch_Texture2DMS_texture_modifiers;
    TextureFetch_Texture2DMS_texture.type.modifierValues = TextureFetch_Texture2DMS_texture_modifierValues;
    TextureFetch_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetch_Texture2DMS_lod.name = "lod"_c;
    TextureFetch_Texture2DMS_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2DMS.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture2DMS.name = TextureFetch_Texture2DMS_name;
    TextureFetch_Texture2DMS.backendIndex = 2263;
    TextureFetch_Texture2DMS.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture2DMS.parameters = TextureFetch_Texture2DMS_args;
    Symbol::Resolved(&TextureFetch_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureFetch_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetch_Texture2DMS_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2DMS)->signature = "textureFetch(uniform *texture2DMS,i32x2,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMS)->name = "textureFetch(uniform *texture2DMS,i32x2,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMS)->nameWithVarNames = "textureFetch(texture : uniform *texture2DMS, coordinate : i32x2, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMS)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture2DMS, Int32x2, UInt32, UInt32
    TextureFetchSample_Texture2DMS_texture.name = "texture"_c;
    TextureFetchSample_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureFetchSample_Texture2DMS_texture.type.modifiers = TextureFetchSample_Texture2DMS_texture_modifiers;
    TextureFetchSample_Texture2DMS_texture.type.modifierValues = TextureFetchSample_Texture2DMS_texture_modifierValues;
    TextureFetchSample_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetchSample_Texture2DMS_lod.name = "lod"_c;
    TextureFetchSample_Texture2DMS_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMS_sample.name = "sample"_c;
    TextureFetchSample_Texture2DMS_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMS.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture2DMS.name = TextureFetchSample_Texture2DMS_name;
    TextureFetchSample_Texture2DMS.backendIndex = 2264;
    TextureFetchSample_Texture2DMS.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture2DMS.parameters = TextureFetchSample_Texture2DMS_args;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS)->signature = "textureFetchSample(uniform *texture2DMS,i32x2,u32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS)->name = "textureFetchSample(uniform *texture2DMS,i32x2,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS)->nameWithVarNames = "textureFetchSample(texture : uniform *texture2DMS, coordinate : i32x2, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture2DMSArray, Int32x3, UInt32
    TextureFetch_Texture2DMSArray_texture.name = "texture"_c;
    TextureFetch_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureFetch_Texture2DMSArray_texture.type.modifiers = TextureFetch_Texture2DMSArray_texture_modifiers;
    TextureFetch_Texture2DMSArray_texture.type.modifierValues = TextureFetch_Texture2DMSArray_texture_modifierValues;
    TextureFetch_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetch_Texture2DMSArray_lod.name = "lod"_c;
    TextureFetch_Texture2DMSArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2DMSArray.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture2DMSArray.name = TextureFetch_Texture2DMSArray_name;
    TextureFetch_Texture2DMSArray.backendIndex = 2265;
    TextureFetch_Texture2DMSArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture2DMSArray.parameters = TextureFetch_Texture2DMSArray_args;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray)->signature = "textureFetch(uniform *texture2DMSArray,i32x3,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray)->name = "textureFetch(uniform *texture2DMSArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray)->nameWithVarNames = "textureFetch(texture : uniform *texture2DMSArray, coordinate : i32x3, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture2DMSArray, Int32x3, UInt32, UInt32
    TextureFetchSample_Texture2DMSArray_texture.name = "texture"_c;
    TextureFetchSample_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureFetchSample_Texture2DMSArray_texture.type.modifiers = TextureFetchSample_Texture2DMSArray_texture_modifiers;
    TextureFetchSample_Texture2DMSArray_texture.type.modifierValues = TextureFetchSample_Texture2DMSArray_texture_modifierValues;
    TextureFetchSample_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetchSample_Texture2DMSArray_lod.name = "lod"_c;
    TextureFetchSample_Texture2DMSArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMSArray_sample.name = "sample"_c;
    TextureFetchSample_Texture2DMSArray_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMSArray.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture2DMSArray.name = TextureFetchSample_Texture2DMSArray_name;
    TextureFetchSample_Texture2DMSArray.backendIndex = 2266;
    TextureFetchSample_Texture2DMSArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture2DMSArray.parameters = TextureFetchSample_Texture2DMSArray_args;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray)->signature = "textureFetchSample(uniform *texture2DMSArray,i32x3,u32,u32) f32x4"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray)->name = "textureFetchSample(uniform *texture2DMSArray,i32x3,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray)->nameWithVarNames = "textureFetchSample(texture : uniform *texture2DMSArray, coordinate : i32x3, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with Texture2D, Sampler, Int32x2, Int32
    TextureGather_Texture2D_texture.name = "texture"_c;
    TextureGather_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGather_Texture2D_texture.type.modifiers = TextureGather_Texture2D_texture_modifiers;
    TextureGather_Texture2D_texture.type.modifierValues = TextureGather_Texture2D_texture_modifierValues;
    TextureGather_Texture2D_sampler.name = "sampler"_c;
    TextureGather_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_Texture2D_sampler.type.modifiers = TextureGather_Texture2D_sampler_modifiers;
    TextureGather_Texture2D_sampler.type.modifierValues = TextureGather_Texture2D_sampler_modifierValues;
    TextureGather_Texture2D_coordinate.name = "coordinate"_c;
    TextureGather_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureGather_Texture2D_component.name = "component"_c;
    TextureGather_Texture2D_component.type = Type::FullType{ Int32Type.name };
    TextureGather_Texture2D.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    TextureGather_Texture2D.name = TextureGather_Texture2D_name;
    TextureGather_Texture2D.backendIndex = 2267;
    TextureGather_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureGather_Texture2D.parameters = TextureGather_Texture2D_args;
    Symbol::Resolved(&TextureGather_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGather_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureGather_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_Texture2D)->signature = "textureGather(uniform *texture2D,uniform *sampler,i32x2,i32) f32x4"_c;
    Symbol::Resolved(&TextureGather_Texture2D)->name = "textureGather(uniform *texture2D,uniform *sampler,i32x2,i32)"_c;
    Symbol::Resolved(&TextureGather_Texture2D)->nameWithVarNames = "textureGather(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : i32x2, component : i32)"_c;
    Symbol::Resolved(&TextureGather_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with SampledTexture2D, Int32x2, Int32
    SampledTextureGather_Texture2D_texture.name = "texture"_c;
    SampledTextureGather_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureGather_Texture2D_texture.type.modifiers = SampledTextureGather_Texture2D_texture_modifiers;
    SampledTextureGather_Texture2D_texture.type.modifierValues = SampledTextureGather_Texture2D_texture_modifierValues;
    SampledTextureGather_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureGather_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    SampledTextureGather_Texture2D_component.name = "component"_c;
    SampledTextureGather_Texture2D_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_Texture2D.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    SampledTextureGather_Texture2D.name = SampledTextureGather_Texture2D_name;
    SampledTextureGather_Texture2D.backendIndex = 2268;
    SampledTextureGather_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGather_Texture2D.parameters = SampledTextureGather_Texture2D_args;
    Symbol::Resolved(&SampledTextureGather_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureGather_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SampledTextureGather_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_Texture2D)->signature = "textureGather(uniform *textureSampled2D,i32x2,i32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2D)->name = "textureGather(uniform *textureSampled2D,i32x2,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2D)->nameWithVarNames = "textureGather(texture : uniform *textureSampled2D, coordinate : i32x2, component : i32)"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with Texture2D, Sampler, Int32x2, Int32, UInt32
    TextureGatherOffset_Texture2D_texture.name = "texture"_c;
    TextureGatherOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGatherOffset_Texture2D_texture.type.modifiers = TextureGatherOffset_Texture2D_texture_modifiers;
    TextureGatherOffset_Texture2D_texture.type.modifierValues = TextureGatherOffset_Texture2D_texture_modifierValues;
    TextureGatherOffset_Texture2D_sampler.name = "sampler"_c;
    TextureGatherOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_Texture2D_sampler.type.modifiers = TextureGatherOffset_Texture2D_sampler_modifiers;
    TextureGatherOffset_Texture2D_sampler.type.modifierValues = TextureGatherOffset_Texture2D_sampler_modifierValues;
    TextureGatherOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureGatherOffset_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureGatherOffset_Texture2D_component.name = "component"_c;
    TextureGatherOffset_Texture2D_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_Texture2D_offset.name = "offset"_c;
    TextureGatherOffset_Texture2D_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_Texture2D.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    TextureGatherOffset_Texture2D.name = TextureGatherOffset_Texture2D_name;
    TextureGatherOffset_Texture2D.backendIndex = 2269;
    TextureGatherOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureGatherOffset_Texture2D.parameters = TextureGatherOffset_Texture2D_args;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2D)->signature = "textureGatherOffset(uniform *texture2D,uniform *sampler,i32x2,i32,u32) f32x4"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2D)->name = "textureGatherOffset(uniform *texture2D,uniform *sampler,i32x2,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2D)->nameWithVarNames = "textureGatherOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : i32x2, component : i32, offset : u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with SampledTexture2D, Int32x2, Int32, UInt32
    SampledTextureGatherOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureGatherOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureGatherOffset_Texture2D_texture.type.modifiers = SampledTextureGatherOffset_Texture2D_texture_modifiers;
    SampledTextureGatherOffset_Texture2D_texture.type.modifierValues = SampledTextureGatherOffset_Texture2D_texture_modifierValues;
    SampledTextureGatherOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    SampledTextureGatherOffset_Texture2D_component.name = "component"_c;
    SampledTextureGatherOffset_Texture2D_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureGatherOffset_Texture2D_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_Texture2D.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    SampledTextureGatherOffset_Texture2D.name = SampledTextureGatherOffset_Texture2D_name;
    SampledTextureGatherOffset_Texture2D.backendIndex = 2270;
    SampledTextureGatherOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGatherOffset_Texture2D.parameters = SampledTextureGatherOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D)->signature = "textureGatherOffset(uniform *textureSampled2D,i32x2,i32,u32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D)->name = "textureGatherOffset(uniform *textureSampled2D,i32x2,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureSampled2D, coordinate : i32x2, component : i32, offset : u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with TextureCube, Sampler, Int32x3, Int32
    TextureGather_TextureCube_texture.name = "texture"_c;
    TextureGather_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGather_TextureCube_texture.type.modifiers = TextureGather_TextureCube_texture_modifiers;
    TextureGather_TextureCube_texture.type.modifierValues = TextureGather_TextureCube_texture_modifierValues;
    TextureGather_TextureCube_sampler.name = "sampler"_c;
    TextureGather_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_TextureCube_sampler.type.modifiers = TextureGather_TextureCube_sampler_modifiers;
    TextureGather_TextureCube_sampler.type.modifierValues = TextureGather_TextureCube_sampler_modifierValues;
    TextureGather_TextureCube_coordinate.name = "coordinate"_c;
    TextureGather_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGather_TextureCube_component.name = "component"_c;
    TextureGather_TextureCube_component.type = Type::FullType{ Int32Type.name };
    TextureGather_TextureCube.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    TextureGather_TextureCube.name = TextureGather_TextureCube_name;
    TextureGather_TextureCube.backendIndex = 2271;
    TextureGather_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureGather_TextureCube.parameters = TextureGather_TextureCube_args;
    Symbol::Resolved(&TextureGather_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGather_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGather_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_TextureCube)->signature = "textureGather(uniform *textureCube,uniform *sampler,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&TextureGather_TextureCube)->name = "textureGather(uniform *textureCube,uniform *sampler,i32x3,i32)"_c;
    Symbol::Resolved(&TextureGather_TextureCube)->nameWithVarNames = "textureGather(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : i32x3, component : i32)"_c;
    Symbol::Resolved(&TextureGather_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with SampledTextureCube, Int32x3, Int32
    SampledTextureGather_TextureCube_texture.name = "texture"_c;
    SampledTextureGather_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureGather_TextureCube_texture.type.modifiers = SampledTextureGather_TextureCube_texture_modifiers;
    SampledTextureGather_TextureCube_texture.type.modifierValues = SampledTextureGather_TextureCube_texture_modifierValues;
    SampledTextureGather_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureGather_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGather_TextureCube_component.name = "component"_c;
    SampledTextureGather_TextureCube_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_TextureCube.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    SampledTextureGather_TextureCube.name = SampledTextureGather_TextureCube_name;
    SampledTextureGather_TextureCube.backendIndex = 2272;
    SampledTextureGather_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGather_TextureCube.parameters = SampledTextureGather_TextureCube_args;
    Symbol::Resolved(&SampledTextureGather_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureGather_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGather_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_TextureCube)->signature = "textureGather(uniform *textureSampledCube,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCube)->name = "textureGather(uniform *textureSampledCube,i32x3,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCube)->nameWithVarNames = "textureGather(texture : uniform *textureSampledCube, coordinate : i32x3, component : i32)"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with TextureCube, Sampler, Int32x3, Int32, UInt32
    TextureGatherOffset_TextureCube_texture.name = "texture"_c;
    TextureGatherOffset_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGatherOffset_TextureCube_texture.type.modifiers = TextureGatherOffset_TextureCube_texture_modifiers;
    TextureGatherOffset_TextureCube_texture.type.modifierValues = TextureGatherOffset_TextureCube_texture_modifierValues;
    TextureGatherOffset_TextureCube_sampler.name = "sampler"_c;
    TextureGatherOffset_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_TextureCube_sampler.type.modifiers = TextureGatherOffset_TextureCube_sampler_modifiers;
    TextureGatherOffset_TextureCube_sampler.type.modifierValues = TextureGatherOffset_TextureCube_sampler_modifierValues;
    TextureGatherOffset_TextureCube_coordinate.name = "coordinate"_c;
    TextureGatherOffset_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGatherOffset_TextureCube_component.name = "component"_c;
    TextureGatherOffset_TextureCube_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_TextureCube_offset.name = "offset"_c;
    TextureGatherOffset_TextureCube_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_TextureCube.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    TextureGatherOffset_TextureCube.name = TextureGatherOffset_TextureCube_name;
    TextureGatherOffset_TextureCube.backendIndex = 2273;
    TextureGatherOffset_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureGatherOffset_TextureCube.parameters = TextureGatherOffset_TextureCube_args;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCube)->signature = "textureGatherOffset(uniform *textureCube,uniform *sampler,i32x3,i32,u32) f32x4"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCube)->name = "textureGatherOffset(uniform *textureCube,uniform *sampler,i32x3,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCube)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : i32x3, component : i32, offset : u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with SampledTextureCube, Int32x3, Int32, UInt32
    SampledTextureGatherOffset_TextureCube_texture.name = "texture"_c;
    SampledTextureGatherOffset_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureGatherOffset_TextureCube_texture.type.modifiers = SampledTextureGatherOffset_TextureCube_texture_modifiers;
    SampledTextureGatherOffset_TextureCube_texture.type.modifierValues = SampledTextureGatherOffset_TextureCube_texture_modifierValues;
    SampledTextureGatherOffset_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGatherOffset_TextureCube_component.name = "component"_c;
    SampledTextureGatherOffset_TextureCube_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_TextureCube_offset.name = "offset"_c;
    SampledTextureGatherOffset_TextureCube_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_TextureCube.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    SampledTextureGatherOffset_TextureCube.name = SampledTextureGatherOffset_TextureCube_name;
    SampledTextureGatherOffset_TextureCube.backendIndex = 2274;
    SampledTextureGatherOffset_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGatherOffset_TextureCube.parameters = SampledTextureGatherOffset_TextureCube_args;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube)->signature = "textureGatherOffset(uniform *textureSampledCube,i32x3,i32,u32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube)->name = "textureGatherOffset(uniform *textureSampledCube,i32x3,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureSampledCube, coordinate : i32x3, component : i32, offset : u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with Texture2DArray, Sampler, Int32x3, Int32
    TextureGather_Texture2DArray_texture.name = "texture"_c;
    TextureGather_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGather_Texture2DArray_texture.type.modifiers = TextureGather_Texture2DArray_texture_modifiers;
    TextureGather_Texture2DArray_texture.type.modifierValues = TextureGather_Texture2DArray_texture_modifierValues;
    TextureGather_Texture2DArray_sampler.name = "sampler"_c;
    TextureGather_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_Texture2DArray_sampler.type.modifiers = TextureGather_Texture2DArray_sampler_modifiers;
    TextureGather_Texture2DArray_sampler.type.modifierValues = TextureGather_Texture2DArray_sampler_modifierValues;
    TextureGather_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureGather_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGather_Texture2DArray_component.name = "component"_c;
    TextureGather_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    TextureGather_Texture2DArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    TextureGather_Texture2DArray.name = TextureGather_Texture2DArray_name;
    TextureGather_Texture2DArray.backendIndex = 2275;
    TextureGather_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureGather_Texture2DArray.parameters = TextureGather_Texture2DArray_args;
    Symbol::Resolved(&TextureGather_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGather_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGather_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_Texture2DArray)->signature = "textureGather(uniform *texture2DArray,uniform *sampler,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&TextureGather_Texture2DArray)->name = "textureGather(uniform *texture2DArray,uniform *sampler,i32x3,i32)"_c;
    Symbol::Resolved(&TextureGather_Texture2DArray)->nameWithVarNames = "textureGather(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : i32x3, component : i32)"_c;
    Symbol::Resolved(&TextureGather_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with SampledTexture2DArray, Int32x3, Int32
    SampledTextureGather_Texture2DArray_texture.name = "texture"_c;
    SampledTextureGather_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureGather_Texture2DArray_texture.type.modifiers = SampledTextureGather_Texture2DArray_texture_modifiers;
    SampledTextureGather_Texture2DArray_texture.type.modifierValues = SampledTextureGather_Texture2DArray_texture_modifierValues;
    SampledTextureGather_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureGather_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGather_Texture2DArray_component.name = "component"_c;
    SampledTextureGather_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_Texture2DArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    SampledTextureGather_Texture2DArray.name = SampledTextureGather_Texture2DArray_name;
    SampledTextureGather_Texture2DArray.backendIndex = 2276;
    SampledTextureGather_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGather_Texture2DArray.parameters = SampledTextureGather_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray)->signature = "textureGather(uniform *textureSampled2DArray,i32x3,i32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray)->name = "textureGather(uniform *textureSampled2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray)->nameWithVarNames = "textureGather(texture : uniform *textureSampled2DArray, coordinate : i32x3, component : i32)"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with Texture2DArray, Sampler, Int32x3, Int32, UInt32
    TextureGatherOffset_Texture2DArray_texture.name = "texture"_c;
    TextureGatherOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGatherOffset_Texture2DArray_texture.type.modifiers = TextureGatherOffset_Texture2DArray_texture_modifiers;
    TextureGatherOffset_Texture2DArray_texture.type.modifierValues = TextureGatherOffset_Texture2DArray_texture_modifierValues;
    TextureGatherOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureGatherOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_Texture2DArray_sampler.type.modifiers = TextureGatherOffset_Texture2DArray_sampler_modifiers;
    TextureGatherOffset_Texture2DArray_sampler.type.modifierValues = TextureGatherOffset_Texture2DArray_sampler_modifierValues;
    TextureGatherOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureGatherOffset_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGatherOffset_Texture2DArray_component.name = "component"_c;
    TextureGatherOffset_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_Texture2DArray_offset.name = "offset"_c;
    TextureGatherOffset_Texture2DArray_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_Texture2DArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    TextureGatherOffset_Texture2DArray.name = TextureGatherOffset_Texture2DArray_name;
    TextureGatherOffset_Texture2DArray.backendIndex = 2277;
    TextureGatherOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureGatherOffset_Texture2DArray.parameters = TextureGatherOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray)->signature = "textureGatherOffset(uniform *texture2DArray,uniform *sampler,i32x3,i32,u32) f32x4"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray)->name = "textureGatherOffset(uniform *texture2DArray,uniform *sampler,i32x3,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray)->nameWithVarNames = "textureGatherOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : i32x3, component : i32, offset : u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with SampledTexture2DArray, Int32x3, Int32, UInt32
    SampledTextureGatherOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureGatherOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureGatherOffset_Texture2DArray_texture.type.modifiers = SampledTextureGatherOffset_Texture2DArray_texture_modifiers;
    SampledTextureGatherOffset_Texture2DArray_texture.type.modifierValues = SampledTextureGatherOffset_Texture2DArray_texture_modifierValues;
    SampledTextureGatherOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGatherOffset_Texture2DArray_component.name = "component"_c;
    SampledTextureGatherOffset_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureGatherOffset_Texture2DArray_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_Texture2DArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    SampledTextureGatherOffset_Texture2DArray.name = SampledTextureGatherOffset_Texture2DArray_name;
    SampledTextureGatherOffset_Texture2DArray.backendIndex = 2278;
    SampledTextureGatherOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGatherOffset_Texture2DArray.parameters = SampledTextureGatherOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray)->signature = "textureGatherOffset(uniform *textureSampled2DArray,i32x3,i32,u32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray)->name = "textureGatherOffset(uniform *textureSampled2DArray,i32x3,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureSampled2DArray, coordinate : i32x3, component : i32, offset : u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with TextureCubeArray, Sampler, Int32x4, Int32
    TextureGather_TextureCubeArray_texture.name = "texture"_c;
    TextureGather_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGather_TextureCubeArray_texture.type.modifiers = TextureGather_TextureCubeArray_texture_modifiers;
    TextureGather_TextureCubeArray_texture.type.modifierValues = TextureGather_TextureCubeArray_texture_modifierValues;
    TextureGather_TextureCubeArray_sampler.name = "sampler"_c;
    TextureGather_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_TextureCubeArray_sampler.type.modifiers = TextureGather_TextureCubeArray_sampler_modifiers;
    TextureGather_TextureCubeArray_sampler.type.modifierValues = TextureGather_TextureCubeArray_sampler_modifierValues;
    TextureGather_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureGather_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureGather_TextureCubeArray_component.name = "component"_c;
    TextureGather_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    TextureGather_TextureCubeArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    TextureGather_TextureCubeArray.name = TextureGather_TextureCubeArray_name;
    TextureGather_TextureCubeArray.backendIndex = 2279;
    TextureGather_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureGather_TextureCubeArray.parameters = TextureGather_TextureCubeArray_args;
    Symbol::Resolved(&TextureGather_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGather_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureGather_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_TextureCubeArray)->signature = "textureGather(uniform *textureCubeArray,uniform *sampler,i32x4,i32) f32x4"_c;
    Symbol::Resolved(&TextureGather_TextureCubeArray)->name = "textureGather(uniform *textureCubeArray,uniform *sampler,i32x4,i32)"_c;
    Symbol::Resolved(&TextureGather_TextureCubeArray)->nameWithVarNames = "textureGather(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : i32x4, component : i32)"_c;
    Symbol::Resolved(&TextureGather_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with SampledTextureCubeArray, Int32x4, Int32
    SampledTextureGather_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureGather_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureGather_TextureCubeArray_texture.type.modifiers = SampledTextureGather_TextureCubeArray_texture_modifiers;
    SampledTextureGather_TextureCubeArray_texture.type.modifierValues = SampledTextureGather_TextureCubeArray_texture_modifierValues;
    SampledTextureGather_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureGather_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    SampledTextureGather_TextureCubeArray_component.name = "component"_c;
    SampledTextureGather_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_TextureCubeArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    SampledTextureGather_TextureCubeArray.name = SampledTextureGather_TextureCubeArray_name;
    SampledTextureGather_TextureCubeArray.backendIndex = 2280;
    SampledTextureGather_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGather_TextureCubeArray.parameters = SampledTextureGather_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray)->signature = "textureGather(uniform *textureSampledCubeArray,i32x4,i32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray)->name = "textureGather(uniform *textureSampledCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray)->nameWithVarNames = "textureGather(texture : uniform *textureSampledCubeArray, coordinate : i32x4, component : i32)"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with TextureCubeArray, Sampler, Int32x4, Int32, UInt32
    TextureGatherOffset_TextureCubeArray_texture.name = "texture"_c;
    TextureGatherOffset_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGatherOffset_TextureCubeArray_texture.type.modifiers = TextureGatherOffset_TextureCubeArray_texture_modifiers;
    TextureGatherOffset_TextureCubeArray_texture.type.modifierValues = TextureGatherOffset_TextureCubeArray_texture_modifierValues;
    TextureGatherOffset_TextureCubeArray_sampler.name = "sampler"_c;
    TextureGatherOffset_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_TextureCubeArray_sampler.type.modifiers = TextureGatherOffset_TextureCubeArray_sampler_modifiers;
    TextureGatherOffset_TextureCubeArray_sampler.type.modifierValues = TextureGatherOffset_TextureCubeArray_sampler_modifierValues;
    TextureGatherOffset_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureGatherOffset_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureGatherOffset_TextureCubeArray_component.name = "component"_c;
    TextureGatherOffset_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_TextureCubeArray_offset.name = "offset"_c;
    TextureGatherOffset_TextureCubeArray_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_TextureCubeArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    TextureGatherOffset_TextureCubeArray.name = TextureGatherOffset_TextureCubeArray_name;
    TextureGatherOffset_TextureCubeArray.backendIndex = 2281;
    TextureGatherOffset_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureGatherOffset_TextureCubeArray.parameters = TextureGatherOffset_TextureCubeArray_args;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray)->signature = "textureGatherOffset(uniform *textureCubeArray,uniform *sampler,i32x4,i32,u32) f32x4"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray)->name = "textureGatherOffset(uniform *textureCubeArray,uniform *sampler,i32x4,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : i32x4, component : i32, offset : u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with SampledTextureCubeArray, Int32x4, Int32, UInt32
    SampledTextureGatherOffset_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureGatherOffset_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureGatherOffset_TextureCubeArray_texture.type.modifiers = SampledTextureGatherOffset_TextureCubeArray_texture_modifiers;
    SampledTextureGatherOffset_TextureCubeArray_texture.type.modifierValues = SampledTextureGatherOffset_TextureCubeArray_texture_modifierValues;
    SampledTextureGatherOffset_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    SampledTextureGatherOffset_TextureCubeArray_component.name = "component"_c;
    SampledTextureGatherOffset_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_TextureCubeArray_offset.name = "offset"_c;
    SampledTextureGatherOffset_TextureCubeArray_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_TextureCubeArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    SampledTextureGatherOffset_TextureCubeArray.name = SampledTextureGatherOffset_TextureCubeArray_name;
    SampledTextureGatherOffset_TextureCubeArray.backendIndex = 2282;
    SampledTextureGatherOffset_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGatherOffset_TextureCubeArray.parameters = SampledTextureGatherOffset_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray)->signature = "textureGatherOffset(uniform *textureSampledCubeArray,i32x4,i32,u32) f32x4"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray)->name = "textureGatherOffset(uniform *textureSampledCubeArray,i32x4,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureSampledCubeArray, coordinate : i32x4, component : i32, offset : u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// texturePixelCacheLoad with PixelCache
    TexturePixelCacheLoad_PixelCache_texture.name = "texture"_c;
    TexturePixelCacheLoad_PixelCache_texture.type = Type::FullType{ PixelCacheType.name };
    TexturePixelCacheLoad_PixelCache_texture.type.modifiers = TexturePixelCacheLoad_PixelCache_texture_modifiers;
    TexturePixelCacheLoad_PixelCache_texture.type.modifierValues = TexturePixelCacheLoad_PixelCache_texture_modifierValues;
    TexturePixelCacheLoad_PixelCache.documentation = "Load a pixel value from a previous thread"_c;
    TexturePixelCacheLoad_PixelCache.name = TexturePixelCacheLoad_PixelCache_name;
    TexturePixelCacheLoad_PixelCache.backendIndex = 2283;
    TexturePixelCacheLoad_PixelCache.returnType = Type::FullType { PixelCacheType.name };
    TexturePixelCacheLoad_PixelCache.parameters = TexturePixelCacheLoad_PixelCache_args;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache_texture)->typeSymbol = &PixelCacheType;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache)->signature = "texturePixelCacheLoad(uniform *pixelCache) pixelCache"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache)->name = "texturePixelCacheLoad(uniform *pixelCache)"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache)->nameWithVarNames = "texturePixelCacheLoad(texture : uniform *pixelCache)"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache)->returnTypeSymbol = &PixelCacheType;

    /// texturePixelCacheLoad with PixelCacheMS, UInt32
    TexturePixelCacheLoad_PixelCacheMS_texture.name = "texture"_c;
    TexturePixelCacheLoad_PixelCacheMS_texture.type = Type::FullType{ PixelCacheMSType.name };
    TexturePixelCacheLoad_PixelCacheMS_texture.type.modifiers = TexturePixelCacheLoad_PixelCacheMS_texture_modifiers;
    TexturePixelCacheLoad_PixelCacheMS_texture.type.modifierValues = TexturePixelCacheLoad_PixelCacheMS_texture_modifierValues;
    TexturePixelCacheLoad_PixelCacheMS_sample.name = "sample"_c;
    TexturePixelCacheLoad_PixelCacheMS_sample.type = Type::FullType{ UInt32Type.name };
    TexturePixelCacheLoad_PixelCacheMS.documentation = "Load a pixel value from a previous thread"_c;
    TexturePixelCacheLoad_PixelCacheMS.name = TexturePixelCacheLoad_PixelCacheMS_name;
    TexturePixelCacheLoad_PixelCacheMS.backendIndex = 2284;
    TexturePixelCacheLoad_PixelCacheMS.returnType = Type::FullType { PixelCacheMSType.name };
    TexturePixelCacheLoad_PixelCacheMS.parameters = TexturePixelCacheLoad_PixelCacheMS_args;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS_texture)->typeSymbol = &PixelCacheMSType;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS)->signature = "texturePixelCacheLoad(uniform *pixelCacheMS,u32) pixelCacheMS"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS)->name = "texturePixelCacheLoad(uniform *pixelCacheMS,u32)"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS)->nameWithVarNames = "texturePixelCacheLoad(texture : uniform *pixelCacheMS, sample : u32)"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS)->returnTypeSymbol = &PixelCacheMSType;

    /// textureSample with Texture1D, Sampler, Float32
    TextureSample_Texture1D_texture.name = "texture"_c;
    TextureSample_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSample_Texture1D_texture.type.modifiers = TextureSample_Texture1D_texture_modifiers;
    TextureSample_Texture1D_texture.type.modifierValues = TextureSample_Texture1D_texture_modifierValues;
    TextureSample_Texture1D_sampler.name = "sampler"_c;
    TextureSample_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture1D_sampler.type.modifiers = TextureSample_Texture1D_sampler_modifiers;
    TextureSample_Texture1D_sampler.type.modifierValues = TextureSample_Texture1D_sampler_modifierValues;
    TextureSample_Texture1D_coordinate.name = "coordinate"_c;
    TextureSample_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSample_Texture1D.documentation = "Sample a texture at coordinate"_c;
    TextureSample_Texture1D.name = TextureSample_Texture1D_name;
    TextureSample_Texture1D.backendIndex = 2285;
    TextureSample_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture1D.parameters = TextureSample_Texture1D_args;
    Symbol::Resolved(&TextureSample_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSample_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSample_Texture1D)->signature = "textureSample(uniform *texture1D,uniform *sampler,f32) f32x4"_c;
    Symbol::Resolved(&TextureSample_Texture1D)->name = "textureSample(uniform *texture1D,uniform *sampler,f32)"_c;
    Symbol::Resolved(&TextureSample_Texture1D)->nameWithVarNames = "textureSample(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32)"_c;
    Symbol::Resolved(&TextureSample_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTexture1D, Float32
    SampledTextureSample_Texture1D_texture.name = "texture"_c;
    SampledTextureSample_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSample_Texture1D_texture.type.modifiers = SampledTextureSample_Texture1D_texture_modifiers;
    SampledTextureSample_Texture1D_texture.type.modifierValues = SampledTextureSample_Texture1D_texture_modifierValues;
    SampledTextureSample_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSample_Texture1D.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_Texture1D.name = SampledTextureSample_Texture1D_name;
    SampledTextureSample_Texture1D.backendIndex = 2286;
    SampledTextureSample_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture1D.parameters = SampledTextureSample_Texture1D_args;
    Symbol::Resolved(&SampledTextureSample_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSample_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSample_Texture1D)->signature = "textureSample(uniform *textureSampled1D,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1D)->name = "textureSample(uniform *textureSampled1D,f32)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1D)->nameWithVarNames = "textureSample(texture : uniform *textureSampled1D, coordinate : f32)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture2D, Sampler, Float32x2
    TextureSample_Texture2D_texture.name = "texture"_c;
    TextureSample_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSample_Texture2D_texture.type.modifiers = TextureSample_Texture2D_texture_modifiers;
    TextureSample_Texture2D_texture.type.modifierValues = TextureSample_Texture2D_texture_modifierValues;
    TextureSample_Texture2D_sampler.name = "sampler"_c;
    TextureSample_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture2D_sampler.type.modifiers = TextureSample_Texture2D_sampler_modifiers;
    TextureSample_Texture2D_sampler.type.modifierValues = TextureSample_Texture2D_sampler_modifierValues;
    TextureSample_Texture2D_coordinate.name = "coordinate"_c;
    TextureSample_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSample_Texture2D.documentation = "Sample a texture at coordinate"_c;
    TextureSample_Texture2D.name = TextureSample_Texture2D_name;
    TextureSample_Texture2D.backendIndex = 2287;
    TextureSample_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture2D.parameters = TextureSample_Texture2D_args;
    Symbol::Resolved(&TextureSample_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSample_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSample_Texture2D)->signature = "textureSample(uniform *texture2D,uniform *sampler,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSample_Texture2D)->name = "textureSample(uniform *texture2D,uniform *sampler,f32x2)"_c;
    Symbol::Resolved(&TextureSample_Texture2D)->nameWithVarNames = "textureSample(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2)"_c;
    Symbol::Resolved(&TextureSample_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTexture2D, Float32x2
    SampledTextureSample_Texture2D_texture.name = "texture"_c;
    SampledTextureSample_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSample_Texture2D_texture.type.modifiers = SampledTextureSample_Texture2D_texture_modifiers;
    SampledTextureSample_Texture2D_texture.type.modifierValues = SampledTextureSample_Texture2D_texture_modifierValues;
    SampledTextureSample_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSample_Texture2D.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_Texture2D.name = SampledTextureSample_Texture2D_name;
    SampledTextureSample_Texture2D.backendIndex = 2288;
    SampledTextureSample_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture2D.parameters = SampledTextureSample_Texture2D_args;
    Symbol::Resolved(&SampledTextureSample_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSample_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSample_Texture2D)->signature = "textureSample(uniform *textureSampled2D,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2D)->name = "textureSample(uniform *textureSampled2D,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2D)->nameWithVarNames = "textureSample(texture : uniform *textureSampled2D, coordinate : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture3D, Sampler, Float32x3
    TextureSample_Texture3D_texture.name = "texture"_c;
    TextureSample_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSample_Texture3D_texture.type.modifiers = TextureSample_Texture3D_texture_modifiers;
    TextureSample_Texture3D_texture.type.modifierValues = TextureSample_Texture3D_texture_modifierValues;
    TextureSample_Texture3D_sampler.name = "sampler"_c;
    TextureSample_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture3D_sampler.type.modifiers = TextureSample_Texture3D_sampler_modifiers;
    TextureSample_Texture3D_sampler.type.modifierValues = TextureSample_Texture3D_sampler_modifierValues;
    TextureSample_Texture3D_coordinate.name = "coordinate"_c;
    TextureSample_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSample_Texture3D.documentation = "Sample a texture at coordinate"_c;
    TextureSample_Texture3D.name = TextureSample_Texture3D_name;
    TextureSample_Texture3D.backendIndex = 2289;
    TextureSample_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture3D.parameters = TextureSample_Texture3D_args;
    Symbol::Resolved(&TextureSample_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSample_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSample_Texture3D)->signature = "textureSample(uniform *texture3D,uniform *sampler,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSample_Texture3D)->name = "textureSample(uniform *texture3D,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureSample_Texture3D)->nameWithVarNames = "textureSample(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3)"_c;
    Symbol::Resolved(&TextureSample_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTexture3D, Float32x3
    SampledTextureSample_Texture3D_texture.name = "texture"_c;
    SampledTextureSample_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSample_Texture3D_texture.type.modifiers = SampledTextureSample_Texture3D_texture_modifiers;
    SampledTextureSample_Texture3D_texture.type.modifierValues = SampledTextureSample_Texture3D_texture_modifierValues;
    SampledTextureSample_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSample_Texture3D.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_Texture3D.name = SampledTextureSample_Texture3D_name;
    SampledTextureSample_Texture3D.backendIndex = 2290;
    SampledTextureSample_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture3D.parameters = SampledTextureSample_Texture3D_args;
    Symbol::Resolved(&SampledTextureSample_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSample_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSample_Texture3D)->signature = "textureSample(uniform *textureSampled3D,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSample_Texture3D)->name = "textureSample(uniform *textureSampled3D,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture3D)->nameWithVarNames = "textureSample(texture : uniform *textureSampled3D, coordinate : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with TextureCube, Sampler, Float32x3
    TextureSample_TextureCube_texture.name = "texture"_c;
    TextureSample_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSample_TextureCube_texture.type.modifiers = TextureSample_TextureCube_texture_modifiers;
    TextureSample_TextureCube_texture.type.modifierValues = TextureSample_TextureCube_texture_modifierValues;
    TextureSample_TextureCube_sampler.name = "sampler"_c;
    TextureSample_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_TextureCube_sampler.type.modifiers = TextureSample_TextureCube_sampler_modifiers;
    TextureSample_TextureCube_sampler.type.modifierValues = TextureSample_TextureCube_sampler_modifierValues;
    TextureSample_TextureCube_coordinate.name = "coordinate"_c;
    TextureSample_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSample_TextureCube.documentation = "Sample a texture at coordinate"_c;
    TextureSample_TextureCube.name = TextureSample_TextureCube_name;
    TextureSample_TextureCube.backendIndex = 2291;
    TextureSample_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_TextureCube.parameters = TextureSample_TextureCube_args;
    Symbol::Resolved(&TextureSample_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSample_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSample_TextureCube)->signature = "textureSample(uniform *textureCube,uniform *sampler,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSample_TextureCube)->name = "textureSample(uniform *textureCube,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureSample_TextureCube)->nameWithVarNames = "textureSample(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : f32x3)"_c;
    Symbol::Resolved(&TextureSample_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTextureCube, Float32x3
    SampledTextureSample_TextureCube_texture.name = "texture"_c;
    SampledTextureSample_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureSample_TextureCube_texture.type.modifiers = SampledTextureSample_TextureCube_texture_modifiers;
    SampledTextureSample_TextureCube_texture.type.modifierValues = SampledTextureSample_TextureCube_texture_modifierValues;
    SampledTextureSample_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSample_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSample_TextureCube.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_TextureCube.name = SampledTextureSample_TextureCube_name;
    SampledTextureSample_TextureCube.backendIndex = 2292;
    SampledTextureSample_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_TextureCube.parameters = SampledTextureSample_TextureCube_args;
    Symbol::Resolved(&SampledTextureSample_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureSample_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSample_TextureCube)->signature = "textureSample(uniform *textureSampledCube,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCube)->name = "textureSample(uniform *textureSampledCube,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCube)->nameWithVarNames = "textureSample(texture : uniform *textureSampledCube, coordinate : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture1DArray, Sampler, Float32x2
    TextureSample_Texture1DArray_texture.name = "texture"_c;
    TextureSample_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSample_Texture1DArray_texture.type.modifiers = TextureSample_Texture1DArray_texture_modifiers;
    TextureSample_Texture1DArray_texture.type.modifierValues = TextureSample_Texture1DArray_texture_modifierValues;
    TextureSample_Texture1DArray_sampler.name = "sampler"_c;
    TextureSample_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture1DArray_sampler.type.modifiers = TextureSample_Texture1DArray_sampler_modifiers;
    TextureSample_Texture1DArray_sampler.type.modifierValues = TextureSample_Texture1DArray_sampler_modifierValues;
    TextureSample_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSample_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSample_Texture1DArray.documentation = "Sample a texture at coordinate"_c;
    TextureSample_Texture1DArray.name = TextureSample_Texture1DArray_name;
    TextureSample_Texture1DArray.backendIndex = 2293;
    TextureSample_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture1DArray.parameters = TextureSample_Texture1DArray_args;
    Symbol::Resolved(&TextureSample_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSample_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSample_Texture1DArray)->signature = "textureSample(uniform *texture1DArray,uniform *sampler,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSample_Texture1DArray)->name = "textureSample(uniform *texture1DArray,uniform *sampler,f32x2)"_c;
    Symbol::Resolved(&TextureSample_Texture1DArray)->nameWithVarNames = "textureSample(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2)"_c;
    Symbol::Resolved(&TextureSample_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTexture1DArray, Float32x2
    SampledTextureSample_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSample_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSample_Texture1DArray_texture.type.modifiers = SampledTextureSample_Texture1DArray_texture_modifiers;
    SampledTextureSample_Texture1DArray_texture.type.modifierValues = SampledTextureSample_Texture1DArray_texture_modifierValues;
    SampledTextureSample_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSample_Texture1DArray.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_Texture1DArray.name = SampledTextureSample_Texture1DArray_name;
    SampledTextureSample_Texture1DArray.backendIndex = 2294;
    SampledTextureSample_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture1DArray.parameters = SampledTextureSample_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray)->signature = "textureSample(uniform *textureSampled1DArray,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray)->name = "textureSample(uniform *textureSampled1DArray,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray)->nameWithVarNames = "textureSample(texture : uniform *textureSampled1DArray, coordinate : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture2DArray, Sampler, Float32x3
    TextureSample_Texture2DArray_texture.name = "texture"_c;
    TextureSample_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSample_Texture2DArray_texture.type.modifiers = TextureSample_Texture2DArray_texture_modifiers;
    TextureSample_Texture2DArray_texture.type.modifierValues = TextureSample_Texture2DArray_texture_modifierValues;
    TextureSample_Texture2DArray_sampler.name = "sampler"_c;
    TextureSample_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture2DArray_sampler.type.modifiers = TextureSample_Texture2DArray_sampler_modifiers;
    TextureSample_Texture2DArray_sampler.type.modifierValues = TextureSample_Texture2DArray_sampler_modifierValues;
    TextureSample_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSample_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSample_Texture2DArray.documentation = "Sample a texture at coordinate"_c;
    TextureSample_Texture2DArray.name = TextureSample_Texture2DArray_name;
    TextureSample_Texture2DArray.backendIndex = 2295;
    TextureSample_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture2DArray.parameters = TextureSample_Texture2DArray_args;
    Symbol::Resolved(&TextureSample_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSample_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSample_Texture2DArray)->signature = "textureSample(uniform *texture2DArray,uniform *sampler,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSample_Texture2DArray)->name = "textureSample(uniform *texture2DArray,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureSample_Texture2DArray)->nameWithVarNames = "textureSample(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3)"_c;
    Symbol::Resolved(&TextureSample_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTexture2DArray, Float32x3
    SampledTextureSample_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSample_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSample_Texture2DArray_texture.type.modifiers = SampledTextureSample_Texture2DArray_texture_modifiers;
    SampledTextureSample_Texture2DArray_texture.type.modifierValues = SampledTextureSample_Texture2DArray_texture_modifierValues;
    SampledTextureSample_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSample_Texture2DArray.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_Texture2DArray.name = SampledTextureSample_Texture2DArray_name;
    SampledTextureSample_Texture2DArray.backendIndex = 2296;
    SampledTextureSample_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture2DArray.parameters = SampledTextureSample_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray)->signature = "textureSample(uniform *textureSampled2DArray,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray)->name = "textureSample(uniform *textureSampled2DArray,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray)->nameWithVarNames = "textureSample(texture : uniform *textureSampled2DArray, coordinate : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with TextureCubeArray, Sampler, Float32x4
    TextureSample_TextureCubeArray_texture.name = "texture"_c;
    TextureSample_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSample_TextureCubeArray_texture.type.modifiers = TextureSample_TextureCubeArray_texture_modifiers;
    TextureSample_TextureCubeArray_texture.type.modifierValues = TextureSample_TextureCubeArray_texture_modifierValues;
    TextureSample_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSample_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_TextureCubeArray_sampler.type.modifiers = TextureSample_TextureCubeArray_sampler_modifiers;
    TextureSample_TextureCubeArray_sampler.type.modifierValues = TextureSample_TextureCubeArray_sampler_modifierValues;
    TextureSample_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSample_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSample_TextureCubeArray.documentation = "Sample a texture at coordinate"_c;
    TextureSample_TextureCubeArray.name = TextureSample_TextureCubeArray_name;
    TextureSample_TextureCubeArray.backendIndex = 2297;
    TextureSample_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_TextureCubeArray.parameters = TextureSample_TextureCubeArray_args;
    Symbol::Resolved(&TextureSample_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSample_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSample_TextureCubeArray)->signature = "textureSample(uniform *textureCubeArray,uniform *sampler,f32x4) f32x4"_c;
    Symbol::Resolved(&TextureSample_TextureCubeArray)->name = "textureSample(uniform *textureCubeArray,uniform *sampler,f32x4)"_c;
    Symbol::Resolved(&TextureSample_TextureCubeArray)->nameWithVarNames = "textureSample(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : f32x4)"_c;
    Symbol::Resolved(&TextureSample_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTextureCubeArray, Float32x4
    SampledTextureSample_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSample_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureSample_TextureCubeArray_texture.type.modifiers = SampledTextureSample_TextureCubeArray_texture_modifiers;
    SampledTextureSample_TextureCubeArray_texture.type.modifierValues = SampledTextureSample_TextureCubeArray_texture_modifierValues;
    SampledTextureSample_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSample_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSample_TextureCubeArray.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_TextureCubeArray.name = SampledTextureSample_TextureCubeArray_name;
    SampledTextureSample_TextureCubeArray.backendIndex = 2298;
    SampledTextureSample_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_TextureCubeArray.parameters = SampledTextureSample_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray)->signature = "textureSample(uniform *textureSampledCubeArray,f32x4) f32x4"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray)->name = "textureSample(uniform *textureSampledCubeArray,f32x4)"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray)->nameWithVarNames = "textureSample(texture : uniform *textureSampledCubeArray, coordinate : f32x4)"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture1D, Sampler, Float32, Float32
    TextureSampleOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleOffset_Texture1D_texture.type.modifiers = TextureSampleOffset_Texture1D_texture_modifiers;
    TextureSampleOffset_Texture1D_texture.type.modifierValues = TextureSampleOffset_Texture1D_texture_modifierValues;
    TextureSampleOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture1D_sampler.type.modifiers = TextureSampleOffset_Texture1D_sampler_modifiers;
    TextureSampleOffset_Texture1D_sampler.type.modifierValues = TextureSampleOffset_Texture1D_sampler_modifierValues;
    TextureSampleOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleOffset_Texture1D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    TextureSampleOffset_Texture1D.name = TextureSampleOffset_Texture1D_name;
    TextureSampleOffset_Texture1D.backendIndex = 2299;
    TextureSampleOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture1D.parameters = TextureSampleOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1D)->signature = "textureSampleOffset(uniform *texture1D,uniform *sampler,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1D)->name = "textureSampleOffset(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1D)->nameWithVarNames = "textureSampleOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with SampledTexture1D, Float32, Float32
    SampledTextureSampleOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleOffset_Texture1D_texture.type.modifiers = SampledTextureSampleOffset_Texture1D_texture_modifiers;
    SampledTextureSampleOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleOffset_Texture1D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    SampledTextureSampleOffset_Texture1D.name = SampledTextureSampleOffset_Texture1D_name;
    SampledTextureSampleOffset_Texture1D.backendIndex = 2300;
    SampledTextureSampleOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture1D.parameters = SampledTextureSampleOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D)->signature = "textureSampleOffset(uniform *textureSampled1D,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D)->name = "textureSampleOffset(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D)->nameWithVarNames = "textureSampleOffset(texture : uniform *textureSampled1D, coordinate : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture2D, Sampler, Float32x2, Float32x2
    TextureSampleOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleOffset_Texture2D_texture.type.modifiers = TextureSampleOffset_Texture2D_texture_modifiers;
    TextureSampleOffset_Texture2D_texture.type.modifierValues = TextureSampleOffset_Texture2D_texture_modifierValues;
    TextureSampleOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture2D_sampler.type.modifiers = TextureSampleOffset_Texture2D_sampler_modifiers;
    TextureSampleOffset_Texture2D_sampler.type.modifierValues = TextureSampleOffset_Texture2D_sampler_modifierValues;
    TextureSampleOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture2D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    TextureSampleOffset_Texture2D.name = TextureSampleOffset_Texture2D_name;
    TextureSampleOffset_Texture2D.backendIndex = 2301;
    TextureSampleOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture2D.parameters = TextureSampleOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2D)->signature = "textureSampleOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2D)->name = "textureSampleOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2D)->nameWithVarNames = "textureSampleOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with SampledTexture2D, Float32x2, Float32x2
    SampledTextureSampleOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleOffset_Texture2D_texture.type.modifiers = SampledTextureSampleOffset_Texture2D_texture_modifiers;
    SampledTextureSampleOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture2D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    SampledTextureSampleOffset_Texture2D.name = SampledTextureSampleOffset_Texture2D_name;
    SampledTextureSampleOffset_Texture2D.backendIndex = 2302;
    SampledTextureSampleOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture2D.parameters = SampledTextureSampleOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D)->signature = "textureSampleOffset(uniform *textureSampled2D,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D)->name = "textureSampleOffset(uniform *textureSampled2D,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D)->nameWithVarNames = "textureSampleOffset(texture : uniform *textureSampled2D, coordinate : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture3D, Sampler, Float32x3, Float32x3
    TextureSampleOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleOffset_Texture3D_texture.type.modifiers = TextureSampleOffset_Texture3D_texture_modifiers;
    TextureSampleOffset_Texture3D_texture.type.modifierValues = TextureSampleOffset_Texture3D_texture_modifierValues;
    TextureSampleOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture3D_sampler.type.modifiers = TextureSampleOffset_Texture3D_sampler_modifiers;
    TextureSampleOffset_Texture3D_sampler.type.modifierValues = TextureSampleOffset_Texture3D_sampler_modifierValues;
    TextureSampleOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture3D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    TextureSampleOffset_Texture3D.name = TextureSampleOffset_Texture3D_name;
    TextureSampleOffset_Texture3D.backendIndex = 2303;
    TextureSampleOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture3D.parameters = TextureSampleOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture3D)->signature = "textureSampleOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture3D)->name = "textureSampleOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture3D)->nameWithVarNames = "textureSampleOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with SampledTexture3D, Float32x3, Float32x3
    SampledTextureSampleOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleOffset_Texture3D_texture.type.modifiers = SampledTextureSampleOffset_Texture3D_texture_modifiers;
    SampledTextureSampleOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture3D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    SampledTextureSampleOffset_Texture3D.name = SampledTextureSampleOffset_Texture3D_name;
    SampledTextureSampleOffset_Texture3D.backendIndex = 2304;
    SampledTextureSampleOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture3D.parameters = SampledTextureSampleOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D)->signature = "textureSampleOffset(uniform *textureSampled3D,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D)->name = "textureSampleOffset(uniform *textureSampled3D,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D)->nameWithVarNames = "textureSampleOffset(texture : uniform *textureSampled3D, coordinate : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture1DArray, Sampler, Float32x2, Float32x2
    TextureSampleOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleOffset_Texture1DArray_texture.type.modifiers = TextureSampleOffset_Texture1DArray_texture_modifiers;
    TextureSampleOffset_Texture1DArray_texture.type.modifierValues = TextureSampleOffset_Texture1DArray_texture_modifierValues;
    TextureSampleOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture1DArray_sampler.type.modifiers = TextureSampleOffset_Texture1DArray_sampler_modifiers;
    TextureSampleOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture1DArray.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    TextureSampleOffset_Texture1DArray.name = TextureSampleOffset_Texture1DArray_name;
    TextureSampleOffset_Texture1DArray.backendIndex = 2305;
    TextureSampleOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture1DArray.parameters = TextureSampleOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray)->signature = "textureSampleOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray)->name = "textureSampleOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray)->nameWithVarNames = "textureSampleOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with SampledTexture1DArray, Float32x2, Float32x2
    SampledTextureSampleOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture1DArray.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    SampledTextureSampleOffset_Texture1DArray.name = SampledTextureSampleOffset_Texture1DArray_name;
    SampledTextureSampleOffset_Texture1DArray.backendIndex = 2306;
    SampledTextureSampleOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture1DArray.parameters = SampledTextureSampleOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray)->signature = "textureSampleOffset(uniform *textureSampled1DArray,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray)->name = "textureSampleOffset(uniform *textureSampled1DArray,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray)->nameWithVarNames = "textureSampleOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture2DArray, Sampler, Float32x3, Float32x3
    TextureSampleOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleOffset_Texture2DArray_texture.type.modifiers = TextureSampleOffset_Texture2DArray_texture_modifiers;
    TextureSampleOffset_Texture2DArray_texture.type.modifierValues = TextureSampleOffset_Texture2DArray_texture_modifierValues;
    TextureSampleOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture2DArray_sampler.type.modifiers = TextureSampleOffset_Texture2DArray_sampler_modifiers;
    TextureSampleOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture2DArray.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    TextureSampleOffset_Texture2DArray.name = TextureSampleOffset_Texture2DArray_name;
    TextureSampleOffset_Texture2DArray.backendIndex = 2307;
    TextureSampleOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture2DArray.parameters = TextureSampleOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray)->signature = "textureSampleOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray)->name = "textureSampleOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray)->nameWithVarNames = "textureSampleOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with SampledTexture2DArray, Float32x3, Float32x3
    SampledTextureSampleOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture2DArray.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    SampledTextureSampleOffset_Texture2DArray.name = SampledTextureSampleOffset_Texture2DArray_name;
    SampledTextureSampleOffset_Texture2DArray.backendIndex = 2308;
    SampledTextureSampleOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture2DArray.parameters = SampledTextureSampleOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray)->signature = "textureSampleOffset(uniform *textureSampled2DArray,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray)->name = "textureSampleOffset(uniform *textureSampled2DArray,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray)->nameWithVarNames = "textureSampleOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with Texture1D, Sampler, Float32, Float32
    TextureSampleProj_Texture1D_texture.name = "texture"_c;
    TextureSampleProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProj_Texture1D_texture.type.modifiers = TextureSampleProj_Texture1D_texture_modifiers;
    TextureSampleProj_Texture1D_texture.type.modifierValues = TextureSampleProj_Texture1D_texture_modifierValues;
    TextureSampleProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProj_Texture1D_sampler.type.modifiers = TextureSampleProj_Texture1D_sampler_modifiers;
    TextureSampleProj_Texture1D_sampler.type.modifierValues = TextureSampleProj_Texture1D_sampler_modifierValues;
    TextureSampleProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture1D_proj.name = "proj"_c;
    TextureSampleProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture1D.documentation = "Sample a texture at coordinate with projection"_c;
    TextureSampleProj_Texture1D.name = TextureSampleProj_Texture1D_name;
    TextureSampleProj_Texture1D.backendIndex = 2309;
    TextureSampleProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProj_Texture1D.parameters = TextureSampleProj_Texture1D_args;
    Symbol::Resolved(&TextureSampleProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProj_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture1D)->signature = "textureSampleProj(uniform *texture1D,uniform *sampler,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleProj_Texture1D)->name = "textureSampleProj(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture1D)->nameWithVarNames = "textureSampleProj(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with SampledTexture1D, Float32, Float32
    SampledTextureSampleProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProj_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleProj_Texture1D_texture.type.modifiers = SampledTextureSampleProj_Texture1D_texture_modifiers;
    SampledTextureSampleProj_Texture1D_texture.type.modifierValues = SampledTextureSampleProj_Texture1D_texture_modifierValues;
    SampledTextureSampleProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture1D.documentation = "Sample a texture at coordinate with projection"_c;
    SampledTextureSampleProj_Texture1D.name = SampledTextureSampleProj_Texture1D_name;
    SampledTextureSampleProj_Texture1D.backendIndex = 2310;
    SampledTextureSampleProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProj_Texture1D.parameters = SampledTextureSampleProj_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D)->signature = "textureSampleProj(uniform *textureSampled1D,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D)->name = "textureSampleProj(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D)->nameWithVarNames = "textureSampleProj(texture : uniform *textureSampled1D, coordinate : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with Texture2D, Sampler, Float32x2, Float32
    TextureSampleProj_Texture2D_texture.name = "texture"_c;
    TextureSampleProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProj_Texture2D_texture.type.modifiers = TextureSampleProj_Texture2D_texture_modifiers;
    TextureSampleProj_Texture2D_texture.type.modifierValues = TextureSampleProj_Texture2D_texture_modifierValues;
    TextureSampleProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProj_Texture2D_sampler.type.modifiers = TextureSampleProj_Texture2D_sampler_modifiers;
    TextureSampleProj_Texture2D_sampler.type.modifierValues = TextureSampleProj_Texture2D_sampler_modifierValues;
    TextureSampleProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProj_Texture2D_proj.name = "proj"_c;
    TextureSampleProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture2D.documentation = "Sample a texture at coordinate with projection"_c;
    TextureSampleProj_Texture2D.name = TextureSampleProj_Texture2D_name;
    TextureSampleProj_Texture2D.backendIndex = 2311;
    TextureSampleProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProj_Texture2D.parameters = TextureSampleProj_Texture2D_args;
    Symbol::Resolved(&TextureSampleProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProj_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture2D)->signature = "textureSampleProj(uniform *texture2D,uniform *sampler,f32x2,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleProj_Texture2D)->name = "textureSampleProj(uniform *texture2D,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture2D)->nameWithVarNames = "textureSampleProj(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with SampledTexture2D, Float32x2, Float32
    SampledTextureSampleProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProj_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleProj_Texture2D_texture.type.modifiers = SampledTextureSampleProj_Texture2D_texture_modifiers;
    SampledTextureSampleProj_Texture2D_texture.type.modifierValues = SampledTextureSampleProj_Texture2D_texture_modifierValues;
    SampledTextureSampleProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture2D.documentation = "Sample a texture at coordinate with projection"_c;
    SampledTextureSampleProj_Texture2D.name = SampledTextureSampleProj_Texture2D_name;
    SampledTextureSampleProj_Texture2D.backendIndex = 2312;
    SampledTextureSampleProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProj_Texture2D.parameters = SampledTextureSampleProj_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D)->signature = "textureSampleProj(uniform *textureSampled2D,f32x2,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D)->name = "textureSampleProj(uniform *textureSampled2D,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D)->nameWithVarNames = "textureSampleProj(texture : uniform *textureSampled2D, coordinate : f32x2, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with Texture3D, Sampler, Float32x3, Float32
    TextureSampleProj_Texture3D_texture.name = "texture"_c;
    TextureSampleProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProj_Texture3D_texture.type.modifiers = TextureSampleProj_Texture3D_texture_modifiers;
    TextureSampleProj_Texture3D_texture.type.modifierValues = TextureSampleProj_Texture3D_texture_modifierValues;
    TextureSampleProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProj_Texture3D_sampler.type.modifiers = TextureSampleProj_Texture3D_sampler_modifiers;
    TextureSampleProj_Texture3D_sampler.type.modifierValues = TextureSampleProj_Texture3D_sampler_modifierValues;
    TextureSampleProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProj_Texture3D_proj.name = "proj"_c;
    TextureSampleProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture3D.documentation = "Sample a texture at coordinate with projection"_c;
    TextureSampleProj_Texture3D.name = TextureSampleProj_Texture3D_name;
    TextureSampleProj_Texture3D.backendIndex = 2313;
    TextureSampleProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProj_Texture3D.parameters = TextureSampleProj_Texture3D_args;
    Symbol::Resolved(&TextureSampleProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProj_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture3D)->signature = "textureSampleProj(uniform *texture3D,uniform *sampler,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleProj_Texture3D)->name = "textureSampleProj(uniform *texture3D,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture3D)->nameWithVarNames = "textureSampleProj(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with SampledTexture3D, Float32x3, Float32
    SampledTextureSampleProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProj_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleProj_Texture3D_texture.type.modifiers = SampledTextureSampleProj_Texture3D_texture_modifiers;
    SampledTextureSampleProj_Texture3D_texture.type.modifierValues = SampledTextureSampleProj_Texture3D_texture_modifierValues;
    SampledTextureSampleProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture3D.documentation = "Sample a texture at coordinate with projection"_c;
    SampledTextureSampleProj_Texture3D.name = SampledTextureSampleProj_Texture3D_name;
    SampledTextureSampleProj_Texture3D.backendIndex = 2314;
    SampledTextureSampleProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProj_Texture3D.parameters = SampledTextureSampleProj_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D)->signature = "textureSampleProj(uniform *textureSampled3D,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D)->name = "textureSampleProj(uniform *textureSampled3D,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D)->nameWithVarNames = "textureSampleProj(texture : uniform *textureSampled3D, coordinate : f32x3, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleProjOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProjOffset_Texture1D_texture.type.modifiers = TextureSampleProjOffset_Texture1D_texture_modifiers;
    TextureSampleProjOffset_Texture1D_texture.type.modifierValues = TextureSampleProjOffset_Texture1D_texture_modifierValues;
    TextureSampleProjOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProjOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjOffset_Texture1D_sampler.type.modifiers = TextureSampleProjOffset_Texture1D_sampler_modifiers;
    TextureSampleProjOffset_Texture1D_sampler.type.modifierValues = TextureSampleProjOffset_Texture1D_sampler_modifierValues;
    TextureSampleProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture1D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    TextureSampleProjOffset_Texture1D.name = TextureSampleProjOffset_Texture1D_name;
    TextureSampleProjOffset_Texture1D.backendIndex = 2315;
    TextureSampleProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjOffset_Texture1D.parameters = TextureSampleProjOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D)->signature = "textureSampleProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D)->name = "textureSampleProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleProjOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProjOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleProjOffset_Texture1D_texture.type.modifiers = SampledTextureSampleProjOffset_Texture1D_texture_modifiers;
    SampledTextureSampleProjOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleProjOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture1D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleProjOffset_Texture1D.name = SampledTextureSampleProjOffset_Texture1D_name;
    SampledTextureSampleProjOffset_Texture1D.backendIndex = 2316;
    SampledTextureSampleProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjOffset_Texture1D.parameters = SampledTextureSampleProjOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D)->signature = "textureSampleProjOffset(uniform *textureSampled1D,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D)->name = "textureSampleProjOffset(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *textureSampled1D, coordinate : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
    TextureSampleProjOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProjOffset_Texture2D_texture.type.modifiers = TextureSampleProjOffset_Texture2D_texture_modifiers;
    TextureSampleProjOffset_Texture2D_texture.type.modifierValues = TextureSampleProjOffset_Texture2D_texture_modifierValues;
    TextureSampleProjOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProjOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjOffset_Texture2D_sampler.type.modifiers = TextureSampleProjOffset_Texture2D_sampler_modifiers;
    TextureSampleProjOffset_Texture2D_sampler.type.modifierValues = TextureSampleProjOffset_Texture2D_sampler_modifierValues;
    TextureSampleProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjOffset_Texture2D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    TextureSampleProjOffset_Texture2D.name = TextureSampleProjOffset_Texture2D_name;
    TextureSampleProjOffset_Texture2D.backendIndex = 2317;
    TextureSampleProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjOffset_Texture2D.parameters = TextureSampleProjOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D)->signature = "textureSampleProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D)->name = "textureSampleProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with SampledTexture2D, Float32x2, Float32, Float32x2
    SampledTextureSampleProjOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProjOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleProjOffset_Texture2D_texture.type.modifiers = SampledTextureSampleProjOffset_Texture2D_texture_modifiers;
    SampledTextureSampleProjOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleProjOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjOffset_Texture2D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleProjOffset_Texture2D.name = SampledTextureSampleProjOffset_Texture2D_name;
    SampledTextureSampleProjOffset_Texture2D.backendIndex = 2318;
    SampledTextureSampleProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjOffset_Texture2D.parameters = SampledTextureSampleProjOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D)->signature = "textureSampleProjOffset(uniform *textureSampled2D,f32x2,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D)->name = "textureSampleProjOffset(uniform *textureSampled2D,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *textureSampled2D, coordinate : f32x2, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
    TextureSampleProjOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProjOffset_Texture3D_texture.type.modifiers = TextureSampleProjOffset_Texture3D_texture_modifiers;
    TextureSampleProjOffset_Texture3D_texture.type.modifierValues = TextureSampleProjOffset_Texture3D_texture_modifierValues;
    TextureSampleProjOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProjOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjOffset_Texture3D_sampler.type.modifiers = TextureSampleProjOffset_Texture3D_sampler_modifiers;
    TextureSampleProjOffset_Texture3D_sampler.type.modifierValues = TextureSampleProjOffset_Texture3D_sampler_modifierValues;
    TextureSampleProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjOffset_Texture3D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    TextureSampleProjOffset_Texture3D.name = TextureSampleProjOffset_Texture3D_name;
    TextureSampleProjOffset_Texture3D.backendIndex = 2319;
    TextureSampleProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjOffset_Texture3D.parameters = TextureSampleProjOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D)->signature = "textureSampleProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D)->name = "textureSampleProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with SampledTexture3D, Float32x3, Float32, Float32x3
    SampledTextureSampleProjOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProjOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleProjOffset_Texture3D_texture.type.modifiers = SampledTextureSampleProjOffset_Texture3D_texture_modifiers;
    SampledTextureSampleProjOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleProjOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjOffset_Texture3D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleProjOffset_Texture3D.name = SampledTextureSampleProjOffset_Texture3D_name;
    SampledTextureSampleProjOffset_Texture3D.backendIndex = 2320;
    SampledTextureSampleProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjOffset_Texture3D.parameters = SampledTextureSampleProjOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D)->signature = "textureSampleProjOffset(uniform *textureSampled3D,f32x3,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D)->name = "textureSampleProjOffset(uniform *textureSampled3D,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *textureSampled3D, coordinate : f32x3, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompare with Texture1D, Sampler, Float32, Float32
    TextureSampleCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleCompare_Texture1D_texture.type.modifiers = TextureSampleCompare_Texture1D_texture_modifiers;
    TextureSampleCompare_Texture1D_texture.type.modifierValues = TextureSampleCompare_Texture1D_texture_modifierValues;
    TextureSampleCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture1D_sampler.type.modifiers = TextureSampleCompare_Texture1D_sampler_modifiers;
    TextureSampleCompare_Texture1D_sampler.type.modifierValues = TextureSampleCompare_Texture1D_sampler_modifierValues;
    TextureSampleCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture1D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    TextureSampleCompare_Texture1D.name = TextureSampleCompare_Texture1D_name;
    TextureSampleCompare_Texture1D.backendIndex = 2321;
    TextureSampleCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompare_Texture1D.parameters = TextureSampleCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1D)->signature = "textureSampleCompare(uniform *texture1D,uniform *sampler,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1D)->name = "textureSampleCompare(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1D)->nameWithVarNames = "textureSampleCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with SampledTexture1D, Float32, Float32
    SampledTextureSampleCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleCompare_Texture1D_texture.type.modifiers = SampledTextureSampleCompare_Texture1D_texture_modifiers;
    SampledTextureSampleCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture1D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    SampledTextureSampleCompare_Texture1D.name = SampledTextureSampleCompare_Texture1D_name;
    SampledTextureSampleCompare_Texture1D.backendIndex = 2322;
    SampledTextureSampleCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompare_Texture1D.parameters = SampledTextureSampleCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D)->signature = "textureSampleCompare(uniform *textureSampled1D,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D)->name = "textureSampleCompare(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D)->nameWithVarNames = "textureSampleCompare(texture : uniform *textureSampled1D, coordinate : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with Texture2D, Sampler, Float32x2, Float32
    TextureSampleCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleCompare_Texture2D_texture.type.modifiers = TextureSampleCompare_Texture2D_texture_modifiers;
    TextureSampleCompare_Texture2D_texture.type.modifierValues = TextureSampleCompare_Texture2D_texture_modifierValues;
    TextureSampleCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture2D_sampler.type.modifiers = TextureSampleCompare_Texture2D_sampler_modifiers;
    TextureSampleCompare_Texture2D_sampler.type.modifierValues = TextureSampleCompare_Texture2D_sampler_modifierValues;
    TextureSampleCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture2D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    TextureSampleCompare_Texture2D.name = TextureSampleCompare_Texture2D_name;
    TextureSampleCompare_Texture2D.backendIndex = 2323;
    TextureSampleCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompare_Texture2D.parameters = TextureSampleCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2D)->signature = "textureSampleCompare(uniform *texture2D,uniform *sampler,f32x2,f32) f32"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2D)->name = "textureSampleCompare(uniform *texture2D,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2D)->nameWithVarNames = "textureSampleCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with SampledTexture2D, Float32x2, Float32
    SampledTextureSampleCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleCompare_Texture2D_texture.type.modifiers = SampledTextureSampleCompare_Texture2D_texture_modifiers;
    SampledTextureSampleCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture2D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    SampledTextureSampleCompare_Texture2D.name = SampledTextureSampleCompare_Texture2D_name;
    SampledTextureSampleCompare_Texture2D.backendIndex = 2324;
    SampledTextureSampleCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompare_Texture2D.parameters = SampledTextureSampleCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D)->signature = "textureSampleCompare(uniform *textureSampled2D,f32x2,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D)->name = "textureSampleCompare(uniform *textureSampled2D,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D)->nameWithVarNames = "textureSampleCompare(texture : uniform *textureSampled2D, coordinate : f32x2, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with Texture3D, Sampler, Float32x3, Float32
    TextureSampleCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleCompare_Texture3D_texture.type.modifiers = TextureSampleCompare_Texture3D_texture_modifiers;
    TextureSampleCompare_Texture3D_texture.type.modifierValues = TextureSampleCompare_Texture3D_texture_modifierValues;
    TextureSampleCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture3D_sampler.type.modifiers = TextureSampleCompare_Texture3D_sampler_modifiers;
    TextureSampleCompare_Texture3D_sampler.type.modifierValues = TextureSampleCompare_Texture3D_sampler_modifierValues;
    TextureSampleCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture3D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    TextureSampleCompare_Texture3D.name = TextureSampleCompare_Texture3D_name;
    TextureSampleCompare_Texture3D.backendIndex = 2325;
    TextureSampleCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompare_Texture3D.parameters = TextureSampleCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture3D)->signature = "textureSampleCompare(uniform *texture3D,uniform *sampler,f32x3,f32) f32"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture3D)->name = "textureSampleCompare(uniform *texture3D,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture3D)->nameWithVarNames = "textureSampleCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with SampledTexture3D, Float32x3, Float32
    SampledTextureSampleCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleCompare_Texture3D_texture.type.modifiers = SampledTextureSampleCompare_Texture3D_texture_modifiers;
    SampledTextureSampleCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture3D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    SampledTextureSampleCompare_Texture3D.name = SampledTextureSampleCompare_Texture3D_name;
    SampledTextureSampleCompare_Texture3D.backendIndex = 2326;
    SampledTextureSampleCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompare_Texture3D.parameters = SampledTextureSampleCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D)->signature = "textureSampleCompare(uniform *textureSampled3D,f32x3,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D)->name = "textureSampleCompare(uniform *textureSampled3D,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D)->nameWithVarNames = "textureSampleCompare(texture : uniform *textureSampled3D, coordinate : f32x3, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with Texture1DArray, Sampler, Float32x2, Float32
    TextureSampleCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleCompare_Texture1DArray_texture.type.modifiers = TextureSampleCompare_Texture1DArray_texture_modifiers;
    TextureSampleCompare_Texture1DArray_texture.type.modifierValues = TextureSampleCompare_Texture1DArray_texture_modifierValues;
    TextureSampleCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture1DArray_sampler.type.modifiers = TextureSampleCompare_Texture1DArray_sampler_modifiers;
    TextureSampleCompare_Texture1DArray_sampler.type.modifierValues = TextureSampleCompare_Texture1DArray_sampler_modifierValues;
    TextureSampleCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture1DArray.documentation = "Sample a texture at coordinate with depth comparison"_c;
    TextureSampleCompare_Texture1DArray.name = TextureSampleCompare_Texture1DArray_name;
    TextureSampleCompare_Texture1DArray.backendIndex = 2327;
    TextureSampleCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompare_Texture1DArray.parameters = TextureSampleCompare_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray)->signature = "textureSampleCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32) f32"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray)->name = "textureSampleCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray)->nameWithVarNames = "textureSampleCompare(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with SampledTexture1DArray, Float32x2, Float32
    SampledTextureSampleCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleCompare_Texture1DArray_texture.type.modifiers = SampledTextureSampleCompare_Texture1DArray_texture_modifiers;
    SampledTextureSampleCompare_Texture1DArray_texture.type.modifierValues = SampledTextureSampleCompare_Texture1DArray_texture_modifierValues;
    SampledTextureSampleCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture1DArray.documentation = "Sample a texture at coordinate with depth comparison"_c;
    SampledTextureSampleCompare_Texture1DArray.name = SampledTextureSampleCompare_Texture1DArray_name;
    SampledTextureSampleCompare_Texture1DArray.backendIndex = 2328;
    SampledTextureSampleCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompare_Texture1DArray.parameters = SampledTextureSampleCompare_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray)->signature = "textureSampleCompare(uniform *textureSampled1DArray,f32x2,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray)->name = "textureSampleCompare(uniform *textureSampled1DArray,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray)->nameWithVarNames = "textureSampleCompare(texture : uniform *textureSampled1DArray, coordinate : f32x2, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with Texture2DArray, Sampler, Float32x3, Float32
    TextureSampleCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleCompare_Texture2DArray_texture.type.modifiers = TextureSampleCompare_Texture2DArray_texture_modifiers;
    TextureSampleCompare_Texture2DArray_texture.type.modifierValues = TextureSampleCompare_Texture2DArray_texture_modifierValues;
    TextureSampleCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture2DArray_sampler.type.modifiers = TextureSampleCompare_Texture2DArray_sampler_modifiers;
    TextureSampleCompare_Texture2DArray_sampler.type.modifierValues = TextureSampleCompare_Texture2DArray_sampler_modifierValues;
    TextureSampleCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture2DArray.documentation = "Sample a texture at coordinate with depth comparison"_c;
    TextureSampleCompare_Texture2DArray.name = TextureSampleCompare_Texture2DArray_name;
    TextureSampleCompare_Texture2DArray.backendIndex = 2329;
    TextureSampleCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompare_Texture2DArray.parameters = TextureSampleCompare_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray)->signature = "textureSampleCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32) f32"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray)->name = "textureSampleCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray)->nameWithVarNames = "textureSampleCompare(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with SampledTexture2DArray, Float32x3, Float32
    SampledTextureSampleCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleCompare_Texture2DArray_texture.type.modifiers = SampledTextureSampleCompare_Texture2DArray_texture_modifiers;
    SampledTextureSampleCompare_Texture2DArray_texture.type.modifierValues = SampledTextureSampleCompare_Texture2DArray_texture_modifierValues;
    SampledTextureSampleCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture2DArray.documentation = "Sample a texture at coordinate with depth comparison"_c;
    SampledTextureSampleCompare_Texture2DArray.name = SampledTextureSampleCompare_Texture2DArray_name;
    SampledTextureSampleCompare_Texture2DArray.backendIndex = 2330;
    SampledTextureSampleCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompare_Texture2DArray.parameters = SampledTextureSampleCompare_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray)->signature = "textureSampleCompare(uniform *textureSampled2DArray,f32x3,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray)->name = "textureSampleCompare(uniform *textureSampled2DArray,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray)->nameWithVarNames = "textureSampleCompare(texture : uniform *textureSampled2DArray, coordinate : f32x3, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleCompareOffset_Texture1D_texture.type.modifiers = TextureSampleCompareOffset_Texture1D_texture_modifiers;
    TextureSampleCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleCompareOffset_Texture1D.name = TextureSampleCompareOffset_Texture1D_name;
    TextureSampleCompareOffset_Texture1D.backendIndex = 2331;
    TextureSampleCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompareOffset_Texture1D.parameters = TextureSampleCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D)->signature = "textureSampleCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D)->name = "textureSampleCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleCompareOffset_Texture1D.name = SampledTextureSampleCompareOffset_Texture1D_name;
    SampledTextureSampleCompareOffset_Texture1D.backendIndex = 2332;
    SampledTextureSampleCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1D.parameters = SampledTextureSampleCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D)->signature = "textureSampleCompareOffset(uniform *textureSampled1D,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D)->name = "textureSampleCompareOffset(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
    TextureSampleCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleCompareOffset_Texture2D_texture.type.modifiers = TextureSampleCompareOffset_Texture2D_texture_modifiers;
    TextureSampleCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleCompareOffset_Texture2D.name = TextureSampleCompareOffset_Texture2D_name;
    TextureSampleCompareOffset_Texture2D.backendIndex = 2333;
    TextureSampleCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompareOffset_Texture2D.parameters = TextureSampleCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D)->signature = "textureSampleCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2) f32"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D)->name = "textureSampleCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with SampledTexture2D, Float32x2, Float32, Float32x2
    SampledTextureSampleCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleCompareOffset_Texture2D.name = SampledTextureSampleCompareOffset_Texture2D_name;
    SampledTextureSampleCompareOffset_Texture2D.backendIndex = 2334;
    SampledTextureSampleCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompareOffset_Texture2D.parameters = SampledTextureSampleCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D)->signature = "textureSampleCompareOffset(uniform *textureSampled2D,f32x2,f32,f32x2) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D)->name = "textureSampleCompareOffset(uniform *textureSampled2D,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
    TextureSampleCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleCompareOffset_Texture3D_texture.type.modifiers = TextureSampleCompareOffset_Texture3D_texture_modifiers;
    TextureSampleCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleCompareOffset_Texture3D.name = TextureSampleCompareOffset_Texture3D_name;
    TextureSampleCompareOffset_Texture3D.backendIndex = 2335;
    TextureSampleCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompareOffset_Texture3D.parameters = TextureSampleCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D)->signature = "textureSampleCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3) f32"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D)->name = "textureSampleCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with SampledTexture3D, Float32x3, Float32, Float32x3
    SampledTextureSampleCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleCompareOffset_Texture3D.name = SampledTextureSampleCompareOffset_Texture3D_name;
    SampledTextureSampleCompareOffset_Texture3D.backendIndex = 2336;
    SampledTextureSampleCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompareOffset_Texture3D.parameters = SampledTextureSampleCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D)->signature = "textureSampleCompareOffset(uniform *textureSampled3D,f32x3,f32,f32x3) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D)->name = "textureSampleCompareOffset(uniform *textureSampled3D,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
    TextureSampleCompareOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleCompareOffset_Texture1DArray_texture.type.modifiers = TextureSampleCompareOffset_Texture1DArray_texture_modifiers;
    TextureSampleCompareOffset_Texture1DArray_texture.type.modifierValues = TextureSampleCompareOffset_Texture1DArray_texture_modifierValues;
    TextureSampleCompareOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture1DArray_sampler.type.modifiers = TextureSampleCompareOffset_Texture1DArray_sampler_modifiers;
    TextureSampleCompareOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleCompareOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture1DArray_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleCompareOffset_Texture1DArray.name = TextureSampleCompareOffset_Texture1DArray_name;
    TextureSampleCompareOffset_Texture1DArray.backendIndex = 2337;
    TextureSampleCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompareOffset_Texture1DArray.parameters = TextureSampleCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray)->signature = "textureSampleCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32x2) f32"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray)->name = "textureSampleCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with SampledTexture1DArray, Float32x2, Float32, Float32x2
    SampledTextureSampleCompareOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleCompareOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleCompareOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleCompareOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleCompareOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleCompareOffset_Texture1DArray.name = SampledTextureSampleCompareOffset_Texture1DArray_name;
    SampledTextureSampleCompareOffset_Texture1DArray.backendIndex = 2338;
    SampledTextureSampleCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray.parameters = SampledTextureSampleCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray)->signature = "textureSampleCompareOffset(uniform *textureSampled1DArray,f32x2,f32,f32x2) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray)->name = "textureSampleCompareOffset(uniform *textureSampled1DArray,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
    TextureSampleCompareOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleCompareOffset_Texture2DArray_texture.type.modifiers = TextureSampleCompareOffset_Texture2DArray_texture_modifiers;
    TextureSampleCompareOffset_Texture2DArray_texture.type.modifierValues = TextureSampleCompareOffset_Texture2DArray_texture_modifierValues;
    TextureSampleCompareOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture2DArray_sampler.type.modifiers = TextureSampleCompareOffset_Texture2DArray_sampler_modifiers;
    TextureSampleCompareOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleCompareOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture2DArray_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleCompareOffset_Texture2DArray.name = TextureSampleCompareOffset_Texture2DArray_name;
    TextureSampleCompareOffset_Texture2DArray.backendIndex = 2339;
    TextureSampleCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompareOffset_Texture2DArray.parameters = TextureSampleCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray)->signature = "textureSampleCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32x3) f32"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray)->name = "textureSampleCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with SampledTexture2DArray, Float32x3, Float32, Float32x3
    SampledTextureSampleCompareOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleCompareOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleCompareOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleCompareOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleCompareOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleCompareOffset_Texture2DArray.name = SampledTextureSampleCompareOffset_Texture2DArray_name;
    SampledTextureSampleCompareOffset_Texture2DArray.backendIndex = 2340;
    SampledTextureSampleCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray.parameters = SampledTextureSampleCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray)->signature = "textureSampleCompareOffset(uniform *textureSampled2DArray,f32x3,f32,f32x3) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray)->name = "textureSampleCompareOffset(uniform *textureSampled2DArray,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProjCompare_Texture1D_texture.type.modifiers = TextureSampleProjCompare_Texture1D_texture_modifiers;
    TextureSampleProjCompare_Texture1D_texture.type.modifierValues = TextureSampleProjCompare_Texture1D_texture_modifierValues;
    TextureSampleProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompare_Texture1D_sampler.type.modifiers = TextureSampleProjCompare_Texture1D_sampler_modifiers;
    TextureSampleProjCompare_Texture1D_sampler.type.modifierValues = TextureSampleProjCompare_Texture1D_sampler_modifierValues;
    TextureSampleProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture1D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    TextureSampleProjCompare_Texture1D.name = TextureSampleProjCompare_Texture1D_name;
    TextureSampleProjCompare_Texture1D.backendIndex = 2341;
    TextureSampleProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleProjCompare_Texture1D.parameters = TextureSampleProjCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D)->signature = "textureSampleProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D)->name = "textureSampleProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProjCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleProjCompare_Texture1D_texture.type.modifiers = SampledTextureSampleProjCompare_Texture1D_texture_modifiers;
    SampledTextureSampleProjCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleProjCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    SampledTextureSampleProjCompare_Texture1D.name = SampledTextureSampleProjCompare_Texture1D_name;
    SampledTextureSampleProjCompare_Texture1D.backendIndex = 2342;
    SampledTextureSampleProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D.parameters = SampledTextureSampleProjCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D)->signature = "textureSampleProjCompare(uniform *textureSampled1D,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D)->name = "textureSampleProjCompare(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *textureSampled1D, coordinate : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProjCompare_Texture2D_texture.type.modifiers = TextureSampleProjCompare_Texture2D_texture_modifiers;
    TextureSampleProjCompare_Texture2D_texture.type.modifierValues = TextureSampleProjCompare_Texture2D_texture_modifierValues;
    TextureSampleProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompare_Texture2D_sampler.type.modifiers = TextureSampleProjCompare_Texture2D_sampler_modifiers;
    TextureSampleProjCompare_Texture2D_sampler.type.modifierValues = TextureSampleProjCompare_Texture2D_sampler_modifierValues;
    TextureSampleProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture2D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    TextureSampleProjCompare_Texture2D.name = TextureSampleProjCompare_Texture2D_name;
    TextureSampleProjCompare_Texture2D.backendIndex = 2343;
    TextureSampleProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleProjCompare_Texture2D.parameters = TextureSampleProjCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D)->signature = "textureSampleProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D)->name = "textureSampleProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with SampledTexture2D, Float32x2, Float32, Float32
    SampledTextureSampleProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProjCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleProjCompare_Texture2D_texture.type.modifiers = SampledTextureSampleProjCompare_Texture2D_texture_modifiers;
    SampledTextureSampleProjCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleProjCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture2D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    SampledTextureSampleProjCompare_Texture2D.name = SampledTextureSampleProjCompare_Texture2D_name;
    SampledTextureSampleProjCompare_Texture2D.backendIndex = 2344;
    SampledTextureSampleProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleProjCompare_Texture2D.parameters = SampledTextureSampleProjCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D)->signature = "textureSampleProjCompare(uniform *textureSampled2D,f32x2,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D)->name = "textureSampleProjCompare(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *textureSampled2D, coordinate : f32x2, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

}
} // namespace GPULang
