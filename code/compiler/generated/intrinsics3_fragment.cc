//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// i16x4 with Float32x4
Variable Int16x4_from_Float32x4_arg;
Function Int16x4_from_Float32x4;
inline constexpr std::array Int16x4_from_Float32x4_args = { &Int16x4_from_Float32x4_arg };

/// i16x4 with Float32
Variable Int16x4_splat_Float32_arg;
Function Int16x4_splat_Float32;
inline constexpr std::array Int16x4_splat_Float32_args = { &Int16x4_splat_Float32_arg };

/// i16x4 with UInt32x4
Variable Int16x4_from_UInt32x4_arg;
Function Int16x4_from_UInt32x4;
inline constexpr std::array Int16x4_from_UInt32x4_args = { &Int16x4_from_UInt32x4_arg };

/// i16x4 with UInt32
Variable Int16x4_splat_UInt32_arg;
Function Int16x4_splat_UInt32;
inline constexpr std::array Int16x4_splat_UInt32_args = { &Int16x4_splat_UInt32_arg };

/// i16x4 with Int32x4
Variable Int16x4_from_Int32x4_arg;
Function Int16x4_from_Int32x4;
inline constexpr std::array Int16x4_from_Int32x4_args = { &Int16x4_from_Int32x4_arg };

/// i16x4 with Int32
Variable Int16x4_splat_Int32_arg;
Function Int16x4_splat_Int32;
inline constexpr std::array Int16x4_splat_Int32_args = { &Int16x4_splat_Int32_arg };

/// i16x4 with Bool8x4
Variable Int16x4_from_Bool8x4_arg;
Function Int16x4_from_Bool8x4;
inline constexpr std::array Int16x4_from_Bool8x4_args = { &Int16x4_from_Bool8x4_arg };

/// i16x4 with Bool8
Variable Int16x4_splat_Bool8_arg;
Function Int16x4_splat_Bool8;
inline constexpr std::array Int16x4_splat_Bool8_args = { &Int16x4_splat_Bool8_arg };

/// i16x4 with Float16x4
Variable Int16x4_from_Float16x4_arg;
Function Int16x4_from_Float16x4;
inline constexpr std::array Int16x4_from_Float16x4_args = { &Int16x4_from_Float16x4_arg };

/// i16x4 with Float16
Variable Int16x4_splat_Float16_arg;
Function Int16x4_splat_Float16;
inline constexpr std::array Int16x4_splat_Float16_args = { &Int16x4_splat_Float16_arg };

/// i16x4 with UInt16x4
Variable Int16x4_from_UInt16x4_arg;
Function Int16x4_from_UInt16x4;
inline constexpr std::array Int16x4_from_UInt16x4_args = { &Int16x4_from_UInt16x4_arg };

/// i16x4 with UInt16
Variable Int16x4_splat_UInt16_arg;
Function Int16x4_splat_UInt16;
inline constexpr std::array Int16x4_splat_UInt16_args = { &Int16x4_splat_UInt16_arg };

/// i16x4 with Int16x4
Variable Int16x4_from_Int16x4_arg;
Function Int16x4_from_Int16x4;
inline constexpr std::array Int16x4_from_Int16x4_args = { &Int16x4_from_Int16x4_arg };

/// i16x4 with Int16
Variable Int16x4_splat_Int16_arg;
Function Int16x4_splat_Int16;
inline constexpr std::array Int16x4_splat_Int16_args = { &Int16x4_splat_Int16_arg };

/// i16x4 with Int16, Int16, Int16, Int16
Variable Int16x4_ctor0_arg0_Int16;
Variable Int16x4_ctor0_arg1_Int16;
Variable Int16x4_ctor0_arg2_Int16;
Variable Int16x4_ctor0_arg3_Int16;
Function Int16x4_ctor0;
inline constexpr std::array Int16x4_ctor0_args = { &Int16x4_ctor0_arg0_Int16, &Int16x4_ctor0_arg1_Int16, &Int16x4_ctor0_arg2_Int16, &Int16x4_ctor0_arg3_Int16 };

/// i16x4 with Int16x2, Int16, Int16
Variable Int16x4_ctor1_arg0_Int16x2;
Variable Int16x4_ctor1_arg1_Int16;
Variable Int16x4_ctor1_arg2_Int16;
Function Int16x4_ctor1;
inline constexpr std::array Int16x4_ctor1_args = { &Int16x4_ctor1_arg0_Int16x2, &Int16x4_ctor1_arg1_Int16, &Int16x4_ctor1_arg2_Int16 };

/// i16x4 with Int16, Int16x2, Int16
Variable Int16x4_ctor2_arg0_Int16;
Variable Int16x4_ctor2_arg1_Int16x2;
Variable Int16x4_ctor2_arg2_Int16;
Function Int16x4_ctor2;
inline constexpr std::array Int16x4_ctor2_args = { &Int16x4_ctor2_arg0_Int16, &Int16x4_ctor2_arg1_Int16x2, &Int16x4_ctor2_arg2_Int16 };

/// i16x4 with Int16, Int16, Int16x2
Variable Int16x4_ctor3_arg0_Int16;
Variable Int16x4_ctor3_arg1_Int16;
Variable Int16x4_ctor3_arg2_Int16x2;
Function Int16x4_ctor3;
inline constexpr std::array Int16x4_ctor3_args = { &Int16x4_ctor3_arg0_Int16, &Int16x4_ctor3_arg1_Int16, &Int16x4_ctor3_arg2_Int16x2 };

/// i16x4 with Int16x2, Int16x2
Variable Int16x4_ctor4_arg0_Int16x2;
Variable Int16x4_ctor4_arg1_Int16x2;
Function Int16x4_ctor4;
inline constexpr std::array Int16x4_ctor4_args = { &Int16x4_ctor4_arg0_Int16x2, &Int16x4_ctor4_arg1_Int16x2 };

/// i16x4 with Int16x3, Int16
Variable Int16x4_ctor5_arg0_Int16x3;
Variable Int16x4_ctor5_arg1_Int16;
Function Int16x4_ctor5;
inline constexpr std::array Int16x4_ctor5_args = { &Int16x4_ctor5_arg0_Int16x3, &Int16x4_ctor5_arg1_Int16 };

/// i16x4 with Int16, Int16x3
Variable Int16x4_ctor6_arg0_Int16;
Variable Int16x4_ctor6_arg1_Int16x3;
Function Int16x4_ctor6;
inline constexpr std::array Int16x4_ctor6_args = { &Int16x4_ctor6_arg0_Int16, &Int16x4_ctor6_arg1_Int16x3 };

/// f32x2x2 with Float32x2, Float32x2
Variable Float32x2x2_Float32_2_ctor_arg0;
Variable Float32x2x2_Float32_2_ctor_arg1;
Function Float32x2x2_Float32_2_ctor;
inline constexpr std::array Float32x2x2_Float32_2_ctor_args = { &Float32x2x2_Float32_2_ctor_arg0, &Float32x2x2_Float32_2_ctor_arg1 };

/// f32x2x2
Function Float32x2x2_identity;

/// f32x2x2 with Float32, Float32, Float32, Float32
Variable Float32x2x2_raw_list_arg0;
Variable Float32x2x2_raw_list_arg1;
Variable Float32x2x2_raw_list_arg2;
Variable Float32x2x2_raw_list_arg3;
Function Float32x2x2_raw_list;
inline constexpr std::array Float32x2x2_raw_list_args = { &Float32x2x2_raw_list_arg0, &Float32x2x2_raw_list_arg1, &Float32x2x2_raw_list_arg2, &Float32x2x2_raw_list_arg3 };

/// f32x3x2 with Float32x2, Float32x2, Float32x2
Variable Float32x3x2_Float32_2_ctor_arg0;
Variable Float32x3x2_Float32_2_ctor_arg1;
Variable Float32x3x2_Float32_2_ctor_arg2;
Function Float32x3x2_Float32_2_ctor;
inline constexpr std::array Float32x3x2_Float32_2_ctor_args = { &Float32x3x2_Float32_2_ctor_arg0, &Float32x3x2_Float32_2_ctor_arg1, &Float32x3x2_Float32_2_ctor_arg2 };

/// f32x3x2 with Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x3x2_raw_list_arg0;
Variable Float32x3x2_raw_list_arg1;
Variable Float32x3x2_raw_list_arg2;
Variable Float32x3x2_raw_list_arg3;
Variable Float32x3x2_raw_list_arg4;
Variable Float32x3x2_raw_list_arg5;
Function Float32x3x2_raw_list;
inline constexpr std::array Float32x3x2_raw_list_args = { &Float32x3x2_raw_list_arg0, &Float32x3x2_raw_list_arg1, &Float32x3x2_raw_list_arg2, &Float32x3x2_raw_list_arg3, &Float32x3x2_raw_list_arg4, &Float32x3x2_raw_list_arg5 };

/// f32x4x2 with Float32x2, Float32x2, Float32x2, Float32x2
Variable Float32x4x2_Float32_2_ctor_arg0;
Variable Float32x4x2_Float32_2_ctor_arg1;
Variable Float32x4x2_Float32_2_ctor_arg2;
Variable Float32x4x2_Float32_2_ctor_arg3;
Function Float32x4x2_Float32_2_ctor;
inline constexpr std::array Float32x4x2_Float32_2_ctor_args = { &Float32x4x2_Float32_2_ctor_arg0, &Float32x4x2_Float32_2_ctor_arg1, &Float32x4x2_Float32_2_ctor_arg2, &Float32x4x2_Float32_2_ctor_arg3 };

/// f32x4x2 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x4x2_raw_list_arg0;
Variable Float32x4x2_raw_list_arg1;
Variable Float32x4x2_raw_list_arg2;
Variable Float32x4x2_raw_list_arg3;
Variable Float32x4x2_raw_list_arg4;
Variable Float32x4x2_raw_list_arg5;
Variable Float32x4x2_raw_list_arg6;
Variable Float32x4x2_raw_list_arg7;
Function Float32x4x2_raw_list;
inline constexpr std::array Float32x4x2_raw_list_args = { &Float32x4x2_raw_list_arg0, &Float32x4x2_raw_list_arg1, &Float32x4x2_raw_list_arg2, &Float32x4x2_raw_list_arg3, &Float32x4x2_raw_list_arg4, &Float32x4x2_raw_list_arg5, &Float32x4x2_raw_list_arg6, &Float32x4x2_raw_list_arg7 };

/// f32x2x3 with Float32x3, Float32x3
Variable Float32x2x3_Float32_3_ctor_arg0;
Variable Float32x2x3_Float32_3_ctor_arg1;
Function Float32x2x3_Float32_3_ctor;
inline constexpr std::array Float32x2x3_Float32_3_ctor_args = { &Float32x2x3_Float32_3_ctor_arg0, &Float32x2x3_Float32_3_ctor_arg1 };

/// f32x2x3 with Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x2x3_raw_list_arg0;
Variable Float32x2x3_raw_list_arg1;
Variable Float32x2x3_raw_list_arg2;
Variable Float32x2x3_raw_list_arg3;
Variable Float32x2x3_raw_list_arg4;
Variable Float32x2x3_raw_list_arg5;
Function Float32x2x3_raw_list;
inline constexpr std::array Float32x2x3_raw_list_args = { &Float32x2x3_raw_list_arg0, &Float32x2x3_raw_list_arg1, &Float32x2x3_raw_list_arg2, &Float32x2x3_raw_list_arg3, &Float32x2x3_raw_list_arg4, &Float32x2x3_raw_list_arg5 };

/// f32x3x3 with Float32x3, Float32x3, Float32x3
Variable Float32x3x3_Float32_3_ctor_arg0;
Variable Float32x3x3_Float32_3_ctor_arg1;
Variable Float32x3x3_Float32_3_ctor_arg2;
Function Float32x3x3_Float32_3_ctor;
inline constexpr std::array Float32x3x3_Float32_3_ctor_args = { &Float32x3x3_Float32_3_ctor_arg0, &Float32x3x3_Float32_3_ctor_arg1, &Float32x3x3_Float32_3_ctor_arg2 };

/// f32x3x3
Function Float32x3x3_identity;

/// f32x3x3 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x3x3_raw_list_arg0;
Variable Float32x3x3_raw_list_arg1;
Variable Float32x3x3_raw_list_arg2;
Variable Float32x3x3_raw_list_arg3;
Variable Float32x3x3_raw_list_arg4;
Variable Float32x3x3_raw_list_arg5;
Variable Float32x3x3_raw_list_arg6;
Variable Float32x3x3_raw_list_arg7;
Variable Float32x3x3_raw_list_arg8;
Function Float32x3x3_raw_list;
inline constexpr std::array Float32x3x3_raw_list_args = { &Float32x3x3_raw_list_arg0, &Float32x3x3_raw_list_arg1, &Float32x3x3_raw_list_arg2, &Float32x3x3_raw_list_arg3, &Float32x3x3_raw_list_arg4, &Float32x3x3_raw_list_arg5, &Float32x3x3_raw_list_arg6, &Float32x3x3_raw_list_arg7, &Float32x3x3_raw_list_arg8 };

/// f32x4x3 with Float32x3, Float32x3, Float32x3, Float32x3
Variable Float32x4x3_Float32_3_ctor_arg0;
Variable Float32x4x3_Float32_3_ctor_arg1;
Variable Float32x4x3_Float32_3_ctor_arg2;
Variable Float32x4x3_Float32_3_ctor_arg3;
Function Float32x4x3_Float32_3_ctor;
inline constexpr std::array Float32x4x3_Float32_3_ctor_args = { &Float32x4x3_Float32_3_ctor_arg0, &Float32x4x3_Float32_3_ctor_arg1, &Float32x4x3_Float32_3_ctor_arg2, &Float32x4x3_Float32_3_ctor_arg3 };

/// f32x4x3 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x4x3_raw_list_arg0;
Variable Float32x4x3_raw_list_arg1;
Variable Float32x4x3_raw_list_arg2;
Variable Float32x4x3_raw_list_arg3;
Variable Float32x4x3_raw_list_arg4;
Variable Float32x4x3_raw_list_arg5;
Variable Float32x4x3_raw_list_arg6;
Variable Float32x4x3_raw_list_arg7;
Variable Float32x4x3_raw_list_arg8;
Variable Float32x4x3_raw_list_arg9;
Variable Float32x4x3_raw_list_arg10;
Variable Float32x4x3_raw_list_arg11;
Function Float32x4x3_raw_list;
inline constexpr std::array Float32x4x3_raw_list_args = { &Float32x4x3_raw_list_arg0, &Float32x4x3_raw_list_arg1, &Float32x4x3_raw_list_arg2, &Float32x4x3_raw_list_arg3, &Float32x4x3_raw_list_arg4, &Float32x4x3_raw_list_arg5, &Float32x4x3_raw_list_arg6, &Float32x4x3_raw_list_arg7, &Float32x4x3_raw_list_arg8, &Float32x4x3_raw_list_arg9, &Float32x4x3_raw_list_arg10, &Float32x4x3_raw_list_arg11 };

/// f32x2x4 with Float32x4, Float32x4
Variable Float32x2x4_Float32_4_ctor_arg0;
Variable Float32x2x4_Float32_4_ctor_arg1;
Function Float32x2x4_Float32_4_ctor;
inline constexpr std::array Float32x2x4_Float32_4_ctor_args = { &Float32x2x4_Float32_4_ctor_arg0, &Float32x2x4_Float32_4_ctor_arg1 };

/// f32x2x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x2x4_raw_list_arg0;
Variable Float32x2x4_raw_list_arg1;
Variable Float32x2x4_raw_list_arg2;
Variable Float32x2x4_raw_list_arg3;
Variable Float32x2x4_raw_list_arg4;
Variable Float32x2x4_raw_list_arg5;
Variable Float32x2x4_raw_list_arg6;
Variable Float32x2x4_raw_list_arg7;
Function Float32x2x4_raw_list;
inline constexpr std::array Float32x2x4_raw_list_args = { &Float32x2x4_raw_list_arg0, &Float32x2x4_raw_list_arg1, &Float32x2x4_raw_list_arg2, &Float32x2x4_raw_list_arg3, &Float32x2x4_raw_list_arg4, &Float32x2x4_raw_list_arg5, &Float32x2x4_raw_list_arg6, &Float32x2x4_raw_list_arg7 };

/// f32x3x4 with Float32x4, Float32x4, Float32x4
Variable Float32x3x4_Float32_4_ctor_arg0;
Variable Float32x3x4_Float32_4_ctor_arg1;
Variable Float32x3x4_Float32_4_ctor_arg2;
Function Float32x3x4_Float32_4_ctor;
inline constexpr std::array Float32x3x4_Float32_4_ctor_args = { &Float32x3x4_Float32_4_ctor_arg0, &Float32x3x4_Float32_4_ctor_arg1, &Float32x3x4_Float32_4_ctor_arg2 };

/// f32x3x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x3x4_raw_list_arg0;
Variable Float32x3x4_raw_list_arg1;
Variable Float32x3x4_raw_list_arg2;
Variable Float32x3x4_raw_list_arg3;
Variable Float32x3x4_raw_list_arg4;
Variable Float32x3x4_raw_list_arg5;
Variable Float32x3x4_raw_list_arg6;
Variable Float32x3x4_raw_list_arg7;
Variable Float32x3x4_raw_list_arg8;
Variable Float32x3x4_raw_list_arg9;
Variable Float32x3x4_raw_list_arg10;
Variable Float32x3x4_raw_list_arg11;
Function Float32x3x4_raw_list;
inline constexpr std::array Float32x3x4_raw_list_args = { &Float32x3x4_raw_list_arg0, &Float32x3x4_raw_list_arg1, &Float32x3x4_raw_list_arg2, &Float32x3x4_raw_list_arg3, &Float32x3x4_raw_list_arg4, &Float32x3x4_raw_list_arg5, &Float32x3x4_raw_list_arg6, &Float32x3x4_raw_list_arg7, &Float32x3x4_raw_list_arg8, &Float32x3x4_raw_list_arg9, &Float32x3x4_raw_list_arg10, &Float32x3x4_raw_list_arg11 };

/// f32x4x4 with Float32x4, Float32x4, Float32x4, Float32x4
Variable Float32x4x4_Float32_4_ctor_arg0;
Variable Float32x4x4_Float32_4_ctor_arg1;
Variable Float32x4x4_Float32_4_ctor_arg2;
Variable Float32x4x4_Float32_4_ctor_arg3;
Function Float32x4x4_Float32_4_ctor;
inline constexpr std::array Float32x4x4_Float32_4_ctor_args = { &Float32x4x4_Float32_4_ctor_arg0, &Float32x4x4_Float32_4_ctor_arg1, &Float32x4x4_Float32_4_ctor_arg2, &Float32x4x4_Float32_4_ctor_arg3 };

/// f32x4x4
Function Float32x4x4_identity;

/// f32x4x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x4x4_raw_list_arg0;
Variable Float32x4x4_raw_list_arg1;
Variable Float32x4x4_raw_list_arg2;
Variable Float32x4x4_raw_list_arg3;
Variable Float32x4x4_raw_list_arg4;
Variable Float32x4x4_raw_list_arg5;
Variable Float32x4x4_raw_list_arg6;
Variable Float32x4x4_raw_list_arg7;
Variable Float32x4x4_raw_list_arg8;
Variable Float32x4x4_raw_list_arg9;
Variable Float32x4x4_raw_list_arg10;
Variable Float32x4x4_raw_list_arg11;
Variable Float32x4x4_raw_list_arg12;
Variable Float32x4x4_raw_list_arg13;
Variable Float32x4x4_raw_list_arg14;
Variable Float32x4x4_raw_list_arg15;
Function Float32x4x4_raw_list;
inline constexpr std::array Float32x4x4_raw_list_args = { &Float32x4x4_raw_list_arg0, &Float32x4x4_raw_list_arg1, &Float32x4x4_raw_list_arg2, &Float32x4x4_raw_list_arg3, &Float32x4x4_raw_list_arg4, &Float32x4x4_raw_list_arg5, &Float32x4x4_raw_list_arg6, &Float32x4x4_raw_list_arg7, &Float32x4x4_raw_list_arg8, &Float32x4x4_raw_list_arg9, &Float32x4x4_raw_list_arg10, &Float32x4x4_raw_list_arg11, &Float32x4x4_raw_list_arg12, &Float32x4x4_raw_list_arg13, &Float32x4x4_raw_list_arg14, &Float32x4x4_raw_list_arg15 };

/// f16x2x2 with Float16x2, Float16x2
Variable Float16x2x2_Float16_2_ctor_arg0;
Variable Float16x2x2_Float16_2_ctor_arg1;
Function Float16x2x2_Float16_2_ctor;
inline constexpr std::array Float16x2x2_Float16_2_ctor_args = { &Float16x2x2_Float16_2_ctor_arg0, &Float16x2x2_Float16_2_ctor_arg1 };

/// f16x2x2
Function Float16x2x2_identity;

/// f16x2x2 with Float16, Float16, Float16, Float16
Variable Float16x2x2_raw_list_arg0;
Variable Float16x2x2_raw_list_arg1;
Variable Float16x2x2_raw_list_arg2;
Variable Float16x2x2_raw_list_arg3;
Function Float16x2x2_raw_list;
inline constexpr std::array Float16x2x2_raw_list_args = { &Float16x2x2_raw_list_arg0, &Float16x2x2_raw_list_arg1, &Float16x2x2_raw_list_arg2, &Float16x2x2_raw_list_arg3 };

/// f16x3x2 with Float16x2, Float16x2, Float16x2
Variable Float16x3x2_Float16_2_ctor_arg0;
Variable Float16x3x2_Float16_2_ctor_arg1;
Variable Float16x3x2_Float16_2_ctor_arg2;
Function Float16x3x2_Float16_2_ctor;
inline constexpr std::array Float16x3x2_Float16_2_ctor_args = { &Float16x3x2_Float16_2_ctor_arg0, &Float16x3x2_Float16_2_ctor_arg1, &Float16x3x2_Float16_2_ctor_arg2 };

/// f16x3x2 with Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x3x2_raw_list_arg0;
Variable Float16x3x2_raw_list_arg1;
Variable Float16x3x2_raw_list_arg2;
Variable Float16x3x2_raw_list_arg3;
Variable Float16x3x2_raw_list_arg4;
Variable Float16x3x2_raw_list_arg5;
Function Float16x3x2_raw_list;
inline constexpr std::array Float16x3x2_raw_list_args = { &Float16x3x2_raw_list_arg0, &Float16x3x2_raw_list_arg1, &Float16x3x2_raw_list_arg2, &Float16x3x2_raw_list_arg3, &Float16x3x2_raw_list_arg4, &Float16x3x2_raw_list_arg5 };

/// f16x4x2 with Float16x2, Float16x2, Float16x2, Float16x2
Variable Float16x4x2_Float16_2_ctor_arg0;
Variable Float16x4x2_Float16_2_ctor_arg1;
Variable Float16x4x2_Float16_2_ctor_arg2;
Variable Float16x4x2_Float16_2_ctor_arg3;
Function Float16x4x2_Float16_2_ctor;
inline constexpr std::array Float16x4x2_Float16_2_ctor_args = { &Float16x4x2_Float16_2_ctor_arg0, &Float16x4x2_Float16_2_ctor_arg1, &Float16x4x2_Float16_2_ctor_arg2, &Float16x4x2_Float16_2_ctor_arg3 };

/// f16x4x2 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x4x2_raw_list_arg0;
Variable Float16x4x2_raw_list_arg1;
Variable Float16x4x2_raw_list_arg2;
Variable Float16x4x2_raw_list_arg3;
Variable Float16x4x2_raw_list_arg4;
Variable Float16x4x2_raw_list_arg5;
Variable Float16x4x2_raw_list_arg6;
Variable Float16x4x2_raw_list_arg7;
Function Float16x4x2_raw_list;
inline constexpr std::array Float16x4x2_raw_list_args = { &Float16x4x2_raw_list_arg0, &Float16x4x2_raw_list_arg1, &Float16x4x2_raw_list_arg2, &Float16x4x2_raw_list_arg3, &Float16x4x2_raw_list_arg4, &Float16x4x2_raw_list_arg5, &Float16x4x2_raw_list_arg6, &Float16x4x2_raw_list_arg7 };

/// f16x2x3 with Float16x3, Float16x3
Variable Float16x2x3_Float16_3_ctor_arg0;
Variable Float16x2x3_Float16_3_ctor_arg1;
Function Float16x2x3_Float16_3_ctor;
inline constexpr std::array Float16x2x3_Float16_3_ctor_args = { &Float16x2x3_Float16_3_ctor_arg0, &Float16x2x3_Float16_3_ctor_arg1 };

/// f16x2x3 with Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x2x3_raw_list_arg0;
Variable Float16x2x3_raw_list_arg1;
Variable Float16x2x3_raw_list_arg2;
Variable Float16x2x3_raw_list_arg3;
Variable Float16x2x3_raw_list_arg4;
Variable Float16x2x3_raw_list_arg5;
Function Float16x2x3_raw_list;
inline constexpr std::array Float16x2x3_raw_list_args = { &Float16x2x3_raw_list_arg0, &Float16x2x3_raw_list_arg1, &Float16x2x3_raw_list_arg2, &Float16x2x3_raw_list_arg3, &Float16x2x3_raw_list_arg4, &Float16x2x3_raw_list_arg5 };

/// f16x3x3 with Float16x3, Float16x3, Float16x3
Variable Float16x3x3_Float16_3_ctor_arg0;
Variable Float16x3x3_Float16_3_ctor_arg1;
Variable Float16x3x3_Float16_3_ctor_arg2;
Function Float16x3x3_Float16_3_ctor;
inline constexpr std::array Float16x3x3_Float16_3_ctor_args = { &Float16x3x3_Float16_3_ctor_arg0, &Float16x3x3_Float16_3_ctor_arg1, &Float16x3x3_Float16_3_ctor_arg2 };

/// f16x3x3
Function Float16x3x3_identity;

/// f16x3x3 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x3x3_raw_list_arg0;
Variable Float16x3x3_raw_list_arg1;
Variable Float16x3x3_raw_list_arg2;
Variable Float16x3x3_raw_list_arg3;
Variable Float16x3x3_raw_list_arg4;
Variable Float16x3x3_raw_list_arg5;
Variable Float16x3x3_raw_list_arg6;
Variable Float16x3x3_raw_list_arg7;
Variable Float16x3x3_raw_list_arg8;
Function Float16x3x3_raw_list;
inline constexpr std::array Float16x3x3_raw_list_args = { &Float16x3x3_raw_list_arg0, &Float16x3x3_raw_list_arg1, &Float16x3x3_raw_list_arg2, &Float16x3x3_raw_list_arg3, &Float16x3x3_raw_list_arg4, &Float16x3x3_raw_list_arg5, &Float16x3x3_raw_list_arg6, &Float16x3x3_raw_list_arg7, &Float16x3x3_raw_list_arg8 };

/// f16x4x3 with Float16x3, Float16x3, Float16x3, Float16x3
Variable Float16x4x3_Float16_3_ctor_arg0;
Variable Float16x4x3_Float16_3_ctor_arg1;
Variable Float16x4x3_Float16_3_ctor_arg2;
Variable Float16x4x3_Float16_3_ctor_arg3;
Function Float16x4x3_Float16_3_ctor;
inline constexpr std::array Float16x4x3_Float16_3_ctor_args = { &Float16x4x3_Float16_3_ctor_arg0, &Float16x4x3_Float16_3_ctor_arg1, &Float16x4x3_Float16_3_ctor_arg2, &Float16x4x3_Float16_3_ctor_arg3 };

/// f16x4x3 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x4x3_raw_list_arg0;
Variable Float16x4x3_raw_list_arg1;
Variable Float16x4x3_raw_list_arg2;
Variable Float16x4x3_raw_list_arg3;
Variable Float16x4x3_raw_list_arg4;
Variable Float16x4x3_raw_list_arg5;
Variable Float16x4x3_raw_list_arg6;
Variable Float16x4x3_raw_list_arg7;
Variable Float16x4x3_raw_list_arg8;
Variable Float16x4x3_raw_list_arg9;
Variable Float16x4x3_raw_list_arg10;
Variable Float16x4x3_raw_list_arg11;
Function Float16x4x3_raw_list;
inline constexpr std::array Float16x4x3_raw_list_args = { &Float16x4x3_raw_list_arg0, &Float16x4x3_raw_list_arg1, &Float16x4x3_raw_list_arg2, &Float16x4x3_raw_list_arg3, &Float16x4x3_raw_list_arg4, &Float16x4x3_raw_list_arg5, &Float16x4x3_raw_list_arg6, &Float16x4x3_raw_list_arg7, &Float16x4x3_raw_list_arg8, &Float16x4x3_raw_list_arg9, &Float16x4x3_raw_list_arg10, &Float16x4x3_raw_list_arg11 };

/// f16x2x4 with Float16x4, Float16x4
Variable Float16x2x4_Float16_4_ctor_arg0;
Variable Float16x2x4_Float16_4_ctor_arg1;
Function Float16x2x4_Float16_4_ctor;
inline constexpr std::array Float16x2x4_Float16_4_ctor_args = { &Float16x2x4_Float16_4_ctor_arg0, &Float16x2x4_Float16_4_ctor_arg1 };

/// f16x2x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x2x4_raw_list_arg0;
Variable Float16x2x4_raw_list_arg1;
Variable Float16x2x4_raw_list_arg2;
Variable Float16x2x4_raw_list_arg3;
Variable Float16x2x4_raw_list_arg4;
Variable Float16x2x4_raw_list_arg5;
Variable Float16x2x4_raw_list_arg6;
Variable Float16x2x4_raw_list_arg7;
Function Float16x2x4_raw_list;
inline constexpr std::array Float16x2x4_raw_list_args = { &Float16x2x4_raw_list_arg0, &Float16x2x4_raw_list_arg1, &Float16x2x4_raw_list_arg2, &Float16x2x4_raw_list_arg3, &Float16x2x4_raw_list_arg4, &Float16x2x4_raw_list_arg5, &Float16x2x4_raw_list_arg6, &Float16x2x4_raw_list_arg7 };

/// f16x3x4 with Float16x4, Float16x4, Float16x4
Variable Float16x3x4_Float16_4_ctor_arg0;
Variable Float16x3x4_Float16_4_ctor_arg1;
Variable Float16x3x4_Float16_4_ctor_arg2;
Function Float16x3x4_Float16_4_ctor;
inline constexpr std::array Float16x3x4_Float16_4_ctor_args = { &Float16x3x4_Float16_4_ctor_arg0, &Float16x3x4_Float16_4_ctor_arg1, &Float16x3x4_Float16_4_ctor_arg2 };

/// f16x3x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x3x4_raw_list_arg0;
Variable Float16x3x4_raw_list_arg1;
Variable Float16x3x4_raw_list_arg2;
Variable Float16x3x4_raw_list_arg3;
Variable Float16x3x4_raw_list_arg4;
Variable Float16x3x4_raw_list_arg5;
Variable Float16x3x4_raw_list_arg6;
Variable Float16x3x4_raw_list_arg7;
Variable Float16x3x4_raw_list_arg8;
Variable Float16x3x4_raw_list_arg9;
Variable Float16x3x4_raw_list_arg10;
Variable Float16x3x4_raw_list_arg11;
Function Float16x3x4_raw_list;
inline constexpr std::array Float16x3x4_raw_list_args = { &Float16x3x4_raw_list_arg0, &Float16x3x4_raw_list_arg1, &Float16x3x4_raw_list_arg2, &Float16x3x4_raw_list_arg3, &Float16x3x4_raw_list_arg4, &Float16x3x4_raw_list_arg5, &Float16x3x4_raw_list_arg6, &Float16x3x4_raw_list_arg7, &Float16x3x4_raw_list_arg8, &Float16x3x4_raw_list_arg9, &Float16x3x4_raw_list_arg10, &Float16x3x4_raw_list_arg11 };

/// f16x4x4 with Float16x4, Float16x4, Float16x4, Float16x4
Variable Float16x4x4_Float16_4_ctor_arg0;
Variable Float16x4x4_Float16_4_ctor_arg1;
Variable Float16x4x4_Float16_4_ctor_arg2;
Variable Float16x4x4_Float16_4_ctor_arg3;
Function Float16x4x4_Float16_4_ctor;
inline constexpr std::array Float16x4x4_Float16_4_ctor_args = { &Float16x4x4_Float16_4_ctor_arg0, &Float16x4x4_Float16_4_ctor_arg1, &Float16x4x4_Float16_4_ctor_arg2, &Float16x4x4_Float16_4_ctor_arg3 };

/// f16x4x4
Function Float16x4x4_identity;

/// f16x4x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x4x4_raw_list_arg0;
Variable Float16x4x4_raw_list_arg1;
Variable Float16x4x4_raw_list_arg2;
Variable Float16x4x4_raw_list_arg3;
Variable Float16x4x4_raw_list_arg4;
Variable Float16x4x4_raw_list_arg5;
Variable Float16x4x4_raw_list_arg6;
Variable Float16x4x4_raw_list_arg7;
Variable Float16x4x4_raw_list_arg8;
Variable Float16x4x4_raw_list_arg9;
Variable Float16x4x4_raw_list_arg10;
Variable Float16x4x4_raw_list_arg11;
Variable Float16x4x4_raw_list_arg12;
Variable Float16x4x4_raw_list_arg13;
Variable Float16x4x4_raw_list_arg14;
Variable Float16x4x4_raw_list_arg15;
Function Float16x4x4_raw_list;
inline constexpr std::array Float16x4x4_raw_list_args = { &Float16x4x4_raw_list_arg0, &Float16x4x4_raw_list_arg1, &Float16x4x4_raw_list_arg2, &Float16x4x4_raw_list_arg3, &Float16x4x4_raw_list_arg4, &Float16x4x4_raw_list_arg5, &Float16x4x4_raw_list_arg6, &Float16x4x4_raw_list_arg7, &Float16x4x4_raw_list_arg8, &Float16x4x4_raw_list_arg9, &Float16x4x4_raw_list_arg10, &Float16x4x4_raw_list_arg11, &Float16x4x4_raw_list_arg12, &Float16x4x4_raw_list_arg13, &Float16x4x4_raw_list_arg14, &Float16x4x4_raw_list_arg15 };

/// acos with Float32
Variable acos_Float32_arg;
Function acos_Float32;
inline constexpr std::array acos_Float32_args = { &acos_Float32_arg };

/// acos with Float32x2
Variable acos_Float32x2_arg;
Function acos_Float32x2;
inline constexpr std::array acos_Float32x2_args = { &acos_Float32x2_arg };

/// acos with Float32x3
Variable acos_Float32x3_arg;
Function acos_Float32x3;
inline constexpr std::array acos_Float32x3_args = { &acos_Float32x3_arg };

/// acos with Float32x4
Variable acos_Float32x4_arg;
Function acos_Float32x4;
inline constexpr std::array acos_Float32x4_args = { &acos_Float32x4_arg };

/// acos with Float16
Variable acos_Float16_arg;
Function acos_Float16;
inline constexpr std::array acos_Float16_args = { &acos_Float16_arg };

/// acos with Float16x2
Variable acos_Float16x2_arg;
Function acos_Float16x2;
inline constexpr std::array acos_Float16x2_args = { &acos_Float16x2_arg };

/// acos with Float16x3
Variable acos_Float16x3_arg;
Function acos_Float16x3;
inline constexpr std::array acos_Float16x3_args = { &acos_Float16x3_arg };

/// acos with Float16x4
Variable acos_Float16x4_arg;
Function acos_Float16x4;
inline constexpr std::array acos_Float16x4_args = { &acos_Float16x4_arg };

/// acosh with Float32
Variable acosh_Float32_arg;
Function acosh_Float32;
inline constexpr std::array acosh_Float32_args = { &acosh_Float32_arg };

/// acosh with Float32x2
Variable acosh_Float32x2_arg;
Function acosh_Float32x2;
inline constexpr std::array acosh_Float32x2_args = { &acosh_Float32x2_arg };

/// acosh with Float32x3
Variable acosh_Float32x3_arg;
Function acosh_Float32x3;
inline constexpr std::array acosh_Float32x3_args = { &acosh_Float32x3_arg };

/// acosh with Float32x4
Variable acosh_Float32x4_arg;
Function acosh_Float32x4;
inline constexpr std::array acosh_Float32x4_args = { &acosh_Float32x4_arg };

/// acosh with Float16
Variable acosh_Float16_arg;
Function acosh_Float16;
inline constexpr std::array acosh_Float16_args = { &acosh_Float16_arg };

/// acosh with Float16x2
Variable acosh_Float16x2_arg;
Function acosh_Float16x2;
inline constexpr std::array acosh_Float16x2_args = { &acosh_Float16x2_arg };

/// acosh with Float16x3
Variable acosh_Float16x3_arg;
Function acosh_Float16x3;
inline constexpr std::array acosh_Float16x3_args = { &acosh_Float16x3_arg };

/// acosh with Float16x4
Variable acosh_Float16x4_arg;
Function acosh_Float16x4;
inline constexpr std::array acosh_Float16x4_args = { &acosh_Float16x4_arg };

/// asin with Float32
Variable asin_Float32_arg;
Function asin_Float32;
inline constexpr std::array asin_Float32_args = { &asin_Float32_arg };

/// asin with Float32x2
Variable asin_Float32x2_arg;
Function asin_Float32x2;
inline constexpr std::array asin_Float32x2_args = { &asin_Float32x2_arg };

/// asin with Float32x3
Variable asin_Float32x3_arg;
Function asin_Float32x3;
inline constexpr std::array asin_Float32x3_args = { &asin_Float32x3_arg };

/// asin with Float32x4
Variable asin_Float32x4_arg;
Function asin_Float32x4;
inline constexpr std::array asin_Float32x4_args = { &asin_Float32x4_arg };

/// asin with Float16
Variable asin_Float16_arg;
Function asin_Float16;
inline constexpr std::array asin_Float16_args = { &asin_Float16_arg };

/// asin with Float16x2
Variable asin_Float16x2_arg;
Function asin_Float16x2;
inline constexpr std::array asin_Float16x2_args = { &asin_Float16x2_arg };

/// asin with Float16x3
Variable asin_Float16x3_arg;
Function asin_Float16x3;
inline constexpr std::array asin_Float16x3_args = { &asin_Float16x3_arg };

/// asin with Float16x4
Variable asin_Float16x4_arg;
Function asin_Float16x4;
inline constexpr std::array asin_Float16x4_args = { &asin_Float16x4_arg };

/// asinh with Float32
Variable asinh_Float32_arg;
Function asinh_Float32;
inline constexpr std::array asinh_Float32_args = { &asinh_Float32_arg };

/// asinh with Float32x2
Variable asinh_Float32x2_arg;
Function asinh_Float32x2;
inline constexpr std::array asinh_Float32x2_args = { &asinh_Float32x2_arg };

/// asinh with Float32x3
Variable asinh_Float32x3_arg;
Function asinh_Float32x3;
inline constexpr std::array asinh_Float32x3_args = { &asinh_Float32x3_arg };

/// asinh with Float32x4
Variable asinh_Float32x4_arg;
Function asinh_Float32x4;
inline constexpr std::array asinh_Float32x4_args = { &asinh_Float32x4_arg };

/// asinh with Float16
Variable asinh_Float16_arg;
Function asinh_Float16;
inline constexpr std::array asinh_Float16_args = { &asinh_Float16_arg };

/// asinh with Float16x2
Variable asinh_Float16x2_arg;
Function asinh_Float16x2;
inline constexpr std::array asinh_Float16x2_args = { &asinh_Float16x2_arg };

/// asinh with Float16x3
Variable asinh_Float16x3_arg;
Function asinh_Float16x3;
inline constexpr std::array asinh_Float16x3_args = { &asinh_Float16x3_arg };

/// asinh with Float16x4
Variable asinh_Float16x4_arg;
Function asinh_Float16x4;
inline constexpr std::array asinh_Float16x4_args = { &asinh_Float16x4_arg };

/// atan with Float32
Variable atan_Float32_arg;
Function atan_Float32;
inline constexpr std::array atan_Float32_args = { &atan_Float32_arg };

/// atan with Float32x2
Variable atan_Float32x2_arg;
Function atan_Float32x2;
inline constexpr std::array atan_Float32x2_args = { &atan_Float32x2_arg };

/// atan with Float32x3
Variable atan_Float32x3_arg;
Function atan_Float32x3;
inline constexpr std::array atan_Float32x3_args = { &atan_Float32x3_arg };

/// atan with Float32x4
Variable atan_Float32x4_arg;
Function atan_Float32x4;
inline constexpr std::array atan_Float32x4_args = { &atan_Float32x4_arg };

/// atan with Float16
Variable atan_Float16_arg;
Function atan_Float16;
inline constexpr std::array atan_Float16_args = { &atan_Float16_arg };

/// atan with Float16x2
Variable atan_Float16x2_arg;
Function atan_Float16x2;
inline constexpr std::array atan_Float16x2_args = { &atan_Float16x2_arg };

/// atan with Float16x3
Variable atan_Float16x3_arg;
Function atan_Float16x3;
inline constexpr std::array atan_Float16x3_args = { &atan_Float16x3_arg };

/// atan with Float16x4
Variable atan_Float16x4_arg;
Function atan_Float16x4;
inline constexpr std::array atan_Float16x4_args = { &atan_Float16x4_arg };

/// atanh with Float32
Variable atanh_Float32_arg;
Function atanh_Float32;
inline constexpr std::array atanh_Float32_args = { &atanh_Float32_arg };

/// atanh with Float32x2
Variable atanh_Float32x2_arg;
Function atanh_Float32x2;
inline constexpr std::array atanh_Float32x2_args = { &atanh_Float32x2_arg };

/// atanh with Float32x3
Variable atanh_Float32x3_arg;
Function atanh_Float32x3;
inline constexpr std::array atanh_Float32x3_args = { &atanh_Float32x3_arg };

/// atanh with Float32x4
Variable atanh_Float32x4_arg;
Function atanh_Float32x4;
inline constexpr std::array atanh_Float32x4_args = { &atanh_Float32x4_arg };

/// atanh with Float16
Variable atanh_Float16_arg;
Function atanh_Float16;
inline constexpr std::array atanh_Float16_args = { &atanh_Float16_arg };

/// atanh with Float16x2
Variable atanh_Float16x2_arg;
Function atanh_Float16x2;
inline constexpr std::array atanh_Float16x2_args = { &atanh_Float16x2_arg };

/// atanh with Float16x3
Variable atanh_Float16x3_arg;
Function atanh_Float16x3;
inline constexpr std::array atanh_Float16x3_args = { &atanh_Float16x3_arg };

/// atanh with Float16x4
Variable atanh_Float16x4_arg;
Function atanh_Float16x4;
inline constexpr std::array atanh_Float16x4_args = { &atanh_Float16x4_arg };

/// cos with Float32
Variable cos_Float32_arg;
Function cos_Float32;
inline constexpr std::array cos_Float32_args = { &cos_Float32_arg };

/// cos with Float32x2
Variable cos_Float32x2_arg;
Function cos_Float32x2;
inline constexpr std::array cos_Float32x2_args = { &cos_Float32x2_arg };

/// cos with Float32x3
Variable cos_Float32x3_arg;
Function cos_Float32x3;
inline constexpr std::array cos_Float32x3_args = { &cos_Float32x3_arg };

/// cos with Float32x4
Variable cos_Float32x4_arg;
Function cos_Float32x4;
inline constexpr std::array cos_Float32x4_args = { &cos_Float32x4_arg };

/// cos with Float16
Variable cos_Float16_arg;
Function cos_Float16;
inline constexpr std::array cos_Float16_args = { &cos_Float16_arg };

/// cos with Float16x2
Variable cos_Float16x2_arg;
Function cos_Float16x2;
inline constexpr std::array cos_Float16x2_args = { &cos_Float16x2_arg };

/// cos with Float16x3
Variable cos_Float16x3_arg;
Function cos_Float16x3;
inline constexpr std::array cos_Float16x3_args = { &cos_Float16x3_arg };

/// cos with Float16x4
Variable cos_Float16x4_arg;
Function cos_Float16x4;
inline constexpr std::array cos_Float16x4_args = { &cos_Float16x4_arg };

/// cosh with Float32
Variable cosh_Float32_arg;
Function cosh_Float32;
inline constexpr std::array cosh_Float32_args = { &cosh_Float32_arg };

/// cosh with Float32x2
Variable cosh_Float32x2_arg;
Function cosh_Float32x2;
inline constexpr std::array cosh_Float32x2_args = { &cosh_Float32x2_arg };

/// cosh with Float32x3
Variable cosh_Float32x3_arg;
Function cosh_Float32x3;
inline constexpr std::array cosh_Float32x3_args = { &cosh_Float32x3_arg };

/// cosh with Float32x4
Variable cosh_Float32x4_arg;
Function cosh_Float32x4;
inline constexpr std::array cosh_Float32x4_args = { &cosh_Float32x4_arg };

/// cosh with Float16
Variable cosh_Float16_arg;
Function cosh_Float16;
inline constexpr std::array cosh_Float16_args = { &cosh_Float16_arg };

/// cosh with Float16x2
Variable cosh_Float16x2_arg;
Function cosh_Float16x2;
inline constexpr std::array cosh_Float16x2_args = { &cosh_Float16x2_arg };

/// cosh with Float16x3
Variable cosh_Float16x3_arg;
Function cosh_Float16x3;
inline constexpr std::array cosh_Float16x3_args = { &cosh_Float16x3_arg };

/// cosh with Float16x4
Variable cosh_Float16x4_arg;
Function cosh_Float16x4;
inline constexpr std::array cosh_Float16x4_args = { &cosh_Float16x4_arg };

/// exp with Float32
Variable exp_Float32_arg;
Function exp_Float32;
inline constexpr std::array exp_Float32_args = { &exp_Float32_arg };

void SetupIntrinsics3()
{
    /// i16x4 with Float32x4
    Int16x4_from_Float32x4_arg.name = "val"_c;
    Int16x4_from_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Int16x4_from_Float32x4.documentation = "Convert from f32x4 to i16x4"_c;
    Int16x4_from_Float32x4.name = Int16x4_from_Float32x4_name;
    Int16x4_from_Float32x4.compileTime = true;
    Int16x4_from_Float32x4.backendIndex = 1073;
    Int16x4_from_Float32x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_from_Float32x4.parameters = Int16x4_from_Float32x4_args;
    Symbol::Resolved(&Int16x4_from_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Int16x4_from_Float32x4)->signature = "i16x4(f32x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_from_Float32x4)->name = "i16x4(f32x4)"_c;
    Symbol::Resolved(&Int16x4_from_Float32x4)->nameWithVarNames = "i16x4(val : f32x4)"_c;
    Symbol::Resolved(&Int16x4_from_Float32x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Float32
    Int16x4_splat_Float32_arg.name = "val"_c;
    Int16x4_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int16x4_splat_Float32.documentation = "Splat f32 to i16x4"_c;
    Int16x4_splat_Float32.name = Int16x4_splat_Float32_name;
    Int16x4_splat_Float32.compileTime = true;
    Int16x4_splat_Float32.backendIndex = 1074;
    Int16x4_splat_Float32.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_Float32.parameters = Int16x4_splat_Float32_args;
    Symbol::Resolved(&Int16x4_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int16x4_splat_Float32)->signature = "i16x4(f32) i16x4"_c;
    Symbol::Resolved(&Int16x4_splat_Float32)->name = "i16x4(f32)"_c;
    Symbol::Resolved(&Int16x4_splat_Float32)->nameWithVarNames = "i16x4(val : f32)"_c;
    Symbol::Resolved(&Int16x4_splat_Float32)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with UInt32x4
    Int16x4_from_UInt32x4_arg.name = "val"_c;
    Int16x4_from_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    Int16x4_from_UInt32x4.documentation = "Convert from u32x4 to i16x4"_c;
    Int16x4_from_UInt32x4.name = Int16x4_from_UInt32x4_name;
    Int16x4_from_UInt32x4.compileTime = true;
    Int16x4_from_UInt32x4.backendIndex = 1075;
    Int16x4_from_UInt32x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_from_UInt32x4.parameters = Int16x4_from_UInt32x4_args;
    Symbol::Resolved(&Int16x4_from_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&Int16x4_from_UInt32x4)->signature = "i16x4(u32x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_from_UInt32x4)->name = "i16x4(u32x4)"_c;
    Symbol::Resolved(&Int16x4_from_UInt32x4)->nameWithVarNames = "i16x4(val : u32x4)"_c;
    Symbol::Resolved(&Int16x4_from_UInt32x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with UInt32
    Int16x4_splat_UInt32_arg.name = "val"_c;
    Int16x4_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int16x4_splat_UInt32.documentation = "Splat u32 to i16x4"_c;
    Int16x4_splat_UInt32.name = Int16x4_splat_UInt32_name;
    Int16x4_splat_UInt32.compileTime = true;
    Int16x4_splat_UInt32.backendIndex = 1076;
    Int16x4_splat_UInt32.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_UInt32.parameters = Int16x4_splat_UInt32_args;
    Symbol::Resolved(&Int16x4_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x4_splat_UInt32)->signature = "i16x4(u32) i16x4"_c;
    Symbol::Resolved(&Int16x4_splat_UInt32)->name = "i16x4(u32)"_c;
    Symbol::Resolved(&Int16x4_splat_UInt32)->nameWithVarNames = "i16x4(val : u32)"_c;
    Symbol::Resolved(&Int16x4_splat_UInt32)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int32x4
    Int16x4_from_Int32x4_arg.name = "val"_c;
    Int16x4_from_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int16x4_from_Int32x4.documentation = "Convert from i32x4 to i16x4"_c;
    Int16x4_from_Int32x4.name = Int16x4_from_Int32x4_name;
    Int16x4_from_Int32x4.compileTime = true;
    Int16x4_from_Int32x4.backendIndex = 1077;
    Int16x4_from_Int32x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_from_Int32x4.parameters = Int16x4_from_Int32x4_args;
    Symbol::Resolved(&Int16x4_from_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int16x4_from_Int32x4)->signature = "i16x4(i32x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_from_Int32x4)->name = "i16x4(i32x4)"_c;
    Symbol::Resolved(&Int16x4_from_Int32x4)->nameWithVarNames = "i16x4(val : i32x4)"_c;
    Symbol::Resolved(&Int16x4_from_Int32x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int32
    Int16x4_splat_Int32_arg.name = "val"_c;
    Int16x4_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int16x4_splat_Int32.documentation = "Splat i32 to i16x4"_c;
    Int16x4_splat_Int32.name = Int16x4_splat_Int32_name;
    Int16x4_splat_Int32.compileTime = true;
    Int16x4_splat_Int32.backendIndex = 1078;
    Int16x4_splat_Int32.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_Int32.parameters = Int16x4_splat_Int32_args;
    Symbol::Resolved(&Int16x4_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x4_splat_Int32)->signature = "i16x4(i32) i16x4"_c;
    Symbol::Resolved(&Int16x4_splat_Int32)->name = "i16x4(i32)"_c;
    Symbol::Resolved(&Int16x4_splat_Int32)->nameWithVarNames = "i16x4(val : i32)"_c;
    Symbol::Resolved(&Int16x4_splat_Int32)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Bool8x4
    Int16x4_from_Bool8x4_arg.name = "val"_c;
    Int16x4_from_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    Int16x4_from_Bool8x4.documentation = "Convert from b8x4 to i16x4"_c;
    Int16x4_from_Bool8x4.name = Int16x4_from_Bool8x4_name;
    Int16x4_from_Bool8x4.compileTime = true;
    Int16x4_from_Bool8x4.backendIndex = 1079;
    Int16x4_from_Bool8x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_from_Bool8x4.parameters = Int16x4_from_Bool8x4_args;
    Symbol::Resolved(&Int16x4_from_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Int16x4_from_Bool8x4)->signature = "i16x4(b8x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_from_Bool8x4)->name = "i16x4(b8x4)"_c;
    Symbol::Resolved(&Int16x4_from_Bool8x4)->nameWithVarNames = "i16x4(val : b8x4)"_c;
    Symbol::Resolved(&Int16x4_from_Bool8x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Bool8
    Int16x4_splat_Bool8_arg.name = "val"_c;
    Int16x4_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Int16x4_splat_Bool8.documentation = "Splat b8 to i16x4"_c;
    Int16x4_splat_Bool8.name = Int16x4_splat_Bool8_name;
    Int16x4_splat_Bool8.compileTime = true;
    Int16x4_splat_Bool8.backendIndex = 1080;
    Int16x4_splat_Bool8.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_Bool8.parameters = Int16x4_splat_Bool8_args;
    Symbol::Resolved(&Int16x4_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Int16x4_splat_Bool8)->signature = "i16x4(b8) i16x4"_c;
    Symbol::Resolved(&Int16x4_splat_Bool8)->name = "i16x4(b8)"_c;
    Symbol::Resolved(&Int16x4_splat_Bool8)->nameWithVarNames = "i16x4(val : b8)"_c;
    Symbol::Resolved(&Int16x4_splat_Bool8)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Float16x4
    Int16x4_from_Float16x4_arg.name = "val"_c;
    Int16x4_from_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Int16x4_from_Float16x4.documentation = "Convert from f16x4 to i16x4"_c;
    Int16x4_from_Float16x4.name = Int16x4_from_Float16x4_name;
    Int16x4_from_Float16x4.compileTime = true;
    Int16x4_from_Float16x4.backendIndex = 1081;
    Int16x4_from_Float16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_from_Float16x4.parameters = Int16x4_from_Float16x4_args;
    Symbol::Resolved(&Int16x4_from_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Int16x4_from_Float16x4)->signature = "i16x4(f16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_from_Float16x4)->name = "i16x4(f16x4)"_c;
    Symbol::Resolved(&Int16x4_from_Float16x4)->nameWithVarNames = "i16x4(val : f16x4)"_c;
    Symbol::Resolved(&Int16x4_from_Float16x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Float16
    Int16x4_splat_Float16_arg.name = "val"_c;
    Int16x4_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int16x4_splat_Float16.documentation = "Splat f16 to i16x4"_c;
    Int16x4_splat_Float16.name = Int16x4_splat_Float16_name;
    Int16x4_splat_Float16.compileTime = true;
    Int16x4_splat_Float16.backendIndex = 1082;
    Int16x4_splat_Float16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_Float16.parameters = Int16x4_splat_Float16_args;
    Symbol::Resolved(&Int16x4_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x4_splat_Float16)->signature = "i16x4(f16) i16x4"_c;
    Symbol::Resolved(&Int16x4_splat_Float16)->name = "i16x4(f16)"_c;
    Symbol::Resolved(&Int16x4_splat_Float16)->nameWithVarNames = "i16x4(val : f16)"_c;
    Symbol::Resolved(&Int16x4_splat_Float16)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with UInt16x4
    Int16x4_from_UInt16x4_arg.name = "val"_c;
    Int16x4_from_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    Int16x4_from_UInt16x4.documentation = "Convert from u16x4 to i16x4"_c;
    Int16x4_from_UInt16x4.name = Int16x4_from_UInt16x4_name;
    Int16x4_from_UInt16x4.compileTime = true;
    Int16x4_from_UInt16x4.backendIndex = 1083;
    Int16x4_from_UInt16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_from_UInt16x4.parameters = Int16x4_from_UInt16x4_args;
    Symbol::Resolved(&Int16x4_from_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&Int16x4_from_UInt16x4)->signature = "i16x4(u16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_from_UInt16x4)->name = "i16x4(u16x4)"_c;
    Symbol::Resolved(&Int16x4_from_UInt16x4)->nameWithVarNames = "i16x4(val : u16x4)"_c;
    Symbol::Resolved(&Int16x4_from_UInt16x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with UInt16
    Int16x4_splat_UInt16_arg.name = "val"_c;
    Int16x4_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x4_splat_UInt16.documentation = "Splat u16 to i16x4"_c;
    Int16x4_splat_UInt16.name = Int16x4_splat_UInt16_name;
    Int16x4_splat_UInt16.compileTime = true;
    Int16x4_splat_UInt16.backendIndex = 1084;
    Int16x4_splat_UInt16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_UInt16.parameters = Int16x4_splat_UInt16_args;
    Symbol::Resolved(&Int16x4_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x4_splat_UInt16)->signature = "i16x4(u16) i16x4"_c;
    Symbol::Resolved(&Int16x4_splat_UInt16)->name = "i16x4(u16)"_c;
    Symbol::Resolved(&Int16x4_splat_UInt16)->nameWithVarNames = "i16x4(val : u16)"_c;
    Symbol::Resolved(&Int16x4_splat_UInt16)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16x4
    Int16x4_from_Int16x4_arg.name = "val"_c;
    Int16x4_from_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_from_Int16x4.documentation = "Convert from i16x4 to i16x4"_c;
    Int16x4_from_Int16x4.name = Int16x4_from_Int16x4_name;
    Int16x4_from_Int16x4.compileTime = true;
    Int16x4_from_Int16x4.backendIndex = 1085;
    Int16x4_from_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_from_Int16x4.parameters = Int16x4_from_Int16x4_args;
    Symbol::Resolved(&Int16x4_from_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_from_Int16x4)->signature = "i16x4(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_from_Int16x4)->name = "i16x4(i16x4)"_c;
    Symbol::Resolved(&Int16x4_from_Int16x4)->nameWithVarNames = "i16x4(val : i16x4)"_c;
    Symbol::Resolved(&Int16x4_from_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16
    Int16x4_splat_Int16_arg.name = "val"_c;
    Int16x4_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x4_splat_Int16.documentation = "Splat i16 to i16x4"_c;
    Int16x4_splat_Int16.name = Int16x4_splat_Int16_name;
    Int16x4_splat_Int16.compileTime = true;
    Int16x4_splat_Int16.backendIndex = 1086;
    Int16x4_splat_Int16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_Int16.parameters = Int16x4_splat_Int16_args;
    Symbol::Resolved(&Int16x4_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_splat_Int16)->signature = "i16x4(i16) i16x4"_c;
    Symbol::Resolved(&Int16x4_splat_Int16)->name = "i16x4(i16)"_c;
    Symbol::Resolved(&Int16x4_splat_Int16)->nameWithVarNames = "i16x4(val : i16)"_c;
    Symbol::Resolved(&Int16x4_splat_Int16)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16, Int16, Int16, Int16
    Int16x4_ctor0_arg0_Int16.name = "arg0"_c;
    Int16x4_ctor0_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor0_arg1_Int16.name = "arg1"_c;
    Int16x4_ctor0_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor0_arg2_Int16.name = "arg2"_c;
    Int16x4_ctor0_arg2_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor0_arg3_Int16.name = "arg3"_c;
    Int16x4_ctor0_arg3_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor0.name = Int16x4_ctor0_name;
    Int16x4_ctor0.compileTime = true;
    Int16x4_ctor0.backendIndex = 1087;
    Int16x4_ctor0.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor0.parameters = Int16x4_ctor0_args;
    Symbol::Resolved(&Int16x4_ctor0_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor0_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor0_arg2_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor0_arg3_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor0)->signature = "i16x4(i16,i16,i16,i16) i16x4"_c;
    Symbol::Resolved(&Int16x4_ctor0)->name = "i16x4(i16,i16,i16,i16)"_c;
    Symbol::Resolved(&Int16x4_ctor0)->nameWithVarNames = "i16x4(arg0 : i16, arg1 : i16, arg2 : i16, arg3 : i16)"_c;
    Symbol::Resolved(&Int16x4_ctor0)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16x2, Int16, Int16
    Int16x4_ctor1_arg0_Int16x2.name = "arg0"_c;
    Int16x4_ctor1_arg0_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x4_ctor1_arg1_Int16.name = "arg1"_c;
    Int16x4_ctor1_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor1_arg2_Int16.name = "arg2"_c;
    Int16x4_ctor1_arg2_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor1.name = Int16x4_ctor1_name;
    Int16x4_ctor1.compileTime = true;
    Int16x4_ctor1.backendIndex = 1088;
    Int16x4_ctor1.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor1.parameters = Int16x4_ctor1_args;
    Symbol::Resolved(&Int16x4_ctor1_arg0_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x4_ctor1_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor1_arg2_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor1)->signature = "i16x4(i16x2,i16,i16) i16x4"_c;
    Symbol::Resolved(&Int16x4_ctor1)->name = "i16x4(i16x2,i16,i16)"_c;
    Symbol::Resolved(&Int16x4_ctor1)->nameWithVarNames = "i16x4(arg0 : i16x2, arg1 : i16, arg2 : i16)"_c;
    Symbol::Resolved(&Int16x4_ctor1)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16, Int16x2, Int16
    Int16x4_ctor2_arg0_Int16.name = "arg0"_c;
    Int16x4_ctor2_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor2_arg1_Int16x2.name = "arg1"_c;
    Int16x4_ctor2_arg1_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x4_ctor2_arg2_Int16.name = "arg2"_c;
    Int16x4_ctor2_arg2_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor2.name = Int16x4_ctor2_name;
    Int16x4_ctor2.compileTime = true;
    Int16x4_ctor2.backendIndex = 1089;
    Int16x4_ctor2.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor2.parameters = Int16x4_ctor2_args;
    Symbol::Resolved(&Int16x4_ctor2_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor2_arg1_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x4_ctor2_arg2_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor2)->signature = "i16x4(i16,i16x2,i16) i16x4"_c;
    Symbol::Resolved(&Int16x4_ctor2)->name = "i16x4(i16,i16x2,i16)"_c;
    Symbol::Resolved(&Int16x4_ctor2)->nameWithVarNames = "i16x4(arg0 : i16, arg1 : i16x2, arg2 : i16)"_c;
    Symbol::Resolved(&Int16x4_ctor2)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16, Int16, Int16x2
    Int16x4_ctor3_arg0_Int16.name = "arg0"_c;
    Int16x4_ctor3_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor3_arg1_Int16.name = "arg1"_c;
    Int16x4_ctor3_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor3_arg2_Int16x2.name = "arg2"_c;
    Int16x4_ctor3_arg2_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x4_ctor3.name = Int16x4_ctor3_name;
    Int16x4_ctor3.compileTime = true;
    Int16x4_ctor3.backendIndex = 1090;
    Int16x4_ctor3.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor3.parameters = Int16x4_ctor3_args;
    Symbol::Resolved(&Int16x4_ctor3_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor3_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor3_arg2_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x4_ctor3)->signature = "i16x4(i16,i16,i16x2) i16x4"_c;
    Symbol::Resolved(&Int16x4_ctor3)->name = "i16x4(i16,i16,i16x2)"_c;
    Symbol::Resolved(&Int16x4_ctor3)->nameWithVarNames = "i16x4(arg0 : i16, arg1 : i16, arg2 : i16x2)"_c;
    Symbol::Resolved(&Int16x4_ctor3)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16x2, Int16x2
    Int16x4_ctor4_arg0_Int16x2.name = "arg0"_c;
    Int16x4_ctor4_arg0_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x4_ctor4_arg1_Int16x2.name = "arg1"_c;
    Int16x4_ctor4_arg1_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x4_ctor4.name = Int16x4_ctor4_name;
    Int16x4_ctor4.compileTime = true;
    Int16x4_ctor4.backendIndex = 1091;
    Int16x4_ctor4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor4.parameters = Int16x4_ctor4_args;
    Symbol::Resolved(&Int16x4_ctor4_arg0_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x4_ctor4_arg1_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x4_ctor4)->signature = "i16x4(i16x2,i16x2) i16x4"_c;
    Symbol::Resolved(&Int16x4_ctor4)->name = "i16x4(i16x2,i16x2)"_c;
    Symbol::Resolved(&Int16x4_ctor4)->nameWithVarNames = "i16x4(arg0 : i16x2, arg1 : i16x2)"_c;
    Symbol::Resolved(&Int16x4_ctor4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16x3, Int16
    Int16x4_ctor5_arg0_Int16x3.name = "arg0"_c;
    Int16x4_ctor5_arg0_Int16x3.type = Type::FullType{ Int16x3Type.name };
    Int16x4_ctor5_arg1_Int16.name = "arg1"_c;
    Int16x4_ctor5_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor5.name = Int16x4_ctor5_name;
    Int16x4_ctor5.compileTime = true;
    Int16x4_ctor5.backendIndex = 1092;
    Int16x4_ctor5.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor5.parameters = Int16x4_ctor5_args;
    Symbol::Resolved(&Int16x4_ctor5_arg0_Int16x3)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x4_ctor5_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor5)->signature = "i16x4(i16x3,i16) i16x4"_c;
    Symbol::Resolved(&Int16x4_ctor5)->name = "i16x4(i16x3,i16)"_c;
    Symbol::Resolved(&Int16x4_ctor5)->nameWithVarNames = "i16x4(arg0 : i16x3, arg1 : i16)"_c;
    Symbol::Resolved(&Int16x4_ctor5)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16, Int16x3
    Int16x4_ctor6_arg0_Int16.name = "arg0"_c;
    Int16x4_ctor6_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor6_arg1_Int16x3.name = "arg1"_c;
    Int16x4_ctor6_arg1_Int16x3.type = Type::FullType{ Int16x3Type.name };
    Int16x4_ctor6.name = Int16x4_ctor6_name;
    Int16x4_ctor6.compileTime = true;
    Int16x4_ctor6.backendIndex = 1093;
    Int16x4_ctor6.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor6.parameters = Int16x4_ctor6_args;
    Symbol::Resolved(&Int16x4_ctor6_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor6_arg1_Int16x3)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x4_ctor6)->signature = "i16x4(i16,i16x3) i16x4"_c;
    Symbol::Resolved(&Int16x4_ctor6)->name = "i16x4(i16,i16x3)"_c;
    Symbol::Resolved(&Int16x4_ctor6)->nameWithVarNames = "i16x4(arg0 : i16, arg1 : i16x3)"_c;
    Symbol::Resolved(&Int16x4_ctor6)->returnTypeSymbol = &Int16x4Type;

    /// f32x2x2 with Float32x2, Float32x2
    Float32x2x2_Float32_2_ctor_arg0.name = "arg0"_c;
    Float32x2x2_Float32_2_ctor_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2x2_Float32_2_ctor_arg1.name = "arg1"_c;
    Float32x2x2_Float32_2_ctor_arg1.type = Type::FullType{ Float32x2Type.name };
    Float32x2x2_Float32_2_ctor.name = Float32x2x2_Float32_2_ctor_name;
    Float32x2x2_Float32_2_ctor.compileTime = true;
    Float32x2x2_Float32_2_ctor.backendIndex = 1126;
    Float32x2x2_Float32_2_ctor.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_Float32_2_ctor.parameters = Float32x2x2_Float32_2_ctor_args;
    Symbol::Resolved(&Float32x2x2_Float32_2_ctor_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2x2_Float32_2_ctor_arg1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2x2_Float32_2_ctor)->signature = "f32x2x2(f32x2,f32x2) f32x2x2"_c;
    Symbol::Resolved(&Float32x2x2_Float32_2_ctor)->name = "f32x2x2(f32x2,f32x2)"_c;
    Symbol::Resolved(&Float32x2x2_Float32_2_ctor)->nameWithVarNames = "f32x2x2(arg0 : f32x2, arg1 : f32x2)"_c;
    Symbol::Resolved(&Float32x2x2_Float32_2_ctor)->returnTypeSymbol = &Float32x2x2Type;

    /// f32x2x2
    Float32x2x2_identity.name = Float32x2x2_identity_name;
    Float32x2x2_identity.compileTime = true;
    Float32x2x2_identity.backendIndex = 1127;
    Float32x2x2_identity.returnType = Type::FullType { Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_identity)->signature = "f32x2x2() f32x2x2"_c;
    Symbol::Resolved(&Float32x2x2_identity)->name = "f32x2x2()"_c;
    Symbol::Resolved(&Float32x2x2_identity)->nameWithVarNames = "f32x2x2()"_c;
    Symbol::Resolved(&Float32x2x2_identity)->returnTypeSymbol = &Float32x2x2Type;

    /// f32x2x2 with Float32, Float32, Float32, Float32
    Float32x2x2_raw_list_arg0.name = "arg0"_c;
    Float32x2x2_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x2x2_raw_list_arg1.name = "arg1"_c;
    Float32x2x2_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x2x2_raw_list_arg2.name = "arg2"_c;
    Float32x2x2_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x2x2_raw_list_arg3.name = "arg3"_c;
    Float32x2x2_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x2x2_raw_list.name = Float32x2x2_raw_list_name;
    Float32x2x2_raw_list.compileTime = true;
    Float32x2x2_raw_list.backendIndex = 1128;
    Float32x2x2_raw_list.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_raw_list.parameters = Float32x2x2_raw_list_args;
    Symbol::Resolved(&Float32x2x2_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x2_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x2_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x2_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x2_raw_list)->signature = "f32x2x2(f32,f32,f32,f32) f32x2x2"_c;
    Symbol::Resolved(&Float32x2x2_raw_list)->name = "f32x2x2(f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x2x2_raw_list)->nameWithVarNames = "f32x2x2(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32)"_c;
    Symbol::Resolved(&Float32x2x2_raw_list)->returnTypeSymbol = &Float32x2x2Type;

    /// f32x3x2 with Float32x2, Float32x2, Float32x2
    Float32x3x2_Float32_2_ctor_arg0.name = "arg0"_c;
    Float32x3x2_Float32_2_ctor_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x3x2_Float32_2_ctor_arg1.name = "arg1"_c;
    Float32x3x2_Float32_2_ctor_arg1.type = Type::FullType{ Float32x2Type.name };
    Float32x3x2_Float32_2_ctor_arg2.name = "arg2"_c;
    Float32x3x2_Float32_2_ctor_arg2.type = Type::FullType{ Float32x2Type.name };
    Float32x3x2_Float32_2_ctor.name = Float32x3x2_Float32_2_ctor_name;
    Float32x3x2_Float32_2_ctor.compileTime = true;
    Float32x3x2_Float32_2_ctor.backendIndex = 1141;
    Float32x3x2_Float32_2_ctor.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_Float32_2_ctor.parameters = Float32x3x2_Float32_2_ctor_args;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor_arg1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor_arg2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor)->signature = "f32x3x2(f32x2,f32x2,f32x2) f32x3x2"_c;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor)->name = "f32x3x2(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor)->nameWithVarNames = "f32x3x2(arg0 : f32x2, arg1 : f32x2, arg2 : f32x2)"_c;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor)->returnTypeSymbol = &Float32x3x2Type;

    /// f32x3x2 with Float32, Float32, Float32, Float32, Float32, Float32
    Float32x3x2_raw_list_arg0.name = "arg0"_c;
    Float32x3x2_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list_arg1.name = "arg1"_c;
    Float32x3x2_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list_arg2.name = "arg2"_c;
    Float32x3x2_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list_arg3.name = "arg3"_c;
    Float32x3x2_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list_arg4.name = "arg4"_c;
    Float32x3x2_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list_arg5.name = "arg5"_c;
    Float32x3x2_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list.name = Float32x3x2_raw_list_name;
    Float32x3x2_raw_list.compileTime = true;
    Float32x3x2_raw_list.backendIndex = 1142;
    Float32x3x2_raw_list.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_raw_list.parameters = Float32x3x2_raw_list_args;
    Symbol::Resolved(&Float32x3x2_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list)->signature = "f32x3x2(f32,f32,f32,f32,f32,f32) f32x3x2"_c;
    Symbol::Resolved(&Float32x3x2_raw_list)->name = "f32x3x2(f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x3x2_raw_list)->nameWithVarNames = "f32x3x2(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32)"_c;
    Symbol::Resolved(&Float32x3x2_raw_list)->returnTypeSymbol = &Float32x3x2Type;

    /// f32x4x2 with Float32x2, Float32x2, Float32x2, Float32x2
    Float32x4x2_Float32_2_ctor_arg0.name = "arg0"_c;
    Float32x4x2_Float32_2_ctor_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x4x2_Float32_2_ctor_arg1.name = "arg1"_c;
    Float32x4x2_Float32_2_ctor_arg1.type = Type::FullType{ Float32x2Type.name };
    Float32x4x2_Float32_2_ctor_arg2.name = "arg2"_c;
    Float32x4x2_Float32_2_ctor_arg2.type = Type::FullType{ Float32x2Type.name };
    Float32x4x2_Float32_2_ctor_arg3.name = "arg3"_c;
    Float32x4x2_Float32_2_ctor_arg3.type = Type::FullType{ Float32x2Type.name };
    Float32x4x2_Float32_2_ctor.name = Float32x4x2_Float32_2_ctor_name;
    Float32x4x2_Float32_2_ctor.compileTime = true;
    Float32x4x2_Float32_2_ctor.backendIndex = 1155;
    Float32x4x2_Float32_2_ctor.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_Float32_2_ctor.parameters = Float32x4x2_Float32_2_ctor_args;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor_arg1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor_arg2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor_arg3)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor)->signature = "f32x4x2(f32x2,f32x2,f32x2,f32x2) f32x4x2"_c;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor)->name = "f32x4x2(f32x2,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor)->nameWithVarNames = "f32x4x2(arg0 : f32x2, arg1 : f32x2, arg2 : f32x2, arg3 : f32x2)"_c;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor)->returnTypeSymbol = &Float32x4x2Type;

    /// f32x4x2 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x4x2_raw_list_arg0.name = "arg0"_c;
    Float32x4x2_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg1.name = "arg1"_c;
    Float32x4x2_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg2.name = "arg2"_c;
    Float32x4x2_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg3.name = "arg3"_c;
    Float32x4x2_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg4.name = "arg4"_c;
    Float32x4x2_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg5.name = "arg5"_c;
    Float32x4x2_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg6.name = "arg6"_c;
    Float32x4x2_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg7.name = "arg7"_c;
    Float32x4x2_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list.name = Float32x4x2_raw_list_name;
    Float32x4x2_raw_list.compileTime = true;
    Float32x4x2_raw_list.backendIndex = 1156;
    Float32x4x2_raw_list.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_raw_list.parameters = Float32x4x2_raw_list_args;
    Symbol::Resolved(&Float32x4x2_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list)->signature = "f32x4x2(f32,f32,f32,f32,f32,f32,f32,f32) f32x4x2"_c;
    Symbol::Resolved(&Float32x4x2_raw_list)->name = "f32x4x2(f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x4x2_raw_list)->nameWithVarNames = "f32x4x2(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32, arg6 : f32, arg7 : f32)"_c;
    Symbol::Resolved(&Float32x4x2_raw_list)->returnTypeSymbol = &Float32x4x2Type;

    /// f32x2x3 with Float32x3, Float32x3
    Float32x2x3_Float32_3_ctor_arg0.name = "arg0"_c;
    Float32x2x3_Float32_3_ctor_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x2x3_Float32_3_ctor_arg1.name = "arg1"_c;
    Float32x2x3_Float32_3_ctor_arg1.type = Type::FullType{ Float32x3Type.name };
    Float32x2x3_Float32_3_ctor.name = Float32x2x3_Float32_3_ctor_name;
    Float32x2x3_Float32_3_ctor.compileTime = true;
    Float32x2x3_Float32_3_ctor.backendIndex = 1169;
    Float32x2x3_Float32_3_ctor.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_Float32_3_ctor.parameters = Float32x2x3_Float32_3_ctor_args;
    Symbol::Resolved(&Float32x2x3_Float32_3_ctor_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x2x3_Float32_3_ctor_arg1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x2x3_Float32_3_ctor)->signature = "f32x2x3(f32x3,f32x3) f32x2x3"_c;
    Symbol::Resolved(&Float32x2x3_Float32_3_ctor)->name = "f32x2x3(f32x3,f32x3)"_c;
    Symbol::Resolved(&Float32x2x3_Float32_3_ctor)->nameWithVarNames = "f32x2x3(arg0 : f32x3, arg1 : f32x3)"_c;
    Symbol::Resolved(&Float32x2x3_Float32_3_ctor)->returnTypeSymbol = &Float32x2x3Type;

    /// f32x2x3 with Float32, Float32, Float32, Float32, Float32, Float32
    Float32x2x3_raw_list_arg0.name = "arg0"_c;
    Float32x2x3_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list_arg1.name = "arg1"_c;
    Float32x2x3_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list_arg2.name = "arg2"_c;
    Float32x2x3_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list_arg3.name = "arg3"_c;
    Float32x2x3_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list_arg4.name = "arg4"_c;
    Float32x2x3_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list_arg5.name = "arg5"_c;
    Float32x2x3_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list.name = Float32x2x3_raw_list_name;
    Float32x2x3_raw_list.compileTime = true;
    Float32x2x3_raw_list.backendIndex = 1170;
    Float32x2x3_raw_list.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_raw_list.parameters = Float32x2x3_raw_list_args;
    Symbol::Resolved(&Float32x2x3_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list)->signature = "f32x2x3(f32,f32,f32,f32,f32,f32) f32x2x3"_c;
    Symbol::Resolved(&Float32x2x3_raw_list)->name = "f32x2x3(f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x2x3_raw_list)->nameWithVarNames = "f32x2x3(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32)"_c;
    Symbol::Resolved(&Float32x2x3_raw_list)->returnTypeSymbol = &Float32x2x3Type;

    /// f32x3x3 with Float32x3, Float32x3, Float32x3
    Float32x3x3_Float32_3_ctor_arg0.name = "arg0"_c;
    Float32x3x3_Float32_3_ctor_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3x3_Float32_3_ctor_arg1.name = "arg1"_c;
    Float32x3x3_Float32_3_ctor_arg1.type = Type::FullType{ Float32x3Type.name };
    Float32x3x3_Float32_3_ctor_arg2.name = "arg2"_c;
    Float32x3x3_Float32_3_ctor_arg2.type = Type::FullType{ Float32x3Type.name };
    Float32x3x3_Float32_3_ctor.name = Float32x3x3_Float32_3_ctor_name;
    Float32x3x3_Float32_3_ctor.compileTime = true;
    Float32x3x3_Float32_3_ctor.backendIndex = 1183;
    Float32x3x3_Float32_3_ctor.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_Float32_3_ctor.parameters = Float32x3x3_Float32_3_ctor_args;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor_arg1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor_arg2)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor)->signature = "f32x3x3(f32x3,f32x3,f32x3) f32x3x3"_c;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor)->name = "f32x3x3(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor)->nameWithVarNames = "f32x3x3(arg0 : f32x3, arg1 : f32x3, arg2 : f32x3)"_c;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor)->returnTypeSymbol = &Float32x3x3Type;

    /// f32x3x3
    Float32x3x3_identity.name = Float32x3x3_identity_name;
    Float32x3x3_identity.compileTime = true;
    Float32x3x3_identity.backendIndex = 1184;
    Float32x3x3_identity.returnType = Type::FullType { Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_identity)->signature = "f32x3x3() f32x3x3"_c;
    Symbol::Resolved(&Float32x3x3_identity)->name = "f32x3x3()"_c;
    Symbol::Resolved(&Float32x3x3_identity)->nameWithVarNames = "f32x3x3()"_c;
    Symbol::Resolved(&Float32x3x3_identity)->returnTypeSymbol = &Float32x3x3Type;

    /// f32x3x3 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x3x3_raw_list_arg0.name = "arg0"_c;
    Float32x3x3_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg1.name = "arg1"_c;
    Float32x3x3_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg2.name = "arg2"_c;
    Float32x3x3_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg3.name = "arg3"_c;
    Float32x3x3_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg4.name = "arg4"_c;
    Float32x3x3_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg5.name = "arg5"_c;
    Float32x3x3_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg6.name = "arg6"_c;
    Float32x3x3_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg7.name = "arg7"_c;
    Float32x3x3_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg8.name = "arg8"_c;
    Float32x3x3_raw_list_arg8.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list.name = Float32x3x3_raw_list_name;
    Float32x3x3_raw_list.compileTime = true;
    Float32x3x3_raw_list.backendIndex = 1185;
    Float32x3x3_raw_list.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_raw_list.parameters = Float32x3x3_raw_list_args;
    Symbol::Resolved(&Float32x3x3_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg8)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list)->signature = "f32x3x3(f32,f32,f32,f32,f32,f32,f32,f32,f32) f32x3x3"_c;
    Symbol::Resolved(&Float32x3x3_raw_list)->name = "f32x3x3(f32,f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x3x3_raw_list)->nameWithVarNames = "f32x3x3(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32, arg6 : f32, arg7 : f32, arg8 : f32)"_c;
    Symbol::Resolved(&Float32x3x3_raw_list)->returnTypeSymbol = &Float32x3x3Type;

    /// f32x4x3 with Float32x3, Float32x3, Float32x3, Float32x3
    Float32x4x3_Float32_3_ctor_arg0.name = "arg0"_c;
    Float32x4x3_Float32_3_ctor_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x4x3_Float32_3_ctor_arg1.name = "arg1"_c;
    Float32x4x3_Float32_3_ctor_arg1.type = Type::FullType{ Float32x3Type.name };
    Float32x4x3_Float32_3_ctor_arg2.name = "arg2"_c;
    Float32x4x3_Float32_3_ctor_arg2.type = Type::FullType{ Float32x3Type.name };
    Float32x4x3_Float32_3_ctor_arg3.name = "arg3"_c;
    Float32x4x3_Float32_3_ctor_arg3.type = Type::FullType{ Float32x3Type.name };
    Float32x4x3_Float32_3_ctor.name = Float32x4x3_Float32_3_ctor_name;
    Float32x4x3_Float32_3_ctor.compileTime = true;
    Float32x4x3_Float32_3_ctor.backendIndex = 1198;
    Float32x4x3_Float32_3_ctor.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_Float32_3_ctor.parameters = Float32x4x3_Float32_3_ctor_args;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor_arg1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor_arg2)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor_arg3)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor)->signature = "f32x4x3(f32x3,f32x3,f32x3,f32x3) f32x4x3"_c;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor)->name = "f32x4x3(f32x3,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor)->nameWithVarNames = "f32x4x3(arg0 : f32x3, arg1 : f32x3, arg2 : f32x3, arg3 : f32x3)"_c;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor)->returnTypeSymbol = &Float32x4x3Type;

    /// f32x4x3 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x4x3_raw_list_arg0.name = "arg0"_c;
    Float32x4x3_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg1.name = "arg1"_c;
    Float32x4x3_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg2.name = "arg2"_c;
    Float32x4x3_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg3.name = "arg3"_c;
    Float32x4x3_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg4.name = "arg4"_c;
    Float32x4x3_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg5.name = "arg5"_c;
    Float32x4x3_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg6.name = "arg6"_c;
    Float32x4x3_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg7.name = "arg7"_c;
    Float32x4x3_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg8.name = "arg8"_c;
    Float32x4x3_raw_list_arg8.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg9.name = "arg9"_c;
    Float32x4x3_raw_list_arg9.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg10.name = "arg10"_c;
    Float32x4x3_raw_list_arg10.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg11.name = "arg11"_c;
    Float32x4x3_raw_list_arg11.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list.name = Float32x4x3_raw_list_name;
    Float32x4x3_raw_list.compileTime = true;
    Float32x4x3_raw_list.backendIndex = 1199;
    Float32x4x3_raw_list.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_raw_list.parameters = Float32x4x3_raw_list_args;
    Symbol::Resolved(&Float32x4x3_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg8)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg9)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg10)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg11)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list)->signature = "f32x4x3(f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32) f32x4x3"_c;
    Symbol::Resolved(&Float32x4x3_raw_list)->name = "f32x4x3(f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x4x3_raw_list)->nameWithVarNames = "f32x4x3(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32, arg6 : f32, arg7 : f32, arg8 : f32, arg9 : f32, arg10 : f32, arg11 : f32)"_c;
    Symbol::Resolved(&Float32x4x3_raw_list)->returnTypeSymbol = &Float32x4x3Type;

    /// f32x2x4 with Float32x4, Float32x4
    Float32x2x4_Float32_4_ctor_arg0.name = "arg0"_c;
    Float32x2x4_Float32_4_ctor_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x2x4_Float32_4_ctor_arg1.name = "arg1"_c;
    Float32x2x4_Float32_4_ctor_arg1.type = Type::FullType{ Float32x4Type.name };
    Float32x2x4_Float32_4_ctor.name = Float32x2x4_Float32_4_ctor_name;
    Float32x2x4_Float32_4_ctor.compileTime = true;
    Float32x2x4_Float32_4_ctor.backendIndex = 1212;
    Float32x2x4_Float32_4_ctor.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_Float32_4_ctor.parameters = Float32x2x4_Float32_4_ctor_args;
    Symbol::Resolved(&Float32x2x4_Float32_4_ctor_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x2x4_Float32_4_ctor_arg1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x2x4_Float32_4_ctor)->signature = "f32x2x4(f32x4,f32x4) f32x2x4"_c;
    Symbol::Resolved(&Float32x2x4_Float32_4_ctor)->name = "f32x2x4(f32x4,f32x4)"_c;
    Symbol::Resolved(&Float32x2x4_Float32_4_ctor)->nameWithVarNames = "f32x2x4(arg0 : f32x4, arg1 : f32x4)"_c;
    Symbol::Resolved(&Float32x2x4_Float32_4_ctor)->returnTypeSymbol = &Float32x2x4Type;

    /// f32x2x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x2x4_raw_list_arg0.name = "arg0"_c;
    Float32x2x4_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg1.name = "arg1"_c;
    Float32x2x4_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg2.name = "arg2"_c;
    Float32x2x4_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg3.name = "arg3"_c;
    Float32x2x4_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg4.name = "arg4"_c;
    Float32x2x4_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg5.name = "arg5"_c;
    Float32x2x4_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg6.name = "arg6"_c;
    Float32x2x4_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg7.name = "arg7"_c;
    Float32x2x4_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list.name = Float32x2x4_raw_list_name;
    Float32x2x4_raw_list.compileTime = true;
    Float32x2x4_raw_list.backendIndex = 1213;
    Float32x2x4_raw_list.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_raw_list.parameters = Float32x2x4_raw_list_args;
    Symbol::Resolved(&Float32x2x4_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list)->signature = "f32x2x4(f32,f32,f32,f32,f32,f32,f32,f32) f32x2x4"_c;
    Symbol::Resolved(&Float32x2x4_raw_list)->name = "f32x2x4(f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x2x4_raw_list)->nameWithVarNames = "f32x2x4(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32, arg6 : f32, arg7 : f32)"_c;
    Symbol::Resolved(&Float32x2x4_raw_list)->returnTypeSymbol = &Float32x2x4Type;

    /// f32x3x4 with Float32x4, Float32x4, Float32x4
    Float32x3x4_Float32_4_ctor_arg0.name = "arg0"_c;
    Float32x3x4_Float32_4_ctor_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x3x4_Float32_4_ctor_arg1.name = "arg1"_c;
    Float32x3x4_Float32_4_ctor_arg1.type = Type::FullType{ Float32x4Type.name };
    Float32x3x4_Float32_4_ctor_arg2.name = "arg2"_c;
    Float32x3x4_Float32_4_ctor_arg2.type = Type::FullType{ Float32x4Type.name };
    Float32x3x4_Float32_4_ctor.name = Float32x3x4_Float32_4_ctor_name;
    Float32x3x4_Float32_4_ctor.compileTime = true;
    Float32x3x4_Float32_4_ctor.backendIndex = 1226;
    Float32x3x4_Float32_4_ctor.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_Float32_4_ctor.parameters = Float32x3x4_Float32_4_ctor_args;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor_arg1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor_arg2)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor)->signature = "f32x3x4(f32x4,f32x4,f32x4) f32x3x4"_c;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor)->name = "f32x3x4(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor)->nameWithVarNames = "f32x3x4(arg0 : f32x4, arg1 : f32x4, arg2 : f32x4)"_c;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor)->returnTypeSymbol = &Float32x3x4Type;

    /// f32x3x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x3x4_raw_list_arg0.name = "arg0"_c;
    Float32x3x4_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg1.name = "arg1"_c;
    Float32x3x4_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg2.name = "arg2"_c;
    Float32x3x4_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg3.name = "arg3"_c;
    Float32x3x4_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg4.name = "arg4"_c;
    Float32x3x4_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg5.name = "arg5"_c;
    Float32x3x4_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg6.name = "arg6"_c;
    Float32x3x4_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg7.name = "arg7"_c;
    Float32x3x4_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg8.name = "arg8"_c;
    Float32x3x4_raw_list_arg8.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg9.name = "arg9"_c;
    Float32x3x4_raw_list_arg9.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg10.name = "arg10"_c;
    Float32x3x4_raw_list_arg10.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg11.name = "arg11"_c;
    Float32x3x4_raw_list_arg11.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list.name = Float32x3x4_raw_list_name;
    Float32x3x4_raw_list.compileTime = true;
    Float32x3x4_raw_list.backendIndex = 1227;
    Float32x3x4_raw_list.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_raw_list.parameters = Float32x3x4_raw_list_args;
    Symbol::Resolved(&Float32x3x4_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg8)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg9)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg10)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg11)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list)->signature = "f32x3x4(f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32) f32x3x4"_c;
    Symbol::Resolved(&Float32x3x4_raw_list)->name = "f32x3x4(f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x3x4_raw_list)->nameWithVarNames = "f32x3x4(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32, arg6 : f32, arg7 : f32, arg8 : f32, arg9 : f32, arg10 : f32, arg11 : f32)"_c;
    Symbol::Resolved(&Float32x3x4_raw_list)->returnTypeSymbol = &Float32x3x4Type;

    /// f32x4x4 with Float32x4, Float32x4, Float32x4, Float32x4
    Float32x4x4_Float32_4_ctor_arg0.name = "arg0"_c;
    Float32x4x4_Float32_4_ctor_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4x4_Float32_4_ctor_arg1.name = "arg1"_c;
    Float32x4x4_Float32_4_ctor_arg1.type = Type::FullType{ Float32x4Type.name };
    Float32x4x4_Float32_4_ctor_arg2.name = "arg2"_c;
    Float32x4x4_Float32_4_ctor_arg2.type = Type::FullType{ Float32x4Type.name };
    Float32x4x4_Float32_4_ctor_arg3.name = "arg3"_c;
    Float32x4x4_Float32_4_ctor_arg3.type = Type::FullType{ Float32x4Type.name };
    Float32x4x4_Float32_4_ctor.name = Float32x4x4_Float32_4_ctor_name;
    Float32x4x4_Float32_4_ctor.compileTime = true;
    Float32x4x4_Float32_4_ctor.backendIndex = 1240;
    Float32x4x4_Float32_4_ctor.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_Float32_4_ctor.parameters = Float32x4x4_Float32_4_ctor_args;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor_arg1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor_arg2)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor_arg3)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor)->signature = "f32x4x4(f32x4,f32x4,f32x4,f32x4) f32x4x4"_c;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor)->name = "f32x4x4(f32x4,f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor)->nameWithVarNames = "f32x4x4(arg0 : f32x4, arg1 : f32x4, arg2 : f32x4, arg3 : f32x4)"_c;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor)->returnTypeSymbol = &Float32x4x4Type;

    /// f32x4x4
    Float32x4x4_identity.name = Float32x4x4_identity_name;
    Float32x4x4_identity.compileTime = true;
    Float32x4x4_identity.backendIndex = 1241;
    Float32x4x4_identity.returnType = Type::FullType { Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_identity)->signature = "f32x4x4() f32x4x4"_c;
    Symbol::Resolved(&Float32x4x4_identity)->name = "f32x4x4()"_c;
    Symbol::Resolved(&Float32x4x4_identity)->nameWithVarNames = "f32x4x4()"_c;
    Symbol::Resolved(&Float32x4x4_identity)->returnTypeSymbol = &Float32x4x4Type;

    /// f32x4x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x4x4_raw_list_arg0.name = "arg0"_c;
    Float32x4x4_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg1.name = "arg1"_c;
    Float32x4x4_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg2.name = "arg2"_c;
    Float32x4x4_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg3.name = "arg3"_c;
    Float32x4x4_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg4.name = "arg4"_c;
    Float32x4x4_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg5.name = "arg5"_c;
    Float32x4x4_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg6.name = "arg6"_c;
    Float32x4x4_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg7.name = "arg7"_c;
    Float32x4x4_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg8.name = "arg8"_c;
    Float32x4x4_raw_list_arg8.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg9.name = "arg9"_c;
    Float32x4x4_raw_list_arg9.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg10.name = "arg10"_c;
    Float32x4x4_raw_list_arg10.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg11.name = "arg11"_c;
    Float32x4x4_raw_list_arg11.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg12.name = "arg12"_c;
    Float32x4x4_raw_list_arg12.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg13.name = "arg13"_c;
    Float32x4x4_raw_list_arg13.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg14.name = "arg14"_c;
    Float32x4x4_raw_list_arg14.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg15.name = "arg15"_c;
    Float32x4x4_raw_list_arg15.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list.name = Float32x4x4_raw_list_name;
    Float32x4x4_raw_list.compileTime = true;
    Float32x4x4_raw_list.backendIndex = 1242;
    Float32x4x4_raw_list.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_raw_list.parameters = Float32x4x4_raw_list_args;
    Symbol::Resolved(&Float32x4x4_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg8)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg9)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg10)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg11)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg12)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg13)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg14)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg15)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list)->signature = "f32x4x4(f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32) f32x4x4"_c;
    Symbol::Resolved(&Float32x4x4_raw_list)->name = "f32x4x4(f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x4x4_raw_list)->nameWithVarNames = "f32x4x4(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32, arg6 : f32, arg7 : f32, arg8 : f32, arg9 : f32, arg10 : f32, arg11 : f32, arg12 : f32, arg13 : f32, arg14 : f32, arg15 : f32)"_c;
    Symbol::Resolved(&Float32x4x4_raw_list)->returnTypeSymbol = &Float32x4x4Type;

    /// f16x2x2 with Float16x2, Float16x2
    Float16x2x2_Float16_2_ctor_arg0.name = "arg0"_c;
    Float16x2x2_Float16_2_ctor_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2x2_Float16_2_ctor_arg1.name = "arg1"_c;
    Float16x2x2_Float16_2_ctor_arg1.type = Type::FullType{ Float16x2Type.name };
    Float16x2x2_Float16_2_ctor.name = Float16x2x2_Float16_2_ctor_name;
    Float16x2x2_Float16_2_ctor.compileTime = true;
    Float16x2x2_Float16_2_ctor.backendIndex = 1255;
    Float16x2x2_Float16_2_ctor.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_Float16_2_ctor.parameters = Float16x2x2_Float16_2_ctor_args;
    Symbol::Resolved(&Float16x2x2_Float16_2_ctor_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2x2_Float16_2_ctor_arg1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2x2_Float16_2_ctor)->signature = "f16x2x2(f16x2,f16x2) f16x2x2"_c;
    Symbol::Resolved(&Float16x2x2_Float16_2_ctor)->name = "f16x2x2(f16x2,f16x2)"_c;
    Symbol::Resolved(&Float16x2x2_Float16_2_ctor)->nameWithVarNames = "f16x2x2(arg0 : f16x2, arg1 : f16x2)"_c;
    Symbol::Resolved(&Float16x2x2_Float16_2_ctor)->returnTypeSymbol = &Float16x2x2Type;

    /// f16x2x2
    Float16x2x2_identity.name = Float16x2x2_identity_name;
    Float16x2x2_identity.compileTime = true;
    Float16x2x2_identity.backendIndex = 1256;
    Float16x2x2_identity.returnType = Type::FullType { Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_identity)->signature = "f16x2x2() f16x2x2"_c;
    Symbol::Resolved(&Float16x2x2_identity)->name = "f16x2x2()"_c;
    Symbol::Resolved(&Float16x2x2_identity)->nameWithVarNames = "f16x2x2()"_c;
    Symbol::Resolved(&Float16x2x2_identity)->returnTypeSymbol = &Float16x2x2Type;

    /// f16x2x2 with Float16, Float16, Float16, Float16
    Float16x2x2_raw_list_arg0.name = "arg0"_c;
    Float16x2x2_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x2x2_raw_list_arg1.name = "arg1"_c;
    Float16x2x2_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x2x2_raw_list_arg2.name = "arg2"_c;
    Float16x2x2_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x2x2_raw_list_arg3.name = "arg3"_c;
    Float16x2x2_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x2x2_raw_list.name = Float16x2x2_raw_list_name;
    Float16x2x2_raw_list.compileTime = true;
    Float16x2x2_raw_list.backendIndex = 1257;
    Float16x2x2_raw_list.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_raw_list.parameters = Float16x2x2_raw_list_args;
    Symbol::Resolved(&Float16x2x2_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x2_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x2_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x2_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x2_raw_list)->signature = "f16x2x2(f16,f16,f16,f16) f16x2x2"_c;
    Symbol::Resolved(&Float16x2x2_raw_list)->name = "f16x2x2(f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x2x2_raw_list)->nameWithVarNames = "f16x2x2(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16)"_c;
    Symbol::Resolved(&Float16x2x2_raw_list)->returnTypeSymbol = &Float16x2x2Type;

    /// f16x3x2 with Float16x2, Float16x2, Float16x2
    Float16x3x2_Float16_2_ctor_arg0.name = "arg0"_c;
    Float16x3x2_Float16_2_ctor_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x3x2_Float16_2_ctor_arg1.name = "arg1"_c;
    Float16x3x2_Float16_2_ctor_arg1.type = Type::FullType{ Float16x2Type.name };
    Float16x3x2_Float16_2_ctor_arg2.name = "arg2"_c;
    Float16x3x2_Float16_2_ctor_arg2.type = Type::FullType{ Float16x2Type.name };
    Float16x3x2_Float16_2_ctor.name = Float16x3x2_Float16_2_ctor_name;
    Float16x3x2_Float16_2_ctor.compileTime = true;
    Float16x3x2_Float16_2_ctor.backendIndex = 1270;
    Float16x3x2_Float16_2_ctor.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_Float16_2_ctor.parameters = Float16x3x2_Float16_2_ctor_args;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor_arg1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor_arg2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor)->signature = "f16x3x2(f16x2,f16x2,f16x2) f16x3x2"_c;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor)->name = "f16x3x2(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor)->nameWithVarNames = "f16x3x2(arg0 : f16x2, arg1 : f16x2, arg2 : f16x2)"_c;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor)->returnTypeSymbol = &Float16x3x2Type;

    /// f16x3x2 with Float16, Float16, Float16, Float16, Float16, Float16
    Float16x3x2_raw_list_arg0.name = "arg0"_c;
    Float16x3x2_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list_arg1.name = "arg1"_c;
    Float16x3x2_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list_arg2.name = "arg2"_c;
    Float16x3x2_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list_arg3.name = "arg3"_c;
    Float16x3x2_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list_arg4.name = "arg4"_c;
    Float16x3x2_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list_arg5.name = "arg5"_c;
    Float16x3x2_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list.name = Float16x3x2_raw_list_name;
    Float16x3x2_raw_list.compileTime = true;
    Float16x3x2_raw_list.backendIndex = 1271;
    Float16x3x2_raw_list.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_raw_list.parameters = Float16x3x2_raw_list_args;
    Symbol::Resolved(&Float16x3x2_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list)->signature = "f16x3x2(f16,f16,f16,f16,f16,f16) f16x3x2"_c;
    Symbol::Resolved(&Float16x3x2_raw_list)->name = "f16x3x2(f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x3x2_raw_list)->nameWithVarNames = "f16x3x2(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16)"_c;
    Symbol::Resolved(&Float16x3x2_raw_list)->returnTypeSymbol = &Float16x3x2Type;

    /// f16x4x2 with Float16x2, Float16x2, Float16x2, Float16x2
    Float16x4x2_Float16_2_ctor_arg0.name = "arg0"_c;
    Float16x4x2_Float16_2_ctor_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x4x2_Float16_2_ctor_arg1.name = "arg1"_c;
    Float16x4x2_Float16_2_ctor_arg1.type = Type::FullType{ Float16x2Type.name };
    Float16x4x2_Float16_2_ctor_arg2.name = "arg2"_c;
    Float16x4x2_Float16_2_ctor_arg2.type = Type::FullType{ Float16x2Type.name };
    Float16x4x2_Float16_2_ctor_arg3.name = "arg3"_c;
    Float16x4x2_Float16_2_ctor_arg3.type = Type::FullType{ Float16x2Type.name };
    Float16x4x2_Float16_2_ctor.name = Float16x4x2_Float16_2_ctor_name;
    Float16x4x2_Float16_2_ctor.compileTime = true;
    Float16x4x2_Float16_2_ctor.backendIndex = 1284;
    Float16x4x2_Float16_2_ctor.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_Float16_2_ctor.parameters = Float16x4x2_Float16_2_ctor_args;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor_arg1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor_arg2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor_arg3)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor)->signature = "f16x4x2(f16x2,f16x2,f16x2,f16x2) f16x4x2"_c;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor)->name = "f16x4x2(f16x2,f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor)->nameWithVarNames = "f16x4x2(arg0 : f16x2, arg1 : f16x2, arg2 : f16x2, arg3 : f16x2)"_c;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor)->returnTypeSymbol = &Float16x4x2Type;

    /// f16x4x2 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x4x2_raw_list_arg0.name = "arg0"_c;
    Float16x4x2_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg1.name = "arg1"_c;
    Float16x4x2_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg2.name = "arg2"_c;
    Float16x4x2_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg3.name = "arg3"_c;
    Float16x4x2_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg4.name = "arg4"_c;
    Float16x4x2_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg5.name = "arg5"_c;
    Float16x4x2_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg6.name = "arg6"_c;
    Float16x4x2_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg7.name = "arg7"_c;
    Float16x4x2_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list.name = Float16x4x2_raw_list_name;
    Float16x4x2_raw_list.compileTime = true;
    Float16x4x2_raw_list.backendIndex = 1285;
    Float16x4x2_raw_list.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_raw_list.parameters = Float16x4x2_raw_list_args;
    Symbol::Resolved(&Float16x4x2_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list)->signature = "f16x4x2(f16,f16,f16,f16,f16,f16,f16,f16) f16x4x2"_c;
    Symbol::Resolved(&Float16x4x2_raw_list)->name = "f16x4x2(f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x4x2_raw_list)->nameWithVarNames = "f16x4x2(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16, arg6 : f16, arg7 : f16)"_c;
    Symbol::Resolved(&Float16x4x2_raw_list)->returnTypeSymbol = &Float16x4x2Type;

    /// f16x2x3 with Float16x3, Float16x3
    Float16x2x3_Float16_3_ctor_arg0.name = "arg0"_c;
    Float16x2x3_Float16_3_ctor_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x2x3_Float16_3_ctor_arg1.name = "arg1"_c;
    Float16x2x3_Float16_3_ctor_arg1.type = Type::FullType{ Float16x3Type.name };
    Float16x2x3_Float16_3_ctor.name = Float16x2x3_Float16_3_ctor_name;
    Float16x2x3_Float16_3_ctor.compileTime = true;
    Float16x2x3_Float16_3_ctor.backendIndex = 1298;
    Float16x2x3_Float16_3_ctor.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_Float16_3_ctor.parameters = Float16x2x3_Float16_3_ctor_args;
    Symbol::Resolved(&Float16x2x3_Float16_3_ctor_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x2x3_Float16_3_ctor_arg1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x2x3_Float16_3_ctor)->signature = "f16x2x3(f16x3,f16x3) f16x2x3"_c;
    Symbol::Resolved(&Float16x2x3_Float16_3_ctor)->name = "f16x2x3(f16x3,f16x3)"_c;
    Symbol::Resolved(&Float16x2x3_Float16_3_ctor)->nameWithVarNames = "f16x2x3(arg0 : f16x3, arg1 : f16x3)"_c;
    Symbol::Resolved(&Float16x2x3_Float16_3_ctor)->returnTypeSymbol = &Float16x2x3Type;

    /// f16x2x3 with Float16, Float16, Float16, Float16, Float16, Float16
    Float16x2x3_raw_list_arg0.name = "arg0"_c;
    Float16x2x3_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list_arg1.name = "arg1"_c;
    Float16x2x3_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list_arg2.name = "arg2"_c;
    Float16x2x3_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list_arg3.name = "arg3"_c;
    Float16x2x3_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list_arg4.name = "arg4"_c;
    Float16x2x3_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list_arg5.name = "arg5"_c;
    Float16x2x3_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list.name = Float16x2x3_raw_list_name;
    Float16x2x3_raw_list.compileTime = true;
    Float16x2x3_raw_list.backendIndex = 1299;
    Float16x2x3_raw_list.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_raw_list.parameters = Float16x2x3_raw_list_args;
    Symbol::Resolved(&Float16x2x3_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list)->signature = "f16x2x3(f16,f16,f16,f16,f16,f16) f16x2x3"_c;
    Symbol::Resolved(&Float16x2x3_raw_list)->name = "f16x2x3(f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x2x3_raw_list)->nameWithVarNames = "f16x2x3(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16)"_c;
    Symbol::Resolved(&Float16x2x3_raw_list)->returnTypeSymbol = &Float16x2x3Type;

    /// f16x3x3 with Float16x3, Float16x3, Float16x3
    Float16x3x3_Float16_3_ctor_arg0.name = "arg0"_c;
    Float16x3x3_Float16_3_ctor_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3x3_Float16_3_ctor_arg1.name = "arg1"_c;
    Float16x3x3_Float16_3_ctor_arg1.type = Type::FullType{ Float16x3Type.name };
    Float16x3x3_Float16_3_ctor_arg2.name = "arg2"_c;
    Float16x3x3_Float16_3_ctor_arg2.type = Type::FullType{ Float16x3Type.name };
    Float16x3x3_Float16_3_ctor.name = Float16x3x3_Float16_3_ctor_name;
    Float16x3x3_Float16_3_ctor.compileTime = true;
    Float16x3x3_Float16_3_ctor.backendIndex = 1312;
    Float16x3x3_Float16_3_ctor.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_Float16_3_ctor.parameters = Float16x3x3_Float16_3_ctor_args;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor_arg1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor_arg2)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor)->signature = "f16x3x3(f16x3,f16x3,f16x3) f16x3x3"_c;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor)->name = "f16x3x3(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor)->nameWithVarNames = "f16x3x3(arg0 : f16x3, arg1 : f16x3, arg2 : f16x3)"_c;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor)->returnTypeSymbol = &Float16x3x3Type;

    /// f16x3x3
    Float16x3x3_identity.name = Float16x3x3_identity_name;
    Float16x3x3_identity.compileTime = true;
    Float16x3x3_identity.backendIndex = 1313;
    Float16x3x3_identity.returnType = Type::FullType { Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_identity)->signature = "f16x3x3() f16x3x3"_c;
    Symbol::Resolved(&Float16x3x3_identity)->name = "f16x3x3()"_c;
    Symbol::Resolved(&Float16x3x3_identity)->nameWithVarNames = "f16x3x3()"_c;
    Symbol::Resolved(&Float16x3x3_identity)->returnTypeSymbol = &Float16x3x3Type;

    /// f16x3x3 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x3x3_raw_list_arg0.name = "arg0"_c;
    Float16x3x3_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg1.name = "arg1"_c;
    Float16x3x3_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg2.name = "arg2"_c;
    Float16x3x3_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg3.name = "arg3"_c;
    Float16x3x3_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg4.name = "arg4"_c;
    Float16x3x3_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg5.name = "arg5"_c;
    Float16x3x3_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg6.name = "arg6"_c;
    Float16x3x3_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg7.name = "arg7"_c;
    Float16x3x3_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg8.name = "arg8"_c;
    Float16x3x3_raw_list_arg8.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list.name = Float16x3x3_raw_list_name;
    Float16x3x3_raw_list.compileTime = true;
    Float16x3x3_raw_list.backendIndex = 1314;
    Float16x3x3_raw_list.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_raw_list.parameters = Float16x3x3_raw_list_args;
    Symbol::Resolved(&Float16x3x3_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg8)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list)->signature = "f16x3x3(f16,f16,f16,f16,f16,f16,f16,f16,f16) f16x3x3"_c;
    Symbol::Resolved(&Float16x3x3_raw_list)->name = "f16x3x3(f16,f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x3x3_raw_list)->nameWithVarNames = "f16x3x3(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16, arg6 : f16, arg7 : f16, arg8 : f16)"_c;
    Symbol::Resolved(&Float16x3x3_raw_list)->returnTypeSymbol = &Float16x3x3Type;

    /// f16x4x3 with Float16x3, Float16x3, Float16x3, Float16x3
    Float16x4x3_Float16_3_ctor_arg0.name = "arg0"_c;
    Float16x4x3_Float16_3_ctor_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x4x3_Float16_3_ctor_arg1.name = "arg1"_c;
    Float16x4x3_Float16_3_ctor_arg1.type = Type::FullType{ Float16x3Type.name };
    Float16x4x3_Float16_3_ctor_arg2.name = "arg2"_c;
    Float16x4x3_Float16_3_ctor_arg2.type = Type::FullType{ Float16x3Type.name };
    Float16x4x3_Float16_3_ctor_arg3.name = "arg3"_c;
    Float16x4x3_Float16_3_ctor_arg3.type = Type::FullType{ Float16x3Type.name };
    Float16x4x3_Float16_3_ctor.name = Float16x4x3_Float16_3_ctor_name;
    Float16x4x3_Float16_3_ctor.compileTime = true;
    Float16x4x3_Float16_3_ctor.backendIndex = 1327;
    Float16x4x3_Float16_3_ctor.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_Float16_3_ctor.parameters = Float16x4x3_Float16_3_ctor_args;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor_arg1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor_arg2)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor_arg3)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor)->signature = "f16x4x3(f16x3,f16x3,f16x3,f16x3) f16x4x3"_c;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor)->name = "f16x4x3(f16x3,f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor)->nameWithVarNames = "f16x4x3(arg0 : f16x3, arg1 : f16x3, arg2 : f16x3, arg3 : f16x3)"_c;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor)->returnTypeSymbol = &Float16x4x3Type;

    /// f16x4x3 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x4x3_raw_list_arg0.name = "arg0"_c;
    Float16x4x3_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg1.name = "arg1"_c;
    Float16x4x3_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg2.name = "arg2"_c;
    Float16x4x3_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg3.name = "arg3"_c;
    Float16x4x3_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg4.name = "arg4"_c;
    Float16x4x3_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg5.name = "arg5"_c;
    Float16x4x3_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg6.name = "arg6"_c;
    Float16x4x3_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg7.name = "arg7"_c;
    Float16x4x3_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg8.name = "arg8"_c;
    Float16x4x3_raw_list_arg8.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg9.name = "arg9"_c;
    Float16x4x3_raw_list_arg9.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg10.name = "arg10"_c;
    Float16x4x3_raw_list_arg10.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg11.name = "arg11"_c;
    Float16x4x3_raw_list_arg11.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list.name = Float16x4x3_raw_list_name;
    Float16x4x3_raw_list.compileTime = true;
    Float16x4x3_raw_list.backendIndex = 1328;
    Float16x4x3_raw_list.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_raw_list.parameters = Float16x4x3_raw_list_args;
    Symbol::Resolved(&Float16x4x3_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg8)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg9)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg10)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg11)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list)->signature = "f16x4x3(f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16) f16x4x3"_c;
    Symbol::Resolved(&Float16x4x3_raw_list)->name = "f16x4x3(f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x4x3_raw_list)->nameWithVarNames = "f16x4x3(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16, arg6 : f16, arg7 : f16, arg8 : f16, arg9 : f16, arg10 : f16, arg11 : f16)"_c;
    Symbol::Resolved(&Float16x4x3_raw_list)->returnTypeSymbol = &Float16x4x3Type;

    /// f16x2x4 with Float16x4, Float16x4
    Float16x2x4_Float16_4_ctor_arg0.name = "arg0"_c;
    Float16x2x4_Float16_4_ctor_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x2x4_Float16_4_ctor_arg1.name = "arg1"_c;
    Float16x2x4_Float16_4_ctor_arg1.type = Type::FullType{ Float16x4Type.name };
    Float16x2x4_Float16_4_ctor.name = Float16x2x4_Float16_4_ctor_name;
    Float16x2x4_Float16_4_ctor.compileTime = true;
    Float16x2x4_Float16_4_ctor.backendIndex = 1341;
    Float16x2x4_Float16_4_ctor.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_Float16_4_ctor.parameters = Float16x2x4_Float16_4_ctor_args;
    Symbol::Resolved(&Float16x2x4_Float16_4_ctor_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x2x4_Float16_4_ctor_arg1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x2x4_Float16_4_ctor)->signature = "f16x2x4(f16x4,f16x4) f16x2x4"_c;
    Symbol::Resolved(&Float16x2x4_Float16_4_ctor)->name = "f16x2x4(f16x4,f16x4)"_c;
    Symbol::Resolved(&Float16x2x4_Float16_4_ctor)->nameWithVarNames = "f16x2x4(arg0 : f16x4, arg1 : f16x4)"_c;
    Symbol::Resolved(&Float16x2x4_Float16_4_ctor)->returnTypeSymbol = &Float16x2x4Type;

    /// f16x2x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x2x4_raw_list_arg0.name = "arg0"_c;
    Float16x2x4_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg1.name = "arg1"_c;
    Float16x2x4_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg2.name = "arg2"_c;
    Float16x2x4_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg3.name = "arg3"_c;
    Float16x2x4_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg4.name = "arg4"_c;
    Float16x2x4_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg5.name = "arg5"_c;
    Float16x2x4_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg6.name = "arg6"_c;
    Float16x2x4_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg7.name = "arg7"_c;
    Float16x2x4_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list.name = Float16x2x4_raw_list_name;
    Float16x2x4_raw_list.compileTime = true;
    Float16x2x4_raw_list.backendIndex = 1342;
    Float16x2x4_raw_list.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_raw_list.parameters = Float16x2x4_raw_list_args;
    Symbol::Resolved(&Float16x2x4_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list)->signature = "f16x2x4(f16,f16,f16,f16,f16,f16,f16,f16) f16x2x4"_c;
    Symbol::Resolved(&Float16x2x4_raw_list)->name = "f16x2x4(f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x2x4_raw_list)->nameWithVarNames = "f16x2x4(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16, arg6 : f16, arg7 : f16)"_c;
    Symbol::Resolved(&Float16x2x4_raw_list)->returnTypeSymbol = &Float16x2x4Type;

    /// f16x3x4 with Float16x4, Float16x4, Float16x4
    Float16x3x4_Float16_4_ctor_arg0.name = "arg0"_c;
    Float16x3x4_Float16_4_ctor_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x3x4_Float16_4_ctor_arg1.name = "arg1"_c;
    Float16x3x4_Float16_4_ctor_arg1.type = Type::FullType{ Float16x4Type.name };
    Float16x3x4_Float16_4_ctor_arg2.name = "arg2"_c;
    Float16x3x4_Float16_4_ctor_arg2.type = Type::FullType{ Float16x4Type.name };
    Float16x3x4_Float16_4_ctor.name = Float16x3x4_Float16_4_ctor_name;
    Float16x3x4_Float16_4_ctor.compileTime = true;
    Float16x3x4_Float16_4_ctor.backendIndex = 1355;
    Float16x3x4_Float16_4_ctor.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_Float16_4_ctor.parameters = Float16x3x4_Float16_4_ctor_args;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor_arg1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor_arg2)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor)->signature = "f16x3x4(f16x4,f16x4,f16x4) f16x3x4"_c;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor)->name = "f16x3x4(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor)->nameWithVarNames = "f16x3x4(arg0 : f16x4, arg1 : f16x4, arg2 : f16x4)"_c;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor)->returnTypeSymbol = &Float16x3x4Type;

    /// f16x3x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x3x4_raw_list_arg0.name = "arg0"_c;
    Float16x3x4_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg1.name = "arg1"_c;
    Float16x3x4_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg2.name = "arg2"_c;
    Float16x3x4_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg3.name = "arg3"_c;
    Float16x3x4_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg4.name = "arg4"_c;
    Float16x3x4_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg5.name = "arg5"_c;
    Float16x3x4_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg6.name = "arg6"_c;
    Float16x3x4_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg7.name = "arg7"_c;
    Float16x3x4_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg8.name = "arg8"_c;
    Float16x3x4_raw_list_arg8.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg9.name = "arg9"_c;
    Float16x3x4_raw_list_arg9.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg10.name = "arg10"_c;
    Float16x3x4_raw_list_arg10.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg11.name = "arg11"_c;
    Float16x3x4_raw_list_arg11.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list.name = Float16x3x4_raw_list_name;
    Float16x3x4_raw_list.compileTime = true;
    Float16x3x4_raw_list.backendIndex = 1356;
    Float16x3x4_raw_list.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_raw_list.parameters = Float16x3x4_raw_list_args;
    Symbol::Resolved(&Float16x3x4_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg8)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg9)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg10)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg11)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list)->signature = "f16x3x4(f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16) f16x3x4"_c;
    Symbol::Resolved(&Float16x3x4_raw_list)->name = "f16x3x4(f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x3x4_raw_list)->nameWithVarNames = "f16x3x4(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16, arg6 : f16, arg7 : f16, arg8 : f16, arg9 : f16, arg10 : f16, arg11 : f16)"_c;
    Symbol::Resolved(&Float16x3x4_raw_list)->returnTypeSymbol = &Float16x3x4Type;

    /// f16x4x4 with Float16x4, Float16x4, Float16x4, Float16x4
    Float16x4x4_Float16_4_ctor_arg0.name = "arg0"_c;
    Float16x4x4_Float16_4_ctor_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4x4_Float16_4_ctor_arg1.name = "arg1"_c;
    Float16x4x4_Float16_4_ctor_arg1.type = Type::FullType{ Float16x4Type.name };
    Float16x4x4_Float16_4_ctor_arg2.name = "arg2"_c;
    Float16x4x4_Float16_4_ctor_arg2.type = Type::FullType{ Float16x4Type.name };
    Float16x4x4_Float16_4_ctor_arg3.name = "arg3"_c;
    Float16x4x4_Float16_4_ctor_arg3.type = Type::FullType{ Float16x4Type.name };
    Float16x4x4_Float16_4_ctor.name = Float16x4x4_Float16_4_ctor_name;
    Float16x4x4_Float16_4_ctor.compileTime = true;
    Float16x4x4_Float16_4_ctor.backendIndex = 1369;
    Float16x4x4_Float16_4_ctor.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_Float16_4_ctor.parameters = Float16x4x4_Float16_4_ctor_args;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor_arg1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor_arg2)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor_arg3)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor)->signature = "f16x4x4(f16x4,f16x4,f16x4,f16x4) f16x4x4"_c;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor)->name = "f16x4x4(f16x4,f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor)->nameWithVarNames = "f16x4x4(arg0 : f16x4, arg1 : f16x4, arg2 : f16x4, arg3 : f16x4)"_c;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor)->returnTypeSymbol = &Float16x4x4Type;

    /// f16x4x4
    Float16x4x4_identity.name = Float16x4x4_identity_name;
    Float16x4x4_identity.compileTime = true;
    Float16x4x4_identity.backendIndex = 1370;
    Float16x4x4_identity.returnType = Type::FullType { Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_identity)->signature = "f16x4x4() f16x4x4"_c;
    Symbol::Resolved(&Float16x4x4_identity)->name = "f16x4x4()"_c;
    Symbol::Resolved(&Float16x4x4_identity)->nameWithVarNames = "f16x4x4()"_c;
    Symbol::Resolved(&Float16x4x4_identity)->returnTypeSymbol = &Float16x4x4Type;

    /// f16x4x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x4x4_raw_list_arg0.name = "arg0"_c;
    Float16x4x4_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg1.name = "arg1"_c;
    Float16x4x4_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg2.name = "arg2"_c;
    Float16x4x4_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg3.name = "arg3"_c;
    Float16x4x4_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg4.name = "arg4"_c;
    Float16x4x4_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg5.name = "arg5"_c;
    Float16x4x4_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg6.name = "arg6"_c;
    Float16x4x4_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg7.name = "arg7"_c;
    Float16x4x4_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg8.name = "arg8"_c;
    Float16x4x4_raw_list_arg8.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg9.name = "arg9"_c;
    Float16x4x4_raw_list_arg9.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg10.name = "arg10"_c;
    Float16x4x4_raw_list_arg10.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg11.name = "arg11"_c;
    Float16x4x4_raw_list_arg11.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg12.name = "arg12"_c;
    Float16x4x4_raw_list_arg12.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg13.name = "arg13"_c;
    Float16x4x4_raw_list_arg13.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg14.name = "arg14"_c;
    Float16x4x4_raw_list_arg14.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg15.name = "arg15"_c;
    Float16x4x4_raw_list_arg15.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list.name = Float16x4x4_raw_list_name;
    Float16x4x4_raw_list.compileTime = true;
    Float16x4x4_raw_list.backendIndex = 1371;
    Float16x4x4_raw_list.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_raw_list.parameters = Float16x4x4_raw_list_args;
    Symbol::Resolved(&Float16x4x4_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg8)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg9)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg10)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg11)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg12)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg13)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg14)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg15)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list)->signature = "f16x4x4(f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16) f16x4x4"_c;
    Symbol::Resolved(&Float16x4x4_raw_list)->name = "f16x4x4(f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x4x4_raw_list)->nameWithVarNames = "f16x4x4(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16, arg6 : f16, arg7 : f16, arg8 : f16, arg9 : f16, arg10 : f16, arg11 : f16, arg12 : f16, arg13 : f16, arg14 : f16, arg15 : f16)"_c;
    Symbol::Resolved(&Float16x4x4_raw_list)->returnTypeSymbol = &Float16x4x4Type;

    /// acos with Float32
    acos_Float32_arg.name = "val"_c;
    acos_Float32_arg.type = Type::FullType{ Float32Type.name };
    acos_Float32.documentation = "Returns the arc cosine of a value."_c;
    acos_Float32.name = acos_Float32_name;
    acos_Float32.backendIndex = 1384;
    acos_Float32.returnType = Type::FullType { Float32Type.name };
    acos_Float32.parameters = acos_Float32_args;
    Symbol::Resolved(&acos_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&acos_Float32)->signature = "acos(f32) f32"_c;
    Symbol::Resolved(&acos_Float32)->name = "acos(f32)"_c;
    Symbol::Resolved(&acos_Float32)->nameWithVarNames = "acos(val : f32)"_c;
    Symbol::Resolved(&acos_Float32)->returnTypeSymbol = &Float32Type;

    /// acos with Float32x2
    acos_Float32x2_arg.name = "val"_c;
    acos_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    acos_Float32x2.documentation = "Returns the arc cosine of a value."_c;
    acos_Float32x2.name = acos_Float32x2_name;
    acos_Float32x2.backendIndex = 1385;
    acos_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    acos_Float32x2.parameters = acos_Float32x2_args;
    Symbol::Resolved(&acos_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&acos_Float32x2)->signature = "acos(f32x2) f32x2"_c;
    Symbol::Resolved(&acos_Float32x2)->name = "acos(f32x2)"_c;
    Symbol::Resolved(&acos_Float32x2)->nameWithVarNames = "acos(val : f32x2)"_c;
    Symbol::Resolved(&acos_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// acos with Float32x3
    acos_Float32x3_arg.name = "val"_c;
    acos_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    acos_Float32x3.documentation = "Returns the arc cosine of a value."_c;
    acos_Float32x3.name = acos_Float32x3_name;
    acos_Float32x3.backendIndex = 1386;
    acos_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    acos_Float32x3.parameters = acos_Float32x3_args;
    Symbol::Resolved(&acos_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&acos_Float32x3)->signature = "acos(f32x3) f32x3"_c;
    Symbol::Resolved(&acos_Float32x3)->name = "acos(f32x3)"_c;
    Symbol::Resolved(&acos_Float32x3)->nameWithVarNames = "acos(val : f32x3)"_c;
    Symbol::Resolved(&acos_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// acos with Float32x4
    acos_Float32x4_arg.name = "val"_c;
    acos_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    acos_Float32x4.documentation = "Returns the arc cosine of a value."_c;
    acos_Float32x4.name = acos_Float32x4_name;
    acos_Float32x4.backendIndex = 1387;
    acos_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    acos_Float32x4.parameters = acos_Float32x4_args;
    Symbol::Resolved(&acos_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&acos_Float32x4)->signature = "acos(f32x4) f32x4"_c;
    Symbol::Resolved(&acos_Float32x4)->name = "acos(f32x4)"_c;
    Symbol::Resolved(&acos_Float32x4)->nameWithVarNames = "acos(val : f32x4)"_c;
    Symbol::Resolved(&acos_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// acos with Float16
    acos_Float16_arg.name = "val"_c;
    acos_Float16_arg.type = Type::FullType{ Float16Type.name };
    acos_Float16.documentation = "Returns the arc cosine of a value."_c;
    acos_Float16.name = acos_Float16_name;
    acos_Float16.backendIndex = 1388;
    acos_Float16.returnType = Type::FullType { Float16Type.name };
    acos_Float16.parameters = acos_Float16_args;
    Symbol::Resolved(&acos_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&acos_Float16)->signature = "acos(f16) f16"_c;
    Symbol::Resolved(&acos_Float16)->name = "acos(f16)"_c;
    Symbol::Resolved(&acos_Float16)->nameWithVarNames = "acos(val : f16)"_c;
    Symbol::Resolved(&acos_Float16)->returnTypeSymbol = &Float16Type;

    /// acos with Float16x2
    acos_Float16x2_arg.name = "val"_c;
    acos_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    acos_Float16x2.documentation = "Returns the arc cosine of a value."_c;
    acos_Float16x2.name = acos_Float16x2_name;
    acos_Float16x2.backendIndex = 1389;
    acos_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    acos_Float16x2.parameters = acos_Float16x2_args;
    Symbol::Resolved(&acos_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&acos_Float16x2)->signature = "acos(f16x2) f16x2"_c;
    Symbol::Resolved(&acos_Float16x2)->name = "acos(f16x2)"_c;
    Symbol::Resolved(&acos_Float16x2)->nameWithVarNames = "acos(val : f16x2)"_c;
    Symbol::Resolved(&acos_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// acos with Float16x3
    acos_Float16x3_arg.name = "val"_c;
    acos_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    acos_Float16x3.documentation = "Returns the arc cosine of a value."_c;
    acos_Float16x3.name = acos_Float16x3_name;
    acos_Float16x3.backendIndex = 1390;
    acos_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    acos_Float16x3.parameters = acos_Float16x3_args;
    Symbol::Resolved(&acos_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&acos_Float16x3)->signature = "acos(f16x3) f16x3"_c;
    Symbol::Resolved(&acos_Float16x3)->name = "acos(f16x3)"_c;
    Symbol::Resolved(&acos_Float16x3)->nameWithVarNames = "acos(val : f16x3)"_c;
    Symbol::Resolved(&acos_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// acos with Float16x4
    acos_Float16x4_arg.name = "val"_c;
    acos_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    acos_Float16x4.documentation = "Returns the arc cosine of a value."_c;
    acos_Float16x4.name = acos_Float16x4_name;
    acos_Float16x4.backendIndex = 1391;
    acos_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    acos_Float16x4.parameters = acos_Float16x4_args;
    Symbol::Resolved(&acos_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&acos_Float16x4)->signature = "acos(f16x4) f16x4"_c;
    Symbol::Resolved(&acos_Float16x4)->name = "acos(f16x4)"_c;
    Symbol::Resolved(&acos_Float16x4)->nameWithVarNames = "acos(val : f16x4)"_c;
    Symbol::Resolved(&acos_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// acosh with Float32
    acosh_Float32_arg.name = "val"_c;
    acosh_Float32_arg.type = Type::FullType{ Float32Type.name };
    acosh_Float32.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float32.name = acosh_Float32_name;
    acosh_Float32.backendIndex = 1392;
    acosh_Float32.returnType = Type::FullType { Float32Type.name };
    acosh_Float32.parameters = acosh_Float32_args;
    Symbol::Resolved(&acosh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&acosh_Float32)->signature = "acosh(f32) f32"_c;
    Symbol::Resolved(&acosh_Float32)->name = "acosh(f32)"_c;
    Symbol::Resolved(&acosh_Float32)->nameWithVarNames = "acosh(val : f32)"_c;
    Symbol::Resolved(&acosh_Float32)->returnTypeSymbol = &Float32Type;

    /// acosh with Float32x2
    acosh_Float32x2_arg.name = "val"_c;
    acosh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    acosh_Float32x2.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float32x2.name = acosh_Float32x2_name;
    acosh_Float32x2.backendIndex = 1393;
    acosh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    acosh_Float32x2.parameters = acosh_Float32x2_args;
    Symbol::Resolved(&acosh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&acosh_Float32x2)->signature = "acosh(f32x2) f32x2"_c;
    Symbol::Resolved(&acosh_Float32x2)->name = "acosh(f32x2)"_c;
    Symbol::Resolved(&acosh_Float32x2)->nameWithVarNames = "acosh(val : f32x2)"_c;
    Symbol::Resolved(&acosh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// acosh with Float32x3
    acosh_Float32x3_arg.name = "val"_c;
    acosh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    acosh_Float32x3.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float32x3.name = acosh_Float32x3_name;
    acosh_Float32x3.backendIndex = 1394;
    acosh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    acosh_Float32x3.parameters = acosh_Float32x3_args;
    Symbol::Resolved(&acosh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&acosh_Float32x3)->signature = "acosh(f32x3) f32x3"_c;
    Symbol::Resolved(&acosh_Float32x3)->name = "acosh(f32x3)"_c;
    Symbol::Resolved(&acosh_Float32x3)->nameWithVarNames = "acosh(val : f32x3)"_c;
    Symbol::Resolved(&acosh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// acosh with Float32x4
    acosh_Float32x4_arg.name = "val"_c;
    acosh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    acosh_Float32x4.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float32x4.name = acosh_Float32x4_name;
    acosh_Float32x4.backendIndex = 1395;
    acosh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    acosh_Float32x4.parameters = acosh_Float32x4_args;
    Symbol::Resolved(&acosh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&acosh_Float32x4)->signature = "acosh(f32x4) f32x4"_c;
    Symbol::Resolved(&acosh_Float32x4)->name = "acosh(f32x4)"_c;
    Symbol::Resolved(&acosh_Float32x4)->nameWithVarNames = "acosh(val : f32x4)"_c;
    Symbol::Resolved(&acosh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// acosh with Float16
    acosh_Float16_arg.name = "val"_c;
    acosh_Float16_arg.type = Type::FullType{ Float16Type.name };
    acosh_Float16.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float16.name = acosh_Float16_name;
    acosh_Float16.backendIndex = 1396;
    acosh_Float16.returnType = Type::FullType { Float16Type.name };
    acosh_Float16.parameters = acosh_Float16_args;
    Symbol::Resolved(&acosh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&acosh_Float16)->signature = "acosh(f16) f16"_c;
    Symbol::Resolved(&acosh_Float16)->name = "acosh(f16)"_c;
    Symbol::Resolved(&acosh_Float16)->nameWithVarNames = "acosh(val : f16)"_c;
    Symbol::Resolved(&acosh_Float16)->returnTypeSymbol = &Float16Type;

    /// acosh with Float16x2
    acosh_Float16x2_arg.name = "val"_c;
    acosh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    acosh_Float16x2.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float16x2.name = acosh_Float16x2_name;
    acosh_Float16x2.backendIndex = 1397;
    acosh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    acosh_Float16x2.parameters = acosh_Float16x2_args;
    Symbol::Resolved(&acosh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&acosh_Float16x2)->signature = "acosh(f16x2) f16x2"_c;
    Symbol::Resolved(&acosh_Float16x2)->name = "acosh(f16x2)"_c;
    Symbol::Resolved(&acosh_Float16x2)->nameWithVarNames = "acosh(val : f16x2)"_c;
    Symbol::Resolved(&acosh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// acosh with Float16x3
    acosh_Float16x3_arg.name = "val"_c;
    acosh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    acosh_Float16x3.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float16x3.name = acosh_Float16x3_name;
    acosh_Float16x3.backendIndex = 1398;
    acosh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    acosh_Float16x3.parameters = acosh_Float16x3_args;
    Symbol::Resolved(&acosh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&acosh_Float16x3)->signature = "acosh(f16x3) f16x3"_c;
    Symbol::Resolved(&acosh_Float16x3)->name = "acosh(f16x3)"_c;
    Symbol::Resolved(&acosh_Float16x3)->nameWithVarNames = "acosh(val : f16x3)"_c;
    Symbol::Resolved(&acosh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// acosh with Float16x4
    acosh_Float16x4_arg.name = "val"_c;
    acosh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    acosh_Float16x4.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float16x4.name = acosh_Float16x4_name;
    acosh_Float16x4.backendIndex = 1399;
    acosh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    acosh_Float16x4.parameters = acosh_Float16x4_args;
    Symbol::Resolved(&acosh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&acosh_Float16x4)->signature = "acosh(f16x4) f16x4"_c;
    Symbol::Resolved(&acosh_Float16x4)->name = "acosh(f16x4)"_c;
    Symbol::Resolved(&acosh_Float16x4)->nameWithVarNames = "acosh(val : f16x4)"_c;
    Symbol::Resolved(&acosh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// asin with Float32
    asin_Float32_arg.name = "val"_c;
    asin_Float32_arg.type = Type::FullType{ Float32Type.name };
    asin_Float32.documentation = "Returns the arc sine of a value."_c;
    asin_Float32.name = asin_Float32_name;
    asin_Float32.backendIndex = 1400;
    asin_Float32.returnType = Type::FullType { Float32Type.name };
    asin_Float32.parameters = asin_Float32_args;
    Symbol::Resolved(&asin_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&asin_Float32)->signature = "asin(f32) f32"_c;
    Symbol::Resolved(&asin_Float32)->name = "asin(f32)"_c;
    Symbol::Resolved(&asin_Float32)->nameWithVarNames = "asin(val : f32)"_c;
    Symbol::Resolved(&asin_Float32)->returnTypeSymbol = &Float32Type;

    /// asin with Float32x2
    asin_Float32x2_arg.name = "val"_c;
    asin_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    asin_Float32x2.documentation = "Returns the arc sine of a value."_c;
    asin_Float32x2.name = asin_Float32x2_name;
    asin_Float32x2.backendIndex = 1401;
    asin_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    asin_Float32x2.parameters = asin_Float32x2_args;
    Symbol::Resolved(&asin_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&asin_Float32x2)->signature = "asin(f32x2) f32x2"_c;
    Symbol::Resolved(&asin_Float32x2)->name = "asin(f32x2)"_c;
    Symbol::Resolved(&asin_Float32x2)->nameWithVarNames = "asin(val : f32x2)"_c;
    Symbol::Resolved(&asin_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// asin with Float32x3
    asin_Float32x3_arg.name = "val"_c;
    asin_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    asin_Float32x3.documentation = "Returns the arc sine of a value."_c;
    asin_Float32x3.name = asin_Float32x3_name;
    asin_Float32x3.backendIndex = 1402;
    asin_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    asin_Float32x3.parameters = asin_Float32x3_args;
    Symbol::Resolved(&asin_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&asin_Float32x3)->signature = "asin(f32x3) f32x3"_c;
    Symbol::Resolved(&asin_Float32x3)->name = "asin(f32x3)"_c;
    Symbol::Resolved(&asin_Float32x3)->nameWithVarNames = "asin(val : f32x3)"_c;
    Symbol::Resolved(&asin_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// asin with Float32x4
    asin_Float32x4_arg.name = "val"_c;
    asin_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    asin_Float32x4.documentation = "Returns the arc sine of a value."_c;
    asin_Float32x4.name = asin_Float32x4_name;
    asin_Float32x4.backendIndex = 1403;
    asin_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    asin_Float32x4.parameters = asin_Float32x4_args;
    Symbol::Resolved(&asin_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&asin_Float32x4)->signature = "asin(f32x4) f32x4"_c;
    Symbol::Resolved(&asin_Float32x4)->name = "asin(f32x4)"_c;
    Symbol::Resolved(&asin_Float32x4)->nameWithVarNames = "asin(val : f32x4)"_c;
    Symbol::Resolved(&asin_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// asin with Float16
    asin_Float16_arg.name = "val"_c;
    asin_Float16_arg.type = Type::FullType{ Float16Type.name };
    asin_Float16.documentation = "Returns the arc sine of a value."_c;
    asin_Float16.name = asin_Float16_name;
    asin_Float16.backendIndex = 1404;
    asin_Float16.returnType = Type::FullType { Float16Type.name };
    asin_Float16.parameters = asin_Float16_args;
    Symbol::Resolved(&asin_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&asin_Float16)->signature = "asin(f16) f16"_c;
    Symbol::Resolved(&asin_Float16)->name = "asin(f16)"_c;
    Symbol::Resolved(&asin_Float16)->nameWithVarNames = "asin(val : f16)"_c;
    Symbol::Resolved(&asin_Float16)->returnTypeSymbol = &Float16Type;

    /// asin with Float16x2
    asin_Float16x2_arg.name = "val"_c;
    asin_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    asin_Float16x2.documentation = "Returns the arc sine of a value."_c;
    asin_Float16x2.name = asin_Float16x2_name;
    asin_Float16x2.backendIndex = 1405;
    asin_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    asin_Float16x2.parameters = asin_Float16x2_args;
    Symbol::Resolved(&asin_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&asin_Float16x2)->signature = "asin(f16x2) f16x2"_c;
    Symbol::Resolved(&asin_Float16x2)->name = "asin(f16x2)"_c;
    Symbol::Resolved(&asin_Float16x2)->nameWithVarNames = "asin(val : f16x2)"_c;
    Symbol::Resolved(&asin_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// asin with Float16x3
    asin_Float16x3_arg.name = "val"_c;
    asin_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    asin_Float16x3.documentation = "Returns the arc sine of a value."_c;
    asin_Float16x3.name = asin_Float16x3_name;
    asin_Float16x3.backendIndex = 1406;
    asin_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    asin_Float16x3.parameters = asin_Float16x3_args;
    Symbol::Resolved(&asin_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&asin_Float16x3)->signature = "asin(f16x3) f16x3"_c;
    Symbol::Resolved(&asin_Float16x3)->name = "asin(f16x3)"_c;
    Symbol::Resolved(&asin_Float16x3)->nameWithVarNames = "asin(val : f16x3)"_c;
    Symbol::Resolved(&asin_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// asin with Float16x4
    asin_Float16x4_arg.name = "val"_c;
    asin_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    asin_Float16x4.documentation = "Returns the arc sine of a value."_c;
    asin_Float16x4.name = asin_Float16x4_name;
    asin_Float16x4.backendIndex = 1407;
    asin_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    asin_Float16x4.parameters = asin_Float16x4_args;
    Symbol::Resolved(&asin_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&asin_Float16x4)->signature = "asin(f16x4) f16x4"_c;
    Symbol::Resolved(&asin_Float16x4)->name = "asin(f16x4)"_c;
    Symbol::Resolved(&asin_Float16x4)->nameWithVarNames = "asin(val : f16x4)"_c;
    Symbol::Resolved(&asin_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// asinh with Float32
    asinh_Float32_arg.name = "val"_c;
    asinh_Float32_arg.type = Type::FullType{ Float32Type.name };
    asinh_Float32.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float32.name = asinh_Float32_name;
    asinh_Float32.backendIndex = 1408;
    asinh_Float32.returnType = Type::FullType { Float32Type.name };
    asinh_Float32.parameters = asinh_Float32_args;
    Symbol::Resolved(&asinh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&asinh_Float32)->signature = "asinh(f32) f32"_c;
    Symbol::Resolved(&asinh_Float32)->name = "asinh(f32)"_c;
    Symbol::Resolved(&asinh_Float32)->nameWithVarNames = "asinh(val : f32)"_c;
    Symbol::Resolved(&asinh_Float32)->returnTypeSymbol = &Float32Type;

    /// asinh with Float32x2
    asinh_Float32x2_arg.name = "val"_c;
    asinh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    asinh_Float32x2.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float32x2.name = asinh_Float32x2_name;
    asinh_Float32x2.backendIndex = 1409;
    asinh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    asinh_Float32x2.parameters = asinh_Float32x2_args;
    Symbol::Resolved(&asinh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&asinh_Float32x2)->signature = "asinh(f32x2) f32x2"_c;
    Symbol::Resolved(&asinh_Float32x2)->name = "asinh(f32x2)"_c;
    Symbol::Resolved(&asinh_Float32x2)->nameWithVarNames = "asinh(val : f32x2)"_c;
    Symbol::Resolved(&asinh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// asinh with Float32x3
    asinh_Float32x3_arg.name = "val"_c;
    asinh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    asinh_Float32x3.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float32x3.name = asinh_Float32x3_name;
    asinh_Float32x3.backendIndex = 1410;
    asinh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    asinh_Float32x3.parameters = asinh_Float32x3_args;
    Symbol::Resolved(&asinh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&asinh_Float32x3)->signature = "asinh(f32x3) f32x3"_c;
    Symbol::Resolved(&asinh_Float32x3)->name = "asinh(f32x3)"_c;
    Symbol::Resolved(&asinh_Float32x3)->nameWithVarNames = "asinh(val : f32x3)"_c;
    Symbol::Resolved(&asinh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// asinh with Float32x4
    asinh_Float32x4_arg.name = "val"_c;
    asinh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    asinh_Float32x4.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float32x4.name = asinh_Float32x4_name;
    asinh_Float32x4.backendIndex = 1411;
    asinh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    asinh_Float32x4.parameters = asinh_Float32x4_args;
    Symbol::Resolved(&asinh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&asinh_Float32x4)->signature = "asinh(f32x4) f32x4"_c;
    Symbol::Resolved(&asinh_Float32x4)->name = "asinh(f32x4)"_c;
    Symbol::Resolved(&asinh_Float32x4)->nameWithVarNames = "asinh(val : f32x4)"_c;
    Symbol::Resolved(&asinh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// asinh with Float16
    asinh_Float16_arg.name = "val"_c;
    asinh_Float16_arg.type = Type::FullType{ Float16Type.name };
    asinh_Float16.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float16.name = asinh_Float16_name;
    asinh_Float16.backendIndex = 1412;
    asinh_Float16.returnType = Type::FullType { Float16Type.name };
    asinh_Float16.parameters = asinh_Float16_args;
    Symbol::Resolved(&asinh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&asinh_Float16)->signature = "asinh(f16) f16"_c;
    Symbol::Resolved(&asinh_Float16)->name = "asinh(f16)"_c;
    Symbol::Resolved(&asinh_Float16)->nameWithVarNames = "asinh(val : f16)"_c;
    Symbol::Resolved(&asinh_Float16)->returnTypeSymbol = &Float16Type;

    /// asinh with Float16x2
    asinh_Float16x2_arg.name = "val"_c;
    asinh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    asinh_Float16x2.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float16x2.name = asinh_Float16x2_name;
    asinh_Float16x2.backendIndex = 1413;
    asinh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    asinh_Float16x2.parameters = asinh_Float16x2_args;
    Symbol::Resolved(&asinh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&asinh_Float16x2)->signature = "asinh(f16x2) f16x2"_c;
    Symbol::Resolved(&asinh_Float16x2)->name = "asinh(f16x2)"_c;
    Symbol::Resolved(&asinh_Float16x2)->nameWithVarNames = "asinh(val : f16x2)"_c;
    Symbol::Resolved(&asinh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// asinh with Float16x3
    asinh_Float16x3_arg.name = "val"_c;
    asinh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    asinh_Float16x3.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float16x3.name = asinh_Float16x3_name;
    asinh_Float16x3.backendIndex = 1414;
    asinh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    asinh_Float16x3.parameters = asinh_Float16x3_args;
    Symbol::Resolved(&asinh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&asinh_Float16x3)->signature = "asinh(f16x3) f16x3"_c;
    Symbol::Resolved(&asinh_Float16x3)->name = "asinh(f16x3)"_c;
    Symbol::Resolved(&asinh_Float16x3)->nameWithVarNames = "asinh(val : f16x3)"_c;
    Symbol::Resolved(&asinh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// asinh with Float16x4
    asinh_Float16x4_arg.name = "val"_c;
    asinh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    asinh_Float16x4.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float16x4.name = asinh_Float16x4_name;
    asinh_Float16x4.backendIndex = 1415;
    asinh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    asinh_Float16x4.parameters = asinh_Float16x4_args;
    Symbol::Resolved(&asinh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&asinh_Float16x4)->signature = "asinh(f16x4) f16x4"_c;
    Symbol::Resolved(&asinh_Float16x4)->name = "asinh(f16x4)"_c;
    Symbol::Resolved(&asinh_Float16x4)->nameWithVarNames = "asinh(val : f16x4)"_c;
    Symbol::Resolved(&asinh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// atan with Float32
    atan_Float32_arg.name = "val"_c;
    atan_Float32_arg.type = Type::FullType{ Float32Type.name };
    atan_Float32.documentation = "Returns the arc tangent of a value."_c;
    atan_Float32.name = atan_Float32_name;
    atan_Float32.backendIndex = 1416;
    atan_Float32.returnType = Type::FullType { Float32Type.name };
    atan_Float32.parameters = atan_Float32_args;
    Symbol::Resolved(&atan_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atan_Float32)->signature = "atan(f32) f32"_c;
    Symbol::Resolved(&atan_Float32)->name = "atan(f32)"_c;
    Symbol::Resolved(&atan_Float32)->nameWithVarNames = "atan(val : f32)"_c;
    Symbol::Resolved(&atan_Float32)->returnTypeSymbol = &Float32Type;

    /// atan with Float32x2
    atan_Float32x2_arg.name = "val"_c;
    atan_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    atan_Float32x2.documentation = "Returns the arc tangent of a value."_c;
    atan_Float32x2.name = atan_Float32x2_name;
    atan_Float32x2.backendIndex = 1417;
    atan_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    atan_Float32x2.parameters = atan_Float32x2_args;
    Symbol::Resolved(&atan_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atan_Float32x2)->signature = "atan(f32x2) f32x2"_c;
    Symbol::Resolved(&atan_Float32x2)->name = "atan(f32x2)"_c;
    Symbol::Resolved(&atan_Float32x2)->nameWithVarNames = "atan(val : f32x2)"_c;
    Symbol::Resolved(&atan_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// atan with Float32x3
    atan_Float32x3_arg.name = "val"_c;
    atan_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    atan_Float32x3.documentation = "Returns the arc tangent of a value."_c;
    atan_Float32x3.name = atan_Float32x3_name;
    atan_Float32x3.backendIndex = 1418;
    atan_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    atan_Float32x3.parameters = atan_Float32x3_args;
    Symbol::Resolved(&atan_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atan_Float32x3)->signature = "atan(f32x3) f32x3"_c;
    Symbol::Resolved(&atan_Float32x3)->name = "atan(f32x3)"_c;
    Symbol::Resolved(&atan_Float32x3)->nameWithVarNames = "atan(val : f32x3)"_c;
    Symbol::Resolved(&atan_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// atan with Float32x4
    atan_Float32x4_arg.name = "val"_c;
    atan_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    atan_Float32x4.documentation = "Returns the arc tangent of a value."_c;
    atan_Float32x4.name = atan_Float32x4_name;
    atan_Float32x4.backendIndex = 1419;
    atan_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    atan_Float32x4.parameters = atan_Float32x4_args;
    Symbol::Resolved(&atan_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atan_Float32x4)->signature = "atan(f32x4) f32x4"_c;
    Symbol::Resolved(&atan_Float32x4)->name = "atan(f32x4)"_c;
    Symbol::Resolved(&atan_Float32x4)->nameWithVarNames = "atan(val : f32x4)"_c;
    Symbol::Resolved(&atan_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// atan with Float16
    atan_Float16_arg.name = "val"_c;
    atan_Float16_arg.type = Type::FullType{ Float16Type.name };
    atan_Float16.documentation = "Returns the arc tangent of a value."_c;
    atan_Float16.name = atan_Float16_name;
    atan_Float16.backendIndex = 1420;
    atan_Float16.returnType = Type::FullType { Float16Type.name };
    atan_Float16.parameters = atan_Float16_args;
    Symbol::Resolved(&atan_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atan_Float16)->signature = "atan(f16) f16"_c;
    Symbol::Resolved(&atan_Float16)->name = "atan(f16)"_c;
    Symbol::Resolved(&atan_Float16)->nameWithVarNames = "atan(val : f16)"_c;
    Symbol::Resolved(&atan_Float16)->returnTypeSymbol = &Float16Type;

    /// atan with Float16x2
    atan_Float16x2_arg.name = "val"_c;
    atan_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    atan_Float16x2.documentation = "Returns the arc tangent of a value."_c;
    atan_Float16x2.name = atan_Float16x2_name;
    atan_Float16x2.backendIndex = 1421;
    atan_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    atan_Float16x2.parameters = atan_Float16x2_args;
    Symbol::Resolved(&atan_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atan_Float16x2)->signature = "atan(f16x2) f16x2"_c;
    Symbol::Resolved(&atan_Float16x2)->name = "atan(f16x2)"_c;
    Symbol::Resolved(&atan_Float16x2)->nameWithVarNames = "atan(val : f16x2)"_c;
    Symbol::Resolved(&atan_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// atan with Float16x3
    atan_Float16x3_arg.name = "val"_c;
    atan_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    atan_Float16x3.documentation = "Returns the arc tangent of a value."_c;
    atan_Float16x3.name = atan_Float16x3_name;
    atan_Float16x3.backendIndex = 1422;
    atan_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    atan_Float16x3.parameters = atan_Float16x3_args;
    Symbol::Resolved(&atan_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atan_Float16x3)->signature = "atan(f16x3) f16x3"_c;
    Symbol::Resolved(&atan_Float16x3)->name = "atan(f16x3)"_c;
    Symbol::Resolved(&atan_Float16x3)->nameWithVarNames = "atan(val : f16x3)"_c;
    Symbol::Resolved(&atan_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// atan with Float16x4
    atan_Float16x4_arg.name = "val"_c;
    atan_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    atan_Float16x4.documentation = "Returns the arc tangent of a value."_c;
    atan_Float16x4.name = atan_Float16x4_name;
    atan_Float16x4.backendIndex = 1423;
    atan_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    atan_Float16x4.parameters = atan_Float16x4_args;
    Symbol::Resolved(&atan_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atan_Float16x4)->signature = "atan(f16x4) f16x4"_c;
    Symbol::Resolved(&atan_Float16x4)->name = "atan(f16x4)"_c;
    Symbol::Resolved(&atan_Float16x4)->nameWithVarNames = "atan(val : f16x4)"_c;
    Symbol::Resolved(&atan_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// atanh with Float32
    atanh_Float32_arg.name = "val"_c;
    atanh_Float32_arg.type = Type::FullType{ Float32Type.name };
    atanh_Float32.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float32.name = atanh_Float32_name;
    atanh_Float32.backendIndex = 1424;
    atanh_Float32.returnType = Type::FullType { Float32Type.name };
    atanh_Float32.parameters = atanh_Float32_args;
    Symbol::Resolved(&atanh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atanh_Float32)->signature = "atanh(f32) f32"_c;
    Symbol::Resolved(&atanh_Float32)->name = "atanh(f32)"_c;
    Symbol::Resolved(&atanh_Float32)->nameWithVarNames = "atanh(val : f32)"_c;
    Symbol::Resolved(&atanh_Float32)->returnTypeSymbol = &Float32Type;

    /// atanh with Float32x2
    atanh_Float32x2_arg.name = "val"_c;
    atanh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    atanh_Float32x2.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float32x2.name = atanh_Float32x2_name;
    atanh_Float32x2.backendIndex = 1425;
    atanh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    atanh_Float32x2.parameters = atanh_Float32x2_args;
    Symbol::Resolved(&atanh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atanh_Float32x2)->signature = "atanh(f32x2) f32x2"_c;
    Symbol::Resolved(&atanh_Float32x2)->name = "atanh(f32x2)"_c;
    Symbol::Resolved(&atanh_Float32x2)->nameWithVarNames = "atanh(val : f32x2)"_c;
    Symbol::Resolved(&atanh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// atanh with Float32x3
    atanh_Float32x3_arg.name = "val"_c;
    atanh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    atanh_Float32x3.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float32x3.name = atanh_Float32x3_name;
    atanh_Float32x3.backendIndex = 1426;
    atanh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    atanh_Float32x3.parameters = atanh_Float32x3_args;
    Symbol::Resolved(&atanh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atanh_Float32x3)->signature = "atanh(f32x3) f32x3"_c;
    Symbol::Resolved(&atanh_Float32x3)->name = "atanh(f32x3)"_c;
    Symbol::Resolved(&atanh_Float32x3)->nameWithVarNames = "atanh(val : f32x3)"_c;
    Symbol::Resolved(&atanh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// atanh with Float32x4
    atanh_Float32x4_arg.name = "val"_c;
    atanh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    atanh_Float32x4.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float32x4.name = atanh_Float32x4_name;
    atanh_Float32x4.backendIndex = 1427;
    atanh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    atanh_Float32x4.parameters = atanh_Float32x4_args;
    Symbol::Resolved(&atanh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atanh_Float32x4)->signature = "atanh(f32x4) f32x4"_c;
    Symbol::Resolved(&atanh_Float32x4)->name = "atanh(f32x4)"_c;
    Symbol::Resolved(&atanh_Float32x4)->nameWithVarNames = "atanh(val : f32x4)"_c;
    Symbol::Resolved(&atanh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// atanh with Float16
    atanh_Float16_arg.name = "val"_c;
    atanh_Float16_arg.type = Type::FullType{ Float16Type.name };
    atanh_Float16.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float16.name = atanh_Float16_name;
    atanh_Float16.backendIndex = 1428;
    atanh_Float16.returnType = Type::FullType { Float16Type.name };
    atanh_Float16.parameters = atanh_Float16_args;
    Symbol::Resolved(&atanh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atanh_Float16)->signature = "atanh(f16) f16"_c;
    Symbol::Resolved(&atanh_Float16)->name = "atanh(f16)"_c;
    Symbol::Resolved(&atanh_Float16)->nameWithVarNames = "atanh(val : f16)"_c;
    Symbol::Resolved(&atanh_Float16)->returnTypeSymbol = &Float16Type;

    /// atanh with Float16x2
    atanh_Float16x2_arg.name = "val"_c;
    atanh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    atanh_Float16x2.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float16x2.name = atanh_Float16x2_name;
    atanh_Float16x2.backendIndex = 1429;
    atanh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    atanh_Float16x2.parameters = atanh_Float16x2_args;
    Symbol::Resolved(&atanh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atanh_Float16x2)->signature = "atanh(f16x2) f16x2"_c;
    Symbol::Resolved(&atanh_Float16x2)->name = "atanh(f16x2)"_c;
    Symbol::Resolved(&atanh_Float16x2)->nameWithVarNames = "atanh(val : f16x2)"_c;
    Symbol::Resolved(&atanh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// atanh with Float16x3
    atanh_Float16x3_arg.name = "val"_c;
    atanh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    atanh_Float16x3.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float16x3.name = atanh_Float16x3_name;
    atanh_Float16x3.backendIndex = 1430;
    atanh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    atanh_Float16x3.parameters = atanh_Float16x3_args;
    Symbol::Resolved(&atanh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atanh_Float16x3)->signature = "atanh(f16x3) f16x3"_c;
    Symbol::Resolved(&atanh_Float16x3)->name = "atanh(f16x3)"_c;
    Symbol::Resolved(&atanh_Float16x3)->nameWithVarNames = "atanh(val : f16x3)"_c;
    Symbol::Resolved(&atanh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// atanh with Float16x4
    atanh_Float16x4_arg.name = "val"_c;
    atanh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    atanh_Float16x4.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float16x4.name = atanh_Float16x4_name;
    atanh_Float16x4.backendIndex = 1431;
    atanh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    atanh_Float16x4.parameters = atanh_Float16x4_args;
    Symbol::Resolved(&atanh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atanh_Float16x4)->signature = "atanh(f16x4) f16x4"_c;
    Symbol::Resolved(&atanh_Float16x4)->name = "atanh(f16x4)"_c;
    Symbol::Resolved(&atanh_Float16x4)->nameWithVarNames = "atanh(val : f16x4)"_c;
    Symbol::Resolved(&atanh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// cos with Float32
    cos_Float32_arg.name = "val"_c;
    cos_Float32_arg.type = Type::FullType{ Float32Type.name };
    cos_Float32.documentation = "Returns the cosine of a value."_c;
    cos_Float32.name = cos_Float32_name;
    cos_Float32.backendIndex = 1432;
    cos_Float32.returnType = Type::FullType { Float32Type.name };
    cos_Float32.parameters = cos_Float32_args;
    Symbol::Resolved(&cos_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&cos_Float32)->signature = "cos(f32) f32"_c;
    Symbol::Resolved(&cos_Float32)->name = "cos(f32)"_c;
    Symbol::Resolved(&cos_Float32)->nameWithVarNames = "cos(val : f32)"_c;
    Symbol::Resolved(&cos_Float32)->returnTypeSymbol = &Float32Type;

    /// cos with Float32x2
    cos_Float32x2_arg.name = "val"_c;
    cos_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    cos_Float32x2.documentation = "Returns the cosine of a value."_c;
    cos_Float32x2.name = cos_Float32x2_name;
    cos_Float32x2.backendIndex = 1433;
    cos_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    cos_Float32x2.parameters = cos_Float32x2_args;
    Symbol::Resolved(&cos_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&cos_Float32x2)->signature = "cos(f32x2) f32x2"_c;
    Symbol::Resolved(&cos_Float32x2)->name = "cos(f32x2)"_c;
    Symbol::Resolved(&cos_Float32x2)->nameWithVarNames = "cos(val : f32x2)"_c;
    Symbol::Resolved(&cos_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// cos with Float32x3
    cos_Float32x3_arg.name = "val"_c;
    cos_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    cos_Float32x3.documentation = "Returns the cosine of a value."_c;
    cos_Float32x3.name = cos_Float32x3_name;
    cos_Float32x3.backendIndex = 1434;
    cos_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    cos_Float32x3.parameters = cos_Float32x3_args;
    Symbol::Resolved(&cos_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cos_Float32x3)->signature = "cos(f32x3) f32x3"_c;
    Symbol::Resolved(&cos_Float32x3)->name = "cos(f32x3)"_c;
    Symbol::Resolved(&cos_Float32x3)->nameWithVarNames = "cos(val : f32x3)"_c;
    Symbol::Resolved(&cos_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// cos with Float32x4
    cos_Float32x4_arg.name = "val"_c;
    cos_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    cos_Float32x4.documentation = "Returns the cosine of a value."_c;
    cos_Float32x4.name = cos_Float32x4_name;
    cos_Float32x4.backendIndex = 1435;
    cos_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    cos_Float32x4.parameters = cos_Float32x4_args;
    Symbol::Resolved(&cos_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&cos_Float32x4)->signature = "cos(f32x4) f32x4"_c;
    Symbol::Resolved(&cos_Float32x4)->name = "cos(f32x4)"_c;
    Symbol::Resolved(&cos_Float32x4)->nameWithVarNames = "cos(val : f32x4)"_c;
    Symbol::Resolved(&cos_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// cos with Float16
    cos_Float16_arg.name = "val"_c;
    cos_Float16_arg.type = Type::FullType{ Float16Type.name };
    cos_Float16.documentation = "Returns the cosine of a value."_c;
    cos_Float16.name = cos_Float16_name;
    cos_Float16.backendIndex = 1436;
    cos_Float16.returnType = Type::FullType { Float16Type.name };
    cos_Float16.parameters = cos_Float16_args;
    Symbol::Resolved(&cos_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&cos_Float16)->signature = "cos(f16) f16"_c;
    Symbol::Resolved(&cos_Float16)->name = "cos(f16)"_c;
    Symbol::Resolved(&cos_Float16)->nameWithVarNames = "cos(val : f16)"_c;
    Symbol::Resolved(&cos_Float16)->returnTypeSymbol = &Float16Type;

    /// cos with Float16x2
    cos_Float16x2_arg.name = "val"_c;
    cos_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    cos_Float16x2.documentation = "Returns the cosine of a value."_c;
    cos_Float16x2.name = cos_Float16x2_name;
    cos_Float16x2.backendIndex = 1437;
    cos_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    cos_Float16x2.parameters = cos_Float16x2_args;
    Symbol::Resolved(&cos_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&cos_Float16x2)->signature = "cos(f16x2) f16x2"_c;
    Symbol::Resolved(&cos_Float16x2)->name = "cos(f16x2)"_c;
    Symbol::Resolved(&cos_Float16x2)->nameWithVarNames = "cos(val : f16x2)"_c;
    Symbol::Resolved(&cos_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// cos with Float16x3
    cos_Float16x3_arg.name = "val"_c;
    cos_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    cos_Float16x3.documentation = "Returns the cosine of a value."_c;
    cos_Float16x3.name = cos_Float16x3_name;
    cos_Float16x3.backendIndex = 1438;
    cos_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    cos_Float16x3.parameters = cos_Float16x3_args;
    Symbol::Resolved(&cos_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cos_Float16x3)->signature = "cos(f16x3) f16x3"_c;
    Symbol::Resolved(&cos_Float16x3)->name = "cos(f16x3)"_c;
    Symbol::Resolved(&cos_Float16x3)->nameWithVarNames = "cos(val : f16x3)"_c;
    Symbol::Resolved(&cos_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// cos with Float16x4
    cos_Float16x4_arg.name = "val"_c;
    cos_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    cos_Float16x4.documentation = "Returns the cosine of a value."_c;
    cos_Float16x4.name = cos_Float16x4_name;
    cos_Float16x4.backendIndex = 1439;
    cos_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    cos_Float16x4.parameters = cos_Float16x4_args;
    Symbol::Resolved(&cos_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&cos_Float16x4)->signature = "cos(f16x4) f16x4"_c;
    Symbol::Resolved(&cos_Float16x4)->name = "cos(f16x4)"_c;
    Symbol::Resolved(&cos_Float16x4)->nameWithVarNames = "cos(val : f16x4)"_c;
    Symbol::Resolved(&cos_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// cosh with Float32
    cosh_Float32_arg.name = "val"_c;
    cosh_Float32_arg.type = Type::FullType{ Float32Type.name };
    cosh_Float32.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float32.name = cosh_Float32_name;
    cosh_Float32.backendIndex = 1440;
    cosh_Float32.returnType = Type::FullType { Float32Type.name };
    cosh_Float32.parameters = cosh_Float32_args;
    Symbol::Resolved(&cosh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&cosh_Float32)->signature = "cosh(f32) f32"_c;
    Symbol::Resolved(&cosh_Float32)->name = "cosh(f32)"_c;
    Symbol::Resolved(&cosh_Float32)->nameWithVarNames = "cosh(val : f32)"_c;
    Symbol::Resolved(&cosh_Float32)->returnTypeSymbol = &Float32Type;

    /// cosh with Float32x2
    cosh_Float32x2_arg.name = "val"_c;
    cosh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    cosh_Float32x2.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float32x2.name = cosh_Float32x2_name;
    cosh_Float32x2.backendIndex = 1441;
    cosh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    cosh_Float32x2.parameters = cosh_Float32x2_args;
    Symbol::Resolved(&cosh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&cosh_Float32x2)->signature = "cosh(f32x2) f32x2"_c;
    Symbol::Resolved(&cosh_Float32x2)->name = "cosh(f32x2)"_c;
    Symbol::Resolved(&cosh_Float32x2)->nameWithVarNames = "cosh(val : f32x2)"_c;
    Symbol::Resolved(&cosh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// cosh with Float32x3
    cosh_Float32x3_arg.name = "val"_c;
    cosh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    cosh_Float32x3.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float32x3.name = cosh_Float32x3_name;
    cosh_Float32x3.backendIndex = 1442;
    cosh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    cosh_Float32x3.parameters = cosh_Float32x3_args;
    Symbol::Resolved(&cosh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cosh_Float32x3)->signature = "cosh(f32x3) f32x3"_c;
    Symbol::Resolved(&cosh_Float32x3)->name = "cosh(f32x3)"_c;
    Symbol::Resolved(&cosh_Float32x3)->nameWithVarNames = "cosh(val : f32x3)"_c;
    Symbol::Resolved(&cosh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// cosh with Float32x4
    cosh_Float32x4_arg.name = "val"_c;
    cosh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    cosh_Float32x4.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float32x4.name = cosh_Float32x4_name;
    cosh_Float32x4.backendIndex = 1443;
    cosh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    cosh_Float32x4.parameters = cosh_Float32x4_args;
    Symbol::Resolved(&cosh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&cosh_Float32x4)->signature = "cosh(f32x4) f32x4"_c;
    Symbol::Resolved(&cosh_Float32x4)->name = "cosh(f32x4)"_c;
    Symbol::Resolved(&cosh_Float32x4)->nameWithVarNames = "cosh(val : f32x4)"_c;
    Symbol::Resolved(&cosh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// cosh with Float16
    cosh_Float16_arg.name = "val"_c;
    cosh_Float16_arg.type = Type::FullType{ Float16Type.name };
    cosh_Float16.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float16.name = cosh_Float16_name;
    cosh_Float16.backendIndex = 1444;
    cosh_Float16.returnType = Type::FullType { Float16Type.name };
    cosh_Float16.parameters = cosh_Float16_args;
    Symbol::Resolved(&cosh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&cosh_Float16)->signature = "cosh(f16) f16"_c;
    Symbol::Resolved(&cosh_Float16)->name = "cosh(f16)"_c;
    Symbol::Resolved(&cosh_Float16)->nameWithVarNames = "cosh(val : f16)"_c;
    Symbol::Resolved(&cosh_Float16)->returnTypeSymbol = &Float16Type;

    /// cosh with Float16x2
    cosh_Float16x2_arg.name = "val"_c;
    cosh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    cosh_Float16x2.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float16x2.name = cosh_Float16x2_name;
    cosh_Float16x2.backendIndex = 1445;
    cosh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    cosh_Float16x2.parameters = cosh_Float16x2_args;
    Symbol::Resolved(&cosh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&cosh_Float16x2)->signature = "cosh(f16x2) f16x2"_c;
    Symbol::Resolved(&cosh_Float16x2)->name = "cosh(f16x2)"_c;
    Symbol::Resolved(&cosh_Float16x2)->nameWithVarNames = "cosh(val : f16x2)"_c;
    Symbol::Resolved(&cosh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// cosh with Float16x3
    cosh_Float16x3_arg.name = "val"_c;
    cosh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    cosh_Float16x3.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float16x3.name = cosh_Float16x3_name;
    cosh_Float16x3.backendIndex = 1446;
    cosh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    cosh_Float16x3.parameters = cosh_Float16x3_args;
    Symbol::Resolved(&cosh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cosh_Float16x3)->signature = "cosh(f16x3) f16x3"_c;
    Symbol::Resolved(&cosh_Float16x3)->name = "cosh(f16x3)"_c;
    Symbol::Resolved(&cosh_Float16x3)->nameWithVarNames = "cosh(val : f16x3)"_c;
    Symbol::Resolved(&cosh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// cosh with Float16x4
    cosh_Float16x4_arg.name = "val"_c;
    cosh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    cosh_Float16x4.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float16x4.name = cosh_Float16x4_name;
    cosh_Float16x4.backendIndex = 1447;
    cosh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    cosh_Float16x4.parameters = cosh_Float16x4_args;
    Symbol::Resolved(&cosh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&cosh_Float16x4)->signature = "cosh(f16x4) f16x4"_c;
    Symbol::Resolved(&cosh_Float16x4)->name = "cosh(f16x4)"_c;
    Symbol::Resolved(&cosh_Float16x4)->nameWithVarNames = "cosh(val : f16x4)"_c;
    Symbol::Resolved(&cosh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// exp with Float32
    exp_Float32_arg.name = "val"_c;
    exp_Float32_arg.type = Type::FullType{ Float32Type.name };
    exp_Float32.documentation = "Returns the exponential of a value."_c;
    exp_Float32.name = exp_Float32_name;
    exp_Float32.backendIndex = 1448;
    exp_Float32.returnType = Type::FullType { Float32Type.name };
    exp_Float32.parameters = exp_Float32_args;
    Symbol::Resolved(&exp_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&exp_Float32)->signature = "exp(f32) f32"_c;
    Symbol::Resolved(&exp_Float32)->name = "exp(f32)"_c;
    Symbol::Resolved(&exp_Float32)->nameWithVarNames = "exp(val : f32)"_c;
    Symbol::Resolved(&exp_Float32)->returnTypeSymbol = &Float32Type;

}
} // namespace GPULang
