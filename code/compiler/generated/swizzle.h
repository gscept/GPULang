//-------------------------------------------------
// *** Generated by type_gen.py. ***
// DO NOT MODIFY!!!
//-------------------------------------------------

#define SWIZZLE4()\
X(x)\
X(xx)\
X(xxx)\
X(xxxx)\
X(xxxy)\
X(xxxz)\
X(xxxw)\
X(xxy)\
X(xxyx)\
X(xxyy)\
X(xxyz)\
X(xxyw)\
X(xxz)\
X(xxzx)\
X(xxzy)\
X(xxzz)\
X(xxzw)\
X(xxw)\
X(xxwx)\
X(xxwy)\
X(xxwz)\
X(xxww)\
X(xy)\
X(xyx)\
X(xyxx)\
X(xyxy)\
X(xyxz)\
X(xyxw)\
X(xyy)\
X(xyyx)\
X(xyyy)\
X(xyyz)\
X(xyyw)\
X(xyz)\
X(xyzx)\
X(xyzy)\
X(xyzz)\
X(xyzw)\
X(xyw)\
X(xywx)\
X(xywy)\
X(xywz)\
X(xyww)\
X(xz)\
X(xzx)\
X(xzxx)\
X(xzxy)\
X(xzxz)\
X(xzxw)\
X(xzy)\
X(xzyx)\
X(xzyy)\
X(xzyz)\
X(xzyw)\
X(xzz)\
X(xzzx)\
X(xzzy)\
X(xzzz)\
X(xzzw)\
X(xzw)\
X(xzwx)\
X(xzwy)\
X(xzwz)\
X(xzww)\
X(xw)\
X(xwx)\
X(xwxx)\
X(xwxy)\
X(xwxz)\
X(xwxw)\
X(xwy)\
X(xwyx)\
X(xwyy)\
X(xwyz)\
X(xwyw)\
X(xwz)\
X(xwzx)\
X(xwzy)\
X(xwzz)\
X(xwzw)\
X(xww)\
X(xwwx)\
X(xwwy)\
X(xwwz)\
X(xwww)\
X(y)\
X(yx)\
X(yxx)\
X(yxxx)\
X(yxxy)\
X(yxxz)\
X(yxxw)\
X(yxy)\
X(yxyx)\
X(yxyy)\
X(yxyz)\
X(yxyw)\
X(yxz)\
X(yxzx)\
X(yxzy)\
X(yxzz)\
X(yxzw)\
X(yxw)\
X(yxwx)\
X(yxwy)\
X(yxwz)\
X(yxww)\
X(yy)\
X(yyx)\
X(yyxx)\
X(yyxy)\
X(yyxz)\
X(yyxw)\
X(yyy)\
X(yyyx)\
X(yyyy)\
X(yyyz)\
X(yyyw)\
X(yyz)\
X(yyzx)\
X(yyzy)\
X(yyzz)\
X(yyzw)\
X(yyw)\
X(yywx)\
X(yywy)\
X(yywz)\
X(yyww)\
X(yz)\
X(yzx)\
X(yzxx)\
X(yzxy)\
X(yzxz)\
X(yzxw)\
X(yzy)\
X(yzyx)\
X(yzyy)\
X(yzyz)\
X(yzyw)\
X(yzz)\
X(yzzx)\
X(yzzy)\
X(yzzz)\
X(yzzw)\
X(yzw)\
X(yzwx)\
X(yzwy)\
X(yzwz)\
X(yzww)\
X(yw)\
X(ywx)\
X(ywxx)\
X(ywxy)\
X(ywxz)\
X(ywxw)\
X(ywy)\
X(ywyx)\
X(ywyy)\
X(ywyz)\
X(ywyw)\
X(ywz)\
X(ywzx)\
X(ywzy)\
X(ywzz)\
X(ywzw)\
X(yww)\
X(ywwx)\
X(ywwy)\
X(ywwz)\
X(ywww)\
X(z)\
X(zx)\
X(zxx)\
X(zxxx)\
X(zxxy)\
X(zxxz)\
X(zxxw)\
X(zxy)\
X(zxyx)\
X(zxyy)\
X(zxyz)\
X(zxyw)\
X(zxz)\
X(zxzx)\
X(zxzy)\
X(zxzz)\
X(zxzw)\
X(zxw)\
X(zxwx)\
X(zxwy)\
X(zxwz)\
X(zxww)\
X(zy)\
X(zyx)\
X(zyxx)\
X(zyxy)\
X(zyxz)\
X(zyxw)\
X(zyy)\
X(zyyx)\
X(zyyy)\
X(zyyz)\
X(zyyw)\
X(zyz)\
X(zyzx)\
X(zyzy)\
X(zyzz)\
X(zyzw)\
X(zyw)\
X(zywx)\
X(zywy)\
X(zywz)\
X(zyww)\
X(zz)\
X(zzx)\
X(zzxx)\
X(zzxy)\
X(zzxz)\
X(zzxw)\
X(zzy)\
X(zzyx)\
X(zzyy)\
X(zzyz)\
X(zzyw)\
X(zzz)\
X(zzzx)\
X(zzzy)\
X(zzzz)\
X(zzzw)\
X(zzw)\
X(zzwx)\
X(zzwy)\
X(zzwz)\
X(zzww)\
X(zw)\
X(zwx)\
X(zwxx)\
X(zwxy)\
X(zwxz)\
X(zwxw)\
X(zwy)\
X(zwyx)\
X(zwyy)\
X(zwyz)\
X(zwyw)\
X(zwz)\
X(zwzx)\
X(zwzy)\
X(zwzz)\
X(zwzw)\
X(zww)\
X(zwwx)\
X(zwwy)\
X(zwwz)\
X(zwww)\
X(w)\
X(wx)\
X(wxx)\
X(wxxx)\
X(wxxy)\
X(wxxz)\
X(wxxw)\
X(wxy)\
X(wxyx)\
X(wxyy)\
X(wxyz)\
X(wxyw)\
X(wxz)\
X(wxzx)\
X(wxzy)\
X(wxzz)\
X(wxzw)\
X(wxw)\
X(wxwx)\
X(wxwy)\
X(wxwz)\
X(wxww)\
X(wy)\
X(wyx)\
X(wyxx)\
X(wyxy)\
X(wyxz)\
X(wyxw)\
X(wyy)\
X(wyyx)\
X(wyyy)\
X(wyyz)\
X(wyyw)\
X(wyz)\
X(wyzx)\
X(wyzy)\
X(wyzz)\
X(wyzw)\
X(wyw)\
X(wywx)\
X(wywy)\
X(wywz)\
X(wyww)\
X(wz)\
X(wzx)\
X(wzxx)\
X(wzxy)\
X(wzxz)\
X(wzxw)\
X(wzy)\
X(wzyx)\
X(wzyy)\
X(wzyz)\
X(wzyw)\
X(wzz)\
X(wzzx)\
X(wzzy)\
X(wzzz)\
X(wzzw)\
X(wzw)\
X(wzwx)\
X(wzwy)\
X(wzwz)\
X(wzww)\
X(ww)\
X(wwx)\
X(wwxx)\
X(wwxy)\
X(wwxz)\
X(wwxw)\
X(wwy)\
X(wwyx)\
X(wwyy)\
X(wwyz)\
X(wwyw)\
X(wwz)\
X(wwzx)\
X(wwzy)\
X(wwzz)\
X(wwzw)\
X(www)\
X(wwwx)\
X(wwwy)\
X(wwwz)\
X(wwww)\
X(r)\
X(rr)\
X(rrr)\
X(rrrr)\
X(rrrg)\
X(rrrb)\
X(rrra)\
X(rrg)\
X(rrgr)\
X(rrgg)\
X(rrgb)\
X(rrga)\
X(rrb)\
X(rrbr)\
X(rrbg)\
X(rrbb)\
X(rrba)\
X(rra)\
X(rrar)\
X(rrag)\
X(rrab)\
X(rraa)\
X(rg)\
X(rgr)\
X(rgrr)\
X(rgrg)\
X(rgrb)\
X(rgra)\
X(rgg)\
X(rggr)\
X(rggg)\
X(rggb)\
X(rgga)\
X(rgb)\
X(rgbr)\
X(rgbg)\
X(rgbb)\
X(rgba)\
X(rga)\
X(rgar)\
X(rgag)\
X(rgab)\
X(rgaa)\
X(rb)\
X(rbr)\
X(rbrr)\
X(rbrg)\
X(rbrb)\
X(rbra)\
X(rbg)\
X(rbgr)\
X(rbgg)\
X(rbgb)\
X(rbga)\
X(rbb)\
X(rbbr)\
X(rbbg)\
X(rbbb)\
X(rbba)\
X(rba)\
X(rbar)\
X(rbag)\
X(rbab)\
X(rbaa)\
X(ra)\
X(rar)\
X(rarr)\
X(rarg)\
X(rarb)\
X(rara)\
X(rag)\
X(ragr)\
X(ragg)\
X(ragb)\
X(raga)\
X(rab)\
X(rabr)\
X(rabg)\
X(rabb)\
X(raba)\
X(raa)\
X(raar)\
X(raag)\
X(raab)\
X(raaa)\
X(g)\
X(gr)\
X(grr)\
X(grrr)\
X(grrg)\
X(grrb)\
X(grra)\
X(grg)\
X(grgr)\
X(grgg)\
X(grgb)\
X(grga)\
X(grb)\
X(grbr)\
X(grbg)\
X(grbb)\
X(grba)\
X(gra)\
X(grar)\
X(grag)\
X(grab)\
X(graa)\
X(gg)\
X(ggr)\
X(ggrr)\
X(ggrg)\
X(ggrb)\
X(ggra)\
X(ggg)\
X(gggr)\
X(gggg)\
X(gggb)\
X(ggga)\
X(ggb)\
X(ggbr)\
X(ggbg)\
X(ggbb)\
X(ggba)\
X(gga)\
X(ggar)\
X(ggag)\
X(ggab)\
X(ggaa)\
X(gb)\
X(gbr)\
X(gbrr)\
X(gbrg)\
X(gbrb)\
X(gbra)\
X(gbg)\
X(gbgr)\
X(gbgg)\
X(gbgb)\
X(gbga)\
X(gbb)\
X(gbbr)\
X(gbbg)\
X(gbbb)\
X(gbba)\
X(gba)\
X(gbar)\
X(gbag)\
X(gbab)\
X(gbaa)\
X(ga)\
X(gar)\
X(garr)\
X(garg)\
X(garb)\
X(gara)\
X(gag)\
X(gagr)\
X(gagg)\
X(gagb)\
X(gaga)\
X(gab)\
X(gabr)\
X(gabg)\
X(gabb)\
X(gaba)\
X(gaa)\
X(gaar)\
X(gaag)\
X(gaab)\
X(gaaa)\
X(b)\
X(br)\
X(brr)\
X(brrr)\
X(brrg)\
X(brrb)\
X(brra)\
X(brg)\
X(brgr)\
X(brgg)\
X(brgb)\
X(brga)\
X(brb)\
X(brbr)\
X(brbg)\
X(brbb)\
X(brba)\
X(bra)\
X(brar)\
X(brag)\
X(brab)\
X(braa)\
X(bg)\
X(bgr)\
X(bgrr)\
X(bgrg)\
X(bgrb)\
X(bgra)\
X(bgg)\
X(bggr)\
X(bggg)\
X(bggb)\
X(bgga)\
X(bgb)\
X(bgbr)\
X(bgbg)\
X(bgbb)\
X(bgba)\
X(bga)\
X(bgar)\
X(bgag)\
X(bgab)\
X(bgaa)\
X(bb)\
X(bbr)\
X(bbrr)\
X(bbrg)\
X(bbrb)\
X(bbra)\
X(bbg)\
X(bbgr)\
X(bbgg)\
X(bbgb)\
X(bbga)\
X(bbb)\
X(bbbr)\
X(bbbg)\
X(bbbb)\
X(bbba)\
X(bba)\
X(bbar)\
X(bbag)\
X(bbab)\
X(bbaa)\
X(ba)\
X(bar)\
X(barr)\
X(barg)\
X(barb)\
X(bara)\
X(bag)\
X(bagr)\
X(bagg)\
X(bagb)\
X(baga)\
X(bab)\
X(babr)\
X(babg)\
X(babb)\
X(baba)\
X(baa)\
X(baar)\
X(baag)\
X(baab)\
X(baaa)\
X(a)\
X(ar)\
X(arr)\
X(arrr)\
X(arrg)\
X(arrb)\
X(arra)\
X(arg)\
X(argr)\
X(argg)\
X(argb)\
X(arga)\
X(arb)\
X(arbr)\
X(arbg)\
X(arbb)\
X(arba)\
X(ara)\
X(arar)\
X(arag)\
X(arab)\
X(araa)\
X(ag)\
X(agr)\
X(agrr)\
X(agrg)\
X(agrb)\
X(agra)\
X(agg)\
X(aggr)\
X(aggg)\
X(aggb)\
X(agga)\
X(agb)\
X(agbr)\
X(agbg)\
X(agbb)\
X(agba)\
X(aga)\
X(agar)\
X(agag)\
X(agab)\
X(agaa)\
X(ab)\
X(abr)\
X(abrr)\
X(abrg)\
X(abrb)\
X(abra)\
X(abg)\
X(abgr)\
X(abgg)\
X(abgb)\
X(abga)\
X(abb)\
X(abbr)\
X(abbg)\
X(abbb)\
X(abba)\
X(aba)\
X(abar)\
X(abag)\
X(abab)\
X(abaa)\
X(aa)\
X(aar)\
X(aarr)\
X(aarg)\
X(aarb)\
X(aara)\
X(aag)\
X(aagr)\
X(aagg)\
X(aagb)\
X(aaga)\
X(aab)\
X(aabr)\
X(aabg)\
X(aabb)\
X(aaba)\
X(aaa)\
X(aaar)\
X(aaag)\
X(aaab)\
X(aaaa)\

#define SWIZZLE3()\
X(x)\
X(xx)\
X(xxx)\
X(xxy)\
X(xxz)\
X(xy)\
X(xyx)\
X(xyy)\
X(xyz)\
X(xz)\
X(xzx)\
X(xzy)\
X(xzz)\
X(y)\
X(yx)\
X(yxx)\
X(yxy)\
X(yxz)\
X(yy)\
X(yyx)\
X(yyy)\
X(yyz)\
X(yz)\
X(yzx)\
X(yzy)\
X(yzz)\
X(z)\
X(zx)\
X(zxx)\
X(zxy)\
X(zxz)\
X(zy)\
X(zyx)\
X(zyy)\
X(zyz)\
X(zz)\
X(zzx)\
X(zzy)\
X(zzz)\
X(r)\
X(rr)\
X(rrr)\
X(rrg)\
X(rrb)\
X(rg)\
X(rgr)\
X(rgg)\
X(rgb)\
X(rb)\
X(rbr)\
X(rbg)\
X(rbb)\
X(g)\
X(gr)\
X(grr)\
X(grg)\
X(grb)\
X(gg)\
X(ggr)\
X(ggg)\
X(ggb)\
X(gb)\
X(gbr)\
X(gbg)\
X(gbb)\
X(b)\
X(br)\
X(brr)\
X(brg)\
X(brb)\
X(bg)\
X(bgr)\
X(bgg)\
X(bgb)\
X(bb)\
X(bbr)\
X(bbg)\
X(bbb)\

#define SWIZZLE2()\
X(x)\
X(xx)\
X(xy)\
X(y)\
X(yx)\
X(yy)\
X(r)\
X(rr)\
X(rg)\
X(g)\
X(gr)\
X(gg)\

#define DECL_Float_ctors\
extern Function Float_convert_UInt\
extern Function Float_convert_Int\
extern Function Float_ctor_Float

#define DEF_Float_ctors\
Function Float_convert_UInt\
Function Float_convert_Int\
Function Float_ctor_Float

#define Float_ctor_list\
std::pair{ "f32"_c, &Float_convert_UInt },\
std::pair{ "f32(u32)"_c, &Float_convert_UInt },\
std::pair{ "f32"_c, &Float_convert_Int },\
std::pair{ "f32(i32)"_c, &Float_convert_Int },\
std::pair{ "f32"_c, &Float_ctor_Float},\
std::pair{ "f32(f32)"_c, &Float_ctor_Float}

#define DECL_Float_operators\
extern Function Float_operator_index_Int;\
extern Function Float_operator_index_UInt;\
extern Function Float_operator_add;\
extern Function Float_operator_sub;\
extern Function Float_operator_mul;\
extern Function Float_operator_div;\
extern Function Float_operator_mod;\
extern Function Float_operator_addasg;\
extern Function Float_operator_subasg;\
extern Function Float_operator_mulasg;\
extern Function Float_operator_divasg;\
extern Function Float_operator_lt;\
extern Function Float_operator_lte;\
extern Function Float_operator_gt;\
extern Function Float_operator_gte;\
extern Function Float_operator_eq;\
extern Function Float_operator_neq;

#define DEF_Float_operators\
Function Float_operator_index_Int;\
Function Float_operator_index_UInt;\
Function Float_operator_add;\
Function Float_operator_sub;\
Function Float_operator_mul;\
Function Float_operator_div;\
Function Float_operator_mod;\
Function Float_operator_addasg;\
Function Float_operator_subasg;\
Function Float_operator_mulasg;\
Function Float_operator_divasg;\
Function Float_operator_lt;\
Function Float_operator_lte;\
Function Float_operator_gt;\
Function Float_operator_gte;\
Function Float_operator_eq;\
Function Float_operator_neq;

#define Float_operator_list\
std::pair{ "operator[](i32)", &Float_operator_index_Int},\
std::pair{ "operator[](u32)", &Float_operator_index_UInt},\
std::pair{ "operator+(f32)", &Float_operator_add},\
std::pair{ "operator-(f32)", &Float_operator_sub},\
std::pair{ "operator*(f32)", &Float_operator_mul},\
std::pair{ "operator/(f32)", &Float_operator_div},\
std::pair{ "operator%(f32)", &Float_operator_mod},\
std::pair{ "operator+=(f32)", &Float_operator_addasg},\
std::pair{ "operator-=(f32)", &Float_operator_subasg},\
std::pair{ "operator*=(f32)", &Float_operator_mulasg},\
std::pair{ "operator/=(f32)", &Float_operator_divasg},\
std::pair{ "operator<(f32)", &Float_operator_lt},\
std::pair{ "operator<=(f32)", &Float_operator_lte},\
std::pair{ "operator>(f32)", &Float_operator_gt},\
std::pair{ "operator>=(f32)", &Float_operator_gte},\
std::pair{ "operator==(f32)", &Float_operator_eq},\
std::pair{ "operator!=(f32)", &Float_operator_neq}

#define DECL_Float2_ctors\
extern Function Float2_convert_Float2\
extern Function Float2_splat_Float\
extern Function Float2_convert_UInt2\
extern Function Float2_splat_UInt\
extern Function Float2_convert_Int2\
extern Function Float2_splat_Int\
extern Function Float2_ctor_Float_Float

#define DEF_Float2_ctors\
Function Float2_convert_Float2\
Function Float2_splat_Float\
Function Float2_convert_UInt2\
Function Float2_splat_UInt\
Function Float2_convert_Int2\
Function Float2_splat_Int\
Function Float2_ctor_Float_Float

#define Float2_ctor_list\
std::pair{ "f32x2"_c, &Float2_convert_Float2 },\
std::pair{ "f32x2(f32x2)"_c, &Float2_convert_Float2 },\
std::pair{ "f32x2"_c, &Float2_splat_Float },\
std::pair{ "f32x2(f32)"_c, &Float2_splat_Float },\
std::pair{ "f32x2"_c, &Float2_convert_UInt2 },\
std::pair{ "f32x2(u32x2)"_c, &Float2_convert_UInt2 },\
std::pair{ "f32x2"_c, &Float2_splat_UInt },\
std::pair{ "f32x2(u32)"_c, &Float2_splat_UInt },\
std::pair{ "f32x2"_c, &Float2_convert_Int2 },\
std::pair{ "f32x2(i32x2)"_c, &Float2_convert_Int2 },\
std::pair{ "f32x2"_c, &Float2_splat_Int },\
std::pair{ "f32x2(i32)"_c, &Float2_splat_Int },\
std::pair{ "f32x2"_c, &Float2_ctor_Float_Float},\
std::pair{ "f32x2(f32,f32)"_c, &Float2_ctor_Float_Float}

#define DECL_Float2_operators\
extern Function Float2_operator_index_Int;\
extern Function Float2_operator_index_UInt;\
extern Function Float2_operator_add;\
extern Function Float2_operator_sub;\
extern Function Float2_operator_mul;\
extern Function Float2_operator_div;\
extern Function Float2_operator_mod;\
extern Function Float2_operator_addasg;\
extern Function Float2_operator_subasg;\
extern Function Float2_operator_mulasg;\
extern Function Float2_operator_divasg;\
extern Function Float2_operator_lt;\
extern Function Float2_operator_lte;\
extern Function Float2_operator_gt;\
extern Function Float2_operator_gte;\
extern Function Float2_operator_eq;\
extern Function Float2_operator_neq;\
extern Function Float2_operator_Mat2x2_mul;\
extern Function Float2_operator_Mat2x3_mul;\
extern Function Float2_operator_Mat2x4_mul;

#define DEF_Float2_operators\
Function Float2_operator_index_Int;\
Function Float2_operator_index_UInt;\
Function Float2_operator_add;\
Function Float2_operator_sub;\
Function Float2_operator_mul;\
Function Float2_operator_div;\
Function Float2_operator_mod;\
Function Float2_operator_addasg;\
Function Float2_operator_subasg;\
Function Float2_operator_mulasg;\
Function Float2_operator_divasg;\
Function Float2_operator_lt;\
Function Float2_operator_lte;\
Function Float2_operator_gt;\
Function Float2_operator_gte;\
Function Float2_operator_eq;\
Function Float2_operator_neq;\
Function Float2_operator_Mat2x2_mul;\
Function Float2_operator_Mat2x3_mul;\
Function Float2_operator_Mat2x4_mul;

#define Float2_operator_list\
std::pair{ "operator[](i32)", &Float2_operator_index_Int},\
std::pair{ "operator[](u32)", &Float2_operator_index_UInt},\
std::pair{ "operator+(f32x2)", &Float2_operator_add},\
std::pair{ "operator-(f32x2)", &Float2_operator_sub},\
std::pair{ "operator*(f32x2)", &Float2_operator_mul},\
std::pair{ "operator/(f32x2)", &Float2_operator_div},\
std::pair{ "operator%(f32x2)", &Float2_operator_mod},\
std::pair{ "operator+=(f32x2)", &Float2_operator_addasg},\
std::pair{ "operator-=(f32x2)", &Float2_operator_subasg},\
std::pair{ "operator*=(f32x2)", &Float2_operator_mulasg},\
std::pair{ "operator/=(f32x2)", &Float2_operator_divasg},\
std::pair{ "operator<(f32x2)", &Float2_operator_lt},\
std::pair{ "operator<=(f32x2)", &Float2_operator_lte},\
std::pair{ "operator>(f32x2)", &Float2_operator_gt},\
std::pair{ "operator>=(f32x2)", &Float2_operator_gte},\
std::pair{ "operator==(f32x2)", &Float2_operator_eq},\
std::pair{ "operator!=(f32x2)", &Float2_operator_neq},\
std::pair{ "operator*(f32x2x2)", &Float2_operator_Mat2x2_mul},\
std::pair{ "operator*(f32x2x3)", &Float2_operator_Mat2x3_mul},\
std::pair{ "operator*(f32x2x4)", &Float2_operator_Mat2x4_mul}

#define DECL_Float3_ctors\
extern Function Float3_convert_Float3\
extern Function Float3_splat_Float\
extern Function Float3_convert_UInt3\
extern Function Float3_splat_UInt\
extern Function Float3_convert_Int3\
extern Function Float3_splat_Int\
extern Function Float3_ctor_Float_Float_Float\
extern Function Float3_ctor_Float2_Float\
extern Function Float3_ctor_Float_Float2

#define DEF_Float3_ctors\
Function Float3_convert_Float3\
Function Float3_splat_Float\
Function Float3_convert_UInt3\
Function Float3_splat_UInt\
Function Float3_convert_Int3\
Function Float3_splat_Int\
Function Float3_ctor_Float_Float_Float\
Function Float3_ctor_Float2_Float\
Function Float3_ctor_Float_Float2

#define Float3_ctor_list\
std::pair{ "f32x3"_c, &Float3_convert_Float3 },\
std::pair{ "f32x3(f32x3)"_c, &Float3_convert_Float3 },\
std::pair{ "f32x3"_c, &Float3_splat_Float },\
std::pair{ "f32x3(f32)"_c, &Float3_splat_Float },\
std::pair{ "f32x3"_c, &Float3_convert_UInt3 },\
std::pair{ "f32x3(u32x3)"_c, &Float3_convert_UInt3 },\
std::pair{ "f32x3"_c, &Float3_splat_UInt },\
std::pair{ "f32x3(u32)"_c, &Float3_splat_UInt },\
std::pair{ "f32x3"_c, &Float3_convert_Int3 },\
std::pair{ "f32x3(i32x3)"_c, &Float3_convert_Int3 },\
std::pair{ "f32x3"_c, &Float3_splat_Int },\
std::pair{ "f32x3(i32)"_c, &Float3_splat_Int },\
std::pair{ "f32x3"_c, &Float3_ctor_Float_Float_Float},\
std::pair{ "f32x3(f32,f32,f32)"_c, &Float3_ctor_Float_Float_Float},\
std::pair{ "f32x3"_c, &Float3_ctor_Float2_Float},\
std::pair{ "f32x3(f32x2,f32)"_c, &Float3_ctor_Float2_Float},\
std::pair{ "f32x3"_c, &Float3_ctor_Float_Float2},\
std::pair{ "f32x3(f32,f32x2)"_c, &Float3_ctor_Float_Float2}

#define DECL_Float3_operators\
extern Function Float3_operator_index_Int;\
extern Function Float3_operator_index_UInt;\
extern Function Float3_operator_add;\
extern Function Float3_operator_sub;\
extern Function Float3_operator_mul;\
extern Function Float3_operator_div;\
extern Function Float3_operator_mod;\
extern Function Float3_operator_addasg;\
extern Function Float3_operator_subasg;\
extern Function Float3_operator_mulasg;\
extern Function Float3_operator_divasg;\
extern Function Float3_operator_lt;\
extern Function Float3_operator_lte;\
extern Function Float3_operator_gt;\
extern Function Float3_operator_gte;\
extern Function Float3_operator_eq;\
extern Function Float3_operator_neq;\
extern Function Float3_operator_Mat3x2_mul;\
extern Function Float3_operator_Mat3x3_mul;\
extern Function Float3_operator_Mat3x4_mul;

#define DEF_Float3_operators\
Function Float3_operator_index_Int;\
Function Float3_operator_index_UInt;\
Function Float3_operator_add;\
Function Float3_operator_sub;\
Function Float3_operator_mul;\
Function Float3_operator_div;\
Function Float3_operator_mod;\
Function Float3_operator_addasg;\
Function Float3_operator_subasg;\
Function Float3_operator_mulasg;\
Function Float3_operator_divasg;\
Function Float3_operator_lt;\
Function Float3_operator_lte;\
Function Float3_operator_gt;\
Function Float3_operator_gte;\
Function Float3_operator_eq;\
Function Float3_operator_neq;\
Function Float3_operator_Mat3x2_mul;\
Function Float3_operator_Mat3x3_mul;\
Function Float3_operator_Mat3x4_mul;

#define Float3_operator_list\
std::pair{ "operator[](i32)", &Float3_operator_index_Int},\
std::pair{ "operator[](u32)", &Float3_operator_index_UInt},\
std::pair{ "operator+(f32x3)", &Float3_operator_add},\
std::pair{ "operator-(f32x3)", &Float3_operator_sub},\
std::pair{ "operator*(f32x3)", &Float3_operator_mul},\
std::pair{ "operator/(f32x3)", &Float3_operator_div},\
std::pair{ "operator%(f32x3)", &Float3_operator_mod},\
std::pair{ "operator+=(f32x3)", &Float3_operator_addasg},\
std::pair{ "operator-=(f32x3)", &Float3_operator_subasg},\
std::pair{ "operator*=(f32x3)", &Float3_operator_mulasg},\
std::pair{ "operator/=(f32x3)", &Float3_operator_divasg},\
std::pair{ "operator<(f32x3)", &Float3_operator_lt},\
std::pair{ "operator<=(f32x3)", &Float3_operator_lte},\
std::pair{ "operator>(f32x3)", &Float3_operator_gt},\
std::pair{ "operator>=(f32x3)", &Float3_operator_gte},\
std::pair{ "operator==(f32x3)", &Float3_operator_eq},\
std::pair{ "operator!=(f32x3)", &Float3_operator_neq},\
std::pair{ "operator*(f32x3x2)", &Float3_operator_Mat3x2_mul},\
std::pair{ "operator*(f32x3x3)", &Float3_operator_Mat3x3_mul},\
std::pair{ "operator*(f32x3x4)", &Float3_operator_Mat3x4_mul}

#define DECL_Float4_ctors\
extern Function Float4_convert_Float4\
extern Function Float4_splat_Float\
extern Function Float4_convert_UInt4\
extern Function Float4_splat_UInt\
extern Function Float4_convert_Int4\
extern Function Float4_splat_Int\
extern Function Float4_ctor_Float_Float_Float_Float\
extern Function Float4_ctor_Float2_Float_Float\
extern Function Float4_ctor_Float_Float2_Float\
extern Function Float4_ctor_Float_Float_Float2\
extern Function Float4_ctor_Float3_Float\
extern Function Float4_ctor_Float_Float3

#define DEF_Float4_ctors\
Function Float4_convert_Float4\
Function Float4_splat_Float\
Function Float4_convert_UInt4\
Function Float4_splat_UInt\
Function Float4_convert_Int4\
Function Float4_splat_Int\
Function Float4_ctor_Float_Float_Float_Float\
Function Float4_ctor_Float2_Float_Float\
Function Float4_ctor_Float_Float2_Float\
Function Float4_ctor_Float_Float_Float2\
Function Float4_ctor_Float3_Float\
Function Float4_ctor_Float_Float3

#define Float4_ctor_list\
std::pair{ "f32x4"_c, &Float4_convert_Float4 },\
std::pair{ "f32x4(f32x4)"_c, &Float4_convert_Float4 },\
std::pair{ "f32x4"_c, &Float4_splat_Float },\
std::pair{ "f32x4(f32)"_c, &Float4_splat_Float },\
std::pair{ "f32x4"_c, &Float4_convert_UInt4 },\
std::pair{ "f32x4(u32x4)"_c, &Float4_convert_UInt4 },\
std::pair{ "f32x4"_c, &Float4_splat_UInt },\
std::pair{ "f32x4(u32)"_c, &Float4_splat_UInt },\
std::pair{ "f32x4"_c, &Float4_convert_Int4 },\
std::pair{ "f32x4(i32x4)"_c, &Float4_convert_Int4 },\
std::pair{ "f32x4"_c, &Float4_splat_Int },\
std::pair{ "f32x4(i32)"_c, &Float4_splat_Int },\
std::pair{ "f32x4"_c, &Float4_ctor_Float_Float_Float_Float},\
std::pair{ "f32x4(f32,f32,f32,f32)"_c, &Float4_ctor_Float_Float_Float_Float},\
std::pair{ "f32x4"_c, &Float4_ctor_Float2_Float_Float},\
std::pair{ "f32x4(f32x2,f32,f32)"_c, &Float4_ctor_Float2_Float_Float},\
std::pair{ "f32x4"_c, &Float4_ctor_Float_Float2_Float},\
std::pair{ "f32x4(f32,f32x2,f32)"_c, &Float4_ctor_Float_Float2_Float},\
std::pair{ "f32x4"_c, &Float4_ctor_Float_Float_Float2},\
std::pair{ "f32x4(f32,f32,f32x2)"_c, &Float4_ctor_Float_Float_Float2},\
std::pair{ "f32x4"_c, &Float4_ctor_Float3_Float},\
std::pair{ "f32x4(f32x3,f32)"_c, &Float4_ctor_Float3_Float},\
std::pair{ "f32x4"_c, &Float4_ctor_Float_Float3},\
std::pair{ "f32x4(f32,f32x3)"_c, &Float4_ctor_Float_Float3}

#define DECL_Float4_operators\
extern Function Float4_operator_index_Int;\
extern Function Float4_operator_index_UInt;\
extern Function Float4_operator_add;\
extern Function Float4_operator_sub;\
extern Function Float4_operator_mul;\
extern Function Float4_operator_div;\
extern Function Float4_operator_mod;\
extern Function Float4_operator_addasg;\
extern Function Float4_operator_subasg;\
extern Function Float4_operator_mulasg;\
extern Function Float4_operator_divasg;\
extern Function Float4_operator_lt;\
extern Function Float4_operator_lte;\
extern Function Float4_operator_gt;\
extern Function Float4_operator_gte;\
extern Function Float4_operator_eq;\
extern Function Float4_operator_neq;\
extern Function Float4_operator_Mat4x2_mul;\
extern Function Float4_operator_Mat4x3_mul;\
extern Function Float4_operator_Mat4x4_mul;

#define DEF_Float4_operators\
Function Float4_operator_index_Int;\
Function Float4_operator_index_UInt;\
Function Float4_operator_add;\
Function Float4_operator_sub;\
Function Float4_operator_mul;\
Function Float4_operator_div;\
Function Float4_operator_mod;\
Function Float4_operator_addasg;\
Function Float4_operator_subasg;\
Function Float4_operator_mulasg;\
Function Float4_operator_divasg;\
Function Float4_operator_lt;\
Function Float4_operator_lte;\
Function Float4_operator_gt;\
Function Float4_operator_gte;\
Function Float4_operator_eq;\
Function Float4_operator_neq;\
Function Float4_operator_Mat4x2_mul;\
Function Float4_operator_Mat4x3_mul;\
Function Float4_operator_Mat4x4_mul;

#define Float4_operator_list\
std::pair{ "operator[](i32)", &Float4_operator_index_Int},\
std::pair{ "operator[](u32)", &Float4_operator_index_UInt},\
std::pair{ "operator+(f32x4)", &Float4_operator_add},\
std::pair{ "operator-(f32x4)", &Float4_operator_sub},\
std::pair{ "operator*(f32x4)", &Float4_operator_mul},\
std::pair{ "operator/(f32x4)", &Float4_operator_div},\
std::pair{ "operator%(f32x4)", &Float4_operator_mod},\
std::pair{ "operator+=(f32x4)", &Float4_operator_addasg},\
std::pair{ "operator-=(f32x4)", &Float4_operator_subasg},\
std::pair{ "operator*=(f32x4)", &Float4_operator_mulasg},\
std::pair{ "operator/=(f32x4)", &Float4_operator_divasg},\
std::pair{ "operator<(f32x4)", &Float4_operator_lt},\
std::pair{ "operator<=(f32x4)", &Float4_operator_lte},\
std::pair{ "operator>(f32x4)", &Float4_operator_gt},\
std::pair{ "operator>=(f32x4)", &Float4_operator_gte},\
std::pair{ "operator==(f32x4)", &Float4_operator_eq},\
std::pair{ "operator!=(f32x4)", &Float4_operator_neq},\
std::pair{ "operator*(f32x4x2)", &Float4_operator_Mat4x2_mul},\
std::pair{ "operator*(f32x4x3)", &Float4_operator_Mat4x3_mul},\
std::pair{ "operator*(f32x4x4)", &Float4_operator_Mat4x4_mul}

#define DECL_UInt_ctors\
extern Function UInt_convert_Float\
extern Function UInt_convert_Int\
extern Function UInt_ctor_UInt

#define DEF_UInt_ctors\
Function UInt_convert_Float\
Function UInt_convert_Int\
Function UInt_ctor_UInt

#define UInt_ctor_list\
std::pair{ "u32"_c, &UInt_convert_Float },\
std::pair{ "u32(f32)"_c, &UInt_convert_Float },\
std::pair{ "u32"_c, &UInt_convert_Int },\
std::pair{ "u32(i32)"_c, &UInt_convert_Int },\
std::pair{ "u32"_c, &UInt_ctor_UInt},\
std::pair{ "u32(u32)"_c, &UInt_ctor_UInt}

#define DECL_UInt_operators\
extern Function UInt_operator_index_Int;\
extern Function UInt_operator_index_UInt;\
extern Function UInt_operator_add;\
extern Function UInt_operator_sub;\
extern Function UInt_operator_mul;\
extern Function UInt_operator_div;\
extern Function UInt_operator_mod;\
extern Function UInt_operator_addasg;\
extern Function UInt_operator_subasg;\
extern Function UInt_operator_mulasg;\
extern Function UInt_operator_divasg;\
extern Function UInt_operator_lt;\
extern Function UInt_operator_lte;\
extern Function UInt_operator_gt;\
extern Function UInt_operator_gte;\
extern Function UInt_operator_eq;\
extern Function UInt_operator_neq;\
extern Function UInt_operator_or;\
extern Function UInt_operator_and;\
extern Function UInt_operator_xor;\
extern Function UInt_operator_lsh;\
extern Function UInt_operator_rsh;\
extern Function UInt_operator_orasg;\
extern Function UInt_operator_andasg;\
extern Function UInt_operator_xorasg;\
extern Function UInt_operator_lshasg;\
extern Function UInt_operator_rhsasg;

#define DEF_UInt_operators\
Function UInt_operator_index_Int;\
Function UInt_operator_index_UInt;\
Function UInt_operator_add;\
Function UInt_operator_sub;\
Function UInt_operator_mul;\
Function UInt_operator_div;\
Function UInt_operator_mod;\
Function UInt_operator_addasg;\
Function UInt_operator_subasg;\
Function UInt_operator_mulasg;\
Function UInt_operator_divasg;\
Function UInt_operator_lt;\
Function UInt_operator_lte;\
Function UInt_operator_gt;\
Function UInt_operator_gte;\
Function UInt_operator_eq;\
Function UInt_operator_neq;\
Function UInt_operator_or;\
Function UInt_operator_and;\
Function UInt_operator_xor;\
Function UInt_operator_lsh;\
Function UInt_operator_rsh;\
Function UInt_operator_orasg;\
Function UInt_operator_andasg;\
Function UInt_operator_xorasg;\
Function UInt_operator_lshasg;\
Function UInt_operator_rhsasg;

#define UInt_operator_list\
std::pair{ "operator[](i32)", &UInt_operator_index_Int},\
std::pair{ "operator[](u32)", &UInt_operator_index_UInt},\
std::pair{ "operator+(u32)", &UInt_operator_add},\
std::pair{ "operator-(u32)", &UInt_operator_sub},\
std::pair{ "operator*(u32)", &UInt_operator_mul},\
std::pair{ "operator/(u32)", &UInt_operator_div},\
std::pair{ "operator%(u32)", &UInt_operator_mod},\
std::pair{ "operator+=(u32)", &UInt_operator_addasg},\
std::pair{ "operator-=(u32)", &UInt_operator_subasg},\
std::pair{ "operator*=(u32)", &UInt_operator_mulasg},\
std::pair{ "operator/=(u32)", &UInt_operator_divasg},\
std::pair{ "operator<(u32)", &UInt_operator_lt},\
std::pair{ "operator<=(u32)", &UInt_operator_lte},\
std::pair{ "operator>(u32)", &UInt_operator_gt},\
std::pair{ "operator>=(u32)", &UInt_operator_gte},\
std::pair{ "operator==(u32)", &UInt_operator_eq},\
std::pair{ "operator!=(u32)", &UInt_operator_neq},\
std::pair{ "operator|", &UInt_operator_or},\
std::pair{ "operator&", &UInt_operator_and},\
std::pair{ "operator^", &UInt_operator_xor},\
std::pair{ "operator<<", &UInt_operator_lsh},\
std::pair{ "operator>>", &UInt_operator_rsh},\
std::pair{ "operator|=", &UInt_operator_orasg},\
std::pair{ "operator&=", &UInt_operator_andasg},\
std::pair{ "operator^=", &UInt_operator_xorasg},\
std::pair{ "operator<<=", &UInt_operator_lshasg},\
std::pair{ "operator>>=", &UInt_operator_rhsasg}

#define DECL_UInt2_ctors\
extern Function UInt2_convert_Float2\
extern Function UInt2_splat_Float\
extern Function UInt2_convert_UInt2\
extern Function UInt2_splat_UInt\
extern Function UInt2_convert_Int2\
extern Function UInt2_splat_Int\
extern Function UInt2_ctor_UInt_UInt

#define DEF_UInt2_ctors\
Function UInt2_convert_Float2\
Function UInt2_splat_Float\
Function UInt2_convert_UInt2\
Function UInt2_splat_UInt\
Function UInt2_convert_Int2\
Function UInt2_splat_Int\
Function UInt2_ctor_UInt_UInt

#define UInt2_ctor_list\
std::pair{ "u32x2"_c, &UInt2_convert_Float2 },\
std::pair{ "u32x2(f32x2)"_c, &UInt2_convert_Float2 },\
std::pair{ "u32x2"_c, &UInt2_splat_Float },\
std::pair{ "u32x2(f32)"_c, &UInt2_splat_Float },\
std::pair{ "u32x2"_c, &UInt2_convert_UInt2 },\
std::pair{ "u32x2(u32x2)"_c, &UInt2_convert_UInt2 },\
std::pair{ "u32x2"_c, &UInt2_splat_UInt },\
std::pair{ "u32x2(u32)"_c, &UInt2_splat_UInt },\
std::pair{ "u32x2"_c, &UInt2_convert_Int2 },\
std::pair{ "u32x2(i32x2)"_c, &UInt2_convert_Int2 },\
std::pair{ "u32x2"_c, &UInt2_splat_Int },\
std::pair{ "u32x2(i32)"_c, &UInt2_splat_Int },\
std::pair{ "u32x2"_c, &UInt2_ctor_UInt_UInt},\
std::pair{ "u32x2(u32,u32)"_c, &UInt2_ctor_UInt_UInt}

#define DECL_UInt2_operators\
extern Function UInt2_operator_index_Int;\
extern Function UInt2_operator_index_UInt;\
extern Function UInt2_operator_add;\
extern Function UInt2_operator_sub;\
extern Function UInt2_operator_mul;\
extern Function UInt2_operator_div;\
extern Function UInt2_operator_mod;\
extern Function UInt2_operator_addasg;\
extern Function UInt2_operator_subasg;\
extern Function UInt2_operator_mulasg;\
extern Function UInt2_operator_divasg;\
extern Function UInt2_operator_lt;\
extern Function UInt2_operator_lte;\
extern Function UInt2_operator_gt;\
extern Function UInt2_operator_gte;\
extern Function UInt2_operator_eq;\
extern Function UInt2_operator_neq;\
extern Function UInt2_operator_or;\
extern Function UInt2_operator_and;\
extern Function UInt2_operator_xor;\
extern Function UInt2_operator_lsh;\
extern Function UInt2_operator_rsh;\
extern Function UInt2_operator_orasg;\
extern Function UInt2_operator_andasg;\
extern Function UInt2_operator_xorasg;\
extern Function UInt2_operator_lshasg;\
extern Function UInt2_operator_rhsasg;

#define DEF_UInt2_operators\
Function UInt2_operator_index_Int;\
Function UInt2_operator_index_UInt;\
Function UInt2_operator_add;\
Function UInt2_operator_sub;\
Function UInt2_operator_mul;\
Function UInt2_operator_div;\
Function UInt2_operator_mod;\
Function UInt2_operator_addasg;\
Function UInt2_operator_subasg;\
Function UInt2_operator_mulasg;\
Function UInt2_operator_divasg;\
Function UInt2_operator_lt;\
Function UInt2_operator_lte;\
Function UInt2_operator_gt;\
Function UInt2_operator_gte;\
Function UInt2_operator_eq;\
Function UInt2_operator_neq;\
Function UInt2_operator_or;\
Function UInt2_operator_and;\
Function UInt2_operator_xor;\
Function UInt2_operator_lsh;\
Function UInt2_operator_rsh;\
Function UInt2_operator_orasg;\
Function UInt2_operator_andasg;\
Function UInt2_operator_xorasg;\
Function UInt2_operator_lshasg;\
Function UInt2_operator_rhsasg;

#define UInt2_operator_list\
std::pair{ "operator[](i32)", &UInt2_operator_index_Int},\
std::pair{ "operator[](u32)", &UInt2_operator_index_UInt},\
std::pair{ "operator+(u32x2)", &UInt2_operator_add},\
std::pair{ "operator-(u32x2)", &UInt2_operator_sub},\
std::pair{ "operator*(u32x2)", &UInt2_operator_mul},\
std::pair{ "operator/(u32x2)", &UInt2_operator_div},\
std::pair{ "operator%(u32x2)", &UInt2_operator_mod},\
std::pair{ "operator+=(u32x2)", &UInt2_operator_addasg},\
std::pair{ "operator-=(u32x2)", &UInt2_operator_subasg},\
std::pair{ "operator*=(u32x2)", &UInt2_operator_mulasg},\
std::pair{ "operator/=(u32x2)", &UInt2_operator_divasg},\
std::pair{ "operator<(u32x2)", &UInt2_operator_lt},\
std::pair{ "operator<=(u32x2)", &UInt2_operator_lte},\
std::pair{ "operator>(u32x2)", &UInt2_operator_gt},\
std::pair{ "operator>=(u32x2)", &UInt2_operator_gte},\
std::pair{ "operator==(u32x2)", &UInt2_operator_eq},\
std::pair{ "operator!=(u32x2)", &UInt2_operator_neq},\
std::pair{ "operator|", &UInt2_operator_or},\
std::pair{ "operator&", &UInt2_operator_and},\
std::pair{ "operator^", &UInt2_operator_xor},\
std::pair{ "operator<<", &UInt2_operator_lsh},\
std::pair{ "operator>>", &UInt2_operator_rsh},\
std::pair{ "operator|=", &UInt2_operator_orasg},\
std::pair{ "operator&=", &UInt2_operator_andasg},\
std::pair{ "operator^=", &UInt2_operator_xorasg},\
std::pair{ "operator<<=", &UInt2_operator_lshasg},\
std::pair{ "operator>>=", &UInt2_operator_rhsasg}

#define DECL_UInt3_ctors\
extern Function UInt3_convert_Float3\
extern Function UInt3_splat_Float\
extern Function UInt3_convert_UInt3\
extern Function UInt3_splat_UInt\
extern Function UInt3_convert_Int3\
extern Function UInt3_splat_Int\
extern Function UInt3_ctor_UInt_UInt_UInt\
extern Function UInt3_ctor_UInt2_UInt\
extern Function UInt3_ctor_UInt_UInt2

#define DEF_UInt3_ctors\
Function UInt3_convert_Float3\
Function UInt3_splat_Float\
Function UInt3_convert_UInt3\
Function UInt3_splat_UInt\
Function UInt3_convert_Int3\
Function UInt3_splat_Int\
Function UInt3_ctor_UInt_UInt_UInt\
Function UInt3_ctor_UInt2_UInt\
Function UInt3_ctor_UInt_UInt2

#define UInt3_ctor_list\
std::pair{ "u32x3"_c, &UInt3_convert_Float3 },\
std::pair{ "u32x3(f32x3)"_c, &UInt3_convert_Float3 },\
std::pair{ "u32x3"_c, &UInt3_splat_Float },\
std::pair{ "u32x3(f32)"_c, &UInt3_splat_Float },\
std::pair{ "u32x3"_c, &UInt3_convert_UInt3 },\
std::pair{ "u32x3(u32x3)"_c, &UInt3_convert_UInt3 },\
std::pair{ "u32x3"_c, &UInt3_splat_UInt },\
std::pair{ "u32x3(u32)"_c, &UInt3_splat_UInt },\
std::pair{ "u32x3"_c, &UInt3_convert_Int3 },\
std::pair{ "u32x3(i32x3)"_c, &UInt3_convert_Int3 },\
std::pair{ "u32x3"_c, &UInt3_splat_Int },\
std::pair{ "u32x3(i32)"_c, &UInt3_splat_Int },\
std::pair{ "u32x3"_c, &UInt3_ctor_UInt_UInt_UInt},\
std::pair{ "u32x3(u32,u32,u32)"_c, &UInt3_ctor_UInt_UInt_UInt},\
std::pair{ "u32x3"_c, &UInt3_ctor_UInt2_UInt},\
std::pair{ "u32x3(u32x2,u32)"_c, &UInt3_ctor_UInt2_UInt},\
std::pair{ "u32x3"_c, &UInt3_ctor_UInt_UInt2},\
std::pair{ "u32x3(u32,u32x2)"_c, &UInt3_ctor_UInt_UInt2}

#define DECL_UInt3_operators\
extern Function UInt3_operator_index_Int;\
extern Function UInt3_operator_index_UInt;\
extern Function UInt3_operator_add;\
extern Function UInt3_operator_sub;\
extern Function UInt3_operator_mul;\
extern Function UInt3_operator_div;\
extern Function UInt3_operator_mod;\
extern Function UInt3_operator_addasg;\
extern Function UInt3_operator_subasg;\
extern Function UInt3_operator_mulasg;\
extern Function UInt3_operator_divasg;\
extern Function UInt3_operator_lt;\
extern Function UInt3_operator_lte;\
extern Function UInt3_operator_gt;\
extern Function UInt3_operator_gte;\
extern Function UInt3_operator_eq;\
extern Function UInt3_operator_neq;\
extern Function UInt3_operator_or;\
extern Function UInt3_operator_and;\
extern Function UInt3_operator_xor;\
extern Function UInt3_operator_lsh;\
extern Function UInt3_operator_rsh;\
extern Function UInt3_operator_orasg;\
extern Function UInt3_operator_andasg;\
extern Function UInt3_operator_xorasg;\
extern Function UInt3_operator_lshasg;\
extern Function UInt3_operator_rhsasg;

#define DEF_UInt3_operators\
Function UInt3_operator_index_Int;\
Function UInt3_operator_index_UInt;\
Function UInt3_operator_add;\
Function UInt3_operator_sub;\
Function UInt3_operator_mul;\
Function UInt3_operator_div;\
Function UInt3_operator_mod;\
Function UInt3_operator_addasg;\
Function UInt3_operator_subasg;\
Function UInt3_operator_mulasg;\
Function UInt3_operator_divasg;\
Function UInt3_operator_lt;\
Function UInt3_operator_lte;\
Function UInt3_operator_gt;\
Function UInt3_operator_gte;\
Function UInt3_operator_eq;\
Function UInt3_operator_neq;\
Function UInt3_operator_or;\
Function UInt3_operator_and;\
Function UInt3_operator_xor;\
Function UInt3_operator_lsh;\
Function UInt3_operator_rsh;\
Function UInt3_operator_orasg;\
Function UInt3_operator_andasg;\
Function UInt3_operator_xorasg;\
Function UInt3_operator_lshasg;\
Function UInt3_operator_rhsasg;

#define UInt3_operator_list\
std::pair{ "operator[](i32)", &UInt3_operator_index_Int},\
std::pair{ "operator[](u32)", &UInt3_operator_index_UInt},\
std::pair{ "operator+(u32x3)", &UInt3_operator_add},\
std::pair{ "operator-(u32x3)", &UInt3_operator_sub},\
std::pair{ "operator*(u32x3)", &UInt3_operator_mul},\
std::pair{ "operator/(u32x3)", &UInt3_operator_div},\
std::pair{ "operator%(u32x3)", &UInt3_operator_mod},\
std::pair{ "operator+=(u32x3)", &UInt3_operator_addasg},\
std::pair{ "operator-=(u32x3)", &UInt3_operator_subasg},\
std::pair{ "operator*=(u32x3)", &UInt3_operator_mulasg},\
std::pair{ "operator/=(u32x3)", &UInt3_operator_divasg},\
std::pair{ "operator<(u32x3)", &UInt3_operator_lt},\
std::pair{ "operator<=(u32x3)", &UInt3_operator_lte},\
std::pair{ "operator>(u32x3)", &UInt3_operator_gt},\
std::pair{ "operator>=(u32x3)", &UInt3_operator_gte},\
std::pair{ "operator==(u32x3)", &UInt3_operator_eq},\
std::pair{ "operator!=(u32x3)", &UInt3_operator_neq},\
std::pair{ "operator|", &UInt3_operator_or},\
std::pair{ "operator&", &UInt3_operator_and},\
std::pair{ "operator^", &UInt3_operator_xor},\
std::pair{ "operator<<", &UInt3_operator_lsh},\
std::pair{ "operator>>", &UInt3_operator_rsh},\
std::pair{ "operator|=", &UInt3_operator_orasg},\
std::pair{ "operator&=", &UInt3_operator_andasg},\
std::pair{ "operator^=", &UInt3_operator_xorasg},\
std::pair{ "operator<<=", &UInt3_operator_lshasg},\
std::pair{ "operator>>=", &UInt3_operator_rhsasg}

#define DECL_UInt4_ctors\
extern Function UInt4_convert_Float4\
extern Function UInt4_splat_Float\
extern Function UInt4_convert_UInt4\
extern Function UInt4_splat_UInt\
extern Function UInt4_convert_Int4\
extern Function UInt4_splat_Int\
extern Function UInt4_ctor_UInt_UInt_UInt_UInt\
extern Function UInt4_ctor_UInt2_UInt_UInt\
extern Function UInt4_ctor_UInt_UInt2_UInt\
extern Function UInt4_ctor_UInt_UInt_UInt2\
extern Function UInt4_ctor_UInt3_UInt\
extern Function UInt4_ctor_UInt_UInt3

#define DEF_UInt4_ctors\
Function UInt4_convert_Float4\
Function UInt4_splat_Float\
Function UInt4_convert_UInt4\
Function UInt4_splat_UInt\
Function UInt4_convert_Int4\
Function UInt4_splat_Int\
Function UInt4_ctor_UInt_UInt_UInt_UInt\
Function UInt4_ctor_UInt2_UInt_UInt\
Function UInt4_ctor_UInt_UInt2_UInt\
Function UInt4_ctor_UInt_UInt_UInt2\
Function UInt4_ctor_UInt3_UInt\
Function UInt4_ctor_UInt_UInt3

#define UInt4_ctor_list\
std::pair{ "u32x4"_c, &UInt4_convert_Float4 },\
std::pair{ "u32x4(f32x4)"_c, &UInt4_convert_Float4 },\
std::pair{ "u32x4"_c, &UInt4_splat_Float },\
std::pair{ "u32x4(f32)"_c, &UInt4_splat_Float },\
std::pair{ "u32x4"_c, &UInt4_convert_UInt4 },\
std::pair{ "u32x4(u32x4)"_c, &UInt4_convert_UInt4 },\
std::pair{ "u32x4"_c, &UInt4_splat_UInt },\
std::pair{ "u32x4(u32)"_c, &UInt4_splat_UInt },\
std::pair{ "u32x4"_c, &UInt4_convert_Int4 },\
std::pair{ "u32x4(i32x4)"_c, &UInt4_convert_Int4 },\
std::pair{ "u32x4"_c, &UInt4_splat_Int },\
std::pair{ "u32x4(i32)"_c, &UInt4_splat_Int },\
std::pair{ "u32x4"_c, &UInt4_ctor_UInt_UInt_UInt_UInt},\
std::pair{ "u32x4(u32,u32,u32,u32)"_c, &UInt4_ctor_UInt_UInt_UInt_UInt},\
std::pair{ "u32x4"_c, &UInt4_ctor_UInt2_UInt_UInt},\
std::pair{ "u32x4(u32x2,u32,u32)"_c, &UInt4_ctor_UInt2_UInt_UInt},\
std::pair{ "u32x4"_c, &UInt4_ctor_UInt_UInt2_UInt},\
std::pair{ "u32x4(u32,u32x2,u32)"_c, &UInt4_ctor_UInt_UInt2_UInt},\
std::pair{ "u32x4"_c, &UInt4_ctor_UInt_UInt_UInt2},\
std::pair{ "u32x4(u32,u32,u32x2)"_c, &UInt4_ctor_UInt_UInt_UInt2},\
std::pair{ "u32x4"_c, &UInt4_ctor_UInt3_UInt},\
std::pair{ "u32x4(u32x3,u32)"_c, &UInt4_ctor_UInt3_UInt},\
std::pair{ "u32x4"_c, &UInt4_ctor_UInt_UInt3},\
std::pair{ "u32x4(u32,u32x3)"_c, &UInt4_ctor_UInt_UInt3}

#define DECL_UInt4_operators\
extern Function UInt4_operator_index_Int;\
extern Function UInt4_operator_index_UInt;\
extern Function UInt4_operator_add;\
extern Function UInt4_operator_sub;\
extern Function UInt4_operator_mul;\
extern Function UInt4_operator_div;\
extern Function UInt4_operator_mod;\
extern Function UInt4_operator_addasg;\
extern Function UInt4_operator_subasg;\
extern Function UInt4_operator_mulasg;\
extern Function UInt4_operator_divasg;\
extern Function UInt4_operator_lt;\
extern Function UInt4_operator_lte;\
extern Function UInt4_operator_gt;\
extern Function UInt4_operator_gte;\
extern Function UInt4_operator_eq;\
extern Function UInt4_operator_neq;\
extern Function UInt4_operator_or;\
extern Function UInt4_operator_and;\
extern Function UInt4_operator_xor;\
extern Function UInt4_operator_lsh;\
extern Function UInt4_operator_rsh;\
extern Function UInt4_operator_orasg;\
extern Function UInt4_operator_andasg;\
extern Function UInt4_operator_xorasg;\
extern Function UInt4_operator_lshasg;\
extern Function UInt4_operator_rhsasg;

#define DEF_UInt4_operators\
Function UInt4_operator_index_Int;\
Function UInt4_operator_index_UInt;\
Function UInt4_operator_add;\
Function UInt4_operator_sub;\
Function UInt4_operator_mul;\
Function UInt4_operator_div;\
Function UInt4_operator_mod;\
Function UInt4_operator_addasg;\
Function UInt4_operator_subasg;\
Function UInt4_operator_mulasg;\
Function UInt4_operator_divasg;\
Function UInt4_operator_lt;\
Function UInt4_operator_lte;\
Function UInt4_operator_gt;\
Function UInt4_operator_gte;\
Function UInt4_operator_eq;\
Function UInt4_operator_neq;\
Function UInt4_operator_or;\
Function UInt4_operator_and;\
Function UInt4_operator_xor;\
Function UInt4_operator_lsh;\
Function UInt4_operator_rsh;\
Function UInt4_operator_orasg;\
Function UInt4_operator_andasg;\
Function UInt4_operator_xorasg;\
Function UInt4_operator_lshasg;\
Function UInt4_operator_rhsasg;

#define UInt4_operator_list\
std::pair{ "operator[](i32)", &UInt4_operator_index_Int},\
std::pair{ "operator[](u32)", &UInt4_operator_index_UInt},\
std::pair{ "operator+(u32x4)", &UInt4_operator_add},\
std::pair{ "operator-(u32x4)", &UInt4_operator_sub},\
std::pair{ "operator*(u32x4)", &UInt4_operator_mul},\
std::pair{ "operator/(u32x4)", &UInt4_operator_div},\
std::pair{ "operator%(u32x4)", &UInt4_operator_mod},\
std::pair{ "operator+=(u32x4)", &UInt4_operator_addasg},\
std::pair{ "operator-=(u32x4)", &UInt4_operator_subasg},\
std::pair{ "operator*=(u32x4)", &UInt4_operator_mulasg},\
std::pair{ "operator/=(u32x4)", &UInt4_operator_divasg},\
std::pair{ "operator<(u32x4)", &UInt4_operator_lt},\
std::pair{ "operator<=(u32x4)", &UInt4_operator_lte},\
std::pair{ "operator>(u32x4)", &UInt4_operator_gt},\
std::pair{ "operator>=(u32x4)", &UInt4_operator_gte},\
std::pair{ "operator==(u32x4)", &UInt4_operator_eq},\
std::pair{ "operator!=(u32x4)", &UInt4_operator_neq},\
std::pair{ "operator|", &UInt4_operator_or},\
std::pair{ "operator&", &UInt4_operator_and},\
std::pair{ "operator^", &UInt4_operator_xor},\
std::pair{ "operator<<", &UInt4_operator_lsh},\
std::pair{ "operator>>", &UInt4_operator_rsh},\
std::pair{ "operator|=", &UInt4_operator_orasg},\
std::pair{ "operator&=", &UInt4_operator_andasg},\
std::pair{ "operator^=", &UInt4_operator_xorasg},\
std::pair{ "operator<<=", &UInt4_operator_lshasg},\
std::pair{ "operator>>=", &UInt4_operator_rhsasg}

#define DECL_Int_ctors\
extern Function Int_convert_Float\
extern Function Int_convert_UInt\
extern Function Int_ctor_Int

#define DEF_Int_ctors\
Function Int_convert_Float\
Function Int_convert_UInt\
Function Int_ctor_Int

#define Int_ctor_list\
std::pair{ "i32"_c, &Int_convert_Float },\
std::pair{ "i32(f32)"_c, &Int_convert_Float },\
std::pair{ "i32"_c, &Int_convert_UInt },\
std::pair{ "i32(u32)"_c, &Int_convert_UInt },\
std::pair{ "i32"_c, &Int_ctor_Int},\
std::pair{ "i32(i32)"_c, &Int_ctor_Int}

#define DECL_Int_operators\
extern Function Int_operator_index_Int;\
extern Function Int_operator_index_UInt;\
extern Function Int_operator_add;\
extern Function Int_operator_sub;\
extern Function Int_operator_mul;\
extern Function Int_operator_div;\
extern Function Int_operator_mod;\
extern Function Int_operator_addasg;\
extern Function Int_operator_subasg;\
extern Function Int_operator_mulasg;\
extern Function Int_operator_divasg;\
extern Function Int_operator_lt;\
extern Function Int_operator_lte;\
extern Function Int_operator_gt;\
extern Function Int_operator_gte;\
extern Function Int_operator_eq;\
extern Function Int_operator_neq;\
extern Function Int_operator_or;\
extern Function Int_operator_and;\
extern Function Int_operator_xor;\
extern Function Int_operator_lsh;\
extern Function Int_operator_rsh;\
extern Function Int_operator_orasg;\
extern Function Int_operator_andasg;\
extern Function Int_operator_xorasg;\
extern Function Int_operator_lshasg;\
extern Function Int_operator_rhsasg;

#define DEF_Int_operators\
Function Int_operator_index_Int;\
Function Int_operator_index_UInt;\
Function Int_operator_add;\
Function Int_operator_sub;\
Function Int_operator_mul;\
Function Int_operator_div;\
Function Int_operator_mod;\
Function Int_operator_addasg;\
Function Int_operator_subasg;\
Function Int_operator_mulasg;\
Function Int_operator_divasg;\
Function Int_operator_lt;\
Function Int_operator_lte;\
Function Int_operator_gt;\
Function Int_operator_gte;\
Function Int_operator_eq;\
Function Int_operator_neq;\
Function Int_operator_or;\
Function Int_operator_and;\
Function Int_operator_xor;\
Function Int_operator_lsh;\
Function Int_operator_rsh;\
Function Int_operator_orasg;\
Function Int_operator_andasg;\
Function Int_operator_xorasg;\
Function Int_operator_lshasg;\
Function Int_operator_rhsasg;

#define Int_operator_list\
std::pair{ "operator[](i32)", &Int_operator_index_Int},\
std::pair{ "operator[](u32)", &Int_operator_index_UInt},\
std::pair{ "operator+(i32)", &Int_operator_add},\
std::pair{ "operator-(i32)", &Int_operator_sub},\
std::pair{ "operator*(i32)", &Int_operator_mul},\
std::pair{ "operator/(i32)", &Int_operator_div},\
std::pair{ "operator%(i32)", &Int_operator_mod},\
std::pair{ "operator+=(i32)", &Int_operator_addasg},\
std::pair{ "operator-=(i32)", &Int_operator_subasg},\
std::pair{ "operator*=(i32)", &Int_operator_mulasg},\
std::pair{ "operator/=(i32)", &Int_operator_divasg},\
std::pair{ "operator<(i32)", &Int_operator_lt},\
std::pair{ "operator<=(i32)", &Int_operator_lte},\
std::pair{ "operator>(i32)", &Int_operator_gt},\
std::pair{ "operator>=(i32)", &Int_operator_gte},\
std::pair{ "operator==(i32)", &Int_operator_eq},\
std::pair{ "operator!=(i32)", &Int_operator_neq},\
std::pair{ "operator|", &Int_operator_or},\
std::pair{ "operator&", &Int_operator_and},\
std::pair{ "operator^", &Int_operator_xor},\
std::pair{ "operator<<", &Int_operator_lsh},\
std::pair{ "operator>>", &Int_operator_rsh},\
std::pair{ "operator|=", &Int_operator_orasg},\
std::pair{ "operator&=", &Int_operator_andasg},\
std::pair{ "operator^=", &Int_operator_xorasg},\
std::pair{ "operator<<=", &Int_operator_lshasg},\
std::pair{ "operator>>=", &Int_operator_rhsasg}

#define DECL_Int2_ctors\
extern Function Int2_convert_Float2\
extern Function Int2_splat_Float\
extern Function Int2_convert_UInt2\
extern Function Int2_splat_UInt\
extern Function Int2_convert_Int2\
extern Function Int2_splat_Int\
extern Function Int2_ctor_Int_Int

#define DEF_Int2_ctors\
Function Int2_convert_Float2\
Function Int2_splat_Float\
Function Int2_convert_UInt2\
Function Int2_splat_UInt\
Function Int2_convert_Int2\
Function Int2_splat_Int\
Function Int2_ctor_Int_Int

#define Int2_ctor_list\
std::pair{ "i32x2"_c, &Int2_convert_Float2 },\
std::pair{ "i32x2(f32x2)"_c, &Int2_convert_Float2 },\
std::pair{ "i32x2"_c, &Int2_splat_Float },\
std::pair{ "i32x2(f32)"_c, &Int2_splat_Float },\
std::pair{ "i32x2"_c, &Int2_convert_UInt2 },\
std::pair{ "i32x2(u32x2)"_c, &Int2_convert_UInt2 },\
std::pair{ "i32x2"_c, &Int2_splat_UInt },\
std::pair{ "i32x2(u32)"_c, &Int2_splat_UInt },\
std::pair{ "i32x2"_c, &Int2_convert_Int2 },\
std::pair{ "i32x2(i32x2)"_c, &Int2_convert_Int2 },\
std::pair{ "i32x2"_c, &Int2_splat_Int },\
std::pair{ "i32x2(i32)"_c, &Int2_splat_Int },\
std::pair{ "i32x2"_c, &Int2_ctor_Int_Int},\
std::pair{ "i32x2(i32,i32)"_c, &Int2_ctor_Int_Int}

#define DECL_Int2_operators\
extern Function Int2_operator_index_Int;\
extern Function Int2_operator_index_UInt;\
extern Function Int2_operator_add;\
extern Function Int2_operator_sub;\
extern Function Int2_operator_mul;\
extern Function Int2_operator_div;\
extern Function Int2_operator_mod;\
extern Function Int2_operator_addasg;\
extern Function Int2_operator_subasg;\
extern Function Int2_operator_mulasg;\
extern Function Int2_operator_divasg;\
extern Function Int2_operator_lt;\
extern Function Int2_operator_lte;\
extern Function Int2_operator_gt;\
extern Function Int2_operator_gte;\
extern Function Int2_operator_eq;\
extern Function Int2_operator_neq;\
extern Function Int2_operator_or;\
extern Function Int2_operator_and;\
extern Function Int2_operator_xor;\
extern Function Int2_operator_lsh;\
extern Function Int2_operator_rsh;\
extern Function Int2_operator_orasg;\
extern Function Int2_operator_andasg;\
extern Function Int2_operator_xorasg;\
extern Function Int2_operator_lshasg;\
extern Function Int2_operator_rhsasg;

#define DEF_Int2_operators\
Function Int2_operator_index_Int;\
Function Int2_operator_index_UInt;\
Function Int2_operator_add;\
Function Int2_operator_sub;\
Function Int2_operator_mul;\
Function Int2_operator_div;\
Function Int2_operator_mod;\
Function Int2_operator_addasg;\
Function Int2_operator_subasg;\
Function Int2_operator_mulasg;\
Function Int2_operator_divasg;\
Function Int2_operator_lt;\
Function Int2_operator_lte;\
Function Int2_operator_gt;\
Function Int2_operator_gte;\
Function Int2_operator_eq;\
Function Int2_operator_neq;\
Function Int2_operator_or;\
Function Int2_operator_and;\
Function Int2_operator_xor;\
Function Int2_operator_lsh;\
Function Int2_operator_rsh;\
Function Int2_operator_orasg;\
Function Int2_operator_andasg;\
Function Int2_operator_xorasg;\
Function Int2_operator_lshasg;\
Function Int2_operator_rhsasg;

#define Int2_operator_list\
std::pair{ "operator[](i32)", &Int2_operator_index_Int},\
std::pair{ "operator[](u32)", &Int2_operator_index_UInt},\
std::pair{ "operator+(i32x2)", &Int2_operator_add},\
std::pair{ "operator-(i32x2)", &Int2_operator_sub},\
std::pair{ "operator*(i32x2)", &Int2_operator_mul},\
std::pair{ "operator/(i32x2)", &Int2_operator_div},\
std::pair{ "operator%(i32x2)", &Int2_operator_mod},\
std::pair{ "operator+=(i32x2)", &Int2_operator_addasg},\
std::pair{ "operator-=(i32x2)", &Int2_operator_subasg},\
std::pair{ "operator*=(i32x2)", &Int2_operator_mulasg},\
std::pair{ "operator/=(i32x2)", &Int2_operator_divasg},\
std::pair{ "operator<(i32x2)", &Int2_operator_lt},\
std::pair{ "operator<=(i32x2)", &Int2_operator_lte},\
std::pair{ "operator>(i32x2)", &Int2_operator_gt},\
std::pair{ "operator>=(i32x2)", &Int2_operator_gte},\
std::pair{ "operator==(i32x2)", &Int2_operator_eq},\
std::pair{ "operator!=(i32x2)", &Int2_operator_neq},\
std::pair{ "operator|", &Int2_operator_or},\
std::pair{ "operator&", &Int2_operator_and},\
std::pair{ "operator^", &Int2_operator_xor},\
std::pair{ "operator<<", &Int2_operator_lsh},\
std::pair{ "operator>>", &Int2_operator_rsh},\
std::pair{ "operator|=", &Int2_operator_orasg},\
std::pair{ "operator&=", &Int2_operator_andasg},\
std::pair{ "operator^=", &Int2_operator_xorasg},\
std::pair{ "operator<<=", &Int2_operator_lshasg},\
std::pair{ "operator>>=", &Int2_operator_rhsasg}

#define DECL_Int3_ctors\
extern Function Int3_convert_Float3\
extern Function Int3_splat_Float\
extern Function Int3_convert_UInt3\
extern Function Int3_splat_UInt\
extern Function Int3_convert_Int3\
extern Function Int3_splat_Int\
extern Function Int3_ctor_Int_Int_Int\
extern Function Int3_ctor_Int2_Int\
extern Function Int3_ctor_Int_Int2

#define DEF_Int3_ctors\
Function Int3_convert_Float3\
Function Int3_splat_Float\
Function Int3_convert_UInt3\
Function Int3_splat_UInt\
Function Int3_convert_Int3\
Function Int3_splat_Int\
Function Int3_ctor_Int_Int_Int\
Function Int3_ctor_Int2_Int\
Function Int3_ctor_Int_Int2

#define Int3_ctor_list\
std::pair{ "i32x3"_c, &Int3_convert_Float3 },\
std::pair{ "i32x3(f32x3)"_c, &Int3_convert_Float3 },\
std::pair{ "i32x3"_c, &Int3_splat_Float },\
std::pair{ "i32x3(f32)"_c, &Int3_splat_Float },\
std::pair{ "i32x3"_c, &Int3_convert_UInt3 },\
std::pair{ "i32x3(u32x3)"_c, &Int3_convert_UInt3 },\
std::pair{ "i32x3"_c, &Int3_splat_UInt },\
std::pair{ "i32x3(u32)"_c, &Int3_splat_UInt },\
std::pair{ "i32x3"_c, &Int3_convert_Int3 },\
std::pair{ "i32x3(i32x3)"_c, &Int3_convert_Int3 },\
std::pair{ "i32x3"_c, &Int3_splat_Int },\
std::pair{ "i32x3(i32)"_c, &Int3_splat_Int },\
std::pair{ "i32x3"_c, &Int3_ctor_Int_Int_Int},\
std::pair{ "i32x3(i32,i32,i32)"_c, &Int3_ctor_Int_Int_Int},\
std::pair{ "i32x3"_c, &Int3_ctor_Int2_Int},\
std::pair{ "i32x3(i32x2,i32)"_c, &Int3_ctor_Int2_Int},\
std::pair{ "i32x3"_c, &Int3_ctor_Int_Int2},\
std::pair{ "i32x3(i32,i32x2)"_c, &Int3_ctor_Int_Int2}

#define DECL_Int3_operators\
extern Function Int3_operator_index_Int;\
extern Function Int3_operator_index_UInt;\
extern Function Int3_operator_add;\
extern Function Int3_operator_sub;\
extern Function Int3_operator_mul;\
extern Function Int3_operator_div;\
extern Function Int3_operator_mod;\
extern Function Int3_operator_addasg;\
extern Function Int3_operator_subasg;\
extern Function Int3_operator_mulasg;\
extern Function Int3_operator_divasg;\
extern Function Int3_operator_lt;\
extern Function Int3_operator_lte;\
extern Function Int3_operator_gt;\
extern Function Int3_operator_gte;\
extern Function Int3_operator_eq;\
extern Function Int3_operator_neq;\
extern Function Int3_operator_or;\
extern Function Int3_operator_and;\
extern Function Int3_operator_xor;\
extern Function Int3_operator_lsh;\
extern Function Int3_operator_rsh;\
extern Function Int3_operator_orasg;\
extern Function Int3_operator_andasg;\
extern Function Int3_operator_xorasg;\
extern Function Int3_operator_lshasg;\
extern Function Int3_operator_rhsasg;

#define DEF_Int3_operators\
Function Int3_operator_index_Int;\
Function Int3_operator_index_UInt;\
Function Int3_operator_add;\
Function Int3_operator_sub;\
Function Int3_operator_mul;\
Function Int3_operator_div;\
Function Int3_operator_mod;\
Function Int3_operator_addasg;\
Function Int3_operator_subasg;\
Function Int3_operator_mulasg;\
Function Int3_operator_divasg;\
Function Int3_operator_lt;\
Function Int3_operator_lte;\
Function Int3_operator_gt;\
Function Int3_operator_gte;\
Function Int3_operator_eq;\
Function Int3_operator_neq;\
Function Int3_operator_or;\
Function Int3_operator_and;\
Function Int3_operator_xor;\
Function Int3_operator_lsh;\
Function Int3_operator_rsh;\
Function Int3_operator_orasg;\
Function Int3_operator_andasg;\
Function Int3_operator_xorasg;\
Function Int3_operator_lshasg;\
Function Int3_operator_rhsasg;

#define Int3_operator_list\
std::pair{ "operator[](i32)", &Int3_operator_index_Int},\
std::pair{ "operator[](u32)", &Int3_operator_index_UInt},\
std::pair{ "operator+(i32x3)", &Int3_operator_add},\
std::pair{ "operator-(i32x3)", &Int3_operator_sub},\
std::pair{ "operator*(i32x3)", &Int3_operator_mul},\
std::pair{ "operator/(i32x3)", &Int3_operator_div},\
std::pair{ "operator%(i32x3)", &Int3_operator_mod},\
std::pair{ "operator+=(i32x3)", &Int3_operator_addasg},\
std::pair{ "operator-=(i32x3)", &Int3_operator_subasg},\
std::pair{ "operator*=(i32x3)", &Int3_operator_mulasg},\
std::pair{ "operator/=(i32x3)", &Int3_operator_divasg},\
std::pair{ "operator<(i32x3)", &Int3_operator_lt},\
std::pair{ "operator<=(i32x3)", &Int3_operator_lte},\
std::pair{ "operator>(i32x3)", &Int3_operator_gt},\
std::pair{ "operator>=(i32x3)", &Int3_operator_gte},\
std::pair{ "operator==(i32x3)", &Int3_operator_eq},\
std::pair{ "operator!=(i32x3)", &Int3_operator_neq},\
std::pair{ "operator|", &Int3_operator_or},\
std::pair{ "operator&", &Int3_operator_and},\
std::pair{ "operator^", &Int3_operator_xor},\
std::pair{ "operator<<", &Int3_operator_lsh},\
std::pair{ "operator>>", &Int3_operator_rsh},\
std::pair{ "operator|=", &Int3_operator_orasg},\
std::pair{ "operator&=", &Int3_operator_andasg},\
std::pair{ "operator^=", &Int3_operator_xorasg},\
std::pair{ "operator<<=", &Int3_operator_lshasg},\
std::pair{ "operator>>=", &Int3_operator_rhsasg}

#define DECL_Int4_ctors\
extern Function Int4_convert_Float4\
extern Function Int4_splat_Float\
extern Function Int4_convert_UInt4\
extern Function Int4_splat_UInt\
extern Function Int4_convert_Int4\
extern Function Int4_splat_Int\
extern Function Int4_ctor_Int_Int_Int_Int\
extern Function Int4_ctor_Int2_Int_Int\
extern Function Int4_ctor_Int_Int2_Int\
extern Function Int4_ctor_Int_Int_Int2\
extern Function Int4_ctor_Int3_Int\
extern Function Int4_ctor_Int_Int3

#define DEF_Int4_ctors\
Function Int4_convert_Float4\
Function Int4_splat_Float\
Function Int4_convert_UInt4\
Function Int4_splat_UInt\
Function Int4_convert_Int4\
Function Int4_splat_Int\
Function Int4_ctor_Int_Int_Int_Int\
Function Int4_ctor_Int2_Int_Int\
Function Int4_ctor_Int_Int2_Int\
Function Int4_ctor_Int_Int_Int2\
Function Int4_ctor_Int3_Int\
Function Int4_ctor_Int_Int3

#define Int4_ctor_list\
std::pair{ "i32x4"_c, &Int4_convert_Float4 },\
std::pair{ "i32x4(f32x4)"_c, &Int4_convert_Float4 },\
std::pair{ "i32x4"_c, &Int4_splat_Float },\
std::pair{ "i32x4(f32)"_c, &Int4_splat_Float },\
std::pair{ "i32x4"_c, &Int4_convert_UInt4 },\
std::pair{ "i32x4(u32x4)"_c, &Int4_convert_UInt4 },\
std::pair{ "i32x4"_c, &Int4_splat_UInt },\
std::pair{ "i32x4(u32)"_c, &Int4_splat_UInt },\
std::pair{ "i32x4"_c, &Int4_convert_Int4 },\
std::pair{ "i32x4(i32x4)"_c, &Int4_convert_Int4 },\
std::pair{ "i32x4"_c, &Int4_splat_Int },\
std::pair{ "i32x4(i32)"_c, &Int4_splat_Int },\
std::pair{ "i32x4"_c, &Int4_ctor_Int_Int_Int_Int},\
std::pair{ "i32x4(i32,i32,i32,i32)"_c, &Int4_ctor_Int_Int_Int_Int},\
std::pair{ "i32x4"_c, &Int4_ctor_Int2_Int_Int},\
std::pair{ "i32x4(i32x2,i32,i32)"_c, &Int4_ctor_Int2_Int_Int},\
std::pair{ "i32x4"_c, &Int4_ctor_Int_Int2_Int},\
std::pair{ "i32x4(i32,i32x2,i32)"_c, &Int4_ctor_Int_Int2_Int},\
std::pair{ "i32x4"_c, &Int4_ctor_Int_Int_Int2},\
std::pair{ "i32x4(i32,i32,i32x2)"_c, &Int4_ctor_Int_Int_Int2},\
std::pair{ "i32x4"_c, &Int4_ctor_Int3_Int},\
std::pair{ "i32x4(i32x3,i32)"_c, &Int4_ctor_Int3_Int},\
std::pair{ "i32x4"_c, &Int4_ctor_Int_Int3},\
std::pair{ "i32x4(i32,i32x3)"_c, &Int4_ctor_Int_Int3}

#define DECL_Int4_operators\
extern Function Int4_operator_index_Int;\
extern Function Int4_operator_index_UInt;\
extern Function Int4_operator_add;\
extern Function Int4_operator_sub;\
extern Function Int4_operator_mul;\
extern Function Int4_operator_div;\
extern Function Int4_operator_mod;\
extern Function Int4_operator_addasg;\
extern Function Int4_operator_subasg;\
extern Function Int4_operator_mulasg;\
extern Function Int4_operator_divasg;\
extern Function Int4_operator_lt;\
extern Function Int4_operator_lte;\
extern Function Int4_operator_gt;\
extern Function Int4_operator_gte;\
extern Function Int4_operator_eq;\
extern Function Int4_operator_neq;\
extern Function Int4_operator_or;\
extern Function Int4_operator_and;\
extern Function Int4_operator_xor;\
extern Function Int4_operator_lsh;\
extern Function Int4_operator_rsh;\
extern Function Int4_operator_orasg;\
extern Function Int4_operator_andasg;\
extern Function Int4_operator_xorasg;\
extern Function Int4_operator_lshasg;\
extern Function Int4_operator_rhsasg;

#define DEF_Int4_operators\
Function Int4_operator_index_Int;\
Function Int4_operator_index_UInt;\
Function Int4_operator_add;\
Function Int4_operator_sub;\
Function Int4_operator_mul;\
Function Int4_operator_div;\
Function Int4_operator_mod;\
Function Int4_operator_addasg;\
Function Int4_operator_subasg;\
Function Int4_operator_mulasg;\
Function Int4_operator_divasg;\
Function Int4_operator_lt;\
Function Int4_operator_lte;\
Function Int4_operator_gt;\
Function Int4_operator_gte;\
Function Int4_operator_eq;\
Function Int4_operator_neq;\
Function Int4_operator_or;\
Function Int4_operator_and;\
Function Int4_operator_xor;\
Function Int4_operator_lsh;\
Function Int4_operator_rsh;\
Function Int4_operator_orasg;\
Function Int4_operator_andasg;\
Function Int4_operator_xorasg;\
Function Int4_operator_lshasg;\
Function Int4_operator_rhsasg;

#define Int4_operator_list\
std::pair{ "operator[](i32)", &Int4_operator_index_Int},\
std::pair{ "operator[](u32)", &Int4_operator_index_UInt},\
std::pair{ "operator+(i32x4)", &Int4_operator_add},\
std::pair{ "operator-(i32x4)", &Int4_operator_sub},\
std::pair{ "operator*(i32x4)", &Int4_operator_mul},\
std::pair{ "operator/(i32x4)", &Int4_operator_div},\
std::pair{ "operator%(i32x4)", &Int4_operator_mod},\
std::pair{ "operator+=(i32x4)", &Int4_operator_addasg},\
std::pair{ "operator-=(i32x4)", &Int4_operator_subasg},\
std::pair{ "operator*=(i32x4)", &Int4_operator_mulasg},\
std::pair{ "operator/=(i32x4)", &Int4_operator_divasg},\
std::pair{ "operator<(i32x4)", &Int4_operator_lt},\
std::pair{ "operator<=(i32x4)", &Int4_operator_lte},\
std::pair{ "operator>(i32x4)", &Int4_operator_gt},\
std::pair{ "operator>=(i32x4)", &Int4_operator_gte},\
std::pair{ "operator==(i32x4)", &Int4_operator_eq},\
std::pair{ "operator!=(i32x4)", &Int4_operator_neq},\
std::pair{ "operator|", &Int4_operator_or},\
std::pair{ "operator&", &Int4_operator_and},\
std::pair{ "operator^", &Int4_operator_xor},\
std::pair{ "operator<<", &Int4_operator_lsh},\
std::pair{ "operator>>", &Int4_operator_rsh},\
std::pair{ "operator|=", &Int4_operator_orasg},\
std::pair{ "operator&=", &Int4_operator_andasg},\
std::pair{ "operator^=", &Int4_operator_xorasg},\
std::pair{ "operator<<=", &Int4_operator_lshasg},\
std::pair{ "operator>>=", &Int4_operator_rhsasg}

#define DECL_Bool_ctors\
extern Function Bool_convert_UInt\
extern Function Bool_convert_Int\
extern Function Bool_ctor_Bool

#define DEF_Bool_ctors\
Function Bool_convert_UInt\
Function Bool_convert_Int\
Function Bool_ctor_Bool

#define Bool_ctor_list\
std::pair{ "b8"_c, &Bool_convert_UInt },\
std::pair{ "b8(u32)"_c, &Bool_convert_UInt },\
std::pair{ "b8"_c, &Bool_convert_Int },\
std::pair{ "b8(i32)"_c, &Bool_convert_Int },\
std::pair{ "b8"_c, &Bool_ctor_Bool},\
std::pair{ "b8(b8)"_c, &Bool_ctor_Bool}

#define DECL_Bool_operators\
extern Function Bool_operator_index_Int;\
extern Function Bool_operator_index_UInt;\
extern Function Bool_operator_oror;\
extern Function Bool_operator_andand;\
extern Function Bool_operator_eq;\
extern Function Bool_operator_neq;

#define DEF_Bool_operators\
Function Bool_operator_index_Int;\
Function Bool_operator_index_UInt;\
Function Bool_operator_oror;\
Function Bool_operator_andand;\
Function Bool_operator_eq;\
Function Bool_operator_neq;

#define Bool_operator_list\
std::pair{ "operator[](i32)", &Bool_operator_index_Int},\
std::pair{ "operator[](u32)", &Bool_operator_index_UInt},\
std::pair{ "operator||(b8)", &Bool_operator_oror},\
std::pair{ "operator&&(b8)", &Bool_operator_andand},\
std::pair{ "operator==(b8)", &Bool_operator_eq},\
std::pair{ "operator!=(b8)", &Bool_operator_neq}

#define DECL_Bool2_ctors\
extern Function Bool2_convert_UInt2\
extern Function Bool2_splat_UInt\
extern Function Bool2_convert_Int2\
extern Function Bool2_splat_Int\
extern Function Bool2_ctor_Bool_Bool

#define DEF_Bool2_ctors\
Function Bool2_convert_UInt2\
Function Bool2_splat_UInt\
Function Bool2_convert_Int2\
Function Bool2_splat_Int\
Function Bool2_ctor_Bool_Bool

#define Bool2_ctor_list\
std::pair{ "b8x2"_c, &Bool2_convert_UInt2 },\
std::pair{ "b8x2(u32x2)"_c, &Bool2_convert_UInt2 },\
std::pair{ "b8x2"_c, &Bool2_splat_UInt },\
std::pair{ "b8x2(u32)"_c, &Bool2_splat_UInt },\
std::pair{ "b8x2"_c, &Bool2_convert_Int2 },\
std::pair{ "b8x2(i32x2)"_c, &Bool2_convert_Int2 },\
std::pair{ "b8x2"_c, &Bool2_splat_Int },\
std::pair{ "b8x2(i32)"_c, &Bool2_splat_Int },\
std::pair{ "b8x2"_c, &Bool2_ctor_Bool_Bool},\
std::pair{ "b8x2(b8,b8)"_c, &Bool2_ctor_Bool_Bool}

#define DECL_Bool2_operators\
extern Function Bool2_operator_index_Int;\
extern Function Bool2_operator_index_UInt;\
extern Function Bool2_operator_oror;\
extern Function Bool2_operator_andand;\
extern Function Bool2_operator_eq;\
extern Function Bool2_operator_neq;

#define DEF_Bool2_operators\
Function Bool2_operator_index_Int;\
Function Bool2_operator_index_UInt;\
Function Bool2_operator_oror;\
Function Bool2_operator_andand;\
Function Bool2_operator_eq;\
Function Bool2_operator_neq;

#define Bool2_operator_list\
std::pair{ "operator[](i32)", &Bool2_operator_index_Int},\
std::pair{ "operator[](u32)", &Bool2_operator_index_UInt},\
std::pair{ "operator||(b8x2)", &Bool2_operator_oror},\
std::pair{ "operator&&(b8x2)", &Bool2_operator_andand},\
std::pair{ "operator==(b8x2)", &Bool2_operator_eq},\
std::pair{ "operator!=(b8x2)", &Bool2_operator_neq}

#define DECL_Bool3_ctors\
extern Function Bool3_convert_UInt3\
extern Function Bool3_splat_UInt\
extern Function Bool3_convert_Int3\
extern Function Bool3_splat_Int\
extern Function Bool3_ctor_Bool_Bool_Bool\
extern Function Bool3_ctor_Bool2_Bool\
extern Function Bool3_ctor_Bool_Bool2

#define DEF_Bool3_ctors\
Function Bool3_convert_UInt3\
Function Bool3_splat_UInt\
Function Bool3_convert_Int3\
Function Bool3_splat_Int\
Function Bool3_ctor_Bool_Bool_Bool\
Function Bool3_ctor_Bool2_Bool\
Function Bool3_ctor_Bool_Bool2

#define Bool3_ctor_list\
std::pair{ "b8x3"_c, &Bool3_convert_UInt3 },\
std::pair{ "b8x3(u32x3)"_c, &Bool3_convert_UInt3 },\
std::pair{ "b8x3"_c, &Bool3_splat_UInt },\
std::pair{ "b8x3(u32)"_c, &Bool3_splat_UInt },\
std::pair{ "b8x3"_c, &Bool3_convert_Int3 },\
std::pair{ "b8x3(i32x3)"_c, &Bool3_convert_Int3 },\
std::pair{ "b8x3"_c, &Bool3_splat_Int },\
std::pair{ "b8x3(i32)"_c, &Bool3_splat_Int },\
std::pair{ "b8x3"_c, &Bool3_ctor_Bool_Bool_Bool},\
std::pair{ "b8x3(b8,b8,b8)"_c, &Bool3_ctor_Bool_Bool_Bool},\
std::pair{ "b8x3"_c, &Bool3_ctor_Bool2_Bool},\
std::pair{ "b8x3(b8x2,b8)"_c, &Bool3_ctor_Bool2_Bool},\
std::pair{ "b8x3"_c, &Bool3_ctor_Bool_Bool2},\
std::pair{ "b8x3(b8,b8x2)"_c, &Bool3_ctor_Bool_Bool2}

#define DECL_Bool3_operators\
extern Function Bool3_operator_index_Int;\
extern Function Bool3_operator_index_UInt;\
extern Function Bool3_operator_oror;\
extern Function Bool3_operator_andand;\
extern Function Bool3_operator_eq;\
extern Function Bool3_operator_neq;

#define DEF_Bool3_operators\
Function Bool3_operator_index_Int;\
Function Bool3_operator_index_UInt;\
Function Bool3_operator_oror;\
Function Bool3_operator_andand;\
Function Bool3_operator_eq;\
Function Bool3_operator_neq;

#define Bool3_operator_list\
std::pair{ "operator[](i32)", &Bool3_operator_index_Int},\
std::pair{ "operator[](u32)", &Bool3_operator_index_UInt},\
std::pair{ "operator||(b8x3)", &Bool3_operator_oror},\
std::pair{ "operator&&(b8x3)", &Bool3_operator_andand},\
std::pair{ "operator==(b8x3)", &Bool3_operator_eq},\
std::pair{ "operator!=(b8x3)", &Bool3_operator_neq}

#define DECL_Bool4_ctors\
extern Function Bool4_convert_UInt4\
extern Function Bool4_splat_UInt\
extern Function Bool4_convert_Int4\
extern Function Bool4_splat_Int\
extern Function Bool4_ctor_Bool_Bool_Bool_Bool\
extern Function Bool4_ctor_Bool2_Bool_Bool\
extern Function Bool4_ctor_Bool_Bool2_Bool\
extern Function Bool4_ctor_Bool_Bool_Bool2\
extern Function Bool4_ctor_Bool3_Bool\
extern Function Bool4_ctor_Bool_Bool3

#define DEF_Bool4_ctors\
Function Bool4_convert_UInt4\
Function Bool4_splat_UInt\
Function Bool4_convert_Int4\
Function Bool4_splat_Int\
Function Bool4_ctor_Bool_Bool_Bool_Bool\
Function Bool4_ctor_Bool2_Bool_Bool\
Function Bool4_ctor_Bool_Bool2_Bool\
Function Bool4_ctor_Bool_Bool_Bool2\
Function Bool4_ctor_Bool3_Bool\
Function Bool4_ctor_Bool_Bool3

#define Bool4_ctor_list\
std::pair{ "b8x4"_c, &Bool4_convert_UInt4 },\
std::pair{ "b8x4(u32x4)"_c, &Bool4_convert_UInt4 },\
std::pair{ "b8x4"_c, &Bool4_splat_UInt },\
std::pair{ "b8x4(u32)"_c, &Bool4_splat_UInt },\
std::pair{ "b8x4"_c, &Bool4_convert_Int4 },\
std::pair{ "b8x4(i32x4)"_c, &Bool4_convert_Int4 },\
std::pair{ "b8x4"_c, &Bool4_splat_Int },\
std::pair{ "b8x4(i32)"_c, &Bool4_splat_Int },\
std::pair{ "b8x4"_c, &Bool4_ctor_Bool_Bool_Bool_Bool},\
std::pair{ "b8x4(b8,b8,b8,b8)"_c, &Bool4_ctor_Bool_Bool_Bool_Bool},\
std::pair{ "b8x4"_c, &Bool4_ctor_Bool2_Bool_Bool},\
std::pair{ "b8x4(b8x2,b8,b8)"_c, &Bool4_ctor_Bool2_Bool_Bool},\
std::pair{ "b8x4"_c, &Bool4_ctor_Bool_Bool2_Bool},\
std::pair{ "b8x4(b8,b8x2,b8)"_c, &Bool4_ctor_Bool_Bool2_Bool},\
std::pair{ "b8x4"_c, &Bool4_ctor_Bool_Bool_Bool2},\
std::pair{ "b8x4(b8,b8,b8x2)"_c, &Bool4_ctor_Bool_Bool_Bool2},\
std::pair{ "b8x4"_c, &Bool4_ctor_Bool3_Bool},\
std::pair{ "b8x4(b8x3,b8)"_c, &Bool4_ctor_Bool3_Bool},\
std::pair{ "b8x4"_c, &Bool4_ctor_Bool_Bool3},\
std::pair{ "b8x4(b8,b8x3)"_c, &Bool4_ctor_Bool_Bool3}

#define DECL_Bool4_operators\
extern Function Bool4_operator_index_Int;\
extern Function Bool4_operator_index_UInt;\
extern Function Bool4_operator_oror;\
extern Function Bool4_operator_andand;\
extern Function Bool4_operator_eq;\
extern Function Bool4_operator_neq;

#define DEF_Bool4_operators\
Function Bool4_operator_index_Int;\
Function Bool4_operator_index_UInt;\
Function Bool4_operator_oror;\
Function Bool4_operator_andand;\
Function Bool4_operator_eq;\
Function Bool4_operator_neq;

#define Bool4_operator_list\
std::pair{ "operator[](i32)", &Bool4_operator_index_Int},\
std::pair{ "operator[](u32)", &Bool4_operator_index_UInt},\
std::pair{ "operator||(b8x4)", &Bool4_operator_oror},\
std::pair{ "operator&&(b8x4)", &Bool4_operator_andand},\
std::pair{ "operator==(b8x4)", &Bool4_operator_eq},\
std::pair{ "operator!=(b8x4)", &Bool4_operator_neq}

