//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// pixelExportColor with UInt32x3, Int16
Variable PixelExportColor_UInt32x3_Int16_color;
Variable PixelExportColor_UInt32x3_Int16_index;
Function PixelExportColor_UInt32x3_Int16;
inline constexpr std::array PixelExportColor_UInt32x3_Int16_args = { &PixelExportColor_UInt32x3_Int16_color, &PixelExportColor_UInt32x3_Int16_index };

/// pixelExportColor with UInt32x3, UInt16
Variable PixelExportColor_UInt32x3_UInt16_color;
Variable PixelExportColor_UInt32x3_UInt16_index;
Function PixelExportColor_UInt32x3_UInt16;
inline constexpr std::array PixelExportColor_UInt32x3_UInt16_args = { &PixelExportColor_UInt32x3_UInt16_color, &PixelExportColor_UInt32x3_UInt16_index };

/// pixelExportColor with UInt32x4, Int32
Variable PixelExportColor_UInt32x4_Int32_color;
Variable PixelExportColor_UInt32x4_Int32_index;
Function PixelExportColor_UInt32x4_Int32;
inline constexpr std::array PixelExportColor_UInt32x4_Int32_args = { &PixelExportColor_UInt32x4_Int32_color, &PixelExportColor_UInt32x4_Int32_index };

/// pixelExportColor with UInt32x4, UInt32
Variable PixelExportColor_UInt32x4_UInt32_color;
Variable PixelExportColor_UInt32x4_UInt32_index;
Function PixelExportColor_UInt32x4_UInt32;
inline constexpr std::array PixelExportColor_UInt32x4_UInt32_args = { &PixelExportColor_UInt32x4_UInt32_color, &PixelExportColor_UInt32x4_UInt32_index };

/// pixelExportColor with UInt32x4, Int16
Variable PixelExportColor_UInt32x4_Int16_color;
Variable PixelExportColor_UInt32x4_Int16_index;
Function PixelExportColor_UInt32x4_Int16;
inline constexpr std::array PixelExportColor_UInt32x4_Int16_args = { &PixelExportColor_UInt32x4_Int16_color, &PixelExportColor_UInt32x4_Int16_index };

/// pixelExportColor with UInt32x4, UInt16
Variable PixelExportColor_UInt32x4_UInt16_color;
Variable PixelExportColor_UInt32x4_UInt16_index;
Function PixelExportColor_UInt32x4_UInt16;
inline constexpr std::array PixelExportColor_UInt32x4_UInt16_args = { &PixelExportColor_UInt32x4_UInt16_color, &PixelExportColor_UInt32x4_UInt16_index };

/// pixelExportColor with UInt16, Int32
Variable PixelExportColor_UInt16_Int32_color;
Variable PixelExportColor_UInt16_Int32_index;
Function PixelExportColor_UInt16_Int32;
inline constexpr std::array PixelExportColor_UInt16_Int32_args = { &PixelExportColor_UInt16_Int32_color, &PixelExportColor_UInt16_Int32_index };

/// pixelExportColor with UInt16, UInt32
Variable PixelExportColor_UInt16_UInt32_color;
Variable PixelExportColor_UInt16_UInt32_index;
Function PixelExportColor_UInt16_UInt32;
inline constexpr std::array PixelExportColor_UInt16_UInt32_args = { &PixelExportColor_UInt16_UInt32_color, &PixelExportColor_UInt16_UInt32_index };

/// pixelExportColor with UInt16, Int16
Variable PixelExportColor_UInt16_Int16_color;
Variable PixelExportColor_UInt16_Int16_index;
Function PixelExportColor_UInt16_Int16;
inline constexpr std::array PixelExportColor_UInt16_Int16_args = { &PixelExportColor_UInt16_Int16_color, &PixelExportColor_UInt16_Int16_index };

/// pixelExportColor with UInt16, UInt16
Variable PixelExportColor_UInt16_UInt16_color;
Variable PixelExportColor_UInt16_UInt16_index;
Function PixelExportColor_UInt16_UInt16;
inline constexpr std::array PixelExportColor_UInt16_UInt16_args = { &PixelExportColor_UInt16_UInt16_color, &PixelExportColor_UInt16_UInt16_index };

/// pixelExportColor with UInt16x2, Int32
Variable PixelExportColor_UInt16x2_Int32_color;
Variable PixelExportColor_UInt16x2_Int32_index;
Function PixelExportColor_UInt16x2_Int32;
inline constexpr std::array PixelExportColor_UInt16x2_Int32_args = { &PixelExportColor_UInt16x2_Int32_color, &PixelExportColor_UInt16x2_Int32_index };

/// pixelExportColor with UInt16x2, UInt32
Variable PixelExportColor_UInt16x2_UInt32_color;
Variable PixelExportColor_UInt16x2_UInt32_index;
Function PixelExportColor_UInt16x2_UInt32;
inline constexpr std::array PixelExportColor_UInt16x2_UInt32_args = { &PixelExportColor_UInt16x2_UInt32_color, &PixelExportColor_UInt16x2_UInt32_index };

/// pixelExportColor with UInt16x2, Int16
Variable PixelExportColor_UInt16x2_Int16_color;
Variable PixelExportColor_UInt16x2_Int16_index;
Function PixelExportColor_UInt16x2_Int16;
inline constexpr std::array PixelExportColor_UInt16x2_Int16_args = { &PixelExportColor_UInt16x2_Int16_color, &PixelExportColor_UInt16x2_Int16_index };

/// pixelExportColor with UInt16x2, UInt16
Variable PixelExportColor_UInt16x2_UInt16_color;
Variable PixelExportColor_UInt16x2_UInt16_index;
Function PixelExportColor_UInt16x2_UInt16;
inline constexpr std::array PixelExportColor_UInt16x2_UInt16_args = { &PixelExportColor_UInt16x2_UInt16_color, &PixelExportColor_UInt16x2_UInt16_index };

/// pixelExportColor with UInt16x3, Int32
Variable PixelExportColor_UInt16x3_Int32_color;
Variable PixelExportColor_UInt16x3_Int32_index;
Function PixelExportColor_UInt16x3_Int32;
inline constexpr std::array PixelExportColor_UInt16x3_Int32_args = { &PixelExportColor_UInt16x3_Int32_color, &PixelExportColor_UInt16x3_Int32_index };

/// pixelExportColor with UInt16x3, UInt32
Variable PixelExportColor_UInt16x3_UInt32_color;
Variable PixelExportColor_UInt16x3_UInt32_index;
Function PixelExportColor_UInt16x3_UInt32;
inline constexpr std::array PixelExportColor_UInt16x3_UInt32_args = { &PixelExportColor_UInt16x3_UInt32_color, &PixelExportColor_UInt16x3_UInt32_index };

/// pixelExportColor with UInt16x3, Int16
Variable PixelExportColor_UInt16x3_Int16_color;
Variable PixelExportColor_UInt16x3_Int16_index;
Function PixelExportColor_UInt16x3_Int16;
inline constexpr std::array PixelExportColor_UInt16x3_Int16_args = { &PixelExportColor_UInt16x3_Int16_color, &PixelExportColor_UInt16x3_Int16_index };

/// pixelExportColor with UInt16x3, UInt16
Variable PixelExportColor_UInt16x3_UInt16_color;
Variable PixelExportColor_UInt16x3_UInt16_index;
Function PixelExportColor_UInt16x3_UInt16;
inline constexpr std::array PixelExportColor_UInt16x3_UInt16_args = { &PixelExportColor_UInt16x3_UInt16_color, &PixelExportColor_UInt16x3_UInt16_index };

/// pixelExportColor with UInt16x4, Int32
Variable PixelExportColor_UInt16x4_Int32_color;
Variable PixelExportColor_UInt16x4_Int32_index;
Function PixelExportColor_UInt16x4_Int32;
inline constexpr std::array PixelExportColor_UInt16x4_Int32_args = { &PixelExportColor_UInt16x4_Int32_color, &PixelExportColor_UInt16x4_Int32_index };

/// pixelExportColor with UInt16x4, UInt32
Variable PixelExportColor_UInt16x4_UInt32_color;
Variable PixelExportColor_UInt16x4_UInt32_index;
Function PixelExportColor_UInt16x4_UInt32;
inline constexpr std::array PixelExportColor_UInt16x4_UInt32_args = { &PixelExportColor_UInt16x4_UInt32_color, &PixelExportColor_UInt16x4_UInt32_index };

/// pixelExportColor with UInt16x4, Int16
Variable PixelExportColor_UInt16x4_Int16_color;
Variable PixelExportColor_UInt16x4_Int16_index;
Function PixelExportColor_UInt16x4_Int16;
inline constexpr std::array PixelExportColor_UInt16x4_Int16_args = { &PixelExportColor_UInt16x4_Int16_color, &PixelExportColor_UInt16x4_Int16_index };

/// pixelExportColor with UInt16x4, UInt16
Variable PixelExportColor_UInt16x4_UInt16_color;
Variable PixelExportColor_UInt16x4_UInt16_index;
Function PixelExportColor_UInt16x4_UInt16;
inline constexpr std::array PixelExportColor_UInt16x4_UInt16_args = { &PixelExportColor_UInt16x4_UInt16_color, &PixelExportColor_UInt16x4_UInt16_index };

/// computeGetLocalThreadIndices
Function ComputeGetLocalThreadIndices;

/// computeGetGlobalThreadIndices
Function ComputeGetGlobalThreadIndices;

/// computeGetWorkgroupIndices
Function ComputeGetWorkgroupIndices;

/// computeGetWorkGroupDimensions
Function ComputeGetWorkGroupDimensions;

/// computeGetIndexInWorkgroup
Function ComputeGetIndexInWorkgroup;

/// subgroupGetId
Function SubgroupGetId;

/// subgroupGetSize
Function SubgroupGetSize;

/// subgroupGetNum
Function SubgroupGetNum;

/// subgroupGetThreadMask
Function SubgroupGetThreadMask;

/// subgroupGetThreadAndLowerMask
Function SubgroupGetThreadAndLowerMask;

/// subgroupGetLowerMask
Function SubgroupGetLowerMask;

/// subgroupGetThreadAndGreaterMask
Function SubgroupGetThreadAndGreaterMask;

/// subgroupGetGreaterMask
Function SubgroupGetGreaterMask;

/// subgroupGetFirstActiveThread
Function SubgroupGetFirstActiveThread;

/// subgroupBroadcastFirstActiveThread with Float32
Variable SubgroupBroadcastFirstActiveThread_Float32_value;
Function SubgroupBroadcastFirstActiveThread_Float32;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float32_args = { &SubgroupBroadcastFirstActiveThread_Float32_value };

/// subgroupBroadcastFirstActiveThread with Float32x2
Variable SubgroupBroadcastFirstActiveThread_Float32x2_value;
Function SubgroupBroadcastFirstActiveThread_Float32x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float32x2_args = { &SubgroupBroadcastFirstActiveThread_Float32x2_value };

/// subgroupBroadcastFirstActiveThread with Float32x3
Variable SubgroupBroadcastFirstActiveThread_Float32x3_value;
Function SubgroupBroadcastFirstActiveThread_Float32x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float32x3_args = { &SubgroupBroadcastFirstActiveThread_Float32x3_value };

/// subgroupBroadcastFirstActiveThread with Float32x4
Variable SubgroupBroadcastFirstActiveThread_Float32x4_value;
Function SubgroupBroadcastFirstActiveThread_Float32x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float32x4_args = { &SubgroupBroadcastFirstActiveThread_Float32x4_value };

/// subgroupBroadcastFirstActiveThread with Float16
Variable SubgroupBroadcastFirstActiveThread_Float16_value;
Function SubgroupBroadcastFirstActiveThread_Float16;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float16_args = { &SubgroupBroadcastFirstActiveThread_Float16_value };

/// subgroupBroadcastFirstActiveThread with Float16x2
Variable SubgroupBroadcastFirstActiveThread_Float16x2_value;
Function SubgroupBroadcastFirstActiveThread_Float16x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float16x2_args = { &SubgroupBroadcastFirstActiveThread_Float16x2_value };

/// subgroupBroadcastFirstActiveThread with Float16x3
Variable SubgroupBroadcastFirstActiveThread_Float16x3_value;
Function SubgroupBroadcastFirstActiveThread_Float16x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float16x3_args = { &SubgroupBroadcastFirstActiveThread_Float16x3_value };

/// subgroupBroadcastFirstActiveThread with Float16x4
Variable SubgroupBroadcastFirstActiveThread_Float16x4_value;
Function SubgroupBroadcastFirstActiveThread_Float16x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float16x4_args = { &SubgroupBroadcastFirstActiveThread_Float16x4_value };

/// subgroupBroadcastFirstActiveThread with Int32
Variable SubgroupBroadcastFirstActiveThread_Int32_value;
Function SubgroupBroadcastFirstActiveThread_Int32;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int32_args = { &SubgroupBroadcastFirstActiveThread_Int32_value };

/// subgroupBroadcastFirstActiveThread with Int32x2
Variable SubgroupBroadcastFirstActiveThread_Int32x2_value;
Function SubgroupBroadcastFirstActiveThread_Int32x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int32x2_args = { &SubgroupBroadcastFirstActiveThread_Int32x2_value };

/// subgroupBroadcastFirstActiveThread with Int32x3
Variable SubgroupBroadcastFirstActiveThread_Int32x3_value;
Function SubgroupBroadcastFirstActiveThread_Int32x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int32x3_args = { &SubgroupBroadcastFirstActiveThread_Int32x3_value };

/// subgroupBroadcastFirstActiveThread with Int32x4
Variable SubgroupBroadcastFirstActiveThread_Int32x4_value;
Function SubgroupBroadcastFirstActiveThread_Int32x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int32x4_args = { &SubgroupBroadcastFirstActiveThread_Int32x4_value };

/// subgroupBroadcastFirstActiveThread with Int16
Variable SubgroupBroadcastFirstActiveThread_Int16_value;
Function SubgroupBroadcastFirstActiveThread_Int16;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int16_args = { &SubgroupBroadcastFirstActiveThread_Int16_value };

/// subgroupBroadcastFirstActiveThread with Int16x2
Variable SubgroupBroadcastFirstActiveThread_Int16x2_value;
Function SubgroupBroadcastFirstActiveThread_Int16x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int16x2_args = { &SubgroupBroadcastFirstActiveThread_Int16x2_value };

/// subgroupBroadcastFirstActiveThread with Int16x3
Variable SubgroupBroadcastFirstActiveThread_Int16x3_value;
Function SubgroupBroadcastFirstActiveThread_Int16x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int16x3_args = { &SubgroupBroadcastFirstActiveThread_Int16x3_value };

/// subgroupBroadcastFirstActiveThread with Int16x4
Variable SubgroupBroadcastFirstActiveThread_Int16x4_value;
Function SubgroupBroadcastFirstActiveThread_Int16x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int16x4_args = { &SubgroupBroadcastFirstActiveThread_Int16x4_value };

/// subgroupBroadcastFirstActiveThread with UInt32
Variable SubgroupBroadcastFirstActiveThread_UInt32_value;
Function SubgroupBroadcastFirstActiveThread_UInt32;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt32_args = { &SubgroupBroadcastFirstActiveThread_UInt32_value };

/// subgroupBroadcastFirstActiveThread with UInt32x2
Variable SubgroupBroadcastFirstActiveThread_UInt32x2_value;
Function SubgroupBroadcastFirstActiveThread_UInt32x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt32x2_args = { &SubgroupBroadcastFirstActiveThread_UInt32x2_value };

/// subgroupBroadcastFirstActiveThread with UInt32x3
Variable SubgroupBroadcastFirstActiveThread_UInt32x3_value;
Function SubgroupBroadcastFirstActiveThread_UInt32x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt32x3_args = { &SubgroupBroadcastFirstActiveThread_UInt32x3_value };

/// subgroupBroadcastFirstActiveThread with UInt32x4
Variable SubgroupBroadcastFirstActiveThread_UInt32x4_value;
Function SubgroupBroadcastFirstActiveThread_UInt32x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt32x4_args = { &SubgroupBroadcastFirstActiveThread_UInt32x4_value };

/// subgroupBroadcastFirstActiveThread with UInt16
Variable SubgroupBroadcastFirstActiveThread_UInt16_value;
Function SubgroupBroadcastFirstActiveThread_UInt16;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt16_args = { &SubgroupBroadcastFirstActiveThread_UInt16_value };

/// subgroupBroadcastFirstActiveThread with UInt16x2
Variable SubgroupBroadcastFirstActiveThread_UInt16x2_value;
Function SubgroupBroadcastFirstActiveThread_UInt16x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt16x2_args = { &SubgroupBroadcastFirstActiveThread_UInt16x2_value };

/// subgroupBroadcastFirstActiveThread with UInt16x3
Variable SubgroupBroadcastFirstActiveThread_UInt16x3_value;
Function SubgroupBroadcastFirstActiveThread_UInt16x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt16x3_args = { &SubgroupBroadcastFirstActiveThread_UInt16x3_value };

/// subgroupBroadcastFirstActiveThread with UInt16x4
Variable SubgroupBroadcastFirstActiveThread_UInt16x4_value;
Function SubgroupBroadcastFirstActiveThread_UInt16x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt16x4_args = { &SubgroupBroadcastFirstActiveThread_UInt16x4_value };

/// subgroupBallot with Bool8
Variable SubgroupBallot_predicate;
Function SubgroupBallot;
inline constexpr std::array SubgroupBallot_args = { &SubgroupBallot_predicate };

/// subgroupInverseBallot with Bool8
Variable SubgroupInverseBallot_predicate;
Function SubgroupInverseBallot;
inline constexpr std::array SubgroupInverseBallot_args = { &SubgroupInverseBallot_predicate };

/// subgroupBallotBitCount with UInt32x4
Variable SubgroupBallotBitCount_mask;
Function SubgroupBallotBitCount;
inline constexpr std::array SubgroupBallotBitCount_args = { &SubgroupBallotBitCount_mask };

/// subgroupBallotFirstOne with UInt32x4
Variable SubgroupBallotFirstOne_mask;
Function SubgroupBallotFirstOne;
inline constexpr std::array SubgroupBallotFirstOne_args = { &SubgroupBallotFirstOne_mask };

/// subgroupBallotLastOne with UInt32x4
Variable SubgroupBallotLastOne_mask;
Function SubgroupBallotLastOne;
inline constexpr std::array SubgroupBallotLastOne_args = { &SubgroupBallotLastOne_mask };

/// subgroupBallotBit with UInt32x4, UInt32
Variable SubgroupBallotBit_mask;
Variable SubgroupBallotBit_index;
Function SubgroupBallotBit;
inline constexpr std::array SubgroupBallotBit_args = { &SubgroupBallotBit_mask, &SubgroupBallotBit_index };

/// subgroupSwapDiagonal with Float32
Variable SubgroupSwapDiagonal_Float32_value;
Function SubgroupSwapDiagonal_Float32;
inline constexpr std::array SubgroupSwapDiagonal_Float32_args = { &SubgroupSwapDiagonal_Float32_value };

/// subgroupSwapDiagonal with Float32x2
Variable SubgroupSwapDiagonal_Float32x2_value;
Function SubgroupSwapDiagonal_Float32x2;
inline constexpr std::array SubgroupSwapDiagonal_Float32x2_args = { &SubgroupSwapDiagonal_Float32x2_value };

/// subgroupSwapDiagonal with Float32x3
Variable SubgroupSwapDiagonal_Float32x3_value;
Function SubgroupSwapDiagonal_Float32x3;
inline constexpr std::array SubgroupSwapDiagonal_Float32x3_args = { &SubgroupSwapDiagonal_Float32x3_value };

/// subgroupSwapDiagonal with Float32x4
Variable SubgroupSwapDiagonal_Float32x4_value;
Function SubgroupSwapDiagonal_Float32x4;
inline constexpr std::array SubgroupSwapDiagonal_Float32x4_args = { &SubgroupSwapDiagonal_Float32x4_value };

/// subgroupSwapDiagonal with Float16
Variable SubgroupSwapDiagonal_Float16_value;
Function SubgroupSwapDiagonal_Float16;
inline constexpr std::array SubgroupSwapDiagonal_Float16_args = { &SubgroupSwapDiagonal_Float16_value };

/// subgroupSwapDiagonal with Float16x2
Variable SubgroupSwapDiagonal_Float16x2_value;
Function SubgroupSwapDiagonal_Float16x2;
inline constexpr std::array SubgroupSwapDiagonal_Float16x2_args = { &SubgroupSwapDiagonal_Float16x2_value };

/// subgroupSwapDiagonal with Float16x3
Variable SubgroupSwapDiagonal_Float16x3_value;
Function SubgroupSwapDiagonal_Float16x3;
inline constexpr std::array SubgroupSwapDiagonal_Float16x3_args = { &SubgroupSwapDiagonal_Float16x3_value };

/// subgroupSwapDiagonal with Float16x4
Variable SubgroupSwapDiagonal_Float16x4_value;
Function SubgroupSwapDiagonal_Float16x4;
inline constexpr std::array SubgroupSwapDiagonal_Float16x4_args = { &SubgroupSwapDiagonal_Float16x4_value };

/// subgroupSwapDiagonal with Int32
Variable SubgroupSwapDiagonal_Int32_value;
Function SubgroupSwapDiagonal_Int32;
inline constexpr std::array SubgroupSwapDiagonal_Int32_args = { &SubgroupSwapDiagonal_Int32_value };

/// subgroupSwapDiagonal with Int32x2
Variable SubgroupSwapDiagonal_Int32x2_value;
Function SubgroupSwapDiagonal_Int32x2;
inline constexpr std::array SubgroupSwapDiagonal_Int32x2_args = { &SubgroupSwapDiagonal_Int32x2_value };

/// subgroupSwapDiagonal with Int32x3
Variable SubgroupSwapDiagonal_Int32x3_value;
Function SubgroupSwapDiagonal_Int32x3;
inline constexpr std::array SubgroupSwapDiagonal_Int32x3_args = { &SubgroupSwapDiagonal_Int32x3_value };

/// subgroupSwapDiagonal with Int32x4
Variable SubgroupSwapDiagonal_Int32x4_value;
Function SubgroupSwapDiagonal_Int32x4;
inline constexpr std::array SubgroupSwapDiagonal_Int32x4_args = { &SubgroupSwapDiagonal_Int32x4_value };

/// subgroupSwapDiagonal with Int16
Variable SubgroupSwapDiagonal_Int16_value;
Function SubgroupSwapDiagonal_Int16;
inline constexpr std::array SubgroupSwapDiagonal_Int16_args = { &SubgroupSwapDiagonal_Int16_value };

/// subgroupSwapDiagonal with Int16x2
Variable SubgroupSwapDiagonal_Int16x2_value;
Function SubgroupSwapDiagonal_Int16x2;
inline constexpr std::array SubgroupSwapDiagonal_Int16x2_args = { &SubgroupSwapDiagonal_Int16x2_value };

/// subgroupSwapDiagonal with Int16x3
Variable SubgroupSwapDiagonal_Int16x3_value;
Function SubgroupSwapDiagonal_Int16x3;
inline constexpr std::array SubgroupSwapDiagonal_Int16x3_args = { &SubgroupSwapDiagonal_Int16x3_value };

/// subgroupSwapDiagonal with Int16x4
Variable SubgroupSwapDiagonal_Int16x4_value;
Function SubgroupSwapDiagonal_Int16x4;
inline constexpr std::array SubgroupSwapDiagonal_Int16x4_args = { &SubgroupSwapDiagonal_Int16x4_value };

/// subgroupSwapDiagonal with UInt32
Variable SubgroupSwapDiagonal_UInt32_value;
Function SubgroupSwapDiagonal_UInt32;
inline constexpr std::array SubgroupSwapDiagonal_UInt32_args = { &SubgroupSwapDiagonal_UInt32_value };

/// subgroupSwapDiagonal with UInt32x2
Variable SubgroupSwapDiagonal_UInt32x2_value;
Function SubgroupSwapDiagonal_UInt32x2;
inline constexpr std::array SubgroupSwapDiagonal_UInt32x2_args = { &SubgroupSwapDiagonal_UInt32x2_value };

/// subgroupSwapDiagonal with UInt32x3
Variable SubgroupSwapDiagonal_UInt32x3_value;
Function SubgroupSwapDiagonal_UInt32x3;
inline constexpr std::array SubgroupSwapDiagonal_UInt32x3_args = { &SubgroupSwapDiagonal_UInt32x3_value };

/// subgroupSwapDiagonal with UInt32x4
Variable SubgroupSwapDiagonal_UInt32x4_value;
Function SubgroupSwapDiagonal_UInt32x4;
inline constexpr std::array SubgroupSwapDiagonal_UInt32x4_args = { &SubgroupSwapDiagonal_UInt32x4_value };

/// subgroupSwapDiagonal with UInt16
Variable SubgroupSwapDiagonal_UInt16_value;
Function SubgroupSwapDiagonal_UInt16;
inline constexpr std::array SubgroupSwapDiagonal_UInt16_args = { &SubgroupSwapDiagonal_UInt16_value };

/// subgroupSwapDiagonal with UInt16x2
Variable SubgroupSwapDiagonal_UInt16x2_value;
Function SubgroupSwapDiagonal_UInt16x2;
inline constexpr std::array SubgroupSwapDiagonal_UInt16x2_args = { &SubgroupSwapDiagonal_UInt16x2_value };

/// subgroupSwapDiagonal with UInt16x3
Variable SubgroupSwapDiagonal_UInt16x3_value;
Function SubgroupSwapDiagonal_UInt16x3;
inline constexpr std::array SubgroupSwapDiagonal_UInt16x3_args = { &SubgroupSwapDiagonal_UInt16x3_value };

/// subgroupSwapDiagonal with UInt16x4
Variable SubgroupSwapDiagonal_UInt16x4_value;
Function SubgroupSwapDiagonal_UInt16x4;
inline constexpr std::array SubgroupSwapDiagonal_UInt16x4_args = { &SubgroupSwapDiagonal_UInt16x4_value };

/// subgroupSwapVertical with Float32
Variable SubgroupSwapVertical_Float32_value;
Function SubgroupSwapVertical_Float32;
inline constexpr std::array SubgroupSwapVertical_Float32_args = { &SubgroupSwapVertical_Float32_value };

/// subgroupSwapVertical with Float32x2
Variable SubgroupSwapVertical_Float32x2_value;
Function SubgroupSwapVertical_Float32x2;
inline constexpr std::array SubgroupSwapVertical_Float32x2_args = { &SubgroupSwapVertical_Float32x2_value };

/// subgroupSwapVertical with Float32x3
Variable SubgroupSwapVertical_Float32x3_value;
Function SubgroupSwapVertical_Float32x3;
inline constexpr std::array SubgroupSwapVertical_Float32x3_args = { &SubgroupSwapVertical_Float32x3_value };

/// subgroupSwapVertical with Float32x4
Variable SubgroupSwapVertical_Float32x4_value;
Function SubgroupSwapVertical_Float32x4;
inline constexpr std::array SubgroupSwapVertical_Float32x4_args = { &SubgroupSwapVertical_Float32x4_value };

/// subgroupSwapVertical with Float16
Variable SubgroupSwapVertical_Float16_value;
Function SubgroupSwapVertical_Float16;
inline constexpr std::array SubgroupSwapVertical_Float16_args = { &SubgroupSwapVertical_Float16_value };

/// subgroupSwapVertical with Float16x2
Variable SubgroupSwapVertical_Float16x2_value;
Function SubgroupSwapVertical_Float16x2;
inline constexpr std::array SubgroupSwapVertical_Float16x2_args = { &SubgroupSwapVertical_Float16x2_value };

/// subgroupSwapVertical with Float16x3
Variable SubgroupSwapVertical_Float16x3_value;
Function SubgroupSwapVertical_Float16x3;
inline constexpr std::array SubgroupSwapVertical_Float16x3_args = { &SubgroupSwapVertical_Float16x3_value };

/// subgroupSwapVertical with Float16x4
Variable SubgroupSwapVertical_Float16x4_value;
Function SubgroupSwapVertical_Float16x4;
inline constexpr std::array SubgroupSwapVertical_Float16x4_args = { &SubgroupSwapVertical_Float16x4_value };

/// subgroupSwapVertical with Int32
Variable SubgroupSwapVertical_Int32_value;
Function SubgroupSwapVertical_Int32;
inline constexpr std::array SubgroupSwapVertical_Int32_args = { &SubgroupSwapVertical_Int32_value };

/// subgroupSwapVertical with Int32x2
Variable SubgroupSwapVertical_Int32x2_value;
Function SubgroupSwapVertical_Int32x2;
inline constexpr std::array SubgroupSwapVertical_Int32x2_args = { &SubgroupSwapVertical_Int32x2_value };

/// subgroupSwapVertical with Int32x3
Variable SubgroupSwapVertical_Int32x3_value;
Function SubgroupSwapVertical_Int32x3;
inline constexpr std::array SubgroupSwapVertical_Int32x3_args = { &SubgroupSwapVertical_Int32x3_value };

/// subgroupSwapVertical with Int32x4
Variable SubgroupSwapVertical_Int32x4_value;
Function SubgroupSwapVertical_Int32x4;
inline constexpr std::array SubgroupSwapVertical_Int32x4_args = { &SubgroupSwapVertical_Int32x4_value };

/// subgroupSwapVertical with Int16
Variable SubgroupSwapVertical_Int16_value;
Function SubgroupSwapVertical_Int16;
inline constexpr std::array SubgroupSwapVertical_Int16_args = { &SubgroupSwapVertical_Int16_value };

/// subgroupSwapVertical with Int16x2
Variable SubgroupSwapVertical_Int16x2_value;
Function SubgroupSwapVertical_Int16x2;
inline constexpr std::array SubgroupSwapVertical_Int16x2_args = { &SubgroupSwapVertical_Int16x2_value };

/// subgroupSwapVertical with Int16x3
Variable SubgroupSwapVertical_Int16x3_value;
Function SubgroupSwapVertical_Int16x3;
inline constexpr std::array SubgroupSwapVertical_Int16x3_args = { &SubgroupSwapVertical_Int16x3_value };

/// subgroupSwapVertical with Int16x4
Variable SubgroupSwapVertical_Int16x4_value;
Function SubgroupSwapVertical_Int16x4;
inline constexpr std::array SubgroupSwapVertical_Int16x4_args = { &SubgroupSwapVertical_Int16x4_value };

/// subgroupSwapVertical with UInt32
Variable SubgroupSwapVertical_UInt32_value;
Function SubgroupSwapVertical_UInt32;
inline constexpr std::array SubgroupSwapVertical_UInt32_args = { &SubgroupSwapVertical_UInt32_value };

/// subgroupSwapVertical with UInt32x2
Variable SubgroupSwapVertical_UInt32x2_value;
Function SubgroupSwapVertical_UInt32x2;
inline constexpr std::array SubgroupSwapVertical_UInt32x2_args = { &SubgroupSwapVertical_UInt32x2_value };

/// subgroupSwapVertical with UInt32x3
Variable SubgroupSwapVertical_UInt32x3_value;
Function SubgroupSwapVertical_UInt32x3;
inline constexpr std::array SubgroupSwapVertical_UInt32x3_args = { &SubgroupSwapVertical_UInt32x3_value };

/// subgroupSwapVertical with UInt32x4
Variable SubgroupSwapVertical_UInt32x4_value;
Function SubgroupSwapVertical_UInt32x4;
inline constexpr std::array SubgroupSwapVertical_UInt32x4_args = { &SubgroupSwapVertical_UInt32x4_value };

/// subgroupSwapVertical with UInt16
Variable SubgroupSwapVertical_UInt16_value;
Function SubgroupSwapVertical_UInt16;
inline constexpr std::array SubgroupSwapVertical_UInt16_args = { &SubgroupSwapVertical_UInt16_value };

/// subgroupSwapVertical with UInt16x2
Variable SubgroupSwapVertical_UInt16x2_value;
Function SubgroupSwapVertical_UInt16x2;
inline constexpr std::array SubgroupSwapVertical_UInt16x2_args = { &SubgroupSwapVertical_UInt16x2_value };

/// subgroupSwapVertical with UInt16x3
Variable SubgroupSwapVertical_UInt16x3_value;
Function SubgroupSwapVertical_UInt16x3;
inline constexpr std::array SubgroupSwapVertical_UInt16x3_args = { &SubgroupSwapVertical_UInt16x3_value };

/// subgroupSwapVertical with UInt16x4
Variable SubgroupSwapVertical_UInt16x4_value;
Function SubgroupSwapVertical_UInt16x4;
inline constexpr std::array SubgroupSwapVertical_UInt16x4_args = { &SubgroupSwapVertical_UInt16x4_value };

/// subgroupSwapHorizontal with Float32
Variable SubgroupSwapHorizontal_Float32_value;
Function SubgroupSwapHorizontal_Float32;
inline constexpr std::array SubgroupSwapHorizontal_Float32_args = { &SubgroupSwapHorizontal_Float32_value };

/// subgroupSwapHorizontal with Float32x2
Variable SubgroupSwapHorizontal_Float32x2_value;
Function SubgroupSwapHorizontal_Float32x2;
inline constexpr std::array SubgroupSwapHorizontal_Float32x2_args = { &SubgroupSwapHorizontal_Float32x2_value };

/// subgroupSwapHorizontal with Float32x3
Variable SubgroupSwapHorizontal_Float32x3_value;
Function SubgroupSwapHorizontal_Float32x3;
inline constexpr std::array SubgroupSwapHorizontal_Float32x3_args = { &SubgroupSwapHorizontal_Float32x3_value };

/// subgroupSwapHorizontal with Float32x4
Variable SubgroupSwapHorizontal_Float32x4_value;
Function SubgroupSwapHorizontal_Float32x4;
inline constexpr std::array SubgroupSwapHorizontal_Float32x4_args = { &SubgroupSwapHorizontal_Float32x4_value };

/// subgroupSwapHorizontal with Float16
Variable SubgroupSwapHorizontal_Float16_value;
Function SubgroupSwapHorizontal_Float16;
inline constexpr std::array SubgroupSwapHorizontal_Float16_args = { &SubgroupSwapHorizontal_Float16_value };

/// subgroupSwapHorizontal with Float16x2
Variable SubgroupSwapHorizontal_Float16x2_value;
Function SubgroupSwapHorizontal_Float16x2;
inline constexpr std::array SubgroupSwapHorizontal_Float16x2_args = { &SubgroupSwapHorizontal_Float16x2_value };

/// subgroupSwapHorizontal with Float16x3
Variable SubgroupSwapHorizontal_Float16x3_value;
Function SubgroupSwapHorizontal_Float16x3;
inline constexpr std::array SubgroupSwapHorizontal_Float16x3_args = { &SubgroupSwapHorizontal_Float16x3_value };

/// subgroupSwapHorizontal with Float16x4
Variable SubgroupSwapHorizontal_Float16x4_value;
Function SubgroupSwapHorizontal_Float16x4;
inline constexpr std::array SubgroupSwapHorizontal_Float16x4_args = { &SubgroupSwapHorizontal_Float16x4_value };

/// subgroupSwapHorizontal with Int32
Variable SubgroupSwapHorizontal_Int32_value;
Function SubgroupSwapHorizontal_Int32;
inline constexpr std::array SubgroupSwapHorizontal_Int32_args = { &SubgroupSwapHorizontal_Int32_value };

/// subgroupSwapHorizontal with Int32x2
Variable SubgroupSwapHorizontal_Int32x2_value;
Function SubgroupSwapHorizontal_Int32x2;
inline constexpr std::array SubgroupSwapHorizontal_Int32x2_args = { &SubgroupSwapHorizontal_Int32x2_value };

/// subgroupSwapHorizontal with Int32x3
Variable SubgroupSwapHorizontal_Int32x3_value;
Function SubgroupSwapHorizontal_Int32x3;
inline constexpr std::array SubgroupSwapHorizontal_Int32x3_args = { &SubgroupSwapHorizontal_Int32x3_value };

/// subgroupSwapHorizontal with Int32x4
Variable SubgroupSwapHorizontal_Int32x4_value;
Function SubgroupSwapHorizontal_Int32x4;
inline constexpr std::array SubgroupSwapHorizontal_Int32x4_args = { &SubgroupSwapHorizontal_Int32x4_value };

/// subgroupSwapHorizontal with Int16
Variable SubgroupSwapHorizontal_Int16_value;
Function SubgroupSwapHorizontal_Int16;
inline constexpr std::array SubgroupSwapHorizontal_Int16_args = { &SubgroupSwapHorizontal_Int16_value };

/// subgroupSwapHorizontal with Int16x2
Variable SubgroupSwapHorizontal_Int16x2_value;
Function SubgroupSwapHorizontal_Int16x2;
inline constexpr std::array SubgroupSwapHorizontal_Int16x2_args = { &SubgroupSwapHorizontal_Int16x2_value };

void SetupIntrinsics8()
{
    /// pixelExportColor with UInt32x3, Int16
    PixelExportColor_UInt32x3_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x3_Int16_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x3_Int16_index.type.literal = true;
    PixelExportColor_UInt32x3_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x3_Int16.name = PixelExportColor_UInt32x3_Int16_name;
    PixelExportColor_UInt32x3_Int16.backendIndex = 1961;
    PixelExportColor_UInt32x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x3_Int16.parameters = PixelExportColor_UInt32x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16)->signature = "pixelExportColor(u32x3,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16)->name = "pixelExportColor(u32x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16)->nameWithVarNames = "pixelExportColor(color : u32x3, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x3, UInt16
    PixelExportColor_UInt32x3_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x3_UInt16_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x3_UInt16_index.type.literal = true;
    PixelExportColor_UInt32x3_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x3_UInt16.name = PixelExportColor_UInt32x3_UInt16_name;
    PixelExportColor_UInt32x3_UInt16.backendIndex = 1962;
    PixelExportColor_UInt32x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x3_UInt16.parameters = PixelExportColor_UInt32x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16)->signature = "pixelExportColor(u32x3,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16)->name = "pixelExportColor(u32x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16)->nameWithVarNames = "pixelExportColor(color : u32x3, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, Int32
    PixelExportColor_UInt32x4_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x4_Int32_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x4_Int32_index.type.literal = true;
    PixelExportColor_UInt32x4_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x4_Int32.name = PixelExportColor_UInt32x4_Int32_name;
    PixelExportColor_UInt32x4_Int32.backendIndex = 1963;
    PixelExportColor_UInt32x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_Int32.parameters = PixelExportColor_UInt32x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32)->signature = "pixelExportColor(u32x4,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32)->name = "pixelExportColor(u32x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32)->nameWithVarNames = "pixelExportColor(color : u32x4, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, UInt32
    PixelExportColor_UInt32x4_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x4_UInt32_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x4_UInt32_index.type.literal = true;
    PixelExportColor_UInt32x4_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x4_UInt32.name = PixelExportColor_UInt32x4_UInt32_name;
    PixelExportColor_UInt32x4_UInt32.backendIndex = 1964;
    PixelExportColor_UInt32x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_UInt32.parameters = PixelExportColor_UInt32x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32)->signature = "pixelExportColor(u32x4,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32)->name = "pixelExportColor(u32x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32)->nameWithVarNames = "pixelExportColor(color : u32x4, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, Int16
    PixelExportColor_UInt32x4_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x4_Int16_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x4_Int16_index.type.literal = true;
    PixelExportColor_UInt32x4_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x4_Int16.name = PixelExportColor_UInt32x4_Int16_name;
    PixelExportColor_UInt32x4_Int16.backendIndex = 1965;
    PixelExportColor_UInt32x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_Int16.parameters = PixelExportColor_UInt32x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16)->signature = "pixelExportColor(u32x4,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16)->name = "pixelExportColor(u32x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16)->nameWithVarNames = "pixelExportColor(color : u32x4, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, UInt16
    PixelExportColor_UInt32x4_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x4_UInt16_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x4_UInt16_index.type.literal = true;
    PixelExportColor_UInt32x4_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x4_UInt16.name = PixelExportColor_UInt32x4_UInt16_name;
    PixelExportColor_UInt32x4_UInt16.backendIndex = 1966;
    PixelExportColor_UInt32x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_UInt16.parameters = PixelExportColor_UInt32x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16)->signature = "pixelExportColor(u32x4,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16)->name = "pixelExportColor(u32x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16)->nameWithVarNames = "pixelExportColor(color : u32x4, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16, Int32
    PixelExportColor_UInt16_Int32_color.name = "color"_c;
    PixelExportColor_UInt16_Int32_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_Int32_index.name = "index"_c;
    PixelExportColor_UInt16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16_Int32_index.type.literal = true;
    PixelExportColor_UInt16_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16_Int32.name = PixelExportColor_UInt16_Int32_name;
    PixelExportColor_UInt16_Int32.backendIndex = 1967;
    PixelExportColor_UInt16_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16_Int32.parameters = PixelExportColor_UInt16_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32)->signature = "pixelExportColor(u16,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32)->name = "pixelExportColor(u16,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32)->nameWithVarNames = "pixelExportColor(color : u16, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16, UInt32
    PixelExportColor_UInt16_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16_UInt32_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16_UInt32_index.type.literal = true;
    PixelExportColor_UInt16_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16_UInt32.name = PixelExportColor_UInt16_UInt32_name;
    PixelExportColor_UInt16_UInt32.backendIndex = 1968;
    PixelExportColor_UInt16_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16_UInt32.parameters = PixelExportColor_UInt16_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32)->signature = "pixelExportColor(u16,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32)->name = "pixelExportColor(u16,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32)->nameWithVarNames = "pixelExportColor(color : u16, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16, Int16
    PixelExportColor_UInt16_Int16_color.name = "color"_c;
    PixelExportColor_UInt16_Int16_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_Int16_index.name = "index"_c;
    PixelExportColor_UInt16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16_Int16_index.type.literal = true;
    PixelExportColor_UInt16_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16_Int16.name = PixelExportColor_UInt16_Int16_name;
    PixelExportColor_UInt16_Int16.backendIndex = 1969;
    PixelExportColor_UInt16_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16_Int16.parameters = PixelExportColor_UInt16_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16)->signature = "pixelExportColor(u16,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16)->name = "pixelExportColor(u16,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16)->nameWithVarNames = "pixelExportColor(color : u16, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16, UInt16
    PixelExportColor_UInt16_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16_UInt16_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt16_index.type.literal = true;
    PixelExportColor_UInt16_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16_UInt16.name = PixelExportColor_UInt16_UInt16_name;
    PixelExportColor_UInt16_UInt16.backendIndex = 1970;
    PixelExportColor_UInt16_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16_UInt16.parameters = PixelExportColor_UInt16_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16)->signature = "pixelExportColor(u16,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16)->name = "pixelExportColor(u16,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16)->nameWithVarNames = "pixelExportColor(color : u16, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x2, Int32
    PixelExportColor_UInt16x2_Int32_color.name = "color"_c;
    PixelExportColor_UInt16x2_Int32_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_Int32_index.name = "index"_c;
    PixelExportColor_UInt16x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16x2_Int32_index.type.literal = true;
    PixelExportColor_UInt16x2_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x2_Int32.name = PixelExportColor_UInt16x2_Int32_name;
    PixelExportColor_UInt16x2_Int32.backendIndex = 1971;
    PixelExportColor_UInt16x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x2_Int32.parameters = PixelExportColor_UInt16x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32)->signature = "pixelExportColor(u16x2,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32)->name = "pixelExportColor(u16x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32)->nameWithVarNames = "pixelExportColor(color : u16x2, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x2, UInt32
    PixelExportColor_UInt16x2_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16x2_UInt32_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16x2_UInt32_index.type.literal = true;
    PixelExportColor_UInt16x2_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x2_UInt32.name = PixelExportColor_UInt16x2_UInt32_name;
    PixelExportColor_UInt16x2_UInt32.backendIndex = 1972;
    PixelExportColor_UInt16x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x2_UInt32.parameters = PixelExportColor_UInt16x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32)->signature = "pixelExportColor(u16x2,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32)->name = "pixelExportColor(u16x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32)->nameWithVarNames = "pixelExportColor(color : u16x2, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x2, Int16
    PixelExportColor_UInt16x2_Int16_color.name = "color"_c;
    PixelExportColor_UInt16x2_Int16_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_Int16_index.name = "index"_c;
    PixelExportColor_UInt16x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16x2_Int16_index.type.literal = true;
    PixelExportColor_UInt16x2_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x2_Int16.name = PixelExportColor_UInt16x2_Int16_name;
    PixelExportColor_UInt16x2_Int16.backendIndex = 1973;
    PixelExportColor_UInt16x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x2_Int16.parameters = PixelExportColor_UInt16x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16)->signature = "pixelExportColor(u16x2,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16)->name = "pixelExportColor(u16x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16)->nameWithVarNames = "pixelExportColor(color : u16x2, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x2, UInt16
    PixelExportColor_UInt16x2_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16x2_UInt16_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16x2_UInt16_index.type.literal = true;
    PixelExportColor_UInt16x2_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x2_UInt16.name = PixelExportColor_UInt16x2_UInt16_name;
    PixelExportColor_UInt16x2_UInt16.backendIndex = 1974;
    PixelExportColor_UInt16x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x2_UInt16.parameters = PixelExportColor_UInt16x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16)->signature = "pixelExportColor(u16x2,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16)->name = "pixelExportColor(u16x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16)->nameWithVarNames = "pixelExportColor(color : u16x2, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x3, Int32
    PixelExportColor_UInt16x3_Int32_color.name = "color"_c;
    PixelExportColor_UInt16x3_Int32_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_Int32_index.name = "index"_c;
    PixelExportColor_UInt16x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16x3_Int32_index.type.literal = true;
    PixelExportColor_UInt16x3_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x3_Int32.name = PixelExportColor_UInt16x3_Int32_name;
    PixelExportColor_UInt16x3_Int32.backendIndex = 1975;
    PixelExportColor_UInt16x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x3_Int32.parameters = PixelExportColor_UInt16x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32)->signature = "pixelExportColor(u16x3,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32)->name = "pixelExportColor(u16x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32)->nameWithVarNames = "pixelExportColor(color : u16x3, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x3, UInt32
    PixelExportColor_UInt16x3_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16x3_UInt32_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16x3_UInt32_index.type.literal = true;
    PixelExportColor_UInt16x3_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x3_UInt32.name = PixelExportColor_UInt16x3_UInt32_name;
    PixelExportColor_UInt16x3_UInt32.backendIndex = 1976;
    PixelExportColor_UInt16x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x3_UInt32.parameters = PixelExportColor_UInt16x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32)->signature = "pixelExportColor(u16x3,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32)->name = "pixelExportColor(u16x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32)->nameWithVarNames = "pixelExportColor(color : u16x3, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x3, Int16
    PixelExportColor_UInt16x3_Int16_color.name = "color"_c;
    PixelExportColor_UInt16x3_Int16_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_Int16_index.name = "index"_c;
    PixelExportColor_UInt16x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16x3_Int16_index.type.literal = true;
    PixelExportColor_UInt16x3_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x3_Int16.name = PixelExportColor_UInt16x3_Int16_name;
    PixelExportColor_UInt16x3_Int16.backendIndex = 1977;
    PixelExportColor_UInt16x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x3_Int16.parameters = PixelExportColor_UInt16x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16)->signature = "pixelExportColor(u16x3,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16)->name = "pixelExportColor(u16x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16)->nameWithVarNames = "pixelExportColor(color : u16x3, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x3, UInt16
    PixelExportColor_UInt16x3_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16x3_UInt16_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16x3_UInt16_index.type.literal = true;
    PixelExportColor_UInt16x3_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x3_UInt16.name = PixelExportColor_UInt16x3_UInt16_name;
    PixelExportColor_UInt16x3_UInt16.backendIndex = 1978;
    PixelExportColor_UInt16x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x3_UInt16.parameters = PixelExportColor_UInt16x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16)->signature = "pixelExportColor(u16x3,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16)->name = "pixelExportColor(u16x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16)->nameWithVarNames = "pixelExportColor(color : u16x3, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x4, Int32
    PixelExportColor_UInt16x4_Int32_color.name = "color"_c;
    PixelExportColor_UInt16x4_Int32_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_Int32_index.name = "index"_c;
    PixelExportColor_UInt16x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16x4_Int32_index.type.literal = true;
    PixelExportColor_UInt16x4_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x4_Int32.name = PixelExportColor_UInt16x4_Int32_name;
    PixelExportColor_UInt16x4_Int32.backendIndex = 1979;
    PixelExportColor_UInt16x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x4_Int32.parameters = PixelExportColor_UInt16x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32)->signature = "pixelExportColor(u16x4,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32)->name = "pixelExportColor(u16x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32)->nameWithVarNames = "pixelExportColor(color : u16x4, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x4, UInt32
    PixelExportColor_UInt16x4_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16x4_UInt32_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16x4_UInt32_index.type.literal = true;
    PixelExportColor_UInt16x4_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x4_UInt32.name = PixelExportColor_UInt16x4_UInt32_name;
    PixelExportColor_UInt16x4_UInt32.backendIndex = 1980;
    PixelExportColor_UInt16x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x4_UInt32.parameters = PixelExportColor_UInt16x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32)->signature = "pixelExportColor(u16x4,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32)->name = "pixelExportColor(u16x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32)->nameWithVarNames = "pixelExportColor(color : u16x4, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x4, Int16
    PixelExportColor_UInt16x4_Int16_color.name = "color"_c;
    PixelExportColor_UInt16x4_Int16_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_Int16_index.name = "index"_c;
    PixelExportColor_UInt16x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16x4_Int16_index.type.literal = true;
    PixelExportColor_UInt16x4_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x4_Int16.name = PixelExportColor_UInt16x4_Int16_name;
    PixelExportColor_UInt16x4_Int16.backendIndex = 1981;
    PixelExportColor_UInt16x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x4_Int16.parameters = PixelExportColor_UInt16x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16)->signature = "pixelExportColor(u16x4,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16)->name = "pixelExportColor(u16x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16)->nameWithVarNames = "pixelExportColor(color : u16x4, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x4, UInt16
    PixelExportColor_UInt16x4_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16x4_UInt16_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16x4_UInt16_index.type.literal = true;
    PixelExportColor_UInt16x4_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x4_UInt16.name = PixelExportColor_UInt16x4_UInt16_name;
    PixelExportColor_UInt16x4_UInt16.backendIndex = 1982;
    PixelExportColor_UInt16x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x4_UInt16.parameters = PixelExportColor_UInt16x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16)->signature = "pixelExportColor(u16x4,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16)->name = "pixelExportColor(u16x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16)->nameWithVarNames = "pixelExportColor(color : u16x4, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16)->returnTypeSymbol = &VoidType;

    /// computeGetLocalThreadIndices
    ComputeGetLocalThreadIndices.documentation = "Returns the local thread indices within the workgroup"_c;
    ComputeGetLocalThreadIndices.name = ComputeGetLocalThreadIndices_name;
    ComputeGetLocalThreadIndices.backendIndex = 1983;
    ComputeGetLocalThreadIndices.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetLocalThreadIndices)->signature = "computeGetLocalThreadIndices() u32x3"_c;
    Symbol::Resolved(&ComputeGetLocalThreadIndices)->name = "computeGetLocalThreadIndices()"_c;
    Symbol::Resolved(&ComputeGetLocalThreadIndices)->nameWithVarNames = "computeGetLocalThreadIndices()"_c;
    Symbol::Resolved(&ComputeGetLocalThreadIndices)->returnTypeSymbol = &UInt32x3Type;

    /// computeGetGlobalThreadIndices
    ComputeGetGlobalThreadIndices.documentation = "Returns the global thread indices in the dispatch"_c;
    ComputeGetGlobalThreadIndices.name = ComputeGetGlobalThreadIndices_name;
    ComputeGetGlobalThreadIndices.backendIndex = 1984;
    ComputeGetGlobalThreadIndices.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetGlobalThreadIndices)->signature = "computeGetGlobalThreadIndices() u32x3"_c;
    Symbol::Resolved(&ComputeGetGlobalThreadIndices)->name = "computeGetGlobalThreadIndices()"_c;
    Symbol::Resolved(&ComputeGetGlobalThreadIndices)->nameWithVarNames = "computeGetGlobalThreadIndices()"_c;
    Symbol::Resolved(&ComputeGetGlobalThreadIndices)->returnTypeSymbol = &UInt32x3Type;

    /// computeGetWorkgroupIndices
    ComputeGetWorkgroupIndices.documentation = "Returns the workgroup indices in the dispatch"_c;
    ComputeGetWorkgroupIndices.name = ComputeGetWorkgroupIndices_name;
    ComputeGetWorkgroupIndices.backendIndex = 1985;
    ComputeGetWorkgroupIndices.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetWorkgroupIndices)->signature = "computeGetWorkgroupIndices() u32x3"_c;
    Symbol::Resolved(&ComputeGetWorkgroupIndices)->name = "computeGetWorkgroupIndices()"_c;
    Symbol::Resolved(&ComputeGetWorkgroupIndices)->nameWithVarNames = "computeGetWorkgroupIndices()"_c;
    Symbol::Resolved(&ComputeGetWorkgroupIndices)->returnTypeSymbol = &UInt32x3Type;

    /// computeGetWorkGroupDimensions
    ComputeGetWorkGroupDimensions.documentation = "Returns the dimensions of the workgroup in the dispatch"_c;
    ComputeGetWorkGroupDimensions.name = ComputeGetWorkGroupDimensions_name;
    ComputeGetWorkGroupDimensions.backendIndex = 1986;
    ComputeGetWorkGroupDimensions.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetWorkGroupDimensions)->signature = "computeGetWorkGroupDimensions() u32x3"_c;
    Symbol::Resolved(&ComputeGetWorkGroupDimensions)->name = "computeGetWorkGroupDimensions()"_c;
    Symbol::Resolved(&ComputeGetWorkGroupDimensions)->nameWithVarNames = "computeGetWorkGroupDimensions()"_c;
    Symbol::Resolved(&ComputeGetWorkGroupDimensions)->returnTypeSymbol = &UInt32x3Type;

    /// computeGetIndexInWorkgroup
    ComputeGetIndexInWorkgroup.documentation = "Returns flattened index of the current thread in the workgroup using (x * workgroupSize.y + y) * workgroupSize.x + z"_c;
    ComputeGetIndexInWorkgroup.name = ComputeGetIndexInWorkgroup_name;
    ComputeGetIndexInWorkgroup.backendIndex = 1987;
    ComputeGetIndexInWorkgroup.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&ComputeGetIndexInWorkgroup)->signature = "computeGetIndexInWorkgroup() u32"_c;
    Symbol::Resolved(&ComputeGetIndexInWorkgroup)->name = "computeGetIndexInWorkgroup()"_c;
    Symbol::Resolved(&ComputeGetIndexInWorkgroup)->nameWithVarNames = "computeGetIndexInWorkgroup()"_c;
    Symbol::Resolved(&ComputeGetIndexInWorkgroup)->returnTypeSymbol = &UInt32Type;

    /// subgroupGetId
    SubgroupGetId.documentation = "Returns the subgroup ID of the current thread"_c;
    SubgroupGetId.name = SubgroupGetId_name;
    SubgroupGetId.backendIndex = 1988;
    SubgroupGetId.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&SubgroupGetId)->signature = "subgroupGetId() u32x3"_c;
    Symbol::Resolved(&SubgroupGetId)->name = "subgroupGetId()"_c;
    Symbol::Resolved(&SubgroupGetId)->nameWithVarNames = "subgroupGetId()"_c;
    Symbol::Resolved(&SubgroupGetId)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupGetSize
    SubgroupGetSize.documentation = "Returns the size of the subgroup"_c;
    SubgroupGetSize.name = SubgroupGetSize_name;
    SubgroupGetSize.backendIndex = 1989;
    SubgroupGetSize.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&SubgroupGetSize)->signature = "subgroupGetSize() u32x3"_c;
    Symbol::Resolved(&SubgroupGetSize)->name = "subgroupGetSize()"_c;
    Symbol::Resolved(&SubgroupGetSize)->nameWithVarNames = "subgroupGetSize()"_c;
    Symbol::Resolved(&SubgroupGetSize)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupGetNum
    SubgroupGetNum.documentation = "Returns the number of subgroups in the workgroup"_c;
    SubgroupGetNum.name = SubgroupGetNum_name;
    SubgroupGetNum.backendIndex = 1990;
    SubgroupGetNum.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&SubgroupGetNum)->signature = "subgroupGetNum() u32x3"_c;
    Symbol::Resolved(&SubgroupGetNum)->name = "subgroupGetNum()"_c;
    Symbol::Resolved(&SubgroupGetNum)->nameWithVarNames = "subgroupGetNum()"_c;
    Symbol::Resolved(&SubgroupGetNum)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupGetThreadMask
    SubgroupGetThreadMask.documentation = "Returns a 128 bit subgroup mask where the current thread is active"_c;
    SubgroupGetThreadMask.name = SubgroupGetThreadMask_name;
    SubgroupGetThreadMask.backendIndex = 1991;
    SubgroupGetThreadMask.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetThreadMask)->signature = "subgroupGetThreadMask() u32x4"_c;
    Symbol::Resolved(&SubgroupGetThreadMask)->name = "subgroupGetThreadMask()"_c;
    Symbol::Resolved(&SubgroupGetThreadMask)->nameWithVarNames = "subgroupGetThreadMask()"_c;
    Symbol::Resolved(&SubgroupGetThreadMask)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupGetThreadAndLowerMask
    SubgroupGetThreadAndLowerMask.documentation = "Returns a 128 bit subgroup mask where the current thread and all lower threads are active"_c;
    SubgroupGetThreadAndLowerMask.name = SubgroupGetThreadAndLowerMask_name;
    SubgroupGetThreadAndLowerMask.backendIndex = 1992;
    SubgroupGetThreadAndLowerMask.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetThreadAndLowerMask)->signature = "subgroupGetThreadAndLowerMask() u32x4"_c;
    Symbol::Resolved(&SubgroupGetThreadAndLowerMask)->name = "subgroupGetThreadAndLowerMask()"_c;
    Symbol::Resolved(&SubgroupGetThreadAndLowerMask)->nameWithVarNames = "subgroupGetThreadAndLowerMask()"_c;
    Symbol::Resolved(&SubgroupGetThreadAndLowerMask)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupGetLowerMask
    SubgroupGetLowerMask.documentation = "Returns a 128 bit subgroup mask where all lower threads are active"_c;
    SubgroupGetLowerMask.name = SubgroupGetLowerMask_name;
    SubgroupGetLowerMask.backendIndex = 1993;
    SubgroupGetLowerMask.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetLowerMask)->signature = "subgroupGetLowerMask() u32x4"_c;
    Symbol::Resolved(&SubgroupGetLowerMask)->name = "subgroupGetLowerMask()"_c;
    Symbol::Resolved(&SubgroupGetLowerMask)->nameWithVarNames = "subgroupGetLowerMask()"_c;
    Symbol::Resolved(&SubgroupGetLowerMask)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupGetThreadAndGreaterMask
    SubgroupGetThreadAndGreaterMask.documentation = "Returns a 128 bit subgroup mask where the current thread and all greater threads are active"_c;
    SubgroupGetThreadAndGreaterMask.name = SubgroupGetThreadAndGreaterMask_name;
    SubgroupGetThreadAndGreaterMask.backendIndex = 1994;
    SubgroupGetThreadAndGreaterMask.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetThreadAndGreaterMask)->signature = "subgroupGetThreadAndGreaterMask() u32x4"_c;
    Symbol::Resolved(&SubgroupGetThreadAndGreaterMask)->name = "subgroupGetThreadAndGreaterMask()"_c;
    Symbol::Resolved(&SubgroupGetThreadAndGreaterMask)->nameWithVarNames = "subgroupGetThreadAndGreaterMask()"_c;
    Symbol::Resolved(&SubgroupGetThreadAndGreaterMask)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupGetGreaterMask
    SubgroupGetGreaterMask.documentation = "Returns a 128 bit subgroup mask where all greater threads are active"_c;
    SubgroupGetGreaterMask.name = SubgroupGetGreaterMask_name;
    SubgroupGetGreaterMask.backendIndex = 1995;
    SubgroupGetGreaterMask.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetGreaterMask)->signature = "subgroupGetGreaterMask() u32x4"_c;
    Symbol::Resolved(&SubgroupGetGreaterMask)->name = "subgroupGetGreaterMask()"_c;
    Symbol::Resolved(&SubgroupGetGreaterMask)->nameWithVarNames = "subgroupGetGreaterMask()"_c;
    Symbol::Resolved(&SubgroupGetGreaterMask)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupGetFirstActiveThread
    SubgroupGetFirstActiveThread.documentation = "Returns the ID of the first active thread in the subgroup. If no threads are active, returns 0."_c;
    SubgroupGetFirstActiveThread.name = SubgroupGetFirstActiveThread_name;
    SubgroupGetFirstActiveThread.backendIndex = 1996;
    SubgroupGetFirstActiveThread.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&SubgroupGetFirstActiveThread)->signature = "subgroupGetFirstActiveThread() u32"_c;
    Symbol::Resolved(&SubgroupGetFirstActiveThread)->name = "subgroupGetFirstActiveThread()"_c;
    Symbol::Resolved(&SubgroupGetFirstActiveThread)->nameWithVarNames = "subgroupGetFirstActiveThread()"_c;
    Symbol::Resolved(&SubgroupGetFirstActiveThread)->returnTypeSymbol = &UInt32Type;

    /// subgroupBroadcastFirstActiveThread with Float32
    SubgroupBroadcastFirstActiveThread_Float32_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float32_value.type = Type::FullType{ Float32Type.name };
    SubgroupBroadcastFirstActiveThread_Float32.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float32.name = SubgroupBroadcastFirstActiveThread_Float32_name;
    SubgroupBroadcastFirstActiveThread_Float32.backendIndex = 1997;
    SubgroupBroadcastFirstActiveThread_Float32.returnType = Type::FullType { Float32Type.name };
    SubgroupBroadcastFirstActiveThread_Float32.parameters = SubgroupBroadcastFirstActiveThread_Float32_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32)->signature = "subgroupBroadcastFirstActiveThread(f32) f32"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32)->name = "subgroupBroadcastFirstActiveThread(f32)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f32)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32)->returnTypeSymbol = &Float32Type;

    /// subgroupBroadcastFirstActiveThread with Float32x2
    SubgroupBroadcastFirstActiveThread_Float32x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float32x2_value.type = Type::FullType{ Float32x2Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float32x2.name = SubgroupBroadcastFirstActiveThread_Float32x2_name;
    SubgroupBroadcastFirstActiveThread_Float32x2.backendIndex = 1998;
    SubgroupBroadcastFirstActiveThread_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x2.parameters = SubgroupBroadcastFirstActiveThread_Float32x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x2_value)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x2)->signature = "subgroupBroadcastFirstActiveThread(f32x2) f32x2"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x2)->name = "subgroupBroadcastFirstActiveThread(f32x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x2)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f32x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// subgroupBroadcastFirstActiveThread with Float32x3
    SubgroupBroadcastFirstActiveThread_Float32x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float32x3_value.type = Type::FullType{ Float32x3Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float32x3.name = SubgroupBroadcastFirstActiveThread_Float32x3_name;
    SubgroupBroadcastFirstActiveThread_Float32x3.backendIndex = 1999;
    SubgroupBroadcastFirstActiveThread_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x3.parameters = SubgroupBroadcastFirstActiveThread_Float32x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x3_value)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x3)->signature = "subgroupBroadcastFirstActiveThread(f32x3) f32x3"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x3)->name = "subgroupBroadcastFirstActiveThread(f32x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x3)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f32x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// subgroupBroadcastFirstActiveThread with Float32x4
    SubgroupBroadcastFirstActiveThread_Float32x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float32x4_value.type = Type::FullType{ Float32x4Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float32x4.name = SubgroupBroadcastFirstActiveThread_Float32x4_name;
    SubgroupBroadcastFirstActiveThread_Float32x4.backendIndex = 2000;
    SubgroupBroadcastFirstActiveThread_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x4.parameters = SubgroupBroadcastFirstActiveThread_Float32x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x4_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x4)->signature = "subgroupBroadcastFirstActiveThread(f32x4) f32x4"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x4)->name = "subgroupBroadcastFirstActiveThread(f32x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x4)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f32x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// subgroupBroadcastFirstActiveThread with Float16
    SubgroupBroadcastFirstActiveThread_Float16_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float16_value.type = Type::FullType{ Float16Type.name };
    SubgroupBroadcastFirstActiveThread_Float16.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float16.name = SubgroupBroadcastFirstActiveThread_Float16_name;
    SubgroupBroadcastFirstActiveThread_Float16.backendIndex = 2001;
    SubgroupBroadcastFirstActiveThread_Float16.returnType = Type::FullType { Float16Type.name };
    SubgroupBroadcastFirstActiveThread_Float16.parameters = SubgroupBroadcastFirstActiveThread_Float16_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16)->signature = "subgroupBroadcastFirstActiveThread(f16) f16"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16)->name = "subgroupBroadcastFirstActiveThread(f16)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f16)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16)->returnTypeSymbol = &Float16Type;

    /// subgroupBroadcastFirstActiveThread with Float16x2
    SubgroupBroadcastFirstActiveThread_Float16x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float16x2_value.type = Type::FullType{ Float16x2Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float16x2.name = SubgroupBroadcastFirstActiveThread_Float16x2_name;
    SubgroupBroadcastFirstActiveThread_Float16x2.backendIndex = 2002;
    SubgroupBroadcastFirstActiveThread_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x2.parameters = SubgroupBroadcastFirstActiveThread_Float16x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x2_value)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x2)->signature = "subgroupBroadcastFirstActiveThread(f16x2) f16x2"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x2)->name = "subgroupBroadcastFirstActiveThread(f16x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x2)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f16x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// subgroupBroadcastFirstActiveThread with Float16x3
    SubgroupBroadcastFirstActiveThread_Float16x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float16x3_value.type = Type::FullType{ Float16x3Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float16x3.name = SubgroupBroadcastFirstActiveThread_Float16x3_name;
    SubgroupBroadcastFirstActiveThread_Float16x3.backendIndex = 2003;
    SubgroupBroadcastFirstActiveThread_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x3.parameters = SubgroupBroadcastFirstActiveThread_Float16x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x3_value)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x3)->signature = "subgroupBroadcastFirstActiveThread(f16x3) f16x3"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x3)->name = "subgroupBroadcastFirstActiveThread(f16x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x3)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f16x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// subgroupBroadcastFirstActiveThread with Float16x4
    SubgroupBroadcastFirstActiveThread_Float16x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float16x4_value.type = Type::FullType{ Float16x4Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float16x4.name = SubgroupBroadcastFirstActiveThread_Float16x4_name;
    SubgroupBroadcastFirstActiveThread_Float16x4.backendIndex = 2004;
    SubgroupBroadcastFirstActiveThread_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x4.parameters = SubgroupBroadcastFirstActiveThread_Float16x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x4_value)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x4)->signature = "subgroupBroadcastFirstActiveThread(f16x4) f16x4"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x4)->name = "subgroupBroadcastFirstActiveThread(f16x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x4)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f16x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// subgroupBroadcastFirstActiveThread with Int32
    SubgroupBroadcastFirstActiveThread_Int32_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int32_value.type = Type::FullType{ Int32Type.name };
    SubgroupBroadcastFirstActiveThread_Int32.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int32.name = SubgroupBroadcastFirstActiveThread_Int32_name;
    SubgroupBroadcastFirstActiveThread_Int32.backendIndex = 2005;
    SubgroupBroadcastFirstActiveThread_Int32.returnType = Type::FullType { Int32Type.name };
    SubgroupBroadcastFirstActiveThread_Int32.parameters = SubgroupBroadcastFirstActiveThread_Int32_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32)->signature = "subgroupBroadcastFirstActiveThread(i32) i32"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32)->name = "subgroupBroadcastFirstActiveThread(i32)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i32)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32)->returnTypeSymbol = &Int32Type;

    /// subgroupBroadcastFirstActiveThread with Int32x2
    SubgroupBroadcastFirstActiveThread_Int32x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int32x2_value.type = Type::FullType{ Int32x2Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int32x2.name = SubgroupBroadcastFirstActiveThread_Int32x2_name;
    SubgroupBroadcastFirstActiveThread_Int32x2.backendIndex = 2006;
    SubgroupBroadcastFirstActiveThread_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x2.parameters = SubgroupBroadcastFirstActiveThread_Int32x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x2_value)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x2)->signature = "subgroupBroadcastFirstActiveThread(i32x2) i32x2"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x2)->name = "subgroupBroadcastFirstActiveThread(i32x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x2)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i32x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// subgroupBroadcastFirstActiveThread with Int32x3
    SubgroupBroadcastFirstActiveThread_Int32x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int32x3_value.type = Type::FullType{ Int32x3Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int32x3.name = SubgroupBroadcastFirstActiveThread_Int32x3_name;
    SubgroupBroadcastFirstActiveThread_Int32x3.backendIndex = 2007;
    SubgroupBroadcastFirstActiveThread_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x3.parameters = SubgroupBroadcastFirstActiveThread_Int32x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x3_value)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x3)->signature = "subgroupBroadcastFirstActiveThread(i32x3) i32x3"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x3)->name = "subgroupBroadcastFirstActiveThread(i32x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x3)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i32x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// subgroupBroadcastFirstActiveThread with Int32x4
    SubgroupBroadcastFirstActiveThread_Int32x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int32x4_value.type = Type::FullType{ Int32x4Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int32x4.name = SubgroupBroadcastFirstActiveThread_Int32x4_name;
    SubgroupBroadcastFirstActiveThread_Int32x4.backendIndex = 2008;
    SubgroupBroadcastFirstActiveThread_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x4.parameters = SubgroupBroadcastFirstActiveThread_Int32x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x4_value)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x4)->signature = "subgroupBroadcastFirstActiveThread(i32x4) i32x4"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x4)->name = "subgroupBroadcastFirstActiveThread(i32x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x4)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i32x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// subgroupBroadcastFirstActiveThread with Int16
    SubgroupBroadcastFirstActiveThread_Int16_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int16_value.type = Type::FullType{ Int16Type.name };
    SubgroupBroadcastFirstActiveThread_Int16.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int16.name = SubgroupBroadcastFirstActiveThread_Int16_name;
    SubgroupBroadcastFirstActiveThread_Int16.backendIndex = 2009;
    SubgroupBroadcastFirstActiveThread_Int16.returnType = Type::FullType { Int16Type.name };
    SubgroupBroadcastFirstActiveThread_Int16.parameters = SubgroupBroadcastFirstActiveThread_Int16_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16)->signature = "subgroupBroadcastFirstActiveThread(i16) i16"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16)->name = "subgroupBroadcastFirstActiveThread(i16)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i16)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16)->returnTypeSymbol = &Int16Type;

    /// subgroupBroadcastFirstActiveThread with Int16x2
    SubgroupBroadcastFirstActiveThread_Int16x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int16x2_value.type = Type::FullType{ Int16x2Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int16x2.name = SubgroupBroadcastFirstActiveThread_Int16x2_name;
    SubgroupBroadcastFirstActiveThread_Int16x2.backendIndex = 2010;
    SubgroupBroadcastFirstActiveThread_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x2.parameters = SubgroupBroadcastFirstActiveThread_Int16x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x2_value)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x2)->signature = "subgroupBroadcastFirstActiveThread(i16x2) i16x2"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x2)->name = "subgroupBroadcastFirstActiveThread(i16x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x2)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i16x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// subgroupBroadcastFirstActiveThread with Int16x3
    SubgroupBroadcastFirstActiveThread_Int16x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int16x3_value.type = Type::FullType{ Int16x3Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int16x3.name = SubgroupBroadcastFirstActiveThread_Int16x3_name;
    SubgroupBroadcastFirstActiveThread_Int16x3.backendIndex = 2011;
    SubgroupBroadcastFirstActiveThread_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x3.parameters = SubgroupBroadcastFirstActiveThread_Int16x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x3_value)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x3)->signature = "subgroupBroadcastFirstActiveThread(i16x3) i16x3"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x3)->name = "subgroupBroadcastFirstActiveThread(i16x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x3)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i16x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// subgroupBroadcastFirstActiveThread with Int16x4
    SubgroupBroadcastFirstActiveThread_Int16x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int16x4_value.type = Type::FullType{ Int16x4Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int16x4.name = SubgroupBroadcastFirstActiveThread_Int16x4_name;
    SubgroupBroadcastFirstActiveThread_Int16x4.backendIndex = 2012;
    SubgroupBroadcastFirstActiveThread_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x4.parameters = SubgroupBroadcastFirstActiveThread_Int16x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x4_value)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x4)->signature = "subgroupBroadcastFirstActiveThread(i16x4) i16x4"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x4)->name = "subgroupBroadcastFirstActiveThread(i16x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x4)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i16x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// subgroupBroadcastFirstActiveThread with UInt32
    SubgroupBroadcastFirstActiveThread_UInt32_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt32_value.type = Type::FullType{ UInt32Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt32.name = SubgroupBroadcastFirstActiveThread_UInt32_name;
    SubgroupBroadcastFirstActiveThread_UInt32.backendIndex = 2013;
    SubgroupBroadcastFirstActiveThread_UInt32.returnType = Type::FullType { UInt32Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32.parameters = SubgroupBroadcastFirstActiveThread_UInt32_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32)->signature = "subgroupBroadcastFirstActiveThread(u32) u32"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32)->name = "subgroupBroadcastFirstActiveThread(u32)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u32)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32)->returnTypeSymbol = &UInt32Type;

    /// subgroupBroadcastFirstActiveThread with UInt32x2
    SubgroupBroadcastFirstActiveThread_UInt32x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x2_value.type = Type::FullType{ UInt32x2Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x2.name = SubgroupBroadcastFirstActiveThread_UInt32x2_name;
    SubgroupBroadcastFirstActiveThread_UInt32x2.backendIndex = 2014;
    SubgroupBroadcastFirstActiveThread_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x2.parameters = SubgroupBroadcastFirstActiveThread_UInt32x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x2_value)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x2)->signature = "subgroupBroadcastFirstActiveThread(u32x2) u32x2"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x2)->name = "subgroupBroadcastFirstActiveThread(u32x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x2)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u32x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// subgroupBroadcastFirstActiveThread with UInt32x3
    SubgroupBroadcastFirstActiveThread_UInt32x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x3_value.type = Type::FullType{ UInt32x3Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x3.name = SubgroupBroadcastFirstActiveThread_UInt32x3_name;
    SubgroupBroadcastFirstActiveThread_UInt32x3.backendIndex = 2015;
    SubgroupBroadcastFirstActiveThread_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x3.parameters = SubgroupBroadcastFirstActiveThread_UInt32x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x3_value)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x3)->signature = "subgroupBroadcastFirstActiveThread(u32x3) u32x3"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x3)->name = "subgroupBroadcastFirstActiveThread(u32x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x3)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u32x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupBroadcastFirstActiveThread with UInt32x4
    SubgroupBroadcastFirstActiveThread_UInt32x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x4_value.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x4.name = SubgroupBroadcastFirstActiveThread_UInt32x4_name;
    SubgroupBroadcastFirstActiveThread_UInt32x4.backendIndex = 2016;
    SubgroupBroadcastFirstActiveThread_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x4.parameters = SubgroupBroadcastFirstActiveThread_UInt32x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x4_value)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x4)->signature = "subgroupBroadcastFirstActiveThread(u32x4) u32x4"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x4)->name = "subgroupBroadcastFirstActiveThread(u32x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x4)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u32x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupBroadcastFirstActiveThread with UInt16
    SubgroupBroadcastFirstActiveThread_UInt16_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt16_value.type = Type::FullType{ UInt16Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt16.name = SubgroupBroadcastFirstActiveThread_UInt16_name;
    SubgroupBroadcastFirstActiveThread_UInt16.backendIndex = 2017;
    SubgroupBroadcastFirstActiveThread_UInt16.returnType = Type::FullType { UInt16Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16.parameters = SubgroupBroadcastFirstActiveThread_UInt16_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16)->signature = "subgroupBroadcastFirstActiveThread(u16) u16"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16)->name = "subgroupBroadcastFirstActiveThread(u16)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u16)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16)->returnTypeSymbol = &UInt16Type;

    /// subgroupBroadcastFirstActiveThread with UInt16x2
    SubgroupBroadcastFirstActiveThread_UInt16x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x2_value.type = Type::FullType{ UInt16x2Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x2.name = SubgroupBroadcastFirstActiveThread_UInt16x2_name;
    SubgroupBroadcastFirstActiveThread_UInt16x2.backendIndex = 2018;
    SubgroupBroadcastFirstActiveThread_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x2.parameters = SubgroupBroadcastFirstActiveThread_UInt16x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x2_value)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x2)->signature = "subgroupBroadcastFirstActiveThread(u16x2) u16x2"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x2)->name = "subgroupBroadcastFirstActiveThread(u16x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x2)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u16x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// subgroupBroadcastFirstActiveThread with UInt16x3
    SubgroupBroadcastFirstActiveThread_UInt16x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x3_value.type = Type::FullType{ UInt16x3Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x3.name = SubgroupBroadcastFirstActiveThread_UInt16x3_name;
    SubgroupBroadcastFirstActiveThread_UInt16x3.backendIndex = 2019;
    SubgroupBroadcastFirstActiveThread_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x3.parameters = SubgroupBroadcastFirstActiveThread_UInt16x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x3_value)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x3)->signature = "subgroupBroadcastFirstActiveThread(u16x3) u16x3"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x3)->name = "subgroupBroadcastFirstActiveThread(u16x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x3)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u16x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// subgroupBroadcastFirstActiveThread with UInt16x4
    SubgroupBroadcastFirstActiveThread_UInt16x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x4_value.type = Type::FullType{ UInt16x4Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x4.name = SubgroupBroadcastFirstActiveThread_UInt16x4_name;
    SubgroupBroadcastFirstActiveThread_UInt16x4.backendIndex = 2020;
    SubgroupBroadcastFirstActiveThread_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x4.parameters = SubgroupBroadcastFirstActiveThread_UInt16x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x4_value)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x4)->signature = "subgroupBroadcastFirstActiveThread(u16x4) u16x4"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x4)->name = "subgroupBroadcastFirstActiveThread(u16x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x4)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u16x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// subgroupBallot with Bool8
    SubgroupBallot_predicate.name = "predicate"_c;
    SubgroupBallot_predicate.type = Type::FullType{ Bool8Type.name };
    SubgroupBallot.documentation = "Constructs a 128 bit subgroup thread mask to the value of the predicate argument for each active thread"_c;
    SubgroupBallot.name = SubgroupBallot_name;
    SubgroupBallot.backendIndex = 2021;
    SubgroupBallot.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupBallot.parameters = SubgroupBallot_args;
    Symbol::Resolved(&SubgroupBallot_predicate)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&SubgroupBallot)->signature = "subgroupBallot(b8) u32x4"_c;
    Symbol::Resolved(&SubgroupBallot)->name = "subgroupBallot(b8)"_c;
    Symbol::Resolved(&SubgroupBallot)->nameWithVarNames = "subgroupBallot(predicate : b8)"_c;
    Symbol::Resolved(&SubgroupBallot)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupInverseBallot with Bool8
    SubgroupInverseBallot_predicate.name = "predicate"_c;
    SubgroupInverseBallot_predicate.type = Type::FullType{ Bool8Type.name };
    SubgroupInverseBallot.documentation = "Constructs a 128 bit subgroup thread mask to the inverse of the value of the predicate argument for each active thread"_c;
    SubgroupInverseBallot.name = SubgroupInverseBallot_name;
    SubgroupInverseBallot.backendIndex = 2022;
    SubgroupInverseBallot.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupInverseBallot.parameters = SubgroupInverseBallot_args;
    Symbol::Resolved(&SubgroupInverseBallot_predicate)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&SubgroupInverseBallot)->signature = "subgroupInverseBallot(b8) u32x4"_c;
    Symbol::Resolved(&SubgroupInverseBallot)->name = "subgroupInverseBallot(b8)"_c;
    Symbol::Resolved(&SubgroupInverseBallot)->nameWithVarNames = "subgroupInverseBallot(predicate : b8)"_c;
    Symbol::Resolved(&SubgroupInverseBallot)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupBallotBitCount with UInt32x4
    SubgroupBallotBitCount_mask.name = "value"_c;
    SubgroupBallotBitCount_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotBitCount.documentation = "Returns the number of bits set to 1 in a 128 bit subgroup thread mask"_c;
    SubgroupBallotBitCount.name = SubgroupBallotBitCount_name;
    SubgroupBallotBitCount.backendIndex = 2023;
    SubgroupBallotBitCount.returnType = Type::FullType { UInt32Type.name };
    SubgroupBallotBitCount.parameters = SubgroupBallotBitCount_args;
    Symbol::Resolved(&SubgroupBallotBitCount_mask)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupBallotBitCount)->signature = "subgroupBallotBitCount(u32x4) u32"_c;
    Symbol::Resolved(&SubgroupBallotBitCount)->name = "subgroupBallotBitCount(u32x4)"_c;
    Symbol::Resolved(&SubgroupBallotBitCount)->nameWithVarNames = "subgroupBallotBitCount(value : u32x4)"_c;
    Symbol::Resolved(&SubgroupBallotBitCount)->returnTypeSymbol = &UInt32Type;

    /// subgroupBallotFirstOne with UInt32x4
    SubgroupBallotFirstOne_mask.name = "value"_c;
    SubgroupBallotFirstOne_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotFirstOne.documentation = "Returns the first one (ctz) in a 128 bit subgroup thread mask"_c;
    SubgroupBallotFirstOne.name = SubgroupBallotFirstOne_name;
    SubgroupBallotFirstOne.backendIndex = 2024;
    SubgroupBallotFirstOne.returnType = Type::FullType { UInt32Type.name };
    SubgroupBallotFirstOne.parameters = SubgroupBallotFirstOne_args;
    Symbol::Resolved(&SubgroupBallotFirstOne_mask)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupBallotFirstOne)->signature = "subgroupBallotFirstOne(u32x4) u32"_c;
    Symbol::Resolved(&SubgroupBallotFirstOne)->name = "subgroupBallotFirstOne(u32x4)"_c;
    Symbol::Resolved(&SubgroupBallotFirstOne)->nameWithVarNames = "subgroupBallotFirstOne(value : u32x4)"_c;
    Symbol::Resolved(&SubgroupBallotFirstOne)->returnTypeSymbol = &UInt32Type;

    /// subgroupBallotLastOne with UInt32x4
    SubgroupBallotLastOne_mask.name = "value"_c;
    SubgroupBallotLastOne_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotLastOne.documentation = "Returns the last one (clz) in a 128 bit subgroup thread mask"_c;
    SubgroupBallotLastOne.name = SubgroupBallotLastOne_name;
    SubgroupBallotLastOne.backendIndex = 2025;
    SubgroupBallotLastOne.returnType = Type::FullType { UInt32Type.name };
    SubgroupBallotLastOne.parameters = SubgroupBallotLastOne_args;
    Symbol::Resolved(&SubgroupBallotLastOne_mask)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupBallotLastOne)->signature = "subgroupBallotLastOne(u32x4) u32"_c;
    Symbol::Resolved(&SubgroupBallotLastOne)->name = "subgroupBallotLastOne(u32x4)"_c;
    Symbol::Resolved(&SubgroupBallotLastOne)->nameWithVarNames = "subgroupBallotLastOne(value : u32x4)"_c;
    Symbol::Resolved(&SubgroupBallotLastOne)->returnTypeSymbol = &UInt32Type;

    /// subgroupBallotBit with UInt32x4, UInt32
    SubgroupBallotBit_mask.name = "mask"_c;
    SubgroupBallotBit_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotBit_index.name = "index"_c;
    SubgroupBallotBit_index.type = Type::FullType{ UInt32Type.name };
    SubgroupBallotBit_index.type.literal = true;
    SubgroupBallotBit.documentation = "Extracts a specific bit from a 128 bit subgroup thread mask"_c;
    SubgroupBallotBit.name = SubgroupBallotBit_name;
    SubgroupBallotBit.backendIndex = 2026;
    SubgroupBallotBit.returnType = Type::FullType { UInt32Type.name };
    SubgroupBallotBit.parameters = SubgroupBallotBit_args;
    Symbol::Resolved(&SubgroupBallotBit_mask)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupBallotBit_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupBallotBit)->signature = "subgroupBallotBit(u32x4,literal u32) u32"_c;
    Symbol::Resolved(&SubgroupBallotBit)->name = "subgroupBallotBit(u32x4,literal u32)"_c;
    Symbol::Resolved(&SubgroupBallotBit)->nameWithVarNames = "subgroupBallotBit(mask : u32x4, index : literal u32)"_c;
    Symbol::Resolved(&SubgroupBallotBit)->returnTypeSymbol = &UInt32Type;

    /// subgroupSwapDiagonal with Float32
    SubgroupSwapDiagonal_Float32_value.name = "value"_c;
    SubgroupSwapDiagonal_Float32_value.type = Type::FullType{ Float32Type.name };
    SubgroupSwapDiagonal_Float32.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float32.name = SubgroupSwapDiagonal_Float32_name;
    SubgroupSwapDiagonal_Float32.backendIndex = 2027;
    SubgroupSwapDiagonal_Float32.returnType = Type::FullType { Float32Type.name };
    SubgroupSwapDiagonal_Float32.parameters = SubgroupSwapDiagonal_Float32_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32)->signature = "subgroupSwapDiagonal(f32) f32"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32)->name = "subgroupSwapDiagonal(f32)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32)->nameWithVarNames = "subgroupSwapDiagonal(value : f32)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32)->returnTypeSymbol = &Float32Type;

    /// subgroupSwapDiagonal with Float32x2
    SubgroupSwapDiagonal_Float32x2_value.name = "value"_c;
    SubgroupSwapDiagonal_Float32x2_value.type = Type::FullType{ Float32x2Type.name };
    SubgroupSwapDiagonal_Float32x2.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float32x2.name = SubgroupSwapDiagonal_Float32x2_name;
    SubgroupSwapDiagonal_Float32x2.backendIndex = 2028;
    SubgroupSwapDiagonal_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    SubgroupSwapDiagonal_Float32x2.parameters = SubgroupSwapDiagonal_Float32x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2_value)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2)->signature = "subgroupSwapDiagonal(f32x2) f32x2"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2)->name = "subgroupSwapDiagonal(f32x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2)->nameWithVarNames = "subgroupSwapDiagonal(value : f32x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// subgroupSwapDiagonal with Float32x3
    SubgroupSwapDiagonal_Float32x3_value.name = "value"_c;
    SubgroupSwapDiagonal_Float32x3_value.type = Type::FullType{ Float32x3Type.name };
    SubgroupSwapDiagonal_Float32x3.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float32x3.name = SubgroupSwapDiagonal_Float32x3_name;
    SubgroupSwapDiagonal_Float32x3.backendIndex = 2029;
    SubgroupSwapDiagonal_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    SubgroupSwapDiagonal_Float32x3.parameters = SubgroupSwapDiagonal_Float32x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3_value)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3)->signature = "subgroupSwapDiagonal(f32x3) f32x3"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3)->name = "subgroupSwapDiagonal(f32x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3)->nameWithVarNames = "subgroupSwapDiagonal(value : f32x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// subgroupSwapDiagonal with Float32x4
    SubgroupSwapDiagonal_Float32x4_value.name = "value"_c;
    SubgroupSwapDiagonal_Float32x4_value.type = Type::FullType{ Float32x4Type.name };
    SubgroupSwapDiagonal_Float32x4.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float32x4.name = SubgroupSwapDiagonal_Float32x4_name;
    SubgroupSwapDiagonal_Float32x4.backendIndex = 2030;
    SubgroupSwapDiagonal_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    SubgroupSwapDiagonal_Float32x4.parameters = SubgroupSwapDiagonal_Float32x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4)->signature = "subgroupSwapDiagonal(f32x4) f32x4"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4)->name = "subgroupSwapDiagonal(f32x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4)->nameWithVarNames = "subgroupSwapDiagonal(value : f32x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// subgroupSwapDiagonal with Float16
    SubgroupSwapDiagonal_Float16_value.name = "value"_c;
    SubgroupSwapDiagonal_Float16_value.type = Type::FullType{ Float16Type.name };
    SubgroupSwapDiagonal_Float16.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float16.name = SubgroupSwapDiagonal_Float16_name;
    SubgroupSwapDiagonal_Float16.backendIndex = 2031;
    SubgroupSwapDiagonal_Float16.returnType = Type::FullType { Float16Type.name };
    SubgroupSwapDiagonal_Float16.parameters = SubgroupSwapDiagonal_Float16_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16)->signature = "subgroupSwapDiagonal(f16) f16"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16)->name = "subgroupSwapDiagonal(f16)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16)->nameWithVarNames = "subgroupSwapDiagonal(value : f16)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16)->returnTypeSymbol = &Float16Type;

    /// subgroupSwapDiagonal with Float16x2
    SubgroupSwapDiagonal_Float16x2_value.name = "value"_c;
    SubgroupSwapDiagonal_Float16x2_value.type = Type::FullType{ Float16x2Type.name };
    SubgroupSwapDiagonal_Float16x2.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float16x2.name = SubgroupSwapDiagonal_Float16x2_name;
    SubgroupSwapDiagonal_Float16x2.backendIndex = 2032;
    SubgroupSwapDiagonal_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    SubgroupSwapDiagonal_Float16x2.parameters = SubgroupSwapDiagonal_Float16x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2_value)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2)->signature = "subgroupSwapDiagonal(f16x2) f16x2"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2)->name = "subgroupSwapDiagonal(f16x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2)->nameWithVarNames = "subgroupSwapDiagonal(value : f16x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// subgroupSwapDiagonal with Float16x3
    SubgroupSwapDiagonal_Float16x3_value.name = "value"_c;
    SubgroupSwapDiagonal_Float16x3_value.type = Type::FullType{ Float16x3Type.name };
    SubgroupSwapDiagonal_Float16x3.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float16x3.name = SubgroupSwapDiagonal_Float16x3_name;
    SubgroupSwapDiagonal_Float16x3.backendIndex = 2033;
    SubgroupSwapDiagonal_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    SubgroupSwapDiagonal_Float16x3.parameters = SubgroupSwapDiagonal_Float16x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3_value)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3)->signature = "subgroupSwapDiagonal(f16x3) f16x3"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3)->name = "subgroupSwapDiagonal(f16x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3)->nameWithVarNames = "subgroupSwapDiagonal(value : f16x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// subgroupSwapDiagonal with Float16x4
    SubgroupSwapDiagonal_Float16x4_value.name = "value"_c;
    SubgroupSwapDiagonal_Float16x4_value.type = Type::FullType{ Float16x4Type.name };
    SubgroupSwapDiagonal_Float16x4.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float16x4.name = SubgroupSwapDiagonal_Float16x4_name;
    SubgroupSwapDiagonal_Float16x4.backendIndex = 2034;
    SubgroupSwapDiagonal_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    SubgroupSwapDiagonal_Float16x4.parameters = SubgroupSwapDiagonal_Float16x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4_value)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4)->signature = "subgroupSwapDiagonal(f16x4) f16x4"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4)->name = "subgroupSwapDiagonal(f16x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4)->nameWithVarNames = "subgroupSwapDiagonal(value : f16x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// subgroupSwapDiagonal with Int32
    SubgroupSwapDiagonal_Int32_value.name = "value"_c;
    SubgroupSwapDiagonal_Int32_value.type = Type::FullType{ Int32Type.name };
    SubgroupSwapDiagonal_Int32.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int32.name = SubgroupSwapDiagonal_Int32_name;
    SubgroupSwapDiagonal_Int32.backendIndex = 2035;
    SubgroupSwapDiagonal_Int32.returnType = Type::FullType { Int32Type.name };
    SubgroupSwapDiagonal_Int32.parameters = SubgroupSwapDiagonal_Int32_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32)->signature = "subgroupSwapDiagonal(i32) i32"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32)->name = "subgroupSwapDiagonal(i32)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32)->nameWithVarNames = "subgroupSwapDiagonal(value : i32)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32)->returnTypeSymbol = &Int32Type;

    /// subgroupSwapDiagonal with Int32x2
    SubgroupSwapDiagonal_Int32x2_value.name = "value"_c;
    SubgroupSwapDiagonal_Int32x2_value.type = Type::FullType{ Int32x2Type.name };
    SubgroupSwapDiagonal_Int32x2.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int32x2.name = SubgroupSwapDiagonal_Int32x2_name;
    SubgroupSwapDiagonal_Int32x2.backendIndex = 2036;
    SubgroupSwapDiagonal_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    SubgroupSwapDiagonal_Int32x2.parameters = SubgroupSwapDiagonal_Int32x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2_value)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2)->signature = "subgroupSwapDiagonal(i32x2) i32x2"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2)->name = "subgroupSwapDiagonal(i32x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2)->nameWithVarNames = "subgroupSwapDiagonal(value : i32x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// subgroupSwapDiagonal with Int32x3
    SubgroupSwapDiagonal_Int32x3_value.name = "value"_c;
    SubgroupSwapDiagonal_Int32x3_value.type = Type::FullType{ Int32x3Type.name };
    SubgroupSwapDiagonal_Int32x3.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int32x3.name = SubgroupSwapDiagonal_Int32x3_name;
    SubgroupSwapDiagonal_Int32x3.backendIndex = 2037;
    SubgroupSwapDiagonal_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    SubgroupSwapDiagonal_Int32x3.parameters = SubgroupSwapDiagonal_Int32x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3_value)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3)->signature = "subgroupSwapDiagonal(i32x3) i32x3"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3)->name = "subgroupSwapDiagonal(i32x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3)->nameWithVarNames = "subgroupSwapDiagonal(value : i32x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// subgroupSwapDiagonal with Int32x4
    SubgroupSwapDiagonal_Int32x4_value.name = "value"_c;
    SubgroupSwapDiagonal_Int32x4_value.type = Type::FullType{ Int32x4Type.name };
    SubgroupSwapDiagonal_Int32x4.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int32x4.name = SubgroupSwapDiagonal_Int32x4_name;
    SubgroupSwapDiagonal_Int32x4.backendIndex = 2038;
    SubgroupSwapDiagonal_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    SubgroupSwapDiagonal_Int32x4.parameters = SubgroupSwapDiagonal_Int32x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4_value)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4)->signature = "subgroupSwapDiagonal(i32x4) i32x4"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4)->name = "subgroupSwapDiagonal(i32x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4)->nameWithVarNames = "subgroupSwapDiagonal(value : i32x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// subgroupSwapDiagonal with Int16
    SubgroupSwapDiagonal_Int16_value.name = "value"_c;
    SubgroupSwapDiagonal_Int16_value.type = Type::FullType{ Int16Type.name };
    SubgroupSwapDiagonal_Int16.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int16.name = SubgroupSwapDiagonal_Int16_name;
    SubgroupSwapDiagonal_Int16.backendIndex = 2039;
    SubgroupSwapDiagonal_Int16.returnType = Type::FullType { Int16Type.name };
    SubgroupSwapDiagonal_Int16.parameters = SubgroupSwapDiagonal_Int16_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16)->signature = "subgroupSwapDiagonal(i16) i16"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16)->name = "subgroupSwapDiagonal(i16)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16)->nameWithVarNames = "subgroupSwapDiagonal(value : i16)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16)->returnTypeSymbol = &Int16Type;

    /// subgroupSwapDiagonal with Int16x2
    SubgroupSwapDiagonal_Int16x2_value.name = "value"_c;
    SubgroupSwapDiagonal_Int16x2_value.type = Type::FullType{ Int16x2Type.name };
    SubgroupSwapDiagonal_Int16x2.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int16x2.name = SubgroupSwapDiagonal_Int16x2_name;
    SubgroupSwapDiagonal_Int16x2.backendIndex = 2040;
    SubgroupSwapDiagonal_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    SubgroupSwapDiagonal_Int16x2.parameters = SubgroupSwapDiagonal_Int16x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2_value)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2)->signature = "subgroupSwapDiagonal(i16x2) i16x2"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2)->name = "subgroupSwapDiagonal(i16x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2)->nameWithVarNames = "subgroupSwapDiagonal(value : i16x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// subgroupSwapDiagonal with Int16x3
    SubgroupSwapDiagonal_Int16x3_value.name = "value"_c;
    SubgroupSwapDiagonal_Int16x3_value.type = Type::FullType{ Int16x3Type.name };
    SubgroupSwapDiagonal_Int16x3.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int16x3.name = SubgroupSwapDiagonal_Int16x3_name;
    SubgroupSwapDiagonal_Int16x3.backendIndex = 2041;
    SubgroupSwapDiagonal_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    SubgroupSwapDiagonal_Int16x3.parameters = SubgroupSwapDiagonal_Int16x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3_value)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3)->signature = "subgroupSwapDiagonal(i16x3) i16x3"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3)->name = "subgroupSwapDiagonal(i16x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3)->nameWithVarNames = "subgroupSwapDiagonal(value : i16x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// subgroupSwapDiagonal with Int16x4
    SubgroupSwapDiagonal_Int16x4_value.name = "value"_c;
    SubgroupSwapDiagonal_Int16x4_value.type = Type::FullType{ Int16x4Type.name };
    SubgroupSwapDiagonal_Int16x4.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int16x4.name = SubgroupSwapDiagonal_Int16x4_name;
    SubgroupSwapDiagonal_Int16x4.backendIndex = 2042;
    SubgroupSwapDiagonal_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    SubgroupSwapDiagonal_Int16x4.parameters = SubgroupSwapDiagonal_Int16x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4_value)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4)->signature = "subgroupSwapDiagonal(i16x4) i16x4"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4)->name = "subgroupSwapDiagonal(i16x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4)->nameWithVarNames = "subgroupSwapDiagonal(value : i16x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// subgroupSwapDiagonal with UInt32
    SubgroupSwapDiagonal_UInt32_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt32_value.type = Type::FullType{ UInt32Type.name };
    SubgroupSwapDiagonal_UInt32.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt32.name = SubgroupSwapDiagonal_UInt32_name;
    SubgroupSwapDiagonal_UInt32.backendIndex = 2043;
    SubgroupSwapDiagonal_UInt32.returnType = Type::FullType { UInt32Type.name };
    SubgroupSwapDiagonal_UInt32.parameters = SubgroupSwapDiagonal_UInt32_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32)->signature = "subgroupSwapDiagonal(u32) u32"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32)->name = "subgroupSwapDiagonal(u32)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32)->nameWithVarNames = "subgroupSwapDiagonal(value : u32)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32)->returnTypeSymbol = &UInt32Type;

    /// subgroupSwapDiagonal with UInt32x2
    SubgroupSwapDiagonal_UInt32x2_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt32x2_value.type = Type::FullType{ UInt32x2Type.name };
    SubgroupSwapDiagonal_UInt32x2.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt32x2.name = SubgroupSwapDiagonal_UInt32x2_name;
    SubgroupSwapDiagonal_UInt32x2.backendIndex = 2044;
    SubgroupSwapDiagonal_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    SubgroupSwapDiagonal_UInt32x2.parameters = SubgroupSwapDiagonal_UInt32x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2_value)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2)->signature = "subgroupSwapDiagonal(u32x2) u32x2"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2)->name = "subgroupSwapDiagonal(u32x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2)->nameWithVarNames = "subgroupSwapDiagonal(value : u32x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// subgroupSwapDiagonal with UInt32x3
    SubgroupSwapDiagonal_UInt32x3_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt32x3_value.type = Type::FullType{ UInt32x3Type.name };
    SubgroupSwapDiagonal_UInt32x3.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt32x3.name = SubgroupSwapDiagonal_UInt32x3_name;
    SubgroupSwapDiagonal_UInt32x3.backendIndex = 2045;
    SubgroupSwapDiagonal_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    SubgroupSwapDiagonal_UInt32x3.parameters = SubgroupSwapDiagonal_UInt32x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3_value)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3)->signature = "subgroupSwapDiagonal(u32x3) u32x3"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3)->name = "subgroupSwapDiagonal(u32x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3)->nameWithVarNames = "subgroupSwapDiagonal(value : u32x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupSwapDiagonal with UInt32x4
    SubgroupSwapDiagonal_UInt32x4_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt32x4_value.type = Type::FullType{ UInt32x4Type.name };
    SubgroupSwapDiagonal_UInt32x4.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt32x4.name = SubgroupSwapDiagonal_UInt32x4_name;
    SubgroupSwapDiagonal_UInt32x4.backendIndex = 2046;
    SubgroupSwapDiagonal_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupSwapDiagonal_UInt32x4.parameters = SubgroupSwapDiagonal_UInt32x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4_value)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4)->signature = "subgroupSwapDiagonal(u32x4) u32x4"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4)->name = "subgroupSwapDiagonal(u32x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4)->nameWithVarNames = "subgroupSwapDiagonal(value : u32x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupSwapDiagonal with UInt16
    SubgroupSwapDiagonal_UInt16_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt16_value.type = Type::FullType{ UInt16Type.name };
    SubgroupSwapDiagonal_UInt16.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt16.name = SubgroupSwapDiagonal_UInt16_name;
    SubgroupSwapDiagonal_UInt16.backendIndex = 2047;
    SubgroupSwapDiagonal_UInt16.returnType = Type::FullType { UInt16Type.name };
    SubgroupSwapDiagonal_UInt16.parameters = SubgroupSwapDiagonal_UInt16_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16)->signature = "subgroupSwapDiagonal(u16) u16"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16)->name = "subgroupSwapDiagonal(u16)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16)->nameWithVarNames = "subgroupSwapDiagonal(value : u16)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16)->returnTypeSymbol = &UInt16Type;

    /// subgroupSwapDiagonal with UInt16x2
    SubgroupSwapDiagonal_UInt16x2_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt16x2_value.type = Type::FullType{ UInt16x2Type.name };
    SubgroupSwapDiagonal_UInt16x2.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt16x2.name = SubgroupSwapDiagonal_UInt16x2_name;
    SubgroupSwapDiagonal_UInt16x2.backendIndex = 2048;
    SubgroupSwapDiagonal_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    SubgroupSwapDiagonal_UInt16x2.parameters = SubgroupSwapDiagonal_UInt16x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2_value)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2)->signature = "subgroupSwapDiagonal(u16x2) u16x2"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2)->name = "subgroupSwapDiagonal(u16x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2)->nameWithVarNames = "subgroupSwapDiagonal(value : u16x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// subgroupSwapDiagonal with UInt16x3
    SubgroupSwapDiagonal_UInt16x3_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt16x3_value.type = Type::FullType{ UInt16x3Type.name };
    SubgroupSwapDiagonal_UInt16x3.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt16x3.name = SubgroupSwapDiagonal_UInt16x3_name;
    SubgroupSwapDiagonal_UInt16x3.backendIndex = 2049;
    SubgroupSwapDiagonal_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    SubgroupSwapDiagonal_UInt16x3.parameters = SubgroupSwapDiagonal_UInt16x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3_value)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3)->signature = "subgroupSwapDiagonal(u16x3) u16x3"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3)->name = "subgroupSwapDiagonal(u16x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3)->nameWithVarNames = "subgroupSwapDiagonal(value : u16x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// subgroupSwapDiagonal with UInt16x4
    SubgroupSwapDiagonal_UInt16x4_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt16x4_value.type = Type::FullType{ UInt16x4Type.name };
    SubgroupSwapDiagonal_UInt16x4.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt16x4.name = SubgroupSwapDiagonal_UInt16x4_name;
    SubgroupSwapDiagonal_UInt16x4.backendIndex = 2050;
    SubgroupSwapDiagonal_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    SubgroupSwapDiagonal_UInt16x4.parameters = SubgroupSwapDiagonal_UInt16x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4_value)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4)->signature = "subgroupSwapDiagonal(u16x4) u16x4"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4)->name = "subgroupSwapDiagonal(u16x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4)->nameWithVarNames = "subgroupSwapDiagonal(value : u16x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// subgroupSwapVertical with Float32
    SubgroupSwapVertical_Float32_value.name = "value"_c;
    SubgroupSwapVertical_Float32_value.type = Type::FullType{ Float32Type.name };
    SubgroupSwapVertical_Float32.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float32.name = SubgroupSwapVertical_Float32_name;
    SubgroupSwapVertical_Float32.backendIndex = 2051;
    SubgroupSwapVertical_Float32.returnType = Type::FullType { Float32Type.name };
    SubgroupSwapVertical_Float32.parameters = SubgroupSwapVertical_Float32_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32)->signature = "subgroupSwapVertical(f32) f32"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32)->name = "subgroupSwapVertical(f32)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32)->nameWithVarNames = "subgroupSwapVertical(value : f32)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32)->returnTypeSymbol = &Float32Type;

    /// subgroupSwapVertical with Float32x2
    SubgroupSwapVertical_Float32x2_value.name = "value"_c;
    SubgroupSwapVertical_Float32x2_value.type = Type::FullType{ Float32x2Type.name };
    SubgroupSwapVertical_Float32x2.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float32x2.name = SubgroupSwapVertical_Float32x2_name;
    SubgroupSwapVertical_Float32x2.backendIndex = 2052;
    SubgroupSwapVertical_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    SubgroupSwapVertical_Float32x2.parameters = SubgroupSwapVertical_Float32x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2_value)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2)->signature = "subgroupSwapVertical(f32x2) f32x2"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2)->name = "subgroupSwapVertical(f32x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2)->nameWithVarNames = "subgroupSwapVertical(value : f32x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// subgroupSwapVertical with Float32x3
    SubgroupSwapVertical_Float32x3_value.name = "value"_c;
    SubgroupSwapVertical_Float32x3_value.type = Type::FullType{ Float32x3Type.name };
    SubgroupSwapVertical_Float32x3.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float32x3.name = SubgroupSwapVertical_Float32x3_name;
    SubgroupSwapVertical_Float32x3.backendIndex = 2053;
    SubgroupSwapVertical_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    SubgroupSwapVertical_Float32x3.parameters = SubgroupSwapVertical_Float32x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3_value)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3)->signature = "subgroupSwapVertical(f32x3) f32x3"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3)->name = "subgroupSwapVertical(f32x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3)->nameWithVarNames = "subgroupSwapVertical(value : f32x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// subgroupSwapVertical with Float32x4
    SubgroupSwapVertical_Float32x4_value.name = "value"_c;
    SubgroupSwapVertical_Float32x4_value.type = Type::FullType{ Float32x4Type.name };
    SubgroupSwapVertical_Float32x4.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float32x4.name = SubgroupSwapVertical_Float32x4_name;
    SubgroupSwapVertical_Float32x4.backendIndex = 2054;
    SubgroupSwapVertical_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    SubgroupSwapVertical_Float32x4.parameters = SubgroupSwapVertical_Float32x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4)->signature = "subgroupSwapVertical(f32x4) f32x4"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4)->name = "subgroupSwapVertical(f32x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4)->nameWithVarNames = "subgroupSwapVertical(value : f32x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// subgroupSwapVertical with Float16
    SubgroupSwapVertical_Float16_value.name = "value"_c;
    SubgroupSwapVertical_Float16_value.type = Type::FullType{ Float16Type.name };
    SubgroupSwapVertical_Float16.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float16.name = SubgroupSwapVertical_Float16_name;
    SubgroupSwapVertical_Float16.backendIndex = 2055;
    SubgroupSwapVertical_Float16.returnType = Type::FullType { Float16Type.name };
    SubgroupSwapVertical_Float16.parameters = SubgroupSwapVertical_Float16_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16)->signature = "subgroupSwapVertical(f16) f16"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16)->name = "subgroupSwapVertical(f16)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16)->nameWithVarNames = "subgroupSwapVertical(value : f16)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16)->returnTypeSymbol = &Float16Type;

    /// subgroupSwapVertical with Float16x2
    SubgroupSwapVertical_Float16x2_value.name = "value"_c;
    SubgroupSwapVertical_Float16x2_value.type = Type::FullType{ Float16x2Type.name };
    SubgroupSwapVertical_Float16x2.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float16x2.name = SubgroupSwapVertical_Float16x2_name;
    SubgroupSwapVertical_Float16x2.backendIndex = 2056;
    SubgroupSwapVertical_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    SubgroupSwapVertical_Float16x2.parameters = SubgroupSwapVertical_Float16x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2_value)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2)->signature = "subgroupSwapVertical(f16x2) f16x2"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2)->name = "subgroupSwapVertical(f16x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2)->nameWithVarNames = "subgroupSwapVertical(value : f16x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// subgroupSwapVertical with Float16x3
    SubgroupSwapVertical_Float16x3_value.name = "value"_c;
    SubgroupSwapVertical_Float16x3_value.type = Type::FullType{ Float16x3Type.name };
    SubgroupSwapVertical_Float16x3.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float16x3.name = SubgroupSwapVertical_Float16x3_name;
    SubgroupSwapVertical_Float16x3.backendIndex = 2057;
    SubgroupSwapVertical_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    SubgroupSwapVertical_Float16x3.parameters = SubgroupSwapVertical_Float16x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3_value)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3)->signature = "subgroupSwapVertical(f16x3) f16x3"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3)->name = "subgroupSwapVertical(f16x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3)->nameWithVarNames = "subgroupSwapVertical(value : f16x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// subgroupSwapVertical with Float16x4
    SubgroupSwapVertical_Float16x4_value.name = "value"_c;
    SubgroupSwapVertical_Float16x4_value.type = Type::FullType{ Float16x4Type.name };
    SubgroupSwapVertical_Float16x4.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float16x4.name = SubgroupSwapVertical_Float16x4_name;
    SubgroupSwapVertical_Float16x4.backendIndex = 2058;
    SubgroupSwapVertical_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    SubgroupSwapVertical_Float16x4.parameters = SubgroupSwapVertical_Float16x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4_value)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4)->signature = "subgroupSwapVertical(f16x4) f16x4"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4)->name = "subgroupSwapVertical(f16x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4)->nameWithVarNames = "subgroupSwapVertical(value : f16x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// subgroupSwapVertical with Int32
    SubgroupSwapVertical_Int32_value.name = "value"_c;
    SubgroupSwapVertical_Int32_value.type = Type::FullType{ Int32Type.name };
    SubgroupSwapVertical_Int32.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int32.name = SubgroupSwapVertical_Int32_name;
    SubgroupSwapVertical_Int32.backendIndex = 2059;
    SubgroupSwapVertical_Int32.returnType = Type::FullType { Int32Type.name };
    SubgroupSwapVertical_Int32.parameters = SubgroupSwapVertical_Int32_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32)->signature = "subgroupSwapVertical(i32) i32"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32)->name = "subgroupSwapVertical(i32)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32)->nameWithVarNames = "subgroupSwapVertical(value : i32)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32)->returnTypeSymbol = &Int32Type;

    /// subgroupSwapVertical with Int32x2
    SubgroupSwapVertical_Int32x2_value.name = "value"_c;
    SubgroupSwapVertical_Int32x2_value.type = Type::FullType{ Int32x2Type.name };
    SubgroupSwapVertical_Int32x2.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int32x2.name = SubgroupSwapVertical_Int32x2_name;
    SubgroupSwapVertical_Int32x2.backendIndex = 2060;
    SubgroupSwapVertical_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    SubgroupSwapVertical_Int32x2.parameters = SubgroupSwapVertical_Int32x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2_value)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2)->signature = "subgroupSwapVertical(i32x2) i32x2"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2)->name = "subgroupSwapVertical(i32x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2)->nameWithVarNames = "subgroupSwapVertical(value : i32x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// subgroupSwapVertical with Int32x3
    SubgroupSwapVertical_Int32x3_value.name = "value"_c;
    SubgroupSwapVertical_Int32x3_value.type = Type::FullType{ Int32x3Type.name };
    SubgroupSwapVertical_Int32x3.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int32x3.name = SubgroupSwapVertical_Int32x3_name;
    SubgroupSwapVertical_Int32x3.backendIndex = 2061;
    SubgroupSwapVertical_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    SubgroupSwapVertical_Int32x3.parameters = SubgroupSwapVertical_Int32x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3_value)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3)->signature = "subgroupSwapVertical(i32x3) i32x3"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3)->name = "subgroupSwapVertical(i32x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3)->nameWithVarNames = "subgroupSwapVertical(value : i32x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// subgroupSwapVertical with Int32x4
    SubgroupSwapVertical_Int32x4_value.name = "value"_c;
    SubgroupSwapVertical_Int32x4_value.type = Type::FullType{ Int32x4Type.name };
    SubgroupSwapVertical_Int32x4.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int32x4.name = SubgroupSwapVertical_Int32x4_name;
    SubgroupSwapVertical_Int32x4.backendIndex = 2062;
    SubgroupSwapVertical_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    SubgroupSwapVertical_Int32x4.parameters = SubgroupSwapVertical_Int32x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4_value)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4)->signature = "subgroupSwapVertical(i32x4) i32x4"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4)->name = "subgroupSwapVertical(i32x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4)->nameWithVarNames = "subgroupSwapVertical(value : i32x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// subgroupSwapVertical with Int16
    SubgroupSwapVertical_Int16_value.name = "value"_c;
    SubgroupSwapVertical_Int16_value.type = Type::FullType{ Int16Type.name };
    SubgroupSwapVertical_Int16.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int16.name = SubgroupSwapVertical_Int16_name;
    SubgroupSwapVertical_Int16.backendIndex = 2063;
    SubgroupSwapVertical_Int16.returnType = Type::FullType { Int16Type.name };
    SubgroupSwapVertical_Int16.parameters = SubgroupSwapVertical_Int16_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16)->signature = "subgroupSwapVertical(i16) i16"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16)->name = "subgroupSwapVertical(i16)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16)->nameWithVarNames = "subgroupSwapVertical(value : i16)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16)->returnTypeSymbol = &Int16Type;

    /// subgroupSwapVertical with Int16x2
    SubgroupSwapVertical_Int16x2_value.name = "value"_c;
    SubgroupSwapVertical_Int16x2_value.type = Type::FullType{ Int16x2Type.name };
    SubgroupSwapVertical_Int16x2.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int16x2.name = SubgroupSwapVertical_Int16x2_name;
    SubgroupSwapVertical_Int16x2.backendIndex = 2064;
    SubgroupSwapVertical_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    SubgroupSwapVertical_Int16x2.parameters = SubgroupSwapVertical_Int16x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2_value)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2)->signature = "subgroupSwapVertical(i16x2) i16x2"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2)->name = "subgroupSwapVertical(i16x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2)->nameWithVarNames = "subgroupSwapVertical(value : i16x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// subgroupSwapVertical with Int16x3
    SubgroupSwapVertical_Int16x3_value.name = "value"_c;
    SubgroupSwapVertical_Int16x3_value.type = Type::FullType{ Int16x3Type.name };
    SubgroupSwapVertical_Int16x3.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int16x3.name = SubgroupSwapVertical_Int16x3_name;
    SubgroupSwapVertical_Int16x3.backendIndex = 2065;
    SubgroupSwapVertical_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    SubgroupSwapVertical_Int16x3.parameters = SubgroupSwapVertical_Int16x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3_value)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3)->signature = "subgroupSwapVertical(i16x3) i16x3"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3)->name = "subgroupSwapVertical(i16x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3)->nameWithVarNames = "subgroupSwapVertical(value : i16x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// subgroupSwapVertical with Int16x4
    SubgroupSwapVertical_Int16x4_value.name = "value"_c;
    SubgroupSwapVertical_Int16x4_value.type = Type::FullType{ Int16x4Type.name };
    SubgroupSwapVertical_Int16x4.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int16x4.name = SubgroupSwapVertical_Int16x4_name;
    SubgroupSwapVertical_Int16x4.backendIndex = 2066;
    SubgroupSwapVertical_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    SubgroupSwapVertical_Int16x4.parameters = SubgroupSwapVertical_Int16x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4_value)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4)->signature = "subgroupSwapVertical(i16x4) i16x4"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4)->name = "subgroupSwapVertical(i16x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4)->nameWithVarNames = "subgroupSwapVertical(value : i16x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// subgroupSwapVertical with UInt32
    SubgroupSwapVertical_UInt32_value.name = "value"_c;
    SubgroupSwapVertical_UInt32_value.type = Type::FullType{ UInt32Type.name };
    SubgroupSwapVertical_UInt32.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt32.name = SubgroupSwapVertical_UInt32_name;
    SubgroupSwapVertical_UInt32.backendIndex = 2067;
    SubgroupSwapVertical_UInt32.returnType = Type::FullType { UInt32Type.name };
    SubgroupSwapVertical_UInt32.parameters = SubgroupSwapVertical_UInt32_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32)->signature = "subgroupSwapVertical(u32) u32"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32)->name = "subgroupSwapVertical(u32)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32)->nameWithVarNames = "subgroupSwapVertical(value : u32)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32)->returnTypeSymbol = &UInt32Type;

    /// subgroupSwapVertical with UInt32x2
    SubgroupSwapVertical_UInt32x2_value.name = "value"_c;
    SubgroupSwapVertical_UInt32x2_value.type = Type::FullType{ UInt32x2Type.name };
    SubgroupSwapVertical_UInt32x2.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt32x2.name = SubgroupSwapVertical_UInt32x2_name;
    SubgroupSwapVertical_UInt32x2.backendIndex = 2068;
    SubgroupSwapVertical_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    SubgroupSwapVertical_UInt32x2.parameters = SubgroupSwapVertical_UInt32x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2_value)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2)->signature = "subgroupSwapVertical(u32x2) u32x2"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2)->name = "subgroupSwapVertical(u32x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2)->nameWithVarNames = "subgroupSwapVertical(value : u32x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// subgroupSwapVertical with UInt32x3
    SubgroupSwapVertical_UInt32x3_value.name = "value"_c;
    SubgroupSwapVertical_UInt32x3_value.type = Type::FullType{ UInt32x3Type.name };
    SubgroupSwapVertical_UInt32x3.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt32x3.name = SubgroupSwapVertical_UInt32x3_name;
    SubgroupSwapVertical_UInt32x3.backendIndex = 2069;
    SubgroupSwapVertical_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    SubgroupSwapVertical_UInt32x3.parameters = SubgroupSwapVertical_UInt32x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3_value)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3)->signature = "subgroupSwapVertical(u32x3) u32x3"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3)->name = "subgroupSwapVertical(u32x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3)->nameWithVarNames = "subgroupSwapVertical(value : u32x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupSwapVertical with UInt32x4
    SubgroupSwapVertical_UInt32x4_value.name = "value"_c;
    SubgroupSwapVertical_UInt32x4_value.type = Type::FullType{ UInt32x4Type.name };
    SubgroupSwapVertical_UInt32x4.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt32x4.name = SubgroupSwapVertical_UInt32x4_name;
    SubgroupSwapVertical_UInt32x4.backendIndex = 2070;
    SubgroupSwapVertical_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupSwapVertical_UInt32x4.parameters = SubgroupSwapVertical_UInt32x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4_value)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4)->signature = "subgroupSwapVertical(u32x4) u32x4"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4)->name = "subgroupSwapVertical(u32x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4)->nameWithVarNames = "subgroupSwapVertical(value : u32x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupSwapVertical with UInt16
    SubgroupSwapVertical_UInt16_value.name = "value"_c;
    SubgroupSwapVertical_UInt16_value.type = Type::FullType{ UInt16Type.name };
    SubgroupSwapVertical_UInt16.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt16.name = SubgroupSwapVertical_UInt16_name;
    SubgroupSwapVertical_UInt16.backendIndex = 2071;
    SubgroupSwapVertical_UInt16.returnType = Type::FullType { UInt16Type.name };
    SubgroupSwapVertical_UInt16.parameters = SubgroupSwapVertical_UInt16_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16)->signature = "subgroupSwapVertical(u16) u16"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16)->name = "subgroupSwapVertical(u16)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16)->nameWithVarNames = "subgroupSwapVertical(value : u16)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16)->returnTypeSymbol = &UInt16Type;

    /// subgroupSwapVertical with UInt16x2
    SubgroupSwapVertical_UInt16x2_value.name = "value"_c;
    SubgroupSwapVertical_UInt16x2_value.type = Type::FullType{ UInt16x2Type.name };
    SubgroupSwapVertical_UInt16x2.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt16x2.name = SubgroupSwapVertical_UInt16x2_name;
    SubgroupSwapVertical_UInt16x2.backendIndex = 2072;
    SubgroupSwapVertical_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    SubgroupSwapVertical_UInt16x2.parameters = SubgroupSwapVertical_UInt16x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2_value)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2)->signature = "subgroupSwapVertical(u16x2) u16x2"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2)->name = "subgroupSwapVertical(u16x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2)->nameWithVarNames = "subgroupSwapVertical(value : u16x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// subgroupSwapVertical with UInt16x3
    SubgroupSwapVertical_UInt16x3_value.name = "value"_c;
    SubgroupSwapVertical_UInt16x3_value.type = Type::FullType{ UInt16x3Type.name };
    SubgroupSwapVertical_UInt16x3.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt16x3.name = SubgroupSwapVertical_UInt16x3_name;
    SubgroupSwapVertical_UInt16x3.backendIndex = 2073;
    SubgroupSwapVertical_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    SubgroupSwapVertical_UInt16x3.parameters = SubgroupSwapVertical_UInt16x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3_value)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3)->signature = "subgroupSwapVertical(u16x3) u16x3"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3)->name = "subgroupSwapVertical(u16x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3)->nameWithVarNames = "subgroupSwapVertical(value : u16x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// subgroupSwapVertical with UInt16x4
    SubgroupSwapVertical_UInt16x4_value.name = "value"_c;
    SubgroupSwapVertical_UInt16x4_value.type = Type::FullType{ UInt16x4Type.name };
    SubgroupSwapVertical_UInt16x4.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt16x4.name = SubgroupSwapVertical_UInt16x4_name;
    SubgroupSwapVertical_UInt16x4.backendIndex = 2074;
    SubgroupSwapVertical_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    SubgroupSwapVertical_UInt16x4.parameters = SubgroupSwapVertical_UInt16x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4_value)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4)->signature = "subgroupSwapVertical(u16x4) u16x4"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4)->name = "subgroupSwapVertical(u16x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4)->nameWithVarNames = "subgroupSwapVertical(value : u16x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// subgroupSwapHorizontal with Float32
    SubgroupSwapHorizontal_Float32_value.name = "value"_c;
    SubgroupSwapHorizontal_Float32_value.type = Type::FullType{ Float32Type.name };
    SubgroupSwapHorizontal_Float32.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float32.name = SubgroupSwapHorizontal_Float32_name;
    SubgroupSwapHorizontal_Float32.backendIndex = 2075;
    SubgroupSwapHorizontal_Float32.returnType = Type::FullType { Float32Type.name };
    SubgroupSwapHorizontal_Float32.parameters = SubgroupSwapHorizontal_Float32_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32)->signature = "subgroupSwapHorizontal(f32) f32"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32)->name = "subgroupSwapHorizontal(f32)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32)->nameWithVarNames = "subgroupSwapHorizontal(value : f32)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32)->returnTypeSymbol = &Float32Type;

    /// subgroupSwapHorizontal with Float32x2
    SubgroupSwapHorizontal_Float32x2_value.name = "value"_c;
    SubgroupSwapHorizontal_Float32x2_value.type = Type::FullType{ Float32x2Type.name };
    SubgroupSwapHorizontal_Float32x2.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float32x2.name = SubgroupSwapHorizontal_Float32x2_name;
    SubgroupSwapHorizontal_Float32x2.backendIndex = 2076;
    SubgroupSwapHorizontal_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    SubgroupSwapHorizontal_Float32x2.parameters = SubgroupSwapHorizontal_Float32x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2_value)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2)->signature = "subgroupSwapHorizontal(f32x2) f32x2"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2)->name = "subgroupSwapHorizontal(f32x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2)->nameWithVarNames = "subgroupSwapHorizontal(value : f32x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// subgroupSwapHorizontal with Float32x3
    SubgroupSwapHorizontal_Float32x3_value.name = "value"_c;
    SubgroupSwapHorizontal_Float32x3_value.type = Type::FullType{ Float32x3Type.name };
    SubgroupSwapHorizontal_Float32x3.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float32x3.name = SubgroupSwapHorizontal_Float32x3_name;
    SubgroupSwapHorizontal_Float32x3.backendIndex = 2077;
    SubgroupSwapHorizontal_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    SubgroupSwapHorizontal_Float32x3.parameters = SubgroupSwapHorizontal_Float32x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3_value)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3)->signature = "subgroupSwapHorizontal(f32x3) f32x3"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3)->name = "subgroupSwapHorizontal(f32x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3)->nameWithVarNames = "subgroupSwapHorizontal(value : f32x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// subgroupSwapHorizontal with Float32x4
    SubgroupSwapHorizontal_Float32x4_value.name = "value"_c;
    SubgroupSwapHorizontal_Float32x4_value.type = Type::FullType{ Float32x4Type.name };
    SubgroupSwapHorizontal_Float32x4.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float32x4.name = SubgroupSwapHorizontal_Float32x4_name;
    SubgroupSwapHorizontal_Float32x4.backendIndex = 2078;
    SubgroupSwapHorizontal_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    SubgroupSwapHorizontal_Float32x4.parameters = SubgroupSwapHorizontal_Float32x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4)->signature = "subgroupSwapHorizontal(f32x4) f32x4"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4)->name = "subgroupSwapHorizontal(f32x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4)->nameWithVarNames = "subgroupSwapHorizontal(value : f32x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// subgroupSwapHorizontal with Float16
    SubgroupSwapHorizontal_Float16_value.name = "value"_c;
    SubgroupSwapHorizontal_Float16_value.type = Type::FullType{ Float16Type.name };
    SubgroupSwapHorizontal_Float16.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float16.name = SubgroupSwapHorizontal_Float16_name;
    SubgroupSwapHorizontal_Float16.backendIndex = 2079;
    SubgroupSwapHorizontal_Float16.returnType = Type::FullType { Float16Type.name };
    SubgroupSwapHorizontal_Float16.parameters = SubgroupSwapHorizontal_Float16_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16)->signature = "subgroupSwapHorizontal(f16) f16"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16)->name = "subgroupSwapHorizontal(f16)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16)->nameWithVarNames = "subgroupSwapHorizontal(value : f16)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16)->returnTypeSymbol = &Float16Type;

    /// subgroupSwapHorizontal with Float16x2
    SubgroupSwapHorizontal_Float16x2_value.name = "value"_c;
    SubgroupSwapHorizontal_Float16x2_value.type = Type::FullType{ Float16x2Type.name };
    SubgroupSwapHorizontal_Float16x2.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float16x2.name = SubgroupSwapHorizontal_Float16x2_name;
    SubgroupSwapHorizontal_Float16x2.backendIndex = 2080;
    SubgroupSwapHorizontal_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    SubgroupSwapHorizontal_Float16x2.parameters = SubgroupSwapHorizontal_Float16x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2_value)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2)->signature = "subgroupSwapHorizontal(f16x2) f16x2"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2)->name = "subgroupSwapHorizontal(f16x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2)->nameWithVarNames = "subgroupSwapHorizontal(value : f16x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// subgroupSwapHorizontal with Float16x3
    SubgroupSwapHorizontal_Float16x3_value.name = "value"_c;
    SubgroupSwapHorizontal_Float16x3_value.type = Type::FullType{ Float16x3Type.name };
    SubgroupSwapHorizontal_Float16x3.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float16x3.name = SubgroupSwapHorizontal_Float16x3_name;
    SubgroupSwapHorizontal_Float16x3.backendIndex = 2081;
    SubgroupSwapHorizontal_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    SubgroupSwapHorizontal_Float16x3.parameters = SubgroupSwapHorizontal_Float16x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3_value)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3)->signature = "subgroupSwapHorizontal(f16x3) f16x3"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3)->name = "subgroupSwapHorizontal(f16x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3)->nameWithVarNames = "subgroupSwapHorizontal(value : f16x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// subgroupSwapHorizontal with Float16x4
    SubgroupSwapHorizontal_Float16x4_value.name = "value"_c;
    SubgroupSwapHorizontal_Float16x4_value.type = Type::FullType{ Float16x4Type.name };
    SubgroupSwapHorizontal_Float16x4.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float16x4.name = SubgroupSwapHorizontal_Float16x4_name;
    SubgroupSwapHorizontal_Float16x4.backendIndex = 2082;
    SubgroupSwapHorizontal_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    SubgroupSwapHorizontal_Float16x4.parameters = SubgroupSwapHorizontal_Float16x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4_value)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4)->signature = "subgroupSwapHorizontal(f16x4) f16x4"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4)->name = "subgroupSwapHorizontal(f16x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4)->nameWithVarNames = "subgroupSwapHorizontal(value : f16x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// subgroupSwapHorizontal with Int32
    SubgroupSwapHorizontal_Int32_value.name = "value"_c;
    SubgroupSwapHorizontal_Int32_value.type = Type::FullType{ Int32Type.name };
    SubgroupSwapHorizontal_Int32.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int32.name = SubgroupSwapHorizontal_Int32_name;
    SubgroupSwapHorizontal_Int32.backendIndex = 2083;
    SubgroupSwapHorizontal_Int32.returnType = Type::FullType { Int32Type.name };
    SubgroupSwapHorizontal_Int32.parameters = SubgroupSwapHorizontal_Int32_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32)->signature = "subgroupSwapHorizontal(i32) i32"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32)->name = "subgroupSwapHorizontal(i32)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32)->nameWithVarNames = "subgroupSwapHorizontal(value : i32)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32)->returnTypeSymbol = &Int32Type;

    /// subgroupSwapHorizontal with Int32x2
    SubgroupSwapHorizontal_Int32x2_value.name = "value"_c;
    SubgroupSwapHorizontal_Int32x2_value.type = Type::FullType{ Int32x2Type.name };
    SubgroupSwapHorizontal_Int32x2.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int32x2.name = SubgroupSwapHorizontal_Int32x2_name;
    SubgroupSwapHorizontal_Int32x2.backendIndex = 2084;
    SubgroupSwapHorizontal_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    SubgroupSwapHorizontal_Int32x2.parameters = SubgroupSwapHorizontal_Int32x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2_value)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2)->signature = "subgroupSwapHorizontal(i32x2) i32x2"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2)->name = "subgroupSwapHorizontal(i32x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2)->nameWithVarNames = "subgroupSwapHorizontal(value : i32x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// subgroupSwapHorizontal with Int32x3
    SubgroupSwapHorizontal_Int32x3_value.name = "value"_c;
    SubgroupSwapHorizontal_Int32x3_value.type = Type::FullType{ Int32x3Type.name };
    SubgroupSwapHorizontal_Int32x3.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int32x3.name = SubgroupSwapHorizontal_Int32x3_name;
    SubgroupSwapHorizontal_Int32x3.backendIndex = 2085;
    SubgroupSwapHorizontal_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    SubgroupSwapHorizontal_Int32x3.parameters = SubgroupSwapHorizontal_Int32x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3_value)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3)->signature = "subgroupSwapHorizontal(i32x3) i32x3"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3)->name = "subgroupSwapHorizontal(i32x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3)->nameWithVarNames = "subgroupSwapHorizontal(value : i32x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// subgroupSwapHorizontal with Int32x4
    SubgroupSwapHorizontal_Int32x4_value.name = "value"_c;
    SubgroupSwapHorizontal_Int32x4_value.type = Type::FullType{ Int32x4Type.name };
    SubgroupSwapHorizontal_Int32x4.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int32x4.name = SubgroupSwapHorizontal_Int32x4_name;
    SubgroupSwapHorizontal_Int32x4.backendIndex = 2086;
    SubgroupSwapHorizontal_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    SubgroupSwapHorizontal_Int32x4.parameters = SubgroupSwapHorizontal_Int32x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4_value)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4)->signature = "subgroupSwapHorizontal(i32x4) i32x4"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4)->name = "subgroupSwapHorizontal(i32x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4)->nameWithVarNames = "subgroupSwapHorizontal(value : i32x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// subgroupSwapHorizontal with Int16
    SubgroupSwapHorizontal_Int16_value.name = "value"_c;
    SubgroupSwapHorizontal_Int16_value.type = Type::FullType{ Int16Type.name };
    SubgroupSwapHorizontal_Int16.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int16.name = SubgroupSwapHorizontal_Int16_name;
    SubgroupSwapHorizontal_Int16.backendIndex = 2087;
    SubgroupSwapHorizontal_Int16.returnType = Type::FullType { Int16Type.name };
    SubgroupSwapHorizontal_Int16.parameters = SubgroupSwapHorizontal_Int16_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16)->signature = "subgroupSwapHorizontal(i16) i16"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16)->name = "subgroupSwapHorizontal(i16)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16)->nameWithVarNames = "subgroupSwapHorizontal(value : i16)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16)->returnTypeSymbol = &Int16Type;

    /// subgroupSwapHorizontal with Int16x2
    SubgroupSwapHorizontal_Int16x2_value.name = "value"_c;
    SubgroupSwapHorizontal_Int16x2_value.type = Type::FullType{ Int16x2Type.name };
    SubgroupSwapHorizontal_Int16x2.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int16x2.name = SubgroupSwapHorizontal_Int16x2_name;
    SubgroupSwapHorizontal_Int16x2.backendIndex = 2088;
    SubgroupSwapHorizontal_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    SubgroupSwapHorizontal_Int16x2.parameters = SubgroupSwapHorizontal_Int16x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2_value)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2)->signature = "subgroupSwapHorizontal(i16x2) i16x2"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2)->name = "subgroupSwapHorizontal(i16x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2)->nameWithVarNames = "subgroupSwapHorizontal(value : i16x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2)->returnTypeSymbol = &Int16x2Type;

}
} // namespace GPULang
