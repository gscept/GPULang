//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// f32 with UInt32
Variable Float32_from_UInt32_arg;
Function Float32_from_UInt32;
inline constexpr std::array Float32_from_UInt32_args = { &Float32_from_UInt32_arg };

/// f32 with Int32
Variable Float32_from_Int32_arg;
Function Float32_from_Int32;
inline constexpr std::array Float32_from_Int32_args = { &Float32_from_Int32_arg };

/// f32 with Bool8
Variable Float32_from_Bool8_arg;
Function Float32_from_Bool8;
inline constexpr std::array Float32_from_Bool8_args = { &Float32_from_Bool8_arg };

/// f32 with Float16
Variable Float32_from_Float16_arg;
Function Float32_from_Float16;
inline constexpr std::array Float32_from_Float16_args = { &Float32_from_Float16_arg };

/// f32 with UInt16
Variable Float32_from_UInt16_arg;
Function Float32_from_UInt16;
inline constexpr std::array Float32_from_UInt16_args = { &Float32_from_UInt16_arg };

/// f32 with Int16
Variable Float32_from_Int16_arg;
Function Float32_from_Int16;
inline constexpr std::array Float32_from_Int16_args = { &Float32_from_Int16_arg };

/// f32 with Float32
Variable Float32_ctor0_arg0_Float32;
Function Float32_ctor0;
inline constexpr std::array Float32_ctor0_args = { &Float32_ctor0_arg0_Float32 };

/// u32 with Float32
Variable UInt32_from_Float32_arg;
Function UInt32_from_Float32;
inline constexpr std::array UInt32_from_Float32_args = { &UInt32_from_Float32_arg };

/// u32 with Int32
Variable UInt32_from_Int32_arg;
Function UInt32_from_Int32;
inline constexpr std::array UInt32_from_Int32_args = { &UInt32_from_Int32_arg };

/// u32 with Bool8
Variable UInt32_from_Bool8_arg;
Function UInt32_from_Bool8;
inline constexpr std::array UInt32_from_Bool8_args = { &UInt32_from_Bool8_arg };

/// u32 with Float16
Variable UInt32_from_Float16_arg;
Function UInt32_from_Float16;
inline constexpr std::array UInt32_from_Float16_args = { &UInt32_from_Float16_arg };

/// u32 with UInt16
Variable UInt32_from_UInt16_arg;
Function UInt32_from_UInt16;
inline constexpr std::array UInt32_from_UInt16_args = { &UInt32_from_UInt16_arg };

/// u32 with Int16
Variable UInt32_from_Int16_arg;
Function UInt32_from_Int16;
inline constexpr std::array UInt32_from_Int16_args = { &UInt32_from_Int16_arg };

/// u32 with UInt32
Variable UInt32_ctor0_arg0_UInt32;
Function UInt32_ctor0;
inline constexpr std::array UInt32_ctor0_args = { &UInt32_ctor0_arg0_UInt32 };

/// i32 with Float32
Variable Int32_from_Float32_arg;
Function Int32_from_Float32;
inline constexpr std::array Int32_from_Float32_args = { &Int32_from_Float32_arg };

/// i32 with UInt32
Variable Int32_from_UInt32_arg;
Function Int32_from_UInt32;
inline constexpr std::array Int32_from_UInt32_args = { &Int32_from_UInt32_arg };

/// i32 with Bool8
Variable Int32_from_Bool8_arg;
Function Int32_from_Bool8;
inline constexpr std::array Int32_from_Bool8_args = { &Int32_from_Bool8_arg };

/// i32 with Float16
Variable Int32_from_Float16_arg;
Function Int32_from_Float16;
inline constexpr std::array Int32_from_Float16_args = { &Int32_from_Float16_arg };

/// i32 with UInt16
Variable Int32_from_UInt16_arg;
Function Int32_from_UInt16;
inline constexpr std::array Int32_from_UInt16_args = { &Int32_from_UInt16_arg };

/// i32 with Int16
Variable Int32_from_Int16_arg;
Function Int32_from_Int16;
inline constexpr std::array Int32_from_Int16_args = { &Int32_from_Int16_arg };

/// i32 with Int32
Variable Int32_ctor0_arg0_Int32;
Function Int32_ctor0;
inline constexpr std::array Int32_ctor0_args = { &Int32_ctor0_arg0_Int32 };

/// b8 with UInt32
Variable Bool8_from_UInt32_arg;
Function Bool8_from_UInt32;
inline constexpr std::array Bool8_from_UInt32_args = { &Bool8_from_UInt32_arg };

/// b8 with Int32
Variable Bool8_from_Int32_arg;
Function Bool8_from_Int32;
inline constexpr std::array Bool8_from_Int32_args = { &Bool8_from_Int32_arg };

/// b8 with UInt16
Variable Bool8_from_UInt16_arg;
Function Bool8_from_UInt16;
inline constexpr std::array Bool8_from_UInt16_args = { &Bool8_from_UInt16_arg };

/// b8 with Int16
Variable Bool8_from_Int16_arg;
Function Bool8_from_Int16;
inline constexpr std::array Bool8_from_Int16_args = { &Bool8_from_Int16_arg };

/// b8 with Bool8
Variable Bool8_ctor0_arg0_Bool8;
Function Bool8_ctor0;
inline constexpr std::array Bool8_ctor0_args = { &Bool8_ctor0_arg0_Bool8 };

/// f16 with Float32
Variable Float16_from_Float32_arg;
Function Float16_from_Float32;
inline constexpr std::array Float16_from_Float32_args = { &Float16_from_Float32_arg };

/// f16 with UInt32
Variable Float16_from_UInt32_arg;
Function Float16_from_UInt32;
inline constexpr std::array Float16_from_UInt32_args = { &Float16_from_UInt32_arg };

/// f16 with Int32
Variable Float16_from_Int32_arg;
Function Float16_from_Int32;
inline constexpr std::array Float16_from_Int32_args = { &Float16_from_Int32_arg };

/// f16 with Bool8
Variable Float16_from_Bool8_arg;
Function Float16_from_Bool8;
inline constexpr std::array Float16_from_Bool8_args = { &Float16_from_Bool8_arg };

/// f16 with UInt16
Variable Float16_from_UInt16_arg;
Function Float16_from_UInt16;
inline constexpr std::array Float16_from_UInt16_args = { &Float16_from_UInt16_arg };

/// f16 with Int16
Variable Float16_from_Int16_arg;
Function Float16_from_Int16;
inline constexpr std::array Float16_from_Int16_args = { &Float16_from_Int16_arg };

/// f16 with Float16
Variable Float16_ctor0_arg0_Float16;
Function Float16_ctor0;
inline constexpr std::array Float16_ctor0_args = { &Float16_ctor0_arg0_Float16 };

/// u16 with Float32
Variable UInt16_from_Float32_arg;
Function UInt16_from_Float32;
inline constexpr std::array UInt16_from_Float32_args = { &UInt16_from_Float32_arg };

/// u16 with UInt32
Variable UInt16_from_UInt32_arg;
Function UInt16_from_UInt32;
inline constexpr std::array UInt16_from_UInt32_args = { &UInt16_from_UInt32_arg };

/// u16 with Int32
Variable UInt16_from_Int32_arg;
Function UInt16_from_Int32;
inline constexpr std::array UInt16_from_Int32_args = { &UInt16_from_Int32_arg };

/// u16 with Bool8
Variable UInt16_from_Bool8_arg;
Function UInt16_from_Bool8;
inline constexpr std::array UInt16_from_Bool8_args = { &UInt16_from_Bool8_arg };

/// u16 with Float16
Variable UInt16_from_Float16_arg;
Function UInt16_from_Float16;
inline constexpr std::array UInt16_from_Float16_args = { &UInt16_from_Float16_arg };

/// u16 with Int16
Variable UInt16_from_Int16_arg;
Function UInt16_from_Int16;
inline constexpr std::array UInt16_from_Int16_args = { &UInt16_from_Int16_arg };

/// u16 with UInt16
Variable UInt16_ctor0_arg0_UInt16;
Function UInt16_ctor0;
inline constexpr std::array UInt16_ctor0_args = { &UInt16_ctor0_arg0_UInt16 };

/// i16 with Float32
Variable Int16_from_Float32_arg;
Function Int16_from_Float32;
inline constexpr std::array Int16_from_Float32_args = { &Int16_from_Float32_arg };

/// i16 with UInt32
Variable Int16_from_UInt32_arg;
Function Int16_from_UInt32;
inline constexpr std::array Int16_from_UInt32_args = { &Int16_from_UInt32_arg };

/// i16 with Int32
Variable Int16_from_Int32_arg;
Function Int16_from_Int32;
inline constexpr std::array Int16_from_Int32_args = { &Int16_from_Int32_arg };

/// i16 with Bool8
Variable Int16_from_Bool8_arg;
Function Int16_from_Bool8;
inline constexpr std::array Int16_from_Bool8_args = { &Int16_from_Bool8_arg };

/// i16 with Float16
Variable Int16_from_Float16_arg;
Function Int16_from_Float16;
inline constexpr std::array Int16_from_Float16_args = { &Int16_from_Float16_arg };

/// i16 with UInt16
Variable Int16_from_UInt16_arg;
Function Int16_from_UInt16;
inline constexpr std::array Int16_from_UInt16_args = { &Int16_from_UInt16_arg };

/// i16 with Int16
Variable Int16_ctor0_arg0_Int16;
Function Int16_ctor0;
inline constexpr std::array Int16_ctor0_args = { &Int16_ctor0_arg0_Int16 };

/// f32x2 with Float32x2
Variable Float32x2_from_Float32x2_arg;
Function Float32x2_from_Float32x2;
inline constexpr std::array Float32x2_from_Float32x2_args = { &Float32x2_from_Float32x2_arg };

/// f32x2 with Float32
Variable Float32x2_splat_Float32_arg;
Function Float32x2_splat_Float32;
inline constexpr std::array Float32x2_splat_Float32_args = { &Float32x2_splat_Float32_arg };

/// f32x2 with UInt32x2
Variable Float32x2_from_UInt32x2_arg;
Function Float32x2_from_UInt32x2;
inline constexpr std::array Float32x2_from_UInt32x2_args = { &Float32x2_from_UInt32x2_arg };

/// f32x2 with UInt32
Variable Float32x2_splat_UInt32_arg;
Function Float32x2_splat_UInt32;
inline constexpr std::array Float32x2_splat_UInt32_args = { &Float32x2_splat_UInt32_arg };

/// f32x2 with Int32x2
Variable Float32x2_from_Int32x2_arg;
Function Float32x2_from_Int32x2;
inline constexpr std::array Float32x2_from_Int32x2_args = { &Float32x2_from_Int32x2_arg };

/// f32x2 with Int32
Variable Float32x2_splat_Int32_arg;
Function Float32x2_splat_Int32;
inline constexpr std::array Float32x2_splat_Int32_args = { &Float32x2_splat_Int32_arg };

/// f32x2 with Bool8x2
Variable Float32x2_from_Bool8x2_arg;
Function Float32x2_from_Bool8x2;
inline constexpr std::array Float32x2_from_Bool8x2_args = { &Float32x2_from_Bool8x2_arg };

/// f32x2 with Bool8
Variable Float32x2_splat_Bool8_arg;
Function Float32x2_splat_Bool8;
inline constexpr std::array Float32x2_splat_Bool8_args = { &Float32x2_splat_Bool8_arg };

/// f32x2 with Float16x2
Variable Float32x2_from_Float16x2_arg;
Function Float32x2_from_Float16x2;
inline constexpr std::array Float32x2_from_Float16x2_args = { &Float32x2_from_Float16x2_arg };

/// f32x2 with Float16
Variable Float32x2_splat_Float16_arg;
Function Float32x2_splat_Float16;
inline constexpr std::array Float32x2_splat_Float16_args = { &Float32x2_splat_Float16_arg };

/// f32x2 with UInt16x2
Variable Float32x2_from_UInt16x2_arg;
Function Float32x2_from_UInt16x2;
inline constexpr std::array Float32x2_from_UInt16x2_args = { &Float32x2_from_UInt16x2_arg };

/// f32x2 with UInt16
Variable Float32x2_splat_UInt16_arg;
Function Float32x2_splat_UInt16;
inline constexpr std::array Float32x2_splat_UInt16_args = { &Float32x2_splat_UInt16_arg };

/// f32x2 with Int16x2
Variable Float32x2_from_Int16x2_arg;
Function Float32x2_from_Int16x2;
inline constexpr std::array Float32x2_from_Int16x2_args = { &Float32x2_from_Int16x2_arg };

/// f32x2 with Int16
Variable Float32x2_splat_Int16_arg;
Function Float32x2_splat_Int16;
inline constexpr std::array Float32x2_splat_Int16_args = { &Float32x2_splat_Int16_arg };

/// f32x2 with Float32, Float32
Variable Float32x2_ctor0_arg0_Float32;
Variable Float32x2_ctor0_arg1_Float32;
Function Float32x2_ctor0;
inline constexpr std::array Float32x2_ctor0_args = { &Float32x2_ctor0_arg0_Float32, &Float32x2_ctor0_arg1_Float32 };

/// u32x2 with Float32x2
Variable UInt32x2_from_Float32x2_arg;
Function UInt32x2_from_Float32x2;
inline constexpr std::array UInt32x2_from_Float32x2_args = { &UInt32x2_from_Float32x2_arg };

/// u32x2 with Float32
Variable UInt32x2_splat_Float32_arg;
Function UInt32x2_splat_Float32;
inline constexpr std::array UInt32x2_splat_Float32_args = { &UInt32x2_splat_Float32_arg };

/// u32x2 with UInt32x2
Variable UInt32x2_from_UInt32x2_arg;
Function UInt32x2_from_UInt32x2;
inline constexpr std::array UInt32x2_from_UInt32x2_args = { &UInt32x2_from_UInt32x2_arg };

/// u32x2 with UInt32
Variable UInt32x2_splat_UInt32_arg;
Function UInt32x2_splat_UInt32;
inline constexpr std::array UInt32x2_splat_UInt32_args = { &UInt32x2_splat_UInt32_arg };

/// u32x2 with Int32x2
Variable UInt32x2_from_Int32x2_arg;
Function UInt32x2_from_Int32x2;
inline constexpr std::array UInt32x2_from_Int32x2_args = { &UInt32x2_from_Int32x2_arg };

/// u32x2 with Int32
Variable UInt32x2_splat_Int32_arg;
Function UInt32x2_splat_Int32;
inline constexpr std::array UInt32x2_splat_Int32_args = { &UInt32x2_splat_Int32_arg };

/// u32x2 with Bool8x2
Variable UInt32x2_from_Bool8x2_arg;
Function UInt32x2_from_Bool8x2;
inline constexpr std::array UInt32x2_from_Bool8x2_args = { &UInt32x2_from_Bool8x2_arg };

/// u32x2 with Bool8
Variable UInt32x2_splat_Bool8_arg;
Function UInt32x2_splat_Bool8;
inline constexpr std::array UInt32x2_splat_Bool8_args = { &UInt32x2_splat_Bool8_arg };

/// u32x2 with Float16x2
Variable UInt32x2_from_Float16x2_arg;
Function UInt32x2_from_Float16x2;
inline constexpr std::array UInt32x2_from_Float16x2_args = { &UInt32x2_from_Float16x2_arg };

/// u32x2 with Float16
Variable UInt32x2_splat_Float16_arg;
Function UInt32x2_splat_Float16;
inline constexpr std::array UInt32x2_splat_Float16_args = { &UInt32x2_splat_Float16_arg };

/// u32x2 with UInt16x2
Variable UInt32x2_from_UInt16x2_arg;
Function UInt32x2_from_UInt16x2;
inline constexpr std::array UInt32x2_from_UInt16x2_args = { &UInt32x2_from_UInt16x2_arg };

/// u32x2 with UInt16
Variable UInt32x2_splat_UInt16_arg;
Function UInt32x2_splat_UInt16;
inline constexpr std::array UInt32x2_splat_UInt16_args = { &UInt32x2_splat_UInt16_arg };

/// u32x2 with Int16x2
Variable UInt32x2_from_Int16x2_arg;
Function UInt32x2_from_Int16x2;
inline constexpr std::array UInt32x2_from_Int16x2_args = { &UInt32x2_from_Int16x2_arg };

/// u32x2 with Int16
Variable UInt32x2_splat_Int16_arg;
Function UInt32x2_splat_Int16;
inline constexpr std::array UInt32x2_splat_Int16_args = { &UInt32x2_splat_Int16_arg };

/// u32x2 with UInt32, UInt32
Variable UInt32x2_ctor0_arg0_UInt32;
Variable UInt32x2_ctor0_arg1_UInt32;
Function UInt32x2_ctor0;
inline constexpr std::array UInt32x2_ctor0_args = { &UInt32x2_ctor0_arg0_UInt32, &UInt32x2_ctor0_arg1_UInt32 };

/// i32x2 with Float32x2
Variable Int32x2_from_Float32x2_arg;
Function Int32x2_from_Float32x2;
inline constexpr std::array Int32x2_from_Float32x2_args = { &Int32x2_from_Float32x2_arg };

/// i32x2 with Float32
Variable Int32x2_splat_Float32_arg;
Function Int32x2_splat_Float32;
inline constexpr std::array Int32x2_splat_Float32_args = { &Int32x2_splat_Float32_arg };

/// i32x2 with UInt32x2
Variable Int32x2_from_UInt32x2_arg;
Function Int32x2_from_UInt32x2;
inline constexpr std::array Int32x2_from_UInt32x2_args = { &Int32x2_from_UInt32x2_arg };

/// i32x2 with UInt32
Variable Int32x2_splat_UInt32_arg;
Function Int32x2_splat_UInt32;
inline constexpr std::array Int32x2_splat_UInt32_args = { &Int32x2_splat_UInt32_arg };

/// i32x2 with Int32x2
Variable Int32x2_from_Int32x2_arg;
Function Int32x2_from_Int32x2;
inline constexpr std::array Int32x2_from_Int32x2_args = { &Int32x2_from_Int32x2_arg };

/// i32x2 with Int32
Variable Int32x2_splat_Int32_arg;
Function Int32x2_splat_Int32;
inline constexpr std::array Int32x2_splat_Int32_args = { &Int32x2_splat_Int32_arg };

/// i32x2 with Bool8x2
Variable Int32x2_from_Bool8x2_arg;
Function Int32x2_from_Bool8x2;
inline constexpr std::array Int32x2_from_Bool8x2_args = { &Int32x2_from_Bool8x2_arg };

/// i32x2 with Bool8
Variable Int32x2_splat_Bool8_arg;
Function Int32x2_splat_Bool8;
inline constexpr std::array Int32x2_splat_Bool8_args = { &Int32x2_splat_Bool8_arg };

/// i32x2 with Float16x2
Variable Int32x2_from_Float16x2_arg;
Function Int32x2_from_Float16x2;
inline constexpr std::array Int32x2_from_Float16x2_args = { &Int32x2_from_Float16x2_arg };

/// i32x2 with Float16
Variable Int32x2_splat_Float16_arg;
Function Int32x2_splat_Float16;
inline constexpr std::array Int32x2_splat_Float16_args = { &Int32x2_splat_Float16_arg };

/// i32x2 with UInt16x2
Variable Int32x2_from_UInt16x2_arg;
Function Int32x2_from_UInt16x2;
inline constexpr std::array Int32x2_from_UInt16x2_args = { &Int32x2_from_UInt16x2_arg };

/// i32x2 with UInt16
Variable Int32x2_splat_UInt16_arg;
Function Int32x2_splat_UInt16;
inline constexpr std::array Int32x2_splat_UInt16_args = { &Int32x2_splat_UInt16_arg };

/// i32x2 with Int16x2
Variable Int32x2_from_Int16x2_arg;
Function Int32x2_from_Int16x2;
inline constexpr std::array Int32x2_from_Int16x2_args = { &Int32x2_from_Int16x2_arg };

/// i32x2 with Int16
Variable Int32x2_splat_Int16_arg;
Function Int32x2_splat_Int16;
inline constexpr std::array Int32x2_splat_Int16_args = { &Int32x2_splat_Int16_arg };

/// i32x2 with Int32, Int32
Variable Int32x2_ctor0_arg0_Int32;
Variable Int32x2_ctor0_arg1_Int32;
Function Int32x2_ctor0;
inline constexpr std::array Int32x2_ctor0_args = { &Int32x2_ctor0_arg0_Int32, &Int32x2_ctor0_arg1_Int32 };

/// b8x2 with UInt32x2
Variable Bool8x2_from_UInt32x2_arg;
Function Bool8x2_from_UInt32x2;
inline constexpr std::array Bool8x2_from_UInt32x2_args = { &Bool8x2_from_UInt32x2_arg };

/// b8x2 with UInt32
Variable Bool8x2_splat_UInt32_arg;
Function Bool8x2_splat_UInt32;
inline constexpr std::array Bool8x2_splat_UInt32_args = { &Bool8x2_splat_UInt32_arg };

/// b8x2 with Int32x2
Variable Bool8x2_from_Int32x2_arg;
Function Bool8x2_from_Int32x2;
inline constexpr std::array Bool8x2_from_Int32x2_args = { &Bool8x2_from_Int32x2_arg };

/// b8x2 with Int32
Variable Bool8x2_splat_Int32_arg;
Function Bool8x2_splat_Int32;
inline constexpr std::array Bool8x2_splat_Int32_args = { &Bool8x2_splat_Int32_arg };

/// b8x2 with Bool8x2
Variable Bool8x2_from_Bool8x2_arg;
Function Bool8x2_from_Bool8x2;
inline constexpr std::array Bool8x2_from_Bool8x2_args = { &Bool8x2_from_Bool8x2_arg };

/// b8x2 with Bool8
Variable Bool8x2_splat_Bool8_arg;
Function Bool8x2_splat_Bool8;
inline constexpr std::array Bool8x2_splat_Bool8_args = { &Bool8x2_splat_Bool8_arg };

/// b8x2 with UInt16x2
Variable Bool8x2_from_UInt16x2_arg;
Function Bool8x2_from_UInt16x2;
inline constexpr std::array Bool8x2_from_UInt16x2_args = { &Bool8x2_from_UInt16x2_arg };

/// b8x2 with UInt16
Variable Bool8x2_splat_UInt16_arg;
Function Bool8x2_splat_UInt16;
inline constexpr std::array Bool8x2_splat_UInt16_args = { &Bool8x2_splat_UInt16_arg };

/// b8x2 with Int16x2
Variable Bool8x2_from_Int16x2_arg;
Function Bool8x2_from_Int16x2;
inline constexpr std::array Bool8x2_from_Int16x2_args = { &Bool8x2_from_Int16x2_arg };

/// b8x2 with Int16
Variable Bool8x2_splat_Int16_arg;
Function Bool8x2_splat_Int16;
inline constexpr std::array Bool8x2_splat_Int16_args = { &Bool8x2_splat_Int16_arg };

/// b8x2 with Bool8, Bool8
Variable Bool8x2_ctor0_arg0_Bool8;
Variable Bool8x2_ctor0_arg1_Bool8;
Function Bool8x2_ctor0;
inline constexpr std::array Bool8x2_ctor0_args = { &Bool8x2_ctor0_arg0_Bool8, &Bool8x2_ctor0_arg1_Bool8 };

/// f16x2 with Float32x2
Variable Float16x2_from_Float32x2_arg;
Function Float16x2_from_Float32x2;
inline constexpr std::array Float16x2_from_Float32x2_args = { &Float16x2_from_Float32x2_arg };

/// f16x2 with Float32
Variable Float16x2_splat_Float32_arg;
Function Float16x2_splat_Float32;
inline constexpr std::array Float16x2_splat_Float32_args = { &Float16x2_splat_Float32_arg };

/// f16x2 with UInt32x2
Variable Float16x2_from_UInt32x2_arg;
Function Float16x2_from_UInt32x2;
inline constexpr std::array Float16x2_from_UInt32x2_args = { &Float16x2_from_UInt32x2_arg };

/// f16x2 with UInt32
Variable Float16x2_splat_UInt32_arg;
Function Float16x2_splat_UInt32;
inline constexpr std::array Float16x2_splat_UInt32_args = { &Float16x2_splat_UInt32_arg };

/// f16x2 with Int32x2
Variable Float16x2_from_Int32x2_arg;
Function Float16x2_from_Int32x2;
inline constexpr std::array Float16x2_from_Int32x2_args = { &Float16x2_from_Int32x2_arg };

/// f16x2 with Int32
Variable Float16x2_splat_Int32_arg;
Function Float16x2_splat_Int32;
inline constexpr std::array Float16x2_splat_Int32_args = { &Float16x2_splat_Int32_arg };

/// f16x2 with Bool8x2
Variable Float16x2_from_Bool8x2_arg;
Function Float16x2_from_Bool8x2;
inline constexpr std::array Float16x2_from_Bool8x2_args = { &Float16x2_from_Bool8x2_arg };

/// f16x2 with Bool8
Variable Float16x2_splat_Bool8_arg;
Function Float16x2_splat_Bool8;
inline constexpr std::array Float16x2_splat_Bool8_args = { &Float16x2_splat_Bool8_arg };

/// f16x2 with Float16x2
Variable Float16x2_from_Float16x2_arg;
Function Float16x2_from_Float16x2;
inline constexpr std::array Float16x2_from_Float16x2_args = { &Float16x2_from_Float16x2_arg };

/// f16x2 with Float16
Variable Float16x2_splat_Float16_arg;
Function Float16x2_splat_Float16;
inline constexpr std::array Float16x2_splat_Float16_args = { &Float16x2_splat_Float16_arg };

/// f16x2 with UInt16x2
Variable Float16x2_from_UInt16x2_arg;
Function Float16x2_from_UInt16x2;
inline constexpr std::array Float16x2_from_UInt16x2_args = { &Float16x2_from_UInt16x2_arg };

/// f16x2 with UInt16
Variable Float16x2_splat_UInt16_arg;
Function Float16x2_splat_UInt16;
inline constexpr std::array Float16x2_splat_UInt16_args = { &Float16x2_splat_UInt16_arg };

/// f16x2 with Int16x2
Variable Float16x2_from_Int16x2_arg;
Function Float16x2_from_Int16x2;
inline constexpr std::array Float16x2_from_Int16x2_args = { &Float16x2_from_Int16x2_arg };

/// f16x2 with Int16
Variable Float16x2_splat_Int16_arg;
Function Float16x2_splat_Int16;
inline constexpr std::array Float16x2_splat_Int16_args = { &Float16x2_splat_Int16_arg };

/// f16x2 with Float16, Float16
Variable Float16x2_ctor0_arg0_Float16;
Variable Float16x2_ctor0_arg1_Float16;
Function Float16x2_ctor0;
inline constexpr std::array Float16x2_ctor0_args = { &Float16x2_ctor0_arg0_Float16, &Float16x2_ctor0_arg1_Float16 };

/// u16x2 with Float32x2
Variable UInt16x2_from_Float32x2_arg;
Function UInt16x2_from_Float32x2;
inline constexpr std::array UInt16x2_from_Float32x2_args = { &UInt16x2_from_Float32x2_arg };

/// u16x2 with Float32
Variable UInt16x2_splat_Float32_arg;
Function UInt16x2_splat_Float32;
inline constexpr std::array UInt16x2_splat_Float32_args = { &UInt16x2_splat_Float32_arg };

/// u16x2 with UInt32x2
Variable UInt16x2_from_UInt32x2_arg;
Function UInt16x2_from_UInt32x2;
inline constexpr std::array UInt16x2_from_UInt32x2_args = { &UInt16x2_from_UInt32x2_arg };

/// u16x2 with UInt32
Variable UInt16x2_splat_UInt32_arg;
Function UInt16x2_splat_UInt32;
inline constexpr std::array UInt16x2_splat_UInt32_args = { &UInt16x2_splat_UInt32_arg };

/// u16x2 with Int32x2
Variable UInt16x2_from_Int32x2_arg;
Function UInt16x2_from_Int32x2;
inline constexpr std::array UInt16x2_from_Int32x2_args = { &UInt16x2_from_Int32x2_arg };

/// u16x2 with Int32
Variable UInt16x2_splat_Int32_arg;
Function UInt16x2_splat_Int32;
inline constexpr std::array UInt16x2_splat_Int32_args = { &UInt16x2_splat_Int32_arg };

/// u16x2 with Bool8x2
Variable UInt16x2_from_Bool8x2_arg;
Function UInt16x2_from_Bool8x2;
inline constexpr std::array UInt16x2_from_Bool8x2_args = { &UInt16x2_from_Bool8x2_arg };

/// u16x2 with Bool8
Variable UInt16x2_splat_Bool8_arg;
Function UInt16x2_splat_Bool8;
inline constexpr std::array UInt16x2_splat_Bool8_args = { &UInt16x2_splat_Bool8_arg };

/// u16x2 with Float16x2
Variable UInt16x2_from_Float16x2_arg;
Function UInt16x2_from_Float16x2;
inline constexpr std::array UInt16x2_from_Float16x2_args = { &UInt16x2_from_Float16x2_arg };

/// u16x2 with Float16
Variable UInt16x2_splat_Float16_arg;
Function UInt16x2_splat_Float16;
inline constexpr std::array UInt16x2_splat_Float16_args = { &UInt16x2_splat_Float16_arg };

/// u16x2 with UInt16x2
Variable UInt16x2_from_UInt16x2_arg;
Function UInt16x2_from_UInt16x2;
inline constexpr std::array UInt16x2_from_UInt16x2_args = { &UInt16x2_from_UInt16x2_arg };

void SetupIntrinsics0()
{
    /// f32 with UInt32
    Float32_from_UInt32_arg.name = "val"_c;
    Float32_from_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32_from_UInt32.documentation = "Convert from u32 to f32"_c;
    Float32_from_UInt32.name = Float32_from_UInt32_name;
    Float32_from_UInt32.compileTime = true;
    Float32_from_UInt32.backendIndex = 0;
    Float32_from_UInt32.returnType = Type::FullType { Float32Type.name };
    Float32_from_UInt32.parameters = Float32_from_UInt32_args;
    Symbol::Resolved(&Float32_from_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32_from_UInt32)->signature = "f32(u32) f32"_c;
    Symbol::Resolved(&Float32_from_UInt32)->name = "f32(u32)"_c;
    Symbol::Resolved(&Float32_from_UInt32)->nameWithVarNames = "f32(val : u32)"_c;
    Symbol::Resolved(&Float32_from_UInt32)->returnTypeSymbol = &Float32Type;

    /// f32 with Int32
    Float32_from_Int32_arg.name = "val"_c;
    Float32_from_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32_from_Int32.documentation = "Convert from i32 to f32"_c;
    Float32_from_Int32.name = Float32_from_Int32_name;
    Float32_from_Int32.compileTime = true;
    Float32_from_Int32.backendIndex = 1;
    Float32_from_Int32.returnType = Type::FullType { Float32Type.name };
    Float32_from_Int32.parameters = Float32_from_Int32_args;
    Symbol::Resolved(&Float32_from_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32_from_Int32)->signature = "f32(i32) f32"_c;
    Symbol::Resolved(&Float32_from_Int32)->name = "f32(i32)"_c;
    Symbol::Resolved(&Float32_from_Int32)->nameWithVarNames = "f32(val : i32)"_c;
    Symbol::Resolved(&Float32_from_Int32)->returnTypeSymbol = &Float32Type;

    /// f32 with Bool8
    Float32_from_Bool8_arg.name = "val"_c;
    Float32_from_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Float32_from_Bool8.documentation = "Convert from b8 to f32"_c;
    Float32_from_Bool8.name = Float32_from_Bool8_name;
    Float32_from_Bool8.compileTime = true;
    Float32_from_Bool8.backendIndex = 2;
    Float32_from_Bool8.returnType = Type::FullType { Float32Type.name };
    Float32_from_Bool8.parameters = Float32_from_Bool8_args;
    Symbol::Resolved(&Float32_from_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Float32_from_Bool8)->signature = "f32(b8) f32"_c;
    Symbol::Resolved(&Float32_from_Bool8)->name = "f32(b8)"_c;
    Symbol::Resolved(&Float32_from_Bool8)->nameWithVarNames = "f32(val : b8)"_c;
    Symbol::Resolved(&Float32_from_Bool8)->returnTypeSymbol = &Float32Type;

    /// f32 with Float16
    Float32_from_Float16_arg.name = "val"_c;
    Float32_from_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float32_from_Float16.documentation = "Convert from f16 to f32"_c;
    Float32_from_Float16.name = Float32_from_Float16_name;
    Float32_from_Float16.compileTime = true;
    Float32_from_Float16.backendIndex = 3;
    Float32_from_Float16.returnType = Type::FullType { Float32Type.name };
    Float32_from_Float16.parameters = Float32_from_Float16_args;
    Symbol::Resolved(&Float32_from_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float32_from_Float16)->signature = "f32(f16) f32"_c;
    Symbol::Resolved(&Float32_from_Float16)->name = "f32(f16)"_c;
    Symbol::Resolved(&Float32_from_Float16)->nameWithVarNames = "f32(val : f16)"_c;
    Symbol::Resolved(&Float32_from_Float16)->returnTypeSymbol = &Float32Type;

    /// f32 with UInt16
    Float32_from_UInt16_arg.name = "val"_c;
    Float32_from_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32_from_UInt16.documentation = "Convert from u16 to f32"_c;
    Float32_from_UInt16.name = Float32_from_UInt16_name;
    Float32_from_UInt16.compileTime = true;
    Float32_from_UInt16.backendIndex = 4;
    Float32_from_UInt16.returnType = Type::FullType { Float32Type.name };
    Float32_from_UInt16.parameters = Float32_from_UInt16_args;
    Symbol::Resolved(&Float32_from_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32_from_UInt16)->signature = "f32(u16) f32"_c;
    Symbol::Resolved(&Float32_from_UInt16)->name = "f32(u16)"_c;
    Symbol::Resolved(&Float32_from_UInt16)->nameWithVarNames = "f32(val : u16)"_c;
    Symbol::Resolved(&Float32_from_UInt16)->returnTypeSymbol = &Float32Type;

    /// f32 with Int16
    Float32_from_Int16_arg.name = "val"_c;
    Float32_from_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32_from_Int16.documentation = "Convert from i16 to f32"_c;
    Float32_from_Int16.name = Float32_from_Int16_name;
    Float32_from_Int16.compileTime = true;
    Float32_from_Int16.backendIndex = 5;
    Float32_from_Int16.returnType = Type::FullType { Float32Type.name };
    Float32_from_Int16.parameters = Float32_from_Int16_args;
    Symbol::Resolved(&Float32_from_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32_from_Int16)->signature = "f32(i16) f32"_c;
    Symbol::Resolved(&Float32_from_Int16)->name = "f32(i16)"_c;
    Symbol::Resolved(&Float32_from_Int16)->nameWithVarNames = "f32(val : i16)"_c;
    Symbol::Resolved(&Float32_from_Int16)->returnTypeSymbol = &Float32Type;

    /// f32 with Float32
    Float32_ctor0_arg0_Float32.name = "arg0"_c;
    Float32_ctor0_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32_ctor0.name = Float32_ctor0_name;
    Float32_ctor0.compileTime = true;
    Float32_ctor0.backendIndex = 6;
    Float32_ctor0.returnType = Type::FullType { Float32Type.name };
    Float32_ctor0.parameters = Float32_ctor0_args;
    Symbol::Resolved(&Float32_ctor0_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_ctor0)->signature = "f32(f32) f32"_c;
    Symbol::Resolved(&Float32_ctor0)->name = "f32(f32)"_c;
    Symbol::Resolved(&Float32_ctor0)->nameWithVarNames = "f32(arg0 : f32)"_c;
    Symbol::Resolved(&Float32_ctor0)->returnTypeSymbol = &Float32Type;

    /// u32 with Float32
    UInt32_from_Float32_arg.name = "val"_c;
    UInt32_from_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt32_from_Float32.documentation = "Convert from f32 to u32"_c;
    UInt32_from_Float32.name = UInt32_from_Float32_name;
    UInt32_from_Float32.compileTime = true;
    UInt32_from_Float32.backendIndex = 26;
    UInt32_from_Float32.returnType = Type::FullType { UInt32Type.name };
    UInt32_from_Float32.parameters = UInt32_from_Float32_args;
    Symbol::Resolved(&UInt32_from_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32_from_Float32)->signature = "u32(f32) u32"_c;
    Symbol::Resolved(&UInt32_from_Float32)->name = "u32(f32)"_c;
    Symbol::Resolved(&UInt32_from_Float32)->nameWithVarNames = "u32(val : f32)"_c;
    Symbol::Resolved(&UInt32_from_Float32)->returnTypeSymbol = &UInt32Type;

    /// u32 with Int32
    UInt32_from_Int32_arg.name = "val"_c;
    UInt32_from_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32_from_Int32.documentation = "Convert from i32 to u32"_c;
    UInt32_from_Int32.name = UInt32_from_Int32_name;
    UInt32_from_Int32.compileTime = true;
    UInt32_from_Int32.backendIndex = 27;
    UInt32_from_Int32.returnType = Type::FullType { UInt32Type.name };
    UInt32_from_Int32.parameters = UInt32_from_Int32_args;
    Symbol::Resolved(&UInt32_from_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32_from_Int32)->signature = "u32(i32) u32"_c;
    Symbol::Resolved(&UInt32_from_Int32)->name = "u32(i32)"_c;
    Symbol::Resolved(&UInt32_from_Int32)->nameWithVarNames = "u32(val : i32)"_c;
    Symbol::Resolved(&UInt32_from_Int32)->returnTypeSymbol = &UInt32Type;

    /// u32 with Bool8
    UInt32_from_Bool8_arg.name = "val"_c;
    UInt32_from_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    UInt32_from_Bool8.documentation = "Convert from b8 to u32"_c;
    UInt32_from_Bool8.name = UInt32_from_Bool8_name;
    UInt32_from_Bool8.compileTime = true;
    UInt32_from_Bool8.backendIndex = 28;
    UInt32_from_Bool8.returnType = Type::FullType { UInt32Type.name };
    UInt32_from_Bool8.parameters = UInt32_from_Bool8_args;
    Symbol::Resolved(&UInt32_from_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&UInt32_from_Bool8)->signature = "u32(b8) u32"_c;
    Symbol::Resolved(&UInt32_from_Bool8)->name = "u32(b8)"_c;
    Symbol::Resolved(&UInt32_from_Bool8)->nameWithVarNames = "u32(val : b8)"_c;
    Symbol::Resolved(&UInt32_from_Bool8)->returnTypeSymbol = &UInt32Type;

    /// u32 with Float16
    UInt32_from_Float16_arg.name = "val"_c;
    UInt32_from_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt32_from_Float16.documentation = "Convert from f16 to u32"_c;
    UInt32_from_Float16.name = UInt32_from_Float16_name;
    UInt32_from_Float16.compileTime = true;
    UInt32_from_Float16.backendIndex = 29;
    UInt32_from_Float16.returnType = Type::FullType { UInt32Type.name };
    UInt32_from_Float16.parameters = UInt32_from_Float16_args;
    Symbol::Resolved(&UInt32_from_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt32_from_Float16)->signature = "u32(f16) u32"_c;
    Symbol::Resolved(&UInt32_from_Float16)->name = "u32(f16)"_c;
    Symbol::Resolved(&UInt32_from_Float16)->nameWithVarNames = "u32(val : f16)"_c;
    Symbol::Resolved(&UInt32_from_Float16)->returnTypeSymbol = &UInt32Type;

    /// u32 with UInt16
    UInt32_from_UInt16_arg.name = "val"_c;
    UInt32_from_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt32_from_UInt16.documentation = "Convert from u16 to u32"_c;
    UInt32_from_UInt16.name = UInt32_from_UInt16_name;
    UInt32_from_UInt16.compileTime = true;
    UInt32_from_UInt16.backendIndex = 30;
    UInt32_from_UInt16.returnType = Type::FullType { UInt32Type.name };
    UInt32_from_UInt16.parameters = UInt32_from_UInt16_args;
    Symbol::Resolved(&UInt32_from_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32_from_UInt16)->signature = "u32(u16) u32"_c;
    Symbol::Resolved(&UInt32_from_UInt16)->name = "u32(u16)"_c;
    Symbol::Resolved(&UInt32_from_UInt16)->nameWithVarNames = "u32(val : u16)"_c;
    Symbol::Resolved(&UInt32_from_UInt16)->returnTypeSymbol = &UInt32Type;

    /// u32 with Int16
    UInt32_from_Int16_arg.name = "val"_c;
    UInt32_from_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt32_from_Int16.documentation = "Convert from i16 to u32"_c;
    UInt32_from_Int16.name = UInt32_from_Int16_name;
    UInt32_from_Int16.compileTime = true;
    UInt32_from_Int16.backendIndex = 31;
    UInt32_from_Int16.returnType = Type::FullType { UInt32Type.name };
    UInt32_from_Int16.parameters = UInt32_from_Int16_args;
    Symbol::Resolved(&UInt32_from_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32_from_Int16)->signature = "u32(i16) u32"_c;
    Symbol::Resolved(&UInt32_from_Int16)->name = "u32(i16)"_c;
    Symbol::Resolved(&UInt32_from_Int16)->nameWithVarNames = "u32(val : i16)"_c;
    Symbol::Resolved(&UInt32_from_Int16)->returnTypeSymbol = &UInt32Type;

    /// u32 with UInt32
    UInt32_ctor0_arg0_UInt32.name = "arg0"_c;
    UInt32_ctor0_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32_ctor0.name = UInt32_ctor0_name;
    UInt32_ctor0.compileTime = true;
    UInt32_ctor0.backendIndex = 32;
    UInt32_ctor0.returnType = Type::FullType { UInt32Type.name };
    UInt32_ctor0.parameters = UInt32_ctor0_args;
    Symbol::Resolved(&UInt32_ctor0_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_ctor0)->signature = "u32(u32) u32"_c;
    Symbol::Resolved(&UInt32_ctor0)->name = "u32(u32)"_c;
    Symbol::Resolved(&UInt32_ctor0)->nameWithVarNames = "u32(arg0 : u32)"_c;
    Symbol::Resolved(&UInt32_ctor0)->returnTypeSymbol = &UInt32Type;

    /// i32 with Float32
    Int32_from_Float32_arg.name = "val"_c;
    Int32_from_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int32_from_Float32.documentation = "Convert from f32 to i32"_c;
    Int32_from_Float32.name = Int32_from_Float32_name;
    Int32_from_Float32.compileTime = true;
    Int32_from_Float32.backendIndex = 62;
    Int32_from_Float32.returnType = Type::FullType { Int32Type.name };
    Int32_from_Float32.parameters = Int32_from_Float32_args;
    Symbol::Resolved(&Int32_from_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32_from_Float32)->signature = "i32(f32) i32"_c;
    Symbol::Resolved(&Int32_from_Float32)->name = "i32(f32)"_c;
    Symbol::Resolved(&Int32_from_Float32)->nameWithVarNames = "i32(val : f32)"_c;
    Symbol::Resolved(&Int32_from_Float32)->returnTypeSymbol = &Int32Type;

    /// i32 with UInt32
    Int32_from_UInt32_arg.name = "val"_c;
    Int32_from_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32_from_UInt32.documentation = "Convert from u32 to i32"_c;
    Int32_from_UInt32.name = Int32_from_UInt32_name;
    Int32_from_UInt32.compileTime = true;
    Int32_from_UInt32.backendIndex = 63;
    Int32_from_UInt32.returnType = Type::FullType { Int32Type.name };
    Int32_from_UInt32.parameters = Int32_from_UInt32_args;
    Symbol::Resolved(&Int32_from_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32_from_UInt32)->signature = "i32(u32) i32"_c;
    Symbol::Resolved(&Int32_from_UInt32)->name = "i32(u32)"_c;
    Symbol::Resolved(&Int32_from_UInt32)->nameWithVarNames = "i32(val : u32)"_c;
    Symbol::Resolved(&Int32_from_UInt32)->returnTypeSymbol = &Int32Type;

    /// i32 with Bool8
    Int32_from_Bool8_arg.name = "val"_c;
    Int32_from_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Int32_from_Bool8.documentation = "Convert from b8 to i32"_c;
    Int32_from_Bool8.name = Int32_from_Bool8_name;
    Int32_from_Bool8.compileTime = true;
    Int32_from_Bool8.backendIndex = 64;
    Int32_from_Bool8.returnType = Type::FullType { Int32Type.name };
    Int32_from_Bool8.parameters = Int32_from_Bool8_args;
    Symbol::Resolved(&Int32_from_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Int32_from_Bool8)->signature = "i32(b8) i32"_c;
    Symbol::Resolved(&Int32_from_Bool8)->name = "i32(b8)"_c;
    Symbol::Resolved(&Int32_from_Bool8)->nameWithVarNames = "i32(val : b8)"_c;
    Symbol::Resolved(&Int32_from_Bool8)->returnTypeSymbol = &Int32Type;

    /// i32 with Float16
    Int32_from_Float16_arg.name = "val"_c;
    Int32_from_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int32_from_Float16.documentation = "Convert from f16 to i32"_c;
    Int32_from_Float16.name = Int32_from_Float16_name;
    Int32_from_Float16.compileTime = true;
    Int32_from_Float16.backendIndex = 65;
    Int32_from_Float16.returnType = Type::FullType { Int32Type.name };
    Int32_from_Float16.parameters = Int32_from_Float16_args;
    Symbol::Resolved(&Int32_from_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int32_from_Float16)->signature = "i32(f16) i32"_c;
    Symbol::Resolved(&Int32_from_Float16)->name = "i32(f16)"_c;
    Symbol::Resolved(&Int32_from_Float16)->nameWithVarNames = "i32(val : f16)"_c;
    Symbol::Resolved(&Int32_from_Float16)->returnTypeSymbol = &Int32Type;

    /// i32 with UInt16
    Int32_from_UInt16_arg.name = "val"_c;
    Int32_from_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int32_from_UInt16.documentation = "Convert from u16 to i32"_c;
    Int32_from_UInt16.name = Int32_from_UInt16_name;
    Int32_from_UInt16.compileTime = true;
    Int32_from_UInt16.backendIndex = 66;
    Int32_from_UInt16.returnType = Type::FullType { Int32Type.name };
    Int32_from_UInt16.parameters = Int32_from_UInt16_args;
    Symbol::Resolved(&Int32_from_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32_from_UInt16)->signature = "i32(u16) i32"_c;
    Symbol::Resolved(&Int32_from_UInt16)->name = "i32(u16)"_c;
    Symbol::Resolved(&Int32_from_UInt16)->nameWithVarNames = "i32(val : u16)"_c;
    Symbol::Resolved(&Int32_from_UInt16)->returnTypeSymbol = &Int32Type;

    /// i32 with Int16
    Int32_from_Int16_arg.name = "val"_c;
    Int32_from_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int32_from_Int16.documentation = "Convert from i16 to i32"_c;
    Int32_from_Int16.name = Int32_from_Int16_name;
    Int32_from_Int16.compileTime = true;
    Int32_from_Int16.backendIndex = 67;
    Int32_from_Int16.returnType = Type::FullType { Int32Type.name };
    Int32_from_Int16.parameters = Int32_from_Int16_args;
    Symbol::Resolved(&Int32_from_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32_from_Int16)->signature = "i32(i16) i32"_c;
    Symbol::Resolved(&Int32_from_Int16)->name = "i32(i16)"_c;
    Symbol::Resolved(&Int32_from_Int16)->nameWithVarNames = "i32(val : i16)"_c;
    Symbol::Resolved(&Int32_from_Int16)->returnTypeSymbol = &Int32Type;

    /// i32 with Int32
    Int32_ctor0_arg0_Int32.name = "arg0"_c;
    Int32_ctor0_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32_ctor0.name = Int32_ctor0_name;
    Int32_ctor0.compileTime = true;
    Int32_ctor0.backendIndex = 68;
    Int32_ctor0.returnType = Type::FullType { Int32Type.name };
    Int32_ctor0.parameters = Int32_ctor0_args;
    Symbol::Resolved(&Int32_ctor0_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_ctor0)->signature = "i32(i32) i32"_c;
    Symbol::Resolved(&Int32_ctor0)->name = "i32(i32)"_c;
    Symbol::Resolved(&Int32_ctor0)->nameWithVarNames = "i32(arg0 : i32)"_c;
    Symbol::Resolved(&Int32_ctor0)->returnTypeSymbol = &Int32Type;

    /// b8 with UInt32
    Bool8_from_UInt32_arg.name = "val"_c;
    Bool8_from_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Bool8_from_UInt32.documentation = "Convert from u32 to b8"_c;
    Bool8_from_UInt32.name = Bool8_from_UInt32_name;
    Bool8_from_UInt32.compileTime = true;
    Bool8_from_UInt32.backendIndex = 98;
    Bool8_from_UInt32.returnType = Type::FullType { Bool8Type.name };
    Bool8_from_UInt32.parameters = Bool8_from_UInt32_args;
    Symbol::Resolved(&Bool8_from_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8_from_UInt32)->signature = "b8(u32) b8"_c;
    Symbol::Resolved(&Bool8_from_UInt32)->name = "b8(u32)"_c;
    Symbol::Resolved(&Bool8_from_UInt32)->nameWithVarNames = "b8(val : u32)"_c;
    Symbol::Resolved(&Bool8_from_UInt32)->returnTypeSymbol = &Bool8Type;

    /// b8 with Int32
    Bool8_from_Int32_arg.name = "val"_c;
    Bool8_from_Int32_arg.type = Type::FullType{ Int32Type.name };
    Bool8_from_Int32.documentation = "Convert from i32 to b8"_c;
    Bool8_from_Int32.name = Bool8_from_Int32_name;
    Bool8_from_Int32.compileTime = true;
    Bool8_from_Int32.backendIndex = 99;
    Bool8_from_Int32.returnType = Type::FullType { Bool8Type.name };
    Bool8_from_Int32.parameters = Bool8_from_Int32_args;
    Symbol::Resolved(&Bool8_from_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8_from_Int32)->signature = "b8(i32) b8"_c;
    Symbol::Resolved(&Bool8_from_Int32)->name = "b8(i32)"_c;
    Symbol::Resolved(&Bool8_from_Int32)->nameWithVarNames = "b8(val : i32)"_c;
    Symbol::Resolved(&Bool8_from_Int32)->returnTypeSymbol = &Bool8Type;

    /// b8 with UInt16
    Bool8_from_UInt16_arg.name = "val"_c;
    Bool8_from_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Bool8_from_UInt16.documentation = "Convert from u16 to b8"_c;
    Bool8_from_UInt16.name = Bool8_from_UInt16_name;
    Bool8_from_UInt16.compileTime = true;
    Bool8_from_UInt16.backendIndex = 100;
    Bool8_from_UInt16.returnType = Type::FullType { Bool8Type.name };
    Bool8_from_UInt16.parameters = Bool8_from_UInt16_args;
    Symbol::Resolved(&Bool8_from_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8_from_UInt16)->signature = "b8(u16) b8"_c;
    Symbol::Resolved(&Bool8_from_UInt16)->name = "b8(u16)"_c;
    Symbol::Resolved(&Bool8_from_UInt16)->nameWithVarNames = "b8(val : u16)"_c;
    Symbol::Resolved(&Bool8_from_UInt16)->returnTypeSymbol = &Bool8Type;

    /// b8 with Int16
    Bool8_from_Int16_arg.name = "val"_c;
    Bool8_from_Int16_arg.type = Type::FullType{ Int16Type.name };
    Bool8_from_Int16.documentation = "Convert from i16 to b8"_c;
    Bool8_from_Int16.name = Bool8_from_Int16_name;
    Bool8_from_Int16.compileTime = true;
    Bool8_from_Int16.backendIndex = 101;
    Bool8_from_Int16.returnType = Type::FullType { Bool8Type.name };
    Bool8_from_Int16.parameters = Bool8_from_Int16_args;
    Symbol::Resolved(&Bool8_from_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8_from_Int16)->signature = "b8(i16) b8"_c;
    Symbol::Resolved(&Bool8_from_Int16)->name = "b8(i16)"_c;
    Symbol::Resolved(&Bool8_from_Int16)->nameWithVarNames = "b8(val : i16)"_c;
    Symbol::Resolved(&Bool8_from_Int16)->returnTypeSymbol = &Bool8Type;

    /// b8 with Bool8
    Bool8_ctor0_arg0_Bool8.name = "arg0"_c;
    Bool8_ctor0_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8_ctor0.name = Bool8_ctor0_name;
    Bool8_ctor0.compileTime = true;
    Bool8_ctor0.backendIndex = 102;
    Bool8_ctor0.returnType = Type::FullType { Bool8Type.name };
    Bool8_ctor0.parameters = Bool8_ctor0_args;
    Symbol::Resolved(&Bool8_ctor0_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8_ctor0)->signature = "b8(b8) b8"_c;
    Symbol::Resolved(&Bool8_ctor0)->name = "b8(b8)"_c;
    Symbol::Resolved(&Bool8_ctor0)->nameWithVarNames = "b8(arg0 : b8)"_c;
    Symbol::Resolved(&Bool8_ctor0)->returnTypeSymbol = &Bool8Type;

    /// f16 with Float32
    Float16_from_Float32_arg.name = "val"_c;
    Float16_from_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float16_from_Float32.documentation = "Convert from f32 to f16"_c;
    Float16_from_Float32.name = Float16_from_Float32_name;
    Float16_from_Float32.compileTime = true;
    Float16_from_Float32.backendIndex = 111;
    Float16_from_Float32.returnType = Type::FullType { Float16Type.name };
    Float16_from_Float32.parameters = Float16_from_Float32_args;
    Symbol::Resolved(&Float16_from_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float16_from_Float32)->signature = "f16(f32) f16"_c;
    Symbol::Resolved(&Float16_from_Float32)->name = "f16(f32)"_c;
    Symbol::Resolved(&Float16_from_Float32)->nameWithVarNames = "f16(val : f32)"_c;
    Symbol::Resolved(&Float16_from_Float32)->returnTypeSymbol = &Float16Type;

    /// f16 with UInt32
    Float16_from_UInt32_arg.name = "val"_c;
    Float16_from_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16_from_UInt32.documentation = "Convert from u32 to f16"_c;
    Float16_from_UInt32.name = Float16_from_UInt32_name;
    Float16_from_UInt32.compileTime = true;
    Float16_from_UInt32.backendIndex = 112;
    Float16_from_UInt32.returnType = Type::FullType { Float16Type.name };
    Float16_from_UInt32.parameters = Float16_from_UInt32_args;
    Symbol::Resolved(&Float16_from_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16_from_UInt32)->signature = "f16(u32) f16"_c;
    Symbol::Resolved(&Float16_from_UInt32)->name = "f16(u32)"_c;
    Symbol::Resolved(&Float16_from_UInt32)->nameWithVarNames = "f16(val : u32)"_c;
    Symbol::Resolved(&Float16_from_UInt32)->returnTypeSymbol = &Float16Type;

    /// f16 with Int32
    Float16_from_Int32_arg.name = "val"_c;
    Float16_from_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16_from_Int32.documentation = "Convert from i32 to f16"_c;
    Float16_from_Int32.name = Float16_from_Int32_name;
    Float16_from_Int32.compileTime = true;
    Float16_from_Int32.backendIndex = 113;
    Float16_from_Int32.returnType = Type::FullType { Float16Type.name };
    Float16_from_Int32.parameters = Float16_from_Int32_args;
    Symbol::Resolved(&Float16_from_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16_from_Int32)->signature = "f16(i32) f16"_c;
    Symbol::Resolved(&Float16_from_Int32)->name = "f16(i32)"_c;
    Symbol::Resolved(&Float16_from_Int32)->nameWithVarNames = "f16(val : i32)"_c;
    Symbol::Resolved(&Float16_from_Int32)->returnTypeSymbol = &Float16Type;

    /// f16 with Bool8
    Float16_from_Bool8_arg.name = "val"_c;
    Float16_from_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Float16_from_Bool8.documentation = "Convert from b8 to f16"_c;
    Float16_from_Bool8.name = Float16_from_Bool8_name;
    Float16_from_Bool8.compileTime = true;
    Float16_from_Bool8.backendIndex = 114;
    Float16_from_Bool8.returnType = Type::FullType { Float16Type.name };
    Float16_from_Bool8.parameters = Float16_from_Bool8_args;
    Symbol::Resolved(&Float16_from_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Float16_from_Bool8)->signature = "f16(b8) f16"_c;
    Symbol::Resolved(&Float16_from_Bool8)->name = "f16(b8)"_c;
    Symbol::Resolved(&Float16_from_Bool8)->nameWithVarNames = "f16(val : b8)"_c;
    Symbol::Resolved(&Float16_from_Bool8)->returnTypeSymbol = &Float16Type;

    /// f16 with UInt16
    Float16_from_UInt16_arg.name = "val"_c;
    Float16_from_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16_from_UInt16.documentation = "Convert from u16 to f16"_c;
    Float16_from_UInt16.name = Float16_from_UInt16_name;
    Float16_from_UInt16.compileTime = true;
    Float16_from_UInt16.backendIndex = 115;
    Float16_from_UInt16.returnType = Type::FullType { Float16Type.name };
    Float16_from_UInt16.parameters = Float16_from_UInt16_args;
    Symbol::Resolved(&Float16_from_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16_from_UInt16)->signature = "f16(u16) f16"_c;
    Symbol::Resolved(&Float16_from_UInt16)->name = "f16(u16)"_c;
    Symbol::Resolved(&Float16_from_UInt16)->nameWithVarNames = "f16(val : u16)"_c;
    Symbol::Resolved(&Float16_from_UInt16)->returnTypeSymbol = &Float16Type;

    /// f16 with Int16
    Float16_from_Int16_arg.name = "val"_c;
    Float16_from_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16_from_Int16.documentation = "Convert from i16 to f16"_c;
    Float16_from_Int16.name = Float16_from_Int16_name;
    Float16_from_Int16.compileTime = true;
    Float16_from_Int16.backendIndex = 116;
    Float16_from_Int16.returnType = Type::FullType { Float16Type.name };
    Float16_from_Int16.parameters = Float16_from_Int16_args;
    Symbol::Resolved(&Float16_from_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16_from_Int16)->signature = "f16(i16) f16"_c;
    Symbol::Resolved(&Float16_from_Int16)->name = "f16(i16)"_c;
    Symbol::Resolved(&Float16_from_Int16)->nameWithVarNames = "f16(val : i16)"_c;
    Symbol::Resolved(&Float16_from_Int16)->returnTypeSymbol = &Float16Type;

    /// f16 with Float16
    Float16_ctor0_arg0_Float16.name = "arg0"_c;
    Float16_ctor0_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16_ctor0.name = Float16_ctor0_name;
    Float16_ctor0.compileTime = true;
    Float16_ctor0.backendIndex = 117;
    Float16_ctor0.returnType = Type::FullType { Float16Type.name };
    Float16_ctor0.parameters = Float16_ctor0_args;
    Symbol::Resolved(&Float16_ctor0_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_ctor0)->signature = "f16(f16) f16"_c;
    Symbol::Resolved(&Float16_ctor0)->name = "f16(f16)"_c;
    Symbol::Resolved(&Float16_ctor0)->nameWithVarNames = "f16(arg0 : f16)"_c;
    Symbol::Resolved(&Float16_ctor0)->returnTypeSymbol = &Float16Type;

    /// u16 with Float32
    UInt16_from_Float32_arg.name = "val"_c;
    UInt16_from_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt16_from_Float32.documentation = "Convert from f32 to u16"_c;
    UInt16_from_Float32.name = UInt16_from_Float32_name;
    UInt16_from_Float32.compileTime = true;
    UInt16_from_Float32.backendIndex = 137;
    UInt16_from_Float32.returnType = Type::FullType { UInt16Type.name };
    UInt16_from_Float32.parameters = UInt16_from_Float32_args;
    Symbol::Resolved(&UInt16_from_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt16_from_Float32)->signature = "u16(f32) u16"_c;
    Symbol::Resolved(&UInt16_from_Float32)->name = "u16(f32)"_c;
    Symbol::Resolved(&UInt16_from_Float32)->nameWithVarNames = "u16(val : f32)"_c;
    Symbol::Resolved(&UInt16_from_Float32)->returnTypeSymbol = &UInt16Type;

    /// u16 with UInt32
    UInt16_from_UInt32_arg.name = "val"_c;
    UInt16_from_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt16_from_UInt32.documentation = "Convert from u32 to u16"_c;
    UInt16_from_UInt32.name = UInt16_from_UInt32_name;
    UInt16_from_UInt32.compileTime = true;
    UInt16_from_UInt32.backendIndex = 138;
    UInt16_from_UInt32.returnType = Type::FullType { UInt16Type.name };
    UInt16_from_UInt32.parameters = UInt16_from_UInt32_args;
    Symbol::Resolved(&UInt16_from_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16_from_UInt32)->signature = "u16(u32) u16"_c;
    Symbol::Resolved(&UInt16_from_UInt32)->name = "u16(u32)"_c;
    Symbol::Resolved(&UInt16_from_UInt32)->nameWithVarNames = "u16(val : u32)"_c;
    Symbol::Resolved(&UInt16_from_UInt32)->returnTypeSymbol = &UInt16Type;

    /// u16 with Int32
    UInt16_from_Int32_arg.name = "val"_c;
    UInt16_from_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt16_from_Int32.documentation = "Convert from i32 to u16"_c;
    UInt16_from_Int32.name = UInt16_from_Int32_name;
    UInt16_from_Int32.compileTime = true;
    UInt16_from_Int32.backendIndex = 139;
    UInt16_from_Int32.returnType = Type::FullType { UInt16Type.name };
    UInt16_from_Int32.parameters = UInt16_from_Int32_args;
    Symbol::Resolved(&UInt16_from_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16_from_Int32)->signature = "u16(i32) u16"_c;
    Symbol::Resolved(&UInt16_from_Int32)->name = "u16(i32)"_c;
    Symbol::Resolved(&UInt16_from_Int32)->nameWithVarNames = "u16(val : i32)"_c;
    Symbol::Resolved(&UInt16_from_Int32)->returnTypeSymbol = &UInt16Type;

    /// u16 with Bool8
    UInt16_from_Bool8_arg.name = "val"_c;
    UInt16_from_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    UInt16_from_Bool8.documentation = "Convert from b8 to u16"_c;
    UInt16_from_Bool8.name = UInt16_from_Bool8_name;
    UInt16_from_Bool8.compileTime = true;
    UInt16_from_Bool8.backendIndex = 140;
    UInt16_from_Bool8.returnType = Type::FullType { UInt16Type.name };
    UInt16_from_Bool8.parameters = UInt16_from_Bool8_args;
    Symbol::Resolved(&UInt16_from_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&UInt16_from_Bool8)->signature = "u16(b8) u16"_c;
    Symbol::Resolved(&UInt16_from_Bool8)->name = "u16(b8)"_c;
    Symbol::Resolved(&UInt16_from_Bool8)->nameWithVarNames = "u16(val : b8)"_c;
    Symbol::Resolved(&UInt16_from_Bool8)->returnTypeSymbol = &UInt16Type;

    /// u16 with Float16
    UInt16_from_Float16_arg.name = "val"_c;
    UInt16_from_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt16_from_Float16.documentation = "Convert from f16 to u16"_c;
    UInt16_from_Float16.name = UInt16_from_Float16_name;
    UInt16_from_Float16.compileTime = true;
    UInt16_from_Float16.backendIndex = 141;
    UInt16_from_Float16.returnType = Type::FullType { UInt16Type.name };
    UInt16_from_Float16.parameters = UInt16_from_Float16_args;
    Symbol::Resolved(&UInt16_from_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16_from_Float16)->signature = "u16(f16) u16"_c;
    Symbol::Resolved(&UInt16_from_Float16)->name = "u16(f16)"_c;
    Symbol::Resolved(&UInt16_from_Float16)->nameWithVarNames = "u16(val : f16)"_c;
    Symbol::Resolved(&UInt16_from_Float16)->returnTypeSymbol = &UInt16Type;

    /// u16 with Int16
    UInt16_from_Int16_arg.name = "val"_c;
    UInt16_from_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16_from_Int16.documentation = "Convert from i16 to u16"_c;
    UInt16_from_Int16.name = UInt16_from_Int16_name;
    UInt16_from_Int16.compileTime = true;
    UInt16_from_Int16.backendIndex = 142;
    UInt16_from_Int16.returnType = Type::FullType { UInt16Type.name };
    UInt16_from_Int16.parameters = UInt16_from_Int16_args;
    Symbol::Resolved(&UInt16_from_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16_from_Int16)->signature = "u16(i16) u16"_c;
    Symbol::Resolved(&UInt16_from_Int16)->name = "u16(i16)"_c;
    Symbol::Resolved(&UInt16_from_Int16)->nameWithVarNames = "u16(val : i16)"_c;
    Symbol::Resolved(&UInt16_from_Int16)->returnTypeSymbol = &UInt16Type;

    /// u16 with UInt16
    UInt16_ctor0_arg0_UInt16.name = "arg0"_c;
    UInt16_ctor0_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16_ctor0.name = UInt16_ctor0_name;
    UInt16_ctor0.compileTime = true;
    UInt16_ctor0.backendIndex = 143;
    UInt16_ctor0.returnType = Type::FullType { UInt16Type.name };
    UInt16_ctor0.parameters = UInt16_ctor0_args;
    Symbol::Resolved(&UInt16_ctor0_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_ctor0)->signature = "u16(u16) u16"_c;
    Symbol::Resolved(&UInt16_ctor0)->name = "u16(u16)"_c;
    Symbol::Resolved(&UInt16_ctor0)->nameWithVarNames = "u16(arg0 : u16)"_c;
    Symbol::Resolved(&UInt16_ctor0)->returnTypeSymbol = &UInt16Type;

    /// i16 with Float32
    Int16_from_Float32_arg.name = "val"_c;
    Int16_from_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int16_from_Float32.documentation = "Convert from f32 to i16"_c;
    Int16_from_Float32.name = Int16_from_Float32_name;
    Int16_from_Float32.compileTime = true;
    Int16_from_Float32.backendIndex = 173;
    Int16_from_Float32.returnType = Type::FullType { Int16Type.name };
    Int16_from_Float32.parameters = Int16_from_Float32_args;
    Symbol::Resolved(&Int16_from_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int16_from_Float32)->signature = "i16(f32) i16"_c;
    Symbol::Resolved(&Int16_from_Float32)->name = "i16(f32)"_c;
    Symbol::Resolved(&Int16_from_Float32)->nameWithVarNames = "i16(val : f32)"_c;
    Symbol::Resolved(&Int16_from_Float32)->returnTypeSymbol = &Int16Type;

    /// i16 with UInt32
    Int16_from_UInt32_arg.name = "val"_c;
    Int16_from_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int16_from_UInt32.documentation = "Convert from u32 to i16"_c;
    Int16_from_UInt32.name = Int16_from_UInt32_name;
    Int16_from_UInt32.compileTime = true;
    Int16_from_UInt32.backendIndex = 174;
    Int16_from_UInt32.returnType = Type::FullType { Int16Type.name };
    Int16_from_UInt32.parameters = Int16_from_UInt32_args;
    Symbol::Resolved(&Int16_from_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16_from_UInt32)->signature = "i16(u32) i16"_c;
    Symbol::Resolved(&Int16_from_UInt32)->name = "i16(u32)"_c;
    Symbol::Resolved(&Int16_from_UInt32)->nameWithVarNames = "i16(val : u32)"_c;
    Symbol::Resolved(&Int16_from_UInt32)->returnTypeSymbol = &Int16Type;

    /// i16 with Int32
    Int16_from_Int32_arg.name = "val"_c;
    Int16_from_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int16_from_Int32.documentation = "Convert from i32 to i16"_c;
    Int16_from_Int32.name = Int16_from_Int32_name;
    Int16_from_Int32.compileTime = true;
    Int16_from_Int32.backendIndex = 175;
    Int16_from_Int32.returnType = Type::FullType { Int16Type.name };
    Int16_from_Int32.parameters = Int16_from_Int32_args;
    Symbol::Resolved(&Int16_from_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16_from_Int32)->signature = "i16(i32) i16"_c;
    Symbol::Resolved(&Int16_from_Int32)->name = "i16(i32)"_c;
    Symbol::Resolved(&Int16_from_Int32)->nameWithVarNames = "i16(val : i32)"_c;
    Symbol::Resolved(&Int16_from_Int32)->returnTypeSymbol = &Int16Type;

    /// i16 with Bool8
    Int16_from_Bool8_arg.name = "val"_c;
    Int16_from_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Int16_from_Bool8.documentation = "Convert from b8 to i16"_c;
    Int16_from_Bool8.name = Int16_from_Bool8_name;
    Int16_from_Bool8.compileTime = true;
    Int16_from_Bool8.backendIndex = 176;
    Int16_from_Bool8.returnType = Type::FullType { Int16Type.name };
    Int16_from_Bool8.parameters = Int16_from_Bool8_args;
    Symbol::Resolved(&Int16_from_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Int16_from_Bool8)->signature = "i16(b8) i16"_c;
    Symbol::Resolved(&Int16_from_Bool8)->name = "i16(b8)"_c;
    Symbol::Resolved(&Int16_from_Bool8)->nameWithVarNames = "i16(val : b8)"_c;
    Symbol::Resolved(&Int16_from_Bool8)->returnTypeSymbol = &Int16Type;

    /// i16 with Float16
    Int16_from_Float16_arg.name = "val"_c;
    Int16_from_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int16_from_Float16.documentation = "Convert from f16 to i16"_c;
    Int16_from_Float16.name = Int16_from_Float16_name;
    Int16_from_Float16.compileTime = true;
    Int16_from_Float16.backendIndex = 177;
    Int16_from_Float16.returnType = Type::FullType { Int16Type.name };
    Int16_from_Float16.parameters = Int16_from_Float16_args;
    Symbol::Resolved(&Int16_from_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16_from_Float16)->signature = "i16(f16) i16"_c;
    Symbol::Resolved(&Int16_from_Float16)->name = "i16(f16)"_c;
    Symbol::Resolved(&Int16_from_Float16)->nameWithVarNames = "i16(val : f16)"_c;
    Symbol::Resolved(&Int16_from_Float16)->returnTypeSymbol = &Int16Type;

    /// i16 with UInt16
    Int16_from_UInt16_arg.name = "val"_c;
    Int16_from_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16_from_UInt16.documentation = "Convert from u16 to i16"_c;
    Int16_from_UInt16.name = Int16_from_UInt16_name;
    Int16_from_UInt16.compileTime = true;
    Int16_from_UInt16.backendIndex = 178;
    Int16_from_UInt16.returnType = Type::FullType { Int16Type.name };
    Int16_from_UInt16.parameters = Int16_from_UInt16_args;
    Symbol::Resolved(&Int16_from_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16_from_UInt16)->signature = "i16(u16) i16"_c;
    Symbol::Resolved(&Int16_from_UInt16)->name = "i16(u16)"_c;
    Symbol::Resolved(&Int16_from_UInt16)->nameWithVarNames = "i16(val : u16)"_c;
    Symbol::Resolved(&Int16_from_UInt16)->returnTypeSymbol = &Int16Type;

    /// i16 with Int16
    Int16_ctor0_arg0_Int16.name = "arg0"_c;
    Int16_ctor0_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16_ctor0.name = Int16_ctor0_name;
    Int16_ctor0.compileTime = true;
    Int16_ctor0.backendIndex = 179;
    Int16_ctor0.returnType = Type::FullType { Int16Type.name };
    Int16_ctor0.parameters = Int16_ctor0_args;
    Symbol::Resolved(&Int16_ctor0_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_ctor0)->signature = "i16(i16) i16"_c;
    Symbol::Resolved(&Int16_ctor0)->name = "i16(i16)"_c;
    Symbol::Resolved(&Int16_ctor0)->nameWithVarNames = "i16(arg0 : i16)"_c;
    Symbol::Resolved(&Int16_ctor0)->returnTypeSymbol = &Int16Type;

    /// f32x2 with Float32x2
    Float32x2_from_Float32x2_arg.name = "val"_c;
    Float32x2_from_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_from_Float32x2.documentation = "Convert from f32x2 to f32x2"_c;
    Float32x2_from_Float32x2.name = Float32x2_from_Float32x2_name;
    Float32x2_from_Float32x2.compileTime = true;
    Float32x2_from_Float32x2.backendIndex = 209;
    Float32x2_from_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_from_Float32x2.parameters = Float32x2_from_Float32x2_args;
    Symbol::Resolved(&Float32x2_from_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_from_Float32x2)->signature = "f32x2(f32x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_from_Float32x2)->name = "f32x2(f32x2)"_c;
    Symbol::Resolved(&Float32x2_from_Float32x2)->nameWithVarNames = "f32x2(val : f32x2)"_c;
    Symbol::Resolved(&Float32x2_from_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Float32
    Float32x2_splat_Float32_arg.name = "val"_c;
    Float32x2_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x2_splat_Float32.documentation = "Splat f32 to f32x2"_c;
    Float32x2_splat_Float32.name = Float32x2_splat_Float32_name;
    Float32x2_splat_Float32.compileTime = true;
    Float32x2_splat_Float32.backendIndex = 210;
    Float32x2_splat_Float32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_Float32.parameters = Float32x2_splat_Float32_args;
    Symbol::Resolved(&Float32x2_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2_splat_Float32)->signature = "f32x2(f32) f32x2"_c;
    Symbol::Resolved(&Float32x2_splat_Float32)->name = "f32x2(f32)"_c;
    Symbol::Resolved(&Float32x2_splat_Float32)->nameWithVarNames = "f32x2(val : f32)"_c;
    Symbol::Resolved(&Float32x2_splat_Float32)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with UInt32x2
    Float32x2_from_UInt32x2_arg.name = "val"_c;
    Float32x2_from_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    Float32x2_from_UInt32x2.documentation = "Convert from u32x2 to f32x2"_c;
    Float32x2_from_UInt32x2.name = Float32x2_from_UInt32x2_name;
    Float32x2_from_UInt32x2.compileTime = true;
    Float32x2_from_UInt32x2.backendIndex = 211;
    Float32x2_from_UInt32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_from_UInt32x2.parameters = Float32x2_from_UInt32x2_args;
    Symbol::Resolved(&Float32x2_from_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&Float32x2_from_UInt32x2)->signature = "f32x2(u32x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_from_UInt32x2)->name = "f32x2(u32x2)"_c;
    Symbol::Resolved(&Float32x2_from_UInt32x2)->nameWithVarNames = "f32x2(val : u32x2)"_c;
    Symbol::Resolved(&Float32x2_from_UInt32x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with UInt32
    Float32x2_splat_UInt32_arg.name = "val"_c;
    Float32x2_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x2_splat_UInt32.documentation = "Splat u32 to f32x2"_c;
    Float32x2_splat_UInt32.name = Float32x2_splat_UInt32_name;
    Float32x2_splat_UInt32.compileTime = true;
    Float32x2_splat_UInt32.backendIndex = 212;
    Float32x2_splat_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_UInt32.parameters = Float32x2_splat_UInt32_args;
    Symbol::Resolved(&Float32x2_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2_splat_UInt32)->signature = "f32x2(u32) f32x2"_c;
    Symbol::Resolved(&Float32x2_splat_UInt32)->name = "f32x2(u32)"_c;
    Symbol::Resolved(&Float32x2_splat_UInt32)->nameWithVarNames = "f32x2(val : u32)"_c;
    Symbol::Resolved(&Float32x2_splat_UInt32)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Int32x2
    Float32x2_from_Int32x2_arg.name = "val"_c;
    Float32x2_from_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Float32x2_from_Int32x2.documentation = "Convert from i32x2 to f32x2"_c;
    Float32x2_from_Int32x2.name = Float32x2_from_Int32x2_name;
    Float32x2_from_Int32x2.compileTime = true;
    Float32x2_from_Int32x2.backendIndex = 213;
    Float32x2_from_Int32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_from_Int32x2.parameters = Float32x2_from_Int32x2_args;
    Symbol::Resolved(&Float32x2_from_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Float32x2_from_Int32x2)->signature = "f32x2(i32x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_from_Int32x2)->name = "f32x2(i32x2)"_c;
    Symbol::Resolved(&Float32x2_from_Int32x2)->nameWithVarNames = "f32x2(val : i32x2)"_c;
    Symbol::Resolved(&Float32x2_from_Int32x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Int32
    Float32x2_splat_Int32_arg.name = "val"_c;
    Float32x2_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x2_splat_Int32.documentation = "Splat i32 to f32x2"_c;
    Float32x2_splat_Int32.name = Float32x2_splat_Int32_name;
    Float32x2_splat_Int32.compileTime = true;
    Float32x2_splat_Int32.backendIndex = 214;
    Float32x2_splat_Int32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_Int32.parameters = Float32x2_splat_Int32_args;
    Symbol::Resolved(&Float32x2_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2_splat_Int32)->signature = "f32x2(i32) f32x2"_c;
    Symbol::Resolved(&Float32x2_splat_Int32)->name = "f32x2(i32)"_c;
    Symbol::Resolved(&Float32x2_splat_Int32)->nameWithVarNames = "f32x2(val : i32)"_c;
    Symbol::Resolved(&Float32x2_splat_Int32)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Bool8x2
    Float32x2_from_Bool8x2_arg.name = "val"_c;
    Float32x2_from_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Float32x2_from_Bool8x2.documentation = "Convert from b8x2 to f32x2"_c;
    Float32x2_from_Bool8x2.name = Float32x2_from_Bool8x2_name;
    Float32x2_from_Bool8x2.compileTime = true;
    Float32x2_from_Bool8x2.backendIndex = 215;
    Float32x2_from_Bool8x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_from_Bool8x2.parameters = Float32x2_from_Bool8x2_args;
    Symbol::Resolved(&Float32x2_from_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Float32x2_from_Bool8x2)->signature = "f32x2(b8x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_from_Bool8x2)->name = "f32x2(b8x2)"_c;
    Symbol::Resolved(&Float32x2_from_Bool8x2)->nameWithVarNames = "f32x2(val : b8x2)"_c;
    Symbol::Resolved(&Float32x2_from_Bool8x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Bool8
    Float32x2_splat_Bool8_arg.name = "val"_c;
    Float32x2_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Float32x2_splat_Bool8.documentation = "Splat b8 to f32x2"_c;
    Float32x2_splat_Bool8.name = Float32x2_splat_Bool8_name;
    Float32x2_splat_Bool8.compileTime = true;
    Float32x2_splat_Bool8.backendIndex = 216;
    Float32x2_splat_Bool8.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_Bool8.parameters = Float32x2_splat_Bool8_args;
    Symbol::Resolved(&Float32x2_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Float32x2_splat_Bool8)->signature = "f32x2(b8) f32x2"_c;
    Symbol::Resolved(&Float32x2_splat_Bool8)->name = "f32x2(b8)"_c;
    Symbol::Resolved(&Float32x2_splat_Bool8)->nameWithVarNames = "f32x2(val : b8)"_c;
    Symbol::Resolved(&Float32x2_splat_Bool8)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Float16x2
    Float32x2_from_Float16x2_arg.name = "val"_c;
    Float32x2_from_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float32x2_from_Float16x2.documentation = "Convert from f16x2 to f32x2"_c;
    Float32x2_from_Float16x2.name = Float32x2_from_Float16x2_name;
    Float32x2_from_Float16x2.compileTime = true;
    Float32x2_from_Float16x2.backendIndex = 217;
    Float32x2_from_Float16x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_from_Float16x2.parameters = Float32x2_from_Float16x2_args;
    Symbol::Resolved(&Float32x2_from_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float32x2_from_Float16x2)->signature = "f32x2(f16x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_from_Float16x2)->name = "f32x2(f16x2)"_c;
    Symbol::Resolved(&Float32x2_from_Float16x2)->nameWithVarNames = "f32x2(val : f16x2)"_c;
    Symbol::Resolved(&Float32x2_from_Float16x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Float16
    Float32x2_splat_Float16_arg.name = "val"_c;
    Float32x2_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float32x2_splat_Float16.documentation = "Splat f16 to f32x2"_c;
    Float32x2_splat_Float16.name = Float32x2_splat_Float16_name;
    Float32x2_splat_Float16.compileTime = true;
    Float32x2_splat_Float16.backendIndex = 218;
    Float32x2_splat_Float16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_Float16.parameters = Float32x2_splat_Float16_args;
    Symbol::Resolved(&Float32x2_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float32x2_splat_Float16)->signature = "f32x2(f16) f32x2"_c;
    Symbol::Resolved(&Float32x2_splat_Float16)->name = "f32x2(f16)"_c;
    Symbol::Resolved(&Float32x2_splat_Float16)->nameWithVarNames = "f32x2(val : f16)"_c;
    Symbol::Resolved(&Float32x2_splat_Float16)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with UInt16x2
    Float32x2_from_UInt16x2_arg.name = "val"_c;
    Float32x2_from_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    Float32x2_from_UInt16x2.documentation = "Convert from u16x2 to f32x2"_c;
    Float32x2_from_UInt16x2.name = Float32x2_from_UInt16x2_name;
    Float32x2_from_UInt16x2.compileTime = true;
    Float32x2_from_UInt16x2.backendIndex = 219;
    Float32x2_from_UInt16x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_from_UInt16x2.parameters = Float32x2_from_UInt16x2_args;
    Symbol::Resolved(&Float32x2_from_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&Float32x2_from_UInt16x2)->signature = "f32x2(u16x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_from_UInt16x2)->name = "f32x2(u16x2)"_c;
    Symbol::Resolved(&Float32x2_from_UInt16x2)->nameWithVarNames = "f32x2(val : u16x2)"_c;
    Symbol::Resolved(&Float32x2_from_UInt16x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with UInt16
    Float32x2_splat_UInt16_arg.name = "val"_c;
    Float32x2_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x2_splat_UInt16.documentation = "Splat u16 to f32x2"_c;
    Float32x2_splat_UInt16.name = Float32x2_splat_UInt16_name;
    Float32x2_splat_UInt16.compileTime = true;
    Float32x2_splat_UInt16.backendIndex = 220;
    Float32x2_splat_UInt16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_UInt16.parameters = Float32x2_splat_UInt16_args;
    Symbol::Resolved(&Float32x2_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2_splat_UInt16)->signature = "f32x2(u16) f32x2"_c;
    Symbol::Resolved(&Float32x2_splat_UInt16)->name = "f32x2(u16)"_c;
    Symbol::Resolved(&Float32x2_splat_UInt16)->nameWithVarNames = "f32x2(val : u16)"_c;
    Symbol::Resolved(&Float32x2_splat_UInt16)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Int16x2
    Float32x2_from_Int16x2_arg.name = "val"_c;
    Float32x2_from_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Float32x2_from_Int16x2.documentation = "Convert from i16x2 to f32x2"_c;
    Float32x2_from_Int16x2.name = Float32x2_from_Int16x2_name;
    Float32x2_from_Int16x2.compileTime = true;
    Float32x2_from_Int16x2.backendIndex = 221;
    Float32x2_from_Int16x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_from_Int16x2.parameters = Float32x2_from_Int16x2_args;
    Symbol::Resolved(&Float32x2_from_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Float32x2_from_Int16x2)->signature = "f32x2(i16x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_from_Int16x2)->name = "f32x2(i16x2)"_c;
    Symbol::Resolved(&Float32x2_from_Int16x2)->nameWithVarNames = "f32x2(val : i16x2)"_c;
    Symbol::Resolved(&Float32x2_from_Int16x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Int16
    Float32x2_splat_Int16_arg.name = "val"_c;
    Float32x2_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x2_splat_Int16.documentation = "Splat i16 to f32x2"_c;
    Float32x2_splat_Int16.name = Float32x2_splat_Int16_name;
    Float32x2_splat_Int16.compileTime = true;
    Float32x2_splat_Int16.backendIndex = 222;
    Float32x2_splat_Int16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_Int16.parameters = Float32x2_splat_Int16_args;
    Symbol::Resolved(&Float32x2_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2_splat_Int16)->signature = "f32x2(i16) f32x2"_c;
    Symbol::Resolved(&Float32x2_splat_Int16)->name = "f32x2(i16)"_c;
    Symbol::Resolved(&Float32x2_splat_Int16)->nameWithVarNames = "f32x2(val : i16)"_c;
    Symbol::Resolved(&Float32x2_splat_Int16)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Float32, Float32
    Float32x2_ctor0_arg0_Float32.name = "arg0"_c;
    Float32x2_ctor0_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32x2_ctor0_arg1_Float32.name = "arg1"_c;
    Float32x2_ctor0_arg1_Float32.type = Type::FullType{ Float32Type.name };
    Float32x2_ctor0.name = Float32x2_ctor0_name;
    Float32x2_ctor0.compileTime = true;
    Float32x2_ctor0.backendIndex = 223;
    Float32x2_ctor0.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_ctor0.parameters = Float32x2_ctor0_args;
    Symbol::Resolved(&Float32x2_ctor0_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2_ctor0_arg1_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2_ctor0)->signature = "f32x2(f32,f32) f32x2"_c;
    Symbol::Resolved(&Float32x2_ctor0)->name = "f32x2(f32,f32)"_c;
    Symbol::Resolved(&Float32x2_ctor0)->nameWithVarNames = "f32x2(arg0 : f32, arg1 : f32)"_c;
    Symbol::Resolved(&Float32x2_ctor0)->returnTypeSymbol = &Float32x2Type;

    /// u32x2 with Float32x2
    UInt32x2_from_Float32x2_arg.name = "val"_c;
    UInt32x2_from_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    UInt32x2_from_Float32x2.documentation = "Convert from f32x2 to u32x2"_c;
    UInt32x2_from_Float32x2.name = UInt32x2_from_Float32x2_name;
    UInt32x2_from_Float32x2.compileTime = true;
    UInt32x2_from_Float32x2.backendIndex = 249;
    UInt32x2_from_Float32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_from_Float32x2.parameters = UInt32x2_from_Float32x2_args;
    Symbol::Resolved(&UInt32x2_from_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&UInt32x2_from_Float32x2)->signature = "u32x2(f32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_from_Float32x2)->name = "u32x2(f32x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Float32x2)->nameWithVarNames = "u32x2(val : f32x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Float32x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Float32
    UInt32x2_splat_Float32_arg.name = "val"_c;
    UInt32x2_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt32x2_splat_Float32.documentation = "Splat f32 to u32x2"_c;
    UInt32x2_splat_Float32.name = UInt32x2_splat_Float32_name;
    UInt32x2_splat_Float32.compileTime = true;
    UInt32x2_splat_Float32.backendIndex = 250;
    UInt32x2_splat_Float32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_Float32.parameters = UInt32x2_splat_Float32_args;
    Symbol::Resolved(&UInt32x2_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x2_splat_Float32)->signature = "u32x2(f32) u32x2"_c;
    Symbol::Resolved(&UInt32x2_splat_Float32)->name = "u32x2(f32)"_c;
    Symbol::Resolved(&UInt32x2_splat_Float32)->nameWithVarNames = "u32x2(val : f32)"_c;
    Symbol::Resolved(&UInt32x2_splat_Float32)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with UInt32x2
    UInt32x2_from_UInt32x2_arg.name = "val"_c;
    UInt32x2_from_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_from_UInt32x2.documentation = "Convert from u32x2 to u32x2"_c;
    UInt32x2_from_UInt32x2.name = UInt32x2_from_UInt32x2_name;
    UInt32x2_from_UInt32x2.compileTime = true;
    UInt32x2_from_UInt32x2.backendIndex = 251;
    UInt32x2_from_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_from_UInt32x2.parameters = UInt32x2_from_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_from_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_from_UInt32x2)->signature = "u32x2(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_from_UInt32x2)->name = "u32x2(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_from_UInt32x2)->nameWithVarNames = "u32x2(val : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_from_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with UInt32
    UInt32x2_splat_UInt32_arg.name = "val"_c;
    UInt32x2_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x2_splat_UInt32.documentation = "Splat u32 to u32x2"_c;
    UInt32x2_splat_UInt32.name = UInt32x2_splat_UInt32_name;
    UInt32x2_splat_UInt32.compileTime = true;
    UInt32x2_splat_UInt32.backendIndex = 252;
    UInt32x2_splat_UInt32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_UInt32.parameters = UInt32x2_splat_UInt32_args;
    Symbol::Resolved(&UInt32x2_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x2_splat_UInt32)->signature = "u32x2(u32) u32x2"_c;
    Symbol::Resolved(&UInt32x2_splat_UInt32)->name = "u32x2(u32)"_c;
    Symbol::Resolved(&UInt32x2_splat_UInt32)->nameWithVarNames = "u32x2(val : u32)"_c;
    Symbol::Resolved(&UInt32x2_splat_UInt32)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Int32x2
    UInt32x2_from_Int32x2_arg.name = "val"_c;
    UInt32x2_from_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    UInt32x2_from_Int32x2.documentation = "Convert from i32x2 to u32x2"_c;
    UInt32x2_from_Int32x2.name = UInt32x2_from_Int32x2_name;
    UInt32x2_from_Int32x2.compileTime = true;
    UInt32x2_from_Int32x2.backendIndex = 253;
    UInt32x2_from_Int32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_from_Int32x2.parameters = UInt32x2_from_Int32x2_args;
    Symbol::Resolved(&UInt32x2_from_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&UInt32x2_from_Int32x2)->signature = "u32x2(i32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_from_Int32x2)->name = "u32x2(i32x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Int32x2)->nameWithVarNames = "u32x2(val : i32x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Int32x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Int32
    UInt32x2_splat_Int32_arg.name = "val"_c;
    UInt32x2_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x2_splat_Int32.documentation = "Splat i32 to u32x2"_c;
    UInt32x2_splat_Int32.name = UInt32x2_splat_Int32_name;
    UInt32x2_splat_Int32.compileTime = true;
    UInt32x2_splat_Int32.backendIndex = 254;
    UInt32x2_splat_Int32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_Int32.parameters = UInt32x2_splat_Int32_args;
    Symbol::Resolved(&UInt32x2_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x2_splat_Int32)->signature = "u32x2(i32) u32x2"_c;
    Symbol::Resolved(&UInt32x2_splat_Int32)->name = "u32x2(i32)"_c;
    Symbol::Resolved(&UInt32x2_splat_Int32)->nameWithVarNames = "u32x2(val : i32)"_c;
    Symbol::Resolved(&UInt32x2_splat_Int32)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Bool8x2
    UInt32x2_from_Bool8x2_arg.name = "val"_c;
    UInt32x2_from_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    UInt32x2_from_Bool8x2.documentation = "Convert from b8x2 to u32x2"_c;
    UInt32x2_from_Bool8x2.name = UInt32x2_from_Bool8x2_name;
    UInt32x2_from_Bool8x2.compileTime = true;
    UInt32x2_from_Bool8x2.backendIndex = 255;
    UInt32x2_from_Bool8x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_from_Bool8x2.parameters = UInt32x2_from_Bool8x2_args;
    Symbol::Resolved(&UInt32x2_from_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&UInt32x2_from_Bool8x2)->signature = "u32x2(b8x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_from_Bool8x2)->name = "u32x2(b8x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Bool8x2)->nameWithVarNames = "u32x2(val : b8x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Bool8x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Bool8
    UInt32x2_splat_Bool8_arg.name = "val"_c;
    UInt32x2_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    UInt32x2_splat_Bool8.documentation = "Splat b8 to u32x2"_c;
    UInt32x2_splat_Bool8.name = UInt32x2_splat_Bool8_name;
    UInt32x2_splat_Bool8.compileTime = true;
    UInt32x2_splat_Bool8.backendIndex = 256;
    UInt32x2_splat_Bool8.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_Bool8.parameters = UInt32x2_splat_Bool8_args;
    Symbol::Resolved(&UInt32x2_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&UInt32x2_splat_Bool8)->signature = "u32x2(b8) u32x2"_c;
    Symbol::Resolved(&UInt32x2_splat_Bool8)->name = "u32x2(b8)"_c;
    Symbol::Resolved(&UInt32x2_splat_Bool8)->nameWithVarNames = "u32x2(val : b8)"_c;
    Symbol::Resolved(&UInt32x2_splat_Bool8)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Float16x2
    UInt32x2_from_Float16x2_arg.name = "val"_c;
    UInt32x2_from_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    UInt32x2_from_Float16x2.documentation = "Convert from f16x2 to u32x2"_c;
    UInt32x2_from_Float16x2.name = UInt32x2_from_Float16x2_name;
    UInt32x2_from_Float16x2.compileTime = true;
    UInt32x2_from_Float16x2.backendIndex = 257;
    UInt32x2_from_Float16x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_from_Float16x2.parameters = UInt32x2_from_Float16x2_args;
    Symbol::Resolved(&UInt32x2_from_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&UInt32x2_from_Float16x2)->signature = "u32x2(f16x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_from_Float16x2)->name = "u32x2(f16x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Float16x2)->nameWithVarNames = "u32x2(val : f16x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Float16x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Float16
    UInt32x2_splat_Float16_arg.name = "val"_c;
    UInt32x2_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt32x2_splat_Float16.documentation = "Splat f16 to u32x2"_c;
    UInt32x2_splat_Float16.name = UInt32x2_splat_Float16_name;
    UInt32x2_splat_Float16.compileTime = true;
    UInt32x2_splat_Float16.backendIndex = 258;
    UInt32x2_splat_Float16.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_Float16.parameters = UInt32x2_splat_Float16_args;
    Symbol::Resolved(&UInt32x2_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt32x2_splat_Float16)->signature = "u32x2(f16) u32x2"_c;
    Symbol::Resolved(&UInt32x2_splat_Float16)->name = "u32x2(f16)"_c;
    Symbol::Resolved(&UInt32x2_splat_Float16)->nameWithVarNames = "u32x2(val : f16)"_c;
    Symbol::Resolved(&UInt32x2_splat_Float16)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with UInt16x2
    UInt32x2_from_UInt16x2_arg.name = "val"_c;
    UInt32x2_from_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt32x2_from_UInt16x2.documentation = "Convert from u16x2 to u32x2"_c;
    UInt32x2_from_UInt16x2.name = UInt32x2_from_UInt16x2_name;
    UInt32x2_from_UInt16x2.compileTime = true;
    UInt32x2_from_UInt16x2.backendIndex = 259;
    UInt32x2_from_UInt16x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_from_UInt16x2.parameters = UInt32x2_from_UInt16x2_args;
    Symbol::Resolved(&UInt32x2_from_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt32x2_from_UInt16x2)->signature = "u32x2(u16x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_from_UInt16x2)->name = "u32x2(u16x2)"_c;
    Symbol::Resolved(&UInt32x2_from_UInt16x2)->nameWithVarNames = "u32x2(val : u16x2)"_c;
    Symbol::Resolved(&UInt32x2_from_UInt16x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with UInt16
    UInt32x2_splat_UInt16_arg.name = "val"_c;
    UInt32x2_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt32x2_splat_UInt16.documentation = "Splat u16 to u32x2"_c;
    UInt32x2_splat_UInt16.name = UInt32x2_splat_UInt16_name;
    UInt32x2_splat_UInt16.compileTime = true;
    UInt32x2_splat_UInt16.backendIndex = 260;
    UInt32x2_splat_UInt16.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_UInt16.parameters = UInt32x2_splat_UInt16_args;
    Symbol::Resolved(&UInt32x2_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x2_splat_UInt16)->signature = "u32x2(u16) u32x2"_c;
    Symbol::Resolved(&UInt32x2_splat_UInt16)->name = "u32x2(u16)"_c;
    Symbol::Resolved(&UInt32x2_splat_UInt16)->nameWithVarNames = "u32x2(val : u16)"_c;
    Symbol::Resolved(&UInt32x2_splat_UInt16)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Int16x2
    UInt32x2_from_Int16x2_arg.name = "val"_c;
    UInt32x2_from_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    UInt32x2_from_Int16x2.documentation = "Convert from i16x2 to u32x2"_c;
    UInt32x2_from_Int16x2.name = UInt32x2_from_Int16x2_name;
    UInt32x2_from_Int16x2.compileTime = true;
    UInt32x2_from_Int16x2.backendIndex = 261;
    UInt32x2_from_Int16x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_from_Int16x2.parameters = UInt32x2_from_Int16x2_args;
    Symbol::Resolved(&UInt32x2_from_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&UInt32x2_from_Int16x2)->signature = "u32x2(i16x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_from_Int16x2)->name = "u32x2(i16x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Int16x2)->nameWithVarNames = "u32x2(val : i16x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Int16x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Int16
    UInt32x2_splat_Int16_arg.name = "val"_c;
    UInt32x2_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt32x2_splat_Int16.documentation = "Splat i16 to u32x2"_c;
    UInt32x2_splat_Int16.name = UInt32x2_splat_Int16_name;
    UInt32x2_splat_Int16.compileTime = true;
    UInt32x2_splat_Int16.backendIndex = 262;
    UInt32x2_splat_Int16.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_Int16.parameters = UInt32x2_splat_Int16_args;
    Symbol::Resolved(&UInt32x2_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x2_splat_Int16)->signature = "u32x2(i16) u32x2"_c;
    Symbol::Resolved(&UInt32x2_splat_Int16)->name = "u32x2(i16)"_c;
    Symbol::Resolved(&UInt32x2_splat_Int16)->nameWithVarNames = "u32x2(val : i16)"_c;
    Symbol::Resolved(&UInt32x2_splat_Int16)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with UInt32, UInt32
    UInt32x2_ctor0_arg0_UInt32.name = "arg0"_c;
    UInt32x2_ctor0_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x2_ctor0_arg1_UInt32.name = "arg1"_c;
    UInt32x2_ctor0_arg1_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x2_ctor0.name = UInt32x2_ctor0_name;
    UInt32x2_ctor0.compileTime = true;
    UInt32x2_ctor0.backendIndex = 263;
    UInt32x2_ctor0.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_ctor0.parameters = UInt32x2_ctor0_args;
    Symbol::Resolved(&UInt32x2_ctor0_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x2_ctor0_arg1_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x2_ctor0)->signature = "u32x2(u32,u32) u32x2"_c;
    Symbol::Resolved(&UInt32x2_ctor0)->name = "u32x2(u32,u32)"_c;
    Symbol::Resolved(&UInt32x2_ctor0)->nameWithVarNames = "u32x2(arg0 : u32, arg1 : u32)"_c;
    Symbol::Resolved(&UInt32x2_ctor0)->returnTypeSymbol = &UInt32x2Type;

    /// i32x2 with Float32x2
    Int32x2_from_Float32x2_arg.name = "val"_c;
    Int32x2_from_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Int32x2_from_Float32x2.documentation = "Convert from f32x2 to i32x2"_c;
    Int32x2_from_Float32x2.name = Int32x2_from_Float32x2_name;
    Int32x2_from_Float32x2.compileTime = true;
    Int32x2_from_Float32x2.backendIndex = 296;
    Int32x2_from_Float32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_from_Float32x2.parameters = Int32x2_from_Float32x2_args;
    Symbol::Resolved(&Int32x2_from_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Int32x2_from_Float32x2)->signature = "i32x2(f32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_from_Float32x2)->name = "i32x2(f32x2)"_c;
    Symbol::Resolved(&Int32x2_from_Float32x2)->nameWithVarNames = "i32x2(val : f32x2)"_c;
    Symbol::Resolved(&Int32x2_from_Float32x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Float32
    Int32x2_splat_Float32_arg.name = "val"_c;
    Int32x2_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int32x2_splat_Float32.documentation = "Splat f32 to i32x2"_c;
    Int32x2_splat_Float32.name = Int32x2_splat_Float32_name;
    Int32x2_splat_Float32.compileTime = true;
    Int32x2_splat_Float32.backendIndex = 297;
    Int32x2_splat_Float32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_Float32.parameters = Int32x2_splat_Float32_args;
    Symbol::Resolved(&Int32x2_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x2_splat_Float32)->signature = "i32x2(f32) i32x2"_c;
    Symbol::Resolved(&Int32x2_splat_Float32)->name = "i32x2(f32)"_c;
    Symbol::Resolved(&Int32x2_splat_Float32)->nameWithVarNames = "i32x2(val : f32)"_c;
    Symbol::Resolved(&Int32x2_splat_Float32)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with UInt32x2
    Int32x2_from_UInt32x2_arg.name = "val"_c;
    Int32x2_from_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    Int32x2_from_UInt32x2.documentation = "Convert from u32x2 to i32x2"_c;
    Int32x2_from_UInt32x2.name = Int32x2_from_UInt32x2_name;
    Int32x2_from_UInt32x2.compileTime = true;
    Int32x2_from_UInt32x2.backendIndex = 298;
    Int32x2_from_UInt32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_from_UInt32x2.parameters = Int32x2_from_UInt32x2_args;
    Symbol::Resolved(&Int32x2_from_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&Int32x2_from_UInt32x2)->signature = "i32x2(u32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_from_UInt32x2)->name = "i32x2(u32x2)"_c;
    Symbol::Resolved(&Int32x2_from_UInt32x2)->nameWithVarNames = "i32x2(val : u32x2)"_c;
    Symbol::Resolved(&Int32x2_from_UInt32x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with UInt32
    Int32x2_splat_UInt32_arg.name = "val"_c;
    Int32x2_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x2_splat_UInt32.documentation = "Splat u32 to i32x2"_c;
    Int32x2_splat_UInt32.name = Int32x2_splat_UInt32_name;
    Int32x2_splat_UInt32.compileTime = true;
    Int32x2_splat_UInt32.backendIndex = 299;
    Int32x2_splat_UInt32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_UInt32.parameters = Int32x2_splat_UInt32_args;
    Symbol::Resolved(&Int32x2_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x2_splat_UInt32)->signature = "i32x2(u32) i32x2"_c;
    Symbol::Resolved(&Int32x2_splat_UInt32)->name = "i32x2(u32)"_c;
    Symbol::Resolved(&Int32x2_splat_UInt32)->nameWithVarNames = "i32x2(val : u32)"_c;
    Symbol::Resolved(&Int32x2_splat_UInt32)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Int32x2
    Int32x2_from_Int32x2_arg.name = "val"_c;
    Int32x2_from_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_from_Int32x2.documentation = "Convert from i32x2 to i32x2"_c;
    Int32x2_from_Int32x2.name = Int32x2_from_Int32x2_name;
    Int32x2_from_Int32x2.compileTime = true;
    Int32x2_from_Int32x2.backendIndex = 300;
    Int32x2_from_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_from_Int32x2.parameters = Int32x2_from_Int32x2_args;
    Symbol::Resolved(&Int32x2_from_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_from_Int32x2)->signature = "i32x2(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_from_Int32x2)->name = "i32x2(i32x2)"_c;
    Symbol::Resolved(&Int32x2_from_Int32x2)->nameWithVarNames = "i32x2(val : i32x2)"_c;
    Symbol::Resolved(&Int32x2_from_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Int32
    Int32x2_splat_Int32_arg.name = "val"_c;
    Int32x2_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x2_splat_Int32.documentation = "Splat i32 to i32x2"_c;
    Int32x2_splat_Int32.name = Int32x2_splat_Int32_name;
    Int32x2_splat_Int32.compileTime = true;
    Int32x2_splat_Int32.backendIndex = 301;
    Int32x2_splat_Int32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_Int32.parameters = Int32x2_splat_Int32_args;
    Symbol::Resolved(&Int32x2_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x2_splat_Int32)->signature = "i32x2(i32) i32x2"_c;
    Symbol::Resolved(&Int32x2_splat_Int32)->name = "i32x2(i32)"_c;
    Symbol::Resolved(&Int32x2_splat_Int32)->nameWithVarNames = "i32x2(val : i32)"_c;
    Symbol::Resolved(&Int32x2_splat_Int32)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Bool8x2
    Int32x2_from_Bool8x2_arg.name = "val"_c;
    Int32x2_from_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Int32x2_from_Bool8x2.documentation = "Convert from b8x2 to i32x2"_c;
    Int32x2_from_Bool8x2.name = Int32x2_from_Bool8x2_name;
    Int32x2_from_Bool8x2.compileTime = true;
    Int32x2_from_Bool8x2.backendIndex = 302;
    Int32x2_from_Bool8x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_from_Bool8x2.parameters = Int32x2_from_Bool8x2_args;
    Symbol::Resolved(&Int32x2_from_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Int32x2_from_Bool8x2)->signature = "i32x2(b8x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_from_Bool8x2)->name = "i32x2(b8x2)"_c;
    Symbol::Resolved(&Int32x2_from_Bool8x2)->nameWithVarNames = "i32x2(val : b8x2)"_c;
    Symbol::Resolved(&Int32x2_from_Bool8x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Bool8
    Int32x2_splat_Bool8_arg.name = "val"_c;
    Int32x2_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Int32x2_splat_Bool8.documentation = "Splat b8 to i32x2"_c;
    Int32x2_splat_Bool8.name = Int32x2_splat_Bool8_name;
    Int32x2_splat_Bool8.compileTime = true;
    Int32x2_splat_Bool8.backendIndex = 303;
    Int32x2_splat_Bool8.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_Bool8.parameters = Int32x2_splat_Bool8_args;
    Symbol::Resolved(&Int32x2_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Int32x2_splat_Bool8)->signature = "i32x2(b8) i32x2"_c;
    Symbol::Resolved(&Int32x2_splat_Bool8)->name = "i32x2(b8)"_c;
    Symbol::Resolved(&Int32x2_splat_Bool8)->nameWithVarNames = "i32x2(val : b8)"_c;
    Symbol::Resolved(&Int32x2_splat_Bool8)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Float16x2
    Int32x2_from_Float16x2_arg.name = "val"_c;
    Int32x2_from_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Int32x2_from_Float16x2.documentation = "Convert from f16x2 to i32x2"_c;
    Int32x2_from_Float16x2.name = Int32x2_from_Float16x2_name;
    Int32x2_from_Float16x2.compileTime = true;
    Int32x2_from_Float16x2.backendIndex = 304;
    Int32x2_from_Float16x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_from_Float16x2.parameters = Int32x2_from_Float16x2_args;
    Symbol::Resolved(&Int32x2_from_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Int32x2_from_Float16x2)->signature = "i32x2(f16x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_from_Float16x2)->name = "i32x2(f16x2)"_c;
    Symbol::Resolved(&Int32x2_from_Float16x2)->nameWithVarNames = "i32x2(val : f16x2)"_c;
    Symbol::Resolved(&Int32x2_from_Float16x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Float16
    Int32x2_splat_Float16_arg.name = "val"_c;
    Int32x2_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int32x2_splat_Float16.documentation = "Splat f16 to i32x2"_c;
    Int32x2_splat_Float16.name = Int32x2_splat_Float16_name;
    Int32x2_splat_Float16.compileTime = true;
    Int32x2_splat_Float16.backendIndex = 305;
    Int32x2_splat_Float16.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_Float16.parameters = Int32x2_splat_Float16_args;
    Symbol::Resolved(&Int32x2_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int32x2_splat_Float16)->signature = "i32x2(f16) i32x2"_c;
    Symbol::Resolved(&Int32x2_splat_Float16)->name = "i32x2(f16)"_c;
    Symbol::Resolved(&Int32x2_splat_Float16)->nameWithVarNames = "i32x2(val : f16)"_c;
    Symbol::Resolved(&Int32x2_splat_Float16)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with UInt16x2
    Int32x2_from_UInt16x2_arg.name = "val"_c;
    Int32x2_from_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    Int32x2_from_UInt16x2.documentation = "Convert from u16x2 to i32x2"_c;
    Int32x2_from_UInt16x2.name = Int32x2_from_UInt16x2_name;
    Int32x2_from_UInt16x2.compileTime = true;
    Int32x2_from_UInt16x2.backendIndex = 306;
    Int32x2_from_UInt16x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_from_UInt16x2.parameters = Int32x2_from_UInt16x2_args;
    Symbol::Resolved(&Int32x2_from_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&Int32x2_from_UInt16x2)->signature = "i32x2(u16x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_from_UInt16x2)->name = "i32x2(u16x2)"_c;
    Symbol::Resolved(&Int32x2_from_UInt16x2)->nameWithVarNames = "i32x2(val : u16x2)"_c;
    Symbol::Resolved(&Int32x2_from_UInt16x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with UInt16
    Int32x2_splat_UInt16_arg.name = "val"_c;
    Int32x2_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int32x2_splat_UInt16.documentation = "Splat u16 to i32x2"_c;
    Int32x2_splat_UInt16.name = Int32x2_splat_UInt16_name;
    Int32x2_splat_UInt16.compileTime = true;
    Int32x2_splat_UInt16.backendIndex = 307;
    Int32x2_splat_UInt16.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_UInt16.parameters = Int32x2_splat_UInt16_args;
    Symbol::Resolved(&Int32x2_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x2_splat_UInt16)->signature = "i32x2(u16) i32x2"_c;
    Symbol::Resolved(&Int32x2_splat_UInt16)->name = "i32x2(u16)"_c;
    Symbol::Resolved(&Int32x2_splat_UInt16)->nameWithVarNames = "i32x2(val : u16)"_c;
    Symbol::Resolved(&Int32x2_splat_UInt16)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Int16x2
    Int32x2_from_Int16x2_arg.name = "val"_c;
    Int32x2_from_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int32x2_from_Int16x2.documentation = "Convert from i16x2 to i32x2"_c;
    Int32x2_from_Int16x2.name = Int32x2_from_Int16x2_name;
    Int32x2_from_Int16x2.compileTime = true;
    Int32x2_from_Int16x2.backendIndex = 308;
    Int32x2_from_Int16x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_from_Int16x2.parameters = Int32x2_from_Int16x2_args;
    Symbol::Resolved(&Int32x2_from_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int32x2_from_Int16x2)->signature = "i32x2(i16x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_from_Int16x2)->name = "i32x2(i16x2)"_c;
    Symbol::Resolved(&Int32x2_from_Int16x2)->nameWithVarNames = "i32x2(val : i16x2)"_c;
    Symbol::Resolved(&Int32x2_from_Int16x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Int16
    Int32x2_splat_Int16_arg.name = "val"_c;
    Int32x2_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int32x2_splat_Int16.documentation = "Splat i16 to i32x2"_c;
    Int32x2_splat_Int16.name = Int32x2_splat_Int16_name;
    Int32x2_splat_Int16.compileTime = true;
    Int32x2_splat_Int16.backendIndex = 309;
    Int32x2_splat_Int16.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_Int16.parameters = Int32x2_splat_Int16_args;
    Symbol::Resolved(&Int32x2_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x2_splat_Int16)->signature = "i32x2(i16) i32x2"_c;
    Symbol::Resolved(&Int32x2_splat_Int16)->name = "i32x2(i16)"_c;
    Symbol::Resolved(&Int32x2_splat_Int16)->nameWithVarNames = "i32x2(val : i16)"_c;
    Symbol::Resolved(&Int32x2_splat_Int16)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Int32, Int32
    Int32x2_ctor0_arg0_Int32.name = "arg0"_c;
    Int32x2_ctor0_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32x2_ctor0_arg1_Int32.name = "arg1"_c;
    Int32x2_ctor0_arg1_Int32.type = Type::FullType{ Int32Type.name };
    Int32x2_ctor0.name = Int32x2_ctor0_name;
    Int32x2_ctor0.compileTime = true;
    Int32x2_ctor0.backendIndex = 310;
    Int32x2_ctor0.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_ctor0.parameters = Int32x2_ctor0_args;
    Symbol::Resolved(&Int32x2_ctor0_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x2_ctor0_arg1_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x2_ctor0)->signature = "i32x2(i32,i32) i32x2"_c;
    Symbol::Resolved(&Int32x2_ctor0)->name = "i32x2(i32,i32)"_c;
    Symbol::Resolved(&Int32x2_ctor0)->nameWithVarNames = "i32x2(arg0 : i32, arg1 : i32)"_c;
    Symbol::Resolved(&Int32x2_ctor0)->returnTypeSymbol = &Int32x2Type;

    /// b8x2 with UInt32x2
    Bool8x2_from_UInt32x2_arg.name = "val"_c;
    Bool8x2_from_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    Bool8x2_from_UInt32x2.documentation = "Convert from u32x2 to b8x2"_c;
    Bool8x2_from_UInt32x2.name = Bool8x2_from_UInt32x2_name;
    Bool8x2_from_UInt32x2.compileTime = true;
    Bool8x2_from_UInt32x2.backendIndex = 343;
    Bool8x2_from_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_from_UInt32x2.parameters = Bool8x2_from_UInt32x2_args;
    Symbol::Resolved(&Bool8x2_from_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&Bool8x2_from_UInt32x2)->signature = "b8x2(u32x2) b8x2"_c;
    Symbol::Resolved(&Bool8x2_from_UInt32x2)->name = "b8x2(u32x2)"_c;
    Symbol::Resolved(&Bool8x2_from_UInt32x2)->nameWithVarNames = "b8x2(val : u32x2)"_c;
    Symbol::Resolved(&Bool8x2_from_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with UInt32
    Bool8x2_splat_UInt32_arg.name = "val"_c;
    Bool8x2_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Bool8x2_splat_UInt32.documentation = "Splat u32 to b8x2"_c;
    Bool8x2_splat_UInt32.name = Bool8x2_splat_UInt32_name;
    Bool8x2_splat_UInt32.compileTime = true;
    Bool8x2_splat_UInt32.backendIndex = 344;
    Bool8x2_splat_UInt32.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_splat_UInt32.parameters = Bool8x2_splat_UInt32_args;
    Symbol::Resolved(&Bool8x2_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x2_splat_UInt32)->signature = "b8x2(u32) b8x2"_c;
    Symbol::Resolved(&Bool8x2_splat_UInt32)->name = "b8x2(u32)"_c;
    Symbol::Resolved(&Bool8x2_splat_UInt32)->nameWithVarNames = "b8x2(val : u32)"_c;
    Symbol::Resolved(&Bool8x2_splat_UInt32)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Int32x2
    Bool8x2_from_Int32x2_arg.name = "val"_c;
    Bool8x2_from_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Bool8x2_from_Int32x2.documentation = "Convert from i32x2 to b8x2"_c;
    Bool8x2_from_Int32x2.name = Bool8x2_from_Int32x2_name;
    Bool8x2_from_Int32x2.compileTime = true;
    Bool8x2_from_Int32x2.backendIndex = 345;
    Bool8x2_from_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_from_Int32x2.parameters = Bool8x2_from_Int32x2_args;
    Symbol::Resolved(&Bool8x2_from_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Bool8x2_from_Int32x2)->signature = "b8x2(i32x2) b8x2"_c;
    Symbol::Resolved(&Bool8x2_from_Int32x2)->name = "b8x2(i32x2)"_c;
    Symbol::Resolved(&Bool8x2_from_Int32x2)->nameWithVarNames = "b8x2(val : i32x2)"_c;
    Symbol::Resolved(&Bool8x2_from_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Int32
    Bool8x2_splat_Int32_arg.name = "val"_c;
    Bool8x2_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Bool8x2_splat_Int32.documentation = "Splat i32 to b8x2"_c;
    Bool8x2_splat_Int32.name = Bool8x2_splat_Int32_name;
    Bool8x2_splat_Int32.compileTime = true;
    Bool8x2_splat_Int32.backendIndex = 346;
    Bool8x2_splat_Int32.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_splat_Int32.parameters = Bool8x2_splat_Int32_args;
    Symbol::Resolved(&Bool8x2_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x2_splat_Int32)->signature = "b8x2(i32) b8x2"_c;
    Symbol::Resolved(&Bool8x2_splat_Int32)->name = "b8x2(i32)"_c;
    Symbol::Resolved(&Bool8x2_splat_Int32)->nameWithVarNames = "b8x2(val : i32)"_c;
    Symbol::Resolved(&Bool8x2_splat_Int32)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Bool8x2
    Bool8x2_from_Bool8x2_arg.name = "val"_c;
    Bool8x2_from_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Bool8x2_from_Bool8x2.documentation = "Convert from b8x2 to b8x2"_c;
    Bool8x2_from_Bool8x2.name = Bool8x2_from_Bool8x2_name;
    Bool8x2_from_Bool8x2.compileTime = true;
    Bool8x2_from_Bool8x2.backendIndex = 347;
    Bool8x2_from_Bool8x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_from_Bool8x2.parameters = Bool8x2_from_Bool8x2_args;
    Symbol::Resolved(&Bool8x2_from_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x2_from_Bool8x2)->signature = "b8x2(b8x2) b8x2"_c;
    Symbol::Resolved(&Bool8x2_from_Bool8x2)->name = "b8x2(b8x2)"_c;
    Symbol::Resolved(&Bool8x2_from_Bool8x2)->nameWithVarNames = "b8x2(val : b8x2)"_c;
    Symbol::Resolved(&Bool8x2_from_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Bool8
    Bool8x2_splat_Bool8_arg.name = "val"_c;
    Bool8x2_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Bool8x2_splat_Bool8.documentation = "Splat b8 to b8x2"_c;
    Bool8x2_splat_Bool8.name = Bool8x2_splat_Bool8_name;
    Bool8x2_splat_Bool8.compileTime = true;
    Bool8x2_splat_Bool8.backendIndex = 348;
    Bool8x2_splat_Bool8.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_splat_Bool8.parameters = Bool8x2_splat_Bool8_args;
    Symbol::Resolved(&Bool8x2_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x2_splat_Bool8)->signature = "b8x2(b8) b8x2"_c;
    Symbol::Resolved(&Bool8x2_splat_Bool8)->name = "b8x2(b8)"_c;
    Symbol::Resolved(&Bool8x2_splat_Bool8)->nameWithVarNames = "b8x2(val : b8)"_c;
    Symbol::Resolved(&Bool8x2_splat_Bool8)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with UInt16x2
    Bool8x2_from_UInt16x2_arg.name = "val"_c;
    Bool8x2_from_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    Bool8x2_from_UInt16x2.documentation = "Convert from u16x2 to b8x2"_c;
    Bool8x2_from_UInt16x2.name = Bool8x2_from_UInt16x2_name;
    Bool8x2_from_UInt16x2.compileTime = true;
    Bool8x2_from_UInt16x2.backendIndex = 349;
    Bool8x2_from_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_from_UInt16x2.parameters = Bool8x2_from_UInt16x2_args;
    Symbol::Resolved(&Bool8x2_from_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&Bool8x2_from_UInt16x2)->signature = "b8x2(u16x2) b8x2"_c;
    Symbol::Resolved(&Bool8x2_from_UInt16x2)->name = "b8x2(u16x2)"_c;
    Symbol::Resolved(&Bool8x2_from_UInt16x2)->nameWithVarNames = "b8x2(val : u16x2)"_c;
    Symbol::Resolved(&Bool8x2_from_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with UInt16
    Bool8x2_splat_UInt16_arg.name = "val"_c;
    Bool8x2_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Bool8x2_splat_UInt16.documentation = "Splat u16 to b8x2"_c;
    Bool8x2_splat_UInt16.name = Bool8x2_splat_UInt16_name;
    Bool8x2_splat_UInt16.compileTime = true;
    Bool8x2_splat_UInt16.backendIndex = 350;
    Bool8x2_splat_UInt16.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_splat_UInt16.parameters = Bool8x2_splat_UInt16_args;
    Symbol::Resolved(&Bool8x2_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x2_splat_UInt16)->signature = "b8x2(u16) b8x2"_c;
    Symbol::Resolved(&Bool8x2_splat_UInt16)->name = "b8x2(u16)"_c;
    Symbol::Resolved(&Bool8x2_splat_UInt16)->nameWithVarNames = "b8x2(val : u16)"_c;
    Symbol::Resolved(&Bool8x2_splat_UInt16)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Int16x2
    Bool8x2_from_Int16x2_arg.name = "val"_c;
    Bool8x2_from_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Bool8x2_from_Int16x2.documentation = "Convert from i16x2 to b8x2"_c;
    Bool8x2_from_Int16x2.name = Bool8x2_from_Int16x2_name;
    Bool8x2_from_Int16x2.compileTime = true;
    Bool8x2_from_Int16x2.backendIndex = 351;
    Bool8x2_from_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_from_Int16x2.parameters = Bool8x2_from_Int16x2_args;
    Symbol::Resolved(&Bool8x2_from_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Bool8x2_from_Int16x2)->signature = "b8x2(i16x2) b8x2"_c;
    Symbol::Resolved(&Bool8x2_from_Int16x2)->name = "b8x2(i16x2)"_c;
    Symbol::Resolved(&Bool8x2_from_Int16x2)->nameWithVarNames = "b8x2(val : i16x2)"_c;
    Symbol::Resolved(&Bool8x2_from_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Int16
    Bool8x2_splat_Int16_arg.name = "val"_c;
    Bool8x2_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Bool8x2_splat_Int16.documentation = "Splat i16 to b8x2"_c;
    Bool8x2_splat_Int16.name = Bool8x2_splat_Int16_name;
    Bool8x2_splat_Int16.compileTime = true;
    Bool8x2_splat_Int16.backendIndex = 352;
    Bool8x2_splat_Int16.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_splat_Int16.parameters = Bool8x2_splat_Int16_args;
    Symbol::Resolved(&Bool8x2_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x2_splat_Int16)->signature = "b8x2(i16) b8x2"_c;
    Symbol::Resolved(&Bool8x2_splat_Int16)->name = "b8x2(i16)"_c;
    Symbol::Resolved(&Bool8x2_splat_Int16)->nameWithVarNames = "b8x2(val : i16)"_c;
    Symbol::Resolved(&Bool8x2_splat_Int16)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Bool8, Bool8
    Bool8x2_ctor0_arg0_Bool8.name = "arg0"_c;
    Bool8x2_ctor0_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x2_ctor0_arg1_Bool8.name = "arg1"_c;
    Bool8x2_ctor0_arg1_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x2_ctor0.name = Bool8x2_ctor0_name;
    Bool8x2_ctor0.compileTime = true;
    Bool8x2_ctor0.backendIndex = 353;
    Bool8x2_ctor0.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_ctor0.parameters = Bool8x2_ctor0_args;
    Symbol::Resolved(&Bool8x2_ctor0_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x2_ctor0_arg1_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x2_ctor0)->signature = "b8x2(b8,b8) b8x2"_c;
    Symbol::Resolved(&Bool8x2_ctor0)->name = "b8x2(b8,b8)"_c;
    Symbol::Resolved(&Bool8x2_ctor0)->nameWithVarNames = "b8x2(arg0 : b8, arg1 : b8)"_c;
    Symbol::Resolved(&Bool8x2_ctor0)->returnTypeSymbol = &Bool8x2Type;

    /// f16x2 with Float32x2
    Float16x2_from_Float32x2_arg.name = "val"_c;
    Float16x2_from_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float16x2_from_Float32x2.documentation = "Convert from f32x2 to f16x2"_c;
    Float16x2_from_Float32x2.name = Float16x2_from_Float32x2_name;
    Float16x2_from_Float32x2.compileTime = true;
    Float16x2_from_Float32x2.backendIndex = 362;
    Float16x2_from_Float32x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_from_Float32x2.parameters = Float16x2_from_Float32x2_args;
    Symbol::Resolved(&Float16x2_from_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float16x2_from_Float32x2)->signature = "f16x2(f32x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_from_Float32x2)->name = "f16x2(f32x2)"_c;
    Symbol::Resolved(&Float16x2_from_Float32x2)->nameWithVarNames = "f16x2(val : f32x2)"_c;
    Symbol::Resolved(&Float16x2_from_Float32x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Float32
    Float16x2_splat_Float32_arg.name = "val"_c;
    Float16x2_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float16x2_splat_Float32.documentation = "Splat f32 to f16x2"_c;
    Float16x2_splat_Float32.name = Float16x2_splat_Float32_name;
    Float16x2_splat_Float32.compileTime = true;
    Float16x2_splat_Float32.backendIndex = 363;
    Float16x2_splat_Float32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_Float32.parameters = Float16x2_splat_Float32_args;
    Symbol::Resolved(&Float16x2_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float16x2_splat_Float32)->signature = "f16x2(f32) f16x2"_c;
    Symbol::Resolved(&Float16x2_splat_Float32)->name = "f16x2(f32)"_c;
    Symbol::Resolved(&Float16x2_splat_Float32)->nameWithVarNames = "f16x2(val : f32)"_c;
    Symbol::Resolved(&Float16x2_splat_Float32)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with UInt32x2
    Float16x2_from_UInt32x2_arg.name = "val"_c;
    Float16x2_from_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    Float16x2_from_UInt32x2.documentation = "Convert from u32x2 to f16x2"_c;
    Float16x2_from_UInt32x2.name = Float16x2_from_UInt32x2_name;
    Float16x2_from_UInt32x2.compileTime = true;
    Float16x2_from_UInt32x2.backendIndex = 364;
    Float16x2_from_UInt32x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_from_UInt32x2.parameters = Float16x2_from_UInt32x2_args;
    Symbol::Resolved(&Float16x2_from_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&Float16x2_from_UInt32x2)->signature = "f16x2(u32x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_from_UInt32x2)->name = "f16x2(u32x2)"_c;
    Symbol::Resolved(&Float16x2_from_UInt32x2)->nameWithVarNames = "f16x2(val : u32x2)"_c;
    Symbol::Resolved(&Float16x2_from_UInt32x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with UInt32
    Float16x2_splat_UInt32_arg.name = "val"_c;
    Float16x2_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x2_splat_UInt32.documentation = "Splat u32 to f16x2"_c;
    Float16x2_splat_UInt32.name = Float16x2_splat_UInt32_name;
    Float16x2_splat_UInt32.compileTime = true;
    Float16x2_splat_UInt32.backendIndex = 365;
    Float16x2_splat_UInt32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_UInt32.parameters = Float16x2_splat_UInt32_args;
    Symbol::Resolved(&Float16x2_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2_splat_UInt32)->signature = "f16x2(u32) f16x2"_c;
    Symbol::Resolved(&Float16x2_splat_UInt32)->name = "f16x2(u32)"_c;
    Symbol::Resolved(&Float16x2_splat_UInt32)->nameWithVarNames = "f16x2(val : u32)"_c;
    Symbol::Resolved(&Float16x2_splat_UInt32)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Int32x2
    Float16x2_from_Int32x2_arg.name = "val"_c;
    Float16x2_from_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Float16x2_from_Int32x2.documentation = "Convert from i32x2 to f16x2"_c;
    Float16x2_from_Int32x2.name = Float16x2_from_Int32x2_name;
    Float16x2_from_Int32x2.compileTime = true;
    Float16x2_from_Int32x2.backendIndex = 366;
    Float16x2_from_Int32x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_from_Int32x2.parameters = Float16x2_from_Int32x2_args;
    Symbol::Resolved(&Float16x2_from_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Float16x2_from_Int32x2)->signature = "f16x2(i32x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_from_Int32x2)->name = "f16x2(i32x2)"_c;
    Symbol::Resolved(&Float16x2_from_Int32x2)->nameWithVarNames = "f16x2(val : i32x2)"_c;
    Symbol::Resolved(&Float16x2_from_Int32x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Int32
    Float16x2_splat_Int32_arg.name = "val"_c;
    Float16x2_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x2_splat_Int32.documentation = "Splat i32 to f16x2"_c;
    Float16x2_splat_Int32.name = Float16x2_splat_Int32_name;
    Float16x2_splat_Int32.compileTime = true;
    Float16x2_splat_Int32.backendIndex = 367;
    Float16x2_splat_Int32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_Int32.parameters = Float16x2_splat_Int32_args;
    Symbol::Resolved(&Float16x2_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2_splat_Int32)->signature = "f16x2(i32) f16x2"_c;
    Symbol::Resolved(&Float16x2_splat_Int32)->name = "f16x2(i32)"_c;
    Symbol::Resolved(&Float16x2_splat_Int32)->nameWithVarNames = "f16x2(val : i32)"_c;
    Symbol::Resolved(&Float16x2_splat_Int32)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Bool8x2
    Float16x2_from_Bool8x2_arg.name = "val"_c;
    Float16x2_from_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Float16x2_from_Bool8x2.documentation = "Convert from b8x2 to f16x2"_c;
    Float16x2_from_Bool8x2.name = Float16x2_from_Bool8x2_name;
    Float16x2_from_Bool8x2.compileTime = true;
    Float16x2_from_Bool8x2.backendIndex = 368;
    Float16x2_from_Bool8x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_from_Bool8x2.parameters = Float16x2_from_Bool8x2_args;
    Symbol::Resolved(&Float16x2_from_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Float16x2_from_Bool8x2)->signature = "f16x2(b8x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_from_Bool8x2)->name = "f16x2(b8x2)"_c;
    Symbol::Resolved(&Float16x2_from_Bool8x2)->nameWithVarNames = "f16x2(val : b8x2)"_c;
    Symbol::Resolved(&Float16x2_from_Bool8x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Bool8
    Float16x2_splat_Bool8_arg.name = "val"_c;
    Float16x2_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Float16x2_splat_Bool8.documentation = "Splat b8 to f16x2"_c;
    Float16x2_splat_Bool8.name = Float16x2_splat_Bool8_name;
    Float16x2_splat_Bool8.compileTime = true;
    Float16x2_splat_Bool8.backendIndex = 369;
    Float16x2_splat_Bool8.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_Bool8.parameters = Float16x2_splat_Bool8_args;
    Symbol::Resolved(&Float16x2_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Float16x2_splat_Bool8)->signature = "f16x2(b8) f16x2"_c;
    Symbol::Resolved(&Float16x2_splat_Bool8)->name = "f16x2(b8)"_c;
    Symbol::Resolved(&Float16x2_splat_Bool8)->nameWithVarNames = "f16x2(val : b8)"_c;
    Symbol::Resolved(&Float16x2_splat_Bool8)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Float16x2
    Float16x2_from_Float16x2_arg.name = "val"_c;
    Float16x2_from_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_from_Float16x2.documentation = "Convert from f16x2 to f16x2"_c;
    Float16x2_from_Float16x2.name = Float16x2_from_Float16x2_name;
    Float16x2_from_Float16x2.compileTime = true;
    Float16x2_from_Float16x2.backendIndex = 370;
    Float16x2_from_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_from_Float16x2.parameters = Float16x2_from_Float16x2_args;
    Symbol::Resolved(&Float16x2_from_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_from_Float16x2)->signature = "f16x2(f16x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_from_Float16x2)->name = "f16x2(f16x2)"_c;
    Symbol::Resolved(&Float16x2_from_Float16x2)->nameWithVarNames = "f16x2(val : f16x2)"_c;
    Symbol::Resolved(&Float16x2_from_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Float16
    Float16x2_splat_Float16_arg.name = "val"_c;
    Float16x2_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x2_splat_Float16.documentation = "Splat f16 to f16x2"_c;
    Float16x2_splat_Float16.name = Float16x2_splat_Float16_name;
    Float16x2_splat_Float16.compileTime = true;
    Float16x2_splat_Float16.backendIndex = 371;
    Float16x2_splat_Float16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_Float16.parameters = Float16x2_splat_Float16_args;
    Symbol::Resolved(&Float16x2_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2_splat_Float16)->signature = "f16x2(f16) f16x2"_c;
    Symbol::Resolved(&Float16x2_splat_Float16)->name = "f16x2(f16)"_c;
    Symbol::Resolved(&Float16x2_splat_Float16)->nameWithVarNames = "f16x2(val : f16)"_c;
    Symbol::Resolved(&Float16x2_splat_Float16)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with UInt16x2
    Float16x2_from_UInt16x2_arg.name = "val"_c;
    Float16x2_from_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    Float16x2_from_UInt16x2.documentation = "Convert from u16x2 to f16x2"_c;
    Float16x2_from_UInt16x2.name = Float16x2_from_UInt16x2_name;
    Float16x2_from_UInt16x2.compileTime = true;
    Float16x2_from_UInt16x2.backendIndex = 372;
    Float16x2_from_UInt16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_from_UInt16x2.parameters = Float16x2_from_UInt16x2_args;
    Symbol::Resolved(&Float16x2_from_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&Float16x2_from_UInt16x2)->signature = "f16x2(u16x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_from_UInt16x2)->name = "f16x2(u16x2)"_c;
    Symbol::Resolved(&Float16x2_from_UInt16x2)->nameWithVarNames = "f16x2(val : u16x2)"_c;
    Symbol::Resolved(&Float16x2_from_UInt16x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with UInt16
    Float16x2_splat_UInt16_arg.name = "val"_c;
    Float16x2_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x2_splat_UInt16.documentation = "Splat u16 to f16x2"_c;
    Float16x2_splat_UInt16.name = Float16x2_splat_UInt16_name;
    Float16x2_splat_UInt16.compileTime = true;
    Float16x2_splat_UInt16.backendIndex = 373;
    Float16x2_splat_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_UInt16.parameters = Float16x2_splat_UInt16_args;
    Symbol::Resolved(&Float16x2_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2_splat_UInt16)->signature = "f16x2(u16) f16x2"_c;
    Symbol::Resolved(&Float16x2_splat_UInt16)->name = "f16x2(u16)"_c;
    Symbol::Resolved(&Float16x2_splat_UInt16)->nameWithVarNames = "f16x2(val : u16)"_c;
    Symbol::Resolved(&Float16x2_splat_UInt16)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Int16x2
    Float16x2_from_Int16x2_arg.name = "val"_c;
    Float16x2_from_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Float16x2_from_Int16x2.documentation = "Convert from i16x2 to f16x2"_c;
    Float16x2_from_Int16x2.name = Float16x2_from_Int16x2_name;
    Float16x2_from_Int16x2.compileTime = true;
    Float16x2_from_Int16x2.backendIndex = 374;
    Float16x2_from_Int16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_from_Int16x2.parameters = Float16x2_from_Int16x2_args;
    Symbol::Resolved(&Float16x2_from_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Float16x2_from_Int16x2)->signature = "f16x2(i16x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_from_Int16x2)->name = "f16x2(i16x2)"_c;
    Symbol::Resolved(&Float16x2_from_Int16x2)->nameWithVarNames = "f16x2(val : i16x2)"_c;
    Symbol::Resolved(&Float16x2_from_Int16x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Int16
    Float16x2_splat_Int16_arg.name = "val"_c;
    Float16x2_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x2_splat_Int16.documentation = "Splat i16 to f16x2"_c;
    Float16x2_splat_Int16.name = Float16x2_splat_Int16_name;
    Float16x2_splat_Int16.compileTime = true;
    Float16x2_splat_Int16.backendIndex = 375;
    Float16x2_splat_Int16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_Int16.parameters = Float16x2_splat_Int16_args;
    Symbol::Resolved(&Float16x2_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2_splat_Int16)->signature = "f16x2(i16) f16x2"_c;
    Symbol::Resolved(&Float16x2_splat_Int16)->name = "f16x2(i16)"_c;
    Symbol::Resolved(&Float16x2_splat_Int16)->nameWithVarNames = "f16x2(val : i16)"_c;
    Symbol::Resolved(&Float16x2_splat_Int16)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Float16, Float16
    Float16x2_ctor0_arg0_Float16.name = "arg0"_c;
    Float16x2_ctor0_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16x2_ctor0_arg1_Float16.name = "arg1"_c;
    Float16x2_ctor0_arg1_Float16.type = Type::FullType{ Float16Type.name };
    Float16x2_ctor0.name = Float16x2_ctor0_name;
    Float16x2_ctor0.compileTime = true;
    Float16x2_ctor0.backendIndex = 376;
    Float16x2_ctor0.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_ctor0.parameters = Float16x2_ctor0_args;
    Symbol::Resolved(&Float16x2_ctor0_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2_ctor0_arg1_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2_ctor0)->signature = "f16x2(f16,f16) f16x2"_c;
    Symbol::Resolved(&Float16x2_ctor0)->name = "f16x2(f16,f16)"_c;
    Symbol::Resolved(&Float16x2_ctor0)->nameWithVarNames = "f16x2(arg0 : f16, arg1 : f16)"_c;
    Symbol::Resolved(&Float16x2_ctor0)->returnTypeSymbol = &Float16x2Type;

    /// u16x2 with Float32x2
    UInt16x2_from_Float32x2_arg.name = "val"_c;
    UInt16x2_from_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    UInt16x2_from_Float32x2.documentation = "Convert from f32x2 to u16x2"_c;
    UInt16x2_from_Float32x2.name = UInt16x2_from_Float32x2_name;
    UInt16x2_from_Float32x2.compileTime = true;
    UInt16x2_from_Float32x2.backendIndex = 402;
    UInt16x2_from_Float32x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_from_Float32x2.parameters = UInt16x2_from_Float32x2_args;
    Symbol::Resolved(&UInt16x2_from_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&UInt16x2_from_Float32x2)->signature = "u16x2(f32x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_from_Float32x2)->name = "u16x2(f32x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Float32x2)->nameWithVarNames = "u16x2(val : f32x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Float32x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Float32
    UInt16x2_splat_Float32_arg.name = "val"_c;
    UInt16x2_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt16x2_splat_Float32.documentation = "Splat f32 to u16x2"_c;
    UInt16x2_splat_Float32.name = UInt16x2_splat_Float32_name;
    UInt16x2_splat_Float32.compileTime = true;
    UInt16x2_splat_Float32.backendIndex = 403;
    UInt16x2_splat_Float32.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_Float32.parameters = UInt16x2_splat_Float32_args;
    Symbol::Resolved(&UInt16x2_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt16x2_splat_Float32)->signature = "u16x2(f32) u16x2"_c;
    Symbol::Resolved(&UInt16x2_splat_Float32)->name = "u16x2(f32)"_c;
    Symbol::Resolved(&UInt16x2_splat_Float32)->nameWithVarNames = "u16x2(val : f32)"_c;
    Symbol::Resolved(&UInt16x2_splat_Float32)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with UInt32x2
    UInt16x2_from_UInt32x2_arg.name = "val"_c;
    UInt16x2_from_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt16x2_from_UInt32x2.documentation = "Convert from u32x2 to u16x2"_c;
    UInt16x2_from_UInt32x2.name = UInt16x2_from_UInt32x2_name;
    UInt16x2_from_UInt32x2.compileTime = true;
    UInt16x2_from_UInt32x2.backendIndex = 404;
    UInt16x2_from_UInt32x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_from_UInt32x2.parameters = UInt16x2_from_UInt32x2_args;
    Symbol::Resolved(&UInt16x2_from_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt16x2_from_UInt32x2)->signature = "u16x2(u32x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_from_UInt32x2)->name = "u16x2(u32x2)"_c;
    Symbol::Resolved(&UInt16x2_from_UInt32x2)->nameWithVarNames = "u16x2(val : u32x2)"_c;
    Symbol::Resolved(&UInt16x2_from_UInt32x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with UInt32
    UInt16x2_splat_UInt32_arg.name = "val"_c;
    UInt16x2_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt16x2_splat_UInt32.documentation = "Splat u32 to u16x2"_c;
    UInt16x2_splat_UInt32.name = UInt16x2_splat_UInt32_name;
    UInt16x2_splat_UInt32.compileTime = true;
    UInt16x2_splat_UInt32.backendIndex = 405;
    UInt16x2_splat_UInt32.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_UInt32.parameters = UInt16x2_splat_UInt32_args;
    Symbol::Resolved(&UInt16x2_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x2_splat_UInt32)->signature = "u16x2(u32) u16x2"_c;
    Symbol::Resolved(&UInt16x2_splat_UInt32)->name = "u16x2(u32)"_c;
    Symbol::Resolved(&UInt16x2_splat_UInt32)->nameWithVarNames = "u16x2(val : u32)"_c;
    Symbol::Resolved(&UInt16x2_splat_UInt32)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Int32x2
    UInt16x2_from_Int32x2_arg.name = "val"_c;
    UInt16x2_from_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    UInt16x2_from_Int32x2.documentation = "Convert from i32x2 to u16x2"_c;
    UInt16x2_from_Int32x2.name = UInt16x2_from_Int32x2_name;
    UInt16x2_from_Int32x2.compileTime = true;
    UInt16x2_from_Int32x2.backendIndex = 406;
    UInt16x2_from_Int32x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_from_Int32x2.parameters = UInt16x2_from_Int32x2_args;
    Symbol::Resolved(&UInt16x2_from_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&UInt16x2_from_Int32x2)->signature = "u16x2(i32x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_from_Int32x2)->name = "u16x2(i32x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Int32x2)->nameWithVarNames = "u16x2(val : i32x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Int32x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Int32
    UInt16x2_splat_Int32_arg.name = "val"_c;
    UInt16x2_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt16x2_splat_Int32.documentation = "Splat i32 to u16x2"_c;
    UInt16x2_splat_Int32.name = UInt16x2_splat_Int32_name;
    UInt16x2_splat_Int32.compileTime = true;
    UInt16x2_splat_Int32.backendIndex = 407;
    UInt16x2_splat_Int32.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_Int32.parameters = UInt16x2_splat_Int32_args;
    Symbol::Resolved(&UInt16x2_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x2_splat_Int32)->signature = "u16x2(i32) u16x2"_c;
    Symbol::Resolved(&UInt16x2_splat_Int32)->name = "u16x2(i32)"_c;
    Symbol::Resolved(&UInt16x2_splat_Int32)->nameWithVarNames = "u16x2(val : i32)"_c;
    Symbol::Resolved(&UInt16x2_splat_Int32)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Bool8x2
    UInt16x2_from_Bool8x2_arg.name = "val"_c;
    UInt16x2_from_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    UInt16x2_from_Bool8x2.documentation = "Convert from b8x2 to u16x2"_c;
    UInt16x2_from_Bool8x2.name = UInt16x2_from_Bool8x2_name;
    UInt16x2_from_Bool8x2.compileTime = true;
    UInt16x2_from_Bool8x2.backendIndex = 408;
    UInt16x2_from_Bool8x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_from_Bool8x2.parameters = UInt16x2_from_Bool8x2_args;
    Symbol::Resolved(&UInt16x2_from_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&UInt16x2_from_Bool8x2)->signature = "u16x2(b8x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_from_Bool8x2)->name = "u16x2(b8x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Bool8x2)->nameWithVarNames = "u16x2(val : b8x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Bool8x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Bool8
    UInt16x2_splat_Bool8_arg.name = "val"_c;
    UInt16x2_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    UInt16x2_splat_Bool8.documentation = "Splat b8 to u16x2"_c;
    UInt16x2_splat_Bool8.name = UInt16x2_splat_Bool8_name;
    UInt16x2_splat_Bool8.compileTime = true;
    UInt16x2_splat_Bool8.backendIndex = 409;
    UInt16x2_splat_Bool8.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_Bool8.parameters = UInt16x2_splat_Bool8_args;
    Symbol::Resolved(&UInt16x2_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&UInt16x2_splat_Bool8)->signature = "u16x2(b8) u16x2"_c;
    Symbol::Resolved(&UInt16x2_splat_Bool8)->name = "u16x2(b8)"_c;
    Symbol::Resolved(&UInt16x2_splat_Bool8)->nameWithVarNames = "u16x2(val : b8)"_c;
    Symbol::Resolved(&UInt16x2_splat_Bool8)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Float16x2
    UInt16x2_from_Float16x2_arg.name = "val"_c;
    UInt16x2_from_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    UInt16x2_from_Float16x2.documentation = "Convert from f16x2 to u16x2"_c;
    UInt16x2_from_Float16x2.name = UInt16x2_from_Float16x2_name;
    UInt16x2_from_Float16x2.compileTime = true;
    UInt16x2_from_Float16x2.backendIndex = 410;
    UInt16x2_from_Float16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_from_Float16x2.parameters = UInt16x2_from_Float16x2_args;
    Symbol::Resolved(&UInt16x2_from_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&UInt16x2_from_Float16x2)->signature = "u16x2(f16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_from_Float16x2)->name = "u16x2(f16x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Float16x2)->nameWithVarNames = "u16x2(val : f16x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Float16x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Float16
    UInt16x2_splat_Float16_arg.name = "val"_c;
    UInt16x2_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt16x2_splat_Float16.documentation = "Splat f16 to u16x2"_c;
    UInt16x2_splat_Float16.name = UInt16x2_splat_Float16_name;
    UInt16x2_splat_Float16.compileTime = true;
    UInt16x2_splat_Float16.backendIndex = 411;
    UInt16x2_splat_Float16.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_Float16.parameters = UInt16x2_splat_Float16_args;
    Symbol::Resolved(&UInt16x2_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x2_splat_Float16)->signature = "u16x2(f16) u16x2"_c;
    Symbol::Resolved(&UInt16x2_splat_Float16)->name = "u16x2(f16)"_c;
    Symbol::Resolved(&UInt16x2_splat_Float16)->nameWithVarNames = "u16x2(val : f16)"_c;
    Symbol::Resolved(&UInt16x2_splat_Float16)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with UInt16x2
    UInt16x2_from_UInt16x2_arg.name = "val"_c;
    UInt16x2_from_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_from_UInt16x2.documentation = "Convert from u16x2 to u16x2"_c;
    UInt16x2_from_UInt16x2.name = UInt16x2_from_UInt16x2_name;
    UInt16x2_from_UInt16x2.compileTime = true;
    UInt16x2_from_UInt16x2.backendIndex = 412;
    UInt16x2_from_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_from_UInt16x2.parameters = UInt16x2_from_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_from_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_from_UInt16x2)->signature = "u16x2(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_from_UInt16x2)->name = "u16x2(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_from_UInt16x2)->nameWithVarNames = "u16x2(val : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_from_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

}
} // namespace GPULang
