//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// ceil with Float32x4
Variable ceil_Float32x4_arg;
Function ceil_Float32x4;
inline constexpr std::array ceil_Float32x4_args = { &ceil_Float32x4_arg };

/// ceil with Float16
Variable ceil_Float16_arg;
Function ceil_Float16;
inline constexpr std::array ceil_Float16_args = { &ceil_Float16_arg };

/// ceil with Float16x2
Variable ceil_Float16x2_arg;
Function ceil_Float16x2;
inline constexpr std::array ceil_Float16x2_args = { &ceil_Float16x2_arg };

/// ceil with Float16x3
Variable ceil_Float16x3_arg;
Function ceil_Float16x3;
inline constexpr std::array ceil_Float16x3_args = { &ceil_Float16x3_arg };

/// ceil with Float16x4
Variable ceil_Float16x4_arg;
Function ceil_Float16x4;
inline constexpr std::array ceil_Float16x4_args = { &ceil_Float16x4_arg };

/// floor with Float32
Variable floor_Float32_arg;
Function floor_Float32;
inline constexpr std::array floor_Float32_args = { &floor_Float32_arg };

/// floor with Float32x2
Variable floor_Float32x2_arg;
Function floor_Float32x2;
inline constexpr std::array floor_Float32x2_args = { &floor_Float32x2_arg };

/// floor with Float32x3
Variable floor_Float32x3_arg;
Function floor_Float32x3;
inline constexpr std::array floor_Float32x3_args = { &floor_Float32x3_arg };

/// floor with Float32x4
Variable floor_Float32x4_arg;
Function floor_Float32x4;
inline constexpr std::array floor_Float32x4_args = { &floor_Float32x4_arg };

/// floor with Float16
Variable floor_Float16_arg;
Function floor_Float16;
inline constexpr std::array floor_Float16_args = { &floor_Float16_arg };

/// floor with Float16x2
Variable floor_Float16x2_arg;
Function floor_Float16x2;
inline constexpr std::array floor_Float16x2_args = { &floor_Float16x2_arg };

/// floor with Float16x3
Variable floor_Float16x3_arg;
Function floor_Float16x3;
inline constexpr std::array floor_Float16x3_args = { &floor_Float16x3_arg };

/// floor with Float16x4
Variable floor_Float16x4_arg;
Function floor_Float16x4;
inline constexpr std::array floor_Float16x4_args = { &floor_Float16x4_arg };

/// fract with Float32
Variable fract_Float32_arg;
Function fract_Float32;
inline constexpr std::array fract_Float32_args = { &fract_Float32_arg };

/// fract with Float32x2
Variable fract_Float32x2_arg;
Function fract_Float32x2;
inline constexpr std::array fract_Float32x2_args = { &fract_Float32x2_arg };

/// fract with Float32x3
Variable fract_Float32x3_arg;
Function fract_Float32x3;
inline constexpr std::array fract_Float32x3_args = { &fract_Float32x3_arg };

/// fract with Float32x4
Variable fract_Float32x4_arg;
Function fract_Float32x4;
inline constexpr std::array fract_Float32x4_args = { &fract_Float32x4_arg };

/// fract with Float16
Variable fract_Float16_arg;
Function fract_Float16;
inline constexpr std::array fract_Float16_args = { &fract_Float16_arg };

/// fract with Float16x2
Variable fract_Float16x2_arg;
Function fract_Float16x2;
inline constexpr std::array fract_Float16x2_args = { &fract_Float16x2_arg };

/// fract with Float16x3
Variable fract_Float16x3_arg;
Function fract_Float16x3;
inline constexpr std::array fract_Float16x3_args = { &fract_Float16x3_arg };

/// fract with Float16x4
Variable fract_Float16x4_arg;
Function fract_Float16x4;
inline constexpr std::array fract_Float16x4_args = { &fract_Float16x4_arg };

/// saturate with Float32
Variable saturate_Float32_arg;
Function saturate_Float32;
inline constexpr std::array saturate_Float32_args = { &saturate_Float32_arg };

/// saturate with Float32x2
Variable saturate_Float32x2_arg;
Function saturate_Float32x2;
inline constexpr std::array saturate_Float32x2_args = { &saturate_Float32x2_arg };

/// saturate with Float32x3
Variable saturate_Float32x3_arg;
Function saturate_Float32x3;
inline constexpr std::array saturate_Float32x3_args = { &saturate_Float32x3_arg };

/// saturate with Float32x4
Variable saturate_Float32x4_arg;
Function saturate_Float32x4;
inline constexpr std::array saturate_Float32x4_args = { &saturate_Float32x4_arg };

/// saturate with Float16
Variable saturate_Float16_arg;
Function saturate_Float16;
inline constexpr std::array saturate_Float16_args = { &saturate_Float16_arg };

/// saturate with Float16x2
Variable saturate_Float16x2_arg;
Function saturate_Float16x2;
inline constexpr std::array saturate_Float16x2_args = { &saturate_Float16x2_arg };

/// saturate with Float16x3
Variable saturate_Float16x3_arg;
Function saturate_Float16x3;
inline constexpr std::array saturate_Float16x3_args = { &saturate_Float16x3_arg };

/// saturate with Float16x4
Variable saturate_Float16x4_arg;
Function saturate_Float16x4;
inline constexpr std::array saturate_Float16x4_args = { &saturate_Float16x4_arg };

/// trunc with Float32
Variable trunc_Float32_arg;
Function trunc_Float32;
inline constexpr std::array trunc_Float32_args = { &trunc_Float32_arg };

/// trunc with Float32x2
Variable trunc_Float32x2_arg;
Function trunc_Float32x2;
inline constexpr std::array trunc_Float32x2_args = { &trunc_Float32x2_arg };

/// trunc with Float32x3
Variable trunc_Float32x3_arg;
Function trunc_Float32x3;
inline constexpr std::array trunc_Float32x3_args = { &trunc_Float32x3_arg };

/// trunc with Float32x4
Variable trunc_Float32x4_arg;
Function trunc_Float32x4;
inline constexpr std::array trunc_Float32x4_args = { &trunc_Float32x4_arg };

/// trunc with Float16
Variable trunc_Float16_arg;
Function trunc_Float16;
inline constexpr std::array trunc_Float16_args = { &trunc_Float16_arg };

/// trunc with Float16x2
Variable trunc_Float16x2_arg;
Function trunc_Float16x2;
inline constexpr std::array trunc_Float16x2_args = { &trunc_Float16x2_arg };

/// trunc with Float16x3
Variable trunc_Float16x3_arg;
Function trunc_Float16x3;
inline constexpr std::array trunc_Float16x3_args = { &trunc_Float16x3_arg };

/// trunc with Float16x4
Variable trunc_Float16x4_arg;
Function trunc_Float16x4;
inline constexpr std::array trunc_Float16x4_args = { &trunc_Float16x4_arg };

/// ddx with Float32
Variable ddx_Float32_arg;
Function ddx_Float32;
inline constexpr std::array ddx_Float32_args = { &ddx_Float32_arg };

/// ddx with Float32x2
Variable ddx_Float32x2_arg;
Function ddx_Float32x2;
inline constexpr std::array ddx_Float32x2_args = { &ddx_Float32x2_arg };

/// ddx with Float32x3
Variable ddx_Float32x3_arg;
Function ddx_Float32x3;
inline constexpr std::array ddx_Float32x3_args = { &ddx_Float32x3_arg };

/// ddx with Float32x4
Variable ddx_Float32x4_arg;
Function ddx_Float32x4;
inline constexpr std::array ddx_Float32x4_args = { &ddx_Float32x4_arg };

/// ddx with Float16
Variable ddx_Float16_arg;
Function ddx_Float16;
inline constexpr std::array ddx_Float16_args = { &ddx_Float16_arg };

/// ddx with Float16x2
Variable ddx_Float16x2_arg;
Function ddx_Float16x2;
inline constexpr std::array ddx_Float16x2_args = { &ddx_Float16x2_arg };

/// ddx with Float16x3
Variable ddx_Float16x3_arg;
Function ddx_Float16x3;
inline constexpr std::array ddx_Float16x3_args = { &ddx_Float16x3_arg };

/// ddx with Float16x4
Variable ddx_Float16x4_arg;
Function ddx_Float16x4;
inline constexpr std::array ddx_Float16x4_args = { &ddx_Float16x4_arg };

/// ddy with Float32
Variable ddy_Float32_arg;
Function ddy_Float32;
inline constexpr std::array ddy_Float32_args = { &ddy_Float32_arg };

/// ddy with Float32x2
Variable ddy_Float32x2_arg;
Function ddy_Float32x2;
inline constexpr std::array ddy_Float32x2_args = { &ddy_Float32x2_arg };

/// ddy with Float32x3
Variable ddy_Float32x3_arg;
Function ddy_Float32x3;
inline constexpr std::array ddy_Float32x3_args = { &ddy_Float32x3_arg };

/// ddy with Float32x4
Variable ddy_Float32x4_arg;
Function ddy_Float32x4;
inline constexpr std::array ddy_Float32x4_args = { &ddy_Float32x4_arg };

/// ddy with Float16
Variable ddy_Float16_arg;
Function ddy_Float16;
inline constexpr std::array ddy_Float16_args = { &ddy_Float16_arg };

/// ddy with Float16x2
Variable ddy_Float16x2_arg;
Function ddy_Float16x2;
inline constexpr std::array ddy_Float16x2_args = { &ddy_Float16x2_arg };

/// ddy with Float16x3
Variable ddy_Float16x3_arg;
Function ddy_Float16x3;
inline constexpr std::array ddy_Float16x3_args = { &ddy_Float16x3_arg };

/// ddy with Float16x4
Variable ddy_Float16x4_arg;
Function ddy_Float16x4;
inline constexpr std::array ddy_Float16x4_args = { &ddy_Float16x4_arg };

/// fwidth with Float32
Variable fwidth_Float32_arg;
Function fwidth_Float32;
inline constexpr std::array fwidth_Float32_args = { &fwidth_Float32_arg };

/// fwidth with Float32x2
Variable fwidth_Float32x2_arg;
Function fwidth_Float32x2;
inline constexpr std::array fwidth_Float32x2_args = { &fwidth_Float32x2_arg };

/// fwidth with Float32x3
Variable fwidth_Float32x3_arg;
Function fwidth_Float32x3;
inline constexpr std::array fwidth_Float32x3_args = { &fwidth_Float32x3_arg };

/// fwidth with Float32x4
Variable fwidth_Float32x4_arg;
Function fwidth_Float32x4;
inline constexpr std::array fwidth_Float32x4_args = { &fwidth_Float32x4_arg };

/// fwidth with Float16
Variable fwidth_Float16_arg;
Function fwidth_Float16;
inline constexpr std::array fwidth_Float16_args = { &fwidth_Float16_arg };

/// fwidth with Float16x2
Variable fwidth_Float16x2_arg;
Function fwidth_Float16x2;
inline constexpr std::array fwidth_Float16x2_args = { &fwidth_Float16x2_arg };

/// fwidth with Float16x3
Variable fwidth_Float16x3_arg;
Function fwidth_Float16x3;
inline constexpr std::array fwidth_Float16x3_args = { &fwidth_Float16x3_arg };

/// fwidth with Float16x4
Variable fwidth_Float16x4_arg;
Function fwidth_Float16x4;
inline constexpr std::array fwidth_Float16x4_args = { &fwidth_Float16x4_arg };

/// sign with Int32
Variable sign_Int32_arg;
Function sign_Int32;
inline constexpr std::array sign_Int32_args = { &sign_Int32_arg };

/// sign with Int32x2
Variable sign_Int32x2_arg;
Function sign_Int32x2;
inline constexpr std::array sign_Int32x2_args = { &sign_Int32x2_arg };

/// sign with Int32x3
Variable sign_Int32x3_arg;
Function sign_Int32x3;
inline constexpr std::array sign_Int32x3_args = { &sign_Int32x3_arg };

/// sign with Int32x4
Variable sign_Int32x4_arg;
Function sign_Int32x4;
inline constexpr std::array sign_Int32x4_args = { &sign_Int32x4_arg };

/// sign with Int16
Variable sign_Int16_arg;
Function sign_Int16;
inline constexpr std::array sign_Int16_args = { &sign_Int16_arg };

/// sign with Int16x2
Variable sign_Int16x2_arg;
Function sign_Int16x2;
inline constexpr std::array sign_Int16x2_args = { &sign_Int16x2_arg };

/// sign with Int16x3
Variable sign_Int16x3_arg;
Function sign_Int16x3;
inline constexpr std::array sign_Int16x3_args = { &sign_Int16x3_arg };

/// sign with Int16x4
Variable sign_Int16x4_arg;
Function sign_Int16x4;
inline constexpr std::array sign_Int16x4_args = { &sign_Int16x4_arg };

/// sign with Float32
Variable sign_Float32_arg;
Function sign_Float32;
inline constexpr std::array sign_Float32_args = { &sign_Float32_arg };

/// sign with Float32x2
Variable sign_Float32x2_arg;
Function sign_Float32x2;
inline constexpr std::array sign_Float32x2_args = { &sign_Float32x2_arg };

/// sign with Float32x3
Variable sign_Float32x3_arg;
Function sign_Float32x3;
inline constexpr std::array sign_Float32x3_args = { &sign_Float32x3_arg };

/// sign with Float32x4
Variable sign_Float32x4_arg;
Function sign_Float32x4;
inline constexpr std::array sign_Float32x4_args = { &sign_Float32x4_arg };

/// sign with Float16
Variable sign_Float16_arg;
Function sign_Float16;
inline constexpr std::array sign_Float16_args = { &sign_Float16_arg };

/// sign with Float16x2
Variable sign_Float16x2_arg;
Function sign_Float16x2;
inline constexpr std::array sign_Float16x2_args = { &sign_Float16x2_arg };

/// sign with Float16x3
Variable sign_Float16x3_arg;
Function sign_Float16x3;
inline constexpr std::array sign_Float16x3_args = { &sign_Float16x3_arg };

/// sign with Float16x4
Variable sign_Float16x4_arg;
Function sign_Float16x4;
inline constexpr std::array sign_Float16x4_args = { &sign_Float16x4_arg };

/// abs with Int32
Variable abs_Int32_arg;
Function abs_Int32;
inline constexpr std::array abs_Int32_args = { &abs_Int32_arg };

/// abs with Int32x2
Variable abs_Int32x2_arg;
Function abs_Int32x2;
inline constexpr std::array abs_Int32x2_args = { &abs_Int32x2_arg };

/// abs with Int32x3
Variable abs_Int32x3_arg;
Function abs_Int32x3;
inline constexpr std::array abs_Int32x3_args = { &abs_Int32x3_arg };

/// abs with Int32x4
Variable abs_Int32x4_arg;
Function abs_Int32x4;
inline constexpr std::array abs_Int32x4_args = { &abs_Int32x4_arg };

/// abs with Int16
Variable abs_Int16_arg;
Function abs_Int16;
inline constexpr std::array abs_Int16_args = { &abs_Int16_arg };

/// abs with Int16x2
Variable abs_Int16x2_arg;
Function abs_Int16x2;
inline constexpr std::array abs_Int16x2_args = { &abs_Int16x2_arg };

/// abs with Int16x3
Variable abs_Int16x3_arg;
Function abs_Int16x3;
inline constexpr std::array abs_Int16x3_args = { &abs_Int16x3_arg };

/// abs with Int16x4
Variable abs_Int16x4_arg;
Function abs_Int16x4;
inline constexpr std::array abs_Int16x4_args = { &abs_Int16x4_arg };

/// abs with Float32
Variable abs_Float32_arg;
Function abs_Float32;
inline constexpr std::array abs_Float32_args = { &abs_Float32_arg };

/// abs with Float32x2
Variable abs_Float32x2_arg;
Function abs_Float32x2;
inline constexpr std::array abs_Float32x2_args = { &abs_Float32x2_arg };

/// abs with Float32x3
Variable abs_Float32x3_arg;
Function abs_Float32x3;
inline constexpr std::array abs_Float32x3_args = { &abs_Float32x3_arg };

/// abs with Float32x4
Variable abs_Float32x4_arg;
Function abs_Float32x4;
inline constexpr std::array abs_Float32x4_args = { &abs_Float32x4_arg };

/// abs with Float16
Variable abs_Float16_arg;
Function abs_Float16;
inline constexpr std::array abs_Float16_args = { &abs_Float16_arg };

/// abs with Float16x2
Variable abs_Float16x2_arg;
Function abs_Float16x2;
inline constexpr std::array abs_Float16x2_args = { &abs_Float16x2_arg };

/// abs with Float16x3
Variable abs_Float16x3_arg;
Function abs_Float16x3;
inline constexpr std::array abs_Float16x3_args = { &abs_Float16x3_arg };

/// abs with Float16x4
Variable abs_Float16x4_arg;
Function abs_Float16x4;
inline constexpr std::array abs_Float16x4_args = { &abs_Float16x4_arg };

/// castToF16 with UInt16
Variable castToF16_UInt16_arg;
Function castToF16_UInt16;
inline constexpr std::array castToF16_UInt16_args = { &castToF16_UInt16_arg };

/// castToF16 with Int16
Variable castToF16_Int16_arg;
Function castToF16_Int16;
inline constexpr std::array castToF16_Int16_args = { &castToF16_Int16_arg };

/// castToU16 with Float16
Variable castToU16_Float16_arg;
Function castToU16_Float16;
inline constexpr std::array castToU16_Float16_args = { &castToU16_Float16_arg };

/// castToU16 with Int16
Variable castToU16_Int16_arg;
Function castToU16_Int16;
inline constexpr std::array castToU16_Int16_args = { &castToU16_Int16_arg };

/// castToI16 with Float16
Variable castToI16_Float16_arg;
Function castToI16_Float16;
inline constexpr std::array castToI16_Float16_args = { &castToI16_Float16_arg };

/// castToI16 with UInt16
Variable castToI16_UInt16_arg;
Function castToI16_UInt16;
inline constexpr std::array castToI16_UInt16_args = { &castToI16_UInt16_arg };

/// castToF32 with UInt32
Variable castToF32_UInt32_arg;
Function castToF32_UInt32;
inline constexpr std::array castToF32_UInt32_args = { &castToF32_UInt32_arg };

/// castToF32 with Int32
Variable castToF32_Int32_arg;
Function castToF32_Int32;
inline constexpr std::array castToF32_Int32_args = { &castToF32_Int32_arg };

/// castToU32 with Float32
Variable castToU32_Float32_arg;
Function castToU32_Float32;
inline constexpr std::array castToU32_Float32_args = { &castToU32_Float32_arg };

/// castToU32 with Int32
Variable castToU32_Int32_arg;
Function castToU32_Int32;
inline constexpr std::array castToU32_Int32_args = { &castToU32_Int32_arg };

/// castToI32 with Float32
Variable castToI32_Float32_arg;
Function castToI32_Float32;
inline constexpr std::array castToI32_Float32_args = { &castToI32_Float32_arg };

/// castToI32 with UInt32
Variable castToI32_UInt32_arg;
Function castToI32_UInt32;
inline constexpr std::array castToI32_UInt32_args = { &castToI32_UInt32_arg };

/// any with Bool8
Variable any_Bool8_arg;
Function any_Bool8;
inline constexpr std::array any_Bool8_args = { &any_Bool8_arg };

/// any with Bool8x2
Variable any_Bool8x2_arg;
Function any_Bool8x2;
inline constexpr std::array any_Bool8x2_args = { &any_Bool8x2_arg };

/// any with Bool8x3
Variable any_Bool8x3_arg;
Function any_Bool8x3;
inline constexpr std::array any_Bool8x3_args = { &any_Bool8x3_arg };

/// any with Bool8x4
Variable any_Bool8x4_arg;
Function any_Bool8x4;
inline constexpr std::array any_Bool8x4_args = { &any_Bool8x4_arg };

/// all with Bool8
Variable all_Bool8_arg;
Function all_Bool8;
inline constexpr std::array all_Bool8_args = { &all_Bool8_arg };

/// all with Bool8x2
Variable all_Bool8x2_arg;
Function all_Bool8x2;
inline constexpr std::array all_Bool8x2_args = { &all_Bool8x2_arg };

/// all with Bool8x3
Variable all_Bool8x3_arg;
Function all_Bool8x3;
inline constexpr std::array all_Bool8x3_args = { &all_Bool8x3_arg };

/// all with Bool8x4
Variable all_Bool8x4_arg;
Function all_Bool8x4;
inline constexpr std::array all_Bool8x4_args = { &all_Bool8x4_arg };

/// transpose with Float32x2x2
Variable transpose_Float32x2x2_arg;
Function transpose_Float32x2x2;
inline constexpr std::array transpose_Float32x2x2_args = { &transpose_Float32x2x2_arg };

/// transpose with Float16x2x2
Variable transpose_Float16x2x2_arg;
Function transpose_Float16x2x2;
inline constexpr std::array transpose_Float16x2x2_args = { &transpose_Float16x2x2_arg };

/// transpose with Float32x2x3
Variable transpose_Float32x2x3_arg;
Function transpose_Float32x2x3;
inline constexpr std::array transpose_Float32x2x3_args = { &transpose_Float32x2x3_arg };

/// transpose with Float16x2x3
Variable transpose_Float16x2x3_arg;
Function transpose_Float16x2x3;
inline constexpr std::array transpose_Float16x2x3_args = { &transpose_Float16x2x3_arg };

/// transpose with Float32x2x4
Variable transpose_Float32x2x4_arg;
Function transpose_Float32x2x4;
inline constexpr std::array transpose_Float32x2x4_args = { &transpose_Float32x2x4_arg };

/// transpose with Float16x2x4
Variable transpose_Float16x2x4_arg;
Function transpose_Float16x2x4;
inline constexpr std::array transpose_Float16x2x4_args = { &transpose_Float16x2x4_arg };

/// transpose with Float32x3x2
Variable transpose_Float32x3x2_arg;
Function transpose_Float32x3x2;
inline constexpr std::array transpose_Float32x3x2_args = { &transpose_Float32x3x2_arg };

/// transpose with Float16x3x2
Variable transpose_Float16x3x2_arg;
Function transpose_Float16x3x2;
inline constexpr std::array transpose_Float16x3x2_args = { &transpose_Float16x3x2_arg };

/// transpose with Float32x3x3
Variable transpose_Float32x3x3_arg;
Function transpose_Float32x3x3;
inline constexpr std::array transpose_Float32x3x3_args = { &transpose_Float32x3x3_arg };

/// transpose with Float16x3x3
Variable transpose_Float16x3x3_arg;
Function transpose_Float16x3x3;
inline constexpr std::array transpose_Float16x3x3_args = { &transpose_Float16x3x3_arg };

/// transpose with Float32x3x4
Variable transpose_Float32x3x4_arg;
Function transpose_Float32x3x4;
inline constexpr std::array transpose_Float32x3x4_args = { &transpose_Float32x3x4_arg };

/// transpose with Float16x3x4
Variable transpose_Float16x3x4_arg;
Function transpose_Float16x3x4;
inline constexpr std::array transpose_Float16x3x4_args = { &transpose_Float16x3x4_arg };

/// transpose with Float32x4x2
Variable transpose_Float32x4x2_arg;
Function transpose_Float32x4x2;
inline constexpr std::array transpose_Float32x4x2_args = { &transpose_Float32x4x2_arg };

/// transpose with Float16x4x2
Variable transpose_Float16x4x2_arg;
Function transpose_Float16x4x2;
inline constexpr std::array transpose_Float16x4x2_args = { &transpose_Float16x4x2_arg };

/// transpose with Float32x4x3
Variable transpose_Float32x4x3_arg;
Function transpose_Float32x4x3;
inline constexpr std::array transpose_Float32x4x3_args = { &transpose_Float32x4x3_arg };

void SetupIntrinsics6()
{
    /// ceil with Float32x4
    ceil_Float32x4_arg.name = "val"_c;
    ceil_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    ceil_Float32x4.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float32x4.name = "ceil"_c;
    ceil_Float32x4.backendIndex = 1705;
    ceil_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    ceil_Float32x4.parameters = ceil_Float32x4_args;
    Symbol::Resolved(&ceil_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&ceil_Float32x4)->signature = "ceil(f32x4) f32x4"_c;
    Symbol::Resolved(&ceil_Float32x4)->name = "ceil(f32x4)"_c;
    Symbol::Resolved(&ceil_Float32x4)->nameWithVarNames = "ceil(val : f32x4)"_c;
    Symbol::Resolved(&ceil_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// ceil with Float16
    ceil_Float16_arg.name = "val"_c;
    ceil_Float16_arg.type = Type::FullType{ Float16Type.name };
    ceil_Float16.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float16.name = "ceil"_c;
    ceil_Float16.backendIndex = 1706;
    ceil_Float16.returnType = Type::FullType { Float16Type.name };
    ceil_Float16.parameters = ceil_Float16_args;
    Symbol::Resolved(&ceil_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&ceil_Float16)->signature = "ceil(f16) f16"_c;
    Symbol::Resolved(&ceil_Float16)->name = "ceil(f16)"_c;
    Symbol::Resolved(&ceil_Float16)->nameWithVarNames = "ceil(val : f16)"_c;
    Symbol::Resolved(&ceil_Float16)->returnTypeSymbol = &Float16Type;

    /// ceil with Float16x2
    ceil_Float16x2_arg.name = "val"_c;
    ceil_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    ceil_Float16x2.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float16x2.name = "ceil"_c;
    ceil_Float16x2.backendIndex = 1707;
    ceil_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    ceil_Float16x2.parameters = ceil_Float16x2_args;
    Symbol::Resolved(&ceil_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&ceil_Float16x2)->signature = "ceil(f16x2) f16x2"_c;
    Symbol::Resolved(&ceil_Float16x2)->name = "ceil(f16x2)"_c;
    Symbol::Resolved(&ceil_Float16x2)->nameWithVarNames = "ceil(val : f16x2)"_c;
    Symbol::Resolved(&ceil_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// ceil with Float16x3
    ceil_Float16x3_arg.name = "val"_c;
    ceil_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    ceil_Float16x3.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float16x3.name = "ceil"_c;
    ceil_Float16x3.backendIndex = 1708;
    ceil_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    ceil_Float16x3.parameters = ceil_Float16x3_args;
    Symbol::Resolved(&ceil_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&ceil_Float16x3)->signature = "ceil(f16x3) f16x3"_c;
    Symbol::Resolved(&ceil_Float16x3)->name = "ceil(f16x3)"_c;
    Symbol::Resolved(&ceil_Float16x3)->nameWithVarNames = "ceil(val : f16x3)"_c;
    Symbol::Resolved(&ceil_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// ceil with Float16x4
    ceil_Float16x4_arg.name = "val"_c;
    ceil_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    ceil_Float16x4.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float16x4.name = "ceil"_c;
    ceil_Float16x4.backendIndex = 1709;
    ceil_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    ceil_Float16x4.parameters = ceil_Float16x4_args;
    Symbol::Resolved(&ceil_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&ceil_Float16x4)->signature = "ceil(f16x4) f16x4"_c;
    Symbol::Resolved(&ceil_Float16x4)->name = "ceil(f16x4)"_c;
    Symbol::Resolved(&ceil_Float16x4)->nameWithVarNames = "ceil(val : f16x4)"_c;
    Symbol::Resolved(&ceil_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// floor with Float32
    floor_Float32_arg.name = "val"_c;
    floor_Float32_arg.type = Type::FullType{ Float32Type.name };
    floor_Float32.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float32.name = "floor"_c;
    floor_Float32.backendIndex = 1710;
    floor_Float32.returnType = Type::FullType { Float32Type.name };
    floor_Float32.parameters = floor_Float32_args;
    Symbol::Resolved(&floor_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&floor_Float32)->signature = "floor(f32) f32"_c;
    Symbol::Resolved(&floor_Float32)->name = "floor(f32)"_c;
    Symbol::Resolved(&floor_Float32)->nameWithVarNames = "floor(val : f32)"_c;
    Symbol::Resolved(&floor_Float32)->returnTypeSymbol = &Float32Type;

    /// floor with Float32x2
    floor_Float32x2_arg.name = "val"_c;
    floor_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    floor_Float32x2.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float32x2.name = "floor"_c;
    floor_Float32x2.backendIndex = 1711;
    floor_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    floor_Float32x2.parameters = floor_Float32x2_args;
    Symbol::Resolved(&floor_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&floor_Float32x2)->signature = "floor(f32x2) f32x2"_c;
    Symbol::Resolved(&floor_Float32x2)->name = "floor(f32x2)"_c;
    Symbol::Resolved(&floor_Float32x2)->nameWithVarNames = "floor(val : f32x2)"_c;
    Symbol::Resolved(&floor_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// floor with Float32x3
    floor_Float32x3_arg.name = "val"_c;
    floor_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    floor_Float32x3.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float32x3.name = "floor"_c;
    floor_Float32x3.backendIndex = 1712;
    floor_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    floor_Float32x3.parameters = floor_Float32x3_args;
    Symbol::Resolved(&floor_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&floor_Float32x3)->signature = "floor(f32x3) f32x3"_c;
    Symbol::Resolved(&floor_Float32x3)->name = "floor(f32x3)"_c;
    Symbol::Resolved(&floor_Float32x3)->nameWithVarNames = "floor(val : f32x3)"_c;
    Symbol::Resolved(&floor_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// floor with Float32x4
    floor_Float32x4_arg.name = "val"_c;
    floor_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    floor_Float32x4.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float32x4.name = "floor"_c;
    floor_Float32x4.backendIndex = 1713;
    floor_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    floor_Float32x4.parameters = floor_Float32x4_args;
    Symbol::Resolved(&floor_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&floor_Float32x4)->signature = "floor(f32x4) f32x4"_c;
    Symbol::Resolved(&floor_Float32x4)->name = "floor(f32x4)"_c;
    Symbol::Resolved(&floor_Float32x4)->nameWithVarNames = "floor(val : f32x4)"_c;
    Symbol::Resolved(&floor_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// floor with Float16
    floor_Float16_arg.name = "val"_c;
    floor_Float16_arg.type = Type::FullType{ Float16Type.name };
    floor_Float16.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float16.name = "floor"_c;
    floor_Float16.backendIndex = 1714;
    floor_Float16.returnType = Type::FullType { Float16Type.name };
    floor_Float16.parameters = floor_Float16_args;
    Symbol::Resolved(&floor_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&floor_Float16)->signature = "floor(f16) f16"_c;
    Symbol::Resolved(&floor_Float16)->name = "floor(f16)"_c;
    Symbol::Resolved(&floor_Float16)->nameWithVarNames = "floor(val : f16)"_c;
    Symbol::Resolved(&floor_Float16)->returnTypeSymbol = &Float16Type;

    /// floor with Float16x2
    floor_Float16x2_arg.name = "val"_c;
    floor_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    floor_Float16x2.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float16x2.name = "floor"_c;
    floor_Float16x2.backendIndex = 1715;
    floor_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    floor_Float16x2.parameters = floor_Float16x2_args;
    Symbol::Resolved(&floor_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&floor_Float16x2)->signature = "floor(f16x2) f16x2"_c;
    Symbol::Resolved(&floor_Float16x2)->name = "floor(f16x2)"_c;
    Symbol::Resolved(&floor_Float16x2)->nameWithVarNames = "floor(val : f16x2)"_c;
    Symbol::Resolved(&floor_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// floor with Float16x3
    floor_Float16x3_arg.name = "val"_c;
    floor_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    floor_Float16x3.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float16x3.name = "floor"_c;
    floor_Float16x3.backendIndex = 1716;
    floor_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    floor_Float16x3.parameters = floor_Float16x3_args;
    Symbol::Resolved(&floor_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&floor_Float16x3)->signature = "floor(f16x3) f16x3"_c;
    Symbol::Resolved(&floor_Float16x3)->name = "floor(f16x3)"_c;
    Symbol::Resolved(&floor_Float16x3)->nameWithVarNames = "floor(val : f16x3)"_c;
    Symbol::Resolved(&floor_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// floor with Float16x4
    floor_Float16x4_arg.name = "val"_c;
    floor_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    floor_Float16x4.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float16x4.name = "floor"_c;
    floor_Float16x4.backendIndex = 1717;
    floor_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    floor_Float16x4.parameters = floor_Float16x4_args;
    Symbol::Resolved(&floor_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&floor_Float16x4)->signature = "floor(f16x4) f16x4"_c;
    Symbol::Resolved(&floor_Float16x4)->name = "floor(f16x4)"_c;
    Symbol::Resolved(&floor_Float16x4)->nameWithVarNames = "floor(val : f16x4)"_c;
    Symbol::Resolved(&floor_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// fract with Float32
    fract_Float32_arg.name = "val"_c;
    fract_Float32_arg.type = Type::FullType{ Float32Type.name };
    fract_Float32.documentation = "Returns the fractional part of the input."_c;
    fract_Float32.name = "fract"_c;
    fract_Float32.backendIndex = 1718;
    fract_Float32.returnType = Type::FullType { Float32Type.name };
    fract_Float32.parameters = fract_Float32_args;
    Symbol::Resolved(&fract_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&fract_Float32)->signature = "fract(f32) f32"_c;
    Symbol::Resolved(&fract_Float32)->name = "fract(f32)"_c;
    Symbol::Resolved(&fract_Float32)->nameWithVarNames = "fract(val : f32)"_c;
    Symbol::Resolved(&fract_Float32)->returnTypeSymbol = &Float32Type;

    /// fract with Float32x2
    fract_Float32x2_arg.name = "val"_c;
    fract_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    fract_Float32x2.documentation = "Returns the fractional part of the input."_c;
    fract_Float32x2.name = "fract"_c;
    fract_Float32x2.backendIndex = 1719;
    fract_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    fract_Float32x2.parameters = fract_Float32x2_args;
    Symbol::Resolved(&fract_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&fract_Float32x2)->signature = "fract(f32x2) f32x2"_c;
    Symbol::Resolved(&fract_Float32x2)->name = "fract(f32x2)"_c;
    Symbol::Resolved(&fract_Float32x2)->nameWithVarNames = "fract(val : f32x2)"_c;
    Symbol::Resolved(&fract_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// fract with Float32x3
    fract_Float32x3_arg.name = "val"_c;
    fract_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    fract_Float32x3.documentation = "Returns the fractional part of the input."_c;
    fract_Float32x3.name = "fract"_c;
    fract_Float32x3.backendIndex = 1720;
    fract_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    fract_Float32x3.parameters = fract_Float32x3_args;
    Symbol::Resolved(&fract_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&fract_Float32x3)->signature = "fract(f32x3) f32x3"_c;
    Symbol::Resolved(&fract_Float32x3)->name = "fract(f32x3)"_c;
    Symbol::Resolved(&fract_Float32x3)->nameWithVarNames = "fract(val : f32x3)"_c;
    Symbol::Resolved(&fract_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// fract with Float32x4
    fract_Float32x4_arg.name = "val"_c;
    fract_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    fract_Float32x4.documentation = "Returns the fractional part of the input."_c;
    fract_Float32x4.name = "fract"_c;
    fract_Float32x4.backendIndex = 1721;
    fract_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    fract_Float32x4.parameters = fract_Float32x4_args;
    Symbol::Resolved(&fract_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&fract_Float32x4)->signature = "fract(f32x4) f32x4"_c;
    Symbol::Resolved(&fract_Float32x4)->name = "fract(f32x4)"_c;
    Symbol::Resolved(&fract_Float32x4)->nameWithVarNames = "fract(val : f32x4)"_c;
    Symbol::Resolved(&fract_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// fract with Float16
    fract_Float16_arg.name = "val"_c;
    fract_Float16_arg.type = Type::FullType{ Float16Type.name };
    fract_Float16.documentation = "Returns the fractional part of the input."_c;
    fract_Float16.name = "fract"_c;
    fract_Float16.backendIndex = 1722;
    fract_Float16.returnType = Type::FullType { Float16Type.name };
    fract_Float16.parameters = fract_Float16_args;
    Symbol::Resolved(&fract_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&fract_Float16)->signature = "fract(f16) f16"_c;
    Symbol::Resolved(&fract_Float16)->name = "fract(f16)"_c;
    Symbol::Resolved(&fract_Float16)->nameWithVarNames = "fract(val : f16)"_c;
    Symbol::Resolved(&fract_Float16)->returnTypeSymbol = &Float16Type;

    /// fract with Float16x2
    fract_Float16x2_arg.name = "val"_c;
    fract_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    fract_Float16x2.documentation = "Returns the fractional part of the input."_c;
    fract_Float16x2.name = "fract"_c;
    fract_Float16x2.backendIndex = 1723;
    fract_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    fract_Float16x2.parameters = fract_Float16x2_args;
    Symbol::Resolved(&fract_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&fract_Float16x2)->signature = "fract(f16x2) f16x2"_c;
    Symbol::Resolved(&fract_Float16x2)->name = "fract(f16x2)"_c;
    Symbol::Resolved(&fract_Float16x2)->nameWithVarNames = "fract(val : f16x2)"_c;
    Symbol::Resolved(&fract_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// fract with Float16x3
    fract_Float16x3_arg.name = "val"_c;
    fract_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    fract_Float16x3.documentation = "Returns the fractional part of the input."_c;
    fract_Float16x3.name = "fract"_c;
    fract_Float16x3.backendIndex = 1724;
    fract_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    fract_Float16x3.parameters = fract_Float16x3_args;
    Symbol::Resolved(&fract_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&fract_Float16x3)->signature = "fract(f16x3) f16x3"_c;
    Symbol::Resolved(&fract_Float16x3)->name = "fract(f16x3)"_c;
    Symbol::Resolved(&fract_Float16x3)->nameWithVarNames = "fract(val : f16x3)"_c;
    Symbol::Resolved(&fract_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// fract with Float16x4
    fract_Float16x4_arg.name = "val"_c;
    fract_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    fract_Float16x4.documentation = "Returns the fractional part of the input."_c;
    fract_Float16x4.name = "fract"_c;
    fract_Float16x4.backendIndex = 1725;
    fract_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    fract_Float16x4.parameters = fract_Float16x4_args;
    Symbol::Resolved(&fract_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&fract_Float16x4)->signature = "fract(f16x4) f16x4"_c;
    Symbol::Resolved(&fract_Float16x4)->name = "fract(f16x4)"_c;
    Symbol::Resolved(&fract_Float16x4)->nameWithVarNames = "fract(val : f16x4)"_c;
    Symbol::Resolved(&fract_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// saturate with Float32
    saturate_Float32_arg.name = "val"_c;
    saturate_Float32_arg.type = Type::FullType{ Float32Type.name };
    saturate_Float32.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float32.name = "saturate"_c;
    saturate_Float32.backendIndex = 1726;
    saturate_Float32.returnType = Type::FullType { Float32Type.name };
    saturate_Float32.parameters = saturate_Float32_args;
    Symbol::Resolved(&saturate_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&saturate_Float32)->signature = "saturate(f32) f32"_c;
    Symbol::Resolved(&saturate_Float32)->name = "saturate(f32)"_c;
    Symbol::Resolved(&saturate_Float32)->nameWithVarNames = "saturate(val : f32)"_c;
    Symbol::Resolved(&saturate_Float32)->returnTypeSymbol = &Float32Type;

    /// saturate with Float32x2
    saturate_Float32x2_arg.name = "val"_c;
    saturate_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    saturate_Float32x2.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float32x2.name = "saturate"_c;
    saturate_Float32x2.backendIndex = 1727;
    saturate_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    saturate_Float32x2.parameters = saturate_Float32x2_args;
    Symbol::Resolved(&saturate_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&saturate_Float32x2)->signature = "saturate(f32x2) f32x2"_c;
    Symbol::Resolved(&saturate_Float32x2)->name = "saturate(f32x2)"_c;
    Symbol::Resolved(&saturate_Float32x2)->nameWithVarNames = "saturate(val : f32x2)"_c;
    Symbol::Resolved(&saturate_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// saturate with Float32x3
    saturate_Float32x3_arg.name = "val"_c;
    saturate_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    saturate_Float32x3.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float32x3.name = "saturate"_c;
    saturate_Float32x3.backendIndex = 1728;
    saturate_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    saturate_Float32x3.parameters = saturate_Float32x3_args;
    Symbol::Resolved(&saturate_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&saturate_Float32x3)->signature = "saturate(f32x3) f32x3"_c;
    Symbol::Resolved(&saturate_Float32x3)->name = "saturate(f32x3)"_c;
    Symbol::Resolved(&saturate_Float32x3)->nameWithVarNames = "saturate(val : f32x3)"_c;
    Symbol::Resolved(&saturate_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// saturate with Float32x4
    saturate_Float32x4_arg.name = "val"_c;
    saturate_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    saturate_Float32x4.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float32x4.name = "saturate"_c;
    saturate_Float32x4.backendIndex = 1729;
    saturate_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    saturate_Float32x4.parameters = saturate_Float32x4_args;
    Symbol::Resolved(&saturate_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&saturate_Float32x4)->signature = "saturate(f32x4) f32x4"_c;
    Symbol::Resolved(&saturate_Float32x4)->name = "saturate(f32x4)"_c;
    Symbol::Resolved(&saturate_Float32x4)->nameWithVarNames = "saturate(val : f32x4)"_c;
    Symbol::Resolved(&saturate_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// saturate with Float16
    saturate_Float16_arg.name = "val"_c;
    saturate_Float16_arg.type = Type::FullType{ Float16Type.name };
    saturate_Float16.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float16.name = "saturate"_c;
    saturate_Float16.backendIndex = 1730;
    saturate_Float16.returnType = Type::FullType { Float16Type.name };
    saturate_Float16.parameters = saturate_Float16_args;
    Symbol::Resolved(&saturate_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&saturate_Float16)->signature = "saturate(f16) f16"_c;
    Symbol::Resolved(&saturate_Float16)->name = "saturate(f16)"_c;
    Symbol::Resolved(&saturate_Float16)->nameWithVarNames = "saturate(val : f16)"_c;
    Symbol::Resolved(&saturate_Float16)->returnTypeSymbol = &Float16Type;

    /// saturate with Float16x2
    saturate_Float16x2_arg.name = "val"_c;
    saturate_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    saturate_Float16x2.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float16x2.name = "saturate"_c;
    saturate_Float16x2.backendIndex = 1731;
    saturate_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    saturate_Float16x2.parameters = saturate_Float16x2_args;
    Symbol::Resolved(&saturate_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&saturate_Float16x2)->signature = "saturate(f16x2) f16x2"_c;
    Symbol::Resolved(&saturate_Float16x2)->name = "saturate(f16x2)"_c;
    Symbol::Resolved(&saturate_Float16x2)->nameWithVarNames = "saturate(val : f16x2)"_c;
    Symbol::Resolved(&saturate_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// saturate with Float16x3
    saturate_Float16x3_arg.name = "val"_c;
    saturate_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    saturate_Float16x3.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float16x3.name = "saturate"_c;
    saturate_Float16x3.backendIndex = 1732;
    saturate_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    saturate_Float16x3.parameters = saturate_Float16x3_args;
    Symbol::Resolved(&saturate_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&saturate_Float16x3)->signature = "saturate(f16x3) f16x3"_c;
    Symbol::Resolved(&saturate_Float16x3)->name = "saturate(f16x3)"_c;
    Symbol::Resolved(&saturate_Float16x3)->nameWithVarNames = "saturate(val : f16x3)"_c;
    Symbol::Resolved(&saturate_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// saturate with Float16x4
    saturate_Float16x4_arg.name = "val"_c;
    saturate_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    saturate_Float16x4.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float16x4.name = "saturate"_c;
    saturate_Float16x4.backendIndex = 1733;
    saturate_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    saturate_Float16x4.parameters = saturate_Float16x4_args;
    Symbol::Resolved(&saturate_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&saturate_Float16x4)->signature = "saturate(f16x4) f16x4"_c;
    Symbol::Resolved(&saturate_Float16x4)->name = "saturate(f16x4)"_c;
    Symbol::Resolved(&saturate_Float16x4)->nameWithVarNames = "saturate(val : f16x4)"_c;
    Symbol::Resolved(&saturate_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// trunc with Float32
    trunc_Float32_arg.name = "val"_c;
    trunc_Float32_arg.type = Type::FullType{ Float32Type.name };
    trunc_Float32.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float32.name = "trunc"_c;
    trunc_Float32.backendIndex = 1734;
    trunc_Float32.returnType = Type::FullType { Float32Type.name };
    trunc_Float32.parameters = trunc_Float32_args;
    Symbol::Resolved(&trunc_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&trunc_Float32)->signature = "trunc(f32) f32"_c;
    Symbol::Resolved(&trunc_Float32)->name = "trunc(f32)"_c;
    Symbol::Resolved(&trunc_Float32)->nameWithVarNames = "trunc(val : f32)"_c;
    Symbol::Resolved(&trunc_Float32)->returnTypeSymbol = &Float32Type;

    /// trunc with Float32x2
    trunc_Float32x2_arg.name = "val"_c;
    trunc_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    trunc_Float32x2.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float32x2.name = "trunc"_c;
    trunc_Float32x2.backendIndex = 1735;
    trunc_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    trunc_Float32x2.parameters = trunc_Float32x2_args;
    Symbol::Resolved(&trunc_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&trunc_Float32x2)->signature = "trunc(f32x2) f32x2"_c;
    Symbol::Resolved(&trunc_Float32x2)->name = "trunc(f32x2)"_c;
    Symbol::Resolved(&trunc_Float32x2)->nameWithVarNames = "trunc(val : f32x2)"_c;
    Symbol::Resolved(&trunc_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// trunc with Float32x3
    trunc_Float32x3_arg.name = "val"_c;
    trunc_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    trunc_Float32x3.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float32x3.name = "trunc"_c;
    trunc_Float32x3.backendIndex = 1736;
    trunc_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    trunc_Float32x3.parameters = trunc_Float32x3_args;
    Symbol::Resolved(&trunc_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&trunc_Float32x3)->signature = "trunc(f32x3) f32x3"_c;
    Symbol::Resolved(&trunc_Float32x3)->name = "trunc(f32x3)"_c;
    Symbol::Resolved(&trunc_Float32x3)->nameWithVarNames = "trunc(val : f32x3)"_c;
    Symbol::Resolved(&trunc_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// trunc with Float32x4
    trunc_Float32x4_arg.name = "val"_c;
    trunc_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    trunc_Float32x4.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float32x4.name = "trunc"_c;
    trunc_Float32x4.backendIndex = 1737;
    trunc_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    trunc_Float32x4.parameters = trunc_Float32x4_args;
    Symbol::Resolved(&trunc_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&trunc_Float32x4)->signature = "trunc(f32x4) f32x4"_c;
    Symbol::Resolved(&trunc_Float32x4)->name = "trunc(f32x4)"_c;
    Symbol::Resolved(&trunc_Float32x4)->nameWithVarNames = "trunc(val : f32x4)"_c;
    Symbol::Resolved(&trunc_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// trunc with Float16
    trunc_Float16_arg.name = "val"_c;
    trunc_Float16_arg.type = Type::FullType{ Float16Type.name };
    trunc_Float16.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float16.name = "trunc"_c;
    trunc_Float16.backendIndex = 1738;
    trunc_Float16.returnType = Type::FullType { Float16Type.name };
    trunc_Float16.parameters = trunc_Float16_args;
    Symbol::Resolved(&trunc_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&trunc_Float16)->signature = "trunc(f16) f16"_c;
    Symbol::Resolved(&trunc_Float16)->name = "trunc(f16)"_c;
    Symbol::Resolved(&trunc_Float16)->nameWithVarNames = "trunc(val : f16)"_c;
    Symbol::Resolved(&trunc_Float16)->returnTypeSymbol = &Float16Type;

    /// trunc with Float16x2
    trunc_Float16x2_arg.name = "val"_c;
    trunc_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    trunc_Float16x2.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float16x2.name = "trunc"_c;
    trunc_Float16x2.backendIndex = 1739;
    trunc_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    trunc_Float16x2.parameters = trunc_Float16x2_args;
    Symbol::Resolved(&trunc_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&trunc_Float16x2)->signature = "trunc(f16x2) f16x2"_c;
    Symbol::Resolved(&trunc_Float16x2)->name = "trunc(f16x2)"_c;
    Symbol::Resolved(&trunc_Float16x2)->nameWithVarNames = "trunc(val : f16x2)"_c;
    Symbol::Resolved(&trunc_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// trunc with Float16x3
    trunc_Float16x3_arg.name = "val"_c;
    trunc_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    trunc_Float16x3.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float16x3.name = "trunc"_c;
    trunc_Float16x3.backendIndex = 1740;
    trunc_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    trunc_Float16x3.parameters = trunc_Float16x3_args;
    Symbol::Resolved(&trunc_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&trunc_Float16x3)->signature = "trunc(f16x3) f16x3"_c;
    Symbol::Resolved(&trunc_Float16x3)->name = "trunc(f16x3)"_c;
    Symbol::Resolved(&trunc_Float16x3)->nameWithVarNames = "trunc(val : f16x3)"_c;
    Symbol::Resolved(&trunc_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// trunc with Float16x4
    trunc_Float16x4_arg.name = "val"_c;
    trunc_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    trunc_Float16x4.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float16x4.name = "trunc"_c;
    trunc_Float16x4.backendIndex = 1741;
    trunc_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    trunc_Float16x4.parameters = trunc_Float16x4_args;
    Symbol::Resolved(&trunc_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&trunc_Float16x4)->signature = "trunc(f16x4) f16x4"_c;
    Symbol::Resolved(&trunc_Float16x4)->name = "trunc(f16x4)"_c;
    Symbol::Resolved(&trunc_Float16x4)->nameWithVarNames = "trunc(val : f16x4)"_c;
    Symbol::Resolved(&trunc_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// ddx with Float32
    ddx_Float32_arg.name = "val"_c;
    ddx_Float32_arg.type = Type::FullType{ Float32Type.name };
    ddx_Float32.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float32.name = "ddx"_c;
    ddx_Float32.backendIndex = 1742;
    ddx_Float32.returnType = Type::FullType { Float32Type.name };
    ddx_Float32.parameters = ddx_Float32_args;
    Symbol::Resolved(&ddx_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&ddx_Float32)->signature = "ddx(f32) f32"_c;
    Symbol::Resolved(&ddx_Float32)->name = "ddx(f32)"_c;
    Symbol::Resolved(&ddx_Float32)->nameWithVarNames = "ddx(val : f32)"_c;
    Symbol::Resolved(&ddx_Float32)->returnTypeSymbol = &Float32Type;

    /// ddx with Float32x2
    ddx_Float32x2_arg.name = "val"_c;
    ddx_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    ddx_Float32x2.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float32x2.name = "ddx"_c;
    ddx_Float32x2.backendIndex = 1743;
    ddx_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    ddx_Float32x2.parameters = ddx_Float32x2_args;
    Symbol::Resolved(&ddx_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&ddx_Float32x2)->signature = "ddx(f32x2) f32x2"_c;
    Symbol::Resolved(&ddx_Float32x2)->name = "ddx(f32x2)"_c;
    Symbol::Resolved(&ddx_Float32x2)->nameWithVarNames = "ddx(val : f32x2)"_c;
    Symbol::Resolved(&ddx_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// ddx with Float32x3
    ddx_Float32x3_arg.name = "val"_c;
    ddx_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    ddx_Float32x3.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float32x3.name = "ddx"_c;
    ddx_Float32x3.backendIndex = 1744;
    ddx_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    ddx_Float32x3.parameters = ddx_Float32x3_args;
    Symbol::Resolved(&ddx_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&ddx_Float32x3)->signature = "ddx(f32x3) f32x3"_c;
    Symbol::Resolved(&ddx_Float32x3)->name = "ddx(f32x3)"_c;
    Symbol::Resolved(&ddx_Float32x3)->nameWithVarNames = "ddx(val : f32x3)"_c;
    Symbol::Resolved(&ddx_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// ddx with Float32x4
    ddx_Float32x4_arg.name = "val"_c;
    ddx_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    ddx_Float32x4.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float32x4.name = "ddx"_c;
    ddx_Float32x4.backendIndex = 1745;
    ddx_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    ddx_Float32x4.parameters = ddx_Float32x4_args;
    Symbol::Resolved(&ddx_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&ddx_Float32x4)->signature = "ddx(f32x4) f32x4"_c;
    Symbol::Resolved(&ddx_Float32x4)->name = "ddx(f32x4)"_c;
    Symbol::Resolved(&ddx_Float32x4)->nameWithVarNames = "ddx(val : f32x4)"_c;
    Symbol::Resolved(&ddx_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// ddx with Float16
    ddx_Float16_arg.name = "val"_c;
    ddx_Float16_arg.type = Type::FullType{ Float16Type.name };
    ddx_Float16.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float16.name = "ddx"_c;
    ddx_Float16.backendIndex = 1746;
    ddx_Float16.returnType = Type::FullType { Float16Type.name };
    ddx_Float16.parameters = ddx_Float16_args;
    Symbol::Resolved(&ddx_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&ddx_Float16)->signature = "ddx(f16) f16"_c;
    Symbol::Resolved(&ddx_Float16)->name = "ddx(f16)"_c;
    Symbol::Resolved(&ddx_Float16)->nameWithVarNames = "ddx(val : f16)"_c;
    Symbol::Resolved(&ddx_Float16)->returnTypeSymbol = &Float16Type;

    /// ddx with Float16x2
    ddx_Float16x2_arg.name = "val"_c;
    ddx_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    ddx_Float16x2.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float16x2.name = "ddx"_c;
    ddx_Float16x2.backendIndex = 1747;
    ddx_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    ddx_Float16x2.parameters = ddx_Float16x2_args;
    Symbol::Resolved(&ddx_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&ddx_Float16x2)->signature = "ddx(f16x2) f16x2"_c;
    Symbol::Resolved(&ddx_Float16x2)->name = "ddx(f16x2)"_c;
    Symbol::Resolved(&ddx_Float16x2)->nameWithVarNames = "ddx(val : f16x2)"_c;
    Symbol::Resolved(&ddx_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// ddx with Float16x3
    ddx_Float16x3_arg.name = "val"_c;
    ddx_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    ddx_Float16x3.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float16x3.name = "ddx"_c;
    ddx_Float16x3.backendIndex = 1748;
    ddx_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    ddx_Float16x3.parameters = ddx_Float16x3_args;
    Symbol::Resolved(&ddx_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&ddx_Float16x3)->signature = "ddx(f16x3) f16x3"_c;
    Symbol::Resolved(&ddx_Float16x3)->name = "ddx(f16x3)"_c;
    Symbol::Resolved(&ddx_Float16x3)->nameWithVarNames = "ddx(val : f16x3)"_c;
    Symbol::Resolved(&ddx_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// ddx with Float16x4
    ddx_Float16x4_arg.name = "val"_c;
    ddx_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    ddx_Float16x4.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float16x4.name = "ddx"_c;
    ddx_Float16x4.backendIndex = 1749;
    ddx_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    ddx_Float16x4.parameters = ddx_Float16x4_args;
    Symbol::Resolved(&ddx_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&ddx_Float16x4)->signature = "ddx(f16x4) f16x4"_c;
    Symbol::Resolved(&ddx_Float16x4)->name = "ddx(f16x4)"_c;
    Symbol::Resolved(&ddx_Float16x4)->nameWithVarNames = "ddx(val : f16x4)"_c;
    Symbol::Resolved(&ddx_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// ddy with Float32
    ddy_Float32_arg.name = "val"_c;
    ddy_Float32_arg.type = Type::FullType{ Float32Type.name };
    ddy_Float32.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float32.name = "ddy"_c;
    ddy_Float32.backendIndex = 1750;
    ddy_Float32.returnType = Type::FullType { Float32Type.name };
    ddy_Float32.parameters = ddy_Float32_args;
    Symbol::Resolved(&ddy_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&ddy_Float32)->signature = "ddy(f32) f32"_c;
    Symbol::Resolved(&ddy_Float32)->name = "ddy(f32)"_c;
    Symbol::Resolved(&ddy_Float32)->nameWithVarNames = "ddy(val : f32)"_c;
    Symbol::Resolved(&ddy_Float32)->returnTypeSymbol = &Float32Type;

    /// ddy with Float32x2
    ddy_Float32x2_arg.name = "val"_c;
    ddy_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    ddy_Float32x2.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float32x2.name = "ddy"_c;
    ddy_Float32x2.backendIndex = 1751;
    ddy_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    ddy_Float32x2.parameters = ddy_Float32x2_args;
    Symbol::Resolved(&ddy_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&ddy_Float32x2)->signature = "ddy(f32x2) f32x2"_c;
    Symbol::Resolved(&ddy_Float32x2)->name = "ddy(f32x2)"_c;
    Symbol::Resolved(&ddy_Float32x2)->nameWithVarNames = "ddy(val : f32x2)"_c;
    Symbol::Resolved(&ddy_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// ddy with Float32x3
    ddy_Float32x3_arg.name = "val"_c;
    ddy_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    ddy_Float32x3.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float32x3.name = "ddy"_c;
    ddy_Float32x3.backendIndex = 1752;
    ddy_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    ddy_Float32x3.parameters = ddy_Float32x3_args;
    Symbol::Resolved(&ddy_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&ddy_Float32x3)->signature = "ddy(f32x3) f32x3"_c;
    Symbol::Resolved(&ddy_Float32x3)->name = "ddy(f32x3)"_c;
    Symbol::Resolved(&ddy_Float32x3)->nameWithVarNames = "ddy(val : f32x3)"_c;
    Symbol::Resolved(&ddy_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// ddy with Float32x4
    ddy_Float32x4_arg.name = "val"_c;
    ddy_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    ddy_Float32x4.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float32x4.name = "ddy"_c;
    ddy_Float32x4.backendIndex = 1753;
    ddy_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    ddy_Float32x4.parameters = ddy_Float32x4_args;
    Symbol::Resolved(&ddy_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&ddy_Float32x4)->signature = "ddy(f32x4) f32x4"_c;
    Symbol::Resolved(&ddy_Float32x4)->name = "ddy(f32x4)"_c;
    Symbol::Resolved(&ddy_Float32x4)->nameWithVarNames = "ddy(val : f32x4)"_c;
    Symbol::Resolved(&ddy_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// ddy with Float16
    ddy_Float16_arg.name = "val"_c;
    ddy_Float16_arg.type = Type::FullType{ Float16Type.name };
    ddy_Float16.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float16.name = "ddy"_c;
    ddy_Float16.backendIndex = 1754;
    ddy_Float16.returnType = Type::FullType { Float16Type.name };
    ddy_Float16.parameters = ddy_Float16_args;
    Symbol::Resolved(&ddy_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&ddy_Float16)->signature = "ddy(f16) f16"_c;
    Symbol::Resolved(&ddy_Float16)->name = "ddy(f16)"_c;
    Symbol::Resolved(&ddy_Float16)->nameWithVarNames = "ddy(val : f16)"_c;
    Symbol::Resolved(&ddy_Float16)->returnTypeSymbol = &Float16Type;

    /// ddy with Float16x2
    ddy_Float16x2_arg.name = "val"_c;
    ddy_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    ddy_Float16x2.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float16x2.name = "ddy"_c;
    ddy_Float16x2.backendIndex = 1755;
    ddy_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    ddy_Float16x2.parameters = ddy_Float16x2_args;
    Symbol::Resolved(&ddy_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&ddy_Float16x2)->signature = "ddy(f16x2) f16x2"_c;
    Symbol::Resolved(&ddy_Float16x2)->name = "ddy(f16x2)"_c;
    Symbol::Resolved(&ddy_Float16x2)->nameWithVarNames = "ddy(val : f16x2)"_c;
    Symbol::Resolved(&ddy_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// ddy with Float16x3
    ddy_Float16x3_arg.name = "val"_c;
    ddy_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    ddy_Float16x3.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float16x3.name = "ddy"_c;
    ddy_Float16x3.backendIndex = 1756;
    ddy_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    ddy_Float16x3.parameters = ddy_Float16x3_args;
    Symbol::Resolved(&ddy_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&ddy_Float16x3)->signature = "ddy(f16x3) f16x3"_c;
    Symbol::Resolved(&ddy_Float16x3)->name = "ddy(f16x3)"_c;
    Symbol::Resolved(&ddy_Float16x3)->nameWithVarNames = "ddy(val : f16x3)"_c;
    Symbol::Resolved(&ddy_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// ddy with Float16x4
    ddy_Float16x4_arg.name = "val"_c;
    ddy_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    ddy_Float16x4.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float16x4.name = "ddy"_c;
    ddy_Float16x4.backendIndex = 1757;
    ddy_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    ddy_Float16x4.parameters = ddy_Float16x4_args;
    Symbol::Resolved(&ddy_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&ddy_Float16x4)->signature = "ddy(f16x4) f16x4"_c;
    Symbol::Resolved(&ddy_Float16x4)->name = "ddy(f16x4)"_c;
    Symbol::Resolved(&ddy_Float16x4)->nameWithVarNames = "ddy(val : f16x4)"_c;
    Symbol::Resolved(&ddy_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// fwidth with Float32
    fwidth_Float32_arg.name = "val"_c;
    fwidth_Float32_arg.type = Type::FullType{ Float32Type.name };
    fwidth_Float32.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float32.name = "fwidth"_c;
    fwidth_Float32.backendIndex = 1758;
    fwidth_Float32.returnType = Type::FullType { Float32Type.name };
    fwidth_Float32.parameters = fwidth_Float32_args;
    Symbol::Resolved(&fwidth_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&fwidth_Float32)->signature = "fwidth(f32) f32"_c;
    Symbol::Resolved(&fwidth_Float32)->name = "fwidth(f32)"_c;
    Symbol::Resolved(&fwidth_Float32)->nameWithVarNames = "fwidth(val : f32)"_c;
    Symbol::Resolved(&fwidth_Float32)->returnTypeSymbol = &Float32Type;

    /// fwidth with Float32x2
    fwidth_Float32x2_arg.name = "val"_c;
    fwidth_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    fwidth_Float32x2.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float32x2.name = "fwidth"_c;
    fwidth_Float32x2.backendIndex = 1759;
    fwidth_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    fwidth_Float32x2.parameters = fwidth_Float32x2_args;
    Symbol::Resolved(&fwidth_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&fwidth_Float32x2)->signature = "fwidth(f32x2) f32x2"_c;
    Symbol::Resolved(&fwidth_Float32x2)->name = "fwidth(f32x2)"_c;
    Symbol::Resolved(&fwidth_Float32x2)->nameWithVarNames = "fwidth(val : f32x2)"_c;
    Symbol::Resolved(&fwidth_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// fwidth with Float32x3
    fwidth_Float32x3_arg.name = "val"_c;
    fwidth_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    fwidth_Float32x3.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float32x3.name = "fwidth"_c;
    fwidth_Float32x3.backendIndex = 1760;
    fwidth_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    fwidth_Float32x3.parameters = fwidth_Float32x3_args;
    Symbol::Resolved(&fwidth_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&fwidth_Float32x3)->signature = "fwidth(f32x3) f32x3"_c;
    Symbol::Resolved(&fwidth_Float32x3)->name = "fwidth(f32x3)"_c;
    Symbol::Resolved(&fwidth_Float32x3)->nameWithVarNames = "fwidth(val : f32x3)"_c;
    Symbol::Resolved(&fwidth_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// fwidth with Float32x4
    fwidth_Float32x4_arg.name = "val"_c;
    fwidth_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    fwidth_Float32x4.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float32x4.name = "fwidth"_c;
    fwidth_Float32x4.backendIndex = 1761;
    fwidth_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    fwidth_Float32x4.parameters = fwidth_Float32x4_args;
    Symbol::Resolved(&fwidth_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&fwidth_Float32x4)->signature = "fwidth(f32x4) f32x4"_c;
    Symbol::Resolved(&fwidth_Float32x4)->name = "fwidth(f32x4)"_c;
    Symbol::Resolved(&fwidth_Float32x4)->nameWithVarNames = "fwidth(val : f32x4)"_c;
    Symbol::Resolved(&fwidth_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// fwidth with Float16
    fwidth_Float16_arg.name = "val"_c;
    fwidth_Float16_arg.type = Type::FullType{ Float16Type.name };
    fwidth_Float16.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float16.name = "fwidth"_c;
    fwidth_Float16.backendIndex = 1762;
    fwidth_Float16.returnType = Type::FullType { Float16Type.name };
    fwidth_Float16.parameters = fwidth_Float16_args;
    Symbol::Resolved(&fwidth_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&fwidth_Float16)->signature = "fwidth(f16) f16"_c;
    Symbol::Resolved(&fwidth_Float16)->name = "fwidth(f16)"_c;
    Symbol::Resolved(&fwidth_Float16)->nameWithVarNames = "fwidth(val : f16)"_c;
    Symbol::Resolved(&fwidth_Float16)->returnTypeSymbol = &Float16Type;

    /// fwidth with Float16x2
    fwidth_Float16x2_arg.name = "val"_c;
    fwidth_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    fwidth_Float16x2.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float16x2.name = "fwidth"_c;
    fwidth_Float16x2.backendIndex = 1763;
    fwidth_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    fwidth_Float16x2.parameters = fwidth_Float16x2_args;
    Symbol::Resolved(&fwidth_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&fwidth_Float16x2)->signature = "fwidth(f16x2) f16x2"_c;
    Symbol::Resolved(&fwidth_Float16x2)->name = "fwidth(f16x2)"_c;
    Symbol::Resolved(&fwidth_Float16x2)->nameWithVarNames = "fwidth(val : f16x2)"_c;
    Symbol::Resolved(&fwidth_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// fwidth with Float16x3
    fwidth_Float16x3_arg.name = "val"_c;
    fwidth_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    fwidth_Float16x3.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float16x3.name = "fwidth"_c;
    fwidth_Float16x3.backendIndex = 1764;
    fwidth_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    fwidth_Float16x3.parameters = fwidth_Float16x3_args;
    Symbol::Resolved(&fwidth_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&fwidth_Float16x3)->signature = "fwidth(f16x3) f16x3"_c;
    Symbol::Resolved(&fwidth_Float16x3)->name = "fwidth(f16x3)"_c;
    Symbol::Resolved(&fwidth_Float16x3)->nameWithVarNames = "fwidth(val : f16x3)"_c;
    Symbol::Resolved(&fwidth_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// fwidth with Float16x4
    fwidth_Float16x4_arg.name = "val"_c;
    fwidth_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    fwidth_Float16x4.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float16x4.name = "fwidth"_c;
    fwidth_Float16x4.backendIndex = 1765;
    fwidth_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    fwidth_Float16x4.parameters = fwidth_Float16x4_args;
    Symbol::Resolved(&fwidth_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&fwidth_Float16x4)->signature = "fwidth(f16x4) f16x4"_c;
    Symbol::Resolved(&fwidth_Float16x4)->name = "fwidth(f16x4)"_c;
    Symbol::Resolved(&fwidth_Float16x4)->nameWithVarNames = "fwidth(val : f16x4)"_c;
    Symbol::Resolved(&fwidth_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// sign with Int32
    sign_Int32_arg.name = "val"_c;
    sign_Int32_arg.type = Type::FullType{ Int32Type.name };
    sign_Int32.documentation = "Returns the sign of the value."_c;
    sign_Int32.name = "sign"_c;
    sign_Int32.backendIndex = 1766;
    sign_Int32.returnType = Type::FullType { Int32Type.name };
    sign_Int32.parameters = sign_Int32_args;
    Symbol::Resolved(&sign_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&sign_Int32)->signature = "sign(i32) i32"_c;
    Symbol::Resolved(&sign_Int32)->name = "sign(i32)"_c;
    Symbol::Resolved(&sign_Int32)->nameWithVarNames = "sign(val : i32)"_c;
    Symbol::Resolved(&sign_Int32)->returnTypeSymbol = &Int32Type;

    /// sign with Int32x2
    sign_Int32x2_arg.name = "val"_c;
    sign_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    sign_Int32x2.documentation = "Returns the sign of the value."_c;
    sign_Int32x2.name = "sign"_c;
    sign_Int32x2.backendIndex = 1767;
    sign_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    sign_Int32x2.parameters = sign_Int32x2_args;
    Symbol::Resolved(&sign_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&sign_Int32x2)->signature = "sign(i32x2) i32x2"_c;
    Symbol::Resolved(&sign_Int32x2)->name = "sign(i32x2)"_c;
    Symbol::Resolved(&sign_Int32x2)->nameWithVarNames = "sign(val : i32x2)"_c;
    Symbol::Resolved(&sign_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// sign with Int32x3
    sign_Int32x3_arg.name = "val"_c;
    sign_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    sign_Int32x3.documentation = "Returns the sign of the value."_c;
    sign_Int32x3.name = "sign"_c;
    sign_Int32x3.backendIndex = 1768;
    sign_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    sign_Int32x3.parameters = sign_Int32x3_args;
    Symbol::Resolved(&sign_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&sign_Int32x3)->signature = "sign(i32x3) i32x3"_c;
    Symbol::Resolved(&sign_Int32x3)->name = "sign(i32x3)"_c;
    Symbol::Resolved(&sign_Int32x3)->nameWithVarNames = "sign(val : i32x3)"_c;
    Symbol::Resolved(&sign_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// sign with Int32x4
    sign_Int32x4_arg.name = "val"_c;
    sign_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    sign_Int32x4.documentation = "Returns the sign of the value."_c;
    sign_Int32x4.name = "sign"_c;
    sign_Int32x4.backendIndex = 1769;
    sign_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    sign_Int32x4.parameters = sign_Int32x4_args;
    Symbol::Resolved(&sign_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&sign_Int32x4)->signature = "sign(i32x4) i32x4"_c;
    Symbol::Resolved(&sign_Int32x4)->name = "sign(i32x4)"_c;
    Symbol::Resolved(&sign_Int32x4)->nameWithVarNames = "sign(val : i32x4)"_c;
    Symbol::Resolved(&sign_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// sign with Int16
    sign_Int16_arg.name = "val"_c;
    sign_Int16_arg.type = Type::FullType{ Int16Type.name };
    sign_Int16.documentation = "Returns the sign of the value."_c;
    sign_Int16.name = "sign"_c;
    sign_Int16.backendIndex = 1770;
    sign_Int16.returnType = Type::FullType { Int16Type.name };
    sign_Int16.parameters = sign_Int16_args;
    Symbol::Resolved(&sign_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&sign_Int16)->signature = "sign(i16) i16"_c;
    Symbol::Resolved(&sign_Int16)->name = "sign(i16)"_c;
    Symbol::Resolved(&sign_Int16)->nameWithVarNames = "sign(val : i16)"_c;
    Symbol::Resolved(&sign_Int16)->returnTypeSymbol = &Int16Type;

    /// sign with Int16x2
    sign_Int16x2_arg.name = "val"_c;
    sign_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    sign_Int16x2.documentation = "Returns the sign of the value."_c;
    sign_Int16x2.name = "sign"_c;
    sign_Int16x2.backendIndex = 1771;
    sign_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    sign_Int16x2.parameters = sign_Int16x2_args;
    Symbol::Resolved(&sign_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&sign_Int16x2)->signature = "sign(i16x2) i16x2"_c;
    Symbol::Resolved(&sign_Int16x2)->name = "sign(i16x2)"_c;
    Symbol::Resolved(&sign_Int16x2)->nameWithVarNames = "sign(val : i16x2)"_c;
    Symbol::Resolved(&sign_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// sign with Int16x3
    sign_Int16x3_arg.name = "val"_c;
    sign_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    sign_Int16x3.documentation = "Returns the sign of the value."_c;
    sign_Int16x3.name = "sign"_c;
    sign_Int16x3.backendIndex = 1772;
    sign_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    sign_Int16x3.parameters = sign_Int16x3_args;
    Symbol::Resolved(&sign_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&sign_Int16x3)->signature = "sign(i16x3) i16x3"_c;
    Symbol::Resolved(&sign_Int16x3)->name = "sign(i16x3)"_c;
    Symbol::Resolved(&sign_Int16x3)->nameWithVarNames = "sign(val : i16x3)"_c;
    Symbol::Resolved(&sign_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// sign with Int16x4
    sign_Int16x4_arg.name = "val"_c;
    sign_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    sign_Int16x4.documentation = "Returns the sign of the value."_c;
    sign_Int16x4.name = "sign"_c;
    sign_Int16x4.backendIndex = 1773;
    sign_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    sign_Int16x4.parameters = sign_Int16x4_args;
    Symbol::Resolved(&sign_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&sign_Int16x4)->signature = "sign(i16x4) i16x4"_c;
    Symbol::Resolved(&sign_Int16x4)->name = "sign(i16x4)"_c;
    Symbol::Resolved(&sign_Int16x4)->nameWithVarNames = "sign(val : i16x4)"_c;
    Symbol::Resolved(&sign_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// sign with Float32
    sign_Float32_arg.name = "val"_c;
    sign_Float32_arg.type = Type::FullType{ Float32Type.name };
    sign_Float32.documentation = "Returns the sign of the value."_c;
    sign_Float32.name = "sign"_c;
    sign_Float32.backendIndex = 1774;
    sign_Float32.returnType = Type::FullType { Float32Type.name };
    sign_Float32.parameters = sign_Float32_args;
    Symbol::Resolved(&sign_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sign_Float32)->signature = "sign(f32) f32"_c;
    Symbol::Resolved(&sign_Float32)->name = "sign(f32)"_c;
    Symbol::Resolved(&sign_Float32)->nameWithVarNames = "sign(val : f32)"_c;
    Symbol::Resolved(&sign_Float32)->returnTypeSymbol = &Float32Type;

    /// sign with Float32x2
    sign_Float32x2_arg.name = "val"_c;
    sign_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sign_Float32x2.documentation = "Returns the sign of the value."_c;
    sign_Float32x2.name = "sign"_c;
    sign_Float32x2.backendIndex = 1775;
    sign_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    sign_Float32x2.parameters = sign_Float32x2_args;
    Symbol::Resolved(&sign_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sign_Float32x2)->signature = "sign(f32x2) f32x2"_c;
    Symbol::Resolved(&sign_Float32x2)->name = "sign(f32x2)"_c;
    Symbol::Resolved(&sign_Float32x2)->nameWithVarNames = "sign(val : f32x2)"_c;
    Symbol::Resolved(&sign_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// sign with Float32x3
    sign_Float32x3_arg.name = "val"_c;
    sign_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sign_Float32x3.documentation = "Returns the sign of the value."_c;
    sign_Float32x3.name = "sign"_c;
    sign_Float32x3.backendIndex = 1776;
    sign_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    sign_Float32x3.parameters = sign_Float32x3_args;
    Symbol::Resolved(&sign_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sign_Float32x3)->signature = "sign(f32x3) f32x3"_c;
    Symbol::Resolved(&sign_Float32x3)->name = "sign(f32x3)"_c;
    Symbol::Resolved(&sign_Float32x3)->nameWithVarNames = "sign(val : f32x3)"_c;
    Symbol::Resolved(&sign_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// sign with Float32x4
    sign_Float32x4_arg.name = "val"_c;
    sign_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sign_Float32x4.documentation = "Returns the sign of the value."_c;
    sign_Float32x4.name = "sign"_c;
    sign_Float32x4.backendIndex = 1777;
    sign_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    sign_Float32x4.parameters = sign_Float32x4_args;
    Symbol::Resolved(&sign_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sign_Float32x4)->signature = "sign(f32x4) f32x4"_c;
    Symbol::Resolved(&sign_Float32x4)->name = "sign(f32x4)"_c;
    Symbol::Resolved(&sign_Float32x4)->nameWithVarNames = "sign(val : f32x4)"_c;
    Symbol::Resolved(&sign_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// sign with Float16
    sign_Float16_arg.name = "val"_c;
    sign_Float16_arg.type = Type::FullType{ Float16Type.name };
    sign_Float16.documentation = "Returns the sign of the value."_c;
    sign_Float16.name = "sign"_c;
    sign_Float16.backendIndex = 1778;
    sign_Float16.returnType = Type::FullType { Float16Type.name };
    sign_Float16.parameters = sign_Float16_args;
    Symbol::Resolved(&sign_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sign_Float16)->signature = "sign(f16) f16"_c;
    Symbol::Resolved(&sign_Float16)->name = "sign(f16)"_c;
    Symbol::Resolved(&sign_Float16)->nameWithVarNames = "sign(val : f16)"_c;
    Symbol::Resolved(&sign_Float16)->returnTypeSymbol = &Float16Type;

    /// sign with Float16x2
    sign_Float16x2_arg.name = "val"_c;
    sign_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sign_Float16x2.documentation = "Returns the sign of the value."_c;
    sign_Float16x2.name = "sign"_c;
    sign_Float16x2.backendIndex = 1779;
    sign_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    sign_Float16x2.parameters = sign_Float16x2_args;
    Symbol::Resolved(&sign_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sign_Float16x2)->signature = "sign(f16x2) f16x2"_c;
    Symbol::Resolved(&sign_Float16x2)->name = "sign(f16x2)"_c;
    Symbol::Resolved(&sign_Float16x2)->nameWithVarNames = "sign(val : f16x2)"_c;
    Symbol::Resolved(&sign_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// sign with Float16x3
    sign_Float16x3_arg.name = "val"_c;
    sign_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sign_Float16x3.documentation = "Returns the sign of the value."_c;
    sign_Float16x3.name = "sign"_c;
    sign_Float16x3.backendIndex = 1780;
    sign_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    sign_Float16x3.parameters = sign_Float16x3_args;
    Symbol::Resolved(&sign_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sign_Float16x3)->signature = "sign(f16x3) f16x3"_c;
    Symbol::Resolved(&sign_Float16x3)->name = "sign(f16x3)"_c;
    Symbol::Resolved(&sign_Float16x3)->nameWithVarNames = "sign(val : f16x3)"_c;
    Symbol::Resolved(&sign_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// sign with Float16x4
    sign_Float16x4_arg.name = "val"_c;
    sign_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sign_Float16x4.documentation = "Returns the sign of the value."_c;
    sign_Float16x4.name = "sign"_c;
    sign_Float16x4.backendIndex = 1781;
    sign_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    sign_Float16x4.parameters = sign_Float16x4_args;
    Symbol::Resolved(&sign_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sign_Float16x4)->signature = "sign(f16x4) f16x4"_c;
    Symbol::Resolved(&sign_Float16x4)->name = "sign(f16x4)"_c;
    Symbol::Resolved(&sign_Float16x4)->nameWithVarNames = "sign(val : f16x4)"_c;
    Symbol::Resolved(&sign_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// abs with Int32
    abs_Int32_arg.name = "val"_c;
    abs_Int32_arg.type = Type::FullType{ Int32Type.name };
    abs_Int32.documentation = "Returns the absolute value of the input."_c;
    abs_Int32.name = "abs"_c;
    abs_Int32.backendIndex = 1782;
    abs_Int32.returnType = Type::FullType { Int32Type.name };
    abs_Int32.parameters = abs_Int32_args;
    Symbol::Resolved(&abs_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&abs_Int32)->signature = "abs(i32) i32"_c;
    Symbol::Resolved(&abs_Int32)->name = "abs(i32)"_c;
    Symbol::Resolved(&abs_Int32)->nameWithVarNames = "abs(val : i32)"_c;
    Symbol::Resolved(&abs_Int32)->returnTypeSymbol = &Int32Type;

    /// abs with Int32x2
    abs_Int32x2_arg.name = "val"_c;
    abs_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    abs_Int32x2.documentation = "Returns the absolute value of the input."_c;
    abs_Int32x2.name = "abs"_c;
    abs_Int32x2.backendIndex = 1783;
    abs_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    abs_Int32x2.parameters = abs_Int32x2_args;
    Symbol::Resolved(&abs_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&abs_Int32x2)->signature = "abs(i32x2) i32x2"_c;
    Symbol::Resolved(&abs_Int32x2)->name = "abs(i32x2)"_c;
    Symbol::Resolved(&abs_Int32x2)->nameWithVarNames = "abs(val : i32x2)"_c;
    Symbol::Resolved(&abs_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// abs with Int32x3
    abs_Int32x3_arg.name = "val"_c;
    abs_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    abs_Int32x3.documentation = "Returns the absolute value of the input."_c;
    abs_Int32x3.name = "abs"_c;
    abs_Int32x3.backendIndex = 1784;
    abs_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    abs_Int32x3.parameters = abs_Int32x3_args;
    Symbol::Resolved(&abs_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&abs_Int32x3)->signature = "abs(i32x3) i32x3"_c;
    Symbol::Resolved(&abs_Int32x3)->name = "abs(i32x3)"_c;
    Symbol::Resolved(&abs_Int32x3)->nameWithVarNames = "abs(val : i32x3)"_c;
    Symbol::Resolved(&abs_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// abs with Int32x4
    abs_Int32x4_arg.name = "val"_c;
    abs_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    abs_Int32x4.documentation = "Returns the absolute value of the input."_c;
    abs_Int32x4.name = "abs"_c;
    abs_Int32x4.backendIndex = 1785;
    abs_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    abs_Int32x4.parameters = abs_Int32x4_args;
    Symbol::Resolved(&abs_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&abs_Int32x4)->signature = "abs(i32x4) i32x4"_c;
    Symbol::Resolved(&abs_Int32x4)->name = "abs(i32x4)"_c;
    Symbol::Resolved(&abs_Int32x4)->nameWithVarNames = "abs(val : i32x4)"_c;
    Symbol::Resolved(&abs_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// abs with Int16
    abs_Int16_arg.name = "val"_c;
    abs_Int16_arg.type = Type::FullType{ Int16Type.name };
    abs_Int16.documentation = "Returns the absolute value of the input."_c;
    abs_Int16.name = "abs"_c;
    abs_Int16.backendIndex = 1786;
    abs_Int16.returnType = Type::FullType { Int16Type.name };
    abs_Int16.parameters = abs_Int16_args;
    Symbol::Resolved(&abs_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&abs_Int16)->signature = "abs(i16) i16"_c;
    Symbol::Resolved(&abs_Int16)->name = "abs(i16)"_c;
    Symbol::Resolved(&abs_Int16)->nameWithVarNames = "abs(val : i16)"_c;
    Symbol::Resolved(&abs_Int16)->returnTypeSymbol = &Int16Type;

    /// abs with Int16x2
    abs_Int16x2_arg.name = "val"_c;
    abs_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    abs_Int16x2.documentation = "Returns the absolute value of the input."_c;
    abs_Int16x2.name = "abs"_c;
    abs_Int16x2.backendIndex = 1787;
    abs_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    abs_Int16x2.parameters = abs_Int16x2_args;
    Symbol::Resolved(&abs_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&abs_Int16x2)->signature = "abs(i16x2) i16x2"_c;
    Symbol::Resolved(&abs_Int16x2)->name = "abs(i16x2)"_c;
    Symbol::Resolved(&abs_Int16x2)->nameWithVarNames = "abs(val : i16x2)"_c;
    Symbol::Resolved(&abs_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// abs with Int16x3
    abs_Int16x3_arg.name = "val"_c;
    abs_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    abs_Int16x3.documentation = "Returns the absolute value of the input."_c;
    abs_Int16x3.name = "abs"_c;
    abs_Int16x3.backendIndex = 1788;
    abs_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    abs_Int16x3.parameters = abs_Int16x3_args;
    Symbol::Resolved(&abs_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&abs_Int16x3)->signature = "abs(i16x3) i16x3"_c;
    Symbol::Resolved(&abs_Int16x3)->name = "abs(i16x3)"_c;
    Symbol::Resolved(&abs_Int16x3)->nameWithVarNames = "abs(val : i16x3)"_c;
    Symbol::Resolved(&abs_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// abs with Int16x4
    abs_Int16x4_arg.name = "val"_c;
    abs_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    abs_Int16x4.documentation = "Returns the absolute value of the input."_c;
    abs_Int16x4.name = "abs"_c;
    abs_Int16x4.backendIndex = 1789;
    abs_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    abs_Int16x4.parameters = abs_Int16x4_args;
    Symbol::Resolved(&abs_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&abs_Int16x4)->signature = "abs(i16x4) i16x4"_c;
    Symbol::Resolved(&abs_Int16x4)->name = "abs(i16x4)"_c;
    Symbol::Resolved(&abs_Int16x4)->nameWithVarNames = "abs(val : i16x4)"_c;
    Symbol::Resolved(&abs_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// abs with Float32
    abs_Float32_arg.name = "val"_c;
    abs_Float32_arg.type = Type::FullType{ Float32Type.name };
    abs_Float32.documentation = "Returns the absolute value of the input."_c;
    abs_Float32.name = "abs"_c;
    abs_Float32.backendIndex = 1790;
    abs_Float32.returnType = Type::FullType { Float32Type.name };
    abs_Float32.parameters = abs_Float32_args;
    Symbol::Resolved(&abs_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&abs_Float32)->signature = "abs(f32) f32"_c;
    Symbol::Resolved(&abs_Float32)->name = "abs(f32)"_c;
    Symbol::Resolved(&abs_Float32)->nameWithVarNames = "abs(val : f32)"_c;
    Symbol::Resolved(&abs_Float32)->returnTypeSymbol = &Float32Type;

    /// abs with Float32x2
    abs_Float32x2_arg.name = "val"_c;
    abs_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    abs_Float32x2.documentation = "Returns the absolute value of the input."_c;
    abs_Float32x2.name = "abs"_c;
    abs_Float32x2.backendIndex = 1791;
    abs_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    abs_Float32x2.parameters = abs_Float32x2_args;
    Symbol::Resolved(&abs_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&abs_Float32x2)->signature = "abs(f32x2) f32x2"_c;
    Symbol::Resolved(&abs_Float32x2)->name = "abs(f32x2)"_c;
    Symbol::Resolved(&abs_Float32x2)->nameWithVarNames = "abs(val : f32x2)"_c;
    Symbol::Resolved(&abs_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// abs with Float32x3
    abs_Float32x3_arg.name = "val"_c;
    abs_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    abs_Float32x3.documentation = "Returns the absolute value of the input."_c;
    abs_Float32x3.name = "abs"_c;
    abs_Float32x3.backendIndex = 1792;
    abs_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    abs_Float32x3.parameters = abs_Float32x3_args;
    Symbol::Resolved(&abs_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&abs_Float32x3)->signature = "abs(f32x3) f32x3"_c;
    Symbol::Resolved(&abs_Float32x3)->name = "abs(f32x3)"_c;
    Symbol::Resolved(&abs_Float32x3)->nameWithVarNames = "abs(val : f32x3)"_c;
    Symbol::Resolved(&abs_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// abs with Float32x4
    abs_Float32x4_arg.name = "val"_c;
    abs_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    abs_Float32x4.documentation = "Returns the absolute value of the input."_c;
    abs_Float32x4.name = "abs"_c;
    abs_Float32x4.backendIndex = 1793;
    abs_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    abs_Float32x4.parameters = abs_Float32x4_args;
    Symbol::Resolved(&abs_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&abs_Float32x4)->signature = "abs(f32x4) f32x4"_c;
    Symbol::Resolved(&abs_Float32x4)->name = "abs(f32x4)"_c;
    Symbol::Resolved(&abs_Float32x4)->nameWithVarNames = "abs(val : f32x4)"_c;
    Symbol::Resolved(&abs_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// abs with Float16
    abs_Float16_arg.name = "val"_c;
    abs_Float16_arg.type = Type::FullType{ Float16Type.name };
    abs_Float16.documentation = "Returns the absolute value of the input."_c;
    abs_Float16.name = "abs"_c;
    abs_Float16.backendIndex = 1794;
    abs_Float16.returnType = Type::FullType { Float16Type.name };
    abs_Float16.parameters = abs_Float16_args;
    Symbol::Resolved(&abs_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&abs_Float16)->signature = "abs(f16) f16"_c;
    Symbol::Resolved(&abs_Float16)->name = "abs(f16)"_c;
    Symbol::Resolved(&abs_Float16)->nameWithVarNames = "abs(val : f16)"_c;
    Symbol::Resolved(&abs_Float16)->returnTypeSymbol = &Float16Type;

    /// abs with Float16x2
    abs_Float16x2_arg.name = "val"_c;
    abs_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    abs_Float16x2.documentation = "Returns the absolute value of the input."_c;
    abs_Float16x2.name = "abs"_c;
    abs_Float16x2.backendIndex = 1795;
    abs_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    abs_Float16x2.parameters = abs_Float16x2_args;
    Symbol::Resolved(&abs_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&abs_Float16x2)->signature = "abs(f16x2) f16x2"_c;
    Symbol::Resolved(&abs_Float16x2)->name = "abs(f16x2)"_c;
    Symbol::Resolved(&abs_Float16x2)->nameWithVarNames = "abs(val : f16x2)"_c;
    Symbol::Resolved(&abs_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// abs with Float16x3
    abs_Float16x3_arg.name = "val"_c;
    abs_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    abs_Float16x3.documentation = "Returns the absolute value of the input."_c;
    abs_Float16x3.name = "abs"_c;
    abs_Float16x3.backendIndex = 1796;
    abs_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    abs_Float16x3.parameters = abs_Float16x3_args;
    Symbol::Resolved(&abs_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&abs_Float16x3)->signature = "abs(f16x3) f16x3"_c;
    Symbol::Resolved(&abs_Float16x3)->name = "abs(f16x3)"_c;
    Symbol::Resolved(&abs_Float16x3)->nameWithVarNames = "abs(val : f16x3)"_c;
    Symbol::Resolved(&abs_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// abs with Float16x4
    abs_Float16x4_arg.name = "val"_c;
    abs_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    abs_Float16x4.documentation = "Returns the absolute value of the input."_c;
    abs_Float16x4.name = "abs"_c;
    abs_Float16x4.backendIndex = 1797;
    abs_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    abs_Float16x4.parameters = abs_Float16x4_args;
    Symbol::Resolved(&abs_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&abs_Float16x4)->signature = "abs(f16x4) f16x4"_c;
    Symbol::Resolved(&abs_Float16x4)->name = "abs(f16x4)"_c;
    Symbol::Resolved(&abs_Float16x4)->nameWithVarNames = "abs(val : f16x4)"_c;
    Symbol::Resolved(&abs_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// castToF16 with UInt16
    castToF16_UInt16_arg.name = "val"_c;
    castToF16_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    castToF16_UInt16.documentation = "Casts to type Float16 without conversion."_c;
    castToF16_UInt16.name = "castToF16"_c;
    castToF16_UInt16.backendIndex = 1798;
    castToF16_UInt16.returnType = Type::FullType { Float16Type.name };
    castToF16_UInt16.parameters = castToF16_UInt16_args;
    Symbol::Resolved(&castToF16_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&castToF16_UInt16)->signature = "castToF16(u16) f16"_c;
    Symbol::Resolved(&castToF16_UInt16)->name = "castToF16(u16)"_c;
    Symbol::Resolved(&castToF16_UInt16)->nameWithVarNames = "castToF16(val : u16)"_c;
    Symbol::Resolved(&castToF16_UInt16)->returnTypeSymbol = &Float16Type;

    /// castToF16 with Int16
    castToF16_Int16_arg.name = "val"_c;
    castToF16_Int16_arg.type = Type::FullType{ Int16Type.name };
    castToF16_Int16.documentation = "Casts to type Float16 without conversion."_c;
    castToF16_Int16.name = "castToF16"_c;
    castToF16_Int16.backendIndex = 1799;
    castToF16_Int16.returnType = Type::FullType { Float16Type.name };
    castToF16_Int16.parameters = castToF16_Int16_args;
    Symbol::Resolved(&castToF16_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&castToF16_Int16)->signature = "castToF16(i16) f16"_c;
    Symbol::Resolved(&castToF16_Int16)->name = "castToF16(i16)"_c;
    Symbol::Resolved(&castToF16_Int16)->nameWithVarNames = "castToF16(val : i16)"_c;
    Symbol::Resolved(&castToF16_Int16)->returnTypeSymbol = &Float16Type;

    /// castToU16 with Float16
    castToU16_Float16_arg.name = "val"_c;
    castToU16_Float16_arg.type = Type::FullType{ Float16Type.name };
    castToU16_Float16.documentation = "Casts to type UInt16 without conversion."_c;
    castToU16_Float16.name = "castToU16"_c;
    castToU16_Float16.backendIndex = 1800;
    castToU16_Float16.returnType = Type::FullType { UInt16Type.name };
    castToU16_Float16.parameters = castToU16_Float16_args;
    Symbol::Resolved(&castToU16_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&castToU16_Float16)->signature = "castToU16(f16) u16"_c;
    Symbol::Resolved(&castToU16_Float16)->name = "castToU16(f16)"_c;
    Symbol::Resolved(&castToU16_Float16)->nameWithVarNames = "castToU16(val : f16)"_c;
    Symbol::Resolved(&castToU16_Float16)->returnTypeSymbol = &UInt16Type;

    /// castToU16 with Int16
    castToU16_Int16_arg.name = "val"_c;
    castToU16_Int16_arg.type = Type::FullType{ Int16Type.name };
    castToU16_Int16.documentation = "Casts to type UInt16 without conversion."_c;
    castToU16_Int16.name = "castToU16"_c;
    castToU16_Int16.backendIndex = 1801;
    castToU16_Int16.returnType = Type::FullType { UInt16Type.name };
    castToU16_Int16.parameters = castToU16_Int16_args;
    Symbol::Resolved(&castToU16_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&castToU16_Int16)->signature = "castToU16(i16) u16"_c;
    Symbol::Resolved(&castToU16_Int16)->name = "castToU16(i16)"_c;
    Symbol::Resolved(&castToU16_Int16)->nameWithVarNames = "castToU16(val : i16)"_c;
    Symbol::Resolved(&castToU16_Int16)->returnTypeSymbol = &UInt16Type;

    /// castToI16 with Float16
    castToI16_Float16_arg.name = "val"_c;
    castToI16_Float16_arg.type = Type::FullType{ Float16Type.name };
    castToI16_Float16.documentation = "Casts to type Int16 without conversion."_c;
    castToI16_Float16.name = "castToI16"_c;
    castToI16_Float16.backendIndex = 1802;
    castToI16_Float16.returnType = Type::FullType { Int16Type.name };
    castToI16_Float16.parameters = castToI16_Float16_args;
    Symbol::Resolved(&castToI16_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&castToI16_Float16)->signature = "castToI16(f16) i16"_c;
    Symbol::Resolved(&castToI16_Float16)->name = "castToI16(f16)"_c;
    Symbol::Resolved(&castToI16_Float16)->nameWithVarNames = "castToI16(val : f16)"_c;
    Symbol::Resolved(&castToI16_Float16)->returnTypeSymbol = &Int16Type;

    /// castToI16 with UInt16
    castToI16_UInt16_arg.name = "val"_c;
    castToI16_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    castToI16_UInt16.documentation = "Casts to type Int16 without conversion."_c;
    castToI16_UInt16.name = "castToI16"_c;
    castToI16_UInt16.backendIndex = 1803;
    castToI16_UInt16.returnType = Type::FullType { Int16Type.name };
    castToI16_UInt16.parameters = castToI16_UInt16_args;
    Symbol::Resolved(&castToI16_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&castToI16_UInt16)->signature = "castToI16(u16) i16"_c;
    Symbol::Resolved(&castToI16_UInt16)->name = "castToI16(u16)"_c;
    Symbol::Resolved(&castToI16_UInt16)->nameWithVarNames = "castToI16(val : u16)"_c;
    Symbol::Resolved(&castToI16_UInt16)->returnTypeSymbol = &Int16Type;

    /// castToF32 with UInt32
    castToF32_UInt32_arg.name = "val"_c;
    castToF32_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    castToF32_UInt32.documentation = "Casts to type Float32 without conversion."_c;
    castToF32_UInt32.name = "castToF32"_c;
    castToF32_UInt32.backendIndex = 1804;
    castToF32_UInt32.returnType = Type::FullType { Float32Type.name };
    castToF32_UInt32.parameters = castToF32_UInt32_args;
    Symbol::Resolved(&castToF32_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&castToF32_UInt32)->signature = "castToF32(u32) f32"_c;
    Symbol::Resolved(&castToF32_UInt32)->name = "castToF32(u32)"_c;
    Symbol::Resolved(&castToF32_UInt32)->nameWithVarNames = "castToF32(val : u32)"_c;
    Symbol::Resolved(&castToF32_UInt32)->returnTypeSymbol = &Float32Type;

    /// castToF32 with Int32
    castToF32_Int32_arg.name = "val"_c;
    castToF32_Int32_arg.type = Type::FullType{ Int32Type.name };
    castToF32_Int32.documentation = "Casts to type Float32 without conversion."_c;
    castToF32_Int32.name = "castToF32"_c;
    castToF32_Int32.backendIndex = 1805;
    castToF32_Int32.returnType = Type::FullType { Float32Type.name };
    castToF32_Int32.parameters = castToF32_Int32_args;
    Symbol::Resolved(&castToF32_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&castToF32_Int32)->signature = "castToF32(i32) f32"_c;
    Symbol::Resolved(&castToF32_Int32)->name = "castToF32(i32)"_c;
    Symbol::Resolved(&castToF32_Int32)->nameWithVarNames = "castToF32(val : i32)"_c;
    Symbol::Resolved(&castToF32_Int32)->returnTypeSymbol = &Float32Type;

    /// castToU32 with Float32
    castToU32_Float32_arg.name = "val"_c;
    castToU32_Float32_arg.type = Type::FullType{ Float32Type.name };
    castToU32_Float32.documentation = "Casts to type UInt32 without conversion."_c;
    castToU32_Float32.name = "castToU32"_c;
    castToU32_Float32.backendIndex = 1806;
    castToU32_Float32.returnType = Type::FullType { UInt32Type.name };
    castToU32_Float32.parameters = castToU32_Float32_args;
    Symbol::Resolved(&castToU32_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&castToU32_Float32)->signature = "castToU32(f32) u32"_c;
    Symbol::Resolved(&castToU32_Float32)->name = "castToU32(f32)"_c;
    Symbol::Resolved(&castToU32_Float32)->nameWithVarNames = "castToU32(val : f32)"_c;
    Symbol::Resolved(&castToU32_Float32)->returnTypeSymbol = &UInt32Type;

    /// castToU32 with Int32
    castToU32_Int32_arg.name = "val"_c;
    castToU32_Int32_arg.type = Type::FullType{ Int32Type.name };
    castToU32_Int32.documentation = "Casts to type UInt32 without conversion."_c;
    castToU32_Int32.name = "castToU32"_c;
    castToU32_Int32.backendIndex = 1807;
    castToU32_Int32.returnType = Type::FullType { UInt32Type.name };
    castToU32_Int32.parameters = castToU32_Int32_args;
    Symbol::Resolved(&castToU32_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&castToU32_Int32)->signature = "castToU32(i32) u32"_c;
    Symbol::Resolved(&castToU32_Int32)->name = "castToU32(i32)"_c;
    Symbol::Resolved(&castToU32_Int32)->nameWithVarNames = "castToU32(val : i32)"_c;
    Symbol::Resolved(&castToU32_Int32)->returnTypeSymbol = &UInt32Type;

    /// castToI32 with Float32
    castToI32_Float32_arg.name = "val"_c;
    castToI32_Float32_arg.type = Type::FullType{ Float32Type.name };
    castToI32_Float32.documentation = "Casts to type Int32 without conversion."_c;
    castToI32_Float32.name = "castToI32"_c;
    castToI32_Float32.backendIndex = 1808;
    castToI32_Float32.returnType = Type::FullType { Int32Type.name };
    castToI32_Float32.parameters = castToI32_Float32_args;
    Symbol::Resolved(&castToI32_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&castToI32_Float32)->signature = "castToI32(f32) i32"_c;
    Symbol::Resolved(&castToI32_Float32)->name = "castToI32(f32)"_c;
    Symbol::Resolved(&castToI32_Float32)->nameWithVarNames = "castToI32(val : f32)"_c;
    Symbol::Resolved(&castToI32_Float32)->returnTypeSymbol = &Int32Type;

    /// castToI32 with UInt32
    castToI32_UInt32_arg.name = "val"_c;
    castToI32_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    castToI32_UInt32.documentation = "Casts to type Int32 without conversion."_c;
    castToI32_UInt32.name = "castToI32"_c;
    castToI32_UInt32.backendIndex = 1809;
    castToI32_UInt32.returnType = Type::FullType { Int32Type.name };
    castToI32_UInt32.parameters = castToI32_UInt32_args;
    Symbol::Resolved(&castToI32_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&castToI32_UInt32)->signature = "castToI32(u32) i32"_c;
    Symbol::Resolved(&castToI32_UInt32)->name = "castToI32(u32)"_c;
    Symbol::Resolved(&castToI32_UInt32)->nameWithVarNames = "castToI32(val : u32)"_c;
    Symbol::Resolved(&castToI32_UInt32)->returnTypeSymbol = &Int32Type;

    /// any with Bool8
    any_Bool8_arg.name = "val"_c;
    any_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    any_Bool8.documentation = "Returns true if any component of the vector is non-zero."_c;
    any_Bool8.name = "any"_c;
    any_Bool8.backendIndex = 1810;
    any_Bool8.returnType = Type::FullType { Bool8Type.name };
    any_Bool8.parameters = any_Bool8_args;
    Symbol::Resolved(&any_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&any_Bool8)->signature = "any(b8) b8"_c;
    Symbol::Resolved(&any_Bool8)->name = "any(b8)"_c;
    Symbol::Resolved(&any_Bool8)->nameWithVarNames = "any(val : b8)"_c;
    Symbol::Resolved(&any_Bool8)->returnTypeSymbol = &Bool8Type;

    /// any with Bool8x2
    any_Bool8x2_arg.name = "val"_c;
    any_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    any_Bool8x2.documentation = "Returns true if any component of the vector is non-zero."_c;
    any_Bool8x2.name = "any"_c;
    any_Bool8x2.backendIndex = 1811;
    any_Bool8x2.returnType = Type::FullType { Bool8Type.name };
    any_Bool8x2.parameters = any_Bool8x2_args;
    Symbol::Resolved(&any_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&any_Bool8x2)->signature = "any(b8x2) b8"_c;
    Symbol::Resolved(&any_Bool8x2)->name = "any(b8x2)"_c;
    Symbol::Resolved(&any_Bool8x2)->nameWithVarNames = "any(val : b8x2)"_c;
    Symbol::Resolved(&any_Bool8x2)->returnTypeSymbol = &Bool8Type;

    /// any with Bool8x3
    any_Bool8x3_arg.name = "val"_c;
    any_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    any_Bool8x3.documentation = "Returns true if any component of the vector is non-zero."_c;
    any_Bool8x3.name = "any"_c;
    any_Bool8x3.backendIndex = 1812;
    any_Bool8x3.returnType = Type::FullType { Bool8Type.name };
    any_Bool8x3.parameters = any_Bool8x3_args;
    Symbol::Resolved(&any_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&any_Bool8x3)->signature = "any(b8x3) b8"_c;
    Symbol::Resolved(&any_Bool8x3)->name = "any(b8x3)"_c;
    Symbol::Resolved(&any_Bool8x3)->nameWithVarNames = "any(val : b8x3)"_c;
    Symbol::Resolved(&any_Bool8x3)->returnTypeSymbol = &Bool8Type;

    /// any with Bool8x4
    any_Bool8x4_arg.name = "val"_c;
    any_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    any_Bool8x4.documentation = "Returns true if any component of the vector is non-zero."_c;
    any_Bool8x4.name = "any"_c;
    any_Bool8x4.backendIndex = 1813;
    any_Bool8x4.returnType = Type::FullType { Bool8Type.name };
    any_Bool8x4.parameters = any_Bool8x4_args;
    Symbol::Resolved(&any_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&any_Bool8x4)->signature = "any(b8x4) b8"_c;
    Symbol::Resolved(&any_Bool8x4)->name = "any(b8x4)"_c;
    Symbol::Resolved(&any_Bool8x4)->nameWithVarNames = "any(val : b8x4)"_c;
    Symbol::Resolved(&any_Bool8x4)->returnTypeSymbol = &Bool8Type;

    /// all with Bool8
    all_Bool8_arg.name = "val"_c;
    all_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    all_Bool8.documentation = "Returns true if all components of the vector are non-zero."_c;
    all_Bool8.name = "all"_c;
    all_Bool8.backendIndex = 1814;
    all_Bool8.returnType = Type::FullType { Bool8Type.name };
    all_Bool8.parameters = all_Bool8_args;
    Symbol::Resolved(&all_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&all_Bool8)->signature = "all(b8) b8"_c;
    Symbol::Resolved(&all_Bool8)->name = "all(b8)"_c;
    Symbol::Resolved(&all_Bool8)->nameWithVarNames = "all(val : b8)"_c;
    Symbol::Resolved(&all_Bool8)->returnTypeSymbol = &Bool8Type;

    /// all with Bool8x2
    all_Bool8x2_arg.name = "val"_c;
    all_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    all_Bool8x2.documentation = "Returns true if all components of the vector are non-zero."_c;
    all_Bool8x2.name = "all"_c;
    all_Bool8x2.backendIndex = 1815;
    all_Bool8x2.returnType = Type::FullType { Bool8Type.name };
    all_Bool8x2.parameters = all_Bool8x2_args;
    Symbol::Resolved(&all_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&all_Bool8x2)->signature = "all(b8x2) b8"_c;
    Symbol::Resolved(&all_Bool8x2)->name = "all(b8x2)"_c;
    Symbol::Resolved(&all_Bool8x2)->nameWithVarNames = "all(val : b8x2)"_c;
    Symbol::Resolved(&all_Bool8x2)->returnTypeSymbol = &Bool8Type;

    /// all with Bool8x3
    all_Bool8x3_arg.name = "val"_c;
    all_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    all_Bool8x3.documentation = "Returns true if all components of the vector are non-zero."_c;
    all_Bool8x3.name = "all"_c;
    all_Bool8x3.backendIndex = 1816;
    all_Bool8x3.returnType = Type::FullType { Bool8Type.name };
    all_Bool8x3.parameters = all_Bool8x3_args;
    Symbol::Resolved(&all_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&all_Bool8x3)->signature = "all(b8x3) b8"_c;
    Symbol::Resolved(&all_Bool8x3)->name = "all(b8x3)"_c;
    Symbol::Resolved(&all_Bool8x3)->nameWithVarNames = "all(val : b8x3)"_c;
    Symbol::Resolved(&all_Bool8x3)->returnTypeSymbol = &Bool8Type;

    /// all with Bool8x4
    all_Bool8x4_arg.name = "val"_c;
    all_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    all_Bool8x4.documentation = "Returns true if all components of the vector are non-zero."_c;
    all_Bool8x4.name = "all"_c;
    all_Bool8x4.backendIndex = 1817;
    all_Bool8x4.returnType = Type::FullType { Bool8Type.name };
    all_Bool8x4.parameters = all_Bool8x4_args;
    Symbol::Resolved(&all_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&all_Bool8x4)->signature = "all(b8x4) b8"_c;
    Symbol::Resolved(&all_Bool8x4)->name = "all(b8x4)"_c;
    Symbol::Resolved(&all_Bool8x4)->nameWithVarNames = "all(val : b8x4)"_c;
    Symbol::Resolved(&all_Bool8x4)->returnTypeSymbol = &Bool8Type;

    /// transpose with Float32x2x2
    transpose_Float32x2x2_arg.name = "val"_c;
    transpose_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    transpose_Float32x2x2.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x2x2.name = "transpose"_c;
    transpose_Float32x2x2.backendIndex = 1818;
    transpose_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    transpose_Float32x2x2.parameters = transpose_Float32x2x2_args;
    Symbol::Resolved(&transpose_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&transpose_Float32x2x2)->signature = "transpose(f32x2x2) f32x2x2"_c;
    Symbol::Resolved(&transpose_Float32x2x2)->name = "transpose(f32x2x2)"_c;
    Symbol::Resolved(&transpose_Float32x2x2)->nameWithVarNames = "transpose(val : f32x2x2)"_c;
    Symbol::Resolved(&transpose_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// transpose with Float16x2x2
    transpose_Float16x2x2_arg.name = "val"_c;
    transpose_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    transpose_Float16x2x2.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x2x2.name = "transpose"_c;
    transpose_Float16x2x2.backendIndex = 1819;
    transpose_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    transpose_Float16x2x2.parameters = transpose_Float16x2x2_args;
    Symbol::Resolved(&transpose_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&transpose_Float16x2x2)->signature = "transpose(f16x2x2) f16x2x2"_c;
    Symbol::Resolved(&transpose_Float16x2x2)->name = "transpose(f16x2x2)"_c;
    Symbol::Resolved(&transpose_Float16x2x2)->nameWithVarNames = "transpose(val : f16x2x2)"_c;
    Symbol::Resolved(&transpose_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// transpose with Float32x2x3
    transpose_Float32x2x3_arg.name = "val"_c;
    transpose_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    transpose_Float32x2x3.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x2x3.name = "transpose"_c;
    transpose_Float32x2x3.backendIndex = 1820;
    transpose_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    transpose_Float32x2x3.parameters = transpose_Float32x2x3_args;
    Symbol::Resolved(&transpose_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&transpose_Float32x2x3)->signature = "transpose(f32x2x3) f32x2x3"_c;
    Symbol::Resolved(&transpose_Float32x2x3)->name = "transpose(f32x2x3)"_c;
    Symbol::Resolved(&transpose_Float32x2x3)->nameWithVarNames = "transpose(val : f32x2x3)"_c;
    Symbol::Resolved(&transpose_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// transpose with Float16x2x3
    transpose_Float16x2x3_arg.name = "val"_c;
    transpose_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    transpose_Float16x2x3.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x2x3.name = "transpose"_c;
    transpose_Float16x2x3.backendIndex = 1821;
    transpose_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    transpose_Float16x2x3.parameters = transpose_Float16x2x3_args;
    Symbol::Resolved(&transpose_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&transpose_Float16x2x3)->signature = "transpose(f16x2x3) f16x2x3"_c;
    Symbol::Resolved(&transpose_Float16x2x3)->name = "transpose(f16x2x3)"_c;
    Symbol::Resolved(&transpose_Float16x2x3)->nameWithVarNames = "transpose(val : f16x2x3)"_c;
    Symbol::Resolved(&transpose_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// transpose with Float32x2x4
    transpose_Float32x2x4_arg.name = "val"_c;
    transpose_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    transpose_Float32x2x4.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x2x4.name = "transpose"_c;
    transpose_Float32x2x4.backendIndex = 1822;
    transpose_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    transpose_Float32x2x4.parameters = transpose_Float32x2x4_args;
    Symbol::Resolved(&transpose_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&transpose_Float32x2x4)->signature = "transpose(f32x2x4) f32x2x4"_c;
    Symbol::Resolved(&transpose_Float32x2x4)->name = "transpose(f32x2x4)"_c;
    Symbol::Resolved(&transpose_Float32x2x4)->nameWithVarNames = "transpose(val : f32x2x4)"_c;
    Symbol::Resolved(&transpose_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// transpose with Float16x2x4
    transpose_Float16x2x4_arg.name = "val"_c;
    transpose_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    transpose_Float16x2x4.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x2x4.name = "transpose"_c;
    transpose_Float16x2x4.backendIndex = 1823;
    transpose_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    transpose_Float16x2x4.parameters = transpose_Float16x2x4_args;
    Symbol::Resolved(&transpose_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&transpose_Float16x2x4)->signature = "transpose(f16x2x4) f16x2x4"_c;
    Symbol::Resolved(&transpose_Float16x2x4)->name = "transpose(f16x2x4)"_c;
    Symbol::Resolved(&transpose_Float16x2x4)->nameWithVarNames = "transpose(val : f16x2x4)"_c;
    Symbol::Resolved(&transpose_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// transpose with Float32x3x2
    transpose_Float32x3x2_arg.name = "val"_c;
    transpose_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    transpose_Float32x3x2.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x3x2.name = "transpose"_c;
    transpose_Float32x3x2.backendIndex = 1824;
    transpose_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    transpose_Float32x3x2.parameters = transpose_Float32x3x2_args;
    Symbol::Resolved(&transpose_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&transpose_Float32x3x2)->signature = "transpose(f32x3x2) f32x3x2"_c;
    Symbol::Resolved(&transpose_Float32x3x2)->name = "transpose(f32x3x2)"_c;
    Symbol::Resolved(&transpose_Float32x3x2)->nameWithVarNames = "transpose(val : f32x3x2)"_c;
    Symbol::Resolved(&transpose_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// transpose with Float16x3x2
    transpose_Float16x3x2_arg.name = "val"_c;
    transpose_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    transpose_Float16x3x2.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x3x2.name = "transpose"_c;
    transpose_Float16x3x2.backendIndex = 1825;
    transpose_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    transpose_Float16x3x2.parameters = transpose_Float16x3x2_args;
    Symbol::Resolved(&transpose_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&transpose_Float16x3x2)->signature = "transpose(f16x3x2) f16x3x2"_c;
    Symbol::Resolved(&transpose_Float16x3x2)->name = "transpose(f16x3x2)"_c;
    Symbol::Resolved(&transpose_Float16x3x2)->nameWithVarNames = "transpose(val : f16x3x2)"_c;
    Symbol::Resolved(&transpose_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// transpose with Float32x3x3
    transpose_Float32x3x3_arg.name = "val"_c;
    transpose_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    transpose_Float32x3x3.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x3x3.name = "transpose"_c;
    transpose_Float32x3x3.backendIndex = 1826;
    transpose_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    transpose_Float32x3x3.parameters = transpose_Float32x3x3_args;
    Symbol::Resolved(&transpose_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&transpose_Float32x3x3)->signature = "transpose(f32x3x3) f32x3x3"_c;
    Symbol::Resolved(&transpose_Float32x3x3)->name = "transpose(f32x3x3)"_c;
    Symbol::Resolved(&transpose_Float32x3x3)->nameWithVarNames = "transpose(val : f32x3x3)"_c;
    Symbol::Resolved(&transpose_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// transpose with Float16x3x3
    transpose_Float16x3x3_arg.name = "val"_c;
    transpose_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    transpose_Float16x3x3.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x3x3.name = "transpose"_c;
    transpose_Float16x3x3.backendIndex = 1827;
    transpose_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    transpose_Float16x3x3.parameters = transpose_Float16x3x3_args;
    Symbol::Resolved(&transpose_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&transpose_Float16x3x3)->signature = "transpose(f16x3x3) f16x3x3"_c;
    Symbol::Resolved(&transpose_Float16x3x3)->name = "transpose(f16x3x3)"_c;
    Symbol::Resolved(&transpose_Float16x3x3)->nameWithVarNames = "transpose(val : f16x3x3)"_c;
    Symbol::Resolved(&transpose_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// transpose with Float32x3x4
    transpose_Float32x3x4_arg.name = "val"_c;
    transpose_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    transpose_Float32x3x4.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x3x4.name = "transpose"_c;
    transpose_Float32x3x4.backendIndex = 1828;
    transpose_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    transpose_Float32x3x4.parameters = transpose_Float32x3x4_args;
    Symbol::Resolved(&transpose_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&transpose_Float32x3x4)->signature = "transpose(f32x3x4) f32x3x4"_c;
    Symbol::Resolved(&transpose_Float32x3x4)->name = "transpose(f32x3x4)"_c;
    Symbol::Resolved(&transpose_Float32x3x4)->nameWithVarNames = "transpose(val : f32x3x4)"_c;
    Symbol::Resolved(&transpose_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// transpose with Float16x3x4
    transpose_Float16x3x4_arg.name = "val"_c;
    transpose_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    transpose_Float16x3x4.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x3x4.name = "transpose"_c;
    transpose_Float16x3x4.backendIndex = 1829;
    transpose_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    transpose_Float16x3x4.parameters = transpose_Float16x3x4_args;
    Symbol::Resolved(&transpose_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&transpose_Float16x3x4)->signature = "transpose(f16x3x4) f16x3x4"_c;
    Symbol::Resolved(&transpose_Float16x3x4)->name = "transpose(f16x3x4)"_c;
    Symbol::Resolved(&transpose_Float16x3x4)->nameWithVarNames = "transpose(val : f16x3x4)"_c;
    Symbol::Resolved(&transpose_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// transpose with Float32x4x2
    transpose_Float32x4x2_arg.name = "val"_c;
    transpose_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    transpose_Float32x4x2.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x4x2.name = "transpose"_c;
    transpose_Float32x4x2.backendIndex = 1830;
    transpose_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    transpose_Float32x4x2.parameters = transpose_Float32x4x2_args;
    Symbol::Resolved(&transpose_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&transpose_Float32x4x2)->signature = "transpose(f32x4x2) f32x4x2"_c;
    Symbol::Resolved(&transpose_Float32x4x2)->name = "transpose(f32x4x2)"_c;
    Symbol::Resolved(&transpose_Float32x4x2)->nameWithVarNames = "transpose(val : f32x4x2)"_c;
    Symbol::Resolved(&transpose_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// transpose with Float16x4x2
    transpose_Float16x4x2_arg.name = "val"_c;
    transpose_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    transpose_Float16x4x2.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x4x2.name = "transpose"_c;
    transpose_Float16x4x2.backendIndex = 1831;
    transpose_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    transpose_Float16x4x2.parameters = transpose_Float16x4x2_args;
    Symbol::Resolved(&transpose_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&transpose_Float16x4x2)->signature = "transpose(f16x4x2) f16x4x2"_c;
    Symbol::Resolved(&transpose_Float16x4x2)->name = "transpose(f16x4x2)"_c;
    Symbol::Resolved(&transpose_Float16x4x2)->nameWithVarNames = "transpose(val : f16x4x2)"_c;
    Symbol::Resolved(&transpose_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// transpose with Float32x4x3
    transpose_Float32x4x3_arg.name = "val"_c;
    transpose_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    transpose_Float32x4x3.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x4x3.name = "transpose"_c;
    transpose_Float32x4x3.backendIndex = 1832;
    transpose_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    transpose_Float32x4x3.parameters = transpose_Float32x4x3_args;
    Symbol::Resolved(&transpose_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&transpose_Float32x4x3)->signature = "transpose(f32x4x3) f32x4x3"_c;
    Symbol::Resolved(&transpose_Float32x4x3)->name = "transpose(f32x4x3)"_c;
    Symbol::Resolved(&transpose_Float32x4x3)->nameWithVarNames = "transpose(val : f32x4x3)"_c;
    Symbol::Resolved(&transpose_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

}
} // namespace GPULang
