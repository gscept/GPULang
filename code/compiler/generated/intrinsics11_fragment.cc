//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// textureSample with Texture2D, Sampler, Float32x2
Variable TextureSample_Texture2D_texture;
inline constexpr std::array TextureSample_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture2D_sampler;
inline constexpr std::array TextureSample_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture2D_coordinate;
Function TextureSample_Texture2D;
inline constexpr std::array TextureSample_Texture2D_args = { &TextureSample_Texture2D_texture, &TextureSample_Texture2D_sampler, &TextureSample_Texture2D_coordinate };

/// textureSample with SampledTexture2D, Float32x2
Variable SampledTextureSample_Texture2D_texture;
inline constexpr std::array SampledTextureSample_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_Texture2D_coordinate;
Function SampledTextureSample_Texture2D;
inline constexpr std::array SampledTextureSample_Texture2D_args = { &SampledTextureSample_Texture2D_texture, &SampledTextureSample_Texture2D_coordinate };

/// textureSample with Texture3D, Sampler, Float32x3
Variable TextureSample_Texture3D_texture;
inline constexpr std::array TextureSample_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture3D_sampler;
inline constexpr std::array TextureSample_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture3D_coordinate;
Function TextureSample_Texture3D;
inline constexpr std::array TextureSample_Texture3D_args = { &TextureSample_Texture3D_texture, &TextureSample_Texture3D_sampler, &TextureSample_Texture3D_coordinate };

/// textureSample with SampledTexture3D, Float32x3
Variable SampledTextureSample_Texture3D_texture;
inline constexpr std::array SampledTextureSample_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_Texture3D_coordinate;
Function SampledTextureSample_Texture3D;
inline constexpr std::array SampledTextureSample_Texture3D_args = { &SampledTextureSample_Texture3D_texture, &SampledTextureSample_Texture3D_coordinate };

/// textureSample with TextureCube, Sampler, Float32x3
Variable TextureSample_TextureCube_texture;
inline constexpr std::array TextureSample_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_TextureCube_sampler;
inline constexpr std::array TextureSample_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_TextureCube_coordinate;
Function TextureSample_TextureCube;
inline constexpr std::array TextureSample_TextureCube_args = { &TextureSample_TextureCube_texture, &TextureSample_TextureCube_sampler, &TextureSample_TextureCube_coordinate };

/// textureSample with SampledTextureCube, Float32x3
Variable SampledTextureSample_TextureCube_texture;
inline constexpr std::array SampledTextureSample_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_TextureCube_coordinate;
Function SampledTextureSample_TextureCube;
inline constexpr std::array SampledTextureSample_TextureCube_args = { &SampledTextureSample_TextureCube_texture, &SampledTextureSample_TextureCube_coordinate };

/// textureSample with Texture1DArray, Sampler, Float32x2
Variable TextureSample_Texture1DArray_texture;
inline constexpr std::array TextureSample_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture1DArray_sampler;
inline constexpr std::array TextureSample_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture1DArray_coordinate;
Function TextureSample_Texture1DArray;
inline constexpr std::array TextureSample_Texture1DArray_args = { &TextureSample_Texture1DArray_texture, &TextureSample_Texture1DArray_sampler, &TextureSample_Texture1DArray_coordinate };

/// textureSample with SampledTexture1DArray, Float32x2
Variable SampledTextureSample_Texture1DArray_texture;
inline constexpr std::array SampledTextureSample_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_Texture1DArray_coordinate;
Function SampledTextureSample_Texture1DArray;
inline constexpr std::array SampledTextureSample_Texture1DArray_args = { &SampledTextureSample_Texture1DArray_texture, &SampledTextureSample_Texture1DArray_coordinate };

/// textureSample with Texture2DArray, Sampler, Float32x3
Variable TextureSample_Texture2DArray_texture;
inline constexpr std::array TextureSample_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture2DArray_sampler;
inline constexpr std::array TextureSample_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture2DArray_coordinate;
Function TextureSample_Texture2DArray;
inline constexpr std::array TextureSample_Texture2DArray_args = { &TextureSample_Texture2DArray_texture, &TextureSample_Texture2DArray_sampler, &TextureSample_Texture2DArray_coordinate };

/// textureSample with SampledTexture2DArray, Float32x3
Variable SampledTextureSample_Texture2DArray_texture;
inline constexpr std::array SampledTextureSample_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_Texture2DArray_coordinate;
Function SampledTextureSample_Texture2DArray;
inline constexpr std::array SampledTextureSample_Texture2DArray_args = { &SampledTextureSample_Texture2DArray_texture, &SampledTextureSample_Texture2DArray_coordinate };

/// textureSample with TextureCubeArray, Sampler, Float32x4
Variable TextureSample_TextureCubeArray_texture;
inline constexpr std::array TextureSample_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_TextureCubeArray_sampler;
inline constexpr std::array TextureSample_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_TextureCubeArray_coordinate;
Function TextureSample_TextureCubeArray;
inline constexpr std::array TextureSample_TextureCubeArray_args = { &TextureSample_TextureCubeArray_texture, &TextureSample_TextureCubeArray_sampler, &TextureSample_TextureCubeArray_coordinate };

/// textureSample with SampledTextureCubeArray, Float32x4
Variable SampledTextureSample_TextureCubeArray_texture;
inline constexpr std::array SampledTextureSample_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_TextureCubeArray_coordinate;
Function SampledTextureSample_TextureCubeArray;
inline constexpr std::array SampledTextureSample_TextureCubeArray_args = { &SampledTextureSample_TextureCubeArray_texture, &SampledTextureSample_TextureCubeArray_coordinate };

/// textureSampleOffset with Texture1D, Sampler, Float32, Float32
Variable TextureSampleOffset_Texture1D_texture;
inline constexpr std::array TextureSampleOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture1D_coordinate;
Variable TextureSampleOffset_Texture1D_offset;
Function TextureSampleOffset_Texture1D;
inline constexpr std::array TextureSampleOffset_Texture1D_args = { &TextureSampleOffset_Texture1D_texture, &TextureSampleOffset_Texture1D_sampler, &TextureSampleOffset_Texture1D_coordinate, &TextureSampleOffset_Texture1D_offset };

/// textureSampleOffset with SampledTexture1D, Float32, Float32
Variable SampledTextureSampleOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleOffset_Texture1D_coordinate;
Variable SampledTextureSampleOffset_Texture1D_offset;
Function SampledTextureSampleOffset_Texture1D;
inline constexpr std::array SampledTextureSampleOffset_Texture1D_args = { &SampledTextureSampleOffset_Texture1D_texture, &SampledTextureSampleOffset_Texture1D_coordinate, &SampledTextureSampleOffset_Texture1D_offset };

/// textureSampleOffset with Texture2D, Sampler, Float32x2, Float32x2
Variable TextureSampleOffset_Texture2D_texture;
inline constexpr std::array TextureSampleOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture2D_coordinate;
Variable TextureSampleOffset_Texture2D_offset;
Function TextureSampleOffset_Texture2D;
inline constexpr std::array TextureSampleOffset_Texture2D_args = { &TextureSampleOffset_Texture2D_texture, &TextureSampleOffset_Texture2D_sampler, &TextureSampleOffset_Texture2D_coordinate, &TextureSampleOffset_Texture2D_offset };

/// textureSampleOffset with SampledTexture2D, Float32x2, Float32x2
Variable SampledTextureSampleOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleOffset_Texture2D_coordinate;
Variable SampledTextureSampleOffset_Texture2D_offset;
Function SampledTextureSampleOffset_Texture2D;
inline constexpr std::array SampledTextureSampleOffset_Texture2D_args = { &SampledTextureSampleOffset_Texture2D_texture, &SampledTextureSampleOffset_Texture2D_coordinate, &SampledTextureSampleOffset_Texture2D_offset };

/// textureSampleOffset with Texture3D, Sampler, Float32x3, Float32x3
Variable TextureSampleOffset_Texture3D_texture;
inline constexpr std::array TextureSampleOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture3D_coordinate;
Variable TextureSampleOffset_Texture3D_offset;
Function TextureSampleOffset_Texture3D;
inline constexpr std::array TextureSampleOffset_Texture3D_args = { &TextureSampleOffset_Texture3D_texture, &TextureSampleOffset_Texture3D_sampler, &TextureSampleOffset_Texture3D_coordinate, &TextureSampleOffset_Texture3D_offset };

/// textureSampleOffset with SampledTexture3D, Float32x3, Float32x3
Variable SampledTextureSampleOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleOffset_Texture3D_coordinate;
Variable SampledTextureSampleOffset_Texture3D_offset;
Function SampledTextureSampleOffset_Texture3D;
inline constexpr std::array SampledTextureSampleOffset_Texture3D_args = { &SampledTextureSampleOffset_Texture3D_texture, &SampledTextureSampleOffset_Texture3D_coordinate, &SampledTextureSampleOffset_Texture3D_offset };

/// textureSampleOffset with Texture1DArray, Sampler, Float32x2, Float32x2
Variable TextureSampleOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture1DArray_coordinate;
Variable TextureSampleOffset_Texture1DArray_offset;
Function TextureSampleOffset_Texture1DArray;
inline constexpr std::array TextureSampleOffset_Texture1DArray_args = { &TextureSampleOffset_Texture1DArray_texture, &TextureSampleOffset_Texture1DArray_sampler, &TextureSampleOffset_Texture1DArray_coordinate, &TextureSampleOffset_Texture1DArray_offset };

/// textureSampleOffset with SampledTexture1DArray, Float32x2, Float32x2
Variable SampledTextureSampleOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleOffset_Texture1DArray_offset;
Function SampledTextureSampleOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleOffset_Texture1DArray_args = { &SampledTextureSampleOffset_Texture1DArray_texture, &SampledTextureSampleOffset_Texture1DArray_coordinate, &SampledTextureSampleOffset_Texture1DArray_offset };

/// textureSampleOffset with Texture2DArray, Sampler, Float32x3, Float32x3
Variable TextureSampleOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture2DArray_coordinate;
Variable TextureSampleOffset_Texture2DArray_offset;
Function TextureSampleOffset_Texture2DArray;
inline constexpr std::array TextureSampleOffset_Texture2DArray_args = { &TextureSampleOffset_Texture2DArray_texture, &TextureSampleOffset_Texture2DArray_sampler, &TextureSampleOffset_Texture2DArray_coordinate, &TextureSampleOffset_Texture2DArray_offset };

/// textureSampleOffset with SampledTexture2DArray, Float32x3, Float32x3
Variable SampledTextureSampleOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleOffset_Texture2DArray_offset;
Function SampledTextureSampleOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleOffset_Texture2DArray_args = { &SampledTextureSampleOffset_Texture2DArray_texture, &SampledTextureSampleOffset_Texture2DArray_coordinate, &SampledTextureSampleOffset_Texture2DArray_offset };

/// textureSampleProj with Texture1D, Sampler, Float32, Float32
Variable TextureSampleProj_Texture1D_texture;
inline constexpr std::array TextureSampleProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture1D_sampler;
inline constexpr std::array TextureSampleProj_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture1D_coordinate;
Variable TextureSampleProj_Texture1D_proj;
Function TextureSampleProj_Texture1D;
inline constexpr std::array TextureSampleProj_Texture1D_args = { &TextureSampleProj_Texture1D_texture, &TextureSampleProj_Texture1D_sampler, &TextureSampleProj_Texture1D_coordinate, &TextureSampleProj_Texture1D_proj };

/// textureSampleProj with SampledTexture1D, Float32, Float32
Variable SampledTextureSampleProj_Texture1D_texture;
inline constexpr std::array SampledTextureSampleProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProj_Texture1D_coordinate;
Variable SampledTextureSampleProj_Texture1D_proj;
Function SampledTextureSampleProj_Texture1D;
inline constexpr std::array SampledTextureSampleProj_Texture1D_args = { &SampledTextureSampleProj_Texture1D_texture, &SampledTextureSampleProj_Texture1D_coordinate, &SampledTextureSampleProj_Texture1D_proj };

/// textureSampleProj with Texture2D, Sampler, Float32x2, Float32
Variable TextureSampleProj_Texture2D_texture;
inline constexpr std::array TextureSampleProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture2D_sampler;
inline constexpr std::array TextureSampleProj_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture2D_coordinate;
Variable TextureSampleProj_Texture2D_proj;
Function TextureSampleProj_Texture2D;
inline constexpr std::array TextureSampleProj_Texture2D_args = { &TextureSampleProj_Texture2D_texture, &TextureSampleProj_Texture2D_sampler, &TextureSampleProj_Texture2D_coordinate, &TextureSampleProj_Texture2D_proj };

/// textureSampleProj with SampledTexture2D, Float32x2, Float32
Variable SampledTextureSampleProj_Texture2D_texture;
inline constexpr std::array SampledTextureSampleProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProj_Texture2D_coordinate;
Variable SampledTextureSampleProj_Texture2D_proj;
Function SampledTextureSampleProj_Texture2D;
inline constexpr std::array SampledTextureSampleProj_Texture2D_args = { &SampledTextureSampleProj_Texture2D_texture, &SampledTextureSampleProj_Texture2D_coordinate, &SampledTextureSampleProj_Texture2D_proj };

/// textureSampleProj with Texture3D, Sampler, Float32x3, Float32
Variable TextureSampleProj_Texture3D_texture;
inline constexpr std::array TextureSampleProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture3D_sampler;
inline constexpr std::array TextureSampleProj_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture3D_coordinate;
Variable TextureSampleProj_Texture3D_proj;
Function TextureSampleProj_Texture3D;
inline constexpr std::array TextureSampleProj_Texture3D_args = { &TextureSampleProj_Texture3D_texture, &TextureSampleProj_Texture3D_sampler, &TextureSampleProj_Texture3D_coordinate, &TextureSampleProj_Texture3D_proj };

/// textureSampleProj with SampledTexture3D, Float32x3, Float32
Variable SampledTextureSampleProj_Texture3D_texture;
inline constexpr std::array SampledTextureSampleProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProj_Texture3D_coordinate;
Variable SampledTextureSampleProj_Texture3D_proj;
Function SampledTextureSampleProj_Texture3D;
inline constexpr std::array SampledTextureSampleProj_Texture3D_args = { &SampledTextureSampleProj_Texture3D_texture, &SampledTextureSampleProj_Texture3D_coordinate, &SampledTextureSampleProj_Texture3D_proj };

/// textureSampleProjOffset with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleProjOffset_Texture1D_texture;
inline constexpr std::array TextureSampleProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleProjOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture1D_coordinate;
Variable TextureSampleProjOffset_Texture1D_proj;
Variable TextureSampleProjOffset_Texture1D_offset;
Function TextureSampleProjOffset_Texture1D;
inline constexpr std::array TextureSampleProjOffset_Texture1D_args = { &TextureSampleProjOffset_Texture1D_texture, &TextureSampleProjOffset_Texture1D_sampler, &TextureSampleProjOffset_Texture1D_coordinate, &TextureSampleProjOffset_Texture1D_proj, &TextureSampleProjOffset_Texture1D_offset };

/// textureSampleProjOffset with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleProjOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjOffset_Texture1D_coordinate;
Variable SampledTextureSampleProjOffset_Texture1D_proj;
Variable SampledTextureSampleProjOffset_Texture1D_offset;
Function SampledTextureSampleProjOffset_Texture1D;
inline constexpr std::array SampledTextureSampleProjOffset_Texture1D_args = { &SampledTextureSampleProjOffset_Texture1D_texture, &SampledTextureSampleProjOffset_Texture1D_coordinate, &SampledTextureSampleProjOffset_Texture1D_proj, &SampledTextureSampleProjOffset_Texture1D_offset };

/// textureSampleProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleProjOffset_Texture2D_texture;
inline constexpr std::array TextureSampleProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleProjOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture2D_coordinate;
Variable TextureSampleProjOffset_Texture2D_proj;
Variable TextureSampleProjOffset_Texture2D_offset;
Function TextureSampleProjOffset_Texture2D;
inline constexpr std::array TextureSampleProjOffset_Texture2D_args = { &TextureSampleProjOffset_Texture2D_texture, &TextureSampleProjOffset_Texture2D_sampler, &TextureSampleProjOffset_Texture2D_coordinate, &TextureSampleProjOffset_Texture2D_proj, &TextureSampleProjOffset_Texture2D_offset };

/// textureSampleProjOffset with SampledTexture2D, Float32x2, Float32, Float32x2
Variable SampledTextureSampleProjOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjOffset_Texture2D_coordinate;
Variable SampledTextureSampleProjOffset_Texture2D_proj;
Variable SampledTextureSampleProjOffset_Texture2D_offset;
Function SampledTextureSampleProjOffset_Texture2D;
inline constexpr std::array SampledTextureSampleProjOffset_Texture2D_args = { &SampledTextureSampleProjOffset_Texture2D_texture, &SampledTextureSampleProjOffset_Texture2D_coordinate, &SampledTextureSampleProjOffset_Texture2D_proj, &SampledTextureSampleProjOffset_Texture2D_offset };

/// textureSampleProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleProjOffset_Texture3D_texture;
inline constexpr std::array TextureSampleProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleProjOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture3D_coordinate;
Variable TextureSampleProjOffset_Texture3D_proj;
Variable TextureSampleProjOffset_Texture3D_offset;
Function TextureSampleProjOffset_Texture3D;
inline constexpr std::array TextureSampleProjOffset_Texture3D_args = { &TextureSampleProjOffset_Texture3D_texture, &TextureSampleProjOffset_Texture3D_sampler, &TextureSampleProjOffset_Texture3D_coordinate, &TextureSampleProjOffset_Texture3D_proj, &TextureSampleProjOffset_Texture3D_offset };

/// textureSampleProjOffset with SampledTexture3D, Float32x3, Float32, Float32x3
Variable SampledTextureSampleProjOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjOffset_Texture3D_coordinate;
Variable SampledTextureSampleProjOffset_Texture3D_proj;
Variable SampledTextureSampleProjOffset_Texture3D_offset;
Function SampledTextureSampleProjOffset_Texture3D;
inline constexpr std::array SampledTextureSampleProjOffset_Texture3D_args = { &SampledTextureSampleProjOffset_Texture3D_texture, &SampledTextureSampleProjOffset_Texture3D_coordinate, &SampledTextureSampleProjOffset_Texture3D_proj, &SampledTextureSampleProjOffset_Texture3D_offset };

/// textureSampleCompare with Texture1D, Sampler, Float32, Float32
Variable TextureSampleCompare_Texture1D_texture;
inline constexpr std::array TextureSampleCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture1D_coordinate;
Variable TextureSampleCompare_Texture1D_compare;
Function TextureSampleCompare_Texture1D;
inline constexpr std::array TextureSampleCompare_Texture1D_args = { &TextureSampleCompare_Texture1D_texture, &TextureSampleCompare_Texture1D_sampler, &TextureSampleCompare_Texture1D_coordinate, &TextureSampleCompare_Texture1D_compare };

/// textureSampleCompare with SampledTexture1D, Float32, Float32
Variable SampledTextureSampleCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompare_Texture1D_coordinate;
Variable SampledTextureSampleCompare_Texture1D_compare;
Function SampledTextureSampleCompare_Texture1D;
inline constexpr std::array SampledTextureSampleCompare_Texture1D_args = { &SampledTextureSampleCompare_Texture1D_texture, &SampledTextureSampleCompare_Texture1D_coordinate, &SampledTextureSampleCompare_Texture1D_compare };

/// textureSampleCompare with Texture2D, Sampler, Float32x2, Float32
Variable TextureSampleCompare_Texture2D_texture;
inline constexpr std::array TextureSampleCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture2D_coordinate;
Variable TextureSampleCompare_Texture2D_compare;
Function TextureSampleCompare_Texture2D;
inline constexpr std::array TextureSampleCompare_Texture2D_args = { &TextureSampleCompare_Texture2D_texture, &TextureSampleCompare_Texture2D_sampler, &TextureSampleCompare_Texture2D_coordinate, &TextureSampleCompare_Texture2D_compare };

/// textureSampleCompare with SampledTexture2D, Float32x2, Float32
Variable SampledTextureSampleCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompare_Texture2D_coordinate;
Variable SampledTextureSampleCompare_Texture2D_compare;
Function SampledTextureSampleCompare_Texture2D;
inline constexpr std::array SampledTextureSampleCompare_Texture2D_args = { &SampledTextureSampleCompare_Texture2D_texture, &SampledTextureSampleCompare_Texture2D_coordinate, &SampledTextureSampleCompare_Texture2D_compare };

/// textureSampleCompare with Texture3D, Sampler, Float32x3, Float32
Variable TextureSampleCompare_Texture3D_texture;
inline constexpr std::array TextureSampleCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture3D_coordinate;
Variable TextureSampleCompare_Texture3D_compare;
Function TextureSampleCompare_Texture3D;
inline constexpr std::array TextureSampleCompare_Texture3D_args = { &TextureSampleCompare_Texture3D_texture, &TextureSampleCompare_Texture3D_sampler, &TextureSampleCompare_Texture3D_coordinate, &TextureSampleCompare_Texture3D_compare };

/// textureSampleCompare with SampledTexture3D, Float32x3, Float32
Variable SampledTextureSampleCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompare_Texture3D_coordinate;
Variable SampledTextureSampleCompare_Texture3D_compare;
Function SampledTextureSampleCompare_Texture3D;
inline constexpr std::array SampledTextureSampleCompare_Texture3D_args = { &SampledTextureSampleCompare_Texture3D_texture, &SampledTextureSampleCompare_Texture3D_coordinate, &SampledTextureSampleCompare_Texture3D_compare };

/// textureSampleCompare with Texture1DArray, Sampler, Float32x2, Float32
Variable TextureSampleCompare_Texture1DArray_texture;
inline constexpr std::array TextureSampleCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture1DArray_sampler;
inline constexpr std::array TextureSampleCompare_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture1DArray_coordinate;
Variable TextureSampleCompare_Texture1DArray_compare;
Function TextureSampleCompare_Texture1DArray;
inline constexpr std::array TextureSampleCompare_Texture1DArray_args = { &TextureSampleCompare_Texture1DArray_texture, &TextureSampleCompare_Texture1DArray_sampler, &TextureSampleCompare_Texture1DArray_coordinate, &TextureSampleCompare_Texture1DArray_compare };

/// textureSampleCompare with SampledTexture1DArray, Float32x2, Float32
Variable SampledTextureSampleCompare_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleCompare_Texture1DArray_compare;
Function SampledTextureSampleCompare_Texture1DArray;
inline constexpr std::array SampledTextureSampleCompare_Texture1DArray_args = { &SampledTextureSampleCompare_Texture1DArray_texture, &SampledTextureSampleCompare_Texture1DArray_coordinate, &SampledTextureSampleCompare_Texture1DArray_compare };

/// textureSampleCompare with Texture2DArray, Sampler, Float32x3, Float32
Variable TextureSampleCompare_Texture2DArray_texture;
inline constexpr std::array TextureSampleCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture2DArray_sampler;
inline constexpr std::array TextureSampleCompare_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture2DArray_coordinate;
Variable TextureSampleCompare_Texture2DArray_compare;
Function TextureSampleCompare_Texture2DArray;
inline constexpr std::array TextureSampleCompare_Texture2DArray_args = { &TextureSampleCompare_Texture2DArray_texture, &TextureSampleCompare_Texture2DArray_sampler, &TextureSampleCompare_Texture2DArray_coordinate, &TextureSampleCompare_Texture2DArray_compare };

/// textureSampleCompare with SampledTexture2DArray, Float32x3, Float32
Variable SampledTextureSampleCompare_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleCompare_Texture2DArray_compare;
Function SampledTextureSampleCompare_Texture2DArray;
inline constexpr std::array SampledTextureSampleCompare_Texture2DArray_args = { &SampledTextureSampleCompare_Texture2DArray_texture, &SampledTextureSampleCompare_Texture2DArray_coordinate, &SampledTextureSampleCompare_Texture2DArray_compare };

/// textureSampleCompareOffset with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture1D_coordinate;
Variable TextureSampleCompareOffset_Texture1D_compare;
Variable TextureSampleCompareOffset_Texture1D_offset;
Function TextureSampleCompareOffset_Texture1D;
inline constexpr std::array TextureSampleCompareOffset_Texture1D_args = { &TextureSampleCompareOffset_Texture1D_texture, &TextureSampleCompareOffset_Texture1D_sampler, &TextureSampleCompareOffset_Texture1D_coordinate, &TextureSampleCompareOffset_Texture1D_compare, &TextureSampleCompareOffset_Texture1D_offset };

/// textureSampleCompareOffset with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleCompareOffset_Texture1D_compare;
Variable SampledTextureSampleCompareOffset_Texture1D_offset;
Function SampledTextureSampleCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1D_args = { &SampledTextureSampleCompareOffset_Texture1D_texture, &SampledTextureSampleCompareOffset_Texture1D_coordinate, &SampledTextureSampleCompareOffset_Texture1D_compare, &SampledTextureSampleCompareOffset_Texture1D_offset };

/// textureSampleCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture2D_coordinate;
Variable TextureSampleCompareOffset_Texture2D_compare;
Variable TextureSampleCompareOffset_Texture2D_offset;
Function TextureSampleCompareOffset_Texture2D;
inline constexpr std::array TextureSampleCompareOffset_Texture2D_args = { &TextureSampleCompareOffset_Texture2D_texture, &TextureSampleCompareOffset_Texture2D_sampler, &TextureSampleCompareOffset_Texture2D_coordinate, &TextureSampleCompareOffset_Texture2D_compare, &TextureSampleCompareOffset_Texture2D_offset };

/// textureSampleCompareOffset with SampledTexture2D, Float32x2, Float32, Float32x2
Variable SampledTextureSampleCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleCompareOffset_Texture2D_compare;
Variable SampledTextureSampleCompareOffset_Texture2D_offset;
Function SampledTextureSampleCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2D_args = { &SampledTextureSampleCompareOffset_Texture2D_texture, &SampledTextureSampleCompareOffset_Texture2D_coordinate, &SampledTextureSampleCompareOffset_Texture2D_compare, &SampledTextureSampleCompareOffset_Texture2D_offset };

/// textureSampleCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture3D_coordinate;
Variable TextureSampleCompareOffset_Texture3D_compare;
Variable TextureSampleCompareOffset_Texture3D_offset;
Function TextureSampleCompareOffset_Texture3D;
inline constexpr std::array TextureSampleCompareOffset_Texture3D_args = { &TextureSampleCompareOffset_Texture3D_texture, &TextureSampleCompareOffset_Texture3D_sampler, &TextureSampleCompareOffset_Texture3D_coordinate, &TextureSampleCompareOffset_Texture3D_compare, &TextureSampleCompareOffset_Texture3D_offset };

/// textureSampleCompareOffset with SampledTexture3D, Float32x3, Float32, Float32x3
Variable SampledTextureSampleCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleCompareOffset_Texture3D_compare;
Variable SampledTextureSampleCompareOffset_Texture3D_offset;
Function SampledTextureSampleCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture3D_args = { &SampledTextureSampleCompareOffset_Texture3D_texture, &SampledTextureSampleCompareOffset_Texture3D_coordinate, &SampledTextureSampleCompareOffset_Texture3D_compare, &SampledTextureSampleCompareOffset_Texture3D_offset };

/// textureSampleCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleCompareOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture1DArray_coordinate;
Variable TextureSampleCompareOffset_Texture1DArray_compare;
Variable TextureSampleCompareOffset_Texture1DArray_offset;
Function TextureSampleCompareOffset_Texture1DArray;
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_args = { &TextureSampleCompareOffset_Texture1DArray_texture, &TextureSampleCompareOffset_Texture1DArray_sampler, &TextureSampleCompareOffset_Texture1DArray_coordinate, &TextureSampleCompareOffset_Texture1DArray_compare, &TextureSampleCompareOffset_Texture1DArray_offset };

/// textureSampleCompareOffset with SampledTexture1DArray, Float32x2, Float32, Float32x2
Variable SampledTextureSampleCompareOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompareOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleCompareOffset_Texture1DArray_compare;
Variable SampledTextureSampleCompareOffset_Texture1DArray_offset;
Function SampledTextureSampleCompareOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1DArray_args = { &SampledTextureSampleCompareOffset_Texture1DArray_texture, &SampledTextureSampleCompareOffset_Texture1DArray_coordinate, &SampledTextureSampleCompareOffset_Texture1DArray_compare, &SampledTextureSampleCompareOffset_Texture1DArray_offset };

/// textureSampleCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleCompareOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture2DArray_coordinate;
Variable TextureSampleCompareOffset_Texture2DArray_compare;
Variable TextureSampleCompareOffset_Texture2DArray_offset;
Function TextureSampleCompareOffset_Texture2DArray;
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_args = { &TextureSampleCompareOffset_Texture2DArray_texture, &TextureSampleCompareOffset_Texture2DArray_sampler, &TextureSampleCompareOffset_Texture2DArray_coordinate, &TextureSampleCompareOffset_Texture2DArray_compare, &TextureSampleCompareOffset_Texture2DArray_offset };

/// textureSampleCompareOffset with SampledTexture2DArray, Float32x3, Float32, Float32x3
Variable SampledTextureSampleCompareOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompareOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleCompareOffset_Texture2DArray_compare;
Variable SampledTextureSampleCompareOffset_Texture2DArray_offset;
Function SampledTextureSampleCompareOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2DArray_args = { &SampledTextureSampleCompareOffset_Texture2DArray_texture, &SampledTextureSampleCompareOffset_Texture2DArray_coordinate, &SampledTextureSampleCompareOffset_Texture2DArray_compare, &SampledTextureSampleCompareOffset_Texture2DArray_offset };

/// textureSampleProjCompare with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleProjCompare_Texture1D_texture;
inline constexpr std::array TextureSampleProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleProjCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture1D_coordinate;
Variable TextureSampleProjCompare_Texture1D_proj;
Variable TextureSampleProjCompare_Texture1D_compare;
Function TextureSampleProjCompare_Texture1D;
inline constexpr std::array TextureSampleProjCompare_Texture1D_args = { &TextureSampleProjCompare_Texture1D_texture, &TextureSampleProjCompare_Texture1D_sampler, &TextureSampleProjCompare_Texture1D_coordinate, &TextureSampleProjCompare_Texture1D_proj, &TextureSampleProjCompare_Texture1D_compare };

/// textureSampleProjCompare with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleProjCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleProjCompare_Texture1D_proj;
Variable SampledTextureSampleProjCompare_Texture1D_compare;
Function SampledTextureSampleProjCompare_Texture1D;
inline constexpr std::array SampledTextureSampleProjCompare_Texture1D_args = { &SampledTextureSampleProjCompare_Texture1D_texture, &SampledTextureSampleProjCompare_Texture1D_coordinate, &SampledTextureSampleProjCompare_Texture1D_proj, &SampledTextureSampleProjCompare_Texture1D_compare };

/// textureSampleProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleProjCompare_Texture2D_texture;
inline constexpr std::array TextureSampleProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleProjCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture2D_coordinate;
Variable TextureSampleProjCompare_Texture2D_proj;
Variable TextureSampleProjCompare_Texture2D_compare;
Function TextureSampleProjCompare_Texture2D;
inline constexpr std::array TextureSampleProjCompare_Texture2D_args = { &TextureSampleProjCompare_Texture2D_texture, &TextureSampleProjCompare_Texture2D_sampler, &TextureSampleProjCompare_Texture2D_coordinate, &TextureSampleProjCompare_Texture2D_proj, &TextureSampleProjCompare_Texture2D_compare };

/// textureSampleProjCompare with SampledTexture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleProjCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleProjCompare_Texture2D_proj;
Variable SampledTextureSampleProjCompare_Texture2D_compare;
Function SampledTextureSampleProjCompare_Texture2D;
inline constexpr std::array SampledTextureSampleProjCompare_Texture2D_args = { &SampledTextureSampleProjCompare_Texture2D_texture, &SampledTextureSampleProjCompare_Texture2D_coordinate, &SampledTextureSampleProjCompare_Texture2D_proj, &SampledTextureSampleProjCompare_Texture2D_compare };

/// textureSampleProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32
Variable TextureSampleProjCompare_Texture3D_texture;
inline constexpr std::array TextureSampleProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleProjCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture3D_coordinate;
Variable TextureSampleProjCompare_Texture3D_proj;
Variable TextureSampleProjCompare_Texture3D_compare;
Function TextureSampleProjCompare_Texture3D;
inline constexpr std::array TextureSampleProjCompare_Texture3D_args = { &TextureSampleProjCompare_Texture3D_texture, &TextureSampleProjCompare_Texture3D_sampler, &TextureSampleProjCompare_Texture3D_coordinate, &TextureSampleProjCompare_Texture3D_proj, &TextureSampleProjCompare_Texture3D_compare };

/// textureSampleProjCompare with SampledTexture3D, Float32x3, Float32, Float32
Variable SampledTextureSampleProjCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleProjCompare_Texture3D_proj;
Variable SampledTextureSampleProjCompare_Texture3D_compare;
Function SampledTextureSampleProjCompare_Texture3D;
inline constexpr std::array SampledTextureSampleProjCompare_Texture3D_args = { &SampledTextureSampleProjCompare_Texture3D_texture, &SampledTextureSampleProjCompare_Texture3D_coordinate, &SampledTextureSampleProjCompare_Texture3D_proj, &SampledTextureSampleProjCompare_Texture3D_compare };

/// textureSampleProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleProjCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleProjCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleProjCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompareOffset_Texture1D_coordinate;
Variable TextureSampleProjCompareOffset_Texture1D_proj;
Variable TextureSampleProjCompareOffset_Texture1D_compare;
Variable TextureSampleProjCompareOffset_Texture1D_offset;
Function TextureSampleProjCompareOffset_Texture1D;
inline constexpr std::array TextureSampleProjCompareOffset_Texture1D_args = { &TextureSampleProjCompareOffset_Texture1D_texture, &TextureSampleProjCompareOffset_Texture1D_sampler, &TextureSampleProjCompareOffset_Texture1D_coordinate, &TextureSampleProjCompareOffset_Texture1D_proj, &TextureSampleProjCompareOffset_Texture1D_compare, &TextureSampleProjCompareOffset_Texture1D_offset };

/// textureSampleProjCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleProjCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleProjCompareOffset_Texture1D_proj;
Variable SampledTextureSampleProjCompareOffset_Texture1D_compare;
Variable SampledTextureSampleProjCompareOffset_Texture1D_offset;
Function SampledTextureSampleProjCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture1D_args = { &SampledTextureSampleProjCompareOffset_Texture1D_texture, &SampledTextureSampleProjCompareOffset_Texture1D_coordinate, &SampledTextureSampleProjCompareOffset_Texture1D_proj, &SampledTextureSampleProjCompareOffset_Texture1D_compare, &SampledTextureSampleProjCompareOffset_Texture1D_offset };

/// textureSampleProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleProjCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleProjCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleProjCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompareOffset_Texture2D_coordinate;
Variable TextureSampleProjCompareOffset_Texture2D_proj;
Variable TextureSampleProjCompareOffset_Texture2D_compare;
Variable TextureSampleProjCompareOffset_Texture2D_offset;
Function TextureSampleProjCompareOffset_Texture2D;
inline constexpr std::array TextureSampleProjCompareOffset_Texture2D_args = { &TextureSampleProjCompareOffset_Texture2D_texture, &TextureSampleProjCompareOffset_Texture2D_sampler, &TextureSampleProjCompareOffset_Texture2D_coordinate, &TextureSampleProjCompareOffset_Texture2D_proj, &TextureSampleProjCompareOffset_Texture2D_compare, &TextureSampleProjCompareOffset_Texture2D_offset };

/// textureSampleProjCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleProjCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleProjCompareOffset_Texture2D_proj;
Variable SampledTextureSampleProjCompareOffset_Texture2D_compare;
Variable SampledTextureSampleProjCompareOffset_Texture2D_offset;
Function SampledTextureSampleProjCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture2D_args = { &SampledTextureSampleProjCompareOffset_Texture2D_texture, &SampledTextureSampleProjCompareOffset_Texture2D_coordinate, &SampledTextureSampleProjCompareOffset_Texture2D_proj, &SampledTextureSampleProjCompareOffset_Texture2D_compare, &SampledTextureSampleProjCompareOffset_Texture2D_offset };

/// textureSampleProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleProjCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleProjCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleProjCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompareOffset_Texture3D_coordinate;
Variable TextureSampleProjCompareOffset_Texture3D_proj;
Variable TextureSampleProjCompareOffset_Texture3D_compare;
Variable TextureSampleProjCompareOffset_Texture3D_offset;
Function TextureSampleProjCompareOffset_Texture3D;
inline constexpr std::array TextureSampleProjCompareOffset_Texture3D_args = { &TextureSampleProjCompareOffset_Texture3D_texture, &TextureSampleProjCompareOffset_Texture3D_sampler, &TextureSampleProjCompareOffset_Texture3D_coordinate, &TextureSampleProjCompareOffset_Texture3D_proj, &TextureSampleProjCompareOffset_Texture3D_compare, &TextureSampleProjCompareOffset_Texture3D_offset };

/// textureSampleProjCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleProjCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleProjCompareOffset_Texture3D_proj;
Variable SampledTextureSampleProjCompareOffset_Texture3D_compare;
Variable SampledTextureSampleProjCompareOffset_Texture3D_offset;
Function SampledTextureSampleProjCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture3D_args = { &SampledTextureSampleProjCompareOffset_Texture3D_texture, &SampledTextureSampleProjCompareOffset_Texture3D_coordinate, &SampledTextureSampleProjCompareOffset_Texture3D_proj, &SampledTextureSampleProjCompareOffset_Texture3D_compare, &SampledTextureSampleProjCompareOffset_Texture3D_offset };

/// textureSampleLod with Texture1D, Sampler, Float32, Float32
Variable TextureSampleLod_Texture1D_texture;
inline constexpr std::array TextureSampleLod_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture1D_sampler;
inline constexpr std::array TextureSampleLod_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture1D_coordinate;
Variable TextureSampleLod_Texture1D_lod;
Function TextureSampleLod_Texture1D;
inline constexpr std::array TextureSampleLod_Texture1D_args = { &TextureSampleLod_Texture1D_texture, &TextureSampleLod_Texture1D_sampler, &TextureSampleLod_Texture1D_coordinate, &TextureSampleLod_Texture1D_lod };

/// textureSampleLod with SampledTexture1D, Float32, Float32
Variable SampledTextureSampleLod_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLod_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLod_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLod_Texture1D_coordinate;
Variable SampledTextureSampleLod_Texture1D_lod;
Function SampledTextureSampleLod_Texture1D;
inline constexpr std::array SampledTextureSampleLod_Texture1D_args = { &SampledTextureSampleLod_Texture1D_texture, &SampledTextureSampleLod_Texture1D_coordinate, &SampledTextureSampleLod_Texture1D_lod };

/// textureSampleLod with Texture2D, Sampler, Float32x2, Float32
Variable TextureSampleLod_Texture2D_texture;
inline constexpr std::array TextureSampleLod_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture2D_sampler;
inline constexpr std::array TextureSampleLod_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture2D_coordinate;
Variable TextureSampleLod_Texture2D_lod;
Function TextureSampleLod_Texture2D;
inline constexpr std::array TextureSampleLod_Texture2D_args = { &TextureSampleLod_Texture2D_texture, &TextureSampleLod_Texture2D_sampler, &TextureSampleLod_Texture2D_coordinate, &TextureSampleLod_Texture2D_lod };

/// textureSampleLod with SampledTexture2D, Float32x2, Float32
Variable SampledTextureSampleLod_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLod_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLod_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLod_Texture2D_coordinate;
Variable SampledTextureSampleLod_Texture2D_lod;
Function SampledTextureSampleLod_Texture2D;
inline constexpr std::array SampledTextureSampleLod_Texture2D_args = { &SampledTextureSampleLod_Texture2D_texture, &SampledTextureSampleLod_Texture2D_coordinate, &SampledTextureSampleLod_Texture2D_lod };

/// textureSampleLod with Texture3D, Sampler, Float32x3, Float32
Variable TextureSampleLod_Texture3D_texture;
inline constexpr std::array TextureSampleLod_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture3D_sampler;
inline constexpr std::array TextureSampleLod_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture3D_coordinate;
Variable TextureSampleLod_Texture3D_lod;
Function TextureSampleLod_Texture3D;
inline constexpr std::array TextureSampleLod_Texture3D_args = { &TextureSampleLod_Texture3D_texture, &TextureSampleLod_Texture3D_sampler, &TextureSampleLod_Texture3D_coordinate, &TextureSampleLod_Texture3D_lod };

/// textureSampleLod with SampledTexture3D, Float32x3, Float32
Variable SampledTextureSampleLod_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLod_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLod_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLod_Texture3D_coordinate;
Variable SampledTextureSampleLod_Texture3D_lod;
Function SampledTextureSampleLod_Texture3D;
inline constexpr std::array SampledTextureSampleLod_Texture3D_args = { &SampledTextureSampleLod_Texture3D_texture, &SampledTextureSampleLod_Texture3D_coordinate, &SampledTextureSampleLod_Texture3D_lod };

/// textureSampleLod with TextureCube, Sampler, Float32x3, Float32
Variable TextureSampleLod_TextureCube_texture;
inline constexpr std::array TextureSampleLod_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_TextureCube_sampler;
inline constexpr std::array TextureSampleLod_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_TextureCube_coordinate;
Variable TextureSampleLod_TextureCube_lod;
Function TextureSampleLod_TextureCube;
inline constexpr std::array TextureSampleLod_TextureCube_args = { &TextureSampleLod_TextureCube_texture, &TextureSampleLod_TextureCube_sampler, &TextureSampleLod_TextureCube_coordinate, &TextureSampleLod_TextureCube_lod };

/// textureSampleLod with SampledTextureCube, Float32x3, Float32
Variable SampledTextureSampleLod_TextureCube_texture;
inline constexpr std::array SampledTextureSampleLod_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLod_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLod_TextureCube_coordinate;
Variable SampledTextureSampleLod_TextureCube_lod;
Function SampledTextureSampleLod_TextureCube;
inline constexpr std::array SampledTextureSampleLod_TextureCube_args = { &SampledTextureSampleLod_TextureCube_texture, &SampledTextureSampleLod_TextureCube_coordinate, &SampledTextureSampleLod_TextureCube_lod };

/// textureSampleLod with Texture1DArray, Sampler, Float32x2, Float32
Variable TextureSampleLod_Texture1DArray_texture;
inline constexpr std::array TextureSampleLod_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture1DArray_sampler;
inline constexpr std::array TextureSampleLod_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture1DArray_coordinate;
Variable TextureSampleLod_Texture1DArray_lod;
Function TextureSampleLod_Texture1DArray;
inline constexpr std::array TextureSampleLod_Texture1DArray_args = { &TextureSampleLod_Texture1DArray_texture, &TextureSampleLod_Texture1DArray_sampler, &TextureSampleLod_Texture1DArray_coordinate, &TextureSampleLod_Texture1DArray_lod };

/// textureSampleLod with SampledTexture1DArray, Float32x2, Float32
Variable SampledTextureSampleLod_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleLod_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLod_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLod_Texture1DArray_coordinate;
Variable SampledTextureSampleLod_Texture1DArray_lod;
Function SampledTextureSampleLod_Texture1DArray;
inline constexpr std::array SampledTextureSampleLod_Texture1DArray_args = { &SampledTextureSampleLod_Texture1DArray_texture, &SampledTextureSampleLod_Texture1DArray_coordinate, &SampledTextureSampleLod_Texture1DArray_lod };

/// textureSampleLod with Texture2DArray, Sampler, Float32x3, Float32
Variable TextureSampleLod_Texture2DArray_texture;
inline constexpr std::array TextureSampleLod_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture2DArray_sampler;
inline constexpr std::array TextureSampleLod_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture2DArray_coordinate;
Variable TextureSampleLod_Texture2DArray_lod;
Function TextureSampleLod_Texture2DArray;
inline constexpr std::array TextureSampleLod_Texture2DArray_args = { &TextureSampleLod_Texture2DArray_texture, &TextureSampleLod_Texture2DArray_sampler, &TextureSampleLod_Texture2DArray_coordinate, &TextureSampleLod_Texture2DArray_lod };

/// textureSampleLod with SampledTexture2DArray, Float32x3, Float32
Variable SampledTextureSampleLod_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleLod_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLod_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLod_Texture2DArray_coordinate;
Variable SampledTextureSampleLod_Texture2DArray_lod;
Function SampledTextureSampleLod_Texture2DArray;
inline constexpr std::array SampledTextureSampleLod_Texture2DArray_args = { &SampledTextureSampleLod_Texture2DArray_texture, &SampledTextureSampleLod_Texture2DArray_coordinate, &SampledTextureSampleLod_Texture2DArray_lod };

/// textureSampleLod with TextureCubeArray, Sampler, Float32x4, Float32
Variable TextureSampleLod_TextureCubeArray_texture;
inline constexpr std::array TextureSampleLod_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_TextureCubeArray_sampler;
inline constexpr std::array TextureSampleLod_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_TextureCubeArray_coordinate;
Variable TextureSampleLod_TextureCubeArray_lod;
Function TextureSampleLod_TextureCubeArray;
inline constexpr std::array TextureSampleLod_TextureCubeArray_args = { &TextureSampleLod_TextureCubeArray_texture, &TextureSampleLod_TextureCubeArray_sampler, &TextureSampleLod_TextureCubeArray_coordinate, &TextureSampleLod_TextureCubeArray_lod };

/// textureSampleLod with SampledTextureCubeArray, Float32x4, Float32
Variable SampledTextureSampleLod_TextureCubeArray_texture;
inline constexpr std::array SampledTextureSampleLod_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLod_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLod_TextureCubeArray_coordinate;
Variable SampledTextureSampleLod_TextureCubeArray_lod;
Function SampledTextureSampleLod_TextureCubeArray;
inline constexpr std::array SampledTextureSampleLod_TextureCubeArray_args = { &SampledTextureSampleLod_TextureCubeArray_texture, &SampledTextureSampleLod_TextureCubeArray_coordinate, &SampledTextureSampleLod_TextureCubeArray_lod };

/// textureSampleLodOffset with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleLodOffset_Texture1D_texture;
inline constexpr std::array TextureSampleLodOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleLodOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture1D_coordinate;
Variable TextureSampleLodOffset_Texture1D_lod;
Variable TextureSampleLodOffset_Texture1D_offset;
Function TextureSampleLodOffset_Texture1D;
inline constexpr std::array TextureSampleLodOffset_Texture1D_args = { &TextureSampleLodOffset_Texture1D_texture, &TextureSampleLodOffset_Texture1D_sampler, &TextureSampleLodOffset_Texture1D_coordinate, &TextureSampleLodOffset_Texture1D_lod, &TextureSampleLodOffset_Texture1D_offset };

/// textureSampleLodOffset with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleLodOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLodOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodOffset_Texture1D_coordinate;
Variable SampledTextureSampleLodOffset_Texture1D_lod;
Variable SampledTextureSampleLodOffset_Texture1D_offset;
Function SampledTextureSampleLodOffset_Texture1D;
inline constexpr std::array SampledTextureSampleLodOffset_Texture1D_args = { &SampledTextureSampleLodOffset_Texture1D_texture, &SampledTextureSampleLodOffset_Texture1D_coordinate, &SampledTextureSampleLodOffset_Texture1D_lod, &SampledTextureSampleLodOffset_Texture1D_offset };

/// textureSampleLodOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleLodOffset_Texture2D_texture;
inline constexpr std::array TextureSampleLodOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleLodOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture2D_coordinate;
Variable TextureSampleLodOffset_Texture2D_lod;
Variable TextureSampleLodOffset_Texture2D_offset;
Function TextureSampleLodOffset_Texture2D;
inline constexpr std::array TextureSampleLodOffset_Texture2D_args = { &TextureSampleLodOffset_Texture2D_texture, &TextureSampleLodOffset_Texture2D_sampler, &TextureSampleLodOffset_Texture2D_coordinate, &TextureSampleLodOffset_Texture2D_lod, &TextureSampleLodOffset_Texture2D_offset };

/// textureSampleLodOffset with SampledTexture2D, Float32x2, Float32, Float32x2
Variable SampledTextureSampleLodOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLodOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodOffset_Texture2D_coordinate;
Variable SampledTextureSampleLodOffset_Texture2D_lod;
Variable SampledTextureSampleLodOffset_Texture2D_offset;
Function SampledTextureSampleLodOffset_Texture2D;
inline constexpr std::array SampledTextureSampleLodOffset_Texture2D_args = { &SampledTextureSampleLodOffset_Texture2D_texture, &SampledTextureSampleLodOffset_Texture2D_coordinate, &SampledTextureSampleLodOffset_Texture2D_lod, &SampledTextureSampleLodOffset_Texture2D_offset };

/// textureSampleLodOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleLodOffset_Texture3D_texture;
inline constexpr std::array TextureSampleLodOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleLodOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture3D_coordinate;
Variable TextureSampleLodOffset_Texture3D_lod;
Variable TextureSampleLodOffset_Texture3D_offset;
Function TextureSampleLodOffset_Texture3D;
inline constexpr std::array TextureSampleLodOffset_Texture3D_args = { &TextureSampleLodOffset_Texture3D_texture, &TextureSampleLodOffset_Texture3D_sampler, &TextureSampleLodOffset_Texture3D_coordinate, &TextureSampleLodOffset_Texture3D_lod, &TextureSampleLodOffset_Texture3D_offset };

/// textureSampleLodOffset with SampledTexture3D, Float32x3, Float32, Float32x3
Variable SampledTextureSampleLodOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLodOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodOffset_Texture3D_coordinate;
Variable SampledTextureSampleLodOffset_Texture3D_lod;
Variable SampledTextureSampleLodOffset_Texture3D_offset;
Function SampledTextureSampleLodOffset_Texture3D;
inline constexpr std::array SampledTextureSampleLodOffset_Texture3D_args = { &SampledTextureSampleLodOffset_Texture3D_texture, &SampledTextureSampleLodOffset_Texture3D_coordinate, &SampledTextureSampleLodOffset_Texture3D_lod, &SampledTextureSampleLodOffset_Texture3D_offset };

/// textureSampleLodOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleLodOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleLodOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleLodOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture1DArray_coordinate;
Variable TextureSampleLodOffset_Texture1DArray_lod;
Variable TextureSampleLodOffset_Texture1DArray_offset;
Function TextureSampleLodOffset_Texture1DArray;
inline constexpr std::array TextureSampleLodOffset_Texture1DArray_args = { &TextureSampleLodOffset_Texture1DArray_texture, &TextureSampleLodOffset_Texture1DArray_sampler, &TextureSampleLodOffset_Texture1DArray_coordinate, &TextureSampleLodOffset_Texture1DArray_lod, &TextureSampleLodOffset_Texture1DArray_offset };

/// textureSampleLodOffset with SampledTexture1DArray, Float32x2, Float32, Float32x2
Variable SampledTextureSampleLodOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleLodOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleLodOffset_Texture1DArray_lod;
Variable SampledTextureSampleLodOffset_Texture1DArray_offset;
Function SampledTextureSampleLodOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleLodOffset_Texture1DArray_args = { &SampledTextureSampleLodOffset_Texture1DArray_texture, &SampledTextureSampleLodOffset_Texture1DArray_coordinate, &SampledTextureSampleLodOffset_Texture1DArray_lod, &SampledTextureSampleLodOffset_Texture1DArray_offset };

/// textureSampleLodOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleLodOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleLodOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleLodOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture2DArray_coordinate;
Variable TextureSampleLodOffset_Texture2DArray_lod;
Variable TextureSampleLodOffset_Texture2DArray_offset;
Function TextureSampleLodOffset_Texture2DArray;
inline constexpr std::array TextureSampleLodOffset_Texture2DArray_args = { &TextureSampleLodOffset_Texture2DArray_texture, &TextureSampleLodOffset_Texture2DArray_sampler, &TextureSampleLodOffset_Texture2DArray_coordinate, &TextureSampleLodOffset_Texture2DArray_lod, &TextureSampleLodOffset_Texture2DArray_offset };

/// textureSampleLodOffset with SampledTexture2DArray, Float32x3, Float32, Float32x3
Variable SampledTextureSampleLodOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleLodOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleLodOffset_Texture2DArray_lod;
Variable SampledTextureSampleLodOffset_Texture2DArray_offset;
Function SampledTextureSampleLodOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleLodOffset_Texture2DArray_args = { &SampledTextureSampleLodOffset_Texture2DArray_texture, &SampledTextureSampleLodOffset_Texture2DArray_coordinate, &SampledTextureSampleLodOffset_Texture2DArray_lod, &SampledTextureSampleLodOffset_Texture2DArray_offset };

/// textureSampleLodProj with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleLodProj_Texture1D_texture;
inline constexpr std::array TextureSampleLodProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProj_Texture1D_sampler;
inline constexpr std::array TextureSampleLodProj_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProj_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProj_Texture1D_coordinate;
Variable TextureSampleLodProj_Texture1D_lod;
Variable TextureSampleLodProj_Texture1D_proj;
Function TextureSampleLodProj_Texture1D;
inline constexpr std::array TextureSampleLodProj_Texture1D_args = { &TextureSampleLodProj_Texture1D_texture, &TextureSampleLodProj_Texture1D_sampler, &TextureSampleLodProj_Texture1D_coordinate, &TextureSampleLodProj_Texture1D_lod, &TextureSampleLodProj_Texture1D_proj };

/// textureSampleLodProj with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleLodProj_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLodProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProj_Texture1D_coordinate;
Variable SampledTextureSampleLodProj_Texture1D_lod;
Variable SampledTextureSampleLodProj_Texture1D_proj;
Function SampledTextureSampleLodProj_Texture1D;
inline constexpr std::array SampledTextureSampleLodProj_Texture1D_args = { &SampledTextureSampleLodProj_Texture1D_texture, &SampledTextureSampleLodProj_Texture1D_coordinate, &SampledTextureSampleLodProj_Texture1D_lod, &SampledTextureSampleLodProj_Texture1D_proj };

/// textureSampleLodProj with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleLodProj_Texture2D_texture;
inline constexpr std::array TextureSampleLodProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProj_Texture2D_sampler;
inline constexpr std::array TextureSampleLodProj_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProj_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProj_Texture2D_coordinate;
Variable TextureSampleLodProj_Texture2D_lod;
Variable TextureSampleLodProj_Texture2D_proj;
Function TextureSampleLodProj_Texture2D;
inline constexpr std::array TextureSampleLodProj_Texture2D_args = { &TextureSampleLodProj_Texture2D_texture, &TextureSampleLodProj_Texture2D_sampler, &TextureSampleLodProj_Texture2D_coordinate, &TextureSampleLodProj_Texture2D_lod, &TextureSampleLodProj_Texture2D_proj };

/// textureSampleLodProj with SampledTexture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleLodProj_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLodProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProj_Texture2D_coordinate;
Variable SampledTextureSampleLodProj_Texture2D_lod;
Variable SampledTextureSampleLodProj_Texture2D_proj;
Function SampledTextureSampleLodProj_Texture2D;
inline constexpr std::array SampledTextureSampleLodProj_Texture2D_args = { &SampledTextureSampleLodProj_Texture2D_texture, &SampledTextureSampleLodProj_Texture2D_coordinate, &SampledTextureSampleLodProj_Texture2D_lod, &SampledTextureSampleLodProj_Texture2D_proj };

/// textureSampleLodProj with Texture3D, Sampler, Float32x3, Float32, Float32
Variable TextureSampleLodProj_Texture3D_texture;
inline constexpr std::array TextureSampleLodProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProj_Texture3D_sampler;
inline constexpr std::array TextureSampleLodProj_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProj_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProj_Texture3D_coordinate;
Variable TextureSampleLodProj_Texture3D_lod;
Variable TextureSampleLodProj_Texture3D_proj;
Function TextureSampleLodProj_Texture3D;
inline constexpr std::array TextureSampleLodProj_Texture3D_args = { &TextureSampleLodProj_Texture3D_texture, &TextureSampleLodProj_Texture3D_sampler, &TextureSampleLodProj_Texture3D_coordinate, &TextureSampleLodProj_Texture3D_lod, &TextureSampleLodProj_Texture3D_proj };

/// textureSampleLodProj with SampledTexture3D, Float32x3, Float32, Float32
Variable SampledTextureSampleLodProj_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLodProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProj_Texture3D_coordinate;
Variable SampledTextureSampleLodProj_Texture3D_lod;
Variable SampledTextureSampleLodProj_Texture3D_proj;
Function SampledTextureSampleLodProj_Texture3D;
inline constexpr std::array SampledTextureSampleLodProj_Texture3D_args = { &SampledTextureSampleLodProj_Texture3D_texture, &SampledTextureSampleLodProj_Texture3D_coordinate, &SampledTextureSampleLodProj_Texture3D_lod, &SampledTextureSampleLodProj_Texture3D_proj };

/// textureSampleLodProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleLodProjOffset_Texture1D_texture;
inline constexpr std::array TextureSampleLodProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleLodProjOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjOffset_Texture1D_coordinate;
Variable TextureSampleLodProjOffset_Texture1D_lod;
Variable TextureSampleLodProjOffset_Texture1D_proj;
Variable TextureSampleLodProjOffset_Texture1D_offset;
Function TextureSampleLodProjOffset_Texture1D;
inline constexpr std::array TextureSampleLodProjOffset_Texture1D_args = { &TextureSampleLodProjOffset_Texture1D_texture, &TextureSampleLodProjOffset_Texture1D_sampler, &TextureSampleLodProjOffset_Texture1D_coordinate, &TextureSampleLodProjOffset_Texture1D_lod, &TextureSampleLodProjOffset_Texture1D_proj, &TextureSampleLodProjOffset_Texture1D_offset };

/// textureSampleLodProjOffset with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleLodProjOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjOffset_Texture1D_coordinate;
Variable SampledTextureSampleLodProjOffset_Texture1D_lod;
Variable SampledTextureSampleLodProjOffset_Texture1D_proj;
Variable SampledTextureSampleLodProjOffset_Texture1D_offset;
Function SampledTextureSampleLodProjOffset_Texture1D;
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture1D_args = { &SampledTextureSampleLodProjOffset_Texture1D_texture, &SampledTextureSampleLodProjOffset_Texture1D_coordinate, &SampledTextureSampleLodProjOffset_Texture1D_lod, &SampledTextureSampleLodProjOffset_Texture1D_proj, &SampledTextureSampleLodProjOffset_Texture1D_offset };

/// textureSampleLodProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleLodProjOffset_Texture2D_texture;
inline constexpr std::array TextureSampleLodProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleLodProjOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjOffset_Texture2D_coordinate;
Variable TextureSampleLodProjOffset_Texture2D_lod;
Variable TextureSampleLodProjOffset_Texture2D_proj;
Variable TextureSampleLodProjOffset_Texture2D_offset;
Function TextureSampleLodProjOffset_Texture2D;
inline constexpr std::array TextureSampleLodProjOffset_Texture2D_args = { &TextureSampleLodProjOffset_Texture2D_texture, &TextureSampleLodProjOffset_Texture2D_sampler, &TextureSampleLodProjOffset_Texture2D_coordinate, &TextureSampleLodProjOffset_Texture2D_lod, &TextureSampleLodProjOffset_Texture2D_proj, &TextureSampleLodProjOffset_Texture2D_offset };

/// textureSampleLodProjOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleLodProjOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjOffset_Texture2D_coordinate;
Variable SampledTextureSampleLodProjOffset_Texture2D_lod;
Variable SampledTextureSampleLodProjOffset_Texture2D_proj;
Variable SampledTextureSampleLodProjOffset_Texture2D_offset;
Function SampledTextureSampleLodProjOffset_Texture2D;
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture2D_args = { &SampledTextureSampleLodProjOffset_Texture2D_texture, &SampledTextureSampleLodProjOffset_Texture2D_coordinate, &SampledTextureSampleLodProjOffset_Texture2D_lod, &SampledTextureSampleLodProjOffset_Texture2D_proj, &SampledTextureSampleLodProjOffset_Texture2D_offset };

/// textureSampleLodProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleLodProjOffset_Texture3D_texture;
inline constexpr std::array TextureSampleLodProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleLodProjOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjOffset_Texture3D_coordinate;
Variable TextureSampleLodProjOffset_Texture3D_lod;
Variable TextureSampleLodProjOffset_Texture3D_proj;
Variable TextureSampleLodProjOffset_Texture3D_offset;
Function TextureSampleLodProjOffset_Texture3D;
inline constexpr std::array TextureSampleLodProjOffset_Texture3D_args = { &TextureSampleLodProjOffset_Texture3D_texture, &TextureSampleLodProjOffset_Texture3D_sampler, &TextureSampleLodProjOffset_Texture3D_coordinate, &TextureSampleLodProjOffset_Texture3D_lod, &TextureSampleLodProjOffset_Texture3D_proj, &TextureSampleLodProjOffset_Texture3D_offset };

/// textureSampleLodProjOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleLodProjOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjOffset_Texture3D_coordinate;
Variable SampledTextureSampleLodProjOffset_Texture3D_lod;
Variable SampledTextureSampleLodProjOffset_Texture3D_proj;
Variable SampledTextureSampleLodProjOffset_Texture3D_offset;
Function SampledTextureSampleLodProjOffset_Texture3D;
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture3D_args = { &SampledTextureSampleLodProjOffset_Texture3D_texture, &SampledTextureSampleLodProjOffset_Texture3D_coordinate, &SampledTextureSampleLodProjOffset_Texture3D_lod, &SampledTextureSampleLodProjOffset_Texture3D_proj, &SampledTextureSampleLodProjOffset_Texture3D_offset };

/// textureSampleLodCompare with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleLodCompare_Texture1D_texture;
inline constexpr std::array TextureSampleLodCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleLodCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture1D_coordinate;
Variable TextureSampleLodCompare_Texture1D_lod;
Variable TextureSampleLodCompare_Texture1D_compare;
Function TextureSampleLodCompare_Texture1D;
inline constexpr std::array TextureSampleLodCompare_Texture1D_args = { &TextureSampleLodCompare_Texture1D_texture, &TextureSampleLodCompare_Texture1D_sampler, &TextureSampleLodCompare_Texture1D_coordinate, &TextureSampleLodCompare_Texture1D_lod, &TextureSampleLodCompare_Texture1D_compare };

/// textureSampleLodCompare with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleLodCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLodCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompare_Texture1D_coordinate;
Variable SampledTextureSampleLodCompare_Texture1D_lod;
Variable SampledTextureSampleLodCompare_Texture1D_compare;
Function SampledTextureSampleLodCompare_Texture1D;
inline constexpr std::array SampledTextureSampleLodCompare_Texture1D_args = { &SampledTextureSampleLodCompare_Texture1D_texture, &SampledTextureSampleLodCompare_Texture1D_coordinate, &SampledTextureSampleLodCompare_Texture1D_lod, &SampledTextureSampleLodCompare_Texture1D_compare };

/// textureSampleLodCompare with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleLodCompare_Texture2D_texture;
inline constexpr std::array TextureSampleLodCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleLodCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture2D_coordinate;
Variable TextureSampleLodCompare_Texture2D_lod;
Variable TextureSampleLodCompare_Texture2D_compare;
Function TextureSampleLodCompare_Texture2D;
inline constexpr std::array TextureSampleLodCompare_Texture2D_args = { &TextureSampleLodCompare_Texture2D_texture, &TextureSampleLodCompare_Texture2D_sampler, &TextureSampleLodCompare_Texture2D_coordinate, &TextureSampleLodCompare_Texture2D_lod, &TextureSampleLodCompare_Texture2D_compare };

/// textureSampleLodCompare with SampledTexture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleLodCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLodCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompare_Texture2D_coordinate;
Variable SampledTextureSampleLodCompare_Texture2D_lod;
Variable SampledTextureSampleLodCompare_Texture2D_compare;
Function SampledTextureSampleLodCompare_Texture2D;
inline constexpr std::array SampledTextureSampleLodCompare_Texture2D_args = { &SampledTextureSampleLodCompare_Texture2D_texture, &SampledTextureSampleLodCompare_Texture2D_coordinate, &SampledTextureSampleLodCompare_Texture2D_lod, &SampledTextureSampleLodCompare_Texture2D_compare };

/// textureSampleLodCompare with Texture3D, Sampler, Float32x3, Float32, Float32
Variable TextureSampleLodCompare_Texture3D_texture;
inline constexpr std::array TextureSampleLodCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleLodCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture3D_coordinate;
Variable TextureSampleLodCompare_Texture3D_lod;
Variable TextureSampleLodCompare_Texture3D_compare;
Function TextureSampleLodCompare_Texture3D;
inline constexpr std::array TextureSampleLodCompare_Texture3D_args = { &TextureSampleLodCompare_Texture3D_texture, &TextureSampleLodCompare_Texture3D_sampler, &TextureSampleLodCompare_Texture3D_coordinate, &TextureSampleLodCompare_Texture3D_lod, &TextureSampleLodCompare_Texture3D_compare };

/// textureSampleLodCompare with SampledTexture3D, Float32x3, Float32, Float32
Variable SampledTextureSampleLodCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLodCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompare_Texture3D_coordinate;
Variable SampledTextureSampleLodCompare_Texture3D_lod;
Variable SampledTextureSampleLodCompare_Texture3D_compare;
Function SampledTextureSampleLodCompare_Texture3D;
inline constexpr std::array SampledTextureSampleLodCompare_Texture3D_args = { &SampledTextureSampleLodCompare_Texture3D_texture, &SampledTextureSampleLodCompare_Texture3D_coordinate, &SampledTextureSampleLodCompare_Texture3D_lod, &SampledTextureSampleLodCompare_Texture3D_compare };

/// textureSampleLodCompare with Texture1DArray, Sampler, Float32x2, Float32, Float32
Variable TextureSampleLodCompare_Texture1DArray_texture;
inline constexpr std::array TextureSampleLodCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture1DArray_sampler;
inline constexpr std::array TextureSampleLodCompare_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture1DArray_coordinate;
Variable TextureSampleLodCompare_Texture1DArray_lod;
Variable TextureSampleLodCompare_Texture1DArray_compare;
Function TextureSampleLodCompare_Texture1DArray;
inline constexpr std::array TextureSampleLodCompare_Texture1DArray_args = { &TextureSampleLodCompare_Texture1DArray_texture, &TextureSampleLodCompare_Texture1DArray_sampler, &TextureSampleLodCompare_Texture1DArray_coordinate, &TextureSampleLodCompare_Texture1DArray_lod, &TextureSampleLodCompare_Texture1DArray_compare };

/// textureSampleLodCompare with SampledTexture1DArray, Float32x2, Float32, Float32
Variable SampledTextureSampleLodCompare_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleLodCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleLodCompare_Texture1DArray_lod;
Variable SampledTextureSampleLodCompare_Texture1DArray_compare;
Function SampledTextureSampleLodCompare_Texture1DArray;
inline constexpr std::array SampledTextureSampleLodCompare_Texture1DArray_args = { &SampledTextureSampleLodCompare_Texture1DArray_texture, &SampledTextureSampleLodCompare_Texture1DArray_coordinate, &SampledTextureSampleLodCompare_Texture1DArray_lod, &SampledTextureSampleLodCompare_Texture1DArray_compare };

/// textureSampleLodCompare with Texture2DArray, Sampler, Float32x3, Float32, Float32
Variable TextureSampleLodCompare_Texture2DArray_texture;
inline constexpr std::array TextureSampleLodCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture2DArray_sampler;
inline constexpr std::array TextureSampleLodCompare_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture2DArray_coordinate;
Variable TextureSampleLodCompare_Texture2DArray_lod;
Variable TextureSampleLodCompare_Texture2DArray_compare;
Function TextureSampleLodCompare_Texture2DArray;
inline constexpr std::array TextureSampleLodCompare_Texture2DArray_args = { &TextureSampleLodCompare_Texture2DArray_texture, &TextureSampleLodCompare_Texture2DArray_sampler, &TextureSampleLodCompare_Texture2DArray_coordinate, &TextureSampleLodCompare_Texture2DArray_lod, &TextureSampleLodCompare_Texture2DArray_compare };

/// textureSampleLodCompare with SampledTexture2DArray, Float32x3, Float32, Float32
Variable SampledTextureSampleLodCompare_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleLodCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleLodCompare_Texture2DArray_lod;
Variable SampledTextureSampleLodCompare_Texture2DArray_compare;
Function SampledTextureSampleLodCompare_Texture2DArray;
inline constexpr std::array SampledTextureSampleLodCompare_Texture2DArray_args = { &SampledTextureSampleLodCompare_Texture2DArray_texture, &SampledTextureSampleLodCompare_Texture2DArray_coordinate, &SampledTextureSampleLodCompare_Texture2DArray_lod, &SampledTextureSampleLodCompare_Texture2DArray_compare };

/// textureSampleLodCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleLodCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleLodCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleLodCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture1D_coordinate;
Variable TextureSampleLodCompareOffset_Texture1D_lod;
Variable TextureSampleLodCompareOffset_Texture1D_compare;
Variable TextureSampleLodCompareOffset_Texture1D_offset;
Function TextureSampleLodCompareOffset_Texture1D;
inline constexpr std::array TextureSampleLodCompareOffset_Texture1D_args = { &TextureSampleLodCompareOffset_Texture1D_texture, &TextureSampleLodCompareOffset_Texture1D_sampler, &TextureSampleLodCompareOffset_Texture1D_coordinate, &TextureSampleLodCompareOffset_Texture1D_lod, &TextureSampleLodCompareOffset_Texture1D_compare, &TextureSampleLodCompareOffset_Texture1D_offset };

/// textureSampleLodCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleLodCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleLodCompareOffset_Texture1D_lod;
Variable SampledTextureSampleLodCompareOffset_Texture1D_compare;
Variable SampledTextureSampleLodCompareOffset_Texture1D_offset;
Function SampledTextureSampleLodCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture1D_args = { &SampledTextureSampleLodCompareOffset_Texture1D_texture, &SampledTextureSampleLodCompareOffset_Texture1D_coordinate, &SampledTextureSampleLodCompareOffset_Texture1D_lod, &SampledTextureSampleLodCompareOffset_Texture1D_compare, &SampledTextureSampleLodCompareOffset_Texture1D_offset };

/// textureSampleLodCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleLodCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleLodCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleLodCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture2D_coordinate;
Variable TextureSampleLodCompareOffset_Texture2D_lod;
Variable TextureSampleLodCompareOffset_Texture2D_compare;
Variable TextureSampleLodCompareOffset_Texture2D_offset;
Function TextureSampleLodCompareOffset_Texture2D;
inline constexpr std::array TextureSampleLodCompareOffset_Texture2D_args = { &TextureSampleLodCompareOffset_Texture2D_texture, &TextureSampleLodCompareOffset_Texture2D_sampler, &TextureSampleLodCompareOffset_Texture2D_coordinate, &TextureSampleLodCompareOffset_Texture2D_lod, &TextureSampleLodCompareOffset_Texture2D_compare, &TextureSampleLodCompareOffset_Texture2D_offset };

/// textureSampleLodCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleLodCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleLodCompareOffset_Texture2D_lod;
Variable SampledTextureSampleLodCompareOffset_Texture2D_compare;
Variable SampledTextureSampleLodCompareOffset_Texture2D_offset;
Function SampledTextureSampleLodCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture2D_args = { &SampledTextureSampleLodCompareOffset_Texture2D_texture, &SampledTextureSampleLodCompareOffset_Texture2D_coordinate, &SampledTextureSampleLodCompareOffset_Texture2D_lod, &SampledTextureSampleLodCompareOffset_Texture2D_compare, &SampledTextureSampleLodCompareOffset_Texture2D_offset };

/// textureSampleLodCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleLodCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleLodCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleLodCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture3D_coordinate;
Variable TextureSampleLodCompareOffset_Texture3D_lod;
Variable TextureSampleLodCompareOffset_Texture3D_compare;
Variable TextureSampleLodCompareOffset_Texture3D_offset;
Function TextureSampleLodCompareOffset_Texture3D;
inline constexpr std::array TextureSampleLodCompareOffset_Texture3D_args = { &TextureSampleLodCompareOffset_Texture3D_texture, &TextureSampleLodCompareOffset_Texture3D_sampler, &TextureSampleLodCompareOffset_Texture3D_coordinate, &TextureSampleLodCompareOffset_Texture3D_lod, &TextureSampleLodCompareOffset_Texture3D_compare, &TextureSampleLodCompareOffset_Texture3D_offset };

/// textureSampleLodCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleLodCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleLodCompareOffset_Texture3D_lod;
Variable SampledTextureSampleLodCompareOffset_Texture3D_compare;
Variable SampledTextureSampleLodCompareOffset_Texture3D_offset;
Function SampledTextureSampleLodCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture3D_args = { &SampledTextureSampleLodCompareOffset_Texture3D_texture, &SampledTextureSampleLodCompareOffset_Texture3D_coordinate, &SampledTextureSampleLodCompareOffset_Texture3D_lod, &SampledTextureSampleLodCompareOffset_Texture3D_compare, &SampledTextureSampleLodCompareOffset_Texture3D_offset };

/// textureSampleLodCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleLodCompareOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleLodCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleLodCompareOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture1DArray_coordinate;
Variable TextureSampleLodCompareOffset_Texture1DArray_lod;
Variable TextureSampleLodCompareOffset_Texture1DArray_compare;
Variable TextureSampleLodCompareOffset_Texture1DArray_offset;
Function TextureSampleLodCompareOffset_Texture1DArray;
inline constexpr std::array TextureSampleLodCompareOffset_Texture1DArray_args = { &TextureSampleLodCompareOffset_Texture1DArray_texture, &TextureSampleLodCompareOffset_Texture1DArray_sampler, &TextureSampleLodCompareOffset_Texture1DArray_coordinate, &TextureSampleLodCompareOffset_Texture1DArray_lod, &TextureSampleLodCompareOffset_Texture1DArray_compare, &TextureSampleLodCompareOffset_Texture1DArray_offset };

/// textureSampleLodCompareOffset with SampledTexture1DArray, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleLodCompareOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompareOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleLodCompareOffset_Texture1DArray_lod;
Variable SampledTextureSampleLodCompareOffset_Texture1DArray_compare;
Variable SampledTextureSampleLodCompareOffset_Texture1DArray_offset;
Function SampledTextureSampleLodCompareOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture1DArray_args = { &SampledTextureSampleLodCompareOffset_Texture1DArray_texture, &SampledTextureSampleLodCompareOffset_Texture1DArray_coordinate, &SampledTextureSampleLodCompareOffset_Texture1DArray_lod, &SampledTextureSampleLodCompareOffset_Texture1DArray_compare, &SampledTextureSampleLodCompareOffset_Texture1DArray_offset };

/// textureSampleLodCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleLodCompareOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleLodCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleLodCompareOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture2DArray_coordinate;
Variable TextureSampleLodCompareOffset_Texture2DArray_lod;
Variable TextureSampleLodCompareOffset_Texture2DArray_compare;
Variable TextureSampleLodCompareOffset_Texture2DArray_offset;
Function TextureSampleLodCompareOffset_Texture2DArray;
inline constexpr std::array TextureSampleLodCompareOffset_Texture2DArray_args = { &TextureSampleLodCompareOffset_Texture2DArray_texture, &TextureSampleLodCompareOffset_Texture2DArray_sampler, &TextureSampleLodCompareOffset_Texture2DArray_coordinate, &TextureSampleLodCompareOffset_Texture2DArray_lod, &TextureSampleLodCompareOffset_Texture2DArray_compare, &TextureSampleLodCompareOffset_Texture2DArray_offset };

/// textureSampleLodCompareOffset with SampledTexture2DArray, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleLodCompareOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompareOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleLodCompareOffset_Texture2DArray_lod;
Variable SampledTextureSampleLodCompareOffset_Texture2DArray_compare;
Variable SampledTextureSampleLodCompareOffset_Texture2DArray_offset;
Function SampledTextureSampleLodCompareOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture2DArray_args = { &SampledTextureSampleLodCompareOffset_Texture2DArray_texture, &SampledTextureSampleLodCompareOffset_Texture2DArray_coordinate, &SampledTextureSampleLodCompareOffset_Texture2DArray_lod, &SampledTextureSampleLodCompareOffset_Texture2DArray_compare, &SampledTextureSampleLodCompareOffset_Texture2DArray_offset };

/// textureSampleLodProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleLodProjCompare_Texture1D_texture;
inline constexpr std::array TextureSampleLodProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleLodProjCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompare_Texture1D_coordinate;
Variable TextureSampleLodProjCompare_Texture1D_lod;
Variable TextureSampleLodProjCompare_Texture1D_proj;
Variable TextureSampleLodProjCompare_Texture1D_compare;
Function TextureSampleLodProjCompare_Texture1D;
inline constexpr std::array TextureSampleLodProjCompare_Texture1D_args = { &TextureSampleLodProjCompare_Texture1D_texture, &TextureSampleLodProjCompare_Texture1D_sampler, &TextureSampleLodProjCompare_Texture1D_coordinate, &TextureSampleLodProjCompare_Texture1D_lod, &TextureSampleLodProjCompare_Texture1D_proj, &TextureSampleLodProjCompare_Texture1D_compare };

/// textureSampleLodProjCompare with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleLodProjCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleLodProjCompare_Texture1D_lod;
Variable SampledTextureSampleLodProjCompare_Texture1D_proj;
Variable SampledTextureSampleLodProjCompare_Texture1D_compare;
Function SampledTextureSampleLodProjCompare_Texture1D;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture1D_args = { &SampledTextureSampleLodProjCompare_Texture1D_texture, &SampledTextureSampleLodProjCompare_Texture1D_coordinate, &SampledTextureSampleLodProjCompare_Texture1D_lod, &SampledTextureSampleLodProjCompare_Texture1D_proj, &SampledTextureSampleLodProjCompare_Texture1D_compare };

/// textureSampleLodProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32, Float32
Variable TextureSampleLodProjCompare_Texture2D_texture;
inline constexpr std::array TextureSampleLodProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleLodProjCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompare_Texture2D_coordinate;
Variable TextureSampleLodProjCompare_Texture2D_lod;
Variable TextureSampleLodProjCompare_Texture2D_proj;
Variable TextureSampleLodProjCompare_Texture2D_compare;
Function TextureSampleLodProjCompare_Texture2D;
inline constexpr std::array TextureSampleLodProjCompare_Texture2D_args = { &TextureSampleLodProjCompare_Texture2D_texture, &TextureSampleLodProjCompare_Texture2D_sampler, &TextureSampleLodProjCompare_Texture2D_coordinate, &TextureSampleLodProjCompare_Texture2D_lod, &TextureSampleLodProjCompare_Texture2D_proj, &TextureSampleLodProjCompare_Texture2D_compare };

/// textureSampleLodProjCompare with SampledTexture2D, Float32x2, Float32, Float32, Float32
Variable SampledTextureSampleLodProjCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleLodProjCompare_Texture2D_lod;
Variable SampledTextureSampleLodProjCompare_Texture2D_proj;
Variable SampledTextureSampleLodProjCompare_Texture2D_compare;
Function SampledTextureSampleLodProjCompare_Texture2D;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture2D_args = { &SampledTextureSampleLodProjCompare_Texture2D_texture, &SampledTextureSampleLodProjCompare_Texture2D_coordinate, &SampledTextureSampleLodProjCompare_Texture2D_lod, &SampledTextureSampleLodProjCompare_Texture2D_proj, &SampledTextureSampleLodProjCompare_Texture2D_compare };

/// textureSampleLodProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32, Float32
Variable TextureSampleLodProjCompare_Texture3D_texture;
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompare_Texture3D_coordinate;
Variable TextureSampleLodProjCompare_Texture3D_lod;
Variable TextureSampleLodProjCompare_Texture3D_proj;
Variable TextureSampleLodProjCompare_Texture3D_compare;
Function TextureSampleLodProjCompare_Texture3D;
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_args = { &TextureSampleLodProjCompare_Texture3D_texture, &TextureSampleLodProjCompare_Texture3D_sampler, &TextureSampleLodProjCompare_Texture3D_coordinate, &TextureSampleLodProjCompare_Texture3D_lod, &TextureSampleLodProjCompare_Texture3D_proj, &TextureSampleLodProjCompare_Texture3D_compare };

/// textureSampleLodProjCompare with SampledTexture3D, Float32x3, Float32, Float32, Float32
Variable SampledTextureSampleLodProjCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleLodProjCompare_Texture3D_lod;
Variable SampledTextureSampleLodProjCompare_Texture3D_proj;
Variable SampledTextureSampleLodProjCompare_Texture3D_compare;
Function SampledTextureSampleLodProjCompare_Texture3D;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture3D_args = { &SampledTextureSampleLodProjCompare_Texture3D_texture, &SampledTextureSampleLodProjCompare_Texture3D_coordinate, &SampledTextureSampleLodProjCompare_Texture3D_lod, &SampledTextureSampleLodProjCompare_Texture3D_proj, &SampledTextureSampleLodProjCompare_Texture3D_compare };

void SetupIntrinsics11()
{
    /// textureSample with Texture2D, Sampler, Float32x2
    TextureSample_Texture2D_texture.name = "texture"_c;
    TextureSample_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSample_Texture2D_texture.type.modifiers = TextureSample_Texture2D_texture_modifiers;
    TextureSample_Texture2D_texture.type.modifierValues = TextureSample_Texture2D_texture_modifierValues;
    TextureSample_Texture2D_sampler.name = "sampler"_c;
    TextureSample_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture2D_sampler.type.modifiers = TextureSample_Texture2D_sampler_modifiers;
    TextureSample_Texture2D_sampler.type.modifierValues = TextureSample_Texture2D_sampler_modifierValues;
    TextureSample_Texture2D_coordinate.name = "coordinate"_c;
    TextureSample_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSample_Texture2D.documentation = "Sample a texture at coordinate"_c;
    TextureSample_Texture2D.name = TextureSample_Texture2D_name;
    TextureSample_Texture2D.backendIndex = 2345;
    TextureSample_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture2D.parameters = TextureSample_Texture2D_args;
    Symbol::Resolved(&TextureSample_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSample_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSample_Texture2D)->signature = "textureSample(uniform *texture2D,uniform *sampler,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSample_Texture2D)->name = "textureSample(uniform *texture2D,uniform *sampler,f32x2)"_c;
    Symbol::Resolved(&TextureSample_Texture2D)->nameWithVarNames = "textureSample(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2)"_c;
    Symbol::Resolved(&TextureSample_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTexture2D, Float32x2
    SampledTextureSample_Texture2D_texture.name = "texture"_c;
    SampledTextureSample_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSample_Texture2D_texture.type.modifiers = SampledTextureSample_Texture2D_texture_modifiers;
    SampledTextureSample_Texture2D_texture.type.modifierValues = SampledTextureSample_Texture2D_texture_modifierValues;
    SampledTextureSample_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSample_Texture2D.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_Texture2D.name = SampledTextureSample_Texture2D_name;
    SampledTextureSample_Texture2D.backendIndex = 2346;
    SampledTextureSample_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture2D.parameters = SampledTextureSample_Texture2D_args;
    Symbol::Resolved(&SampledTextureSample_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSample_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSample_Texture2D)->signature = "textureSample(uniform *textureSampled2D,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2D)->name = "textureSample(uniform *textureSampled2D,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2D)->nameWithVarNames = "textureSample(texture : uniform *textureSampled2D, coordinate : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture3D, Sampler, Float32x3
    TextureSample_Texture3D_texture.name = "texture"_c;
    TextureSample_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSample_Texture3D_texture.type.modifiers = TextureSample_Texture3D_texture_modifiers;
    TextureSample_Texture3D_texture.type.modifierValues = TextureSample_Texture3D_texture_modifierValues;
    TextureSample_Texture3D_sampler.name = "sampler"_c;
    TextureSample_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture3D_sampler.type.modifiers = TextureSample_Texture3D_sampler_modifiers;
    TextureSample_Texture3D_sampler.type.modifierValues = TextureSample_Texture3D_sampler_modifierValues;
    TextureSample_Texture3D_coordinate.name = "coordinate"_c;
    TextureSample_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSample_Texture3D.documentation = "Sample a texture at coordinate"_c;
    TextureSample_Texture3D.name = TextureSample_Texture3D_name;
    TextureSample_Texture3D.backendIndex = 2347;
    TextureSample_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture3D.parameters = TextureSample_Texture3D_args;
    Symbol::Resolved(&TextureSample_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSample_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSample_Texture3D)->signature = "textureSample(uniform *texture3D,uniform *sampler,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSample_Texture3D)->name = "textureSample(uniform *texture3D,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureSample_Texture3D)->nameWithVarNames = "textureSample(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3)"_c;
    Symbol::Resolved(&TextureSample_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTexture3D, Float32x3
    SampledTextureSample_Texture3D_texture.name = "texture"_c;
    SampledTextureSample_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSample_Texture3D_texture.type.modifiers = SampledTextureSample_Texture3D_texture_modifiers;
    SampledTextureSample_Texture3D_texture.type.modifierValues = SampledTextureSample_Texture3D_texture_modifierValues;
    SampledTextureSample_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSample_Texture3D.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_Texture3D.name = SampledTextureSample_Texture3D_name;
    SampledTextureSample_Texture3D.backendIndex = 2348;
    SampledTextureSample_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture3D.parameters = SampledTextureSample_Texture3D_args;
    Symbol::Resolved(&SampledTextureSample_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSample_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSample_Texture3D)->signature = "textureSample(uniform *textureSampled3D,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSample_Texture3D)->name = "textureSample(uniform *textureSampled3D,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture3D)->nameWithVarNames = "textureSample(texture : uniform *textureSampled3D, coordinate : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with TextureCube, Sampler, Float32x3
    TextureSample_TextureCube_texture.name = "texture"_c;
    TextureSample_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSample_TextureCube_texture.type.modifiers = TextureSample_TextureCube_texture_modifiers;
    TextureSample_TextureCube_texture.type.modifierValues = TextureSample_TextureCube_texture_modifierValues;
    TextureSample_TextureCube_sampler.name = "sampler"_c;
    TextureSample_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_TextureCube_sampler.type.modifiers = TextureSample_TextureCube_sampler_modifiers;
    TextureSample_TextureCube_sampler.type.modifierValues = TextureSample_TextureCube_sampler_modifierValues;
    TextureSample_TextureCube_coordinate.name = "coordinate"_c;
    TextureSample_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSample_TextureCube.documentation = "Sample a texture at coordinate"_c;
    TextureSample_TextureCube.name = TextureSample_TextureCube_name;
    TextureSample_TextureCube.backendIndex = 2349;
    TextureSample_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_TextureCube.parameters = TextureSample_TextureCube_args;
    Symbol::Resolved(&TextureSample_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSample_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSample_TextureCube)->signature = "textureSample(uniform *textureCube,uniform *sampler,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSample_TextureCube)->name = "textureSample(uniform *textureCube,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureSample_TextureCube)->nameWithVarNames = "textureSample(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : f32x3)"_c;
    Symbol::Resolved(&TextureSample_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTextureCube, Float32x3
    SampledTextureSample_TextureCube_texture.name = "texture"_c;
    SampledTextureSample_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureSample_TextureCube_texture.type.modifiers = SampledTextureSample_TextureCube_texture_modifiers;
    SampledTextureSample_TextureCube_texture.type.modifierValues = SampledTextureSample_TextureCube_texture_modifierValues;
    SampledTextureSample_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSample_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSample_TextureCube.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_TextureCube.name = SampledTextureSample_TextureCube_name;
    SampledTextureSample_TextureCube.backendIndex = 2350;
    SampledTextureSample_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_TextureCube.parameters = SampledTextureSample_TextureCube_args;
    Symbol::Resolved(&SampledTextureSample_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureSample_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSample_TextureCube)->signature = "textureSample(uniform *textureSampledCube,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCube)->name = "textureSample(uniform *textureSampledCube,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCube)->nameWithVarNames = "textureSample(texture : uniform *textureSampledCube, coordinate : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture1DArray, Sampler, Float32x2
    TextureSample_Texture1DArray_texture.name = "texture"_c;
    TextureSample_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSample_Texture1DArray_texture.type.modifiers = TextureSample_Texture1DArray_texture_modifiers;
    TextureSample_Texture1DArray_texture.type.modifierValues = TextureSample_Texture1DArray_texture_modifierValues;
    TextureSample_Texture1DArray_sampler.name = "sampler"_c;
    TextureSample_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture1DArray_sampler.type.modifiers = TextureSample_Texture1DArray_sampler_modifiers;
    TextureSample_Texture1DArray_sampler.type.modifierValues = TextureSample_Texture1DArray_sampler_modifierValues;
    TextureSample_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSample_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSample_Texture1DArray.documentation = "Sample a texture at coordinate"_c;
    TextureSample_Texture1DArray.name = TextureSample_Texture1DArray_name;
    TextureSample_Texture1DArray.backendIndex = 2351;
    TextureSample_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture1DArray.parameters = TextureSample_Texture1DArray_args;
    Symbol::Resolved(&TextureSample_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSample_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSample_Texture1DArray)->signature = "textureSample(uniform *texture1DArray,uniform *sampler,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSample_Texture1DArray)->name = "textureSample(uniform *texture1DArray,uniform *sampler,f32x2)"_c;
    Symbol::Resolved(&TextureSample_Texture1DArray)->nameWithVarNames = "textureSample(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2)"_c;
    Symbol::Resolved(&TextureSample_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTexture1DArray, Float32x2
    SampledTextureSample_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSample_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSample_Texture1DArray_texture.type.modifiers = SampledTextureSample_Texture1DArray_texture_modifiers;
    SampledTextureSample_Texture1DArray_texture.type.modifierValues = SampledTextureSample_Texture1DArray_texture_modifierValues;
    SampledTextureSample_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSample_Texture1DArray.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_Texture1DArray.name = SampledTextureSample_Texture1DArray_name;
    SampledTextureSample_Texture1DArray.backendIndex = 2352;
    SampledTextureSample_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture1DArray.parameters = SampledTextureSample_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray)->signature = "textureSample(uniform *textureSampled1DArray,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray)->name = "textureSample(uniform *textureSampled1DArray,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray)->nameWithVarNames = "textureSample(texture : uniform *textureSampled1DArray, coordinate : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture2DArray, Sampler, Float32x3
    TextureSample_Texture2DArray_texture.name = "texture"_c;
    TextureSample_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSample_Texture2DArray_texture.type.modifiers = TextureSample_Texture2DArray_texture_modifiers;
    TextureSample_Texture2DArray_texture.type.modifierValues = TextureSample_Texture2DArray_texture_modifierValues;
    TextureSample_Texture2DArray_sampler.name = "sampler"_c;
    TextureSample_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture2DArray_sampler.type.modifiers = TextureSample_Texture2DArray_sampler_modifiers;
    TextureSample_Texture2DArray_sampler.type.modifierValues = TextureSample_Texture2DArray_sampler_modifierValues;
    TextureSample_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSample_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSample_Texture2DArray.documentation = "Sample a texture at coordinate"_c;
    TextureSample_Texture2DArray.name = TextureSample_Texture2DArray_name;
    TextureSample_Texture2DArray.backendIndex = 2353;
    TextureSample_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture2DArray.parameters = TextureSample_Texture2DArray_args;
    Symbol::Resolved(&TextureSample_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSample_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSample_Texture2DArray)->signature = "textureSample(uniform *texture2DArray,uniform *sampler,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSample_Texture2DArray)->name = "textureSample(uniform *texture2DArray,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureSample_Texture2DArray)->nameWithVarNames = "textureSample(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3)"_c;
    Symbol::Resolved(&TextureSample_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTexture2DArray, Float32x3
    SampledTextureSample_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSample_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSample_Texture2DArray_texture.type.modifiers = SampledTextureSample_Texture2DArray_texture_modifiers;
    SampledTextureSample_Texture2DArray_texture.type.modifierValues = SampledTextureSample_Texture2DArray_texture_modifierValues;
    SampledTextureSample_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSample_Texture2DArray.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_Texture2DArray.name = SampledTextureSample_Texture2DArray_name;
    SampledTextureSample_Texture2DArray.backendIndex = 2354;
    SampledTextureSample_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture2DArray.parameters = SampledTextureSample_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray)->signature = "textureSample(uniform *textureSampled2DArray,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray)->name = "textureSample(uniform *textureSampled2DArray,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray)->nameWithVarNames = "textureSample(texture : uniform *textureSampled2DArray, coordinate : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with TextureCubeArray, Sampler, Float32x4
    TextureSample_TextureCubeArray_texture.name = "texture"_c;
    TextureSample_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSample_TextureCubeArray_texture.type.modifiers = TextureSample_TextureCubeArray_texture_modifiers;
    TextureSample_TextureCubeArray_texture.type.modifierValues = TextureSample_TextureCubeArray_texture_modifierValues;
    TextureSample_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSample_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_TextureCubeArray_sampler.type.modifiers = TextureSample_TextureCubeArray_sampler_modifiers;
    TextureSample_TextureCubeArray_sampler.type.modifierValues = TextureSample_TextureCubeArray_sampler_modifierValues;
    TextureSample_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSample_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSample_TextureCubeArray.documentation = "Sample a texture at coordinate"_c;
    TextureSample_TextureCubeArray.name = TextureSample_TextureCubeArray_name;
    TextureSample_TextureCubeArray.backendIndex = 2355;
    TextureSample_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_TextureCubeArray.parameters = TextureSample_TextureCubeArray_args;
    Symbol::Resolved(&TextureSample_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSample_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSample_TextureCubeArray)->signature = "textureSample(uniform *textureCubeArray,uniform *sampler,f32x4) f32x4"_c;
    Symbol::Resolved(&TextureSample_TextureCubeArray)->name = "textureSample(uniform *textureCubeArray,uniform *sampler,f32x4)"_c;
    Symbol::Resolved(&TextureSample_TextureCubeArray)->nameWithVarNames = "textureSample(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : f32x4)"_c;
    Symbol::Resolved(&TextureSample_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTextureCubeArray, Float32x4
    SampledTextureSample_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSample_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureSample_TextureCubeArray_texture.type.modifiers = SampledTextureSample_TextureCubeArray_texture_modifiers;
    SampledTextureSample_TextureCubeArray_texture.type.modifierValues = SampledTextureSample_TextureCubeArray_texture_modifierValues;
    SampledTextureSample_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSample_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSample_TextureCubeArray.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_TextureCubeArray.name = SampledTextureSample_TextureCubeArray_name;
    SampledTextureSample_TextureCubeArray.backendIndex = 2356;
    SampledTextureSample_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_TextureCubeArray.parameters = SampledTextureSample_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray)->signature = "textureSample(uniform *textureSampledCubeArray,f32x4) f32x4"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray)->name = "textureSample(uniform *textureSampledCubeArray,f32x4)"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray)->nameWithVarNames = "textureSample(texture : uniform *textureSampledCubeArray, coordinate : f32x4)"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture1D, Sampler, Float32, Float32
    TextureSampleOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleOffset_Texture1D_texture.type.modifiers = TextureSampleOffset_Texture1D_texture_modifiers;
    TextureSampleOffset_Texture1D_texture.type.modifierValues = TextureSampleOffset_Texture1D_texture_modifierValues;
    TextureSampleOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture1D_sampler.type.modifiers = TextureSampleOffset_Texture1D_sampler_modifiers;
    TextureSampleOffset_Texture1D_sampler.type.modifierValues = TextureSampleOffset_Texture1D_sampler_modifierValues;
    TextureSampleOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleOffset_Texture1D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    TextureSampleOffset_Texture1D.name = TextureSampleOffset_Texture1D_name;
    TextureSampleOffset_Texture1D.backendIndex = 2357;
    TextureSampleOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture1D.parameters = TextureSampleOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1D)->signature = "textureSampleOffset(uniform *texture1D,uniform *sampler,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1D)->name = "textureSampleOffset(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1D)->nameWithVarNames = "textureSampleOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with SampledTexture1D, Float32, Float32
    SampledTextureSampleOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleOffset_Texture1D_texture.type.modifiers = SampledTextureSampleOffset_Texture1D_texture_modifiers;
    SampledTextureSampleOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleOffset_Texture1D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    SampledTextureSampleOffset_Texture1D.name = SampledTextureSampleOffset_Texture1D_name;
    SampledTextureSampleOffset_Texture1D.backendIndex = 2358;
    SampledTextureSampleOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture1D.parameters = SampledTextureSampleOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D)->signature = "textureSampleOffset(uniform *textureSampled1D,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D)->name = "textureSampleOffset(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D)->nameWithVarNames = "textureSampleOffset(texture : uniform *textureSampled1D, coordinate : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture2D, Sampler, Float32x2, Float32x2
    TextureSampleOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleOffset_Texture2D_texture.type.modifiers = TextureSampleOffset_Texture2D_texture_modifiers;
    TextureSampleOffset_Texture2D_texture.type.modifierValues = TextureSampleOffset_Texture2D_texture_modifierValues;
    TextureSampleOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture2D_sampler.type.modifiers = TextureSampleOffset_Texture2D_sampler_modifiers;
    TextureSampleOffset_Texture2D_sampler.type.modifierValues = TextureSampleOffset_Texture2D_sampler_modifierValues;
    TextureSampleOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture2D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    TextureSampleOffset_Texture2D.name = TextureSampleOffset_Texture2D_name;
    TextureSampleOffset_Texture2D.backendIndex = 2359;
    TextureSampleOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture2D.parameters = TextureSampleOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2D)->signature = "textureSampleOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2D)->name = "textureSampleOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2D)->nameWithVarNames = "textureSampleOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with SampledTexture2D, Float32x2, Float32x2
    SampledTextureSampleOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleOffset_Texture2D_texture.type.modifiers = SampledTextureSampleOffset_Texture2D_texture_modifiers;
    SampledTextureSampleOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture2D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    SampledTextureSampleOffset_Texture2D.name = SampledTextureSampleOffset_Texture2D_name;
    SampledTextureSampleOffset_Texture2D.backendIndex = 2360;
    SampledTextureSampleOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture2D.parameters = SampledTextureSampleOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D)->signature = "textureSampleOffset(uniform *textureSampled2D,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D)->name = "textureSampleOffset(uniform *textureSampled2D,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D)->nameWithVarNames = "textureSampleOffset(texture : uniform *textureSampled2D, coordinate : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture3D, Sampler, Float32x3, Float32x3
    TextureSampleOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleOffset_Texture3D_texture.type.modifiers = TextureSampleOffset_Texture3D_texture_modifiers;
    TextureSampleOffset_Texture3D_texture.type.modifierValues = TextureSampleOffset_Texture3D_texture_modifierValues;
    TextureSampleOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture3D_sampler.type.modifiers = TextureSampleOffset_Texture3D_sampler_modifiers;
    TextureSampleOffset_Texture3D_sampler.type.modifierValues = TextureSampleOffset_Texture3D_sampler_modifierValues;
    TextureSampleOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture3D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    TextureSampleOffset_Texture3D.name = TextureSampleOffset_Texture3D_name;
    TextureSampleOffset_Texture3D.backendIndex = 2361;
    TextureSampleOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture3D.parameters = TextureSampleOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture3D)->signature = "textureSampleOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture3D)->name = "textureSampleOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture3D)->nameWithVarNames = "textureSampleOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with SampledTexture3D, Float32x3, Float32x3
    SampledTextureSampleOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleOffset_Texture3D_texture.type.modifiers = SampledTextureSampleOffset_Texture3D_texture_modifiers;
    SampledTextureSampleOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture3D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    SampledTextureSampleOffset_Texture3D.name = SampledTextureSampleOffset_Texture3D_name;
    SampledTextureSampleOffset_Texture3D.backendIndex = 2362;
    SampledTextureSampleOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture3D.parameters = SampledTextureSampleOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D)->signature = "textureSampleOffset(uniform *textureSampled3D,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D)->name = "textureSampleOffset(uniform *textureSampled3D,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D)->nameWithVarNames = "textureSampleOffset(texture : uniform *textureSampled3D, coordinate : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture1DArray, Sampler, Float32x2, Float32x2
    TextureSampleOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleOffset_Texture1DArray_texture.type.modifiers = TextureSampleOffset_Texture1DArray_texture_modifiers;
    TextureSampleOffset_Texture1DArray_texture.type.modifierValues = TextureSampleOffset_Texture1DArray_texture_modifierValues;
    TextureSampleOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture1DArray_sampler.type.modifiers = TextureSampleOffset_Texture1DArray_sampler_modifiers;
    TextureSampleOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture1DArray.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    TextureSampleOffset_Texture1DArray.name = TextureSampleOffset_Texture1DArray_name;
    TextureSampleOffset_Texture1DArray.backendIndex = 2363;
    TextureSampleOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture1DArray.parameters = TextureSampleOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray)->signature = "textureSampleOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray)->name = "textureSampleOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray)->nameWithVarNames = "textureSampleOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with SampledTexture1DArray, Float32x2, Float32x2
    SampledTextureSampleOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture1DArray.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    SampledTextureSampleOffset_Texture1DArray.name = SampledTextureSampleOffset_Texture1DArray_name;
    SampledTextureSampleOffset_Texture1DArray.backendIndex = 2364;
    SampledTextureSampleOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture1DArray.parameters = SampledTextureSampleOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray)->signature = "textureSampleOffset(uniform *textureSampled1DArray,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray)->name = "textureSampleOffset(uniform *textureSampled1DArray,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray)->nameWithVarNames = "textureSampleOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture2DArray, Sampler, Float32x3, Float32x3
    TextureSampleOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleOffset_Texture2DArray_texture.type.modifiers = TextureSampleOffset_Texture2DArray_texture_modifiers;
    TextureSampleOffset_Texture2DArray_texture.type.modifierValues = TextureSampleOffset_Texture2DArray_texture_modifierValues;
    TextureSampleOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture2DArray_sampler.type.modifiers = TextureSampleOffset_Texture2DArray_sampler_modifiers;
    TextureSampleOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture2DArray.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    TextureSampleOffset_Texture2DArray.name = TextureSampleOffset_Texture2DArray_name;
    TextureSampleOffset_Texture2DArray.backendIndex = 2365;
    TextureSampleOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture2DArray.parameters = TextureSampleOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray)->signature = "textureSampleOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray)->name = "textureSampleOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray)->nameWithVarNames = "textureSampleOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with SampledTexture2DArray, Float32x3, Float32x3
    SampledTextureSampleOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture2DArray.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    SampledTextureSampleOffset_Texture2DArray.name = SampledTextureSampleOffset_Texture2DArray_name;
    SampledTextureSampleOffset_Texture2DArray.backendIndex = 2366;
    SampledTextureSampleOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture2DArray.parameters = SampledTextureSampleOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray)->signature = "textureSampleOffset(uniform *textureSampled2DArray,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray)->name = "textureSampleOffset(uniform *textureSampled2DArray,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray)->nameWithVarNames = "textureSampleOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with Texture1D, Sampler, Float32, Float32
    TextureSampleProj_Texture1D_texture.name = "texture"_c;
    TextureSampleProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProj_Texture1D_texture.type.modifiers = TextureSampleProj_Texture1D_texture_modifiers;
    TextureSampleProj_Texture1D_texture.type.modifierValues = TextureSampleProj_Texture1D_texture_modifierValues;
    TextureSampleProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProj_Texture1D_sampler.type.modifiers = TextureSampleProj_Texture1D_sampler_modifiers;
    TextureSampleProj_Texture1D_sampler.type.modifierValues = TextureSampleProj_Texture1D_sampler_modifierValues;
    TextureSampleProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture1D_proj.name = "proj"_c;
    TextureSampleProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture1D.documentation = "Sample a texture at coordinate with projection"_c;
    TextureSampleProj_Texture1D.name = TextureSampleProj_Texture1D_name;
    TextureSampleProj_Texture1D.backendIndex = 2367;
    TextureSampleProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProj_Texture1D.parameters = TextureSampleProj_Texture1D_args;
    Symbol::Resolved(&TextureSampleProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProj_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture1D)->signature = "textureSampleProj(uniform *texture1D,uniform *sampler,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleProj_Texture1D)->name = "textureSampleProj(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture1D)->nameWithVarNames = "textureSampleProj(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with SampledTexture1D, Float32, Float32
    SampledTextureSampleProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProj_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleProj_Texture1D_texture.type.modifiers = SampledTextureSampleProj_Texture1D_texture_modifiers;
    SampledTextureSampleProj_Texture1D_texture.type.modifierValues = SampledTextureSampleProj_Texture1D_texture_modifierValues;
    SampledTextureSampleProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture1D.documentation = "Sample a texture at coordinate with projection"_c;
    SampledTextureSampleProj_Texture1D.name = SampledTextureSampleProj_Texture1D_name;
    SampledTextureSampleProj_Texture1D.backendIndex = 2368;
    SampledTextureSampleProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProj_Texture1D.parameters = SampledTextureSampleProj_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D)->signature = "textureSampleProj(uniform *textureSampled1D,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D)->name = "textureSampleProj(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D)->nameWithVarNames = "textureSampleProj(texture : uniform *textureSampled1D, coordinate : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with Texture2D, Sampler, Float32x2, Float32
    TextureSampleProj_Texture2D_texture.name = "texture"_c;
    TextureSampleProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProj_Texture2D_texture.type.modifiers = TextureSampleProj_Texture2D_texture_modifiers;
    TextureSampleProj_Texture2D_texture.type.modifierValues = TextureSampleProj_Texture2D_texture_modifierValues;
    TextureSampleProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProj_Texture2D_sampler.type.modifiers = TextureSampleProj_Texture2D_sampler_modifiers;
    TextureSampleProj_Texture2D_sampler.type.modifierValues = TextureSampleProj_Texture2D_sampler_modifierValues;
    TextureSampleProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProj_Texture2D_proj.name = "proj"_c;
    TextureSampleProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture2D.documentation = "Sample a texture at coordinate with projection"_c;
    TextureSampleProj_Texture2D.name = TextureSampleProj_Texture2D_name;
    TextureSampleProj_Texture2D.backendIndex = 2369;
    TextureSampleProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProj_Texture2D.parameters = TextureSampleProj_Texture2D_args;
    Symbol::Resolved(&TextureSampleProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProj_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture2D)->signature = "textureSampleProj(uniform *texture2D,uniform *sampler,f32x2,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleProj_Texture2D)->name = "textureSampleProj(uniform *texture2D,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture2D)->nameWithVarNames = "textureSampleProj(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with SampledTexture2D, Float32x2, Float32
    SampledTextureSampleProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProj_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleProj_Texture2D_texture.type.modifiers = SampledTextureSampleProj_Texture2D_texture_modifiers;
    SampledTextureSampleProj_Texture2D_texture.type.modifierValues = SampledTextureSampleProj_Texture2D_texture_modifierValues;
    SampledTextureSampleProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture2D.documentation = "Sample a texture at coordinate with projection"_c;
    SampledTextureSampleProj_Texture2D.name = SampledTextureSampleProj_Texture2D_name;
    SampledTextureSampleProj_Texture2D.backendIndex = 2370;
    SampledTextureSampleProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProj_Texture2D.parameters = SampledTextureSampleProj_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D)->signature = "textureSampleProj(uniform *textureSampled2D,f32x2,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D)->name = "textureSampleProj(uniform *textureSampled2D,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D)->nameWithVarNames = "textureSampleProj(texture : uniform *textureSampled2D, coordinate : f32x2, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with Texture3D, Sampler, Float32x3, Float32
    TextureSampleProj_Texture3D_texture.name = "texture"_c;
    TextureSampleProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProj_Texture3D_texture.type.modifiers = TextureSampleProj_Texture3D_texture_modifiers;
    TextureSampleProj_Texture3D_texture.type.modifierValues = TextureSampleProj_Texture3D_texture_modifierValues;
    TextureSampleProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProj_Texture3D_sampler.type.modifiers = TextureSampleProj_Texture3D_sampler_modifiers;
    TextureSampleProj_Texture3D_sampler.type.modifierValues = TextureSampleProj_Texture3D_sampler_modifierValues;
    TextureSampleProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProj_Texture3D_proj.name = "proj"_c;
    TextureSampleProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture3D.documentation = "Sample a texture at coordinate with projection"_c;
    TextureSampleProj_Texture3D.name = TextureSampleProj_Texture3D_name;
    TextureSampleProj_Texture3D.backendIndex = 2371;
    TextureSampleProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProj_Texture3D.parameters = TextureSampleProj_Texture3D_args;
    Symbol::Resolved(&TextureSampleProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProj_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture3D)->signature = "textureSampleProj(uniform *texture3D,uniform *sampler,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleProj_Texture3D)->name = "textureSampleProj(uniform *texture3D,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture3D)->nameWithVarNames = "textureSampleProj(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with SampledTexture3D, Float32x3, Float32
    SampledTextureSampleProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProj_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleProj_Texture3D_texture.type.modifiers = SampledTextureSampleProj_Texture3D_texture_modifiers;
    SampledTextureSampleProj_Texture3D_texture.type.modifierValues = SampledTextureSampleProj_Texture3D_texture_modifierValues;
    SampledTextureSampleProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture3D.documentation = "Sample a texture at coordinate with projection"_c;
    SampledTextureSampleProj_Texture3D.name = SampledTextureSampleProj_Texture3D_name;
    SampledTextureSampleProj_Texture3D.backendIndex = 2372;
    SampledTextureSampleProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProj_Texture3D.parameters = SampledTextureSampleProj_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D)->signature = "textureSampleProj(uniform *textureSampled3D,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D)->name = "textureSampleProj(uniform *textureSampled3D,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D)->nameWithVarNames = "textureSampleProj(texture : uniform *textureSampled3D, coordinate : f32x3, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleProjOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProjOffset_Texture1D_texture.type.modifiers = TextureSampleProjOffset_Texture1D_texture_modifiers;
    TextureSampleProjOffset_Texture1D_texture.type.modifierValues = TextureSampleProjOffset_Texture1D_texture_modifierValues;
    TextureSampleProjOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProjOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjOffset_Texture1D_sampler.type.modifiers = TextureSampleProjOffset_Texture1D_sampler_modifiers;
    TextureSampleProjOffset_Texture1D_sampler.type.modifierValues = TextureSampleProjOffset_Texture1D_sampler_modifierValues;
    TextureSampleProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture1D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    TextureSampleProjOffset_Texture1D.name = TextureSampleProjOffset_Texture1D_name;
    TextureSampleProjOffset_Texture1D.backendIndex = 2373;
    TextureSampleProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjOffset_Texture1D.parameters = TextureSampleProjOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D)->signature = "textureSampleProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D)->name = "textureSampleProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleProjOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProjOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleProjOffset_Texture1D_texture.type.modifiers = SampledTextureSampleProjOffset_Texture1D_texture_modifiers;
    SampledTextureSampleProjOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleProjOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture1D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleProjOffset_Texture1D.name = SampledTextureSampleProjOffset_Texture1D_name;
    SampledTextureSampleProjOffset_Texture1D.backendIndex = 2374;
    SampledTextureSampleProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjOffset_Texture1D.parameters = SampledTextureSampleProjOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D)->signature = "textureSampleProjOffset(uniform *textureSampled1D,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D)->name = "textureSampleProjOffset(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *textureSampled1D, coordinate : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
    TextureSampleProjOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProjOffset_Texture2D_texture.type.modifiers = TextureSampleProjOffset_Texture2D_texture_modifiers;
    TextureSampleProjOffset_Texture2D_texture.type.modifierValues = TextureSampleProjOffset_Texture2D_texture_modifierValues;
    TextureSampleProjOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProjOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjOffset_Texture2D_sampler.type.modifiers = TextureSampleProjOffset_Texture2D_sampler_modifiers;
    TextureSampleProjOffset_Texture2D_sampler.type.modifierValues = TextureSampleProjOffset_Texture2D_sampler_modifierValues;
    TextureSampleProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjOffset_Texture2D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    TextureSampleProjOffset_Texture2D.name = TextureSampleProjOffset_Texture2D_name;
    TextureSampleProjOffset_Texture2D.backendIndex = 2375;
    TextureSampleProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjOffset_Texture2D.parameters = TextureSampleProjOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D)->signature = "textureSampleProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D)->name = "textureSampleProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with SampledTexture2D, Float32x2, Float32, Float32x2
    SampledTextureSampleProjOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProjOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleProjOffset_Texture2D_texture.type.modifiers = SampledTextureSampleProjOffset_Texture2D_texture_modifiers;
    SampledTextureSampleProjOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleProjOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjOffset_Texture2D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleProjOffset_Texture2D.name = SampledTextureSampleProjOffset_Texture2D_name;
    SampledTextureSampleProjOffset_Texture2D.backendIndex = 2376;
    SampledTextureSampleProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjOffset_Texture2D.parameters = SampledTextureSampleProjOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D)->signature = "textureSampleProjOffset(uniform *textureSampled2D,f32x2,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D)->name = "textureSampleProjOffset(uniform *textureSampled2D,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *textureSampled2D, coordinate : f32x2, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
    TextureSampleProjOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProjOffset_Texture3D_texture.type.modifiers = TextureSampleProjOffset_Texture3D_texture_modifiers;
    TextureSampleProjOffset_Texture3D_texture.type.modifierValues = TextureSampleProjOffset_Texture3D_texture_modifierValues;
    TextureSampleProjOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProjOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjOffset_Texture3D_sampler.type.modifiers = TextureSampleProjOffset_Texture3D_sampler_modifiers;
    TextureSampleProjOffset_Texture3D_sampler.type.modifierValues = TextureSampleProjOffset_Texture3D_sampler_modifierValues;
    TextureSampleProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjOffset_Texture3D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    TextureSampleProjOffset_Texture3D.name = TextureSampleProjOffset_Texture3D_name;
    TextureSampleProjOffset_Texture3D.backendIndex = 2377;
    TextureSampleProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjOffset_Texture3D.parameters = TextureSampleProjOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D)->signature = "textureSampleProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D)->name = "textureSampleProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with SampledTexture3D, Float32x3, Float32, Float32x3
    SampledTextureSampleProjOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProjOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleProjOffset_Texture3D_texture.type.modifiers = SampledTextureSampleProjOffset_Texture3D_texture_modifiers;
    SampledTextureSampleProjOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleProjOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjOffset_Texture3D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleProjOffset_Texture3D.name = SampledTextureSampleProjOffset_Texture3D_name;
    SampledTextureSampleProjOffset_Texture3D.backendIndex = 2378;
    SampledTextureSampleProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjOffset_Texture3D.parameters = SampledTextureSampleProjOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D)->signature = "textureSampleProjOffset(uniform *textureSampled3D,f32x3,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D)->name = "textureSampleProjOffset(uniform *textureSampled3D,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *textureSampled3D, coordinate : f32x3, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompare with Texture1D, Sampler, Float32, Float32
    TextureSampleCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleCompare_Texture1D_texture.type.modifiers = TextureSampleCompare_Texture1D_texture_modifiers;
    TextureSampleCompare_Texture1D_texture.type.modifierValues = TextureSampleCompare_Texture1D_texture_modifierValues;
    TextureSampleCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture1D_sampler.type.modifiers = TextureSampleCompare_Texture1D_sampler_modifiers;
    TextureSampleCompare_Texture1D_sampler.type.modifierValues = TextureSampleCompare_Texture1D_sampler_modifierValues;
    TextureSampleCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture1D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    TextureSampleCompare_Texture1D.name = TextureSampleCompare_Texture1D_name;
    TextureSampleCompare_Texture1D.backendIndex = 2379;
    TextureSampleCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompare_Texture1D.parameters = TextureSampleCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1D)->signature = "textureSampleCompare(uniform *texture1D,uniform *sampler,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1D)->name = "textureSampleCompare(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1D)->nameWithVarNames = "textureSampleCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with SampledTexture1D, Float32, Float32
    SampledTextureSampleCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleCompare_Texture1D_texture.type.modifiers = SampledTextureSampleCompare_Texture1D_texture_modifiers;
    SampledTextureSampleCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture1D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    SampledTextureSampleCompare_Texture1D.name = SampledTextureSampleCompare_Texture1D_name;
    SampledTextureSampleCompare_Texture1D.backendIndex = 2380;
    SampledTextureSampleCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompare_Texture1D.parameters = SampledTextureSampleCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D)->signature = "textureSampleCompare(uniform *textureSampled1D,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D)->name = "textureSampleCompare(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D)->nameWithVarNames = "textureSampleCompare(texture : uniform *textureSampled1D, coordinate : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with Texture2D, Sampler, Float32x2, Float32
    TextureSampleCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleCompare_Texture2D_texture.type.modifiers = TextureSampleCompare_Texture2D_texture_modifiers;
    TextureSampleCompare_Texture2D_texture.type.modifierValues = TextureSampleCompare_Texture2D_texture_modifierValues;
    TextureSampleCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture2D_sampler.type.modifiers = TextureSampleCompare_Texture2D_sampler_modifiers;
    TextureSampleCompare_Texture2D_sampler.type.modifierValues = TextureSampleCompare_Texture2D_sampler_modifierValues;
    TextureSampleCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture2D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    TextureSampleCompare_Texture2D.name = TextureSampleCompare_Texture2D_name;
    TextureSampleCompare_Texture2D.backendIndex = 2381;
    TextureSampleCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompare_Texture2D.parameters = TextureSampleCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2D)->signature = "textureSampleCompare(uniform *texture2D,uniform *sampler,f32x2,f32) f32"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2D)->name = "textureSampleCompare(uniform *texture2D,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2D)->nameWithVarNames = "textureSampleCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with SampledTexture2D, Float32x2, Float32
    SampledTextureSampleCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleCompare_Texture2D_texture.type.modifiers = SampledTextureSampleCompare_Texture2D_texture_modifiers;
    SampledTextureSampleCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture2D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    SampledTextureSampleCompare_Texture2D.name = SampledTextureSampleCompare_Texture2D_name;
    SampledTextureSampleCompare_Texture2D.backendIndex = 2382;
    SampledTextureSampleCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompare_Texture2D.parameters = SampledTextureSampleCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D)->signature = "textureSampleCompare(uniform *textureSampled2D,f32x2,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D)->name = "textureSampleCompare(uniform *textureSampled2D,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D)->nameWithVarNames = "textureSampleCompare(texture : uniform *textureSampled2D, coordinate : f32x2, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with Texture3D, Sampler, Float32x3, Float32
    TextureSampleCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleCompare_Texture3D_texture.type.modifiers = TextureSampleCompare_Texture3D_texture_modifiers;
    TextureSampleCompare_Texture3D_texture.type.modifierValues = TextureSampleCompare_Texture3D_texture_modifierValues;
    TextureSampleCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture3D_sampler.type.modifiers = TextureSampleCompare_Texture3D_sampler_modifiers;
    TextureSampleCompare_Texture3D_sampler.type.modifierValues = TextureSampleCompare_Texture3D_sampler_modifierValues;
    TextureSampleCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture3D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    TextureSampleCompare_Texture3D.name = TextureSampleCompare_Texture3D_name;
    TextureSampleCompare_Texture3D.backendIndex = 2383;
    TextureSampleCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompare_Texture3D.parameters = TextureSampleCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture3D)->signature = "textureSampleCompare(uniform *texture3D,uniform *sampler,f32x3,f32) f32"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture3D)->name = "textureSampleCompare(uniform *texture3D,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture3D)->nameWithVarNames = "textureSampleCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with SampledTexture3D, Float32x3, Float32
    SampledTextureSampleCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleCompare_Texture3D_texture.type.modifiers = SampledTextureSampleCompare_Texture3D_texture_modifiers;
    SampledTextureSampleCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture3D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    SampledTextureSampleCompare_Texture3D.name = SampledTextureSampleCompare_Texture3D_name;
    SampledTextureSampleCompare_Texture3D.backendIndex = 2384;
    SampledTextureSampleCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompare_Texture3D.parameters = SampledTextureSampleCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D)->signature = "textureSampleCompare(uniform *textureSampled3D,f32x3,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D)->name = "textureSampleCompare(uniform *textureSampled3D,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D)->nameWithVarNames = "textureSampleCompare(texture : uniform *textureSampled3D, coordinate : f32x3, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with Texture1DArray, Sampler, Float32x2, Float32
    TextureSampleCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleCompare_Texture1DArray_texture.type.modifiers = TextureSampleCompare_Texture1DArray_texture_modifiers;
    TextureSampleCompare_Texture1DArray_texture.type.modifierValues = TextureSampleCompare_Texture1DArray_texture_modifierValues;
    TextureSampleCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture1DArray_sampler.type.modifiers = TextureSampleCompare_Texture1DArray_sampler_modifiers;
    TextureSampleCompare_Texture1DArray_sampler.type.modifierValues = TextureSampleCompare_Texture1DArray_sampler_modifierValues;
    TextureSampleCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture1DArray.documentation = "Sample a texture at coordinate with depth comparison"_c;
    TextureSampleCompare_Texture1DArray.name = TextureSampleCompare_Texture1DArray_name;
    TextureSampleCompare_Texture1DArray.backendIndex = 2385;
    TextureSampleCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompare_Texture1DArray.parameters = TextureSampleCompare_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray)->signature = "textureSampleCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32) f32"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray)->name = "textureSampleCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray)->nameWithVarNames = "textureSampleCompare(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with SampledTexture1DArray, Float32x2, Float32
    SampledTextureSampleCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleCompare_Texture1DArray_texture.type.modifiers = SampledTextureSampleCompare_Texture1DArray_texture_modifiers;
    SampledTextureSampleCompare_Texture1DArray_texture.type.modifierValues = SampledTextureSampleCompare_Texture1DArray_texture_modifierValues;
    SampledTextureSampleCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture1DArray.documentation = "Sample a texture at coordinate with depth comparison"_c;
    SampledTextureSampleCompare_Texture1DArray.name = SampledTextureSampleCompare_Texture1DArray_name;
    SampledTextureSampleCompare_Texture1DArray.backendIndex = 2386;
    SampledTextureSampleCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompare_Texture1DArray.parameters = SampledTextureSampleCompare_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray)->signature = "textureSampleCompare(uniform *textureSampled1DArray,f32x2,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray)->name = "textureSampleCompare(uniform *textureSampled1DArray,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray)->nameWithVarNames = "textureSampleCompare(texture : uniform *textureSampled1DArray, coordinate : f32x2, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with Texture2DArray, Sampler, Float32x3, Float32
    TextureSampleCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleCompare_Texture2DArray_texture.type.modifiers = TextureSampleCompare_Texture2DArray_texture_modifiers;
    TextureSampleCompare_Texture2DArray_texture.type.modifierValues = TextureSampleCompare_Texture2DArray_texture_modifierValues;
    TextureSampleCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture2DArray_sampler.type.modifiers = TextureSampleCompare_Texture2DArray_sampler_modifiers;
    TextureSampleCompare_Texture2DArray_sampler.type.modifierValues = TextureSampleCompare_Texture2DArray_sampler_modifierValues;
    TextureSampleCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture2DArray.documentation = "Sample a texture at coordinate with depth comparison"_c;
    TextureSampleCompare_Texture2DArray.name = TextureSampleCompare_Texture2DArray_name;
    TextureSampleCompare_Texture2DArray.backendIndex = 2387;
    TextureSampleCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompare_Texture2DArray.parameters = TextureSampleCompare_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray)->signature = "textureSampleCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32) f32"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray)->name = "textureSampleCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray)->nameWithVarNames = "textureSampleCompare(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with SampledTexture2DArray, Float32x3, Float32
    SampledTextureSampleCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleCompare_Texture2DArray_texture.type.modifiers = SampledTextureSampleCompare_Texture2DArray_texture_modifiers;
    SampledTextureSampleCompare_Texture2DArray_texture.type.modifierValues = SampledTextureSampleCompare_Texture2DArray_texture_modifierValues;
    SampledTextureSampleCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture2DArray.documentation = "Sample a texture at coordinate with depth comparison"_c;
    SampledTextureSampleCompare_Texture2DArray.name = SampledTextureSampleCompare_Texture2DArray_name;
    SampledTextureSampleCompare_Texture2DArray.backendIndex = 2388;
    SampledTextureSampleCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompare_Texture2DArray.parameters = SampledTextureSampleCompare_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray)->signature = "textureSampleCompare(uniform *textureSampled2DArray,f32x3,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray)->name = "textureSampleCompare(uniform *textureSampled2DArray,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray)->nameWithVarNames = "textureSampleCompare(texture : uniform *textureSampled2DArray, coordinate : f32x3, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleCompareOffset_Texture1D_texture.type.modifiers = TextureSampleCompareOffset_Texture1D_texture_modifiers;
    TextureSampleCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleCompareOffset_Texture1D.name = TextureSampleCompareOffset_Texture1D_name;
    TextureSampleCompareOffset_Texture1D.backendIndex = 2389;
    TextureSampleCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompareOffset_Texture1D.parameters = TextureSampleCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D)->signature = "textureSampleCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D)->name = "textureSampleCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleCompareOffset_Texture1D.name = SampledTextureSampleCompareOffset_Texture1D_name;
    SampledTextureSampleCompareOffset_Texture1D.backendIndex = 2390;
    SampledTextureSampleCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1D.parameters = SampledTextureSampleCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D)->signature = "textureSampleCompareOffset(uniform *textureSampled1D,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D)->name = "textureSampleCompareOffset(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
    TextureSampleCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleCompareOffset_Texture2D_texture.type.modifiers = TextureSampleCompareOffset_Texture2D_texture_modifiers;
    TextureSampleCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleCompareOffset_Texture2D.name = TextureSampleCompareOffset_Texture2D_name;
    TextureSampleCompareOffset_Texture2D.backendIndex = 2391;
    TextureSampleCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompareOffset_Texture2D.parameters = TextureSampleCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D)->signature = "textureSampleCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2) f32"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D)->name = "textureSampleCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with SampledTexture2D, Float32x2, Float32, Float32x2
    SampledTextureSampleCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleCompareOffset_Texture2D.name = SampledTextureSampleCompareOffset_Texture2D_name;
    SampledTextureSampleCompareOffset_Texture2D.backendIndex = 2392;
    SampledTextureSampleCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompareOffset_Texture2D.parameters = SampledTextureSampleCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D)->signature = "textureSampleCompareOffset(uniform *textureSampled2D,f32x2,f32,f32x2) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D)->name = "textureSampleCompareOffset(uniform *textureSampled2D,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
    TextureSampleCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleCompareOffset_Texture3D_texture.type.modifiers = TextureSampleCompareOffset_Texture3D_texture_modifiers;
    TextureSampleCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleCompareOffset_Texture3D.name = TextureSampleCompareOffset_Texture3D_name;
    TextureSampleCompareOffset_Texture3D.backendIndex = 2393;
    TextureSampleCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompareOffset_Texture3D.parameters = TextureSampleCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D)->signature = "textureSampleCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3) f32"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D)->name = "textureSampleCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with SampledTexture3D, Float32x3, Float32, Float32x3
    SampledTextureSampleCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleCompareOffset_Texture3D.name = SampledTextureSampleCompareOffset_Texture3D_name;
    SampledTextureSampleCompareOffset_Texture3D.backendIndex = 2394;
    SampledTextureSampleCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompareOffset_Texture3D.parameters = SampledTextureSampleCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D)->signature = "textureSampleCompareOffset(uniform *textureSampled3D,f32x3,f32,f32x3) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D)->name = "textureSampleCompareOffset(uniform *textureSampled3D,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
    TextureSampleCompareOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleCompareOffset_Texture1DArray_texture.type.modifiers = TextureSampleCompareOffset_Texture1DArray_texture_modifiers;
    TextureSampleCompareOffset_Texture1DArray_texture.type.modifierValues = TextureSampleCompareOffset_Texture1DArray_texture_modifierValues;
    TextureSampleCompareOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture1DArray_sampler.type.modifiers = TextureSampleCompareOffset_Texture1DArray_sampler_modifiers;
    TextureSampleCompareOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleCompareOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture1DArray_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleCompareOffset_Texture1DArray.name = TextureSampleCompareOffset_Texture1DArray_name;
    TextureSampleCompareOffset_Texture1DArray.backendIndex = 2395;
    TextureSampleCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompareOffset_Texture1DArray.parameters = TextureSampleCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray)->signature = "textureSampleCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32x2) f32"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray)->name = "textureSampleCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with SampledTexture1DArray, Float32x2, Float32, Float32x2
    SampledTextureSampleCompareOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleCompareOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleCompareOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleCompareOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleCompareOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleCompareOffset_Texture1DArray.name = SampledTextureSampleCompareOffset_Texture1DArray_name;
    SampledTextureSampleCompareOffset_Texture1DArray.backendIndex = 2396;
    SampledTextureSampleCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray.parameters = SampledTextureSampleCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray)->signature = "textureSampleCompareOffset(uniform *textureSampled1DArray,f32x2,f32,f32x2) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray)->name = "textureSampleCompareOffset(uniform *textureSampled1DArray,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
    TextureSampleCompareOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleCompareOffset_Texture2DArray_texture.type.modifiers = TextureSampleCompareOffset_Texture2DArray_texture_modifiers;
    TextureSampleCompareOffset_Texture2DArray_texture.type.modifierValues = TextureSampleCompareOffset_Texture2DArray_texture_modifierValues;
    TextureSampleCompareOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture2DArray_sampler.type.modifiers = TextureSampleCompareOffset_Texture2DArray_sampler_modifiers;
    TextureSampleCompareOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleCompareOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture2DArray_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleCompareOffset_Texture2DArray.name = TextureSampleCompareOffset_Texture2DArray_name;
    TextureSampleCompareOffset_Texture2DArray.backendIndex = 2397;
    TextureSampleCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompareOffset_Texture2DArray.parameters = TextureSampleCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray)->signature = "textureSampleCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32x3) f32"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray)->name = "textureSampleCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with SampledTexture2DArray, Float32x3, Float32, Float32x3
    SampledTextureSampleCompareOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleCompareOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleCompareOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleCompareOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleCompareOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleCompareOffset_Texture2DArray.name = SampledTextureSampleCompareOffset_Texture2DArray_name;
    SampledTextureSampleCompareOffset_Texture2DArray.backendIndex = 2398;
    SampledTextureSampleCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray.parameters = SampledTextureSampleCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray)->signature = "textureSampleCompareOffset(uniform *textureSampled2DArray,f32x3,f32,f32x3) f32"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray)->name = "textureSampleCompareOffset(uniform *textureSampled2DArray,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProjCompare_Texture1D_texture.type.modifiers = TextureSampleProjCompare_Texture1D_texture_modifiers;
    TextureSampleProjCompare_Texture1D_texture.type.modifierValues = TextureSampleProjCompare_Texture1D_texture_modifierValues;
    TextureSampleProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompare_Texture1D_sampler.type.modifiers = TextureSampleProjCompare_Texture1D_sampler_modifiers;
    TextureSampleProjCompare_Texture1D_sampler.type.modifierValues = TextureSampleProjCompare_Texture1D_sampler_modifierValues;
    TextureSampleProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture1D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    TextureSampleProjCompare_Texture1D.name = TextureSampleProjCompare_Texture1D_name;
    TextureSampleProjCompare_Texture1D.backendIndex = 2399;
    TextureSampleProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleProjCompare_Texture1D.parameters = TextureSampleProjCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D)->signature = "textureSampleProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D)->name = "textureSampleProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProjCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleProjCompare_Texture1D_texture.type.modifiers = SampledTextureSampleProjCompare_Texture1D_texture_modifiers;
    SampledTextureSampleProjCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleProjCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    SampledTextureSampleProjCompare_Texture1D.name = SampledTextureSampleProjCompare_Texture1D_name;
    SampledTextureSampleProjCompare_Texture1D.backendIndex = 2400;
    SampledTextureSampleProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D.parameters = SampledTextureSampleProjCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D)->signature = "textureSampleProjCompare(uniform *textureSampled1D,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D)->name = "textureSampleProjCompare(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *textureSampled1D, coordinate : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProjCompare_Texture2D_texture.type.modifiers = TextureSampleProjCompare_Texture2D_texture_modifiers;
    TextureSampleProjCompare_Texture2D_texture.type.modifierValues = TextureSampleProjCompare_Texture2D_texture_modifierValues;
    TextureSampleProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompare_Texture2D_sampler.type.modifiers = TextureSampleProjCompare_Texture2D_sampler_modifiers;
    TextureSampleProjCompare_Texture2D_sampler.type.modifierValues = TextureSampleProjCompare_Texture2D_sampler_modifierValues;
    TextureSampleProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture2D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    TextureSampleProjCompare_Texture2D.name = TextureSampleProjCompare_Texture2D_name;
    TextureSampleProjCompare_Texture2D.backendIndex = 2401;
    TextureSampleProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleProjCompare_Texture2D.parameters = TextureSampleProjCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D)->signature = "textureSampleProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D)->name = "textureSampleProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with SampledTexture2D, Float32x2, Float32, Float32
    SampledTextureSampleProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProjCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleProjCompare_Texture2D_texture.type.modifiers = SampledTextureSampleProjCompare_Texture2D_texture_modifiers;
    SampledTextureSampleProjCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleProjCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture2D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    SampledTextureSampleProjCompare_Texture2D.name = SampledTextureSampleProjCompare_Texture2D_name;
    SampledTextureSampleProjCompare_Texture2D.backendIndex = 2402;
    SampledTextureSampleProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleProjCompare_Texture2D.parameters = SampledTextureSampleProjCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D)->signature = "textureSampleProjCompare(uniform *textureSampled2D,f32x2,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D)->name = "textureSampleProjCompare(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *textureSampled2D, coordinate : f32x2, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32
    TextureSampleProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProjCompare_Texture3D_texture.type.modifiers = TextureSampleProjCompare_Texture3D_texture_modifiers;
    TextureSampleProjCompare_Texture3D_texture.type.modifierValues = TextureSampleProjCompare_Texture3D_texture_modifierValues;
    TextureSampleProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompare_Texture3D_sampler.type.modifiers = TextureSampleProjCompare_Texture3D_sampler_modifiers;
    TextureSampleProjCompare_Texture3D_sampler.type.modifierValues = TextureSampleProjCompare_Texture3D_sampler_modifierValues;
    TextureSampleProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture3D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    TextureSampleProjCompare_Texture3D.name = TextureSampleProjCompare_Texture3D_name;
    TextureSampleProjCompare_Texture3D.backendIndex = 2403;
    TextureSampleProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleProjCompare_Texture3D.parameters = TextureSampleProjCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D)->signature = "textureSampleProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D)->name = "textureSampleProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with SampledTexture3D, Float32x3, Float32, Float32
    SampledTextureSampleProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProjCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleProjCompare_Texture3D_texture.type.modifiers = SampledTextureSampleProjCompare_Texture3D_texture_modifiers;
    SampledTextureSampleProjCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleProjCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture3D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    SampledTextureSampleProjCompare_Texture3D.name = SampledTextureSampleProjCompare_Texture3D_name;
    SampledTextureSampleProjCompare_Texture3D.backendIndex = 2404;
    SampledTextureSampleProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleProjCompare_Texture3D.parameters = SampledTextureSampleProjCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D)->signature = "textureSampleProjCompare(uniform *textureSampled3D,f32x3,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D)->name = "textureSampleProjCompare(uniform *textureSampled3D,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *textureSampled3D, coordinate : f32x3, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleProjCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleProjCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProjCompareOffset_Texture1D_texture.type.modifiers = TextureSampleProjCompareOffset_Texture1D_texture_modifiers;
    TextureSampleProjCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleProjCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleProjCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProjCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleProjCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleProjCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleProjCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleProjCompareOffset_Texture1D.name = TextureSampleProjCompareOffset_Texture1D_name;
    TextureSampleProjCompareOffset_Texture1D.backendIndex = 2405;
    TextureSampleProjCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleProjCompareOffset_Texture1D.parameters = TextureSampleProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D)->signature = "textureSampleProjCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D)->name = "textureSampleProjCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D)->nameWithVarNames = "textureSampleProjCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, proj : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleProjCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProjCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleProjCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleProjCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleProjCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleProjCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleProjCompareOffset_Texture1D.name = SampledTextureSampleProjCompareOffset_Texture1D_name;
    SampledTextureSampleProjCompareOffset_Texture1D.backendIndex = 2406;
    SampledTextureSampleProjCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture1D.parameters = SampledTextureSampleProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D)->signature = "textureSampleProjCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D)->name = "textureSampleProjCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D)->nameWithVarNames = "textureSampleProjCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, proj : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleProjCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleProjCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProjCompareOffset_Texture2D_texture.type.modifiers = TextureSampleProjCompareOffset_Texture2D_texture_modifiers;
    TextureSampleProjCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleProjCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleProjCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProjCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleProjCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleProjCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleProjCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjCompareOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleProjCompareOffset_Texture2D.name = TextureSampleProjCompareOffset_Texture2D_name;
    TextureSampleProjCompareOffset_Texture2D.backendIndex = 2407;
    TextureSampleProjCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleProjCompareOffset_Texture2D.parameters = TextureSampleProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D)->signature = "textureSampleProjCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2) f32"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D)->name = "textureSampleProjCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D)->nameWithVarNames = "textureSampleProjCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, proj : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleProjCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProjCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleProjCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleProjCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleProjCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleProjCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjCompareOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleProjCompareOffset_Texture2D.name = SampledTextureSampleProjCompareOffset_Texture2D_name;
    SampledTextureSampleProjCompareOffset_Texture2D.backendIndex = 2408;
    SampledTextureSampleProjCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture2D.parameters = SampledTextureSampleProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D)->signature = "textureSampleProjCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2) f32"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D)->name = "textureSampleProjCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D)->nameWithVarNames = "textureSampleProjCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, proj : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleProjCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleProjCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProjCompareOffset_Texture3D_texture.type.modifiers = TextureSampleProjCompareOffset_Texture3D_texture_modifiers;
    TextureSampleProjCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleProjCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleProjCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProjCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleProjCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleProjCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleProjCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjCompareOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleProjCompareOffset_Texture3D.name = TextureSampleProjCompareOffset_Texture3D_name;
    TextureSampleProjCompareOffset_Texture3D.backendIndex = 2409;
    TextureSampleProjCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleProjCompareOffset_Texture3D.parameters = TextureSampleProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D)->signature = "textureSampleProjCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3) f32"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D)->name = "textureSampleProjCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D)->nameWithVarNames = "textureSampleProjCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, proj : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleProjCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProjCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleProjCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleProjCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleProjCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleProjCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjCompareOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleProjCompareOffset_Texture3D.name = SampledTextureSampleProjCompareOffset_Texture3D_name;
    SampledTextureSampleProjCompareOffset_Texture3D.backendIndex = 2410;
    SampledTextureSampleProjCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture3D.parameters = SampledTextureSampleProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D)->signature = "textureSampleProjCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3) f32"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D)->name = "textureSampleProjCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D)->nameWithVarNames = "textureSampleProjCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, proj : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLod with Texture1D, Sampler, Float32, Float32
    TextureSampleLod_Texture1D_texture.name = "texture"_c;
    TextureSampleLod_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLod_Texture1D_texture.type.modifiers = TextureSampleLod_Texture1D_texture_modifiers;
    TextureSampleLod_Texture1D_texture.type.modifierValues = TextureSampleLod_Texture1D_texture_modifierValues;
    TextureSampleLod_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLod_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture1D_sampler.type.modifiers = TextureSampleLod_Texture1D_sampler_modifiers;
    TextureSampleLod_Texture1D_sampler.type.modifierValues = TextureSampleLod_Texture1D_sampler_modifierValues;
    TextureSampleLod_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture1D_lod.name = "lod"_c;
    TextureSampleLod_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    TextureSampleLod_Texture1D.name = TextureSampleLod_Texture1D_name;
    TextureSampleLod_Texture1D.backendIndex = 2411;
    TextureSampleLod_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_Texture1D.parameters = TextureSampleLod_Texture1D_args;
    Symbol::Resolved(&TextureSampleLod_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLod_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture1D)->signature = "textureSampleLod(uniform *texture1D,uniform *sampler,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleLod_Texture1D)->name = "textureSampleLod(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture1D)->nameWithVarNames = "textureSampleLod(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with SampledTexture1D, Float32, Float32
    SampledTextureSampleLod_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLod_Texture1D_texture.type.modifiers = SampledTextureSampleLod_Texture1D_texture_modifiers;
    SampledTextureSampleLod_Texture1D_texture.type.modifierValues = SampledTextureSampleLod_Texture1D_texture_modifierValues;
    SampledTextureSampleLod_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    SampledTextureSampleLod_Texture1D.name = SampledTextureSampleLod_Texture1D_name;
    SampledTextureSampleLod_Texture1D.backendIndex = 2412;
    SampledTextureSampleLod_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_Texture1D.parameters = SampledTextureSampleLod_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D)->signature = "textureSampleLod(uniform *textureSampled1D,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D)->name = "textureSampleLod(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D)->nameWithVarNames = "textureSampleLod(texture : uniform *textureSampled1D, coordinate : f32, lod : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture2D, Sampler, Float32x2, Float32
    TextureSampleLod_Texture2D_texture.name = "texture"_c;
    TextureSampleLod_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLod_Texture2D_texture.type.modifiers = TextureSampleLod_Texture2D_texture_modifiers;
    TextureSampleLod_Texture2D_texture.type.modifierValues = TextureSampleLod_Texture2D_texture_modifierValues;
    TextureSampleLod_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLod_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture2D_sampler.type.modifiers = TextureSampleLod_Texture2D_sampler_modifiers;
    TextureSampleLod_Texture2D_sampler.type.modifierValues = TextureSampleLod_Texture2D_sampler_modifierValues;
    TextureSampleLod_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLod_Texture2D_lod.name = "lod"_c;
    TextureSampleLod_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    TextureSampleLod_Texture2D.name = TextureSampleLod_Texture2D_name;
    TextureSampleLod_Texture2D.backendIndex = 2413;
    TextureSampleLod_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_Texture2D.parameters = TextureSampleLod_Texture2D_args;
    Symbol::Resolved(&TextureSampleLod_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLod_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLod_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture2D)->signature = "textureSampleLod(uniform *texture2D,uniform *sampler,f32x2,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleLod_Texture2D)->name = "textureSampleLod(uniform *texture2D,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture2D)->nameWithVarNames = "textureSampleLod(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with SampledTexture2D, Float32x2, Float32
    SampledTextureSampleLod_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLod_Texture2D_texture.type.modifiers = SampledTextureSampleLod_Texture2D_texture_modifiers;
    SampledTextureSampleLod_Texture2D_texture.type.modifierValues = SampledTextureSampleLod_Texture2D_texture_modifierValues;
    SampledTextureSampleLod_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLod_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    SampledTextureSampleLod_Texture2D.name = SampledTextureSampleLod_Texture2D_name;
    SampledTextureSampleLod_Texture2D.backendIndex = 2414;
    SampledTextureSampleLod_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_Texture2D.parameters = SampledTextureSampleLod_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D)->signature = "textureSampleLod(uniform *textureSampled2D,f32x2,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D)->name = "textureSampleLod(uniform *textureSampled2D,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D)->nameWithVarNames = "textureSampleLod(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture3D, Sampler, Float32x3, Float32
    TextureSampleLod_Texture3D_texture.name = "texture"_c;
    TextureSampleLod_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLod_Texture3D_texture.type.modifiers = TextureSampleLod_Texture3D_texture_modifiers;
    TextureSampleLod_Texture3D_texture.type.modifierValues = TextureSampleLod_Texture3D_texture_modifierValues;
    TextureSampleLod_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLod_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture3D_sampler.type.modifiers = TextureSampleLod_Texture3D_sampler_modifiers;
    TextureSampleLod_Texture3D_sampler.type.modifierValues = TextureSampleLod_Texture3D_sampler_modifierValues;
    TextureSampleLod_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLod_Texture3D_lod.name = "lod"_c;
    TextureSampleLod_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    TextureSampleLod_Texture3D.name = TextureSampleLod_Texture3D_name;
    TextureSampleLod_Texture3D.backendIndex = 2415;
    TextureSampleLod_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_Texture3D.parameters = TextureSampleLod_Texture3D_args;
    Symbol::Resolved(&TextureSampleLod_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLod_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLod_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture3D)->signature = "textureSampleLod(uniform *texture3D,uniform *sampler,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleLod_Texture3D)->name = "textureSampleLod(uniform *texture3D,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture3D)->nameWithVarNames = "textureSampleLod(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with SampledTexture3D, Float32x3, Float32
    SampledTextureSampleLod_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLod_Texture3D_texture.type.modifiers = SampledTextureSampleLod_Texture3D_texture_modifiers;
    SampledTextureSampleLod_Texture3D_texture.type.modifierValues = SampledTextureSampleLod_Texture3D_texture_modifierValues;
    SampledTextureSampleLod_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLod_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    SampledTextureSampleLod_Texture3D.name = SampledTextureSampleLod_Texture3D_name;
    SampledTextureSampleLod_Texture3D.backendIndex = 2416;
    SampledTextureSampleLod_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_Texture3D.parameters = SampledTextureSampleLod_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D)->signature = "textureSampleLod(uniform *textureSampled3D,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D)->name = "textureSampleLod(uniform *textureSampled3D,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D)->nameWithVarNames = "textureSampleLod(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with TextureCube, Sampler, Float32x3, Float32
    TextureSampleLod_TextureCube_texture.name = "texture"_c;
    TextureSampleLod_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSampleLod_TextureCube_texture.type.modifiers = TextureSampleLod_TextureCube_texture_modifiers;
    TextureSampleLod_TextureCube_texture.type.modifierValues = TextureSampleLod_TextureCube_texture_modifierValues;
    TextureSampleLod_TextureCube_sampler.name = "sampler"_c;
    TextureSampleLod_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_TextureCube_sampler.type.modifiers = TextureSampleLod_TextureCube_sampler_modifiers;
    TextureSampleLod_TextureCube_sampler.type.modifierValues = TextureSampleLod_TextureCube_sampler_modifierValues;
    TextureSampleLod_TextureCube_coordinate.name = "coordinate"_c;
    TextureSampleLod_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLod_TextureCube_lod.name = "lod"_c;
    TextureSampleLod_TextureCube_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_TextureCube.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    TextureSampleLod_TextureCube.name = TextureSampleLod_TextureCube_name;
    TextureSampleLod_TextureCube.backendIndex = 2417;
    TextureSampleLod_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_TextureCube.parameters = TextureSampleLod_TextureCube_args;
    Symbol::Resolved(&TextureSampleLod_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSampleLod_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLod_TextureCube_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_TextureCube)->signature = "textureSampleLod(uniform *textureCube,uniform *sampler,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleLod_TextureCube)->name = "textureSampleLod(uniform *textureCube,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_TextureCube)->nameWithVarNames = "textureSampleLod(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : f32x3, lod : f32)"_c;
    Symbol::Resolved(&TextureSampleLod_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with SampledTextureCube, Float32x3, Float32
    SampledTextureSampleLod_TextureCube_texture.name = "texture"_c;
    SampledTextureSampleLod_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureSampleLod_TextureCube_texture.type.modifiers = SampledTextureSampleLod_TextureCube_texture_modifiers;
    SampledTextureSampleLod_TextureCube_texture.type.modifierValues = SampledTextureSampleLod_TextureCube_texture_modifierValues;
    SampledTextureSampleLod_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLod_TextureCube_lod.name = "lod"_c;
    SampledTextureSampleLod_TextureCube_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_TextureCube.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    SampledTextureSampleLod_TextureCube.name = SampledTextureSampleLod_TextureCube_name;
    SampledTextureSampleLod_TextureCube.backendIndex = 2418;
    SampledTextureSampleLod_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_TextureCube.parameters = SampledTextureSampleLod_TextureCube_args;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube)->signature = "textureSampleLod(uniform *textureSampledCube,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube)->name = "textureSampleLod(uniform *textureSampledCube,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube)->nameWithVarNames = "textureSampleLod(texture : uniform *textureSampledCube, coordinate : f32x3, lod : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture1DArray, Sampler, Float32x2, Float32
    TextureSampleLod_Texture1DArray_texture.name = "texture"_c;
    TextureSampleLod_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleLod_Texture1DArray_texture.type.modifiers = TextureSampleLod_Texture1DArray_texture_modifiers;
    TextureSampleLod_Texture1DArray_texture.type.modifierValues = TextureSampleLod_Texture1DArray_texture_modifierValues;
    TextureSampleLod_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleLod_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture1DArray_sampler.type.modifiers = TextureSampleLod_Texture1DArray_sampler_modifiers;
    TextureSampleLod_Texture1DArray_sampler.type.modifierValues = TextureSampleLod_Texture1DArray_sampler_modifierValues;
    TextureSampleLod_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLod_Texture1DArray_lod.name = "lod"_c;
    TextureSampleLod_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    TextureSampleLod_Texture1DArray.name = TextureSampleLod_Texture1DArray_name;
    TextureSampleLod_Texture1DArray.backendIndex = 2419;
    TextureSampleLod_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_Texture1DArray.parameters = TextureSampleLod_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray)->signature = "textureSampleLod(uniform *texture1DArray,uniform *sampler,f32x2,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray)->name = "textureSampleLod(uniform *texture1DArray,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray)->nameWithVarNames = "textureSampleLod(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, lod : f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with SampledTexture1DArray, Float32x2, Float32
    SampledTextureSampleLod_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleLod_Texture1DArray_texture.type.modifiers = SampledTextureSampleLod_Texture1DArray_texture_modifiers;
    SampledTextureSampleLod_Texture1DArray_texture.type.modifierValues = SampledTextureSampleLod_Texture1DArray_texture_modifierValues;
    SampledTextureSampleLod_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLod_Texture1DArray_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    SampledTextureSampleLod_Texture1DArray.name = SampledTextureSampleLod_Texture1DArray_name;
    SampledTextureSampleLod_Texture1DArray.backendIndex = 2420;
    SampledTextureSampleLod_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_Texture1DArray.parameters = SampledTextureSampleLod_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray)->signature = "textureSampleLod(uniform *textureSampled1DArray,f32x2,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray)->name = "textureSampleLod(uniform *textureSampled1DArray,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray)->nameWithVarNames = "textureSampleLod(texture : uniform *textureSampled1DArray, coordinate : f32x2, lod : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture2DArray, Sampler, Float32x3, Float32
    TextureSampleLod_Texture2DArray_texture.name = "texture"_c;
    TextureSampleLod_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleLod_Texture2DArray_texture.type.modifiers = TextureSampleLod_Texture2DArray_texture_modifiers;
    TextureSampleLod_Texture2DArray_texture.type.modifierValues = TextureSampleLod_Texture2DArray_texture_modifierValues;
    TextureSampleLod_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleLod_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture2DArray_sampler.type.modifiers = TextureSampleLod_Texture2DArray_sampler_modifiers;
    TextureSampleLod_Texture2DArray_sampler.type.modifierValues = TextureSampleLod_Texture2DArray_sampler_modifierValues;
    TextureSampleLod_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLod_Texture2DArray_lod.name = "lod"_c;
    TextureSampleLod_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    TextureSampleLod_Texture2DArray.name = TextureSampleLod_Texture2DArray_name;
    TextureSampleLod_Texture2DArray.backendIndex = 2421;
    TextureSampleLod_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_Texture2DArray.parameters = TextureSampleLod_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray)->signature = "textureSampleLod(uniform *texture2DArray,uniform *sampler,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray)->name = "textureSampleLod(uniform *texture2DArray,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray)->nameWithVarNames = "textureSampleLod(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, lod : f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with SampledTexture2DArray, Float32x3, Float32
    SampledTextureSampleLod_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleLod_Texture2DArray_texture.type.modifiers = SampledTextureSampleLod_Texture2DArray_texture_modifiers;
    SampledTextureSampleLod_Texture2DArray_texture.type.modifierValues = SampledTextureSampleLod_Texture2DArray_texture_modifierValues;
    SampledTextureSampleLod_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLod_Texture2DArray_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    SampledTextureSampleLod_Texture2DArray.name = SampledTextureSampleLod_Texture2DArray_name;
    SampledTextureSampleLod_Texture2DArray.backendIndex = 2422;
    SampledTextureSampleLod_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_Texture2DArray.parameters = SampledTextureSampleLod_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray)->signature = "textureSampleLod(uniform *textureSampled2DArray,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray)->name = "textureSampleLod(uniform *textureSampled2DArray,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray)->nameWithVarNames = "textureSampleLod(texture : uniform *textureSampled2DArray, coordinate : f32x3, lod : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with TextureCubeArray, Sampler, Float32x4, Float32
    TextureSampleLod_TextureCubeArray_texture.name = "texture"_c;
    TextureSampleLod_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSampleLod_TextureCubeArray_texture.type.modifiers = TextureSampleLod_TextureCubeArray_texture_modifiers;
    TextureSampleLod_TextureCubeArray_texture.type.modifierValues = TextureSampleLod_TextureCubeArray_texture_modifierValues;
    TextureSampleLod_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSampleLod_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_TextureCubeArray_sampler.type.modifiers = TextureSampleLod_TextureCubeArray_sampler_modifiers;
    TextureSampleLod_TextureCubeArray_sampler.type.modifierValues = TextureSampleLod_TextureCubeArray_sampler_modifierValues;
    TextureSampleLod_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSampleLod_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSampleLod_TextureCubeArray_lod.name = "lod"_c;
    TextureSampleLod_TextureCubeArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_TextureCubeArray.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    TextureSampleLod_TextureCubeArray.name = TextureSampleLod_TextureCubeArray_name;
    TextureSampleLod_TextureCubeArray.backendIndex = 2423;
    TextureSampleLod_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_TextureCubeArray.parameters = TextureSampleLod_TextureCubeArray_args;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray)->signature = "textureSampleLod(uniform *textureCubeArray,uniform *sampler,f32x4,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray)->name = "textureSampleLod(uniform *textureCubeArray,uniform *sampler,f32x4,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray)->nameWithVarNames = "textureSampleLod(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : f32x4, lod : f32)"_c;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with SampledTextureCubeArray, Float32x4, Float32
    SampledTextureSampleLod_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSampleLod_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureSampleLod_TextureCubeArray_texture.type.modifiers = SampledTextureSampleLod_TextureCubeArray_texture_modifiers;
    SampledTextureSampleLod_TextureCubeArray_texture.type.modifierValues = SampledTextureSampleLod_TextureCubeArray_texture_modifierValues;
    SampledTextureSampleLod_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleLod_TextureCubeArray_lod.name = "lod"_c;
    SampledTextureSampleLod_TextureCubeArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_TextureCubeArray.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    SampledTextureSampleLod_TextureCubeArray.name = SampledTextureSampleLod_TextureCubeArray_name;
    SampledTextureSampleLod_TextureCubeArray.backendIndex = 2424;
    SampledTextureSampleLod_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_TextureCubeArray.parameters = SampledTextureSampleLod_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray)->signature = "textureSampleLod(uniform *textureSampledCubeArray,f32x4,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray)->name = "textureSampleLod(uniform *textureSampledCubeArray,f32x4,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray)->nameWithVarNames = "textureSampleLod(texture : uniform *textureSampledCubeArray, coordinate : f32x4, lod : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleLodOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleLodOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodOffset_Texture1D_texture.type.modifiers = TextureSampleLodOffset_Texture1D_texture_modifiers;
    TextureSampleLodOffset_Texture1D_texture.type.modifierValues = TextureSampleLodOffset_Texture1D_texture_modifierValues;
    TextureSampleLodOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodOffset_Texture1D_sampler.type.modifiers = TextureSampleLodOffset_Texture1D_sampler_modifiers;
    TextureSampleLodOffset_Texture1D_sampler.type.modifierValues = TextureSampleLodOffset_Texture1D_sampler_modifierValues;
    TextureSampleLodOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture1D_lod.name = "lod"_c;
    TextureSampleLodOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleLodOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    TextureSampleLodOffset_Texture1D.name = TextureSampleLodOffset_Texture1D_name;
    TextureSampleLodOffset_Texture1D.backendIndex = 2425;
    TextureSampleLodOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodOffset_Texture1D.parameters = TextureSampleLodOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D)->signature = "textureSampleLodOffset(uniform *texture1D,uniform *sampler,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D)->name = "textureSampleLodOffset(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleLodOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLodOffset_Texture1D_texture.type.modifiers = SampledTextureSampleLodOffset_Texture1D_texture_modifiers;
    SampledTextureSampleLodOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleLodOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleLodOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleLodOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    SampledTextureSampleLodOffset_Texture1D.name = SampledTextureSampleLodOffset_Texture1D_name;
    SampledTextureSampleLodOffset_Texture1D.backendIndex = 2426;
    SampledTextureSampleLodOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodOffset_Texture1D.parameters = SampledTextureSampleLodOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D)->signature = "textureSampleLodOffset(uniform *textureSampled1D,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D)->name = "textureSampleLodOffset(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *textureSampled1D, coordinate : f32, lod : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
    TextureSampleLodOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleLodOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodOffset_Texture2D_texture.type.modifiers = TextureSampleLodOffset_Texture2D_texture_modifiers;
    TextureSampleLodOffset_Texture2D_texture.type.modifierValues = TextureSampleLodOffset_Texture2D_texture_modifierValues;
    TextureSampleLodOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodOffset_Texture2D_sampler.type.modifiers = TextureSampleLodOffset_Texture2D_sampler_modifiers;
    TextureSampleLodOffset_Texture2D_sampler.type.modifierValues = TextureSampleLodOffset_Texture2D_sampler_modifierValues;
    TextureSampleLodOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodOffset_Texture2D_lod.name = "lod"_c;
    TextureSampleLodOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleLodOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    TextureSampleLodOffset_Texture2D.name = TextureSampleLodOffset_Texture2D_name;
    TextureSampleLodOffset_Texture2D.backendIndex = 2427;
    TextureSampleLodOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodOffset_Texture2D.parameters = TextureSampleLodOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D)->signature = "textureSampleLodOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D)->name = "textureSampleLodOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with SampledTexture2D, Float32x2, Float32, Float32x2
    SampledTextureSampleLodOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLodOffset_Texture2D_texture.type.modifiers = SampledTextureSampleLodOffset_Texture2D_texture_modifiers;
    SampledTextureSampleLodOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleLodOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleLodOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodOffset_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleLodOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    SampledTextureSampleLodOffset_Texture2D.name = SampledTextureSampleLodOffset_Texture2D_name;
    SampledTextureSampleLodOffset_Texture2D.backendIndex = 2428;
    SampledTextureSampleLodOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodOffset_Texture2D.parameters = SampledTextureSampleLodOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D)->signature = "textureSampleLodOffset(uniform *textureSampled2D,f32x2,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D)->name = "textureSampleLodOffset(uniform *textureSampled2D,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
    TextureSampleLodOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleLodOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodOffset_Texture3D_texture.type.modifiers = TextureSampleLodOffset_Texture3D_texture_modifiers;
    TextureSampleLodOffset_Texture3D_texture.type.modifierValues = TextureSampleLodOffset_Texture3D_texture_modifierValues;
    TextureSampleLodOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodOffset_Texture3D_sampler.type.modifiers = TextureSampleLodOffset_Texture3D_sampler_modifiers;
    TextureSampleLodOffset_Texture3D_sampler.type.modifierValues = TextureSampleLodOffset_Texture3D_sampler_modifierValues;
    TextureSampleLodOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodOffset_Texture3D_lod.name = "lod"_c;
    TextureSampleLodOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleLodOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    TextureSampleLodOffset_Texture3D.name = TextureSampleLodOffset_Texture3D_name;
    TextureSampleLodOffset_Texture3D.backendIndex = 2429;
    TextureSampleLodOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodOffset_Texture3D.parameters = TextureSampleLodOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D)->signature = "textureSampleLodOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D)->name = "textureSampleLodOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with SampledTexture3D, Float32x3, Float32, Float32x3
    SampledTextureSampleLodOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLodOffset_Texture3D_texture.type.modifiers = SampledTextureSampleLodOffset_Texture3D_texture_modifiers;
    SampledTextureSampleLodOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleLodOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleLodOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodOffset_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleLodOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    SampledTextureSampleLodOffset_Texture3D.name = SampledTextureSampleLodOffset_Texture3D_name;
    SampledTextureSampleLodOffset_Texture3D.backendIndex = 2430;
    SampledTextureSampleLodOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodOffset_Texture3D.parameters = SampledTextureSampleLodOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D)->signature = "textureSampleLodOffset(uniform *textureSampled3D,f32x3,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D)->name = "textureSampleLodOffset(uniform *textureSampled3D,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
    TextureSampleLodOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleLodOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleLodOffset_Texture1DArray_texture.type.modifiers = TextureSampleLodOffset_Texture1DArray_texture_modifiers;
    TextureSampleLodOffset_Texture1DArray_texture.type.modifierValues = TextureSampleLodOffset_Texture1DArray_texture_modifierValues;
    TextureSampleLodOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleLodOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodOffset_Texture1DArray_sampler.type.modifiers = TextureSampleLodOffset_Texture1DArray_sampler_modifiers;
    TextureSampleLodOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleLodOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleLodOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodOffset_Texture1DArray_lod.name = "lod"_c;
    TextureSampleLodOffset_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleLodOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    TextureSampleLodOffset_Texture1DArray.name = TextureSampleLodOffset_Texture1DArray_name;
    TextureSampleLodOffset_Texture1DArray.backendIndex = 2431;
    TextureSampleLodOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodOffset_Texture1DArray.parameters = TextureSampleLodOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray)->signature = "textureSampleLodOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray)->name = "textureSampleLodOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, lod : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with SampledTexture1DArray, Float32x2, Float32, Float32x2
    SampledTextureSampleLodOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleLodOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleLodOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleLodOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleLodOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleLodOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleLodOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodOffset_Texture1DArray_lod.name = "lod"_c;
    SampledTextureSampleLodOffset_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleLodOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    SampledTextureSampleLodOffset_Texture1DArray.name = SampledTextureSampleLodOffset_Texture1DArray_name;
    SampledTextureSampleLodOffset_Texture1DArray.backendIndex = 2432;
    SampledTextureSampleLodOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodOffset_Texture1DArray.parameters = SampledTextureSampleLodOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray)->signature = "textureSampleLodOffset(uniform *textureSampled1DArray,f32x2,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray)->name = "textureSampleLodOffset(uniform *textureSampled1DArray,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, lod : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
    TextureSampleLodOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleLodOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleLodOffset_Texture2DArray_texture.type.modifiers = TextureSampleLodOffset_Texture2DArray_texture_modifiers;
    TextureSampleLodOffset_Texture2DArray_texture.type.modifierValues = TextureSampleLodOffset_Texture2DArray_texture_modifierValues;
    TextureSampleLodOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleLodOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodOffset_Texture2DArray_sampler.type.modifiers = TextureSampleLodOffset_Texture2DArray_sampler_modifiers;
    TextureSampleLodOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleLodOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleLodOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodOffset_Texture2DArray_lod.name = "lod"_c;
    TextureSampleLodOffset_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleLodOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    TextureSampleLodOffset_Texture2DArray.name = TextureSampleLodOffset_Texture2DArray_name;
    TextureSampleLodOffset_Texture2DArray.backendIndex = 2433;
    TextureSampleLodOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodOffset_Texture2DArray.parameters = TextureSampleLodOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray)->signature = "textureSampleLodOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray)->name = "textureSampleLodOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, lod : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with SampledTexture2DArray, Float32x3, Float32, Float32x3
    SampledTextureSampleLodOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleLodOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleLodOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleLodOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleLodOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleLodOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleLodOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodOffset_Texture2DArray_lod.name = "lod"_c;
    SampledTextureSampleLodOffset_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleLodOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    SampledTextureSampleLodOffset_Texture2DArray.name = SampledTextureSampleLodOffset_Texture2DArray_name;
    SampledTextureSampleLodOffset_Texture2DArray.backendIndex = 2434;
    SampledTextureSampleLodOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodOffset_Texture2DArray.parameters = SampledTextureSampleLodOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray)->signature = "textureSampleLodOffset(uniform *textureSampled2DArray,f32x3,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray)->name = "textureSampleLodOffset(uniform *textureSampled2DArray,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, lod : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleLodProj_Texture1D_texture.name = "texture"_c;
    TextureSampleLodProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodProj_Texture1D_texture.type.modifiers = TextureSampleLodProj_Texture1D_texture_modifiers;
    TextureSampleLodProj_Texture1D_texture.type.modifierValues = TextureSampleLodProj_Texture1D_texture_modifierValues;
    TextureSampleLodProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProj_Texture1D_sampler.type.modifiers = TextureSampleLodProj_Texture1D_sampler_modifiers;
    TextureSampleLodProj_Texture1D_sampler.type.modifierValues = TextureSampleLodProj_Texture1D_sampler_modifierValues;
    TextureSampleLodProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture1D_lod.name = "lod"_c;
    TextureSampleLodProj_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture1D_proj.name = "proj"_c;
    TextureSampleLodProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection"_c;
    TextureSampleLodProj_Texture1D.name = TextureSampleLodProj_Texture1D_name;
    TextureSampleLodProj_Texture1D.backendIndex = 2435;
    TextureSampleLodProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProj_Texture1D.parameters = TextureSampleLodProj_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D)->signature = "textureSampleLodProj(uniform *texture1D,uniform *sampler,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D)->name = "textureSampleLodProj(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D)->nameWithVarNames = "textureSampleLodProj(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleLodProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodProj_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLodProj_Texture1D_texture.type.modifiers = SampledTextureSampleLodProj_Texture1D_texture_modifiers;
    SampledTextureSampleLodProj_Texture1D_texture.type.modifierValues = SampledTextureSampleLodProj_Texture1D_texture_modifierValues;
    SampledTextureSampleLodProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodProj_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleLodProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection"_c;
    SampledTextureSampleLodProj_Texture1D.name = SampledTextureSampleLodProj_Texture1D_name;
    SampledTextureSampleLodProj_Texture1D.backendIndex = 2436;
    SampledTextureSampleLodProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProj_Texture1D.parameters = SampledTextureSampleLodProj_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D)->signature = "textureSampleLodProj(uniform *textureSampled1D,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D)->name = "textureSampleLodProj(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D)->nameWithVarNames = "textureSampleLodProj(texture : uniform *textureSampled1D, coordinate : f32, lod : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleLodProj_Texture2D_texture.name = "texture"_c;
    TextureSampleLodProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodProj_Texture2D_texture.type.modifiers = TextureSampleLodProj_Texture2D_texture_modifiers;
    TextureSampleLodProj_Texture2D_texture.type.modifierValues = TextureSampleLodProj_Texture2D_texture_modifierValues;
    TextureSampleLodProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProj_Texture2D_sampler.type.modifiers = TextureSampleLodProj_Texture2D_sampler_modifiers;
    TextureSampleLodProj_Texture2D_sampler.type.modifierValues = TextureSampleLodProj_Texture2D_sampler_modifierValues;
    TextureSampleLodProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProj_Texture2D_lod.name = "lod"_c;
    TextureSampleLodProj_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture2D_proj.name = "proj"_c;
    TextureSampleLodProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection"_c;
    TextureSampleLodProj_Texture2D.name = TextureSampleLodProj_Texture2D_name;
    TextureSampleLodProj_Texture2D.backendIndex = 2437;
    TextureSampleLodProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProj_Texture2D.parameters = TextureSampleLodProj_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D)->signature = "textureSampleLodProj(uniform *texture2D,uniform *sampler,f32x2,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D)->name = "textureSampleLodProj(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D)->nameWithVarNames = "textureSampleLodProj(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with SampledTexture2D, Float32x2, Float32, Float32
    SampledTextureSampleLodProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodProj_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLodProj_Texture2D_texture.type.modifiers = SampledTextureSampleLodProj_Texture2D_texture_modifiers;
    SampledTextureSampleLodProj_Texture2D_texture.type.modifierValues = SampledTextureSampleLodProj_Texture2D_texture_modifierValues;
    SampledTextureSampleLodProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProj_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodProj_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleLodProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection"_c;
    SampledTextureSampleLodProj_Texture2D.name = SampledTextureSampleLodProj_Texture2D_name;
    SampledTextureSampleLodProj_Texture2D.backendIndex = 2438;
    SampledTextureSampleLodProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProj_Texture2D.parameters = SampledTextureSampleLodProj_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D)->signature = "textureSampleLodProj(uniform *textureSampled2D,f32x2,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D)->name = "textureSampleLodProj(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D)->nameWithVarNames = "textureSampleLodProj(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with Texture3D, Sampler, Float32x3, Float32, Float32
    TextureSampleLodProj_Texture3D_texture.name = "texture"_c;
    TextureSampleLodProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodProj_Texture3D_texture.type.modifiers = TextureSampleLodProj_Texture3D_texture_modifiers;
    TextureSampleLodProj_Texture3D_texture.type.modifierValues = TextureSampleLodProj_Texture3D_texture_modifierValues;
    TextureSampleLodProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProj_Texture3D_sampler.type.modifiers = TextureSampleLodProj_Texture3D_sampler_modifiers;
    TextureSampleLodProj_Texture3D_sampler.type.modifierValues = TextureSampleLodProj_Texture3D_sampler_modifierValues;
    TextureSampleLodProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProj_Texture3D_lod.name = "lod"_c;
    TextureSampleLodProj_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture3D_proj.name = "proj"_c;
    TextureSampleLodProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection"_c;
    TextureSampleLodProj_Texture3D.name = TextureSampleLodProj_Texture3D_name;
    TextureSampleLodProj_Texture3D.backendIndex = 2439;
    TextureSampleLodProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProj_Texture3D.parameters = TextureSampleLodProj_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D)->signature = "textureSampleLodProj(uniform *texture3D,uniform *sampler,f32x3,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D)->name = "textureSampleLodProj(uniform *texture3D,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D)->nameWithVarNames = "textureSampleLodProj(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with SampledTexture3D, Float32x3, Float32, Float32
    SampledTextureSampleLodProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodProj_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLodProj_Texture3D_texture.type.modifiers = SampledTextureSampleLodProj_Texture3D_texture_modifiers;
    SampledTextureSampleLodProj_Texture3D_texture.type.modifierValues = SampledTextureSampleLodProj_Texture3D_texture_modifierValues;
    SampledTextureSampleLodProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProj_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodProj_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleLodProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection"_c;
    SampledTextureSampleLodProj_Texture3D.name = SampledTextureSampleLodProj_Texture3D_name;
    SampledTextureSampleLodProj_Texture3D.backendIndex = 2440;
    SampledTextureSampleLodProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProj_Texture3D.parameters = SampledTextureSampleLodProj_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D)->signature = "textureSampleLodProj(uniform *textureSampled3D,f32x3,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D)->name = "textureSampleLodProj(uniform *textureSampled3D,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D)->nameWithVarNames = "textureSampleLodProj(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleLodProjOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleLodProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodProjOffset_Texture1D_texture.type.modifiers = TextureSampleLodProjOffset_Texture1D_texture_modifiers;
    TextureSampleLodProjOffset_Texture1D_texture.type.modifierValues = TextureSampleLodProjOffset_Texture1D_texture_modifierValues;
    TextureSampleLodProjOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodProjOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjOffset_Texture1D_sampler.type.modifiers = TextureSampleLodProjOffset_Texture1D_sampler_modifiers;
    TextureSampleLodProjOffset_Texture1D_sampler.type.modifierValues = TextureSampleLodProjOffset_Texture1D_sampler_modifierValues;
    TextureSampleLodProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture1D_lod.name = "lod"_c;
    TextureSampleLodProjOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleLodProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleLodProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with an offset applied to the coordinate"_c;
    TextureSampleLodProjOffset_Texture1D.name = TextureSampleLodProjOffset_Texture1D_name;
    TextureSampleLodProjOffset_Texture1D.backendIndex = 2441;
    TextureSampleLodProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProjOffset_Texture1D.parameters = TextureSampleLodProjOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D)->signature = "textureSampleLodProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D)->name = "textureSampleLodProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D)->nameWithVarNames = "textureSampleLodProjOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleLodProjOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodProjOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLodProjOffset_Texture1D_texture.type.modifiers = SampledTextureSampleLodProjOffset_Texture1D_texture_modifiers;
    SampledTextureSampleLodProjOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleLodProjOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleLodProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodProjOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleLodProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleLodProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleLodProjOffset_Texture1D.name = SampledTextureSampleLodProjOffset_Texture1D_name;
    SampledTextureSampleLodProjOffset_Texture1D.backendIndex = 2442;
    SampledTextureSampleLodProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProjOffset_Texture1D.parameters = SampledTextureSampleLodProjOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D)->signature = "textureSampleLodProjOffset(uniform *textureSampled1D,f32,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D)->name = "textureSampleLodProjOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D)->nameWithVarNames = "textureSampleLodProjOffset(texture : uniform *textureSampled1D, coordinate : f32, lod : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleLodProjOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleLodProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodProjOffset_Texture2D_texture.type.modifiers = TextureSampleLodProjOffset_Texture2D_texture_modifiers;
    TextureSampleLodProjOffset_Texture2D_texture.type.modifierValues = TextureSampleLodProjOffset_Texture2D_texture_modifierValues;
    TextureSampleLodProjOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodProjOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjOffset_Texture2D_sampler.type.modifiers = TextureSampleLodProjOffset_Texture2D_sampler_modifiers;
    TextureSampleLodProjOffset_Texture2D_sampler.type.modifierValues = TextureSampleLodProjOffset_Texture2D_sampler_modifierValues;
    TextureSampleLodProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjOffset_Texture2D_lod.name = "lod"_c;
    TextureSampleLodProjOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleLodProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleLodProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with an offset applied to the coordinate"_c;
    TextureSampleLodProjOffset_Texture2D.name = TextureSampleLodProjOffset_Texture2D_name;
    TextureSampleLodProjOffset_Texture2D.backendIndex = 2443;
    TextureSampleLodProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProjOffset_Texture2D.parameters = TextureSampleLodProjOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D)->signature = "textureSampleLodProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D)->name = "textureSampleLodProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D)->nameWithVarNames = "textureSampleLodProjOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleLodProjOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodProjOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLodProjOffset_Texture2D_texture.type.modifiers = SampledTextureSampleLodProjOffset_Texture2D_texture_modifiers;
    SampledTextureSampleLodProjOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleLodProjOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleLodProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjOffset_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodProjOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleLodProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleLodProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleLodProjOffset_Texture2D.name = SampledTextureSampleLodProjOffset_Texture2D_name;
    SampledTextureSampleLodProjOffset_Texture2D.backendIndex = 2444;
    SampledTextureSampleLodProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProjOffset_Texture2D.parameters = SampledTextureSampleLodProjOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D)->signature = "textureSampleLodProjOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D)->name = "textureSampleLodProjOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D)->nameWithVarNames = "textureSampleLodProjOffset(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleLodProjOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleLodProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodProjOffset_Texture3D_texture.type.modifiers = TextureSampleLodProjOffset_Texture3D_texture_modifiers;
    TextureSampleLodProjOffset_Texture3D_texture.type.modifierValues = TextureSampleLodProjOffset_Texture3D_texture_modifierValues;
    TextureSampleLodProjOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodProjOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjOffset_Texture3D_sampler.type.modifiers = TextureSampleLodProjOffset_Texture3D_sampler_modifiers;
    TextureSampleLodProjOffset_Texture3D_sampler.type.modifierValues = TextureSampleLodProjOffset_Texture3D_sampler_modifierValues;
    TextureSampleLodProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjOffset_Texture3D_lod.name = "lod"_c;
    TextureSampleLodProjOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleLodProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleLodProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with an offset applied to the coordinate"_c;
    TextureSampleLodProjOffset_Texture3D.name = TextureSampleLodProjOffset_Texture3D_name;
    TextureSampleLodProjOffset_Texture3D.backendIndex = 2445;
    TextureSampleLodProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProjOffset_Texture3D.parameters = TextureSampleLodProjOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D)->signature = "textureSampleLodProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D)->name = "textureSampleLodProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D)->nameWithVarNames = "textureSampleLodProjOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleLodProjOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodProjOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLodProjOffset_Texture3D_texture.type.modifiers = SampledTextureSampleLodProjOffset_Texture3D_texture_modifiers;
    SampledTextureSampleLodProjOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleLodProjOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleLodProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjOffset_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodProjOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleLodProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleLodProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleLodProjOffset_Texture3D.name = SampledTextureSampleLodProjOffset_Texture3D_name;
    SampledTextureSampleLodProjOffset_Texture3D.backendIndex = 2446;
    SampledTextureSampleLodProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProjOffset_Texture3D.parameters = SampledTextureSampleLodProjOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D)->signature = "textureSampleLodProjOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D)->name = "textureSampleLodProjOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D)->nameWithVarNames = "textureSampleLodProjOffset(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompare with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleLodCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodCompare_Texture1D_texture.type.modifiers = TextureSampleLodCompare_Texture1D_texture_modifiers;
    TextureSampleLodCompare_Texture1D_texture.type.modifierValues = TextureSampleLodCompare_Texture1D_texture_modifierValues;
    TextureSampleLodCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture1D_sampler.type.modifiers = TextureSampleLodCompare_Texture1D_sampler_modifiers;
    TextureSampleLodCompare_Texture1D_sampler.type.modifierValues = TextureSampleLodCompare_Texture1D_sampler_modifierValues;
    TextureSampleLodCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1D_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    TextureSampleLodCompare_Texture1D.name = TextureSampleLodCompare_Texture1D_name;
    TextureSampleLodCompare_Texture1D.backendIndex = 2447;
    TextureSampleLodCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompare_Texture1D.parameters = TextureSampleLodCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D)->signature = "textureSampleLodCompare(uniform *texture1D,uniform *sampler,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D)->name = "textureSampleLodCompare(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleLodCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLodCompare_Texture1D_texture.type.modifiers = SampledTextureSampleLodCompare_Texture1D_texture_modifiers;
    SampledTextureSampleLodCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleLodCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleLodCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    SampledTextureSampleLodCompare_Texture1D.name = SampledTextureSampleLodCompare_Texture1D_name;
    SampledTextureSampleLodCompare_Texture1D.backendIndex = 2448;
    SampledTextureSampleLodCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompare_Texture1D.parameters = SampledTextureSampleLodCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D)->signature = "textureSampleLodCompare(uniform *textureSampled1D,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D)->name = "textureSampleLodCompare(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *textureSampled1D, coordinate : f32, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleLodCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodCompare_Texture2D_texture.type.modifiers = TextureSampleLodCompare_Texture2D_texture_modifiers;
    TextureSampleLodCompare_Texture2D_texture.type.modifierValues = TextureSampleLodCompare_Texture2D_texture_modifierValues;
    TextureSampleLodCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture2D_sampler.type.modifiers = TextureSampleLodCompare_Texture2D_sampler_modifiers;
    TextureSampleLodCompare_Texture2D_sampler.type.modifierValues = TextureSampleLodCompare_Texture2D_sampler_modifierValues;
    TextureSampleLodCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompare_Texture2D_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    TextureSampleLodCompare_Texture2D.name = TextureSampleLodCompare_Texture2D_name;
    TextureSampleLodCompare_Texture2D.backendIndex = 2449;
    TextureSampleLodCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompare_Texture2D.parameters = TextureSampleLodCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D)->signature = "textureSampleLodCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D)->name = "textureSampleLodCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with SampledTexture2D, Float32x2, Float32, Float32
    SampledTextureSampleLodCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLodCompare_Texture2D_texture.type.modifiers = SampledTextureSampleLodCompare_Texture2D_texture_modifiers;
    SampledTextureSampleLodCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleLodCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleLodCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompare_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    SampledTextureSampleLodCompare_Texture2D.name = SampledTextureSampleLodCompare_Texture2D_name;
    SampledTextureSampleLodCompare_Texture2D.backendIndex = 2450;
    SampledTextureSampleLodCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompare_Texture2D.parameters = SampledTextureSampleLodCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D)->signature = "textureSampleLodCompare(uniform *textureSampled2D,f32x2,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D)->name = "textureSampleLodCompare(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with Texture3D, Sampler, Float32x3, Float32, Float32
    TextureSampleLodCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodCompare_Texture3D_texture.type.modifiers = TextureSampleLodCompare_Texture3D_texture_modifiers;
    TextureSampleLodCompare_Texture3D_texture.type.modifierValues = TextureSampleLodCompare_Texture3D_texture_modifierValues;
    TextureSampleLodCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture3D_sampler.type.modifiers = TextureSampleLodCompare_Texture3D_sampler_modifiers;
    TextureSampleLodCompare_Texture3D_sampler.type.modifierValues = TextureSampleLodCompare_Texture3D_sampler_modifierValues;
    TextureSampleLodCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompare_Texture3D_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    TextureSampleLodCompare_Texture3D.name = TextureSampleLodCompare_Texture3D_name;
    TextureSampleLodCompare_Texture3D.backendIndex = 2451;
    TextureSampleLodCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompare_Texture3D.parameters = TextureSampleLodCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D)->signature = "textureSampleLodCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D)->name = "textureSampleLodCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with SampledTexture3D, Float32x3, Float32, Float32
    SampledTextureSampleLodCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLodCompare_Texture3D_texture.type.modifiers = SampledTextureSampleLodCompare_Texture3D_texture_modifiers;
    SampledTextureSampleLodCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleLodCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleLodCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompare_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    SampledTextureSampleLodCompare_Texture3D.name = SampledTextureSampleLodCompare_Texture3D_name;
    SampledTextureSampleLodCompare_Texture3D.backendIndex = 2452;
    SampledTextureSampleLodCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompare_Texture3D.parameters = SampledTextureSampleLodCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D)->signature = "textureSampleLodCompare(uniform *textureSampled3D,f32x3,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D)->name = "textureSampleLodCompare(uniform *textureSampled3D,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with Texture1DArray, Sampler, Float32x2, Float32, Float32
    TextureSampleLodCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleLodCompare_Texture1DArray_texture.type.modifiers = TextureSampleLodCompare_Texture1DArray_texture_modifiers;
    TextureSampleLodCompare_Texture1DArray_texture.type.modifierValues = TextureSampleLodCompare_Texture1DArray_texture_modifierValues;
    TextureSampleLodCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture1DArray_sampler.type.modifiers = TextureSampleLodCompare_Texture1DArray_sampler_modifiers;
    TextureSampleLodCompare_Texture1DArray_sampler.type.modifierValues = TextureSampleLodCompare_Texture1DArray_sampler_modifierValues;
    TextureSampleLodCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompare_Texture1DArray_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    TextureSampleLodCompare_Texture1DArray.name = TextureSampleLodCompare_Texture1DArray_name;
    TextureSampleLodCompare_Texture1DArray.backendIndex = 2453;
    TextureSampleLodCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompare_Texture1DArray.parameters = TextureSampleLodCompare_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray)->signature = "textureSampleLodCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray)->name = "textureSampleLodCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with SampledTexture1DArray, Float32x2, Float32, Float32
    SampledTextureSampleLodCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleLodCompare_Texture1DArray_texture.type.modifiers = SampledTextureSampleLodCompare_Texture1DArray_texture_modifiers;
    SampledTextureSampleLodCompare_Texture1DArray_texture.type.modifierValues = SampledTextureSampleLodCompare_Texture1DArray_texture_modifierValues;
    SampledTextureSampleLodCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompare_Texture1DArray_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    SampledTextureSampleLodCompare_Texture1DArray.name = SampledTextureSampleLodCompare_Texture1DArray_name;
    SampledTextureSampleLodCompare_Texture1DArray.backendIndex = 2454;
    SampledTextureSampleLodCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompare_Texture1DArray.parameters = SampledTextureSampleLodCompare_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray)->signature = "textureSampleLodCompare(uniform *textureSampled1DArray,f32x2,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray)->name = "textureSampleLodCompare(uniform *textureSampled1DArray,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *textureSampled1DArray, coordinate : f32x2, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with Texture2DArray, Sampler, Float32x3, Float32, Float32
    TextureSampleLodCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleLodCompare_Texture2DArray_texture.type.modifiers = TextureSampleLodCompare_Texture2DArray_texture_modifiers;
    TextureSampleLodCompare_Texture2DArray_texture.type.modifierValues = TextureSampleLodCompare_Texture2DArray_texture_modifierValues;
    TextureSampleLodCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture2DArray_sampler.type.modifiers = TextureSampleLodCompare_Texture2DArray_sampler_modifiers;
    TextureSampleLodCompare_Texture2DArray_sampler.type.modifierValues = TextureSampleLodCompare_Texture2DArray_sampler_modifierValues;
    TextureSampleLodCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompare_Texture2DArray_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    TextureSampleLodCompare_Texture2DArray.name = TextureSampleLodCompare_Texture2DArray_name;
    TextureSampleLodCompare_Texture2DArray.backendIndex = 2455;
    TextureSampleLodCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompare_Texture2DArray.parameters = TextureSampleLodCompare_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray)->signature = "textureSampleLodCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray)->name = "textureSampleLodCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with SampledTexture2DArray, Float32x3, Float32, Float32
    SampledTextureSampleLodCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleLodCompare_Texture2DArray_texture.type.modifiers = SampledTextureSampleLodCompare_Texture2DArray_texture_modifiers;
    SampledTextureSampleLodCompare_Texture2DArray_texture.type.modifierValues = SampledTextureSampleLodCompare_Texture2DArray_texture_modifierValues;
    SampledTextureSampleLodCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompare_Texture2DArray_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    SampledTextureSampleLodCompare_Texture2DArray.name = SampledTextureSampleLodCompare_Texture2DArray_name;
    SampledTextureSampleLodCompare_Texture2DArray.backendIndex = 2456;
    SampledTextureSampleLodCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompare_Texture2DArray.parameters = SampledTextureSampleLodCompare_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray)->signature = "textureSampleLodCompare(uniform *textureSampled2DArray,f32x3,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray)->name = "textureSampleLodCompare(uniform *textureSampled2DArray,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *textureSampled2DArray, coordinate : f32x3, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleLodCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleLodCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodCompareOffset_Texture1D_texture.type.modifiers = TextureSampleLodCompareOffset_Texture1D_texture_modifiers;
    TextureSampleLodCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleLodCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleLodCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleLodCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleLodCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleLodCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleLodCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1D_lod.name = "lod"_c;
    TextureSampleLodCompareOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleLodCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleLodCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodCompareOffset_Texture1D.name = TextureSampleLodCompareOffset_Texture1D_name;
    TextureSampleLodCompareOffset_Texture1D.backendIndex = 2457;
    TextureSampleLodCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompareOffset_Texture1D.parameters = TextureSampleLodCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D)->signature = "textureSampleLodCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D)->name = "textureSampleLodCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleLodCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLodCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleLodCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleLodCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleLodCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleLodCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodCompareOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleLodCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleLodCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture1D.name = SampledTextureSampleLodCompareOffset_Texture1D_name;
    SampledTextureSampleLodCompareOffset_Texture1D.backendIndex = 2458;
    SampledTextureSampleLodCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1D.parameters = SampledTextureSampleLodCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D)->signature = "textureSampleLodCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D)->name = "textureSampleLodCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, lod : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleLodCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleLodCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodCompareOffset_Texture2D_texture.type.modifiers = TextureSampleLodCompareOffset_Texture2D_texture_modifiers;
    TextureSampleLodCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleLodCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleLodCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleLodCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleLodCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleLodCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleLodCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompareOffset_Texture2D_lod.name = "lod"_c;
    TextureSampleLodCompareOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleLodCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleLodCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodCompareOffset_Texture2D.name = TextureSampleLodCompareOffset_Texture2D_name;
    TextureSampleLodCompareOffset_Texture2D.backendIndex = 2459;
    TextureSampleLodCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompareOffset_Texture2D.parameters = TextureSampleLodCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D)->signature = "textureSampleLodCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2) f32"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D)->name = "textureSampleLodCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleLodCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLodCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleLodCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleLodCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleLodCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleLodCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompareOffset_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodCompareOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleLodCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleLodCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture2D.name = SampledTextureSampleLodCompareOffset_Texture2D_name;
    SampledTextureSampleLodCompareOffset_Texture2D.backendIndex = 2460;
    SampledTextureSampleLodCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2D.parameters = SampledTextureSampleLodCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D)->signature = "textureSampleLodCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D)->name = "textureSampleLodCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleLodCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleLodCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodCompareOffset_Texture3D_texture.type.modifiers = TextureSampleLodCompareOffset_Texture3D_texture_modifiers;
    TextureSampleLodCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleLodCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleLodCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleLodCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleLodCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleLodCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleLodCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompareOffset_Texture3D_lod.name = "lod"_c;
    TextureSampleLodCompareOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleLodCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleLodCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodCompareOffset_Texture3D.name = TextureSampleLodCompareOffset_Texture3D_name;
    TextureSampleLodCompareOffset_Texture3D.backendIndex = 2461;
    TextureSampleLodCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompareOffset_Texture3D.parameters = TextureSampleLodCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D)->signature = "textureSampleLodCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3) f32"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D)->name = "textureSampleLodCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleLodCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLodCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleLodCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleLodCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleLodCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleLodCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompareOffset_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodCompareOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleLodCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleLodCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture3D.name = SampledTextureSampleLodCompareOffset_Texture3D_name;
    SampledTextureSampleLodCompareOffset_Texture3D.backendIndex = 2462;
    SampledTextureSampleLodCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture3D.parameters = SampledTextureSampleLodCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D)->signature = "textureSampleLodCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D)->name = "textureSampleLodCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleLodCompareOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleLodCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleLodCompareOffset_Texture1DArray_texture.type.modifiers = TextureSampleLodCompareOffset_Texture1DArray_texture_modifiers;
    TextureSampleLodCompareOffset_Texture1DArray_texture.type.modifierValues = TextureSampleLodCompareOffset_Texture1DArray_texture_modifierValues;
    TextureSampleLodCompareOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleLodCompareOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompareOffset_Texture1DArray_sampler.type.modifiers = TextureSampleLodCompareOffset_Texture1DArray_sampler_modifiers;
    TextureSampleLodCompareOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleLodCompareOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleLodCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompareOffset_Texture1DArray_lod.name = "lod"_c;
    TextureSampleLodCompareOffset_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1DArray_compare.name = "compare"_c;
    TextureSampleLodCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleLodCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodCompareOffset_Texture1DArray.name = TextureSampleLodCompareOffset_Texture1DArray_name;
    TextureSampleLodCompareOffset_Texture1DArray.backendIndex = 2463;
    TextureSampleLodCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompareOffset_Texture1DArray.parameters = TextureSampleLodCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray)->signature = "textureSampleLodCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32,f32x2) f32"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray)->name = "textureSampleLodCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, lod : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with SampledTexture1DArray, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleLodCompareOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleLodCompareOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleLodCompareOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleLodCompareOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleLodCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray_lod.name = "lod"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray.name = SampledTextureSampleLodCompareOffset_Texture1DArray_name;
    SampledTextureSampleLodCompareOffset_Texture1DArray.backendIndex = 2464;
    SampledTextureSampleLodCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray.parameters = SampledTextureSampleLodCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray)->signature = "textureSampleLodCompareOffset(uniform *textureSampled1DArray,f32x2,f32,f32,f32x2) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray)->name = "textureSampleLodCompareOffset(uniform *textureSampled1DArray,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, lod : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleLodCompareOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleLodCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleLodCompareOffset_Texture2DArray_texture.type.modifiers = TextureSampleLodCompareOffset_Texture2DArray_texture_modifiers;
    TextureSampleLodCompareOffset_Texture2DArray_texture.type.modifierValues = TextureSampleLodCompareOffset_Texture2DArray_texture_modifierValues;
    TextureSampleLodCompareOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleLodCompareOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompareOffset_Texture2DArray_sampler.type.modifiers = TextureSampleLodCompareOffset_Texture2DArray_sampler_modifiers;
    TextureSampleLodCompareOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleLodCompareOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleLodCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompareOffset_Texture2DArray_lod.name = "lod"_c;
    TextureSampleLodCompareOffset_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture2DArray_compare.name = "compare"_c;
    TextureSampleLodCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleLodCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodCompareOffset_Texture2DArray.name = TextureSampleLodCompareOffset_Texture2DArray_name;
    TextureSampleLodCompareOffset_Texture2DArray.backendIndex = 2465;
    TextureSampleLodCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompareOffset_Texture2DArray.parameters = TextureSampleLodCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray)->signature = "textureSampleLodCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32,f32x3) f32"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray)->name = "textureSampleLodCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, lod : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with SampledTexture2DArray, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleLodCompareOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleLodCompareOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleLodCompareOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleLodCompareOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleLodCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray_lod.name = "lod"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray.name = SampledTextureSampleLodCompareOffset_Texture2DArray_name;
    SampledTextureSampleLodCompareOffset_Texture2DArray.backendIndex = 2466;
    SampledTextureSampleLodCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray.parameters = SampledTextureSampleLodCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray)->signature = "textureSampleLodCompareOffset(uniform *textureSampled2DArray,f32x3,f32,f32,f32x3) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray)->name = "textureSampleLodCompareOffset(uniform *textureSampled2DArray,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, lod : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleLodProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleLodProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodProjCompare_Texture1D_texture.type.modifiers = TextureSampleLodProjCompare_Texture1D_texture_modifiers;
    TextureSampleLodProjCompare_Texture1D_texture.type.modifierValues = TextureSampleLodProjCompare_Texture1D_texture_modifierValues;
    TextureSampleLodProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompare_Texture1D_sampler.type.modifiers = TextureSampleLodProjCompare_Texture1D_sampler_modifiers;
    TextureSampleLodProjCompare_Texture1D_sampler.type.modifierValues = TextureSampleLodProjCompare_Texture1D_sampler_modifierValues;
    TextureSampleLodProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D_lod.name = "lod"_c;
    TextureSampleLodProjCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleLodProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleLodProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison"_c;
    TextureSampleLodProjCompare_Texture1D.name = TextureSampleLodProjCompare_Texture1D_name;
    TextureSampleLodProjCompare_Texture1D.backendIndex = 2467;
    TextureSampleLodProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodProjCompare_Texture1D.parameters = TextureSampleLodProjCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D)->signature = "textureSampleLodProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D)->name = "textureSampleLodProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D)->nameWithVarNames = "textureSampleLodProjCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompare with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleLodProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLodProjCompare_Texture1D_texture.type.modifiers = SampledTextureSampleLodProjCompare_Texture1D_texture_modifiers;
    SampledTextureSampleLodProjCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleLodProjCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleLodProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison"_c;
    SampledTextureSampleLodProjCompare_Texture1D.name = SampledTextureSampleLodProjCompare_Texture1D_name;
    SampledTextureSampleLodProjCompare_Texture1D.backendIndex = 2468;
    SampledTextureSampleLodProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D.parameters = SampledTextureSampleLodProjCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D)->signature = "textureSampleLodProjCompare(uniform *textureSampled1D,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D)->name = "textureSampleLodProjCompare(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D)->nameWithVarNames = "textureSampleLodProjCompare(texture : uniform *textureSampled1D, coordinate : f32, lod : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32, Float32
    TextureSampleLodProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleLodProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodProjCompare_Texture2D_texture.type.modifiers = TextureSampleLodProjCompare_Texture2D_texture_modifiers;
    TextureSampleLodProjCompare_Texture2D_texture.type.modifierValues = TextureSampleLodProjCompare_Texture2D_texture_modifierValues;
    TextureSampleLodProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompare_Texture2D_sampler.type.modifiers = TextureSampleLodProjCompare_Texture2D_sampler_modifiers;
    TextureSampleLodProjCompare_Texture2D_sampler.type.modifierValues = TextureSampleLodProjCompare_Texture2D_sampler_modifierValues;
    TextureSampleLodProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjCompare_Texture2D_lod.name = "lod"_c;
    TextureSampleLodProjCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleLodProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleLodProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison"_c;
    TextureSampleLodProjCompare_Texture2D.name = TextureSampleLodProjCompare_Texture2D_name;
    TextureSampleLodProjCompare_Texture2D.backendIndex = 2469;
    TextureSampleLodProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodProjCompare_Texture2D.parameters = TextureSampleLodProjCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D)->signature = "textureSampleLodProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D)->name = "textureSampleLodProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D)->nameWithVarNames = "textureSampleLodProjCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompare with SampledTexture2D, Float32x2, Float32, Float32, Float32
    SampledTextureSampleLodProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLodProjCompare_Texture2D_texture.type.modifiers = SampledTextureSampleLodProjCompare_Texture2D_texture_modifiers;
    SampledTextureSampleLodProjCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleLodProjCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleLodProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjCompare_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison"_c;
    SampledTextureSampleLodProjCompare_Texture2D.name = SampledTextureSampleLodProjCompare_Texture2D_name;
    SampledTextureSampleLodProjCompare_Texture2D.backendIndex = 2470;
    SampledTextureSampleLodProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture2D.parameters = SampledTextureSampleLodProjCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D)->signature = "textureSampleLodProjCompare(uniform *textureSampled2D,f32x2,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D)->name = "textureSampleLodProjCompare(uniform *textureSampled2D,f32x2,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D)->nameWithVarNames = "textureSampleLodProjCompare(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32, Float32
    TextureSampleLodProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleLodProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodProjCompare_Texture3D_texture.type.modifiers = TextureSampleLodProjCompare_Texture3D_texture_modifiers;
    TextureSampleLodProjCompare_Texture3D_texture.type.modifierValues = TextureSampleLodProjCompare_Texture3D_texture_modifierValues;
    TextureSampleLodProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompare_Texture3D_sampler.type.modifiers = TextureSampleLodProjCompare_Texture3D_sampler_modifiers;
    TextureSampleLodProjCompare_Texture3D_sampler.type.modifierValues = TextureSampleLodProjCompare_Texture3D_sampler_modifierValues;
    TextureSampleLodProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjCompare_Texture3D_lod.name = "lod"_c;
    TextureSampleLodProjCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleLodProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleLodProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison"_c;
    TextureSampleLodProjCompare_Texture3D.name = TextureSampleLodProjCompare_Texture3D_name;
    TextureSampleLodProjCompare_Texture3D.backendIndex = 2471;
    TextureSampleLodProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodProjCompare_Texture3D.parameters = TextureSampleLodProjCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D)->signature = "textureSampleLodProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D)->name = "textureSampleLodProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D)->nameWithVarNames = "textureSampleLodProjCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompare with SampledTexture3D, Float32x3, Float32, Float32, Float32
    SampledTextureSampleLodProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLodProjCompare_Texture3D_texture.type.modifiers = SampledTextureSampleLodProjCompare_Texture3D_texture_modifiers;
    SampledTextureSampleLodProjCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleLodProjCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleLodProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjCompare_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison"_c;
    SampledTextureSampleLodProjCompare_Texture3D.name = SampledTextureSampleLodProjCompare_Texture3D_name;
    SampledTextureSampleLodProjCompare_Texture3D.backendIndex = 2472;
    SampledTextureSampleLodProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D.parameters = SampledTextureSampleLodProjCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D)->signature = "textureSampleLodProjCompare(uniform *textureSampled3D,f32x3,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D)->name = "textureSampleLodProjCompare(uniform *textureSampled3D,f32x3,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D)->nameWithVarNames = "textureSampleLodProjCompare(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

}
} // namespace GPULang
