//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// textureAtomicSubtract with Texture1D, Int32, Int16
Variable TextureAtomicSubtract_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1D_Int16_coordinate;
Variable TextureAtomicSubtract_Texture1D_Int16_value;
Function TextureAtomicSubtract_Texture1D_Int16;
inline constexpr std::array TextureAtomicSubtract_Texture1D_Int16_args = { &TextureAtomicSubtract_Texture1D_Int16_texture, &TextureAtomicSubtract_Texture1D_Int16_coordinate, &TextureAtomicSubtract_Texture1D_Int16_value };

/// textureAtomicSubtract with Texture1D, Int32, Int16
Variable TextureAtomicSubtract_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1D_Int16_coordinate;
Variable TextureAtomicSubtract_Texture1D_Int16_value;
Function TextureAtomicSubtract_Texture1D_Int16;
inline constexpr std::array TextureAtomicSubtract_Texture1D_Int16_args = { &TextureAtomicSubtract_Texture1D_Int16_texture, &TextureAtomicSubtract_Texture1D_Int16_coordinate, &TextureAtomicSubtract_Texture1D_Int16_value };

/// textureAtomicSubtract with Texture2D, Int32x2, UInt32
Variable TextureAtomicSubtract_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2D_UInt32_coordinate;
Variable TextureAtomicSubtract_Texture2D_UInt32_value;
Function TextureAtomicSubtract_Texture2D_UInt32;
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt32_args = { &TextureAtomicSubtract_Texture2D_UInt32_texture, &TextureAtomicSubtract_Texture2D_UInt32_coordinate, &TextureAtomicSubtract_Texture2D_UInt32_value };

/// textureAtomicSubtract with Texture2D, Int32x2, UInt32
Variable TextureAtomicSubtract_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2D_UInt32_coordinate;
Variable TextureAtomicSubtract_Texture2D_UInt32_value;
Function TextureAtomicSubtract_Texture2D_UInt32;
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt32_args = { &TextureAtomicSubtract_Texture2D_UInt32_texture, &TextureAtomicSubtract_Texture2D_UInt32_coordinate, &TextureAtomicSubtract_Texture2D_UInt32_value };

/// textureAtomicSubtract with Texture2D, Int32x2, Int32
Variable TextureAtomicSubtract_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2D_Int32_coordinate;
Variable TextureAtomicSubtract_Texture2D_Int32_value;
Function TextureAtomicSubtract_Texture2D_Int32;
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int32_args = { &TextureAtomicSubtract_Texture2D_Int32_texture, &TextureAtomicSubtract_Texture2D_Int32_coordinate, &TextureAtomicSubtract_Texture2D_Int32_value };

/// textureAtomicSubtract with Texture2D, Int32x2, Int32
Variable TextureAtomicSubtract_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2D_Int32_coordinate;
Variable TextureAtomicSubtract_Texture2D_Int32_value;
Function TextureAtomicSubtract_Texture2D_Int32;
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int32_args = { &TextureAtomicSubtract_Texture2D_Int32_texture, &TextureAtomicSubtract_Texture2D_Int32_coordinate, &TextureAtomicSubtract_Texture2D_Int32_value };

/// textureAtomicSubtract with Texture2D, Int32x2, UInt16
Variable TextureAtomicSubtract_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2D_UInt16_coordinate;
Variable TextureAtomicSubtract_Texture2D_UInt16_value;
Function TextureAtomicSubtract_Texture2D_UInt16;
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt16_args = { &TextureAtomicSubtract_Texture2D_UInt16_texture, &TextureAtomicSubtract_Texture2D_UInt16_coordinate, &TextureAtomicSubtract_Texture2D_UInt16_value };

/// textureAtomicSubtract with Texture2D, Int32x2, UInt16
Variable TextureAtomicSubtract_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2D_UInt16_coordinate;
Variable TextureAtomicSubtract_Texture2D_UInt16_value;
Function TextureAtomicSubtract_Texture2D_UInt16;
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt16_args = { &TextureAtomicSubtract_Texture2D_UInt16_texture, &TextureAtomicSubtract_Texture2D_UInt16_coordinate, &TextureAtomicSubtract_Texture2D_UInt16_value };

/// textureAtomicSubtract with Texture2D, Int32x2, Int16
Variable TextureAtomicSubtract_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2D_Int16_coordinate;
Variable TextureAtomicSubtract_Texture2D_Int16_value;
Function TextureAtomicSubtract_Texture2D_Int16;
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int16_args = { &TextureAtomicSubtract_Texture2D_Int16_texture, &TextureAtomicSubtract_Texture2D_Int16_coordinate, &TextureAtomicSubtract_Texture2D_Int16_value };

/// textureAtomicSubtract with Texture2D, Int32x2, Int16
Variable TextureAtomicSubtract_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2D_Int16_coordinate;
Variable TextureAtomicSubtract_Texture2D_Int16_value;
Function TextureAtomicSubtract_Texture2D_Int16;
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int16_args = { &TextureAtomicSubtract_Texture2D_Int16_texture, &TextureAtomicSubtract_Texture2D_Int16_coordinate, &TextureAtomicSubtract_Texture2D_Int16_value };

/// textureAtomicSubtract with Texture3D, Int32x3, UInt32
Variable TextureAtomicSubtract_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture3D_UInt32_coordinate;
Variable TextureAtomicSubtract_Texture3D_UInt32_value;
Function TextureAtomicSubtract_Texture3D_UInt32;
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt32_args = { &TextureAtomicSubtract_Texture3D_UInt32_texture, &TextureAtomicSubtract_Texture3D_UInt32_coordinate, &TextureAtomicSubtract_Texture3D_UInt32_value };

/// textureAtomicSubtract with Texture3D, Int32x3, UInt32
Variable TextureAtomicSubtract_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture3D_UInt32_coordinate;
Variable TextureAtomicSubtract_Texture3D_UInt32_value;
Function TextureAtomicSubtract_Texture3D_UInt32;
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt32_args = { &TextureAtomicSubtract_Texture3D_UInt32_texture, &TextureAtomicSubtract_Texture3D_UInt32_coordinate, &TextureAtomicSubtract_Texture3D_UInt32_value };

/// textureAtomicSubtract with Texture3D, Int32x3, Int32
Variable TextureAtomicSubtract_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture3D_Int32_coordinate;
Variable TextureAtomicSubtract_Texture3D_Int32_value;
Function TextureAtomicSubtract_Texture3D_Int32;
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int32_args = { &TextureAtomicSubtract_Texture3D_Int32_texture, &TextureAtomicSubtract_Texture3D_Int32_coordinate, &TextureAtomicSubtract_Texture3D_Int32_value };

/// textureAtomicSubtract with Texture3D, Int32x3, Int32
Variable TextureAtomicSubtract_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture3D_Int32_coordinate;
Variable TextureAtomicSubtract_Texture3D_Int32_value;
Function TextureAtomicSubtract_Texture3D_Int32;
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int32_args = { &TextureAtomicSubtract_Texture3D_Int32_texture, &TextureAtomicSubtract_Texture3D_Int32_coordinate, &TextureAtomicSubtract_Texture3D_Int32_value };

/// textureAtomicSubtract with Texture3D, Int32x3, UInt16
Variable TextureAtomicSubtract_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture3D_UInt16_coordinate;
Variable TextureAtomicSubtract_Texture3D_UInt16_value;
Function TextureAtomicSubtract_Texture3D_UInt16;
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt16_args = { &TextureAtomicSubtract_Texture3D_UInt16_texture, &TextureAtomicSubtract_Texture3D_UInt16_coordinate, &TextureAtomicSubtract_Texture3D_UInt16_value };

/// textureAtomicSubtract with Texture3D, Int32x3, UInt16
Variable TextureAtomicSubtract_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture3D_UInt16_coordinate;
Variable TextureAtomicSubtract_Texture3D_UInt16_value;
Function TextureAtomicSubtract_Texture3D_UInt16;
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt16_args = { &TextureAtomicSubtract_Texture3D_UInt16_texture, &TextureAtomicSubtract_Texture3D_UInt16_coordinate, &TextureAtomicSubtract_Texture3D_UInt16_value };

/// textureAtomicSubtract with Texture3D, Int32x3, Int16
Variable TextureAtomicSubtract_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture3D_Int16_coordinate;
Variable TextureAtomicSubtract_Texture3D_Int16_value;
Function TextureAtomicSubtract_Texture3D_Int16;
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int16_args = { &TextureAtomicSubtract_Texture3D_Int16_texture, &TextureAtomicSubtract_Texture3D_Int16_coordinate, &TextureAtomicSubtract_Texture3D_Int16_value };

/// textureAtomicSubtract with Texture3D, Int32x3, Int16
Variable TextureAtomicSubtract_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture3D_Int16_coordinate;
Variable TextureAtomicSubtract_Texture3D_Int16_value;
Function TextureAtomicSubtract_Texture3D_Int16;
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int16_args = { &TextureAtomicSubtract_Texture3D_Int16_texture, &TextureAtomicSubtract_Texture3D_Int16_coordinate, &TextureAtomicSubtract_Texture3D_Int16_value };

/// textureAtomicSubtract with TextureCube, Int32x3, UInt32
Variable TextureAtomicSubtract_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCube_UInt32_coordinate;
Variable TextureAtomicSubtract_TextureCube_UInt32_value;
Function TextureAtomicSubtract_TextureCube_UInt32;
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt32_args = { &TextureAtomicSubtract_TextureCube_UInt32_texture, &TextureAtomicSubtract_TextureCube_UInt32_coordinate, &TextureAtomicSubtract_TextureCube_UInt32_value };

/// textureAtomicSubtract with TextureCube, Int32x3, UInt32
Variable TextureAtomicSubtract_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCube_UInt32_coordinate;
Variable TextureAtomicSubtract_TextureCube_UInt32_value;
Function TextureAtomicSubtract_TextureCube_UInt32;
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt32_args = { &TextureAtomicSubtract_TextureCube_UInt32_texture, &TextureAtomicSubtract_TextureCube_UInt32_coordinate, &TextureAtomicSubtract_TextureCube_UInt32_value };

/// textureAtomicSubtract with TextureCube, Int32x3, Int32
Variable TextureAtomicSubtract_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCube_Int32_coordinate;
Variable TextureAtomicSubtract_TextureCube_Int32_value;
Function TextureAtomicSubtract_TextureCube_Int32;
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int32_args = { &TextureAtomicSubtract_TextureCube_Int32_texture, &TextureAtomicSubtract_TextureCube_Int32_coordinate, &TextureAtomicSubtract_TextureCube_Int32_value };

/// textureAtomicSubtract with TextureCube, Int32x3, Int32
Variable TextureAtomicSubtract_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCube_Int32_coordinate;
Variable TextureAtomicSubtract_TextureCube_Int32_value;
Function TextureAtomicSubtract_TextureCube_Int32;
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int32_args = { &TextureAtomicSubtract_TextureCube_Int32_texture, &TextureAtomicSubtract_TextureCube_Int32_coordinate, &TextureAtomicSubtract_TextureCube_Int32_value };

/// textureAtomicSubtract with TextureCube, Int32x3, UInt16
Variable TextureAtomicSubtract_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCube_UInt16_coordinate;
Variable TextureAtomicSubtract_TextureCube_UInt16_value;
Function TextureAtomicSubtract_TextureCube_UInt16;
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt16_args = { &TextureAtomicSubtract_TextureCube_UInt16_texture, &TextureAtomicSubtract_TextureCube_UInt16_coordinate, &TextureAtomicSubtract_TextureCube_UInt16_value };

/// textureAtomicSubtract with TextureCube, Int32x3, UInt16
Variable TextureAtomicSubtract_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCube_UInt16_coordinate;
Variable TextureAtomicSubtract_TextureCube_UInt16_value;
Function TextureAtomicSubtract_TextureCube_UInt16;
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt16_args = { &TextureAtomicSubtract_TextureCube_UInt16_texture, &TextureAtomicSubtract_TextureCube_UInt16_coordinate, &TextureAtomicSubtract_TextureCube_UInt16_value };

/// textureAtomicSubtract with TextureCube, Int32x3, Int16
Variable TextureAtomicSubtract_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCube_Int16_coordinate;
Variable TextureAtomicSubtract_TextureCube_Int16_value;
Function TextureAtomicSubtract_TextureCube_Int16;
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int16_args = { &TextureAtomicSubtract_TextureCube_Int16_texture, &TextureAtomicSubtract_TextureCube_Int16_coordinate, &TextureAtomicSubtract_TextureCube_Int16_value };

/// textureAtomicSubtract with TextureCube, Int32x3, Int16
Variable TextureAtomicSubtract_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCube_Int16_coordinate;
Variable TextureAtomicSubtract_TextureCube_Int16_value;
Function TextureAtomicSubtract_TextureCube_Int16;
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int16_args = { &TextureAtomicSubtract_TextureCube_Int16_texture, &TextureAtomicSubtract_TextureCube_Int16_coordinate, &TextureAtomicSubtract_TextureCube_Int16_value };

/// textureAtomicSubtract with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicSubtract_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicSubtract_Texture1DArray_UInt32_value;
Function TextureAtomicSubtract_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt32_args = { &TextureAtomicSubtract_Texture1DArray_UInt32_texture, &TextureAtomicSubtract_Texture1DArray_UInt32_coordinate, &TextureAtomicSubtract_Texture1DArray_UInt32_value };

/// textureAtomicSubtract with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicSubtract_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicSubtract_Texture1DArray_UInt32_value;
Function TextureAtomicSubtract_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt32_args = { &TextureAtomicSubtract_Texture1DArray_UInt32_texture, &TextureAtomicSubtract_Texture1DArray_UInt32_coordinate, &TextureAtomicSubtract_Texture1DArray_UInt32_value };

/// textureAtomicSubtract with Texture1DArray, Int32x2, Int32
Variable TextureAtomicSubtract_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1DArray_Int32_coordinate;
Variable TextureAtomicSubtract_Texture1DArray_Int32_value;
Function TextureAtomicSubtract_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int32_args = { &TextureAtomicSubtract_Texture1DArray_Int32_texture, &TextureAtomicSubtract_Texture1DArray_Int32_coordinate, &TextureAtomicSubtract_Texture1DArray_Int32_value };

/// textureAtomicSubtract with Texture1DArray, Int32x2, Int32
Variable TextureAtomicSubtract_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1DArray_Int32_coordinate;
Variable TextureAtomicSubtract_Texture1DArray_Int32_value;
Function TextureAtomicSubtract_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int32_args = { &TextureAtomicSubtract_Texture1DArray_Int32_texture, &TextureAtomicSubtract_Texture1DArray_Int32_coordinate, &TextureAtomicSubtract_Texture1DArray_Int32_value };

/// textureAtomicSubtract with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicSubtract_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicSubtract_Texture1DArray_UInt16_value;
Function TextureAtomicSubtract_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt16_args = { &TextureAtomicSubtract_Texture1DArray_UInt16_texture, &TextureAtomicSubtract_Texture1DArray_UInt16_coordinate, &TextureAtomicSubtract_Texture1DArray_UInt16_value };

/// textureAtomicSubtract with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicSubtract_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicSubtract_Texture1DArray_UInt16_value;
Function TextureAtomicSubtract_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt16_args = { &TextureAtomicSubtract_Texture1DArray_UInt16_texture, &TextureAtomicSubtract_Texture1DArray_UInt16_coordinate, &TextureAtomicSubtract_Texture1DArray_UInt16_value };

/// textureAtomicSubtract with Texture1DArray, Int32x2, Int16
Variable TextureAtomicSubtract_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1DArray_Int16_coordinate;
Variable TextureAtomicSubtract_Texture1DArray_Int16_value;
Function TextureAtomicSubtract_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int16_args = { &TextureAtomicSubtract_Texture1DArray_Int16_texture, &TextureAtomicSubtract_Texture1DArray_Int16_coordinate, &TextureAtomicSubtract_Texture1DArray_Int16_value };

/// textureAtomicSubtract with Texture1DArray, Int32x2, Int16
Variable TextureAtomicSubtract_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1DArray_Int16_coordinate;
Variable TextureAtomicSubtract_Texture1DArray_Int16_value;
Function TextureAtomicSubtract_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int16_args = { &TextureAtomicSubtract_Texture1DArray_Int16_texture, &TextureAtomicSubtract_Texture1DArray_Int16_coordinate, &TextureAtomicSubtract_Texture1DArray_Int16_value };

/// textureAtomicSubtract with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicSubtract_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicSubtract_Texture2DArray_UInt32_value;
Function TextureAtomicSubtract_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt32_args = { &TextureAtomicSubtract_Texture2DArray_UInt32_texture, &TextureAtomicSubtract_Texture2DArray_UInt32_coordinate, &TextureAtomicSubtract_Texture2DArray_UInt32_value };

/// textureAtomicSubtract with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicSubtract_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicSubtract_Texture2DArray_UInt32_value;
Function TextureAtomicSubtract_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt32_args = { &TextureAtomicSubtract_Texture2DArray_UInt32_texture, &TextureAtomicSubtract_Texture2DArray_UInt32_coordinate, &TextureAtomicSubtract_Texture2DArray_UInt32_value };

/// textureAtomicSubtract with Texture2DArray, Int32x3, Int32
Variable TextureAtomicSubtract_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2DArray_Int32_coordinate;
Variable TextureAtomicSubtract_Texture2DArray_Int32_value;
Function TextureAtomicSubtract_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int32_args = { &TextureAtomicSubtract_Texture2DArray_Int32_texture, &TextureAtomicSubtract_Texture2DArray_Int32_coordinate, &TextureAtomicSubtract_Texture2DArray_Int32_value };

/// textureAtomicSubtract with Texture2DArray, Int32x3, Int32
Variable TextureAtomicSubtract_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2DArray_Int32_coordinate;
Variable TextureAtomicSubtract_Texture2DArray_Int32_value;
Function TextureAtomicSubtract_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int32_args = { &TextureAtomicSubtract_Texture2DArray_Int32_texture, &TextureAtomicSubtract_Texture2DArray_Int32_coordinate, &TextureAtomicSubtract_Texture2DArray_Int32_value };

/// textureAtomicSubtract with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicSubtract_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicSubtract_Texture2DArray_UInt16_value;
Function TextureAtomicSubtract_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt16_args = { &TextureAtomicSubtract_Texture2DArray_UInt16_texture, &TextureAtomicSubtract_Texture2DArray_UInt16_coordinate, &TextureAtomicSubtract_Texture2DArray_UInt16_value };

/// textureAtomicSubtract with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicSubtract_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicSubtract_Texture2DArray_UInt16_value;
Function TextureAtomicSubtract_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt16_args = { &TextureAtomicSubtract_Texture2DArray_UInt16_texture, &TextureAtomicSubtract_Texture2DArray_UInt16_coordinate, &TextureAtomicSubtract_Texture2DArray_UInt16_value };

/// textureAtomicSubtract with Texture2DArray, Int32x3, Int16
Variable TextureAtomicSubtract_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2DArray_Int16_coordinate;
Variable TextureAtomicSubtract_Texture2DArray_Int16_value;
Function TextureAtomicSubtract_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int16_args = { &TextureAtomicSubtract_Texture2DArray_Int16_texture, &TextureAtomicSubtract_Texture2DArray_Int16_coordinate, &TextureAtomicSubtract_Texture2DArray_Int16_value };

/// textureAtomicSubtract with Texture2DArray, Int32x3, Int16
Variable TextureAtomicSubtract_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2DArray_Int16_coordinate;
Variable TextureAtomicSubtract_Texture2DArray_Int16_value;
Function TextureAtomicSubtract_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int16_args = { &TextureAtomicSubtract_Texture2DArray_Int16_texture, &TextureAtomicSubtract_Texture2DArray_Int16_coordinate, &TextureAtomicSubtract_Texture2DArray_Int16_value };

/// textureAtomicSubtract with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicSubtract_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicSubtract_TextureCubeArray_UInt32_value;
Function TextureAtomicSubtract_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt32_args = { &TextureAtomicSubtract_TextureCubeArray_UInt32_texture, &TextureAtomicSubtract_TextureCubeArray_UInt32_coordinate, &TextureAtomicSubtract_TextureCubeArray_UInt32_value };

/// textureAtomicSubtract with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicSubtract_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicSubtract_TextureCubeArray_UInt32_value;
Function TextureAtomicSubtract_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt32_args = { &TextureAtomicSubtract_TextureCubeArray_UInt32_texture, &TextureAtomicSubtract_TextureCubeArray_UInt32_coordinate, &TextureAtomicSubtract_TextureCubeArray_UInt32_value };

/// textureAtomicSubtract with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicSubtract_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicSubtract_TextureCubeArray_Int32_value;
Function TextureAtomicSubtract_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int32_args = { &TextureAtomicSubtract_TextureCubeArray_Int32_texture, &TextureAtomicSubtract_TextureCubeArray_Int32_coordinate, &TextureAtomicSubtract_TextureCubeArray_Int32_value };

/// textureAtomicSubtract with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicSubtract_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicSubtract_TextureCubeArray_Int32_value;
Function TextureAtomicSubtract_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int32_args = { &TextureAtomicSubtract_TextureCubeArray_Int32_texture, &TextureAtomicSubtract_TextureCubeArray_Int32_coordinate, &TextureAtomicSubtract_TextureCubeArray_Int32_value };

/// textureAtomicSubtract with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicSubtract_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicSubtract_TextureCubeArray_UInt16_value;
Function TextureAtomicSubtract_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt16_args = { &TextureAtomicSubtract_TextureCubeArray_UInt16_texture, &TextureAtomicSubtract_TextureCubeArray_UInt16_coordinate, &TextureAtomicSubtract_TextureCubeArray_UInt16_value };

/// textureAtomicSubtract with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicSubtract_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicSubtract_TextureCubeArray_UInt16_value;
Function TextureAtomicSubtract_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt16_args = { &TextureAtomicSubtract_TextureCubeArray_UInt16_texture, &TextureAtomicSubtract_TextureCubeArray_UInt16_coordinate, &TextureAtomicSubtract_TextureCubeArray_UInt16_value };

/// textureAtomicSubtract with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicSubtract_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicSubtract_TextureCubeArray_Int16_value;
Function TextureAtomicSubtract_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int16_args = { &TextureAtomicSubtract_TextureCubeArray_Int16_texture, &TextureAtomicSubtract_TextureCubeArray_Int16_coordinate, &TextureAtomicSubtract_TextureCubeArray_Int16_value };

/// textureAtomicSubtract with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicSubtract_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicSubtract_TextureCubeArray_Int16_value;
Function TextureAtomicSubtract_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int16_args = { &TextureAtomicSubtract_TextureCubeArray_Int16_texture, &TextureAtomicSubtract_TextureCubeArray_Int16_coordinate, &TextureAtomicSubtract_TextureCubeArray_Int16_value };

/// textureAtomicMin with Texture1D, Int32, UInt32
Variable TextureAtomicMin_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicMin_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1D_UInt32_coordinate;
Variable TextureAtomicMin_Texture1D_UInt32_value;
Function TextureAtomicMin_Texture1D_UInt32;
inline constexpr std::array TextureAtomicMin_Texture1D_UInt32_args = { &TextureAtomicMin_Texture1D_UInt32_texture, &TextureAtomicMin_Texture1D_UInt32_coordinate, &TextureAtomicMin_Texture1D_UInt32_value };

/// textureAtomicMin with Texture1D, Int32, UInt32
Variable TextureAtomicMin_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicMin_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1D_UInt32_coordinate;
Variable TextureAtomicMin_Texture1D_UInt32_value;
Function TextureAtomicMin_Texture1D_UInt32;
inline constexpr std::array TextureAtomicMin_Texture1D_UInt32_args = { &TextureAtomicMin_Texture1D_UInt32_texture, &TextureAtomicMin_Texture1D_UInt32_coordinate, &TextureAtomicMin_Texture1D_UInt32_value };

/// textureAtomicMin with Texture1D, Int32, Int32
Variable TextureAtomicMin_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicMin_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1D_Int32_coordinate;
Variable TextureAtomicMin_Texture1D_Int32_value;
Function TextureAtomicMin_Texture1D_Int32;
inline constexpr std::array TextureAtomicMin_Texture1D_Int32_args = { &TextureAtomicMin_Texture1D_Int32_texture, &TextureAtomicMin_Texture1D_Int32_coordinate, &TextureAtomicMin_Texture1D_Int32_value };

/// textureAtomicMin with Texture1D, Int32, Int32
Variable TextureAtomicMin_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicMin_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1D_Int32_coordinate;
Variable TextureAtomicMin_Texture1D_Int32_value;
Function TextureAtomicMin_Texture1D_Int32;
inline constexpr std::array TextureAtomicMin_Texture1D_Int32_args = { &TextureAtomicMin_Texture1D_Int32_texture, &TextureAtomicMin_Texture1D_Int32_coordinate, &TextureAtomicMin_Texture1D_Int32_value };

/// textureAtomicMin with Texture1D, Int32, UInt16
Variable TextureAtomicMin_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicMin_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1D_UInt16_coordinate;
Variable TextureAtomicMin_Texture1D_UInt16_value;
Function TextureAtomicMin_Texture1D_UInt16;
inline constexpr std::array TextureAtomicMin_Texture1D_UInt16_args = { &TextureAtomicMin_Texture1D_UInt16_texture, &TextureAtomicMin_Texture1D_UInt16_coordinate, &TextureAtomicMin_Texture1D_UInt16_value };

/// textureAtomicMin with Texture1D, Int32, UInt16
Variable TextureAtomicMin_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicMin_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1D_UInt16_coordinate;
Variable TextureAtomicMin_Texture1D_UInt16_value;
Function TextureAtomicMin_Texture1D_UInt16;
inline constexpr std::array TextureAtomicMin_Texture1D_UInt16_args = { &TextureAtomicMin_Texture1D_UInt16_texture, &TextureAtomicMin_Texture1D_UInt16_coordinate, &TextureAtomicMin_Texture1D_UInt16_value };

/// textureAtomicMin with Texture1D, Int32, Int16
Variable TextureAtomicMin_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicMin_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1D_Int16_coordinate;
Variable TextureAtomicMin_Texture1D_Int16_value;
Function TextureAtomicMin_Texture1D_Int16;
inline constexpr std::array TextureAtomicMin_Texture1D_Int16_args = { &TextureAtomicMin_Texture1D_Int16_texture, &TextureAtomicMin_Texture1D_Int16_coordinate, &TextureAtomicMin_Texture1D_Int16_value };

/// textureAtomicMin with Texture1D, Int32, Int16
Variable TextureAtomicMin_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicMin_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1D_Int16_coordinate;
Variable TextureAtomicMin_Texture1D_Int16_value;
Function TextureAtomicMin_Texture1D_Int16;
inline constexpr std::array TextureAtomicMin_Texture1D_Int16_args = { &TextureAtomicMin_Texture1D_Int16_texture, &TextureAtomicMin_Texture1D_Int16_coordinate, &TextureAtomicMin_Texture1D_Int16_value };

/// textureAtomicMin with Texture2D, Int32x2, UInt32
Variable TextureAtomicMin_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicMin_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2D_UInt32_coordinate;
Variable TextureAtomicMin_Texture2D_UInt32_value;
Function TextureAtomicMin_Texture2D_UInt32;
inline constexpr std::array TextureAtomicMin_Texture2D_UInt32_args = { &TextureAtomicMin_Texture2D_UInt32_texture, &TextureAtomicMin_Texture2D_UInt32_coordinate, &TextureAtomicMin_Texture2D_UInt32_value };

/// textureAtomicMin with Texture2D, Int32x2, UInt32
Variable TextureAtomicMin_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicMin_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2D_UInt32_coordinate;
Variable TextureAtomicMin_Texture2D_UInt32_value;
Function TextureAtomicMin_Texture2D_UInt32;
inline constexpr std::array TextureAtomicMin_Texture2D_UInt32_args = { &TextureAtomicMin_Texture2D_UInt32_texture, &TextureAtomicMin_Texture2D_UInt32_coordinate, &TextureAtomicMin_Texture2D_UInt32_value };

/// textureAtomicMin with Texture2D, Int32x2, Int32
Variable TextureAtomicMin_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicMin_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2D_Int32_coordinate;
Variable TextureAtomicMin_Texture2D_Int32_value;
Function TextureAtomicMin_Texture2D_Int32;
inline constexpr std::array TextureAtomicMin_Texture2D_Int32_args = { &TextureAtomicMin_Texture2D_Int32_texture, &TextureAtomicMin_Texture2D_Int32_coordinate, &TextureAtomicMin_Texture2D_Int32_value };

/// textureAtomicMin with Texture2D, Int32x2, Int32
Variable TextureAtomicMin_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicMin_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2D_Int32_coordinate;
Variable TextureAtomicMin_Texture2D_Int32_value;
Function TextureAtomicMin_Texture2D_Int32;
inline constexpr std::array TextureAtomicMin_Texture2D_Int32_args = { &TextureAtomicMin_Texture2D_Int32_texture, &TextureAtomicMin_Texture2D_Int32_coordinate, &TextureAtomicMin_Texture2D_Int32_value };

/// textureAtomicMin with Texture2D, Int32x2, UInt16
Variable TextureAtomicMin_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicMin_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2D_UInt16_coordinate;
Variable TextureAtomicMin_Texture2D_UInt16_value;
Function TextureAtomicMin_Texture2D_UInt16;
inline constexpr std::array TextureAtomicMin_Texture2D_UInt16_args = { &TextureAtomicMin_Texture2D_UInt16_texture, &TextureAtomicMin_Texture2D_UInt16_coordinate, &TextureAtomicMin_Texture2D_UInt16_value };

/// textureAtomicMin with Texture2D, Int32x2, UInt16
Variable TextureAtomicMin_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicMin_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2D_UInt16_coordinate;
Variable TextureAtomicMin_Texture2D_UInt16_value;
Function TextureAtomicMin_Texture2D_UInt16;
inline constexpr std::array TextureAtomicMin_Texture2D_UInt16_args = { &TextureAtomicMin_Texture2D_UInt16_texture, &TextureAtomicMin_Texture2D_UInt16_coordinate, &TextureAtomicMin_Texture2D_UInt16_value };

/// textureAtomicMin with Texture2D, Int32x2, Int16
Variable TextureAtomicMin_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicMin_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2D_Int16_coordinate;
Variable TextureAtomicMin_Texture2D_Int16_value;
Function TextureAtomicMin_Texture2D_Int16;
inline constexpr std::array TextureAtomicMin_Texture2D_Int16_args = { &TextureAtomicMin_Texture2D_Int16_texture, &TextureAtomicMin_Texture2D_Int16_coordinate, &TextureAtomicMin_Texture2D_Int16_value };

/// textureAtomicMin with Texture2D, Int32x2, Int16
Variable TextureAtomicMin_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicMin_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2D_Int16_coordinate;
Variable TextureAtomicMin_Texture2D_Int16_value;
Function TextureAtomicMin_Texture2D_Int16;
inline constexpr std::array TextureAtomicMin_Texture2D_Int16_args = { &TextureAtomicMin_Texture2D_Int16_texture, &TextureAtomicMin_Texture2D_Int16_coordinate, &TextureAtomicMin_Texture2D_Int16_value };

/// textureAtomicMin with Texture3D, Int32x3, UInt32
Variable TextureAtomicMin_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicMin_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture3D_UInt32_coordinate;
Variable TextureAtomicMin_Texture3D_UInt32_value;
Function TextureAtomicMin_Texture3D_UInt32;
inline constexpr std::array TextureAtomicMin_Texture3D_UInt32_args = { &TextureAtomicMin_Texture3D_UInt32_texture, &TextureAtomicMin_Texture3D_UInt32_coordinate, &TextureAtomicMin_Texture3D_UInt32_value };

/// textureAtomicMin with Texture3D, Int32x3, UInt32
Variable TextureAtomicMin_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicMin_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture3D_UInt32_coordinate;
Variable TextureAtomicMin_Texture3D_UInt32_value;
Function TextureAtomicMin_Texture3D_UInt32;
inline constexpr std::array TextureAtomicMin_Texture3D_UInt32_args = { &TextureAtomicMin_Texture3D_UInt32_texture, &TextureAtomicMin_Texture3D_UInt32_coordinate, &TextureAtomicMin_Texture3D_UInt32_value };

/// textureAtomicMin with Texture3D, Int32x3, Int32
Variable TextureAtomicMin_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicMin_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture3D_Int32_coordinate;
Variable TextureAtomicMin_Texture3D_Int32_value;
Function TextureAtomicMin_Texture3D_Int32;
inline constexpr std::array TextureAtomicMin_Texture3D_Int32_args = { &TextureAtomicMin_Texture3D_Int32_texture, &TextureAtomicMin_Texture3D_Int32_coordinate, &TextureAtomicMin_Texture3D_Int32_value };

/// textureAtomicMin with Texture3D, Int32x3, Int32
Variable TextureAtomicMin_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicMin_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture3D_Int32_coordinate;
Variable TextureAtomicMin_Texture3D_Int32_value;
Function TextureAtomicMin_Texture3D_Int32;
inline constexpr std::array TextureAtomicMin_Texture3D_Int32_args = { &TextureAtomicMin_Texture3D_Int32_texture, &TextureAtomicMin_Texture3D_Int32_coordinate, &TextureAtomicMin_Texture3D_Int32_value };

/// textureAtomicMin with Texture3D, Int32x3, UInt16
Variable TextureAtomicMin_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicMin_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture3D_UInt16_coordinate;
Variable TextureAtomicMin_Texture3D_UInt16_value;
Function TextureAtomicMin_Texture3D_UInt16;
inline constexpr std::array TextureAtomicMin_Texture3D_UInt16_args = { &TextureAtomicMin_Texture3D_UInt16_texture, &TextureAtomicMin_Texture3D_UInt16_coordinate, &TextureAtomicMin_Texture3D_UInt16_value };

/// textureAtomicMin with Texture3D, Int32x3, UInt16
Variable TextureAtomicMin_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicMin_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture3D_UInt16_coordinate;
Variable TextureAtomicMin_Texture3D_UInt16_value;
Function TextureAtomicMin_Texture3D_UInt16;
inline constexpr std::array TextureAtomicMin_Texture3D_UInt16_args = { &TextureAtomicMin_Texture3D_UInt16_texture, &TextureAtomicMin_Texture3D_UInt16_coordinate, &TextureAtomicMin_Texture3D_UInt16_value };

/// textureAtomicMin with Texture3D, Int32x3, Int16
Variable TextureAtomicMin_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicMin_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture3D_Int16_coordinate;
Variable TextureAtomicMin_Texture3D_Int16_value;
Function TextureAtomicMin_Texture3D_Int16;
inline constexpr std::array TextureAtomicMin_Texture3D_Int16_args = { &TextureAtomicMin_Texture3D_Int16_texture, &TextureAtomicMin_Texture3D_Int16_coordinate, &TextureAtomicMin_Texture3D_Int16_value };

/// textureAtomicMin with Texture3D, Int32x3, Int16
Variable TextureAtomicMin_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicMin_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture3D_Int16_coordinate;
Variable TextureAtomicMin_Texture3D_Int16_value;
Function TextureAtomicMin_Texture3D_Int16;
inline constexpr std::array TextureAtomicMin_Texture3D_Int16_args = { &TextureAtomicMin_Texture3D_Int16_texture, &TextureAtomicMin_Texture3D_Int16_coordinate, &TextureAtomicMin_Texture3D_Int16_value };

/// textureAtomicMin with TextureCube, Int32x3, UInt32
Variable TextureAtomicMin_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicMin_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCube_UInt32_coordinate;
Variable TextureAtomicMin_TextureCube_UInt32_value;
Function TextureAtomicMin_TextureCube_UInt32;
inline constexpr std::array TextureAtomicMin_TextureCube_UInt32_args = { &TextureAtomicMin_TextureCube_UInt32_texture, &TextureAtomicMin_TextureCube_UInt32_coordinate, &TextureAtomicMin_TextureCube_UInt32_value };

/// textureAtomicMin with TextureCube, Int32x3, UInt32
Variable TextureAtomicMin_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicMin_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCube_UInt32_coordinate;
Variable TextureAtomicMin_TextureCube_UInt32_value;
Function TextureAtomicMin_TextureCube_UInt32;
inline constexpr std::array TextureAtomicMin_TextureCube_UInt32_args = { &TextureAtomicMin_TextureCube_UInt32_texture, &TextureAtomicMin_TextureCube_UInt32_coordinate, &TextureAtomicMin_TextureCube_UInt32_value };

/// textureAtomicMin with TextureCube, Int32x3, Int32
Variable TextureAtomicMin_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicMin_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCube_Int32_coordinate;
Variable TextureAtomicMin_TextureCube_Int32_value;
Function TextureAtomicMin_TextureCube_Int32;
inline constexpr std::array TextureAtomicMin_TextureCube_Int32_args = { &TextureAtomicMin_TextureCube_Int32_texture, &TextureAtomicMin_TextureCube_Int32_coordinate, &TextureAtomicMin_TextureCube_Int32_value };

/// textureAtomicMin with TextureCube, Int32x3, Int32
Variable TextureAtomicMin_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicMin_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCube_Int32_coordinate;
Variable TextureAtomicMin_TextureCube_Int32_value;
Function TextureAtomicMin_TextureCube_Int32;
inline constexpr std::array TextureAtomicMin_TextureCube_Int32_args = { &TextureAtomicMin_TextureCube_Int32_texture, &TextureAtomicMin_TextureCube_Int32_coordinate, &TextureAtomicMin_TextureCube_Int32_value };

/// textureAtomicMin with TextureCube, Int32x3, UInt16
Variable TextureAtomicMin_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicMin_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCube_UInt16_coordinate;
Variable TextureAtomicMin_TextureCube_UInt16_value;
Function TextureAtomicMin_TextureCube_UInt16;
inline constexpr std::array TextureAtomicMin_TextureCube_UInt16_args = { &TextureAtomicMin_TextureCube_UInt16_texture, &TextureAtomicMin_TextureCube_UInt16_coordinate, &TextureAtomicMin_TextureCube_UInt16_value };

/// textureAtomicMin with TextureCube, Int32x3, UInt16
Variable TextureAtomicMin_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicMin_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCube_UInt16_coordinate;
Variable TextureAtomicMin_TextureCube_UInt16_value;
Function TextureAtomicMin_TextureCube_UInt16;
inline constexpr std::array TextureAtomicMin_TextureCube_UInt16_args = { &TextureAtomicMin_TextureCube_UInt16_texture, &TextureAtomicMin_TextureCube_UInt16_coordinate, &TextureAtomicMin_TextureCube_UInt16_value };

/// textureAtomicMin with TextureCube, Int32x3, Int16
Variable TextureAtomicMin_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicMin_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCube_Int16_coordinate;
Variable TextureAtomicMin_TextureCube_Int16_value;
Function TextureAtomicMin_TextureCube_Int16;
inline constexpr std::array TextureAtomicMin_TextureCube_Int16_args = { &TextureAtomicMin_TextureCube_Int16_texture, &TextureAtomicMin_TextureCube_Int16_coordinate, &TextureAtomicMin_TextureCube_Int16_value };

/// textureAtomicMin with TextureCube, Int32x3, Int16
Variable TextureAtomicMin_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicMin_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCube_Int16_coordinate;
Variable TextureAtomicMin_TextureCube_Int16_value;
Function TextureAtomicMin_TextureCube_Int16;
inline constexpr std::array TextureAtomicMin_TextureCube_Int16_args = { &TextureAtomicMin_TextureCube_Int16_texture, &TextureAtomicMin_TextureCube_Int16_coordinate, &TextureAtomicMin_TextureCube_Int16_value };

/// textureAtomicMin with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicMin_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicMin_Texture1DArray_UInt32_value;
Function TextureAtomicMin_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt32_args = { &TextureAtomicMin_Texture1DArray_UInt32_texture, &TextureAtomicMin_Texture1DArray_UInt32_coordinate, &TextureAtomicMin_Texture1DArray_UInt32_value };

/// textureAtomicMin with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicMin_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicMin_Texture1DArray_UInt32_value;
Function TextureAtomicMin_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt32_args = { &TextureAtomicMin_Texture1DArray_UInt32_texture, &TextureAtomicMin_Texture1DArray_UInt32_coordinate, &TextureAtomicMin_Texture1DArray_UInt32_value };

/// textureAtomicMin with Texture1DArray, Int32x2, Int32
Variable TextureAtomicMin_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1DArray_Int32_coordinate;
Variable TextureAtomicMin_Texture1DArray_Int32_value;
Function TextureAtomicMin_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int32_args = { &TextureAtomicMin_Texture1DArray_Int32_texture, &TextureAtomicMin_Texture1DArray_Int32_coordinate, &TextureAtomicMin_Texture1DArray_Int32_value };

/// textureAtomicMin with Texture1DArray, Int32x2, Int32
Variable TextureAtomicMin_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1DArray_Int32_coordinate;
Variable TextureAtomicMin_Texture1DArray_Int32_value;
Function TextureAtomicMin_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int32_args = { &TextureAtomicMin_Texture1DArray_Int32_texture, &TextureAtomicMin_Texture1DArray_Int32_coordinate, &TextureAtomicMin_Texture1DArray_Int32_value };

/// textureAtomicMin with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicMin_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicMin_Texture1DArray_UInt16_value;
Function TextureAtomicMin_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt16_args = { &TextureAtomicMin_Texture1DArray_UInt16_texture, &TextureAtomicMin_Texture1DArray_UInt16_coordinate, &TextureAtomicMin_Texture1DArray_UInt16_value };

/// textureAtomicMin with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicMin_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicMin_Texture1DArray_UInt16_value;
Function TextureAtomicMin_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt16_args = { &TextureAtomicMin_Texture1DArray_UInt16_texture, &TextureAtomicMin_Texture1DArray_UInt16_coordinate, &TextureAtomicMin_Texture1DArray_UInt16_value };

/// textureAtomicMin with Texture1DArray, Int32x2, Int16
Variable TextureAtomicMin_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1DArray_Int16_coordinate;
Variable TextureAtomicMin_Texture1DArray_Int16_value;
Function TextureAtomicMin_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int16_args = { &TextureAtomicMin_Texture1DArray_Int16_texture, &TextureAtomicMin_Texture1DArray_Int16_coordinate, &TextureAtomicMin_Texture1DArray_Int16_value };

/// textureAtomicMin with Texture1DArray, Int32x2, Int16
Variable TextureAtomicMin_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1DArray_Int16_coordinate;
Variable TextureAtomicMin_Texture1DArray_Int16_value;
Function TextureAtomicMin_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int16_args = { &TextureAtomicMin_Texture1DArray_Int16_texture, &TextureAtomicMin_Texture1DArray_Int16_coordinate, &TextureAtomicMin_Texture1DArray_Int16_value };

/// textureAtomicMin with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicMin_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicMin_Texture2DArray_UInt32_value;
Function TextureAtomicMin_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt32_args = { &TextureAtomicMin_Texture2DArray_UInt32_texture, &TextureAtomicMin_Texture2DArray_UInt32_coordinate, &TextureAtomicMin_Texture2DArray_UInt32_value };

/// textureAtomicMin with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicMin_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicMin_Texture2DArray_UInt32_value;
Function TextureAtomicMin_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt32_args = { &TextureAtomicMin_Texture2DArray_UInt32_texture, &TextureAtomicMin_Texture2DArray_UInt32_coordinate, &TextureAtomicMin_Texture2DArray_UInt32_value };

/// textureAtomicMin with Texture2DArray, Int32x3, Int32
Variable TextureAtomicMin_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2DArray_Int32_coordinate;
Variable TextureAtomicMin_Texture2DArray_Int32_value;
Function TextureAtomicMin_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int32_args = { &TextureAtomicMin_Texture2DArray_Int32_texture, &TextureAtomicMin_Texture2DArray_Int32_coordinate, &TextureAtomicMin_Texture2DArray_Int32_value };

/// textureAtomicMin with Texture2DArray, Int32x3, Int32
Variable TextureAtomicMin_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2DArray_Int32_coordinate;
Variable TextureAtomicMin_Texture2DArray_Int32_value;
Function TextureAtomicMin_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int32_args = { &TextureAtomicMin_Texture2DArray_Int32_texture, &TextureAtomicMin_Texture2DArray_Int32_coordinate, &TextureAtomicMin_Texture2DArray_Int32_value };

/// textureAtomicMin with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicMin_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicMin_Texture2DArray_UInt16_value;
Function TextureAtomicMin_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt16_args = { &TextureAtomicMin_Texture2DArray_UInt16_texture, &TextureAtomicMin_Texture2DArray_UInt16_coordinate, &TextureAtomicMin_Texture2DArray_UInt16_value };

/// textureAtomicMin with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicMin_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicMin_Texture2DArray_UInt16_value;
Function TextureAtomicMin_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt16_args = { &TextureAtomicMin_Texture2DArray_UInt16_texture, &TextureAtomicMin_Texture2DArray_UInt16_coordinate, &TextureAtomicMin_Texture2DArray_UInt16_value };

/// textureAtomicMin with Texture2DArray, Int32x3, Int16
Variable TextureAtomicMin_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2DArray_Int16_coordinate;
Variable TextureAtomicMin_Texture2DArray_Int16_value;
Function TextureAtomicMin_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int16_args = { &TextureAtomicMin_Texture2DArray_Int16_texture, &TextureAtomicMin_Texture2DArray_Int16_coordinate, &TextureAtomicMin_Texture2DArray_Int16_value };

/// textureAtomicMin with Texture2DArray, Int32x3, Int16
Variable TextureAtomicMin_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2DArray_Int16_coordinate;
Variable TextureAtomicMin_Texture2DArray_Int16_value;
Function TextureAtomicMin_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int16_args = { &TextureAtomicMin_Texture2DArray_Int16_texture, &TextureAtomicMin_Texture2DArray_Int16_coordinate, &TextureAtomicMin_Texture2DArray_Int16_value };

/// textureAtomicMin with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicMin_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicMin_TextureCubeArray_UInt32_value;
Function TextureAtomicMin_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt32_args = { &TextureAtomicMin_TextureCubeArray_UInt32_texture, &TextureAtomicMin_TextureCubeArray_UInt32_coordinate, &TextureAtomicMin_TextureCubeArray_UInt32_value };

/// textureAtomicMin with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicMin_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicMin_TextureCubeArray_UInt32_value;
Function TextureAtomicMin_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt32_args = { &TextureAtomicMin_TextureCubeArray_UInt32_texture, &TextureAtomicMin_TextureCubeArray_UInt32_coordinate, &TextureAtomicMin_TextureCubeArray_UInt32_value };

/// textureAtomicMin with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicMin_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicMin_TextureCubeArray_Int32_value;
Function TextureAtomicMin_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int32_args = { &TextureAtomicMin_TextureCubeArray_Int32_texture, &TextureAtomicMin_TextureCubeArray_Int32_coordinate, &TextureAtomicMin_TextureCubeArray_Int32_value };

/// textureAtomicMin with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicMin_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicMin_TextureCubeArray_Int32_value;
Function TextureAtomicMin_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int32_args = { &TextureAtomicMin_TextureCubeArray_Int32_texture, &TextureAtomicMin_TextureCubeArray_Int32_coordinate, &TextureAtomicMin_TextureCubeArray_Int32_value };

/// textureAtomicMin with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicMin_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicMin_TextureCubeArray_UInt16_value;
Function TextureAtomicMin_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt16_args = { &TextureAtomicMin_TextureCubeArray_UInt16_texture, &TextureAtomicMin_TextureCubeArray_UInt16_coordinate, &TextureAtomicMin_TextureCubeArray_UInt16_value };

/// textureAtomicMin with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicMin_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicMin_TextureCubeArray_UInt16_value;
Function TextureAtomicMin_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt16_args = { &TextureAtomicMin_TextureCubeArray_UInt16_texture, &TextureAtomicMin_TextureCubeArray_UInt16_coordinate, &TextureAtomicMin_TextureCubeArray_UInt16_value };

/// textureAtomicMin with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicMin_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicMin_TextureCubeArray_Int16_value;
Function TextureAtomicMin_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int16_args = { &TextureAtomicMin_TextureCubeArray_Int16_texture, &TextureAtomicMin_TextureCubeArray_Int16_coordinate, &TextureAtomicMin_TextureCubeArray_Int16_value };

/// textureAtomicMin with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicMin_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicMin_TextureCubeArray_Int16_value;
Function TextureAtomicMin_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int16_args = { &TextureAtomicMin_TextureCubeArray_Int16_texture, &TextureAtomicMin_TextureCubeArray_Int16_coordinate, &TextureAtomicMin_TextureCubeArray_Int16_value };

/// textureAtomicMax with Texture1D, Int32, UInt32
Variable TextureAtomicMax_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1D_UInt32_coordinate;
Variable TextureAtomicMax_Texture1D_UInt32_value;
Function TextureAtomicMax_Texture1D_UInt32;
inline constexpr std::array TextureAtomicMax_Texture1D_UInt32_args = { &TextureAtomicMax_Texture1D_UInt32_texture, &TextureAtomicMax_Texture1D_UInt32_coordinate, &TextureAtomicMax_Texture1D_UInt32_value };

/// textureAtomicMax with Texture1D, Int32, UInt32
Variable TextureAtomicMax_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1D_UInt32_coordinate;
Variable TextureAtomicMax_Texture1D_UInt32_value;
Function TextureAtomicMax_Texture1D_UInt32;
inline constexpr std::array TextureAtomicMax_Texture1D_UInt32_args = { &TextureAtomicMax_Texture1D_UInt32_texture, &TextureAtomicMax_Texture1D_UInt32_coordinate, &TextureAtomicMax_Texture1D_UInt32_value };

/// textureAtomicMax with Texture1D, Int32, Int32
Variable TextureAtomicMax_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1D_Int32_coordinate;
Variable TextureAtomicMax_Texture1D_Int32_value;
Function TextureAtomicMax_Texture1D_Int32;
inline constexpr std::array TextureAtomicMax_Texture1D_Int32_args = { &TextureAtomicMax_Texture1D_Int32_texture, &TextureAtomicMax_Texture1D_Int32_coordinate, &TextureAtomicMax_Texture1D_Int32_value };

/// textureAtomicMax with Texture1D, Int32, Int32
Variable TextureAtomicMax_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1D_Int32_coordinate;
Variable TextureAtomicMax_Texture1D_Int32_value;
Function TextureAtomicMax_Texture1D_Int32;
inline constexpr std::array TextureAtomicMax_Texture1D_Int32_args = { &TextureAtomicMax_Texture1D_Int32_texture, &TextureAtomicMax_Texture1D_Int32_coordinate, &TextureAtomicMax_Texture1D_Int32_value };

/// textureAtomicMax with Texture1D, Int32, UInt16
Variable TextureAtomicMax_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1D_UInt16_coordinate;
Variable TextureAtomicMax_Texture1D_UInt16_value;
Function TextureAtomicMax_Texture1D_UInt16;
inline constexpr std::array TextureAtomicMax_Texture1D_UInt16_args = { &TextureAtomicMax_Texture1D_UInt16_texture, &TextureAtomicMax_Texture1D_UInt16_coordinate, &TextureAtomicMax_Texture1D_UInt16_value };

/// textureAtomicMax with Texture1D, Int32, UInt16
Variable TextureAtomicMax_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1D_UInt16_coordinate;
Variable TextureAtomicMax_Texture1D_UInt16_value;
Function TextureAtomicMax_Texture1D_UInt16;
inline constexpr std::array TextureAtomicMax_Texture1D_UInt16_args = { &TextureAtomicMax_Texture1D_UInt16_texture, &TextureAtomicMax_Texture1D_UInt16_coordinate, &TextureAtomicMax_Texture1D_UInt16_value };

/// textureAtomicMax with Texture1D, Int32, Int16
Variable TextureAtomicMax_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1D_Int16_coordinate;
Variable TextureAtomicMax_Texture1D_Int16_value;
Function TextureAtomicMax_Texture1D_Int16;
inline constexpr std::array TextureAtomicMax_Texture1D_Int16_args = { &TextureAtomicMax_Texture1D_Int16_texture, &TextureAtomicMax_Texture1D_Int16_coordinate, &TextureAtomicMax_Texture1D_Int16_value };

/// textureAtomicMax with Texture1D, Int32, Int16
Variable TextureAtomicMax_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1D_Int16_coordinate;
Variable TextureAtomicMax_Texture1D_Int16_value;
Function TextureAtomicMax_Texture1D_Int16;
inline constexpr std::array TextureAtomicMax_Texture1D_Int16_args = { &TextureAtomicMax_Texture1D_Int16_texture, &TextureAtomicMax_Texture1D_Int16_coordinate, &TextureAtomicMax_Texture1D_Int16_value };

/// textureAtomicMax with Texture2D, Int32x2, UInt32
Variable TextureAtomicMax_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_UInt32_coordinate;
Variable TextureAtomicMax_Texture2D_UInt32_value;
Function TextureAtomicMax_Texture2D_UInt32;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt32_args = { &TextureAtomicMax_Texture2D_UInt32_texture, &TextureAtomicMax_Texture2D_UInt32_coordinate, &TextureAtomicMax_Texture2D_UInt32_value };

/// textureAtomicMax with Texture2D, Int32x2, UInt32
Variable TextureAtomicMax_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_UInt32_coordinate;
Variable TextureAtomicMax_Texture2D_UInt32_value;
Function TextureAtomicMax_Texture2D_UInt32;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt32_args = { &TextureAtomicMax_Texture2D_UInt32_texture, &TextureAtomicMax_Texture2D_UInt32_coordinate, &TextureAtomicMax_Texture2D_UInt32_value };

/// textureAtomicMax with Texture2D, Int32x2, Int32
Variable TextureAtomicMax_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_Int32_coordinate;
Variable TextureAtomicMax_Texture2D_Int32_value;
Function TextureAtomicMax_Texture2D_Int32;
inline constexpr std::array TextureAtomicMax_Texture2D_Int32_args = { &TextureAtomicMax_Texture2D_Int32_texture, &TextureAtomicMax_Texture2D_Int32_coordinate, &TextureAtomicMax_Texture2D_Int32_value };

/// textureAtomicMax with Texture2D, Int32x2, Int32
Variable TextureAtomicMax_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_Int32_coordinate;
Variable TextureAtomicMax_Texture2D_Int32_value;
Function TextureAtomicMax_Texture2D_Int32;
inline constexpr std::array TextureAtomicMax_Texture2D_Int32_args = { &TextureAtomicMax_Texture2D_Int32_texture, &TextureAtomicMax_Texture2D_Int32_coordinate, &TextureAtomicMax_Texture2D_Int32_value };

/// textureAtomicMax with Texture2D, Int32x2, UInt16
Variable TextureAtomicMax_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_UInt16_coordinate;
Variable TextureAtomicMax_Texture2D_UInt16_value;
Function TextureAtomicMax_Texture2D_UInt16;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt16_args = { &TextureAtomicMax_Texture2D_UInt16_texture, &TextureAtomicMax_Texture2D_UInt16_coordinate, &TextureAtomicMax_Texture2D_UInt16_value };

/// textureAtomicMax with Texture2D, Int32x2, UInt16
Variable TextureAtomicMax_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_UInt16_coordinate;
Variable TextureAtomicMax_Texture2D_UInt16_value;
Function TextureAtomicMax_Texture2D_UInt16;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt16_args = { &TextureAtomicMax_Texture2D_UInt16_texture, &TextureAtomicMax_Texture2D_UInt16_coordinate, &TextureAtomicMax_Texture2D_UInt16_value };

/// textureAtomicMax with Texture2D, Int32x2, Int16
Variable TextureAtomicMax_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_Int16_coordinate;
Variable TextureAtomicMax_Texture2D_Int16_value;
Function TextureAtomicMax_Texture2D_Int16;
inline constexpr std::array TextureAtomicMax_Texture2D_Int16_args = { &TextureAtomicMax_Texture2D_Int16_texture, &TextureAtomicMax_Texture2D_Int16_coordinate, &TextureAtomicMax_Texture2D_Int16_value };

/// textureAtomicMax with Texture2D, Int32x2, Int16
Variable TextureAtomicMax_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_Int16_coordinate;
Variable TextureAtomicMax_Texture2D_Int16_value;
Function TextureAtomicMax_Texture2D_Int16;
inline constexpr std::array TextureAtomicMax_Texture2D_Int16_args = { &TextureAtomicMax_Texture2D_Int16_texture, &TextureAtomicMax_Texture2D_Int16_coordinate, &TextureAtomicMax_Texture2D_Int16_value };

/// textureAtomicMax with Texture3D, Int32x3, UInt32
Variable TextureAtomicMax_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_UInt32_coordinate;
Variable TextureAtomicMax_Texture3D_UInt32_value;
Function TextureAtomicMax_Texture3D_UInt32;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt32_args = { &TextureAtomicMax_Texture3D_UInt32_texture, &TextureAtomicMax_Texture3D_UInt32_coordinate, &TextureAtomicMax_Texture3D_UInt32_value };

/// textureAtomicMax with Texture3D, Int32x3, UInt32
Variable TextureAtomicMax_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_UInt32_coordinate;
Variable TextureAtomicMax_Texture3D_UInt32_value;
Function TextureAtomicMax_Texture3D_UInt32;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt32_args = { &TextureAtomicMax_Texture3D_UInt32_texture, &TextureAtomicMax_Texture3D_UInt32_coordinate, &TextureAtomicMax_Texture3D_UInt32_value };

/// textureAtomicMax with Texture3D, Int32x3, Int32
Variable TextureAtomicMax_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_Int32_coordinate;
Variable TextureAtomicMax_Texture3D_Int32_value;
Function TextureAtomicMax_Texture3D_Int32;
inline constexpr std::array TextureAtomicMax_Texture3D_Int32_args = { &TextureAtomicMax_Texture3D_Int32_texture, &TextureAtomicMax_Texture3D_Int32_coordinate, &TextureAtomicMax_Texture3D_Int32_value };

/// textureAtomicMax with Texture3D, Int32x3, Int32
Variable TextureAtomicMax_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_Int32_coordinate;
Variable TextureAtomicMax_Texture3D_Int32_value;
Function TextureAtomicMax_Texture3D_Int32;
inline constexpr std::array TextureAtomicMax_Texture3D_Int32_args = { &TextureAtomicMax_Texture3D_Int32_texture, &TextureAtomicMax_Texture3D_Int32_coordinate, &TextureAtomicMax_Texture3D_Int32_value };

/// textureAtomicMax with Texture3D, Int32x3, UInt16
Variable TextureAtomicMax_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_UInt16_coordinate;
Variable TextureAtomicMax_Texture3D_UInt16_value;
Function TextureAtomicMax_Texture3D_UInt16;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt16_args = { &TextureAtomicMax_Texture3D_UInt16_texture, &TextureAtomicMax_Texture3D_UInt16_coordinate, &TextureAtomicMax_Texture3D_UInt16_value };

/// textureAtomicMax with Texture3D, Int32x3, UInt16
Variable TextureAtomicMax_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_UInt16_coordinate;
Variable TextureAtomicMax_Texture3D_UInt16_value;
Function TextureAtomicMax_Texture3D_UInt16;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt16_args = { &TextureAtomicMax_Texture3D_UInt16_texture, &TextureAtomicMax_Texture3D_UInt16_coordinate, &TextureAtomicMax_Texture3D_UInt16_value };

void SetupIntrinsics16()
{
    /// textureAtomicSubtract with Texture1D, Int32, Int16
    TextureAtomicSubtract_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicSubtract_Texture1D_Int16_texture.type.modifiers = TextureAtomicSubtract_Texture1D_Int16_texture_modifiers;
    TextureAtomicSubtract_Texture1D_Int16_texture.type.modifierValues = TextureAtomicSubtract_Texture1D_Int16_texture_modifierValues;
    TextureAtomicSubtract_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicSubtract_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1D_Int16.name = TextureAtomicSubtract_Texture1D_Int16_name;
    TextureAtomicSubtract_Texture1D_Int16.backendIndex = 2985;
    TextureAtomicSubtract_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_Texture1D_Int16.parameters = TextureAtomicSubtract_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16)->signature = "textureAtomicSubtract(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16)->name = "textureAtomicSubtract(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with Texture1D, Int32, Int16
    TextureAtomicSubtract_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicSubtract_Texture1D_Int16_texture.type.modifiers = TextureAtomicSubtract_Texture1D_Int16_texture_modifiers;
    TextureAtomicSubtract_Texture1D_Int16_texture.type.modifierValues = TextureAtomicSubtract_Texture1D_Int16_texture_modifierValues;
    TextureAtomicSubtract_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicSubtract_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1D_Int16.name = TextureAtomicSubtract_Texture1D_Int16_name;
    TextureAtomicSubtract_Texture1D_Int16.backendIndex = 2986;
    TextureAtomicSubtract_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_Texture1D_Int16.parameters = TextureAtomicSubtract_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16)->signature = "textureAtomicSubtract(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16)->name = "textureAtomicSubtract(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with Texture2D, Int32x2, UInt32
    TextureAtomicSubtract_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicSubtract_Texture2D_UInt32_texture.type.modifiers = TextureAtomicSubtract_Texture2D_UInt32_texture_modifiers;
    TextureAtomicSubtract_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicSubtract_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicSubtract_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2D_UInt32.name = TextureAtomicSubtract_Texture2D_UInt32_name;
    TextureAtomicSubtract_Texture2D_UInt32.backendIndex = 2987;
    TextureAtomicSubtract_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_Texture2D_UInt32.parameters = TextureAtomicSubtract_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32)->signature = "textureAtomicSubtract(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32)->name = "textureAtomicSubtract(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with Texture2D, Int32x2, UInt32
    TextureAtomicSubtract_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicSubtract_Texture2D_UInt32_texture.type.modifiers = TextureAtomicSubtract_Texture2D_UInt32_texture_modifiers;
    TextureAtomicSubtract_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicSubtract_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicSubtract_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2D_UInt32.name = TextureAtomicSubtract_Texture2D_UInt32_name;
    TextureAtomicSubtract_Texture2D_UInt32.backendIndex = 2988;
    TextureAtomicSubtract_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_Texture2D_UInt32.parameters = TextureAtomicSubtract_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32)->signature = "textureAtomicSubtract(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32)->name = "textureAtomicSubtract(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with Texture2D, Int32x2, Int32
    TextureAtomicSubtract_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicSubtract_Texture2D_Int32_texture.type.modifiers = TextureAtomicSubtract_Texture2D_Int32_texture_modifiers;
    TextureAtomicSubtract_Texture2D_Int32_texture.type.modifierValues = TextureAtomicSubtract_Texture2D_Int32_texture_modifierValues;
    TextureAtomicSubtract_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicSubtract_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2D_Int32.name = TextureAtomicSubtract_Texture2D_Int32_name;
    TextureAtomicSubtract_Texture2D_Int32.backendIndex = 2989;
    TextureAtomicSubtract_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_Texture2D_Int32.parameters = TextureAtomicSubtract_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32)->signature = "textureAtomicSubtract(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32)->name = "textureAtomicSubtract(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with Texture2D, Int32x2, Int32
    TextureAtomicSubtract_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicSubtract_Texture2D_Int32_texture.type.modifiers = TextureAtomicSubtract_Texture2D_Int32_texture_modifiers;
    TextureAtomicSubtract_Texture2D_Int32_texture.type.modifierValues = TextureAtomicSubtract_Texture2D_Int32_texture_modifierValues;
    TextureAtomicSubtract_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicSubtract_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2D_Int32.name = TextureAtomicSubtract_Texture2D_Int32_name;
    TextureAtomicSubtract_Texture2D_Int32.backendIndex = 2990;
    TextureAtomicSubtract_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_Texture2D_Int32.parameters = TextureAtomicSubtract_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32)->signature = "textureAtomicSubtract(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32)->name = "textureAtomicSubtract(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with Texture2D, Int32x2, UInt16
    TextureAtomicSubtract_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicSubtract_Texture2D_UInt16_texture.type.modifiers = TextureAtomicSubtract_Texture2D_UInt16_texture_modifiers;
    TextureAtomicSubtract_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicSubtract_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicSubtract_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2D_UInt16.name = TextureAtomicSubtract_Texture2D_UInt16_name;
    TextureAtomicSubtract_Texture2D_UInt16.backendIndex = 2991;
    TextureAtomicSubtract_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_Texture2D_UInt16.parameters = TextureAtomicSubtract_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16)->signature = "textureAtomicSubtract(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16)->name = "textureAtomicSubtract(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with Texture2D, Int32x2, UInt16
    TextureAtomicSubtract_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicSubtract_Texture2D_UInt16_texture.type.modifiers = TextureAtomicSubtract_Texture2D_UInt16_texture_modifiers;
    TextureAtomicSubtract_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicSubtract_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicSubtract_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2D_UInt16.name = TextureAtomicSubtract_Texture2D_UInt16_name;
    TextureAtomicSubtract_Texture2D_UInt16.backendIndex = 2992;
    TextureAtomicSubtract_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_Texture2D_UInt16.parameters = TextureAtomicSubtract_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16)->signature = "textureAtomicSubtract(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16)->name = "textureAtomicSubtract(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with Texture2D, Int32x2, Int16
    TextureAtomicSubtract_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicSubtract_Texture2D_Int16_texture.type.modifiers = TextureAtomicSubtract_Texture2D_Int16_texture_modifiers;
    TextureAtomicSubtract_Texture2D_Int16_texture.type.modifierValues = TextureAtomicSubtract_Texture2D_Int16_texture_modifierValues;
    TextureAtomicSubtract_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicSubtract_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2D_Int16.name = TextureAtomicSubtract_Texture2D_Int16_name;
    TextureAtomicSubtract_Texture2D_Int16.backendIndex = 2993;
    TextureAtomicSubtract_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_Texture2D_Int16.parameters = TextureAtomicSubtract_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16)->signature = "textureAtomicSubtract(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16)->name = "textureAtomicSubtract(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with Texture2D, Int32x2, Int16
    TextureAtomicSubtract_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicSubtract_Texture2D_Int16_texture.type.modifiers = TextureAtomicSubtract_Texture2D_Int16_texture_modifiers;
    TextureAtomicSubtract_Texture2D_Int16_texture.type.modifierValues = TextureAtomicSubtract_Texture2D_Int16_texture_modifierValues;
    TextureAtomicSubtract_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicSubtract_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2D_Int16.name = TextureAtomicSubtract_Texture2D_Int16_name;
    TextureAtomicSubtract_Texture2D_Int16.backendIndex = 2994;
    TextureAtomicSubtract_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_Texture2D_Int16.parameters = TextureAtomicSubtract_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16)->signature = "textureAtomicSubtract(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16)->name = "textureAtomicSubtract(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with Texture3D, Int32x3, UInt32
    TextureAtomicSubtract_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicSubtract_Texture3D_UInt32_texture.type.modifiers = TextureAtomicSubtract_Texture3D_UInt32_texture_modifiers;
    TextureAtomicSubtract_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicSubtract_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicSubtract_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture3D_UInt32.name = TextureAtomicSubtract_Texture3D_UInt32_name;
    TextureAtomicSubtract_Texture3D_UInt32.backendIndex = 2995;
    TextureAtomicSubtract_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_Texture3D_UInt32.parameters = TextureAtomicSubtract_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32)->signature = "textureAtomicSubtract(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32)->name = "textureAtomicSubtract(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with Texture3D, Int32x3, UInt32
    TextureAtomicSubtract_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicSubtract_Texture3D_UInt32_texture.type.modifiers = TextureAtomicSubtract_Texture3D_UInt32_texture_modifiers;
    TextureAtomicSubtract_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicSubtract_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicSubtract_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture3D_UInt32.name = TextureAtomicSubtract_Texture3D_UInt32_name;
    TextureAtomicSubtract_Texture3D_UInt32.backendIndex = 2996;
    TextureAtomicSubtract_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_Texture3D_UInt32.parameters = TextureAtomicSubtract_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32)->signature = "textureAtomicSubtract(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32)->name = "textureAtomicSubtract(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with Texture3D, Int32x3, Int32
    TextureAtomicSubtract_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicSubtract_Texture3D_Int32_texture.type.modifiers = TextureAtomicSubtract_Texture3D_Int32_texture_modifiers;
    TextureAtomicSubtract_Texture3D_Int32_texture.type.modifierValues = TextureAtomicSubtract_Texture3D_Int32_texture_modifierValues;
    TextureAtomicSubtract_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicSubtract_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture3D_Int32.name = TextureAtomicSubtract_Texture3D_Int32_name;
    TextureAtomicSubtract_Texture3D_Int32.backendIndex = 2997;
    TextureAtomicSubtract_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_Texture3D_Int32.parameters = TextureAtomicSubtract_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32)->signature = "textureAtomicSubtract(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32)->name = "textureAtomicSubtract(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with Texture3D, Int32x3, Int32
    TextureAtomicSubtract_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicSubtract_Texture3D_Int32_texture.type.modifiers = TextureAtomicSubtract_Texture3D_Int32_texture_modifiers;
    TextureAtomicSubtract_Texture3D_Int32_texture.type.modifierValues = TextureAtomicSubtract_Texture3D_Int32_texture_modifierValues;
    TextureAtomicSubtract_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicSubtract_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture3D_Int32.name = TextureAtomicSubtract_Texture3D_Int32_name;
    TextureAtomicSubtract_Texture3D_Int32.backendIndex = 2998;
    TextureAtomicSubtract_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_Texture3D_Int32.parameters = TextureAtomicSubtract_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32)->signature = "textureAtomicSubtract(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32)->name = "textureAtomicSubtract(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with Texture3D, Int32x3, UInt16
    TextureAtomicSubtract_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicSubtract_Texture3D_UInt16_texture.type.modifiers = TextureAtomicSubtract_Texture3D_UInt16_texture_modifiers;
    TextureAtomicSubtract_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicSubtract_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicSubtract_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture3D_UInt16.name = TextureAtomicSubtract_Texture3D_UInt16_name;
    TextureAtomicSubtract_Texture3D_UInt16.backendIndex = 2999;
    TextureAtomicSubtract_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_Texture3D_UInt16.parameters = TextureAtomicSubtract_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16)->signature = "textureAtomicSubtract(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16)->name = "textureAtomicSubtract(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with Texture3D, Int32x3, UInt16
    TextureAtomicSubtract_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicSubtract_Texture3D_UInt16_texture.type.modifiers = TextureAtomicSubtract_Texture3D_UInt16_texture_modifiers;
    TextureAtomicSubtract_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicSubtract_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicSubtract_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture3D_UInt16.name = TextureAtomicSubtract_Texture3D_UInt16_name;
    TextureAtomicSubtract_Texture3D_UInt16.backendIndex = 3000;
    TextureAtomicSubtract_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_Texture3D_UInt16.parameters = TextureAtomicSubtract_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16)->signature = "textureAtomicSubtract(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16)->name = "textureAtomicSubtract(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with Texture3D, Int32x3, Int16
    TextureAtomicSubtract_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicSubtract_Texture3D_Int16_texture.type.modifiers = TextureAtomicSubtract_Texture3D_Int16_texture_modifiers;
    TextureAtomicSubtract_Texture3D_Int16_texture.type.modifierValues = TextureAtomicSubtract_Texture3D_Int16_texture_modifierValues;
    TextureAtomicSubtract_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicSubtract_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture3D_Int16.name = TextureAtomicSubtract_Texture3D_Int16_name;
    TextureAtomicSubtract_Texture3D_Int16.backendIndex = 3001;
    TextureAtomicSubtract_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_Texture3D_Int16.parameters = TextureAtomicSubtract_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16)->signature = "textureAtomicSubtract(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16)->name = "textureAtomicSubtract(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with Texture3D, Int32x3, Int16
    TextureAtomicSubtract_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicSubtract_Texture3D_Int16_texture.type.modifiers = TextureAtomicSubtract_Texture3D_Int16_texture_modifiers;
    TextureAtomicSubtract_Texture3D_Int16_texture.type.modifierValues = TextureAtomicSubtract_Texture3D_Int16_texture_modifierValues;
    TextureAtomicSubtract_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicSubtract_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture3D_Int16.name = TextureAtomicSubtract_Texture3D_Int16_name;
    TextureAtomicSubtract_Texture3D_Int16.backendIndex = 3002;
    TextureAtomicSubtract_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_Texture3D_Int16.parameters = TextureAtomicSubtract_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16)->signature = "textureAtomicSubtract(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16)->name = "textureAtomicSubtract(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with TextureCube, Int32x3, UInt32
    TextureAtomicSubtract_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicSubtract_TextureCube_UInt32_texture.type.modifiers = TextureAtomicSubtract_TextureCube_UInt32_texture_modifiers;
    TextureAtomicSubtract_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicSubtract_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicSubtract_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCube_UInt32.name = TextureAtomicSubtract_TextureCube_UInt32_name;
    TextureAtomicSubtract_TextureCube_UInt32.backendIndex = 3003;
    TextureAtomicSubtract_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_TextureCube_UInt32.parameters = TextureAtomicSubtract_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32)->signature = "textureAtomicSubtract(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32)->name = "textureAtomicSubtract(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with TextureCube, Int32x3, UInt32
    TextureAtomicSubtract_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicSubtract_TextureCube_UInt32_texture.type.modifiers = TextureAtomicSubtract_TextureCube_UInt32_texture_modifiers;
    TextureAtomicSubtract_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicSubtract_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicSubtract_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCube_UInt32.name = TextureAtomicSubtract_TextureCube_UInt32_name;
    TextureAtomicSubtract_TextureCube_UInt32.backendIndex = 3004;
    TextureAtomicSubtract_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_TextureCube_UInt32.parameters = TextureAtomicSubtract_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32)->signature = "textureAtomicSubtract(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32)->name = "textureAtomicSubtract(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with TextureCube, Int32x3, Int32
    TextureAtomicSubtract_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicSubtract_TextureCube_Int32_texture.type.modifiers = TextureAtomicSubtract_TextureCube_Int32_texture_modifiers;
    TextureAtomicSubtract_TextureCube_Int32_texture.type.modifierValues = TextureAtomicSubtract_TextureCube_Int32_texture_modifierValues;
    TextureAtomicSubtract_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicSubtract_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCube_Int32.name = TextureAtomicSubtract_TextureCube_Int32_name;
    TextureAtomicSubtract_TextureCube_Int32.backendIndex = 3005;
    TextureAtomicSubtract_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_TextureCube_Int32.parameters = TextureAtomicSubtract_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32)->signature = "textureAtomicSubtract(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32)->name = "textureAtomicSubtract(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with TextureCube, Int32x3, Int32
    TextureAtomicSubtract_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicSubtract_TextureCube_Int32_texture.type.modifiers = TextureAtomicSubtract_TextureCube_Int32_texture_modifiers;
    TextureAtomicSubtract_TextureCube_Int32_texture.type.modifierValues = TextureAtomicSubtract_TextureCube_Int32_texture_modifierValues;
    TextureAtomicSubtract_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicSubtract_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCube_Int32.name = TextureAtomicSubtract_TextureCube_Int32_name;
    TextureAtomicSubtract_TextureCube_Int32.backendIndex = 3006;
    TextureAtomicSubtract_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_TextureCube_Int32.parameters = TextureAtomicSubtract_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32)->signature = "textureAtomicSubtract(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32)->name = "textureAtomicSubtract(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with TextureCube, Int32x3, UInt16
    TextureAtomicSubtract_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicSubtract_TextureCube_UInt16_texture.type.modifiers = TextureAtomicSubtract_TextureCube_UInt16_texture_modifiers;
    TextureAtomicSubtract_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicSubtract_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicSubtract_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCube_UInt16.name = TextureAtomicSubtract_TextureCube_UInt16_name;
    TextureAtomicSubtract_TextureCube_UInt16.backendIndex = 3007;
    TextureAtomicSubtract_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_TextureCube_UInt16.parameters = TextureAtomicSubtract_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16)->signature = "textureAtomicSubtract(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16)->name = "textureAtomicSubtract(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with TextureCube, Int32x3, UInt16
    TextureAtomicSubtract_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicSubtract_TextureCube_UInt16_texture.type.modifiers = TextureAtomicSubtract_TextureCube_UInt16_texture_modifiers;
    TextureAtomicSubtract_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicSubtract_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicSubtract_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCube_UInt16.name = TextureAtomicSubtract_TextureCube_UInt16_name;
    TextureAtomicSubtract_TextureCube_UInt16.backendIndex = 3008;
    TextureAtomicSubtract_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_TextureCube_UInt16.parameters = TextureAtomicSubtract_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16)->signature = "textureAtomicSubtract(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16)->name = "textureAtomicSubtract(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with TextureCube, Int32x3, Int16
    TextureAtomicSubtract_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicSubtract_TextureCube_Int16_texture.type.modifiers = TextureAtomicSubtract_TextureCube_Int16_texture_modifiers;
    TextureAtomicSubtract_TextureCube_Int16_texture.type.modifierValues = TextureAtomicSubtract_TextureCube_Int16_texture_modifierValues;
    TextureAtomicSubtract_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicSubtract_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCube_Int16.name = TextureAtomicSubtract_TextureCube_Int16_name;
    TextureAtomicSubtract_TextureCube_Int16.backendIndex = 3009;
    TextureAtomicSubtract_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_TextureCube_Int16.parameters = TextureAtomicSubtract_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16)->signature = "textureAtomicSubtract(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16)->name = "textureAtomicSubtract(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with TextureCube, Int32x3, Int16
    TextureAtomicSubtract_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicSubtract_TextureCube_Int16_texture.type.modifiers = TextureAtomicSubtract_TextureCube_Int16_texture_modifiers;
    TextureAtomicSubtract_TextureCube_Int16_texture.type.modifierValues = TextureAtomicSubtract_TextureCube_Int16_texture_modifierValues;
    TextureAtomicSubtract_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicSubtract_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCube_Int16.name = TextureAtomicSubtract_TextureCube_Int16_name;
    TextureAtomicSubtract_TextureCube_Int16.backendIndex = 3010;
    TextureAtomicSubtract_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_TextureCube_Int16.parameters = TextureAtomicSubtract_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16)->signature = "textureAtomicSubtract(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16)->name = "textureAtomicSubtract(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with Texture1DArray, Int32x2, UInt32
    TextureAtomicSubtract_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicSubtract_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicSubtract_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicSubtract_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicSubtract_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicSubtract_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1DArray_UInt32.name = TextureAtomicSubtract_Texture1DArray_UInt32_name;
    TextureAtomicSubtract_Texture1DArray_UInt32.backendIndex = 3011;
    TextureAtomicSubtract_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt32.parameters = TextureAtomicSubtract_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32)->signature = "textureAtomicSubtract(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32)->name = "textureAtomicSubtract(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with Texture1DArray, Int32x2, UInt32
    TextureAtomicSubtract_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicSubtract_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicSubtract_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicSubtract_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicSubtract_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicSubtract_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1DArray_UInt32.name = TextureAtomicSubtract_Texture1DArray_UInt32_name;
    TextureAtomicSubtract_Texture1DArray_UInt32.backendIndex = 3012;
    TextureAtomicSubtract_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt32.parameters = TextureAtomicSubtract_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32)->signature = "textureAtomicSubtract(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32)->name = "textureAtomicSubtract(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with Texture1DArray, Int32x2, Int32
    TextureAtomicSubtract_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicSubtract_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicSubtract_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicSubtract_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicSubtract_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicSubtract_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicSubtract_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1DArray_Int32.name = TextureAtomicSubtract_Texture1DArray_Int32_name;
    TextureAtomicSubtract_Texture1DArray_Int32.backendIndex = 3013;
    TextureAtomicSubtract_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_Texture1DArray_Int32.parameters = TextureAtomicSubtract_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32)->signature = "textureAtomicSubtract(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32)->name = "textureAtomicSubtract(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with Texture1DArray, Int32x2, Int32
    TextureAtomicSubtract_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicSubtract_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicSubtract_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicSubtract_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicSubtract_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicSubtract_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicSubtract_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1DArray_Int32.name = TextureAtomicSubtract_Texture1DArray_Int32_name;
    TextureAtomicSubtract_Texture1DArray_Int32.backendIndex = 3014;
    TextureAtomicSubtract_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_Texture1DArray_Int32.parameters = TextureAtomicSubtract_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32)->signature = "textureAtomicSubtract(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32)->name = "textureAtomicSubtract(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with Texture1DArray, Int32x2, UInt16
    TextureAtomicSubtract_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicSubtract_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicSubtract_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicSubtract_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicSubtract_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicSubtract_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1DArray_UInt16.name = TextureAtomicSubtract_Texture1DArray_UInt16_name;
    TextureAtomicSubtract_Texture1DArray_UInt16.backendIndex = 3015;
    TextureAtomicSubtract_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt16.parameters = TextureAtomicSubtract_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16)->signature = "textureAtomicSubtract(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16)->name = "textureAtomicSubtract(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with Texture1DArray, Int32x2, UInt16
    TextureAtomicSubtract_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicSubtract_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicSubtract_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicSubtract_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicSubtract_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicSubtract_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1DArray_UInt16.name = TextureAtomicSubtract_Texture1DArray_UInt16_name;
    TextureAtomicSubtract_Texture1DArray_UInt16.backendIndex = 3016;
    TextureAtomicSubtract_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt16.parameters = TextureAtomicSubtract_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16)->signature = "textureAtomicSubtract(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16)->name = "textureAtomicSubtract(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with Texture1DArray, Int32x2, Int16
    TextureAtomicSubtract_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicSubtract_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicSubtract_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicSubtract_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicSubtract_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicSubtract_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicSubtract_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1DArray_Int16.name = TextureAtomicSubtract_Texture1DArray_Int16_name;
    TextureAtomicSubtract_Texture1DArray_Int16.backendIndex = 3017;
    TextureAtomicSubtract_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_Texture1DArray_Int16.parameters = TextureAtomicSubtract_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16)->signature = "textureAtomicSubtract(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16)->name = "textureAtomicSubtract(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with Texture1DArray, Int32x2, Int16
    TextureAtomicSubtract_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicSubtract_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicSubtract_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicSubtract_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicSubtract_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicSubtract_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicSubtract_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1DArray_Int16.name = TextureAtomicSubtract_Texture1DArray_Int16_name;
    TextureAtomicSubtract_Texture1DArray_Int16.backendIndex = 3018;
    TextureAtomicSubtract_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_Texture1DArray_Int16.parameters = TextureAtomicSubtract_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16)->signature = "textureAtomicSubtract(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16)->name = "textureAtomicSubtract(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with Texture2DArray, Int32x3, UInt32
    TextureAtomicSubtract_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicSubtract_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicSubtract_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicSubtract_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicSubtract_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicSubtract_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2DArray_UInt32.name = TextureAtomicSubtract_Texture2DArray_UInt32_name;
    TextureAtomicSubtract_Texture2DArray_UInt32.backendIndex = 3019;
    TextureAtomicSubtract_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt32.parameters = TextureAtomicSubtract_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32)->signature = "textureAtomicSubtract(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32)->name = "textureAtomicSubtract(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with Texture2DArray, Int32x3, UInt32
    TextureAtomicSubtract_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicSubtract_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicSubtract_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicSubtract_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicSubtract_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicSubtract_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2DArray_UInt32.name = TextureAtomicSubtract_Texture2DArray_UInt32_name;
    TextureAtomicSubtract_Texture2DArray_UInt32.backendIndex = 3020;
    TextureAtomicSubtract_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt32.parameters = TextureAtomicSubtract_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32)->signature = "textureAtomicSubtract(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32)->name = "textureAtomicSubtract(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with Texture2DArray, Int32x3, Int32
    TextureAtomicSubtract_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicSubtract_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicSubtract_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicSubtract_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicSubtract_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicSubtract_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicSubtract_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2DArray_Int32.name = TextureAtomicSubtract_Texture2DArray_Int32_name;
    TextureAtomicSubtract_Texture2DArray_Int32.backendIndex = 3021;
    TextureAtomicSubtract_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_Texture2DArray_Int32.parameters = TextureAtomicSubtract_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32)->signature = "textureAtomicSubtract(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32)->name = "textureAtomicSubtract(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with Texture2DArray, Int32x3, Int32
    TextureAtomicSubtract_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicSubtract_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicSubtract_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicSubtract_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicSubtract_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicSubtract_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicSubtract_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2DArray_Int32.name = TextureAtomicSubtract_Texture2DArray_Int32_name;
    TextureAtomicSubtract_Texture2DArray_Int32.backendIndex = 3022;
    TextureAtomicSubtract_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_Texture2DArray_Int32.parameters = TextureAtomicSubtract_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32)->signature = "textureAtomicSubtract(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32)->name = "textureAtomicSubtract(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with Texture2DArray, Int32x3, UInt16
    TextureAtomicSubtract_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicSubtract_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicSubtract_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicSubtract_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicSubtract_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicSubtract_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2DArray_UInt16.name = TextureAtomicSubtract_Texture2DArray_UInt16_name;
    TextureAtomicSubtract_Texture2DArray_UInt16.backendIndex = 3023;
    TextureAtomicSubtract_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt16.parameters = TextureAtomicSubtract_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16)->signature = "textureAtomicSubtract(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16)->name = "textureAtomicSubtract(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with Texture2DArray, Int32x3, UInt16
    TextureAtomicSubtract_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicSubtract_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicSubtract_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicSubtract_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicSubtract_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicSubtract_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2DArray_UInt16.name = TextureAtomicSubtract_Texture2DArray_UInt16_name;
    TextureAtomicSubtract_Texture2DArray_UInt16.backendIndex = 3024;
    TextureAtomicSubtract_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt16.parameters = TextureAtomicSubtract_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16)->signature = "textureAtomicSubtract(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16)->name = "textureAtomicSubtract(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with Texture2DArray, Int32x3, Int16
    TextureAtomicSubtract_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicSubtract_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicSubtract_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicSubtract_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicSubtract_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicSubtract_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicSubtract_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2DArray_Int16.name = TextureAtomicSubtract_Texture2DArray_Int16_name;
    TextureAtomicSubtract_Texture2DArray_Int16.backendIndex = 3025;
    TextureAtomicSubtract_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_Texture2DArray_Int16.parameters = TextureAtomicSubtract_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16)->signature = "textureAtomicSubtract(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16)->name = "textureAtomicSubtract(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with Texture2DArray, Int32x3, Int16
    TextureAtomicSubtract_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicSubtract_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicSubtract_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicSubtract_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicSubtract_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicSubtract_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicSubtract_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2DArray_Int16.name = TextureAtomicSubtract_Texture2DArray_Int16_name;
    TextureAtomicSubtract_Texture2DArray_Int16.backendIndex = 3026;
    TextureAtomicSubtract_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_Texture2DArray_Int16.parameters = TextureAtomicSubtract_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16)->signature = "textureAtomicSubtract(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16)->name = "textureAtomicSubtract(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with TextureCubeArray, Int32x4, UInt32
    TextureAtomicSubtract_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicSubtract_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicSubtract_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicSubtract_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicSubtract_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicSubtract_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCubeArray_UInt32.name = TextureAtomicSubtract_TextureCubeArray_UInt32_name;
    TextureAtomicSubtract_TextureCubeArray_UInt32.backendIndex = 3027;
    TextureAtomicSubtract_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt32.parameters = TextureAtomicSubtract_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32)->signature = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32)->name = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with TextureCubeArray, Int32x4, UInt32
    TextureAtomicSubtract_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicSubtract_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicSubtract_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicSubtract_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicSubtract_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicSubtract_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCubeArray_UInt32.name = TextureAtomicSubtract_TextureCubeArray_UInt32_name;
    TextureAtomicSubtract_TextureCubeArray_UInt32.backendIndex = 3028;
    TextureAtomicSubtract_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt32.parameters = TextureAtomicSubtract_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32)->signature = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32)->name = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with TextureCubeArray, Int32x4, Int32
    TextureAtomicSubtract_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicSubtract_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicSubtract_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicSubtract_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicSubtract_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicSubtract_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicSubtract_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCubeArray_Int32.name = TextureAtomicSubtract_TextureCubeArray_Int32_name;
    TextureAtomicSubtract_TextureCubeArray_Int32.backendIndex = 3029;
    TextureAtomicSubtract_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int32.parameters = TextureAtomicSubtract_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32)->signature = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32)->name = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with TextureCubeArray, Int32x4, Int32
    TextureAtomicSubtract_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicSubtract_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicSubtract_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicSubtract_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicSubtract_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicSubtract_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicSubtract_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCubeArray_Int32.name = TextureAtomicSubtract_TextureCubeArray_Int32_name;
    TextureAtomicSubtract_TextureCubeArray_Int32.backendIndex = 3030;
    TextureAtomicSubtract_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int32.parameters = TextureAtomicSubtract_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32)->signature = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32)->name = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with TextureCubeArray, Int32x4, UInt16
    TextureAtomicSubtract_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicSubtract_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicSubtract_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicSubtract_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicSubtract_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicSubtract_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCubeArray_UInt16.name = TextureAtomicSubtract_TextureCubeArray_UInt16_name;
    TextureAtomicSubtract_TextureCubeArray_UInt16.backendIndex = 3031;
    TextureAtomicSubtract_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt16.parameters = TextureAtomicSubtract_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16)->signature = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16)->name = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with TextureCubeArray, Int32x4, UInt16
    TextureAtomicSubtract_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicSubtract_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicSubtract_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicSubtract_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicSubtract_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicSubtract_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCubeArray_UInt16.name = TextureAtomicSubtract_TextureCubeArray_UInt16_name;
    TextureAtomicSubtract_TextureCubeArray_UInt16.backendIndex = 3032;
    TextureAtomicSubtract_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt16.parameters = TextureAtomicSubtract_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16)->signature = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16)->name = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with TextureCubeArray, Int32x4, Int16
    TextureAtomicSubtract_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicSubtract_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicSubtract_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicSubtract_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicSubtract_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicSubtract_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicSubtract_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCubeArray_Int16.name = TextureAtomicSubtract_TextureCubeArray_Int16_name;
    TextureAtomicSubtract_TextureCubeArray_Int16.backendIndex = 3033;
    TextureAtomicSubtract_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int16.parameters = TextureAtomicSubtract_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16)->signature = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16)->name = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with TextureCubeArray, Int32x4, Int16
    TextureAtomicSubtract_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicSubtract_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicSubtract_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicSubtract_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicSubtract_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicSubtract_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicSubtract_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCubeArray_Int16.name = TextureAtomicSubtract_TextureCubeArray_Int16_name;
    TextureAtomicSubtract_TextureCubeArray_Int16.backendIndex = 3034;
    TextureAtomicSubtract_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int16.parameters = TextureAtomicSubtract_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16)->signature = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16)->name = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with Texture1D, Int32, UInt32
    TextureAtomicMin_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMin_Texture1D_UInt32_texture.type.modifiers = TextureAtomicMin_Texture1D_UInt32_texture_modifiers;
    TextureAtomicMin_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicMin_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicMin_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicMin_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1D_UInt32.name = TextureAtomicMin_Texture1D_UInt32_name;
    TextureAtomicMin_Texture1D_UInt32.backendIndex = 3035;
    TextureAtomicMin_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_Texture1D_UInt32.parameters = TextureAtomicMin_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32)->signature = "textureAtomicMin(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32)->name = "textureAtomicMin(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with Texture1D, Int32, UInt32
    TextureAtomicMin_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMin_Texture1D_UInt32_texture.type.modifiers = TextureAtomicMin_Texture1D_UInt32_texture_modifiers;
    TextureAtomicMin_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicMin_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicMin_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicMin_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1D_UInt32.name = TextureAtomicMin_Texture1D_UInt32_name;
    TextureAtomicMin_Texture1D_UInt32.backendIndex = 3036;
    TextureAtomicMin_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_Texture1D_UInt32.parameters = TextureAtomicMin_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32)->signature = "textureAtomicMin(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32)->name = "textureAtomicMin(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with Texture1D, Int32, Int32
    TextureAtomicMin_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicMin_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMin_Texture1D_Int32_texture.type.modifiers = TextureAtomicMin_Texture1D_Int32_texture_modifiers;
    TextureAtomicMin_Texture1D_Int32_texture.type.modifierValues = TextureAtomicMin_Texture1D_Int32_texture_modifierValues;
    TextureAtomicMin_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicMin_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1D_Int32.name = TextureAtomicMin_Texture1D_Int32_name;
    TextureAtomicMin_Texture1D_Int32.backendIndex = 3037;
    TextureAtomicMin_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_Texture1D_Int32.parameters = TextureAtomicMin_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32)->signature = "textureAtomicMin(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32)->name = "textureAtomicMin(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with Texture1D, Int32, Int32
    TextureAtomicMin_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicMin_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMin_Texture1D_Int32_texture.type.modifiers = TextureAtomicMin_Texture1D_Int32_texture_modifiers;
    TextureAtomicMin_Texture1D_Int32_texture.type.modifierValues = TextureAtomicMin_Texture1D_Int32_texture_modifierValues;
    TextureAtomicMin_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicMin_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1D_Int32.name = TextureAtomicMin_Texture1D_Int32_name;
    TextureAtomicMin_Texture1D_Int32.backendIndex = 3038;
    TextureAtomicMin_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_Texture1D_Int32.parameters = TextureAtomicMin_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32)->signature = "textureAtomicMin(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32)->name = "textureAtomicMin(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with Texture1D, Int32, UInt16
    TextureAtomicMin_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMin_Texture1D_UInt16_texture.type.modifiers = TextureAtomicMin_Texture1D_UInt16_texture_modifiers;
    TextureAtomicMin_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicMin_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicMin_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicMin_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1D_UInt16.name = TextureAtomicMin_Texture1D_UInt16_name;
    TextureAtomicMin_Texture1D_UInt16.backendIndex = 3039;
    TextureAtomicMin_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_Texture1D_UInt16.parameters = TextureAtomicMin_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16)->signature = "textureAtomicMin(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16)->name = "textureAtomicMin(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with Texture1D, Int32, UInt16
    TextureAtomicMin_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMin_Texture1D_UInt16_texture.type.modifiers = TextureAtomicMin_Texture1D_UInt16_texture_modifiers;
    TextureAtomicMin_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicMin_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicMin_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicMin_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1D_UInt16.name = TextureAtomicMin_Texture1D_UInt16_name;
    TextureAtomicMin_Texture1D_UInt16.backendIndex = 3040;
    TextureAtomicMin_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_Texture1D_UInt16.parameters = TextureAtomicMin_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16)->signature = "textureAtomicMin(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16)->name = "textureAtomicMin(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with Texture1D, Int32, Int16
    TextureAtomicMin_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicMin_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMin_Texture1D_Int16_texture.type.modifiers = TextureAtomicMin_Texture1D_Int16_texture_modifiers;
    TextureAtomicMin_Texture1D_Int16_texture.type.modifierValues = TextureAtomicMin_Texture1D_Int16_texture_modifierValues;
    TextureAtomicMin_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicMin_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1D_Int16.name = TextureAtomicMin_Texture1D_Int16_name;
    TextureAtomicMin_Texture1D_Int16.backendIndex = 3041;
    TextureAtomicMin_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_Texture1D_Int16.parameters = TextureAtomicMin_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16)->signature = "textureAtomicMin(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16)->name = "textureAtomicMin(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with Texture1D, Int32, Int16
    TextureAtomicMin_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicMin_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMin_Texture1D_Int16_texture.type.modifiers = TextureAtomicMin_Texture1D_Int16_texture_modifiers;
    TextureAtomicMin_Texture1D_Int16_texture.type.modifierValues = TextureAtomicMin_Texture1D_Int16_texture_modifierValues;
    TextureAtomicMin_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicMin_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1D_Int16.name = TextureAtomicMin_Texture1D_Int16_name;
    TextureAtomicMin_Texture1D_Int16.backendIndex = 3042;
    TextureAtomicMin_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_Texture1D_Int16.parameters = TextureAtomicMin_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16)->signature = "textureAtomicMin(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16)->name = "textureAtomicMin(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with Texture2D, Int32x2, UInt32
    TextureAtomicMin_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMin_Texture2D_UInt32_texture.type.modifiers = TextureAtomicMin_Texture2D_UInt32_texture_modifiers;
    TextureAtomicMin_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicMin_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicMin_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicMin_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2D_UInt32.name = TextureAtomicMin_Texture2D_UInt32_name;
    TextureAtomicMin_Texture2D_UInt32.backendIndex = 3043;
    TextureAtomicMin_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_Texture2D_UInt32.parameters = TextureAtomicMin_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32)->signature = "textureAtomicMin(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32)->name = "textureAtomicMin(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with Texture2D, Int32x2, UInt32
    TextureAtomicMin_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMin_Texture2D_UInt32_texture.type.modifiers = TextureAtomicMin_Texture2D_UInt32_texture_modifiers;
    TextureAtomicMin_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicMin_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicMin_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicMin_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2D_UInt32.name = TextureAtomicMin_Texture2D_UInt32_name;
    TextureAtomicMin_Texture2D_UInt32.backendIndex = 3044;
    TextureAtomicMin_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_Texture2D_UInt32.parameters = TextureAtomicMin_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32)->signature = "textureAtomicMin(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32)->name = "textureAtomicMin(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with Texture2D, Int32x2, Int32
    TextureAtomicMin_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicMin_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMin_Texture2D_Int32_texture.type.modifiers = TextureAtomicMin_Texture2D_Int32_texture_modifiers;
    TextureAtomicMin_Texture2D_Int32_texture.type.modifierValues = TextureAtomicMin_Texture2D_Int32_texture_modifierValues;
    TextureAtomicMin_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicMin_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2D_Int32.name = TextureAtomicMin_Texture2D_Int32_name;
    TextureAtomicMin_Texture2D_Int32.backendIndex = 3045;
    TextureAtomicMin_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_Texture2D_Int32.parameters = TextureAtomicMin_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32)->signature = "textureAtomicMin(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32)->name = "textureAtomicMin(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with Texture2D, Int32x2, Int32
    TextureAtomicMin_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicMin_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMin_Texture2D_Int32_texture.type.modifiers = TextureAtomicMin_Texture2D_Int32_texture_modifiers;
    TextureAtomicMin_Texture2D_Int32_texture.type.modifierValues = TextureAtomicMin_Texture2D_Int32_texture_modifierValues;
    TextureAtomicMin_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicMin_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2D_Int32.name = TextureAtomicMin_Texture2D_Int32_name;
    TextureAtomicMin_Texture2D_Int32.backendIndex = 3046;
    TextureAtomicMin_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_Texture2D_Int32.parameters = TextureAtomicMin_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32)->signature = "textureAtomicMin(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32)->name = "textureAtomicMin(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with Texture2D, Int32x2, UInt16
    TextureAtomicMin_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMin_Texture2D_UInt16_texture.type.modifiers = TextureAtomicMin_Texture2D_UInt16_texture_modifiers;
    TextureAtomicMin_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicMin_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicMin_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicMin_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2D_UInt16.name = TextureAtomicMin_Texture2D_UInt16_name;
    TextureAtomicMin_Texture2D_UInt16.backendIndex = 3047;
    TextureAtomicMin_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_Texture2D_UInt16.parameters = TextureAtomicMin_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16)->signature = "textureAtomicMin(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16)->name = "textureAtomicMin(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with Texture2D, Int32x2, UInt16
    TextureAtomicMin_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMin_Texture2D_UInt16_texture.type.modifiers = TextureAtomicMin_Texture2D_UInt16_texture_modifiers;
    TextureAtomicMin_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicMin_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicMin_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicMin_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2D_UInt16.name = TextureAtomicMin_Texture2D_UInt16_name;
    TextureAtomicMin_Texture2D_UInt16.backendIndex = 3048;
    TextureAtomicMin_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_Texture2D_UInt16.parameters = TextureAtomicMin_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16)->signature = "textureAtomicMin(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16)->name = "textureAtomicMin(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with Texture2D, Int32x2, Int16
    TextureAtomicMin_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicMin_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMin_Texture2D_Int16_texture.type.modifiers = TextureAtomicMin_Texture2D_Int16_texture_modifiers;
    TextureAtomicMin_Texture2D_Int16_texture.type.modifierValues = TextureAtomicMin_Texture2D_Int16_texture_modifierValues;
    TextureAtomicMin_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicMin_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2D_Int16.name = TextureAtomicMin_Texture2D_Int16_name;
    TextureAtomicMin_Texture2D_Int16.backendIndex = 3049;
    TextureAtomicMin_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_Texture2D_Int16.parameters = TextureAtomicMin_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16)->signature = "textureAtomicMin(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16)->name = "textureAtomicMin(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with Texture2D, Int32x2, Int16
    TextureAtomicMin_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicMin_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMin_Texture2D_Int16_texture.type.modifiers = TextureAtomicMin_Texture2D_Int16_texture_modifiers;
    TextureAtomicMin_Texture2D_Int16_texture.type.modifierValues = TextureAtomicMin_Texture2D_Int16_texture_modifierValues;
    TextureAtomicMin_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicMin_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2D_Int16.name = TextureAtomicMin_Texture2D_Int16_name;
    TextureAtomicMin_Texture2D_Int16.backendIndex = 3050;
    TextureAtomicMin_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_Texture2D_Int16.parameters = TextureAtomicMin_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16)->signature = "textureAtomicMin(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16)->name = "textureAtomicMin(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with Texture3D, Int32x3, UInt32
    TextureAtomicMin_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMin_Texture3D_UInt32_texture.type.modifiers = TextureAtomicMin_Texture3D_UInt32_texture_modifiers;
    TextureAtomicMin_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicMin_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicMin_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicMin_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture3D_UInt32.name = TextureAtomicMin_Texture3D_UInt32_name;
    TextureAtomicMin_Texture3D_UInt32.backendIndex = 3051;
    TextureAtomicMin_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_Texture3D_UInt32.parameters = TextureAtomicMin_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32)->signature = "textureAtomicMin(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32)->name = "textureAtomicMin(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with Texture3D, Int32x3, UInt32
    TextureAtomicMin_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMin_Texture3D_UInt32_texture.type.modifiers = TextureAtomicMin_Texture3D_UInt32_texture_modifiers;
    TextureAtomicMin_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicMin_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicMin_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicMin_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture3D_UInt32.name = TextureAtomicMin_Texture3D_UInt32_name;
    TextureAtomicMin_Texture3D_UInt32.backendIndex = 3052;
    TextureAtomicMin_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_Texture3D_UInt32.parameters = TextureAtomicMin_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32)->signature = "textureAtomicMin(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32)->name = "textureAtomicMin(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with Texture3D, Int32x3, Int32
    TextureAtomicMin_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicMin_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMin_Texture3D_Int32_texture.type.modifiers = TextureAtomicMin_Texture3D_Int32_texture_modifiers;
    TextureAtomicMin_Texture3D_Int32_texture.type.modifierValues = TextureAtomicMin_Texture3D_Int32_texture_modifierValues;
    TextureAtomicMin_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicMin_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture3D_Int32.name = TextureAtomicMin_Texture3D_Int32_name;
    TextureAtomicMin_Texture3D_Int32.backendIndex = 3053;
    TextureAtomicMin_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_Texture3D_Int32.parameters = TextureAtomicMin_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32)->signature = "textureAtomicMin(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32)->name = "textureAtomicMin(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with Texture3D, Int32x3, Int32
    TextureAtomicMin_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicMin_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMin_Texture3D_Int32_texture.type.modifiers = TextureAtomicMin_Texture3D_Int32_texture_modifiers;
    TextureAtomicMin_Texture3D_Int32_texture.type.modifierValues = TextureAtomicMin_Texture3D_Int32_texture_modifierValues;
    TextureAtomicMin_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicMin_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture3D_Int32.name = TextureAtomicMin_Texture3D_Int32_name;
    TextureAtomicMin_Texture3D_Int32.backendIndex = 3054;
    TextureAtomicMin_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_Texture3D_Int32.parameters = TextureAtomicMin_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32)->signature = "textureAtomicMin(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32)->name = "textureAtomicMin(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with Texture3D, Int32x3, UInt16
    TextureAtomicMin_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMin_Texture3D_UInt16_texture.type.modifiers = TextureAtomicMin_Texture3D_UInt16_texture_modifiers;
    TextureAtomicMin_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicMin_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicMin_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicMin_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture3D_UInt16.name = TextureAtomicMin_Texture3D_UInt16_name;
    TextureAtomicMin_Texture3D_UInt16.backendIndex = 3055;
    TextureAtomicMin_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_Texture3D_UInt16.parameters = TextureAtomicMin_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16)->signature = "textureAtomicMin(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16)->name = "textureAtomicMin(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with Texture3D, Int32x3, UInt16
    TextureAtomicMin_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMin_Texture3D_UInt16_texture.type.modifiers = TextureAtomicMin_Texture3D_UInt16_texture_modifiers;
    TextureAtomicMin_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicMin_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicMin_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicMin_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture3D_UInt16.name = TextureAtomicMin_Texture3D_UInt16_name;
    TextureAtomicMin_Texture3D_UInt16.backendIndex = 3056;
    TextureAtomicMin_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_Texture3D_UInt16.parameters = TextureAtomicMin_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16)->signature = "textureAtomicMin(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16)->name = "textureAtomicMin(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with Texture3D, Int32x3, Int16
    TextureAtomicMin_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicMin_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMin_Texture3D_Int16_texture.type.modifiers = TextureAtomicMin_Texture3D_Int16_texture_modifiers;
    TextureAtomicMin_Texture3D_Int16_texture.type.modifierValues = TextureAtomicMin_Texture3D_Int16_texture_modifierValues;
    TextureAtomicMin_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicMin_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture3D_Int16.name = TextureAtomicMin_Texture3D_Int16_name;
    TextureAtomicMin_Texture3D_Int16.backendIndex = 3057;
    TextureAtomicMin_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_Texture3D_Int16.parameters = TextureAtomicMin_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16)->signature = "textureAtomicMin(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16)->name = "textureAtomicMin(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with Texture3D, Int32x3, Int16
    TextureAtomicMin_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicMin_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMin_Texture3D_Int16_texture.type.modifiers = TextureAtomicMin_Texture3D_Int16_texture_modifiers;
    TextureAtomicMin_Texture3D_Int16_texture.type.modifierValues = TextureAtomicMin_Texture3D_Int16_texture_modifierValues;
    TextureAtomicMin_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicMin_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture3D_Int16.name = TextureAtomicMin_Texture3D_Int16_name;
    TextureAtomicMin_Texture3D_Int16.backendIndex = 3058;
    TextureAtomicMin_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_Texture3D_Int16.parameters = TextureAtomicMin_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16)->signature = "textureAtomicMin(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16)->name = "textureAtomicMin(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with TextureCube, Int32x3, UInt32
    TextureAtomicMin_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMin_TextureCube_UInt32_texture.type.modifiers = TextureAtomicMin_TextureCube_UInt32_texture_modifiers;
    TextureAtomicMin_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicMin_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicMin_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicMin_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCube_UInt32.name = TextureAtomicMin_TextureCube_UInt32_name;
    TextureAtomicMin_TextureCube_UInt32.backendIndex = 3059;
    TextureAtomicMin_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_TextureCube_UInt32.parameters = TextureAtomicMin_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32)->signature = "textureAtomicMin(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32)->name = "textureAtomicMin(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with TextureCube, Int32x3, UInt32
    TextureAtomicMin_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMin_TextureCube_UInt32_texture.type.modifiers = TextureAtomicMin_TextureCube_UInt32_texture_modifiers;
    TextureAtomicMin_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicMin_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicMin_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicMin_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCube_UInt32.name = TextureAtomicMin_TextureCube_UInt32_name;
    TextureAtomicMin_TextureCube_UInt32.backendIndex = 3060;
    TextureAtomicMin_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_TextureCube_UInt32.parameters = TextureAtomicMin_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32)->signature = "textureAtomicMin(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32)->name = "textureAtomicMin(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with TextureCube, Int32x3, Int32
    TextureAtomicMin_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicMin_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMin_TextureCube_Int32_texture.type.modifiers = TextureAtomicMin_TextureCube_Int32_texture_modifiers;
    TextureAtomicMin_TextureCube_Int32_texture.type.modifierValues = TextureAtomicMin_TextureCube_Int32_texture_modifierValues;
    TextureAtomicMin_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicMin_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCube_Int32.name = TextureAtomicMin_TextureCube_Int32_name;
    TextureAtomicMin_TextureCube_Int32.backendIndex = 3061;
    TextureAtomicMin_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_TextureCube_Int32.parameters = TextureAtomicMin_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32)->signature = "textureAtomicMin(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32)->name = "textureAtomicMin(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with TextureCube, Int32x3, Int32
    TextureAtomicMin_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicMin_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMin_TextureCube_Int32_texture.type.modifiers = TextureAtomicMin_TextureCube_Int32_texture_modifiers;
    TextureAtomicMin_TextureCube_Int32_texture.type.modifierValues = TextureAtomicMin_TextureCube_Int32_texture_modifierValues;
    TextureAtomicMin_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicMin_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCube_Int32.name = TextureAtomicMin_TextureCube_Int32_name;
    TextureAtomicMin_TextureCube_Int32.backendIndex = 3062;
    TextureAtomicMin_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_TextureCube_Int32.parameters = TextureAtomicMin_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32)->signature = "textureAtomicMin(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32)->name = "textureAtomicMin(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with TextureCube, Int32x3, UInt16
    TextureAtomicMin_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMin_TextureCube_UInt16_texture.type.modifiers = TextureAtomicMin_TextureCube_UInt16_texture_modifiers;
    TextureAtomicMin_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicMin_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicMin_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicMin_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCube_UInt16.name = TextureAtomicMin_TextureCube_UInt16_name;
    TextureAtomicMin_TextureCube_UInt16.backendIndex = 3063;
    TextureAtomicMin_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_TextureCube_UInt16.parameters = TextureAtomicMin_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16)->signature = "textureAtomicMin(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16)->name = "textureAtomicMin(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with TextureCube, Int32x3, UInt16
    TextureAtomicMin_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMin_TextureCube_UInt16_texture.type.modifiers = TextureAtomicMin_TextureCube_UInt16_texture_modifiers;
    TextureAtomicMin_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicMin_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicMin_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicMin_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCube_UInt16.name = TextureAtomicMin_TextureCube_UInt16_name;
    TextureAtomicMin_TextureCube_UInt16.backendIndex = 3064;
    TextureAtomicMin_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_TextureCube_UInt16.parameters = TextureAtomicMin_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16)->signature = "textureAtomicMin(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16)->name = "textureAtomicMin(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with TextureCube, Int32x3, Int16
    TextureAtomicMin_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicMin_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMin_TextureCube_Int16_texture.type.modifiers = TextureAtomicMin_TextureCube_Int16_texture_modifiers;
    TextureAtomicMin_TextureCube_Int16_texture.type.modifierValues = TextureAtomicMin_TextureCube_Int16_texture_modifierValues;
    TextureAtomicMin_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicMin_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCube_Int16.name = TextureAtomicMin_TextureCube_Int16_name;
    TextureAtomicMin_TextureCube_Int16.backendIndex = 3065;
    TextureAtomicMin_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_TextureCube_Int16.parameters = TextureAtomicMin_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16)->signature = "textureAtomicMin(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16)->name = "textureAtomicMin(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with TextureCube, Int32x3, Int16
    TextureAtomicMin_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicMin_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMin_TextureCube_Int16_texture.type.modifiers = TextureAtomicMin_TextureCube_Int16_texture_modifiers;
    TextureAtomicMin_TextureCube_Int16_texture.type.modifierValues = TextureAtomicMin_TextureCube_Int16_texture_modifierValues;
    TextureAtomicMin_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicMin_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCube_Int16.name = TextureAtomicMin_TextureCube_Int16_name;
    TextureAtomicMin_TextureCube_Int16.backendIndex = 3066;
    TextureAtomicMin_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_TextureCube_Int16.parameters = TextureAtomicMin_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16)->signature = "textureAtomicMin(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16)->name = "textureAtomicMin(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with Texture1DArray, Int32x2, UInt32
    TextureAtomicMin_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMin_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicMin_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicMin_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicMin_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicMin_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicMin_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1DArray_UInt32.name = TextureAtomicMin_Texture1DArray_UInt32_name;
    TextureAtomicMin_Texture1DArray_UInt32.backendIndex = 3067;
    TextureAtomicMin_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_Texture1DArray_UInt32.parameters = TextureAtomicMin_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32)->signature = "textureAtomicMin(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32)->name = "textureAtomicMin(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with Texture1DArray, Int32x2, UInt32
    TextureAtomicMin_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMin_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicMin_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicMin_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicMin_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicMin_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicMin_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1DArray_UInt32.name = TextureAtomicMin_Texture1DArray_UInt32_name;
    TextureAtomicMin_Texture1DArray_UInt32.backendIndex = 3068;
    TextureAtomicMin_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_Texture1DArray_UInt32.parameters = TextureAtomicMin_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32)->signature = "textureAtomicMin(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32)->name = "textureAtomicMin(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with Texture1DArray, Int32x2, Int32
    TextureAtomicMin_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicMin_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMin_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicMin_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicMin_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicMin_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicMin_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicMin_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1DArray_Int32.name = TextureAtomicMin_Texture1DArray_Int32_name;
    TextureAtomicMin_Texture1DArray_Int32.backendIndex = 3069;
    TextureAtomicMin_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_Texture1DArray_Int32.parameters = TextureAtomicMin_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32)->signature = "textureAtomicMin(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32)->name = "textureAtomicMin(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with Texture1DArray, Int32x2, Int32
    TextureAtomicMin_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicMin_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMin_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicMin_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicMin_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicMin_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicMin_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicMin_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1DArray_Int32.name = TextureAtomicMin_Texture1DArray_Int32_name;
    TextureAtomicMin_Texture1DArray_Int32.backendIndex = 3070;
    TextureAtomicMin_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_Texture1DArray_Int32.parameters = TextureAtomicMin_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32)->signature = "textureAtomicMin(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32)->name = "textureAtomicMin(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with Texture1DArray, Int32x2, UInt16
    TextureAtomicMin_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMin_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicMin_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicMin_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicMin_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicMin_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicMin_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1DArray_UInt16.name = TextureAtomicMin_Texture1DArray_UInt16_name;
    TextureAtomicMin_Texture1DArray_UInt16.backendIndex = 3071;
    TextureAtomicMin_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_Texture1DArray_UInt16.parameters = TextureAtomicMin_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16)->signature = "textureAtomicMin(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16)->name = "textureAtomicMin(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with Texture1DArray, Int32x2, UInt16
    TextureAtomicMin_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMin_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicMin_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicMin_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicMin_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicMin_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicMin_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1DArray_UInt16.name = TextureAtomicMin_Texture1DArray_UInt16_name;
    TextureAtomicMin_Texture1DArray_UInt16.backendIndex = 3072;
    TextureAtomicMin_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_Texture1DArray_UInt16.parameters = TextureAtomicMin_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16)->signature = "textureAtomicMin(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16)->name = "textureAtomicMin(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with Texture1DArray, Int32x2, Int16
    TextureAtomicMin_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicMin_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMin_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicMin_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicMin_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicMin_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicMin_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicMin_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1DArray_Int16.name = TextureAtomicMin_Texture1DArray_Int16_name;
    TextureAtomicMin_Texture1DArray_Int16.backendIndex = 3073;
    TextureAtomicMin_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_Texture1DArray_Int16.parameters = TextureAtomicMin_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16)->signature = "textureAtomicMin(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16)->name = "textureAtomicMin(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with Texture1DArray, Int32x2, Int16
    TextureAtomicMin_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicMin_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMin_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicMin_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicMin_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicMin_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicMin_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicMin_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1DArray_Int16.name = TextureAtomicMin_Texture1DArray_Int16_name;
    TextureAtomicMin_Texture1DArray_Int16.backendIndex = 3074;
    TextureAtomicMin_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_Texture1DArray_Int16.parameters = TextureAtomicMin_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16)->signature = "textureAtomicMin(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16)->name = "textureAtomicMin(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with Texture2DArray, Int32x3, UInt32
    TextureAtomicMin_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMin_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicMin_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicMin_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicMin_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicMin_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicMin_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2DArray_UInt32.name = TextureAtomicMin_Texture2DArray_UInt32_name;
    TextureAtomicMin_Texture2DArray_UInt32.backendIndex = 3075;
    TextureAtomicMin_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_Texture2DArray_UInt32.parameters = TextureAtomicMin_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32)->signature = "textureAtomicMin(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32)->name = "textureAtomicMin(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with Texture2DArray, Int32x3, UInt32
    TextureAtomicMin_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMin_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicMin_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicMin_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicMin_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicMin_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicMin_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2DArray_UInt32.name = TextureAtomicMin_Texture2DArray_UInt32_name;
    TextureAtomicMin_Texture2DArray_UInt32.backendIndex = 3076;
    TextureAtomicMin_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_Texture2DArray_UInt32.parameters = TextureAtomicMin_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32)->signature = "textureAtomicMin(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32)->name = "textureAtomicMin(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with Texture2DArray, Int32x3, Int32
    TextureAtomicMin_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicMin_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMin_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicMin_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicMin_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicMin_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicMin_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicMin_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2DArray_Int32.name = TextureAtomicMin_Texture2DArray_Int32_name;
    TextureAtomicMin_Texture2DArray_Int32.backendIndex = 3077;
    TextureAtomicMin_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_Texture2DArray_Int32.parameters = TextureAtomicMin_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32)->signature = "textureAtomicMin(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32)->name = "textureAtomicMin(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with Texture2DArray, Int32x3, Int32
    TextureAtomicMin_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicMin_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMin_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicMin_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicMin_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicMin_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicMin_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicMin_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2DArray_Int32.name = TextureAtomicMin_Texture2DArray_Int32_name;
    TextureAtomicMin_Texture2DArray_Int32.backendIndex = 3078;
    TextureAtomicMin_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_Texture2DArray_Int32.parameters = TextureAtomicMin_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32)->signature = "textureAtomicMin(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32)->name = "textureAtomicMin(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with Texture2DArray, Int32x3, UInt16
    TextureAtomicMin_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMin_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicMin_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicMin_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicMin_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicMin_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicMin_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2DArray_UInt16.name = TextureAtomicMin_Texture2DArray_UInt16_name;
    TextureAtomicMin_Texture2DArray_UInt16.backendIndex = 3079;
    TextureAtomicMin_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_Texture2DArray_UInt16.parameters = TextureAtomicMin_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16)->signature = "textureAtomicMin(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16)->name = "textureAtomicMin(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with Texture2DArray, Int32x3, UInt16
    TextureAtomicMin_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMin_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicMin_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicMin_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicMin_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicMin_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicMin_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2DArray_UInt16.name = TextureAtomicMin_Texture2DArray_UInt16_name;
    TextureAtomicMin_Texture2DArray_UInt16.backendIndex = 3080;
    TextureAtomicMin_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_Texture2DArray_UInt16.parameters = TextureAtomicMin_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16)->signature = "textureAtomicMin(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16)->name = "textureAtomicMin(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with Texture2DArray, Int32x3, Int16
    TextureAtomicMin_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicMin_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMin_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicMin_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicMin_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicMin_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicMin_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicMin_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2DArray_Int16.name = TextureAtomicMin_Texture2DArray_Int16_name;
    TextureAtomicMin_Texture2DArray_Int16.backendIndex = 3081;
    TextureAtomicMin_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_Texture2DArray_Int16.parameters = TextureAtomicMin_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16)->signature = "textureAtomicMin(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16)->name = "textureAtomicMin(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with Texture2DArray, Int32x3, Int16
    TextureAtomicMin_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicMin_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMin_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicMin_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicMin_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicMin_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicMin_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicMin_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2DArray_Int16.name = TextureAtomicMin_Texture2DArray_Int16_name;
    TextureAtomicMin_Texture2DArray_Int16.backendIndex = 3082;
    TextureAtomicMin_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_Texture2DArray_Int16.parameters = TextureAtomicMin_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16)->signature = "textureAtomicMin(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16)->name = "textureAtomicMin(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with TextureCubeArray, Int32x4, UInt32
    TextureAtomicMin_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMin_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicMin_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicMin_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicMin_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicMin_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMin_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicMin_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCubeArray_UInt32.name = TextureAtomicMin_TextureCubeArray_UInt32_name;
    TextureAtomicMin_TextureCubeArray_UInt32.backendIndex = 3083;
    TextureAtomicMin_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_TextureCubeArray_UInt32.parameters = TextureAtomicMin_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32)->signature = "textureAtomicMin(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32)->name = "textureAtomicMin(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with TextureCubeArray, Int32x4, UInt32
    TextureAtomicMin_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMin_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicMin_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicMin_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicMin_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicMin_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMin_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicMin_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCubeArray_UInt32.name = TextureAtomicMin_TextureCubeArray_UInt32_name;
    TextureAtomicMin_TextureCubeArray_UInt32.backendIndex = 3084;
    TextureAtomicMin_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_TextureCubeArray_UInt32.parameters = TextureAtomicMin_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32)->signature = "textureAtomicMin(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32)->name = "textureAtomicMin(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with TextureCubeArray, Int32x4, Int32
    TextureAtomicMin_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicMin_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMin_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicMin_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicMin_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicMin_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicMin_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMin_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicMin_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCubeArray_Int32.name = TextureAtomicMin_TextureCubeArray_Int32_name;
    TextureAtomicMin_TextureCubeArray_Int32.backendIndex = 3085;
    TextureAtomicMin_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_TextureCubeArray_Int32.parameters = TextureAtomicMin_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32)->signature = "textureAtomicMin(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32)->name = "textureAtomicMin(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with TextureCubeArray, Int32x4, Int32
    TextureAtomicMin_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicMin_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMin_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicMin_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicMin_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicMin_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicMin_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMin_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicMin_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCubeArray_Int32.name = TextureAtomicMin_TextureCubeArray_Int32_name;
    TextureAtomicMin_TextureCubeArray_Int32.backendIndex = 3086;
    TextureAtomicMin_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_TextureCubeArray_Int32.parameters = TextureAtomicMin_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32)->signature = "textureAtomicMin(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32)->name = "textureAtomicMin(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with TextureCubeArray, Int32x4, UInt16
    TextureAtomicMin_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMin_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicMin_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicMin_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicMin_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicMin_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMin_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicMin_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCubeArray_UInt16.name = TextureAtomicMin_TextureCubeArray_UInt16_name;
    TextureAtomicMin_TextureCubeArray_UInt16.backendIndex = 3087;
    TextureAtomicMin_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_TextureCubeArray_UInt16.parameters = TextureAtomicMin_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16)->signature = "textureAtomicMin(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16)->name = "textureAtomicMin(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with TextureCubeArray, Int32x4, UInt16
    TextureAtomicMin_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMin_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicMin_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicMin_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicMin_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicMin_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMin_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicMin_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCubeArray_UInt16.name = TextureAtomicMin_TextureCubeArray_UInt16_name;
    TextureAtomicMin_TextureCubeArray_UInt16.backendIndex = 3088;
    TextureAtomicMin_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_TextureCubeArray_UInt16.parameters = TextureAtomicMin_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16)->signature = "textureAtomicMin(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16)->name = "textureAtomicMin(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with TextureCubeArray, Int32x4, Int16
    TextureAtomicMin_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicMin_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMin_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicMin_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicMin_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicMin_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicMin_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMin_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicMin_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCubeArray_Int16.name = TextureAtomicMin_TextureCubeArray_Int16_name;
    TextureAtomicMin_TextureCubeArray_Int16.backendIndex = 3089;
    TextureAtomicMin_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_TextureCubeArray_Int16.parameters = TextureAtomicMin_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16)->signature = "textureAtomicMin(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16)->name = "textureAtomicMin(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with TextureCubeArray, Int32x4, Int16
    TextureAtomicMin_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicMin_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMin_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicMin_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicMin_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicMin_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicMin_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMin_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicMin_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCubeArray_Int16.name = TextureAtomicMin_TextureCubeArray_Int16_name;
    TextureAtomicMin_TextureCubeArray_Int16.backendIndex = 3090;
    TextureAtomicMin_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_TextureCubeArray_Int16.parameters = TextureAtomicMin_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16)->signature = "textureAtomicMin(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16)->name = "textureAtomicMin(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture1D, Int32, UInt32
    TextureAtomicMax_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMax_Texture1D_UInt32_texture.type.modifiers = TextureAtomicMax_Texture1D_UInt32_texture_modifiers;
    TextureAtomicMax_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1D_UInt32.name = TextureAtomicMax_Texture1D_UInt32_name;
    TextureAtomicMax_Texture1D_UInt32.backendIndex = 3091;
    TextureAtomicMax_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture1D_UInt32.parameters = TextureAtomicMax_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32)->signature = "textureAtomicMax(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32)->name = "textureAtomicMax(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture1D, Int32, UInt32
    TextureAtomicMax_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMax_Texture1D_UInt32_texture.type.modifiers = TextureAtomicMax_Texture1D_UInt32_texture_modifiers;
    TextureAtomicMax_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1D_UInt32.name = TextureAtomicMax_Texture1D_UInt32_name;
    TextureAtomicMax_Texture1D_UInt32.backendIndex = 3092;
    TextureAtomicMax_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture1D_UInt32.parameters = TextureAtomicMax_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32)->signature = "textureAtomicMax(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32)->name = "textureAtomicMax(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture1D, Int32, Int32
    TextureAtomicMax_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMax_Texture1D_Int32_texture.type.modifiers = TextureAtomicMax_Texture1D_Int32_texture_modifiers;
    TextureAtomicMax_Texture1D_Int32_texture.type.modifierValues = TextureAtomicMax_Texture1D_Int32_texture_modifierValues;
    TextureAtomicMax_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1D_Int32.name = TextureAtomicMax_Texture1D_Int32_name;
    TextureAtomicMax_Texture1D_Int32.backendIndex = 3093;
    TextureAtomicMax_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture1D_Int32.parameters = TextureAtomicMax_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32)->signature = "textureAtomicMax(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32)->name = "textureAtomicMax(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture1D, Int32, Int32
    TextureAtomicMax_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMax_Texture1D_Int32_texture.type.modifiers = TextureAtomicMax_Texture1D_Int32_texture_modifiers;
    TextureAtomicMax_Texture1D_Int32_texture.type.modifierValues = TextureAtomicMax_Texture1D_Int32_texture_modifierValues;
    TextureAtomicMax_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1D_Int32.name = TextureAtomicMax_Texture1D_Int32_name;
    TextureAtomicMax_Texture1D_Int32.backendIndex = 3094;
    TextureAtomicMax_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture1D_Int32.parameters = TextureAtomicMax_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32)->signature = "textureAtomicMax(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32)->name = "textureAtomicMax(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture1D, Int32, UInt16
    TextureAtomicMax_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMax_Texture1D_UInt16_texture.type.modifiers = TextureAtomicMax_Texture1D_UInt16_texture_modifiers;
    TextureAtomicMax_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1D_UInt16.name = TextureAtomicMax_Texture1D_UInt16_name;
    TextureAtomicMax_Texture1D_UInt16.backendIndex = 3095;
    TextureAtomicMax_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture1D_UInt16.parameters = TextureAtomicMax_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->signature = "textureAtomicMax(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->name = "textureAtomicMax(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture1D, Int32, UInt16
    TextureAtomicMax_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMax_Texture1D_UInt16_texture.type.modifiers = TextureAtomicMax_Texture1D_UInt16_texture_modifiers;
    TextureAtomicMax_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1D_UInt16.name = TextureAtomicMax_Texture1D_UInt16_name;
    TextureAtomicMax_Texture1D_UInt16.backendIndex = 3096;
    TextureAtomicMax_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture1D_UInt16.parameters = TextureAtomicMax_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->signature = "textureAtomicMax(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->name = "textureAtomicMax(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture1D, Int32, Int16
    TextureAtomicMax_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMax_Texture1D_Int16_texture.type.modifiers = TextureAtomicMax_Texture1D_Int16_texture_modifiers;
    TextureAtomicMax_Texture1D_Int16_texture.type.modifierValues = TextureAtomicMax_Texture1D_Int16_texture_modifierValues;
    TextureAtomicMax_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1D_Int16.name = TextureAtomicMax_Texture1D_Int16_name;
    TextureAtomicMax_Texture1D_Int16.backendIndex = 3097;
    TextureAtomicMax_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture1D_Int16.parameters = TextureAtomicMax_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->signature = "textureAtomicMax(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->name = "textureAtomicMax(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture1D, Int32, Int16
    TextureAtomicMax_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMax_Texture1D_Int16_texture.type.modifiers = TextureAtomicMax_Texture1D_Int16_texture_modifiers;
    TextureAtomicMax_Texture1D_Int16_texture.type.modifierValues = TextureAtomicMax_Texture1D_Int16_texture_modifierValues;
    TextureAtomicMax_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1D_Int16.name = TextureAtomicMax_Texture1D_Int16_name;
    TextureAtomicMax_Texture1D_Int16.backendIndex = 3098;
    TextureAtomicMax_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture1D_Int16.parameters = TextureAtomicMax_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->signature = "textureAtomicMax(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->name = "textureAtomicMax(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture2D, Int32x2, UInt32
    TextureAtomicMax_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_UInt32_texture.type.modifiers = TextureAtomicMax_Texture2D_UInt32_texture_modifiers;
    TextureAtomicMax_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_UInt32.name = TextureAtomicMax_Texture2D_UInt32_name;
    TextureAtomicMax_Texture2D_UInt32.backendIndex = 3099;
    TextureAtomicMax_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture2D_UInt32.parameters = TextureAtomicMax_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->signature = "textureAtomicMax(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->name = "textureAtomicMax(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture2D, Int32x2, UInt32
    TextureAtomicMax_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_UInt32_texture.type.modifiers = TextureAtomicMax_Texture2D_UInt32_texture_modifiers;
    TextureAtomicMax_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_UInt32.name = TextureAtomicMax_Texture2D_UInt32_name;
    TextureAtomicMax_Texture2D_UInt32.backendIndex = 3100;
    TextureAtomicMax_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture2D_UInt32.parameters = TextureAtomicMax_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->signature = "textureAtomicMax(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->name = "textureAtomicMax(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture2D, Int32x2, Int32
    TextureAtomicMax_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_Int32_texture.type.modifiers = TextureAtomicMax_Texture2D_Int32_texture_modifiers;
    TextureAtomicMax_Texture2D_Int32_texture.type.modifierValues = TextureAtomicMax_Texture2D_Int32_texture_modifierValues;
    TextureAtomicMax_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_Int32.name = TextureAtomicMax_Texture2D_Int32_name;
    TextureAtomicMax_Texture2D_Int32.backendIndex = 3101;
    TextureAtomicMax_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture2D_Int32.parameters = TextureAtomicMax_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->signature = "textureAtomicMax(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->name = "textureAtomicMax(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture2D, Int32x2, Int32
    TextureAtomicMax_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_Int32_texture.type.modifiers = TextureAtomicMax_Texture2D_Int32_texture_modifiers;
    TextureAtomicMax_Texture2D_Int32_texture.type.modifierValues = TextureAtomicMax_Texture2D_Int32_texture_modifierValues;
    TextureAtomicMax_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_Int32.name = TextureAtomicMax_Texture2D_Int32_name;
    TextureAtomicMax_Texture2D_Int32.backendIndex = 3102;
    TextureAtomicMax_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture2D_Int32.parameters = TextureAtomicMax_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->signature = "textureAtomicMax(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->name = "textureAtomicMax(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture2D, Int32x2, UInt16
    TextureAtomicMax_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_UInt16_texture.type.modifiers = TextureAtomicMax_Texture2D_UInt16_texture_modifiers;
    TextureAtomicMax_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_UInt16.name = TextureAtomicMax_Texture2D_UInt16_name;
    TextureAtomicMax_Texture2D_UInt16.backendIndex = 3103;
    TextureAtomicMax_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture2D_UInt16.parameters = TextureAtomicMax_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->signature = "textureAtomicMax(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->name = "textureAtomicMax(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture2D, Int32x2, UInt16
    TextureAtomicMax_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_UInt16_texture.type.modifiers = TextureAtomicMax_Texture2D_UInt16_texture_modifiers;
    TextureAtomicMax_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_UInt16.name = TextureAtomicMax_Texture2D_UInt16_name;
    TextureAtomicMax_Texture2D_UInt16.backendIndex = 3104;
    TextureAtomicMax_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture2D_UInt16.parameters = TextureAtomicMax_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->signature = "textureAtomicMax(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->name = "textureAtomicMax(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture2D, Int32x2, Int16
    TextureAtomicMax_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_Int16_texture.type.modifiers = TextureAtomicMax_Texture2D_Int16_texture_modifiers;
    TextureAtomicMax_Texture2D_Int16_texture.type.modifierValues = TextureAtomicMax_Texture2D_Int16_texture_modifierValues;
    TextureAtomicMax_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_Int16.name = TextureAtomicMax_Texture2D_Int16_name;
    TextureAtomicMax_Texture2D_Int16.backendIndex = 3105;
    TextureAtomicMax_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture2D_Int16.parameters = TextureAtomicMax_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->signature = "textureAtomicMax(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->name = "textureAtomicMax(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture2D, Int32x2, Int16
    TextureAtomicMax_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_Int16_texture.type.modifiers = TextureAtomicMax_Texture2D_Int16_texture_modifiers;
    TextureAtomicMax_Texture2D_Int16_texture.type.modifierValues = TextureAtomicMax_Texture2D_Int16_texture_modifierValues;
    TextureAtomicMax_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_Int16.name = TextureAtomicMax_Texture2D_Int16_name;
    TextureAtomicMax_Texture2D_Int16.backendIndex = 3106;
    TextureAtomicMax_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture2D_Int16.parameters = TextureAtomicMax_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->signature = "textureAtomicMax(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->name = "textureAtomicMax(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture3D, Int32x3, UInt32
    TextureAtomicMax_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_UInt32_texture.type.modifiers = TextureAtomicMax_Texture3D_UInt32_texture_modifiers;
    TextureAtomicMax_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_UInt32.name = TextureAtomicMax_Texture3D_UInt32_name;
    TextureAtomicMax_Texture3D_UInt32.backendIndex = 3107;
    TextureAtomicMax_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture3D_UInt32.parameters = TextureAtomicMax_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->signature = "textureAtomicMax(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->name = "textureAtomicMax(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture3D, Int32x3, UInt32
    TextureAtomicMax_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_UInt32_texture.type.modifiers = TextureAtomicMax_Texture3D_UInt32_texture_modifiers;
    TextureAtomicMax_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_UInt32.name = TextureAtomicMax_Texture3D_UInt32_name;
    TextureAtomicMax_Texture3D_UInt32.backendIndex = 3108;
    TextureAtomicMax_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture3D_UInt32.parameters = TextureAtomicMax_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->signature = "textureAtomicMax(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->name = "textureAtomicMax(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture3D, Int32x3, Int32
    TextureAtomicMax_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_Int32_texture.type.modifiers = TextureAtomicMax_Texture3D_Int32_texture_modifiers;
    TextureAtomicMax_Texture3D_Int32_texture.type.modifierValues = TextureAtomicMax_Texture3D_Int32_texture_modifierValues;
    TextureAtomicMax_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_Int32.name = TextureAtomicMax_Texture3D_Int32_name;
    TextureAtomicMax_Texture3D_Int32.backendIndex = 3109;
    TextureAtomicMax_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture3D_Int32.parameters = TextureAtomicMax_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->signature = "textureAtomicMax(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->name = "textureAtomicMax(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture3D, Int32x3, Int32
    TextureAtomicMax_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_Int32_texture.type.modifiers = TextureAtomicMax_Texture3D_Int32_texture_modifiers;
    TextureAtomicMax_Texture3D_Int32_texture.type.modifierValues = TextureAtomicMax_Texture3D_Int32_texture_modifierValues;
    TextureAtomicMax_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_Int32.name = TextureAtomicMax_Texture3D_Int32_name;
    TextureAtomicMax_Texture3D_Int32.backendIndex = 3110;
    TextureAtomicMax_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture3D_Int32.parameters = TextureAtomicMax_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->signature = "textureAtomicMax(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->name = "textureAtomicMax(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture3D, Int32x3, UInt16
    TextureAtomicMax_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_UInt16_texture.type.modifiers = TextureAtomicMax_Texture3D_UInt16_texture_modifiers;
    TextureAtomicMax_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_UInt16.name = TextureAtomicMax_Texture3D_UInt16_name;
    TextureAtomicMax_Texture3D_UInt16.backendIndex = 3111;
    TextureAtomicMax_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture3D_UInt16.parameters = TextureAtomicMax_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->signature = "textureAtomicMax(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->name = "textureAtomicMax(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture3D, Int32x3, UInt16
    TextureAtomicMax_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_UInt16_texture.type.modifiers = TextureAtomicMax_Texture3D_UInt16_texture_modifiers;
    TextureAtomicMax_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_UInt16.name = TextureAtomicMax_Texture3D_UInt16_name;
    TextureAtomicMax_Texture3D_UInt16.backendIndex = 3112;
    TextureAtomicMax_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture3D_UInt16.parameters = TextureAtomicMax_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->signature = "textureAtomicMax(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->name = "textureAtomicMax(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

}
} // namespace GPULang
