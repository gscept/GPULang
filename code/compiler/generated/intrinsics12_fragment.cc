//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// textureSampleLodProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32, Float32
Variable TextureSampleLodProjCompare_Texture3D_texture;
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompare_Texture3D_coordinate;
Variable TextureSampleLodProjCompare_Texture3D_lod;
Variable TextureSampleLodProjCompare_Texture3D_proj;
Variable TextureSampleLodProjCompare_Texture3D_compare;
Function TextureSampleLodProjCompare_Texture3D;
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_args = { &TextureSampleLodProjCompare_Texture3D_texture, &TextureSampleLodProjCompare_Texture3D_sampler, &TextureSampleLodProjCompare_Texture3D_coordinate, &TextureSampleLodProjCompare_Texture3D_lod, &TextureSampleLodProjCompare_Texture3D_proj, &TextureSampleLodProjCompare_Texture3D_compare };

/// textureSampleLodProjCompare with SampledTexture3D, Float32x3, Float32, Float32, Float32
Variable SampledTextureSampleLodProjCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleLodProjCompare_Texture3D_lod;
Variable SampledTextureSampleLodProjCompare_Texture3D_proj;
Variable SampledTextureSampleLodProjCompare_Texture3D_compare;
Function SampledTextureSampleLodProjCompare_Texture3D;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture3D_args = { &SampledTextureSampleLodProjCompare_Texture3D_texture, &SampledTextureSampleLodProjCompare_Texture3D_coordinate, &SampledTextureSampleLodProjCompare_Texture3D_lod, &SampledTextureSampleLodProjCompare_Texture3D_proj, &SampledTextureSampleLodProjCompare_Texture3D_compare };

/// textureSampleLodProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleLodProjCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompareOffset_Texture1D_coordinate;
Variable TextureSampleLodProjCompareOffset_Texture1D_lod;
Variable TextureSampleLodProjCompareOffset_Texture1D_proj;
Variable TextureSampleLodProjCompareOffset_Texture1D_compare;
Variable TextureSampleLodProjCompareOffset_Texture1D_offset;
Function TextureSampleLodProjCompareOffset_Texture1D;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture1D_args = { &TextureSampleLodProjCompareOffset_Texture1D_texture, &TextureSampleLodProjCompareOffset_Texture1D_sampler, &TextureSampleLodProjCompareOffset_Texture1D_coordinate, &TextureSampleLodProjCompareOffset_Texture1D_lod, &TextureSampleLodProjCompareOffset_Texture1D_proj, &TextureSampleLodProjCompareOffset_Texture1D_compare, &TextureSampleLodProjCompareOffset_Texture1D_offset };

/// textureSampleLodProjCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_lod;
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_proj;
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_compare;
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_offset;
Function SampledTextureSampleLodProjCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture1D_args = { &SampledTextureSampleLodProjCompareOffset_Texture1D_texture, &SampledTextureSampleLodProjCompareOffset_Texture1D_coordinate, &SampledTextureSampleLodProjCompareOffset_Texture1D_lod, &SampledTextureSampleLodProjCompareOffset_Texture1D_proj, &SampledTextureSampleLodProjCompareOffset_Texture1D_compare, &SampledTextureSampleLodProjCompareOffset_Texture1D_offset };

/// textureSampleLodProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32, Float32x2
Variable TextureSampleLodProjCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompareOffset_Texture2D_coordinate;
Variable TextureSampleLodProjCompareOffset_Texture2D_lod;
Variable TextureSampleLodProjCompareOffset_Texture2D_proj;
Variable TextureSampleLodProjCompareOffset_Texture2D_compare;
Variable TextureSampleLodProjCompareOffset_Texture2D_offset;
Function TextureSampleLodProjCompareOffset_Texture2D;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture2D_args = { &TextureSampleLodProjCompareOffset_Texture2D_texture, &TextureSampleLodProjCompareOffset_Texture2D_sampler, &TextureSampleLodProjCompareOffset_Texture2D_coordinate, &TextureSampleLodProjCompareOffset_Texture2D_lod, &TextureSampleLodProjCompareOffset_Texture2D_proj, &TextureSampleLodProjCompareOffset_Texture2D_compare, &TextureSampleLodProjCompareOffset_Texture2D_offset };

/// textureSampleLodProjCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32, Float32x2
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_lod;
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_proj;
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_compare;
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_offset;
Function SampledTextureSampleLodProjCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture2D_args = { &SampledTextureSampleLodProjCompareOffset_Texture2D_texture, &SampledTextureSampleLodProjCompareOffset_Texture2D_coordinate, &SampledTextureSampleLodProjCompareOffset_Texture2D_lod, &SampledTextureSampleLodProjCompareOffset_Texture2D_proj, &SampledTextureSampleLodProjCompareOffset_Texture2D_compare, &SampledTextureSampleLodProjCompareOffset_Texture2D_offset };

/// textureSampleLodProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32, Float32x3
Variable TextureSampleLodProjCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompareOffset_Texture3D_coordinate;
Variable TextureSampleLodProjCompareOffset_Texture3D_lod;
Variable TextureSampleLodProjCompareOffset_Texture3D_proj;
Variable TextureSampleLodProjCompareOffset_Texture3D_compare;
Variable TextureSampleLodProjCompareOffset_Texture3D_offset;
Function TextureSampleLodProjCompareOffset_Texture3D;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture3D_args = { &TextureSampleLodProjCompareOffset_Texture3D_texture, &TextureSampleLodProjCompareOffset_Texture3D_sampler, &TextureSampleLodProjCompareOffset_Texture3D_coordinate, &TextureSampleLodProjCompareOffset_Texture3D_lod, &TextureSampleLodProjCompareOffset_Texture3D_proj, &TextureSampleLodProjCompareOffset_Texture3D_compare, &TextureSampleLodProjCompareOffset_Texture3D_offset };

/// textureSampleLodProjCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32, Float32x3
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_lod;
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_proj;
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_compare;
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_offset;
Function SampledTextureSampleLodProjCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture3D_args = { &SampledTextureSampleLodProjCompareOffset_Texture3D_texture, &SampledTextureSampleLodProjCompareOffset_Texture3D_coordinate, &SampledTextureSampleLodProjCompareOffset_Texture3D_lod, &SampledTextureSampleLodProjCompareOffset_Texture3D_proj, &SampledTextureSampleLodProjCompareOffset_Texture3D_compare, &SampledTextureSampleLodProjCompareOffset_Texture3D_offset };

/// textureSampleGrad with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleGrad_Texture1D_texture;
inline constexpr std::array TextureSampleGrad_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture1D_sampler;
inline constexpr std::array TextureSampleGrad_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture1D_coordinate;
Variable TextureSampleGrad_Texture1D_grad_x;
Variable TextureSampleGrad_Texture1D_grad_y;
Function TextureSampleGrad_Texture1D;
inline constexpr std::array TextureSampleGrad_Texture1D_args = { &TextureSampleGrad_Texture1D_texture, &TextureSampleGrad_Texture1D_sampler, &TextureSampleGrad_Texture1D_coordinate, &TextureSampleGrad_Texture1D_grad_x, &TextureSampleGrad_Texture1D_grad_y };

/// textureSampleGrad with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleGrad_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGrad_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGrad_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGrad_Texture1D_coordinate;
Variable SampledTextureSampleGrad_Texture1D_grad_x;
Variable SampledTextureSampleGrad_Texture1D_grad_y;
Function SampledTextureSampleGrad_Texture1D;
inline constexpr std::array SampledTextureSampleGrad_Texture1D_args = { &SampledTextureSampleGrad_Texture1D_texture, &SampledTextureSampleGrad_Texture1D_coordinate, &SampledTextureSampleGrad_Texture1D_grad_x, &SampledTextureSampleGrad_Texture1D_grad_y };

/// textureSampleGrad with Texture2D, Sampler, Float32x2, Float32x2, Float32x2
Variable TextureSampleGrad_Texture2D_texture;
inline constexpr std::array TextureSampleGrad_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture2D_sampler;
inline constexpr std::array TextureSampleGrad_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture2D_coordinate;
Variable TextureSampleGrad_Texture2D_grad_x;
Variable TextureSampleGrad_Texture2D_grad_y;
Function TextureSampleGrad_Texture2D;
inline constexpr std::array TextureSampleGrad_Texture2D_args = { &TextureSampleGrad_Texture2D_texture, &TextureSampleGrad_Texture2D_sampler, &TextureSampleGrad_Texture2D_coordinate, &TextureSampleGrad_Texture2D_grad_x, &TextureSampleGrad_Texture2D_grad_y };

/// textureSampleGrad with SampledTexture2D, Float32x2, Float32x2, Float32x2
Variable SampledTextureSampleGrad_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGrad_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGrad_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGrad_Texture2D_coordinate;
Variable SampledTextureSampleGrad_Texture2D_grad_x;
Variable SampledTextureSampleGrad_Texture2D_grad_y;
Function SampledTextureSampleGrad_Texture2D;
inline constexpr std::array SampledTextureSampleGrad_Texture2D_args = { &SampledTextureSampleGrad_Texture2D_texture, &SampledTextureSampleGrad_Texture2D_coordinate, &SampledTextureSampleGrad_Texture2D_grad_x, &SampledTextureSampleGrad_Texture2D_grad_y };

/// textureSampleGrad with Texture3D, Sampler, Float32x3, Float32x3, Float32x3
Variable TextureSampleGrad_Texture3D_texture;
inline constexpr std::array TextureSampleGrad_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture3D_sampler;
inline constexpr std::array TextureSampleGrad_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture3D_coordinate;
Variable TextureSampleGrad_Texture3D_grad_x;
Variable TextureSampleGrad_Texture3D_grad_y;
Function TextureSampleGrad_Texture3D;
inline constexpr std::array TextureSampleGrad_Texture3D_args = { &TextureSampleGrad_Texture3D_texture, &TextureSampleGrad_Texture3D_sampler, &TextureSampleGrad_Texture3D_coordinate, &TextureSampleGrad_Texture3D_grad_x, &TextureSampleGrad_Texture3D_grad_y };

/// textureSampleGrad with SampledTexture3D, Float32x3, Float32x3, Float32x3
Variable SampledTextureSampleGrad_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGrad_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGrad_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGrad_Texture3D_coordinate;
Variable SampledTextureSampleGrad_Texture3D_grad_x;
Variable SampledTextureSampleGrad_Texture3D_grad_y;
Function SampledTextureSampleGrad_Texture3D;
inline constexpr std::array SampledTextureSampleGrad_Texture3D_args = { &SampledTextureSampleGrad_Texture3D_texture, &SampledTextureSampleGrad_Texture3D_coordinate, &SampledTextureSampleGrad_Texture3D_grad_x, &SampledTextureSampleGrad_Texture3D_grad_y };

/// textureSampleGrad with TextureCube, Sampler, Float32x3, Float32x3, Float32x3
Variable TextureSampleGrad_TextureCube_texture;
inline constexpr std::array TextureSampleGrad_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_TextureCube_sampler;
inline constexpr std::array TextureSampleGrad_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_TextureCube_coordinate;
Variable TextureSampleGrad_TextureCube_grad_x;
Variable TextureSampleGrad_TextureCube_grad_y;
Function TextureSampleGrad_TextureCube;
inline constexpr std::array TextureSampleGrad_TextureCube_args = { &TextureSampleGrad_TextureCube_texture, &TextureSampleGrad_TextureCube_sampler, &TextureSampleGrad_TextureCube_coordinate, &TextureSampleGrad_TextureCube_grad_x, &TextureSampleGrad_TextureCube_grad_y };

/// textureSampleGrad with SampledTextureCube, Float32x3, Float32x3, Float32x3
Variable SampledTextureSampleGrad_TextureCube_texture;
inline constexpr std::array SampledTextureSampleGrad_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGrad_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGrad_TextureCube_coordinate;
Variable SampledTextureSampleGrad_TextureCube_grad_x;
Variable SampledTextureSampleGrad_TextureCube_grad_y;
Function SampledTextureSampleGrad_TextureCube;
inline constexpr std::array SampledTextureSampleGrad_TextureCube_args = { &SampledTextureSampleGrad_TextureCube_texture, &SampledTextureSampleGrad_TextureCube_coordinate, &SampledTextureSampleGrad_TextureCube_grad_x, &SampledTextureSampleGrad_TextureCube_grad_y };

/// textureSampleGrad with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2
Variable TextureSampleGrad_Texture1DArray_texture;
inline constexpr std::array TextureSampleGrad_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture1DArray_sampler;
inline constexpr std::array TextureSampleGrad_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture1DArray_coordinate;
Variable TextureSampleGrad_Texture1DArray_grad_x;
Variable TextureSampleGrad_Texture1DArray_grad_y;
Function TextureSampleGrad_Texture1DArray;
inline constexpr std::array TextureSampleGrad_Texture1DArray_args = { &TextureSampleGrad_Texture1DArray_texture, &TextureSampleGrad_Texture1DArray_sampler, &TextureSampleGrad_Texture1DArray_coordinate, &TextureSampleGrad_Texture1DArray_grad_x, &TextureSampleGrad_Texture1DArray_grad_y };

/// textureSampleGrad with SampledTexture1DArray, Float32x2, Float32x2, Float32x2
Variable SampledTextureSampleGrad_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleGrad_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGrad_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGrad_Texture1DArray_coordinate;
Variable SampledTextureSampleGrad_Texture1DArray_grad_x;
Variable SampledTextureSampleGrad_Texture1DArray_grad_y;
Function SampledTextureSampleGrad_Texture1DArray;
inline constexpr std::array SampledTextureSampleGrad_Texture1DArray_args = { &SampledTextureSampleGrad_Texture1DArray_texture, &SampledTextureSampleGrad_Texture1DArray_coordinate, &SampledTextureSampleGrad_Texture1DArray_grad_x, &SampledTextureSampleGrad_Texture1DArray_grad_y };

/// textureSampleGrad with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3
Variable TextureSampleGrad_Texture2DArray_texture;
inline constexpr std::array TextureSampleGrad_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture2DArray_sampler;
inline constexpr std::array TextureSampleGrad_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture2DArray_coordinate;
Variable TextureSampleGrad_Texture2DArray_grad_x;
Variable TextureSampleGrad_Texture2DArray_grad_y;
Function TextureSampleGrad_Texture2DArray;
inline constexpr std::array TextureSampleGrad_Texture2DArray_args = { &TextureSampleGrad_Texture2DArray_texture, &TextureSampleGrad_Texture2DArray_sampler, &TextureSampleGrad_Texture2DArray_coordinate, &TextureSampleGrad_Texture2DArray_grad_x, &TextureSampleGrad_Texture2DArray_grad_y };

/// textureSampleGrad with SampledTexture2DArray, Float32x3, Float32x3, Float32x3
Variable SampledTextureSampleGrad_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleGrad_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGrad_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGrad_Texture2DArray_coordinate;
Variable SampledTextureSampleGrad_Texture2DArray_grad_x;
Variable SampledTextureSampleGrad_Texture2DArray_grad_y;
Function SampledTextureSampleGrad_Texture2DArray;
inline constexpr std::array SampledTextureSampleGrad_Texture2DArray_args = { &SampledTextureSampleGrad_Texture2DArray_texture, &SampledTextureSampleGrad_Texture2DArray_coordinate, &SampledTextureSampleGrad_Texture2DArray_grad_x, &SampledTextureSampleGrad_Texture2DArray_grad_y };

/// textureSampleGrad with TextureCubeArray, Sampler, Float32x4, Float32x4, Float32x4
Variable TextureSampleGrad_TextureCubeArray_texture;
inline constexpr std::array TextureSampleGrad_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_TextureCubeArray_sampler;
inline constexpr std::array TextureSampleGrad_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_TextureCubeArray_coordinate;
Variable TextureSampleGrad_TextureCubeArray_grad_x;
Variable TextureSampleGrad_TextureCubeArray_grad_y;
Function TextureSampleGrad_TextureCubeArray;
inline constexpr std::array TextureSampleGrad_TextureCubeArray_args = { &TextureSampleGrad_TextureCubeArray_texture, &TextureSampleGrad_TextureCubeArray_sampler, &TextureSampleGrad_TextureCubeArray_coordinate, &TextureSampleGrad_TextureCubeArray_grad_x, &TextureSampleGrad_TextureCubeArray_grad_y };

/// textureSampleGrad with SampledTextureCubeArray, Float32x4, Float32x4, Float32x4
Variable SampledTextureSampleGrad_TextureCubeArray_texture;
inline constexpr std::array SampledTextureSampleGrad_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGrad_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGrad_TextureCubeArray_coordinate;
Variable SampledTextureSampleGrad_TextureCubeArray_grad_x;
Variable SampledTextureSampleGrad_TextureCubeArray_grad_y;
Function SampledTextureSampleGrad_TextureCubeArray;
inline constexpr std::array SampledTextureSampleGrad_TextureCubeArray_args = { &SampledTextureSampleGrad_TextureCubeArray_texture, &SampledTextureSampleGrad_TextureCubeArray_coordinate, &SampledTextureSampleGrad_TextureCubeArray_grad_x, &SampledTextureSampleGrad_TextureCubeArray_grad_y };

/// textureSampleGradOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleGradOffset_Texture1D_texture;
inline constexpr std::array TextureSampleGradOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleGradOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture1D_coordinate;
Variable TextureSampleGradOffset_Texture1D_grad_x;
Variable TextureSampleGradOffset_Texture1D_grad_y;
Variable TextureSampleGradOffset_Texture1D_offset;
Function TextureSampleGradOffset_Texture1D;
inline constexpr std::array TextureSampleGradOffset_Texture1D_args = { &TextureSampleGradOffset_Texture1D_texture, &TextureSampleGradOffset_Texture1D_sampler, &TextureSampleGradOffset_Texture1D_coordinate, &TextureSampleGradOffset_Texture1D_grad_x, &TextureSampleGradOffset_Texture1D_grad_y, &TextureSampleGradOffset_Texture1D_offset };

/// textureSampleGradOffset with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGradOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradOffset_Texture1D_coordinate;
Variable SampledTextureSampleGradOffset_Texture1D_grad_x;
Variable SampledTextureSampleGradOffset_Texture1D_grad_y;
Variable SampledTextureSampleGradOffset_Texture1D_offset;
Function SampledTextureSampleGradOffset_Texture1D;
inline constexpr std::array SampledTextureSampleGradOffset_Texture1D_args = { &SampledTextureSampleGradOffset_Texture1D_texture, &SampledTextureSampleGradOffset_Texture1D_coordinate, &SampledTextureSampleGradOffset_Texture1D_grad_x, &SampledTextureSampleGradOffset_Texture1D_grad_y, &SampledTextureSampleGradOffset_Texture1D_offset };

/// textureSampleGradOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32x2
Variable TextureSampleGradOffset_Texture2D_texture;
inline constexpr std::array TextureSampleGradOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleGradOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture2D_coordinate;
Variable TextureSampleGradOffset_Texture2D_grad_x;
Variable TextureSampleGradOffset_Texture2D_grad_y;
Variable TextureSampleGradOffset_Texture2D_offset;
Function TextureSampleGradOffset_Texture2D;
inline constexpr std::array TextureSampleGradOffset_Texture2D_args = { &TextureSampleGradOffset_Texture2D_texture, &TextureSampleGradOffset_Texture2D_sampler, &TextureSampleGradOffset_Texture2D_coordinate, &TextureSampleGradOffset_Texture2D_grad_x, &TextureSampleGradOffset_Texture2D_grad_y, &TextureSampleGradOffset_Texture2D_offset };

/// textureSampleGradOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32x2
Variable SampledTextureSampleGradOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGradOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradOffset_Texture2D_coordinate;
Variable SampledTextureSampleGradOffset_Texture2D_grad_x;
Variable SampledTextureSampleGradOffset_Texture2D_grad_y;
Variable SampledTextureSampleGradOffset_Texture2D_offset;
Function SampledTextureSampleGradOffset_Texture2D;
inline constexpr std::array SampledTextureSampleGradOffset_Texture2D_args = { &SampledTextureSampleGradOffset_Texture2D_texture, &SampledTextureSampleGradOffset_Texture2D_coordinate, &SampledTextureSampleGradOffset_Texture2D_grad_x, &SampledTextureSampleGradOffset_Texture2D_grad_y, &SampledTextureSampleGradOffset_Texture2D_offset };

/// textureSampleGradOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32x3
Variable TextureSampleGradOffset_Texture3D_texture;
inline constexpr std::array TextureSampleGradOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleGradOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture3D_coordinate;
Variable TextureSampleGradOffset_Texture3D_grad_x;
Variable TextureSampleGradOffset_Texture3D_grad_y;
Variable TextureSampleGradOffset_Texture3D_offset;
Function TextureSampleGradOffset_Texture3D;
inline constexpr std::array TextureSampleGradOffset_Texture3D_args = { &TextureSampleGradOffset_Texture3D_texture, &TextureSampleGradOffset_Texture3D_sampler, &TextureSampleGradOffset_Texture3D_coordinate, &TextureSampleGradOffset_Texture3D_grad_x, &TextureSampleGradOffset_Texture3D_grad_y, &TextureSampleGradOffset_Texture3D_offset };

/// textureSampleGradOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32x3
Variable SampledTextureSampleGradOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGradOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradOffset_Texture3D_coordinate;
Variable SampledTextureSampleGradOffset_Texture3D_grad_x;
Variable SampledTextureSampleGradOffset_Texture3D_grad_y;
Variable SampledTextureSampleGradOffset_Texture3D_offset;
Function SampledTextureSampleGradOffset_Texture3D;
inline constexpr std::array SampledTextureSampleGradOffset_Texture3D_args = { &SampledTextureSampleGradOffset_Texture3D_texture, &SampledTextureSampleGradOffset_Texture3D_coordinate, &SampledTextureSampleGradOffset_Texture3D_grad_x, &SampledTextureSampleGradOffset_Texture3D_grad_y, &SampledTextureSampleGradOffset_Texture3D_offset };

/// textureSampleGradOffset with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32x2
Variable TextureSampleGradOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleGradOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleGradOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture1DArray_coordinate;
Variable TextureSampleGradOffset_Texture1DArray_grad_x;
Variable TextureSampleGradOffset_Texture1DArray_grad_y;
Variable TextureSampleGradOffset_Texture1DArray_offset;
Function TextureSampleGradOffset_Texture1DArray;
inline constexpr std::array TextureSampleGradOffset_Texture1DArray_args = { &TextureSampleGradOffset_Texture1DArray_texture, &TextureSampleGradOffset_Texture1DArray_sampler, &TextureSampleGradOffset_Texture1DArray_coordinate, &TextureSampleGradOffset_Texture1DArray_grad_x, &TextureSampleGradOffset_Texture1DArray_grad_y, &TextureSampleGradOffset_Texture1DArray_offset };

/// textureSampleGradOffset with SampledTexture1DArray, Float32x2, Float32x2, Float32x2, Float32x2
Variable SampledTextureSampleGradOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleGradOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleGradOffset_Texture1DArray_grad_x;
Variable SampledTextureSampleGradOffset_Texture1DArray_grad_y;
Variable SampledTextureSampleGradOffset_Texture1DArray_offset;
Function SampledTextureSampleGradOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleGradOffset_Texture1DArray_args = { &SampledTextureSampleGradOffset_Texture1DArray_texture, &SampledTextureSampleGradOffset_Texture1DArray_coordinate, &SampledTextureSampleGradOffset_Texture1DArray_grad_x, &SampledTextureSampleGradOffset_Texture1DArray_grad_y, &SampledTextureSampleGradOffset_Texture1DArray_offset };

/// textureSampleGradOffset with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32x3
Variable TextureSampleGradOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleGradOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleGradOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture2DArray_coordinate;
Variable TextureSampleGradOffset_Texture2DArray_grad_x;
Variable TextureSampleGradOffset_Texture2DArray_grad_y;
Variable TextureSampleGradOffset_Texture2DArray_offset;
Function TextureSampleGradOffset_Texture2DArray;
inline constexpr std::array TextureSampleGradOffset_Texture2DArray_args = { &TextureSampleGradOffset_Texture2DArray_texture, &TextureSampleGradOffset_Texture2DArray_sampler, &TextureSampleGradOffset_Texture2DArray_coordinate, &TextureSampleGradOffset_Texture2DArray_grad_x, &TextureSampleGradOffset_Texture2DArray_grad_y, &TextureSampleGradOffset_Texture2DArray_offset };

/// textureSampleGradOffset with SampledTexture2DArray, Float32x3, Float32x3, Float32x3, Float32x3
Variable SampledTextureSampleGradOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleGradOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleGradOffset_Texture2DArray_grad_x;
Variable SampledTextureSampleGradOffset_Texture2DArray_grad_y;
Variable SampledTextureSampleGradOffset_Texture2DArray_offset;
Function SampledTextureSampleGradOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleGradOffset_Texture2DArray_args = { &SampledTextureSampleGradOffset_Texture2DArray_texture, &SampledTextureSampleGradOffset_Texture2DArray_coordinate, &SampledTextureSampleGradOffset_Texture2DArray_grad_x, &SampledTextureSampleGradOffset_Texture2DArray_grad_y, &SampledTextureSampleGradOffset_Texture2DArray_offset };

/// textureSampleGradProj with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleGradProj_Texture1D_texture;
inline constexpr std::array TextureSampleGradProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProj_Texture1D_sampler;
inline constexpr std::array TextureSampleGradProj_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProj_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProj_Texture1D_coordinate;
Variable TextureSampleGradProj_Texture1D_grad_x;
Variable TextureSampleGradProj_Texture1D_grad_y;
Variable TextureSampleGradProj_Texture1D_proj;
Function TextureSampleGradProj_Texture1D;
inline constexpr std::array TextureSampleGradProj_Texture1D_args = { &TextureSampleGradProj_Texture1D_texture, &TextureSampleGradProj_Texture1D_sampler, &TextureSampleGradProj_Texture1D_coordinate, &TextureSampleGradProj_Texture1D_grad_x, &TextureSampleGradProj_Texture1D_grad_y, &TextureSampleGradProj_Texture1D_proj };

/// textureSampleGradProj with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradProj_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGradProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProj_Texture1D_coordinate;
Variable SampledTextureSampleGradProj_Texture1D_grad_x;
Variable SampledTextureSampleGradProj_Texture1D_grad_y;
Variable SampledTextureSampleGradProj_Texture1D_proj;
Function SampledTextureSampleGradProj_Texture1D;
inline constexpr std::array SampledTextureSampleGradProj_Texture1D_args = { &SampledTextureSampleGradProj_Texture1D_texture, &SampledTextureSampleGradProj_Texture1D_coordinate, &SampledTextureSampleGradProj_Texture1D_grad_x, &SampledTextureSampleGradProj_Texture1D_grad_y, &SampledTextureSampleGradProj_Texture1D_proj };

/// textureSampleGradProj with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32
Variable TextureSampleGradProj_Texture2D_texture;
inline constexpr std::array TextureSampleGradProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProj_Texture2D_sampler;
inline constexpr std::array TextureSampleGradProj_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProj_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProj_Texture2D_coordinate;
Variable TextureSampleGradProj_Texture2D_grad_x;
Variable TextureSampleGradProj_Texture2D_grad_y;
Variable TextureSampleGradProj_Texture2D_proj;
Function TextureSampleGradProj_Texture2D;
inline constexpr std::array TextureSampleGradProj_Texture2D_args = { &TextureSampleGradProj_Texture2D_texture, &TextureSampleGradProj_Texture2D_sampler, &TextureSampleGradProj_Texture2D_coordinate, &TextureSampleGradProj_Texture2D_grad_x, &TextureSampleGradProj_Texture2D_grad_y, &TextureSampleGradProj_Texture2D_proj };

/// textureSampleGradProj with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32
Variable SampledTextureSampleGradProj_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGradProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProj_Texture2D_coordinate;
Variable SampledTextureSampleGradProj_Texture2D_grad_x;
Variable SampledTextureSampleGradProj_Texture2D_grad_y;
Variable SampledTextureSampleGradProj_Texture2D_proj;
Function SampledTextureSampleGradProj_Texture2D;
inline constexpr std::array SampledTextureSampleGradProj_Texture2D_args = { &SampledTextureSampleGradProj_Texture2D_texture, &SampledTextureSampleGradProj_Texture2D_coordinate, &SampledTextureSampleGradProj_Texture2D_grad_x, &SampledTextureSampleGradProj_Texture2D_grad_y, &SampledTextureSampleGradProj_Texture2D_proj };

/// textureSampleGradProj with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32
Variable TextureSampleGradProj_Texture3D_texture;
inline constexpr std::array TextureSampleGradProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProj_Texture3D_sampler;
inline constexpr std::array TextureSampleGradProj_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProj_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProj_Texture3D_coordinate;
Variable TextureSampleGradProj_Texture3D_grad_x;
Variable TextureSampleGradProj_Texture3D_grad_y;
Variable TextureSampleGradProj_Texture3D_proj;
Function TextureSampleGradProj_Texture3D;
inline constexpr std::array TextureSampleGradProj_Texture3D_args = { &TextureSampleGradProj_Texture3D_texture, &TextureSampleGradProj_Texture3D_sampler, &TextureSampleGradProj_Texture3D_coordinate, &TextureSampleGradProj_Texture3D_grad_x, &TextureSampleGradProj_Texture3D_grad_y, &TextureSampleGradProj_Texture3D_proj };

/// textureSampleGradProj with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32
Variable SampledTextureSampleGradProj_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGradProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProj_Texture3D_coordinate;
Variable SampledTextureSampleGradProj_Texture3D_grad_x;
Variable SampledTextureSampleGradProj_Texture3D_grad_y;
Variable SampledTextureSampleGradProj_Texture3D_proj;
Function SampledTextureSampleGradProj_Texture3D;
inline constexpr std::array SampledTextureSampleGradProj_Texture3D_args = { &SampledTextureSampleGradProj_Texture3D_texture, &SampledTextureSampleGradProj_Texture3D_coordinate, &SampledTextureSampleGradProj_Texture3D_grad_x, &SampledTextureSampleGradProj_Texture3D_grad_y, &SampledTextureSampleGradProj_Texture3D_proj };

/// textureSampleGradProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleGradProjOffset_Texture1D_texture;
inline constexpr std::array TextureSampleGradProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleGradProjOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjOffset_Texture1D_coordinate;
Variable TextureSampleGradProjOffset_Texture1D_grad_x;
Variable TextureSampleGradProjOffset_Texture1D_grad_y;
Variable TextureSampleGradProjOffset_Texture1D_proj;
Variable TextureSampleGradProjOffset_Texture1D_offset;
Function TextureSampleGradProjOffset_Texture1D;
inline constexpr std::array TextureSampleGradProjOffset_Texture1D_args = { &TextureSampleGradProjOffset_Texture1D_texture, &TextureSampleGradProjOffset_Texture1D_sampler, &TextureSampleGradProjOffset_Texture1D_coordinate, &TextureSampleGradProjOffset_Texture1D_grad_x, &TextureSampleGradProjOffset_Texture1D_grad_y, &TextureSampleGradProjOffset_Texture1D_proj, &TextureSampleGradProjOffset_Texture1D_offset };

/// textureSampleGradProjOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradProjOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjOffset_Texture1D_coordinate;
Variable SampledTextureSampleGradProjOffset_Texture1D_grad_x;
Variable SampledTextureSampleGradProjOffset_Texture1D_grad_y;
Variable SampledTextureSampleGradProjOffset_Texture1D_proj;
Variable SampledTextureSampleGradProjOffset_Texture1D_offset;
Function SampledTextureSampleGradProjOffset_Texture1D;
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture1D_args = { &SampledTextureSampleGradProjOffset_Texture1D_texture, &SampledTextureSampleGradProjOffset_Texture1D_coordinate, &SampledTextureSampleGradProjOffset_Texture1D_grad_x, &SampledTextureSampleGradProjOffset_Texture1D_grad_y, &SampledTextureSampleGradProjOffset_Texture1D_proj, &SampledTextureSampleGradProjOffset_Texture1D_offset };

/// textureSampleGradProjOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable TextureSampleGradProjOffset_Texture2D_texture;
inline constexpr std::array TextureSampleGradProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleGradProjOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjOffset_Texture2D_coordinate;
Variable TextureSampleGradProjOffset_Texture2D_grad_x;
Variable TextureSampleGradProjOffset_Texture2D_grad_y;
Variable TextureSampleGradProjOffset_Texture2D_proj;
Variable TextureSampleGradProjOffset_Texture2D_offset;
Function TextureSampleGradProjOffset_Texture2D;
inline constexpr std::array TextureSampleGradProjOffset_Texture2D_args = { &TextureSampleGradProjOffset_Texture2D_texture, &TextureSampleGradProjOffset_Texture2D_sampler, &TextureSampleGradProjOffset_Texture2D_coordinate, &TextureSampleGradProjOffset_Texture2D_grad_x, &TextureSampleGradProjOffset_Texture2D_grad_y, &TextureSampleGradProjOffset_Texture2D_proj, &TextureSampleGradProjOffset_Texture2D_offset };

/// textureSampleGradProjOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable SampledTextureSampleGradProjOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjOffset_Texture2D_coordinate;
Variable SampledTextureSampleGradProjOffset_Texture2D_grad_x;
Variable SampledTextureSampleGradProjOffset_Texture2D_grad_y;
Variable SampledTextureSampleGradProjOffset_Texture2D_proj;
Variable SampledTextureSampleGradProjOffset_Texture2D_offset;
Function SampledTextureSampleGradProjOffset_Texture2D;
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture2D_args = { &SampledTextureSampleGradProjOffset_Texture2D_texture, &SampledTextureSampleGradProjOffset_Texture2D_coordinate, &SampledTextureSampleGradProjOffset_Texture2D_grad_x, &SampledTextureSampleGradProjOffset_Texture2D_grad_y, &SampledTextureSampleGradProjOffset_Texture2D_proj, &SampledTextureSampleGradProjOffset_Texture2D_offset };

/// textureSampleGradProjOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable TextureSampleGradProjOffset_Texture3D_texture;
inline constexpr std::array TextureSampleGradProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleGradProjOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjOffset_Texture3D_coordinate;
Variable TextureSampleGradProjOffset_Texture3D_grad_x;
Variable TextureSampleGradProjOffset_Texture3D_grad_y;
Variable TextureSampleGradProjOffset_Texture3D_proj;
Variable TextureSampleGradProjOffset_Texture3D_offset;
Function TextureSampleGradProjOffset_Texture3D;
inline constexpr std::array TextureSampleGradProjOffset_Texture3D_args = { &TextureSampleGradProjOffset_Texture3D_texture, &TextureSampleGradProjOffset_Texture3D_sampler, &TextureSampleGradProjOffset_Texture3D_coordinate, &TextureSampleGradProjOffset_Texture3D_grad_x, &TextureSampleGradProjOffset_Texture3D_grad_y, &TextureSampleGradProjOffset_Texture3D_proj, &TextureSampleGradProjOffset_Texture3D_offset };

/// textureSampleGradProjOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable SampledTextureSampleGradProjOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjOffset_Texture3D_coordinate;
Variable SampledTextureSampleGradProjOffset_Texture3D_grad_x;
Variable SampledTextureSampleGradProjOffset_Texture3D_grad_y;
Variable SampledTextureSampleGradProjOffset_Texture3D_proj;
Variable SampledTextureSampleGradProjOffset_Texture3D_offset;
Function SampledTextureSampleGradProjOffset_Texture3D;
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture3D_args = { &SampledTextureSampleGradProjOffset_Texture3D_texture, &SampledTextureSampleGradProjOffset_Texture3D_coordinate, &SampledTextureSampleGradProjOffset_Texture3D_grad_x, &SampledTextureSampleGradProjOffset_Texture3D_grad_y, &SampledTextureSampleGradProjOffset_Texture3D_proj, &SampledTextureSampleGradProjOffset_Texture3D_offset };

/// textureSampleGradCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleGradCompare_Texture1D_texture;
inline constexpr std::array TextureSampleGradCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleGradCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture1D_coordinate;
Variable TextureSampleGradCompare_Texture1D_grad_x;
Variable TextureSampleGradCompare_Texture1D_grad_y;
Variable TextureSampleGradCompare_Texture1D_compare;
Function TextureSampleGradCompare_Texture1D;
inline constexpr std::array TextureSampleGradCompare_Texture1D_args = { &TextureSampleGradCompare_Texture1D_texture, &TextureSampleGradCompare_Texture1D_sampler, &TextureSampleGradCompare_Texture1D_coordinate, &TextureSampleGradCompare_Texture1D_grad_x, &TextureSampleGradCompare_Texture1D_grad_y, &TextureSampleGradCompare_Texture1D_compare };

/// textureSampleGradCompare with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGradCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompare_Texture1D_coordinate;
Variable SampledTextureSampleGradCompare_Texture1D_grad_x;
Variable SampledTextureSampleGradCompare_Texture1D_grad_y;
Variable SampledTextureSampleGradCompare_Texture1D_compare;
Function SampledTextureSampleGradCompare_Texture1D;
inline constexpr std::array SampledTextureSampleGradCompare_Texture1D_args = { &SampledTextureSampleGradCompare_Texture1D_texture, &SampledTextureSampleGradCompare_Texture1D_coordinate, &SampledTextureSampleGradCompare_Texture1D_grad_x, &SampledTextureSampleGradCompare_Texture1D_grad_y, &SampledTextureSampleGradCompare_Texture1D_compare };

/// textureSampleGradCompare with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32
Variable TextureSampleGradCompare_Texture2D_texture;
inline constexpr std::array TextureSampleGradCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleGradCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture2D_coordinate;
Variable TextureSampleGradCompare_Texture2D_grad_x;
Variable TextureSampleGradCompare_Texture2D_grad_y;
Variable TextureSampleGradCompare_Texture2D_compare;
Function TextureSampleGradCompare_Texture2D;
inline constexpr std::array TextureSampleGradCompare_Texture2D_args = { &TextureSampleGradCompare_Texture2D_texture, &TextureSampleGradCompare_Texture2D_sampler, &TextureSampleGradCompare_Texture2D_coordinate, &TextureSampleGradCompare_Texture2D_grad_x, &TextureSampleGradCompare_Texture2D_grad_y, &TextureSampleGradCompare_Texture2D_compare };

/// textureSampleGradCompare with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32
Variable SampledTextureSampleGradCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGradCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompare_Texture2D_coordinate;
Variable SampledTextureSampleGradCompare_Texture2D_grad_x;
Variable SampledTextureSampleGradCompare_Texture2D_grad_y;
Variable SampledTextureSampleGradCompare_Texture2D_compare;
Function SampledTextureSampleGradCompare_Texture2D;
inline constexpr std::array SampledTextureSampleGradCompare_Texture2D_args = { &SampledTextureSampleGradCompare_Texture2D_texture, &SampledTextureSampleGradCompare_Texture2D_coordinate, &SampledTextureSampleGradCompare_Texture2D_grad_x, &SampledTextureSampleGradCompare_Texture2D_grad_y, &SampledTextureSampleGradCompare_Texture2D_compare };

/// textureSampleGradCompare with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32
Variable TextureSampleGradCompare_Texture3D_texture;
inline constexpr std::array TextureSampleGradCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleGradCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture3D_coordinate;
Variable TextureSampleGradCompare_Texture3D_grad_x;
Variable TextureSampleGradCompare_Texture3D_grad_y;
Variable TextureSampleGradCompare_Texture3D_compare;
Function TextureSampleGradCompare_Texture3D;
inline constexpr std::array TextureSampleGradCompare_Texture3D_args = { &TextureSampleGradCompare_Texture3D_texture, &TextureSampleGradCompare_Texture3D_sampler, &TextureSampleGradCompare_Texture3D_coordinate, &TextureSampleGradCompare_Texture3D_grad_x, &TextureSampleGradCompare_Texture3D_grad_y, &TextureSampleGradCompare_Texture3D_compare };

/// textureSampleGradCompare with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32
Variable SampledTextureSampleGradCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGradCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompare_Texture3D_coordinate;
Variable SampledTextureSampleGradCompare_Texture3D_grad_x;
Variable SampledTextureSampleGradCompare_Texture3D_grad_y;
Variable SampledTextureSampleGradCompare_Texture3D_compare;
Function SampledTextureSampleGradCompare_Texture3D;
inline constexpr std::array SampledTextureSampleGradCompare_Texture3D_args = { &SampledTextureSampleGradCompare_Texture3D_texture, &SampledTextureSampleGradCompare_Texture3D_coordinate, &SampledTextureSampleGradCompare_Texture3D_grad_x, &SampledTextureSampleGradCompare_Texture3D_grad_y, &SampledTextureSampleGradCompare_Texture3D_compare };

/// textureSampleGradCompare with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32
Variable TextureSampleGradCompare_Texture1DArray_texture;
inline constexpr std::array TextureSampleGradCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture1DArray_sampler;
inline constexpr std::array TextureSampleGradCompare_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture1DArray_coordinate;
Variable TextureSampleGradCompare_Texture1DArray_grad_x;
Variable TextureSampleGradCompare_Texture1DArray_grad_y;
Variable TextureSampleGradCompare_Texture1DArray_compare;
Function TextureSampleGradCompare_Texture1DArray;
inline constexpr std::array TextureSampleGradCompare_Texture1DArray_args = { &TextureSampleGradCompare_Texture1DArray_texture, &TextureSampleGradCompare_Texture1DArray_sampler, &TextureSampleGradCompare_Texture1DArray_coordinate, &TextureSampleGradCompare_Texture1DArray_grad_x, &TextureSampleGradCompare_Texture1DArray_grad_y, &TextureSampleGradCompare_Texture1DArray_compare };

/// textureSampleGradCompare with SampledTexture1DArray, Float32x2, Float32x2, Float32x2, Float32
Variable SampledTextureSampleGradCompare_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleGradCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleGradCompare_Texture1DArray_grad_x;
Variable SampledTextureSampleGradCompare_Texture1DArray_grad_y;
Variable SampledTextureSampleGradCompare_Texture1DArray_compare;
Function SampledTextureSampleGradCompare_Texture1DArray;
inline constexpr std::array SampledTextureSampleGradCompare_Texture1DArray_args = { &SampledTextureSampleGradCompare_Texture1DArray_texture, &SampledTextureSampleGradCompare_Texture1DArray_coordinate, &SampledTextureSampleGradCompare_Texture1DArray_grad_x, &SampledTextureSampleGradCompare_Texture1DArray_grad_y, &SampledTextureSampleGradCompare_Texture1DArray_compare };

/// textureSampleGradCompare with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32
Variable TextureSampleGradCompare_Texture2DArray_texture;
inline constexpr std::array TextureSampleGradCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture2DArray_sampler;
inline constexpr std::array TextureSampleGradCompare_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture2DArray_coordinate;
Variable TextureSampleGradCompare_Texture2DArray_grad_x;
Variable TextureSampleGradCompare_Texture2DArray_grad_y;
Variable TextureSampleGradCompare_Texture2DArray_compare;
Function TextureSampleGradCompare_Texture2DArray;
inline constexpr std::array TextureSampleGradCompare_Texture2DArray_args = { &TextureSampleGradCompare_Texture2DArray_texture, &TextureSampleGradCompare_Texture2DArray_sampler, &TextureSampleGradCompare_Texture2DArray_coordinate, &TextureSampleGradCompare_Texture2DArray_grad_x, &TextureSampleGradCompare_Texture2DArray_grad_y, &TextureSampleGradCompare_Texture2DArray_compare };

/// textureSampleGradCompare with SampledTexture2DArray, Float32x3, Float32x3, Float32x3, Float32
Variable SampledTextureSampleGradCompare_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleGradCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleGradCompare_Texture2DArray_grad_x;
Variable SampledTextureSampleGradCompare_Texture2DArray_grad_y;
Variable SampledTextureSampleGradCompare_Texture2DArray_compare;
Function SampledTextureSampleGradCompare_Texture2DArray;
inline constexpr std::array SampledTextureSampleGradCompare_Texture2DArray_args = { &SampledTextureSampleGradCompare_Texture2DArray_texture, &SampledTextureSampleGradCompare_Texture2DArray_coordinate, &SampledTextureSampleGradCompare_Texture2DArray_grad_x, &SampledTextureSampleGradCompare_Texture2DArray_grad_y, &SampledTextureSampleGradCompare_Texture2DArray_compare };

/// textureSampleGradCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleGradCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleGradCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleGradCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture1D_coordinate;
Variable TextureSampleGradCompareOffset_Texture1D_grad_x;
Variable TextureSampleGradCompareOffset_Texture1D_grad_y;
Variable TextureSampleGradCompareOffset_Texture1D_compare;
Variable TextureSampleGradCompareOffset_Texture1D_offset;
Function TextureSampleGradCompareOffset_Texture1D;
inline constexpr std::array TextureSampleGradCompareOffset_Texture1D_args = { &TextureSampleGradCompareOffset_Texture1D_texture, &TextureSampleGradCompareOffset_Texture1D_sampler, &TextureSampleGradCompareOffset_Texture1D_coordinate, &TextureSampleGradCompareOffset_Texture1D_grad_x, &TextureSampleGradCompareOffset_Texture1D_grad_y, &TextureSampleGradCompareOffset_Texture1D_compare, &TextureSampleGradCompareOffset_Texture1D_offset };

/// textureSampleGradCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleGradCompareOffset_Texture1D_grad_x;
Variable SampledTextureSampleGradCompareOffset_Texture1D_grad_y;
Variable SampledTextureSampleGradCompareOffset_Texture1D_compare;
Variable SampledTextureSampleGradCompareOffset_Texture1D_offset;
Function SampledTextureSampleGradCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture1D_args = { &SampledTextureSampleGradCompareOffset_Texture1D_texture, &SampledTextureSampleGradCompareOffset_Texture1D_coordinate, &SampledTextureSampleGradCompareOffset_Texture1D_grad_x, &SampledTextureSampleGradCompareOffset_Texture1D_grad_y, &SampledTextureSampleGradCompareOffset_Texture1D_compare, &SampledTextureSampleGradCompareOffset_Texture1D_offset };

/// textureSampleGradCompareOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable TextureSampleGradCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleGradCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleGradCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture2D_coordinate;
Variable TextureSampleGradCompareOffset_Texture2D_grad_x;
Variable TextureSampleGradCompareOffset_Texture2D_grad_y;
Variable TextureSampleGradCompareOffset_Texture2D_compare;
Variable TextureSampleGradCompareOffset_Texture2D_offset;
Function TextureSampleGradCompareOffset_Texture2D;
inline constexpr std::array TextureSampleGradCompareOffset_Texture2D_args = { &TextureSampleGradCompareOffset_Texture2D_texture, &TextureSampleGradCompareOffset_Texture2D_sampler, &TextureSampleGradCompareOffset_Texture2D_coordinate, &TextureSampleGradCompareOffset_Texture2D_grad_x, &TextureSampleGradCompareOffset_Texture2D_grad_y, &TextureSampleGradCompareOffset_Texture2D_compare, &TextureSampleGradCompareOffset_Texture2D_offset };

/// textureSampleGradCompareOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable SampledTextureSampleGradCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleGradCompareOffset_Texture2D_grad_x;
Variable SampledTextureSampleGradCompareOffset_Texture2D_grad_y;
Variable SampledTextureSampleGradCompareOffset_Texture2D_compare;
Variable SampledTextureSampleGradCompareOffset_Texture2D_offset;
Function SampledTextureSampleGradCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture2D_args = { &SampledTextureSampleGradCompareOffset_Texture2D_texture, &SampledTextureSampleGradCompareOffset_Texture2D_coordinate, &SampledTextureSampleGradCompareOffset_Texture2D_grad_x, &SampledTextureSampleGradCompareOffset_Texture2D_grad_y, &SampledTextureSampleGradCompareOffset_Texture2D_compare, &SampledTextureSampleGradCompareOffset_Texture2D_offset };

/// textureSampleGradCompareOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable TextureSampleGradCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleGradCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleGradCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture3D_coordinate;
Variable TextureSampleGradCompareOffset_Texture3D_grad_x;
Variable TextureSampleGradCompareOffset_Texture3D_grad_y;
Variable TextureSampleGradCompareOffset_Texture3D_compare;
Variable TextureSampleGradCompareOffset_Texture3D_offset;
Function TextureSampleGradCompareOffset_Texture3D;
inline constexpr std::array TextureSampleGradCompareOffset_Texture3D_args = { &TextureSampleGradCompareOffset_Texture3D_texture, &TextureSampleGradCompareOffset_Texture3D_sampler, &TextureSampleGradCompareOffset_Texture3D_coordinate, &TextureSampleGradCompareOffset_Texture3D_grad_x, &TextureSampleGradCompareOffset_Texture3D_grad_y, &TextureSampleGradCompareOffset_Texture3D_compare, &TextureSampleGradCompareOffset_Texture3D_offset };

/// textureSampleGradCompareOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable SampledTextureSampleGradCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleGradCompareOffset_Texture3D_grad_x;
Variable SampledTextureSampleGradCompareOffset_Texture3D_grad_y;
Variable SampledTextureSampleGradCompareOffset_Texture3D_compare;
Variable SampledTextureSampleGradCompareOffset_Texture3D_offset;
Function SampledTextureSampleGradCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture3D_args = { &SampledTextureSampleGradCompareOffset_Texture3D_texture, &SampledTextureSampleGradCompareOffset_Texture3D_coordinate, &SampledTextureSampleGradCompareOffset_Texture3D_grad_x, &SampledTextureSampleGradCompareOffset_Texture3D_grad_y, &SampledTextureSampleGradCompareOffset_Texture3D_compare, &SampledTextureSampleGradCompareOffset_Texture3D_offset };

/// textureSampleGradCompareOffset with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable TextureSampleGradCompareOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleGradCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleGradCompareOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture1DArray_coordinate;
Variable TextureSampleGradCompareOffset_Texture1DArray_grad_x;
Variable TextureSampleGradCompareOffset_Texture1DArray_grad_y;
Variable TextureSampleGradCompareOffset_Texture1DArray_compare;
Variable TextureSampleGradCompareOffset_Texture1DArray_offset;
Function TextureSampleGradCompareOffset_Texture1DArray;
inline constexpr std::array TextureSampleGradCompareOffset_Texture1DArray_args = { &TextureSampleGradCompareOffset_Texture1DArray_texture, &TextureSampleGradCompareOffset_Texture1DArray_sampler, &TextureSampleGradCompareOffset_Texture1DArray_coordinate, &TextureSampleGradCompareOffset_Texture1DArray_grad_x, &TextureSampleGradCompareOffset_Texture1DArray_grad_y, &TextureSampleGradCompareOffset_Texture1DArray_compare, &TextureSampleGradCompareOffset_Texture1DArray_offset };

/// textureSampleGradCompareOffset with SampledTexture1DArray, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_grad_x;
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_grad_y;
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_compare;
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_offset;
Function SampledTextureSampleGradCompareOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture1DArray_args = { &SampledTextureSampleGradCompareOffset_Texture1DArray_texture, &SampledTextureSampleGradCompareOffset_Texture1DArray_coordinate, &SampledTextureSampleGradCompareOffset_Texture1DArray_grad_x, &SampledTextureSampleGradCompareOffset_Texture1DArray_grad_y, &SampledTextureSampleGradCompareOffset_Texture1DArray_compare, &SampledTextureSampleGradCompareOffset_Texture1DArray_offset };

/// textureSampleGradCompareOffset with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable TextureSampleGradCompareOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleGradCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleGradCompareOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture2DArray_coordinate;
Variable TextureSampleGradCompareOffset_Texture2DArray_grad_x;
Variable TextureSampleGradCompareOffset_Texture2DArray_grad_y;
Variable TextureSampleGradCompareOffset_Texture2DArray_compare;
Variable TextureSampleGradCompareOffset_Texture2DArray_offset;
Function TextureSampleGradCompareOffset_Texture2DArray;
inline constexpr std::array TextureSampleGradCompareOffset_Texture2DArray_args = { &TextureSampleGradCompareOffset_Texture2DArray_texture, &TextureSampleGradCompareOffset_Texture2DArray_sampler, &TextureSampleGradCompareOffset_Texture2DArray_coordinate, &TextureSampleGradCompareOffset_Texture2DArray_grad_x, &TextureSampleGradCompareOffset_Texture2DArray_grad_y, &TextureSampleGradCompareOffset_Texture2DArray_compare, &TextureSampleGradCompareOffset_Texture2DArray_offset };

/// textureSampleGradCompareOffset with SampledTexture2DArray, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_grad_x;
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_grad_y;
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_compare;
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_offset;
Function SampledTextureSampleGradCompareOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture2DArray_args = { &SampledTextureSampleGradCompareOffset_Texture2DArray_texture, &SampledTextureSampleGradCompareOffset_Texture2DArray_coordinate, &SampledTextureSampleGradCompareOffset_Texture2DArray_grad_x, &SampledTextureSampleGradCompareOffset_Texture2DArray_grad_y, &SampledTextureSampleGradCompareOffset_Texture2DArray_compare, &SampledTextureSampleGradCompareOffset_Texture2DArray_offset };

/// textureSampleGradProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleGradProjCompare_Texture1D_texture;
inline constexpr std::array TextureSampleGradProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleGradProjCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompare_Texture1D_coordinate;
Variable TextureSampleGradProjCompare_Texture1D_grad_x;
Variable TextureSampleGradProjCompare_Texture1D_grad_y;
Variable TextureSampleGradProjCompare_Texture1D_proj;
Variable TextureSampleGradProjCompare_Texture1D_compare;
Function TextureSampleGradProjCompare_Texture1D;
inline constexpr std::array TextureSampleGradProjCompare_Texture1D_args = { &TextureSampleGradProjCompare_Texture1D_texture, &TextureSampleGradProjCompare_Texture1D_sampler, &TextureSampleGradProjCompare_Texture1D_coordinate, &TextureSampleGradProjCompare_Texture1D_grad_x, &TextureSampleGradProjCompare_Texture1D_grad_y, &TextureSampleGradProjCompare_Texture1D_proj, &TextureSampleGradProjCompare_Texture1D_compare };

/// textureSampleGradProjCompare with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradProjCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleGradProjCompare_Texture1D_grad_x;
Variable SampledTextureSampleGradProjCompare_Texture1D_grad_y;
Variable SampledTextureSampleGradProjCompare_Texture1D_proj;
Variable SampledTextureSampleGradProjCompare_Texture1D_compare;
Function SampledTextureSampleGradProjCompare_Texture1D;
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture1D_args = { &SampledTextureSampleGradProjCompare_Texture1D_texture, &SampledTextureSampleGradProjCompare_Texture1D_coordinate, &SampledTextureSampleGradProjCompare_Texture1D_grad_x, &SampledTextureSampleGradProjCompare_Texture1D_grad_y, &SampledTextureSampleGradProjCompare_Texture1D_proj, &SampledTextureSampleGradProjCompare_Texture1D_compare };

/// textureSampleGradProjCompare with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32
Variable TextureSampleGradProjCompare_Texture2D_texture;
inline constexpr std::array TextureSampleGradProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleGradProjCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompare_Texture2D_coordinate;
Variable TextureSampleGradProjCompare_Texture2D_grad_x;
Variable TextureSampleGradProjCompare_Texture2D_grad_y;
Variable TextureSampleGradProjCompare_Texture2D_proj;
Variable TextureSampleGradProjCompare_Texture2D_compare;
Function TextureSampleGradProjCompare_Texture2D;
inline constexpr std::array TextureSampleGradProjCompare_Texture2D_args = { &TextureSampleGradProjCompare_Texture2D_texture, &TextureSampleGradProjCompare_Texture2D_sampler, &TextureSampleGradProjCompare_Texture2D_coordinate, &TextureSampleGradProjCompare_Texture2D_grad_x, &TextureSampleGradProjCompare_Texture2D_grad_y, &TextureSampleGradProjCompare_Texture2D_proj, &TextureSampleGradProjCompare_Texture2D_compare };

/// textureSampleGradProjCompare with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32
Variable SampledTextureSampleGradProjCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleGradProjCompare_Texture2D_grad_x;
Variable SampledTextureSampleGradProjCompare_Texture2D_grad_y;
Variable SampledTextureSampleGradProjCompare_Texture2D_proj;
Variable SampledTextureSampleGradProjCompare_Texture2D_compare;
Function SampledTextureSampleGradProjCompare_Texture2D;
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture2D_args = { &SampledTextureSampleGradProjCompare_Texture2D_texture, &SampledTextureSampleGradProjCompare_Texture2D_coordinate, &SampledTextureSampleGradProjCompare_Texture2D_grad_x, &SampledTextureSampleGradProjCompare_Texture2D_grad_y, &SampledTextureSampleGradProjCompare_Texture2D_proj, &SampledTextureSampleGradProjCompare_Texture2D_compare };

/// textureSampleGradProjCompare with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32
Variable TextureSampleGradProjCompare_Texture3D_texture;
inline constexpr std::array TextureSampleGradProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleGradProjCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompare_Texture3D_coordinate;
Variable TextureSampleGradProjCompare_Texture3D_grad_x;
Variable TextureSampleGradProjCompare_Texture3D_grad_y;
Variable TextureSampleGradProjCompare_Texture3D_proj;
Variable TextureSampleGradProjCompare_Texture3D_compare;
Function TextureSampleGradProjCompare_Texture3D;
inline constexpr std::array TextureSampleGradProjCompare_Texture3D_args = { &TextureSampleGradProjCompare_Texture3D_texture, &TextureSampleGradProjCompare_Texture3D_sampler, &TextureSampleGradProjCompare_Texture3D_coordinate, &TextureSampleGradProjCompare_Texture3D_grad_x, &TextureSampleGradProjCompare_Texture3D_grad_y, &TextureSampleGradProjCompare_Texture3D_proj, &TextureSampleGradProjCompare_Texture3D_compare };

/// textureSampleGradProjCompare with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32
Variable SampledTextureSampleGradProjCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleGradProjCompare_Texture3D_grad_x;
Variable SampledTextureSampleGradProjCompare_Texture3D_grad_y;
Variable SampledTextureSampleGradProjCompare_Texture3D_proj;
Variable SampledTextureSampleGradProjCompare_Texture3D_compare;
Function SampledTextureSampleGradProjCompare_Texture3D;
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture3D_args = { &SampledTextureSampleGradProjCompare_Texture3D_texture, &SampledTextureSampleGradProjCompare_Texture3D_coordinate, &SampledTextureSampleGradProjCompare_Texture3D_grad_x, &SampledTextureSampleGradProjCompare_Texture3D_grad_y, &SampledTextureSampleGradProjCompare_Texture3D_proj, &SampledTextureSampleGradProjCompare_Texture3D_compare };

/// textureSampleGradProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleGradProjCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompareOffset_Texture1D_coordinate;
Variable TextureSampleGradProjCompareOffset_Texture1D_grad_x;
Variable TextureSampleGradProjCompareOffset_Texture1D_grad_y;
Variable TextureSampleGradProjCompareOffset_Texture1D_proj;
Variable TextureSampleGradProjCompareOffset_Texture1D_compare;
Variable TextureSampleGradProjCompareOffset_Texture1D_offset;
Function TextureSampleGradProjCompareOffset_Texture1D;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture1D_args = { &TextureSampleGradProjCompareOffset_Texture1D_texture, &TextureSampleGradProjCompareOffset_Texture1D_sampler, &TextureSampleGradProjCompareOffset_Texture1D_coordinate, &TextureSampleGradProjCompareOffset_Texture1D_grad_x, &TextureSampleGradProjCompareOffset_Texture1D_grad_y, &TextureSampleGradProjCompareOffset_Texture1D_proj, &TextureSampleGradProjCompareOffset_Texture1D_compare, &TextureSampleGradProjCompareOffset_Texture1D_offset };

/// textureSampleGradProjCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_grad_x;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_grad_y;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_proj;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_compare;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_offset;
Function SampledTextureSampleGradProjCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture1D_args = { &SampledTextureSampleGradProjCompareOffset_Texture1D_texture, &SampledTextureSampleGradProjCompareOffset_Texture1D_coordinate, &SampledTextureSampleGradProjCompareOffset_Texture1D_grad_x, &SampledTextureSampleGradProjCompareOffset_Texture1D_grad_y, &SampledTextureSampleGradProjCompareOffset_Texture1D_proj, &SampledTextureSampleGradProjCompareOffset_Texture1D_compare, &SampledTextureSampleGradProjCompareOffset_Texture1D_offset };

/// textureSampleGradProjCompareOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleGradProjCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompareOffset_Texture2D_coordinate;
Variable TextureSampleGradProjCompareOffset_Texture2D_grad_x;
Variable TextureSampleGradProjCompareOffset_Texture2D_grad_y;
Variable TextureSampleGradProjCompareOffset_Texture2D_proj;
Variable TextureSampleGradProjCompareOffset_Texture2D_compare;
Variable TextureSampleGradProjCompareOffset_Texture2D_offset;
Function TextureSampleGradProjCompareOffset_Texture2D;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture2D_args = { &TextureSampleGradProjCompareOffset_Texture2D_texture, &TextureSampleGradProjCompareOffset_Texture2D_sampler, &TextureSampleGradProjCompareOffset_Texture2D_coordinate, &TextureSampleGradProjCompareOffset_Texture2D_grad_x, &TextureSampleGradProjCompareOffset_Texture2D_grad_y, &TextureSampleGradProjCompareOffset_Texture2D_proj, &TextureSampleGradProjCompareOffset_Texture2D_compare, &TextureSampleGradProjCompareOffset_Texture2D_offset };

/// textureSampleGradProjCompareOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_grad_x;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_grad_y;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_proj;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_compare;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_offset;
Function SampledTextureSampleGradProjCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture2D_args = { &SampledTextureSampleGradProjCompareOffset_Texture2D_texture, &SampledTextureSampleGradProjCompareOffset_Texture2D_coordinate, &SampledTextureSampleGradProjCompareOffset_Texture2D_grad_x, &SampledTextureSampleGradProjCompareOffset_Texture2D_grad_y, &SampledTextureSampleGradProjCompareOffset_Texture2D_proj, &SampledTextureSampleGradProjCompareOffset_Texture2D_compare, &SampledTextureSampleGradProjCompareOffset_Texture2D_offset };

/// textureSampleGradProjCompareOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleGradProjCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompareOffset_Texture3D_coordinate;
Variable TextureSampleGradProjCompareOffset_Texture3D_grad_x;
Variable TextureSampleGradProjCompareOffset_Texture3D_grad_y;
Variable TextureSampleGradProjCompareOffset_Texture3D_proj;
Variable TextureSampleGradProjCompareOffset_Texture3D_compare;
Variable TextureSampleGradProjCompareOffset_Texture3D_offset;
Function TextureSampleGradProjCompareOffset_Texture3D;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture3D_args = { &TextureSampleGradProjCompareOffset_Texture3D_texture, &TextureSampleGradProjCompareOffset_Texture3D_sampler, &TextureSampleGradProjCompareOffset_Texture3D_coordinate, &TextureSampleGradProjCompareOffset_Texture3D_grad_x, &TextureSampleGradProjCompareOffset_Texture3D_grad_y, &TextureSampleGradProjCompareOffset_Texture3D_proj, &TextureSampleGradProjCompareOffset_Texture3D_compare, &TextureSampleGradProjCompareOffset_Texture3D_offset };

/// textureSampleGradProjCompareOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_grad_x;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_grad_y;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_proj;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_compare;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_offset;
Function SampledTextureSampleGradProjCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture3D_args = { &SampledTextureSampleGradProjCompareOffset_Texture3D_texture, &SampledTextureSampleGradProjCompareOffset_Texture3D_coordinate, &SampledTextureSampleGradProjCompareOffset_Texture3D_grad_x, &SampledTextureSampleGradProjCompareOffset_Texture3D_grad_y, &SampledTextureSampleGradProjCompareOffset_Texture3D_proj, &SampledTextureSampleGradProjCompareOffset_Texture3D_compare, &SampledTextureSampleGradProjCompareOffset_Texture3D_offset };

/// textureSampleBias with Texture1D, Sampler, Float32, Float32
Variable TextureSampleBias_Texture1D_texture;
inline constexpr std::array TextureSampleBias_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture1D_sampler;
inline constexpr std::array TextureSampleBias_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture1D_coordinate;
Variable TextureSampleBias_Texture1D_bias;
Function TextureSampleBias_Texture1D;
inline constexpr std::array TextureSampleBias_Texture1D_args = { &TextureSampleBias_Texture1D_texture, &TextureSampleBias_Texture1D_sampler, &TextureSampleBias_Texture1D_coordinate, &TextureSampleBias_Texture1D_bias };

/// textureSampleBias with SampledTexture1D, Float32, Float32
Variable SampledTextureSampleBias_Texture1D_texture;
inline constexpr std::array SampledTextureSampleBias_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBias_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBias_Texture1D_coordinate;
Variable SampledTextureSampleBias_Texture1D_bias;
Function SampledTextureSampleBias_Texture1D;
inline constexpr std::array SampledTextureSampleBias_Texture1D_args = { &SampledTextureSampleBias_Texture1D_texture, &SampledTextureSampleBias_Texture1D_coordinate, &SampledTextureSampleBias_Texture1D_bias };

/// textureSampleBias with Texture2D, Sampler, Float32x2, Float32
Variable TextureSampleBias_Texture2D_texture;
inline constexpr std::array TextureSampleBias_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture2D_sampler;
inline constexpr std::array TextureSampleBias_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture2D_coordinate;
Variable TextureSampleBias_Texture2D_bias;
Function TextureSampleBias_Texture2D;
inline constexpr std::array TextureSampleBias_Texture2D_args = { &TextureSampleBias_Texture2D_texture, &TextureSampleBias_Texture2D_sampler, &TextureSampleBias_Texture2D_coordinate, &TextureSampleBias_Texture2D_bias };

/// textureSampleBias with SampledTexture2D, Float32x2, Float32
Variable SampledTextureSampleBias_Texture2D_texture;
inline constexpr std::array SampledTextureSampleBias_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBias_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBias_Texture2D_coordinate;
Variable SampledTextureSampleBias_Texture2D_bias;
Function SampledTextureSampleBias_Texture2D;
inline constexpr std::array SampledTextureSampleBias_Texture2D_args = { &SampledTextureSampleBias_Texture2D_texture, &SampledTextureSampleBias_Texture2D_coordinate, &SampledTextureSampleBias_Texture2D_bias };

/// textureSampleBias with Texture3D, Sampler, Float32x3, Float32
Variable TextureSampleBias_Texture3D_texture;
inline constexpr std::array TextureSampleBias_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture3D_sampler;
inline constexpr std::array TextureSampleBias_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture3D_coordinate;
Variable TextureSampleBias_Texture3D_bias;
Function TextureSampleBias_Texture3D;
inline constexpr std::array TextureSampleBias_Texture3D_args = { &TextureSampleBias_Texture3D_texture, &TextureSampleBias_Texture3D_sampler, &TextureSampleBias_Texture3D_coordinate, &TextureSampleBias_Texture3D_bias };

/// textureSampleBias with SampledTexture3D, Float32x3, Float32
Variable SampledTextureSampleBias_Texture3D_texture;
inline constexpr std::array SampledTextureSampleBias_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBias_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBias_Texture3D_coordinate;
Variable SampledTextureSampleBias_Texture3D_bias;
Function SampledTextureSampleBias_Texture3D;
inline constexpr std::array SampledTextureSampleBias_Texture3D_args = { &SampledTextureSampleBias_Texture3D_texture, &SampledTextureSampleBias_Texture3D_coordinate, &SampledTextureSampleBias_Texture3D_bias };

/// textureSampleBias with TextureCube, Sampler, Float32x3, Float32
Variable TextureSampleBias_TextureCube_texture;
inline constexpr std::array TextureSampleBias_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_TextureCube_sampler;
inline constexpr std::array TextureSampleBias_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_TextureCube_coordinate;
Variable TextureSampleBias_TextureCube_bias;
Function TextureSampleBias_TextureCube;
inline constexpr std::array TextureSampleBias_TextureCube_args = { &TextureSampleBias_TextureCube_texture, &TextureSampleBias_TextureCube_sampler, &TextureSampleBias_TextureCube_coordinate, &TextureSampleBias_TextureCube_bias };

/// textureSampleBias with SampledTextureCube, Float32x3, Float32
Variable SampledTextureSampleBias_TextureCube_texture;
inline constexpr std::array SampledTextureSampleBias_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBias_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBias_TextureCube_coordinate;
Variable SampledTextureSampleBias_TextureCube_bias;
Function SampledTextureSampleBias_TextureCube;
inline constexpr std::array SampledTextureSampleBias_TextureCube_args = { &SampledTextureSampleBias_TextureCube_texture, &SampledTextureSampleBias_TextureCube_coordinate, &SampledTextureSampleBias_TextureCube_bias };

/// textureSampleBias with Texture1DArray, Sampler, Float32x2, Float32
Variable TextureSampleBias_Texture1DArray_texture;
inline constexpr std::array TextureSampleBias_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture1DArray_sampler;
inline constexpr std::array TextureSampleBias_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture1DArray_coordinate;
Variable TextureSampleBias_Texture1DArray_bias;
Function TextureSampleBias_Texture1DArray;
inline constexpr std::array TextureSampleBias_Texture1DArray_args = { &TextureSampleBias_Texture1DArray_texture, &TextureSampleBias_Texture1DArray_sampler, &TextureSampleBias_Texture1DArray_coordinate, &TextureSampleBias_Texture1DArray_bias };

/// textureSampleBias with SampledTexture1DArray, Float32x2, Float32
Variable SampledTextureSampleBias_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleBias_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBias_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBias_Texture1DArray_coordinate;
Variable SampledTextureSampleBias_Texture1DArray_bias;
Function SampledTextureSampleBias_Texture1DArray;
inline constexpr std::array SampledTextureSampleBias_Texture1DArray_args = { &SampledTextureSampleBias_Texture1DArray_texture, &SampledTextureSampleBias_Texture1DArray_coordinate, &SampledTextureSampleBias_Texture1DArray_bias };

/// textureSampleBias with Texture2DArray, Sampler, Float32x3, Float32
Variable TextureSampleBias_Texture2DArray_texture;
inline constexpr std::array TextureSampleBias_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture2DArray_sampler;
inline constexpr std::array TextureSampleBias_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture2DArray_coordinate;
Variable TextureSampleBias_Texture2DArray_bias;
Function TextureSampleBias_Texture2DArray;
inline constexpr std::array TextureSampleBias_Texture2DArray_args = { &TextureSampleBias_Texture2DArray_texture, &TextureSampleBias_Texture2DArray_sampler, &TextureSampleBias_Texture2DArray_coordinate, &TextureSampleBias_Texture2DArray_bias };

/// textureSampleBias with SampledTexture2DArray, Float32x3, Float32
Variable SampledTextureSampleBias_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleBias_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBias_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBias_Texture2DArray_coordinate;
Variable SampledTextureSampleBias_Texture2DArray_bias;
Function SampledTextureSampleBias_Texture2DArray;
inline constexpr std::array SampledTextureSampleBias_Texture2DArray_args = { &SampledTextureSampleBias_Texture2DArray_texture, &SampledTextureSampleBias_Texture2DArray_coordinate, &SampledTextureSampleBias_Texture2DArray_bias };

/// textureSampleBias with TextureCubeArray, Sampler, Float32x4, Float32
Variable TextureSampleBias_TextureCubeArray_texture;
inline constexpr std::array TextureSampleBias_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_TextureCubeArray_sampler;
inline constexpr std::array TextureSampleBias_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_TextureCubeArray_coordinate;
Variable TextureSampleBias_TextureCubeArray_bias;
Function TextureSampleBias_TextureCubeArray;
inline constexpr std::array TextureSampleBias_TextureCubeArray_args = { &TextureSampleBias_TextureCubeArray_texture, &TextureSampleBias_TextureCubeArray_sampler, &TextureSampleBias_TextureCubeArray_coordinate, &TextureSampleBias_TextureCubeArray_bias };

/// textureSampleBias with SampledTextureCubeArray, Float32x4, Float32
Variable SampledTextureSampleBias_TextureCubeArray_texture;
inline constexpr std::array SampledTextureSampleBias_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBias_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBias_TextureCubeArray_coordinate;
Variable SampledTextureSampleBias_TextureCubeArray_bias;
Function SampledTextureSampleBias_TextureCubeArray;
inline constexpr std::array SampledTextureSampleBias_TextureCubeArray_args = { &SampledTextureSampleBias_TextureCubeArray_texture, &SampledTextureSampleBias_TextureCubeArray_coordinate, &SampledTextureSampleBias_TextureCubeArray_bias };

/// textureSampleBiasOffset with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleBiasOffset_Texture1D_texture;
inline constexpr std::array TextureSampleBiasOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleBiasOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture1D_coordinate;
Variable TextureSampleBiasOffset_Texture1D_bias;
Variable TextureSampleBiasOffset_Texture1D_offset;
Function TextureSampleBiasOffset_Texture1D;
inline constexpr std::array TextureSampleBiasOffset_Texture1D_args = { &TextureSampleBiasOffset_Texture1D_texture, &TextureSampleBiasOffset_Texture1D_sampler, &TextureSampleBiasOffset_Texture1D_coordinate, &TextureSampleBiasOffset_Texture1D_bias, &TextureSampleBiasOffset_Texture1D_offset };

/// textureSampleBiasOffset with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleBiasOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasOffset_Texture1D_coordinate;
Variable SampledTextureSampleBiasOffset_Texture1D_bias;
Variable SampledTextureSampleBiasOffset_Texture1D_offset;
Function SampledTextureSampleBiasOffset_Texture1D;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture1D_args = { &SampledTextureSampleBiasOffset_Texture1D_texture, &SampledTextureSampleBiasOffset_Texture1D_coordinate, &SampledTextureSampleBiasOffset_Texture1D_bias, &SampledTextureSampleBiasOffset_Texture1D_offset };

/// textureSampleBiasOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleBiasOffset_Texture2D_texture;
inline constexpr std::array TextureSampleBiasOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleBiasOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture2D_coordinate;
Variable TextureSampleBiasOffset_Texture2D_bias;
Variable TextureSampleBiasOffset_Texture2D_offset;
Function TextureSampleBiasOffset_Texture2D;
inline constexpr std::array TextureSampleBiasOffset_Texture2D_args = { &TextureSampleBiasOffset_Texture2D_texture, &TextureSampleBiasOffset_Texture2D_sampler, &TextureSampleBiasOffset_Texture2D_coordinate, &TextureSampleBiasOffset_Texture2D_bias, &TextureSampleBiasOffset_Texture2D_offset };

/// textureSampleBiasOffset with SampledTexture2D, Float32x2, Float32, Float32x2
Variable SampledTextureSampleBiasOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasOffset_Texture2D_coordinate;
Variable SampledTextureSampleBiasOffset_Texture2D_bias;
Variable SampledTextureSampleBiasOffset_Texture2D_offset;
Function SampledTextureSampleBiasOffset_Texture2D;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture2D_args = { &SampledTextureSampleBiasOffset_Texture2D_texture, &SampledTextureSampleBiasOffset_Texture2D_coordinate, &SampledTextureSampleBiasOffset_Texture2D_bias, &SampledTextureSampleBiasOffset_Texture2D_offset };

/// textureSampleBiasOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleBiasOffset_Texture3D_texture;
inline constexpr std::array TextureSampleBiasOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleBiasOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture3D_coordinate;
Variable TextureSampleBiasOffset_Texture3D_bias;
Variable TextureSampleBiasOffset_Texture3D_offset;
Function TextureSampleBiasOffset_Texture3D;
inline constexpr std::array TextureSampleBiasOffset_Texture3D_args = { &TextureSampleBiasOffset_Texture3D_texture, &TextureSampleBiasOffset_Texture3D_sampler, &TextureSampleBiasOffset_Texture3D_coordinate, &TextureSampleBiasOffset_Texture3D_bias, &TextureSampleBiasOffset_Texture3D_offset };

/// textureSampleBiasOffset with SampledTexture3D, Float32x3, Float32, Float32x3
Variable SampledTextureSampleBiasOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasOffset_Texture3D_coordinate;
Variable SampledTextureSampleBiasOffset_Texture3D_bias;
Variable SampledTextureSampleBiasOffset_Texture3D_offset;
Function SampledTextureSampleBiasOffset_Texture3D;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture3D_args = { &SampledTextureSampleBiasOffset_Texture3D_texture, &SampledTextureSampleBiasOffset_Texture3D_coordinate, &SampledTextureSampleBiasOffset_Texture3D_bias, &SampledTextureSampleBiasOffset_Texture3D_offset };

/// textureSampleBiasOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleBiasOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleBiasOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleBiasOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture1DArray_coordinate;
Variable TextureSampleBiasOffset_Texture1DArray_bias;
Variable TextureSampleBiasOffset_Texture1DArray_offset;
Function TextureSampleBiasOffset_Texture1DArray;
inline constexpr std::array TextureSampleBiasOffset_Texture1DArray_args = { &TextureSampleBiasOffset_Texture1DArray_texture, &TextureSampleBiasOffset_Texture1DArray_sampler, &TextureSampleBiasOffset_Texture1DArray_coordinate, &TextureSampleBiasOffset_Texture1DArray_bias, &TextureSampleBiasOffset_Texture1DArray_offset };

/// textureSampleBiasOffset with SampledTexture1DArray, Float32x2, Float32, Float32x2
Variable SampledTextureSampleBiasOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleBiasOffset_Texture1DArray_bias;
Variable SampledTextureSampleBiasOffset_Texture1DArray_offset;
Function SampledTextureSampleBiasOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture1DArray_args = { &SampledTextureSampleBiasOffset_Texture1DArray_texture, &SampledTextureSampleBiasOffset_Texture1DArray_coordinate, &SampledTextureSampleBiasOffset_Texture1DArray_bias, &SampledTextureSampleBiasOffset_Texture1DArray_offset };

/// textureSampleBiasOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleBiasOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleBiasOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleBiasOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture2DArray_coordinate;
Variable TextureSampleBiasOffset_Texture2DArray_bias;
Variable TextureSampleBiasOffset_Texture2DArray_offset;
Function TextureSampleBiasOffset_Texture2DArray;
inline constexpr std::array TextureSampleBiasOffset_Texture2DArray_args = { &TextureSampleBiasOffset_Texture2DArray_texture, &TextureSampleBiasOffset_Texture2DArray_sampler, &TextureSampleBiasOffset_Texture2DArray_coordinate, &TextureSampleBiasOffset_Texture2DArray_bias, &TextureSampleBiasOffset_Texture2DArray_offset };

/// textureSampleBiasOffset with SampledTexture2DArray, Float32x3, Float32, Float32x3
Variable SampledTextureSampleBiasOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleBiasOffset_Texture2DArray_bias;
Variable SampledTextureSampleBiasOffset_Texture2DArray_offset;
Function SampledTextureSampleBiasOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture2DArray_args = { &SampledTextureSampleBiasOffset_Texture2DArray_texture, &SampledTextureSampleBiasOffset_Texture2DArray_coordinate, &SampledTextureSampleBiasOffset_Texture2DArray_bias, &SampledTextureSampleBiasOffset_Texture2DArray_offset };

/// textureSampleBiasProj with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleBiasProj_Texture1D_texture;
inline constexpr std::array TextureSampleBiasProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProj_Texture1D_sampler;
inline constexpr std::array TextureSampleBiasProj_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProj_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProj_Texture1D_coordinate;
Variable TextureSampleBiasProj_Texture1D_bias;
Variable TextureSampleBiasProj_Texture1D_proj;
Function TextureSampleBiasProj_Texture1D;
inline constexpr std::array TextureSampleBiasProj_Texture1D_args = { &TextureSampleBiasProj_Texture1D_texture, &TextureSampleBiasProj_Texture1D_sampler, &TextureSampleBiasProj_Texture1D_coordinate, &TextureSampleBiasProj_Texture1D_bias, &TextureSampleBiasProj_Texture1D_proj };

/// textureSampleBiasProj with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleBiasProj_Texture1D_texture;
inline constexpr std::array SampledTextureSampleBiasProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProj_Texture1D_coordinate;
Variable SampledTextureSampleBiasProj_Texture1D_bias;
Variable SampledTextureSampleBiasProj_Texture1D_proj;
Function SampledTextureSampleBiasProj_Texture1D;
inline constexpr std::array SampledTextureSampleBiasProj_Texture1D_args = { &SampledTextureSampleBiasProj_Texture1D_texture, &SampledTextureSampleBiasProj_Texture1D_coordinate, &SampledTextureSampleBiasProj_Texture1D_bias, &SampledTextureSampleBiasProj_Texture1D_proj };

/// textureSampleBiasProj with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleBiasProj_Texture2D_texture;
inline constexpr std::array TextureSampleBiasProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProj_Texture2D_sampler;
inline constexpr std::array TextureSampleBiasProj_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProj_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProj_Texture2D_coordinate;
Variable TextureSampleBiasProj_Texture2D_bias;
Variable TextureSampleBiasProj_Texture2D_proj;
Function TextureSampleBiasProj_Texture2D;
inline constexpr std::array TextureSampleBiasProj_Texture2D_args = { &TextureSampleBiasProj_Texture2D_texture, &TextureSampleBiasProj_Texture2D_sampler, &TextureSampleBiasProj_Texture2D_coordinate, &TextureSampleBiasProj_Texture2D_bias, &TextureSampleBiasProj_Texture2D_proj };

/// textureSampleBiasProj with SampledTexture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleBiasProj_Texture2D_texture;
inline constexpr std::array SampledTextureSampleBiasProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProj_Texture2D_coordinate;
Variable SampledTextureSampleBiasProj_Texture2D_bias;
Variable SampledTextureSampleBiasProj_Texture2D_proj;
Function SampledTextureSampleBiasProj_Texture2D;
inline constexpr std::array SampledTextureSampleBiasProj_Texture2D_args = { &SampledTextureSampleBiasProj_Texture2D_texture, &SampledTextureSampleBiasProj_Texture2D_coordinate, &SampledTextureSampleBiasProj_Texture2D_bias, &SampledTextureSampleBiasProj_Texture2D_proj };

/// textureSampleBiasProj with Texture3D, Sampler, Float32x3, Float32, Float32
Variable TextureSampleBiasProj_Texture3D_texture;
inline constexpr std::array TextureSampleBiasProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProj_Texture3D_sampler;
inline constexpr std::array TextureSampleBiasProj_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProj_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProj_Texture3D_coordinate;
Variable TextureSampleBiasProj_Texture3D_bias;
Variable TextureSampleBiasProj_Texture3D_proj;
Function TextureSampleBiasProj_Texture3D;
inline constexpr std::array TextureSampleBiasProj_Texture3D_args = { &TextureSampleBiasProj_Texture3D_texture, &TextureSampleBiasProj_Texture3D_sampler, &TextureSampleBiasProj_Texture3D_coordinate, &TextureSampleBiasProj_Texture3D_bias, &TextureSampleBiasProj_Texture3D_proj };

/// textureSampleBiasProj with SampledTexture3D, Float32x3, Float32, Float32
Variable SampledTextureSampleBiasProj_Texture3D_texture;
inline constexpr std::array SampledTextureSampleBiasProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProj_Texture3D_coordinate;
Variable SampledTextureSampleBiasProj_Texture3D_bias;
Variable SampledTextureSampleBiasProj_Texture3D_proj;
Function SampledTextureSampleBiasProj_Texture3D;
inline constexpr std::array SampledTextureSampleBiasProj_Texture3D_args = { &SampledTextureSampleBiasProj_Texture3D_texture, &SampledTextureSampleBiasProj_Texture3D_coordinate, &SampledTextureSampleBiasProj_Texture3D_bias, &SampledTextureSampleBiasProj_Texture3D_proj };

/// textureSampleBiasProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleBiasProjOffset_Texture1D_texture;
inline constexpr std::array TextureSampleBiasProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleBiasProjOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjOffset_Texture1D_coordinate;
Variable TextureSampleBiasProjOffset_Texture1D_bias;
Variable TextureSampleBiasProjOffset_Texture1D_proj;
Variable TextureSampleBiasProjOffset_Texture1D_offset;
Function TextureSampleBiasProjOffset_Texture1D;
inline constexpr std::array TextureSampleBiasProjOffset_Texture1D_args = { &TextureSampleBiasProjOffset_Texture1D_texture, &TextureSampleBiasProjOffset_Texture1D_sampler, &TextureSampleBiasProjOffset_Texture1D_coordinate, &TextureSampleBiasProjOffset_Texture1D_bias, &TextureSampleBiasProjOffset_Texture1D_proj, &TextureSampleBiasProjOffset_Texture1D_offset };

/// textureSampleBiasProjOffset with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleBiasProjOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProjOffset_Texture1D_coordinate;
Variable SampledTextureSampleBiasProjOffset_Texture1D_bias;
Variable SampledTextureSampleBiasProjOffset_Texture1D_proj;
Variable SampledTextureSampleBiasProjOffset_Texture1D_offset;
Function SampledTextureSampleBiasProjOffset_Texture1D;
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture1D_args = { &SampledTextureSampleBiasProjOffset_Texture1D_texture, &SampledTextureSampleBiasProjOffset_Texture1D_coordinate, &SampledTextureSampleBiasProjOffset_Texture1D_bias, &SampledTextureSampleBiasProjOffset_Texture1D_proj, &SampledTextureSampleBiasProjOffset_Texture1D_offset };

/// textureSampleBiasProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleBiasProjOffset_Texture2D_texture;
inline constexpr std::array TextureSampleBiasProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleBiasProjOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjOffset_Texture2D_coordinate;
Variable TextureSampleBiasProjOffset_Texture2D_bias;
Variable TextureSampleBiasProjOffset_Texture2D_proj;
Variable TextureSampleBiasProjOffset_Texture2D_offset;
Function TextureSampleBiasProjOffset_Texture2D;
inline constexpr std::array TextureSampleBiasProjOffset_Texture2D_args = { &TextureSampleBiasProjOffset_Texture2D_texture, &TextureSampleBiasProjOffset_Texture2D_sampler, &TextureSampleBiasProjOffset_Texture2D_coordinate, &TextureSampleBiasProjOffset_Texture2D_bias, &TextureSampleBiasProjOffset_Texture2D_proj, &TextureSampleBiasProjOffset_Texture2D_offset };

/// textureSampleBiasProjOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleBiasProjOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProjOffset_Texture2D_coordinate;
Variable SampledTextureSampleBiasProjOffset_Texture2D_bias;
Variable SampledTextureSampleBiasProjOffset_Texture2D_proj;
Variable SampledTextureSampleBiasProjOffset_Texture2D_offset;
Function SampledTextureSampleBiasProjOffset_Texture2D;
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture2D_args = { &SampledTextureSampleBiasProjOffset_Texture2D_texture, &SampledTextureSampleBiasProjOffset_Texture2D_coordinate, &SampledTextureSampleBiasProjOffset_Texture2D_bias, &SampledTextureSampleBiasProjOffset_Texture2D_proj, &SampledTextureSampleBiasProjOffset_Texture2D_offset };

/// textureSampleBiasProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleBiasProjOffset_Texture3D_texture;
inline constexpr std::array TextureSampleBiasProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleBiasProjOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjOffset_Texture3D_coordinate;
Variable TextureSampleBiasProjOffset_Texture3D_bias;
Variable TextureSampleBiasProjOffset_Texture3D_proj;
Variable TextureSampleBiasProjOffset_Texture3D_offset;
Function TextureSampleBiasProjOffset_Texture3D;
inline constexpr std::array TextureSampleBiasProjOffset_Texture3D_args = { &TextureSampleBiasProjOffset_Texture3D_texture, &TextureSampleBiasProjOffset_Texture3D_sampler, &TextureSampleBiasProjOffset_Texture3D_coordinate, &TextureSampleBiasProjOffset_Texture3D_bias, &TextureSampleBiasProjOffset_Texture3D_proj, &TextureSampleBiasProjOffset_Texture3D_offset };

/// textureSampleBiasProjOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleBiasProjOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProjOffset_Texture3D_coordinate;
Variable SampledTextureSampleBiasProjOffset_Texture3D_bias;
Variable SampledTextureSampleBiasProjOffset_Texture3D_proj;
Variable SampledTextureSampleBiasProjOffset_Texture3D_offset;
Function SampledTextureSampleBiasProjOffset_Texture3D;
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture3D_args = { &SampledTextureSampleBiasProjOffset_Texture3D_texture, &SampledTextureSampleBiasProjOffset_Texture3D_coordinate, &SampledTextureSampleBiasProjOffset_Texture3D_bias, &SampledTextureSampleBiasProjOffset_Texture3D_proj, &SampledTextureSampleBiasProjOffset_Texture3D_offset };

/// textureSampleBiasCompare with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleBiasCompare_Texture1D_texture;
inline constexpr std::array TextureSampleBiasCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleBiasCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture1D_coordinate;
Variable TextureSampleBiasCompare_Texture1D_bias;
Variable TextureSampleBiasCompare_Texture1D_compare;
Function TextureSampleBiasCompare_Texture1D;
inline constexpr std::array TextureSampleBiasCompare_Texture1D_args = { &TextureSampleBiasCompare_Texture1D_texture, &TextureSampleBiasCompare_Texture1D_sampler, &TextureSampleBiasCompare_Texture1D_coordinate, &TextureSampleBiasCompare_Texture1D_bias, &TextureSampleBiasCompare_Texture1D_compare };

/// textureSampleBiasCompare with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleBiasCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompare_Texture1D_coordinate;
Variable SampledTextureSampleBiasCompare_Texture1D_bias;
Variable SampledTextureSampleBiasCompare_Texture1D_compare;
Function SampledTextureSampleBiasCompare_Texture1D;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture1D_args = { &SampledTextureSampleBiasCompare_Texture1D_texture, &SampledTextureSampleBiasCompare_Texture1D_coordinate, &SampledTextureSampleBiasCompare_Texture1D_bias, &SampledTextureSampleBiasCompare_Texture1D_compare };

/// textureSampleBiasCompare with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleBiasCompare_Texture2D_texture;
inline constexpr std::array TextureSampleBiasCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleBiasCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture2D_coordinate;
Variable TextureSampleBiasCompare_Texture2D_bias;
Variable TextureSampleBiasCompare_Texture2D_compare;
Function TextureSampleBiasCompare_Texture2D;
inline constexpr std::array TextureSampleBiasCompare_Texture2D_args = { &TextureSampleBiasCompare_Texture2D_texture, &TextureSampleBiasCompare_Texture2D_sampler, &TextureSampleBiasCompare_Texture2D_coordinate, &TextureSampleBiasCompare_Texture2D_bias, &TextureSampleBiasCompare_Texture2D_compare };

/// textureSampleBiasCompare with SampledTexture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleBiasCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompare_Texture2D_coordinate;
Variable SampledTextureSampleBiasCompare_Texture2D_bias;
Variable SampledTextureSampleBiasCompare_Texture2D_compare;
Function SampledTextureSampleBiasCompare_Texture2D;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture2D_args = { &SampledTextureSampleBiasCompare_Texture2D_texture, &SampledTextureSampleBiasCompare_Texture2D_coordinate, &SampledTextureSampleBiasCompare_Texture2D_bias, &SampledTextureSampleBiasCompare_Texture2D_compare };

/// textureSampleBiasCompare with Texture3D, Sampler, Float32x3, Float32, Float32
Variable TextureSampleBiasCompare_Texture3D_texture;
inline constexpr std::array TextureSampleBiasCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleBiasCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture3D_coordinate;
Variable TextureSampleBiasCompare_Texture3D_bias;
Variable TextureSampleBiasCompare_Texture3D_compare;
Function TextureSampleBiasCompare_Texture3D;
inline constexpr std::array TextureSampleBiasCompare_Texture3D_args = { &TextureSampleBiasCompare_Texture3D_texture, &TextureSampleBiasCompare_Texture3D_sampler, &TextureSampleBiasCompare_Texture3D_coordinate, &TextureSampleBiasCompare_Texture3D_bias, &TextureSampleBiasCompare_Texture3D_compare };

/// textureSampleBiasCompare with SampledTexture3D, Float32x3, Float32, Float32
Variable SampledTextureSampleBiasCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompare_Texture3D_coordinate;
Variable SampledTextureSampleBiasCompare_Texture3D_bias;
Variable SampledTextureSampleBiasCompare_Texture3D_compare;
Function SampledTextureSampleBiasCompare_Texture3D;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture3D_args = { &SampledTextureSampleBiasCompare_Texture3D_texture, &SampledTextureSampleBiasCompare_Texture3D_coordinate, &SampledTextureSampleBiasCompare_Texture3D_bias, &SampledTextureSampleBiasCompare_Texture3D_compare };

/// textureSampleBiasCompare with Texture1DArray, Sampler, Float32x2, Float32, Float32
Variable TextureSampleBiasCompare_Texture1DArray_texture;
inline constexpr std::array TextureSampleBiasCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture1DArray_sampler;
inline constexpr std::array TextureSampleBiasCompare_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture1DArray_coordinate;
Variable TextureSampleBiasCompare_Texture1DArray_bias;
Variable TextureSampleBiasCompare_Texture1DArray_compare;
Function TextureSampleBiasCompare_Texture1DArray;
inline constexpr std::array TextureSampleBiasCompare_Texture1DArray_args = { &TextureSampleBiasCompare_Texture1DArray_texture, &TextureSampleBiasCompare_Texture1DArray_sampler, &TextureSampleBiasCompare_Texture1DArray_coordinate, &TextureSampleBiasCompare_Texture1DArray_bias, &TextureSampleBiasCompare_Texture1DArray_compare };

/// textureSampleBiasCompare with SampledTexture1DArray, Float32x2, Float32, Float32
Variable SampledTextureSampleBiasCompare_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleBiasCompare_Texture1DArray_bias;
Variable SampledTextureSampleBiasCompare_Texture1DArray_compare;
Function SampledTextureSampleBiasCompare_Texture1DArray;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture1DArray_args = { &SampledTextureSampleBiasCompare_Texture1DArray_texture, &SampledTextureSampleBiasCompare_Texture1DArray_coordinate, &SampledTextureSampleBiasCompare_Texture1DArray_bias, &SampledTextureSampleBiasCompare_Texture1DArray_compare };

/// textureSampleBiasCompare with Texture2DArray, Sampler, Float32x3, Float32, Float32
Variable TextureSampleBiasCompare_Texture2DArray_texture;
inline constexpr std::array TextureSampleBiasCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture2DArray_sampler;
inline constexpr std::array TextureSampleBiasCompare_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture2DArray_coordinate;
Variable TextureSampleBiasCompare_Texture2DArray_bias;
Variable TextureSampleBiasCompare_Texture2DArray_compare;
Function TextureSampleBiasCompare_Texture2DArray;
inline constexpr std::array TextureSampleBiasCompare_Texture2DArray_args = { &TextureSampleBiasCompare_Texture2DArray_texture, &TextureSampleBiasCompare_Texture2DArray_sampler, &TextureSampleBiasCompare_Texture2DArray_coordinate, &TextureSampleBiasCompare_Texture2DArray_bias, &TextureSampleBiasCompare_Texture2DArray_compare };

/// textureSampleBiasCompare with SampledTexture2DArray, Float32x3, Float32, Float32
Variable SampledTextureSampleBiasCompare_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleBiasCompare_Texture2DArray_bias;
Variable SampledTextureSampleBiasCompare_Texture2DArray_compare;
Function SampledTextureSampleBiasCompare_Texture2DArray;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture2DArray_args = { &SampledTextureSampleBiasCompare_Texture2DArray_texture, &SampledTextureSampleBiasCompare_Texture2DArray_coordinate, &SampledTextureSampleBiasCompare_Texture2DArray_bias, &SampledTextureSampleBiasCompare_Texture2DArray_compare };

/// textureSampleBiasCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleBiasCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture1D_coordinate;
Variable TextureSampleBiasCompareOffset_Texture1D_bias;
Variable TextureSampleBiasCompareOffset_Texture1D_compare;
Variable TextureSampleBiasCompareOffset_Texture1D_offset;
Function TextureSampleBiasCompareOffset_Texture1D;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1D_args = { &TextureSampleBiasCompareOffset_Texture1D_texture, &TextureSampleBiasCompareOffset_Texture1D_sampler, &TextureSampleBiasCompareOffset_Texture1D_coordinate, &TextureSampleBiasCompareOffset_Texture1D_bias, &TextureSampleBiasCompareOffset_Texture1D_compare, &TextureSampleBiasCompareOffset_Texture1D_offset };

/// textureSampleBiasCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleBiasCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleBiasCompareOffset_Texture1D_bias;
Variable SampledTextureSampleBiasCompareOffset_Texture1D_compare;
Variable SampledTextureSampleBiasCompareOffset_Texture1D_offset;
Function SampledTextureSampleBiasCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture1D_args = { &SampledTextureSampleBiasCompareOffset_Texture1D_texture, &SampledTextureSampleBiasCompareOffset_Texture1D_coordinate, &SampledTextureSampleBiasCompareOffset_Texture1D_bias, &SampledTextureSampleBiasCompareOffset_Texture1D_compare, &SampledTextureSampleBiasCompareOffset_Texture1D_offset };

/// textureSampleBiasCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleBiasCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture2D_coordinate;
Variable TextureSampleBiasCompareOffset_Texture2D_bias;
Variable TextureSampleBiasCompareOffset_Texture2D_compare;
Variable TextureSampleBiasCompareOffset_Texture2D_offset;
Function TextureSampleBiasCompareOffset_Texture2D;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2D_args = { &TextureSampleBiasCompareOffset_Texture2D_texture, &TextureSampleBiasCompareOffset_Texture2D_sampler, &TextureSampleBiasCompareOffset_Texture2D_coordinate, &TextureSampleBiasCompareOffset_Texture2D_bias, &TextureSampleBiasCompareOffset_Texture2D_compare, &TextureSampleBiasCompareOffset_Texture2D_offset };

/// textureSampleBiasCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleBiasCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleBiasCompareOffset_Texture2D_bias;
Variable SampledTextureSampleBiasCompareOffset_Texture2D_compare;
Variable SampledTextureSampleBiasCompareOffset_Texture2D_offset;
Function SampledTextureSampleBiasCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture2D_args = { &SampledTextureSampleBiasCompareOffset_Texture2D_texture, &SampledTextureSampleBiasCompareOffset_Texture2D_coordinate, &SampledTextureSampleBiasCompareOffset_Texture2D_bias, &SampledTextureSampleBiasCompareOffset_Texture2D_compare, &SampledTextureSampleBiasCompareOffset_Texture2D_offset };

/// textureSampleBiasCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleBiasCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture3D_coordinate;
Variable TextureSampleBiasCompareOffset_Texture3D_bias;
Variable TextureSampleBiasCompareOffset_Texture3D_compare;
Variable TextureSampleBiasCompareOffset_Texture3D_offset;
Function TextureSampleBiasCompareOffset_Texture3D;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture3D_args = { &TextureSampleBiasCompareOffset_Texture3D_texture, &TextureSampleBiasCompareOffset_Texture3D_sampler, &TextureSampleBiasCompareOffset_Texture3D_coordinate, &TextureSampleBiasCompareOffset_Texture3D_bias, &TextureSampleBiasCompareOffset_Texture3D_compare, &TextureSampleBiasCompareOffset_Texture3D_offset };

/// textureSampleBiasCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleBiasCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleBiasCompareOffset_Texture3D_bias;
Variable SampledTextureSampleBiasCompareOffset_Texture3D_compare;
Variable SampledTextureSampleBiasCompareOffset_Texture3D_offset;
Function SampledTextureSampleBiasCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture3D_args = { &SampledTextureSampleBiasCompareOffset_Texture3D_texture, &SampledTextureSampleBiasCompareOffset_Texture3D_coordinate, &SampledTextureSampleBiasCompareOffset_Texture3D_bias, &SampledTextureSampleBiasCompareOffset_Texture3D_compare, &SampledTextureSampleBiasCompareOffset_Texture3D_offset };

void SetupIntrinsics12()
{
    /// textureSampleLodProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32, Float32
    TextureSampleLodProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleLodProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodProjCompare_Texture3D_texture.type.modifiers = TextureSampleLodProjCompare_Texture3D_texture_modifiers;
    TextureSampleLodProjCompare_Texture3D_texture.type.modifierValues = TextureSampleLodProjCompare_Texture3D_texture_modifierValues;
    TextureSampleLodProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompare_Texture3D_sampler.type.modifiers = TextureSampleLodProjCompare_Texture3D_sampler_modifiers;
    TextureSampleLodProjCompare_Texture3D_sampler.type.modifierValues = TextureSampleLodProjCompare_Texture3D_sampler_modifierValues;
    TextureSampleLodProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjCompare_Texture3D_lod.name = "lod"_c;
    TextureSampleLodProjCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleLodProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleLodProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison"_c;
    TextureSampleLodProjCompare_Texture3D.name = TextureSampleLodProjCompare_Texture3D_name;
    TextureSampleLodProjCompare_Texture3D.backendIndex = 2473;
    TextureSampleLodProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodProjCompare_Texture3D.parameters = TextureSampleLodProjCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D)->signature = "textureSampleLodProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D)->name = "textureSampleLodProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D)->nameWithVarNames = "textureSampleLodProjCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompare with SampledTexture3D, Float32x3, Float32, Float32, Float32
    SampledTextureSampleLodProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLodProjCompare_Texture3D_texture.type.modifiers = SampledTextureSampleLodProjCompare_Texture3D_texture_modifiers;
    SampledTextureSampleLodProjCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleLodProjCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleLodProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjCompare_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison"_c;
    SampledTextureSampleLodProjCompare_Texture3D.name = SampledTextureSampleLodProjCompare_Texture3D_name;
    SampledTextureSampleLodProjCompare_Texture3D.backendIndex = 2474;
    SampledTextureSampleLodProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D.parameters = SampledTextureSampleLodProjCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D)->signature = "textureSampleLodProjCompare(uniform *textureSampled3D,f32x3,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D)->name = "textureSampleLodProjCompare(uniform *textureSampled3D,f32x3,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D)->nameWithVarNames = "textureSampleLodProjCompare(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
    TextureSampleLodProjCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleLodProjCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodProjCompareOffset_Texture1D_texture.type.modifiers = TextureSampleLodProjCompareOffset_Texture1D_texture_modifiers;
    TextureSampleLodProjCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleLodProjCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleLodProjCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleLodProjCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleLodProjCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleLodProjCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleLodProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D_lod.name = "lod"_c;
    TextureSampleLodProjCompareOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleLodProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleLodProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleLodProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodProjCompareOffset_Texture1D.name = TextureSampleLodProjCompareOffset_Texture1D_name;
    TextureSampleLodProjCompareOffset_Texture1D.backendIndex = 2475;
    TextureSampleLodProjCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D.parameters = TextureSampleLodProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D)->signature = "textureSampleLodProjCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D)->name = "textureSampleLodProjCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D)->nameWithVarNames = "textureSampleLodProjCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32, proj : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleLodProjCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleLodProjCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleLodProjCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleLodProjCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleLodProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D.name = SampledTextureSampleLodProjCompareOffset_Texture1D_name;
    SampledTextureSampleLodProjCompareOffset_Texture1D.backendIndex = 2476;
    SampledTextureSampleLodProjCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D.parameters = SampledTextureSampleLodProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D)->signature = "textureSampleLodProjCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D)->name = "textureSampleLodProjCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D)->nameWithVarNames = "textureSampleLodProjCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, lod : f32, proj : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32, Float32x2
    TextureSampleLodProjCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleLodProjCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodProjCompareOffset_Texture2D_texture.type.modifiers = TextureSampleLodProjCompareOffset_Texture2D_texture_modifiers;
    TextureSampleLodProjCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleLodProjCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleLodProjCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleLodProjCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleLodProjCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleLodProjCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleLodProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjCompareOffset_Texture2D_lod.name = "lod"_c;
    TextureSampleLodProjCompareOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleLodProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleLodProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleLodProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodProjCompareOffset_Texture2D.name = TextureSampleLodProjCompareOffset_Texture2D_name;
    TextureSampleLodProjCompareOffset_Texture2D.backendIndex = 2477;
    TextureSampleLodProjCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture2D.parameters = TextureSampleLodProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D)->signature = "textureSampleLodProjCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32,f32x2) f32"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D)->name = "textureSampleLodProjCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D)->nameWithVarNames = "textureSampleLodProjCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32, proj : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32, Float32x2
    SampledTextureSampleLodProjCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleLodProjCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleLodProjCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleLodProjCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleLodProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D.name = SampledTextureSampleLodProjCompareOffset_Texture2D_name;
    SampledTextureSampleLodProjCompareOffset_Texture2D.backendIndex = 2478;
    SampledTextureSampleLodProjCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D.parameters = SampledTextureSampleLodProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D)->signature = "textureSampleLodProjCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32,f32x2) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D)->name = "textureSampleLodProjCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D)->nameWithVarNames = "textureSampleLodProjCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32, proj : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32, Float32x3
    TextureSampleLodProjCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleLodProjCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodProjCompareOffset_Texture3D_texture.type.modifiers = TextureSampleLodProjCompareOffset_Texture3D_texture_modifiers;
    TextureSampleLodProjCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleLodProjCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleLodProjCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleLodProjCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleLodProjCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleLodProjCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleLodProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjCompareOffset_Texture3D_lod.name = "lod"_c;
    TextureSampleLodProjCompareOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleLodProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleLodProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleLodProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodProjCompareOffset_Texture3D.name = TextureSampleLodProjCompareOffset_Texture3D_name;
    TextureSampleLodProjCompareOffset_Texture3D.backendIndex = 2479;
    TextureSampleLodProjCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture3D.parameters = TextureSampleLodProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D)->signature = "textureSampleLodProjCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32,f32x3) f32"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D)->name = "textureSampleLodProjCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D)->nameWithVarNames = "textureSampleLodProjCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32, proj : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32, Float32x3
    SampledTextureSampleLodProjCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleLodProjCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleLodProjCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleLodProjCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleLodProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D.name = SampledTextureSampleLodProjCompareOffset_Texture3D_name;
    SampledTextureSampleLodProjCompareOffset_Texture3D.backendIndex = 2480;
    SampledTextureSampleLodProjCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D.parameters = SampledTextureSampleLodProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D)->signature = "textureSampleLodProjCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32,f32x3) f32"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D)->name = "textureSampleLodProjCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D)->nameWithVarNames = "textureSampleLodProjCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32, proj : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGrad with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleGrad_Texture1D_texture.name = "texture"_c;
    TextureSampleGrad_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGrad_Texture1D_texture.type.modifiers = TextureSampleGrad_Texture1D_texture_modifiers;
    TextureSampleGrad_Texture1D_texture.type.modifierValues = TextureSampleGrad_Texture1D_texture_modifierValues;
    TextureSampleGrad_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture1D_sampler.type.modifiers = TextureSampleGrad_Texture1D_sampler_modifiers;
    TextureSampleGrad_Texture1D_sampler.type.modifierValues = TextureSampleGrad_Texture1D_sampler_modifierValues;
    TextureSampleGrad_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGrad_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGrad_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGrad_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGrad_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGrad_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    TextureSampleGrad_Texture1D.name = TextureSampleGrad_Texture1D_name;
    TextureSampleGrad_Texture1D.backendIndex = 2481;
    TextureSampleGrad_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_Texture1D.parameters = TextureSampleGrad_Texture1D_args;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1D)->signature = "textureSampleGrad(uniform *texture1D,uniform *sampler,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture1D)->name = "textureSampleGrad(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture1D)->nameWithVarNames = "textureSampleGrad(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleGrad_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGrad_Texture1D_texture.type.modifiers = SampledTextureSampleGrad_Texture1D_texture_modifiers;
    SampledTextureSampleGrad_Texture1D_texture.type.modifierValues = SampledTextureSampleGrad_Texture1D_texture_modifierValues;
    SampledTextureSampleGrad_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGrad_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGrad_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGrad_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    SampledTextureSampleGrad_Texture1D.name = SampledTextureSampleGrad_Texture1D_name;
    SampledTextureSampleGrad_Texture1D.backendIndex = 2482;
    SampledTextureSampleGrad_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_Texture1D.parameters = SampledTextureSampleGrad_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D)->signature = "textureSampleGrad(uniform *textureSampled1D,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D)->name = "textureSampleGrad(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture2D, Sampler, Float32x2, Float32x2, Float32x2
    TextureSampleGrad_Texture2D_texture.name = "texture"_c;
    TextureSampleGrad_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGrad_Texture2D_texture.type.modifiers = TextureSampleGrad_Texture2D_texture_modifiers;
    TextureSampleGrad_Texture2D_texture.type.modifierValues = TextureSampleGrad_Texture2D_texture_modifierValues;
    TextureSampleGrad_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture2D_sampler.type.modifiers = TextureSampleGrad_Texture2D_sampler_modifiers;
    TextureSampleGrad_Texture2D_sampler.type.modifierValues = TextureSampleGrad_Texture2D_sampler_modifierValues;
    TextureSampleGrad_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGrad_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGrad_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    TextureSampleGrad_Texture2D.name = TextureSampleGrad_Texture2D_name;
    TextureSampleGrad_Texture2D.backendIndex = 2483;
    TextureSampleGrad_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_Texture2D.parameters = TextureSampleGrad_Texture2D_args;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2D)->signature = "textureSampleGrad(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture2D)->name = "textureSampleGrad(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture2D)->nameWithVarNames = "textureSampleGrad(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with SampledTexture2D, Float32x2, Float32x2, Float32x2
    SampledTextureSampleGrad_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGrad_Texture2D_texture.type.modifiers = SampledTextureSampleGrad_Texture2D_texture_modifiers;
    SampledTextureSampleGrad_Texture2D_texture.type.modifierValues = SampledTextureSampleGrad_Texture2D_texture_modifierValues;
    SampledTextureSampleGrad_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    SampledTextureSampleGrad_Texture2D.name = SampledTextureSampleGrad_Texture2D_name;
    SampledTextureSampleGrad_Texture2D.backendIndex = 2484;
    SampledTextureSampleGrad_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_Texture2D.parameters = SampledTextureSampleGrad_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D)->signature = "textureSampleGrad(uniform *textureSampled2D,f32x2,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D)->name = "textureSampleGrad(uniform *textureSampled2D,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture3D, Sampler, Float32x3, Float32x3, Float32x3
    TextureSampleGrad_Texture3D_texture.name = "texture"_c;
    TextureSampleGrad_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGrad_Texture3D_texture.type.modifiers = TextureSampleGrad_Texture3D_texture_modifiers;
    TextureSampleGrad_Texture3D_texture.type.modifierValues = TextureSampleGrad_Texture3D_texture_modifierValues;
    TextureSampleGrad_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture3D_sampler.type.modifiers = TextureSampleGrad_Texture3D_sampler_modifiers;
    TextureSampleGrad_Texture3D_sampler.type.modifierValues = TextureSampleGrad_Texture3D_sampler_modifierValues;
    TextureSampleGrad_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGrad_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGrad_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    TextureSampleGrad_Texture3D.name = TextureSampleGrad_Texture3D_name;
    TextureSampleGrad_Texture3D.backendIndex = 2485;
    TextureSampleGrad_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_Texture3D.parameters = TextureSampleGrad_Texture3D_args;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture3D)->signature = "textureSampleGrad(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture3D)->name = "textureSampleGrad(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture3D)->nameWithVarNames = "textureSampleGrad(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with SampledTexture3D, Float32x3, Float32x3, Float32x3
    SampledTextureSampleGrad_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGrad_Texture3D_texture.type.modifiers = SampledTextureSampleGrad_Texture3D_texture_modifiers;
    SampledTextureSampleGrad_Texture3D_texture.type.modifierValues = SampledTextureSampleGrad_Texture3D_texture_modifierValues;
    SampledTextureSampleGrad_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    SampledTextureSampleGrad_Texture3D.name = SampledTextureSampleGrad_Texture3D_name;
    SampledTextureSampleGrad_Texture3D.backendIndex = 2486;
    SampledTextureSampleGrad_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_Texture3D.parameters = SampledTextureSampleGrad_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D)->signature = "textureSampleGrad(uniform *textureSampled3D,f32x3,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D)->name = "textureSampleGrad(uniform *textureSampled3D,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with TextureCube, Sampler, Float32x3, Float32x3, Float32x3
    TextureSampleGrad_TextureCube_texture.name = "texture"_c;
    TextureSampleGrad_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSampleGrad_TextureCube_texture.type.modifiers = TextureSampleGrad_TextureCube_texture_modifiers;
    TextureSampleGrad_TextureCube_texture.type.modifierValues = TextureSampleGrad_TextureCube_texture_modifierValues;
    TextureSampleGrad_TextureCube_sampler.name = "sampler"_c;
    TextureSampleGrad_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_TextureCube_sampler.type.modifiers = TextureSampleGrad_TextureCube_sampler_modifiers;
    TextureSampleGrad_TextureCube_sampler.type.modifierValues = TextureSampleGrad_TextureCube_sampler_modifierValues;
    TextureSampleGrad_TextureCube_coordinate.name = "coordinate"_c;
    TextureSampleGrad_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_TextureCube_grad_x.name = "grad_x"_c;
    TextureSampleGrad_TextureCube_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_TextureCube_grad_y.name = "grad_y"_c;
    TextureSampleGrad_TextureCube_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_TextureCube.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    TextureSampleGrad_TextureCube.name = TextureSampleGrad_TextureCube_name;
    TextureSampleGrad_TextureCube.backendIndex = 2487;
    TextureSampleGrad_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_TextureCube.parameters = TextureSampleGrad_TextureCube_args;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCube)->signature = "textureSampleGrad(uniform *textureCube,uniform *sampler,f32x3,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleGrad_TextureCube)->name = "textureSampleGrad(uniform *textureCube,uniform *sampler,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGrad_TextureCube)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGrad_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with SampledTextureCube, Float32x3, Float32x3, Float32x3
    SampledTextureSampleGrad_TextureCube_texture.name = "texture"_c;
    SampledTextureSampleGrad_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureSampleGrad_TextureCube_texture.type.modifiers = SampledTextureSampleGrad_TextureCube_texture_modifiers;
    SampledTextureSampleGrad_TextureCube_texture.type.modifierValues = SampledTextureSampleGrad_TextureCube_texture_modifierValues;
    SampledTextureSampleGrad_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_TextureCube_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_TextureCube_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_TextureCube_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_TextureCube_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_TextureCube.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    SampledTextureSampleGrad_TextureCube.name = SampledTextureSampleGrad_TextureCube_name;
    SampledTextureSampleGrad_TextureCube.backendIndex = 2488;
    SampledTextureSampleGrad_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_TextureCube.parameters = SampledTextureSampleGrad_TextureCube_args;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube)->signature = "textureSampleGrad(uniform *textureSampledCube,f32x3,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube)->name = "textureSampleGrad(uniform *textureSampledCube,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureSampledCube, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2
    TextureSampleGrad_Texture1DArray_texture.name = "texture"_c;
    TextureSampleGrad_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleGrad_Texture1DArray_texture.type.modifiers = TextureSampleGrad_Texture1DArray_texture_modifiers;
    TextureSampleGrad_Texture1DArray_texture.type.modifierValues = TextureSampleGrad_Texture1DArray_texture_modifierValues;
    TextureSampleGrad_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture1DArray_sampler.type.modifiers = TextureSampleGrad_Texture1DArray_sampler_modifiers;
    TextureSampleGrad_Texture1DArray_sampler.type.modifierValues = TextureSampleGrad_Texture1DArray_sampler_modifierValues;
    TextureSampleGrad_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture1DArray_grad_x.name = "grad_x"_c;
    TextureSampleGrad_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture1DArray_grad_y.name = "grad_y"_c;
    TextureSampleGrad_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    TextureSampleGrad_Texture1DArray.name = TextureSampleGrad_Texture1DArray_name;
    TextureSampleGrad_Texture1DArray.backendIndex = 2489;
    TextureSampleGrad_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_Texture1DArray.parameters = TextureSampleGrad_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray)->signature = "textureSampleGrad(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray)->name = "textureSampleGrad(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray)->nameWithVarNames = "textureSampleGrad(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with SampledTexture1DArray, Float32x2, Float32x2, Float32x2
    SampledTextureSampleGrad_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleGrad_Texture1DArray_texture.type.modifiers = SampledTextureSampleGrad_Texture1DArray_texture_modifiers;
    SampledTextureSampleGrad_Texture1DArray_texture.type.modifierValues = SampledTextureSampleGrad_Texture1DArray_texture_modifierValues;
    SampledTextureSampleGrad_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture1DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture1DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    SampledTextureSampleGrad_Texture1DArray.name = SampledTextureSampleGrad_Texture1DArray_name;
    SampledTextureSampleGrad_Texture1DArray.backendIndex = 2490;
    SampledTextureSampleGrad_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_Texture1DArray.parameters = SampledTextureSampleGrad_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray)->signature = "textureSampleGrad(uniform *textureSampled1DArray,f32x2,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray)->name = "textureSampleGrad(uniform *textureSampled1DArray,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureSampled1DArray, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3
    TextureSampleGrad_Texture2DArray_texture.name = "texture"_c;
    TextureSampleGrad_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleGrad_Texture2DArray_texture.type.modifiers = TextureSampleGrad_Texture2DArray_texture_modifiers;
    TextureSampleGrad_Texture2DArray_texture.type.modifierValues = TextureSampleGrad_Texture2DArray_texture_modifierValues;
    TextureSampleGrad_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture2DArray_sampler.type.modifiers = TextureSampleGrad_Texture2DArray_sampler_modifiers;
    TextureSampleGrad_Texture2DArray_sampler.type.modifierValues = TextureSampleGrad_Texture2DArray_sampler_modifierValues;
    TextureSampleGrad_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture2DArray_grad_x.name = "grad_x"_c;
    TextureSampleGrad_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture2DArray_grad_y.name = "grad_y"_c;
    TextureSampleGrad_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    TextureSampleGrad_Texture2DArray.name = TextureSampleGrad_Texture2DArray_name;
    TextureSampleGrad_Texture2DArray.backendIndex = 2491;
    TextureSampleGrad_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_Texture2DArray.parameters = TextureSampleGrad_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray)->signature = "textureSampleGrad(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray)->name = "textureSampleGrad(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray)->nameWithVarNames = "textureSampleGrad(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with SampledTexture2DArray, Float32x3, Float32x3, Float32x3
    SampledTextureSampleGrad_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleGrad_Texture2DArray_texture.type.modifiers = SampledTextureSampleGrad_Texture2DArray_texture_modifiers;
    SampledTextureSampleGrad_Texture2DArray_texture.type.modifierValues = SampledTextureSampleGrad_Texture2DArray_texture_modifierValues;
    SampledTextureSampleGrad_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture2DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture2DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    SampledTextureSampleGrad_Texture2DArray.name = SampledTextureSampleGrad_Texture2DArray_name;
    SampledTextureSampleGrad_Texture2DArray.backendIndex = 2492;
    SampledTextureSampleGrad_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_Texture2DArray.parameters = SampledTextureSampleGrad_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray)->signature = "textureSampleGrad(uniform *textureSampled2DArray,f32x3,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray)->name = "textureSampleGrad(uniform *textureSampled2DArray,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureSampled2DArray, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with TextureCubeArray, Sampler, Float32x4, Float32x4, Float32x4
    TextureSampleGrad_TextureCubeArray_texture.name = "texture"_c;
    TextureSampleGrad_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSampleGrad_TextureCubeArray_texture.type.modifiers = TextureSampleGrad_TextureCubeArray_texture_modifiers;
    TextureSampleGrad_TextureCubeArray_texture.type.modifierValues = TextureSampleGrad_TextureCubeArray_texture_modifierValues;
    TextureSampleGrad_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSampleGrad_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_TextureCubeArray_sampler.type.modifiers = TextureSampleGrad_TextureCubeArray_sampler_modifiers;
    TextureSampleGrad_TextureCubeArray_sampler.type.modifierValues = TextureSampleGrad_TextureCubeArray_sampler_modifierValues;
    TextureSampleGrad_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSampleGrad_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSampleGrad_TextureCubeArray_grad_x.name = "grad_x"_c;
    TextureSampleGrad_TextureCubeArray_grad_x.type = Type::FullType{ Float32x4Type.name };
    TextureSampleGrad_TextureCubeArray_grad_y.name = "grad_y"_c;
    TextureSampleGrad_TextureCubeArray_grad_y.type = Type::FullType{ Float32x4Type.name };
    TextureSampleGrad_TextureCubeArray.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    TextureSampleGrad_TextureCubeArray.name = TextureSampleGrad_TextureCubeArray_name;
    TextureSampleGrad_TextureCubeArray.backendIndex = 2493;
    TextureSampleGrad_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_TextureCubeArray.parameters = TextureSampleGrad_TextureCubeArray_args;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_grad_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_grad_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray)->signature = "textureSampleGrad(uniform *textureCubeArray,uniform *sampler,f32x4,f32x4,f32x4) f32x4"_c;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray)->name = "textureSampleGrad(uniform *textureCubeArray,uniform *sampler,f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : f32x4, grad_x : f32x4, grad_y : f32x4)"_c;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with SampledTextureCubeArray, Float32x4, Float32x4, Float32x4
    SampledTextureSampleGrad_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSampleGrad_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureSampleGrad_TextureCubeArray_texture.type.modifiers = SampledTextureSampleGrad_TextureCubeArray_texture_modifiers;
    SampledTextureSampleGrad_TextureCubeArray_texture.type.modifierValues = SampledTextureSampleGrad_TextureCubeArray_texture_modifierValues;
    SampledTextureSampleGrad_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleGrad_TextureCubeArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_TextureCubeArray_grad_x.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleGrad_TextureCubeArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_TextureCubeArray_grad_y.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleGrad_TextureCubeArray.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    SampledTextureSampleGrad_TextureCubeArray.name = SampledTextureSampleGrad_TextureCubeArray_name;
    SampledTextureSampleGrad_TextureCubeArray.backendIndex = 2494;
    SampledTextureSampleGrad_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_TextureCubeArray.parameters = SampledTextureSampleGrad_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_grad_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_grad_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray)->signature = "textureSampleGrad(uniform *textureSampledCubeArray,f32x4,f32x4,f32x4) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray)->name = "textureSampleGrad(uniform *textureSampledCubeArray,f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureSampledCubeArray, coordinate : f32x4, grad_x : f32x4, grad_y : f32x4)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleGradOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleGradOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradOffset_Texture1D_texture.type.modifiers = TextureSampleGradOffset_Texture1D_texture_modifiers;
    TextureSampleGradOffset_Texture1D_texture.type.modifierValues = TextureSampleGradOffset_Texture1D_texture_modifierValues;
    TextureSampleGradOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradOffset_Texture1D_sampler.type.modifiers = TextureSampleGradOffset_Texture1D_sampler_modifiers;
    TextureSampleGradOffset_Texture1D_sampler.type.modifierValues = TextureSampleGradOffset_Texture1D_sampler_modifierValues;
    TextureSampleGradOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradOffset_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradOffset_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleGradOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleGradOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    TextureSampleGradOffset_Texture1D.name = TextureSampleGradOffset_Texture1D_name;
    TextureSampleGradOffset_Texture1D.backendIndex = 2495;
    TextureSampleGradOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradOffset_Texture1D.parameters = TextureSampleGradOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D)->signature = "textureSampleGradOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D)->name = "textureSampleGradOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleGradOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGradOffset_Texture1D_texture.type.modifiers = SampledTextureSampleGradOffset_Texture1D_texture_modifiers;
    SampledTextureSampleGradOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleGradOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleGradOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradOffset_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradOffset_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleGradOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    SampledTextureSampleGradOffset_Texture1D.name = SampledTextureSampleGradOffset_Texture1D_name;
    SampledTextureSampleGradOffset_Texture1D.backendIndex = 2496;
    SampledTextureSampleGradOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradOffset_Texture1D.parameters = SampledTextureSampleGradOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D)->signature = "textureSampleGradOffset(uniform *textureSampled1D,f32,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D)->name = "textureSampleGradOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32x2
    TextureSampleGradOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleGradOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradOffset_Texture2D_texture.type.modifiers = TextureSampleGradOffset_Texture2D_texture_modifiers;
    TextureSampleGradOffset_Texture2D_texture.type.modifierValues = TextureSampleGradOffset_Texture2D_texture_modifierValues;
    TextureSampleGradOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradOffset_Texture2D_sampler.type.modifiers = TextureSampleGradOffset_Texture2D_sampler_modifiers;
    TextureSampleGradOffset_Texture2D_sampler.type.modifierValues = TextureSampleGradOffset_Texture2D_sampler_modifierValues;
    TextureSampleGradOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleGradOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    TextureSampleGradOffset_Texture2D.name = TextureSampleGradOffset_Texture2D_name;
    TextureSampleGradOffset_Texture2D.backendIndex = 2497;
    TextureSampleGradOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradOffset_Texture2D.parameters = TextureSampleGradOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D)->signature = "textureSampleGradOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D)->name = "textureSampleGradOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32x2
    SampledTextureSampleGradOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGradOffset_Texture2D_texture.type.modifiers = SampledTextureSampleGradOffset_Texture2D_texture_modifiers;
    SampledTextureSampleGradOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleGradOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleGradOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleGradOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    SampledTextureSampleGradOffset_Texture2D.name = SampledTextureSampleGradOffset_Texture2D_name;
    SampledTextureSampleGradOffset_Texture2D.backendIndex = 2498;
    SampledTextureSampleGradOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradOffset_Texture2D.parameters = SampledTextureSampleGradOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D)->signature = "textureSampleGradOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D)->name = "textureSampleGradOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32x3
    TextureSampleGradOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleGradOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradOffset_Texture3D_texture.type.modifiers = TextureSampleGradOffset_Texture3D_texture_modifiers;
    TextureSampleGradOffset_Texture3D_texture.type.modifierValues = TextureSampleGradOffset_Texture3D_texture_modifierValues;
    TextureSampleGradOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradOffset_Texture3D_sampler.type.modifiers = TextureSampleGradOffset_Texture3D_sampler_modifiers;
    TextureSampleGradOffset_Texture3D_sampler.type.modifierValues = TextureSampleGradOffset_Texture3D_sampler_modifierValues;
    TextureSampleGradOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleGradOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    TextureSampleGradOffset_Texture3D.name = TextureSampleGradOffset_Texture3D_name;
    TextureSampleGradOffset_Texture3D.backendIndex = 2499;
    TextureSampleGradOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradOffset_Texture3D.parameters = TextureSampleGradOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D)->signature = "textureSampleGradOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D)->name = "textureSampleGradOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32x3
    SampledTextureSampleGradOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGradOffset_Texture3D_texture.type.modifiers = SampledTextureSampleGradOffset_Texture3D_texture_modifiers;
    SampledTextureSampleGradOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleGradOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleGradOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleGradOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    SampledTextureSampleGradOffset_Texture3D.name = SampledTextureSampleGradOffset_Texture3D_name;
    SampledTextureSampleGradOffset_Texture3D.backendIndex = 2500;
    SampledTextureSampleGradOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradOffset_Texture3D.parameters = SampledTextureSampleGradOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D)->signature = "textureSampleGradOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D)->name = "textureSampleGradOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32x2
    TextureSampleGradOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleGradOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleGradOffset_Texture1DArray_texture.type.modifiers = TextureSampleGradOffset_Texture1DArray_texture_modifiers;
    TextureSampleGradOffset_Texture1DArray_texture.type.modifierValues = TextureSampleGradOffset_Texture1DArray_texture_modifierValues;
    TextureSampleGradOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleGradOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradOffset_Texture1DArray_sampler.type.modifiers = TextureSampleGradOffset_Texture1DArray_sampler_modifiers;
    TextureSampleGradOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleGradOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleGradOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture1DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradOffset_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture1DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradOffset_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleGradOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    TextureSampleGradOffset_Texture1DArray.name = TextureSampleGradOffset_Texture1DArray_name;
    TextureSampleGradOffset_Texture1DArray.backendIndex = 2501;
    TextureSampleGradOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradOffset_Texture1DArray.parameters = TextureSampleGradOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray)->signature = "textureSampleGradOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray)->name = "textureSampleGradOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with SampledTexture1DArray, Float32x2, Float32x2, Float32x2, Float32x2
    SampledTextureSampleGradOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleGradOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleGradOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleGradOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleGradOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleGradOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleGradOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture1DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradOffset_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture1DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradOffset_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleGradOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    SampledTextureSampleGradOffset_Texture1DArray.name = SampledTextureSampleGradOffset_Texture1DArray_name;
    SampledTextureSampleGradOffset_Texture1DArray.backendIndex = 2502;
    SampledTextureSampleGradOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradOffset_Texture1DArray.parameters = SampledTextureSampleGradOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray)->signature = "textureSampleGradOffset(uniform *textureSampled1DArray,f32x2,f32x2,f32x2,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray)->name = "textureSampleGradOffset(uniform *textureSampled1DArray,f32x2,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32x3
    TextureSampleGradOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleGradOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleGradOffset_Texture2DArray_texture.type.modifiers = TextureSampleGradOffset_Texture2DArray_texture_modifiers;
    TextureSampleGradOffset_Texture2DArray_texture.type.modifierValues = TextureSampleGradOffset_Texture2DArray_texture_modifierValues;
    TextureSampleGradOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleGradOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradOffset_Texture2DArray_sampler.type.modifiers = TextureSampleGradOffset_Texture2DArray_sampler_modifiers;
    TextureSampleGradOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleGradOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleGradOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture2DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradOffset_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture2DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradOffset_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleGradOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    TextureSampleGradOffset_Texture2DArray.name = TextureSampleGradOffset_Texture2DArray_name;
    TextureSampleGradOffset_Texture2DArray.backendIndex = 2503;
    TextureSampleGradOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradOffset_Texture2DArray.parameters = TextureSampleGradOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray)->signature = "textureSampleGradOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray)->name = "textureSampleGradOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with SampledTexture2DArray, Float32x3, Float32x3, Float32x3, Float32x3
    SampledTextureSampleGradOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleGradOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleGradOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleGradOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleGradOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleGradOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleGradOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture2DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradOffset_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture2DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradOffset_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleGradOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    SampledTextureSampleGradOffset_Texture2DArray.name = SampledTextureSampleGradOffset_Texture2DArray_name;
    SampledTextureSampleGradOffset_Texture2DArray.backendIndex = 2504;
    SampledTextureSampleGradOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradOffset_Texture2DArray.parameters = SampledTextureSampleGradOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray)->signature = "textureSampleGradOffset(uniform *textureSampled2DArray,f32x3,f32x3,f32x3,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray)->name = "textureSampleGradOffset(uniform *textureSampled2DArray,f32x3,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleGradProj_Texture1D_texture.name = "texture"_c;
    TextureSampleGradProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradProj_Texture1D_texture.type.modifiers = TextureSampleGradProj_Texture1D_texture_modifiers;
    TextureSampleGradProj_Texture1D_texture.type.modifierValues = TextureSampleGradProj_Texture1D_texture_modifierValues;
    TextureSampleGradProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProj_Texture1D_sampler.type.modifiers = TextureSampleGradProj_Texture1D_sampler_modifiers;
    TextureSampleGradProj_Texture1D_sampler.type.modifierValues = TextureSampleGradProj_Texture1D_sampler_modifierValues;
    TextureSampleGradProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradProj_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradProj_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D_proj.name = "proj"_c;
    TextureSampleGradProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection"_c;
    TextureSampleGradProj_Texture1D.name = TextureSampleGradProj_Texture1D_name;
    TextureSampleGradProj_Texture1D.backendIndex = 2505;
    TextureSampleGradProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProj_Texture1D.parameters = TextureSampleGradProj_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D)->signature = "textureSampleGradProj(uniform *texture1D,uniform *sampler,f32,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D)->name = "textureSampleGradProj(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D)->nameWithVarNames = "textureSampleGradProj(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleGradProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradProj_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGradProj_Texture1D_texture.type.modifiers = SampledTextureSampleGradProj_Texture1D_texture_modifiers;
    SampledTextureSampleGradProj_Texture1D_texture.type.modifierValues = SampledTextureSampleGradProj_Texture1D_texture_modifierValues;
    SampledTextureSampleGradProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProj_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProj_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleGradProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection"_c;
    SampledTextureSampleGradProj_Texture1D.name = SampledTextureSampleGradProj_Texture1D_name;
    SampledTextureSampleGradProj_Texture1D.backendIndex = 2506;
    SampledTextureSampleGradProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProj_Texture1D.parameters = SampledTextureSampleGradProj_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D)->signature = "textureSampleGradProj(uniform *textureSampled1D,f32,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D)->name = "textureSampleGradProj(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D)->nameWithVarNames = "textureSampleGradProj(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32
    TextureSampleGradProj_Texture2D_texture.name = "texture"_c;
    TextureSampleGradProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradProj_Texture2D_texture.type.modifiers = TextureSampleGradProj_Texture2D_texture_modifiers;
    TextureSampleGradProj_Texture2D_texture.type.modifierValues = TextureSampleGradProj_Texture2D_texture_modifierValues;
    TextureSampleGradProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProj_Texture2D_sampler.type.modifiers = TextureSampleGradProj_Texture2D_sampler_modifiers;
    TextureSampleGradProj_Texture2D_sampler.type.modifierValues = TextureSampleGradProj_Texture2D_sampler_modifierValues;
    TextureSampleGradProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProj_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradProj_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProj_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradProj_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProj_Texture2D_proj.name = "proj"_c;
    TextureSampleGradProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection"_c;
    TextureSampleGradProj_Texture2D.name = TextureSampleGradProj_Texture2D_name;
    TextureSampleGradProj_Texture2D.backendIndex = 2507;
    TextureSampleGradProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProj_Texture2D.parameters = TextureSampleGradProj_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D)->signature = "textureSampleGradProj(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D)->name = "textureSampleGradProj(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D)->nameWithVarNames = "textureSampleGradProj(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32
    SampledTextureSampleGradProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradProj_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGradProj_Texture2D_texture.type.modifiers = SampledTextureSampleGradProj_Texture2D_texture_modifiers;
    SampledTextureSampleGradProj_Texture2D_texture.type.modifierValues = SampledTextureSampleGradProj_Texture2D_texture_modifierValues;
    SampledTextureSampleGradProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProj_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProj_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProj_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProj_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleGradProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection"_c;
    SampledTextureSampleGradProj_Texture2D.name = SampledTextureSampleGradProj_Texture2D_name;
    SampledTextureSampleGradProj_Texture2D.backendIndex = 2508;
    SampledTextureSampleGradProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProj_Texture2D.parameters = SampledTextureSampleGradProj_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D)->signature = "textureSampleGradProj(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D)->name = "textureSampleGradProj(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D)->nameWithVarNames = "textureSampleGradProj(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32
    TextureSampleGradProj_Texture3D_texture.name = "texture"_c;
    TextureSampleGradProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradProj_Texture3D_texture.type.modifiers = TextureSampleGradProj_Texture3D_texture_modifiers;
    TextureSampleGradProj_Texture3D_texture.type.modifierValues = TextureSampleGradProj_Texture3D_texture_modifierValues;
    TextureSampleGradProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProj_Texture3D_sampler.type.modifiers = TextureSampleGradProj_Texture3D_sampler_modifiers;
    TextureSampleGradProj_Texture3D_sampler.type.modifierValues = TextureSampleGradProj_Texture3D_sampler_modifierValues;
    TextureSampleGradProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProj_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradProj_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProj_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradProj_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProj_Texture3D_proj.name = "proj"_c;
    TextureSampleGradProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection"_c;
    TextureSampleGradProj_Texture3D.name = TextureSampleGradProj_Texture3D_name;
    TextureSampleGradProj_Texture3D.backendIndex = 2509;
    TextureSampleGradProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProj_Texture3D.parameters = TextureSampleGradProj_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D)->signature = "textureSampleGradProj(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D)->name = "textureSampleGradProj(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D)->nameWithVarNames = "textureSampleGradProj(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32
    SampledTextureSampleGradProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradProj_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGradProj_Texture3D_texture.type.modifiers = SampledTextureSampleGradProj_Texture3D_texture_modifiers;
    SampledTextureSampleGradProj_Texture3D_texture.type.modifierValues = SampledTextureSampleGradProj_Texture3D_texture_modifierValues;
    SampledTextureSampleGradProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProj_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProj_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProj_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProj_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleGradProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection"_c;
    SampledTextureSampleGradProj_Texture3D.name = SampledTextureSampleGradProj_Texture3D_name;
    SampledTextureSampleGradProj_Texture3D.backendIndex = 2510;
    SampledTextureSampleGradProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProj_Texture3D.parameters = SampledTextureSampleGradProj_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D)->signature = "textureSampleGradProj(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D)->name = "textureSampleGradProj(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D)->nameWithVarNames = "textureSampleGradProj(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
    TextureSampleGradProjOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleGradProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradProjOffset_Texture1D_texture.type.modifiers = TextureSampleGradProjOffset_Texture1D_texture_modifiers;
    TextureSampleGradProjOffset_Texture1D_texture.type.modifierValues = TextureSampleGradProjOffset_Texture1D_texture_modifierValues;
    TextureSampleGradProjOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradProjOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjOffset_Texture1D_sampler.type.modifiers = TextureSampleGradProjOffset_Texture1D_sampler_modifiers;
    TextureSampleGradProjOffset_Texture1D_sampler.type.modifierValues = TextureSampleGradProjOffset_Texture1D_sampler_modifierValues;
    TextureSampleGradProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleGradProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleGradProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection with an offset applied to the coordinate"_c;
    TextureSampleGradProjOffset_Texture1D.name = TextureSampleGradProjOffset_Texture1D_name;
    TextureSampleGradProjOffset_Texture1D.backendIndex = 2511;
    TextureSampleGradProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProjOffset_Texture1D.parameters = TextureSampleGradProjOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D)->signature = "textureSampleGradProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D)->name = "textureSampleGradProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D)->nameWithVarNames = "textureSampleGradProjOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleGradProjOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradProjOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGradProjOffset_Texture1D_texture.type.modifiers = SampledTextureSampleGradProjOffset_Texture1D_texture_modifiers;
    SampledTextureSampleGradProjOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleGradProjOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleGradProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleGradProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleGradProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleGradProjOffset_Texture1D.name = SampledTextureSampleGradProjOffset_Texture1D_name;
    SampledTextureSampleGradProjOffset_Texture1D.backendIndex = 2512;
    SampledTextureSampleGradProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProjOffset_Texture1D.parameters = SampledTextureSampleGradProjOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D)->signature = "textureSampleGradProjOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D)->name = "textureSampleGradProjOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D)->nameWithVarNames = "textureSampleGradProjOffset(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    TextureSampleGradProjOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleGradProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradProjOffset_Texture2D_texture.type.modifiers = TextureSampleGradProjOffset_Texture2D_texture_modifiers;
    TextureSampleGradProjOffset_Texture2D_texture.type.modifierValues = TextureSampleGradProjOffset_Texture2D_texture_modifierValues;
    TextureSampleGradProjOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradProjOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjOffset_Texture2D_sampler.type.modifiers = TextureSampleGradProjOffset_Texture2D_sampler_modifiers;
    TextureSampleGradProjOffset_Texture2D_sampler.type.modifierValues = TextureSampleGradProjOffset_Texture2D_sampler_modifierValues;
    TextureSampleGradProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjOffset_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjOffset_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleGradProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleGradProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection with an offset applied to the coordinate"_c;
    TextureSampleGradProjOffset_Texture2D.name = TextureSampleGradProjOffset_Texture2D_name;
    TextureSampleGradProjOffset_Texture2D.backendIndex = 2513;
    TextureSampleGradProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProjOffset_Texture2D.parameters = TextureSampleGradProjOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D)->signature = "textureSampleGradProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D)->name = "textureSampleGradProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D)->nameWithVarNames = "textureSampleGradProjOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    SampledTextureSampleGradProjOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradProjOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGradProjOffset_Texture2D_texture.type.modifiers = SampledTextureSampleGradProjOffset_Texture2D_texture_modifiers;
    SampledTextureSampleGradProjOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleGradProjOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleGradProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjOffset_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjOffset_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleGradProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleGradProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleGradProjOffset_Texture2D.name = SampledTextureSampleGradProjOffset_Texture2D_name;
    SampledTextureSampleGradProjOffset_Texture2D.backendIndex = 2514;
    SampledTextureSampleGradProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProjOffset_Texture2D.parameters = SampledTextureSampleGradProjOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D)->signature = "textureSampleGradProjOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D)->name = "textureSampleGradProjOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D)->nameWithVarNames = "textureSampleGradProjOffset(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    TextureSampleGradProjOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleGradProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradProjOffset_Texture3D_texture.type.modifiers = TextureSampleGradProjOffset_Texture3D_texture_modifiers;
    TextureSampleGradProjOffset_Texture3D_texture.type.modifierValues = TextureSampleGradProjOffset_Texture3D_texture_modifierValues;
    TextureSampleGradProjOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradProjOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjOffset_Texture3D_sampler.type.modifiers = TextureSampleGradProjOffset_Texture3D_sampler_modifiers;
    TextureSampleGradProjOffset_Texture3D_sampler.type.modifierValues = TextureSampleGradProjOffset_Texture3D_sampler_modifierValues;
    TextureSampleGradProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjOffset_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjOffset_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleGradProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleGradProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection with an offset applied to the coordinate"_c;
    TextureSampleGradProjOffset_Texture3D.name = TextureSampleGradProjOffset_Texture3D_name;
    TextureSampleGradProjOffset_Texture3D.backendIndex = 2515;
    TextureSampleGradProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProjOffset_Texture3D.parameters = TextureSampleGradProjOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D)->signature = "textureSampleGradProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D)->name = "textureSampleGradProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D)->nameWithVarNames = "textureSampleGradProjOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    SampledTextureSampleGradProjOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradProjOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGradProjOffset_Texture3D_texture.type.modifiers = SampledTextureSampleGradProjOffset_Texture3D_texture_modifiers;
    SampledTextureSampleGradProjOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleGradProjOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleGradProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjOffset_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjOffset_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleGradProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleGradProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleGradProjOffset_Texture3D.name = SampledTextureSampleGradProjOffset_Texture3D_name;
    SampledTextureSampleGradProjOffset_Texture3D.backendIndex = 2516;
    SampledTextureSampleGradProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProjOffset_Texture3D.parameters = SampledTextureSampleGradProjOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D)->signature = "textureSampleGradProjOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D)->name = "textureSampleGradProjOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D)->nameWithVarNames = "textureSampleGradProjOffset(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleGradCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradCompare_Texture1D_texture.type.modifiers = TextureSampleGradCompare_Texture1D_texture_modifiers;
    TextureSampleGradCompare_Texture1D_texture.type.modifierValues = TextureSampleGradCompare_Texture1D_texture_modifierValues;
    TextureSampleGradCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture1D_sampler.type.modifiers = TextureSampleGradCompare_Texture1D_sampler_modifiers;
    TextureSampleGradCompare_Texture1D_sampler.type.modifierValues = TextureSampleGradCompare_Texture1D_sampler_modifierValues;
    TextureSampleGradCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompare_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompare_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    TextureSampleGradCompare_Texture1D.name = TextureSampleGradCompare_Texture1D_name;
    TextureSampleGradCompare_Texture1D.backendIndex = 2517;
    TextureSampleGradCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompare_Texture1D.parameters = TextureSampleGradCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D)->signature = "textureSampleGradCompare(uniform *texture1D,uniform *sampler,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D)->name = "textureSampleGradCompare(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleGradCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGradCompare_Texture1D_texture.type.modifiers = SampledTextureSampleGradCompare_Texture1D_texture_modifiers;
    SampledTextureSampleGradCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleGradCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleGradCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    SampledTextureSampleGradCompare_Texture1D.name = SampledTextureSampleGradCompare_Texture1D_name;
    SampledTextureSampleGradCompare_Texture1D.backendIndex = 2518;
    SampledTextureSampleGradCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D.parameters = SampledTextureSampleGradCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D)->signature = "textureSampleGradCompare(uniform *textureSampled1D,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D)->name = "textureSampleGradCompare(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32
    TextureSampleGradCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradCompare_Texture2D_texture.type.modifiers = TextureSampleGradCompare_Texture2D_texture_modifiers;
    TextureSampleGradCompare_Texture2D_texture.type.modifierValues = TextureSampleGradCompare_Texture2D_texture_modifierValues;
    TextureSampleGradCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture2D_sampler.type.modifiers = TextureSampleGradCompare_Texture2D_sampler_modifiers;
    TextureSampleGradCompare_Texture2D_sampler.type.modifierValues = TextureSampleGradCompare_Texture2D_sampler_modifierValues;
    TextureSampleGradCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompare_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompare_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    TextureSampleGradCompare_Texture2D.name = TextureSampleGradCompare_Texture2D_name;
    TextureSampleGradCompare_Texture2D.backendIndex = 2519;
    TextureSampleGradCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompare_Texture2D.parameters = TextureSampleGradCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D)->signature = "textureSampleGradCompare(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32) f32"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D)->name = "textureSampleGradCompare(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32
    SampledTextureSampleGradCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGradCompare_Texture2D_texture.type.modifiers = SampledTextureSampleGradCompare_Texture2D_texture_modifiers;
    SampledTextureSampleGradCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleGradCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleGradCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    SampledTextureSampleGradCompare_Texture2D.name = SampledTextureSampleGradCompare_Texture2D_name;
    SampledTextureSampleGradCompare_Texture2D.backendIndex = 2520;
    SampledTextureSampleGradCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompare_Texture2D.parameters = SampledTextureSampleGradCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D)->signature = "textureSampleGradCompare(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D)->name = "textureSampleGradCompare(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32
    TextureSampleGradCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradCompare_Texture3D_texture.type.modifiers = TextureSampleGradCompare_Texture3D_texture_modifiers;
    TextureSampleGradCompare_Texture3D_texture.type.modifierValues = TextureSampleGradCompare_Texture3D_texture_modifierValues;
    TextureSampleGradCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture3D_sampler.type.modifiers = TextureSampleGradCompare_Texture3D_sampler_modifiers;
    TextureSampleGradCompare_Texture3D_sampler.type.modifierValues = TextureSampleGradCompare_Texture3D_sampler_modifierValues;
    TextureSampleGradCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompare_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompare_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    TextureSampleGradCompare_Texture3D.name = TextureSampleGradCompare_Texture3D_name;
    TextureSampleGradCompare_Texture3D.backendIndex = 2521;
    TextureSampleGradCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompare_Texture3D.parameters = TextureSampleGradCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D)->signature = "textureSampleGradCompare(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32) f32"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D)->name = "textureSampleGradCompare(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32
    SampledTextureSampleGradCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGradCompare_Texture3D_texture.type.modifiers = SampledTextureSampleGradCompare_Texture3D_texture_modifiers;
    SampledTextureSampleGradCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleGradCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleGradCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    SampledTextureSampleGradCompare_Texture3D.name = SampledTextureSampleGradCompare_Texture3D_name;
    SampledTextureSampleGradCompare_Texture3D.backendIndex = 2522;
    SampledTextureSampleGradCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompare_Texture3D.parameters = SampledTextureSampleGradCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D)->signature = "textureSampleGradCompare(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D)->name = "textureSampleGradCompare(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32
    TextureSampleGradCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleGradCompare_Texture1DArray_texture.type.modifiers = TextureSampleGradCompare_Texture1DArray_texture_modifiers;
    TextureSampleGradCompare_Texture1DArray_texture.type.modifierValues = TextureSampleGradCompare_Texture1DArray_texture_modifierValues;
    TextureSampleGradCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture1DArray_sampler.type.modifiers = TextureSampleGradCompare_Texture1DArray_sampler_modifiers;
    TextureSampleGradCompare_Texture1DArray_sampler.type.modifierValues = TextureSampleGradCompare_Texture1DArray_sampler_modifierValues;
    TextureSampleGradCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture1DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradCompare_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture1DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradCompare_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    TextureSampleGradCompare_Texture1DArray.name = TextureSampleGradCompare_Texture1DArray_name;
    TextureSampleGradCompare_Texture1DArray.backendIndex = 2523;
    TextureSampleGradCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompare_Texture1DArray.parameters = TextureSampleGradCompare_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray)->signature = "textureSampleGradCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2,f32) f32"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray)->name = "textureSampleGradCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with SampledTexture1DArray, Float32x2, Float32x2, Float32x2, Float32
    SampledTextureSampleGradCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleGradCompare_Texture1DArray_texture.type.modifiers = SampledTextureSampleGradCompare_Texture1DArray_texture_modifiers;
    SampledTextureSampleGradCompare_Texture1DArray_texture.type.modifierValues = SampledTextureSampleGradCompare_Texture1DArray_texture_modifierValues;
    SampledTextureSampleGradCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture1DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture1DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    SampledTextureSampleGradCompare_Texture1DArray.name = SampledTextureSampleGradCompare_Texture1DArray_name;
    SampledTextureSampleGradCompare_Texture1DArray.backendIndex = 2524;
    SampledTextureSampleGradCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompare_Texture1DArray.parameters = SampledTextureSampleGradCompare_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray)->signature = "textureSampleGradCompare(uniform *textureSampled1DArray,f32x2,f32x2,f32x2,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray)->name = "textureSampleGradCompare(uniform *textureSampled1DArray,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *textureSampled1DArray, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32
    TextureSampleGradCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleGradCompare_Texture2DArray_texture.type.modifiers = TextureSampleGradCompare_Texture2DArray_texture_modifiers;
    TextureSampleGradCompare_Texture2DArray_texture.type.modifierValues = TextureSampleGradCompare_Texture2DArray_texture_modifierValues;
    TextureSampleGradCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture2DArray_sampler.type.modifiers = TextureSampleGradCompare_Texture2DArray_sampler_modifiers;
    TextureSampleGradCompare_Texture2DArray_sampler.type.modifierValues = TextureSampleGradCompare_Texture2DArray_sampler_modifierValues;
    TextureSampleGradCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture2DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradCompare_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture2DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradCompare_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    TextureSampleGradCompare_Texture2DArray.name = TextureSampleGradCompare_Texture2DArray_name;
    TextureSampleGradCompare_Texture2DArray.backendIndex = 2525;
    TextureSampleGradCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompare_Texture2DArray.parameters = TextureSampleGradCompare_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray)->signature = "textureSampleGradCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3,f32) f32"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray)->name = "textureSampleGradCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with SampledTexture2DArray, Float32x3, Float32x3, Float32x3, Float32
    SampledTextureSampleGradCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleGradCompare_Texture2DArray_texture.type.modifiers = SampledTextureSampleGradCompare_Texture2DArray_texture_modifiers;
    SampledTextureSampleGradCompare_Texture2DArray_texture.type.modifierValues = SampledTextureSampleGradCompare_Texture2DArray_texture_modifierValues;
    SampledTextureSampleGradCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture2DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture2DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    SampledTextureSampleGradCompare_Texture2DArray.name = SampledTextureSampleGradCompare_Texture2DArray_name;
    SampledTextureSampleGradCompare_Texture2DArray.backendIndex = 2526;
    SampledTextureSampleGradCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompare_Texture2DArray.parameters = SampledTextureSampleGradCompare_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray)->signature = "textureSampleGradCompare(uniform *textureSampled2DArray,f32x3,f32x3,f32x3,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray)->name = "textureSampleGradCompare(uniform *textureSampled2DArray,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *textureSampled2DArray, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
    TextureSampleGradCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleGradCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradCompareOffset_Texture1D_texture.type.modifiers = TextureSampleGradCompareOffset_Texture1D_texture_modifiers;
    TextureSampleGradCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleGradCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleGradCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleGradCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleGradCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleGradCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleGradCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompareOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompareOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleGradCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleGradCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradCompareOffset_Texture1D.name = TextureSampleGradCompareOffset_Texture1D_name;
    TextureSampleGradCompareOffset_Texture1D.backendIndex = 2527;
    TextureSampleGradCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D.parameters = TextureSampleGradCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D)->signature = "textureSampleGradCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D)->name = "textureSampleGradCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleGradCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGradCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleGradCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleGradCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleGradCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleGradCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture1D.name = SampledTextureSampleGradCompareOffset_Texture1D_name;
    SampledTextureSampleGradCompareOffset_Texture1D.backendIndex = 2528;
    SampledTextureSampleGradCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D.parameters = SampledTextureSampleGradCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D)->signature = "textureSampleGradCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D)->name = "textureSampleGradCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    TextureSampleGradCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleGradCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradCompareOffset_Texture2D_texture.type.modifiers = TextureSampleGradCompareOffset_Texture2D_texture_modifiers;
    TextureSampleGradCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleGradCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleGradCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleGradCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleGradCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleGradCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleGradCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompareOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompareOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleGradCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleGradCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradCompareOffset_Texture2D.name = TextureSampleGradCompareOffset_Texture2D_name;
    TextureSampleGradCompareOffset_Texture2D.backendIndex = 2529;
    TextureSampleGradCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompareOffset_Texture2D.parameters = TextureSampleGradCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D)->signature = "textureSampleGradCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32x2) f32"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D)->name = "textureSampleGradCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    SampledTextureSampleGradCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGradCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleGradCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleGradCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleGradCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleGradCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture2D.name = SampledTextureSampleGradCompareOffset_Texture2D_name;
    SampledTextureSampleGradCompareOffset_Texture2D.backendIndex = 2530;
    SampledTextureSampleGradCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D.parameters = SampledTextureSampleGradCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D)->signature = "textureSampleGradCompareOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32x2) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D)->name = "textureSampleGradCompareOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    TextureSampleGradCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleGradCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradCompareOffset_Texture3D_texture.type.modifiers = TextureSampleGradCompareOffset_Texture3D_texture_modifiers;
    TextureSampleGradCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleGradCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleGradCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleGradCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleGradCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleGradCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleGradCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompareOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompareOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleGradCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleGradCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradCompareOffset_Texture3D.name = TextureSampleGradCompareOffset_Texture3D_name;
    TextureSampleGradCompareOffset_Texture3D.backendIndex = 2531;
    TextureSampleGradCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompareOffset_Texture3D.parameters = TextureSampleGradCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D)->signature = "textureSampleGradCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32x3) f32"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D)->name = "textureSampleGradCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    SampledTextureSampleGradCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGradCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleGradCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleGradCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleGradCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleGradCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture3D.name = SampledTextureSampleGradCompareOffset_Texture3D_name;
    SampledTextureSampleGradCompareOffset_Texture3D.backendIndex = 2532;
    SampledTextureSampleGradCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D.parameters = SampledTextureSampleGradCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D)->signature = "textureSampleGradCompareOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32x3) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D)->name = "textureSampleGradCompareOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    TextureSampleGradCompareOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleGradCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleGradCompareOffset_Texture1DArray_texture.type.modifiers = TextureSampleGradCompareOffset_Texture1DArray_texture_modifiers;
    TextureSampleGradCompareOffset_Texture1DArray_texture.type.modifierValues = TextureSampleGradCompareOffset_Texture1DArray_texture_modifierValues;
    TextureSampleGradCompareOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleGradCompareOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompareOffset_Texture1DArray_sampler.type.modifiers = TextureSampleGradCompareOffset_Texture1DArray_sampler_modifiers;
    TextureSampleGradCompareOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleGradCompareOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleGradCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture1DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradCompareOffset_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture1DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradCompareOffset_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture1DArray_compare.name = "compare"_c;
    TextureSampleGradCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleGradCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradCompareOffset_Texture1DArray.name = TextureSampleGradCompareOffset_Texture1DArray_name;
    TextureSampleGradCompareOffset_Texture1DArray.backendIndex = 2533;
    TextureSampleGradCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompareOffset_Texture1DArray.parameters = TextureSampleGradCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray)->signature = "textureSampleGradCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2,f32,f32x2) f32"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray)->name = "textureSampleGradCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with SampledTexture1DArray, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    SampledTextureSampleGradCompareOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleGradCompareOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleGradCompareOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleGradCompareOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleGradCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray.name = SampledTextureSampleGradCompareOffset_Texture1DArray_name;
    SampledTextureSampleGradCompareOffset_Texture1DArray.backendIndex = 2534;
    SampledTextureSampleGradCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray.parameters = SampledTextureSampleGradCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray)->signature = "textureSampleGradCompareOffset(uniform *textureSampled1DArray,f32x2,f32x2,f32x2,f32,f32x2) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray)->name = "textureSampleGradCompareOffset(uniform *textureSampled1DArray,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    TextureSampleGradCompareOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleGradCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleGradCompareOffset_Texture2DArray_texture.type.modifiers = TextureSampleGradCompareOffset_Texture2DArray_texture_modifiers;
    TextureSampleGradCompareOffset_Texture2DArray_texture.type.modifierValues = TextureSampleGradCompareOffset_Texture2DArray_texture_modifierValues;
    TextureSampleGradCompareOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleGradCompareOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompareOffset_Texture2DArray_sampler.type.modifiers = TextureSampleGradCompareOffset_Texture2DArray_sampler_modifiers;
    TextureSampleGradCompareOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleGradCompareOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleGradCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture2DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradCompareOffset_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture2DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradCompareOffset_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture2DArray_compare.name = "compare"_c;
    TextureSampleGradCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleGradCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradCompareOffset_Texture2DArray.name = TextureSampleGradCompareOffset_Texture2DArray_name;
    TextureSampleGradCompareOffset_Texture2DArray.backendIndex = 2535;
    TextureSampleGradCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompareOffset_Texture2DArray.parameters = TextureSampleGradCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray)->signature = "textureSampleGradCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3,f32,f32x3) f32"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray)->name = "textureSampleGradCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with SampledTexture2DArray, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    SampledTextureSampleGradCompareOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleGradCompareOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleGradCompareOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleGradCompareOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleGradCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray.name = SampledTextureSampleGradCompareOffset_Texture2DArray_name;
    SampledTextureSampleGradCompareOffset_Texture2DArray.backendIndex = 2536;
    SampledTextureSampleGradCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray.parameters = SampledTextureSampleGradCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray)->signature = "textureSampleGradCompareOffset(uniform *textureSampled2DArray,f32x3,f32x3,f32x3,f32,f32x3) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray)->name = "textureSampleGradCompareOffset(uniform *textureSampled2DArray,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
    TextureSampleGradProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleGradProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradProjCompare_Texture1D_texture.type.modifiers = TextureSampleGradProjCompare_Texture1D_texture_modifiers;
    TextureSampleGradProjCompare_Texture1D_texture.type.modifierValues = TextureSampleGradProjCompare_Texture1D_texture_modifierValues;
    TextureSampleGradProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompare_Texture1D_sampler.type.modifiers = TextureSampleGradProjCompare_Texture1D_sampler_modifiers;
    TextureSampleGradProjCompare_Texture1D_sampler.type.modifierValues = TextureSampleGradProjCompare_Texture1D_sampler_modifierValues;
    TextureSampleGradProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompare_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompare_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleGradProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleGradProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison"_c;
    TextureSampleGradProjCompare_Texture1D.name = TextureSampleGradProjCompare_Texture1D_name;
    TextureSampleGradProjCompare_Texture1D.backendIndex = 2537;
    TextureSampleGradProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradProjCompare_Texture1D.parameters = TextureSampleGradProjCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D)->signature = "textureSampleGradProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D)->name = "textureSampleGradProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D)->nameWithVarNames = "textureSampleGradProjCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompare with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleGradProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGradProjCompare_Texture1D_texture.type.modifiers = SampledTextureSampleGradProjCompare_Texture1D_texture_modifiers;
    SampledTextureSampleGradProjCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleGradProjCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleGradProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompare_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompare_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison"_c;
    SampledTextureSampleGradProjCompare_Texture1D.name = SampledTextureSampleGradProjCompare_Texture1D_name;
    SampledTextureSampleGradProjCompare_Texture1D.backendIndex = 2538;
    SampledTextureSampleGradProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D.parameters = SampledTextureSampleGradProjCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D)->signature = "textureSampleGradProjCompare(uniform *textureSampled1D,f32,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D)->name = "textureSampleGradProjCompare(uniform *textureSampled1D,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D)->nameWithVarNames = "textureSampleGradProjCompare(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompare with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32
    TextureSampleGradProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleGradProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradProjCompare_Texture2D_texture.type.modifiers = TextureSampleGradProjCompare_Texture2D_texture_modifiers;
    TextureSampleGradProjCompare_Texture2D_texture.type.modifierValues = TextureSampleGradProjCompare_Texture2D_texture_modifierValues;
    TextureSampleGradProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompare_Texture2D_sampler.type.modifiers = TextureSampleGradProjCompare_Texture2D_sampler_modifiers;
    TextureSampleGradProjCompare_Texture2D_sampler.type.modifierValues = TextureSampleGradProjCompare_Texture2D_sampler_modifierValues;
    TextureSampleGradProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompare_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompare_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompare_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompare_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleGradProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleGradProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison"_c;
    TextureSampleGradProjCompare_Texture2D.name = TextureSampleGradProjCompare_Texture2D_name;
    TextureSampleGradProjCompare_Texture2D.backendIndex = 2539;
    TextureSampleGradProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradProjCompare_Texture2D.parameters = TextureSampleGradProjCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D)->signature = "textureSampleGradProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D)->name = "textureSampleGradProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D)->nameWithVarNames = "textureSampleGradProjCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompare with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32
    SampledTextureSampleGradProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGradProjCompare_Texture2D_texture.type.modifiers = SampledTextureSampleGradProjCompare_Texture2D_texture_modifiers;
    SampledTextureSampleGradProjCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleGradProjCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleGradProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompare_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompare_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison"_c;
    SampledTextureSampleGradProjCompare_Texture2D.name = SampledTextureSampleGradProjCompare_Texture2D_name;
    SampledTextureSampleGradProjCompare_Texture2D.backendIndex = 2540;
    SampledTextureSampleGradProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture2D.parameters = SampledTextureSampleGradProjCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D)->signature = "textureSampleGradProjCompare(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D)->name = "textureSampleGradProjCompare(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D)->nameWithVarNames = "textureSampleGradProjCompare(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompare with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32
    TextureSampleGradProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleGradProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradProjCompare_Texture3D_texture.type.modifiers = TextureSampleGradProjCompare_Texture3D_texture_modifiers;
    TextureSampleGradProjCompare_Texture3D_texture.type.modifierValues = TextureSampleGradProjCompare_Texture3D_texture_modifierValues;
    TextureSampleGradProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompare_Texture3D_sampler.type.modifiers = TextureSampleGradProjCompare_Texture3D_sampler_modifiers;
    TextureSampleGradProjCompare_Texture3D_sampler.type.modifierValues = TextureSampleGradProjCompare_Texture3D_sampler_modifierValues;
    TextureSampleGradProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompare_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompare_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompare_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompare_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleGradProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleGradProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison"_c;
    TextureSampleGradProjCompare_Texture3D.name = TextureSampleGradProjCompare_Texture3D_name;
    TextureSampleGradProjCompare_Texture3D.backendIndex = 2541;
    TextureSampleGradProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradProjCompare_Texture3D.parameters = TextureSampleGradProjCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D)->signature = "textureSampleGradProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D)->name = "textureSampleGradProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D)->nameWithVarNames = "textureSampleGradProjCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompare with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32
    SampledTextureSampleGradProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGradProjCompare_Texture3D_texture.type.modifiers = SampledTextureSampleGradProjCompare_Texture3D_texture_modifiers;
    SampledTextureSampleGradProjCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleGradProjCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleGradProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompare_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompare_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison"_c;
    SampledTextureSampleGradProjCompare_Texture3D.name = SampledTextureSampleGradProjCompare_Texture3D_name;
    SampledTextureSampleGradProjCompare_Texture3D.backendIndex = 2542;
    SampledTextureSampleGradProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture3D.parameters = SampledTextureSampleGradProjCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D)->signature = "textureSampleGradProjCompare(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D)->name = "textureSampleGradProjCompare(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D)->nameWithVarNames = "textureSampleGradProjCompare(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32, Float32
    TextureSampleGradProjCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleGradProjCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradProjCompareOffset_Texture1D_texture.type.modifiers = TextureSampleGradProjCompareOffset_Texture1D_texture_modifiers;
    TextureSampleGradProjCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleGradProjCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleGradProjCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleGradProjCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleGradProjCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleGradProjCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleGradProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompareOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompareOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleGradProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleGradProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleGradProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradProjCompareOffset_Texture1D.name = TextureSampleGradProjCompareOffset_Texture1D_name;
    TextureSampleGradProjCompareOffset_Texture1D.backendIndex = 2543;
    TextureSampleGradProjCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D.parameters = TextureSampleGradProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D)->signature = "textureSampleGradProjCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D)->name = "textureSampleGradProjCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D)->nameWithVarNames = "textureSampleGradProjCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleGradProjCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleGradProjCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleGradProjCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleGradProjCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleGradProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D.name = SampledTextureSampleGradProjCompareOffset_Texture1D_name;
    SampledTextureSampleGradProjCompareOffset_Texture1D.backendIndex = 2544;
    SampledTextureSampleGradProjCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D.parameters = SampledTextureSampleGradProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D)->signature = "textureSampleGradProjCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D)->name = "textureSampleGradProjCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D)->nameWithVarNames = "textureSampleGradProjCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompareOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32, Float32x2
    TextureSampleGradProjCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleGradProjCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradProjCompareOffset_Texture2D_texture.type.modifiers = TextureSampleGradProjCompareOffset_Texture2D_texture_modifiers;
    TextureSampleGradProjCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleGradProjCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleGradProjCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleGradProjCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleGradProjCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleGradProjCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleGradProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompareOffset_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompareOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompareOffset_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompareOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompareOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleGradProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleGradProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleGradProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradProjCompareOffset_Texture2D.name = TextureSampleGradProjCompareOffset_Texture2D_name;
    TextureSampleGradProjCompareOffset_Texture2D.backendIndex = 2545;
    TextureSampleGradProjCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture2D.parameters = TextureSampleGradProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D)->signature = "textureSampleGradProjCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32,f32x2) f32"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D)->name = "textureSampleGradProjCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D)->nameWithVarNames = "textureSampleGradProjCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompareOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleGradProjCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleGradProjCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleGradProjCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleGradProjCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleGradProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D.name = SampledTextureSampleGradProjCompareOffset_Texture2D_name;
    SampledTextureSampleGradProjCompareOffset_Texture2D.backendIndex = 2546;
    SampledTextureSampleGradProjCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D.parameters = SampledTextureSampleGradProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D)->signature = "textureSampleGradProjCompareOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32,f32x2) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D)->name = "textureSampleGradProjCompareOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D)->nameWithVarNames = "textureSampleGradProjCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompareOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32, Float32x3
    TextureSampleGradProjCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleGradProjCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradProjCompareOffset_Texture3D_texture.type.modifiers = TextureSampleGradProjCompareOffset_Texture3D_texture_modifiers;
    TextureSampleGradProjCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleGradProjCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleGradProjCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleGradProjCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleGradProjCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleGradProjCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleGradProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompareOffset_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompareOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompareOffset_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompareOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompareOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleGradProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleGradProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleGradProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradProjCompareOffset_Texture3D.name = TextureSampleGradProjCompareOffset_Texture3D_name;
    TextureSampleGradProjCompareOffset_Texture3D.backendIndex = 2547;
    TextureSampleGradProjCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture3D.parameters = TextureSampleGradProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D)->signature = "textureSampleGradProjCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32,f32x3) f32"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D)->name = "textureSampleGradProjCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D)->nameWithVarNames = "textureSampleGradProjCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompareOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleGradProjCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleGradProjCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleGradProjCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleGradProjCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleGradProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D.name = SampledTextureSampleGradProjCompareOffset_Texture3D_name;
    SampledTextureSampleGradProjCompareOffset_Texture3D.backendIndex = 2548;
    SampledTextureSampleGradProjCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D.parameters = SampledTextureSampleGradProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D)->signature = "textureSampleGradProjCompareOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32,f32x3) f32"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D)->name = "textureSampleGradProjCompareOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D)->nameWithVarNames = "textureSampleGradProjCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBias with Texture1D, Sampler, Float32, Float32
    TextureSampleBias_Texture1D_texture.name = "texture"_c;
    TextureSampleBias_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBias_Texture1D_texture.type.modifiers = TextureSampleBias_Texture1D_texture_modifiers;
    TextureSampleBias_Texture1D_texture.type.modifierValues = TextureSampleBias_Texture1D_texture_modifierValues;
    TextureSampleBias_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBias_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture1D_sampler.type.modifiers = TextureSampleBias_Texture1D_sampler_modifiers;
    TextureSampleBias_Texture1D_sampler.type.modifierValues = TextureSampleBias_Texture1D_sampler_modifierValues;
    TextureSampleBias_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture1D_bias.name = "bias"_c;
    TextureSampleBias_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture1D.documentation = "Sample a texture at coordinate with a mip bias"_c;
    TextureSampleBias_Texture1D.name = TextureSampleBias_Texture1D_name;
    TextureSampleBias_Texture1D.backendIndex = 2549;
    TextureSampleBias_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_Texture1D.parameters = TextureSampleBias_Texture1D_args;
    Symbol::Resolved(&TextureSampleBias_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBias_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture1D)->signature = "textureSampleBias(uniform *texture1D,uniform *sampler,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleBias_Texture1D)->name = "textureSampleBias(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture1D)->nameWithVarNames = "textureSampleBias(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, bias : f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with SampledTexture1D, Float32, Float32
    SampledTextureSampleBias_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleBias_Texture1D_texture.type.modifiers = SampledTextureSampleBias_Texture1D_texture_modifiers;
    SampledTextureSampleBias_Texture1D_texture.type.modifierValues = SampledTextureSampleBias_Texture1D_texture_modifierValues;
    SampledTextureSampleBias_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture1D.documentation = "Sample a texture at coordinate with a mip bias"_c;
    SampledTextureSampleBias_Texture1D.name = SampledTextureSampleBias_Texture1D_name;
    SampledTextureSampleBias_Texture1D.backendIndex = 2550;
    SampledTextureSampleBias_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_Texture1D.parameters = SampledTextureSampleBias_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D)->signature = "textureSampleBias(uniform *textureSampled1D,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D)->name = "textureSampleBias(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D)->nameWithVarNames = "textureSampleBias(texture : uniform *textureSampled1D, coordinate : f32, bias : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture2D, Sampler, Float32x2, Float32
    TextureSampleBias_Texture2D_texture.name = "texture"_c;
    TextureSampleBias_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBias_Texture2D_texture.type.modifiers = TextureSampleBias_Texture2D_texture_modifiers;
    TextureSampleBias_Texture2D_texture.type.modifierValues = TextureSampleBias_Texture2D_texture_modifierValues;
    TextureSampleBias_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBias_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture2D_sampler.type.modifiers = TextureSampleBias_Texture2D_sampler_modifiers;
    TextureSampleBias_Texture2D_sampler.type.modifierValues = TextureSampleBias_Texture2D_sampler_modifierValues;
    TextureSampleBias_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBias_Texture2D_bias.name = "bias"_c;
    TextureSampleBias_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture2D.documentation = "Sample a texture at coordinate with a mip bias"_c;
    TextureSampleBias_Texture2D.name = TextureSampleBias_Texture2D_name;
    TextureSampleBias_Texture2D.backendIndex = 2551;
    TextureSampleBias_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_Texture2D.parameters = TextureSampleBias_Texture2D_args;
    Symbol::Resolved(&TextureSampleBias_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBias_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBias_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture2D)->signature = "textureSampleBias(uniform *texture2D,uniform *sampler,f32x2,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleBias_Texture2D)->name = "textureSampleBias(uniform *texture2D,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture2D)->nameWithVarNames = "textureSampleBias(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, bias : f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with SampledTexture2D, Float32x2, Float32
    SampledTextureSampleBias_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleBias_Texture2D_texture.type.modifiers = SampledTextureSampleBias_Texture2D_texture_modifiers;
    SampledTextureSampleBias_Texture2D_texture.type.modifierValues = SampledTextureSampleBias_Texture2D_texture_modifierValues;
    SampledTextureSampleBias_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBias_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture2D.documentation = "Sample a texture at coordinate with a mip bias"_c;
    SampledTextureSampleBias_Texture2D.name = SampledTextureSampleBias_Texture2D_name;
    SampledTextureSampleBias_Texture2D.backendIndex = 2552;
    SampledTextureSampleBias_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_Texture2D.parameters = SampledTextureSampleBias_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D)->signature = "textureSampleBias(uniform *textureSampled2D,f32x2,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D)->name = "textureSampleBias(uniform *textureSampled2D,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D)->nameWithVarNames = "textureSampleBias(texture : uniform *textureSampled2D, coordinate : f32x2, bias : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture3D, Sampler, Float32x3, Float32
    TextureSampleBias_Texture3D_texture.name = "texture"_c;
    TextureSampleBias_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBias_Texture3D_texture.type.modifiers = TextureSampleBias_Texture3D_texture_modifiers;
    TextureSampleBias_Texture3D_texture.type.modifierValues = TextureSampleBias_Texture3D_texture_modifierValues;
    TextureSampleBias_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBias_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture3D_sampler.type.modifiers = TextureSampleBias_Texture3D_sampler_modifiers;
    TextureSampleBias_Texture3D_sampler.type.modifierValues = TextureSampleBias_Texture3D_sampler_modifierValues;
    TextureSampleBias_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBias_Texture3D_bias.name = "bias"_c;
    TextureSampleBias_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture3D.documentation = "Sample a texture at coordinate with a mip bias"_c;
    TextureSampleBias_Texture3D.name = TextureSampleBias_Texture3D_name;
    TextureSampleBias_Texture3D.backendIndex = 2553;
    TextureSampleBias_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_Texture3D.parameters = TextureSampleBias_Texture3D_args;
    Symbol::Resolved(&TextureSampleBias_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBias_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBias_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture3D)->signature = "textureSampleBias(uniform *texture3D,uniform *sampler,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleBias_Texture3D)->name = "textureSampleBias(uniform *texture3D,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture3D)->nameWithVarNames = "textureSampleBias(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, bias : f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with SampledTexture3D, Float32x3, Float32
    SampledTextureSampleBias_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleBias_Texture3D_texture.type.modifiers = SampledTextureSampleBias_Texture3D_texture_modifiers;
    SampledTextureSampleBias_Texture3D_texture.type.modifierValues = SampledTextureSampleBias_Texture3D_texture_modifierValues;
    SampledTextureSampleBias_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBias_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture3D.documentation = "Sample a texture at coordinate with a mip bias"_c;
    SampledTextureSampleBias_Texture3D.name = SampledTextureSampleBias_Texture3D_name;
    SampledTextureSampleBias_Texture3D.backendIndex = 2554;
    SampledTextureSampleBias_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_Texture3D.parameters = SampledTextureSampleBias_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D)->signature = "textureSampleBias(uniform *textureSampled3D,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D)->name = "textureSampleBias(uniform *textureSampled3D,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D)->nameWithVarNames = "textureSampleBias(texture : uniform *textureSampled3D, coordinate : f32x3, bias : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with TextureCube, Sampler, Float32x3, Float32
    TextureSampleBias_TextureCube_texture.name = "texture"_c;
    TextureSampleBias_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSampleBias_TextureCube_texture.type.modifiers = TextureSampleBias_TextureCube_texture_modifiers;
    TextureSampleBias_TextureCube_texture.type.modifierValues = TextureSampleBias_TextureCube_texture_modifierValues;
    TextureSampleBias_TextureCube_sampler.name = "sampler"_c;
    TextureSampleBias_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_TextureCube_sampler.type.modifiers = TextureSampleBias_TextureCube_sampler_modifiers;
    TextureSampleBias_TextureCube_sampler.type.modifierValues = TextureSampleBias_TextureCube_sampler_modifierValues;
    TextureSampleBias_TextureCube_coordinate.name = "coordinate"_c;
    TextureSampleBias_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBias_TextureCube_bias.name = "bias"_c;
    TextureSampleBias_TextureCube_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_TextureCube.documentation = "Sample a texture at coordinate with a mip bias"_c;
    TextureSampleBias_TextureCube.name = TextureSampleBias_TextureCube_name;
    TextureSampleBias_TextureCube.backendIndex = 2555;
    TextureSampleBias_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_TextureCube.parameters = TextureSampleBias_TextureCube_args;
    Symbol::Resolved(&TextureSampleBias_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSampleBias_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBias_TextureCube_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_TextureCube)->signature = "textureSampleBias(uniform *textureCube,uniform *sampler,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleBias_TextureCube)->name = "textureSampleBias(uniform *textureCube,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_TextureCube)->nameWithVarNames = "textureSampleBias(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : f32x3, bias : f32)"_c;
    Symbol::Resolved(&TextureSampleBias_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with SampledTextureCube, Float32x3, Float32
    SampledTextureSampleBias_TextureCube_texture.name = "texture"_c;
    SampledTextureSampleBias_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureSampleBias_TextureCube_texture.type.modifiers = SampledTextureSampleBias_TextureCube_texture_modifiers;
    SampledTextureSampleBias_TextureCube_texture.type.modifierValues = SampledTextureSampleBias_TextureCube_texture_modifierValues;
    SampledTextureSampleBias_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBias_TextureCube_bias.name = "bias"_c;
    SampledTextureSampleBias_TextureCube_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_TextureCube.documentation = "Sample a texture at coordinate with a mip bias"_c;
    SampledTextureSampleBias_TextureCube.name = SampledTextureSampleBias_TextureCube_name;
    SampledTextureSampleBias_TextureCube.backendIndex = 2556;
    SampledTextureSampleBias_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_TextureCube.parameters = SampledTextureSampleBias_TextureCube_args;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube)->signature = "textureSampleBias(uniform *textureSampledCube,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube)->name = "textureSampleBias(uniform *textureSampledCube,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube)->nameWithVarNames = "textureSampleBias(texture : uniform *textureSampledCube, coordinate : f32x3, bias : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture1DArray, Sampler, Float32x2, Float32
    TextureSampleBias_Texture1DArray_texture.name = "texture"_c;
    TextureSampleBias_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleBias_Texture1DArray_texture.type.modifiers = TextureSampleBias_Texture1DArray_texture_modifiers;
    TextureSampleBias_Texture1DArray_texture.type.modifierValues = TextureSampleBias_Texture1DArray_texture_modifierValues;
    TextureSampleBias_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleBias_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture1DArray_sampler.type.modifiers = TextureSampleBias_Texture1DArray_sampler_modifiers;
    TextureSampleBias_Texture1DArray_sampler.type.modifierValues = TextureSampleBias_Texture1DArray_sampler_modifierValues;
    TextureSampleBias_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBias_Texture1DArray_bias.name = "bias"_c;
    TextureSampleBias_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture1DArray.documentation = "Sample a texture at coordinate with a mip bias"_c;
    TextureSampleBias_Texture1DArray.name = TextureSampleBias_Texture1DArray_name;
    TextureSampleBias_Texture1DArray.backendIndex = 2557;
    TextureSampleBias_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_Texture1DArray.parameters = TextureSampleBias_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray)->signature = "textureSampleBias(uniform *texture1DArray,uniform *sampler,f32x2,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray)->name = "textureSampleBias(uniform *texture1DArray,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray)->nameWithVarNames = "textureSampleBias(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, bias : f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with SampledTexture1DArray, Float32x2, Float32
    SampledTextureSampleBias_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleBias_Texture1DArray_texture.type.modifiers = SampledTextureSampleBias_Texture1DArray_texture_modifiers;
    SampledTextureSampleBias_Texture1DArray_texture.type.modifierValues = SampledTextureSampleBias_Texture1DArray_texture_modifierValues;
    SampledTextureSampleBias_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBias_Texture1DArray_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture1DArray.documentation = "Sample a texture at coordinate with a mip bias"_c;
    SampledTextureSampleBias_Texture1DArray.name = SampledTextureSampleBias_Texture1DArray_name;
    SampledTextureSampleBias_Texture1DArray.backendIndex = 2558;
    SampledTextureSampleBias_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_Texture1DArray.parameters = SampledTextureSampleBias_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray)->signature = "textureSampleBias(uniform *textureSampled1DArray,f32x2,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray)->name = "textureSampleBias(uniform *textureSampled1DArray,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray)->nameWithVarNames = "textureSampleBias(texture : uniform *textureSampled1DArray, coordinate : f32x2, bias : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture2DArray, Sampler, Float32x3, Float32
    TextureSampleBias_Texture2DArray_texture.name = "texture"_c;
    TextureSampleBias_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleBias_Texture2DArray_texture.type.modifiers = TextureSampleBias_Texture2DArray_texture_modifiers;
    TextureSampleBias_Texture2DArray_texture.type.modifierValues = TextureSampleBias_Texture2DArray_texture_modifierValues;
    TextureSampleBias_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleBias_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture2DArray_sampler.type.modifiers = TextureSampleBias_Texture2DArray_sampler_modifiers;
    TextureSampleBias_Texture2DArray_sampler.type.modifierValues = TextureSampleBias_Texture2DArray_sampler_modifierValues;
    TextureSampleBias_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBias_Texture2DArray_bias.name = "bias"_c;
    TextureSampleBias_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture2DArray.documentation = "Sample a texture at coordinate with a mip bias"_c;
    TextureSampleBias_Texture2DArray.name = TextureSampleBias_Texture2DArray_name;
    TextureSampleBias_Texture2DArray.backendIndex = 2559;
    TextureSampleBias_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_Texture2DArray.parameters = TextureSampleBias_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray)->signature = "textureSampleBias(uniform *texture2DArray,uniform *sampler,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray)->name = "textureSampleBias(uniform *texture2DArray,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray)->nameWithVarNames = "textureSampleBias(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, bias : f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with SampledTexture2DArray, Float32x3, Float32
    SampledTextureSampleBias_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleBias_Texture2DArray_texture.type.modifiers = SampledTextureSampleBias_Texture2DArray_texture_modifiers;
    SampledTextureSampleBias_Texture2DArray_texture.type.modifierValues = SampledTextureSampleBias_Texture2DArray_texture_modifierValues;
    SampledTextureSampleBias_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBias_Texture2DArray_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture2DArray.documentation = "Sample a texture at coordinate with a mip bias"_c;
    SampledTextureSampleBias_Texture2DArray.name = SampledTextureSampleBias_Texture2DArray_name;
    SampledTextureSampleBias_Texture2DArray.backendIndex = 2560;
    SampledTextureSampleBias_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_Texture2DArray.parameters = SampledTextureSampleBias_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray)->signature = "textureSampleBias(uniform *textureSampled2DArray,f32x3,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray)->name = "textureSampleBias(uniform *textureSampled2DArray,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray)->nameWithVarNames = "textureSampleBias(texture : uniform *textureSampled2DArray, coordinate : f32x3, bias : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with TextureCubeArray, Sampler, Float32x4, Float32
    TextureSampleBias_TextureCubeArray_texture.name = "texture"_c;
    TextureSampleBias_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSampleBias_TextureCubeArray_texture.type.modifiers = TextureSampleBias_TextureCubeArray_texture_modifiers;
    TextureSampleBias_TextureCubeArray_texture.type.modifierValues = TextureSampleBias_TextureCubeArray_texture_modifierValues;
    TextureSampleBias_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSampleBias_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_TextureCubeArray_sampler.type.modifiers = TextureSampleBias_TextureCubeArray_sampler_modifiers;
    TextureSampleBias_TextureCubeArray_sampler.type.modifierValues = TextureSampleBias_TextureCubeArray_sampler_modifierValues;
    TextureSampleBias_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSampleBias_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSampleBias_TextureCubeArray_bias.name = "bias"_c;
    TextureSampleBias_TextureCubeArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_TextureCubeArray.documentation = "Sample a texture at coordinate with a mip bias"_c;
    TextureSampleBias_TextureCubeArray.name = TextureSampleBias_TextureCubeArray_name;
    TextureSampleBias_TextureCubeArray.backendIndex = 2561;
    TextureSampleBias_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_TextureCubeArray.parameters = TextureSampleBias_TextureCubeArray_args;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray)->signature = "textureSampleBias(uniform *textureCubeArray,uniform *sampler,f32x4,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray)->name = "textureSampleBias(uniform *textureCubeArray,uniform *sampler,f32x4,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray)->nameWithVarNames = "textureSampleBias(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : f32x4, bias : f32)"_c;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with SampledTextureCubeArray, Float32x4, Float32
    SampledTextureSampleBias_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSampleBias_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureSampleBias_TextureCubeArray_texture.type.modifiers = SampledTextureSampleBias_TextureCubeArray_texture_modifiers;
    SampledTextureSampleBias_TextureCubeArray_texture.type.modifierValues = SampledTextureSampleBias_TextureCubeArray_texture_modifierValues;
    SampledTextureSampleBias_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleBias_TextureCubeArray_bias.name = "bias"_c;
    SampledTextureSampleBias_TextureCubeArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_TextureCubeArray.documentation = "Sample a texture at coordinate with a mip bias"_c;
    SampledTextureSampleBias_TextureCubeArray.name = SampledTextureSampleBias_TextureCubeArray_name;
    SampledTextureSampleBias_TextureCubeArray.backendIndex = 2562;
    SampledTextureSampleBias_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_TextureCubeArray.parameters = SampledTextureSampleBias_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray)->signature = "textureSampleBias(uniform *textureSampledCubeArray,f32x4,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray)->name = "textureSampleBias(uniform *textureSampledCubeArray,f32x4,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray)->nameWithVarNames = "textureSampleBias(texture : uniform *textureSampledCubeArray, coordinate : f32x4, bias : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleBiasOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasOffset_Texture1D_texture.type.modifiers = TextureSampleBiasOffset_Texture1D_texture_modifiers;
    TextureSampleBiasOffset_Texture1D_texture.type.modifierValues = TextureSampleBiasOffset_Texture1D_texture_modifierValues;
    TextureSampleBiasOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasOffset_Texture1D_sampler.type.modifiers = TextureSampleBiasOffset_Texture1D_sampler_modifiers;
    TextureSampleBiasOffset_Texture1D_sampler.type.modifierValues = TextureSampleBiasOffset_Texture1D_sampler_modifierValues;
    TextureSampleBiasOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleBiasOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    TextureSampleBiasOffset_Texture1D.name = TextureSampleBiasOffset_Texture1D_name;
    TextureSampleBiasOffset_Texture1D.backendIndex = 2563;
    TextureSampleBiasOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasOffset_Texture1D.parameters = TextureSampleBiasOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D)->signature = "textureSampleBiasOffset(uniform *texture1D,uniform *sampler,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D)->name = "textureSampleBiasOffset(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, bias : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleBiasOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleBiasOffset_Texture1D_texture.type.modifiers = SampledTextureSampleBiasOffset_Texture1D_texture_modifiers;
    SampledTextureSampleBiasOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleBiasOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleBiasOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleBiasOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasOffset_Texture1D.name = SampledTextureSampleBiasOffset_Texture1D_name;
    SampledTextureSampleBiasOffset_Texture1D.backendIndex = 2564;
    SampledTextureSampleBiasOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasOffset_Texture1D.parameters = SampledTextureSampleBiasOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D)->signature = "textureSampleBiasOffset(uniform *textureSampled1D,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D)->name = "textureSampleBiasOffset(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *textureSampled1D, coordinate : f32, bias : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
    TextureSampleBiasOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasOffset_Texture2D_texture.type.modifiers = TextureSampleBiasOffset_Texture2D_texture_modifiers;
    TextureSampleBiasOffset_Texture2D_texture.type.modifierValues = TextureSampleBiasOffset_Texture2D_texture_modifierValues;
    TextureSampleBiasOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasOffset_Texture2D_sampler.type.modifiers = TextureSampleBiasOffset_Texture2D_sampler_modifiers;
    TextureSampleBiasOffset_Texture2D_sampler.type.modifierValues = TextureSampleBiasOffset_Texture2D_sampler_modifierValues;
    TextureSampleBiasOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasOffset_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleBiasOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasOffset_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    TextureSampleBiasOffset_Texture2D.name = TextureSampleBiasOffset_Texture2D_name;
    TextureSampleBiasOffset_Texture2D.backendIndex = 2565;
    TextureSampleBiasOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasOffset_Texture2D.parameters = TextureSampleBiasOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D)->signature = "textureSampleBiasOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D)->name = "textureSampleBiasOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, bias : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with SampledTexture2D, Float32x2, Float32, Float32x2
    SampledTextureSampleBiasOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleBiasOffset_Texture2D_texture.type.modifiers = SampledTextureSampleBiasOffset_Texture2D_texture_modifiers;
    SampledTextureSampleBiasOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleBiasOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleBiasOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasOffset_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleBiasOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasOffset_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasOffset_Texture2D.name = SampledTextureSampleBiasOffset_Texture2D_name;
    SampledTextureSampleBiasOffset_Texture2D.backendIndex = 2566;
    SampledTextureSampleBiasOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasOffset_Texture2D.parameters = SampledTextureSampleBiasOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D)->signature = "textureSampleBiasOffset(uniform *textureSampled2D,f32x2,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D)->name = "textureSampleBiasOffset(uniform *textureSampled2D,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *textureSampled2D, coordinate : f32x2, bias : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
    TextureSampleBiasOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasOffset_Texture3D_texture.type.modifiers = TextureSampleBiasOffset_Texture3D_texture_modifiers;
    TextureSampleBiasOffset_Texture3D_texture.type.modifierValues = TextureSampleBiasOffset_Texture3D_texture_modifierValues;
    TextureSampleBiasOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasOffset_Texture3D_sampler.type.modifiers = TextureSampleBiasOffset_Texture3D_sampler_modifiers;
    TextureSampleBiasOffset_Texture3D_sampler.type.modifierValues = TextureSampleBiasOffset_Texture3D_sampler_modifierValues;
    TextureSampleBiasOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasOffset_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleBiasOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasOffset_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    TextureSampleBiasOffset_Texture3D.name = TextureSampleBiasOffset_Texture3D_name;
    TextureSampleBiasOffset_Texture3D.backendIndex = 2567;
    TextureSampleBiasOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasOffset_Texture3D.parameters = TextureSampleBiasOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D)->signature = "textureSampleBiasOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D)->name = "textureSampleBiasOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, bias : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with SampledTexture3D, Float32x3, Float32, Float32x3
    SampledTextureSampleBiasOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleBiasOffset_Texture3D_texture.type.modifiers = SampledTextureSampleBiasOffset_Texture3D_texture_modifiers;
    SampledTextureSampleBiasOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleBiasOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleBiasOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasOffset_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleBiasOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasOffset_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasOffset_Texture3D.name = SampledTextureSampleBiasOffset_Texture3D_name;
    SampledTextureSampleBiasOffset_Texture3D.backendIndex = 2568;
    SampledTextureSampleBiasOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasOffset_Texture3D.parameters = SampledTextureSampleBiasOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D)->signature = "textureSampleBiasOffset(uniform *textureSampled3D,f32x3,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D)->name = "textureSampleBiasOffset(uniform *textureSampled3D,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *textureSampled3D, coordinate : f32x3, bias : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
    TextureSampleBiasOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleBiasOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleBiasOffset_Texture1DArray_texture.type.modifiers = TextureSampleBiasOffset_Texture1DArray_texture_modifiers;
    TextureSampleBiasOffset_Texture1DArray_texture.type.modifierValues = TextureSampleBiasOffset_Texture1DArray_texture_modifierValues;
    TextureSampleBiasOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleBiasOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasOffset_Texture1DArray_sampler.type.modifiers = TextureSampleBiasOffset_Texture1DArray_sampler_modifiers;
    TextureSampleBiasOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleBiasOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleBiasOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasOffset_Texture1DArray_bias.name = "bias"_c;
    TextureSampleBiasOffset_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleBiasOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasOffset_Texture1DArray.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    TextureSampleBiasOffset_Texture1DArray.name = TextureSampleBiasOffset_Texture1DArray_name;
    TextureSampleBiasOffset_Texture1DArray.backendIndex = 2569;
    TextureSampleBiasOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasOffset_Texture1DArray.parameters = TextureSampleBiasOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray)->signature = "textureSampleBiasOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray)->name = "textureSampleBiasOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, bias : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with SampledTexture1DArray, Float32x2, Float32, Float32x2
    SampledTextureSampleBiasOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleBiasOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleBiasOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleBiasOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleBiasOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleBiasOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasOffset_Texture1DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasOffset_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleBiasOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasOffset_Texture1DArray.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasOffset_Texture1DArray.name = SampledTextureSampleBiasOffset_Texture1DArray_name;
    SampledTextureSampleBiasOffset_Texture1DArray.backendIndex = 2570;
    SampledTextureSampleBiasOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasOffset_Texture1DArray.parameters = SampledTextureSampleBiasOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray)->signature = "textureSampleBiasOffset(uniform *textureSampled1DArray,f32x2,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray)->name = "textureSampleBiasOffset(uniform *textureSampled1DArray,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, bias : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
    TextureSampleBiasOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleBiasOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleBiasOffset_Texture2DArray_texture.type.modifiers = TextureSampleBiasOffset_Texture2DArray_texture_modifiers;
    TextureSampleBiasOffset_Texture2DArray_texture.type.modifierValues = TextureSampleBiasOffset_Texture2DArray_texture_modifierValues;
    TextureSampleBiasOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleBiasOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasOffset_Texture2DArray_sampler.type.modifiers = TextureSampleBiasOffset_Texture2DArray_sampler_modifiers;
    TextureSampleBiasOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleBiasOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleBiasOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasOffset_Texture2DArray_bias.name = "bias"_c;
    TextureSampleBiasOffset_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleBiasOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasOffset_Texture2DArray.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    TextureSampleBiasOffset_Texture2DArray.name = TextureSampleBiasOffset_Texture2DArray_name;
    TextureSampleBiasOffset_Texture2DArray.backendIndex = 2571;
    TextureSampleBiasOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasOffset_Texture2DArray.parameters = TextureSampleBiasOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray)->signature = "textureSampleBiasOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray)->name = "textureSampleBiasOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, bias : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with SampledTexture2DArray, Float32x3, Float32, Float32x3
    SampledTextureSampleBiasOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleBiasOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleBiasOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleBiasOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleBiasOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleBiasOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasOffset_Texture2DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasOffset_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleBiasOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasOffset_Texture2DArray.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasOffset_Texture2DArray.name = SampledTextureSampleBiasOffset_Texture2DArray_name;
    SampledTextureSampleBiasOffset_Texture2DArray.backendIndex = 2572;
    SampledTextureSampleBiasOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasOffset_Texture2DArray.parameters = SampledTextureSampleBiasOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray)->signature = "textureSampleBiasOffset(uniform *textureSampled2DArray,f32x3,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray)->name = "textureSampleBiasOffset(uniform *textureSampled2DArray,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, bias : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleBiasProj_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasProj_Texture1D_texture.type.modifiers = TextureSampleBiasProj_Texture1D_texture_modifiers;
    TextureSampleBiasProj_Texture1D_texture.type.modifierValues = TextureSampleBiasProj_Texture1D_texture_modifierValues;
    TextureSampleBiasProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProj_Texture1D_sampler.type.modifiers = TextureSampleBiasProj_Texture1D_sampler_modifiers;
    TextureSampleBiasProj_Texture1D_sampler.type.modifierValues = TextureSampleBiasProj_Texture1D_sampler_modifierValues;
    TextureSampleBiasProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasProj_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture1D_proj.name = "proj"_c;
    TextureSampleBiasProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with projection"_c;
    TextureSampleBiasProj_Texture1D.name = TextureSampleBiasProj_Texture1D_name;
    TextureSampleBiasProj_Texture1D.backendIndex = 2573;
    TextureSampleBiasProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProj_Texture1D.parameters = TextureSampleBiasProj_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D)->signature = "textureSampleBiasProj(uniform *texture1D,uniform *sampler,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D)->name = "textureSampleBiasProj(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D)->nameWithVarNames = "textureSampleBiasProj(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, bias : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleBiasProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasProj_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleBiasProj_Texture1D_texture.type.modifiers = SampledTextureSampleBiasProj_Texture1D_texture_modifiers;
    SampledTextureSampleBiasProj_Texture1D_texture.type.modifierValues = SampledTextureSampleBiasProj_Texture1D_texture_modifierValues;
    SampledTextureSampleBiasProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasProj_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleBiasProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with projection"_c;
    SampledTextureSampleBiasProj_Texture1D.name = SampledTextureSampleBiasProj_Texture1D_name;
    SampledTextureSampleBiasProj_Texture1D.backendIndex = 2574;
    SampledTextureSampleBiasProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProj_Texture1D.parameters = SampledTextureSampleBiasProj_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D)->signature = "textureSampleBiasProj(uniform *textureSampled1D,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D)->name = "textureSampleBiasProj(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D)->nameWithVarNames = "textureSampleBiasProj(texture : uniform *textureSampled1D, coordinate : f32, bias : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleBiasProj_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasProj_Texture2D_texture.type.modifiers = TextureSampleBiasProj_Texture2D_texture_modifiers;
    TextureSampleBiasProj_Texture2D_texture.type.modifierValues = TextureSampleBiasProj_Texture2D_texture_modifierValues;
    TextureSampleBiasProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProj_Texture2D_sampler.type.modifiers = TextureSampleBiasProj_Texture2D_sampler_modifiers;
    TextureSampleBiasProj_Texture2D_sampler.type.modifierValues = TextureSampleBiasProj_Texture2D_sampler_modifierValues;
    TextureSampleBiasProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProj_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasProj_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture2D_proj.name = "proj"_c;
    TextureSampleBiasProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with projection"_c;
    TextureSampleBiasProj_Texture2D.name = TextureSampleBiasProj_Texture2D_name;
    TextureSampleBiasProj_Texture2D.backendIndex = 2575;
    TextureSampleBiasProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProj_Texture2D.parameters = TextureSampleBiasProj_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D)->signature = "textureSampleBiasProj(uniform *texture2D,uniform *sampler,f32x2,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D)->name = "textureSampleBiasProj(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D)->nameWithVarNames = "textureSampleBiasProj(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, bias : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with SampledTexture2D, Float32x2, Float32, Float32
    SampledTextureSampleBiasProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasProj_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleBiasProj_Texture2D_texture.type.modifiers = SampledTextureSampleBiasProj_Texture2D_texture_modifiers;
    SampledTextureSampleBiasProj_Texture2D_texture.type.modifierValues = SampledTextureSampleBiasProj_Texture2D_texture_modifierValues;
    SampledTextureSampleBiasProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProj_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasProj_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleBiasProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with projection"_c;
    SampledTextureSampleBiasProj_Texture2D.name = SampledTextureSampleBiasProj_Texture2D_name;
    SampledTextureSampleBiasProj_Texture2D.backendIndex = 2576;
    SampledTextureSampleBiasProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProj_Texture2D.parameters = SampledTextureSampleBiasProj_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D)->signature = "textureSampleBiasProj(uniform *textureSampled2D,f32x2,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D)->name = "textureSampleBiasProj(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D)->nameWithVarNames = "textureSampleBiasProj(texture : uniform *textureSampled2D, coordinate : f32x2, bias : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with Texture3D, Sampler, Float32x3, Float32, Float32
    TextureSampleBiasProj_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasProj_Texture3D_texture.type.modifiers = TextureSampleBiasProj_Texture3D_texture_modifiers;
    TextureSampleBiasProj_Texture3D_texture.type.modifierValues = TextureSampleBiasProj_Texture3D_texture_modifierValues;
    TextureSampleBiasProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProj_Texture3D_sampler.type.modifiers = TextureSampleBiasProj_Texture3D_sampler_modifiers;
    TextureSampleBiasProj_Texture3D_sampler.type.modifierValues = TextureSampleBiasProj_Texture3D_sampler_modifierValues;
    TextureSampleBiasProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProj_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasProj_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture3D_proj.name = "proj"_c;
    TextureSampleBiasProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with projection"_c;
    TextureSampleBiasProj_Texture3D.name = TextureSampleBiasProj_Texture3D_name;
    TextureSampleBiasProj_Texture3D.backendIndex = 2577;
    TextureSampleBiasProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProj_Texture3D.parameters = TextureSampleBiasProj_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D)->signature = "textureSampleBiasProj(uniform *texture3D,uniform *sampler,f32x3,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D)->name = "textureSampleBiasProj(uniform *texture3D,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D)->nameWithVarNames = "textureSampleBiasProj(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, bias : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with SampledTexture3D, Float32x3, Float32, Float32
    SampledTextureSampleBiasProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasProj_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleBiasProj_Texture3D_texture.type.modifiers = SampledTextureSampleBiasProj_Texture3D_texture_modifiers;
    SampledTextureSampleBiasProj_Texture3D_texture.type.modifierValues = SampledTextureSampleBiasProj_Texture3D_texture_modifierValues;
    SampledTextureSampleBiasProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProj_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasProj_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleBiasProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with projection"_c;
    SampledTextureSampleBiasProj_Texture3D.name = SampledTextureSampleBiasProj_Texture3D_name;
    SampledTextureSampleBiasProj_Texture3D.backendIndex = 2578;
    SampledTextureSampleBiasProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProj_Texture3D.parameters = SampledTextureSampleBiasProj_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D)->signature = "textureSampleBiasProj(uniform *textureSampled3D,f32x3,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D)->name = "textureSampleBiasProj(uniform *textureSampled3D,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D)->nameWithVarNames = "textureSampleBiasProj(texture : uniform *textureSampled3D, coordinate : f32x3, bias : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleBiasProjOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasProjOffset_Texture1D_texture.type.modifiers = TextureSampleBiasProjOffset_Texture1D_texture_modifiers;
    TextureSampleBiasProjOffset_Texture1D_texture.type.modifierValues = TextureSampleBiasProjOffset_Texture1D_texture_modifierValues;
    TextureSampleBiasProjOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasProjOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjOffset_Texture1D_sampler.type.modifiers = TextureSampleBiasProjOffset_Texture1D_sampler_modifiers;
    TextureSampleBiasProjOffset_Texture1D_sampler.type.modifierValues = TextureSampleBiasProjOffset_Texture1D_sampler_modifierValues;
    TextureSampleBiasProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasProjOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleBiasProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleBiasProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with projection with an offset applied to the coordinate"_c;
    TextureSampleBiasProjOffset_Texture1D.name = TextureSampleBiasProjOffset_Texture1D_name;
    TextureSampleBiasProjOffset_Texture1D.backendIndex = 2579;
    TextureSampleBiasProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProjOffset_Texture1D.parameters = TextureSampleBiasProjOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D)->signature = "textureSampleBiasProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D)->name = "textureSampleBiasProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D)->nameWithVarNames = "textureSampleBiasProjOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, bias : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleBiasProjOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleBiasProjOffset_Texture1D_texture.type.modifiers = SampledTextureSampleBiasProjOffset_Texture1D_texture_modifiers;
    SampledTextureSampleBiasProjOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleBiasProjOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleBiasProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleBiasProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasProjOffset_Texture1D.name = SampledTextureSampleBiasProjOffset_Texture1D_name;
    SampledTextureSampleBiasProjOffset_Texture1D.backendIndex = 2580;
    SampledTextureSampleBiasProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProjOffset_Texture1D.parameters = SampledTextureSampleBiasProjOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D)->signature = "textureSampleBiasProjOffset(uniform *textureSampled1D,f32,f32,f32,f32) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D)->name = "textureSampleBiasProjOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D)->nameWithVarNames = "textureSampleBiasProjOffset(texture : uniform *textureSampled1D, coordinate : f32, bias : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleBiasProjOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasProjOffset_Texture2D_texture.type.modifiers = TextureSampleBiasProjOffset_Texture2D_texture_modifiers;
    TextureSampleBiasProjOffset_Texture2D_texture.type.modifierValues = TextureSampleBiasProjOffset_Texture2D_texture_modifierValues;
    TextureSampleBiasProjOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasProjOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjOffset_Texture2D_sampler.type.modifiers = TextureSampleBiasProjOffset_Texture2D_sampler_modifiers;
    TextureSampleBiasProjOffset_Texture2D_sampler.type.modifierValues = TextureSampleBiasProjOffset_Texture2D_sampler_modifierValues;
    TextureSampleBiasProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProjOffset_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasProjOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleBiasProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleBiasProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProjOffset_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with projection with an offset applied to the coordinate"_c;
    TextureSampleBiasProjOffset_Texture2D.name = TextureSampleBiasProjOffset_Texture2D_name;
    TextureSampleBiasProjOffset_Texture2D.backendIndex = 2581;
    TextureSampleBiasProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProjOffset_Texture2D.parameters = TextureSampleBiasProjOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D)->signature = "textureSampleBiasProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D)->name = "textureSampleBiasProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D)->nameWithVarNames = "textureSampleBiasProjOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, bias : f32, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleBiasProjOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleBiasProjOffset_Texture2D_texture.type.modifiers = SampledTextureSampleBiasProjOffset_Texture2D_texture_modifiers;
    SampledTextureSampleBiasProjOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleBiasProjOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleBiasProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProjOffset_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleBiasProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProjOffset_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasProjOffset_Texture2D.name = SampledTextureSampleBiasProjOffset_Texture2D_name;
    SampledTextureSampleBiasProjOffset_Texture2D.backendIndex = 2582;
    SampledTextureSampleBiasProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProjOffset_Texture2D.parameters = SampledTextureSampleBiasProjOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D)->signature = "textureSampleBiasProjOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D)->name = "textureSampleBiasProjOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D)->nameWithVarNames = "textureSampleBiasProjOffset(texture : uniform *textureSampled2D, coordinate : f32x2, bias : f32, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleBiasProjOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasProjOffset_Texture3D_texture.type.modifiers = TextureSampleBiasProjOffset_Texture3D_texture_modifiers;
    TextureSampleBiasProjOffset_Texture3D_texture.type.modifierValues = TextureSampleBiasProjOffset_Texture3D_texture_modifierValues;
    TextureSampleBiasProjOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasProjOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjOffset_Texture3D_sampler.type.modifiers = TextureSampleBiasProjOffset_Texture3D_sampler_modifiers;
    TextureSampleBiasProjOffset_Texture3D_sampler.type.modifierValues = TextureSampleBiasProjOffset_Texture3D_sampler_modifierValues;
    TextureSampleBiasProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProjOffset_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasProjOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleBiasProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleBiasProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProjOffset_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with projection with an offset applied to the coordinate"_c;
    TextureSampleBiasProjOffset_Texture3D.name = TextureSampleBiasProjOffset_Texture3D_name;
    TextureSampleBiasProjOffset_Texture3D.backendIndex = 2583;
    TextureSampleBiasProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProjOffset_Texture3D.parameters = TextureSampleBiasProjOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D)->signature = "textureSampleBiasProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D)->name = "textureSampleBiasProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D)->nameWithVarNames = "textureSampleBiasProjOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, bias : f32, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleBiasProjOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleBiasProjOffset_Texture3D_texture.type.modifiers = SampledTextureSampleBiasProjOffset_Texture3D_texture_modifiers;
    SampledTextureSampleBiasProjOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleBiasProjOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleBiasProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProjOffset_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleBiasProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProjOffset_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasProjOffset_Texture3D.name = SampledTextureSampleBiasProjOffset_Texture3D_name;
    SampledTextureSampleBiasProjOffset_Texture3D.backendIndex = 2584;
    SampledTextureSampleBiasProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProjOffset_Texture3D.parameters = SampledTextureSampleBiasProjOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D)->signature = "textureSampleBiasProjOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3) f32x4"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D)->name = "textureSampleBiasProjOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D)->nameWithVarNames = "textureSampleBiasProjOffset(texture : uniform *textureSampled3D, coordinate : f32x3, bias : f32, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompare with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleBiasCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasCompare_Texture1D_texture.type.modifiers = TextureSampleBiasCompare_Texture1D_texture_modifiers;
    TextureSampleBiasCompare_Texture1D_texture.type.modifierValues = TextureSampleBiasCompare_Texture1D_texture_modifierValues;
    TextureSampleBiasCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture1D_sampler.type.modifiers = TextureSampleBiasCompare_Texture1D_sampler_modifiers;
    TextureSampleBiasCompare_Texture1D_sampler.type.modifierValues = TextureSampleBiasCompare_Texture1D_sampler_modifierValues;
    TextureSampleBiasCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    TextureSampleBiasCompare_Texture1D.name = TextureSampleBiasCompare_Texture1D_name;
    TextureSampleBiasCompare_Texture1D.backendIndex = 2585;
    TextureSampleBiasCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompare_Texture1D.parameters = TextureSampleBiasCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D)->signature = "textureSampleBiasCompare(uniform *texture1D,uniform *sampler,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D)->name = "textureSampleBiasCompare(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleBiasCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleBiasCompare_Texture1D_texture.type.modifiers = SampledTextureSampleBiasCompare_Texture1D_texture_modifiers;
    SampledTextureSampleBiasCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleBiasCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleBiasCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    SampledTextureSampleBiasCompare_Texture1D.name = SampledTextureSampleBiasCompare_Texture1D_name;
    SampledTextureSampleBiasCompare_Texture1D.backendIndex = 2586;
    SampledTextureSampleBiasCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1D.parameters = SampledTextureSampleBiasCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D)->signature = "textureSampleBiasCompare(uniform *textureSampled1D,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D)->name = "textureSampleBiasCompare(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *textureSampled1D, coordinate : f32, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleBiasCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasCompare_Texture2D_texture.type.modifiers = TextureSampleBiasCompare_Texture2D_texture_modifiers;
    TextureSampleBiasCompare_Texture2D_texture.type.modifierValues = TextureSampleBiasCompare_Texture2D_texture_modifierValues;
    TextureSampleBiasCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture2D_sampler.type.modifiers = TextureSampleBiasCompare_Texture2D_sampler_modifiers;
    TextureSampleBiasCompare_Texture2D_sampler.type.modifierValues = TextureSampleBiasCompare_Texture2D_sampler_modifierValues;
    TextureSampleBiasCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompare_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    TextureSampleBiasCompare_Texture2D.name = TextureSampleBiasCompare_Texture2D_name;
    TextureSampleBiasCompare_Texture2D.backendIndex = 2587;
    TextureSampleBiasCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompare_Texture2D.parameters = TextureSampleBiasCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D)->signature = "textureSampleBiasCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D)->name = "textureSampleBiasCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with SampledTexture2D, Float32x2, Float32, Float32
    SampledTextureSampleBiasCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleBiasCompare_Texture2D_texture.type.modifiers = SampledTextureSampleBiasCompare_Texture2D_texture_modifiers;
    SampledTextureSampleBiasCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleBiasCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleBiasCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompare_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    SampledTextureSampleBiasCompare_Texture2D.name = SampledTextureSampleBiasCompare_Texture2D_name;
    SampledTextureSampleBiasCompare_Texture2D.backendIndex = 2588;
    SampledTextureSampleBiasCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2D.parameters = SampledTextureSampleBiasCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D)->signature = "textureSampleBiasCompare(uniform *textureSampled2D,f32x2,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D)->name = "textureSampleBiasCompare(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *textureSampled2D, coordinate : f32x2, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with Texture3D, Sampler, Float32x3, Float32, Float32
    TextureSampleBiasCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasCompare_Texture3D_texture.type.modifiers = TextureSampleBiasCompare_Texture3D_texture_modifiers;
    TextureSampleBiasCompare_Texture3D_texture.type.modifierValues = TextureSampleBiasCompare_Texture3D_texture_modifierValues;
    TextureSampleBiasCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture3D_sampler.type.modifiers = TextureSampleBiasCompare_Texture3D_sampler_modifiers;
    TextureSampleBiasCompare_Texture3D_sampler.type.modifierValues = TextureSampleBiasCompare_Texture3D_sampler_modifierValues;
    TextureSampleBiasCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompare_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    TextureSampleBiasCompare_Texture3D.name = TextureSampleBiasCompare_Texture3D_name;
    TextureSampleBiasCompare_Texture3D.backendIndex = 2589;
    TextureSampleBiasCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompare_Texture3D.parameters = TextureSampleBiasCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D)->signature = "textureSampleBiasCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D)->name = "textureSampleBiasCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with SampledTexture3D, Float32x3, Float32, Float32
    SampledTextureSampleBiasCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleBiasCompare_Texture3D_texture.type.modifiers = SampledTextureSampleBiasCompare_Texture3D_texture_modifiers;
    SampledTextureSampleBiasCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleBiasCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleBiasCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompare_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    SampledTextureSampleBiasCompare_Texture3D.name = SampledTextureSampleBiasCompare_Texture3D_name;
    SampledTextureSampleBiasCompare_Texture3D.backendIndex = 2590;
    SampledTextureSampleBiasCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompare_Texture3D.parameters = SampledTextureSampleBiasCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D)->signature = "textureSampleBiasCompare(uniform *textureSampled3D,f32x3,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D)->name = "textureSampleBiasCompare(uniform *textureSampled3D,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *textureSampled3D, coordinate : f32x3, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with Texture1DArray, Sampler, Float32x2, Float32, Float32
    TextureSampleBiasCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleBiasCompare_Texture1DArray_texture.type.modifiers = TextureSampleBiasCompare_Texture1DArray_texture_modifiers;
    TextureSampleBiasCompare_Texture1DArray_texture.type.modifierValues = TextureSampleBiasCompare_Texture1DArray_texture_modifierValues;
    TextureSampleBiasCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture1DArray_sampler.type.modifiers = TextureSampleBiasCompare_Texture1DArray_sampler_modifiers;
    TextureSampleBiasCompare_Texture1DArray_sampler.type.modifierValues = TextureSampleBiasCompare_Texture1DArray_sampler_modifierValues;
    TextureSampleBiasCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompare_Texture1DArray_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1DArray.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    TextureSampleBiasCompare_Texture1DArray.name = TextureSampleBiasCompare_Texture1DArray_name;
    TextureSampleBiasCompare_Texture1DArray.backendIndex = 2591;
    TextureSampleBiasCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompare_Texture1DArray.parameters = TextureSampleBiasCompare_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray)->signature = "textureSampleBiasCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray)->name = "textureSampleBiasCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with SampledTexture1DArray, Float32x2, Float32, Float32
    SampledTextureSampleBiasCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleBiasCompare_Texture1DArray_texture.type.modifiers = SampledTextureSampleBiasCompare_Texture1DArray_texture_modifiers;
    SampledTextureSampleBiasCompare_Texture1DArray_texture.type.modifierValues = SampledTextureSampleBiasCompare_Texture1DArray_texture_modifierValues;
    SampledTextureSampleBiasCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompare_Texture1DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1DArray.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    SampledTextureSampleBiasCompare_Texture1DArray.name = SampledTextureSampleBiasCompare_Texture1DArray_name;
    SampledTextureSampleBiasCompare_Texture1DArray.backendIndex = 2592;
    SampledTextureSampleBiasCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1DArray.parameters = SampledTextureSampleBiasCompare_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray)->signature = "textureSampleBiasCompare(uniform *textureSampled1DArray,f32x2,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray)->name = "textureSampleBiasCompare(uniform *textureSampled1DArray,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *textureSampled1DArray, coordinate : f32x2, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with Texture2DArray, Sampler, Float32x3, Float32, Float32
    TextureSampleBiasCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleBiasCompare_Texture2DArray_texture.type.modifiers = TextureSampleBiasCompare_Texture2DArray_texture_modifiers;
    TextureSampleBiasCompare_Texture2DArray_texture.type.modifierValues = TextureSampleBiasCompare_Texture2DArray_texture_modifierValues;
    TextureSampleBiasCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture2DArray_sampler.type.modifiers = TextureSampleBiasCompare_Texture2DArray_sampler_modifiers;
    TextureSampleBiasCompare_Texture2DArray_sampler.type.modifierValues = TextureSampleBiasCompare_Texture2DArray_sampler_modifierValues;
    TextureSampleBiasCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompare_Texture2DArray_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2DArray.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    TextureSampleBiasCompare_Texture2DArray.name = TextureSampleBiasCompare_Texture2DArray_name;
    TextureSampleBiasCompare_Texture2DArray.backendIndex = 2593;
    TextureSampleBiasCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompare_Texture2DArray.parameters = TextureSampleBiasCompare_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray)->signature = "textureSampleBiasCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray)->name = "textureSampleBiasCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with SampledTexture2DArray, Float32x3, Float32, Float32
    SampledTextureSampleBiasCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleBiasCompare_Texture2DArray_texture.type.modifiers = SampledTextureSampleBiasCompare_Texture2DArray_texture_modifiers;
    SampledTextureSampleBiasCompare_Texture2DArray_texture.type.modifierValues = SampledTextureSampleBiasCompare_Texture2DArray_texture_modifierValues;
    SampledTextureSampleBiasCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompare_Texture2DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2DArray.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    SampledTextureSampleBiasCompare_Texture2DArray.name = SampledTextureSampleBiasCompare_Texture2DArray_name;
    SampledTextureSampleBiasCompare_Texture2DArray.backendIndex = 2594;
    SampledTextureSampleBiasCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2DArray.parameters = SampledTextureSampleBiasCompare_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray)->signature = "textureSampleBiasCompare(uniform *textureSampled2DArray,f32x3,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray)->name = "textureSampleBiasCompare(uniform *textureSampled2DArray,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *textureSampled2DArray, coordinate : f32x3, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleBiasCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasCompareOffset_Texture1D_texture.type.modifiers = TextureSampleBiasCompareOffset_Texture1D_texture_modifiers;
    TextureSampleBiasCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleBiasCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleBiasCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleBiasCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleBiasCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleBiasCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleBiasCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasCompareOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleBiasCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleBiasCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleBiasCompareOffset_Texture1D.name = TextureSampleBiasCompareOffset_Texture1D_name;
    TextureSampleBiasCompareOffset_Texture1D.backendIndex = 2595;
    TextureSampleBiasCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1D.parameters = TextureSampleBiasCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D)->signature = "textureSampleBiasCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D)->name = "textureSampleBiasCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, bias : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleBiasCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleBiasCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleBiasCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleBiasCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleBiasCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleBiasCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D.name = SampledTextureSampleBiasCompareOffset_Texture1D_name;
    SampledTextureSampleBiasCompareOffset_Texture1D.backendIndex = 2596;
    SampledTextureSampleBiasCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1D.parameters = SampledTextureSampleBiasCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D)->signature = "textureSampleBiasCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32) f32"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D)->name = "textureSampleBiasCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, bias : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleBiasCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasCompareOffset_Texture2D_texture.type.modifiers = TextureSampleBiasCompareOffset_Texture2D_texture_modifiers;
    TextureSampleBiasCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleBiasCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleBiasCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleBiasCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleBiasCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleBiasCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleBiasCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompareOffset_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasCompareOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleBiasCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleBiasCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleBiasCompareOffset_Texture2D.name = TextureSampleBiasCompareOffset_Texture2D_name;
    TextureSampleBiasCompareOffset_Texture2D.backendIndex = 2597;
    TextureSampleBiasCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompareOffset_Texture2D.parameters = TextureSampleBiasCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D)->signature = "textureSampleBiasCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2) f32"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D)->name = "textureSampleBiasCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, bias : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleBiasCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleBiasCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleBiasCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleBiasCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleBiasCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleBiasCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D.name = SampledTextureSampleBiasCompareOffset_Texture2D_name;
    SampledTextureSampleBiasCompareOffset_Texture2D.backendIndex = 2598;
    SampledTextureSampleBiasCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2D.parameters = SampledTextureSampleBiasCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D)->signature = "textureSampleBiasCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2) f32"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D)->name = "textureSampleBiasCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, bias : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleBiasCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasCompareOffset_Texture3D_texture.type.modifiers = TextureSampleBiasCompareOffset_Texture3D_texture_modifiers;
    TextureSampleBiasCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleBiasCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleBiasCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleBiasCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleBiasCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleBiasCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleBiasCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompareOffset_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasCompareOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleBiasCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleBiasCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleBiasCompareOffset_Texture3D.name = TextureSampleBiasCompareOffset_Texture3D_name;
    TextureSampleBiasCompareOffset_Texture3D.backendIndex = 2599;
    TextureSampleBiasCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompareOffset_Texture3D.parameters = TextureSampleBiasCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D)->signature = "textureSampleBiasCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3) f32"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D)->name = "textureSampleBiasCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, bias : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleBiasCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleBiasCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleBiasCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleBiasCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleBiasCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleBiasCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompareOffset_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D.name = SampledTextureSampleBiasCompareOffset_Texture3D_name;
    SampledTextureSampleBiasCompareOffset_Texture3D.backendIndex = 2600;
    SampledTextureSampleBiasCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture3D.parameters = SampledTextureSampleBiasCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D)->signature = "textureSampleBiasCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3) f32"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D)->name = "textureSampleBiasCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, bias : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

}
} // namespace GPULang
