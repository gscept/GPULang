//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "types.h"
namespace GPULang
{
struct Namer
{
    Namer()
    {
        Float32Type.name = "f32"_c;
        UInt32Type.name = "u32"_c;
        Int32Type.name = "i32"_c;
        Bool8Type.name = "b8"_c;
        Float16Type.name = "f16"_c;
        UInt16Type.name = "u16"_c;
        Int16Type.name = "i16"_c;
        Float32x2Type.name = "f32x2"_c;
        UInt32x2Type.name = "u32x2"_c;
        Int32x2Type.name = "i32x2"_c;
        Bool8x2Type.name = "b8x2"_c;
        Float16x2Type.name = "f16x2"_c;
        UInt16x2Type.name = "u16x2"_c;
        Int16x2Type.name = "i16x2"_c;
        Float32x3Type.name = "f32x3"_c;
        UInt32x3Type.name = "u32x3"_c;
        Int32x3Type.name = "i32x3"_c;
        Bool8x3Type.name = "b8x3"_c;
        Float16x3Type.name = "f16x3"_c;
        UInt16x3Type.name = "u16x3"_c;
        Int16x3Type.name = "i16x3"_c;
        Float32x4Type.name = "f32x4"_c;
        UInt32x4Type.name = "u32x4"_c;
        Int32x4Type.name = "i32x4"_c;
        Bool8x4Type.name = "b8x4"_c;
        Float16x4Type.name = "f16x4"_c;
        UInt16x4Type.name = "u16x4"_c;
        Int16x4Type.name = "i16x4"_c;
        Float32x2x2Type.name = "f32x2x2"_c;
        Float32x3x2Type.name = "f32x3x2"_c;
        Float32x4x2Type.name = "f32x4x2"_c;
        Float32x2x3Type.name = "f32x2x3"_c;
        Float32x3x3Type.name = "f32x3x3"_c;
        Float32x4x3Type.name = "f32x4x3"_c;
        Float32x2x4Type.name = "f32x2x4"_c;
        Float32x3x4Type.name = "f32x3x4"_c;
        Float32x4x4Type.name = "f32x4x4"_c;
        Float16x2x2Type.name = "f16x2x2"_c;
        Float16x3x2Type.name = "f16x3x2"_c;
        Float16x4x2Type.name = "f16x4x2"_c;
        Float16x2x3Type.name = "f16x2x3"_c;
        Float16x3x3Type.name = "f16x3x3"_c;
        Float16x4x3Type.name = "f16x4x3"_c;
        Float16x2x4Type.name = "f16x2x4"_c;
        Float16x3x4Type.name = "f16x3x4"_c;
        Float16x4x4Type.name = "f16x4x4"_c;
    }
};
Namer namer;

} // namespace GPULang

#include "compiler.h"
namespace GPULang 
{
/// operator[] with Int32
Variable Float32_operator_index_Int32_arg;
Function Float32_operator_index_Int32;
inline constexpr std::array Float32_operator_index_Int32_args = { &Float32_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32_operator_index_UInt32_arg;
Function Float32_operator_index_UInt32;
inline constexpr std::array Float32_operator_index_UInt32_args = { &Float32_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32_operator_index_Int16_arg;
Function Float32_operator_index_Int16;
inline constexpr std::array Float32_operator_index_Int16_args = { &Float32_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32_operator_index_UInt16_arg;
Function Float32_operator_index_UInt16;
inline constexpr std::array Float32_operator_index_UInt16_args = { &Float32_operator_index_UInt16_arg };

/// operator+ with Float32
Variable Float32_operator_add_Float32_arg;
Function Float32_operator_add_Float32;
inline constexpr std::array Float32_operator_add_Float32_args = { &Float32_operator_add_Float32_arg };

/// operator- with Float32
Variable Float32_operator_sub_Float32_arg;
Function Float32_operator_sub_Float32;
inline constexpr std::array Float32_operator_sub_Float32_args = { &Float32_operator_sub_Float32_arg };

/// operator* with Float32
Variable Float32_operator_mul_Float32_arg;
Function Float32_operator_mul_Float32;
inline constexpr std::array Float32_operator_mul_Float32_args = { &Float32_operator_mul_Float32_arg };

/// operator/ with Float32
Variable Float32_operator_div_Float32_arg;
Function Float32_operator_div_Float32;
inline constexpr std::array Float32_operator_div_Float32_args = { &Float32_operator_div_Float32_arg };

/// operator% with Float32
Variable Float32_operator_mod_Float32_arg;
Function Float32_operator_mod_Float32;
inline constexpr std::array Float32_operator_mod_Float32_args = { &Float32_operator_mod_Float32_arg };

/// operator+= with Float32
Variable Float32_operator_addasg_Float32_arg;
Function Float32_operator_addasg_Float32;
inline constexpr std::array Float32_operator_addasg_Float32_args = { &Float32_operator_addasg_Float32_arg };

/// operator-= with Float32
Variable Float32_operator_subasg_Float32_arg;
Function Float32_operator_subasg_Float32;
inline constexpr std::array Float32_operator_subasg_Float32_args = { &Float32_operator_subasg_Float32_arg };

/// operator*= with Float32
Variable Float32_operator_mulasg_Float32_arg;
Function Float32_operator_mulasg_Float32;
inline constexpr std::array Float32_operator_mulasg_Float32_args = { &Float32_operator_mulasg_Float32_arg };

/// operator/= with Float32
Variable Float32_operator_divasg_Float32_arg;
Function Float32_operator_divasg_Float32;
inline constexpr std::array Float32_operator_divasg_Float32_args = { &Float32_operator_divasg_Float32_arg };

/// operator< with Float32
Variable Float32_operator_lt_Float32_arg;
Function Float32_operator_lt_Float32;
inline constexpr std::array Float32_operator_lt_Float32_args = { &Float32_operator_lt_Float32_arg };

/// operator<= with Float32
Variable Float32_operator_lte_Float32_arg;
Function Float32_operator_lte_Float32;
inline constexpr std::array Float32_operator_lte_Float32_args = { &Float32_operator_lte_Float32_arg };

/// operator> with Float32
Variable Float32_operator_gt_Float32_arg;
Function Float32_operator_gt_Float32;
inline constexpr std::array Float32_operator_gt_Float32_args = { &Float32_operator_gt_Float32_arg };

/// operator>= with Float32
Variable Float32_operator_gte_Float32_arg;
Function Float32_operator_gte_Float32;
inline constexpr std::array Float32_operator_gte_Float32_args = { &Float32_operator_gte_Float32_arg };

/// operator== with Float32
Variable Float32_operator_eq_Float32_arg;
Function Float32_operator_eq_Float32;
inline constexpr std::array Float32_operator_eq_Float32_args = { &Float32_operator_eq_Float32_arg };

/// operator!= with Float32
Variable Float32_operator_neq_Float32_arg;
Function Float32_operator_neq_Float32;
inline constexpr std::array Float32_operator_neq_Float32_args = { &Float32_operator_neq_Float32_arg };

static constexpr StaticMap<HashString, Symbol*, 38> Float32_symbolLookup = {
    std::pair{ "operator-=(f32)"_h, &Float32_operator_subasg_Float32 },
    std::pair{ "operator+(f32)"_h, &Float32_operator_add_Float32 },
    std::pair{ "operator[](i16)"_h, &Float32_operator_index_Int16 },
    std::pair{ "operator+=(f32)"_h, &Float32_operator_addasg_Float32 },
    std::pair{ "operator/=(f32)"_h, &Float32_operator_divasg_Float32 },
    std::pair{ "operator*=(f32)"_h, &Float32_operator_mulasg_Float32 },
    std::pair{ "operator%(f32)"_h, &Float32_operator_mod_Float32 },
    std::pair{ "operator<"_h, &Float32_operator_lt_Float32 },
    std::pair{ "operator>"_h, &Float32_operator_gt_Float32 },
    std::pair{ "operator-"_h, &Float32_operator_sub_Float32 },
    std::pair{ "operator/"_h, &Float32_operator_div_Float32 },
    std::pair{ "operator+"_h, &Float32_operator_add_Float32 },
    std::pair{ "operator*"_h, &Float32_operator_mul_Float32 },
    std::pair{ "operator%"_h, &Float32_operator_mod_Float32 },
    std::pair{ "operator-(f32)"_h, &Float32_operator_sub_Float32 },
    std::pair{ "operator>(f32)"_h, &Float32_operator_gt_Float32 },
    std::pair{ "operator/(f32)"_h, &Float32_operator_div_Float32 },
    std::pair{ "operator<(f32)"_h, &Float32_operator_lt_Float32 },
    std::pair{ "operator==(f32)"_h, &Float32_operator_eq_Float32 },
    std::pair{ "operator[](u32)"_h, &Float32_operator_index_UInt32 },
    std::pair{ "operator*(f32)"_h, &Float32_operator_mul_Float32 },
    std::pair{ "operator[](u16)"_h, &Float32_operator_index_UInt16 },
    std::pair{ "operator>=(f32)"_h, &Float32_operator_gte_Float32 },
    std::pair{ "operator!=(f32)"_h, &Float32_operator_neq_Float32 },
    std::pair{ "operator<=(f32)"_h, &Float32_operator_lte_Float32 },
    std::pair{ "operator[]"_h, &Float32_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float32_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float32_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float32_operator_index_UInt16 },
    std::pair{ "operator=="_h, &Float32_operator_eq_Float32 },
    std::pair{ "operator<="_h, &Float32_operator_lte_Float32 },
    std::pair{ "operator>="_h, &Float32_operator_gte_Float32 },
    std::pair{ "operator-="_h, &Float32_operator_subasg_Float32 },
    std::pair{ "operator/="_h, &Float32_operator_divasg_Float32 },
    std::pair{ "operator+="_h, &Float32_operator_addasg_Float32 },
    std::pair{ "operator*="_h, &Float32_operator_mulasg_Float32 },
    std::pair{ "operator!="_h, &Float32_operator_neq_Float32 },
    std::pair{ "operator[](i32)"_h, &Float32_operator_index_Int32 }
    };

Float32::Float32()
{
    this->name = "f32"_c;
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32_operator_index_Int32_arg.name = "arg"_c;
    Float32_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32_operator_index_Int32.name = Float32_operator_index_Int32_name;
    Float32_operator_index_Int32.backendIndex = 7;
    Float32_operator_index_Int32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_index_Int32.parameters = Float32_operator_index_Int32_args;
    Symbol::Resolved(&Float32_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32_operator_index_Int32)->signature = "operator[](i32) f32"_c;
    Symbol::Resolved(&Float32_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float32_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt32
    Float32_operator_index_UInt32_arg.name = "arg"_c;
    Float32_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32_operator_index_UInt32.name = Float32_operator_index_UInt32_name;
    Float32_operator_index_UInt32.backendIndex = 8;
    Float32_operator_index_UInt32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_index_UInt32.parameters = Float32_operator_index_UInt32_args;
    Symbol::Resolved(&Float32_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32_operator_index_UInt32)->signature = "operator[](u32) f32"_c;
    Symbol::Resolved(&Float32_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float32_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    /// operator[] with Int16
    Float32_operator_index_Int16_arg.name = "arg"_c;
    Float32_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32_operator_index_Int16.name = Float32_operator_index_Int16_name;
    Float32_operator_index_Int16.backendIndex = 9;
    Float32_operator_index_Int16.returnType = Type::FullType { Float32Type.name };
    Float32_operator_index_Int16.parameters = Float32_operator_index_Int16_args;
    Symbol::Resolved(&Float32_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32_operator_index_Int16)->signature = "operator[](i16) f32"_c;
    Symbol::Resolved(&Float32_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float32_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt16
    Float32_operator_index_UInt16_arg.name = "arg"_c;
    Float32_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32_operator_index_UInt16.name = Float32_operator_index_UInt16_name;
    Float32_operator_index_UInt16.backendIndex = 10;
    Float32_operator_index_UInt16.returnType = Type::FullType { Float32Type.name };
    Float32_operator_index_UInt16.parameters = Float32_operator_index_UInt16_args;
    Symbol::Resolved(&Float32_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32_operator_index_UInt16)->signature = "operator[](u16) f32"_c;
    Symbol::Resolved(&Float32_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float32_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    /// operator+ with Float32
    Float32_operator_add_Float32_arg.name = "arg"_c;
    Float32_operator_add_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_add_Float32.name = Float32_operator_add_Float32_name;
    Float32_operator_add_Float32.backendIndex = 11;
    Float32_operator_add_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_add_Float32.parameters = Float32_operator_add_Float32_args;
    Symbol::Resolved(&Float32_operator_add_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_add_Float32)->signature = "operator+(f32) f32"_c;
    Symbol::Resolved(&Float32_operator_add_Float32)->name = "operator+(f32)"_c;
    Symbol::Resolved(&Float32_operator_add_Float32)->nameWithVarNames = "operator+(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_add_Float32)->returnTypeSymbol = &Float32Type;

    /// operator- with Float32
    Float32_operator_sub_Float32_arg.name = "arg"_c;
    Float32_operator_sub_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_sub_Float32.name = Float32_operator_sub_Float32_name;
    Float32_operator_sub_Float32.backendIndex = 12;
    Float32_operator_sub_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_sub_Float32.parameters = Float32_operator_sub_Float32_args;
    Symbol::Resolved(&Float32_operator_sub_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_sub_Float32)->signature = "operator-(f32) f32"_c;
    Symbol::Resolved(&Float32_operator_sub_Float32)->name = "operator-(f32)"_c;
    Symbol::Resolved(&Float32_operator_sub_Float32)->nameWithVarNames = "operator-(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_sub_Float32)->returnTypeSymbol = &Float32Type;

    /// operator* with Float32
    Float32_operator_mul_Float32_arg.name = "arg"_c;
    Float32_operator_mul_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_mul_Float32.name = Float32_operator_mul_Float32_name;
    Float32_operator_mul_Float32.backendIndex = 13;
    Float32_operator_mul_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_mul_Float32.parameters = Float32_operator_mul_Float32_args;
    Symbol::Resolved(&Float32_operator_mul_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_mul_Float32)->signature = "operator*(f32) f32"_c;
    Symbol::Resolved(&Float32_operator_mul_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32_operator_mul_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_mul_Float32)->returnTypeSymbol = &Float32Type;

    /// operator/ with Float32
    Float32_operator_div_Float32_arg.name = "arg"_c;
    Float32_operator_div_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_div_Float32.name = Float32_operator_div_Float32_name;
    Float32_operator_div_Float32.backendIndex = 14;
    Float32_operator_div_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_div_Float32.parameters = Float32_operator_div_Float32_args;
    Symbol::Resolved(&Float32_operator_div_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_div_Float32)->signature = "operator/(f32) f32"_c;
    Symbol::Resolved(&Float32_operator_div_Float32)->name = "operator/(f32)"_c;
    Symbol::Resolved(&Float32_operator_div_Float32)->nameWithVarNames = "operator/(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_div_Float32)->returnTypeSymbol = &Float32Type;

    /// operator% with Float32
    Float32_operator_mod_Float32_arg.name = "arg"_c;
    Float32_operator_mod_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_mod_Float32.name = Float32_operator_mod_Float32_name;
    Float32_operator_mod_Float32.backendIndex = 15;
    Float32_operator_mod_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_mod_Float32.parameters = Float32_operator_mod_Float32_args;
    Symbol::Resolved(&Float32_operator_mod_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_mod_Float32)->signature = "operator%(f32) f32"_c;
    Symbol::Resolved(&Float32_operator_mod_Float32)->name = "operator%(f32)"_c;
    Symbol::Resolved(&Float32_operator_mod_Float32)->nameWithVarNames = "operator%(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_mod_Float32)->returnTypeSymbol = &Float32Type;

    /// operator+= with Float32
    Float32_operator_addasg_Float32_arg.name = "arg"_c;
    Float32_operator_addasg_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_addasg_Float32.name = Float32_operator_addasg_Float32_name;
    Float32_operator_addasg_Float32.backendIndex = 16;
    Float32_operator_addasg_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_addasg_Float32.parameters = Float32_operator_addasg_Float32_args;
    Symbol::Resolved(&Float32_operator_addasg_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_addasg_Float32)->signature = "operator+=(f32) f32"_c;
    Symbol::Resolved(&Float32_operator_addasg_Float32)->name = "operator+=(f32)"_c;
    Symbol::Resolved(&Float32_operator_addasg_Float32)->nameWithVarNames = "operator+=(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_addasg_Float32)->returnTypeSymbol = &Float32Type;

    /// operator-= with Float32
    Float32_operator_subasg_Float32_arg.name = "arg"_c;
    Float32_operator_subasg_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_subasg_Float32.name = Float32_operator_subasg_Float32_name;
    Float32_operator_subasg_Float32.backendIndex = 17;
    Float32_operator_subasg_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_subasg_Float32.parameters = Float32_operator_subasg_Float32_args;
    Symbol::Resolved(&Float32_operator_subasg_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_subasg_Float32)->signature = "operator-=(f32) f32"_c;
    Symbol::Resolved(&Float32_operator_subasg_Float32)->name = "operator-=(f32)"_c;
    Symbol::Resolved(&Float32_operator_subasg_Float32)->nameWithVarNames = "operator-=(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_subasg_Float32)->returnTypeSymbol = &Float32Type;

    /// operator*= with Float32
    Float32_operator_mulasg_Float32_arg.name = "arg"_c;
    Float32_operator_mulasg_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_mulasg_Float32.name = Float32_operator_mulasg_Float32_name;
    Float32_operator_mulasg_Float32.backendIndex = 18;
    Float32_operator_mulasg_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_mulasg_Float32.parameters = Float32_operator_mulasg_Float32_args;
    Symbol::Resolved(&Float32_operator_mulasg_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_mulasg_Float32)->signature = "operator*=(f32) f32"_c;
    Symbol::Resolved(&Float32_operator_mulasg_Float32)->name = "operator*=(f32)"_c;
    Symbol::Resolved(&Float32_operator_mulasg_Float32)->nameWithVarNames = "operator*=(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_mulasg_Float32)->returnTypeSymbol = &Float32Type;

    /// operator/= with Float32
    Float32_operator_divasg_Float32_arg.name = "arg"_c;
    Float32_operator_divasg_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_divasg_Float32.name = Float32_operator_divasg_Float32_name;
    Float32_operator_divasg_Float32.backendIndex = 19;
    Float32_operator_divasg_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_divasg_Float32.parameters = Float32_operator_divasg_Float32_args;
    Symbol::Resolved(&Float32_operator_divasg_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_divasg_Float32)->signature = "operator/=(f32) f32"_c;
    Symbol::Resolved(&Float32_operator_divasg_Float32)->name = "operator/=(f32)"_c;
    Symbol::Resolved(&Float32_operator_divasg_Float32)->nameWithVarNames = "operator/=(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_divasg_Float32)->returnTypeSymbol = &Float32Type;

    /// operator< with Float32
    Float32_operator_lt_Float32_arg.name = "arg"_c;
    Float32_operator_lt_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_lt_Float32.name = Float32_operator_lt_Float32_name;
    Float32_operator_lt_Float32.backendIndex = 20;
    Float32_operator_lt_Float32.returnType = Type::FullType { Bool8Type.name };
    Float32_operator_lt_Float32.parameters = Float32_operator_lt_Float32_args;
    Symbol::Resolved(&Float32_operator_lt_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_lt_Float32)->signature = "operator<(f32) b8"_c;
    Symbol::Resolved(&Float32_operator_lt_Float32)->name = "operator<(f32)"_c;
    Symbol::Resolved(&Float32_operator_lt_Float32)->nameWithVarNames = "operator<(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_lt_Float32)->returnTypeSymbol = &Bool8Type;

    /// operator<= with Float32
    Float32_operator_lte_Float32_arg.name = "arg"_c;
    Float32_operator_lte_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_lte_Float32.name = Float32_operator_lte_Float32_name;
    Float32_operator_lte_Float32.backendIndex = 21;
    Float32_operator_lte_Float32.returnType = Type::FullType { Bool8Type.name };
    Float32_operator_lte_Float32.parameters = Float32_operator_lte_Float32_args;
    Symbol::Resolved(&Float32_operator_lte_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_lte_Float32)->signature = "operator<=(f32) b8"_c;
    Symbol::Resolved(&Float32_operator_lte_Float32)->name = "operator<=(f32)"_c;
    Symbol::Resolved(&Float32_operator_lte_Float32)->nameWithVarNames = "operator<=(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_lte_Float32)->returnTypeSymbol = &Bool8Type;

    /// operator> with Float32
    Float32_operator_gt_Float32_arg.name = "arg"_c;
    Float32_operator_gt_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_gt_Float32.name = Float32_operator_gt_Float32_name;
    Float32_operator_gt_Float32.backendIndex = 22;
    Float32_operator_gt_Float32.returnType = Type::FullType { Bool8Type.name };
    Float32_operator_gt_Float32.parameters = Float32_operator_gt_Float32_args;
    Symbol::Resolved(&Float32_operator_gt_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_gt_Float32)->signature = "operator>(f32) b8"_c;
    Symbol::Resolved(&Float32_operator_gt_Float32)->name = "operator>(f32)"_c;
    Symbol::Resolved(&Float32_operator_gt_Float32)->nameWithVarNames = "operator>(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_gt_Float32)->returnTypeSymbol = &Bool8Type;

    /// operator>= with Float32
    Float32_operator_gte_Float32_arg.name = "arg"_c;
    Float32_operator_gte_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_gte_Float32.name = Float32_operator_gte_Float32_name;
    Float32_operator_gte_Float32.backendIndex = 23;
    Float32_operator_gte_Float32.returnType = Type::FullType { Bool8Type.name };
    Float32_operator_gte_Float32.parameters = Float32_operator_gte_Float32_args;
    Symbol::Resolved(&Float32_operator_gte_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_gte_Float32)->signature = "operator>=(f32) b8"_c;
    Symbol::Resolved(&Float32_operator_gte_Float32)->name = "operator>=(f32)"_c;
    Symbol::Resolved(&Float32_operator_gte_Float32)->nameWithVarNames = "operator>=(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_gte_Float32)->returnTypeSymbol = &Bool8Type;

    /// operator== with Float32
    Float32_operator_eq_Float32_arg.name = "arg"_c;
    Float32_operator_eq_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_eq_Float32.name = Float32_operator_eq_Float32_name;
    Float32_operator_eq_Float32.backendIndex = 24;
    Float32_operator_eq_Float32.returnType = Type::FullType { Bool8Type.name };
    Float32_operator_eq_Float32.parameters = Float32_operator_eq_Float32_args;
    Symbol::Resolved(&Float32_operator_eq_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_eq_Float32)->signature = "operator==(f32) b8"_c;
    Symbol::Resolved(&Float32_operator_eq_Float32)->name = "operator==(f32)"_c;
    Symbol::Resolved(&Float32_operator_eq_Float32)->nameWithVarNames = "operator==(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_eq_Float32)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Float32
    Float32_operator_neq_Float32_arg.name = "arg"_c;
    Float32_operator_neq_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_neq_Float32.name = Float32_operator_neq_Float32_name;
    Float32_operator_neq_Float32.backendIndex = 25;
    Float32_operator_neq_Float32.returnType = Type::FullType { Bool8Type.name };
    Float32_operator_neq_Float32.parameters = Float32_operator_neq_Float32_args;
    Symbol::Resolved(&Float32_operator_neq_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_neq_Float32)->signature = "operator!=(f32) b8"_c;
    Symbol::Resolved(&Float32_operator_neq_Float32)->name = "operator!=(f32)"_c;
    Symbol::Resolved(&Float32_operator_neq_Float32)->nameWithVarNames = "operator!=(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_neq_Float32)->returnTypeSymbol = &Bool8Type;

    this->scope.symbolLookup = Float32_symbolLookup;
}
Float32 Float32Type;

/// operator[] with Int32
Variable UInt32_operator_index_Int32_arg;
Function UInt32_operator_index_Int32;
inline constexpr std::array UInt32_operator_index_Int32_args = { &UInt32_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt32_operator_index_UInt32_arg;
Function UInt32_operator_index_UInt32;
inline constexpr std::array UInt32_operator_index_UInt32_args = { &UInt32_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt32_operator_index_Int16_arg;
Function UInt32_operator_index_Int16;
inline constexpr std::array UInt32_operator_index_Int16_args = { &UInt32_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt32_operator_index_UInt16_arg;
Function UInt32_operator_index_UInt16;
inline constexpr std::array UInt32_operator_index_UInt16_args = { &UInt32_operator_index_UInt16_arg };

/// operator+ with UInt32
Variable UInt32_operator_add_UInt32_arg;
Function UInt32_operator_add_UInt32;
inline constexpr std::array UInt32_operator_add_UInt32_args = { &UInt32_operator_add_UInt32_arg };

/// operator- with UInt32
Variable UInt32_operator_sub_UInt32_arg;
Function UInt32_operator_sub_UInt32;
inline constexpr std::array UInt32_operator_sub_UInt32_args = { &UInt32_operator_sub_UInt32_arg };

/// operator* with UInt32
Variable UInt32_operator_mul_UInt32_arg;
Function UInt32_operator_mul_UInt32;
inline constexpr std::array UInt32_operator_mul_UInt32_args = { &UInt32_operator_mul_UInt32_arg };

/// operator/ with UInt32
Variable UInt32_operator_div_UInt32_arg;
Function UInt32_operator_div_UInt32;
inline constexpr std::array UInt32_operator_div_UInt32_args = { &UInt32_operator_div_UInt32_arg };

/// operator% with UInt32
Variable UInt32_operator_mod_UInt32_arg;
Function UInt32_operator_mod_UInt32;
inline constexpr std::array UInt32_operator_mod_UInt32_args = { &UInt32_operator_mod_UInt32_arg };

/// operator+= with UInt32
Variable UInt32_operator_addasg_UInt32_arg;
Function UInt32_operator_addasg_UInt32;
inline constexpr std::array UInt32_operator_addasg_UInt32_args = { &UInt32_operator_addasg_UInt32_arg };

/// operator-= with UInt32
Variable UInt32_operator_subasg_UInt32_arg;
Function UInt32_operator_subasg_UInt32;
inline constexpr std::array UInt32_operator_subasg_UInt32_args = { &UInt32_operator_subasg_UInt32_arg };

/// operator*= with UInt32
Variable UInt32_operator_mulasg_UInt32_arg;
Function UInt32_operator_mulasg_UInt32;
inline constexpr std::array UInt32_operator_mulasg_UInt32_args = { &UInt32_operator_mulasg_UInt32_arg };

/// operator/= with UInt32
Variable UInt32_operator_divasg_UInt32_arg;
Function UInt32_operator_divasg_UInt32;
inline constexpr std::array UInt32_operator_divasg_UInt32_args = { &UInt32_operator_divasg_UInt32_arg };

/// operator< with UInt32
Variable UInt32_operator_lt_UInt32_arg;
Function UInt32_operator_lt_UInt32;
inline constexpr std::array UInt32_operator_lt_UInt32_args = { &UInt32_operator_lt_UInt32_arg };

/// operator<= with UInt32
Variable UInt32_operator_lte_UInt32_arg;
Function UInt32_operator_lte_UInt32;
inline constexpr std::array UInt32_operator_lte_UInt32_args = { &UInt32_operator_lte_UInt32_arg };

/// operator> with UInt32
Variable UInt32_operator_gt_UInt32_arg;
Function UInt32_operator_gt_UInt32;
inline constexpr std::array UInt32_operator_gt_UInt32_args = { &UInt32_operator_gt_UInt32_arg };

/// operator>= with UInt32
Variable UInt32_operator_gte_UInt32_arg;
Function UInt32_operator_gte_UInt32;
inline constexpr std::array UInt32_operator_gte_UInt32_args = { &UInt32_operator_gte_UInt32_arg };

/// operator== with UInt32
Variable UInt32_operator_eq_UInt32_arg;
Function UInt32_operator_eq_UInt32;
inline constexpr std::array UInt32_operator_eq_UInt32_args = { &UInt32_operator_eq_UInt32_arg };

/// operator!= with UInt32
Variable UInt32_operator_neq_UInt32_arg;
Function UInt32_operator_neq_UInt32;
inline constexpr std::array UInt32_operator_neq_UInt32_args = { &UInt32_operator_neq_UInt32_arg };

/// operator| with UInt32
Variable UInt32_operator_or_UInt32_arg;
Function UInt32_operator_or_UInt32;
inline constexpr std::array UInt32_operator_or_UInt32_args = { &UInt32_operator_or_UInt32_arg };

/// operator& with UInt32
Variable UInt32_operator_and_UInt32_arg;
Function UInt32_operator_and_UInt32;
inline constexpr std::array UInt32_operator_and_UInt32_args = { &UInt32_operator_and_UInt32_arg };

/// operator^ with UInt32
Variable UInt32_operator_xor_UInt32_arg;
Function UInt32_operator_xor_UInt32;
inline constexpr std::array UInt32_operator_xor_UInt32_args = { &UInt32_operator_xor_UInt32_arg };

/// operator<< with UInt32
Variable UInt32_operator_lsh_UInt32_arg;
Function UInt32_operator_lsh_UInt32;
inline constexpr std::array UInt32_operator_lsh_UInt32_args = { &UInt32_operator_lsh_UInt32_arg };

/// operator>> with UInt32
Variable UInt32_operator_rsh_UInt32_arg;
Function UInt32_operator_rsh_UInt32;
inline constexpr std::array UInt32_operator_rsh_UInt32_args = { &UInt32_operator_rsh_UInt32_arg };

/// operator|= with UInt32
Variable UInt32_operator_orasg_UInt32_arg;
Function UInt32_operator_orasg_UInt32;
inline constexpr std::array UInt32_operator_orasg_UInt32_args = { &UInt32_operator_orasg_UInt32_arg };

/// operator&= with UInt32
Variable UInt32_operator_andasg_UInt32_arg;
Function UInt32_operator_andasg_UInt32;
inline constexpr std::array UInt32_operator_andasg_UInt32_args = { &UInt32_operator_andasg_UInt32_arg };

/// operator^= with UInt32
Variable UInt32_operator_xorasg_UInt32_arg;
Function UInt32_operator_xorasg_UInt32;
inline constexpr std::array UInt32_operator_xorasg_UInt32_args = { &UInt32_operator_xorasg_UInt32_arg };

/// operator<<= with UInt32
Variable UInt32_operator_lshasg_UInt32_arg;
Function UInt32_operator_lshasg_UInt32;
inline constexpr std::array UInt32_operator_lshasg_UInt32_args = { &UInt32_operator_lshasg_UInt32_arg };

/// operator>>= with UInt32
Variable UInt32_operator_rhsasg_UInt32_arg;
Function UInt32_operator_rhsasg_UInt32;
inline constexpr std::array UInt32_operator_rhsasg_UInt32_args = { &UInt32_operator_rhsasg_UInt32_arg };

static constexpr StaticMap<HashString, Symbol*, 58> UInt32_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &UInt32_operator_index_Int16 },
    std::pair{ "operator^=(u32)"_h, &UInt32_operator_xorasg_UInt32 },
    std::pair{ "operator*(u32)"_h, &UInt32_operator_mul_UInt32 },
    std::pair{ "operator/(u32)"_h, &UInt32_operator_div_UInt32 },
    std::pair{ "operator>(u32)"_h, &UInt32_operator_gt_UInt32 },
    std::pair{ "operator>>(u32)"_h, &UInt32_operator_rsh_UInt32 },
    std::pair{ "operator|=(u32)"_h, &UInt32_operator_orasg_UInt32 },
    std::pair{ "operator<<(u32)"_h, &UInt32_operator_lsh_UInt32 },
    std::pair{ "operator^"_h, &UInt32_operator_xor_UInt32 },
    std::pair{ "operator|"_h, &UInt32_operator_or_UInt32 },
    std::pair{ "operator<"_h, &UInt32_operator_lt_UInt32 },
    std::pair{ "operator>"_h, &UInt32_operator_gt_UInt32 },
    std::pair{ "operator-"_h, &UInt32_operator_sub_UInt32 },
    std::pair{ "operator/"_h, &UInt32_operator_div_UInt32 },
    std::pair{ "operator+"_h, &UInt32_operator_add_UInt32 },
    std::pair{ "operator*"_h, &UInt32_operator_mul_UInt32 },
    std::pair{ "operator%"_h, &UInt32_operator_mod_UInt32 },
    std::pair{ "operator&"_h, &UInt32_operator_and_UInt32 },
    std::pair{ "operator*=(u32)"_h, &UInt32_operator_mulasg_UInt32 },
    std::pair{ "operator-=(u32)"_h, &UInt32_operator_subasg_UInt32 },
    std::pair{ "operator==(u32)"_h, &UInt32_operator_eq_UInt32 },
    std::pair{ "operator|(u32)"_h, &UInt32_operator_or_UInt32 },
    std::pair{ "operator[](u32)"_h, &UInt32_operator_index_UInt32 },
    std::pair{ "operator<=(u32)"_h, &UInt32_operator_lte_UInt32 },
    std::pair{ "operator<<="_h, &UInt32_operator_lshasg_UInt32 },
    std::pair{ "operator>>=(u32)"_h, &UInt32_operator_rhsasg_UInt32 },
    std::pair{ "operator%(u32)"_h, &UInt32_operator_mod_UInt32 },
    std::pair{ "operator<(u32)"_h, &UInt32_operator_lt_UInt32 },
    std::pair{ "operator[](u16)"_h, &UInt32_operator_index_UInt16 },
    std::pair{ "operator>>="_h, &UInt32_operator_rhsasg_UInt32 },
    std::pair{ "operator-(u32)"_h, &UInt32_operator_sub_UInt32 },
    std::pair{ "operator&(u32)"_h, &UInt32_operator_and_UInt32 },
    std::pair{ "operator&=(u32)"_h, &UInt32_operator_andasg_UInt32 },
    std::pair{ "operator^(u32)"_h, &UInt32_operator_xor_UInt32 },
    std::pair{ "operator<<=(u32)"_h, &UInt32_operator_lshasg_UInt32 },
    std::pair{ "operator+=(u32)"_h, &UInt32_operator_addasg_UInt32 },
    std::pair{ "operator/=(u32)"_h, &UInt32_operator_divasg_UInt32 },
    std::pair{ "operator!=(u32)"_h, &UInt32_operator_neq_UInt32 },
    std::pair{ "operator^="_h, &UInt32_operator_xorasg_UInt32 },
    std::pair{ "operator[]"_h, &UInt32_operator_index_Int32 },
    std::pair{ "operator[]"_h, &UInt32_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &UInt32_operator_index_Int16 },
    std::pair{ "operator[]"_h, &UInt32_operator_index_UInt16 },
    std::pair{ "operator|="_h, &UInt32_operator_orasg_UInt32 },
    std::pair{ "operator=="_h, &UInt32_operator_eq_UInt32 },
    std::pair{ "operator<="_h, &UInt32_operator_lte_UInt32 },
    std::pair{ "operator<<"_h, &UInt32_operator_lsh_UInt32 },
    std::pair{ "operator>="_h, &UInt32_operator_gte_UInt32 },
    std::pair{ "operator>>"_h, &UInt32_operator_rsh_UInt32 },
    std::pair{ "operator-="_h, &UInt32_operator_subasg_UInt32 },
    std::pair{ "operator/="_h, &UInt32_operator_divasg_UInt32 },
    std::pair{ "operator+="_h, &UInt32_operator_addasg_UInt32 },
    std::pair{ "operator*="_h, &UInt32_operator_mulasg_UInt32 },
    std::pair{ "operator&="_h, &UInt32_operator_andasg_UInt32 },
    std::pair{ "operator!="_h, &UInt32_operator_neq_UInt32 },
    std::pair{ "operator+(u32)"_h, &UInt32_operator_add_UInt32 },
    std::pair{ "operator>=(u32)"_h, &UInt32_operator_gte_UInt32 },
    std::pair{ "operator[](i32)"_h, &UInt32_operator_index_Int32 }
    };

UInt32::UInt32()
{
    this->name = "u32"_c;
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    /// operator[] with Int32
    UInt32_operator_index_Int32_arg.name = "arg"_c;
    UInt32_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32_operator_index_Int32.name = UInt32_operator_index_Int32_name;
    UInt32_operator_index_Int32.backendIndex = 33;
    UInt32_operator_index_Int32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_index_Int32.parameters = UInt32_operator_index_Int32_args;
    Symbol::Resolved(&UInt32_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32_operator_index_Int32)->signature = "operator[](i32) u32"_c;
    Symbol::Resolved(&UInt32_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt32_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt32_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt32
    UInt32_operator_index_UInt32_arg.name = "arg"_c;
    UInt32_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_index_UInt32.name = UInt32_operator_index_UInt32_name;
    UInt32_operator_index_UInt32.backendIndex = 34;
    UInt32_operator_index_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_index_UInt32.parameters = UInt32_operator_index_UInt32_args;
    Symbol::Resolved(&UInt32_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_index_UInt32)->signature = "operator[](u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt32_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with Int16
    UInt32_operator_index_Int16_arg.name = "arg"_c;
    UInt32_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt32_operator_index_Int16.name = UInt32_operator_index_Int16_name;
    UInt32_operator_index_Int16.backendIndex = 35;
    UInt32_operator_index_Int16.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_index_Int16.parameters = UInt32_operator_index_Int16_args;
    Symbol::Resolved(&UInt32_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32_operator_index_Int16)->signature = "operator[](i16) u32"_c;
    Symbol::Resolved(&UInt32_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt32_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt32_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt16
    UInt32_operator_index_UInt16_arg.name = "arg"_c;
    UInt32_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt32_operator_index_UInt16.name = UInt32_operator_index_UInt16_name;
    UInt32_operator_index_UInt16.backendIndex = 36;
    UInt32_operator_index_UInt16.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_index_UInt16.parameters = UInt32_operator_index_UInt16_args;
    Symbol::Resolved(&UInt32_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32_operator_index_UInt16)->signature = "operator[](u16) u32"_c;
    Symbol::Resolved(&UInt32_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt32_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt32_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    /// operator+ with UInt32
    UInt32_operator_add_UInt32_arg.name = "arg"_c;
    UInt32_operator_add_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_add_UInt32.name = UInt32_operator_add_UInt32_name;
    UInt32_operator_add_UInt32.backendIndex = 37;
    UInt32_operator_add_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_add_UInt32.parameters = UInt32_operator_add_UInt32_args;
    Symbol::Resolved(&UInt32_operator_add_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_add_UInt32)->signature = "operator+(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_add_UInt32)->name = "operator+(u32)"_c;
    Symbol::Resolved(&UInt32_operator_add_UInt32)->nameWithVarNames = "operator+(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_add_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator- with UInt32
    UInt32_operator_sub_UInt32_arg.name = "arg"_c;
    UInt32_operator_sub_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_sub_UInt32.name = UInt32_operator_sub_UInt32_name;
    UInt32_operator_sub_UInt32.backendIndex = 38;
    UInt32_operator_sub_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_sub_UInt32.parameters = UInt32_operator_sub_UInt32_args;
    Symbol::Resolved(&UInt32_operator_sub_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_sub_UInt32)->signature = "operator-(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_sub_UInt32)->name = "operator-(u32)"_c;
    Symbol::Resolved(&UInt32_operator_sub_UInt32)->nameWithVarNames = "operator-(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_sub_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator* with UInt32
    UInt32_operator_mul_UInt32_arg.name = "arg"_c;
    UInt32_operator_mul_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_mul_UInt32.name = UInt32_operator_mul_UInt32_name;
    UInt32_operator_mul_UInt32.backendIndex = 39;
    UInt32_operator_mul_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_mul_UInt32.parameters = UInt32_operator_mul_UInt32_args;
    Symbol::Resolved(&UInt32_operator_mul_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_mul_UInt32)->signature = "operator*(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_mul_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&UInt32_operator_mul_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_mul_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator/ with UInt32
    UInt32_operator_div_UInt32_arg.name = "arg"_c;
    UInt32_operator_div_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_div_UInt32.name = UInt32_operator_div_UInt32_name;
    UInt32_operator_div_UInt32.backendIndex = 40;
    UInt32_operator_div_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_div_UInt32.parameters = UInt32_operator_div_UInt32_args;
    Symbol::Resolved(&UInt32_operator_div_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_div_UInt32)->signature = "operator/(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_div_UInt32)->name = "operator/(u32)"_c;
    Symbol::Resolved(&UInt32_operator_div_UInt32)->nameWithVarNames = "operator/(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_div_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator% with UInt32
    UInt32_operator_mod_UInt32_arg.name = "arg"_c;
    UInt32_operator_mod_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_mod_UInt32.name = UInt32_operator_mod_UInt32_name;
    UInt32_operator_mod_UInt32.backendIndex = 41;
    UInt32_operator_mod_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_mod_UInt32.parameters = UInt32_operator_mod_UInt32_args;
    Symbol::Resolved(&UInt32_operator_mod_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_mod_UInt32)->signature = "operator%(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_mod_UInt32)->name = "operator%(u32)"_c;
    Symbol::Resolved(&UInt32_operator_mod_UInt32)->nameWithVarNames = "operator%(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_mod_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator+= with UInt32
    UInt32_operator_addasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_addasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_addasg_UInt32.name = UInt32_operator_addasg_UInt32_name;
    UInt32_operator_addasg_UInt32.backendIndex = 42;
    UInt32_operator_addasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_addasg_UInt32.parameters = UInt32_operator_addasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_addasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_addasg_UInt32)->signature = "operator+=(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_addasg_UInt32)->name = "operator+=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_addasg_UInt32)->nameWithVarNames = "operator+=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_addasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator-= with UInt32
    UInt32_operator_subasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_subasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_subasg_UInt32.name = UInt32_operator_subasg_UInt32_name;
    UInt32_operator_subasg_UInt32.backendIndex = 43;
    UInt32_operator_subasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_subasg_UInt32.parameters = UInt32_operator_subasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_subasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_subasg_UInt32)->signature = "operator-=(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_subasg_UInt32)->name = "operator-=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_subasg_UInt32)->nameWithVarNames = "operator-=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_subasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator*= with UInt32
    UInt32_operator_mulasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_mulasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_mulasg_UInt32.name = UInt32_operator_mulasg_UInt32_name;
    UInt32_operator_mulasg_UInt32.backendIndex = 44;
    UInt32_operator_mulasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_mulasg_UInt32.parameters = UInt32_operator_mulasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_mulasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_mulasg_UInt32)->signature = "operator*=(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_mulasg_UInt32)->name = "operator*=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_mulasg_UInt32)->nameWithVarNames = "operator*=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_mulasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator/= with UInt32
    UInt32_operator_divasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_divasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_divasg_UInt32.name = UInt32_operator_divasg_UInt32_name;
    UInt32_operator_divasg_UInt32.backendIndex = 45;
    UInt32_operator_divasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_divasg_UInt32.parameters = UInt32_operator_divasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_divasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_divasg_UInt32)->signature = "operator/=(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_divasg_UInt32)->name = "operator/=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_divasg_UInt32)->nameWithVarNames = "operator/=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_divasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator< with UInt32
    UInt32_operator_lt_UInt32_arg.name = "arg"_c;
    UInt32_operator_lt_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_lt_UInt32.name = UInt32_operator_lt_UInt32_name;
    UInt32_operator_lt_UInt32.backendIndex = 46;
    UInt32_operator_lt_UInt32.returnType = Type::FullType { Bool8Type.name };
    UInt32_operator_lt_UInt32.parameters = UInt32_operator_lt_UInt32_args;
    Symbol::Resolved(&UInt32_operator_lt_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_lt_UInt32)->signature = "operator<(u32) b8"_c;
    Symbol::Resolved(&UInt32_operator_lt_UInt32)->name = "operator<(u32)"_c;
    Symbol::Resolved(&UInt32_operator_lt_UInt32)->nameWithVarNames = "operator<(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_lt_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator<= with UInt32
    UInt32_operator_lte_UInt32_arg.name = "arg"_c;
    UInt32_operator_lte_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_lte_UInt32.name = UInt32_operator_lte_UInt32_name;
    UInt32_operator_lte_UInt32.backendIndex = 47;
    UInt32_operator_lte_UInt32.returnType = Type::FullType { Bool8Type.name };
    UInt32_operator_lte_UInt32.parameters = UInt32_operator_lte_UInt32_args;
    Symbol::Resolved(&UInt32_operator_lte_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_lte_UInt32)->signature = "operator<=(u32) b8"_c;
    Symbol::Resolved(&UInt32_operator_lte_UInt32)->name = "operator<=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_lte_UInt32)->nameWithVarNames = "operator<=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_lte_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator> with UInt32
    UInt32_operator_gt_UInt32_arg.name = "arg"_c;
    UInt32_operator_gt_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_gt_UInt32.name = UInt32_operator_gt_UInt32_name;
    UInt32_operator_gt_UInt32.backendIndex = 48;
    UInt32_operator_gt_UInt32.returnType = Type::FullType { Bool8Type.name };
    UInt32_operator_gt_UInt32.parameters = UInt32_operator_gt_UInt32_args;
    Symbol::Resolved(&UInt32_operator_gt_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_gt_UInt32)->signature = "operator>(u32) b8"_c;
    Symbol::Resolved(&UInt32_operator_gt_UInt32)->name = "operator>(u32)"_c;
    Symbol::Resolved(&UInt32_operator_gt_UInt32)->nameWithVarNames = "operator>(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_gt_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator>= with UInt32
    UInt32_operator_gte_UInt32_arg.name = "arg"_c;
    UInt32_operator_gte_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_gte_UInt32.name = UInt32_operator_gte_UInt32_name;
    UInt32_operator_gte_UInt32.backendIndex = 49;
    UInt32_operator_gte_UInt32.returnType = Type::FullType { Bool8Type.name };
    UInt32_operator_gte_UInt32.parameters = UInt32_operator_gte_UInt32_args;
    Symbol::Resolved(&UInt32_operator_gte_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_gte_UInt32)->signature = "operator>=(u32) b8"_c;
    Symbol::Resolved(&UInt32_operator_gte_UInt32)->name = "operator>=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_gte_UInt32)->nameWithVarNames = "operator>=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_gte_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator== with UInt32
    UInt32_operator_eq_UInt32_arg.name = "arg"_c;
    UInt32_operator_eq_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_eq_UInt32.name = UInt32_operator_eq_UInt32_name;
    UInt32_operator_eq_UInt32.backendIndex = 50;
    UInt32_operator_eq_UInt32.returnType = Type::FullType { Bool8Type.name };
    UInt32_operator_eq_UInt32.parameters = UInt32_operator_eq_UInt32_args;
    Symbol::Resolved(&UInt32_operator_eq_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_eq_UInt32)->signature = "operator==(u32) b8"_c;
    Symbol::Resolved(&UInt32_operator_eq_UInt32)->name = "operator==(u32)"_c;
    Symbol::Resolved(&UInt32_operator_eq_UInt32)->nameWithVarNames = "operator==(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_eq_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator!= with UInt32
    UInt32_operator_neq_UInt32_arg.name = "arg"_c;
    UInt32_operator_neq_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_neq_UInt32.name = UInt32_operator_neq_UInt32_name;
    UInt32_operator_neq_UInt32.backendIndex = 51;
    UInt32_operator_neq_UInt32.returnType = Type::FullType { Bool8Type.name };
    UInt32_operator_neq_UInt32.parameters = UInt32_operator_neq_UInt32_args;
    Symbol::Resolved(&UInt32_operator_neq_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_neq_UInt32)->signature = "operator!=(u32) b8"_c;
    Symbol::Resolved(&UInt32_operator_neq_UInt32)->name = "operator!=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_neq_UInt32)->nameWithVarNames = "operator!=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_neq_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator| with UInt32
    UInt32_operator_or_UInt32_arg.name = "arg"_c;
    UInt32_operator_or_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_or_UInt32.name = UInt32_operator_or_UInt32_name;
    UInt32_operator_or_UInt32.backendIndex = 52;
    UInt32_operator_or_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_or_UInt32.parameters = UInt32_operator_or_UInt32_args;
    Symbol::Resolved(&UInt32_operator_or_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_or_UInt32)->signature = "operator|(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_or_UInt32)->name = "operator|(u32)"_c;
    Symbol::Resolved(&UInt32_operator_or_UInt32)->nameWithVarNames = "operator|(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_or_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator& with UInt32
    UInt32_operator_and_UInt32_arg.name = "arg"_c;
    UInt32_operator_and_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_and_UInt32.name = UInt32_operator_and_UInt32_name;
    UInt32_operator_and_UInt32.backendIndex = 53;
    UInt32_operator_and_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_and_UInt32.parameters = UInt32_operator_and_UInt32_args;
    Symbol::Resolved(&UInt32_operator_and_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_and_UInt32)->signature = "operator&(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_and_UInt32)->name = "operator&(u32)"_c;
    Symbol::Resolved(&UInt32_operator_and_UInt32)->nameWithVarNames = "operator&(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_and_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator^ with UInt32
    UInt32_operator_xor_UInt32_arg.name = "arg"_c;
    UInt32_operator_xor_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_xor_UInt32.name = UInt32_operator_xor_UInt32_name;
    UInt32_operator_xor_UInt32.backendIndex = 54;
    UInt32_operator_xor_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_xor_UInt32.parameters = UInt32_operator_xor_UInt32_args;
    Symbol::Resolved(&UInt32_operator_xor_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_xor_UInt32)->signature = "operator^(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_xor_UInt32)->name = "operator^(u32)"_c;
    Symbol::Resolved(&UInt32_operator_xor_UInt32)->nameWithVarNames = "operator^(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_xor_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator<< with UInt32
    UInt32_operator_lsh_UInt32_arg.name = "arg"_c;
    UInt32_operator_lsh_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_lsh_UInt32.name = UInt32_operator_lsh_UInt32_name;
    UInt32_operator_lsh_UInt32.backendIndex = 55;
    UInt32_operator_lsh_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_lsh_UInt32.parameters = UInt32_operator_lsh_UInt32_args;
    Symbol::Resolved(&UInt32_operator_lsh_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_lsh_UInt32)->signature = "operator<<(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_lsh_UInt32)->name = "operator<<(u32)"_c;
    Symbol::Resolved(&UInt32_operator_lsh_UInt32)->nameWithVarNames = "operator<<(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_lsh_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator>> with UInt32
    UInt32_operator_rsh_UInt32_arg.name = "arg"_c;
    UInt32_operator_rsh_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_rsh_UInt32.name = UInt32_operator_rsh_UInt32_name;
    UInt32_operator_rsh_UInt32.backendIndex = 56;
    UInt32_operator_rsh_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_rsh_UInt32.parameters = UInt32_operator_rsh_UInt32_args;
    Symbol::Resolved(&UInt32_operator_rsh_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_rsh_UInt32)->signature = "operator>>(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_rsh_UInt32)->name = "operator>>(u32)"_c;
    Symbol::Resolved(&UInt32_operator_rsh_UInt32)->nameWithVarNames = "operator>>(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_rsh_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator|= with UInt32
    UInt32_operator_orasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_orasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_orasg_UInt32.name = UInt32_operator_orasg_UInt32_name;
    UInt32_operator_orasg_UInt32.backendIndex = 57;
    UInt32_operator_orasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_orasg_UInt32.parameters = UInt32_operator_orasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_orasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_orasg_UInt32)->signature = "operator|=(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_orasg_UInt32)->name = "operator|=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_orasg_UInt32)->nameWithVarNames = "operator|=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_orasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator&= with UInt32
    UInt32_operator_andasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_andasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_andasg_UInt32.name = UInt32_operator_andasg_UInt32_name;
    UInt32_operator_andasg_UInt32.backendIndex = 58;
    UInt32_operator_andasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_andasg_UInt32.parameters = UInt32_operator_andasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_andasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_andasg_UInt32)->signature = "operator&=(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_andasg_UInt32)->name = "operator&=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_andasg_UInt32)->nameWithVarNames = "operator&=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_andasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator^= with UInt32
    UInt32_operator_xorasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_xorasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_xorasg_UInt32.name = UInt32_operator_xorasg_UInt32_name;
    UInt32_operator_xorasg_UInt32.backendIndex = 59;
    UInt32_operator_xorasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_xorasg_UInt32.parameters = UInt32_operator_xorasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_xorasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_xorasg_UInt32)->signature = "operator^=(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_xorasg_UInt32)->name = "operator^=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_xorasg_UInt32)->nameWithVarNames = "operator^=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_xorasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator<<= with UInt32
    UInt32_operator_lshasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_lshasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_lshasg_UInt32.name = UInt32_operator_lshasg_UInt32_name;
    UInt32_operator_lshasg_UInt32.backendIndex = 60;
    UInt32_operator_lshasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_lshasg_UInt32.parameters = UInt32_operator_lshasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_lshasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_lshasg_UInt32)->signature = "operator<<=(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_lshasg_UInt32)->name = "operator<<=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_lshasg_UInt32)->nameWithVarNames = "operator<<=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_lshasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator>>= with UInt32
    UInt32_operator_rhsasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_rhsasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_rhsasg_UInt32.name = UInt32_operator_rhsasg_UInt32_name;
    UInt32_operator_rhsasg_UInt32.backendIndex = 61;
    UInt32_operator_rhsasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_rhsasg_UInt32.parameters = UInt32_operator_rhsasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_rhsasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_rhsasg_UInt32)->signature = "operator>>=(u32) u32"_c;
    Symbol::Resolved(&UInt32_operator_rhsasg_UInt32)->name = "operator>>=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_rhsasg_UInt32)->nameWithVarNames = "operator>>=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_rhsasg_UInt32)->returnTypeSymbol = &UInt32Type;

    this->scope.symbolLookup = UInt32_symbolLookup;
}
UInt32 UInt32Type;

/// operator[] with Int32
Variable Int32_operator_index_Int32_arg;
Function Int32_operator_index_Int32;
inline constexpr std::array Int32_operator_index_Int32_args = { &Int32_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int32_operator_index_UInt32_arg;
Function Int32_operator_index_UInt32;
inline constexpr std::array Int32_operator_index_UInt32_args = { &Int32_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int32_operator_index_Int16_arg;
Function Int32_operator_index_Int16;
inline constexpr std::array Int32_operator_index_Int16_args = { &Int32_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int32_operator_index_UInt16_arg;
Function Int32_operator_index_UInt16;
inline constexpr std::array Int32_operator_index_UInt16_args = { &Int32_operator_index_UInt16_arg };

/// operator+ with Int32
Variable Int32_operator_add_Int32_arg;
Function Int32_operator_add_Int32;
inline constexpr std::array Int32_operator_add_Int32_args = { &Int32_operator_add_Int32_arg };

/// operator- with Int32
Variable Int32_operator_sub_Int32_arg;
Function Int32_operator_sub_Int32;
inline constexpr std::array Int32_operator_sub_Int32_args = { &Int32_operator_sub_Int32_arg };

/// operator* with Int32
Variable Int32_operator_mul_Int32_arg;
Function Int32_operator_mul_Int32;
inline constexpr std::array Int32_operator_mul_Int32_args = { &Int32_operator_mul_Int32_arg };

/// operator/ with Int32
Variable Int32_operator_div_Int32_arg;
Function Int32_operator_div_Int32;
inline constexpr std::array Int32_operator_div_Int32_args = { &Int32_operator_div_Int32_arg };

/// operator% with Int32
Variable Int32_operator_mod_Int32_arg;
Function Int32_operator_mod_Int32;
inline constexpr std::array Int32_operator_mod_Int32_args = { &Int32_operator_mod_Int32_arg };

/// operator+= with Int32
Variable Int32_operator_addasg_Int32_arg;
Function Int32_operator_addasg_Int32;
inline constexpr std::array Int32_operator_addasg_Int32_args = { &Int32_operator_addasg_Int32_arg };

/// operator-= with Int32
Variable Int32_operator_subasg_Int32_arg;
Function Int32_operator_subasg_Int32;
inline constexpr std::array Int32_operator_subasg_Int32_args = { &Int32_operator_subasg_Int32_arg };

/// operator*= with Int32
Variable Int32_operator_mulasg_Int32_arg;
Function Int32_operator_mulasg_Int32;
inline constexpr std::array Int32_operator_mulasg_Int32_args = { &Int32_operator_mulasg_Int32_arg };

/// operator/= with Int32
Variable Int32_operator_divasg_Int32_arg;
Function Int32_operator_divasg_Int32;
inline constexpr std::array Int32_operator_divasg_Int32_args = { &Int32_operator_divasg_Int32_arg };

/// operator< with Int32
Variable Int32_operator_lt_Int32_arg;
Function Int32_operator_lt_Int32;
inline constexpr std::array Int32_operator_lt_Int32_args = { &Int32_operator_lt_Int32_arg };

/// operator<= with Int32
Variable Int32_operator_lte_Int32_arg;
Function Int32_operator_lte_Int32;
inline constexpr std::array Int32_operator_lte_Int32_args = { &Int32_operator_lte_Int32_arg };

/// operator> with Int32
Variable Int32_operator_gt_Int32_arg;
Function Int32_operator_gt_Int32;
inline constexpr std::array Int32_operator_gt_Int32_args = { &Int32_operator_gt_Int32_arg };

/// operator>= with Int32
Variable Int32_operator_gte_Int32_arg;
Function Int32_operator_gte_Int32;
inline constexpr std::array Int32_operator_gte_Int32_args = { &Int32_operator_gte_Int32_arg };

/// operator== with Int32
Variable Int32_operator_eq_Int32_arg;
Function Int32_operator_eq_Int32;
inline constexpr std::array Int32_operator_eq_Int32_args = { &Int32_operator_eq_Int32_arg };

/// operator!= with Int32
Variable Int32_operator_neq_Int32_arg;
Function Int32_operator_neq_Int32;
inline constexpr std::array Int32_operator_neq_Int32_args = { &Int32_operator_neq_Int32_arg };

/// operator| with Int32
Variable Int32_operator_or_Int32_arg;
Function Int32_operator_or_Int32;
inline constexpr std::array Int32_operator_or_Int32_args = { &Int32_operator_or_Int32_arg };

/// operator& with Int32
Variable Int32_operator_and_Int32_arg;
Function Int32_operator_and_Int32;
inline constexpr std::array Int32_operator_and_Int32_args = { &Int32_operator_and_Int32_arg };

/// operator^ with Int32
Variable Int32_operator_xor_Int32_arg;
Function Int32_operator_xor_Int32;
inline constexpr std::array Int32_operator_xor_Int32_args = { &Int32_operator_xor_Int32_arg };

/// operator<< with Int32
Variable Int32_operator_lsh_Int32_arg;
Function Int32_operator_lsh_Int32;
inline constexpr std::array Int32_operator_lsh_Int32_args = { &Int32_operator_lsh_Int32_arg };

/// operator>> with Int32
Variable Int32_operator_rsh_Int32_arg;
Function Int32_operator_rsh_Int32;
inline constexpr std::array Int32_operator_rsh_Int32_args = { &Int32_operator_rsh_Int32_arg };

/// operator|= with Int32
Variable Int32_operator_orasg_Int32_arg;
Function Int32_operator_orasg_Int32;
inline constexpr std::array Int32_operator_orasg_Int32_args = { &Int32_operator_orasg_Int32_arg };

/// operator&= with Int32
Variable Int32_operator_andasg_Int32_arg;
Function Int32_operator_andasg_Int32;
inline constexpr std::array Int32_operator_andasg_Int32_args = { &Int32_operator_andasg_Int32_arg };

/// operator^= with Int32
Variable Int32_operator_xorasg_Int32_arg;
Function Int32_operator_xorasg_Int32;
inline constexpr std::array Int32_operator_xorasg_Int32_args = { &Int32_operator_xorasg_Int32_arg };

/// operator<<= with Int32
Variable Int32_operator_lshasg_Int32_arg;
Function Int32_operator_lshasg_Int32;
inline constexpr std::array Int32_operator_lshasg_Int32_args = { &Int32_operator_lshasg_Int32_arg };

/// operator>>= with Int32
Variable Int32_operator_rhsasg_Int32_arg;
Function Int32_operator_rhsasg_Int32;
inline constexpr std::array Int32_operator_rhsasg_Int32_args = { &Int32_operator_rhsasg_Int32_arg };

static constexpr StaticMap<HashString, Symbol*, 58> Int32_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &Int32_operator_index_Int16 },
    std::pair{ "operator==(i32)"_h, &Int32_operator_eq_Int32 },
    std::pair{ "operator&=(i32)"_h, &Int32_operator_andasg_Int32 },
    std::pair{ "operator^(i32)"_h, &Int32_operator_xor_Int32 },
    std::pair{ "operator+(i32)"_h, &Int32_operator_add_Int32 },
    std::pair{ "operator/=(i32)"_h, &Int32_operator_divasg_Int32 },
    std::pair{ "operator>>=(i32)"_h, &Int32_operator_rhsasg_Int32 },
    std::pair{ "operator^"_h, &Int32_operator_xor_Int32 },
    std::pair{ "operator|"_h, &Int32_operator_or_Int32 },
    std::pair{ "operator<"_h, &Int32_operator_lt_Int32 },
    std::pair{ "operator>"_h, &Int32_operator_gt_Int32 },
    std::pair{ "operator-"_h, &Int32_operator_sub_Int32 },
    std::pair{ "operator/"_h, &Int32_operator_div_Int32 },
    std::pair{ "operator+"_h, &Int32_operator_add_Int32 },
    std::pair{ "operator*"_h, &Int32_operator_mul_Int32 },
    std::pair{ "operator%"_h, &Int32_operator_mod_Int32 },
    std::pair{ "operator&"_h, &Int32_operator_and_Int32 },
    std::pair{ "operator!=(i32)"_h, &Int32_operator_neq_Int32 },
    std::pair{ "operator&(i32)"_h, &Int32_operator_and_Int32 },
    std::pair{ "operator+=(i32)"_h, &Int32_operator_addasg_Int32 },
    std::pair{ "operator>=(i32)"_h, &Int32_operator_gte_Int32 },
    std::pair{ "operator|=(i32)"_h, &Int32_operator_orasg_Int32 },
    std::pair{ "operator<<=(i32)"_h, &Int32_operator_lshasg_Int32 },
    std::pair{ "operator[](u32)"_h, &Int32_operator_index_UInt32 },
    std::pair{ "operator<<="_h, &Int32_operator_lshasg_Int32 },
    std::pair{ "operator>(i32)"_h, &Int32_operator_gt_Int32 },
    std::pair{ "operator^=(i32)"_h, &Int32_operator_xorasg_Int32 },
    std::pair{ "operator[](u16)"_h, &Int32_operator_index_UInt16 },
    std::pair{ "operator>>="_h, &Int32_operator_rhsasg_Int32 },
    std::pair{ "operator>>(i32)"_h, &Int32_operator_rsh_Int32 },
    std::pair{ "operator<<(i32)"_h, &Int32_operator_lsh_Int32 },
    std::pair{ "operator*(i32)"_h, &Int32_operator_mul_Int32 },
    std::pair{ "operator<=(i32)"_h, &Int32_operator_lte_Int32 },
    std::pair{ "operator|(i32)"_h, &Int32_operator_or_Int32 },
    std::pair{ "operator/(i32)"_h, &Int32_operator_div_Int32 },
    std::pair{ "operator^="_h, &Int32_operator_xorasg_Int32 },
    std::pair{ "operator[]"_h, &Int32_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Int32_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Int32_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Int32_operator_index_UInt16 },
    std::pair{ "operator|="_h, &Int32_operator_orasg_Int32 },
    std::pair{ "operator=="_h, &Int32_operator_eq_Int32 },
    std::pair{ "operator<="_h, &Int32_operator_lte_Int32 },
    std::pair{ "operator<<"_h, &Int32_operator_lsh_Int32 },
    std::pair{ "operator>="_h, &Int32_operator_gte_Int32 },
    std::pair{ "operator>>"_h, &Int32_operator_rsh_Int32 },
    std::pair{ "operator-="_h, &Int32_operator_subasg_Int32 },
    std::pair{ "operator/="_h, &Int32_operator_divasg_Int32 },
    std::pair{ "operator+="_h, &Int32_operator_addasg_Int32 },
    std::pair{ "operator*="_h, &Int32_operator_mulasg_Int32 },
    std::pair{ "operator&="_h, &Int32_operator_andasg_Int32 },
    std::pair{ "operator!="_h, &Int32_operator_neq_Int32 },
    std::pair{ "operator*=(i32)"_h, &Int32_operator_mulasg_Int32 },
    std::pair{ "operator-(i32)"_h, &Int32_operator_sub_Int32 },
    std::pair{ "operator%(i32)"_h, &Int32_operator_mod_Int32 },
    std::pair{ "operator<(i32)"_h, &Int32_operator_lt_Int32 },
    std::pair{ "operator-=(i32)"_h, &Int32_operator_subasg_Int32 },
    std::pair{ "operator[](i32)"_h, &Int32_operator_index_Int32 }
    };

Int32::Int32()
{
    this->name = "i32"_c;
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    /// operator[] with Int32
    Int32_operator_index_Int32_arg.name = "arg"_c;
    Int32_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_index_Int32.name = Int32_operator_index_Int32_name;
    Int32_operator_index_Int32.backendIndex = 69;
    Int32_operator_index_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_index_Int32.parameters = Int32_operator_index_Int32_args;
    Symbol::Resolved(&Int32_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_index_Int32)->signature = "operator[](i32) i32"_c;
    Symbol::Resolved(&Int32_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int32_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt32
    Int32_operator_index_UInt32_arg.name = "arg"_c;
    Int32_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32_operator_index_UInt32.name = Int32_operator_index_UInt32_name;
    Int32_operator_index_UInt32.backendIndex = 70;
    Int32_operator_index_UInt32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_index_UInt32.parameters = Int32_operator_index_UInt32_args;
    Symbol::Resolved(&Int32_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32_operator_index_UInt32)->signature = "operator[](u32) i32"_c;
    Symbol::Resolved(&Int32_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int32_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int32_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    /// operator[] with Int16
    Int32_operator_index_Int16_arg.name = "arg"_c;
    Int32_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int32_operator_index_Int16.name = Int32_operator_index_Int16_name;
    Int32_operator_index_Int16.backendIndex = 71;
    Int32_operator_index_Int16.returnType = Type::FullType { Int32Type.name };
    Int32_operator_index_Int16.parameters = Int32_operator_index_Int16_args;
    Symbol::Resolved(&Int32_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32_operator_index_Int16)->signature = "operator[](i16) i32"_c;
    Symbol::Resolved(&Int32_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int32_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int32_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt16
    Int32_operator_index_UInt16_arg.name = "arg"_c;
    Int32_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int32_operator_index_UInt16.name = Int32_operator_index_UInt16_name;
    Int32_operator_index_UInt16.backendIndex = 72;
    Int32_operator_index_UInt16.returnType = Type::FullType { Int32Type.name };
    Int32_operator_index_UInt16.parameters = Int32_operator_index_UInt16_args;
    Symbol::Resolved(&Int32_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32_operator_index_UInt16)->signature = "operator[](u16) i32"_c;
    Symbol::Resolved(&Int32_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int32_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int32_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    /// operator+ with Int32
    Int32_operator_add_Int32_arg.name = "arg"_c;
    Int32_operator_add_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_add_Int32.name = Int32_operator_add_Int32_name;
    Int32_operator_add_Int32.backendIndex = 73;
    Int32_operator_add_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_add_Int32.parameters = Int32_operator_add_Int32_args;
    Symbol::Resolved(&Int32_operator_add_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_add_Int32)->signature = "operator+(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_add_Int32)->name = "operator+(i32)"_c;
    Symbol::Resolved(&Int32_operator_add_Int32)->nameWithVarNames = "operator+(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_add_Int32)->returnTypeSymbol = &Int32Type;

    /// operator- with Int32
    Int32_operator_sub_Int32_arg.name = "arg"_c;
    Int32_operator_sub_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_sub_Int32.name = Int32_operator_sub_Int32_name;
    Int32_operator_sub_Int32.backendIndex = 74;
    Int32_operator_sub_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_sub_Int32.parameters = Int32_operator_sub_Int32_args;
    Symbol::Resolved(&Int32_operator_sub_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_sub_Int32)->signature = "operator-(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_sub_Int32)->name = "operator-(i32)"_c;
    Symbol::Resolved(&Int32_operator_sub_Int32)->nameWithVarNames = "operator-(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_sub_Int32)->returnTypeSymbol = &Int32Type;

    /// operator* with Int32
    Int32_operator_mul_Int32_arg.name = "arg"_c;
    Int32_operator_mul_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_mul_Int32.name = Int32_operator_mul_Int32_name;
    Int32_operator_mul_Int32.backendIndex = 75;
    Int32_operator_mul_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_mul_Int32.parameters = Int32_operator_mul_Int32_args;
    Symbol::Resolved(&Int32_operator_mul_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_mul_Int32)->signature = "operator*(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_mul_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&Int32_operator_mul_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_mul_Int32)->returnTypeSymbol = &Int32Type;

    /// operator/ with Int32
    Int32_operator_div_Int32_arg.name = "arg"_c;
    Int32_operator_div_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_div_Int32.name = Int32_operator_div_Int32_name;
    Int32_operator_div_Int32.backendIndex = 76;
    Int32_operator_div_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_div_Int32.parameters = Int32_operator_div_Int32_args;
    Symbol::Resolved(&Int32_operator_div_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_div_Int32)->signature = "operator/(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_div_Int32)->name = "operator/(i32)"_c;
    Symbol::Resolved(&Int32_operator_div_Int32)->nameWithVarNames = "operator/(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_div_Int32)->returnTypeSymbol = &Int32Type;

    /// operator% with Int32
    Int32_operator_mod_Int32_arg.name = "arg"_c;
    Int32_operator_mod_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_mod_Int32.name = Int32_operator_mod_Int32_name;
    Int32_operator_mod_Int32.backendIndex = 77;
    Int32_operator_mod_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_mod_Int32.parameters = Int32_operator_mod_Int32_args;
    Symbol::Resolved(&Int32_operator_mod_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_mod_Int32)->signature = "operator%(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_mod_Int32)->name = "operator%(i32)"_c;
    Symbol::Resolved(&Int32_operator_mod_Int32)->nameWithVarNames = "operator%(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_mod_Int32)->returnTypeSymbol = &Int32Type;

    /// operator+= with Int32
    Int32_operator_addasg_Int32_arg.name = "arg"_c;
    Int32_operator_addasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_addasg_Int32.name = Int32_operator_addasg_Int32_name;
    Int32_operator_addasg_Int32.backendIndex = 78;
    Int32_operator_addasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_addasg_Int32.parameters = Int32_operator_addasg_Int32_args;
    Symbol::Resolved(&Int32_operator_addasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_addasg_Int32)->signature = "operator+=(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_addasg_Int32)->name = "operator+=(i32)"_c;
    Symbol::Resolved(&Int32_operator_addasg_Int32)->nameWithVarNames = "operator+=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_addasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator-= with Int32
    Int32_operator_subasg_Int32_arg.name = "arg"_c;
    Int32_operator_subasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_subasg_Int32.name = Int32_operator_subasg_Int32_name;
    Int32_operator_subasg_Int32.backendIndex = 79;
    Int32_operator_subasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_subasg_Int32.parameters = Int32_operator_subasg_Int32_args;
    Symbol::Resolved(&Int32_operator_subasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_subasg_Int32)->signature = "operator-=(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_subasg_Int32)->name = "operator-=(i32)"_c;
    Symbol::Resolved(&Int32_operator_subasg_Int32)->nameWithVarNames = "operator-=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_subasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator*= with Int32
    Int32_operator_mulasg_Int32_arg.name = "arg"_c;
    Int32_operator_mulasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_mulasg_Int32.name = Int32_operator_mulasg_Int32_name;
    Int32_operator_mulasg_Int32.backendIndex = 80;
    Int32_operator_mulasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_mulasg_Int32.parameters = Int32_operator_mulasg_Int32_args;
    Symbol::Resolved(&Int32_operator_mulasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_mulasg_Int32)->signature = "operator*=(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_mulasg_Int32)->name = "operator*=(i32)"_c;
    Symbol::Resolved(&Int32_operator_mulasg_Int32)->nameWithVarNames = "operator*=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_mulasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator/= with Int32
    Int32_operator_divasg_Int32_arg.name = "arg"_c;
    Int32_operator_divasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_divasg_Int32.name = Int32_operator_divasg_Int32_name;
    Int32_operator_divasg_Int32.backendIndex = 81;
    Int32_operator_divasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_divasg_Int32.parameters = Int32_operator_divasg_Int32_args;
    Symbol::Resolved(&Int32_operator_divasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_divasg_Int32)->signature = "operator/=(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_divasg_Int32)->name = "operator/=(i32)"_c;
    Symbol::Resolved(&Int32_operator_divasg_Int32)->nameWithVarNames = "operator/=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_divasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator< with Int32
    Int32_operator_lt_Int32_arg.name = "arg"_c;
    Int32_operator_lt_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_lt_Int32.name = Int32_operator_lt_Int32_name;
    Int32_operator_lt_Int32.backendIndex = 82;
    Int32_operator_lt_Int32.returnType = Type::FullType { Bool8Type.name };
    Int32_operator_lt_Int32.parameters = Int32_operator_lt_Int32_args;
    Symbol::Resolved(&Int32_operator_lt_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_lt_Int32)->signature = "operator<(i32) b8"_c;
    Symbol::Resolved(&Int32_operator_lt_Int32)->name = "operator<(i32)"_c;
    Symbol::Resolved(&Int32_operator_lt_Int32)->nameWithVarNames = "operator<(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_lt_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator<= with Int32
    Int32_operator_lte_Int32_arg.name = "arg"_c;
    Int32_operator_lte_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_lte_Int32.name = Int32_operator_lte_Int32_name;
    Int32_operator_lte_Int32.backendIndex = 83;
    Int32_operator_lte_Int32.returnType = Type::FullType { Bool8Type.name };
    Int32_operator_lte_Int32.parameters = Int32_operator_lte_Int32_args;
    Symbol::Resolved(&Int32_operator_lte_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_lte_Int32)->signature = "operator<=(i32) b8"_c;
    Symbol::Resolved(&Int32_operator_lte_Int32)->name = "operator<=(i32)"_c;
    Symbol::Resolved(&Int32_operator_lte_Int32)->nameWithVarNames = "operator<=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_lte_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator> with Int32
    Int32_operator_gt_Int32_arg.name = "arg"_c;
    Int32_operator_gt_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_gt_Int32.name = Int32_operator_gt_Int32_name;
    Int32_operator_gt_Int32.backendIndex = 84;
    Int32_operator_gt_Int32.returnType = Type::FullType { Bool8Type.name };
    Int32_operator_gt_Int32.parameters = Int32_operator_gt_Int32_args;
    Symbol::Resolved(&Int32_operator_gt_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_gt_Int32)->signature = "operator>(i32) b8"_c;
    Symbol::Resolved(&Int32_operator_gt_Int32)->name = "operator>(i32)"_c;
    Symbol::Resolved(&Int32_operator_gt_Int32)->nameWithVarNames = "operator>(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_gt_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator>= with Int32
    Int32_operator_gte_Int32_arg.name = "arg"_c;
    Int32_operator_gte_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_gte_Int32.name = Int32_operator_gte_Int32_name;
    Int32_operator_gte_Int32.backendIndex = 85;
    Int32_operator_gte_Int32.returnType = Type::FullType { Bool8Type.name };
    Int32_operator_gte_Int32.parameters = Int32_operator_gte_Int32_args;
    Symbol::Resolved(&Int32_operator_gte_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_gte_Int32)->signature = "operator>=(i32) b8"_c;
    Symbol::Resolved(&Int32_operator_gte_Int32)->name = "operator>=(i32)"_c;
    Symbol::Resolved(&Int32_operator_gte_Int32)->nameWithVarNames = "operator>=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_gte_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator== with Int32
    Int32_operator_eq_Int32_arg.name = "arg"_c;
    Int32_operator_eq_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_eq_Int32.name = Int32_operator_eq_Int32_name;
    Int32_operator_eq_Int32.backendIndex = 86;
    Int32_operator_eq_Int32.returnType = Type::FullType { Bool8Type.name };
    Int32_operator_eq_Int32.parameters = Int32_operator_eq_Int32_args;
    Symbol::Resolved(&Int32_operator_eq_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_eq_Int32)->signature = "operator==(i32) b8"_c;
    Symbol::Resolved(&Int32_operator_eq_Int32)->name = "operator==(i32)"_c;
    Symbol::Resolved(&Int32_operator_eq_Int32)->nameWithVarNames = "operator==(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_eq_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Int32
    Int32_operator_neq_Int32_arg.name = "arg"_c;
    Int32_operator_neq_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_neq_Int32.name = Int32_operator_neq_Int32_name;
    Int32_operator_neq_Int32.backendIndex = 87;
    Int32_operator_neq_Int32.returnType = Type::FullType { Bool8Type.name };
    Int32_operator_neq_Int32.parameters = Int32_operator_neq_Int32_args;
    Symbol::Resolved(&Int32_operator_neq_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_neq_Int32)->signature = "operator!=(i32) b8"_c;
    Symbol::Resolved(&Int32_operator_neq_Int32)->name = "operator!=(i32)"_c;
    Symbol::Resolved(&Int32_operator_neq_Int32)->nameWithVarNames = "operator!=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_neq_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator| with Int32
    Int32_operator_or_Int32_arg.name = "arg"_c;
    Int32_operator_or_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_or_Int32.name = Int32_operator_or_Int32_name;
    Int32_operator_or_Int32.backendIndex = 88;
    Int32_operator_or_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_or_Int32.parameters = Int32_operator_or_Int32_args;
    Symbol::Resolved(&Int32_operator_or_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_or_Int32)->signature = "operator|(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_or_Int32)->name = "operator|(i32)"_c;
    Symbol::Resolved(&Int32_operator_or_Int32)->nameWithVarNames = "operator|(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_or_Int32)->returnTypeSymbol = &Int32Type;

    /// operator& with Int32
    Int32_operator_and_Int32_arg.name = "arg"_c;
    Int32_operator_and_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_and_Int32.name = Int32_operator_and_Int32_name;
    Int32_operator_and_Int32.backendIndex = 89;
    Int32_operator_and_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_and_Int32.parameters = Int32_operator_and_Int32_args;
    Symbol::Resolved(&Int32_operator_and_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_and_Int32)->signature = "operator&(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_and_Int32)->name = "operator&(i32)"_c;
    Symbol::Resolved(&Int32_operator_and_Int32)->nameWithVarNames = "operator&(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_and_Int32)->returnTypeSymbol = &Int32Type;

    /// operator^ with Int32
    Int32_operator_xor_Int32_arg.name = "arg"_c;
    Int32_operator_xor_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_xor_Int32.name = Int32_operator_xor_Int32_name;
    Int32_operator_xor_Int32.backendIndex = 90;
    Int32_operator_xor_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_xor_Int32.parameters = Int32_operator_xor_Int32_args;
    Symbol::Resolved(&Int32_operator_xor_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_xor_Int32)->signature = "operator^(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_xor_Int32)->name = "operator^(i32)"_c;
    Symbol::Resolved(&Int32_operator_xor_Int32)->nameWithVarNames = "operator^(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_xor_Int32)->returnTypeSymbol = &Int32Type;

    /// operator<< with Int32
    Int32_operator_lsh_Int32_arg.name = "arg"_c;
    Int32_operator_lsh_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_lsh_Int32.name = Int32_operator_lsh_Int32_name;
    Int32_operator_lsh_Int32.backendIndex = 91;
    Int32_operator_lsh_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_lsh_Int32.parameters = Int32_operator_lsh_Int32_args;
    Symbol::Resolved(&Int32_operator_lsh_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_lsh_Int32)->signature = "operator<<(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_lsh_Int32)->name = "operator<<(i32)"_c;
    Symbol::Resolved(&Int32_operator_lsh_Int32)->nameWithVarNames = "operator<<(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_lsh_Int32)->returnTypeSymbol = &Int32Type;

    /// operator>> with Int32
    Int32_operator_rsh_Int32_arg.name = "arg"_c;
    Int32_operator_rsh_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_rsh_Int32.name = Int32_operator_rsh_Int32_name;
    Int32_operator_rsh_Int32.backendIndex = 92;
    Int32_operator_rsh_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_rsh_Int32.parameters = Int32_operator_rsh_Int32_args;
    Symbol::Resolved(&Int32_operator_rsh_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_rsh_Int32)->signature = "operator>>(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_rsh_Int32)->name = "operator>>(i32)"_c;
    Symbol::Resolved(&Int32_operator_rsh_Int32)->nameWithVarNames = "operator>>(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_rsh_Int32)->returnTypeSymbol = &Int32Type;

    /// operator|= with Int32
    Int32_operator_orasg_Int32_arg.name = "arg"_c;
    Int32_operator_orasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_orasg_Int32.name = Int32_operator_orasg_Int32_name;
    Int32_operator_orasg_Int32.backendIndex = 93;
    Int32_operator_orasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_orasg_Int32.parameters = Int32_operator_orasg_Int32_args;
    Symbol::Resolved(&Int32_operator_orasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_orasg_Int32)->signature = "operator|=(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_orasg_Int32)->name = "operator|=(i32)"_c;
    Symbol::Resolved(&Int32_operator_orasg_Int32)->nameWithVarNames = "operator|=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_orasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator&= with Int32
    Int32_operator_andasg_Int32_arg.name = "arg"_c;
    Int32_operator_andasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_andasg_Int32.name = Int32_operator_andasg_Int32_name;
    Int32_operator_andasg_Int32.backendIndex = 94;
    Int32_operator_andasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_andasg_Int32.parameters = Int32_operator_andasg_Int32_args;
    Symbol::Resolved(&Int32_operator_andasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_andasg_Int32)->signature = "operator&=(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_andasg_Int32)->name = "operator&=(i32)"_c;
    Symbol::Resolved(&Int32_operator_andasg_Int32)->nameWithVarNames = "operator&=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_andasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator^= with Int32
    Int32_operator_xorasg_Int32_arg.name = "arg"_c;
    Int32_operator_xorasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_xorasg_Int32.name = Int32_operator_xorasg_Int32_name;
    Int32_operator_xorasg_Int32.backendIndex = 95;
    Int32_operator_xorasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_xorasg_Int32.parameters = Int32_operator_xorasg_Int32_args;
    Symbol::Resolved(&Int32_operator_xorasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_xorasg_Int32)->signature = "operator^=(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_xorasg_Int32)->name = "operator^=(i32)"_c;
    Symbol::Resolved(&Int32_operator_xorasg_Int32)->nameWithVarNames = "operator^=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_xorasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator<<= with Int32
    Int32_operator_lshasg_Int32_arg.name = "arg"_c;
    Int32_operator_lshasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_lshasg_Int32.name = Int32_operator_lshasg_Int32_name;
    Int32_operator_lshasg_Int32.backendIndex = 96;
    Int32_operator_lshasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_lshasg_Int32.parameters = Int32_operator_lshasg_Int32_args;
    Symbol::Resolved(&Int32_operator_lshasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_lshasg_Int32)->signature = "operator<<=(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_lshasg_Int32)->name = "operator<<=(i32)"_c;
    Symbol::Resolved(&Int32_operator_lshasg_Int32)->nameWithVarNames = "operator<<=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_lshasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator>>= with Int32
    Int32_operator_rhsasg_Int32_arg.name = "arg"_c;
    Int32_operator_rhsasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_rhsasg_Int32.name = Int32_operator_rhsasg_Int32_name;
    Int32_operator_rhsasg_Int32.backendIndex = 97;
    Int32_operator_rhsasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_rhsasg_Int32.parameters = Int32_operator_rhsasg_Int32_args;
    Symbol::Resolved(&Int32_operator_rhsasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_rhsasg_Int32)->signature = "operator>>=(i32) i32"_c;
    Symbol::Resolved(&Int32_operator_rhsasg_Int32)->name = "operator>>=(i32)"_c;
    Symbol::Resolved(&Int32_operator_rhsasg_Int32)->nameWithVarNames = "operator>>=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_rhsasg_Int32)->returnTypeSymbol = &Int32Type;

    this->scope.symbolLookup = Int32_symbolLookup;
}
Int32 Int32Type;

/// operator[] with Int32
Variable Bool8_operator_index_Int32_arg;
Function Bool8_operator_index_Int32;
inline constexpr std::array Bool8_operator_index_Int32_args = { &Bool8_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Bool8_operator_index_UInt32_arg;
Function Bool8_operator_index_UInt32;
inline constexpr std::array Bool8_operator_index_UInt32_args = { &Bool8_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Bool8_operator_index_Int16_arg;
Function Bool8_operator_index_Int16;
inline constexpr std::array Bool8_operator_index_Int16_args = { &Bool8_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Bool8_operator_index_UInt16_arg;
Function Bool8_operator_index_UInt16;
inline constexpr std::array Bool8_operator_index_UInt16_args = { &Bool8_operator_index_UInt16_arg };

/// operator|| with Bool8
Variable Bool8_operator_oror_Bool8_arg;
Function Bool8_operator_oror_Bool8;
inline constexpr std::array Bool8_operator_oror_Bool8_args = { &Bool8_operator_oror_Bool8_arg };

/// operator&& with Bool8
Variable Bool8_operator_andand_Bool8_arg;
Function Bool8_operator_andand_Bool8;
inline constexpr std::array Bool8_operator_andand_Bool8_args = { &Bool8_operator_andand_Bool8_arg };

/// operator== with Bool8
Variable Bool8_operator_eq_Bool8_arg;
Function Bool8_operator_eq_Bool8;
inline constexpr std::array Bool8_operator_eq_Bool8_args = { &Bool8_operator_eq_Bool8_arg };

/// operator!= with Bool8
Variable Bool8_operator_neq_Bool8_arg;
Function Bool8_operator_neq_Bool8;
inline constexpr std::array Bool8_operator_neq_Bool8_args = { &Bool8_operator_neq_Bool8_arg };

static constexpr StaticMap<HashString, Symbol*, 16> Bool8_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &Bool8_operator_index_Int16 },
    std::pair{ "operator!=(b8)"_h, &Bool8_operator_neq_Bool8 },
    std::pair{ "operator&&(b8)"_h, &Bool8_operator_andand_Bool8 },
    std::pair{ "operator==(b8)"_h, &Bool8_operator_eq_Bool8 },
    std::pair{ "operator[](u32)"_h, &Bool8_operator_index_UInt32 },
    std::pair{ "operator[](u16)"_h, &Bool8_operator_index_UInt16 },
    std::pair{ "operator||(b8)"_h, &Bool8_operator_oror_Bool8 },
    std::pair{ "operator[]"_h, &Bool8_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Bool8_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Bool8_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Bool8_operator_index_UInt16 },
    std::pair{ "operator||"_h, &Bool8_operator_oror_Bool8 },
    std::pair{ "operator=="_h, &Bool8_operator_eq_Bool8 },
    std::pair{ "operator&&"_h, &Bool8_operator_andand_Bool8 },
    std::pair{ "operator!="_h, &Bool8_operator_neq_Bool8 },
    std::pair{ "operator[](i32)"_h, &Bool8_operator_index_Int32 }
    };

Bool8::Bool8()
{
    this->name = "b8"_c;
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 1;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    /// operator[] with Int32
    Bool8_operator_index_Int32_arg.name = "arg"_c;
    Bool8_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Bool8_operator_index_Int32.name = Bool8_operator_index_Int32_name;
    Bool8_operator_index_Int32.backendIndex = 103;
    Bool8_operator_index_Int32.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_index_Int32.parameters = Bool8_operator_index_Int32_args;
    Symbol::Resolved(&Bool8_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8_operator_index_Int32)->signature = "operator[](i32) b8"_c;
    Symbol::Resolved(&Bool8_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Bool8_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Bool8_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt32
    Bool8_operator_index_UInt32_arg.name = "arg"_c;
    Bool8_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Bool8_operator_index_UInt32.name = Bool8_operator_index_UInt32_name;
    Bool8_operator_index_UInt32.backendIndex = 104;
    Bool8_operator_index_UInt32.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_index_UInt32.parameters = Bool8_operator_index_UInt32_args;
    Symbol::Resolved(&Bool8_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8_operator_index_UInt32)->signature = "operator[](u32) b8"_c;
    Symbol::Resolved(&Bool8_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Bool8_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Bool8_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with Int16
    Bool8_operator_index_Int16_arg.name = "arg"_c;
    Bool8_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Bool8_operator_index_Int16.name = Bool8_operator_index_Int16_name;
    Bool8_operator_index_Int16.backendIndex = 105;
    Bool8_operator_index_Int16.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_index_Int16.parameters = Bool8_operator_index_Int16_args;
    Symbol::Resolved(&Bool8_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8_operator_index_Int16)->signature = "operator[](i16) b8"_c;
    Symbol::Resolved(&Bool8_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Bool8_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Bool8_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt16
    Bool8_operator_index_UInt16_arg.name = "arg"_c;
    Bool8_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Bool8_operator_index_UInt16.name = Bool8_operator_index_UInt16_name;
    Bool8_operator_index_UInt16.backendIndex = 106;
    Bool8_operator_index_UInt16.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_index_UInt16.parameters = Bool8_operator_index_UInt16_args;
    Symbol::Resolved(&Bool8_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8_operator_index_UInt16)->signature = "operator[](u16) b8"_c;
    Symbol::Resolved(&Bool8_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Bool8_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Bool8_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator|| with Bool8
    Bool8_operator_oror_Bool8_arg.name = "arg"_c;
    Bool8_operator_oror_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Bool8_operator_oror_Bool8.name = Bool8_operator_oror_Bool8_name;
    Bool8_operator_oror_Bool8.backendIndex = 107;
    Bool8_operator_oror_Bool8.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_oror_Bool8.parameters = Bool8_operator_oror_Bool8_args;
    Symbol::Resolved(&Bool8_operator_oror_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8_operator_oror_Bool8)->signature = "operator||(b8) b8"_c;
    Symbol::Resolved(&Bool8_operator_oror_Bool8)->name = "operator||(b8)"_c;
    Symbol::Resolved(&Bool8_operator_oror_Bool8)->nameWithVarNames = "operator||(arg : b8)"_c;
    Symbol::Resolved(&Bool8_operator_oror_Bool8)->returnTypeSymbol = &Bool8Type;

    /// operator&& with Bool8
    Bool8_operator_andand_Bool8_arg.name = "arg"_c;
    Bool8_operator_andand_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Bool8_operator_andand_Bool8.name = Bool8_operator_andand_Bool8_name;
    Bool8_operator_andand_Bool8.backendIndex = 108;
    Bool8_operator_andand_Bool8.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_andand_Bool8.parameters = Bool8_operator_andand_Bool8_args;
    Symbol::Resolved(&Bool8_operator_andand_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8_operator_andand_Bool8)->signature = "operator&&(b8) b8"_c;
    Symbol::Resolved(&Bool8_operator_andand_Bool8)->name = "operator&&(b8)"_c;
    Symbol::Resolved(&Bool8_operator_andand_Bool8)->nameWithVarNames = "operator&&(arg : b8)"_c;
    Symbol::Resolved(&Bool8_operator_andand_Bool8)->returnTypeSymbol = &Bool8Type;

    /// operator== with Bool8
    Bool8_operator_eq_Bool8_arg.name = "arg"_c;
    Bool8_operator_eq_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Bool8_operator_eq_Bool8.name = Bool8_operator_eq_Bool8_name;
    Bool8_operator_eq_Bool8.backendIndex = 109;
    Bool8_operator_eq_Bool8.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_eq_Bool8.parameters = Bool8_operator_eq_Bool8_args;
    Symbol::Resolved(&Bool8_operator_eq_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8_operator_eq_Bool8)->signature = "operator==(b8) b8"_c;
    Symbol::Resolved(&Bool8_operator_eq_Bool8)->name = "operator==(b8)"_c;
    Symbol::Resolved(&Bool8_operator_eq_Bool8)->nameWithVarNames = "operator==(arg : b8)"_c;
    Symbol::Resolved(&Bool8_operator_eq_Bool8)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Bool8
    Bool8_operator_neq_Bool8_arg.name = "arg"_c;
    Bool8_operator_neq_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Bool8_operator_neq_Bool8.name = Bool8_operator_neq_Bool8_name;
    Bool8_operator_neq_Bool8.backendIndex = 110;
    Bool8_operator_neq_Bool8.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_neq_Bool8.parameters = Bool8_operator_neq_Bool8_args;
    Symbol::Resolved(&Bool8_operator_neq_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8_operator_neq_Bool8)->signature = "operator!=(b8) b8"_c;
    Symbol::Resolved(&Bool8_operator_neq_Bool8)->name = "operator!=(b8)"_c;
    Symbol::Resolved(&Bool8_operator_neq_Bool8)->nameWithVarNames = "operator!=(arg : b8)"_c;
    Symbol::Resolved(&Bool8_operator_neq_Bool8)->returnTypeSymbol = &Bool8Type;

    this->scope.symbolLookup = Bool8_symbolLookup;
}
Bool8 Bool8Type;

/// operator[] with Int32
Variable Float16_operator_index_Int32_arg;
Function Float16_operator_index_Int32;
inline constexpr std::array Float16_operator_index_Int32_args = { &Float16_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16_operator_index_UInt32_arg;
Function Float16_operator_index_UInt32;
inline constexpr std::array Float16_operator_index_UInt32_args = { &Float16_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16_operator_index_Int16_arg;
Function Float16_operator_index_Int16;
inline constexpr std::array Float16_operator_index_Int16_args = { &Float16_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16_operator_index_UInt16_arg;
Function Float16_operator_index_UInt16;
inline constexpr std::array Float16_operator_index_UInt16_args = { &Float16_operator_index_UInt16_arg };

/// operator+ with Float16
Variable Float16_operator_add_Float16_arg;
Function Float16_operator_add_Float16;
inline constexpr std::array Float16_operator_add_Float16_args = { &Float16_operator_add_Float16_arg };

/// operator- with Float16
Variable Float16_operator_sub_Float16_arg;
Function Float16_operator_sub_Float16;
inline constexpr std::array Float16_operator_sub_Float16_args = { &Float16_operator_sub_Float16_arg };

/// operator* with Float16
Variable Float16_operator_mul_Float16_arg;
Function Float16_operator_mul_Float16;
inline constexpr std::array Float16_operator_mul_Float16_args = { &Float16_operator_mul_Float16_arg };

/// operator/ with Float16
Variable Float16_operator_div_Float16_arg;
Function Float16_operator_div_Float16;
inline constexpr std::array Float16_operator_div_Float16_args = { &Float16_operator_div_Float16_arg };

/// operator% with Float16
Variable Float16_operator_mod_Float16_arg;
Function Float16_operator_mod_Float16;
inline constexpr std::array Float16_operator_mod_Float16_args = { &Float16_operator_mod_Float16_arg };

/// operator+= with Float16
Variable Float16_operator_addasg_Float16_arg;
Function Float16_operator_addasg_Float16;
inline constexpr std::array Float16_operator_addasg_Float16_args = { &Float16_operator_addasg_Float16_arg };

/// operator-= with Float16
Variable Float16_operator_subasg_Float16_arg;
Function Float16_operator_subasg_Float16;
inline constexpr std::array Float16_operator_subasg_Float16_args = { &Float16_operator_subasg_Float16_arg };

/// operator*= with Float16
Variable Float16_operator_mulasg_Float16_arg;
Function Float16_operator_mulasg_Float16;
inline constexpr std::array Float16_operator_mulasg_Float16_args = { &Float16_operator_mulasg_Float16_arg };

/// operator/= with Float16
Variable Float16_operator_divasg_Float16_arg;
Function Float16_operator_divasg_Float16;
inline constexpr std::array Float16_operator_divasg_Float16_args = { &Float16_operator_divasg_Float16_arg };

/// operator< with Float16
Variable Float16_operator_lt_Float16_arg;
Function Float16_operator_lt_Float16;
inline constexpr std::array Float16_operator_lt_Float16_args = { &Float16_operator_lt_Float16_arg };

/// operator<= with Float16
Variable Float16_operator_lte_Float16_arg;
Function Float16_operator_lte_Float16;
inline constexpr std::array Float16_operator_lte_Float16_args = { &Float16_operator_lte_Float16_arg };

/// operator> with Float16
Variable Float16_operator_gt_Float16_arg;
Function Float16_operator_gt_Float16;
inline constexpr std::array Float16_operator_gt_Float16_args = { &Float16_operator_gt_Float16_arg };

/// operator>= with Float16
Variable Float16_operator_gte_Float16_arg;
Function Float16_operator_gte_Float16;
inline constexpr std::array Float16_operator_gte_Float16_args = { &Float16_operator_gte_Float16_arg };

/// operator== with Float16
Variable Float16_operator_eq_Float16_arg;
Function Float16_operator_eq_Float16;
inline constexpr std::array Float16_operator_eq_Float16_args = { &Float16_operator_eq_Float16_arg };

/// operator!= with Float16
Variable Float16_operator_neq_Float16_arg;
Function Float16_operator_neq_Float16;
inline constexpr std::array Float16_operator_neq_Float16_args = { &Float16_operator_neq_Float16_arg };

static constexpr StaticMap<HashString, Symbol*, 38> Float16_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &Float16_operator_index_Int16 },
    std::pair{ "operator+=(f16)"_h, &Float16_operator_addasg_Float16 },
    std::pair{ "operator/=(f16)"_h, &Float16_operator_divasg_Float16 },
    std::pair{ "operator*=(f16)"_h, &Float16_operator_mulasg_Float16 },
    std::pair{ "operator<"_h, &Float16_operator_lt_Float16 },
    std::pair{ "operator>"_h, &Float16_operator_gt_Float16 },
    std::pair{ "operator-"_h, &Float16_operator_sub_Float16 },
    std::pair{ "operator/"_h, &Float16_operator_div_Float16 },
    std::pair{ "operator+"_h, &Float16_operator_add_Float16 },
    std::pair{ "operator*"_h, &Float16_operator_mul_Float16 },
    std::pair{ "operator%"_h, &Float16_operator_mod_Float16 },
    std::pair{ "operator%(f16)"_h, &Float16_operator_mod_Float16 },
    std::pair{ "operator/(f16)"_h, &Float16_operator_div_Float16 },
    std::pair{ "operator<(f16)"_h, &Float16_operator_lt_Float16 },
    std::pair{ "operator-(f16)"_h, &Float16_operator_sub_Float16 },
    std::pair{ "operator==(f16)"_h, &Float16_operator_eq_Float16 },
    std::pair{ "operator>(f16)"_h, &Float16_operator_gt_Float16 },
    std::pair{ "operator[](u32)"_h, &Float16_operator_index_UInt32 },
    std::pair{ "operator!=(f16)"_h, &Float16_operator_neq_Float16 },
    std::pair{ "operator[](u16)"_h, &Float16_operator_index_UInt16 },
    std::pair{ "operator*(f16)"_h, &Float16_operator_mul_Float16 },
    std::pair{ "operator<=(f16)"_h, &Float16_operator_lte_Float16 },
    std::pair{ "operator>=(f16)"_h, &Float16_operator_gte_Float16 },
    std::pair{ "operator[]"_h, &Float16_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float16_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float16_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float16_operator_index_UInt16 },
    std::pair{ "operator=="_h, &Float16_operator_eq_Float16 },
    std::pair{ "operator<="_h, &Float16_operator_lte_Float16 },
    std::pair{ "operator>="_h, &Float16_operator_gte_Float16 },
    std::pair{ "operator-="_h, &Float16_operator_subasg_Float16 },
    std::pair{ "operator/="_h, &Float16_operator_divasg_Float16 },
    std::pair{ "operator+="_h, &Float16_operator_addasg_Float16 },
    std::pair{ "operator*="_h, &Float16_operator_mulasg_Float16 },
    std::pair{ "operator!="_h, &Float16_operator_neq_Float16 },
    std::pair{ "operator+(f16)"_h, &Float16_operator_add_Float16 },
    std::pair{ "operator-=(f16)"_h, &Float16_operator_subasg_Float16 },
    std::pair{ "operator[](i32)"_h, &Float16_operator_index_Int32 }
    };

Float16::Float16()
{
    this->name = "f16"_c;
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16_operator_index_Int32_arg.name = "arg"_c;
    Float16_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16_operator_index_Int32.name = Float16_operator_index_Int32_name;
    Float16_operator_index_Int32.backendIndex = 118;
    Float16_operator_index_Int32.returnType = Type::FullType { Float16Type.name };
    Float16_operator_index_Int32.parameters = Float16_operator_index_Int32_args;
    Symbol::Resolved(&Float16_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16_operator_index_Int32)->signature = "operator[](i32) f16"_c;
    Symbol::Resolved(&Float16_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float16_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt32
    Float16_operator_index_UInt32_arg.name = "arg"_c;
    Float16_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16_operator_index_UInt32.name = Float16_operator_index_UInt32_name;
    Float16_operator_index_UInt32.backendIndex = 119;
    Float16_operator_index_UInt32.returnType = Type::FullType { Float16Type.name };
    Float16_operator_index_UInt32.parameters = Float16_operator_index_UInt32_args;
    Symbol::Resolved(&Float16_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16_operator_index_UInt32)->signature = "operator[](u32) f16"_c;
    Symbol::Resolved(&Float16_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float16_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    /// operator[] with Int16
    Float16_operator_index_Int16_arg.name = "arg"_c;
    Float16_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16_operator_index_Int16.name = Float16_operator_index_Int16_name;
    Float16_operator_index_Int16.backendIndex = 120;
    Float16_operator_index_Int16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_index_Int16.parameters = Float16_operator_index_Int16_args;
    Symbol::Resolved(&Float16_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16_operator_index_Int16)->signature = "operator[](i16) f16"_c;
    Symbol::Resolved(&Float16_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float16_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt16
    Float16_operator_index_UInt16_arg.name = "arg"_c;
    Float16_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16_operator_index_UInt16.name = Float16_operator_index_UInt16_name;
    Float16_operator_index_UInt16.backendIndex = 121;
    Float16_operator_index_UInt16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_index_UInt16.parameters = Float16_operator_index_UInt16_args;
    Symbol::Resolved(&Float16_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16_operator_index_UInt16)->signature = "operator[](u16) f16"_c;
    Symbol::Resolved(&Float16_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float16_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    /// operator+ with Float16
    Float16_operator_add_Float16_arg.name = "arg"_c;
    Float16_operator_add_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_add_Float16.name = Float16_operator_add_Float16_name;
    Float16_operator_add_Float16.backendIndex = 122;
    Float16_operator_add_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_add_Float16.parameters = Float16_operator_add_Float16_args;
    Symbol::Resolved(&Float16_operator_add_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_add_Float16)->signature = "operator+(f16) f16"_c;
    Symbol::Resolved(&Float16_operator_add_Float16)->name = "operator+(f16)"_c;
    Symbol::Resolved(&Float16_operator_add_Float16)->nameWithVarNames = "operator+(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_add_Float16)->returnTypeSymbol = &Float16Type;

    /// operator- with Float16
    Float16_operator_sub_Float16_arg.name = "arg"_c;
    Float16_operator_sub_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_sub_Float16.name = Float16_operator_sub_Float16_name;
    Float16_operator_sub_Float16.backendIndex = 123;
    Float16_operator_sub_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_sub_Float16.parameters = Float16_operator_sub_Float16_args;
    Symbol::Resolved(&Float16_operator_sub_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_sub_Float16)->signature = "operator-(f16) f16"_c;
    Symbol::Resolved(&Float16_operator_sub_Float16)->name = "operator-(f16)"_c;
    Symbol::Resolved(&Float16_operator_sub_Float16)->nameWithVarNames = "operator-(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_sub_Float16)->returnTypeSymbol = &Float16Type;

    /// operator* with Float16
    Float16_operator_mul_Float16_arg.name = "arg"_c;
    Float16_operator_mul_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_mul_Float16.name = Float16_operator_mul_Float16_name;
    Float16_operator_mul_Float16.backendIndex = 124;
    Float16_operator_mul_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_mul_Float16.parameters = Float16_operator_mul_Float16_args;
    Symbol::Resolved(&Float16_operator_mul_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_mul_Float16)->signature = "operator*(f16) f16"_c;
    Symbol::Resolved(&Float16_operator_mul_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16_operator_mul_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_mul_Float16)->returnTypeSymbol = &Float16Type;

    /// operator/ with Float16
    Float16_operator_div_Float16_arg.name = "arg"_c;
    Float16_operator_div_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_div_Float16.name = Float16_operator_div_Float16_name;
    Float16_operator_div_Float16.backendIndex = 125;
    Float16_operator_div_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_div_Float16.parameters = Float16_operator_div_Float16_args;
    Symbol::Resolved(&Float16_operator_div_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_div_Float16)->signature = "operator/(f16) f16"_c;
    Symbol::Resolved(&Float16_operator_div_Float16)->name = "operator/(f16)"_c;
    Symbol::Resolved(&Float16_operator_div_Float16)->nameWithVarNames = "operator/(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_div_Float16)->returnTypeSymbol = &Float16Type;

    /// operator% with Float16
    Float16_operator_mod_Float16_arg.name = "arg"_c;
    Float16_operator_mod_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_mod_Float16.name = Float16_operator_mod_Float16_name;
    Float16_operator_mod_Float16.backendIndex = 126;
    Float16_operator_mod_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_mod_Float16.parameters = Float16_operator_mod_Float16_args;
    Symbol::Resolved(&Float16_operator_mod_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_mod_Float16)->signature = "operator%(f16) f16"_c;
    Symbol::Resolved(&Float16_operator_mod_Float16)->name = "operator%(f16)"_c;
    Symbol::Resolved(&Float16_operator_mod_Float16)->nameWithVarNames = "operator%(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_mod_Float16)->returnTypeSymbol = &Float16Type;

    /// operator+= with Float16
    Float16_operator_addasg_Float16_arg.name = "arg"_c;
    Float16_operator_addasg_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_addasg_Float16.name = Float16_operator_addasg_Float16_name;
    Float16_operator_addasg_Float16.backendIndex = 127;
    Float16_operator_addasg_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_addasg_Float16.parameters = Float16_operator_addasg_Float16_args;
    Symbol::Resolved(&Float16_operator_addasg_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_addasg_Float16)->signature = "operator+=(f16) f16"_c;
    Symbol::Resolved(&Float16_operator_addasg_Float16)->name = "operator+=(f16)"_c;
    Symbol::Resolved(&Float16_operator_addasg_Float16)->nameWithVarNames = "operator+=(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_addasg_Float16)->returnTypeSymbol = &Float16Type;

    /// operator-= with Float16
    Float16_operator_subasg_Float16_arg.name = "arg"_c;
    Float16_operator_subasg_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_subasg_Float16.name = Float16_operator_subasg_Float16_name;
    Float16_operator_subasg_Float16.backendIndex = 128;
    Float16_operator_subasg_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_subasg_Float16.parameters = Float16_operator_subasg_Float16_args;
    Symbol::Resolved(&Float16_operator_subasg_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_subasg_Float16)->signature = "operator-=(f16) f16"_c;
    Symbol::Resolved(&Float16_operator_subasg_Float16)->name = "operator-=(f16)"_c;
    Symbol::Resolved(&Float16_operator_subasg_Float16)->nameWithVarNames = "operator-=(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_subasg_Float16)->returnTypeSymbol = &Float16Type;

    /// operator*= with Float16
    Float16_operator_mulasg_Float16_arg.name = "arg"_c;
    Float16_operator_mulasg_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_mulasg_Float16.name = Float16_operator_mulasg_Float16_name;
    Float16_operator_mulasg_Float16.backendIndex = 129;
    Float16_operator_mulasg_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_mulasg_Float16.parameters = Float16_operator_mulasg_Float16_args;
    Symbol::Resolved(&Float16_operator_mulasg_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_mulasg_Float16)->signature = "operator*=(f16) f16"_c;
    Symbol::Resolved(&Float16_operator_mulasg_Float16)->name = "operator*=(f16)"_c;
    Symbol::Resolved(&Float16_operator_mulasg_Float16)->nameWithVarNames = "operator*=(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_mulasg_Float16)->returnTypeSymbol = &Float16Type;

    /// operator/= with Float16
    Float16_operator_divasg_Float16_arg.name = "arg"_c;
    Float16_operator_divasg_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_divasg_Float16.name = Float16_operator_divasg_Float16_name;
    Float16_operator_divasg_Float16.backendIndex = 130;
    Float16_operator_divasg_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_divasg_Float16.parameters = Float16_operator_divasg_Float16_args;
    Symbol::Resolved(&Float16_operator_divasg_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_divasg_Float16)->signature = "operator/=(f16) f16"_c;
    Symbol::Resolved(&Float16_operator_divasg_Float16)->name = "operator/=(f16)"_c;
    Symbol::Resolved(&Float16_operator_divasg_Float16)->nameWithVarNames = "operator/=(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_divasg_Float16)->returnTypeSymbol = &Float16Type;

    /// operator< with Float16
    Float16_operator_lt_Float16_arg.name = "arg"_c;
    Float16_operator_lt_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_lt_Float16.name = Float16_operator_lt_Float16_name;
    Float16_operator_lt_Float16.backendIndex = 131;
    Float16_operator_lt_Float16.returnType = Type::FullType { Bool8Type.name };
    Float16_operator_lt_Float16.parameters = Float16_operator_lt_Float16_args;
    Symbol::Resolved(&Float16_operator_lt_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_lt_Float16)->signature = "operator<(f16) b8"_c;
    Symbol::Resolved(&Float16_operator_lt_Float16)->name = "operator<(f16)"_c;
    Symbol::Resolved(&Float16_operator_lt_Float16)->nameWithVarNames = "operator<(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_lt_Float16)->returnTypeSymbol = &Bool8Type;

    /// operator<= with Float16
    Float16_operator_lte_Float16_arg.name = "arg"_c;
    Float16_operator_lte_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_lte_Float16.name = Float16_operator_lte_Float16_name;
    Float16_operator_lte_Float16.backendIndex = 132;
    Float16_operator_lte_Float16.returnType = Type::FullType { Bool8Type.name };
    Float16_operator_lte_Float16.parameters = Float16_operator_lte_Float16_args;
    Symbol::Resolved(&Float16_operator_lte_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_lte_Float16)->signature = "operator<=(f16) b8"_c;
    Symbol::Resolved(&Float16_operator_lte_Float16)->name = "operator<=(f16)"_c;
    Symbol::Resolved(&Float16_operator_lte_Float16)->nameWithVarNames = "operator<=(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_lte_Float16)->returnTypeSymbol = &Bool8Type;

    /// operator> with Float16
    Float16_operator_gt_Float16_arg.name = "arg"_c;
    Float16_operator_gt_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_gt_Float16.name = Float16_operator_gt_Float16_name;
    Float16_operator_gt_Float16.backendIndex = 133;
    Float16_operator_gt_Float16.returnType = Type::FullType { Bool8Type.name };
    Float16_operator_gt_Float16.parameters = Float16_operator_gt_Float16_args;
    Symbol::Resolved(&Float16_operator_gt_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_gt_Float16)->signature = "operator>(f16) b8"_c;
    Symbol::Resolved(&Float16_operator_gt_Float16)->name = "operator>(f16)"_c;
    Symbol::Resolved(&Float16_operator_gt_Float16)->nameWithVarNames = "operator>(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_gt_Float16)->returnTypeSymbol = &Bool8Type;

    /// operator>= with Float16
    Float16_operator_gte_Float16_arg.name = "arg"_c;
    Float16_operator_gte_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_gte_Float16.name = Float16_operator_gte_Float16_name;
    Float16_operator_gte_Float16.backendIndex = 134;
    Float16_operator_gte_Float16.returnType = Type::FullType { Bool8Type.name };
    Float16_operator_gte_Float16.parameters = Float16_operator_gte_Float16_args;
    Symbol::Resolved(&Float16_operator_gte_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_gte_Float16)->signature = "operator>=(f16) b8"_c;
    Symbol::Resolved(&Float16_operator_gte_Float16)->name = "operator>=(f16)"_c;
    Symbol::Resolved(&Float16_operator_gte_Float16)->nameWithVarNames = "operator>=(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_gte_Float16)->returnTypeSymbol = &Bool8Type;

    /// operator== with Float16
    Float16_operator_eq_Float16_arg.name = "arg"_c;
    Float16_operator_eq_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_eq_Float16.name = Float16_operator_eq_Float16_name;
    Float16_operator_eq_Float16.backendIndex = 135;
    Float16_operator_eq_Float16.returnType = Type::FullType { Bool8Type.name };
    Float16_operator_eq_Float16.parameters = Float16_operator_eq_Float16_args;
    Symbol::Resolved(&Float16_operator_eq_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_eq_Float16)->signature = "operator==(f16) b8"_c;
    Symbol::Resolved(&Float16_operator_eq_Float16)->name = "operator==(f16)"_c;
    Symbol::Resolved(&Float16_operator_eq_Float16)->nameWithVarNames = "operator==(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_eq_Float16)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Float16
    Float16_operator_neq_Float16_arg.name = "arg"_c;
    Float16_operator_neq_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_neq_Float16.name = Float16_operator_neq_Float16_name;
    Float16_operator_neq_Float16.backendIndex = 136;
    Float16_operator_neq_Float16.returnType = Type::FullType { Bool8Type.name };
    Float16_operator_neq_Float16.parameters = Float16_operator_neq_Float16_args;
    Symbol::Resolved(&Float16_operator_neq_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_neq_Float16)->signature = "operator!=(f16) b8"_c;
    Symbol::Resolved(&Float16_operator_neq_Float16)->name = "operator!=(f16)"_c;
    Symbol::Resolved(&Float16_operator_neq_Float16)->nameWithVarNames = "operator!=(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_neq_Float16)->returnTypeSymbol = &Bool8Type;

    this->scope.symbolLookup = Float16_symbolLookup;
}
Float16 Float16Type;

/// operator[] with Int32
Variable UInt16_operator_index_Int32_arg;
Function UInt16_operator_index_Int32;
inline constexpr std::array UInt16_operator_index_Int32_args = { &UInt16_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt16_operator_index_UInt32_arg;
Function UInt16_operator_index_UInt32;
inline constexpr std::array UInt16_operator_index_UInt32_args = { &UInt16_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt16_operator_index_Int16_arg;
Function UInt16_operator_index_Int16;
inline constexpr std::array UInt16_operator_index_Int16_args = { &UInt16_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt16_operator_index_UInt16_arg;
Function UInt16_operator_index_UInt16;
inline constexpr std::array UInt16_operator_index_UInt16_args = { &UInt16_operator_index_UInt16_arg };

/// operator+ with UInt16
Variable UInt16_operator_add_UInt16_arg;
Function UInt16_operator_add_UInt16;
inline constexpr std::array UInt16_operator_add_UInt16_args = { &UInt16_operator_add_UInt16_arg };

/// operator- with UInt16
Variable UInt16_operator_sub_UInt16_arg;
Function UInt16_operator_sub_UInt16;
inline constexpr std::array UInt16_operator_sub_UInt16_args = { &UInt16_operator_sub_UInt16_arg };

/// operator* with UInt16
Variable UInt16_operator_mul_UInt16_arg;
Function UInt16_operator_mul_UInt16;
inline constexpr std::array UInt16_operator_mul_UInt16_args = { &UInt16_operator_mul_UInt16_arg };

/// operator/ with UInt16
Variable UInt16_operator_div_UInt16_arg;
Function UInt16_operator_div_UInt16;
inline constexpr std::array UInt16_operator_div_UInt16_args = { &UInt16_operator_div_UInt16_arg };

/// operator% with UInt16
Variable UInt16_operator_mod_UInt16_arg;
Function UInt16_operator_mod_UInt16;
inline constexpr std::array UInt16_operator_mod_UInt16_args = { &UInt16_operator_mod_UInt16_arg };

/// operator+= with UInt16
Variable UInt16_operator_addasg_UInt16_arg;
Function UInt16_operator_addasg_UInt16;
inline constexpr std::array UInt16_operator_addasg_UInt16_args = { &UInt16_operator_addasg_UInt16_arg };

/// operator-= with UInt16
Variable UInt16_operator_subasg_UInt16_arg;
Function UInt16_operator_subasg_UInt16;
inline constexpr std::array UInt16_operator_subasg_UInt16_args = { &UInt16_operator_subasg_UInt16_arg };

/// operator*= with UInt16
Variable UInt16_operator_mulasg_UInt16_arg;
Function UInt16_operator_mulasg_UInt16;
inline constexpr std::array UInt16_operator_mulasg_UInt16_args = { &UInt16_operator_mulasg_UInt16_arg };

/// operator/= with UInt16
Variable UInt16_operator_divasg_UInt16_arg;
Function UInt16_operator_divasg_UInt16;
inline constexpr std::array UInt16_operator_divasg_UInt16_args = { &UInt16_operator_divasg_UInt16_arg };

/// operator< with UInt16
Variable UInt16_operator_lt_UInt16_arg;
Function UInt16_operator_lt_UInt16;
inline constexpr std::array UInt16_operator_lt_UInt16_args = { &UInt16_operator_lt_UInt16_arg };

/// operator<= with UInt16
Variable UInt16_operator_lte_UInt16_arg;
Function UInt16_operator_lte_UInt16;
inline constexpr std::array UInt16_operator_lte_UInt16_args = { &UInt16_operator_lte_UInt16_arg };

/// operator> with UInt16
Variable UInt16_operator_gt_UInt16_arg;
Function UInt16_operator_gt_UInt16;
inline constexpr std::array UInt16_operator_gt_UInt16_args = { &UInt16_operator_gt_UInt16_arg };

/// operator>= with UInt16
Variable UInt16_operator_gte_UInt16_arg;
Function UInt16_operator_gte_UInt16;
inline constexpr std::array UInt16_operator_gte_UInt16_args = { &UInt16_operator_gte_UInt16_arg };

/// operator== with UInt16
Variable UInt16_operator_eq_UInt16_arg;
Function UInt16_operator_eq_UInt16;
inline constexpr std::array UInt16_operator_eq_UInt16_args = { &UInt16_operator_eq_UInt16_arg };

/// operator!= with UInt16
Variable UInt16_operator_neq_UInt16_arg;
Function UInt16_operator_neq_UInt16;
inline constexpr std::array UInt16_operator_neq_UInt16_args = { &UInt16_operator_neq_UInt16_arg };

/// operator| with UInt16
Variable UInt16_operator_or_UInt16_arg;
Function UInt16_operator_or_UInt16;
inline constexpr std::array UInt16_operator_or_UInt16_args = { &UInt16_operator_or_UInt16_arg };

/// operator& with UInt16
Variable UInt16_operator_and_UInt16_arg;
Function UInt16_operator_and_UInt16;
inline constexpr std::array UInt16_operator_and_UInt16_args = { &UInt16_operator_and_UInt16_arg };

/// operator^ with UInt16
Variable UInt16_operator_xor_UInt16_arg;
Function UInt16_operator_xor_UInt16;
inline constexpr std::array UInt16_operator_xor_UInt16_args = { &UInt16_operator_xor_UInt16_arg };

/// operator<< with UInt16
Variable UInt16_operator_lsh_UInt16_arg;
Function UInt16_operator_lsh_UInt16;
inline constexpr std::array UInt16_operator_lsh_UInt16_args = { &UInt16_operator_lsh_UInt16_arg };

/// operator>> with UInt16
Variable UInt16_operator_rsh_UInt16_arg;
Function UInt16_operator_rsh_UInt16;
inline constexpr std::array UInt16_operator_rsh_UInt16_args = { &UInt16_operator_rsh_UInt16_arg };

/// operator|= with UInt16
Variable UInt16_operator_orasg_UInt16_arg;
Function UInt16_operator_orasg_UInt16;
inline constexpr std::array UInt16_operator_orasg_UInt16_args = { &UInt16_operator_orasg_UInt16_arg };

/// operator&= with UInt16
Variable UInt16_operator_andasg_UInt16_arg;
Function UInt16_operator_andasg_UInt16;
inline constexpr std::array UInt16_operator_andasg_UInt16_args = { &UInt16_operator_andasg_UInt16_arg };

/// operator^= with UInt16
Variable UInt16_operator_xorasg_UInt16_arg;
Function UInt16_operator_xorasg_UInt16;
inline constexpr std::array UInt16_operator_xorasg_UInt16_args = { &UInt16_operator_xorasg_UInt16_arg };

/// operator<<= with UInt16
Variable UInt16_operator_lshasg_UInt16_arg;
Function UInt16_operator_lshasg_UInt16;
inline constexpr std::array UInt16_operator_lshasg_UInt16_args = { &UInt16_operator_lshasg_UInt16_arg };

/// operator>>= with UInt16
Variable UInt16_operator_rhsasg_UInt16_arg;
Function UInt16_operator_rhsasg_UInt16;
inline constexpr std::array UInt16_operator_rhsasg_UInt16_args = { &UInt16_operator_rhsasg_UInt16_arg };

static constexpr StaticMap<HashString, Symbol*, 58> UInt16_symbolLookup = {
    std::pair{ "operator>=(u16)"_h, &UInt16_operator_gte_UInt16 },
    std::pair{ "operator[](i16)"_h, &UInt16_operator_index_Int16 },
    std::pair{ "operator/(u16)"_h, &UInt16_operator_div_UInt16 },
    std::pair{ "operator|=(u16)"_h, &UInt16_operator_orasg_UInt16 },
    std::pair{ "operator^=(u16)"_h, &UInt16_operator_xorasg_UInt16 },
    std::pair{ "operator*(u16)"_h, &UInt16_operator_mul_UInt16 },
    std::pair{ "operator>(u16)"_h, &UInt16_operator_gt_UInt16 },
    std::pair{ "operator^"_h, &UInt16_operator_xor_UInt16 },
    std::pair{ "operator|"_h, &UInt16_operator_or_UInt16 },
    std::pair{ "operator<"_h, &UInt16_operator_lt_UInt16 },
    std::pair{ "operator>"_h, &UInt16_operator_gt_UInt16 },
    std::pair{ "operator-"_h, &UInt16_operator_sub_UInt16 },
    std::pair{ "operator/"_h, &UInt16_operator_div_UInt16 },
    std::pair{ "operator+"_h, &UInt16_operator_add_UInt16 },
    std::pair{ "operator*"_h, &UInt16_operator_mul_UInt16 },
    std::pair{ "operator%"_h, &UInt16_operator_mod_UInt16 },
    std::pair{ "operator&"_h, &UInt16_operator_and_UInt16 },
    std::pair{ "operator>>(u16)"_h, &UInt16_operator_rsh_UInt16 },
    std::pair{ "operator<<(u16)"_h, &UInt16_operator_lsh_UInt16 },
    std::pair{ "operator-=(u16)"_h, &UInt16_operator_subasg_UInt16 },
    std::pair{ "operator==(u16)"_h, &UInt16_operator_eq_UInt16 },
    std::pair{ "operator|(u16)"_h, &UInt16_operator_or_UInt16 },
    std::pair{ "operator<=(u16)"_h, &UInt16_operator_lte_UInt16 },
    std::pair{ "operator*=(u16)"_h, &UInt16_operator_mulasg_UInt16 },
    std::pair{ "operator<(u16)"_h, &UInt16_operator_lt_UInt16 },
    std::pair{ "operator[](u32)"_h, &UInt16_operator_index_UInt32 },
    std::pair{ "operator<<="_h, &UInt16_operator_lshasg_UInt16 },
    std::pair{ "operator[](u16)"_h, &UInt16_operator_index_UInt16 },
    std::pair{ "operator>>="_h, &UInt16_operator_rhsasg_UInt16 },
    std::pair{ "operator>>=(u16)"_h, &UInt16_operator_rhsasg_UInt16 },
    std::pair{ "operator%(u16)"_h, &UInt16_operator_mod_UInt16 },
    std::pair{ "operator-(u16)"_h, &UInt16_operator_sub_UInt16 },
    std::pair{ "operator&(u16)"_h, &UInt16_operator_and_UInt16 },
    std::pair{ "operator!=(u16)"_h, &UInt16_operator_neq_UInt16 },
    std::pair{ "operator&=(u16)"_h, &UInt16_operator_andasg_UInt16 },
    std::pair{ "operator+(u16)"_h, &UInt16_operator_add_UInt16 },
    std::pair{ "operator^(u16)"_h, &UInt16_operator_xor_UInt16 },
    std::pair{ "operator<<=(u16)"_h, &UInt16_operator_lshasg_UInt16 },
    std::pair{ "operator+=(u16)"_h, &UInt16_operator_addasg_UInt16 },
    std::pair{ "operator^="_h, &UInt16_operator_xorasg_UInt16 },
    std::pair{ "operator[]"_h, &UInt16_operator_index_Int32 },
    std::pair{ "operator[]"_h, &UInt16_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &UInt16_operator_index_Int16 },
    std::pair{ "operator[]"_h, &UInt16_operator_index_UInt16 },
    std::pair{ "operator|="_h, &UInt16_operator_orasg_UInt16 },
    std::pair{ "operator=="_h, &UInt16_operator_eq_UInt16 },
    std::pair{ "operator<="_h, &UInt16_operator_lte_UInt16 },
    std::pair{ "operator<<"_h, &UInt16_operator_lsh_UInt16 },
    std::pair{ "operator>="_h, &UInt16_operator_gte_UInt16 },
    std::pair{ "operator>>"_h, &UInt16_operator_rsh_UInt16 },
    std::pair{ "operator-="_h, &UInt16_operator_subasg_UInt16 },
    std::pair{ "operator/="_h, &UInt16_operator_divasg_UInt16 },
    std::pair{ "operator+="_h, &UInt16_operator_addasg_UInt16 },
    std::pair{ "operator*="_h, &UInt16_operator_mulasg_UInt16 },
    std::pair{ "operator&="_h, &UInt16_operator_andasg_UInt16 },
    std::pair{ "operator!="_h, &UInt16_operator_neq_UInt16 },
    std::pair{ "operator/=(u16)"_h, &UInt16_operator_divasg_UInt16 },
    std::pair{ "operator[](i32)"_h, &UInt16_operator_index_Int32 }
    };

UInt16::UInt16()
{
    this->name = "u16"_c;
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    /// operator[] with Int32
    UInt16_operator_index_Int32_arg.name = "arg"_c;
    UInt16_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt16_operator_index_Int32.name = UInt16_operator_index_Int32_name;
    UInt16_operator_index_Int32.backendIndex = 144;
    UInt16_operator_index_Int32.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_index_Int32.parameters = UInt16_operator_index_Int32_args;
    Symbol::Resolved(&UInt16_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16_operator_index_Int32)->signature = "operator[](i32) u16"_c;
    Symbol::Resolved(&UInt16_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt16_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt16_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt32
    UInt16_operator_index_UInt32_arg.name = "arg"_c;
    UInt16_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt16_operator_index_UInt32.name = UInt16_operator_index_UInt32_name;
    UInt16_operator_index_UInt32.backendIndex = 145;
    UInt16_operator_index_UInt32.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_index_UInt32.parameters = UInt16_operator_index_UInt32_args;
    Symbol::Resolved(&UInt16_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16_operator_index_UInt32)->signature = "operator[](u32) u16"_c;
    Symbol::Resolved(&UInt16_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt16_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt16_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with Int16
    UInt16_operator_index_Int16_arg.name = "arg"_c;
    UInt16_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16_operator_index_Int16.name = UInt16_operator_index_Int16_name;
    UInt16_operator_index_Int16.backendIndex = 146;
    UInt16_operator_index_Int16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_index_Int16.parameters = UInt16_operator_index_Int16_args;
    Symbol::Resolved(&UInt16_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16_operator_index_Int16)->signature = "operator[](i16) u16"_c;
    Symbol::Resolved(&UInt16_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt16_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt16_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt16
    UInt16_operator_index_UInt16_arg.name = "arg"_c;
    UInt16_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_index_UInt16.name = UInt16_operator_index_UInt16_name;
    UInt16_operator_index_UInt16.backendIndex = 147;
    UInt16_operator_index_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_index_UInt16.parameters = UInt16_operator_index_UInt16_args;
    Symbol::Resolved(&UInt16_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_index_UInt16)->signature = "operator[](u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt16_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator+ with UInt16
    UInt16_operator_add_UInt16_arg.name = "arg"_c;
    UInt16_operator_add_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_add_UInt16.name = UInt16_operator_add_UInt16_name;
    UInt16_operator_add_UInt16.backendIndex = 148;
    UInt16_operator_add_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_add_UInt16.parameters = UInt16_operator_add_UInt16_args;
    Symbol::Resolved(&UInt16_operator_add_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_add_UInt16)->signature = "operator+(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_add_UInt16)->name = "operator+(u16)"_c;
    Symbol::Resolved(&UInt16_operator_add_UInt16)->nameWithVarNames = "operator+(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_add_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator- with UInt16
    UInt16_operator_sub_UInt16_arg.name = "arg"_c;
    UInt16_operator_sub_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_sub_UInt16.name = UInt16_operator_sub_UInt16_name;
    UInt16_operator_sub_UInt16.backendIndex = 149;
    UInt16_operator_sub_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_sub_UInt16.parameters = UInt16_operator_sub_UInt16_args;
    Symbol::Resolved(&UInt16_operator_sub_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_sub_UInt16)->signature = "operator-(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_sub_UInt16)->name = "operator-(u16)"_c;
    Symbol::Resolved(&UInt16_operator_sub_UInt16)->nameWithVarNames = "operator-(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_sub_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator* with UInt16
    UInt16_operator_mul_UInt16_arg.name = "arg"_c;
    UInt16_operator_mul_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_mul_UInt16.name = UInt16_operator_mul_UInt16_name;
    UInt16_operator_mul_UInt16.backendIndex = 150;
    UInt16_operator_mul_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_mul_UInt16.parameters = UInt16_operator_mul_UInt16_args;
    Symbol::Resolved(&UInt16_operator_mul_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_mul_UInt16)->signature = "operator*(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_mul_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&UInt16_operator_mul_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_mul_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator/ with UInt16
    UInt16_operator_div_UInt16_arg.name = "arg"_c;
    UInt16_operator_div_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_div_UInt16.name = UInt16_operator_div_UInt16_name;
    UInt16_operator_div_UInt16.backendIndex = 151;
    UInt16_operator_div_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_div_UInt16.parameters = UInt16_operator_div_UInt16_args;
    Symbol::Resolved(&UInt16_operator_div_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_div_UInt16)->signature = "operator/(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_div_UInt16)->name = "operator/(u16)"_c;
    Symbol::Resolved(&UInt16_operator_div_UInt16)->nameWithVarNames = "operator/(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_div_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator% with UInt16
    UInt16_operator_mod_UInt16_arg.name = "arg"_c;
    UInt16_operator_mod_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_mod_UInt16.name = UInt16_operator_mod_UInt16_name;
    UInt16_operator_mod_UInt16.backendIndex = 152;
    UInt16_operator_mod_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_mod_UInt16.parameters = UInt16_operator_mod_UInt16_args;
    Symbol::Resolved(&UInt16_operator_mod_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_mod_UInt16)->signature = "operator%(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_mod_UInt16)->name = "operator%(u16)"_c;
    Symbol::Resolved(&UInt16_operator_mod_UInt16)->nameWithVarNames = "operator%(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_mod_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator+= with UInt16
    UInt16_operator_addasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_addasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_addasg_UInt16.name = UInt16_operator_addasg_UInt16_name;
    UInt16_operator_addasg_UInt16.backendIndex = 153;
    UInt16_operator_addasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_addasg_UInt16.parameters = UInt16_operator_addasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_addasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_addasg_UInt16)->signature = "operator+=(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_addasg_UInt16)->name = "operator+=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_addasg_UInt16)->nameWithVarNames = "operator+=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_addasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator-= with UInt16
    UInt16_operator_subasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_subasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_subasg_UInt16.name = UInt16_operator_subasg_UInt16_name;
    UInt16_operator_subasg_UInt16.backendIndex = 154;
    UInt16_operator_subasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_subasg_UInt16.parameters = UInt16_operator_subasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_subasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_subasg_UInt16)->signature = "operator-=(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_subasg_UInt16)->name = "operator-=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_subasg_UInt16)->nameWithVarNames = "operator-=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_subasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator*= with UInt16
    UInt16_operator_mulasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_mulasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_mulasg_UInt16.name = UInt16_operator_mulasg_UInt16_name;
    UInt16_operator_mulasg_UInt16.backendIndex = 155;
    UInt16_operator_mulasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_mulasg_UInt16.parameters = UInt16_operator_mulasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_mulasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_mulasg_UInt16)->signature = "operator*=(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_mulasg_UInt16)->name = "operator*=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_mulasg_UInt16)->nameWithVarNames = "operator*=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_mulasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator/= with UInt16
    UInt16_operator_divasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_divasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_divasg_UInt16.name = UInt16_operator_divasg_UInt16_name;
    UInt16_operator_divasg_UInt16.backendIndex = 156;
    UInt16_operator_divasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_divasg_UInt16.parameters = UInt16_operator_divasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_divasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_divasg_UInt16)->signature = "operator/=(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_divasg_UInt16)->name = "operator/=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_divasg_UInt16)->nameWithVarNames = "operator/=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_divasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator< with UInt16
    UInt16_operator_lt_UInt16_arg.name = "arg"_c;
    UInt16_operator_lt_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_lt_UInt16.name = UInt16_operator_lt_UInt16_name;
    UInt16_operator_lt_UInt16.backendIndex = 157;
    UInt16_operator_lt_UInt16.returnType = Type::FullType { Bool8Type.name };
    UInt16_operator_lt_UInt16.parameters = UInt16_operator_lt_UInt16_args;
    Symbol::Resolved(&UInt16_operator_lt_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_lt_UInt16)->signature = "operator<(u16) b8"_c;
    Symbol::Resolved(&UInt16_operator_lt_UInt16)->name = "operator<(u16)"_c;
    Symbol::Resolved(&UInt16_operator_lt_UInt16)->nameWithVarNames = "operator<(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_lt_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator<= with UInt16
    UInt16_operator_lte_UInt16_arg.name = "arg"_c;
    UInt16_operator_lte_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_lte_UInt16.name = UInt16_operator_lte_UInt16_name;
    UInt16_operator_lte_UInt16.backendIndex = 158;
    UInt16_operator_lte_UInt16.returnType = Type::FullType { Bool8Type.name };
    UInt16_operator_lte_UInt16.parameters = UInt16_operator_lte_UInt16_args;
    Symbol::Resolved(&UInt16_operator_lte_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_lte_UInt16)->signature = "operator<=(u16) b8"_c;
    Symbol::Resolved(&UInt16_operator_lte_UInt16)->name = "operator<=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_lte_UInt16)->nameWithVarNames = "operator<=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_lte_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator> with UInt16
    UInt16_operator_gt_UInt16_arg.name = "arg"_c;
    UInt16_operator_gt_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_gt_UInt16.name = UInt16_operator_gt_UInt16_name;
    UInt16_operator_gt_UInt16.backendIndex = 159;
    UInt16_operator_gt_UInt16.returnType = Type::FullType { Bool8Type.name };
    UInt16_operator_gt_UInt16.parameters = UInt16_operator_gt_UInt16_args;
    Symbol::Resolved(&UInt16_operator_gt_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_gt_UInt16)->signature = "operator>(u16) b8"_c;
    Symbol::Resolved(&UInt16_operator_gt_UInt16)->name = "operator>(u16)"_c;
    Symbol::Resolved(&UInt16_operator_gt_UInt16)->nameWithVarNames = "operator>(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_gt_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator>= with UInt16
    UInt16_operator_gte_UInt16_arg.name = "arg"_c;
    UInt16_operator_gte_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_gte_UInt16.name = UInt16_operator_gte_UInt16_name;
    UInt16_operator_gte_UInt16.backendIndex = 160;
    UInt16_operator_gte_UInt16.returnType = Type::FullType { Bool8Type.name };
    UInt16_operator_gte_UInt16.parameters = UInt16_operator_gte_UInt16_args;
    Symbol::Resolved(&UInt16_operator_gte_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_gte_UInt16)->signature = "operator>=(u16) b8"_c;
    Symbol::Resolved(&UInt16_operator_gte_UInt16)->name = "operator>=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_gte_UInt16)->nameWithVarNames = "operator>=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_gte_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator== with UInt16
    UInt16_operator_eq_UInt16_arg.name = "arg"_c;
    UInt16_operator_eq_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_eq_UInt16.name = UInt16_operator_eq_UInt16_name;
    UInt16_operator_eq_UInt16.backendIndex = 161;
    UInt16_operator_eq_UInt16.returnType = Type::FullType { Bool8Type.name };
    UInt16_operator_eq_UInt16.parameters = UInt16_operator_eq_UInt16_args;
    Symbol::Resolved(&UInt16_operator_eq_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_eq_UInt16)->signature = "operator==(u16) b8"_c;
    Symbol::Resolved(&UInt16_operator_eq_UInt16)->name = "operator==(u16)"_c;
    Symbol::Resolved(&UInt16_operator_eq_UInt16)->nameWithVarNames = "operator==(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_eq_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator!= with UInt16
    UInt16_operator_neq_UInt16_arg.name = "arg"_c;
    UInt16_operator_neq_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_neq_UInt16.name = UInt16_operator_neq_UInt16_name;
    UInt16_operator_neq_UInt16.backendIndex = 162;
    UInt16_operator_neq_UInt16.returnType = Type::FullType { Bool8Type.name };
    UInt16_operator_neq_UInt16.parameters = UInt16_operator_neq_UInt16_args;
    Symbol::Resolved(&UInt16_operator_neq_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_neq_UInt16)->signature = "operator!=(u16) b8"_c;
    Symbol::Resolved(&UInt16_operator_neq_UInt16)->name = "operator!=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_neq_UInt16)->nameWithVarNames = "operator!=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_neq_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator| with UInt16
    UInt16_operator_or_UInt16_arg.name = "arg"_c;
    UInt16_operator_or_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_or_UInt16.name = UInt16_operator_or_UInt16_name;
    UInt16_operator_or_UInt16.backendIndex = 163;
    UInt16_operator_or_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_or_UInt16.parameters = UInt16_operator_or_UInt16_args;
    Symbol::Resolved(&UInt16_operator_or_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_or_UInt16)->signature = "operator|(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_or_UInt16)->name = "operator|(u16)"_c;
    Symbol::Resolved(&UInt16_operator_or_UInt16)->nameWithVarNames = "operator|(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_or_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator& with UInt16
    UInt16_operator_and_UInt16_arg.name = "arg"_c;
    UInt16_operator_and_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_and_UInt16.name = UInt16_operator_and_UInt16_name;
    UInt16_operator_and_UInt16.backendIndex = 164;
    UInt16_operator_and_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_and_UInt16.parameters = UInt16_operator_and_UInt16_args;
    Symbol::Resolved(&UInt16_operator_and_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_and_UInt16)->signature = "operator&(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_and_UInt16)->name = "operator&(u16)"_c;
    Symbol::Resolved(&UInt16_operator_and_UInt16)->nameWithVarNames = "operator&(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_and_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator^ with UInt16
    UInt16_operator_xor_UInt16_arg.name = "arg"_c;
    UInt16_operator_xor_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_xor_UInt16.name = UInt16_operator_xor_UInt16_name;
    UInt16_operator_xor_UInt16.backendIndex = 165;
    UInt16_operator_xor_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_xor_UInt16.parameters = UInt16_operator_xor_UInt16_args;
    Symbol::Resolved(&UInt16_operator_xor_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_xor_UInt16)->signature = "operator^(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_xor_UInt16)->name = "operator^(u16)"_c;
    Symbol::Resolved(&UInt16_operator_xor_UInt16)->nameWithVarNames = "operator^(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_xor_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator<< with UInt16
    UInt16_operator_lsh_UInt16_arg.name = "arg"_c;
    UInt16_operator_lsh_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_lsh_UInt16.name = UInt16_operator_lsh_UInt16_name;
    UInt16_operator_lsh_UInt16.backendIndex = 166;
    UInt16_operator_lsh_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_lsh_UInt16.parameters = UInt16_operator_lsh_UInt16_args;
    Symbol::Resolved(&UInt16_operator_lsh_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_lsh_UInt16)->signature = "operator<<(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_lsh_UInt16)->name = "operator<<(u16)"_c;
    Symbol::Resolved(&UInt16_operator_lsh_UInt16)->nameWithVarNames = "operator<<(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_lsh_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator>> with UInt16
    UInt16_operator_rsh_UInt16_arg.name = "arg"_c;
    UInt16_operator_rsh_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_rsh_UInt16.name = UInt16_operator_rsh_UInt16_name;
    UInt16_operator_rsh_UInt16.backendIndex = 167;
    UInt16_operator_rsh_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_rsh_UInt16.parameters = UInt16_operator_rsh_UInt16_args;
    Symbol::Resolved(&UInt16_operator_rsh_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_rsh_UInt16)->signature = "operator>>(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_rsh_UInt16)->name = "operator>>(u16)"_c;
    Symbol::Resolved(&UInt16_operator_rsh_UInt16)->nameWithVarNames = "operator>>(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_rsh_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator|= with UInt16
    UInt16_operator_orasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_orasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_orasg_UInt16.name = UInt16_operator_orasg_UInt16_name;
    UInt16_operator_orasg_UInt16.backendIndex = 168;
    UInt16_operator_orasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_orasg_UInt16.parameters = UInt16_operator_orasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_orasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_orasg_UInt16)->signature = "operator|=(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_orasg_UInt16)->name = "operator|=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_orasg_UInt16)->nameWithVarNames = "operator|=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_orasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator&= with UInt16
    UInt16_operator_andasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_andasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_andasg_UInt16.name = UInt16_operator_andasg_UInt16_name;
    UInt16_operator_andasg_UInt16.backendIndex = 169;
    UInt16_operator_andasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_andasg_UInt16.parameters = UInt16_operator_andasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_andasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_andasg_UInt16)->signature = "operator&=(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_andasg_UInt16)->name = "operator&=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_andasg_UInt16)->nameWithVarNames = "operator&=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_andasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator^= with UInt16
    UInt16_operator_xorasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_xorasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_xorasg_UInt16.name = UInt16_operator_xorasg_UInt16_name;
    UInt16_operator_xorasg_UInt16.backendIndex = 170;
    UInt16_operator_xorasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_xorasg_UInt16.parameters = UInt16_operator_xorasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_xorasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_xorasg_UInt16)->signature = "operator^=(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_xorasg_UInt16)->name = "operator^=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_xorasg_UInt16)->nameWithVarNames = "operator^=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_xorasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator<<= with UInt16
    UInt16_operator_lshasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_lshasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_lshasg_UInt16.name = UInt16_operator_lshasg_UInt16_name;
    UInt16_operator_lshasg_UInt16.backendIndex = 171;
    UInt16_operator_lshasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_lshasg_UInt16.parameters = UInt16_operator_lshasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_lshasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_lshasg_UInt16)->signature = "operator<<=(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_lshasg_UInt16)->name = "operator<<=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_lshasg_UInt16)->nameWithVarNames = "operator<<=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_lshasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator>>= with UInt16
    UInt16_operator_rhsasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_rhsasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_rhsasg_UInt16.name = UInt16_operator_rhsasg_UInt16_name;
    UInt16_operator_rhsasg_UInt16.backendIndex = 172;
    UInt16_operator_rhsasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_rhsasg_UInt16.parameters = UInt16_operator_rhsasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_rhsasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_rhsasg_UInt16)->signature = "operator>>=(u16) u16"_c;
    Symbol::Resolved(&UInt16_operator_rhsasg_UInt16)->name = "operator>>=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_rhsasg_UInt16)->nameWithVarNames = "operator>>=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_rhsasg_UInt16)->returnTypeSymbol = &UInt16Type;

    this->scope.symbolLookup = UInt16_symbolLookup;
}
UInt16 UInt16Type;

/// operator[] with Int32
Variable Int16_operator_index_Int32_arg;
Function Int16_operator_index_Int32;
inline constexpr std::array Int16_operator_index_Int32_args = { &Int16_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int16_operator_index_UInt32_arg;
Function Int16_operator_index_UInt32;
inline constexpr std::array Int16_operator_index_UInt32_args = { &Int16_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int16_operator_index_Int16_arg;
Function Int16_operator_index_Int16;
inline constexpr std::array Int16_operator_index_Int16_args = { &Int16_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int16_operator_index_UInt16_arg;
Function Int16_operator_index_UInt16;
inline constexpr std::array Int16_operator_index_UInt16_args = { &Int16_operator_index_UInt16_arg };

/// operator+ with Int16
Variable Int16_operator_add_Int16_arg;
Function Int16_operator_add_Int16;
inline constexpr std::array Int16_operator_add_Int16_args = { &Int16_operator_add_Int16_arg };

/// operator- with Int16
Variable Int16_operator_sub_Int16_arg;
Function Int16_operator_sub_Int16;
inline constexpr std::array Int16_operator_sub_Int16_args = { &Int16_operator_sub_Int16_arg };

/// operator* with Int16
Variable Int16_operator_mul_Int16_arg;
Function Int16_operator_mul_Int16;
inline constexpr std::array Int16_operator_mul_Int16_args = { &Int16_operator_mul_Int16_arg };

/// operator/ with Int16
Variable Int16_operator_div_Int16_arg;
Function Int16_operator_div_Int16;
inline constexpr std::array Int16_operator_div_Int16_args = { &Int16_operator_div_Int16_arg };

/// operator% with Int16
Variable Int16_operator_mod_Int16_arg;
Function Int16_operator_mod_Int16;
inline constexpr std::array Int16_operator_mod_Int16_args = { &Int16_operator_mod_Int16_arg };

/// operator+= with Int16
Variable Int16_operator_addasg_Int16_arg;
Function Int16_operator_addasg_Int16;
inline constexpr std::array Int16_operator_addasg_Int16_args = { &Int16_operator_addasg_Int16_arg };

/// operator-= with Int16
Variable Int16_operator_subasg_Int16_arg;
Function Int16_operator_subasg_Int16;
inline constexpr std::array Int16_operator_subasg_Int16_args = { &Int16_operator_subasg_Int16_arg };

/// operator*= with Int16
Variable Int16_operator_mulasg_Int16_arg;
Function Int16_operator_mulasg_Int16;
inline constexpr std::array Int16_operator_mulasg_Int16_args = { &Int16_operator_mulasg_Int16_arg };

/// operator/= with Int16
Variable Int16_operator_divasg_Int16_arg;
Function Int16_operator_divasg_Int16;
inline constexpr std::array Int16_operator_divasg_Int16_args = { &Int16_operator_divasg_Int16_arg };

/// operator< with Int16
Variable Int16_operator_lt_Int16_arg;
Function Int16_operator_lt_Int16;
inline constexpr std::array Int16_operator_lt_Int16_args = { &Int16_operator_lt_Int16_arg };

/// operator<= with Int16
Variable Int16_operator_lte_Int16_arg;
Function Int16_operator_lte_Int16;
inline constexpr std::array Int16_operator_lte_Int16_args = { &Int16_operator_lte_Int16_arg };

/// operator> with Int16
Variable Int16_operator_gt_Int16_arg;
Function Int16_operator_gt_Int16;
inline constexpr std::array Int16_operator_gt_Int16_args = { &Int16_operator_gt_Int16_arg };

/// operator>= with Int16
Variable Int16_operator_gte_Int16_arg;
Function Int16_operator_gte_Int16;
inline constexpr std::array Int16_operator_gte_Int16_args = { &Int16_operator_gte_Int16_arg };

/// operator== with Int16
Variable Int16_operator_eq_Int16_arg;
Function Int16_operator_eq_Int16;
inline constexpr std::array Int16_operator_eq_Int16_args = { &Int16_operator_eq_Int16_arg };

/// operator!= with Int16
Variable Int16_operator_neq_Int16_arg;
Function Int16_operator_neq_Int16;
inline constexpr std::array Int16_operator_neq_Int16_args = { &Int16_operator_neq_Int16_arg };

/// operator| with Int16
Variable Int16_operator_or_Int16_arg;
Function Int16_operator_or_Int16;
inline constexpr std::array Int16_operator_or_Int16_args = { &Int16_operator_or_Int16_arg };

/// operator& with Int16
Variable Int16_operator_and_Int16_arg;
Function Int16_operator_and_Int16;
inline constexpr std::array Int16_operator_and_Int16_args = { &Int16_operator_and_Int16_arg };

/// operator^ with Int16
Variable Int16_operator_xor_Int16_arg;
Function Int16_operator_xor_Int16;
inline constexpr std::array Int16_operator_xor_Int16_args = { &Int16_operator_xor_Int16_arg };

/// operator<< with Int16
Variable Int16_operator_lsh_Int16_arg;
Function Int16_operator_lsh_Int16;
inline constexpr std::array Int16_operator_lsh_Int16_args = { &Int16_operator_lsh_Int16_arg };

/// operator>> with Int16
Variable Int16_operator_rsh_Int16_arg;
Function Int16_operator_rsh_Int16;
inline constexpr std::array Int16_operator_rsh_Int16_args = { &Int16_operator_rsh_Int16_arg };

/// operator|= with Int16
Variable Int16_operator_orasg_Int16_arg;
Function Int16_operator_orasg_Int16;
inline constexpr std::array Int16_operator_orasg_Int16_args = { &Int16_operator_orasg_Int16_arg };

/// operator&= with Int16
Variable Int16_operator_andasg_Int16_arg;
Function Int16_operator_andasg_Int16;
inline constexpr std::array Int16_operator_andasg_Int16_args = { &Int16_operator_andasg_Int16_arg };

/// operator^= with Int16
Variable Int16_operator_xorasg_Int16_arg;
Function Int16_operator_xorasg_Int16;
inline constexpr std::array Int16_operator_xorasg_Int16_args = { &Int16_operator_xorasg_Int16_arg };

/// operator<<= with Int16
Variable Int16_operator_lshasg_Int16_arg;
Function Int16_operator_lshasg_Int16;
inline constexpr std::array Int16_operator_lshasg_Int16_args = { &Int16_operator_lshasg_Int16_arg };

/// operator>>= with Int16
Variable Int16_operator_rhsasg_Int16_arg;
Function Int16_operator_rhsasg_Int16;
inline constexpr std::array Int16_operator_rhsasg_Int16_args = { &Int16_operator_rhsasg_Int16_arg };

static constexpr StaticMap<HashString, Symbol*, 58> Int16_symbolLookup = {
    std::pair{ "operator-(i16)"_h, &Int16_operator_sub_Int16 },
    std::pair{ "operator%(i16)"_h, &Int16_operator_mod_Int16 },
    std::pair{ "operator[](i16)"_h, &Int16_operator_index_Int16 },
    std::pair{ "operator==(i16)"_h, &Int16_operator_eq_Int16 },
    std::pair{ "operator+(i16)"_h, &Int16_operator_add_Int16 },
    std::pair{ "operator!=(i16)"_h, &Int16_operator_neq_Int16 },
    std::pair{ "operator&=(i16)"_h, &Int16_operator_andasg_Int16 },
    std::pair{ "operator^(i16)"_h, &Int16_operator_xor_Int16 },
    std::pair{ "operator^"_h, &Int16_operator_xor_Int16 },
    std::pair{ "operator|"_h, &Int16_operator_or_Int16 },
    std::pair{ "operator<"_h, &Int16_operator_lt_Int16 },
    std::pair{ "operator>"_h, &Int16_operator_gt_Int16 },
    std::pair{ "operator-"_h, &Int16_operator_sub_Int16 },
    std::pair{ "operator/"_h, &Int16_operator_div_Int16 },
    std::pair{ "operator+"_h, &Int16_operator_add_Int16 },
    std::pair{ "operator*"_h, &Int16_operator_mul_Int16 },
    std::pair{ "operator%"_h, &Int16_operator_mod_Int16 },
    std::pair{ "operator&"_h, &Int16_operator_and_Int16 },
    std::pair{ "operator/=(i16)"_h, &Int16_operator_divasg_Int16 },
    std::pair{ "operator>>=(i16)"_h, &Int16_operator_rhsasg_Int16 },
    std::pair{ "operator&(i16)"_h, &Int16_operator_and_Int16 },
    std::pair{ "operator|=(i16)"_h, &Int16_operator_orasg_Int16 },
    std::pair{ "operator+=(i16)"_h, &Int16_operator_addasg_Int16 },
    std::pair{ "operator>=(i16)"_h, &Int16_operator_gte_Int16 },
    std::pair{ "operator[](u32)"_h, &Int16_operator_index_UInt32 },
    std::pair{ "operator<<="_h, &Int16_operator_lshasg_Int16 },
    std::pair{ "operator<<=(i16)"_h, &Int16_operator_lshasg_Int16 },
    std::pair{ "operator[](u16)"_h, &Int16_operator_index_UInt16 },
    std::pair{ "operator>>="_h, &Int16_operator_rhsasg_Int16 },
    std::pair{ "operator>(i16)"_h, &Int16_operator_gt_Int16 },
    std::pair{ "operator^=(i16)"_h, &Int16_operator_xorasg_Int16 },
    std::pair{ "operator>>(i16)"_h, &Int16_operator_rsh_Int16 },
    std::pair{ "operator<=(i16)"_h, &Int16_operator_lte_Int16 },
    std::pair{ "operator<<(i16)"_h, &Int16_operator_lsh_Int16 },
    std::pair{ "operator|(i16)"_h, &Int16_operator_or_Int16 },
    std::pair{ "operator*(i16)"_h, &Int16_operator_mul_Int16 },
    std::pair{ "operator/(i16)"_h, &Int16_operator_div_Int16 },
    std::pair{ "operator-=(i16)"_h, &Int16_operator_subasg_Int16 },
    std::pair{ "operator<(i16)"_h, &Int16_operator_lt_Int16 },
    std::pair{ "operator^="_h, &Int16_operator_xorasg_Int16 },
    std::pair{ "operator[]"_h, &Int16_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Int16_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Int16_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Int16_operator_index_UInt16 },
    std::pair{ "operator|="_h, &Int16_operator_orasg_Int16 },
    std::pair{ "operator=="_h, &Int16_operator_eq_Int16 },
    std::pair{ "operator<="_h, &Int16_operator_lte_Int16 },
    std::pair{ "operator<<"_h, &Int16_operator_lsh_Int16 },
    std::pair{ "operator>="_h, &Int16_operator_gte_Int16 },
    std::pair{ "operator>>"_h, &Int16_operator_rsh_Int16 },
    std::pair{ "operator-="_h, &Int16_operator_subasg_Int16 },
    std::pair{ "operator/="_h, &Int16_operator_divasg_Int16 },
    std::pair{ "operator+="_h, &Int16_operator_addasg_Int16 },
    std::pair{ "operator*="_h, &Int16_operator_mulasg_Int16 },
    std::pair{ "operator&="_h, &Int16_operator_andasg_Int16 },
    std::pair{ "operator!="_h, &Int16_operator_neq_Int16 },
    std::pair{ "operator[](i32)"_h, &Int16_operator_index_Int32 },
    std::pair{ "operator*=(i16)"_h, &Int16_operator_mulasg_Int16 }
    };

Int16::Int16()
{
    this->name = "i16"_c;
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    /// operator[] with Int32
    Int16_operator_index_Int32_arg.name = "arg"_c;
    Int16_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int16_operator_index_Int32.name = Int16_operator_index_Int32_name;
    Int16_operator_index_Int32.backendIndex = 180;
    Int16_operator_index_Int32.returnType = Type::FullType { Int16Type.name };
    Int16_operator_index_Int32.parameters = Int16_operator_index_Int32_args;
    Symbol::Resolved(&Int16_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16_operator_index_Int32)->signature = "operator[](i32) i16"_c;
    Symbol::Resolved(&Int16_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int16_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int16_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt32
    Int16_operator_index_UInt32_arg.name = "arg"_c;
    Int16_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int16_operator_index_UInt32.name = Int16_operator_index_UInt32_name;
    Int16_operator_index_UInt32.backendIndex = 181;
    Int16_operator_index_UInt32.returnType = Type::FullType { Int16Type.name };
    Int16_operator_index_UInt32.parameters = Int16_operator_index_UInt32_args;
    Symbol::Resolved(&Int16_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16_operator_index_UInt32)->signature = "operator[](u32) i16"_c;
    Symbol::Resolved(&Int16_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int16_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int16_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    /// operator[] with Int16
    Int16_operator_index_Int16_arg.name = "arg"_c;
    Int16_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_index_Int16.name = Int16_operator_index_Int16_name;
    Int16_operator_index_Int16.backendIndex = 182;
    Int16_operator_index_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_index_Int16.parameters = Int16_operator_index_Int16_args;
    Symbol::Resolved(&Int16_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_index_Int16)->signature = "operator[](i16) i16"_c;
    Symbol::Resolved(&Int16_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int16_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt16
    Int16_operator_index_UInt16_arg.name = "arg"_c;
    Int16_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16_operator_index_UInt16.name = Int16_operator_index_UInt16_name;
    Int16_operator_index_UInt16.backendIndex = 183;
    Int16_operator_index_UInt16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_index_UInt16.parameters = Int16_operator_index_UInt16_args;
    Symbol::Resolved(&Int16_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16_operator_index_UInt16)->signature = "operator[](u16) i16"_c;
    Symbol::Resolved(&Int16_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int16_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int16_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    /// operator+ with Int16
    Int16_operator_add_Int16_arg.name = "arg"_c;
    Int16_operator_add_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_add_Int16.name = Int16_operator_add_Int16_name;
    Int16_operator_add_Int16.backendIndex = 184;
    Int16_operator_add_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_add_Int16.parameters = Int16_operator_add_Int16_args;
    Symbol::Resolved(&Int16_operator_add_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_add_Int16)->signature = "operator+(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_add_Int16)->name = "operator+(i16)"_c;
    Symbol::Resolved(&Int16_operator_add_Int16)->nameWithVarNames = "operator+(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_add_Int16)->returnTypeSymbol = &Int16Type;

    /// operator- with Int16
    Int16_operator_sub_Int16_arg.name = "arg"_c;
    Int16_operator_sub_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_sub_Int16.name = Int16_operator_sub_Int16_name;
    Int16_operator_sub_Int16.backendIndex = 185;
    Int16_operator_sub_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_sub_Int16.parameters = Int16_operator_sub_Int16_args;
    Symbol::Resolved(&Int16_operator_sub_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_sub_Int16)->signature = "operator-(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_sub_Int16)->name = "operator-(i16)"_c;
    Symbol::Resolved(&Int16_operator_sub_Int16)->nameWithVarNames = "operator-(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_sub_Int16)->returnTypeSymbol = &Int16Type;

    /// operator* with Int16
    Int16_operator_mul_Int16_arg.name = "arg"_c;
    Int16_operator_mul_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_mul_Int16.name = Int16_operator_mul_Int16_name;
    Int16_operator_mul_Int16.backendIndex = 186;
    Int16_operator_mul_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_mul_Int16.parameters = Int16_operator_mul_Int16_args;
    Symbol::Resolved(&Int16_operator_mul_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_mul_Int16)->signature = "operator*(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_mul_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&Int16_operator_mul_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_mul_Int16)->returnTypeSymbol = &Int16Type;

    /// operator/ with Int16
    Int16_operator_div_Int16_arg.name = "arg"_c;
    Int16_operator_div_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_div_Int16.name = Int16_operator_div_Int16_name;
    Int16_operator_div_Int16.backendIndex = 187;
    Int16_operator_div_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_div_Int16.parameters = Int16_operator_div_Int16_args;
    Symbol::Resolved(&Int16_operator_div_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_div_Int16)->signature = "operator/(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_div_Int16)->name = "operator/(i16)"_c;
    Symbol::Resolved(&Int16_operator_div_Int16)->nameWithVarNames = "operator/(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_div_Int16)->returnTypeSymbol = &Int16Type;

    /// operator% with Int16
    Int16_operator_mod_Int16_arg.name = "arg"_c;
    Int16_operator_mod_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_mod_Int16.name = Int16_operator_mod_Int16_name;
    Int16_operator_mod_Int16.backendIndex = 188;
    Int16_operator_mod_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_mod_Int16.parameters = Int16_operator_mod_Int16_args;
    Symbol::Resolved(&Int16_operator_mod_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_mod_Int16)->signature = "operator%(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_mod_Int16)->name = "operator%(i16)"_c;
    Symbol::Resolved(&Int16_operator_mod_Int16)->nameWithVarNames = "operator%(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_mod_Int16)->returnTypeSymbol = &Int16Type;

    /// operator+= with Int16
    Int16_operator_addasg_Int16_arg.name = "arg"_c;
    Int16_operator_addasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_addasg_Int16.name = Int16_operator_addasg_Int16_name;
    Int16_operator_addasg_Int16.backendIndex = 189;
    Int16_operator_addasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_addasg_Int16.parameters = Int16_operator_addasg_Int16_args;
    Symbol::Resolved(&Int16_operator_addasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_addasg_Int16)->signature = "operator+=(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_addasg_Int16)->name = "operator+=(i16)"_c;
    Symbol::Resolved(&Int16_operator_addasg_Int16)->nameWithVarNames = "operator+=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_addasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator-= with Int16
    Int16_operator_subasg_Int16_arg.name = "arg"_c;
    Int16_operator_subasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_subasg_Int16.name = Int16_operator_subasg_Int16_name;
    Int16_operator_subasg_Int16.backendIndex = 190;
    Int16_operator_subasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_subasg_Int16.parameters = Int16_operator_subasg_Int16_args;
    Symbol::Resolved(&Int16_operator_subasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_subasg_Int16)->signature = "operator-=(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_subasg_Int16)->name = "operator-=(i16)"_c;
    Symbol::Resolved(&Int16_operator_subasg_Int16)->nameWithVarNames = "operator-=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_subasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator*= with Int16
    Int16_operator_mulasg_Int16_arg.name = "arg"_c;
    Int16_operator_mulasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_mulasg_Int16.name = Int16_operator_mulasg_Int16_name;
    Int16_operator_mulasg_Int16.backendIndex = 191;
    Int16_operator_mulasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_mulasg_Int16.parameters = Int16_operator_mulasg_Int16_args;
    Symbol::Resolved(&Int16_operator_mulasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_mulasg_Int16)->signature = "operator*=(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_mulasg_Int16)->name = "operator*=(i16)"_c;
    Symbol::Resolved(&Int16_operator_mulasg_Int16)->nameWithVarNames = "operator*=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_mulasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator/= with Int16
    Int16_operator_divasg_Int16_arg.name = "arg"_c;
    Int16_operator_divasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_divasg_Int16.name = Int16_operator_divasg_Int16_name;
    Int16_operator_divasg_Int16.backendIndex = 192;
    Int16_operator_divasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_divasg_Int16.parameters = Int16_operator_divasg_Int16_args;
    Symbol::Resolved(&Int16_operator_divasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_divasg_Int16)->signature = "operator/=(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_divasg_Int16)->name = "operator/=(i16)"_c;
    Symbol::Resolved(&Int16_operator_divasg_Int16)->nameWithVarNames = "operator/=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_divasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator< with Int16
    Int16_operator_lt_Int16_arg.name = "arg"_c;
    Int16_operator_lt_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_lt_Int16.name = Int16_operator_lt_Int16_name;
    Int16_operator_lt_Int16.backendIndex = 193;
    Int16_operator_lt_Int16.returnType = Type::FullType { Bool8Type.name };
    Int16_operator_lt_Int16.parameters = Int16_operator_lt_Int16_args;
    Symbol::Resolved(&Int16_operator_lt_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_lt_Int16)->signature = "operator<(i16) b8"_c;
    Symbol::Resolved(&Int16_operator_lt_Int16)->name = "operator<(i16)"_c;
    Symbol::Resolved(&Int16_operator_lt_Int16)->nameWithVarNames = "operator<(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_lt_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator<= with Int16
    Int16_operator_lte_Int16_arg.name = "arg"_c;
    Int16_operator_lte_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_lte_Int16.name = Int16_operator_lte_Int16_name;
    Int16_operator_lte_Int16.backendIndex = 194;
    Int16_operator_lte_Int16.returnType = Type::FullType { Bool8Type.name };
    Int16_operator_lte_Int16.parameters = Int16_operator_lte_Int16_args;
    Symbol::Resolved(&Int16_operator_lte_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_lte_Int16)->signature = "operator<=(i16) b8"_c;
    Symbol::Resolved(&Int16_operator_lte_Int16)->name = "operator<=(i16)"_c;
    Symbol::Resolved(&Int16_operator_lte_Int16)->nameWithVarNames = "operator<=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_lte_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator> with Int16
    Int16_operator_gt_Int16_arg.name = "arg"_c;
    Int16_operator_gt_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_gt_Int16.name = Int16_operator_gt_Int16_name;
    Int16_operator_gt_Int16.backendIndex = 195;
    Int16_operator_gt_Int16.returnType = Type::FullType { Bool8Type.name };
    Int16_operator_gt_Int16.parameters = Int16_operator_gt_Int16_args;
    Symbol::Resolved(&Int16_operator_gt_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_gt_Int16)->signature = "operator>(i16) b8"_c;
    Symbol::Resolved(&Int16_operator_gt_Int16)->name = "operator>(i16)"_c;
    Symbol::Resolved(&Int16_operator_gt_Int16)->nameWithVarNames = "operator>(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_gt_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator>= with Int16
    Int16_operator_gte_Int16_arg.name = "arg"_c;
    Int16_operator_gte_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_gte_Int16.name = Int16_operator_gte_Int16_name;
    Int16_operator_gte_Int16.backendIndex = 196;
    Int16_operator_gte_Int16.returnType = Type::FullType { Bool8Type.name };
    Int16_operator_gte_Int16.parameters = Int16_operator_gte_Int16_args;
    Symbol::Resolved(&Int16_operator_gte_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_gte_Int16)->signature = "operator>=(i16) b8"_c;
    Symbol::Resolved(&Int16_operator_gte_Int16)->name = "operator>=(i16)"_c;
    Symbol::Resolved(&Int16_operator_gte_Int16)->nameWithVarNames = "operator>=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_gte_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator== with Int16
    Int16_operator_eq_Int16_arg.name = "arg"_c;
    Int16_operator_eq_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_eq_Int16.name = Int16_operator_eq_Int16_name;
    Int16_operator_eq_Int16.backendIndex = 197;
    Int16_operator_eq_Int16.returnType = Type::FullType { Bool8Type.name };
    Int16_operator_eq_Int16.parameters = Int16_operator_eq_Int16_args;
    Symbol::Resolved(&Int16_operator_eq_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_eq_Int16)->signature = "operator==(i16) b8"_c;
    Symbol::Resolved(&Int16_operator_eq_Int16)->name = "operator==(i16)"_c;
    Symbol::Resolved(&Int16_operator_eq_Int16)->nameWithVarNames = "operator==(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_eq_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Int16
    Int16_operator_neq_Int16_arg.name = "arg"_c;
    Int16_operator_neq_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_neq_Int16.name = Int16_operator_neq_Int16_name;
    Int16_operator_neq_Int16.backendIndex = 198;
    Int16_operator_neq_Int16.returnType = Type::FullType { Bool8Type.name };
    Int16_operator_neq_Int16.parameters = Int16_operator_neq_Int16_args;
    Symbol::Resolved(&Int16_operator_neq_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_neq_Int16)->signature = "operator!=(i16) b8"_c;
    Symbol::Resolved(&Int16_operator_neq_Int16)->name = "operator!=(i16)"_c;
    Symbol::Resolved(&Int16_operator_neq_Int16)->nameWithVarNames = "operator!=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_neq_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator| with Int16
    Int16_operator_or_Int16_arg.name = "arg"_c;
    Int16_operator_or_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_or_Int16.name = Int16_operator_or_Int16_name;
    Int16_operator_or_Int16.backendIndex = 199;
    Int16_operator_or_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_or_Int16.parameters = Int16_operator_or_Int16_args;
    Symbol::Resolved(&Int16_operator_or_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_or_Int16)->signature = "operator|(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_or_Int16)->name = "operator|(i16)"_c;
    Symbol::Resolved(&Int16_operator_or_Int16)->nameWithVarNames = "operator|(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_or_Int16)->returnTypeSymbol = &Int16Type;

    /// operator& with Int16
    Int16_operator_and_Int16_arg.name = "arg"_c;
    Int16_operator_and_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_and_Int16.name = Int16_operator_and_Int16_name;
    Int16_operator_and_Int16.backendIndex = 200;
    Int16_operator_and_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_and_Int16.parameters = Int16_operator_and_Int16_args;
    Symbol::Resolved(&Int16_operator_and_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_and_Int16)->signature = "operator&(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_and_Int16)->name = "operator&(i16)"_c;
    Symbol::Resolved(&Int16_operator_and_Int16)->nameWithVarNames = "operator&(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_and_Int16)->returnTypeSymbol = &Int16Type;

    /// operator^ with Int16
    Int16_operator_xor_Int16_arg.name = "arg"_c;
    Int16_operator_xor_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_xor_Int16.name = Int16_operator_xor_Int16_name;
    Int16_operator_xor_Int16.backendIndex = 201;
    Int16_operator_xor_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_xor_Int16.parameters = Int16_operator_xor_Int16_args;
    Symbol::Resolved(&Int16_operator_xor_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_xor_Int16)->signature = "operator^(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_xor_Int16)->name = "operator^(i16)"_c;
    Symbol::Resolved(&Int16_operator_xor_Int16)->nameWithVarNames = "operator^(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_xor_Int16)->returnTypeSymbol = &Int16Type;

    /// operator<< with Int16
    Int16_operator_lsh_Int16_arg.name = "arg"_c;
    Int16_operator_lsh_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_lsh_Int16.name = Int16_operator_lsh_Int16_name;
    Int16_operator_lsh_Int16.backendIndex = 202;
    Int16_operator_lsh_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_lsh_Int16.parameters = Int16_operator_lsh_Int16_args;
    Symbol::Resolved(&Int16_operator_lsh_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_lsh_Int16)->signature = "operator<<(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_lsh_Int16)->name = "operator<<(i16)"_c;
    Symbol::Resolved(&Int16_operator_lsh_Int16)->nameWithVarNames = "operator<<(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_lsh_Int16)->returnTypeSymbol = &Int16Type;

    /// operator>> with Int16
    Int16_operator_rsh_Int16_arg.name = "arg"_c;
    Int16_operator_rsh_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_rsh_Int16.name = Int16_operator_rsh_Int16_name;
    Int16_operator_rsh_Int16.backendIndex = 203;
    Int16_operator_rsh_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_rsh_Int16.parameters = Int16_operator_rsh_Int16_args;
    Symbol::Resolved(&Int16_operator_rsh_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_rsh_Int16)->signature = "operator>>(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_rsh_Int16)->name = "operator>>(i16)"_c;
    Symbol::Resolved(&Int16_operator_rsh_Int16)->nameWithVarNames = "operator>>(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_rsh_Int16)->returnTypeSymbol = &Int16Type;

    /// operator|= with Int16
    Int16_operator_orasg_Int16_arg.name = "arg"_c;
    Int16_operator_orasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_orasg_Int16.name = Int16_operator_orasg_Int16_name;
    Int16_operator_orasg_Int16.backendIndex = 204;
    Int16_operator_orasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_orasg_Int16.parameters = Int16_operator_orasg_Int16_args;
    Symbol::Resolved(&Int16_operator_orasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_orasg_Int16)->signature = "operator|=(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_orasg_Int16)->name = "operator|=(i16)"_c;
    Symbol::Resolved(&Int16_operator_orasg_Int16)->nameWithVarNames = "operator|=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_orasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator&= with Int16
    Int16_operator_andasg_Int16_arg.name = "arg"_c;
    Int16_operator_andasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_andasg_Int16.name = Int16_operator_andasg_Int16_name;
    Int16_operator_andasg_Int16.backendIndex = 205;
    Int16_operator_andasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_andasg_Int16.parameters = Int16_operator_andasg_Int16_args;
    Symbol::Resolved(&Int16_operator_andasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_andasg_Int16)->signature = "operator&=(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_andasg_Int16)->name = "operator&=(i16)"_c;
    Symbol::Resolved(&Int16_operator_andasg_Int16)->nameWithVarNames = "operator&=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_andasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator^= with Int16
    Int16_operator_xorasg_Int16_arg.name = "arg"_c;
    Int16_operator_xorasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_xorasg_Int16.name = Int16_operator_xorasg_Int16_name;
    Int16_operator_xorasg_Int16.backendIndex = 206;
    Int16_operator_xorasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_xorasg_Int16.parameters = Int16_operator_xorasg_Int16_args;
    Symbol::Resolved(&Int16_operator_xorasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_xorasg_Int16)->signature = "operator^=(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_xorasg_Int16)->name = "operator^=(i16)"_c;
    Symbol::Resolved(&Int16_operator_xorasg_Int16)->nameWithVarNames = "operator^=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_xorasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator<<= with Int16
    Int16_operator_lshasg_Int16_arg.name = "arg"_c;
    Int16_operator_lshasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_lshasg_Int16.name = Int16_operator_lshasg_Int16_name;
    Int16_operator_lshasg_Int16.backendIndex = 207;
    Int16_operator_lshasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_lshasg_Int16.parameters = Int16_operator_lshasg_Int16_args;
    Symbol::Resolved(&Int16_operator_lshasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_lshasg_Int16)->signature = "operator<<=(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_lshasg_Int16)->name = "operator<<=(i16)"_c;
    Symbol::Resolved(&Int16_operator_lshasg_Int16)->nameWithVarNames = "operator<<=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_lshasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator>>= with Int16
    Int16_operator_rhsasg_Int16_arg.name = "arg"_c;
    Int16_operator_rhsasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_rhsasg_Int16.name = Int16_operator_rhsasg_Int16_name;
    Int16_operator_rhsasg_Int16.backendIndex = 208;
    Int16_operator_rhsasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_rhsasg_Int16.parameters = Int16_operator_rhsasg_Int16_args;
    Symbol::Resolved(&Int16_operator_rhsasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_rhsasg_Int16)->signature = "operator>>=(i16) i16"_c;
    Symbol::Resolved(&Int16_operator_rhsasg_Int16)->name = "operator>>=(i16)"_c;
    Symbol::Resolved(&Int16_operator_rhsasg_Int16)->nameWithVarNames = "operator>>=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_rhsasg_Int16)->returnTypeSymbol = &Int16Type;

    this->scope.symbolLookup = Int16_symbolLookup;
}
Int16 Int16Type;

/// operator[] with Int32
Variable Float32x2_operator_index_Int32_arg;
Function Float32x2_operator_index_Int32;
inline constexpr std::array Float32x2_operator_index_Int32_args = { &Float32x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x2_operator_index_UInt32_arg;
Function Float32x2_operator_index_UInt32;
inline constexpr std::array Float32x2_operator_index_UInt32_args = { &Float32x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x2_operator_index_Int16_arg;
Function Float32x2_operator_index_Int16;
inline constexpr std::array Float32x2_operator_index_Int16_args = { &Float32x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x2_operator_index_UInt16_arg;
Function Float32x2_operator_index_UInt16;
inline constexpr std::array Float32x2_operator_index_UInt16_args = { &Float32x2_operator_index_UInt16_arg };

/// operator+ with Float32x2
Variable Float32x2_operator_add_Float32x2_arg;
Function Float32x2_operator_add_Float32x2;
inline constexpr std::array Float32x2_operator_add_Float32x2_args = { &Float32x2_operator_add_Float32x2_arg };

/// operator- with Float32x2
Variable Float32x2_operator_sub_Float32x2_arg;
Function Float32x2_operator_sub_Float32x2;
inline constexpr std::array Float32x2_operator_sub_Float32x2_args = { &Float32x2_operator_sub_Float32x2_arg };

/// operator* with Float32x2
Variable Float32x2_operator_mul_Float32x2_arg;
Function Float32x2_operator_mul_Float32x2;
inline constexpr std::array Float32x2_operator_mul_Float32x2_args = { &Float32x2_operator_mul_Float32x2_arg };

/// operator/ with Float32x2
Variable Float32x2_operator_div_Float32x2_arg;
Function Float32x2_operator_div_Float32x2;
inline constexpr std::array Float32x2_operator_div_Float32x2_args = { &Float32x2_operator_div_Float32x2_arg };

/// operator% with Float32x2
Variable Float32x2_operator_mod_Float32x2_arg;
Function Float32x2_operator_mod_Float32x2;
inline constexpr std::array Float32x2_operator_mod_Float32x2_args = { &Float32x2_operator_mod_Float32x2_arg };

/// operator+= with Float32x2
Variable Float32x2_operator_addasg_Float32x2_arg;
Function Float32x2_operator_addasg_Float32x2;
inline constexpr std::array Float32x2_operator_addasg_Float32x2_args = { &Float32x2_operator_addasg_Float32x2_arg };

/// operator-= with Float32x2
Variable Float32x2_operator_subasg_Float32x2_arg;
Function Float32x2_operator_subasg_Float32x2;
inline constexpr std::array Float32x2_operator_subasg_Float32x2_args = { &Float32x2_operator_subasg_Float32x2_arg };

/// operator*= with Float32x2
Variable Float32x2_operator_mulasg_Float32x2_arg;
Function Float32x2_operator_mulasg_Float32x2;
inline constexpr std::array Float32x2_operator_mulasg_Float32x2_args = { &Float32x2_operator_mulasg_Float32x2_arg };

/// operator/= with Float32x2
Variable Float32x2_operator_divasg_Float32x2_arg;
Function Float32x2_operator_divasg_Float32x2;
inline constexpr std::array Float32x2_operator_divasg_Float32x2_args = { &Float32x2_operator_divasg_Float32x2_arg };

/// operator< with Float32x2
Variable Float32x2_operator_lt_Float32x2_arg;
Function Float32x2_operator_lt_Float32x2;
inline constexpr std::array Float32x2_operator_lt_Float32x2_args = { &Float32x2_operator_lt_Float32x2_arg };

/// operator<= with Float32x2
Variable Float32x2_operator_lte_Float32x2_arg;
Function Float32x2_operator_lte_Float32x2;
inline constexpr std::array Float32x2_operator_lte_Float32x2_args = { &Float32x2_operator_lte_Float32x2_arg };

/// operator> with Float32x2
Variable Float32x2_operator_gt_Float32x2_arg;
Function Float32x2_operator_gt_Float32x2;
inline constexpr std::array Float32x2_operator_gt_Float32x2_args = { &Float32x2_operator_gt_Float32x2_arg };

/// operator>= with Float32x2
Variable Float32x2_operator_gte_Float32x2_arg;
Function Float32x2_operator_gte_Float32x2;
inline constexpr std::array Float32x2_operator_gte_Float32x2_args = { &Float32x2_operator_gte_Float32x2_arg };

/// operator== with Float32x2
Variable Float32x2_operator_eq_Float32x2_arg;
Function Float32x2_operator_eq_Float32x2;
inline constexpr std::array Float32x2_operator_eq_Float32x2_args = { &Float32x2_operator_eq_Float32x2_arg };

/// operator!= with Float32x2
Variable Float32x2_operator_neq_Float32x2_arg;
Function Float32x2_operator_neq_Float32x2;
inline constexpr std::array Float32x2_operator_neq_Float32x2_args = { &Float32x2_operator_neq_Float32x2_arg };

/// operator* with Float32
Variable Float32x2_operator_scale_Float32_arg;
Function Float32x2_operator_scale_Float32;
inline constexpr std::array Float32x2_operator_scale_Float32_args = { &Float32x2_operator_scale_Float32_arg };

/// operator* with UInt32
Variable Float32x2_operator_scale_UInt32_arg;
Function Float32x2_operator_scale_UInt32;
inline constexpr std::array Float32x2_operator_scale_UInt32_args = { &Float32x2_operator_scale_UInt32_arg };

/// operator* with Int32
Variable Float32x2_operator_scale_Int32_arg;
Function Float32x2_operator_scale_Int32;
inline constexpr std::array Float32x2_operator_scale_Int32_args = { &Float32x2_operator_scale_Int32_arg };

/// operator* with Float32x2x2
Variable Float32x2_operator_transform_Float32x2x2_arg;
Function Float32x2_operator_transform_Float32x2x2;
inline constexpr std::array Float32x2_operator_transform_Float32x2x2_args = { &Float32x2_operator_transform_Float32x2x2_arg };

/// operator* with Float32x2x3
Variable Float32x2_operator_transform_Float32x2x3_arg;
Function Float32x2_operator_transform_Float32x2x3;
inline constexpr std::array Float32x2_operator_transform_Float32x2x3_args = { &Float32x2_operator_transform_Float32x2x3_arg };

/// operator* with Float32x2x4
Variable Float32x2_operator_transform_Float32x2x4_arg;
Function Float32x2_operator_transform_Float32x2x4;
inline constexpr std::array Float32x2_operator_transform_Float32x2x4_args = { &Float32x2_operator_transform_Float32x2x4_arg };

static constexpr StaticMap<HashString, Symbol*, 110> Float32x2_symbolLookup = {
    std::pair{ "gg"_h, &Float32x2Type },
    std::pair{ "gr"_h, &Float32x2Type },
    std::pair{ "rr"_h, &Float32x2Type },
    std::pair{ "rg"_h, &Float32x2Type },
    std::pair{ "yx"_h, &Float32x2Type },
    std::pair{ "yy"_h, &Float32x2Type },
    std::pair{ "xy"_h, &Float32x2Type },
    std::pair{ "xx"_h, &Float32x2Type },
    std::pair{ "operator[](i16)"_h, &Float32x2_operator_index_Int16 },
    std::pair{ "operator!=(f32x2)"_h, &Float32x2_operator_neq_Float32x2 },
    std::pair{ "operator+=(f32x2)"_h, &Float32x2_operator_addasg_Float32x2 },
    std::pair{ "operator>(f32x2)"_h, &Float32x2_operator_gt_Float32x2 },
    std::pair{ "operator*(u32)"_h, &Float32x2_operator_scale_UInt32 },
    std::pair{ "operator+(f32x2)"_h, &Float32x2_operator_add_Float32x2 },
    std::pair{ "operator<"_h, &Float32x2_operator_lt_Float32x2 },
    std::pair{ "operator>"_h, &Float32x2_operator_gt_Float32x2 },
    std::pair{ "operator-"_h, &Float32x2_operator_sub_Float32x2 },
    std::pair{ "operator/"_h, &Float32x2_operator_div_Float32x2 },
    std::pair{ "operator+"_h, &Float32x2_operator_add_Float32x2 },
    std::pair{ "operator*"_h, &Float32x2_operator_mul_Float32x2 },
    std::pair{ "operator*"_h, &Float32x2_operator_scale_Float32 },
    std::pair{ "operator*"_h, &Float32x2_operator_scale_UInt32 },
    std::pair{ "operator*"_h, &Float32x2_operator_scale_Int32 },
    std::pair{ "operator*"_h, &Float32x2_operator_transform_Float32x2x2 },
    std::pair{ "operator*"_h, &Float32x2_operator_transform_Float32x2x3 },
    std::pair{ "operator*"_h, &Float32x2_operator_transform_Float32x2x4 },
    std::pair{ "operator%"_h, &Float32x2_operator_mod_Float32x2 },
    std::pair{ "yxxx"_h, &Float32x4Type },
    std::pair{ "yxxy"_h, &Float32x4Type },
    std::pair{ "yxyy"_h, &Float32x4Type },
    std::pair{ "yxyx"_h, &Float32x4Type },
    std::pair{ "xyxx"_h, &Float32x4Type },
    std::pair{ "xyxy"_h, &Float32x4Type },
    std::pair{ "xyyy"_h, &Float32x4Type },
    std::pair{ "xyyx"_h, &Float32x4Type },
    std::pair{ "ggrr"_h, &Float32x4Type },
    std::pair{ "ggrg"_h, &Float32x4Type },
    std::pair{ "gggr"_h, &Float32x4Type },
    std::pair{ "gggg"_h, &Float32x4Type },
    std::pair{ "yyyx"_h, &Float32x4Type },
    std::pair{ "yyyy"_h, &Float32x4Type },
    std::pair{ "yyxy"_h, &Float32x4Type },
    std::pair{ "yyxx"_h, &Float32x4Type },
    std::pair{ "xxyx"_h, &Float32x4Type },
    std::pair{ "xxyy"_h, &Float32x4Type },
    std::pair{ "xxxy"_h, &Float32x4Type },
    std::pair{ "xxxx"_h, &Float32x4Type },
    std::pair{ "rgrg"_h, &Float32x4Type },
    std::pair{ "rgrr"_h, &Float32x4Type },
    std::pair{ "rggg"_h, &Float32x4Type },
    std::pair{ "rggr"_h, &Float32x4Type },
    std::pair{ "operator*(f32x2)"_h, &Float32x2_operator_mul_Float32x2 },
    std::pair{ "operator%(f32x2)"_h, &Float32x2_operator_mod_Float32x2 },
    std::pair{ "operator<=(f32x2)"_h, &Float32x2_operator_lte_Float32x2 },
    std::pair{ "rrg"_h, &Float32x3Type },
    std::pair{ "rrr"_h, &Float32x3Type },
    std::pair{ "rgr"_h, &Float32x3Type },
    std::pair{ "rgg"_h, &Float32x3Type },
    std::pair{ "operator[](u32)"_h, &Float32x2_operator_index_UInt32 },
    std::pair{ "operator>=(f32x2)"_h, &Float32x2_operator_gte_Float32x2 },
    std::pair{ "operator*(f32)"_h, &Float32x2_operator_scale_Float32 },
    std::pair{ "operator==(f32x2)"_h, &Float32x2_operator_eq_Float32x2 },
    std::pair{ "operator[](u16)"_h, &Float32x2_operator_index_UInt16 },
    std::pair{ "g"_h, &Float32Type },
    std::pair{ "r"_h, &Float32Type },
    std::pair{ "y"_h, &Float32Type },
    std::pair{ "x"_h, &Float32Type },
    std::pair{ "operator*(i32)"_h, &Float32x2_operator_scale_Int32 },
    std::pair{ "yxx"_h, &Float32x3Type },
    std::pair{ "yxy"_h, &Float32x3Type },
    std::pair{ "yyy"_h, &Float32x3Type },
    std::pair{ "yyx"_h, &Float32x3Type },
    std::pair{ "operator*(f32x2x2)"_h, &Float32x2_operator_transform_Float32x2x2 },
    std::pair{ "operator*(f32x2x3)"_h, &Float32x2_operator_transform_Float32x2x3 },
    std::pair{ "operator*(f32x2x4)"_h, &Float32x2_operator_transform_Float32x2x4 },
    std::pair{ "xyx"_h, &Float32x3Type },
    std::pair{ "xyy"_h, &Float32x3Type },
    std::pair{ "xxy"_h, &Float32x3Type },
    std::pair{ "xxx"_h, &Float32x3Type },
    std::pair{ "operator*=(f32x2)"_h, &Float32x2_operator_mulasg_Float32x2 },
    std::pair{ "ggr"_h, &Float32x3Type },
    std::pair{ "ggg"_h, &Float32x3Type },
    std::pair{ "grr"_h, &Float32x3Type },
    std::pair{ "grg"_h, &Float32x3Type },
    std::pair{ "operator[]"_h, &Float32x2_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float32x2_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float32x2_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float32x2_operator_index_UInt16 },
    std::pair{ "operator-=(f32x2)"_h, &Float32x2_operator_subasg_Float32x2 },
    std::pair{ "operator=="_h, &Float32x2_operator_eq_Float32x2 },
    std::pair{ "operator<="_h, &Float32x2_operator_lte_Float32x2 },
    std::pair{ "operator>="_h, &Float32x2_operator_gte_Float32x2 },
    std::pair{ "operator-="_h, &Float32x2_operator_subasg_Float32x2 },
    std::pair{ "operator/="_h, &Float32x2_operator_divasg_Float32x2 },
    std::pair{ "operator+="_h, &Float32x2_operator_addasg_Float32x2 },
    std::pair{ "operator*="_h, &Float32x2_operator_mulasg_Float32x2 },
    std::pair{ "operator!="_h, &Float32x2_operator_neq_Float32x2 },
    std::pair{ "operator-(f32x2)"_h, &Float32x2_operator_sub_Float32x2 },
    std::pair{ "operator<(f32x2)"_h, &Float32x2_operator_lt_Float32x2 },
    std::pair{ "operator/=(f32x2)"_h, &Float32x2_operator_divasg_Float32x2 },
    std::pair{ "operator/(f32x2)"_h, &Float32x2_operator_div_Float32x2 },
    std::pair{ "operator[](i32)"_h, &Float32x2_operator_index_Int32 },
    std::pair{ "grrg"_h, &Float32x4Type },
    std::pair{ "grrr"_h, &Float32x4Type },
    std::pair{ "grgg"_h, &Float32x4Type },
    std::pair{ "grgr"_h, &Float32x4Type },
    std::pair{ "rrgg"_h, &Float32x4Type },
    std::pair{ "rrgr"_h, &Float32x4Type },
    std::pair{ "rrrr"_h, &Float32x4Type },
    std::pair{ "rrrg"_h, &Float32x4Type }
    };

Float32x2::Float32x2()
{
    this->name = "f32x2"_c;
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x2_operator_index_Int32_arg.name = "arg"_c;
    Float32x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x2_operator_index_Int32.name = Float32x2_operator_index_Int32_name;
    Float32x2_operator_index_Int32.backendIndex = 224;
    Float32x2_operator_index_Int32.returnType = Type::FullType { Float32Type.name };
    Float32x2_operator_index_Int32.parameters = Float32x2_operator_index_Int32_args;
    Symbol::Resolved(&Float32x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2_operator_index_Int32)->signature = "operator[](i32) f32"_c;
    Symbol::Resolved(&Float32x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x2_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float32x2_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt32
    Float32x2_operator_index_UInt32_arg.name = "arg"_c;
    Float32x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x2_operator_index_UInt32.name = Float32x2_operator_index_UInt32_name;
    Float32x2_operator_index_UInt32.backendIndex = 225;
    Float32x2_operator_index_UInt32.returnType = Type::FullType { Float32Type.name };
    Float32x2_operator_index_UInt32.parameters = Float32x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2_operator_index_UInt32)->signature = "operator[](u32) f32"_c;
    Symbol::Resolved(&Float32x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x2_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float32x2_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    /// operator[] with Int16
    Float32x2_operator_index_Int16_arg.name = "arg"_c;
    Float32x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x2_operator_index_Int16.name = Float32x2_operator_index_Int16_name;
    Float32x2_operator_index_Int16.backendIndex = 226;
    Float32x2_operator_index_Int16.returnType = Type::FullType { Float32Type.name };
    Float32x2_operator_index_Int16.parameters = Float32x2_operator_index_Int16_args;
    Symbol::Resolved(&Float32x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2_operator_index_Int16)->signature = "operator[](i16) f32"_c;
    Symbol::Resolved(&Float32x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x2_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float32x2_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt16
    Float32x2_operator_index_UInt16_arg.name = "arg"_c;
    Float32x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x2_operator_index_UInt16.name = Float32x2_operator_index_UInt16_name;
    Float32x2_operator_index_UInt16.backendIndex = 227;
    Float32x2_operator_index_UInt16.returnType = Type::FullType { Float32Type.name };
    Float32x2_operator_index_UInt16.parameters = Float32x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2_operator_index_UInt16)->signature = "operator[](u16) f32"_c;
    Symbol::Resolved(&Float32x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x2_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float32x2_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    /// operator+ with Float32x2
    Float32x2_operator_add_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_add_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_add_Float32x2.name = Float32x2_operator_add_Float32x2_name;
    Float32x2_operator_add_Float32x2.backendIndex = 228;
    Float32x2_operator_add_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_add_Float32x2.parameters = Float32x2_operator_add_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_add_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_add_Float32x2)->signature = "operator+(f32x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_operator_add_Float32x2)->name = "operator+(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_add_Float32x2)->nameWithVarNames = "operator+(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_add_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator- with Float32x2
    Float32x2_operator_sub_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_sub_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_sub_Float32x2.name = Float32x2_operator_sub_Float32x2_name;
    Float32x2_operator_sub_Float32x2.backendIndex = 229;
    Float32x2_operator_sub_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_sub_Float32x2.parameters = Float32x2_operator_sub_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_sub_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_sub_Float32x2)->signature = "operator-(f32x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_operator_sub_Float32x2)->name = "operator-(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_sub_Float32x2)->nameWithVarNames = "operator-(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_sub_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x2
    Float32x2_operator_mul_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_mul_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_mul_Float32x2.name = Float32x2_operator_mul_Float32x2_name;
    Float32x2_operator_mul_Float32x2.backendIndex = 230;
    Float32x2_operator_mul_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_mul_Float32x2.parameters = Float32x2_operator_mul_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2)->signature = "operator*(f32x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2)->name = "operator*(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2)->nameWithVarNames = "operator*(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator/ with Float32x2
    Float32x2_operator_div_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_div_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_div_Float32x2.name = Float32x2_operator_div_Float32x2_name;
    Float32x2_operator_div_Float32x2.backendIndex = 231;
    Float32x2_operator_div_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_div_Float32x2.parameters = Float32x2_operator_div_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_div_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_div_Float32x2)->signature = "operator/(f32x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_operator_div_Float32x2)->name = "operator/(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_div_Float32x2)->nameWithVarNames = "operator/(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_div_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator% with Float32x2
    Float32x2_operator_mod_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_mod_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_mod_Float32x2.name = Float32x2_operator_mod_Float32x2_name;
    Float32x2_operator_mod_Float32x2.backendIndex = 232;
    Float32x2_operator_mod_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_mod_Float32x2.parameters = Float32x2_operator_mod_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_mod_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_mod_Float32x2)->signature = "operator%(f32x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_operator_mod_Float32x2)->name = "operator%(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_mod_Float32x2)->nameWithVarNames = "operator%(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_mod_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator+= with Float32x2
    Float32x2_operator_addasg_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_addasg_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_addasg_Float32x2.name = Float32x2_operator_addasg_Float32x2_name;
    Float32x2_operator_addasg_Float32x2.backendIndex = 233;
    Float32x2_operator_addasg_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_addasg_Float32x2.parameters = Float32x2_operator_addasg_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_addasg_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_addasg_Float32x2)->signature = "operator+=(f32x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_operator_addasg_Float32x2)->name = "operator+=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_addasg_Float32x2)->nameWithVarNames = "operator+=(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_addasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator-= with Float32x2
    Float32x2_operator_subasg_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_subasg_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_subasg_Float32x2.name = Float32x2_operator_subasg_Float32x2_name;
    Float32x2_operator_subasg_Float32x2.backendIndex = 234;
    Float32x2_operator_subasg_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_subasg_Float32x2.parameters = Float32x2_operator_subasg_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_subasg_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_subasg_Float32x2)->signature = "operator-=(f32x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_operator_subasg_Float32x2)->name = "operator-=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_subasg_Float32x2)->nameWithVarNames = "operator-=(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_subasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator*= with Float32x2
    Float32x2_operator_mulasg_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_mulasg_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_mulasg_Float32x2.name = Float32x2_operator_mulasg_Float32x2_name;
    Float32x2_operator_mulasg_Float32x2.backendIndex = 235;
    Float32x2_operator_mulasg_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_mulasg_Float32x2.parameters = Float32x2_operator_mulasg_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_mulasg_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_mulasg_Float32x2)->signature = "operator*=(f32x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_operator_mulasg_Float32x2)->name = "operator*=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_mulasg_Float32x2)->nameWithVarNames = "operator*=(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_mulasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator/= with Float32x2
    Float32x2_operator_divasg_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_divasg_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_divasg_Float32x2.name = Float32x2_operator_divasg_Float32x2_name;
    Float32x2_operator_divasg_Float32x2.backendIndex = 236;
    Float32x2_operator_divasg_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_divasg_Float32x2.parameters = Float32x2_operator_divasg_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_divasg_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_divasg_Float32x2)->signature = "operator/=(f32x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_operator_divasg_Float32x2)->name = "operator/=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_divasg_Float32x2)->nameWithVarNames = "operator/=(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_divasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator< with Float32x2
    Float32x2_operator_lt_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_lt_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_lt_Float32x2.name = Float32x2_operator_lt_Float32x2_name;
    Float32x2_operator_lt_Float32x2.backendIndex = 237;
    Float32x2_operator_lt_Float32x2.returnType = Type::FullType { Bool8x2Type.name };
    Float32x2_operator_lt_Float32x2.parameters = Float32x2_operator_lt_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_lt_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_lt_Float32x2)->signature = "operator<(f32x2) b8x2"_c;
    Symbol::Resolved(&Float32x2_operator_lt_Float32x2)->name = "operator<(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_lt_Float32x2)->nameWithVarNames = "operator<(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_lt_Float32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator<= with Float32x2
    Float32x2_operator_lte_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_lte_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_lte_Float32x2.name = Float32x2_operator_lte_Float32x2_name;
    Float32x2_operator_lte_Float32x2.backendIndex = 238;
    Float32x2_operator_lte_Float32x2.returnType = Type::FullType { Bool8x2Type.name };
    Float32x2_operator_lte_Float32x2.parameters = Float32x2_operator_lte_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_lte_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_lte_Float32x2)->signature = "operator<=(f32x2) b8x2"_c;
    Symbol::Resolved(&Float32x2_operator_lte_Float32x2)->name = "operator<=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_lte_Float32x2)->nameWithVarNames = "operator<=(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_lte_Float32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator> with Float32x2
    Float32x2_operator_gt_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_gt_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_gt_Float32x2.name = Float32x2_operator_gt_Float32x2_name;
    Float32x2_operator_gt_Float32x2.backendIndex = 239;
    Float32x2_operator_gt_Float32x2.returnType = Type::FullType { Bool8x2Type.name };
    Float32x2_operator_gt_Float32x2.parameters = Float32x2_operator_gt_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_gt_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_gt_Float32x2)->signature = "operator>(f32x2) b8x2"_c;
    Symbol::Resolved(&Float32x2_operator_gt_Float32x2)->name = "operator>(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_gt_Float32x2)->nameWithVarNames = "operator>(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_gt_Float32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator>= with Float32x2
    Float32x2_operator_gte_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_gte_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_gte_Float32x2.name = Float32x2_operator_gte_Float32x2_name;
    Float32x2_operator_gte_Float32x2.backendIndex = 240;
    Float32x2_operator_gte_Float32x2.returnType = Type::FullType { Bool8x2Type.name };
    Float32x2_operator_gte_Float32x2.parameters = Float32x2_operator_gte_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_gte_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_gte_Float32x2)->signature = "operator>=(f32x2) b8x2"_c;
    Symbol::Resolved(&Float32x2_operator_gte_Float32x2)->name = "operator>=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_gte_Float32x2)->nameWithVarNames = "operator>=(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_gte_Float32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator== with Float32x2
    Float32x2_operator_eq_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_eq_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_eq_Float32x2.name = Float32x2_operator_eq_Float32x2_name;
    Float32x2_operator_eq_Float32x2.backendIndex = 241;
    Float32x2_operator_eq_Float32x2.returnType = Type::FullType { Bool8x2Type.name };
    Float32x2_operator_eq_Float32x2.parameters = Float32x2_operator_eq_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_eq_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_eq_Float32x2)->signature = "operator==(f32x2) b8x2"_c;
    Symbol::Resolved(&Float32x2_operator_eq_Float32x2)->name = "operator==(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_eq_Float32x2)->nameWithVarNames = "operator==(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_eq_Float32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator!= with Float32x2
    Float32x2_operator_neq_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_neq_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_neq_Float32x2.name = Float32x2_operator_neq_Float32x2_name;
    Float32x2_operator_neq_Float32x2.backendIndex = 242;
    Float32x2_operator_neq_Float32x2.returnType = Type::FullType { Bool8x2Type.name };
    Float32x2_operator_neq_Float32x2.parameters = Float32x2_operator_neq_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_neq_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_neq_Float32x2)->signature = "operator!=(f32x2) b8x2"_c;
    Symbol::Resolved(&Float32x2_operator_neq_Float32x2)->name = "operator!=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_neq_Float32x2)->nameWithVarNames = "operator!=(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_neq_Float32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator* with Float32
    Float32x2_operator_scale_Float32_arg.name = "arg"_c;
    Float32x2_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x2_operator_scale_Float32.name = Float32x2_operator_scale_Float32_name;
    Float32x2_operator_scale_Float32.backendIndex = 243;
    Float32x2_operator_scale_Float32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_scale_Float32.parameters = Float32x2_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x2_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2_operator_scale_Float32)->signature = "operator*(f32) f32x2"_c;
    Symbol::Resolved(&Float32x2_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x2_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x2_operator_scale_Float32)->returnTypeSymbol = &Float32x2Type;

    /// operator* with UInt32
    Float32x2_operator_scale_UInt32_arg.name = "arg"_c;
    Float32x2_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x2_operator_scale_UInt32.name = Float32x2_operator_scale_UInt32_name;
    Float32x2_operator_scale_UInt32.backendIndex = 244;
    Float32x2_operator_scale_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_scale_UInt32.parameters = Float32x2_operator_scale_UInt32_args;
    Symbol::Resolved(&Float32x2_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2_operator_scale_UInt32)->signature = "operator*(u32) f32x2"_c;
    Symbol::Resolved(&Float32x2_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&Float32x2_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&Float32x2_operator_scale_UInt32)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Int32
    Float32x2_operator_scale_Int32_arg.name = "arg"_c;
    Float32x2_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x2_operator_scale_Int32.name = Float32x2_operator_scale_Int32_name;
    Float32x2_operator_scale_Int32.backendIndex = 245;
    Float32x2_operator_scale_Int32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_scale_Int32.parameters = Float32x2_operator_scale_Int32_args;
    Symbol::Resolved(&Float32x2_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2_operator_scale_Int32)->signature = "operator*(i32) f32x2"_c;
    Symbol::Resolved(&Float32x2_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&Float32x2_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&Float32x2_operator_scale_Int32)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x2x2
    Float32x2_operator_transform_Float32x2x2_arg.name = "arg"_c;
    Float32x2_operator_transform_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2_operator_transform_Float32x2x2.name = Float32x2_operator_transform_Float32x2x2_name;
    Float32x2_operator_transform_Float32x2x2.backendIndex = 246;
    Float32x2_operator_transform_Float32x2x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_transform_Float32x2x2.parameters = Float32x2_operator_transform_Float32x2x2_args;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x2)->signature = "operator*(f32x2x2) f32x2"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x2)->name = "operator*(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x2)->nameWithVarNames = "operator*(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x2)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x2x3
    Float32x2_operator_transform_Float32x2x3_arg.name = "arg"_c;
    Float32x2_operator_transform_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2_operator_transform_Float32x2x3.name = Float32x2_operator_transform_Float32x2x3_name;
    Float32x2_operator_transform_Float32x2x3.backendIndex = 247;
    Float32x2_operator_transform_Float32x2x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x2_operator_transform_Float32x2x3.parameters = Float32x2_operator_transform_Float32x2x3_args;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x3)->signature = "operator*(f32x2x3) f32x3"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x3)->name = "operator*(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x3)->nameWithVarNames = "operator*(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x3)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x2x4
    Float32x2_operator_transform_Float32x2x4_arg.name = "arg"_c;
    Float32x2_operator_transform_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2_operator_transform_Float32x2x4.name = Float32x2_operator_transform_Float32x2x4_name;
    Float32x2_operator_transform_Float32x2x4.backendIndex = 248;
    Float32x2_operator_transform_Float32x2x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x2_operator_transform_Float32x2x4.parameters = Float32x2_operator_transform_Float32x2x4_args;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x4)->signature = "operator*(f32x2x4) f32x4"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x4)->name = "operator*(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x4)->nameWithVarNames = "operator*(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x4)->returnTypeSymbol = &Float32x4Type;

    this->scope.symbolLookup = Float32x2_symbolLookup;
}
Float32x2 Float32x2Type;

/// operator[] with Int32
Variable UInt32x2_operator_index_Int32_arg;
Function UInt32x2_operator_index_Int32;
inline constexpr std::array UInt32x2_operator_index_Int32_args = { &UInt32x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt32x2_operator_index_UInt32_arg;
Function UInt32x2_operator_index_UInt32;
inline constexpr std::array UInt32x2_operator_index_UInt32_args = { &UInt32x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt32x2_operator_index_Int16_arg;
Function UInt32x2_operator_index_Int16;
inline constexpr std::array UInt32x2_operator_index_Int16_args = { &UInt32x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt32x2_operator_index_UInt16_arg;
Function UInt32x2_operator_index_UInt16;
inline constexpr std::array UInt32x2_operator_index_UInt16_args = { &UInt32x2_operator_index_UInt16_arg };

/// operator+ with UInt32x2
Variable UInt32x2_operator_add_UInt32x2_arg;
Function UInt32x2_operator_add_UInt32x2;
inline constexpr std::array UInt32x2_operator_add_UInt32x2_args = { &UInt32x2_operator_add_UInt32x2_arg };

/// operator- with UInt32x2
Variable UInt32x2_operator_sub_UInt32x2_arg;
Function UInt32x2_operator_sub_UInt32x2;
inline constexpr std::array UInt32x2_operator_sub_UInt32x2_args = { &UInt32x2_operator_sub_UInt32x2_arg };

/// operator* with UInt32x2
Variable UInt32x2_operator_mul_UInt32x2_arg;
Function UInt32x2_operator_mul_UInt32x2;
inline constexpr std::array UInt32x2_operator_mul_UInt32x2_args = { &UInt32x2_operator_mul_UInt32x2_arg };

/// operator/ with UInt32x2
Variable UInt32x2_operator_div_UInt32x2_arg;
Function UInt32x2_operator_div_UInt32x2;
inline constexpr std::array UInt32x2_operator_div_UInt32x2_args = { &UInt32x2_operator_div_UInt32x2_arg };

/// operator% with UInt32x2
Variable UInt32x2_operator_mod_UInt32x2_arg;
Function UInt32x2_operator_mod_UInt32x2;
inline constexpr std::array UInt32x2_operator_mod_UInt32x2_args = { &UInt32x2_operator_mod_UInt32x2_arg };

/// operator+= with UInt32x2
Variable UInt32x2_operator_addasg_UInt32x2_arg;
Function UInt32x2_operator_addasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_addasg_UInt32x2_args = { &UInt32x2_operator_addasg_UInt32x2_arg };

/// operator-= with UInt32x2
Variable UInt32x2_operator_subasg_UInt32x2_arg;
Function UInt32x2_operator_subasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_subasg_UInt32x2_args = { &UInt32x2_operator_subasg_UInt32x2_arg };

/// operator*= with UInt32x2
Variable UInt32x2_operator_mulasg_UInt32x2_arg;
Function UInt32x2_operator_mulasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_mulasg_UInt32x2_args = { &UInt32x2_operator_mulasg_UInt32x2_arg };

/// operator/= with UInt32x2
Variable UInt32x2_operator_divasg_UInt32x2_arg;
Function UInt32x2_operator_divasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_divasg_UInt32x2_args = { &UInt32x2_operator_divasg_UInt32x2_arg };

/// operator< with UInt32x2
Variable UInt32x2_operator_lt_UInt32x2_arg;
Function UInt32x2_operator_lt_UInt32x2;
inline constexpr std::array UInt32x2_operator_lt_UInt32x2_args = { &UInt32x2_operator_lt_UInt32x2_arg };

/// operator<= with UInt32x2
Variable UInt32x2_operator_lte_UInt32x2_arg;
Function UInt32x2_operator_lte_UInt32x2;
inline constexpr std::array UInt32x2_operator_lte_UInt32x2_args = { &UInt32x2_operator_lte_UInt32x2_arg };

/// operator> with UInt32x2
Variable UInt32x2_operator_gt_UInt32x2_arg;
Function UInt32x2_operator_gt_UInt32x2;
inline constexpr std::array UInt32x2_operator_gt_UInt32x2_args = { &UInt32x2_operator_gt_UInt32x2_arg };

/// operator>= with UInt32x2
Variable UInt32x2_operator_gte_UInt32x2_arg;
Function UInt32x2_operator_gte_UInt32x2;
inline constexpr std::array UInt32x2_operator_gte_UInt32x2_args = { &UInt32x2_operator_gte_UInt32x2_arg };

/// operator== with UInt32x2
Variable UInt32x2_operator_eq_UInt32x2_arg;
Function UInt32x2_operator_eq_UInt32x2;
inline constexpr std::array UInt32x2_operator_eq_UInt32x2_args = { &UInt32x2_operator_eq_UInt32x2_arg };

/// operator!= with UInt32x2
Variable UInt32x2_operator_neq_UInt32x2_arg;
Function UInt32x2_operator_neq_UInt32x2;
inline constexpr std::array UInt32x2_operator_neq_UInt32x2_args = { &UInt32x2_operator_neq_UInt32x2_arg };

/// operator* with Float32
Variable UInt32x2_operator_scale_Float32_arg;
Function UInt32x2_operator_scale_Float32;
inline constexpr std::array UInt32x2_operator_scale_Float32_args = { &UInt32x2_operator_scale_Float32_arg };

/// operator* with UInt32
Variable UInt32x2_operator_scale_UInt32_arg;
Function UInt32x2_operator_scale_UInt32;
inline constexpr std::array UInt32x2_operator_scale_UInt32_args = { &UInt32x2_operator_scale_UInt32_arg };

/// operator* with Int32
Variable UInt32x2_operator_scale_Int32_arg;
Function UInt32x2_operator_scale_Int32;
inline constexpr std::array UInt32x2_operator_scale_Int32_args = { &UInt32x2_operator_scale_Int32_arg };

/// operator| with UInt32x2
Variable UInt32x2_operator_or_UInt32x2_arg;
Function UInt32x2_operator_or_UInt32x2;
inline constexpr std::array UInt32x2_operator_or_UInt32x2_args = { &UInt32x2_operator_or_UInt32x2_arg };

/// operator& with UInt32x2
Variable UInt32x2_operator_and_UInt32x2_arg;
Function UInt32x2_operator_and_UInt32x2;
inline constexpr std::array UInt32x2_operator_and_UInt32x2_args = { &UInt32x2_operator_and_UInt32x2_arg };

/// operator^ with UInt32x2
Variable UInt32x2_operator_xor_UInt32x2_arg;
Function UInt32x2_operator_xor_UInt32x2;
inline constexpr std::array UInt32x2_operator_xor_UInt32x2_args = { &UInt32x2_operator_xor_UInt32x2_arg };

/// operator<< with UInt32x2
Variable UInt32x2_operator_lsh_UInt32x2_arg;
Function UInt32x2_operator_lsh_UInt32x2;
inline constexpr std::array UInt32x2_operator_lsh_UInt32x2_args = { &UInt32x2_operator_lsh_UInt32x2_arg };

/// operator>> with UInt32x2
Variable UInt32x2_operator_rsh_UInt32x2_arg;
Function UInt32x2_operator_rsh_UInt32x2;
inline constexpr std::array UInt32x2_operator_rsh_UInt32x2_args = { &UInt32x2_operator_rsh_UInt32x2_arg };

/// operator|= with UInt32x2
Variable UInt32x2_operator_orasg_UInt32x2_arg;
Function UInt32x2_operator_orasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_orasg_UInt32x2_args = { &UInt32x2_operator_orasg_UInt32x2_arg };

/// operator&= with UInt32x2
Variable UInt32x2_operator_andasg_UInt32x2_arg;
Function UInt32x2_operator_andasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_andasg_UInt32x2_args = { &UInt32x2_operator_andasg_UInt32x2_arg };

/// operator^= with UInt32x2
Variable UInt32x2_operator_xorasg_UInt32x2_arg;
Function UInt32x2_operator_xorasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_xorasg_UInt32x2_args = { &UInt32x2_operator_xorasg_UInt32x2_arg };

/// operator<<= with UInt32x2
Variable UInt32x2_operator_lshasg_UInt32x2_arg;
Function UInt32x2_operator_lshasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_lshasg_UInt32x2_args = { &UInt32x2_operator_lshasg_UInt32x2_arg };

/// operator>>= with UInt32x2
Variable UInt32x2_operator_rhsasg_UInt32x2_arg;
Function UInt32x2_operator_rhsasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_rhsasg_UInt32x2_args = { &UInt32x2_operator_rhsasg_UInt32x2_arg };

static constexpr StaticMap<HashString, Symbol*, 124> UInt32x2_symbolLookup = {
    std::pair{ "operator==(u32x2)"_h, &UInt32x2_operator_eq_UInt32x2 },
    std::pair{ "gg"_h, &UInt32x2Type },
    std::pair{ "gr"_h, &UInt32x2Type },
    std::pair{ "rr"_h, &UInt32x2Type },
    std::pair{ "rg"_h, &UInt32x2Type },
    std::pair{ "yx"_h, &UInt32x2Type },
    std::pair{ "yy"_h, &UInt32x2Type },
    std::pair{ "xy"_h, &UInt32x2Type },
    std::pair{ "xx"_h, &UInt32x2Type },
    std::pair{ "operator[](i16)"_h, &UInt32x2_operator_index_Int16 },
    std::pair{ "operator|=(u32x2)"_h, &UInt32x2_operator_orasg_UInt32x2 },
    std::pair{ "operator&(u32x2)"_h, &UInt32x2_operator_and_UInt32x2 },
    std::pair{ "operator>>=(u32x2)"_h, &UInt32x2_operator_rhsasg_UInt32x2 },
    std::pair{ "operator*(u32)"_h, &UInt32x2_operator_scale_UInt32 },
    std::pair{ "operator^(u32x2)"_h, &UInt32x2_operator_xor_UInt32x2 },
    std::pair{ "operator<<(u32x2)"_h, &UInt32x2_operator_lsh_UInt32x2 },
    std::pair{ "operator&=(u32x2)"_h, &UInt32x2_operator_andasg_UInt32x2 },
    std::pair{ "operator-(u32x2)"_h, &UInt32x2_operator_sub_UInt32x2 },
    std::pair{ "operator^"_h, &UInt32x2_operator_xor_UInt32x2 },
    std::pair{ "operator|"_h, &UInt32x2_operator_or_UInt32x2 },
    std::pair{ "operator<"_h, &UInt32x2_operator_lt_UInt32x2 },
    std::pair{ "operator>"_h, &UInt32x2_operator_gt_UInt32x2 },
    std::pair{ "operator-"_h, &UInt32x2_operator_sub_UInt32x2 },
    std::pair{ "operator/"_h, &UInt32x2_operator_div_UInt32x2 },
    std::pair{ "operator+"_h, &UInt32x2_operator_add_UInt32x2 },
    std::pair{ "operator*"_h, &UInt32x2_operator_mul_UInt32x2 },
    std::pair{ "operator*"_h, &UInt32x2_operator_scale_Float32 },
    std::pair{ "operator*"_h, &UInt32x2_operator_scale_UInt32 },
    std::pair{ "operator*"_h, &UInt32x2_operator_scale_Int32 },
    std::pair{ "operator%"_h, &UInt32x2_operator_mod_UInt32x2 },
    std::pair{ "operator&"_h, &UInt32x2_operator_and_UInt32x2 },
    std::pair{ "yxxx"_h, &UInt32x4Type },
    std::pair{ "yxxy"_h, &UInt32x4Type },
    std::pair{ "yxyy"_h, &UInt32x4Type },
    std::pair{ "yxyx"_h, &UInt32x4Type },
    std::pair{ "xyxx"_h, &UInt32x4Type },
    std::pair{ "xyxy"_h, &UInt32x4Type },
    std::pair{ "xyyy"_h, &UInt32x4Type },
    std::pair{ "xyyx"_h, &UInt32x4Type },
    std::pair{ "ggrr"_h, &UInt32x4Type },
    std::pair{ "ggrg"_h, &UInt32x4Type },
    std::pair{ "gggr"_h, &UInt32x4Type },
    std::pair{ "gggg"_h, &UInt32x4Type },
    std::pair{ "yyyx"_h, &UInt32x4Type },
    std::pair{ "yyyy"_h, &UInt32x4Type },
    std::pair{ "yyxy"_h, &UInt32x4Type },
    std::pair{ "yyxx"_h, &UInt32x4Type },
    std::pair{ "xxyx"_h, &UInt32x4Type },
    std::pair{ "xxyy"_h, &UInt32x4Type },
    std::pair{ "xxxy"_h, &UInt32x4Type },
    std::pair{ "xxxx"_h, &UInt32x4Type },
    std::pair{ "rgrg"_h, &UInt32x4Type },
    std::pair{ "rgrr"_h, &UInt32x4Type },
    std::pair{ "rggg"_h, &UInt32x4Type },
    std::pair{ "rggr"_h, &UInt32x4Type },
    std::pair{ "operator-=(u32x2)"_h, &UInt32x2_operator_subasg_UInt32x2 },
    std::pair{ "operator/(u32x2)"_h, &UInt32x2_operator_div_UInt32x2 },
    std::pair{ "rrg"_h, &UInt32x3Type },
    std::pair{ "rrr"_h, &UInt32x3Type },
    std::pair{ "rgr"_h, &UInt32x3Type },
    std::pair{ "rgg"_h, &UInt32x3Type },
    std::pair{ "operator[](u32)"_h, &UInt32x2_operator_index_UInt32 },
    std::pair{ "operator<<="_h, &UInt32x2_operator_lshasg_UInt32x2 },
    std::pair{ "operator!=(u32x2)"_h, &UInt32x2_operator_neq_UInt32x2 },
    std::pair{ "operator*(f32)"_h, &UInt32x2_operator_scale_Float32 },
    std::pair{ "operator|(u32x2)"_h, &UInt32x2_operator_or_UInt32x2 },
    std::pair{ "operator>>(u32x2)"_h, &UInt32x2_operator_rsh_UInt32x2 },
    std::pair{ "operator[](u16)"_h, &UInt32x2_operator_index_UInt16 },
    std::pair{ "operator/=(u32x2)"_h, &UInt32x2_operator_divasg_UInt32x2 },
    std::pair{ "operator>>="_h, &UInt32x2_operator_rhsasg_UInt32x2 },
    std::pair{ "g"_h, &UInt32Type },
    std::pair{ "r"_h, &UInt32Type },
    std::pair{ "y"_h, &UInt32Type },
    std::pair{ "x"_h, &UInt32Type },
    std::pair{ "operator*(i32)"_h, &UInt32x2_operator_scale_Int32 },
    std::pair{ "yxx"_h, &UInt32x3Type },
    std::pair{ "yxy"_h, &UInt32x3Type },
    std::pair{ "yyy"_h, &UInt32x3Type },
    std::pair{ "yyx"_h, &UInt32x3Type },
    std::pair{ "xyx"_h, &UInt32x3Type },
    std::pair{ "xyy"_h, &UInt32x3Type },
    std::pair{ "xxy"_h, &UInt32x3Type },
    std::pair{ "xxx"_h, &UInt32x3Type },
    std::pair{ "operator+=(u32x2)"_h, &UInt32x2_operator_addasg_UInt32x2 },
    std::pair{ "operator*(u32x2)"_h, &UInt32x2_operator_mul_UInt32x2 },
    std::pair{ "ggr"_h, &UInt32x3Type },
    std::pair{ "ggg"_h, &UInt32x3Type },
    std::pair{ "grr"_h, &UInt32x3Type },
    std::pair{ "grg"_h, &UInt32x3Type },
    std::pair{ "operator%(u32x2)"_h, &UInt32x2_operator_mod_UInt32x2 },
    std::pair{ "operator+(u32x2)"_h, &UInt32x2_operator_add_UInt32x2 },
    std::pair{ "operator^=(u32x2)"_h, &UInt32x2_operator_xorasg_UInt32x2 },
    std::pair{ "operator<<=(u32x2)"_h, &UInt32x2_operator_lshasg_UInt32x2 },
    std::pair{ "operator^="_h, &UInt32x2_operator_xorasg_UInt32x2 },
    std::pair{ "operator[]"_h, &UInt32x2_operator_index_Int32 },
    std::pair{ "operator[]"_h, &UInt32x2_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &UInt32x2_operator_index_Int16 },
    std::pair{ "operator[]"_h, &UInt32x2_operator_index_UInt16 },
    std::pair{ "operator|="_h, &UInt32x2_operator_orasg_UInt32x2 },
    std::pair{ "operator=="_h, &UInt32x2_operator_eq_UInt32x2 },
    std::pair{ "operator<=(u32x2)"_h, &UInt32x2_operator_lte_UInt32x2 },
    std::pair{ "operator<="_h, &UInt32x2_operator_lte_UInt32x2 },
    std::pair{ "operator<<"_h, &UInt32x2_operator_lsh_UInt32x2 },
    std::pair{ "operator>="_h, &UInt32x2_operator_gte_UInt32x2 },
    std::pair{ "operator>>"_h, &UInt32x2_operator_rsh_UInt32x2 },
    std::pair{ "operator-="_h, &UInt32x2_operator_subasg_UInt32x2 },
    std::pair{ "operator/="_h, &UInt32x2_operator_divasg_UInt32x2 },
    std::pair{ "operator+="_h, &UInt32x2_operator_addasg_UInt32x2 },
    std::pair{ "operator*="_h, &UInt32x2_operator_mulasg_UInt32x2 },
    std::pair{ "operator&="_h, &UInt32x2_operator_andasg_UInt32x2 },
    std::pair{ "operator!="_h, &UInt32x2_operator_neq_UInt32x2 },
    std::pair{ "operator>=(u32x2)"_h, &UInt32x2_operator_gte_UInt32x2 },
    std::pair{ "operator>(u32x2)"_h, &UInt32x2_operator_gt_UInt32x2 },
    std::pair{ "operator*=(u32x2)"_h, &UInt32x2_operator_mulasg_UInt32x2 },
    std::pair{ "operator<(u32x2)"_h, &UInt32x2_operator_lt_UInt32x2 },
    std::pair{ "operator[](i32)"_h, &UInt32x2_operator_index_Int32 },
    std::pair{ "grrg"_h, &UInt32x4Type },
    std::pair{ "grrr"_h, &UInt32x4Type },
    std::pair{ "grgg"_h, &UInt32x4Type },
    std::pair{ "grgr"_h, &UInt32x4Type },
    std::pair{ "rrgg"_h, &UInt32x4Type },
    std::pair{ "rrgr"_h, &UInt32x4Type },
    std::pair{ "rrrr"_h, &UInt32x4Type },
    std::pair{ "rrrg"_h, &UInt32x4Type }
    };

UInt32x2::UInt32x2()
{
    this->name = "u32x2"_c;
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    /// operator[] with Int32
    UInt32x2_operator_index_Int32_arg.name = "arg"_c;
    UInt32x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x2_operator_index_Int32.name = UInt32x2_operator_index_Int32_name;
    UInt32x2_operator_index_Int32.backendIndex = 264;
    UInt32x2_operator_index_Int32.returnType = Type::FullType { UInt32Type.name };
    UInt32x2_operator_index_Int32.parameters = UInt32x2_operator_index_Int32_args;
    Symbol::Resolved(&UInt32x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x2_operator_index_Int32)->signature = "operator[](i32) u32"_c;
    Symbol::Resolved(&UInt32x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt32
    UInt32x2_operator_index_UInt32_arg.name = "arg"_c;
    UInt32x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x2_operator_index_UInt32.name = UInt32x2_operator_index_UInt32_name;
    UInt32x2_operator_index_UInt32.backendIndex = 265;
    UInt32x2_operator_index_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32x2_operator_index_UInt32.parameters = UInt32x2_operator_index_UInt32_args;
    Symbol::Resolved(&UInt32x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x2_operator_index_UInt32)->signature = "operator[](u32) u32"_c;
    Symbol::Resolved(&UInt32x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with Int16
    UInt32x2_operator_index_Int16_arg.name = "arg"_c;
    UInt32x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt32x2_operator_index_Int16.name = UInt32x2_operator_index_Int16_name;
    UInt32x2_operator_index_Int16.backendIndex = 266;
    UInt32x2_operator_index_Int16.returnType = Type::FullType { UInt32Type.name };
    UInt32x2_operator_index_Int16.parameters = UInt32x2_operator_index_Int16_args;
    Symbol::Resolved(&UInt32x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x2_operator_index_Int16)->signature = "operator[](i16) u32"_c;
    Symbol::Resolved(&UInt32x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt16
    UInt32x2_operator_index_UInt16_arg.name = "arg"_c;
    UInt32x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt32x2_operator_index_UInt16.name = UInt32x2_operator_index_UInt16_name;
    UInt32x2_operator_index_UInt16.backendIndex = 267;
    UInt32x2_operator_index_UInt16.returnType = Type::FullType { UInt32Type.name };
    UInt32x2_operator_index_UInt16.parameters = UInt32x2_operator_index_UInt16_args;
    Symbol::Resolved(&UInt32x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x2_operator_index_UInt16)->signature = "operator[](u16) u32"_c;
    Symbol::Resolved(&UInt32x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    /// operator+ with UInt32x2
    UInt32x2_operator_add_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_add_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_add_UInt32x2.name = UInt32x2_operator_add_UInt32x2_name;
    UInt32x2_operator_add_UInt32x2.backendIndex = 268;
    UInt32x2_operator_add_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_add_UInt32x2.parameters = UInt32x2_operator_add_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_add_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_add_UInt32x2)->signature = "operator+(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_add_UInt32x2)->name = "operator+(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_add_UInt32x2)->nameWithVarNames = "operator+(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_add_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator- with UInt32x2
    UInt32x2_operator_sub_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_sub_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_sub_UInt32x2.name = UInt32x2_operator_sub_UInt32x2_name;
    UInt32x2_operator_sub_UInt32x2.backendIndex = 269;
    UInt32x2_operator_sub_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_sub_UInt32x2.parameters = UInt32x2_operator_sub_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_sub_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_sub_UInt32x2)->signature = "operator-(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_sub_UInt32x2)->name = "operator-(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_sub_UInt32x2)->nameWithVarNames = "operator-(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_sub_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator* with UInt32x2
    UInt32x2_operator_mul_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_mul_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_mul_UInt32x2.name = UInt32x2_operator_mul_UInt32x2_name;
    UInt32x2_operator_mul_UInt32x2.backendIndex = 270;
    UInt32x2_operator_mul_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_mul_UInt32x2.parameters = UInt32x2_operator_mul_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_mul_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_mul_UInt32x2)->signature = "operator*(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_mul_UInt32x2)->name = "operator*(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_mul_UInt32x2)->nameWithVarNames = "operator*(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_mul_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator/ with UInt32x2
    UInt32x2_operator_div_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_div_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_div_UInt32x2.name = UInt32x2_operator_div_UInt32x2_name;
    UInt32x2_operator_div_UInt32x2.backendIndex = 271;
    UInt32x2_operator_div_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_div_UInt32x2.parameters = UInt32x2_operator_div_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_div_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_div_UInt32x2)->signature = "operator/(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_div_UInt32x2)->name = "operator/(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_div_UInt32x2)->nameWithVarNames = "operator/(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_div_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator% with UInt32x2
    UInt32x2_operator_mod_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_mod_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_mod_UInt32x2.name = UInt32x2_operator_mod_UInt32x2_name;
    UInt32x2_operator_mod_UInt32x2.backendIndex = 272;
    UInt32x2_operator_mod_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_mod_UInt32x2.parameters = UInt32x2_operator_mod_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_mod_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_mod_UInt32x2)->signature = "operator%(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_mod_UInt32x2)->name = "operator%(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_mod_UInt32x2)->nameWithVarNames = "operator%(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_mod_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator+= with UInt32x2
    UInt32x2_operator_addasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_addasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_addasg_UInt32x2.name = UInt32x2_operator_addasg_UInt32x2_name;
    UInt32x2_operator_addasg_UInt32x2.backendIndex = 273;
    UInt32x2_operator_addasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_addasg_UInt32x2.parameters = UInt32x2_operator_addasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_addasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_addasg_UInt32x2)->signature = "operator+=(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_addasg_UInt32x2)->name = "operator+=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_addasg_UInt32x2)->nameWithVarNames = "operator+=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_addasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator-= with UInt32x2
    UInt32x2_operator_subasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_subasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_subasg_UInt32x2.name = UInt32x2_operator_subasg_UInt32x2_name;
    UInt32x2_operator_subasg_UInt32x2.backendIndex = 274;
    UInt32x2_operator_subasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_subasg_UInt32x2.parameters = UInt32x2_operator_subasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_subasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_subasg_UInt32x2)->signature = "operator-=(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_subasg_UInt32x2)->name = "operator-=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_subasg_UInt32x2)->nameWithVarNames = "operator-=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_subasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator*= with UInt32x2
    UInt32x2_operator_mulasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_mulasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_mulasg_UInt32x2.name = UInt32x2_operator_mulasg_UInt32x2_name;
    UInt32x2_operator_mulasg_UInt32x2.backendIndex = 275;
    UInt32x2_operator_mulasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_mulasg_UInt32x2.parameters = UInt32x2_operator_mulasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_mulasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_mulasg_UInt32x2)->signature = "operator*=(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_mulasg_UInt32x2)->name = "operator*=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_mulasg_UInt32x2)->nameWithVarNames = "operator*=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_mulasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator/= with UInt32x2
    UInt32x2_operator_divasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_divasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_divasg_UInt32x2.name = UInt32x2_operator_divasg_UInt32x2_name;
    UInt32x2_operator_divasg_UInt32x2.backendIndex = 276;
    UInt32x2_operator_divasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_divasg_UInt32x2.parameters = UInt32x2_operator_divasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_divasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_divasg_UInt32x2)->signature = "operator/=(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_divasg_UInt32x2)->name = "operator/=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_divasg_UInt32x2)->nameWithVarNames = "operator/=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_divasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator< with UInt32x2
    UInt32x2_operator_lt_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_lt_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_lt_UInt32x2.name = UInt32x2_operator_lt_UInt32x2_name;
    UInt32x2_operator_lt_UInt32x2.backendIndex = 277;
    UInt32x2_operator_lt_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt32x2_operator_lt_UInt32x2.parameters = UInt32x2_operator_lt_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_lt_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_lt_UInt32x2)->signature = "operator<(u32x2) b8x2"_c;
    Symbol::Resolved(&UInt32x2_operator_lt_UInt32x2)->name = "operator<(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lt_UInt32x2)->nameWithVarNames = "operator<(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lt_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator<= with UInt32x2
    UInt32x2_operator_lte_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_lte_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_lte_UInt32x2.name = UInt32x2_operator_lte_UInt32x2_name;
    UInt32x2_operator_lte_UInt32x2.backendIndex = 278;
    UInt32x2_operator_lte_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt32x2_operator_lte_UInt32x2.parameters = UInt32x2_operator_lte_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_lte_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_lte_UInt32x2)->signature = "operator<=(u32x2) b8x2"_c;
    Symbol::Resolved(&UInt32x2_operator_lte_UInt32x2)->name = "operator<=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lte_UInt32x2)->nameWithVarNames = "operator<=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lte_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator> with UInt32x2
    UInt32x2_operator_gt_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_gt_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_gt_UInt32x2.name = UInt32x2_operator_gt_UInt32x2_name;
    UInt32x2_operator_gt_UInt32x2.backendIndex = 279;
    UInt32x2_operator_gt_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt32x2_operator_gt_UInt32x2.parameters = UInt32x2_operator_gt_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_gt_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_gt_UInt32x2)->signature = "operator>(u32x2) b8x2"_c;
    Symbol::Resolved(&UInt32x2_operator_gt_UInt32x2)->name = "operator>(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_gt_UInt32x2)->nameWithVarNames = "operator>(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_gt_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator>= with UInt32x2
    UInt32x2_operator_gte_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_gte_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_gte_UInt32x2.name = UInt32x2_operator_gte_UInt32x2_name;
    UInt32x2_operator_gte_UInt32x2.backendIndex = 280;
    UInt32x2_operator_gte_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt32x2_operator_gte_UInt32x2.parameters = UInt32x2_operator_gte_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_gte_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_gte_UInt32x2)->signature = "operator>=(u32x2) b8x2"_c;
    Symbol::Resolved(&UInt32x2_operator_gte_UInt32x2)->name = "operator>=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_gte_UInt32x2)->nameWithVarNames = "operator>=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_gte_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator== with UInt32x2
    UInt32x2_operator_eq_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_eq_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_eq_UInt32x2.name = UInt32x2_operator_eq_UInt32x2_name;
    UInt32x2_operator_eq_UInt32x2.backendIndex = 281;
    UInt32x2_operator_eq_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt32x2_operator_eq_UInt32x2.parameters = UInt32x2_operator_eq_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_eq_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_eq_UInt32x2)->signature = "operator==(u32x2) b8x2"_c;
    Symbol::Resolved(&UInt32x2_operator_eq_UInt32x2)->name = "operator==(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_eq_UInt32x2)->nameWithVarNames = "operator==(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_eq_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator!= with UInt32x2
    UInt32x2_operator_neq_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_neq_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_neq_UInt32x2.name = UInt32x2_operator_neq_UInt32x2_name;
    UInt32x2_operator_neq_UInt32x2.backendIndex = 282;
    UInt32x2_operator_neq_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt32x2_operator_neq_UInt32x2.parameters = UInt32x2_operator_neq_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_neq_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_neq_UInt32x2)->signature = "operator!=(u32x2) b8x2"_c;
    Symbol::Resolved(&UInt32x2_operator_neq_UInt32x2)->name = "operator!=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_neq_UInt32x2)->nameWithVarNames = "operator!=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_neq_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator* with Float32
    UInt32x2_operator_scale_Float32_arg.name = "arg"_c;
    UInt32x2_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt32x2_operator_scale_Float32.name = UInt32x2_operator_scale_Float32_name;
    UInt32x2_operator_scale_Float32.backendIndex = 283;
    UInt32x2_operator_scale_Float32.returnType = Type::FullType { Float32x2Type.name };
    UInt32x2_operator_scale_Float32.parameters = UInt32x2_operator_scale_Float32_args;
    Symbol::Resolved(&UInt32x2_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x2_operator_scale_Float32)->signature = "operator*(f32) f32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_Float32)->returnTypeSymbol = &Float32x2Type;

    /// operator* with UInt32
    UInt32x2_operator_scale_UInt32_arg.name = "arg"_c;
    UInt32x2_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x2_operator_scale_UInt32.name = UInt32x2_operator_scale_UInt32_name;
    UInt32x2_operator_scale_UInt32.backendIndex = 284;
    UInt32x2_operator_scale_UInt32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_scale_UInt32.parameters = UInt32x2_operator_scale_UInt32_args;
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32)->signature = "operator*(u32) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32)->returnTypeSymbol = &UInt32x2Type;

    /// operator* with Int32
    UInt32x2_operator_scale_Int32_arg.name = "arg"_c;
    UInt32x2_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x2_operator_scale_Int32.name = UInt32x2_operator_scale_Int32_name;
    UInt32x2_operator_scale_Int32.backendIndex = 285;
    UInt32x2_operator_scale_Int32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_scale_Int32.parameters = UInt32x2_operator_scale_Int32_args;
    Symbol::Resolved(&UInt32x2_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x2_operator_scale_Int32)->signature = "operator*(i32) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_Int32)->returnTypeSymbol = &UInt32x2Type;

    /// operator| with UInt32x2
    UInt32x2_operator_or_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_or_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_or_UInt32x2.name = UInt32x2_operator_or_UInt32x2_name;
    UInt32x2_operator_or_UInt32x2.backendIndex = 286;
    UInt32x2_operator_or_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_or_UInt32x2.parameters = UInt32x2_operator_or_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_or_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_or_UInt32x2)->signature = "operator|(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_or_UInt32x2)->name = "operator|(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_or_UInt32x2)->nameWithVarNames = "operator|(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_or_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator& with UInt32x2
    UInt32x2_operator_and_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_and_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_and_UInt32x2.name = UInt32x2_operator_and_UInt32x2_name;
    UInt32x2_operator_and_UInt32x2.backendIndex = 287;
    UInt32x2_operator_and_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_and_UInt32x2.parameters = UInt32x2_operator_and_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_and_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_and_UInt32x2)->signature = "operator&(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_and_UInt32x2)->name = "operator&(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_and_UInt32x2)->nameWithVarNames = "operator&(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_and_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator^ with UInt32x2
    UInt32x2_operator_xor_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_xor_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_xor_UInt32x2.name = UInt32x2_operator_xor_UInt32x2_name;
    UInt32x2_operator_xor_UInt32x2.backendIndex = 288;
    UInt32x2_operator_xor_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_xor_UInt32x2.parameters = UInt32x2_operator_xor_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_xor_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_xor_UInt32x2)->signature = "operator^(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_xor_UInt32x2)->name = "operator^(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_xor_UInt32x2)->nameWithVarNames = "operator^(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_xor_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator<< with UInt32x2
    UInt32x2_operator_lsh_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_lsh_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_lsh_UInt32x2.name = UInt32x2_operator_lsh_UInt32x2_name;
    UInt32x2_operator_lsh_UInt32x2.backendIndex = 289;
    UInt32x2_operator_lsh_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_lsh_UInt32x2.parameters = UInt32x2_operator_lsh_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_lsh_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_lsh_UInt32x2)->signature = "operator<<(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_lsh_UInt32x2)->name = "operator<<(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lsh_UInt32x2)->nameWithVarNames = "operator<<(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lsh_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator>> with UInt32x2
    UInt32x2_operator_rsh_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_rsh_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_rsh_UInt32x2.name = UInt32x2_operator_rsh_UInt32x2_name;
    UInt32x2_operator_rsh_UInt32x2.backendIndex = 290;
    UInt32x2_operator_rsh_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_rsh_UInt32x2.parameters = UInt32x2_operator_rsh_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_rsh_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_rsh_UInt32x2)->signature = "operator>>(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_rsh_UInt32x2)->name = "operator>>(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_rsh_UInt32x2)->nameWithVarNames = "operator>>(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_rsh_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator|= with UInt32x2
    UInt32x2_operator_orasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_orasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_orasg_UInt32x2.name = UInt32x2_operator_orasg_UInt32x2_name;
    UInt32x2_operator_orasg_UInt32x2.backendIndex = 291;
    UInt32x2_operator_orasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_orasg_UInt32x2.parameters = UInt32x2_operator_orasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_orasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_orasg_UInt32x2)->signature = "operator|=(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_orasg_UInt32x2)->name = "operator|=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_orasg_UInt32x2)->nameWithVarNames = "operator|=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_orasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator&= with UInt32x2
    UInt32x2_operator_andasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_andasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_andasg_UInt32x2.name = UInt32x2_operator_andasg_UInt32x2_name;
    UInt32x2_operator_andasg_UInt32x2.backendIndex = 292;
    UInt32x2_operator_andasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_andasg_UInt32x2.parameters = UInt32x2_operator_andasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_andasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_andasg_UInt32x2)->signature = "operator&=(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_andasg_UInt32x2)->name = "operator&=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_andasg_UInt32x2)->nameWithVarNames = "operator&=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_andasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator^= with UInt32x2
    UInt32x2_operator_xorasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_xorasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_xorasg_UInt32x2.name = UInt32x2_operator_xorasg_UInt32x2_name;
    UInt32x2_operator_xorasg_UInt32x2.backendIndex = 293;
    UInt32x2_operator_xorasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_xorasg_UInt32x2.parameters = UInt32x2_operator_xorasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_xorasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_xorasg_UInt32x2)->signature = "operator^=(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_xorasg_UInt32x2)->name = "operator^=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_xorasg_UInt32x2)->nameWithVarNames = "operator^=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_xorasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator<<= with UInt32x2
    UInt32x2_operator_lshasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_lshasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_lshasg_UInt32x2.name = UInt32x2_operator_lshasg_UInt32x2_name;
    UInt32x2_operator_lshasg_UInt32x2.backendIndex = 294;
    UInt32x2_operator_lshasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_lshasg_UInt32x2.parameters = UInt32x2_operator_lshasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_lshasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_lshasg_UInt32x2)->signature = "operator<<=(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_lshasg_UInt32x2)->name = "operator<<=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lshasg_UInt32x2)->nameWithVarNames = "operator<<=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lshasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator>>= with UInt32x2
    UInt32x2_operator_rhsasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_rhsasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_rhsasg_UInt32x2.name = UInt32x2_operator_rhsasg_UInt32x2_name;
    UInt32x2_operator_rhsasg_UInt32x2.backendIndex = 295;
    UInt32x2_operator_rhsasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_rhsasg_UInt32x2.parameters = UInt32x2_operator_rhsasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_rhsasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_rhsasg_UInt32x2)->signature = "operator>>=(u32x2) u32x2"_c;
    Symbol::Resolved(&UInt32x2_operator_rhsasg_UInt32x2)->name = "operator>>=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_rhsasg_UInt32x2)->nameWithVarNames = "operator>>=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_rhsasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    this->scope.symbolLookup = UInt32x2_symbolLookup;
}
UInt32x2 UInt32x2Type;

/// operator[] with Int32
Variable Int32x2_operator_index_Int32_arg;
Function Int32x2_operator_index_Int32;
inline constexpr std::array Int32x2_operator_index_Int32_args = { &Int32x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int32x2_operator_index_UInt32_arg;
Function Int32x2_operator_index_UInt32;
inline constexpr std::array Int32x2_operator_index_UInt32_args = { &Int32x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int32x2_operator_index_Int16_arg;
Function Int32x2_operator_index_Int16;
inline constexpr std::array Int32x2_operator_index_Int16_args = { &Int32x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int32x2_operator_index_UInt16_arg;
Function Int32x2_operator_index_UInt16;
inline constexpr std::array Int32x2_operator_index_UInt16_args = { &Int32x2_operator_index_UInt16_arg };

/// operator+ with Int32x2
Variable Int32x2_operator_add_Int32x2_arg;
Function Int32x2_operator_add_Int32x2;
inline constexpr std::array Int32x2_operator_add_Int32x2_args = { &Int32x2_operator_add_Int32x2_arg };

/// operator- with Int32x2
Variable Int32x2_operator_sub_Int32x2_arg;
Function Int32x2_operator_sub_Int32x2;
inline constexpr std::array Int32x2_operator_sub_Int32x2_args = { &Int32x2_operator_sub_Int32x2_arg };

/// operator* with Int32x2
Variable Int32x2_operator_mul_Int32x2_arg;
Function Int32x2_operator_mul_Int32x2;
inline constexpr std::array Int32x2_operator_mul_Int32x2_args = { &Int32x2_operator_mul_Int32x2_arg };

/// operator/ with Int32x2
Variable Int32x2_operator_div_Int32x2_arg;
Function Int32x2_operator_div_Int32x2;
inline constexpr std::array Int32x2_operator_div_Int32x2_args = { &Int32x2_operator_div_Int32x2_arg };

/// operator% with Int32x2
Variable Int32x2_operator_mod_Int32x2_arg;
Function Int32x2_operator_mod_Int32x2;
inline constexpr std::array Int32x2_operator_mod_Int32x2_args = { &Int32x2_operator_mod_Int32x2_arg };

/// operator+= with Int32x2
Variable Int32x2_operator_addasg_Int32x2_arg;
Function Int32x2_operator_addasg_Int32x2;
inline constexpr std::array Int32x2_operator_addasg_Int32x2_args = { &Int32x2_operator_addasg_Int32x2_arg };

/// operator-= with Int32x2
Variable Int32x2_operator_subasg_Int32x2_arg;
Function Int32x2_operator_subasg_Int32x2;
inline constexpr std::array Int32x2_operator_subasg_Int32x2_args = { &Int32x2_operator_subasg_Int32x2_arg };

/// operator*= with Int32x2
Variable Int32x2_operator_mulasg_Int32x2_arg;
Function Int32x2_operator_mulasg_Int32x2;
inline constexpr std::array Int32x2_operator_mulasg_Int32x2_args = { &Int32x2_operator_mulasg_Int32x2_arg };

/// operator/= with Int32x2
Variable Int32x2_operator_divasg_Int32x2_arg;
Function Int32x2_operator_divasg_Int32x2;
inline constexpr std::array Int32x2_operator_divasg_Int32x2_args = { &Int32x2_operator_divasg_Int32x2_arg };

/// operator< with Int32x2
Variable Int32x2_operator_lt_Int32x2_arg;
Function Int32x2_operator_lt_Int32x2;
inline constexpr std::array Int32x2_operator_lt_Int32x2_args = { &Int32x2_operator_lt_Int32x2_arg };

/// operator<= with Int32x2
Variable Int32x2_operator_lte_Int32x2_arg;
Function Int32x2_operator_lte_Int32x2;
inline constexpr std::array Int32x2_operator_lte_Int32x2_args = { &Int32x2_operator_lte_Int32x2_arg };

/// operator> with Int32x2
Variable Int32x2_operator_gt_Int32x2_arg;
Function Int32x2_operator_gt_Int32x2;
inline constexpr std::array Int32x2_operator_gt_Int32x2_args = { &Int32x2_operator_gt_Int32x2_arg };

/// operator>= with Int32x2
Variable Int32x2_operator_gte_Int32x2_arg;
Function Int32x2_operator_gte_Int32x2;
inline constexpr std::array Int32x2_operator_gte_Int32x2_args = { &Int32x2_operator_gte_Int32x2_arg };

/// operator== with Int32x2
Variable Int32x2_operator_eq_Int32x2_arg;
Function Int32x2_operator_eq_Int32x2;
inline constexpr std::array Int32x2_operator_eq_Int32x2_args = { &Int32x2_operator_eq_Int32x2_arg };

/// operator!= with Int32x2
Variable Int32x2_operator_neq_Int32x2_arg;
Function Int32x2_operator_neq_Int32x2;
inline constexpr std::array Int32x2_operator_neq_Int32x2_args = { &Int32x2_operator_neq_Int32x2_arg };

/// operator* with Float32
Variable Int32x2_operator_scale_Float32_arg;
Function Int32x2_operator_scale_Float32;
inline constexpr std::array Int32x2_operator_scale_Float32_args = { &Int32x2_operator_scale_Float32_arg };

/// operator* with UInt32
Variable Int32x2_operator_scale_UInt32_arg;
Function Int32x2_operator_scale_UInt32;
inline constexpr std::array Int32x2_operator_scale_UInt32_args = { &Int32x2_operator_scale_UInt32_arg };

/// operator* with Int32
Variable Int32x2_operator_scale_Int32_arg;
Function Int32x2_operator_scale_Int32;
inline constexpr std::array Int32x2_operator_scale_Int32_args = { &Int32x2_operator_scale_Int32_arg };

/// operator| with Int32x2
Variable Int32x2_operator_or_Int32x2_arg;
Function Int32x2_operator_or_Int32x2;
inline constexpr std::array Int32x2_operator_or_Int32x2_args = { &Int32x2_operator_or_Int32x2_arg };

/// operator& with Int32x2
Variable Int32x2_operator_and_Int32x2_arg;
Function Int32x2_operator_and_Int32x2;
inline constexpr std::array Int32x2_operator_and_Int32x2_args = { &Int32x2_operator_and_Int32x2_arg };

/// operator^ with Int32x2
Variable Int32x2_operator_xor_Int32x2_arg;
Function Int32x2_operator_xor_Int32x2;
inline constexpr std::array Int32x2_operator_xor_Int32x2_args = { &Int32x2_operator_xor_Int32x2_arg };

/// operator<< with Int32x2
Variable Int32x2_operator_lsh_Int32x2_arg;
Function Int32x2_operator_lsh_Int32x2;
inline constexpr std::array Int32x2_operator_lsh_Int32x2_args = { &Int32x2_operator_lsh_Int32x2_arg };

/// operator>> with Int32x2
Variable Int32x2_operator_rsh_Int32x2_arg;
Function Int32x2_operator_rsh_Int32x2;
inline constexpr std::array Int32x2_operator_rsh_Int32x2_args = { &Int32x2_operator_rsh_Int32x2_arg };

/// operator|= with Int32x2
Variable Int32x2_operator_orasg_Int32x2_arg;
Function Int32x2_operator_orasg_Int32x2;
inline constexpr std::array Int32x2_operator_orasg_Int32x2_args = { &Int32x2_operator_orasg_Int32x2_arg };

/// operator&= with Int32x2
Variable Int32x2_operator_andasg_Int32x2_arg;
Function Int32x2_operator_andasg_Int32x2;
inline constexpr std::array Int32x2_operator_andasg_Int32x2_args = { &Int32x2_operator_andasg_Int32x2_arg };

/// operator^= with Int32x2
Variable Int32x2_operator_xorasg_Int32x2_arg;
Function Int32x2_operator_xorasg_Int32x2;
inline constexpr std::array Int32x2_operator_xorasg_Int32x2_args = { &Int32x2_operator_xorasg_Int32x2_arg };

/// operator<<= with Int32x2
Variable Int32x2_operator_lshasg_Int32x2_arg;
Function Int32x2_operator_lshasg_Int32x2;
inline constexpr std::array Int32x2_operator_lshasg_Int32x2_args = { &Int32x2_operator_lshasg_Int32x2_arg };

/// operator>>= with Int32x2
Variable Int32x2_operator_rhsasg_Int32x2_arg;
Function Int32x2_operator_rhsasg_Int32x2;
inline constexpr std::array Int32x2_operator_rhsasg_Int32x2_args = { &Int32x2_operator_rhsasg_Int32x2_arg };

static constexpr StaticMap<HashString, Symbol*, 124> Int32x2_symbolLookup = {
    std::pair{ "operator<<(i32x2)"_h, &Int32x2_operator_lsh_Int32x2 },
    std::pair{ "operator<<=(i32x2)"_h, &Int32x2_operator_lshasg_Int32x2 },
    std::pair{ "operator%(i32x2)"_h, &Int32x2_operator_mod_Int32x2 },
    std::pair{ "gg"_h, &Int32x2Type },
    std::pair{ "gr"_h, &Int32x2Type },
    std::pair{ "rr"_h, &Int32x2Type },
    std::pair{ "rg"_h, &Int32x2Type },
    std::pair{ "yx"_h, &Int32x2Type },
    std::pair{ "yy"_h, &Int32x2Type },
    std::pair{ "xy"_h, &Int32x2Type },
    std::pair{ "xx"_h, &Int32x2Type },
    std::pair{ "operator[](i16)"_h, &Int32x2_operator_index_Int16 },
    std::pair{ "operator|(i32x2)"_h, &Int32x2_operator_or_Int32x2 },
    std::pair{ "operator*(u32)"_h, &Int32x2_operator_scale_UInt32 },
    std::pair{ "operator/(i32x2)"_h, &Int32x2_operator_div_Int32x2 },
    std::pair{ "operator<=(i32x2)"_h, &Int32x2_operator_lte_Int32x2 },
    std::pair{ "operator^"_h, &Int32x2_operator_xor_Int32x2 },
    std::pair{ "operator|"_h, &Int32x2_operator_or_Int32x2 },
    std::pair{ "operator<"_h, &Int32x2_operator_lt_Int32x2 },
    std::pair{ "operator>"_h, &Int32x2_operator_gt_Int32x2 },
    std::pair{ "operator-"_h, &Int32x2_operator_sub_Int32x2 },
    std::pair{ "operator/"_h, &Int32x2_operator_div_Int32x2 },
    std::pair{ "operator+"_h, &Int32x2_operator_add_Int32x2 },
    std::pair{ "operator*"_h, &Int32x2_operator_mul_Int32x2 },
    std::pair{ "operator*"_h, &Int32x2_operator_scale_Float32 },
    std::pair{ "operator*"_h, &Int32x2_operator_scale_UInt32 },
    std::pair{ "operator*"_h, &Int32x2_operator_scale_Int32 },
    std::pair{ "operator%"_h, &Int32x2_operator_mod_Int32x2 },
    std::pair{ "operator&"_h, &Int32x2_operator_and_Int32x2 },
    std::pair{ "yxxx"_h, &Int32x4Type },
    std::pair{ "yxxy"_h, &Int32x4Type },
    std::pair{ "yxyy"_h, &Int32x4Type },
    std::pair{ "yxyx"_h, &Int32x4Type },
    std::pair{ "operator+(i32x2)"_h, &Int32x2_operator_add_Int32x2 },
    std::pair{ "xyxx"_h, &Int32x4Type },
    std::pair{ "xyxy"_h, &Int32x4Type },
    std::pair{ "xyyy"_h, &Int32x4Type },
    std::pair{ "xyyx"_h, &Int32x4Type },
    std::pair{ "ggrr"_h, &Int32x4Type },
    std::pair{ "ggrg"_h, &Int32x4Type },
    std::pair{ "gggr"_h, &Int32x4Type },
    std::pair{ "gggg"_h, &Int32x4Type },
    std::pair{ "yyyx"_h, &Int32x4Type },
    std::pair{ "yyyy"_h, &Int32x4Type },
    std::pair{ "yyxy"_h, &Int32x4Type },
    std::pair{ "yyxx"_h, &Int32x4Type },
    std::pair{ "operator!=(i32x2)"_h, &Int32x2_operator_neq_Int32x2 },
    std::pair{ "xxyx"_h, &Int32x4Type },
    std::pair{ "xxyy"_h, &Int32x4Type },
    std::pair{ "xxxy"_h, &Int32x4Type },
    std::pair{ "xxxx"_h, &Int32x4Type },
    std::pair{ "rgrg"_h, &Int32x4Type },
    std::pair{ "rgrr"_h, &Int32x4Type },
    std::pair{ "rggg"_h, &Int32x4Type },
    std::pair{ "rggr"_h, &Int32x4Type },
    std::pair{ "operator*=(i32x2)"_h, &Int32x2_operator_mulasg_Int32x2 },
    std::pair{ "operator|=(i32x2)"_h, &Int32x2_operator_orasg_Int32x2 },
    std::pair{ "operator^=(i32x2)"_h, &Int32x2_operator_xorasg_Int32x2 },
    std::pair{ "operator^(i32x2)"_h, &Int32x2_operator_xor_Int32x2 },
    std::pair{ "operator<(i32x2)"_h, &Int32x2_operator_lt_Int32x2 },
    std::pair{ "operator*(i32x2)"_h, &Int32x2_operator_mul_Int32x2 },
    std::pair{ "operator+=(i32x2)"_h, &Int32x2_operator_addasg_Int32x2 },
    std::pair{ "operator-(i32x2)"_h, &Int32x2_operator_sub_Int32x2 },
    std::pair{ "operator==(i32x2)"_h, &Int32x2_operator_eq_Int32x2 },
    std::pair{ "rrg"_h, &Int32x3Type },
    std::pair{ "rrr"_h, &Int32x3Type },
    std::pair{ "rgr"_h, &Int32x3Type },
    std::pair{ "rgg"_h, &Int32x3Type },
    std::pair{ "operator[](u32)"_h, &Int32x2_operator_index_UInt32 },
    std::pair{ "operator<<="_h, &Int32x2_operator_lshasg_Int32x2 },
    std::pair{ "operator*(f32)"_h, &Int32x2_operator_scale_Float32 },
    std::pair{ "operator[](u16)"_h, &Int32x2_operator_index_UInt16 },
    std::pair{ "operator>>="_h, &Int32x2_operator_rhsasg_Int32x2 },
    std::pair{ "operator&=(i32x2)"_h, &Int32x2_operator_andasg_Int32x2 },
    std::pair{ "g"_h, &Int32Type },
    std::pair{ "r"_h, &Int32Type },
    std::pair{ "y"_h, &Int32Type },
    std::pair{ "x"_h, &Int32Type },
    std::pair{ "operator*(i32)"_h, &Int32x2_operator_scale_Int32 },
    std::pair{ "yxx"_h, &Int32x3Type },
    std::pair{ "yxy"_h, &Int32x3Type },
    std::pair{ "yyy"_h, &Int32x3Type },
    std::pair{ "yyx"_h, &Int32x3Type },
    std::pair{ "xyx"_h, &Int32x3Type },
    std::pair{ "xyy"_h, &Int32x3Type },
    std::pair{ "xxy"_h, &Int32x3Type },
    std::pair{ "xxx"_h, &Int32x3Type },
    std::pair{ "operator-=(i32x2)"_h, &Int32x2_operator_subasg_Int32x2 },
    std::pair{ "operator>=(i32x2)"_h, &Int32x2_operator_gte_Int32x2 },
    std::pair{ "ggr"_h, &Int32x3Type },
    std::pair{ "ggg"_h, &Int32x3Type },
    std::pair{ "grr"_h, &Int32x3Type },
    std::pair{ "grg"_h, &Int32x3Type },
    std::pair{ "operator&(i32x2)"_h, &Int32x2_operator_and_Int32x2 },
    std::pair{ "operator>>(i32x2)"_h, &Int32x2_operator_rsh_Int32x2 },
    std::pair{ "operator>(i32x2)"_h, &Int32x2_operator_gt_Int32x2 },
    std::pair{ "operator^="_h, &Int32x2_operator_xorasg_Int32x2 },
    std::pair{ "operator[]"_h, &Int32x2_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Int32x2_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Int32x2_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Int32x2_operator_index_UInt16 },
    std::pair{ "operator|="_h, &Int32x2_operator_orasg_Int32x2 },
    std::pair{ "operator=="_h, &Int32x2_operator_eq_Int32x2 },
    std::pair{ "operator<="_h, &Int32x2_operator_lte_Int32x2 },
    std::pair{ "operator<<"_h, &Int32x2_operator_lsh_Int32x2 },
    std::pair{ "operator>="_h, &Int32x2_operator_gte_Int32x2 },
    std::pair{ "operator>>"_h, &Int32x2_operator_rsh_Int32x2 },
    std::pair{ "operator-="_h, &Int32x2_operator_subasg_Int32x2 },
    std::pair{ "operator/="_h, &Int32x2_operator_divasg_Int32x2 },
    std::pair{ "operator+="_h, &Int32x2_operator_addasg_Int32x2 },
    std::pair{ "operator*="_h, &Int32x2_operator_mulasg_Int32x2 },
    std::pair{ "operator&="_h, &Int32x2_operator_andasg_Int32x2 },
    std::pair{ "operator!="_h, &Int32x2_operator_neq_Int32x2 },
    std::pair{ "operator/=(i32x2)"_h, &Int32x2_operator_divasg_Int32x2 },
    std::pair{ "operator>>=(i32x2)"_h, &Int32x2_operator_rhsasg_Int32x2 },
    std::pair{ "operator[](i32)"_h, &Int32x2_operator_index_Int32 },
    std::pair{ "grrg"_h, &Int32x4Type },
    std::pair{ "grrr"_h, &Int32x4Type },
    std::pair{ "grgg"_h, &Int32x4Type },
    std::pair{ "grgr"_h, &Int32x4Type },
    std::pair{ "rrgg"_h, &Int32x4Type },
    std::pair{ "rrgr"_h, &Int32x4Type },
    std::pair{ "rrrr"_h, &Int32x4Type },
    std::pair{ "rrrg"_h, &Int32x4Type }
    };

Int32x2::Int32x2()
{
    this->name = "i32x2"_c;
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    /// operator[] with Int32
    Int32x2_operator_index_Int32_arg.name = "arg"_c;
    Int32x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x2_operator_index_Int32.name = Int32x2_operator_index_Int32_name;
    Int32x2_operator_index_Int32.backendIndex = 311;
    Int32x2_operator_index_Int32.returnType = Type::FullType { Int32Type.name };
    Int32x2_operator_index_Int32.parameters = Int32x2_operator_index_Int32_args;
    Symbol::Resolved(&Int32x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x2_operator_index_Int32)->signature = "operator[](i32) i32"_c;
    Symbol::Resolved(&Int32x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int32x2_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int32x2_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt32
    Int32x2_operator_index_UInt32_arg.name = "arg"_c;
    Int32x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x2_operator_index_UInt32.name = Int32x2_operator_index_UInt32_name;
    Int32x2_operator_index_UInt32.backendIndex = 312;
    Int32x2_operator_index_UInt32.returnType = Type::FullType { Int32Type.name };
    Int32x2_operator_index_UInt32.parameters = Int32x2_operator_index_UInt32_args;
    Symbol::Resolved(&Int32x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x2_operator_index_UInt32)->signature = "operator[](u32) i32"_c;
    Symbol::Resolved(&Int32x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int32x2_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int32x2_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    /// operator[] with Int16
    Int32x2_operator_index_Int16_arg.name = "arg"_c;
    Int32x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int32x2_operator_index_Int16.name = Int32x2_operator_index_Int16_name;
    Int32x2_operator_index_Int16.backendIndex = 313;
    Int32x2_operator_index_Int16.returnType = Type::FullType { Int32Type.name };
    Int32x2_operator_index_Int16.parameters = Int32x2_operator_index_Int16_args;
    Symbol::Resolved(&Int32x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x2_operator_index_Int16)->signature = "operator[](i16) i32"_c;
    Symbol::Resolved(&Int32x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int32x2_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int32x2_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt16
    Int32x2_operator_index_UInt16_arg.name = "arg"_c;
    Int32x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int32x2_operator_index_UInt16.name = Int32x2_operator_index_UInt16_name;
    Int32x2_operator_index_UInt16.backendIndex = 314;
    Int32x2_operator_index_UInt16.returnType = Type::FullType { Int32Type.name };
    Int32x2_operator_index_UInt16.parameters = Int32x2_operator_index_UInt16_args;
    Symbol::Resolved(&Int32x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x2_operator_index_UInt16)->signature = "operator[](u16) i32"_c;
    Symbol::Resolved(&Int32x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int32x2_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int32x2_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    /// operator+ with Int32x2
    Int32x2_operator_add_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_add_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_add_Int32x2.name = Int32x2_operator_add_Int32x2_name;
    Int32x2_operator_add_Int32x2.backendIndex = 315;
    Int32x2_operator_add_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_add_Int32x2.parameters = Int32x2_operator_add_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_add_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_add_Int32x2)->signature = "operator+(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_add_Int32x2)->name = "operator+(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_add_Int32x2)->nameWithVarNames = "operator+(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_add_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator- with Int32x2
    Int32x2_operator_sub_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_sub_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_sub_Int32x2.name = Int32x2_operator_sub_Int32x2_name;
    Int32x2_operator_sub_Int32x2.backendIndex = 316;
    Int32x2_operator_sub_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_sub_Int32x2.parameters = Int32x2_operator_sub_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_sub_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_sub_Int32x2)->signature = "operator-(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_sub_Int32x2)->name = "operator-(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_sub_Int32x2)->nameWithVarNames = "operator-(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_sub_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator* with Int32x2
    Int32x2_operator_mul_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_mul_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_mul_Int32x2.name = Int32x2_operator_mul_Int32x2_name;
    Int32x2_operator_mul_Int32x2.backendIndex = 317;
    Int32x2_operator_mul_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_mul_Int32x2.parameters = Int32x2_operator_mul_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_mul_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_mul_Int32x2)->signature = "operator*(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_mul_Int32x2)->name = "operator*(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_mul_Int32x2)->nameWithVarNames = "operator*(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_mul_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator/ with Int32x2
    Int32x2_operator_div_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_div_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_div_Int32x2.name = Int32x2_operator_div_Int32x2_name;
    Int32x2_operator_div_Int32x2.backendIndex = 318;
    Int32x2_operator_div_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_div_Int32x2.parameters = Int32x2_operator_div_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_div_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_div_Int32x2)->signature = "operator/(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_div_Int32x2)->name = "operator/(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_div_Int32x2)->nameWithVarNames = "operator/(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_div_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator% with Int32x2
    Int32x2_operator_mod_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_mod_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_mod_Int32x2.name = Int32x2_operator_mod_Int32x2_name;
    Int32x2_operator_mod_Int32x2.backendIndex = 319;
    Int32x2_operator_mod_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_mod_Int32x2.parameters = Int32x2_operator_mod_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_mod_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_mod_Int32x2)->signature = "operator%(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_mod_Int32x2)->name = "operator%(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_mod_Int32x2)->nameWithVarNames = "operator%(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_mod_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator+= with Int32x2
    Int32x2_operator_addasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_addasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_addasg_Int32x2.name = Int32x2_operator_addasg_Int32x2_name;
    Int32x2_operator_addasg_Int32x2.backendIndex = 320;
    Int32x2_operator_addasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_addasg_Int32x2.parameters = Int32x2_operator_addasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_addasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_addasg_Int32x2)->signature = "operator+=(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_addasg_Int32x2)->name = "operator+=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_addasg_Int32x2)->nameWithVarNames = "operator+=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_addasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator-= with Int32x2
    Int32x2_operator_subasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_subasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_subasg_Int32x2.name = Int32x2_operator_subasg_Int32x2_name;
    Int32x2_operator_subasg_Int32x2.backendIndex = 321;
    Int32x2_operator_subasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_subasg_Int32x2.parameters = Int32x2_operator_subasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_subasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_subasg_Int32x2)->signature = "operator-=(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_subasg_Int32x2)->name = "operator-=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_subasg_Int32x2)->nameWithVarNames = "operator-=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_subasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator*= with Int32x2
    Int32x2_operator_mulasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_mulasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_mulasg_Int32x2.name = Int32x2_operator_mulasg_Int32x2_name;
    Int32x2_operator_mulasg_Int32x2.backendIndex = 322;
    Int32x2_operator_mulasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_mulasg_Int32x2.parameters = Int32x2_operator_mulasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_mulasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_mulasg_Int32x2)->signature = "operator*=(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_mulasg_Int32x2)->name = "operator*=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_mulasg_Int32x2)->nameWithVarNames = "operator*=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_mulasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator/= with Int32x2
    Int32x2_operator_divasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_divasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_divasg_Int32x2.name = Int32x2_operator_divasg_Int32x2_name;
    Int32x2_operator_divasg_Int32x2.backendIndex = 323;
    Int32x2_operator_divasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_divasg_Int32x2.parameters = Int32x2_operator_divasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_divasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_divasg_Int32x2)->signature = "operator/=(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_divasg_Int32x2)->name = "operator/=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_divasg_Int32x2)->nameWithVarNames = "operator/=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_divasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator< with Int32x2
    Int32x2_operator_lt_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_lt_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_lt_Int32x2.name = Int32x2_operator_lt_Int32x2_name;
    Int32x2_operator_lt_Int32x2.backendIndex = 324;
    Int32x2_operator_lt_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Int32x2_operator_lt_Int32x2.parameters = Int32x2_operator_lt_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_lt_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_lt_Int32x2)->signature = "operator<(i32x2) b8x2"_c;
    Symbol::Resolved(&Int32x2_operator_lt_Int32x2)->name = "operator<(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lt_Int32x2)->nameWithVarNames = "operator<(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lt_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator<= with Int32x2
    Int32x2_operator_lte_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_lte_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_lte_Int32x2.name = Int32x2_operator_lte_Int32x2_name;
    Int32x2_operator_lte_Int32x2.backendIndex = 325;
    Int32x2_operator_lte_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Int32x2_operator_lte_Int32x2.parameters = Int32x2_operator_lte_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_lte_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_lte_Int32x2)->signature = "operator<=(i32x2) b8x2"_c;
    Symbol::Resolved(&Int32x2_operator_lte_Int32x2)->name = "operator<=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lte_Int32x2)->nameWithVarNames = "operator<=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lte_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator> with Int32x2
    Int32x2_operator_gt_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_gt_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_gt_Int32x2.name = Int32x2_operator_gt_Int32x2_name;
    Int32x2_operator_gt_Int32x2.backendIndex = 326;
    Int32x2_operator_gt_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Int32x2_operator_gt_Int32x2.parameters = Int32x2_operator_gt_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_gt_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_gt_Int32x2)->signature = "operator>(i32x2) b8x2"_c;
    Symbol::Resolved(&Int32x2_operator_gt_Int32x2)->name = "operator>(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_gt_Int32x2)->nameWithVarNames = "operator>(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_gt_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator>= with Int32x2
    Int32x2_operator_gte_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_gte_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_gte_Int32x2.name = Int32x2_operator_gte_Int32x2_name;
    Int32x2_operator_gte_Int32x2.backendIndex = 327;
    Int32x2_operator_gte_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Int32x2_operator_gte_Int32x2.parameters = Int32x2_operator_gte_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_gte_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_gte_Int32x2)->signature = "operator>=(i32x2) b8x2"_c;
    Symbol::Resolved(&Int32x2_operator_gte_Int32x2)->name = "operator>=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_gte_Int32x2)->nameWithVarNames = "operator>=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_gte_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator== with Int32x2
    Int32x2_operator_eq_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_eq_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_eq_Int32x2.name = Int32x2_operator_eq_Int32x2_name;
    Int32x2_operator_eq_Int32x2.backendIndex = 328;
    Int32x2_operator_eq_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Int32x2_operator_eq_Int32x2.parameters = Int32x2_operator_eq_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_eq_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_eq_Int32x2)->signature = "operator==(i32x2) b8x2"_c;
    Symbol::Resolved(&Int32x2_operator_eq_Int32x2)->name = "operator==(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_eq_Int32x2)->nameWithVarNames = "operator==(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_eq_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator!= with Int32x2
    Int32x2_operator_neq_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_neq_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_neq_Int32x2.name = Int32x2_operator_neq_Int32x2_name;
    Int32x2_operator_neq_Int32x2.backendIndex = 329;
    Int32x2_operator_neq_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Int32x2_operator_neq_Int32x2.parameters = Int32x2_operator_neq_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_neq_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_neq_Int32x2)->signature = "operator!=(i32x2) b8x2"_c;
    Symbol::Resolved(&Int32x2_operator_neq_Int32x2)->name = "operator!=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_neq_Int32x2)->nameWithVarNames = "operator!=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_neq_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator* with Float32
    Int32x2_operator_scale_Float32_arg.name = "arg"_c;
    Int32x2_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int32x2_operator_scale_Float32.name = Int32x2_operator_scale_Float32_name;
    Int32x2_operator_scale_Float32.backendIndex = 330;
    Int32x2_operator_scale_Float32.returnType = Type::FullType { Float32x2Type.name };
    Int32x2_operator_scale_Float32.parameters = Int32x2_operator_scale_Float32_args;
    Symbol::Resolved(&Int32x2_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x2_operator_scale_Float32)->signature = "operator*(f32) f32x2"_c;
    Symbol::Resolved(&Int32x2_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Int32x2_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Int32x2_operator_scale_Float32)->returnTypeSymbol = &Float32x2Type;

    /// operator* with UInt32
    Int32x2_operator_scale_UInt32_arg.name = "arg"_c;
    Int32x2_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x2_operator_scale_UInt32.name = Int32x2_operator_scale_UInt32_name;
    Int32x2_operator_scale_UInt32.backendIndex = 331;
    Int32x2_operator_scale_UInt32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_scale_UInt32.parameters = Int32x2_operator_scale_UInt32_args;
    Symbol::Resolved(&Int32x2_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x2_operator_scale_UInt32)->signature = "operator*(u32) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&Int32x2_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&Int32x2_operator_scale_UInt32)->returnTypeSymbol = &Int32x2Type;

    /// operator* with Int32
    Int32x2_operator_scale_Int32_arg.name = "arg"_c;
    Int32x2_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x2_operator_scale_Int32.name = Int32x2_operator_scale_Int32_name;
    Int32x2_operator_scale_Int32.backendIndex = 332;
    Int32x2_operator_scale_Int32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_scale_Int32.parameters = Int32x2_operator_scale_Int32_args;
    Symbol::Resolved(&Int32x2_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x2_operator_scale_Int32)->signature = "operator*(i32) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&Int32x2_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&Int32x2_operator_scale_Int32)->returnTypeSymbol = &Int32x2Type;

    /// operator| with Int32x2
    Int32x2_operator_or_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_or_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_or_Int32x2.name = Int32x2_operator_or_Int32x2_name;
    Int32x2_operator_or_Int32x2.backendIndex = 333;
    Int32x2_operator_or_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_or_Int32x2.parameters = Int32x2_operator_or_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_or_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_or_Int32x2)->signature = "operator|(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_or_Int32x2)->name = "operator|(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_or_Int32x2)->nameWithVarNames = "operator|(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_or_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator& with Int32x2
    Int32x2_operator_and_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_and_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_and_Int32x2.name = Int32x2_operator_and_Int32x2_name;
    Int32x2_operator_and_Int32x2.backendIndex = 334;
    Int32x2_operator_and_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_and_Int32x2.parameters = Int32x2_operator_and_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_and_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_and_Int32x2)->signature = "operator&(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_and_Int32x2)->name = "operator&(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_and_Int32x2)->nameWithVarNames = "operator&(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_and_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator^ with Int32x2
    Int32x2_operator_xor_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_xor_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_xor_Int32x2.name = Int32x2_operator_xor_Int32x2_name;
    Int32x2_operator_xor_Int32x2.backendIndex = 335;
    Int32x2_operator_xor_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_xor_Int32x2.parameters = Int32x2_operator_xor_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_xor_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_xor_Int32x2)->signature = "operator^(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_xor_Int32x2)->name = "operator^(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_xor_Int32x2)->nameWithVarNames = "operator^(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_xor_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator<< with Int32x2
    Int32x2_operator_lsh_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_lsh_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_lsh_Int32x2.name = Int32x2_operator_lsh_Int32x2_name;
    Int32x2_operator_lsh_Int32x2.backendIndex = 336;
    Int32x2_operator_lsh_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_lsh_Int32x2.parameters = Int32x2_operator_lsh_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_lsh_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_lsh_Int32x2)->signature = "operator<<(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_lsh_Int32x2)->name = "operator<<(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lsh_Int32x2)->nameWithVarNames = "operator<<(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lsh_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator>> with Int32x2
    Int32x2_operator_rsh_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_rsh_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_rsh_Int32x2.name = Int32x2_operator_rsh_Int32x2_name;
    Int32x2_operator_rsh_Int32x2.backendIndex = 337;
    Int32x2_operator_rsh_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_rsh_Int32x2.parameters = Int32x2_operator_rsh_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_rsh_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_rsh_Int32x2)->signature = "operator>>(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_rsh_Int32x2)->name = "operator>>(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_rsh_Int32x2)->nameWithVarNames = "operator>>(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_rsh_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator|= with Int32x2
    Int32x2_operator_orasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_orasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_orasg_Int32x2.name = Int32x2_operator_orasg_Int32x2_name;
    Int32x2_operator_orasg_Int32x2.backendIndex = 338;
    Int32x2_operator_orasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_orasg_Int32x2.parameters = Int32x2_operator_orasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_orasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_orasg_Int32x2)->signature = "operator|=(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_orasg_Int32x2)->name = "operator|=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_orasg_Int32x2)->nameWithVarNames = "operator|=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_orasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator&= with Int32x2
    Int32x2_operator_andasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_andasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_andasg_Int32x2.name = Int32x2_operator_andasg_Int32x2_name;
    Int32x2_operator_andasg_Int32x2.backendIndex = 339;
    Int32x2_operator_andasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_andasg_Int32x2.parameters = Int32x2_operator_andasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_andasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_andasg_Int32x2)->signature = "operator&=(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_andasg_Int32x2)->name = "operator&=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_andasg_Int32x2)->nameWithVarNames = "operator&=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_andasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator^= with Int32x2
    Int32x2_operator_xorasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_xorasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_xorasg_Int32x2.name = Int32x2_operator_xorasg_Int32x2_name;
    Int32x2_operator_xorasg_Int32x2.backendIndex = 340;
    Int32x2_operator_xorasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_xorasg_Int32x2.parameters = Int32x2_operator_xorasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_xorasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_xorasg_Int32x2)->signature = "operator^=(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_xorasg_Int32x2)->name = "operator^=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_xorasg_Int32x2)->nameWithVarNames = "operator^=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_xorasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator<<= with Int32x2
    Int32x2_operator_lshasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_lshasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_lshasg_Int32x2.name = Int32x2_operator_lshasg_Int32x2_name;
    Int32x2_operator_lshasg_Int32x2.backendIndex = 341;
    Int32x2_operator_lshasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_lshasg_Int32x2.parameters = Int32x2_operator_lshasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_lshasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_lshasg_Int32x2)->signature = "operator<<=(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_lshasg_Int32x2)->name = "operator<<=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lshasg_Int32x2)->nameWithVarNames = "operator<<=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lshasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator>>= with Int32x2
    Int32x2_operator_rhsasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_rhsasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_rhsasg_Int32x2.name = Int32x2_operator_rhsasg_Int32x2_name;
    Int32x2_operator_rhsasg_Int32x2.backendIndex = 342;
    Int32x2_operator_rhsasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_rhsasg_Int32x2.parameters = Int32x2_operator_rhsasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_rhsasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_rhsasg_Int32x2)->signature = "operator>>=(i32x2) i32x2"_c;
    Symbol::Resolved(&Int32x2_operator_rhsasg_Int32x2)->name = "operator>>=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_rhsasg_Int32x2)->nameWithVarNames = "operator>>=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_rhsasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    this->scope.symbolLookup = Int32x2_symbolLookup;
}
Int32x2 Int32x2Type;

/// operator[] with Int32
Variable Bool8x2_operator_index_Int32_arg;
Function Bool8x2_operator_index_Int32;
inline constexpr std::array Bool8x2_operator_index_Int32_args = { &Bool8x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Bool8x2_operator_index_UInt32_arg;
Function Bool8x2_operator_index_UInt32;
inline constexpr std::array Bool8x2_operator_index_UInt32_args = { &Bool8x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Bool8x2_operator_index_Int16_arg;
Function Bool8x2_operator_index_Int16;
inline constexpr std::array Bool8x2_operator_index_Int16_args = { &Bool8x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Bool8x2_operator_index_UInt16_arg;
Function Bool8x2_operator_index_UInt16;
inline constexpr std::array Bool8x2_operator_index_UInt16_args = { &Bool8x2_operator_index_UInt16_arg };

/// operator|| with Bool8x2
Variable Bool8x2_operator_oror_Bool8x2_arg;
Function Bool8x2_operator_oror_Bool8x2;
inline constexpr std::array Bool8x2_operator_oror_Bool8x2_args = { &Bool8x2_operator_oror_Bool8x2_arg };

/// operator&& with Bool8x2
Variable Bool8x2_operator_andand_Bool8x2_arg;
Function Bool8x2_operator_andand_Bool8x2;
inline constexpr std::array Bool8x2_operator_andand_Bool8x2_args = { &Bool8x2_operator_andand_Bool8x2_arg };

/// operator== with Bool8x2
Variable Bool8x2_operator_eq_Bool8x2_arg;
Function Bool8x2_operator_eq_Bool8x2;
inline constexpr std::array Bool8x2_operator_eq_Bool8x2_args = { &Bool8x2_operator_eq_Bool8x2_arg };

/// operator!= with Bool8x2
Variable Bool8x2_operator_neq_Bool8x2_arg;
Function Bool8x2_operator_neq_Bool8x2;
inline constexpr std::array Bool8x2_operator_neq_Bool8x2_args = { &Bool8x2_operator_neq_Bool8x2_arg };

static constexpr StaticMap<HashString, Symbol*, 76> Bool8x2_symbolLookup = {
    std::pair{ "gg"_h, &Bool8x2Type },
    std::pair{ "gr"_h, &Bool8x2Type },
    std::pair{ "rr"_h, &Bool8x2Type },
    std::pair{ "rg"_h, &Bool8x2Type },
    std::pair{ "yx"_h, &Bool8x2Type },
    std::pair{ "yy"_h, &Bool8x2Type },
    std::pair{ "xy"_h, &Bool8x2Type },
    std::pair{ "xx"_h, &Bool8x2Type },
    std::pair{ "operator[](i16)"_h, &Bool8x2_operator_index_Int16 },
    std::pair{ "yxxx"_h, &Bool8x4Type },
    std::pair{ "yxxy"_h, &Bool8x4Type },
    std::pair{ "yxyy"_h, &Bool8x4Type },
    std::pair{ "yxyx"_h, &Bool8x4Type },
    std::pair{ "xyxx"_h, &Bool8x4Type },
    std::pair{ "xyxy"_h, &Bool8x4Type },
    std::pair{ "xyyy"_h, &Bool8x4Type },
    std::pair{ "xyyx"_h, &Bool8x4Type },
    std::pair{ "ggrr"_h, &Bool8x4Type },
    std::pair{ "ggrg"_h, &Bool8x4Type },
    std::pair{ "gggr"_h, &Bool8x4Type },
    std::pair{ "gggg"_h, &Bool8x4Type },
    std::pair{ "yyyx"_h, &Bool8x4Type },
    std::pair{ "yyyy"_h, &Bool8x4Type },
    std::pair{ "yyxy"_h, &Bool8x4Type },
    std::pair{ "yyxx"_h, &Bool8x4Type },
    std::pair{ "xxyx"_h, &Bool8x4Type },
    std::pair{ "xxyy"_h, &Bool8x4Type },
    std::pair{ "xxxy"_h, &Bool8x4Type },
    std::pair{ "xxxx"_h, &Bool8x4Type },
    std::pair{ "rgrg"_h, &Bool8x4Type },
    std::pair{ "rgrr"_h, &Bool8x4Type },
    std::pair{ "rggg"_h, &Bool8x4Type },
    std::pair{ "rggr"_h, &Bool8x4Type },
    std::pair{ "operator&&(b8x2)"_h, &Bool8x2_operator_andand_Bool8x2 },
    std::pair{ "operator==(b8x2)"_h, &Bool8x2_operator_eq_Bool8x2 },
    std::pair{ "rrg"_h, &Bool8x3Type },
    std::pair{ "rrr"_h, &Bool8x3Type },
    std::pair{ "rgr"_h, &Bool8x3Type },
    std::pair{ "rgg"_h, &Bool8x3Type },
    std::pair{ "operator[](u32)"_h, &Bool8x2_operator_index_UInt32 },
    std::pair{ "operator[](u16)"_h, &Bool8x2_operator_index_UInt16 },
    std::pair{ "g"_h, &Bool8Type },
    std::pair{ "r"_h, &Bool8Type },
    std::pair{ "y"_h, &Bool8Type },
    std::pair{ "x"_h, &Bool8Type },
    std::pair{ "yxx"_h, &Bool8x3Type },
    std::pair{ "yxy"_h, &Bool8x3Type },
    std::pair{ "yyy"_h, &Bool8x3Type },
    std::pair{ "yyx"_h, &Bool8x3Type },
    std::pair{ "xyx"_h, &Bool8x3Type },
    std::pair{ "xyy"_h, &Bool8x3Type },
    std::pair{ "xxy"_h, &Bool8x3Type },
    std::pair{ "xxx"_h, &Bool8x3Type },
    std::pair{ "operator!=(b8x2)"_h, &Bool8x2_operator_neq_Bool8x2 },
    std::pair{ "ggr"_h, &Bool8x3Type },
    std::pair{ "ggg"_h, &Bool8x3Type },
    std::pair{ "grr"_h, &Bool8x3Type },
    std::pair{ "grg"_h, &Bool8x3Type },
    std::pair{ "operator||(b8x2)"_h, &Bool8x2_operator_oror_Bool8x2 },
    std::pair{ "operator[]"_h, &Bool8x2_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Bool8x2_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Bool8x2_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Bool8x2_operator_index_UInt16 },
    std::pair{ "operator||"_h, &Bool8x2_operator_oror_Bool8x2 },
    std::pair{ "operator=="_h, &Bool8x2_operator_eq_Bool8x2 },
    std::pair{ "operator&&"_h, &Bool8x2_operator_andand_Bool8x2 },
    std::pair{ "operator!="_h, &Bool8x2_operator_neq_Bool8x2 },
    std::pair{ "operator[](i32)"_h, &Bool8x2_operator_index_Int32 },
    std::pair{ "grrg"_h, &Bool8x4Type },
    std::pair{ "grrr"_h, &Bool8x4Type },
    std::pair{ "grgg"_h, &Bool8x4Type },
    std::pair{ "grgr"_h, &Bool8x4Type },
    std::pair{ "rrgg"_h, &Bool8x4Type },
    std::pair{ "rrgr"_h, &Bool8x4Type },
    std::pair{ "rrrr"_h, &Bool8x4Type },
    std::pair{ "rrrg"_h, &Bool8x4Type }
    };

Bool8x2::Bool8x2()
{
    this->name = "b8x2"_c;
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    /// operator[] with Int32
    Bool8x2_operator_index_Int32_arg.name = "arg"_c;
    Bool8x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Bool8x2_operator_index_Int32.name = Bool8x2_operator_index_Int32_name;
    Bool8x2_operator_index_Int32.backendIndex = 354;
    Bool8x2_operator_index_Int32.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_index_Int32.parameters = Bool8x2_operator_index_Int32_args;
    Symbol::Resolved(&Bool8x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x2_operator_index_Int32)->signature = "operator[](i32) b8"_c;
    Symbol::Resolved(&Bool8x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt32
    Bool8x2_operator_index_UInt32_arg.name = "arg"_c;
    Bool8x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Bool8x2_operator_index_UInt32.name = Bool8x2_operator_index_UInt32_name;
    Bool8x2_operator_index_UInt32.backendIndex = 355;
    Bool8x2_operator_index_UInt32.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_index_UInt32.parameters = Bool8x2_operator_index_UInt32_args;
    Symbol::Resolved(&Bool8x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x2_operator_index_UInt32)->signature = "operator[](u32) b8"_c;
    Symbol::Resolved(&Bool8x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with Int16
    Bool8x2_operator_index_Int16_arg.name = "arg"_c;
    Bool8x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Bool8x2_operator_index_Int16.name = Bool8x2_operator_index_Int16_name;
    Bool8x2_operator_index_Int16.backendIndex = 356;
    Bool8x2_operator_index_Int16.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_index_Int16.parameters = Bool8x2_operator_index_Int16_args;
    Symbol::Resolved(&Bool8x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x2_operator_index_Int16)->signature = "operator[](i16) b8"_c;
    Symbol::Resolved(&Bool8x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt16
    Bool8x2_operator_index_UInt16_arg.name = "arg"_c;
    Bool8x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Bool8x2_operator_index_UInt16.name = Bool8x2_operator_index_UInt16_name;
    Bool8x2_operator_index_UInt16.backendIndex = 357;
    Bool8x2_operator_index_UInt16.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_index_UInt16.parameters = Bool8x2_operator_index_UInt16_args;
    Symbol::Resolved(&Bool8x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x2_operator_index_UInt16)->signature = "operator[](u16) b8"_c;
    Symbol::Resolved(&Bool8x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator|| with Bool8x2
    Bool8x2_operator_oror_Bool8x2_arg.name = "arg"_c;
    Bool8x2_operator_oror_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Bool8x2_operator_oror_Bool8x2.name = Bool8x2_operator_oror_Bool8x2_name;
    Bool8x2_operator_oror_Bool8x2.backendIndex = 358;
    Bool8x2_operator_oror_Bool8x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_operator_oror_Bool8x2.parameters = Bool8x2_operator_oror_Bool8x2_args;
    Symbol::Resolved(&Bool8x2_operator_oror_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x2_operator_oror_Bool8x2)->signature = "operator||(b8x2) b8x2"_c;
    Symbol::Resolved(&Bool8x2_operator_oror_Bool8x2)->name = "operator||(b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_oror_Bool8x2)->nameWithVarNames = "operator||(arg : b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_oror_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator&& with Bool8x2
    Bool8x2_operator_andand_Bool8x2_arg.name = "arg"_c;
    Bool8x2_operator_andand_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Bool8x2_operator_andand_Bool8x2.name = Bool8x2_operator_andand_Bool8x2_name;
    Bool8x2_operator_andand_Bool8x2.backendIndex = 359;
    Bool8x2_operator_andand_Bool8x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_operator_andand_Bool8x2.parameters = Bool8x2_operator_andand_Bool8x2_args;
    Symbol::Resolved(&Bool8x2_operator_andand_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x2_operator_andand_Bool8x2)->signature = "operator&&(b8x2) b8x2"_c;
    Symbol::Resolved(&Bool8x2_operator_andand_Bool8x2)->name = "operator&&(b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_andand_Bool8x2)->nameWithVarNames = "operator&&(arg : b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_andand_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator== with Bool8x2
    Bool8x2_operator_eq_Bool8x2_arg.name = "arg"_c;
    Bool8x2_operator_eq_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Bool8x2_operator_eq_Bool8x2.name = Bool8x2_operator_eq_Bool8x2_name;
    Bool8x2_operator_eq_Bool8x2.backendIndex = 360;
    Bool8x2_operator_eq_Bool8x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_operator_eq_Bool8x2.parameters = Bool8x2_operator_eq_Bool8x2_args;
    Symbol::Resolved(&Bool8x2_operator_eq_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x2_operator_eq_Bool8x2)->signature = "operator==(b8x2) b8x2"_c;
    Symbol::Resolved(&Bool8x2_operator_eq_Bool8x2)->name = "operator==(b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_eq_Bool8x2)->nameWithVarNames = "operator==(arg : b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_eq_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator!= with Bool8x2
    Bool8x2_operator_neq_Bool8x2_arg.name = "arg"_c;
    Bool8x2_operator_neq_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Bool8x2_operator_neq_Bool8x2.name = Bool8x2_operator_neq_Bool8x2_name;
    Bool8x2_operator_neq_Bool8x2.backendIndex = 361;
    Bool8x2_operator_neq_Bool8x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_operator_neq_Bool8x2.parameters = Bool8x2_operator_neq_Bool8x2_args;
    Symbol::Resolved(&Bool8x2_operator_neq_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x2_operator_neq_Bool8x2)->signature = "operator!=(b8x2) b8x2"_c;
    Symbol::Resolved(&Bool8x2_operator_neq_Bool8x2)->name = "operator!=(b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_neq_Bool8x2)->nameWithVarNames = "operator!=(arg : b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_neq_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    this->scope.symbolLookup = Bool8x2_symbolLookup;
}
Bool8x2 Bool8x2Type;

/// operator[] with Int32
Variable Float16x2_operator_index_Int32_arg;
Function Float16x2_operator_index_Int32;
inline constexpr std::array Float16x2_operator_index_Int32_args = { &Float16x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x2_operator_index_UInt32_arg;
Function Float16x2_operator_index_UInt32;
inline constexpr std::array Float16x2_operator_index_UInt32_args = { &Float16x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x2_operator_index_Int16_arg;
Function Float16x2_operator_index_Int16;
inline constexpr std::array Float16x2_operator_index_Int16_args = { &Float16x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x2_operator_index_UInt16_arg;
Function Float16x2_operator_index_UInt16;
inline constexpr std::array Float16x2_operator_index_UInt16_args = { &Float16x2_operator_index_UInt16_arg };

/// operator+ with Float16x2
Variable Float16x2_operator_add_Float16x2_arg;
Function Float16x2_operator_add_Float16x2;
inline constexpr std::array Float16x2_operator_add_Float16x2_args = { &Float16x2_operator_add_Float16x2_arg };

/// operator- with Float16x2
Variable Float16x2_operator_sub_Float16x2_arg;
Function Float16x2_operator_sub_Float16x2;
inline constexpr std::array Float16x2_operator_sub_Float16x2_args = { &Float16x2_operator_sub_Float16x2_arg };

/// operator* with Float16x2
Variable Float16x2_operator_mul_Float16x2_arg;
Function Float16x2_operator_mul_Float16x2;
inline constexpr std::array Float16x2_operator_mul_Float16x2_args = { &Float16x2_operator_mul_Float16x2_arg };

/// operator/ with Float16x2
Variable Float16x2_operator_div_Float16x2_arg;
Function Float16x2_operator_div_Float16x2;
inline constexpr std::array Float16x2_operator_div_Float16x2_args = { &Float16x2_operator_div_Float16x2_arg };

/// operator% with Float16x2
Variable Float16x2_operator_mod_Float16x2_arg;
Function Float16x2_operator_mod_Float16x2;
inline constexpr std::array Float16x2_operator_mod_Float16x2_args = { &Float16x2_operator_mod_Float16x2_arg };

/// operator+= with Float16x2
Variable Float16x2_operator_addasg_Float16x2_arg;
Function Float16x2_operator_addasg_Float16x2;
inline constexpr std::array Float16x2_operator_addasg_Float16x2_args = { &Float16x2_operator_addasg_Float16x2_arg };

/// operator-= with Float16x2
Variable Float16x2_operator_subasg_Float16x2_arg;
Function Float16x2_operator_subasg_Float16x2;
inline constexpr std::array Float16x2_operator_subasg_Float16x2_args = { &Float16x2_operator_subasg_Float16x2_arg };

/// operator*= with Float16x2
Variable Float16x2_operator_mulasg_Float16x2_arg;
Function Float16x2_operator_mulasg_Float16x2;
inline constexpr std::array Float16x2_operator_mulasg_Float16x2_args = { &Float16x2_operator_mulasg_Float16x2_arg };

/// operator/= with Float16x2
Variable Float16x2_operator_divasg_Float16x2_arg;
Function Float16x2_operator_divasg_Float16x2;
inline constexpr std::array Float16x2_operator_divasg_Float16x2_args = { &Float16x2_operator_divasg_Float16x2_arg };

/// operator< with Float16x2
Variable Float16x2_operator_lt_Float16x2_arg;
Function Float16x2_operator_lt_Float16x2;
inline constexpr std::array Float16x2_operator_lt_Float16x2_args = { &Float16x2_operator_lt_Float16x2_arg };

/// operator<= with Float16x2
Variable Float16x2_operator_lte_Float16x2_arg;
Function Float16x2_operator_lte_Float16x2;
inline constexpr std::array Float16x2_operator_lte_Float16x2_args = { &Float16x2_operator_lte_Float16x2_arg };

/// operator> with Float16x2
Variable Float16x2_operator_gt_Float16x2_arg;
Function Float16x2_operator_gt_Float16x2;
inline constexpr std::array Float16x2_operator_gt_Float16x2_args = { &Float16x2_operator_gt_Float16x2_arg };

/// operator>= with Float16x2
Variable Float16x2_operator_gte_Float16x2_arg;
Function Float16x2_operator_gte_Float16x2;
inline constexpr std::array Float16x2_operator_gte_Float16x2_args = { &Float16x2_operator_gte_Float16x2_arg };

/// operator== with Float16x2
Variable Float16x2_operator_eq_Float16x2_arg;
Function Float16x2_operator_eq_Float16x2;
inline constexpr std::array Float16x2_operator_eq_Float16x2_args = { &Float16x2_operator_eq_Float16x2_arg };

/// operator!= with Float16x2
Variable Float16x2_operator_neq_Float16x2_arg;
Function Float16x2_operator_neq_Float16x2;
inline constexpr std::array Float16x2_operator_neq_Float16x2_args = { &Float16x2_operator_neq_Float16x2_arg };

/// operator* with Float16
Variable Float16x2_operator_scale_Float16_arg;
Function Float16x2_operator_scale_Float16;
inline constexpr std::array Float16x2_operator_scale_Float16_args = { &Float16x2_operator_scale_Float16_arg };

/// operator* with UInt16
Variable Float16x2_operator_scale_UInt16_arg;
Function Float16x2_operator_scale_UInt16;
inline constexpr std::array Float16x2_operator_scale_UInt16_args = { &Float16x2_operator_scale_UInt16_arg };

/// operator* with Int16
Variable Float16x2_operator_scale_Int16_arg;
Function Float16x2_operator_scale_Int16;
inline constexpr std::array Float16x2_operator_scale_Int16_args = { &Float16x2_operator_scale_Int16_arg };

/// operator* with Float32x2x2
Variable Float16x2_operator_transform_Float32x2x2_arg;
Function Float16x2_operator_transform_Float32x2x2;
inline constexpr std::array Float16x2_operator_transform_Float32x2x2_args = { &Float16x2_operator_transform_Float32x2x2_arg };

/// operator* with Float32x2x3
Variable Float16x2_operator_transform_Float32x2x3_arg;
Function Float16x2_operator_transform_Float32x2x3;
inline constexpr std::array Float16x2_operator_transform_Float32x2x3_args = { &Float16x2_operator_transform_Float32x2x3_arg };

/// operator* with Float32x2x4
Variable Float16x2_operator_transform_Float32x2x4_arg;
Function Float16x2_operator_transform_Float32x2x4;
inline constexpr std::array Float16x2_operator_transform_Float32x2x4_args = { &Float16x2_operator_transform_Float32x2x4_arg };

static constexpr StaticMap<HashString, Symbol*, 110> Float16x2_symbolLookup = {
    std::pair{ "gg"_h, &Float16x2Type },
    std::pair{ "gr"_h, &Float16x2Type },
    std::pair{ "rr"_h, &Float16x2Type },
    std::pair{ "rg"_h, &Float16x2Type },
    std::pair{ "yx"_h, &Float16x2Type },
    std::pair{ "yy"_h, &Float16x2Type },
    std::pair{ "xy"_h, &Float16x2Type },
    std::pair{ "xx"_h, &Float16x2Type },
    std::pair{ "operator[](i16)"_h, &Float16x2_operator_index_Int16 },
    std::pair{ "operator<=(f16x2)"_h, &Float16x2_operator_lte_Float16x2 },
    std::pair{ "operator>=(f16x2)"_h, &Float16x2_operator_gte_Float16x2 },
    std::pair{ "operator/(f16x2)"_h, &Float16x2_operator_div_Float16x2 },
    std::pair{ "operator>(f16x2)"_h, &Float16x2_operator_gt_Float16x2 },
    std::pair{ "operator-(f16x2)"_h, &Float16x2_operator_sub_Float16x2 },
    std::pair{ "operator*=(f16x2)"_h, &Float16x2_operator_mulasg_Float16x2 },
    std::pair{ "operator*(u16)"_h, &Float16x2_operator_scale_UInt16 },
    std::pair{ "operator+=(f16x2)"_h, &Float16x2_operator_addasg_Float16x2 },
    std::pair{ "operator+(f16x2)"_h, &Float16x2_operator_add_Float16x2 },
    std::pair{ "operator<"_h, &Float16x2_operator_lt_Float16x2 },
    std::pair{ "operator>"_h, &Float16x2_operator_gt_Float16x2 },
    std::pair{ "operator-"_h, &Float16x2_operator_sub_Float16x2 },
    std::pair{ "operator/"_h, &Float16x2_operator_div_Float16x2 },
    std::pair{ "operator+"_h, &Float16x2_operator_add_Float16x2 },
    std::pair{ "operator*"_h, &Float16x2_operator_mul_Float16x2 },
    std::pair{ "operator*"_h, &Float16x2_operator_scale_Float16 },
    std::pair{ "operator*"_h, &Float16x2_operator_scale_UInt16 },
    std::pair{ "operator*"_h, &Float16x2_operator_scale_Int16 },
    std::pair{ "operator*"_h, &Float16x2_operator_transform_Float32x2x2 },
    std::pair{ "operator*"_h, &Float16x2_operator_transform_Float32x2x3 },
    std::pair{ "operator*"_h, &Float16x2_operator_transform_Float32x2x4 },
    std::pair{ "operator%"_h, &Float16x2_operator_mod_Float16x2 },
    std::pair{ "yxxx"_h, &Float16x4Type },
    std::pair{ "yxxy"_h, &Float16x4Type },
    std::pair{ "yxyy"_h, &Float16x4Type },
    std::pair{ "yxyx"_h, &Float16x4Type },
    std::pair{ "xyxx"_h, &Float16x4Type },
    std::pair{ "xyxy"_h, &Float16x4Type },
    std::pair{ "xyyy"_h, &Float16x4Type },
    std::pair{ "xyyx"_h, &Float16x4Type },
    std::pair{ "ggrr"_h, &Float16x4Type },
    std::pair{ "ggrg"_h, &Float16x4Type },
    std::pair{ "gggr"_h, &Float16x4Type },
    std::pair{ "gggg"_h, &Float16x4Type },
    std::pair{ "yyyx"_h, &Float16x4Type },
    std::pair{ "yyyy"_h, &Float16x4Type },
    std::pair{ "yyxy"_h, &Float16x4Type },
    std::pair{ "yyxx"_h, &Float16x4Type },
    std::pair{ "xxyx"_h, &Float16x4Type },
    std::pair{ "xxyy"_h, &Float16x4Type },
    std::pair{ "xxxy"_h, &Float16x4Type },
    std::pair{ "xxxx"_h, &Float16x4Type },
    std::pair{ "rgrg"_h, &Float16x4Type },
    std::pair{ "rgrr"_h, &Float16x4Type },
    std::pair{ "rggg"_h, &Float16x4Type },
    std::pair{ "rggr"_h, &Float16x4Type },
    std::pair{ "operator*(f16x2)"_h, &Float16x2_operator_mul_Float16x2 },
    std::pair{ "rrg"_h, &Float16x3Type },
    std::pair{ "rrr"_h, &Float16x3Type },
    std::pair{ "rgr"_h, &Float16x3Type },
    std::pair{ "rgg"_h, &Float16x3Type },
    std::pair{ "operator[](u32)"_h, &Float16x2_operator_index_UInt32 },
    std::pair{ "operator!=(f16x2)"_h, &Float16x2_operator_neq_Float16x2 },
    std::pair{ "operator[](u16)"_h, &Float16x2_operator_index_UInt16 },
    std::pair{ "operator<(f16x2)"_h, &Float16x2_operator_lt_Float16x2 },
    std::pair{ "operator*(f16)"_h, &Float16x2_operator_scale_Float16 },
    std::pair{ "g"_h, &Float16Type },
    std::pair{ "r"_h, &Float16Type },
    std::pair{ "y"_h, &Float16Type },
    std::pair{ "x"_h, &Float16Type },
    std::pair{ "yxx"_h, &Float16x3Type },
    std::pair{ "yxy"_h, &Float16x3Type },
    std::pair{ "yyy"_h, &Float16x3Type },
    std::pair{ "yyx"_h, &Float16x3Type },
    std::pair{ "operator*(f32x2x2)"_h, &Float16x2_operator_transform_Float32x2x2 },
    std::pair{ "operator*(f32x2x3)"_h, &Float16x2_operator_transform_Float32x2x3 },
    std::pair{ "operator*(f32x2x4)"_h, &Float16x2_operator_transform_Float32x2x4 },
    std::pair{ "xyx"_h, &Float16x3Type },
    std::pair{ "xyy"_h, &Float16x3Type },
    std::pair{ "xxy"_h, &Float16x3Type },
    std::pair{ "xxx"_h, &Float16x3Type },
    std::pair{ "operator*(i16)"_h, &Float16x2_operator_scale_Int16 },
    std::pair{ "operator/=(f16x2)"_h, &Float16x2_operator_divasg_Float16x2 },
    std::pair{ "operator%(f16x2)"_h, &Float16x2_operator_mod_Float16x2 },
    std::pair{ "ggr"_h, &Float16x3Type },
    std::pair{ "ggg"_h, &Float16x3Type },
    std::pair{ "grr"_h, &Float16x3Type },
    std::pair{ "grg"_h, &Float16x3Type },
    std::pair{ "operator[]"_h, &Float16x2_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float16x2_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float16x2_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float16x2_operator_index_UInt16 },
    std::pair{ "operator=="_h, &Float16x2_operator_eq_Float16x2 },
    std::pair{ "operator<="_h, &Float16x2_operator_lte_Float16x2 },
    std::pair{ "operator>="_h, &Float16x2_operator_gte_Float16x2 },
    std::pair{ "operator-="_h, &Float16x2_operator_subasg_Float16x2 },
    std::pair{ "operator/="_h, &Float16x2_operator_divasg_Float16x2 },
    std::pair{ "operator+="_h, &Float16x2_operator_addasg_Float16x2 },
    std::pair{ "operator*="_h, &Float16x2_operator_mulasg_Float16x2 },
    std::pair{ "operator!="_h, &Float16x2_operator_neq_Float16x2 },
    std::pair{ "operator-=(f16x2)"_h, &Float16x2_operator_subasg_Float16x2 },
    std::pair{ "operator==(f16x2)"_h, &Float16x2_operator_eq_Float16x2 },
    std::pair{ "operator[](i32)"_h, &Float16x2_operator_index_Int32 },
    std::pair{ "grrg"_h, &Float16x4Type },
    std::pair{ "grrr"_h, &Float16x4Type },
    std::pair{ "grgg"_h, &Float16x4Type },
    std::pair{ "grgr"_h, &Float16x4Type },
    std::pair{ "rrgg"_h, &Float16x4Type },
    std::pair{ "rrgr"_h, &Float16x4Type },
    std::pair{ "rrrr"_h, &Float16x4Type },
    std::pair{ "rrrg"_h, &Float16x4Type }
    };

Float16x2::Float16x2()
{
    this->name = "f16x2"_c;
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x2_operator_index_Int32_arg.name = "arg"_c;
    Float16x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x2_operator_index_Int32.name = Float16x2_operator_index_Int32_name;
    Float16x2_operator_index_Int32.backendIndex = 377;
    Float16x2_operator_index_Int32.returnType = Type::FullType { Float16Type.name };
    Float16x2_operator_index_Int32.parameters = Float16x2_operator_index_Int32_args;
    Symbol::Resolved(&Float16x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2_operator_index_Int32)->signature = "operator[](i32) f16"_c;
    Symbol::Resolved(&Float16x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x2_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float16x2_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt32
    Float16x2_operator_index_UInt32_arg.name = "arg"_c;
    Float16x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x2_operator_index_UInt32.name = Float16x2_operator_index_UInt32_name;
    Float16x2_operator_index_UInt32.backendIndex = 378;
    Float16x2_operator_index_UInt32.returnType = Type::FullType { Float16Type.name };
    Float16x2_operator_index_UInt32.parameters = Float16x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2_operator_index_UInt32)->signature = "operator[](u32) f16"_c;
    Symbol::Resolved(&Float16x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x2_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float16x2_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    /// operator[] with Int16
    Float16x2_operator_index_Int16_arg.name = "arg"_c;
    Float16x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x2_operator_index_Int16.name = Float16x2_operator_index_Int16_name;
    Float16x2_operator_index_Int16.backendIndex = 379;
    Float16x2_operator_index_Int16.returnType = Type::FullType { Float16Type.name };
    Float16x2_operator_index_Int16.parameters = Float16x2_operator_index_Int16_args;
    Symbol::Resolved(&Float16x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2_operator_index_Int16)->signature = "operator[](i16) f16"_c;
    Symbol::Resolved(&Float16x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x2_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float16x2_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt16
    Float16x2_operator_index_UInt16_arg.name = "arg"_c;
    Float16x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x2_operator_index_UInt16.name = Float16x2_operator_index_UInt16_name;
    Float16x2_operator_index_UInt16.backendIndex = 380;
    Float16x2_operator_index_UInt16.returnType = Type::FullType { Float16Type.name };
    Float16x2_operator_index_UInt16.parameters = Float16x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2_operator_index_UInt16)->signature = "operator[](u16) f16"_c;
    Symbol::Resolved(&Float16x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x2_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float16x2_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    /// operator+ with Float16x2
    Float16x2_operator_add_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_add_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_add_Float16x2.name = Float16x2_operator_add_Float16x2_name;
    Float16x2_operator_add_Float16x2.backendIndex = 381;
    Float16x2_operator_add_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_add_Float16x2.parameters = Float16x2_operator_add_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_add_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_add_Float16x2)->signature = "operator+(f16x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_operator_add_Float16x2)->name = "operator+(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_add_Float16x2)->nameWithVarNames = "operator+(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_add_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator- with Float16x2
    Float16x2_operator_sub_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_sub_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_sub_Float16x2.name = Float16x2_operator_sub_Float16x2_name;
    Float16x2_operator_sub_Float16x2.backendIndex = 382;
    Float16x2_operator_sub_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_sub_Float16x2.parameters = Float16x2_operator_sub_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_sub_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_sub_Float16x2)->signature = "operator-(f16x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_operator_sub_Float16x2)->name = "operator-(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_sub_Float16x2)->nameWithVarNames = "operator-(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_sub_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float16x2
    Float16x2_operator_mul_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_mul_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_mul_Float16x2.name = Float16x2_operator_mul_Float16x2_name;
    Float16x2_operator_mul_Float16x2.backendIndex = 383;
    Float16x2_operator_mul_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_mul_Float16x2.parameters = Float16x2_operator_mul_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_mul_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_mul_Float16x2)->signature = "operator*(f16x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_operator_mul_Float16x2)->name = "operator*(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_mul_Float16x2)->nameWithVarNames = "operator*(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_mul_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator/ with Float16x2
    Float16x2_operator_div_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_div_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_div_Float16x2.name = Float16x2_operator_div_Float16x2_name;
    Float16x2_operator_div_Float16x2.backendIndex = 384;
    Float16x2_operator_div_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_div_Float16x2.parameters = Float16x2_operator_div_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_div_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_div_Float16x2)->signature = "operator/(f16x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_operator_div_Float16x2)->name = "operator/(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_div_Float16x2)->nameWithVarNames = "operator/(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_div_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator% with Float16x2
    Float16x2_operator_mod_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_mod_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_mod_Float16x2.name = Float16x2_operator_mod_Float16x2_name;
    Float16x2_operator_mod_Float16x2.backendIndex = 385;
    Float16x2_operator_mod_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_mod_Float16x2.parameters = Float16x2_operator_mod_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_mod_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_mod_Float16x2)->signature = "operator%(f16x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_operator_mod_Float16x2)->name = "operator%(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_mod_Float16x2)->nameWithVarNames = "operator%(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_mod_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator+= with Float16x2
    Float16x2_operator_addasg_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_addasg_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_addasg_Float16x2.name = Float16x2_operator_addasg_Float16x2_name;
    Float16x2_operator_addasg_Float16x2.backendIndex = 386;
    Float16x2_operator_addasg_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_addasg_Float16x2.parameters = Float16x2_operator_addasg_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_addasg_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_addasg_Float16x2)->signature = "operator+=(f16x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_operator_addasg_Float16x2)->name = "operator+=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_addasg_Float16x2)->nameWithVarNames = "operator+=(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_addasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator-= with Float16x2
    Float16x2_operator_subasg_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_subasg_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_subasg_Float16x2.name = Float16x2_operator_subasg_Float16x2_name;
    Float16x2_operator_subasg_Float16x2.backendIndex = 387;
    Float16x2_operator_subasg_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_subasg_Float16x2.parameters = Float16x2_operator_subasg_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_subasg_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_subasg_Float16x2)->signature = "operator-=(f16x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_operator_subasg_Float16x2)->name = "operator-=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_subasg_Float16x2)->nameWithVarNames = "operator-=(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_subasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator*= with Float16x2
    Float16x2_operator_mulasg_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_mulasg_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_mulasg_Float16x2.name = Float16x2_operator_mulasg_Float16x2_name;
    Float16x2_operator_mulasg_Float16x2.backendIndex = 388;
    Float16x2_operator_mulasg_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_mulasg_Float16x2.parameters = Float16x2_operator_mulasg_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_mulasg_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_mulasg_Float16x2)->signature = "operator*=(f16x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_operator_mulasg_Float16x2)->name = "operator*=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_mulasg_Float16x2)->nameWithVarNames = "operator*=(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_mulasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator/= with Float16x2
    Float16x2_operator_divasg_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_divasg_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_divasg_Float16x2.name = Float16x2_operator_divasg_Float16x2_name;
    Float16x2_operator_divasg_Float16x2.backendIndex = 389;
    Float16x2_operator_divasg_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_divasg_Float16x2.parameters = Float16x2_operator_divasg_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_divasg_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_divasg_Float16x2)->signature = "operator/=(f16x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_operator_divasg_Float16x2)->name = "operator/=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_divasg_Float16x2)->nameWithVarNames = "operator/=(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_divasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator< with Float16x2
    Float16x2_operator_lt_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_lt_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_lt_Float16x2.name = Float16x2_operator_lt_Float16x2_name;
    Float16x2_operator_lt_Float16x2.backendIndex = 390;
    Float16x2_operator_lt_Float16x2.returnType = Type::FullType { Bool8x2Type.name };
    Float16x2_operator_lt_Float16x2.parameters = Float16x2_operator_lt_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_lt_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_lt_Float16x2)->signature = "operator<(f16x2) b8x2"_c;
    Symbol::Resolved(&Float16x2_operator_lt_Float16x2)->name = "operator<(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_lt_Float16x2)->nameWithVarNames = "operator<(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_lt_Float16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator<= with Float16x2
    Float16x2_operator_lte_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_lte_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_lte_Float16x2.name = Float16x2_operator_lte_Float16x2_name;
    Float16x2_operator_lte_Float16x2.backendIndex = 391;
    Float16x2_operator_lte_Float16x2.returnType = Type::FullType { Bool8x2Type.name };
    Float16x2_operator_lte_Float16x2.parameters = Float16x2_operator_lte_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_lte_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_lte_Float16x2)->signature = "operator<=(f16x2) b8x2"_c;
    Symbol::Resolved(&Float16x2_operator_lte_Float16x2)->name = "operator<=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_lte_Float16x2)->nameWithVarNames = "operator<=(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_lte_Float16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator> with Float16x2
    Float16x2_operator_gt_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_gt_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_gt_Float16x2.name = Float16x2_operator_gt_Float16x2_name;
    Float16x2_operator_gt_Float16x2.backendIndex = 392;
    Float16x2_operator_gt_Float16x2.returnType = Type::FullType { Bool8x2Type.name };
    Float16x2_operator_gt_Float16x2.parameters = Float16x2_operator_gt_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_gt_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_gt_Float16x2)->signature = "operator>(f16x2) b8x2"_c;
    Symbol::Resolved(&Float16x2_operator_gt_Float16x2)->name = "operator>(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_gt_Float16x2)->nameWithVarNames = "operator>(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_gt_Float16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator>= with Float16x2
    Float16x2_operator_gte_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_gte_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_gte_Float16x2.name = Float16x2_operator_gte_Float16x2_name;
    Float16x2_operator_gte_Float16x2.backendIndex = 393;
    Float16x2_operator_gte_Float16x2.returnType = Type::FullType { Bool8x2Type.name };
    Float16x2_operator_gte_Float16x2.parameters = Float16x2_operator_gte_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_gte_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_gte_Float16x2)->signature = "operator>=(f16x2) b8x2"_c;
    Symbol::Resolved(&Float16x2_operator_gte_Float16x2)->name = "operator>=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_gte_Float16x2)->nameWithVarNames = "operator>=(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_gte_Float16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator== with Float16x2
    Float16x2_operator_eq_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_eq_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_eq_Float16x2.name = Float16x2_operator_eq_Float16x2_name;
    Float16x2_operator_eq_Float16x2.backendIndex = 394;
    Float16x2_operator_eq_Float16x2.returnType = Type::FullType { Bool8x2Type.name };
    Float16x2_operator_eq_Float16x2.parameters = Float16x2_operator_eq_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_eq_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_eq_Float16x2)->signature = "operator==(f16x2) b8x2"_c;
    Symbol::Resolved(&Float16x2_operator_eq_Float16x2)->name = "operator==(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_eq_Float16x2)->nameWithVarNames = "operator==(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_eq_Float16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator!= with Float16x2
    Float16x2_operator_neq_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_neq_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_neq_Float16x2.name = Float16x2_operator_neq_Float16x2_name;
    Float16x2_operator_neq_Float16x2.backendIndex = 395;
    Float16x2_operator_neq_Float16x2.returnType = Type::FullType { Bool8x2Type.name };
    Float16x2_operator_neq_Float16x2.parameters = Float16x2_operator_neq_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_neq_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_neq_Float16x2)->signature = "operator!=(f16x2) b8x2"_c;
    Symbol::Resolved(&Float16x2_operator_neq_Float16x2)->name = "operator!=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_neq_Float16x2)->nameWithVarNames = "operator!=(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_neq_Float16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator* with Float16
    Float16x2_operator_scale_Float16_arg.name = "arg"_c;
    Float16x2_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x2_operator_scale_Float16.name = Float16x2_operator_scale_Float16_name;
    Float16x2_operator_scale_Float16.backendIndex = 396;
    Float16x2_operator_scale_Float16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_scale_Float16.parameters = Float16x2_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x2_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2_operator_scale_Float16)->signature = "operator*(f16) f16x2"_c;
    Symbol::Resolved(&Float16x2_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x2_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x2_operator_scale_Float16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with UInt16
    Float16x2_operator_scale_UInt16_arg.name = "arg"_c;
    Float16x2_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x2_operator_scale_UInt16.name = Float16x2_operator_scale_UInt16_name;
    Float16x2_operator_scale_UInt16.backendIndex = 397;
    Float16x2_operator_scale_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_scale_UInt16.parameters = Float16x2_operator_scale_UInt16_args;
    Symbol::Resolved(&Float16x2_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2_operator_scale_UInt16)->signature = "operator*(u16) f16x2"_c;
    Symbol::Resolved(&Float16x2_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&Float16x2_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&Float16x2_operator_scale_UInt16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Int16
    Float16x2_operator_scale_Int16_arg.name = "arg"_c;
    Float16x2_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x2_operator_scale_Int16.name = Float16x2_operator_scale_Int16_name;
    Float16x2_operator_scale_Int16.backendIndex = 398;
    Float16x2_operator_scale_Int16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_scale_Int16.parameters = Float16x2_operator_scale_Int16_args;
    Symbol::Resolved(&Float16x2_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2_operator_scale_Int16)->signature = "operator*(i16) f16x2"_c;
    Symbol::Resolved(&Float16x2_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&Float16x2_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&Float16x2_operator_scale_Int16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float32x2x2
    Float16x2_operator_transform_Float32x2x2_arg.name = "arg"_c;
    Float16x2_operator_transform_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float16x2_operator_transform_Float32x2x2.name = Float16x2_operator_transform_Float32x2x2_name;
    Float16x2_operator_transform_Float32x2x2.backendIndex = 399;
    Float16x2_operator_transform_Float32x2x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_transform_Float32x2x2.parameters = Float16x2_operator_transform_Float32x2x2_args;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x2)->signature = "operator*(f32x2x2) f16x2"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x2)->name = "operator*(f32x2x2)"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x2)->nameWithVarNames = "operator*(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x2)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float32x2x3
    Float16x2_operator_transform_Float32x2x3_arg.name = "arg"_c;
    Float16x2_operator_transform_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float16x2_operator_transform_Float32x2x3.name = Float16x2_operator_transform_Float32x2x3_name;
    Float16x2_operator_transform_Float32x2x3.backendIndex = 400;
    Float16x2_operator_transform_Float32x2x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x2_operator_transform_Float32x2x3.parameters = Float16x2_operator_transform_Float32x2x3_args;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x3)->signature = "operator*(f32x2x3) f16x3"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x3)->name = "operator*(f32x2x3)"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x3)->nameWithVarNames = "operator*(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x3)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float32x2x4
    Float16x2_operator_transform_Float32x2x4_arg.name = "arg"_c;
    Float16x2_operator_transform_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float16x2_operator_transform_Float32x2x4.name = Float16x2_operator_transform_Float32x2x4_name;
    Float16x2_operator_transform_Float32x2x4.backendIndex = 401;
    Float16x2_operator_transform_Float32x2x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x2_operator_transform_Float32x2x4.parameters = Float16x2_operator_transform_Float32x2x4_args;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x4)->signature = "operator*(f32x2x4) f16x4"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x4)->name = "operator*(f32x2x4)"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x4)->nameWithVarNames = "operator*(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x4)->returnTypeSymbol = &Float16x4Type;

    this->scope.symbolLookup = Float16x2_symbolLookup;
}
Float16x2 Float16x2Type;

/// operator[] with Int32
Variable UInt16x2_operator_index_Int32_arg;
Function UInt16x2_operator_index_Int32;
inline constexpr std::array UInt16x2_operator_index_Int32_args = { &UInt16x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt16x2_operator_index_UInt32_arg;
Function UInt16x2_operator_index_UInt32;
inline constexpr std::array UInt16x2_operator_index_UInt32_args = { &UInt16x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt16x2_operator_index_Int16_arg;
Function UInt16x2_operator_index_Int16;
inline constexpr std::array UInt16x2_operator_index_Int16_args = { &UInt16x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt16x2_operator_index_UInt16_arg;
Function UInt16x2_operator_index_UInt16;
inline constexpr std::array UInt16x2_operator_index_UInt16_args = { &UInt16x2_operator_index_UInt16_arg };

/// operator+ with UInt16x2
Variable UInt16x2_operator_add_UInt16x2_arg;
Function UInt16x2_operator_add_UInt16x2;
inline constexpr std::array UInt16x2_operator_add_UInt16x2_args = { &UInt16x2_operator_add_UInt16x2_arg };

/// operator- with UInt16x2
Variable UInt16x2_operator_sub_UInt16x2_arg;
Function UInt16x2_operator_sub_UInt16x2;
inline constexpr std::array UInt16x2_operator_sub_UInt16x2_args = { &UInt16x2_operator_sub_UInt16x2_arg };

/// operator* with UInt16x2
Variable UInt16x2_operator_mul_UInt16x2_arg;
Function UInt16x2_operator_mul_UInt16x2;
inline constexpr std::array UInt16x2_operator_mul_UInt16x2_args = { &UInt16x2_operator_mul_UInt16x2_arg };

/// operator/ with UInt16x2
Variable UInt16x2_operator_div_UInt16x2_arg;
Function UInt16x2_operator_div_UInt16x2;
inline constexpr std::array UInt16x2_operator_div_UInt16x2_args = { &UInt16x2_operator_div_UInt16x2_arg };

/// operator% with UInt16x2
Variable UInt16x2_operator_mod_UInt16x2_arg;
Function UInt16x2_operator_mod_UInt16x2;
inline constexpr std::array UInt16x2_operator_mod_UInt16x2_args = { &UInt16x2_operator_mod_UInt16x2_arg };

/// operator+= with UInt16x2
Variable UInt16x2_operator_addasg_UInt16x2_arg;
Function UInt16x2_operator_addasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_addasg_UInt16x2_args = { &UInt16x2_operator_addasg_UInt16x2_arg };

/// operator-= with UInt16x2
Variable UInt16x2_operator_subasg_UInt16x2_arg;
Function UInt16x2_operator_subasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_subasg_UInt16x2_args = { &UInt16x2_operator_subasg_UInt16x2_arg };

/// operator*= with UInt16x2
Variable UInt16x2_operator_mulasg_UInt16x2_arg;
Function UInt16x2_operator_mulasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_mulasg_UInt16x2_args = { &UInt16x2_operator_mulasg_UInt16x2_arg };

/// operator/= with UInt16x2
Variable UInt16x2_operator_divasg_UInt16x2_arg;
Function UInt16x2_operator_divasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_divasg_UInt16x2_args = { &UInt16x2_operator_divasg_UInt16x2_arg };

/// operator< with UInt16x2
Variable UInt16x2_operator_lt_UInt16x2_arg;
Function UInt16x2_operator_lt_UInt16x2;
inline constexpr std::array UInt16x2_operator_lt_UInt16x2_args = { &UInt16x2_operator_lt_UInt16x2_arg };

/// operator<= with UInt16x2
Variable UInt16x2_operator_lte_UInt16x2_arg;
Function UInt16x2_operator_lte_UInt16x2;
inline constexpr std::array UInt16x2_operator_lte_UInt16x2_args = { &UInt16x2_operator_lte_UInt16x2_arg };

/// operator> with UInt16x2
Variable UInt16x2_operator_gt_UInt16x2_arg;
Function UInt16x2_operator_gt_UInt16x2;
inline constexpr std::array UInt16x2_operator_gt_UInt16x2_args = { &UInt16x2_operator_gt_UInt16x2_arg };

/// operator>= with UInt16x2
Variable UInt16x2_operator_gte_UInt16x2_arg;
Function UInt16x2_operator_gte_UInt16x2;
inline constexpr std::array UInt16x2_operator_gte_UInt16x2_args = { &UInt16x2_operator_gte_UInt16x2_arg };

/// operator== with UInt16x2
Variable UInt16x2_operator_eq_UInt16x2_arg;
Function UInt16x2_operator_eq_UInt16x2;
inline constexpr std::array UInt16x2_operator_eq_UInt16x2_args = { &UInt16x2_operator_eq_UInt16x2_arg };

/// operator!= with UInt16x2
Variable UInt16x2_operator_neq_UInt16x2_arg;
Function UInt16x2_operator_neq_UInt16x2;
inline constexpr std::array UInt16x2_operator_neq_UInt16x2_args = { &UInt16x2_operator_neq_UInt16x2_arg };

/// operator* with Float16
Variable UInt16x2_operator_scale_Float16_arg;
Function UInt16x2_operator_scale_Float16;
inline constexpr std::array UInt16x2_operator_scale_Float16_args = { &UInt16x2_operator_scale_Float16_arg };

/// operator* with UInt16
Variable UInt16x2_operator_scale_UInt16_arg;
Function UInt16x2_operator_scale_UInt16;
inline constexpr std::array UInt16x2_operator_scale_UInt16_args = { &UInt16x2_operator_scale_UInt16_arg };

/// operator* with Int16
Variable UInt16x2_operator_scale_Int16_arg;
Function UInt16x2_operator_scale_Int16;
inline constexpr std::array UInt16x2_operator_scale_Int16_args = { &UInt16x2_operator_scale_Int16_arg };

/// operator| with UInt16x2
Variable UInt16x2_operator_or_UInt16x2_arg;
Function UInt16x2_operator_or_UInt16x2;
inline constexpr std::array UInt16x2_operator_or_UInt16x2_args = { &UInt16x2_operator_or_UInt16x2_arg };

/// operator& with UInt16x2
Variable UInt16x2_operator_and_UInt16x2_arg;
Function UInt16x2_operator_and_UInt16x2;
inline constexpr std::array UInt16x2_operator_and_UInt16x2_args = { &UInt16x2_operator_and_UInt16x2_arg };

/// operator^ with UInt16x2
Variable UInt16x2_operator_xor_UInt16x2_arg;
Function UInt16x2_operator_xor_UInt16x2;
inline constexpr std::array UInt16x2_operator_xor_UInt16x2_args = { &UInt16x2_operator_xor_UInt16x2_arg };

/// operator<< with UInt16x2
Variable UInt16x2_operator_lsh_UInt16x2_arg;
Function UInt16x2_operator_lsh_UInt16x2;
inline constexpr std::array UInt16x2_operator_lsh_UInt16x2_args = { &UInt16x2_operator_lsh_UInt16x2_arg };

/// operator>> with UInt16x2
Variable UInt16x2_operator_rsh_UInt16x2_arg;
Function UInt16x2_operator_rsh_UInt16x2;
inline constexpr std::array UInt16x2_operator_rsh_UInt16x2_args = { &UInt16x2_operator_rsh_UInt16x2_arg };

/// operator|= with UInt16x2
Variable UInt16x2_operator_orasg_UInt16x2_arg;
Function UInt16x2_operator_orasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_orasg_UInt16x2_args = { &UInt16x2_operator_orasg_UInt16x2_arg };

/// operator&= with UInt16x2
Variable UInt16x2_operator_andasg_UInt16x2_arg;
Function UInt16x2_operator_andasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_andasg_UInt16x2_args = { &UInt16x2_operator_andasg_UInt16x2_arg };

/// operator^= with UInt16x2
Variable UInt16x2_operator_xorasg_UInt16x2_arg;
Function UInt16x2_operator_xorasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_xorasg_UInt16x2_args = { &UInt16x2_operator_xorasg_UInt16x2_arg };

/// operator<<= with UInt16x2
Variable UInt16x2_operator_lshasg_UInt16x2_arg;
Function UInt16x2_operator_lshasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_lshasg_UInt16x2_args = { &UInt16x2_operator_lshasg_UInt16x2_arg };

/// operator>>= with UInt16x2
Variable UInt16x2_operator_rhsasg_UInt16x2_arg;
Function UInt16x2_operator_rhsasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_rhsasg_UInt16x2_args = { &UInt16x2_operator_rhsasg_UInt16x2_arg };

static constexpr StaticMap<HashString, Symbol*, 124> UInt16x2_symbolLookup = {
    std::pair{ "operator>=(u16x2)"_h, &UInt16x2_operator_gte_UInt16x2 },
    std::pair{ "operator==(u16x2)"_h, &UInt16x2_operator_eq_UInt16x2 },
    std::pair{ "gg"_h, &UInt16x2Type },
    std::pair{ "gr"_h, &UInt16x2Type },
    std::pair{ "rr"_h, &UInt16x2Type },
    std::pair{ "rg"_h, &UInt16x2Type },
    std::pair{ "yx"_h, &UInt16x2Type },
    std::pair{ "yy"_h, &UInt16x2Type },
    std::pair{ "xy"_h, &UInt16x2Type },
    std::pair{ "xx"_h, &UInt16x2Type },
    std::pair{ "operator[](i16)"_h, &UInt16x2_operator_index_Int16 },
    std::pair{ "operator/(u16x2)"_h, &UInt16x2_operator_div_UInt16x2 },
    std::pair{ "operator*(u16x2)"_h, &UInt16x2_operator_mul_UInt16x2 },
    std::pair{ "operator-(u16x2)"_h, &UInt16x2_operator_sub_UInt16x2 },
    std::pair{ "operator>>=(u16x2)"_h, &UInt16x2_operator_rhsasg_UInt16x2 },
    std::pair{ "operator*(u16)"_h, &UInt16x2_operator_scale_UInt16 },
    std::pair{ "operator|(u16x2)"_h, &UInt16x2_operator_or_UInt16x2 },
    std::pair{ "operator-=(u16x2)"_h, &UInt16x2_operator_subasg_UInt16x2 },
    std::pair{ "operator+(u16x2)"_h, &UInt16x2_operator_add_UInt16x2 },
    std::pair{ "operator<=(u16x2)"_h, &UInt16x2_operator_lte_UInt16x2 },
    std::pair{ "operator^"_h, &UInt16x2_operator_xor_UInt16x2 },
    std::pair{ "operator|"_h, &UInt16x2_operator_or_UInt16x2 },
    std::pair{ "operator<"_h, &UInt16x2_operator_lt_UInt16x2 },
    std::pair{ "operator>"_h, &UInt16x2_operator_gt_UInt16x2 },
    std::pair{ "operator-"_h, &UInt16x2_operator_sub_UInt16x2 },
    std::pair{ "operator/"_h, &UInt16x2_operator_div_UInt16x2 },
    std::pair{ "operator+"_h, &UInt16x2_operator_add_UInt16x2 },
    std::pair{ "operator*"_h, &UInt16x2_operator_mul_UInt16x2 },
    std::pair{ "operator*"_h, &UInt16x2_operator_scale_Float16 },
    std::pair{ "operator*"_h, &UInt16x2_operator_scale_UInt16 },
    std::pair{ "operator*"_h, &UInt16x2_operator_scale_Int16 },
    std::pair{ "operator%"_h, &UInt16x2_operator_mod_UInt16x2 },
    std::pair{ "operator&"_h, &UInt16x2_operator_and_UInt16x2 },
    std::pair{ "operator&(u16x2)"_h, &UInt16x2_operator_and_UInt16x2 },
    std::pair{ "yxxx"_h, &UInt16x4Type },
    std::pair{ "yxxy"_h, &UInt16x4Type },
    std::pair{ "yxyy"_h, &UInt16x4Type },
    std::pair{ "yxyx"_h, &UInt16x4Type },
    std::pair{ "operator&=(u16x2)"_h, &UInt16x2_operator_andasg_UInt16x2 },
    std::pair{ "xyxx"_h, &UInt16x4Type },
    std::pair{ "xyxy"_h, &UInt16x4Type },
    std::pair{ "xyyy"_h, &UInt16x4Type },
    std::pair{ "xyyx"_h, &UInt16x4Type },
    std::pair{ "ggrr"_h, &UInt16x4Type },
    std::pair{ "ggrg"_h, &UInt16x4Type },
    std::pair{ "gggr"_h, &UInt16x4Type },
    std::pair{ "gggg"_h, &UInt16x4Type },
    std::pair{ "operator<<(u16x2)"_h, &UInt16x2_operator_lsh_UInt16x2 },
    std::pair{ "yyyx"_h, &UInt16x4Type },
    std::pair{ "yyyy"_h, &UInt16x4Type },
    std::pair{ "yyxy"_h, &UInt16x4Type },
    std::pair{ "yyxx"_h, &UInt16x4Type },
    std::pair{ "xxyx"_h, &UInt16x4Type },
    std::pair{ "xxyy"_h, &UInt16x4Type },
    std::pair{ "xxxy"_h, &UInt16x4Type },
    std::pair{ "xxxx"_h, &UInt16x4Type },
    std::pair{ "rgrg"_h, &UInt16x4Type },
    std::pair{ "rgrr"_h, &UInt16x4Type },
    std::pair{ "rggg"_h, &UInt16x4Type },
    std::pair{ "rggr"_h, &UInt16x4Type },
    std::pair{ "operator<<=(u16x2)"_h, &UInt16x2_operator_lshasg_UInt16x2 },
    std::pair{ "operator|=(u16x2)"_h, &UInt16x2_operator_orasg_UInt16x2 },
    std::pair{ "operator%(u16x2)"_h, &UInt16x2_operator_mod_UInt16x2 },
    std::pair{ "operator^(u16x2)"_h, &UInt16x2_operator_xor_UInt16x2 },
    std::pair{ "rrg"_h, &UInt16x3Type },
    std::pair{ "rrr"_h, &UInt16x3Type },
    std::pair{ "rgr"_h, &UInt16x3Type },
    std::pair{ "rgg"_h, &UInt16x3Type },
    std::pair{ "operator[](u32)"_h, &UInt16x2_operator_index_UInt32 },
    std::pair{ "operator<<="_h, &UInt16x2_operator_lshasg_UInt16x2 },
    std::pair{ "operator>>(u16x2)"_h, &UInt16x2_operator_rsh_UInt16x2 },
    std::pair{ "operator[](u16)"_h, &UInt16x2_operator_index_UInt16 },
    std::pair{ "operator>>="_h, &UInt16x2_operator_rhsasg_UInt16x2 },
    std::pair{ "operator*(f16)"_h, &UInt16x2_operator_scale_Float16 },
    std::pair{ "g"_h, &UInt16Type },
    std::pair{ "r"_h, &UInt16Type },
    std::pair{ "y"_h, &UInt16Type },
    std::pair{ "x"_h, &UInt16Type },
    std::pair{ "operator!=(u16x2)"_h, &UInt16x2_operator_neq_UInt16x2 },
    std::pair{ "yxx"_h, &UInt16x3Type },
    std::pair{ "yxy"_h, &UInt16x3Type },
    std::pair{ "yyy"_h, &UInt16x3Type },
    std::pair{ "yyx"_h, &UInt16x3Type },
    std::pair{ "xyx"_h, &UInt16x3Type },
    std::pair{ "xyy"_h, &UInt16x3Type },
    std::pair{ "xxy"_h, &UInt16x3Type },
    std::pair{ "xxx"_h, &UInt16x3Type },
    std::pair{ "operator*(i16)"_h, &UInt16x2_operator_scale_Int16 },
    std::pair{ "ggr"_h, &UInt16x3Type },
    std::pair{ "ggg"_h, &UInt16x3Type },
    std::pair{ "grr"_h, &UInt16x3Type },
    std::pair{ "grg"_h, &UInt16x3Type },
    std::pair{ "operator/=(u16x2)"_h, &UInt16x2_operator_divasg_UInt16x2 },
    std::pair{ "operator^="_h, &UInt16x2_operator_xorasg_UInt16x2 },
    std::pair{ "operator[]"_h, &UInt16x2_operator_index_Int32 },
    std::pair{ "operator[]"_h, &UInt16x2_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &UInt16x2_operator_index_Int16 },
    std::pair{ "operator[]"_h, &UInt16x2_operator_index_UInt16 },
    std::pair{ "operator|="_h, &UInt16x2_operator_orasg_UInt16x2 },
    std::pair{ "operator=="_h, &UInt16x2_operator_eq_UInt16x2 },
    std::pair{ "operator<="_h, &UInt16x2_operator_lte_UInt16x2 },
    std::pair{ "operator<<"_h, &UInt16x2_operator_lsh_UInt16x2 },
    std::pair{ "operator>="_h, &UInt16x2_operator_gte_UInt16x2 },
    std::pair{ "operator>>"_h, &UInt16x2_operator_rsh_UInt16x2 },
    std::pair{ "operator-="_h, &UInt16x2_operator_subasg_UInt16x2 },
    std::pair{ "operator/="_h, &UInt16x2_operator_divasg_UInt16x2 },
    std::pair{ "operator+="_h, &UInt16x2_operator_addasg_UInt16x2 },
    std::pair{ "operator*="_h, &UInt16x2_operator_mulasg_UInt16x2 },
    std::pair{ "operator&="_h, &UInt16x2_operator_andasg_UInt16x2 },
    std::pair{ "operator!="_h, &UInt16x2_operator_neq_UInt16x2 },
    std::pair{ "operator+=(u16x2)"_h, &UInt16x2_operator_addasg_UInt16x2 },
    std::pair{ "operator<(u16x2)"_h, &UInt16x2_operator_lt_UInt16x2 },
    std::pair{ "operator^=(u16x2)"_h, &UInt16x2_operator_xorasg_UInt16x2 },
    std::pair{ "operator*=(u16x2)"_h, &UInt16x2_operator_mulasg_UInt16x2 },
    std::pair{ "operator[](i32)"_h, &UInt16x2_operator_index_Int32 },
    std::pair{ "grrg"_h, &UInt16x4Type },
    std::pair{ "grrr"_h, &UInt16x4Type },
    std::pair{ "grgg"_h, &UInt16x4Type },
    std::pair{ "grgr"_h, &UInt16x4Type },
    std::pair{ "operator>(u16x2)"_h, &UInt16x2_operator_gt_UInt16x2 },
    std::pair{ "rrgg"_h, &UInt16x4Type },
    std::pair{ "rrgr"_h, &UInt16x4Type },
    std::pair{ "rrrr"_h, &UInt16x4Type },
    std::pair{ "rrrg"_h, &UInt16x4Type }
    };

UInt16x2::UInt16x2()
{
    this->name = "u16x2"_c;
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    /// operator[] with Int32
    UInt16x2_operator_index_Int32_arg.name = "arg"_c;
    UInt16x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt16x2_operator_index_Int32.name = UInt16x2_operator_index_Int32_name;
    UInt16x2_operator_index_Int32.backendIndex = 417;
    UInt16x2_operator_index_Int32.returnType = Type::FullType { UInt16Type.name };
    UInt16x2_operator_index_Int32.parameters = UInt16x2_operator_index_Int32_args;
    Symbol::Resolved(&UInt16x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x2_operator_index_Int32)->signature = "operator[](i32) u16"_c;
    Symbol::Resolved(&UInt16x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt32
    UInt16x2_operator_index_UInt32_arg.name = "arg"_c;
    UInt16x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt16x2_operator_index_UInt32.name = UInt16x2_operator_index_UInt32_name;
    UInt16x2_operator_index_UInt32.backendIndex = 418;
    UInt16x2_operator_index_UInt32.returnType = Type::FullType { UInt16Type.name };
    UInt16x2_operator_index_UInt32.parameters = UInt16x2_operator_index_UInt32_args;
    Symbol::Resolved(&UInt16x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x2_operator_index_UInt32)->signature = "operator[](u32) u16"_c;
    Symbol::Resolved(&UInt16x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with Int16
    UInt16x2_operator_index_Int16_arg.name = "arg"_c;
    UInt16x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16x2_operator_index_Int16.name = UInt16x2_operator_index_Int16_name;
    UInt16x2_operator_index_Int16.backendIndex = 419;
    UInt16x2_operator_index_Int16.returnType = Type::FullType { UInt16Type.name };
    UInt16x2_operator_index_Int16.parameters = UInt16x2_operator_index_Int16_args;
    Symbol::Resolved(&UInt16x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x2_operator_index_Int16)->signature = "operator[](i16) u16"_c;
    Symbol::Resolved(&UInt16x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt16
    UInt16x2_operator_index_UInt16_arg.name = "arg"_c;
    UInt16x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16x2_operator_index_UInt16.name = UInt16x2_operator_index_UInt16_name;
    UInt16x2_operator_index_UInt16.backendIndex = 420;
    UInt16x2_operator_index_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16x2_operator_index_UInt16.parameters = UInt16x2_operator_index_UInt16_args;
    Symbol::Resolved(&UInt16x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x2_operator_index_UInt16)->signature = "operator[](u16) u16"_c;
    Symbol::Resolved(&UInt16x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator+ with UInt16x2
    UInt16x2_operator_add_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_add_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_add_UInt16x2.name = UInt16x2_operator_add_UInt16x2_name;
    UInt16x2_operator_add_UInt16x2.backendIndex = 421;
    UInt16x2_operator_add_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_add_UInt16x2.parameters = UInt16x2_operator_add_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_add_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_add_UInt16x2)->signature = "operator+(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_add_UInt16x2)->name = "operator+(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_add_UInt16x2)->nameWithVarNames = "operator+(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_add_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator- with UInt16x2
    UInt16x2_operator_sub_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_sub_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_sub_UInt16x2.name = UInt16x2_operator_sub_UInt16x2_name;
    UInt16x2_operator_sub_UInt16x2.backendIndex = 422;
    UInt16x2_operator_sub_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_sub_UInt16x2.parameters = UInt16x2_operator_sub_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_sub_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_sub_UInt16x2)->signature = "operator-(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_sub_UInt16x2)->name = "operator-(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_sub_UInt16x2)->nameWithVarNames = "operator-(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_sub_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator* with UInt16x2
    UInt16x2_operator_mul_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_mul_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_mul_UInt16x2.name = UInt16x2_operator_mul_UInt16x2_name;
    UInt16x2_operator_mul_UInt16x2.backendIndex = 423;
    UInt16x2_operator_mul_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_mul_UInt16x2.parameters = UInt16x2_operator_mul_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_mul_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_mul_UInt16x2)->signature = "operator*(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_mul_UInt16x2)->name = "operator*(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_mul_UInt16x2)->nameWithVarNames = "operator*(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_mul_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator/ with UInt16x2
    UInt16x2_operator_div_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_div_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_div_UInt16x2.name = UInt16x2_operator_div_UInt16x2_name;
    UInt16x2_operator_div_UInt16x2.backendIndex = 424;
    UInt16x2_operator_div_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_div_UInt16x2.parameters = UInt16x2_operator_div_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_div_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_div_UInt16x2)->signature = "operator/(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_div_UInt16x2)->name = "operator/(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_div_UInt16x2)->nameWithVarNames = "operator/(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_div_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator% with UInt16x2
    UInt16x2_operator_mod_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_mod_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_mod_UInt16x2.name = UInt16x2_operator_mod_UInt16x2_name;
    UInt16x2_operator_mod_UInt16x2.backendIndex = 425;
    UInt16x2_operator_mod_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_mod_UInt16x2.parameters = UInt16x2_operator_mod_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_mod_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_mod_UInt16x2)->signature = "operator%(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_mod_UInt16x2)->name = "operator%(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_mod_UInt16x2)->nameWithVarNames = "operator%(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_mod_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator+= with UInt16x2
    UInt16x2_operator_addasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_addasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_addasg_UInt16x2.name = UInt16x2_operator_addasg_UInt16x2_name;
    UInt16x2_operator_addasg_UInt16x2.backendIndex = 426;
    UInt16x2_operator_addasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_addasg_UInt16x2.parameters = UInt16x2_operator_addasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_addasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_addasg_UInt16x2)->signature = "operator+=(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_addasg_UInt16x2)->name = "operator+=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_addasg_UInt16x2)->nameWithVarNames = "operator+=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_addasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator-= with UInt16x2
    UInt16x2_operator_subasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_subasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_subasg_UInt16x2.name = UInt16x2_operator_subasg_UInt16x2_name;
    UInt16x2_operator_subasg_UInt16x2.backendIndex = 427;
    UInt16x2_operator_subasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_subasg_UInt16x2.parameters = UInt16x2_operator_subasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_subasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_subasg_UInt16x2)->signature = "operator-=(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_subasg_UInt16x2)->name = "operator-=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_subasg_UInt16x2)->nameWithVarNames = "operator-=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_subasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator*= with UInt16x2
    UInt16x2_operator_mulasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_mulasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_mulasg_UInt16x2.name = UInt16x2_operator_mulasg_UInt16x2_name;
    UInt16x2_operator_mulasg_UInt16x2.backendIndex = 428;
    UInt16x2_operator_mulasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_mulasg_UInt16x2.parameters = UInt16x2_operator_mulasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_mulasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_mulasg_UInt16x2)->signature = "operator*=(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_mulasg_UInt16x2)->name = "operator*=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_mulasg_UInt16x2)->nameWithVarNames = "operator*=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_mulasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator/= with UInt16x2
    UInt16x2_operator_divasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_divasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_divasg_UInt16x2.name = UInt16x2_operator_divasg_UInt16x2_name;
    UInt16x2_operator_divasg_UInt16x2.backendIndex = 429;
    UInt16x2_operator_divasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_divasg_UInt16x2.parameters = UInt16x2_operator_divasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_divasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_divasg_UInt16x2)->signature = "operator/=(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_divasg_UInt16x2)->name = "operator/=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_divasg_UInt16x2)->nameWithVarNames = "operator/=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_divasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator< with UInt16x2
    UInt16x2_operator_lt_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_lt_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_lt_UInt16x2.name = UInt16x2_operator_lt_UInt16x2_name;
    UInt16x2_operator_lt_UInt16x2.backendIndex = 430;
    UInt16x2_operator_lt_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt16x2_operator_lt_UInt16x2.parameters = UInt16x2_operator_lt_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_lt_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_lt_UInt16x2)->signature = "operator<(u16x2) b8x2"_c;
    Symbol::Resolved(&UInt16x2_operator_lt_UInt16x2)->name = "operator<(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lt_UInt16x2)->nameWithVarNames = "operator<(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lt_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator<= with UInt16x2
    UInt16x2_operator_lte_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_lte_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_lte_UInt16x2.name = UInt16x2_operator_lte_UInt16x2_name;
    UInt16x2_operator_lte_UInt16x2.backendIndex = 431;
    UInt16x2_operator_lte_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt16x2_operator_lte_UInt16x2.parameters = UInt16x2_operator_lte_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_lte_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_lte_UInt16x2)->signature = "operator<=(u16x2) b8x2"_c;
    Symbol::Resolved(&UInt16x2_operator_lte_UInt16x2)->name = "operator<=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lte_UInt16x2)->nameWithVarNames = "operator<=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lte_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator> with UInt16x2
    UInt16x2_operator_gt_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_gt_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_gt_UInt16x2.name = UInt16x2_operator_gt_UInt16x2_name;
    UInt16x2_operator_gt_UInt16x2.backendIndex = 432;
    UInt16x2_operator_gt_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt16x2_operator_gt_UInt16x2.parameters = UInt16x2_operator_gt_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_gt_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_gt_UInt16x2)->signature = "operator>(u16x2) b8x2"_c;
    Symbol::Resolved(&UInt16x2_operator_gt_UInt16x2)->name = "operator>(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_gt_UInt16x2)->nameWithVarNames = "operator>(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_gt_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator>= with UInt16x2
    UInt16x2_operator_gte_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_gte_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_gte_UInt16x2.name = UInt16x2_operator_gte_UInt16x2_name;
    UInt16x2_operator_gte_UInt16x2.backendIndex = 433;
    UInt16x2_operator_gte_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt16x2_operator_gte_UInt16x2.parameters = UInt16x2_operator_gte_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_gte_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_gte_UInt16x2)->signature = "operator>=(u16x2) b8x2"_c;
    Symbol::Resolved(&UInt16x2_operator_gte_UInt16x2)->name = "operator>=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_gte_UInt16x2)->nameWithVarNames = "operator>=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_gte_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator== with UInt16x2
    UInt16x2_operator_eq_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_eq_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_eq_UInt16x2.name = UInt16x2_operator_eq_UInt16x2_name;
    UInt16x2_operator_eq_UInt16x2.backendIndex = 434;
    UInt16x2_operator_eq_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt16x2_operator_eq_UInt16x2.parameters = UInt16x2_operator_eq_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_eq_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_eq_UInt16x2)->signature = "operator==(u16x2) b8x2"_c;
    Symbol::Resolved(&UInt16x2_operator_eq_UInt16x2)->name = "operator==(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_eq_UInt16x2)->nameWithVarNames = "operator==(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_eq_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator!= with UInt16x2
    UInt16x2_operator_neq_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_neq_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_neq_UInt16x2.name = UInt16x2_operator_neq_UInt16x2_name;
    UInt16x2_operator_neq_UInt16x2.backendIndex = 435;
    UInt16x2_operator_neq_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt16x2_operator_neq_UInt16x2.parameters = UInt16x2_operator_neq_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_neq_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_neq_UInt16x2)->signature = "operator!=(u16x2) b8x2"_c;
    Symbol::Resolved(&UInt16x2_operator_neq_UInt16x2)->name = "operator!=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_neq_UInt16x2)->nameWithVarNames = "operator!=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_neq_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator* with Float16
    UInt16x2_operator_scale_Float16_arg.name = "arg"_c;
    UInt16x2_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt16x2_operator_scale_Float16.name = UInt16x2_operator_scale_Float16_name;
    UInt16x2_operator_scale_Float16.backendIndex = 436;
    UInt16x2_operator_scale_Float16.returnType = Type::FullType { Float16x2Type.name };
    UInt16x2_operator_scale_Float16.parameters = UInt16x2_operator_scale_Float16_args;
    Symbol::Resolved(&UInt16x2_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x2_operator_scale_Float16)->signature = "operator*(f16) f16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_Float16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with UInt16
    UInt16x2_operator_scale_UInt16_arg.name = "arg"_c;
    UInt16x2_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16x2_operator_scale_UInt16.name = UInt16x2_operator_scale_UInt16_name;
    UInt16x2_operator_scale_UInt16.backendIndex = 437;
    UInt16x2_operator_scale_UInt16.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_scale_UInt16.parameters = UInt16x2_operator_scale_UInt16_args;
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16)->signature = "operator*(u16) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16)->returnTypeSymbol = &UInt16x2Type;

    /// operator* with Int16
    UInt16x2_operator_scale_Int16_arg.name = "arg"_c;
    UInt16x2_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16x2_operator_scale_Int16.name = UInt16x2_operator_scale_Int16_name;
    UInt16x2_operator_scale_Int16.backendIndex = 438;
    UInt16x2_operator_scale_Int16.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_scale_Int16.parameters = UInt16x2_operator_scale_Int16_args;
    Symbol::Resolved(&UInt16x2_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x2_operator_scale_Int16)->signature = "operator*(i16) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_Int16)->returnTypeSymbol = &UInt16x2Type;

    /// operator| with UInt16x2
    UInt16x2_operator_or_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_or_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_or_UInt16x2.name = UInt16x2_operator_or_UInt16x2_name;
    UInt16x2_operator_or_UInt16x2.backendIndex = 439;
    UInt16x2_operator_or_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_or_UInt16x2.parameters = UInt16x2_operator_or_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_or_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_or_UInt16x2)->signature = "operator|(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_or_UInt16x2)->name = "operator|(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_or_UInt16x2)->nameWithVarNames = "operator|(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_or_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator& with UInt16x2
    UInt16x2_operator_and_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_and_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_and_UInt16x2.name = UInt16x2_operator_and_UInt16x2_name;
    UInt16x2_operator_and_UInt16x2.backendIndex = 440;
    UInt16x2_operator_and_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_and_UInt16x2.parameters = UInt16x2_operator_and_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_and_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_and_UInt16x2)->signature = "operator&(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_and_UInt16x2)->name = "operator&(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_and_UInt16x2)->nameWithVarNames = "operator&(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_and_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator^ with UInt16x2
    UInt16x2_operator_xor_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_xor_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_xor_UInt16x2.name = UInt16x2_operator_xor_UInt16x2_name;
    UInt16x2_operator_xor_UInt16x2.backendIndex = 441;
    UInt16x2_operator_xor_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_xor_UInt16x2.parameters = UInt16x2_operator_xor_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_xor_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_xor_UInt16x2)->signature = "operator^(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_xor_UInt16x2)->name = "operator^(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_xor_UInt16x2)->nameWithVarNames = "operator^(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_xor_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator<< with UInt16x2
    UInt16x2_operator_lsh_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_lsh_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_lsh_UInt16x2.name = UInt16x2_operator_lsh_UInt16x2_name;
    UInt16x2_operator_lsh_UInt16x2.backendIndex = 442;
    UInt16x2_operator_lsh_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_lsh_UInt16x2.parameters = UInt16x2_operator_lsh_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_lsh_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_lsh_UInt16x2)->signature = "operator<<(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_lsh_UInt16x2)->name = "operator<<(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lsh_UInt16x2)->nameWithVarNames = "operator<<(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lsh_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator>> with UInt16x2
    UInt16x2_operator_rsh_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_rsh_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_rsh_UInt16x2.name = UInt16x2_operator_rsh_UInt16x2_name;
    UInt16x2_operator_rsh_UInt16x2.backendIndex = 443;
    UInt16x2_operator_rsh_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_rsh_UInt16x2.parameters = UInt16x2_operator_rsh_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_rsh_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_rsh_UInt16x2)->signature = "operator>>(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_rsh_UInt16x2)->name = "operator>>(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_rsh_UInt16x2)->nameWithVarNames = "operator>>(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_rsh_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator|= with UInt16x2
    UInt16x2_operator_orasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_orasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_orasg_UInt16x2.name = UInt16x2_operator_orasg_UInt16x2_name;
    UInt16x2_operator_orasg_UInt16x2.backendIndex = 444;
    UInt16x2_operator_orasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_orasg_UInt16x2.parameters = UInt16x2_operator_orasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_orasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_orasg_UInt16x2)->signature = "operator|=(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_orasg_UInt16x2)->name = "operator|=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_orasg_UInt16x2)->nameWithVarNames = "operator|=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_orasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator&= with UInt16x2
    UInt16x2_operator_andasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_andasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_andasg_UInt16x2.name = UInt16x2_operator_andasg_UInt16x2_name;
    UInt16x2_operator_andasg_UInt16x2.backendIndex = 445;
    UInt16x2_operator_andasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_andasg_UInt16x2.parameters = UInt16x2_operator_andasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_andasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_andasg_UInt16x2)->signature = "operator&=(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_andasg_UInt16x2)->name = "operator&=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_andasg_UInt16x2)->nameWithVarNames = "operator&=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_andasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator^= with UInt16x2
    UInt16x2_operator_xorasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_xorasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_xorasg_UInt16x2.name = UInt16x2_operator_xorasg_UInt16x2_name;
    UInt16x2_operator_xorasg_UInt16x2.backendIndex = 446;
    UInt16x2_operator_xorasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_xorasg_UInt16x2.parameters = UInt16x2_operator_xorasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_xorasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_xorasg_UInt16x2)->signature = "operator^=(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_xorasg_UInt16x2)->name = "operator^=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_xorasg_UInt16x2)->nameWithVarNames = "operator^=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_xorasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator<<= with UInt16x2
    UInt16x2_operator_lshasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_lshasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_lshasg_UInt16x2.name = UInt16x2_operator_lshasg_UInt16x2_name;
    UInt16x2_operator_lshasg_UInt16x2.backendIndex = 447;
    UInt16x2_operator_lshasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_lshasg_UInt16x2.parameters = UInt16x2_operator_lshasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_lshasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_lshasg_UInt16x2)->signature = "operator<<=(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_lshasg_UInt16x2)->name = "operator<<=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lshasg_UInt16x2)->nameWithVarNames = "operator<<=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lshasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator>>= with UInt16x2
    UInt16x2_operator_rhsasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_rhsasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_rhsasg_UInt16x2.name = UInt16x2_operator_rhsasg_UInt16x2_name;
    UInt16x2_operator_rhsasg_UInt16x2.backendIndex = 448;
    UInt16x2_operator_rhsasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_rhsasg_UInt16x2.parameters = UInt16x2_operator_rhsasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_rhsasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_rhsasg_UInt16x2)->signature = "operator>>=(u16x2) u16x2"_c;
    Symbol::Resolved(&UInt16x2_operator_rhsasg_UInt16x2)->name = "operator>>=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_rhsasg_UInt16x2)->nameWithVarNames = "operator>>=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_rhsasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    this->scope.symbolLookup = UInt16x2_symbolLookup;
}
UInt16x2 UInt16x2Type;

/// operator[] with Int32
Variable Int16x2_operator_index_Int32_arg;
Function Int16x2_operator_index_Int32;
inline constexpr std::array Int16x2_operator_index_Int32_args = { &Int16x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int16x2_operator_index_UInt32_arg;
Function Int16x2_operator_index_UInt32;
inline constexpr std::array Int16x2_operator_index_UInt32_args = { &Int16x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int16x2_operator_index_Int16_arg;
Function Int16x2_operator_index_Int16;
inline constexpr std::array Int16x2_operator_index_Int16_args = { &Int16x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int16x2_operator_index_UInt16_arg;
Function Int16x2_operator_index_UInt16;
inline constexpr std::array Int16x2_operator_index_UInt16_args = { &Int16x2_operator_index_UInt16_arg };

/// operator+ with Int16x2
Variable Int16x2_operator_add_Int16x2_arg;
Function Int16x2_operator_add_Int16x2;
inline constexpr std::array Int16x2_operator_add_Int16x2_args = { &Int16x2_operator_add_Int16x2_arg };

/// operator- with Int16x2
Variable Int16x2_operator_sub_Int16x2_arg;
Function Int16x2_operator_sub_Int16x2;
inline constexpr std::array Int16x2_operator_sub_Int16x2_args = { &Int16x2_operator_sub_Int16x2_arg };

/// operator* with Int16x2
Variable Int16x2_operator_mul_Int16x2_arg;
Function Int16x2_operator_mul_Int16x2;
inline constexpr std::array Int16x2_operator_mul_Int16x2_args = { &Int16x2_operator_mul_Int16x2_arg };

/// operator/ with Int16x2
Variable Int16x2_operator_div_Int16x2_arg;
Function Int16x2_operator_div_Int16x2;
inline constexpr std::array Int16x2_operator_div_Int16x2_args = { &Int16x2_operator_div_Int16x2_arg };

/// operator% with Int16x2
Variable Int16x2_operator_mod_Int16x2_arg;
Function Int16x2_operator_mod_Int16x2;
inline constexpr std::array Int16x2_operator_mod_Int16x2_args = { &Int16x2_operator_mod_Int16x2_arg };

/// operator+= with Int16x2
Variable Int16x2_operator_addasg_Int16x2_arg;
Function Int16x2_operator_addasg_Int16x2;
inline constexpr std::array Int16x2_operator_addasg_Int16x2_args = { &Int16x2_operator_addasg_Int16x2_arg };

/// operator-= with Int16x2
Variable Int16x2_operator_subasg_Int16x2_arg;
Function Int16x2_operator_subasg_Int16x2;
inline constexpr std::array Int16x2_operator_subasg_Int16x2_args = { &Int16x2_operator_subasg_Int16x2_arg };

/// operator*= with Int16x2
Variable Int16x2_operator_mulasg_Int16x2_arg;
Function Int16x2_operator_mulasg_Int16x2;
inline constexpr std::array Int16x2_operator_mulasg_Int16x2_args = { &Int16x2_operator_mulasg_Int16x2_arg };

/// operator/= with Int16x2
Variable Int16x2_operator_divasg_Int16x2_arg;
Function Int16x2_operator_divasg_Int16x2;
inline constexpr std::array Int16x2_operator_divasg_Int16x2_args = { &Int16x2_operator_divasg_Int16x2_arg };

/// operator< with Int16x2
Variable Int16x2_operator_lt_Int16x2_arg;
Function Int16x2_operator_lt_Int16x2;
inline constexpr std::array Int16x2_operator_lt_Int16x2_args = { &Int16x2_operator_lt_Int16x2_arg };

/// operator<= with Int16x2
Variable Int16x2_operator_lte_Int16x2_arg;
Function Int16x2_operator_lte_Int16x2;
inline constexpr std::array Int16x2_operator_lte_Int16x2_args = { &Int16x2_operator_lte_Int16x2_arg };

/// operator> with Int16x2
Variable Int16x2_operator_gt_Int16x2_arg;
Function Int16x2_operator_gt_Int16x2;
inline constexpr std::array Int16x2_operator_gt_Int16x2_args = { &Int16x2_operator_gt_Int16x2_arg };

/// operator>= with Int16x2
Variable Int16x2_operator_gte_Int16x2_arg;
Function Int16x2_operator_gte_Int16x2;
inline constexpr std::array Int16x2_operator_gte_Int16x2_args = { &Int16x2_operator_gte_Int16x2_arg };

/// operator== with Int16x2
Variable Int16x2_operator_eq_Int16x2_arg;
Function Int16x2_operator_eq_Int16x2;
inline constexpr std::array Int16x2_operator_eq_Int16x2_args = { &Int16x2_operator_eq_Int16x2_arg };

/// operator!= with Int16x2
Variable Int16x2_operator_neq_Int16x2_arg;
Function Int16x2_operator_neq_Int16x2;
inline constexpr std::array Int16x2_operator_neq_Int16x2_args = { &Int16x2_operator_neq_Int16x2_arg };

/// operator* with Float16
Variable Int16x2_operator_scale_Float16_arg;
Function Int16x2_operator_scale_Float16;
inline constexpr std::array Int16x2_operator_scale_Float16_args = { &Int16x2_operator_scale_Float16_arg };

/// operator* with UInt16
Variable Int16x2_operator_scale_UInt16_arg;
Function Int16x2_operator_scale_UInt16;
inline constexpr std::array Int16x2_operator_scale_UInt16_args = { &Int16x2_operator_scale_UInt16_arg };

/// operator* with Int16
Variable Int16x2_operator_scale_Int16_arg;
Function Int16x2_operator_scale_Int16;
inline constexpr std::array Int16x2_operator_scale_Int16_args = { &Int16x2_operator_scale_Int16_arg };

/// operator| with Int16x2
Variable Int16x2_operator_or_Int16x2_arg;
Function Int16x2_operator_or_Int16x2;
inline constexpr std::array Int16x2_operator_or_Int16x2_args = { &Int16x2_operator_or_Int16x2_arg };

/// operator& with Int16x2
Variable Int16x2_operator_and_Int16x2_arg;
Function Int16x2_operator_and_Int16x2;
inline constexpr std::array Int16x2_operator_and_Int16x2_args = { &Int16x2_operator_and_Int16x2_arg };

/// operator^ with Int16x2
Variable Int16x2_operator_xor_Int16x2_arg;
Function Int16x2_operator_xor_Int16x2;
inline constexpr std::array Int16x2_operator_xor_Int16x2_args = { &Int16x2_operator_xor_Int16x2_arg };

/// operator<< with Int16x2
Variable Int16x2_operator_lsh_Int16x2_arg;
Function Int16x2_operator_lsh_Int16x2;
inline constexpr std::array Int16x2_operator_lsh_Int16x2_args = { &Int16x2_operator_lsh_Int16x2_arg };

/// operator>> with Int16x2
Variable Int16x2_operator_rsh_Int16x2_arg;
Function Int16x2_operator_rsh_Int16x2;
inline constexpr std::array Int16x2_operator_rsh_Int16x2_args = { &Int16x2_operator_rsh_Int16x2_arg };

/// operator|= with Int16x2
Variable Int16x2_operator_orasg_Int16x2_arg;
Function Int16x2_operator_orasg_Int16x2;
inline constexpr std::array Int16x2_operator_orasg_Int16x2_args = { &Int16x2_operator_orasg_Int16x2_arg };

/// operator&= with Int16x2
Variable Int16x2_operator_andasg_Int16x2_arg;
Function Int16x2_operator_andasg_Int16x2;
inline constexpr std::array Int16x2_operator_andasg_Int16x2_args = { &Int16x2_operator_andasg_Int16x2_arg };

/// operator^= with Int16x2
Variable Int16x2_operator_xorasg_Int16x2_arg;
Function Int16x2_operator_xorasg_Int16x2;
inline constexpr std::array Int16x2_operator_xorasg_Int16x2_args = { &Int16x2_operator_xorasg_Int16x2_arg };

/// operator<<= with Int16x2
Variable Int16x2_operator_lshasg_Int16x2_arg;
Function Int16x2_operator_lshasg_Int16x2;
inline constexpr std::array Int16x2_operator_lshasg_Int16x2_args = { &Int16x2_operator_lshasg_Int16x2_arg };

/// operator>>= with Int16x2
Variable Int16x2_operator_rhsasg_Int16x2_arg;
Function Int16x2_operator_rhsasg_Int16x2;
inline constexpr std::array Int16x2_operator_rhsasg_Int16x2_args = { &Int16x2_operator_rhsasg_Int16x2_arg };

static constexpr StaticMap<HashString, Symbol*, 124> Int16x2_symbolLookup = {
    std::pair{ "operator+(i16x2)"_h, &Int16x2_operator_add_Int16x2 },
    std::pair{ "gg"_h, &Int16x2Type },
    std::pair{ "gr"_h, &Int16x2Type },
    std::pair{ "rr"_h, &Int16x2Type },
    std::pair{ "rg"_h, &Int16x2Type },
    std::pair{ "yx"_h, &Int16x2Type },
    std::pair{ "yy"_h, &Int16x2Type },
    std::pair{ "xy"_h, &Int16x2Type },
    std::pair{ "xx"_h, &Int16x2Type },
    std::pair{ "operator[](i16)"_h, &Int16x2_operator_index_Int16 },
    std::pair{ "operator>>=(i16x2)"_h, &Int16x2_operator_rhsasg_Int16x2 },
    std::pair{ "operator<<=(i16x2)"_h, &Int16x2_operator_lshasg_Int16x2 },
    std::pair{ "operator%(i16x2)"_h, &Int16x2_operator_mod_Int16x2 },
    std::pair{ "operator&(i16x2)"_h, &Int16x2_operator_and_Int16x2 },
    std::pair{ "operator*(u16)"_h, &Int16x2_operator_scale_UInt16 },
    std::pair{ "operator/=(i16x2)"_h, &Int16x2_operator_divasg_Int16x2 },
    std::pair{ "operator^"_h, &Int16x2_operator_xor_Int16x2 },
    std::pair{ "operator|"_h, &Int16x2_operator_or_Int16x2 },
    std::pair{ "operator<"_h, &Int16x2_operator_lt_Int16x2 },
    std::pair{ "operator>"_h, &Int16x2_operator_gt_Int16x2 },
    std::pair{ "operator-"_h, &Int16x2_operator_sub_Int16x2 },
    std::pair{ "operator/"_h, &Int16x2_operator_div_Int16x2 },
    std::pair{ "operator+"_h, &Int16x2_operator_add_Int16x2 },
    std::pair{ "operator*"_h, &Int16x2_operator_mul_Int16x2 },
    std::pair{ "operator*"_h, &Int16x2_operator_scale_Float16 },
    std::pair{ "operator*"_h, &Int16x2_operator_scale_UInt16 },
    std::pair{ "operator*"_h, &Int16x2_operator_scale_Int16 },
    std::pair{ "operator%"_h, &Int16x2_operator_mod_Int16x2 },
    std::pair{ "operator&"_h, &Int16x2_operator_and_Int16x2 },
    std::pair{ "yxxx"_h, &Int16x4Type },
    std::pair{ "yxxy"_h, &Int16x4Type },
    std::pair{ "yxyy"_h, &Int16x4Type },
    std::pair{ "yxyx"_h, &Int16x4Type },
    std::pair{ "xyxx"_h, &Int16x4Type },
    std::pair{ "xyxy"_h, &Int16x4Type },
    std::pair{ "xyyy"_h, &Int16x4Type },
    std::pair{ "xyyx"_h, &Int16x4Type },
    std::pair{ "ggrr"_h, &Int16x4Type },
    std::pair{ "ggrg"_h, &Int16x4Type },
    std::pair{ "gggr"_h, &Int16x4Type },
    std::pair{ "gggg"_h, &Int16x4Type },
    std::pair{ "yyyx"_h, &Int16x4Type },
    std::pair{ "yyyy"_h, &Int16x4Type },
    std::pair{ "yyxy"_h, &Int16x4Type },
    std::pair{ "yyxx"_h, &Int16x4Type },
    std::pair{ "xxyx"_h, &Int16x4Type },
    std::pair{ "xxyy"_h, &Int16x4Type },
    std::pair{ "xxxy"_h, &Int16x4Type },
    std::pair{ "xxxx"_h, &Int16x4Type },
    std::pair{ "rgrg"_h, &Int16x4Type },
    std::pair{ "rgrr"_h, &Int16x4Type },
    std::pair{ "rggg"_h, &Int16x4Type },
    std::pair{ "rggr"_h, &Int16x4Type },
    std::pair{ "operator>(i16x2)"_h, &Int16x2_operator_gt_Int16x2 },
    std::pair{ "operator<<(i16x2)"_h, &Int16x2_operator_lsh_Int16x2 },
    std::pair{ "operator^=(i16x2)"_h, &Int16x2_operator_xorasg_Int16x2 },
    std::pair{ "operator==(i16x2)"_h, &Int16x2_operator_eq_Int16x2 },
    std::pair{ "operator<(i16x2)"_h, &Int16x2_operator_lt_Int16x2 },
    std::pair{ "operator*=(i16x2)"_h, &Int16x2_operator_mulasg_Int16x2 },
    std::pair{ "operator&=(i16x2)"_h, &Int16x2_operator_andasg_Int16x2 },
    std::pair{ "rrg"_h, &Int16x3Type },
    std::pair{ "rrr"_h, &Int16x3Type },
    std::pair{ "rgr"_h, &Int16x3Type },
    std::pair{ "rgg"_h, &Int16x3Type },
    std::pair{ "operator[](u32)"_h, &Int16x2_operator_index_UInt32 },
    std::pair{ "operator^(i16x2)"_h, &Int16x2_operator_xor_Int16x2 },
    std::pair{ "operator/(i16x2)"_h, &Int16x2_operator_div_Int16x2 },
    std::pair{ "operator<<="_h, &Int16x2_operator_lshasg_Int16x2 },
    std::pair{ "operator-(i16x2)"_h, &Int16x2_operator_sub_Int16x2 },
    std::pair{ "operator[](u16)"_h, &Int16x2_operator_index_UInt16 },
    std::pair{ "operator>>="_h, &Int16x2_operator_rhsasg_Int16x2 },
    std::pair{ "operator*(f16)"_h, &Int16x2_operator_scale_Float16 },
    std::pair{ "operator*(i16x2)"_h, &Int16x2_operator_mul_Int16x2 },
    std::pair{ "g"_h, &Int16Type },
    std::pair{ "r"_h, &Int16Type },
    std::pair{ "y"_h, &Int16Type },
    std::pair{ "x"_h, &Int16Type },
    std::pair{ "yxx"_h, &Int16x3Type },
    std::pair{ "yxy"_h, &Int16x3Type },
    std::pair{ "yyy"_h, &Int16x3Type },
    std::pair{ "yyx"_h, &Int16x3Type },
    std::pair{ "operator-=(i16x2)"_h, &Int16x2_operator_subasg_Int16x2 },
    std::pair{ "operator>>(i16x2)"_h, &Int16x2_operator_rsh_Int16x2 },
    std::pair{ "xyx"_h, &Int16x3Type },
    std::pair{ "xyy"_h, &Int16x3Type },
    std::pair{ "xxy"_h, &Int16x3Type },
    std::pair{ "xxx"_h, &Int16x3Type },
    std::pair{ "operator*(i16)"_h, &Int16x2_operator_scale_Int16 },
    std::pair{ "operator<=(i16x2)"_h, &Int16x2_operator_lte_Int16x2 },
    std::pair{ "operator|(i16x2)"_h, &Int16x2_operator_or_Int16x2 },
    std::pair{ "operator>=(i16x2)"_h, &Int16x2_operator_gte_Int16x2 },
    std::pair{ "ggr"_h, &Int16x3Type },
    std::pair{ "ggg"_h, &Int16x3Type },
    std::pair{ "grr"_h, &Int16x3Type },
    std::pair{ "grg"_h, &Int16x3Type },
    std::pair{ "operator+=(i16x2)"_h, &Int16x2_operator_addasg_Int16x2 },
    std::pair{ "operator!=(i16x2)"_h, &Int16x2_operator_neq_Int16x2 },
    std::pair{ "operator^="_h, &Int16x2_operator_xorasg_Int16x2 },
    std::pair{ "operator[]"_h, &Int16x2_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Int16x2_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Int16x2_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Int16x2_operator_index_UInt16 },
    std::pair{ "operator|="_h, &Int16x2_operator_orasg_Int16x2 },
    std::pair{ "operator=="_h, &Int16x2_operator_eq_Int16x2 },
    std::pair{ "operator<="_h, &Int16x2_operator_lte_Int16x2 },
    std::pair{ "operator<<"_h, &Int16x2_operator_lsh_Int16x2 },
    std::pair{ "operator>="_h, &Int16x2_operator_gte_Int16x2 },
    std::pair{ "operator>>"_h, &Int16x2_operator_rsh_Int16x2 },
    std::pair{ "operator-="_h, &Int16x2_operator_subasg_Int16x2 },
    std::pair{ "operator/="_h, &Int16x2_operator_divasg_Int16x2 },
    std::pair{ "operator+="_h, &Int16x2_operator_addasg_Int16x2 },
    std::pair{ "operator*="_h, &Int16x2_operator_mulasg_Int16x2 },
    std::pair{ "operator&="_h, &Int16x2_operator_andasg_Int16x2 },
    std::pair{ "operator!="_h, &Int16x2_operator_neq_Int16x2 },
    std::pair{ "operator|=(i16x2)"_h, &Int16x2_operator_orasg_Int16x2 },
    std::pair{ "operator[](i32)"_h, &Int16x2_operator_index_Int32 },
    std::pair{ "grrg"_h, &Int16x4Type },
    std::pair{ "grrr"_h, &Int16x4Type },
    std::pair{ "grgg"_h, &Int16x4Type },
    std::pair{ "grgr"_h, &Int16x4Type },
    std::pair{ "rrgg"_h, &Int16x4Type },
    std::pair{ "rrgr"_h, &Int16x4Type },
    std::pair{ "rrrr"_h, &Int16x4Type },
    std::pair{ "rrrg"_h, &Int16x4Type }
    };

Int16x2::Int16x2()
{
    this->name = "i16x2"_c;
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    /// operator[] with Int32
    Int16x2_operator_index_Int32_arg.name = "arg"_c;
    Int16x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int16x2_operator_index_Int32.name = Int16x2_operator_index_Int32_name;
    Int16x2_operator_index_Int32.backendIndex = 464;
    Int16x2_operator_index_Int32.returnType = Type::FullType { Int16Type.name };
    Int16x2_operator_index_Int32.parameters = Int16x2_operator_index_Int32_args;
    Symbol::Resolved(&Int16x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x2_operator_index_Int32)->signature = "operator[](i32) i16"_c;
    Symbol::Resolved(&Int16x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int16x2_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int16x2_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt32
    Int16x2_operator_index_UInt32_arg.name = "arg"_c;
    Int16x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int16x2_operator_index_UInt32.name = Int16x2_operator_index_UInt32_name;
    Int16x2_operator_index_UInt32.backendIndex = 465;
    Int16x2_operator_index_UInt32.returnType = Type::FullType { Int16Type.name };
    Int16x2_operator_index_UInt32.parameters = Int16x2_operator_index_UInt32_args;
    Symbol::Resolved(&Int16x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x2_operator_index_UInt32)->signature = "operator[](u32) i16"_c;
    Symbol::Resolved(&Int16x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int16x2_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int16x2_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    /// operator[] with Int16
    Int16x2_operator_index_Int16_arg.name = "arg"_c;
    Int16x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x2_operator_index_Int16.name = Int16x2_operator_index_Int16_name;
    Int16x2_operator_index_Int16.backendIndex = 466;
    Int16x2_operator_index_Int16.returnType = Type::FullType { Int16Type.name };
    Int16x2_operator_index_Int16.parameters = Int16x2_operator_index_Int16_args;
    Symbol::Resolved(&Int16x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x2_operator_index_Int16)->signature = "operator[](i16) i16"_c;
    Symbol::Resolved(&Int16x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int16x2_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int16x2_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt16
    Int16x2_operator_index_UInt16_arg.name = "arg"_c;
    Int16x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x2_operator_index_UInt16.name = Int16x2_operator_index_UInt16_name;
    Int16x2_operator_index_UInt16.backendIndex = 467;
    Int16x2_operator_index_UInt16.returnType = Type::FullType { Int16Type.name };
    Int16x2_operator_index_UInt16.parameters = Int16x2_operator_index_UInt16_args;
    Symbol::Resolved(&Int16x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x2_operator_index_UInt16)->signature = "operator[](u16) i16"_c;
    Symbol::Resolved(&Int16x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int16x2_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int16x2_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    /// operator+ with Int16x2
    Int16x2_operator_add_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_add_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_add_Int16x2.name = Int16x2_operator_add_Int16x2_name;
    Int16x2_operator_add_Int16x2.backendIndex = 468;
    Int16x2_operator_add_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_add_Int16x2.parameters = Int16x2_operator_add_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_add_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_add_Int16x2)->signature = "operator+(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_add_Int16x2)->name = "operator+(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_add_Int16x2)->nameWithVarNames = "operator+(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_add_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator- with Int16x2
    Int16x2_operator_sub_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_sub_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_sub_Int16x2.name = Int16x2_operator_sub_Int16x2_name;
    Int16x2_operator_sub_Int16x2.backendIndex = 469;
    Int16x2_operator_sub_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_sub_Int16x2.parameters = Int16x2_operator_sub_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_sub_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_sub_Int16x2)->signature = "operator-(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_sub_Int16x2)->name = "operator-(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_sub_Int16x2)->nameWithVarNames = "operator-(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_sub_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator* with Int16x2
    Int16x2_operator_mul_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_mul_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_mul_Int16x2.name = Int16x2_operator_mul_Int16x2_name;
    Int16x2_operator_mul_Int16x2.backendIndex = 470;
    Int16x2_operator_mul_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_mul_Int16x2.parameters = Int16x2_operator_mul_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_mul_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_mul_Int16x2)->signature = "operator*(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_mul_Int16x2)->name = "operator*(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_mul_Int16x2)->nameWithVarNames = "operator*(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_mul_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator/ with Int16x2
    Int16x2_operator_div_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_div_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_div_Int16x2.name = Int16x2_operator_div_Int16x2_name;
    Int16x2_operator_div_Int16x2.backendIndex = 471;
    Int16x2_operator_div_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_div_Int16x2.parameters = Int16x2_operator_div_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_div_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_div_Int16x2)->signature = "operator/(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_div_Int16x2)->name = "operator/(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_div_Int16x2)->nameWithVarNames = "operator/(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_div_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator% with Int16x2
    Int16x2_operator_mod_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_mod_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_mod_Int16x2.name = Int16x2_operator_mod_Int16x2_name;
    Int16x2_operator_mod_Int16x2.backendIndex = 472;
    Int16x2_operator_mod_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_mod_Int16x2.parameters = Int16x2_operator_mod_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_mod_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_mod_Int16x2)->signature = "operator%(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_mod_Int16x2)->name = "operator%(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_mod_Int16x2)->nameWithVarNames = "operator%(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_mod_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator+= with Int16x2
    Int16x2_operator_addasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_addasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_addasg_Int16x2.name = Int16x2_operator_addasg_Int16x2_name;
    Int16x2_operator_addasg_Int16x2.backendIndex = 473;
    Int16x2_operator_addasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_addasg_Int16x2.parameters = Int16x2_operator_addasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_addasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_addasg_Int16x2)->signature = "operator+=(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_addasg_Int16x2)->name = "operator+=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_addasg_Int16x2)->nameWithVarNames = "operator+=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_addasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator-= with Int16x2
    Int16x2_operator_subasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_subasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_subasg_Int16x2.name = Int16x2_operator_subasg_Int16x2_name;
    Int16x2_operator_subasg_Int16x2.backendIndex = 474;
    Int16x2_operator_subasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_subasg_Int16x2.parameters = Int16x2_operator_subasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_subasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_subasg_Int16x2)->signature = "operator-=(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_subasg_Int16x2)->name = "operator-=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_subasg_Int16x2)->nameWithVarNames = "operator-=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_subasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator*= with Int16x2
    Int16x2_operator_mulasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_mulasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_mulasg_Int16x2.name = Int16x2_operator_mulasg_Int16x2_name;
    Int16x2_operator_mulasg_Int16x2.backendIndex = 475;
    Int16x2_operator_mulasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_mulasg_Int16x2.parameters = Int16x2_operator_mulasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_mulasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_mulasg_Int16x2)->signature = "operator*=(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_mulasg_Int16x2)->name = "operator*=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_mulasg_Int16x2)->nameWithVarNames = "operator*=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_mulasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator/= with Int16x2
    Int16x2_operator_divasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_divasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_divasg_Int16x2.name = Int16x2_operator_divasg_Int16x2_name;
    Int16x2_operator_divasg_Int16x2.backendIndex = 476;
    Int16x2_operator_divasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_divasg_Int16x2.parameters = Int16x2_operator_divasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_divasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_divasg_Int16x2)->signature = "operator/=(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_divasg_Int16x2)->name = "operator/=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_divasg_Int16x2)->nameWithVarNames = "operator/=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_divasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator< with Int16x2
    Int16x2_operator_lt_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_lt_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_lt_Int16x2.name = Int16x2_operator_lt_Int16x2_name;
    Int16x2_operator_lt_Int16x2.backendIndex = 477;
    Int16x2_operator_lt_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Int16x2_operator_lt_Int16x2.parameters = Int16x2_operator_lt_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_lt_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_lt_Int16x2)->signature = "operator<(i16x2) b8x2"_c;
    Symbol::Resolved(&Int16x2_operator_lt_Int16x2)->name = "operator<(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lt_Int16x2)->nameWithVarNames = "operator<(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lt_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator<= with Int16x2
    Int16x2_operator_lte_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_lte_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_lte_Int16x2.name = Int16x2_operator_lte_Int16x2_name;
    Int16x2_operator_lte_Int16x2.backendIndex = 478;
    Int16x2_operator_lte_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Int16x2_operator_lte_Int16x2.parameters = Int16x2_operator_lte_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_lte_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_lte_Int16x2)->signature = "operator<=(i16x2) b8x2"_c;
    Symbol::Resolved(&Int16x2_operator_lte_Int16x2)->name = "operator<=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lte_Int16x2)->nameWithVarNames = "operator<=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lte_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator> with Int16x2
    Int16x2_operator_gt_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_gt_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_gt_Int16x2.name = Int16x2_operator_gt_Int16x2_name;
    Int16x2_operator_gt_Int16x2.backendIndex = 479;
    Int16x2_operator_gt_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Int16x2_operator_gt_Int16x2.parameters = Int16x2_operator_gt_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_gt_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_gt_Int16x2)->signature = "operator>(i16x2) b8x2"_c;
    Symbol::Resolved(&Int16x2_operator_gt_Int16x2)->name = "operator>(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_gt_Int16x2)->nameWithVarNames = "operator>(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_gt_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator>= with Int16x2
    Int16x2_operator_gte_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_gte_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_gte_Int16x2.name = Int16x2_operator_gte_Int16x2_name;
    Int16x2_operator_gte_Int16x2.backendIndex = 480;
    Int16x2_operator_gte_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Int16x2_operator_gte_Int16x2.parameters = Int16x2_operator_gte_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_gte_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_gte_Int16x2)->signature = "operator>=(i16x2) b8x2"_c;
    Symbol::Resolved(&Int16x2_operator_gte_Int16x2)->name = "operator>=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_gte_Int16x2)->nameWithVarNames = "operator>=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_gte_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator== with Int16x2
    Int16x2_operator_eq_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_eq_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_eq_Int16x2.name = Int16x2_operator_eq_Int16x2_name;
    Int16x2_operator_eq_Int16x2.backendIndex = 481;
    Int16x2_operator_eq_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Int16x2_operator_eq_Int16x2.parameters = Int16x2_operator_eq_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_eq_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_eq_Int16x2)->signature = "operator==(i16x2) b8x2"_c;
    Symbol::Resolved(&Int16x2_operator_eq_Int16x2)->name = "operator==(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_eq_Int16x2)->nameWithVarNames = "operator==(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_eq_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator!= with Int16x2
    Int16x2_operator_neq_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_neq_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_neq_Int16x2.name = Int16x2_operator_neq_Int16x2_name;
    Int16x2_operator_neq_Int16x2.backendIndex = 482;
    Int16x2_operator_neq_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Int16x2_operator_neq_Int16x2.parameters = Int16x2_operator_neq_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_neq_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_neq_Int16x2)->signature = "operator!=(i16x2) b8x2"_c;
    Symbol::Resolved(&Int16x2_operator_neq_Int16x2)->name = "operator!=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_neq_Int16x2)->nameWithVarNames = "operator!=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_neq_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator* with Float16
    Int16x2_operator_scale_Float16_arg.name = "arg"_c;
    Int16x2_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int16x2_operator_scale_Float16.name = Int16x2_operator_scale_Float16_name;
    Int16x2_operator_scale_Float16.backendIndex = 483;
    Int16x2_operator_scale_Float16.returnType = Type::FullType { Float16x2Type.name };
    Int16x2_operator_scale_Float16.parameters = Int16x2_operator_scale_Float16_args;
    Symbol::Resolved(&Int16x2_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x2_operator_scale_Float16)->signature = "operator*(f16) f16x2"_c;
    Symbol::Resolved(&Int16x2_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Int16x2_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Int16x2_operator_scale_Float16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with UInt16
    Int16x2_operator_scale_UInt16_arg.name = "arg"_c;
    Int16x2_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x2_operator_scale_UInt16.name = Int16x2_operator_scale_UInt16_name;
    Int16x2_operator_scale_UInt16.backendIndex = 484;
    Int16x2_operator_scale_UInt16.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_scale_UInt16.parameters = Int16x2_operator_scale_UInt16_args;
    Symbol::Resolved(&Int16x2_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x2_operator_scale_UInt16)->signature = "operator*(u16) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&Int16x2_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&Int16x2_operator_scale_UInt16)->returnTypeSymbol = &Int16x2Type;

    /// operator* with Int16
    Int16x2_operator_scale_Int16_arg.name = "arg"_c;
    Int16x2_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x2_operator_scale_Int16.name = Int16x2_operator_scale_Int16_name;
    Int16x2_operator_scale_Int16.backendIndex = 485;
    Int16x2_operator_scale_Int16.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_scale_Int16.parameters = Int16x2_operator_scale_Int16_args;
    Symbol::Resolved(&Int16x2_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x2_operator_scale_Int16)->signature = "operator*(i16) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&Int16x2_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&Int16x2_operator_scale_Int16)->returnTypeSymbol = &Int16x2Type;

    /// operator| with Int16x2
    Int16x2_operator_or_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_or_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_or_Int16x2.name = Int16x2_operator_or_Int16x2_name;
    Int16x2_operator_or_Int16x2.backendIndex = 486;
    Int16x2_operator_or_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_or_Int16x2.parameters = Int16x2_operator_or_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_or_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_or_Int16x2)->signature = "operator|(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_or_Int16x2)->name = "operator|(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_or_Int16x2)->nameWithVarNames = "operator|(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_or_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator& with Int16x2
    Int16x2_operator_and_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_and_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_and_Int16x2.name = Int16x2_operator_and_Int16x2_name;
    Int16x2_operator_and_Int16x2.backendIndex = 487;
    Int16x2_operator_and_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_and_Int16x2.parameters = Int16x2_operator_and_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_and_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_and_Int16x2)->signature = "operator&(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_and_Int16x2)->name = "operator&(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_and_Int16x2)->nameWithVarNames = "operator&(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_and_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator^ with Int16x2
    Int16x2_operator_xor_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_xor_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_xor_Int16x2.name = Int16x2_operator_xor_Int16x2_name;
    Int16x2_operator_xor_Int16x2.backendIndex = 488;
    Int16x2_operator_xor_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_xor_Int16x2.parameters = Int16x2_operator_xor_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_xor_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_xor_Int16x2)->signature = "operator^(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_xor_Int16x2)->name = "operator^(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_xor_Int16x2)->nameWithVarNames = "operator^(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_xor_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator<< with Int16x2
    Int16x2_operator_lsh_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_lsh_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_lsh_Int16x2.name = Int16x2_operator_lsh_Int16x2_name;
    Int16x2_operator_lsh_Int16x2.backendIndex = 489;
    Int16x2_operator_lsh_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_lsh_Int16x2.parameters = Int16x2_operator_lsh_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_lsh_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_lsh_Int16x2)->signature = "operator<<(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_lsh_Int16x2)->name = "operator<<(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lsh_Int16x2)->nameWithVarNames = "operator<<(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lsh_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator>> with Int16x2
    Int16x2_operator_rsh_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_rsh_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_rsh_Int16x2.name = Int16x2_operator_rsh_Int16x2_name;
    Int16x2_operator_rsh_Int16x2.backendIndex = 490;
    Int16x2_operator_rsh_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_rsh_Int16x2.parameters = Int16x2_operator_rsh_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_rsh_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_rsh_Int16x2)->signature = "operator>>(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_rsh_Int16x2)->name = "operator>>(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_rsh_Int16x2)->nameWithVarNames = "operator>>(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_rsh_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator|= with Int16x2
    Int16x2_operator_orasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_orasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_orasg_Int16x2.name = Int16x2_operator_orasg_Int16x2_name;
    Int16x2_operator_orasg_Int16x2.backendIndex = 491;
    Int16x2_operator_orasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_orasg_Int16x2.parameters = Int16x2_operator_orasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_orasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_orasg_Int16x2)->signature = "operator|=(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_orasg_Int16x2)->name = "operator|=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_orasg_Int16x2)->nameWithVarNames = "operator|=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_orasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator&= with Int16x2
    Int16x2_operator_andasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_andasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_andasg_Int16x2.name = Int16x2_operator_andasg_Int16x2_name;
    Int16x2_operator_andasg_Int16x2.backendIndex = 492;
    Int16x2_operator_andasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_andasg_Int16x2.parameters = Int16x2_operator_andasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_andasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_andasg_Int16x2)->signature = "operator&=(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_andasg_Int16x2)->name = "operator&=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_andasg_Int16x2)->nameWithVarNames = "operator&=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_andasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator^= with Int16x2
    Int16x2_operator_xorasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_xorasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_xorasg_Int16x2.name = Int16x2_operator_xorasg_Int16x2_name;
    Int16x2_operator_xorasg_Int16x2.backendIndex = 493;
    Int16x2_operator_xorasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_xorasg_Int16x2.parameters = Int16x2_operator_xorasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_xorasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_xorasg_Int16x2)->signature = "operator^=(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_xorasg_Int16x2)->name = "operator^=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_xorasg_Int16x2)->nameWithVarNames = "operator^=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_xorasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator<<= with Int16x2
    Int16x2_operator_lshasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_lshasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_lshasg_Int16x2.name = Int16x2_operator_lshasg_Int16x2_name;
    Int16x2_operator_lshasg_Int16x2.backendIndex = 494;
    Int16x2_operator_lshasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_lshasg_Int16x2.parameters = Int16x2_operator_lshasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_lshasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_lshasg_Int16x2)->signature = "operator<<=(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_lshasg_Int16x2)->name = "operator<<=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lshasg_Int16x2)->nameWithVarNames = "operator<<=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lshasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator>>= with Int16x2
    Int16x2_operator_rhsasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_rhsasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_rhsasg_Int16x2.name = Int16x2_operator_rhsasg_Int16x2_name;
    Int16x2_operator_rhsasg_Int16x2.backendIndex = 495;
    Int16x2_operator_rhsasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_rhsasg_Int16x2.parameters = Int16x2_operator_rhsasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_rhsasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_rhsasg_Int16x2)->signature = "operator>>=(i16x2) i16x2"_c;
    Symbol::Resolved(&Int16x2_operator_rhsasg_Int16x2)->name = "operator>>=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_rhsasg_Int16x2)->nameWithVarNames = "operator>>=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_rhsasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    this->scope.symbolLookup = Int16x2_symbolLookup;
}
Int16x2 Int16x2Type;

/// operator[] with Int32
Variable Float32x3_operator_index_Int32_arg;
Function Float32x3_operator_index_Int32;
inline constexpr std::array Float32x3_operator_index_Int32_args = { &Float32x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x3_operator_index_UInt32_arg;
Function Float32x3_operator_index_UInt32;
inline constexpr std::array Float32x3_operator_index_UInt32_args = { &Float32x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x3_operator_index_Int16_arg;
Function Float32x3_operator_index_Int16;
inline constexpr std::array Float32x3_operator_index_Int16_args = { &Float32x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x3_operator_index_UInt16_arg;
Function Float32x3_operator_index_UInt16;
inline constexpr std::array Float32x3_operator_index_UInt16_args = { &Float32x3_operator_index_UInt16_arg };

/// operator+ with Float32x3
Variable Float32x3_operator_add_Float32x3_arg;
Function Float32x3_operator_add_Float32x3;
inline constexpr std::array Float32x3_operator_add_Float32x3_args = { &Float32x3_operator_add_Float32x3_arg };

/// operator- with Float32x3
Variable Float32x3_operator_sub_Float32x3_arg;
Function Float32x3_operator_sub_Float32x3;
inline constexpr std::array Float32x3_operator_sub_Float32x3_args = { &Float32x3_operator_sub_Float32x3_arg };

/// operator* with Float32x3
Variable Float32x3_operator_mul_Float32x3_arg;
Function Float32x3_operator_mul_Float32x3;
inline constexpr std::array Float32x3_operator_mul_Float32x3_args = { &Float32x3_operator_mul_Float32x3_arg };

/// operator/ with Float32x3
Variable Float32x3_operator_div_Float32x3_arg;
Function Float32x3_operator_div_Float32x3;
inline constexpr std::array Float32x3_operator_div_Float32x3_args = { &Float32x3_operator_div_Float32x3_arg };

/// operator% with Float32x3
Variable Float32x3_operator_mod_Float32x3_arg;
Function Float32x3_operator_mod_Float32x3;
inline constexpr std::array Float32x3_operator_mod_Float32x3_args = { &Float32x3_operator_mod_Float32x3_arg };

/// operator+= with Float32x3
Variable Float32x3_operator_addasg_Float32x3_arg;
Function Float32x3_operator_addasg_Float32x3;
inline constexpr std::array Float32x3_operator_addasg_Float32x3_args = { &Float32x3_operator_addasg_Float32x3_arg };

/// operator-= with Float32x3
Variable Float32x3_operator_subasg_Float32x3_arg;
Function Float32x3_operator_subasg_Float32x3;
inline constexpr std::array Float32x3_operator_subasg_Float32x3_args = { &Float32x3_operator_subasg_Float32x3_arg };

/// operator*= with Float32x3
Variable Float32x3_operator_mulasg_Float32x3_arg;
Function Float32x3_operator_mulasg_Float32x3;
inline constexpr std::array Float32x3_operator_mulasg_Float32x3_args = { &Float32x3_operator_mulasg_Float32x3_arg };

/// operator/= with Float32x3
Variable Float32x3_operator_divasg_Float32x3_arg;
Function Float32x3_operator_divasg_Float32x3;
inline constexpr std::array Float32x3_operator_divasg_Float32x3_args = { &Float32x3_operator_divasg_Float32x3_arg };

/// operator< with Float32x3
Variable Float32x3_operator_lt_Float32x3_arg;
Function Float32x3_operator_lt_Float32x3;
inline constexpr std::array Float32x3_operator_lt_Float32x3_args = { &Float32x3_operator_lt_Float32x3_arg };

/// operator<= with Float32x3
Variable Float32x3_operator_lte_Float32x3_arg;
Function Float32x3_operator_lte_Float32x3;
inline constexpr std::array Float32x3_operator_lte_Float32x3_args = { &Float32x3_operator_lte_Float32x3_arg };

/// operator> with Float32x3
Variable Float32x3_operator_gt_Float32x3_arg;
Function Float32x3_operator_gt_Float32x3;
inline constexpr std::array Float32x3_operator_gt_Float32x3_args = { &Float32x3_operator_gt_Float32x3_arg };

/// operator>= with Float32x3
Variable Float32x3_operator_gte_Float32x3_arg;
Function Float32x3_operator_gte_Float32x3;
inline constexpr std::array Float32x3_operator_gte_Float32x3_args = { &Float32x3_operator_gte_Float32x3_arg };

/// operator== with Float32x3
Variable Float32x3_operator_eq_Float32x3_arg;
Function Float32x3_operator_eq_Float32x3;
inline constexpr std::array Float32x3_operator_eq_Float32x3_args = { &Float32x3_operator_eq_Float32x3_arg };

/// operator!= with Float32x3
Variable Float32x3_operator_neq_Float32x3_arg;
Function Float32x3_operator_neq_Float32x3;
inline constexpr std::array Float32x3_operator_neq_Float32x3_args = { &Float32x3_operator_neq_Float32x3_arg };

/// operator* with Float32
Variable Float32x3_operator_scale_Float32_arg;
Function Float32x3_operator_scale_Float32;
inline constexpr std::array Float32x3_operator_scale_Float32_args = { &Float32x3_operator_scale_Float32_arg };

/// operator* with UInt32
Variable Float32x3_operator_scale_UInt32_arg;
Function Float32x3_operator_scale_UInt32;
inline constexpr std::array Float32x3_operator_scale_UInt32_args = { &Float32x3_operator_scale_UInt32_arg };

/// operator* with Int32
Variable Float32x3_operator_scale_Int32_arg;
Function Float32x3_operator_scale_Int32;
inline constexpr std::array Float32x3_operator_scale_Int32_args = { &Float32x3_operator_scale_Int32_arg };

/// operator* with Float32x3x2
Variable Float32x3_operator_transform_Float32x3x2_arg;
Function Float32x3_operator_transform_Float32x3x2;
inline constexpr std::array Float32x3_operator_transform_Float32x3x2_args = { &Float32x3_operator_transform_Float32x3x2_arg };

/// operator* with Float32x3x3
Variable Float32x3_operator_transform_Float32x3x3_arg;
Function Float32x3_operator_transform_Float32x3x3;
inline constexpr std::array Float32x3_operator_transform_Float32x3x3_args = { &Float32x3_operator_transform_Float32x3x3_arg };

/// operator* with Float32x3x4
Variable Float32x3_operator_transform_Float32x3x4_arg;
Function Float32x3_operator_transform_Float32x3x4;
inline constexpr std::array Float32x3_operator_transform_Float32x3x4_args = { &Float32x3_operator_transform_Float32x3x4_arg };

static constexpr StaticMap<HashString, Symbol*, 290> Float32x3_symbolLookup = {
    std::pair{ "bgg"_h, &Float32x3Type },
    std::pair{ "bgb"_h, &Float32x3Type },
    std::pair{ "bgr"_h, &Float32x3Type },
    std::pair{ "bbg"_h, &Float32x3Type },
    std::pair{ "bbb"_h, &Float32x3Type },
    std::pair{ "bbr"_h, &Float32x3Type },
    std::pair{ "brr"_h, &Float32x3Type },
    std::pair{ "brg"_h, &Float32x3Type },
    std::pair{ "brb"_h, &Float32x3Type },
    std::pair{ "gg"_h, &Float32x2Type },
    std::pair{ "gb"_h, &Float32x2Type },
    std::pair{ "gr"_h, &Float32x2Type },
    std::pair{ "bg"_h, &Float32x2Type },
    std::pair{ "bb"_h, &Float32x2Type },
    std::pair{ "br"_h, &Float32x2Type },
    std::pair{ "rr"_h, &Float32x2Type },
    std::pair{ "rg"_h, &Float32x2Type },
    std::pair{ "rb"_h, &Float32x2Type },
    std::pair{ "yx"_h, &Float32x2Type },
    std::pair{ "yy"_h, &Float32x2Type },
    std::pair{ "yz"_h, &Float32x2Type },
    std::pair{ "xz"_h, &Float32x2Type },
    std::pair{ "xy"_h, &Float32x2Type },
    std::pair{ "xx"_h, &Float32x2Type },
    std::pair{ "zy"_h, &Float32x2Type },
    std::pair{ "zx"_h, &Float32x2Type },
    std::pair{ "zz"_h, &Float32x2Type },
    std::pair{ "operator[](i16)"_h, &Float32x3_operator_index_Int16 },
    std::pair{ "operator!=(f32x3)"_h, &Float32x3_operator_neq_Float32x3 },
    std::pair{ "operator+=(f32x3)"_h, &Float32x3_operator_addasg_Float32x3 },
    std::pair{ "operator*(f32x3x3)"_h, &Float32x3_operator_transform_Float32x3x3 },
    std::pair{ "operator*(f32x3x2)"_h, &Float32x3_operator_transform_Float32x3x2 },
    std::pair{ "operator*(f32x3x4)"_h, &Float32x3_operator_transform_Float32x3x4 },
    std::pair{ "operator>(f32x3)"_h, &Float32x3_operator_gt_Float32x3 },
    std::pair{ "operator*(u32)"_h, &Float32x3_operator_scale_UInt32 },
    std::pair{ "operator+(f32x3)"_h, &Float32x3_operator_add_Float32x3 },
    std::pair{ "brrg"_h, &Float32x4Type },
    std::pair{ "brrb"_h, &Float32x4Type },
    std::pair{ "brrr"_h, &Float32x4Type },
    std::pair{ "brgr"_h, &Float32x4Type },
    std::pair{ "brgg"_h, &Float32x4Type },
    std::pair{ "brgb"_h, &Float32x4Type },
    std::pair{ "brbr"_h, &Float32x4Type },
    std::pair{ "brbg"_h, &Float32x4Type },
    std::pair{ "brbb"_h, &Float32x4Type },
    std::pair{ "operator<"_h, &Float32x3_operator_lt_Float32x3 },
    std::pair{ "operator>"_h, &Float32x3_operator_gt_Float32x3 },
    std::pair{ "operator-"_h, &Float32x3_operator_sub_Float32x3 },
    std::pair{ "operator/"_h, &Float32x3_operator_div_Float32x3 },
    std::pair{ "operator+"_h, &Float32x3_operator_add_Float32x3 },
    std::pair{ "operator*"_h, &Float32x3_operator_mul_Float32x3 },
    std::pair{ "operator*"_h, &Float32x3_operator_scale_Float32 },
    std::pair{ "operator*"_h, &Float32x3_operator_scale_UInt32 },
    std::pair{ "operator*"_h, &Float32x3_operator_scale_Int32 },
    std::pair{ "operator*"_h, &Float32x3_operator_transform_Float32x3x2 },
    std::pair{ "operator*"_h, &Float32x3_operator_transform_Float32x3x3 },
    std::pair{ "operator*"_h, &Float32x3_operator_transform_Float32x3x4 },
    std::pair{ "operator%"_h, &Float32x3_operator_mod_Float32x3 },
    std::pair{ "xzzz"_h, &Float32x4Type },
    std::pair{ "xzzy"_h, &Float32x4Type },
    std::pair{ "xzzx"_h, &Float32x4Type },
    std::pair{ "xzyz"_h, &Float32x4Type },
    std::pair{ "xzyx"_h, &Float32x4Type },
    std::pair{ "xzyy"_h, &Float32x4Type },
    std::pair{ "xzxy"_h, &Float32x4Type },
    std::pair{ "xzxx"_h, &Float32x4Type },
    std::pair{ "xzxz"_h, &Float32x4Type },
    std::pair{ "yxxx"_h, &Float32x4Type },
    std::pair{ "yxxy"_h, &Float32x4Type },
    std::pair{ "yxxz"_h, &Float32x4Type },
    std::pair{ "yxyz"_h, &Float32x4Type },
    std::pair{ "yxyy"_h, &Float32x4Type },
    std::pair{ "yxyx"_h, &Float32x4Type },
    std::pair{ "yxzz"_h, &Float32x4Type },
    std::pair{ "yxzx"_h, &Float32x4Type },
    std::pair{ "yxzy"_h, &Float32x4Type },
    std::pair{ "xyzx"_h, &Float32x4Type },
    std::pair{ "xyzy"_h, &Float32x4Type },
    std::pair{ "xyzz"_h, &Float32x4Type },
    std::pair{ "xyxz"_h, &Float32x4Type },
    std::pair{ "xyxx"_h, &Float32x4Type },
    std::pair{ "xyxy"_h, &Float32x4Type },
    std::pair{ "xyyy"_h, &Float32x4Type },
    std::pair{ "xyyx"_h, &Float32x4Type },
    std::pair{ "xyyz"_h, &Float32x4Type },
    std::pair{ "ggrr"_h, &Float32x4Type },
    std::pair{ "ggrb"_h, &Float32x4Type },
    std::pair{ "ggrg"_h, &Float32x4Type },
    std::pair{ "ggbb"_h, &Float32x4Type },
    std::pair{ "ggbg"_h, &Float32x4Type },
    std::pair{ "ggbr"_h, &Float32x4Type },
    std::pair{ "gggr"_h, &Float32x4Type },
    std::pair{ "gggg"_h, &Float32x4Type },
    std::pair{ "gggb"_h, &Float32x4Type },
    std::pair{ "yyzz"_h, &Float32x4Type },
    std::pair{ "yyzy"_h, &Float32x4Type },
    std::pair{ "yyzx"_h, &Float32x4Type },
    std::pair{ "yyyz"_h, &Float32x4Type },
    std::pair{ "yyyx"_h, &Float32x4Type },
    std::pair{ "yyyy"_h, &Float32x4Type },
    std::pair{ "yyxy"_h, &Float32x4Type },
    std::pair{ "yyxx"_h, &Float32x4Type },
    std::pair{ "yyxz"_h, &Float32x4Type },
    std::pair{ "xxyx"_h, &Float32x4Type },
    std::pair{ "xxyy"_h, &Float32x4Type },
    std::pair{ "xxyz"_h, &Float32x4Type },
    std::pair{ "xxxz"_h, &Float32x4Type },
    std::pair{ "xxxy"_h, &Float32x4Type },
    std::pair{ "xxxx"_h, &Float32x4Type },
    std::pair{ "xxzy"_h, &Float32x4Type },
    std::pair{ "xxzx"_h, &Float32x4Type },
    std::pair{ "xxzz"_h, &Float32x4Type },
    std::pair{ "rgrg"_h, &Float32x4Type },
    std::pair{ "rgrb"_h, &Float32x4Type },
    std::pair{ "rgrr"_h, &Float32x4Type },
    std::pair{ "rggb"_h, &Float32x4Type },
    std::pair{ "rggg"_h, &Float32x4Type },
    std::pair{ "rggr"_h, &Float32x4Type },
    std::pair{ "rgbr"_h, &Float32x4Type },
    std::pair{ "rgbg"_h, &Float32x4Type },
    std::pair{ "rgbb"_h, &Float32x4Type },
    std::pair{ "operator*(f32x3)"_h, &Float32x3_operator_mul_Float32x3 },
    std::pair{ "yzzx"_h, &Float32x4Type },
    std::pair{ "yzzy"_h, &Float32x4Type },
    std::pair{ "yzzz"_h, &Float32x4Type },
    std::pair{ "yzxz"_h, &Float32x4Type },
    std::pair{ "yzxx"_h, &Float32x4Type },
    std::pair{ "yzxy"_h, &Float32x4Type },
    std::pair{ "yzyy"_h, &Float32x4Type },
    std::pair{ "yzyx"_h, &Float32x4Type },
    std::pair{ "yzyz"_h, &Float32x4Type },
    std::pair{ "operator%(f32x3)"_h, &Float32x3_operator_mod_Float32x3 },
    std::pair{ "gbgr"_h, &Float32x4Type },
    std::pair{ "gbgb"_h, &Float32x4Type },
    std::pair{ "gbgg"_h, &Float32x4Type },
    std::pair{ "gbbb"_h, &Float32x4Type },
    std::pair{ "gbbg"_h, &Float32x4Type },
    std::pair{ "gbbr"_h, &Float32x4Type },
    std::pair{ "gbrr"_h, &Float32x4Type },
    std::pair{ "gbrb"_h, &Float32x4Type },
    std::pair{ "gbrg"_h, &Float32x4Type },
    std::pair{ "rbrg"_h, &Float32x4Type },
    std::pair{ "rbrb"_h, &Float32x4Type },
    std::pair{ "rbrr"_h, &Float32x4Type },
    std::pair{ "rbgr"_h, &Float32x4Type },
    std::pair{ "rbgg"_h, &Float32x4Type },
    std::pair{ "rbgb"_h, &Float32x4Type },
    std::pair{ "rbbr"_h, &Float32x4Type },
    std::pair{ "rbbg"_h, &Float32x4Type },
    std::pair{ "rbbb"_h, &Float32x4Type },
    std::pair{ "zyxx"_h, &Float32x4Type },
    std::pair{ "zyxy"_h, &Float32x4Type },
    std::pair{ "zyxz"_h, &Float32x4Type },
    std::pair{ "zyyz"_h, &Float32x4Type },
    std::pair{ "zyyy"_h, &Float32x4Type },
    std::pair{ "zyyx"_h, &Float32x4Type },
    std::pair{ "zyzz"_h, &Float32x4Type },
    std::pair{ "zyzx"_h, &Float32x4Type },
    std::pair{ "zyzy"_h, &Float32x4Type },
    std::pair{ "bggr"_h, &Float32x4Type },
    std::pair{ "bggb"_h, &Float32x4Type },
    std::pair{ "bggg"_h, &Float32x4Type },
    std::pair{ "bgbg"_h, &Float32x4Type },
    std::pair{ "bgbb"_h, &Float32x4Type },
    std::pair{ "bgbr"_h, &Float32x4Type },
    std::pair{ "bgrr"_h, &Float32x4Type },
    std::pair{ "bgrg"_h, &Float32x4Type },
    std::pair{ "bgrb"_h, &Float32x4Type },
    std::pair{ "operator<=(f32x3)"_h, &Float32x3_operator_lte_Float32x3 },
    std::pair{ "rrg"_h, &Float32x3Type },
    std::pair{ "rrb"_h, &Float32x3Type },
    std::pair{ "rrr"_h, &Float32x3Type },
    std::pair{ "rgr"_h, &Float32x3Type },
    std::pair{ "rgg"_h, &Float32x3Type },
    std::pair{ "rgb"_h, &Float32x3Type },
    std::pair{ "rbr"_h, &Float32x3Type },
    std::pair{ "rbg"_h, &Float32x3Type },
    std::pair{ "rbb"_h, &Float32x3Type },
    std::pair{ "operator[](u32)"_h, &Float32x3_operator_index_UInt32 },
    std::pair{ "zxzz"_h, &Float32x4Type },
    std::pair{ "zxzy"_h, &Float32x4Type },
    std::pair{ "zxzx"_h, &Float32x4Type },
    std::pair{ "zxyz"_h, &Float32x4Type },
    std::pair{ "zxyx"_h, &Float32x4Type },
    std::pair{ "zxyy"_h, &Float32x4Type },
    std::pair{ "zxxy"_h, &Float32x4Type },
    std::pair{ "zxxx"_h, &Float32x4Type },
    std::pair{ "zxxz"_h, &Float32x4Type },
    std::pair{ "operator>=(f32x3)"_h, &Float32x3_operator_gte_Float32x3 },
    std::pair{ "operator*(f32)"_h, &Float32x3_operator_scale_Float32 },
    std::pair{ "operator==(f32x3)"_h, &Float32x3_operator_eq_Float32x3 },
    std::pair{ "operator[](u16)"_h, &Float32x3_operator_index_UInt16 },
    std::pair{ "zzyx"_h, &Float32x4Type },
    std::pair{ "zzyy"_h, &Float32x4Type },
    std::pair{ "zzyz"_h, &Float32x4Type },
    std::pair{ "zzxz"_h, &Float32x4Type },
    std::pair{ "zzxy"_h, &Float32x4Type },
    std::pair{ "zzxx"_h, &Float32x4Type },
    std::pair{ "zzzy"_h, &Float32x4Type },
    std::pair{ "zzzx"_h, &Float32x4Type },
    std::pair{ "zzzz"_h, &Float32x4Type },
    std::pair{ "g"_h, &Float32Type },
    std::pair{ "b"_h, &Float32Type },
    std::pair{ "r"_h, &Float32Type },
    std::pair{ "y"_h, &Float32Type },
    std::pair{ "x"_h, &Float32Type },
    std::pair{ "z"_h, &Float32Type },
    std::pair{ "operator*(i32)"_h, &Float32x3_operator_scale_Int32 },
    std::pair{ "bbgg"_h, &Float32x4Type },
    std::pair{ "bbgb"_h, &Float32x4Type },
    std::pair{ "bbgr"_h, &Float32x4Type },
    std::pair{ "bbbg"_h, &Float32x4Type },
    std::pair{ "bbbb"_h, &Float32x4Type },
    std::pair{ "bbbr"_h, &Float32x4Type },
    std::pair{ "bbrr"_h, &Float32x4Type },
    std::pair{ "bbrg"_h, &Float32x4Type },
    std::pair{ "bbrb"_h, &Float32x4Type },
    std::pair{ "yxx"_h, &Float32x3Type },
    std::pair{ "yxy"_h, &Float32x3Type },
    std::pair{ "yxz"_h, &Float32x3Type },
    std::pair{ "yyz"_h, &Float32x3Type },
    std::pair{ "yyy"_h, &Float32x3Type },
    std::pair{ "yyx"_h, &Float32x3Type },
    std::pair{ "yzz"_h, &Float32x3Type },
    std::pair{ "yzx"_h, &Float32x3Type },
    std::pair{ "yzy"_h, &Float32x3Type },
    std::pair{ "xzz"_h, &Float32x3Type },
    std::pair{ "xzy"_h, &Float32x3Type },
    std::pair{ "xzx"_h, &Float32x3Type },
    std::pair{ "xyz"_h, &Float32x3Type },
    std::pair{ "xyx"_h, &Float32x3Type },
    std::pair{ "xyy"_h, &Float32x3Type },
    std::pair{ "xxy"_h, &Float32x3Type },
    std::pair{ "xxx"_h, &Float32x3Type },
    std::pair{ "xxz"_h, &Float32x3Type },
    std::pair{ "operator*=(f32x3)"_h, &Float32x3_operator_mulasg_Float32x3 },
    std::pair{ "zyx"_h, &Float32x3Type },
    std::pair{ "zyy"_h, &Float32x3Type },
    std::pair{ "zyz"_h, &Float32x3Type },
    std::pair{ "zxz"_h, &Float32x3Type },
    std::pair{ "zxy"_h, &Float32x3Type },
    std::pair{ "zxx"_h, &Float32x3Type },
    std::pair{ "zzy"_h, &Float32x3Type },
    std::pair{ "zzx"_h, &Float32x3Type },
    std::pair{ "zzz"_h, &Float32x3Type },
    std::pair{ "ggr"_h, &Float32x3Type },
    std::pair{ "ggb"_h, &Float32x3Type },
    std::pair{ "ggg"_h, &Float32x3Type },
    std::pair{ "gbg"_h, &Float32x3Type },
    std::pair{ "gbb"_h, &Float32x3Type },
    std::pair{ "gbr"_h, &Float32x3Type },
    std::pair{ "grr"_h, &Float32x3Type },
    std::pair{ "grg"_h, &Float32x3Type },
    std::pair{ "grb"_h, &Float32x3Type },
    std::pair{ "operator[]"_h, &Float32x3_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float32x3_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float32x3_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float32x3_operator_index_UInt16 },
    std::pair{ "operator-=(f32x3)"_h, &Float32x3_operator_subasg_Float32x3 },
    std::pair{ "operator=="_h, &Float32x3_operator_eq_Float32x3 },
    std::pair{ "operator<="_h, &Float32x3_operator_lte_Float32x3 },
    std::pair{ "operator>="_h, &Float32x3_operator_gte_Float32x3 },
    std::pair{ "operator-="_h, &Float32x3_operator_subasg_Float32x3 },
    std::pair{ "operator/="_h, &Float32x3_operator_divasg_Float32x3 },
    std::pair{ "operator+="_h, &Float32x3_operator_addasg_Float32x3 },
    std::pair{ "operator*="_h, &Float32x3_operator_mulasg_Float32x3 },
    std::pair{ "operator!="_h, &Float32x3_operator_neq_Float32x3 },
    std::pair{ "operator-(f32x3)"_h, &Float32x3_operator_sub_Float32x3 },
    std::pair{ "operator<(f32x3)"_h, &Float32x3_operator_lt_Float32x3 },
    std::pair{ "operator/=(f32x3)"_h, &Float32x3_operator_divasg_Float32x3 },
    std::pair{ "operator/(f32x3)"_h, &Float32x3_operator_div_Float32x3 },
    std::pair{ "operator[](i32)"_h, &Float32x3_operator_index_Int32 },
    std::pair{ "grrb"_h, &Float32x4Type },
    std::pair{ "grrg"_h, &Float32x4Type },
    std::pair{ "grrr"_h, &Float32x4Type },
    std::pair{ "grgb"_h, &Float32x4Type },
    std::pair{ "grgg"_h, &Float32x4Type },
    std::pair{ "grgr"_h, &Float32x4Type },
    std::pair{ "grbr"_h, &Float32x4Type },
    std::pair{ "grbb"_h, &Float32x4Type },
    std::pair{ "grbg"_h, &Float32x4Type },
    std::pair{ "rrgg"_h, &Float32x4Type },
    std::pair{ "rrgb"_h, &Float32x4Type },
    std::pair{ "rrgr"_h, &Float32x4Type },
    std::pair{ "rrbg"_h, &Float32x4Type },
    std::pair{ "rrbb"_h, &Float32x4Type },
    std::pair{ "rrbr"_h, &Float32x4Type },
    std::pair{ "rrrr"_h, &Float32x4Type },
    std::pair{ "rrrg"_h, &Float32x4Type },
    std::pair{ "rrrb"_h, &Float32x4Type }
    };

Float32x3::Float32x3()
{
    this->name = "f32x3"_c;
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x3_operator_index_Int32_arg.name = "arg"_c;
    Float32x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x3_operator_index_Int32.name = Float32x3_operator_index_Int32_name;
    Float32x3_operator_index_Int32.backendIndex = 513;
    Float32x3_operator_index_Int32.returnType = Type::FullType { Float32Type.name };
    Float32x3_operator_index_Int32.parameters = Float32x3_operator_index_Int32_args;
    Symbol::Resolved(&Float32x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3_operator_index_Int32)->signature = "operator[](i32) f32"_c;
    Symbol::Resolved(&Float32x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x3_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float32x3_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt32
    Float32x3_operator_index_UInt32_arg.name = "arg"_c;
    Float32x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x3_operator_index_UInt32.name = Float32x3_operator_index_UInt32_name;
    Float32x3_operator_index_UInt32.backendIndex = 514;
    Float32x3_operator_index_UInt32.returnType = Type::FullType { Float32Type.name };
    Float32x3_operator_index_UInt32.parameters = Float32x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3_operator_index_UInt32)->signature = "operator[](u32) f32"_c;
    Symbol::Resolved(&Float32x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x3_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float32x3_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    /// operator[] with Int16
    Float32x3_operator_index_Int16_arg.name = "arg"_c;
    Float32x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x3_operator_index_Int16.name = Float32x3_operator_index_Int16_name;
    Float32x3_operator_index_Int16.backendIndex = 515;
    Float32x3_operator_index_Int16.returnType = Type::FullType { Float32Type.name };
    Float32x3_operator_index_Int16.parameters = Float32x3_operator_index_Int16_args;
    Symbol::Resolved(&Float32x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x3_operator_index_Int16)->signature = "operator[](i16) f32"_c;
    Symbol::Resolved(&Float32x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x3_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float32x3_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt16
    Float32x3_operator_index_UInt16_arg.name = "arg"_c;
    Float32x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x3_operator_index_UInt16.name = Float32x3_operator_index_UInt16_name;
    Float32x3_operator_index_UInt16.backendIndex = 516;
    Float32x3_operator_index_UInt16.returnType = Type::FullType { Float32Type.name };
    Float32x3_operator_index_UInt16.parameters = Float32x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x3_operator_index_UInt16)->signature = "operator[](u16) f32"_c;
    Symbol::Resolved(&Float32x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x3_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float32x3_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    /// operator+ with Float32x3
    Float32x3_operator_add_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_add_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_add_Float32x3.name = Float32x3_operator_add_Float32x3_name;
    Float32x3_operator_add_Float32x3.backendIndex = 517;
    Float32x3_operator_add_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_add_Float32x3.parameters = Float32x3_operator_add_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_add_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_add_Float32x3)->signature = "operator+(f32x3) f32x3"_c;
    Symbol::Resolved(&Float32x3_operator_add_Float32x3)->name = "operator+(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_add_Float32x3)->nameWithVarNames = "operator+(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_add_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator- with Float32x3
    Float32x3_operator_sub_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_sub_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_sub_Float32x3.name = Float32x3_operator_sub_Float32x3_name;
    Float32x3_operator_sub_Float32x3.backendIndex = 518;
    Float32x3_operator_sub_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_sub_Float32x3.parameters = Float32x3_operator_sub_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_sub_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_sub_Float32x3)->signature = "operator-(f32x3) f32x3"_c;
    Symbol::Resolved(&Float32x3_operator_sub_Float32x3)->name = "operator-(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_sub_Float32x3)->nameWithVarNames = "operator-(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_sub_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x3
    Float32x3_operator_mul_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_mul_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_mul_Float32x3.name = Float32x3_operator_mul_Float32x3_name;
    Float32x3_operator_mul_Float32x3.backendIndex = 519;
    Float32x3_operator_mul_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_mul_Float32x3.parameters = Float32x3_operator_mul_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3)->signature = "operator*(f32x3) f32x3"_c;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3)->name = "operator*(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3)->nameWithVarNames = "operator*(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator/ with Float32x3
    Float32x3_operator_div_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_div_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_div_Float32x3.name = Float32x3_operator_div_Float32x3_name;
    Float32x3_operator_div_Float32x3.backendIndex = 520;
    Float32x3_operator_div_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_div_Float32x3.parameters = Float32x3_operator_div_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_div_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_div_Float32x3)->signature = "operator/(f32x3) f32x3"_c;
    Symbol::Resolved(&Float32x3_operator_div_Float32x3)->name = "operator/(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_div_Float32x3)->nameWithVarNames = "operator/(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_div_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator% with Float32x3
    Float32x3_operator_mod_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_mod_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_mod_Float32x3.name = Float32x3_operator_mod_Float32x3_name;
    Float32x3_operator_mod_Float32x3.backendIndex = 521;
    Float32x3_operator_mod_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_mod_Float32x3.parameters = Float32x3_operator_mod_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_mod_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_mod_Float32x3)->signature = "operator%(f32x3) f32x3"_c;
    Symbol::Resolved(&Float32x3_operator_mod_Float32x3)->name = "operator%(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_mod_Float32x3)->nameWithVarNames = "operator%(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_mod_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator+= with Float32x3
    Float32x3_operator_addasg_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_addasg_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_addasg_Float32x3.name = Float32x3_operator_addasg_Float32x3_name;
    Float32x3_operator_addasg_Float32x3.backendIndex = 522;
    Float32x3_operator_addasg_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_addasg_Float32x3.parameters = Float32x3_operator_addasg_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_addasg_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_addasg_Float32x3)->signature = "operator+=(f32x3) f32x3"_c;
    Symbol::Resolved(&Float32x3_operator_addasg_Float32x3)->name = "operator+=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_addasg_Float32x3)->nameWithVarNames = "operator+=(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_addasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator-= with Float32x3
    Float32x3_operator_subasg_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_subasg_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_subasg_Float32x3.name = Float32x3_operator_subasg_Float32x3_name;
    Float32x3_operator_subasg_Float32x3.backendIndex = 523;
    Float32x3_operator_subasg_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_subasg_Float32x3.parameters = Float32x3_operator_subasg_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_subasg_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_subasg_Float32x3)->signature = "operator-=(f32x3) f32x3"_c;
    Symbol::Resolved(&Float32x3_operator_subasg_Float32x3)->name = "operator-=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_subasg_Float32x3)->nameWithVarNames = "operator-=(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_subasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator*= with Float32x3
    Float32x3_operator_mulasg_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_mulasg_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_mulasg_Float32x3.name = Float32x3_operator_mulasg_Float32x3_name;
    Float32x3_operator_mulasg_Float32x3.backendIndex = 524;
    Float32x3_operator_mulasg_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_mulasg_Float32x3.parameters = Float32x3_operator_mulasg_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_mulasg_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_mulasg_Float32x3)->signature = "operator*=(f32x3) f32x3"_c;
    Symbol::Resolved(&Float32x3_operator_mulasg_Float32x3)->name = "operator*=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_mulasg_Float32x3)->nameWithVarNames = "operator*=(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_mulasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator/= with Float32x3
    Float32x3_operator_divasg_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_divasg_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_divasg_Float32x3.name = Float32x3_operator_divasg_Float32x3_name;
    Float32x3_operator_divasg_Float32x3.backendIndex = 525;
    Float32x3_operator_divasg_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_divasg_Float32x3.parameters = Float32x3_operator_divasg_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_divasg_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_divasg_Float32x3)->signature = "operator/=(f32x3) f32x3"_c;
    Symbol::Resolved(&Float32x3_operator_divasg_Float32x3)->name = "operator/=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_divasg_Float32x3)->nameWithVarNames = "operator/=(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_divasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator< with Float32x3
    Float32x3_operator_lt_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_lt_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_lt_Float32x3.name = Float32x3_operator_lt_Float32x3_name;
    Float32x3_operator_lt_Float32x3.backendIndex = 526;
    Float32x3_operator_lt_Float32x3.returnType = Type::FullType { Bool8x3Type.name };
    Float32x3_operator_lt_Float32x3.parameters = Float32x3_operator_lt_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_lt_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_lt_Float32x3)->signature = "operator<(f32x3) b8x3"_c;
    Symbol::Resolved(&Float32x3_operator_lt_Float32x3)->name = "operator<(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_lt_Float32x3)->nameWithVarNames = "operator<(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_lt_Float32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator<= with Float32x3
    Float32x3_operator_lte_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_lte_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_lte_Float32x3.name = Float32x3_operator_lte_Float32x3_name;
    Float32x3_operator_lte_Float32x3.backendIndex = 527;
    Float32x3_operator_lte_Float32x3.returnType = Type::FullType { Bool8x3Type.name };
    Float32x3_operator_lte_Float32x3.parameters = Float32x3_operator_lte_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_lte_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_lte_Float32x3)->signature = "operator<=(f32x3) b8x3"_c;
    Symbol::Resolved(&Float32x3_operator_lte_Float32x3)->name = "operator<=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_lte_Float32x3)->nameWithVarNames = "operator<=(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_lte_Float32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator> with Float32x3
    Float32x3_operator_gt_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_gt_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_gt_Float32x3.name = Float32x3_operator_gt_Float32x3_name;
    Float32x3_operator_gt_Float32x3.backendIndex = 528;
    Float32x3_operator_gt_Float32x3.returnType = Type::FullType { Bool8x3Type.name };
    Float32x3_operator_gt_Float32x3.parameters = Float32x3_operator_gt_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_gt_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_gt_Float32x3)->signature = "operator>(f32x3) b8x3"_c;
    Symbol::Resolved(&Float32x3_operator_gt_Float32x3)->name = "operator>(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_gt_Float32x3)->nameWithVarNames = "operator>(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_gt_Float32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator>= with Float32x3
    Float32x3_operator_gte_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_gte_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_gte_Float32x3.name = Float32x3_operator_gte_Float32x3_name;
    Float32x3_operator_gte_Float32x3.backendIndex = 529;
    Float32x3_operator_gte_Float32x3.returnType = Type::FullType { Bool8x3Type.name };
    Float32x3_operator_gte_Float32x3.parameters = Float32x3_operator_gte_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_gte_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_gte_Float32x3)->signature = "operator>=(f32x3) b8x3"_c;
    Symbol::Resolved(&Float32x3_operator_gte_Float32x3)->name = "operator>=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_gte_Float32x3)->nameWithVarNames = "operator>=(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_gte_Float32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator== with Float32x3
    Float32x3_operator_eq_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_eq_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_eq_Float32x3.name = Float32x3_operator_eq_Float32x3_name;
    Float32x3_operator_eq_Float32x3.backendIndex = 530;
    Float32x3_operator_eq_Float32x3.returnType = Type::FullType { Bool8x3Type.name };
    Float32x3_operator_eq_Float32x3.parameters = Float32x3_operator_eq_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_eq_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_eq_Float32x3)->signature = "operator==(f32x3) b8x3"_c;
    Symbol::Resolved(&Float32x3_operator_eq_Float32x3)->name = "operator==(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_eq_Float32x3)->nameWithVarNames = "operator==(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_eq_Float32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator!= with Float32x3
    Float32x3_operator_neq_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_neq_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_neq_Float32x3.name = Float32x3_operator_neq_Float32x3_name;
    Float32x3_operator_neq_Float32x3.backendIndex = 531;
    Float32x3_operator_neq_Float32x3.returnType = Type::FullType { Bool8x3Type.name };
    Float32x3_operator_neq_Float32x3.parameters = Float32x3_operator_neq_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_neq_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_neq_Float32x3)->signature = "operator!=(f32x3) b8x3"_c;
    Symbol::Resolved(&Float32x3_operator_neq_Float32x3)->name = "operator!=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_neq_Float32x3)->nameWithVarNames = "operator!=(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_neq_Float32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator* with Float32
    Float32x3_operator_scale_Float32_arg.name = "arg"_c;
    Float32x3_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x3_operator_scale_Float32.name = Float32x3_operator_scale_Float32_name;
    Float32x3_operator_scale_Float32.backendIndex = 532;
    Float32x3_operator_scale_Float32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_scale_Float32.parameters = Float32x3_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x3_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3_operator_scale_Float32)->signature = "operator*(f32) f32x3"_c;
    Symbol::Resolved(&Float32x3_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x3_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x3_operator_scale_Float32)->returnTypeSymbol = &Float32x3Type;

    /// operator* with UInt32
    Float32x3_operator_scale_UInt32_arg.name = "arg"_c;
    Float32x3_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x3_operator_scale_UInt32.name = Float32x3_operator_scale_UInt32_name;
    Float32x3_operator_scale_UInt32.backendIndex = 533;
    Float32x3_operator_scale_UInt32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_scale_UInt32.parameters = Float32x3_operator_scale_UInt32_args;
    Symbol::Resolved(&Float32x3_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3_operator_scale_UInt32)->signature = "operator*(u32) f32x3"_c;
    Symbol::Resolved(&Float32x3_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&Float32x3_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&Float32x3_operator_scale_UInt32)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Int32
    Float32x3_operator_scale_Int32_arg.name = "arg"_c;
    Float32x3_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x3_operator_scale_Int32.name = Float32x3_operator_scale_Int32_name;
    Float32x3_operator_scale_Int32.backendIndex = 534;
    Float32x3_operator_scale_Int32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_scale_Int32.parameters = Float32x3_operator_scale_Int32_args;
    Symbol::Resolved(&Float32x3_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3_operator_scale_Int32)->signature = "operator*(i32) f32x3"_c;
    Symbol::Resolved(&Float32x3_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&Float32x3_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&Float32x3_operator_scale_Int32)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x3x2
    Float32x3_operator_transform_Float32x3x2_arg.name = "arg"_c;
    Float32x3_operator_transform_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3_operator_transform_Float32x3x2.name = Float32x3_operator_transform_Float32x3x2_name;
    Float32x3_operator_transform_Float32x3x2.backendIndex = 535;
    Float32x3_operator_transform_Float32x3x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x3_operator_transform_Float32x3x2.parameters = Float32x3_operator_transform_Float32x3x2_args;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x2)->signature = "operator*(f32x3x2) f32x2"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x2)->name = "operator*(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x2)->nameWithVarNames = "operator*(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x2)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x3x3
    Float32x3_operator_transform_Float32x3x3_arg.name = "arg"_c;
    Float32x3_operator_transform_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3_operator_transform_Float32x3x3.name = Float32x3_operator_transform_Float32x3x3_name;
    Float32x3_operator_transform_Float32x3x3.backendIndex = 536;
    Float32x3_operator_transform_Float32x3x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_transform_Float32x3x3.parameters = Float32x3_operator_transform_Float32x3x3_args;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x3)->signature = "operator*(f32x3x3) f32x3"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x3)->name = "operator*(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x3)->nameWithVarNames = "operator*(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x3)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x3x4
    Float32x3_operator_transform_Float32x3x4_arg.name = "arg"_c;
    Float32x3_operator_transform_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3_operator_transform_Float32x3x4.name = Float32x3_operator_transform_Float32x3x4_name;
    Float32x3_operator_transform_Float32x3x4.backendIndex = 537;
    Float32x3_operator_transform_Float32x3x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x3_operator_transform_Float32x3x4.parameters = Float32x3_operator_transform_Float32x3x4_args;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x4)->signature = "operator*(f32x3x4) f32x4"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x4)->name = "operator*(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x4)->nameWithVarNames = "operator*(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x4)->returnTypeSymbol = &Float32x4Type;

    this->scope.symbolLookup = Float32x3_symbolLookup;
}
Float32x3 Float32x3Type;

/// operator[] with Int32
Variable UInt32x3_operator_index_Int32_arg;
Function UInt32x3_operator_index_Int32;
inline constexpr std::array UInt32x3_operator_index_Int32_args = { &UInt32x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt32x3_operator_index_UInt32_arg;
Function UInt32x3_operator_index_UInt32;
inline constexpr std::array UInt32x3_operator_index_UInt32_args = { &UInt32x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt32x3_operator_index_Int16_arg;
Function UInt32x3_operator_index_Int16;
inline constexpr std::array UInt32x3_operator_index_Int16_args = { &UInt32x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt32x3_operator_index_UInt16_arg;
Function UInt32x3_operator_index_UInt16;
inline constexpr std::array UInt32x3_operator_index_UInt16_args = { &UInt32x3_operator_index_UInt16_arg };

/// operator+ with UInt32x3
Variable UInt32x3_operator_add_UInt32x3_arg;
Function UInt32x3_operator_add_UInt32x3;
inline constexpr std::array UInt32x3_operator_add_UInt32x3_args = { &UInt32x3_operator_add_UInt32x3_arg };

/// operator- with UInt32x3
Variable UInt32x3_operator_sub_UInt32x3_arg;
Function UInt32x3_operator_sub_UInt32x3;
inline constexpr std::array UInt32x3_operator_sub_UInt32x3_args = { &UInt32x3_operator_sub_UInt32x3_arg };

/// operator* with UInt32x3
Variable UInt32x3_operator_mul_UInt32x3_arg;
Function UInt32x3_operator_mul_UInt32x3;
inline constexpr std::array UInt32x3_operator_mul_UInt32x3_args = { &UInt32x3_operator_mul_UInt32x3_arg };

/// operator/ with UInt32x3
Variable UInt32x3_operator_div_UInt32x3_arg;
Function UInt32x3_operator_div_UInt32x3;
inline constexpr std::array UInt32x3_operator_div_UInt32x3_args = { &UInt32x3_operator_div_UInt32x3_arg };

/// operator% with UInt32x3
Variable UInt32x3_operator_mod_UInt32x3_arg;
Function UInt32x3_operator_mod_UInt32x3;
inline constexpr std::array UInt32x3_operator_mod_UInt32x3_args = { &UInt32x3_operator_mod_UInt32x3_arg };

/// operator+= with UInt32x3
Variable UInt32x3_operator_addasg_UInt32x3_arg;
Function UInt32x3_operator_addasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_addasg_UInt32x3_args = { &UInt32x3_operator_addasg_UInt32x3_arg };

/// operator-= with UInt32x3
Variable UInt32x3_operator_subasg_UInt32x3_arg;
Function UInt32x3_operator_subasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_subasg_UInt32x3_args = { &UInt32x3_operator_subasg_UInt32x3_arg };

/// operator*= with UInt32x3
Variable UInt32x3_operator_mulasg_UInt32x3_arg;
Function UInt32x3_operator_mulasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_mulasg_UInt32x3_args = { &UInt32x3_operator_mulasg_UInt32x3_arg };

/// operator/= with UInt32x3
Variable UInt32x3_operator_divasg_UInt32x3_arg;
Function UInt32x3_operator_divasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_divasg_UInt32x3_args = { &UInt32x3_operator_divasg_UInt32x3_arg };

/// operator< with UInt32x3
Variable UInt32x3_operator_lt_UInt32x3_arg;
Function UInt32x3_operator_lt_UInt32x3;
inline constexpr std::array UInt32x3_operator_lt_UInt32x3_args = { &UInt32x3_operator_lt_UInt32x3_arg };

/// operator<= with UInt32x3
Variable UInt32x3_operator_lte_UInt32x3_arg;
Function UInt32x3_operator_lte_UInt32x3;
inline constexpr std::array UInt32x3_operator_lte_UInt32x3_args = { &UInt32x3_operator_lte_UInt32x3_arg };

/// operator> with UInt32x3
Variable UInt32x3_operator_gt_UInt32x3_arg;
Function UInt32x3_operator_gt_UInt32x3;
inline constexpr std::array UInt32x3_operator_gt_UInt32x3_args = { &UInt32x3_operator_gt_UInt32x3_arg };

/// operator>= with UInt32x3
Variable UInt32x3_operator_gte_UInt32x3_arg;
Function UInt32x3_operator_gte_UInt32x3;
inline constexpr std::array UInt32x3_operator_gte_UInt32x3_args = { &UInt32x3_operator_gte_UInt32x3_arg };

/// operator== with UInt32x3
Variable UInt32x3_operator_eq_UInt32x3_arg;
Function UInt32x3_operator_eq_UInt32x3;
inline constexpr std::array UInt32x3_operator_eq_UInt32x3_args = { &UInt32x3_operator_eq_UInt32x3_arg };

/// operator!= with UInt32x3
Variable UInt32x3_operator_neq_UInt32x3_arg;
Function UInt32x3_operator_neq_UInt32x3;
inline constexpr std::array UInt32x3_operator_neq_UInt32x3_args = { &UInt32x3_operator_neq_UInt32x3_arg };

/// operator* with Float32
Variable UInt32x3_operator_scale_Float32_arg;
Function UInt32x3_operator_scale_Float32;
inline constexpr std::array UInt32x3_operator_scale_Float32_args = { &UInt32x3_operator_scale_Float32_arg };

/// operator* with UInt32
Variable UInt32x3_operator_scale_UInt32_arg;
Function UInt32x3_operator_scale_UInt32;
inline constexpr std::array UInt32x3_operator_scale_UInt32_args = { &UInt32x3_operator_scale_UInt32_arg };

/// operator* with Int32
Variable UInt32x3_operator_scale_Int32_arg;
Function UInt32x3_operator_scale_Int32;
inline constexpr std::array UInt32x3_operator_scale_Int32_args = { &UInt32x3_operator_scale_Int32_arg };

/// operator| with UInt32x3
Variable UInt32x3_operator_or_UInt32x3_arg;
Function UInt32x3_operator_or_UInt32x3;
inline constexpr std::array UInt32x3_operator_or_UInt32x3_args = { &UInt32x3_operator_or_UInt32x3_arg };

/// operator& with UInt32x3
Variable UInt32x3_operator_and_UInt32x3_arg;
Function UInt32x3_operator_and_UInt32x3;
inline constexpr std::array UInt32x3_operator_and_UInt32x3_args = { &UInt32x3_operator_and_UInt32x3_arg };

/// operator^ with UInt32x3
Variable UInt32x3_operator_xor_UInt32x3_arg;
Function UInt32x3_operator_xor_UInt32x3;
inline constexpr std::array UInt32x3_operator_xor_UInt32x3_args = { &UInt32x3_operator_xor_UInt32x3_arg };

/// operator<< with UInt32x3
Variable UInt32x3_operator_lsh_UInt32x3_arg;
Function UInt32x3_operator_lsh_UInt32x3;
inline constexpr std::array UInt32x3_operator_lsh_UInt32x3_args = { &UInt32x3_operator_lsh_UInt32x3_arg };

/// operator>> with UInt32x3
Variable UInt32x3_operator_rsh_UInt32x3_arg;
Function UInt32x3_operator_rsh_UInt32x3;
inline constexpr std::array UInt32x3_operator_rsh_UInt32x3_args = { &UInt32x3_operator_rsh_UInt32x3_arg };

/// operator|= with UInt32x3
Variable UInt32x3_operator_orasg_UInt32x3_arg;
Function UInt32x3_operator_orasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_orasg_UInt32x3_args = { &UInt32x3_operator_orasg_UInt32x3_arg };

/// operator&= with UInt32x3
Variable UInt32x3_operator_andasg_UInt32x3_arg;
Function UInt32x3_operator_andasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_andasg_UInt32x3_args = { &UInt32x3_operator_andasg_UInt32x3_arg };

/// operator^= with UInt32x3
Variable UInt32x3_operator_xorasg_UInt32x3_arg;
Function UInt32x3_operator_xorasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_xorasg_UInt32x3_args = { &UInt32x3_operator_xorasg_UInt32x3_arg };

/// operator<<= with UInt32x3
Variable UInt32x3_operator_lshasg_UInt32x3_arg;
Function UInt32x3_operator_lshasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_lshasg_UInt32x3_args = { &UInt32x3_operator_lshasg_UInt32x3_arg };

/// operator>>= with UInt32x3
Variable UInt32x3_operator_rhsasg_UInt32x3_arg;
Function UInt32x3_operator_rhsasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_rhsasg_UInt32x3_args = { &UInt32x3_operator_rhsasg_UInt32x3_arg };

static constexpr StaticMap<HashString, Symbol*, 304> UInt32x3_symbolLookup = {
    std::pair{ "bgg"_h, &UInt32x3Type },
    std::pair{ "bgb"_h, &UInt32x3Type },
    std::pair{ "bgr"_h, &UInt32x3Type },
    std::pair{ "bbg"_h, &UInt32x3Type },
    std::pair{ "bbb"_h, &UInt32x3Type },
    std::pair{ "bbr"_h, &UInt32x3Type },
    std::pair{ "brr"_h, &UInt32x3Type },
    std::pair{ "brg"_h, &UInt32x3Type },
    std::pair{ "brb"_h, &UInt32x3Type },
    std::pair{ "operator==(u32x3)"_h, &UInt32x3_operator_eq_UInt32x3 },
    std::pair{ "gg"_h, &UInt32x2Type },
    std::pair{ "gb"_h, &UInt32x2Type },
    std::pair{ "gr"_h, &UInt32x2Type },
    std::pair{ "bg"_h, &UInt32x2Type },
    std::pair{ "bb"_h, &UInt32x2Type },
    std::pair{ "br"_h, &UInt32x2Type },
    std::pair{ "rr"_h, &UInt32x2Type },
    std::pair{ "rg"_h, &UInt32x2Type },
    std::pair{ "rb"_h, &UInt32x2Type },
    std::pair{ "yx"_h, &UInt32x2Type },
    std::pair{ "yy"_h, &UInt32x2Type },
    std::pair{ "yz"_h, &UInt32x2Type },
    std::pair{ "xz"_h, &UInt32x2Type },
    std::pair{ "xy"_h, &UInt32x2Type },
    std::pair{ "xx"_h, &UInt32x2Type },
    std::pair{ "zy"_h, &UInt32x2Type },
    std::pair{ "zx"_h, &UInt32x2Type },
    std::pair{ "zz"_h, &UInt32x2Type },
    std::pair{ "operator[](i16)"_h, &UInt32x3_operator_index_Int16 },
    std::pair{ "operator|=(u32x3)"_h, &UInt32x3_operator_orasg_UInt32x3 },
    std::pair{ "operator&(u32x3)"_h, &UInt32x3_operator_and_UInt32x3 },
    std::pair{ "operator>>=(u32x3)"_h, &UInt32x3_operator_rhsasg_UInt32x3 },
    std::pair{ "operator*(u32)"_h, &UInt32x3_operator_scale_UInt32 },
    std::pair{ "operator^(u32x3)"_h, &UInt32x3_operator_xor_UInt32x3 },
    std::pair{ "operator<<(u32x3)"_h, &UInt32x3_operator_lsh_UInt32x3 },
    std::pair{ "operator&=(u32x3)"_h, &UInt32x3_operator_andasg_UInt32x3 },
    std::pair{ "brrg"_h, &UInt32x4Type },
    std::pair{ "brrb"_h, &UInt32x4Type },
    std::pair{ "brrr"_h, &UInt32x4Type },
    std::pair{ "brgr"_h, &UInt32x4Type },
    std::pair{ "brgg"_h, &UInt32x4Type },
    std::pair{ "brgb"_h, &UInt32x4Type },
    std::pair{ "brbr"_h, &UInt32x4Type },
    std::pair{ "brbg"_h, &UInt32x4Type },
    std::pair{ "brbb"_h, &UInt32x4Type },
    std::pair{ "operator-(u32x3)"_h, &UInt32x3_operator_sub_UInt32x3 },
    std::pair{ "operator^"_h, &UInt32x3_operator_xor_UInt32x3 },
    std::pair{ "operator|"_h, &UInt32x3_operator_or_UInt32x3 },
    std::pair{ "operator<"_h, &UInt32x3_operator_lt_UInt32x3 },
    std::pair{ "operator>"_h, &UInt32x3_operator_gt_UInt32x3 },
    std::pair{ "operator-"_h, &UInt32x3_operator_sub_UInt32x3 },
    std::pair{ "operator/"_h, &UInt32x3_operator_div_UInt32x3 },
    std::pair{ "operator+"_h, &UInt32x3_operator_add_UInt32x3 },
    std::pair{ "operator*"_h, &UInt32x3_operator_mul_UInt32x3 },
    std::pair{ "operator*"_h, &UInt32x3_operator_scale_Float32 },
    std::pair{ "operator*"_h, &UInt32x3_operator_scale_UInt32 },
    std::pair{ "operator*"_h, &UInt32x3_operator_scale_Int32 },
    std::pair{ "operator%"_h, &UInt32x3_operator_mod_UInt32x3 },
    std::pair{ "operator&"_h, &UInt32x3_operator_and_UInt32x3 },
    std::pair{ "xzzz"_h, &UInt32x4Type },
    std::pair{ "xzzy"_h, &UInt32x4Type },
    std::pair{ "xzzx"_h, &UInt32x4Type },
    std::pair{ "xzyz"_h, &UInt32x4Type },
    std::pair{ "xzyx"_h, &UInt32x4Type },
    std::pair{ "xzyy"_h, &UInt32x4Type },
    std::pair{ "xzxy"_h, &UInt32x4Type },
    std::pair{ "xzxx"_h, &UInt32x4Type },
    std::pair{ "xzxz"_h, &UInt32x4Type },
    std::pair{ "yxxx"_h, &UInt32x4Type },
    std::pair{ "yxxy"_h, &UInt32x4Type },
    std::pair{ "yxxz"_h, &UInt32x4Type },
    std::pair{ "yxyz"_h, &UInt32x4Type },
    std::pair{ "yxyy"_h, &UInt32x4Type },
    std::pair{ "yxyx"_h, &UInt32x4Type },
    std::pair{ "yxzz"_h, &UInt32x4Type },
    std::pair{ "yxzx"_h, &UInt32x4Type },
    std::pair{ "yxzy"_h, &UInt32x4Type },
    std::pair{ "xyzx"_h, &UInt32x4Type },
    std::pair{ "xyzy"_h, &UInt32x4Type },
    std::pair{ "xyzz"_h, &UInt32x4Type },
    std::pair{ "xyxz"_h, &UInt32x4Type },
    std::pair{ "xyxx"_h, &UInt32x4Type },
    std::pair{ "xyxy"_h, &UInt32x4Type },
    std::pair{ "xyyy"_h, &UInt32x4Type },
    std::pair{ "xyyx"_h, &UInt32x4Type },
    std::pair{ "xyyz"_h, &UInt32x4Type },
    std::pair{ "ggrr"_h, &UInt32x4Type },
    std::pair{ "ggrb"_h, &UInt32x4Type },
    std::pair{ "ggrg"_h, &UInt32x4Type },
    std::pair{ "ggbb"_h, &UInt32x4Type },
    std::pair{ "ggbg"_h, &UInt32x4Type },
    std::pair{ "ggbr"_h, &UInt32x4Type },
    std::pair{ "gggr"_h, &UInt32x4Type },
    std::pair{ "gggg"_h, &UInt32x4Type },
    std::pair{ "gggb"_h, &UInt32x4Type },
    std::pair{ "yyzz"_h, &UInt32x4Type },
    std::pair{ "yyzy"_h, &UInt32x4Type },
    std::pair{ "yyzx"_h, &UInt32x4Type },
    std::pair{ "yyyz"_h, &UInt32x4Type },
    std::pair{ "yyyx"_h, &UInt32x4Type },
    std::pair{ "yyyy"_h, &UInt32x4Type },
    std::pair{ "yyxy"_h, &UInt32x4Type },
    std::pair{ "yyxx"_h, &UInt32x4Type },
    std::pair{ "yyxz"_h, &UInt32x4Type },
    std::pair{ "xxyx"_h, &UInt32x4Type },
    std::pair{ "xxyy"_h, &UInt32x4Type },
    std::pair{ "xxyz"_h, &UInt32x4Type },
    std::pair{ "xxxz"_h, &UInt32x4Type },
    std::pair{ "xxxy"_h, &UInt32x4Type },
    std::pair{ "xxxx"_h, &UInt32x4Type },
    std::pair{ "xxzy"_h, &UInt32x4Type },
    std::pair{ "xxzx"_h, &UInt32x4Type },
    std::pair{ "xxzz"_h, &UInt32x4Type },
    std::pair{ "rgrg"_h, &UInt32x4Type },
    std::pair{ "rgrb"_h, &UInt32x4Type },
    std::pair{ "rgrr"_h, &UInt32x4Type },
    std::pair{ "rggb"_h, &UInt32x4Type },
    std::pair{ "rggg"_h, &UInt32x4Type },
    std::pair{ "rggr"_h, &UInt32x4Type },
    std::pair{ "rgbr"_h, &UInt32x4Type },
    std::pair{ "rgbg"_h, &UInt32x4Type },
    std::pair{ "rgbb"_h, &UInt32x4Type },
    std::pair{ "yzzx"_h, &UInt32x4Type },
    std::pair{ "yzzy"_h, &UInt32x4Type },
    std::pair{ "yzzz"_h, &UInt32x4Type },
    std::pair{ "yzxz"_h, &UInt32x4Type },
    std::pair{ "yzxx"_h, &UInt32x4Type },
    std::pair{ "yzxy"_h, &UInt32x4Type },
    std::pair{ "yzyy"_h, &UInt32x4Type },
    std::pair{ "yzyx"_h, &UInt32x4Type },
    std::pair{ "yzyz"_h, &UInt32x4Type },
    std::pair{ "gbgr"_h, &UInt32x4Type },
    std::pair{ "gbgb"_h, &UInt32x4Type },
    std::pair{ "gbgg"_h, &UInt32x4Type },
    std::pair{ "gbbb"_h, &UInt32x4Type },
    std::pair{ "gbbg"_h, &UInt32x4Type },
    std::pair{ "gbbr"_h, &UInt32x4Type },
    std::pair{ "gbrr"_h, &UInt32x4Type },
    std::pair{ "gbrb"_h, &UInt32x4Type },
    std::pair{ "gbrg"_h, &UInt32x4Type },
    std::pair{ "operator-=(u32x3)"_h, &UInt32x3_operator_subasg_UInt32x3 },
    std::pair{ "rbrg"_h, &UInt32x4Type },
    std::pair{ "rbrb"_h, &UInt32x4Type },
    std::pair{ "rbrr"_h, &UInt32x4Type },
    std::pair{ "rbgr"_h, &UInt32x4Type },
    std::pair{ "rbgg"_h, &UInt32x4Type },
    std::pair{ "rbgb"_h, &UInt32x4Type },
    std::pair{ "rbbr"_h, &UInt32x4Type },
    std::pair{ "rbbg"_h, &UInt32x4Type },
    std::pair{ "rbbb"_h, &UInt32x4Type },
    std::pair{ "zyxx"_h, &UInt32x4Type },
    std::pair{ "zyxy"_h, &UInt32x4Type },
    std::pair{ "zyxz"_h, &UInt32x4Type },
    std::pair{ "zyyz"_h, &UInt32x4Type },
    std::pair{ "zyyy"_h, &UInt32x4Type },
    std::pair{ "zyyx"_h, &UInt32x4Type },
    std::pair{ "zyzz"_h, &UInt32x4Type },
    std::pair{ "zyzx"_h, &UInt32x4Type },
    std::pair{ "zyzy"_h, &UInt32x4Type },
    std::pair{ "operator/(u32x3)"_h, &UInt32x3_operator_div_UInt32x3 },
    std::pair{ "bggr"_h, &UInt32x4Type },
    std::pair{ "bggb"_h, &UInt32x4Type },
    std::pair{ "bggg"_h, &UInt32x4Type },
    std::pair{ "bgbg"_h, &UInt32x4Type },
    std::pair{ "bgbb"_h, &UInt32x4Type },
    std::pair{ "bgbr"_h, &UInt32x4Type },
    std::pair{ "bgrr"_h, &UInt32x4Type },
    std::pair{ "bgrg"_h, &UInt32x4Type },
    std::pair{ "bgrb"_h, &UInt32x4Type },
    std::pair{ "rrg"_h, &UInt32x3Type },
    std::pair{ "rrb"_h, &UInt32x3Type },
    std::pair{ "rrr"_h, &UInt32x3Type },
    std::pair{ "rgr"_h, &UInt32x3Type },
    std::pair{ "rgg"_h, &UInt32x3Type },
    std::pair{ "rgb"_h, &UInt32x3Type },
    std::pair{ "rbr"_h, &UInt32x3Type },
    std::pair{ "rbg"_h, &UInt32x3Type },
    std::pair{ "rbb"_h, &UInt32x3Type },
    std::pair{ "operator[](u32)"_h, &UInt32x3_operator_index_UInt32 },
    std::pair{ "operator<<="_h, &UInt32x3_operator_lshasg_UInt32x3 },
    std::pair{ "zxzz"_h, &UInt32x4Type },
    std::pair{ "zxzy"_h, &UInt32x4Type },
    std::pair{ "zxzx"_h, &UInt32x4Type },
    std::pair{ "zxyz"_h, &UInt32x4Type },
    std::pair{ "zxyx"_h, &UInt32x4Type },
    std::pair{ "zxyy"_h, &UInt32x4Type },
    std::pair{ "zxxy"_h, &UInt32x4Type },
    std::pair{ "zxxx"_h, &UInt32x4Type },
    std::pair{ "zxxz"_h, &UInt32x4Type },
    std::pair{ "operator!=(u32x3)"_h, &UInt32x3_operator_neq_UInt32x3 },
    std::pair{ "operator*(f32)"_h, &UInt32x3_operator_scale_Float32 },
    std::pair{ "operator|(u32x3)"_h, &UInt32x3_operator_or_UInt32x3 },
    std::pair{ "operator>>(u32x3)"_h, &UInt32x3_operator_rsh_UInt32x3 },
    std::pair{ "operator[](u16)"_h, &UInt32x3_operator_index_UInt16 },
    std::pair{ "operator/=(u32x3)"_h, &UInt32x3_operator_divasg_UInt32x3 },
    std::pair{ "operator>>="_h, &UInt32x3_operator_rhsasg_UInt32x3 },
    std::pair{ "zzyx"_h, &UInt32x4Type },
    std::pair{ "zzyy"_h, &UInt32x4Type },
    std::pair{ "zzyz"_h, &UInt32x4Type },
    std::pair{ "zzxz"_h, &UInt32x4Type },
    std::pair{ "zzxy"_h, &UInt32x4Type },
    std::pair{ "zzxx"_h, &UInt32x4Type },
    std::pair{ "zzzy"_h, &UInt32x4Type },
    std::pair{ "zzzx"_h, &UInt32x4Type },
    std::pair{ "zzzz"_h, &UInt32x4Type },
    std::pair{ "g"_h, &UInt32Type },
    std::pair{ "b"_h, &UInt32Type },
    std::pair{ "r"_h, &UInt32Type },
    std::pair{ "y"_h, &UInt32Type },
    std::pair{ "x"_h, &UInt32Type },
    std::pair{ "z"_h, &UInt32Type },
    std::pair{ "operator*(i32)"_h, &UInt32x3_operator_scale_Int32 },
    std::pair{ "bbgg"_h, &UInt32x4Type },
    std::pair{ "bbgb"_h, &UInt32x4Type },
    std::pair{ "bbgr"_h, &UInt32x4Type },
    std::pair{ "bbbg"_h, &UInt32x4Type },
    std::pair{ "bbbb"_h, &UInt32x4Type },
    std::pair{ "bbbr"_h, &UInt32x4Type },
    std::pair{ "bbrr"_h, &UInt32x4Type },
    std::pair{ "bbrg"_h, &UInt32x4Type },
    std::pair{ "bbrb"_h, &UInt32x4Type },
    std::pair{ "yxx"_h, &UInt32x3Type },
    std::pair{ "yxy"_h, &UInt32x3Type },
    std::pair{ "yxz"_h, &UInt32x3Type },
    std::pair{ "yyz"_h, &UInt32x3Type },
    std::pair{ "yyy"_h, &UInt32x3Type },
    std::pair{ "yyx"_h, &UInt32x3Type },
    std::pair{ "yzz"_h, &UInt32x3Type },
    std::pair{ "yzx"_h, &UInt32x3Type },
    std::pair{ "yzy"_h, &UInt32x3Type },
    std::pair{ "xzz"_h, &UInt32x3Type },
    std::pair{ "xzy"_h, &UInt32x3Type },
    std::pair{ "xzx"_h, &UInt32x3Type },
    std::pair{ "xyz"_h, &UInt32x3Type },
    std::pair{ "xyx"_h, &UInt32x3Type },
    std::pair{ "xyy"_h, &UInt32x3Type },
    std::pair{ "xxy"_h, &UInt32x3Type },
    std::pair{ "xxx"_h, &UInt32x3Type },
    std::pair{ "xxz"_h, &UInt32x3Type },
    std::pair{ "operator+=(u32x3)"_h, &UInt32x3_operator_addasg_UInt32x3 },
    std::pair{ "operator*(u32x3)"_h, &UInt32x3_operator_mul_UInt32x3 },
    std::pair{ "zyx"_h, &UInt32x3Type },
    std::pair{ "zyy"_h, &UInt32x3Type },
    std::pair{ "zyz"_h, &UInt32x3Type },
    std::pair{ "zxz"_h, &UInt32x3Type },
    std::pair{ "zxy"_h, &UInt32x3Type },
    std::pair{ "zxx"_h, &UInt32x3Type },
    std::pair{ "zzy"_h, &UInt32x3Type },
    std::pair{ "zzx"_h, &UInt32x3Type },
    std::pair{ "zzz"_h, &UInt32x3Type },
    std::pair{ "ggr"_h, &UInt32x3Type },
    std::pair{ "ggb"_h, &UInt32x3Type },
    std::pair{ "ggg"_h, &UInt32x3Type },
    std::pair{ "gbg"_h, &UInt32x3Type },
    std::pair{ "gbb"_h, &UInt32x3Type },
    std::pair{ "gbr"_h, &UInt32x3Type },
    std::pair{ "grr"_h, &UInt32x3Type },
    std::pair{ "grg"_h, &UInt32x3Type },
    std::pair{ "grb"_h, &UInt32x3Type },
    std::pair{ "operator%(u32x3)"_h, &UInt32x3_operator_mod_UInt32x3 },
    std::pair{ "operator+(u32x3)"_h, &UInt32x3_operator_add_UInt32x3 },
    std::pair{ "operator^=(u32x3)"_h, &UInt32x3_operator_xorasg_UInt32x3 },
    std::pair{ "operator<<=(u32x3)"_h, &UInt32x3_operator_lshasg_UInt32x3 },
    std::pair{ "operator^="_h, &UInt32x3_operator_xorasg_UInt32x3 },
    std::pair{ "operator[]"_h, &UInt32x3_operator_index_Int32 },
    std::pair{ "operator[]"_h, &UInt32x3_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &UInt32x3_operator_index_Int16 },
    std::pair{ "operator[]"_h, &UInt32x3_operator_index_UInt16 },
    std::pair{ "operator|="_h, &UInt32x3_operator_orasg_UInt32x3 },
    std::pair{ "operator=="_h, &UInt32x3_operator_eq_UInt32x3 },
    std::pair{ "operator<="_h, &UInt32x3_operator_lte_UInt32x3 },
    std::pair{ "operator<<"_h, &UInt32x3_operator_lsh_UInt32x3 },
    std::pair{ "operator<=(u32x3)"_h, &UInt32x3_operator_lte_UInt32x3 },
    std::pair{ "operator>="_h, &UInt32x3_operator_gte_UInt32x3 },
    std::pair{ "operator>>"_h, &UInt32x3_operator_rsh_UInt32x3 },
    std::pair{ "operator-="_h, &UInt32x3_operator_subasg_UInt32x3 },
    std::pair{ "operator/="_h, &UInt32x3_operator_divasg_UInt32x3 },
    std::pair{ "operator+="_h, &UInt32x3_operator_addasg_UInt32x3 },
    std::pair{ "operator*="_h, &UInt32x3_operator_mulasg_UInt32x3 },
    std::pair{ "operator&="_h, &UInt32x3_operator_andasg_UInt32x3 },
    std::pair{ "operator!="_h, &UInt32x3_operator_neq_UInt32x3 },
    std::pair{ "operator>=(u32x3)"_h, &UInt32x3_operator_gte_UInt32x3 },
    std::pair{ "operator>(u32x3)"_h, &UInt32x3_operator_gt_UInt32x3 },
    std::pair{ "operator*=(u32x3)"_h, &UInt32x3_operator_mulasg_UInt32x3 },
    std::pair{ "operator<(u32x3)"_h, &UInt32x3_operator_lt_UInt32x3 },
    std::pair{ "operator[](i32)"_h, &UInt32x3_operator_index_Int32 },
    std::pair{ "grrb"_h, &UInt32x4Type },
    std::pair{ "grrg"_h, &UInt32x4Type },
    std::pair{ "grrr"_h, &UInt32x4Type },
    std::pair{ "grgb"_h, &UInt32x4Type },
    std::pair{ "grgg"_h, &UInt32x4Type },
    std::pair{ "grgr"_h, &UInt32x4Type },
    std::pair{ "grbr"_h, &UInt32x4Type },
    std::pair{ "grbb"_h, &UInt32x4Type },
    std::pair{ "grbg"_h, &UInt32x4Type },
    std::pair{ "rrgg"_h, &UInt32x4Type },
    std::pair{ "rrgb"_h, &UInt32x4Type },
    std::pair{ "rrgr"_h, &UInt32x4Type },
    std::pair{ "rrbg"_h, &UInt32x4Type },
    std::pair{ "rrbb"_h, &UInt32x4Type },
    std::pair{ "rrbr"_h, &UInt32x4Type },
    std::pair{ "rrrr"_h, &UInt32x4Type },
    std::pair{ "rrrg"_h, &UInt32x4Type },
    std::pair{ "rrrb"_h, &UInt32x4Type }
    };

UInt32x3::UInt32x3()
{
    this->name = "u32x3"_c;
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    /// operator[] with Int32
    UInt32x3_operator_index_Int32_arg.name = "arg"_c;
    UInt32x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x3_operator_index_Int32.name = UInt32x3_operator_index_Int32_name;
    UInt32x3_operator_index_Int32.backendIndex = 555;
    UInt32x3_operator_index_Int32.returnType = Type::FullType { UInt32Type.name };
    UInt32x3_operator_index_Int32.parameters = UInt32x3_operator_index_Int32_args;
    Symbol::Resolved(&UInt32x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x3_operator_index_Int32)->signature = "operator[](i32) u32"_c;
    Symbol::Resolved(&UInt32x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt32
    UInt32x3_operator_index_UInt32_arg.name = "arg"_c;
    UInt32x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x3_operator_index_UInt32.name = UInt32x3_operator_index_UInt32_name;
    UInt32x3_operator_index_UInt32.backendIndex = 556;
    UInt32x3_operator_index_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32x3_operator_index_UInt32.parameters = UInt32x3_operator_index_UInt32_args;
    Symbol::Resolved(&UInt32x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_operator_index_UInt32)->signature = "operator[](u32) u32"_c;
    Symbol::Resolved(&UInt32x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with Int16
    UInt32x3_operator_index_Int16_arg.name = "arg"_c;
    UInt32x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt32x3_operator_index_Int16.name = UInt32x3_operator_index_Int16_name;
    UInt32x3_operator_index_Int16.backendIndex = 557;
    UInt32x3_operator_index_Int16.returnType = Type::FullType { UInt32Type.name };
    UInt32x3_operator_index_Int16.parameters = UInt32x3_operator_index_Int16_args;
    Symbol::Resolved(&UInt32x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x3_operator_index_Int16)->signature = "operator[](i16) u32"_c;
    Symbol::Resolved(&UInt32x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt16
    UInt32x3_operator_index_UInt16_arg.name = "arg"_c;
    UInt32x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt32x3_operator_index_UInt16.name = UInt32x3_operator_index_UInt16_name;
    UInt32x3_operator_index_UInt16.backendIndex = 558;
    UInt32x3_operator_index_UInt16.returnType = Type::FullType { UInt32Type.name };
    UInt32x3_operator_index_UInt16.parameters = UInt32x3_operator_index_UInt16_args;
    Symbol::Resolved(&UInt32x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x3_operator_index_UInt16)->signature = "operator[](u16) u32"_c;
    Symbol::Resolved(&UInt32x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    /// operator+ with UInt32x3
    UInt32x3_operator_add_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_add_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_add_UInt32x3.name = UInt32x3_operator_add_UInt32x3_name;
    UInt32x3_operator_add_UInt32x3.backendIndex = 559;
    UInt32x3_operator_add_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_add_UInt32x3.parameters = UInt32x3_operator_add_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_add_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_add_UInt32x3)->signature = "operator+(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_add_UInt32x3)->name = "operator+(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_add_UInt32x3)->nameWithVarNames = "operator+(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_add_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator- with UInt32x3
    UInt32x3_operator_sub_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_sub_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_sub_UInt32x3.name = UInt32x3_operator_sub_UInt32x3_name;
    UInt32x3_operator_sub_UInt32x3.backendIndex = 560;
    UInt32x3_operator_sub_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_sub_UInt32x3.parameters = UInt32x3_operator_sub_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_sub_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_sub_UInt32x3)->signature = "operator-(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_sub_UInt32x3)->name = "operator-(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_sub_UInt32x3)->nameWithVarNames = "operator-(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_sub_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator* with UInt32x3
    UInt32x3_operator_mul_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_mul_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_mul_UInt32x3.name = UInt32x3_operator_mul_UInt32x3_name;
    UInt32x3_operator_mul_UInt32x3.backendIndex = 561;
    UInt32x3_operator_mul_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_mul_UInt32x3.parameters = UInt32x3_operator_mul_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_mul_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_mul_UInt32x3)->signature = "operator*(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_mul_UInt32x3)->name = "operator*(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_mul_UInt32x3)->nameWithVarNames = "operator*(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_mul_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator/ with UInt32x3
    UInt32x3_operator_div_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_div_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_div_UInt32x3.name = UInt32x3_operator_div_UInt32x3_name;
    UInt32x3_operator_div_UInt32x3.backendIndex = 562;
    UInt32x3_operator_div_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_div_UInt32x3.parameters = UInt32x3_operator_div_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_div_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_div_UInt32x3)->signature = "operator/(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_div_UInt32x3)->name = "operator/(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_div_UInt32x3)->nameWithVarNames = "operator/(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_div_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator% with UInt32x3
    UInt32x3_operator_mod_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_mod_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_mod_UInt32x3.name = UInt32x3_operator_mod_UInt32x3_name;
    UInt32x3_operator_mod_UInt32x3.backendIndex = 563;
    UInt32x3_operator_mod_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_mod_UInt32x3.parameters = UInt32x3_operator_mod_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_mod_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_mod_UInt32x3)->signature = "operator%(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_mod_UInt32x3)->name = "operator%(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_mod_UInt32x3)->nameWithVarNames = "operator%(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_mod_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator+= with UInt32x3
    UInt32x3_operator_addasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_addasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_addasg_UInt32x3.name = UInt32x3_operator_addasg_UInt32x3_name;
    UInt32x3_operator_addasg_UInt32x3.backendIndex = 564;
    UInt32x3_operator_addasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_addasg_UInt32x3.parameters = UInt32x3_operator_addasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_addasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_addasg_UInt32x3)->signature = "operator+=(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_addasg_UInt32x3)->name = "operator+=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_addasg_UInt32x3)->nameWithVarNames = "operator+=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_addasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator-= with UInt32x3
    UInt32x3_operator_subasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_subasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_subasg_UInt32x3.name = UInt32x3_operator_subasg_UInt32x3_name;
    UInt32x3_operator_subasg_UInt32x3.backendIndex = 565;
    UInt32x3_operator_subasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_subasg_UInt32x3.parameters = UInt32x3_operator_subasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_subasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_subasg_UInt32x3)->signature = "operator-=(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_subasg_UInt32x3)->name = "operator-=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_subasg_UInt32x3)->nameWithVarNames = "operator-=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_subasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator*= with UInt32x3
    UInt32x3_operator_mulasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_mulasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_mulasg_UInt32x3.name = UInt32x3_operator_mulasg_UInt32x3_name;
    UInt32x3_operator_mulasg_UInt32x3.backendIndex = 566;
    UInt32x3_operator_mulasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_mulasg_UInt32x3.parameters = UInt32x3_operator_mulasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_mulasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_mulasg_UInt32x3)->signature = "operator*=(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_mulasg_UInt32x3)->name = "operator*=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_mulasg_UInt32x3)->nameWithVarNames = "operator*=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_mulasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator/= with UInt32x3
    UInt32x3_operator_divasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_divasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_divasg_UInt32x3.name = UInt32x3_operator_divasg_UInt32x3_name;
    UInt32x3_operator_divasg_UInt32x3.backendIndex = 567;
    UInt32x3_operator_divasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_divasg_UInt32x3.parameters = UInt32x3_operator_divasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_divasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_divasg_UInt32x3)->signature = "operator/=(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_divasg_UInt32x3)->name = "operator/=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_divasg_UInt32x3)->nameWithVarNames = "operator/=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_divasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator< with UInt32x3
    UInt32x3_operator_lt_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_lt_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_lt_UInt32x3.name = UInt32x3_operator_lt_UInt32x3_name;
    UInt32x3_operator_lt_UInt32x3.backendIndex = 568;
    UInt32x3_operator_lt_UInt32x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt32x3_operator_lt_UInt32x3.parameters = UInt32x3_operator_lt_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_lt_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_lt_UInt32x3)->signature = "operator<(u32x3) b8x3"_c;
    Symbol::Resolved(&UInt32x3_operator_lt_UInt32x3)->name = "operator<(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lt_UInt32x3)->nameWithVarNames = "operator<(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lt_UInt32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator<= with UInt32x3
    UInt32x3_operator_lte_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_lte_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_lte_UInt32x3.name = UInt32x3_operator_lte_UInt32x3_name;
    UInt32x3_operator_lte_UInt32x3.backendIndex = 569;
    UInt32x3_operator_lte_UInt32x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt32x3_operator_lte_UInt32x3.parameters = UInt32x3_operator_lte_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_lte_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_lte_UInt32x3)->signature = "operator<=(u32x3) b8x3"_c;
    Symbol::Resolved(&UInt32x3_operator_lte_UInt32x3)->name = "operator<=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lte_UInt32x3)->nameWithVarNames = "operator<=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lte_UInt32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator> with UInt32x3
    UInt32x3_operator_gt_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_gt_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_gt_UInt32x3.name = UInt32x3_operator_gt_UInt32x3_name;
    UInt32x3_operator_gt_UInt32x3.backendIndex = 570;
    UInt32x3_operator_gt_UInt32x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt32x3_operator_gt_UInt32x3.parameters = UInt32x3_operator_gt_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_gt_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_gt_UInt32x3)->signature = "operator>(u32x3) b8x3"_c;
    Symbol::Resolved(&UInt32x3_operator_gt_UInt32x3)->name = "operator>(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_gt_UInt32x3)->nameWithVarNames = "operator>(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_gt_UInt32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator>= with UInt32x3
    UInt32x3_operator_gte_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_gte_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_gte_UInt32x3.name = UInt32x3_operator_gte_UInt32x3_name;
    UInt32x3_operator_gte_UInt32x3.backendIndex = 571;
    UInt32x3_operator_gte_UInt32x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt32x3_operator_gte_UInt32x3.parameters = UInt32x3_operator_gte_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_gte_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_gte_UInt32x3)->signature = "operator>=(u32x3) b8x3"_c;
    Symbol::Resolved(&UInt32x3_operator_gte_UInt32x3)->name = "operator>=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_gte_UInt32x3)->nameWithVarNames = "operator>=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_gte_UInt32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator== with UInt32x3
    UInt32x3_operator_eq_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_eq_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_eq_UInt32x3.name = UInt32x3_operator_eq_UInt32x3_name;
    UInt32x3_operator_eq_UInt32x3.backendIndex = 572;
    UInt32x3_operator_eq_UInt32x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt32x3_operator_eq_UInt32x3.parameters = UInt32x3_operator_eq_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_eq_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_eq_UInt32x3)->signature = "operator==(u32x3) b8x3"_c;
    Symbol::Resolved(&UInt32x3_operator_eq_UInt32x3)->name = "operator==(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_eq_UInt32x3)->nameWithVarNames = "operator==(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_eq_UInt32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator!= with UInt32x3
    UInt32x3_operator_neq_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_neq_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_neq_UInt32x3.name = UInt32x3_operator_neq_UInt32x3_name;
    UInt32x3_operator_neq_UInt32x3.backendIndex = 573;
    UInt32x3_operator_neq_UInt32x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt32x3_operator_neq_UInt32x3.parameters = UInt32x3_operator_neq_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_neq_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_neq_UInt32x3)->signature = "operator!=(u32x3) b8x3"_c;
    Symbol::Resolved(&UInt32x3_operator_neq_UInt32x3)->name = "operator!=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_neq_UInt32x3)->nameWithVarNames = "operator!=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_neq_UInt32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator* with Float32
    UInt32x3_operator_scale_Float32_arg.name = "arg"_c;
    UInt32x3_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt32x3_operator_scale_Float32.name = UInt32x3_operator_scale_Float32_name;
    UInt32x3_operator_scale_Float32.backendIndex = 574;
    UInt32x3_operator_scale_Float32.returnType = Type::FullType { Float32x3Type.name };
    UInt32x3_operator_scale_Float32.parameters = UInt32x3_operator_scale_Float32_args;
    Symbol::Resolved(&UInt32x3_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x3_operator_scale_Float32)->signature = "operator*(f32) f32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_Float32)->returnTypeSymbol = &Float32x3Type;

    /// operator* with UInt32
    UInt32x3_operator_scale_UInt32_arg.name = "arg"_c;
    UInt32x3_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x3_operator_scale_UInt32.name = UInt32x3_operator_scale_UInt32_name;
    UInt32x3_operator_scale_UInt32.backendIndex = 575;
    UInt32x3_operator_scale_UInt32.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_scale_UInt32.parameters = UInt32x3_operator_scale_UInt32_args;
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32)->signature = "operator*(u32) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32)->returnTypeSymbol = &UInt32x3Type;

    /// operator* with Int32
    UInt32x3_operator_scale_Int32_arg.name = "arg"_c;
    UInt32x3_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x3_operator_scale_Int32.name = UInt32x3_operator_scale_Int32_name;
    UInt32x3_operator_scale_Int32.backendIndex = 576;
    UInt32x3_operator_scale_Int32.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_scale_Int32.parameters = UInt32x3_operator_scale_Int32_args;
    Symbol::Resolved(&UInt32x3_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x3_operator_scale_Int32)->signature = "operator*(i32) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_Int32)->returnTypeSymbol = &UInt32x3Type;

    /// operator| with UInt32x3
    UInt32x3_operator_or_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_or_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_or_UInt32x3.name = UInt32x3_operator_or_UInt32x3_name;
    UInt32x3_operator_or_UInt32x3.backendIndex = 577;
    UInt32x3_operator_or_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_or_UInt32x3.parameters = UInt32x3_operator_or_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_or_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_or_UInt32x3)->signature = "operator|(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_or_UInt32x3)->name = "operator|(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_or_UInt32x3)->nameWithVarNames = "operator|(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_or_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator& with UInt32x3
    UInt32x3_operator_and_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_and_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_and_UInt32x3.name = UInt32x3_operator_and_UInt32x3_name;
    UInt32x3_operator_and_UInt32x3.backendIndex = 578;
    UInt32x3_operator_and_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_and_UInt32x3.parameters = UInt32x3_operator_and_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_and_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_and_UInt32x3)->signature = "operator&(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_and_UInt32x3)->name = "operator&(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_and_UInt32x3)->nameWithVarNames = "operator&(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_and_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator^ with UInt32x3
    UInt32x3_operator_xor_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_xor_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_xor_UInt32x3.name = UInt32x3_operator_xor_UInt32x3_name;
    UInt32x3_operator_xor_UInt32x3.backendIndex = 579;
    UInt32x3_operator_xor_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_xor_UInt32x3.parameters = UInt32x3_operator_xor_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_xor_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_xor_UInt32x3)->signature = "operator^(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_xor_UInt32x3)->name = "operator^(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_xor_UInt32x3)->nameWithVarNames = "operator^(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_xor_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator<< with UInt32x3
    UInt32x3_operator_lsh_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_lsh_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_lsh_UInt32x3.name = UInt32x3_operator_lsh_UInt32x3_name;
    UInt32x3_operator_lsh_UInt32x3.backendIndex = 580;
    UInt32x3_operator_lsh_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_lsh_UInt32x3.parameters = UInt32x3_operator_lsh_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_lsh_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_lsh_UInt32x3)->signature = "operator<<(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_lsh_UInt32x3)->name = "operator<<(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lsh_UInt32x3)->nameWithVarNames = "operator<<(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lsh_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator>> with UInt32x3
    UInt32x3_operator_rsh_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_rsh_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_rsh_UInt32x3.name = UInt32x3_operator_rsh_UInt32x3_name;
    UInt32x3_operator_rsh_UInt32x3.backendIndex = 581;
    UInt32x3_operator_rsh_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_rsh_UInt32x3.parameters = UInt32x3_operator_rsh_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_rsh_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_rsh_UInt32x3)->signature = "operator>>(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_rsh_UInt32x3)->name = "operator>>(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_rsh_UInt32x3)->nameWithVarNames = "operator>>(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_rsh_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator|= with UInt32x3
    UInt32x3_operator_orasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_orasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_orasg_UInt32x3.name = UInt32x3_operator_orasg_UInt32x3_name;
    UInt32x3_operator_orasg_UInt32x3.backendIndex = 582;
    UInt32x3_operator_orasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_orasg_UInt32x3.parameters = UInt32x3_operator_orasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_orasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_orasg_UInt32x3)->signature = "operator|=(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_orasg_UInt32x3)->name = "operator|=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_orasg_UInt32x3)->nameWithVarNames = "operator|=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_orasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator&= with UInt32x3
    UInt32x3_operator_andasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_andasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_andasg_UInt32x3.name = UInt32x3_operator_andasg_UInt32x3_name;
    UInt32x3_operator_andasg_UInt32x3.backendIndex = 583;
    UInt32x3_operator_andasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_andasg_UInt32x3.parameters = UInt32x3_operator_andasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_andasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_andasg_UInt32x3)->signature = "operator&=(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_andasg_UInt32x3)->name = "operator&=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_andasg_UInt32x3)->nameWithVarNames = "operator&=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_andasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator^= with UInt32x3
    UInt32x3_operator_xorasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_xorasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_xorasg_UInt32x3.name = UInt32x3_operator_xorasg_UInt32x3_name;
    UInt32x3_operator_xorasg_UInt32x3.backendIndex = 584;
    UInt32x3_operator_xorasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_xorasg_UInt32x3.parameters = UInt32x3_operator_xorasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_xorasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_xorasg_UInt32x3)->signature = "operator^=(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_xorasg_UInt32x3)->name = "operator^=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_xorasg_UInt32x3)->nameWithVarNames = "operator^=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_xorasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator<<= with UInt32x3
    UInt32x3_operator_lshasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_lshasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_lshasg_UInt32x3.name = UInt32x3_operator_lshasg_UInt32x3_name;
    UInt32x3_operator_lshasg_UInt32x3.backendIndex = 585;
    UInt32x3_operator_lshasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_lshasg_UInt32x3.parameters = UInt32x3_operator_lshasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_lshasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_lshasg_UInt32x3)->signature = "operator<<=(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_lshasg_UInt32x3)->name = "operator<<=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lshasg_UInt32x3)->nameWithVarNames = "operator<<=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lshasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator>>= with UInt32x3
    UInt32x3_operator_rhsasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_rhsasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_rhsasg_UInt32x3.name = UInt32x3_operator_rhsasg_UInt32x3_name;
    UInt32x3_operator_rhsasg_UInt32x3.backendIndex = 586;
    UInt32x3_operator_rhsasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_rhsasg_UInt32x3.parameters = UInt32x3_operator_rhsasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_rhsasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_rhsasg_UInt32x3)->signature = "operator>>=(u32x3) u32x3"_c;
    Symbol::Resolved(&UInt32x3_operator_rhsasg_UInt32x3)->name = "operator>>=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_rhsasg_UInt32x3)->nameWithVarNames = "operator>>=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_rhsasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    this->scope.symbolLookup = UInt32x3_symbolLookup;
}
UInt32x3 UInt32x3Type;

/// operator[] with Int32
Variable Int32x3_operator_index_Int32_arg;
Function Int32x3_operator_index_Int32;
inline constexpr std::array Int32x3_operator_index_Int32_args = { &Int32x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int32x3_operator_index_UInt32_arg;
Function Int32x3_operator_index_UInt32;
inline constexpr std::array Int32x3_operator_index_UInt32_args = { &Int32x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int32x3_operator_index_Int16_arg;
Function Int32x3_operator_index_Int16;
inline constexpr std::array Int32x3_operator_index_Int16_args = { &Int32x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int32x3_operator_index_UInt16_arg;
Function Int32x3_operator_index_UInt16;
inline constexpr std::array Int32x3_operator_index_UInt16_args = { &Int32x3_operator_index_UInt16_arg };

/// operator+ with Int32x3
Variable Int32x3_operator_add_Int32x3_arg;
Function Int32x3_operator_add_Int32x3;
inline constexpr std::array Int32x3_operator_add_Int32x3_args = { &Int32x3_operator_add_Int32x3_arg };

/// operator- with Int32x3
Variable Int32x3_operator_sub_Int32x3_arg;
Function Int32x3_operator_sub_Int32x3;
inline constexpr std::array Int32x3_operator_sub_Int32x3_args = { &Int32x3_operator_sub_Int32x3_arg };

/// operator* with Int32x3
Variable Int32x3_operator_mul_Int32x3_arg;
Function Int32x3_operator_mul_Int32x3;
inline constexpr std::array Int32x3_operator_mul_Int32x3_args = { &Int32x3_operator_mul_Int32x3_arg };

/// operator/ with Int32x3
Variable Int32x3_operator_div_Int32x3_arg;
Function Int32x3_operator_div_Int32x3;
inline constexpr std::array Int32x3_operator_div_Int32x3_args = { &Int32x3_operator_div_Int32x3_arg };

/// operator% with Int32x3
Variable Int32x3_operator_mod_Int32x3_arg;
Function Int32x3_operator_mod_Int32x3;
inline constexpr std::array Int32x3_operator_mod_Int32x3_args = { &Int32x3_operator_mod_Int32x3_arg };

/// operator+= with Int32x3
Variable Int32x3_operator_addasg_Int32x3_arg;
Function Int32x3_operator_addasg_Int32x3;
inline constexpr std::array Int32x3_operator_addasg_Int32x3_args = { &Int32x3_operator_addasg_Int32x3_arg };

/// operator-= with Int32x3
Variable Int32x3_operator_subasg_Int32x3_arg;
Function Int32x3_operator_subasg_Int32x3;
inline constexpr std::array Int32x3_operator_subasg_Int32x3_args = { &Int32x3_operator_subasg_Int32x3_arg };

/// operator*= with Int32x3
Variable Int32x3_operator_mulasg_Int32x3_arg;
Function Int32x3_operator_mulasg_Int32x3;
inline constexpr std::array Int32x3_operator_mulasg_Int32x3_args = { &Int32x3_operator_mulasg_Int32x3_arg };

/// operator/= with Int32x3
Variable Int32x3_operator_divasg_Int32x3_arg;
Function Int32x3_operator_divasg_Int32x3;
inline constexpr std::array Int32x3_operator_divasg_Int32x3_args = { &Int32x3_operator_divasg_Int32x3_arg };

/// operator< with Int32x3
Variable Int32x3_operator_lt_Int32x3_arg;
Function Int32x3_operator_lt_Int32x3;
inline constexpr std::array Int32x3_operator_lt_Int32x3_args = { &Int32x3_operator_lt_Int32x3_arg };

/// operator<= with Int32x3
Variable Int32x3_operator_lte_Int32x3_arg;
Function Int32x3_operator_lte_Int32x3;
inline constexpr std::array Int32x3_operator_lte_Int32x3_args = { &Int32x3_operator_lte_Int32x3_arg };

/// operator> with Int32x3
Variable Int32x3_operator_gt_Int32x3_arg;
Function Int32x3_operator_gt_Int32x3;
inline constexpr std::array Int32x3_operator_gt_Int32x3_args = { &Int32x3_operator_gt_Int32x3_arg };

/// operator>= with Int32x3
Variable Int32x3_operator_gte_Int32x3_arg;
Function Int32x3_operator_gte_Int32x3;
inline constexpr std::array Int32x3_operator_gte_Int32x3_args = { &Int32x3_operator_gte_Int32x3_arg };

/// operator== with Int32x3
Variable Int32x3_operator_eq_Int32x3_arg;
Function Int32x3_operator_eq_Int32x3;
inline constexpr std::array Int32x3_operator_eq_Int32x3_args = { &Int32x3_operator_eq_Int32x3_arg };

/// operator!= with Int32x3
Variable Int32x3_operator_neq_Int32x3_arg;
Function Int32x3_operator_neq_Int32x3;
inline constexpr std::array Int32x3_operator_neq_Int32x3_args = { &Int32x3_operator_neq_Int32x3_arg };

/// operator* with Float32
Variable Int32x3_operator_scale_Float32_arg;
Function Int32x3_operator_scale_Float32;
inline constexpr std::array Int32x3_operator_scale_Float32_args = { &Int32x3_operator_scale_Float32_arg };

/// operator* with UInt32
Variable Int32x3_operator_scale_UInt32_arg;
Function Int32x3_operator_scale_UInt32;
inline constexpr std::array Int32x3_operator_scale_UInt32_args = { &Int32x3_operator_scale_UInt32_arg };

/// operator* with Int32
Variable Int32x3_operator_scale_Int32_arg;
Function Int32x3_operator_scale_Int32;
inline constexpr std::array Int32x3_operator_scale_Int32_args = { &Int32x3_operator_scale_Int32_arg };

/// operator| with Int32x3
Variable Int32x3_operator_or_Int32x3_arg;
Function Int32x3_operator_or_Int32x3;
inline constexpr std::array Int32x3_operator_or_Int32x3_args = { &Int32x3_operator_or_Int32x3_arg };

/// operator& with Int32x3
Variable Int32x3_operator_and_Int32x3_arg;
Function Int32x3_operator_and_Int32x3;
inline constexpr std::array Int32x3_operator_and_Int32x3_args = { &Int32x3_operator_and_Int32x3_arg };

/// operator^ with Int32x3
Variable Int32x3_operator_xor_Int32x3_arg;
Function Int32x3_operator_xor_Int32x3;
inline constexpr std::array Int32x3_operator_xor_Int32x3_args = { &Int32x3_operator_xor_Int32x3_arg };

/// operator<< with Int32x3
Variable Int32x3_operator_lsh_Int32x3_arg;
Function Int32x3_operator_lsh_Int32x3;
inline constexpr std::array Int32x3_operator_lsh_Int32x3_args = { &Int32x3_operator_lsh_Int32x3_arg };

/// operator>> with Int32x3
Variable Int32x3_operator_rsh_Int32x3_arg;
Function Int32x3_operator_rsh_Int32x3;
inline constexpr std::array Int32x3_operator_rsh_Int32x3_args = { &Int32x3_operator_rsh_Int32x3_arg };

/// operator|= with Int32x3
Variable Int32x3_operator_orasg_Int32x3_arg;
Function Int32x3_operator_orasg_Int32x3;
inline constexpr std::array Int32x3_operator_orasg_Int32x3_args = { &Int32x3_operator_orasg_Int32x3_arg };

/// operator&= with Int32x3
Variable Int32x3_operator_andasg_Int32x3_arg;
Function Int32x3_operator_andasg_Int32x3;
inline constexpr std::array Int32x3_operator_andasg_Int32x3_args = { &Int32x3_operator_andasg_Int32x3_arg };

/// operator^= with Int32x3
Variable Int32x3_operator_xorasg_Int32x3_arg;
Function Int32x3_operator_xorasg_Int32x3;
inline constexpr std::array Int32x3_operator_xorasg_Int32x3_args = { &Int32x3_operator_xorasg_Int32x3_arg };

/// operator<<= with Int32x3
Variable Int32x3_operator_lshasg_Int32x3_arg;
Function Int32x3_operator_lshasg_Int32x3;
inline constexpr std::array Int32x3_operator_lshasg_Int32x3_args = { &Int32x3_operator_lshasg_Int32x3_arg };

/// operator>>= with Int32x3
Variable Int32x3_operator_rhsasg_Int32x3_arg;
Function Int32x3_operator_rhsasg_Int32x3;
inline constexpr std::array Int32x3_operator_rhsasg_Int32x3_args = { &Int32x3_operator_rhsasg_Int32x3_arg };

static constexpr StaticMap<HashString, Symbol*, 304> Int32x3_symbolLookup = {
    std::pair{ "bgg"_h, &Int32x3Type },
    std::pair{ "bgb"_h, &Int32x3Type },
    std::pair{ "bgr"_h, &Int32x3Type },
    std::pair{ "bbg"_h, &Int32x3Type },
    std::pair{ "bbb"_h, &Int32x3Type },
    std::pair{ "bbr"_h, &Int32x3Type },
    std::pair{ "brr"_h, &Int32x3Type },
    std::pair{ "brg"_h, &Int32x3Type },
    std::pair{ "brb"_h, &Int32x3Type },
    std::pair{ "operator<<(i32x3)"_h, &Int32x3_operator_lsh_Int32x3 },
    std::pair{ "operator<<=(i32x3)"_h, &Int32x3_operator_lshasg_Int32x3 },
    std::pair{ "operator%(i32x3)"_h, &Int32x3_operator_mod_Int32x3 },
    std::pair{ "gg"_h, &Int32x2Type },
    std::pair{ "gb"_h, &Int32x2Type },
    std::pair{ "gr"_h, &Int32x2Type },
    std::pair{ "bg"_h, &Int32x2Type },
    std::pair{ "bb"_h, &Int32x2Type },
    std::pair{ "br"_h, &Int32x2Type },
    std::pair{ "rr"_h, &Int32x2Type },
    std::pair{ "rg"_h, &Int32x2Type },
    std::pair{ "rb"_h, &Int32x2Type },
    std::pair{ "yx"_h, &Int32x2Type },
    std::pair{ "yy"_h, &Int32x2Type },
    std::pair{ "yz"_h, &Int32x2Type },
    std::pair{ "xz"_h, &Int32x2Type },
    std::pair{ "xy"_h, &Int32x2Type },
    std::pair{ "xx"_h, &Int32x2Type },
    std::pair{ "zy"_h, &Int32x2Type },
    std::pair{ "zx"_h, &Int32x2Type },
    std::pair{ "zz"_h, &Int32x2Type },
    std::pair{ "operator[](i16)"_h, &Int32x3_operator_index_Int16 },
    std::pair{ "operator|(i32x3)"_h, &Int32x3_operator_or_Int32x3 },
    std::pair{ "operator*(u32)"_h, &Int32x3_operator_scale_UInt32 },
    std::pair{ "operator/(i32x3)"_h, &Int32x3_operator_div_Int32x3 },
    std::pair{ "operator<=(i32x3)"_h, &Int32x3_operator_lte_Int32x3 },
    std::pair{ "brrg"_h, &Int32x4Type },
    std::pair{ "brrb"_h, &Int32x4Type },
    std::pair{ "brrr"_h, &Int32x4Type },
    std::pair{ "brgr"_h, &Int32x4Type },
    std::pair{ "brgg"_h, &Int32x4Type },
    std::pair{ "brgb"_h, &Int32x4Type },
    std::pair{ "brbr"_h, &Int32x4Type },
    std::pair{ "brbg"_h, &Int32x4Type },
    std::pair{ "brbb"_h, &Int32x4Type },
    std::pair{ "operator^"_h, &Int32x3_operator_xor_Int32x3 },
    std::pair{ "operator|"_h, &Int32x3_operator_or_Int32x3 },
    std::pair{ "operator<"_h, &Int32x3_operator_lt_Int32x3 },
    std::pair{ "operator>"_h, &Int32x3_operator_gt_Int32x3 },
    std::pair{ "operator-"_h, &Int32x3_operator_sub_Int32x3 },
    std::pair{ "operator/"_h, &Int32x3_operator_div_Int32x3 },
    std::pair{ "operator+"_h, &Int32x3_operator_add_Int32x3 },
    std::pair{ "operator*"_h, &Int32x3_operator_mul_Int32x3 },
    std::pair{ "operator*"_h, &Int32x3_operator_scale_Float32 },
    std::pair{ "operator*"_h, &Int32x3_operator_scale_UInt32 },
    std::pair{ "operator*"_h, &Int32x3_operator_scale_Int32 },
    std::pair{ "operator%"_h, &Int32x3_operator_mod_Int32x3 },
    std::pair{ "operator&"_h, &Int32x3_operator_and_Int32x3 },
    std::pair{ "xzzz"_h, &Int32x4Type },
    std::pair{ "xzzy"_h, &Int32x4Type },
    std::pair{ "xzzx"_h, &Int32x4Type },
    std::pair{ "xzyz"_h, &Int32x4Type },
    std::pair{ "xzyx"_h, &Int32x4Type },
    std::pair{ "xzyy"_h, &Int32x4Type },
    std::pair{ "xzxy"_h, &Int32x4Type },
    std::pair{ "xzxx"_h, &Int32x4Type },
    std::pair{ "xzxz"_h, &Int32x4Type },
    std::pair{ "yxxx"_h, &Int32x4Type },
    std::pair{ "yxxy"_h, &Int32x4Type },
    std::pair{ "yxxz"_h, &Int32x4Type },
    std::pair{ "yxyz"_h, &Int32x4Type },
    std::pair{ "yxyy"_h, &Int32x4Type },
    std::pair{ "yxyx"_h, &Int32x4Type },
    std::pair{ "yxzz"_h, &Int32x4Type },
    std::pair{ "yxzx"_h, &Int32x4Type },
    std::pair{ "yxzy"_h, &Int32x4Type },
    std::pair{ "operator+(i32x3)"_h, &Int32x3_operator_add_Int32x3 },
    std::pair{ "xyzx"_h, &Int32x4Type },
    std::pair{ "xyzy"_h, &Int32x4Type },
    std::pair{ "xyzz"_h, &Int32x4Type },
    std::pair{ "xyxz"_h, &Int32x4Type },
    std::pair{ "xyxx"_h, &Int32x4Type },
    std::pair{ "xyxy"_h, &Int32x4Type },
    std::pair{ "xyyy"_h, &Int32x4Type },
    std::pair{ "xyyx"_h, &Int32x4Type },
    std::pair{ "xyyz"_h, &Int32x4Type },
    std::pair{ "ggrr"_h, &Int32x4Type },
    std::pair{ "ggrb"_h, &Int32x4Type },
    std::pair{ "ggrg"_h, &Int32x4Type },
    std::pair{ "ggbb"_h, &Int32x4Type },
    std::pair{ "ggbg"_h, &Int32x4Type },
    std::pair{ "ggbr"_h, &Int32x4Type },
    std::pair{ "gggr"_h, &Int32x4Type },
    std::pair{ "gggg"_h, &Int32x4Type },
    std::pair{ "gggb"_h, &Int32x4Type },
    std::pair{ "yyzz"_h, &Int32x4Type },
    std::pair{ "yyzy"_h, &Int32x4Type },
    std::pair{ "yyzx"_h, &Int32x4Type },
    std::pair{ "yyyz"_h, &Int32x4Type },
    std::pair{ "yyyx"_h, &Int32x4Type },
    std::pair{ "yyyy"_h, &Int32x4Type },
    std::pair{ "yyxy"_h, &Int32x4Type },
    std::pair{ "yyxx"_h, &Int32x4Type },
    std::pair{ "yyxz"_h, &Int32x4Type },
    std::pair{ "operator!=(i32x3)"_h, &Int32x3_operator_neq_Int32x3 },
    std::pair{ "xxyx"_h, &Int32x4Type },
    std::pair{ "xxyy"_h, &Int32x4Type },
    std::pair{ "xxyz"_h, &Int32x4Type },
    std::pair{ "xxxz"_h, &Int32x4Type },
    std::pair{ "xxxy"_h, &Int32x4Type },
    std::pair{ "xxxx"_h, &Int32x4Type },
    std::pair{ "xxzy"_h, &Int32x4Type },
    std::pair{ "xxzx"_h, &Int32x4Type },
    std::pair{ "xxzz"_h, &Int32x4Type },
    std::pair{ "rgrg"_h, &Int32x4Type },
    std::pair{ "rgrb"_h, &Int32x4Type },
    std::pair{ "rgrr"_h, &Int32x4Type },
    std::pair{ "rggb"_h, &Int32x4Type },
    std::pair{ "rggg"_h, &Int32x4Type },
    std::pair{ "rggr"_h, &Int32x4Type },
    std::pair{ "rgbr"_h, &Int32x4Type },
    std::pair{ "rgbg"_h, &Int32x4Type },
    std::pair{ "rgbb"_h, &Int32x4Type },
    std::pair{ "operator*=(i32x3)"_h, &Int32x3_operator_mulasg_Int32x3 },
    std::pair{ "yzzx"_h, &Int32x4Type },
    std::pair{ "yzzy"_h, &Int32x4Type },
    std::pair{ "yzzz"_h, &Int32x4Type },
    std::pair{ "yzxz"_h, &Int32x4Type },
    std::pair{ "yzxx"_h, &Int32x4Type },
    std::pair{ "yzxy"_h, &Int32x4Type },
    std::pair{ "yzyy"_h, &Int32x4Type },
    std::pair{ "yzyx"_h, &Int32x4Type },
    std::pair{ "yzyz"_h, &Int32x4Type },
    std::pair{ "operator|=(i32x3)"_h, &Int32x3_operator_orasg_Int32x3 },
    std::pair{ "operator^=(i32x3)"_h, &Int32x3_operator_xorasg_Int32x3 },
    std::pair{ "operator^(i32x3)"_h, &Int32x3_operator_xor_Int32x3 },
    std::pair{ "gbgr"_h, &Int32x4Type },
    std::pair{ "gbgb"_h, &Int32x4Type },
    std::pair{ "gbgg"_h, &Int32x4Type },
    std::pair{ "gbbb"_h, &Int32x4Type },
    std::pair{ "gbbg"_h, &Int32x4Type },
    std::pair{ "gbbr"_h, &Int32x4Type },
    std::pair{ "gbrr"_h, &Int32x4Type },
    std::pair{ "gbrb"_h, &Int32x4Type },
    std::pair{ "gbrg"_h, &Int32x4Type },
    std::pair{ "operator<(i32x3)"_h, &Int32x3_operator_lt_Int32x3 },
    std::pair{ "operator*(i32x3)"_h, &Int32x3_operator_mul_Int32x3 },
    std::pair{ "operator+=(i32x3)"_h, &Int32x3_operator_addasg_Int32x3 },
    std::pair{ "operator-(i32x3)"_h, &Int32x3_operator_sub_Int32x3 },
    std::pair{ "operator==(i32x3)"_h, &Int32x3_operator_eq_Int32x3 },
    std::pair{ "rbrg"_h, &Int32x4Type },
    std::pair{ "rbrb"_h, &Int32x4Type },
    std::pair{ "rbrr"_h, &Int32x4Type },
    std::pair{ "rbgr"_h, &Int32x4Type },
    std::pair{ "rbgg"_h, &Int32x4Type },
    std::pair{ "rbgb"_h, &Int32x4Type },
    std::pair{ "rbbr"_h, &Int32x4Type },
    std::pair{ "rbbg"_h, &Int32x4Type },
    std::pair{ "rbbb"_h, &Int32x4Type },
    std::pair{ "zyxx"_h, &Int32x4Type },
    std::pair{ "zyxy"_h, &Int32x4Type },
    std::pair{ "zyxz"_h, &Int32x4Type },
    std::pair{ "zyyz"_h, &Int32x4Type },
    std::pair{ "zyyy"_h, &Int32x4Type },
    std::pair{ "zyyx"_h, &Int32x4Type },
    std::pair{ "zyzz"_h, &Int32x4Type },
    std::pair{ "zyzx"_h, &Int32x4Type },
    std::pair{ "zyzy"_h, &Int32x4Type },
    std::pair{ "bggr"_h, &Int32x4Type },
    std::pair{ "bggb"_h, &Int32x4Type },
    std::pair{ "bggg"_h, &Int32x4Type },
    std::pair{ "bgbg"_h, &Int32x4Type },
    std::pair{ "bgbb"_h, &Int32x4Type },
    std::pair{ "bgbr"_h, &Int32x4Type },
    std::pair{ "bgrr"_h, &Int32x4Type },
    std::pair{ "bgrg"_h, &Int32x4Type },
    std::pair{ "bgrb"_h, &Int32x4Type },
    std::pair{ "rrg"_h, &Int32x3Type },
    std::pair{ "rrb"_h, &Int32x3Type },
    std::pair{ "rrr"_h, &Int32x3Type },
    std::pair{ "rgr"_h, &Int32x3Type },
    std::pair{ "rgg"_h, &Int32x3Type },
    std::pair{ "rgb"_h, &Int32x3Type },
    std::pair{ "rbr"_h, &Int32x3Type },
    std::pair{ "rbg"_h, &Int32x3Type },
    std::pair{ "rbb"_h, &Int32x3Type },
    std::pair{ "operator[](u32)"_h, &Int32x3_operator_index_UInt32 },
    std::pair{ "operator<<="_h, &Int32x3_operator_lshasg_Int32x3 },
    std::pair{ "zxzz"_h, &Int32x4Type },
    std::pair{ "zxzy"_h, &Int32x4Type },
    std::pair{ "zxzx"_h, &Int32x4Type },
    std::pair{ "zxyz"_h, &Int32x4Type },
    std::pair{ "zxyx"_h, &Int32x4Type },
    std::pair{ "zxyy"_h, &Int32x4Type },
    std::pair{ "zxxy"_h, &Int32x4Type },
    std::pair{ "zxxx"_h, &Int32x4Type },
    std::pair{ "zxxz"_h, &Int32x4Type },
    std::pair{ "operator*(f32)"_h, &Int32x3_operator_scale_Float32 },
    std::pair{ "operator[](u16)"_h, &Int32x3_operator_index_UInt16 },
    std::pair{ "operator>>="_h, &Int32x3_operator_rhsasg_Int32x3 },
    std::pair{ "zzyx"_h, &Int32x4Type },
    std::pair{ "zzyy"_h, &Int32x4Type },
    std::pair{ "zzyz"_h, &Int32x4Type },
    std::pair{ "zzxz"_h, &Int32x4Type },
    std::pair{ "zzxy"_h, &Int32x4Type },
    std::pair{ "zzxx"_h, &Int32x4Type },
    std::pair{ "zzzy"_h, &Int32x4Type },
    std::pair{ "zzzx"_h, &Int32x4Type },
    std::pair{ "zzzz"_h, &Int32x4Type },
    std::pair{ "operator&=(i32x3)"_h, &Int32x3_operator_andasg_Int32x3 },
    std::pair{ "g"_h, &Int32Type },
    std::pair{ "b"_h, &Int32Type },
    std::pair{ "r"_h, &Int32Type },
    std::pair{ "y"_h, &Int32Type },
    std::pair{ "x"_h, &Int32Type },
    std::pair{ "z"_h, &Int32Type },
    std::pair{ "operator*(i32)"_h, &Int32x3_operator_scale_Int32 },
    std::pair{ "bbgg"_h, &Int32x4Type },
    std::pair{ "bbgb"_h, &Int32x4Type },
    std::pair{ "bbgr"_h, &Int32x4Type },
    std::pair{ "bbbg"_h, &Int32x4Type },
    std::pair{ "bbbb"_h, &Int32x4Type },
    std::pair{ "bbbr"_h, &Int32x4Type },
    std::pair{ "bbrr"_h, &Int32x4Type },
    std::pair{ "bbrg"_h, &Int32x4Type },
    std::pair{ "bbrb"_h, &Int32x4Type },
    std::pair{ "yxx"_h, &Int32x3Type },
    std::pair{ "yxy"_h, &Int32x3Type },
    std::pair{ "yxz"_h, &Int32x3Type },
    std::pair{ "yyz"_h, &Int32x3Type },
    std::pair{ "yyy"_h, &Int32x3Type },
    std::pair{ "yyx"_h, &Int32x3Type },
    std::pair{ "yzz"_h, &Int32x3Type },
    std::pair{ "yzx"_h, &Int32x3Type },
    std::pair{ "yzy"_h, &Int32x3Type },
    std::pair{ "xzz"_h, &Int32x3Type },
    std::pair{ "xzy"_h, &Int32x3Type },
    std::pair{ "xzx"_h, &Int32x3Type },
    std::pair{ "xyz"_h, &Int32x3Type },
    std::pair{ "xyx"_h, &Int32x3Type },
    std::pair{ "xyy"_h, &Int32x3Type },
    std::pair{ "xxy"_h, &Int32x3Type },
    std::pair{ "xxx"_h, &Int32x3Type },
    std::pair{ "xxz"_h, &Int32x3Type },
    std::pair{ "operator-=(i32x3)"_h, &Int32x3_operator_subasg_Int32x3 },
    std::pair{ "operator>=(i32x3)"_h, &Int32x3_operator_gte_Int32x3 },
    std::pair{ "zyx"_h, &Int32x3Type },
    std::pair{ "zyy"_h, &Int32x3Type },
    std::pair{ "zyz"_h, &Int32x3Type },
    std::pair{ "zxz"_h, &Int32x3Type },
    std::pair{ "zxy"_h, &Int32x3Type },
    std::pair{ "zxx"_h, &Int32x3Type },
    std::pair{ "zzy"_h, &Int32x3Type },
    std::pair{ "zzx"_h, &Int32x3Type },
    std::pair{ "zzz"_h, &Int32x3Type },
    std::pair{ "ggr"_h, &Int32x3Type },
    std::pair{ "ggb"_h, &Int32x3Type },
    std::pair{ "ggg"_h, &Int32x3Type },
    std::pair{ "gbg"_h, &Int32x3Type },
    std::pair{ "gbb"_h, &Int32x3Type },
    std::pair{ "gbr"_h, &Int32x3Type },
    std::pair{ "grr"_h, &Int32x3Type },
    std::pair{ "grg"_h, &Int32x3Type },
    std::pair{ "grb"_h, &Int32x3Type },
    std::pair{ "operator&(i32x3)"_h, &Int32x3_operator_and_Int32x3 },
    std::pair{ "operator>>(i32x3)"_h, &Int32x3_operator_rsh_Int32x3 },
    std::pair{ "operator>(i32x3)"_h, &Int32x3_operator_gt_Int32x3 },
    std::pair{ "operator^="_h, &Int32x3_operator_xorasg_Int32x3 },
    std::pair{ "operator[]"_h, &Int32x3_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Int32x3_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Int32x3_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Int32x3_operator_index_UInt16 },
    std::pair{ "operator|="_h, &Int32x3_operator_orasg_Int32x3 },
    std::pair{ "operator=="_h, &Int32x3_operator_eq_Int32x3 },
    std::pair{ "operator<="_h, &Int32x3_operator_lte_Int32x3 },
    std::pair{ "operator<<"_h, &Int32x3_operator_lsh_Int32x3 },
    std::pair{ "operator>="_h, &Int32x3_operator_gte_Int32x3 },
    std::pair{ "operator>>"_h, &Int32x3_operator_rsh_Int32x3 },
    std::pair{ "operator-="_h, &Int32x3_operator_subasg_Int32x3 },
    std::pair{ "operator/="_h, &Int32x3_operator_divasg_Int32x3 },
    std::pair{ "operator+="_h, &Int32x3_operator_addasg_Int32x3 },
    std::pair{ "operator*="_h, &Int32x3_operator_mulasg_Int32x3 },
    std::pair{ "operator&="_h, &Int32x3_operator_andasg_Int32x3 },
    std::pair{ "operator!="_h, &Int32x3_operator_neq_Int32x3 },
    std::pair{ "operator/=(i32x3)"_h, &Int32x3_operator_divasg_Int32x3 },
    std::pair{ "operator>>=(i32x3)"_h, &Int32x3_operator_rhsasg_Int32x3 },
    std::pair{ "operator[](i32)"_h, &Int32x3_operator_index_Int32 },
    std::pair{ "grrb"_h, &Int32x4Type },
    std::pair{ "grrg"_h, &Int32x4Type },
    std::pair{ "grrr"_h, &Int32x4Type },
    std::pair{ "grgb"_h, &Int32x4Type },
    std::pair{ "grgg"_h, &Int32x4Type },
    std::pair{ "grgr"_h, &Int32x4Type },
    std::pair{ "grbr"_h, &Int32x4Type },
    std::pair{ "grbb"_h, &Int32x4Type },
    std::pair{ "grbg"_h, &Int32x4Type },
    std::pair{ "rrgg"_h, &Int32x4Type },
    std::pair{ "rrgb"_h, &Int32x4Type },
    std::pair{ "rrgr"_h, &Int32x4Type },
    std::pair{ "rrbg"_h, &Int32x4Type },
    std::pair{ "rrbb"_h, &Int32x4Type },
    std::pair{ "rrbr"_h, &Int32x4Type },
    std::pair{ "rrrr"_h, &Int32x4Type },
    std::pair{ "rrrg"_h, &Int32x4Type },
    std::pair{ "rrrb"_h, &Int32x4Type }
    };

Int32x3::Int32x3()
{
    this->name = "i32x3"_c;
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    /// operator[] with Int32
    Int32x3_operator_index_Int32_arg.name = "arg"_c;
    Int32x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x3_operator_index_Int32.name = Int32x3_operator_index_Int32_name;
    Int32x3_operator_index_Int32.backendIndex = 604;
    Int32x3_operator_index_Int32.returnType = Type::FullType { Int32Type.name };
    Int32x3_operator_index_Int32.parameters = Int32x3_operator_index_Int32_args;
    Symbol::Resolved(&Int32x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_operator_index_Int32)->signature = "operator[](i32) i32"_c;
    Symbol::Resolved(&Int32x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int32x3_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int32x3_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt32
    Int32x3_operator_index_UInt32_arg.name = "arg"_c;
    Int32x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x3_operator_index_UInt32.name = Int32x3_operator_index_UInt32_name;
    Int32x3_operator_index_UInt32.backendIndex = 605;
    Int32x3_operator_index_UInt32.returnType = Type::FullType { Int32Type.name };
    Int32x3_operator_index_UInt32.parameters = Int32x3_operator_index_UInt32_args;
    Symbol::Resolved(&Int32x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x3_operator_index_UInt32)->signature = "operator[](u32) i32"_c;
    Symbol::Resolved(&Int32x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int32x3_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int32x3_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    /// operator[] with Int16
    Int32x3_operator_index_Int16_arg.name = "arg"_c;
    Int32x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int32x3_operator_index_Int16.name = Int32x3_operator_index_Int16_name;
    Int32x3_operator_index_Int16.backendIndex = 606;
    Int32x3_operator_index_Int16.returnType = Type::FullType { Int32Type.name };
    Int32x3_operator_index_Int16.parameters = Int32x3_operator_index_Int16_args;
    Symbol::Resolved(&Int32x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x3_operator_index_Int16)->signature = "operator[](i16) i32"_c;
    Symbol::Resolved(&Int32x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int32x3_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int32x3_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt16
    Int32x3_operator_index_UInt16_arg.name = "arg"_c;
    Int32x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int32x3_operator_index_UInt16.name = Int32x3_operator_index_UInt16_name;
    Int32x3_operator_index_UInt16.backendIndex = 607;
    Int32x3_operator_index_UInt16.returnType = Type::FullType { Int32Type.name };
    Int32x3_operator_index_UInt16.parameters = Int32x3_operator_index_UInt16_args;
    Symbol::Resolved(&Int32x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x3_operator_index_UInt16)->signature = "operator[](u16) i32"_c;
    Symbol::Resolved(&Int32x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int32x3_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int32x3_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    /// operator+ with Int32x3
    Int32x3_operator_add_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_add_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_add_Int32x3.name = Int32x3_operator_add_Int32x3_name;
    Int32x3_operator_add_Int32x3.backendIndex = 608;
    Int32x3_operator_add_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_add_Int32x3.parameters = Int32x3_operator_add_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_add_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_add_Int32x3)->signature = "operator+(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_add_Int32x3)->name = "operator+(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_add_Int32x3)->nameWithVarNames = "operator+(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_add_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator- with Int32x3
    Int32x3_operator_sub_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_sub_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_sub_Int32x3.name = Int32x3_operator_sub_Int32x3_name;
    Int32x3_operator_sub_Int32x3.backendIndex = 609;
    Int32x3_operator_sub_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_sub_Int32x3.parameters = Int32x3_operator_sub_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_sub_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_sub_Int32x3)->signature = "operator-(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_sub_Int32x3)->name = "operator-(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_sub_Int32x3)->nameWithVarNames = "operator-(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_sub_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator* with Int32x3
    Int32x3_operator_mul_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_mul_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_mul_Int32x3.name = Int32x3_operator_mul_Int32x3_name;
    Int32x3_operator_mul_Int32x3.backendIndex = 610;
    Int32x3_operator_mul_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_mul_Int32x3.parameters = Int32x3_operator_mul_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_mul_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_mul_Int32x3)->signature = "operator*(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_mul_Int32x3)->name = "operator*(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_mul_Int32x3)->nameWithVarNames = "operator*(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_mul_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator/ with Int32x3
    Int32x3_operator_div_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_div_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_div_Int32x3.name = Int32x3_operator_div_Int32x3_name;
    Int32x3_operator_div_Int32x3.backendIndex = 611;
    Int32x3_operator_div_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_div_Int32x3.parameters = Int32x3_operator_div_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_div_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_div_Int32x3)->signature = "operator/(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_div_Int32x3)->name = "operator/(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_div_Int32x3)->nameWithVarNames = "operator/(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_div_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator% with Int32x3
    Int32x3_operator_mod_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_mod_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_mod_Int32x3.name = Int32x3_operator_mod_Int32x3_name;
    Int32x3_operator_mod_Int32x3.backendIndex = 612;
    Int32x3_operator_mod_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_mod_Int32x3.parameters = Int32x3_operator_mod_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_mod_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_mod_Int32x3)->signature = "operator%(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_mod_Int32x3)->name = "operator%(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_mod_Int32x3)->nameWithVarNames = "operator%(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_mod_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator+= with Int32x3
    Int32x3_operator_addasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_addasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_addasg_Int32x3.name = Int32x3_operator_addasg_Int32x3_name;
    Int32x3_operator_addasg_Int32x3.backendIndex = 613;
    Int32x3_operator_addasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_addasg_Int32x3.parameters = Int32x3_operator_addasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_addasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_addasg_Int32x3)->signature = "operator+=(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_addasg_Int32x3)->name = "operator+=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_addasg_Int32x3)->nameWithVarNames = "operator+=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_addasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator-= with Int32x3
    Int32x3_operator_subasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_subasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_subasg_Int32x3.name = Int32x3_operator_subasg_Int32x3_name;
    Int32x3_operator_subasg_Int32x3.backendIndex = 614;
    Int32x3_operator_subasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_subasg_Int32x3.parameters = Int32x3_operator_subasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_subasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_subasg_Int32x3)->signature = "operator-=(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_subasg_Int32x3)->name = "operator-=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_subasg_Int32x3)->nameWithVarNames = "operator-=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_subasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator*= with Int32x3
    Int32x3_operator_mulasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_mulasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_mulasg_Int32x3.name = Int32x3_operator_mulasg_Int32x3_name;
    Int32x3_operator_mulasg_Int32x3.backendIndex = 615;
    Int32x3_operator_mulasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_mulasg_Int32x3.parameters = Int32x3_operator_mulasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_mulasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_mulasg_Int32x3)->signature = "operator*=(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_mulasg_Int32x3)->name = "operator*=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_mulasg_Int32x3)->nameWithVarNames = "operator*=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_mulasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator/= with Int32x3
    Int32x3_operator_divasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_divasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_divasg_Int32x3.name = Int32x3_operator_divasg_Int32x3_name;
    Int32x3_operator_divasg_Int32x3.backendIndex = 616;
    Int32x3_operator_divasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_divasg_Int32x3.parameters = Int32x3_operator_divasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_divasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_divasg_Int32x3)->signature = "operator/=(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_divasg_Int32x3)->name = "operator/=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_divasg_Int32x3)->nameWithVarNames = "operator/=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_divasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator< with Int32x3
    Int32x3_operator_lt_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_lt_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_lt_Int32x3.name = Int32x3_operator_lt_Int32x3_name;
    Int32x3_operator_lt_Int32x3.backendIndex = 617;
    Int32x3_operator_lt_Int32x3.returnType = Type::FullType { Bool8x3Type.name };
    Int32x3_operator_lt_Int32x3.parameters = Int32x3_operator_lt_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_lt_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_lt_Int32x3)->signature = "operator<(i32x3) b8x3"_c;
    Symbol::Resolved(&Int32x3_operator_lt_Int32x3)->name = "operator<(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lt_Int32x3)->nameWithVarNames = "operator<(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lt_Int32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator<= with Int32x3
    Int32x3_operator_lte_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_lte_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_lte_Int32x3.name = Int32x3_operator_lte_Int32x3_name;
    Int32x3_operator_lte_Int32x3.backendIndex = 618;
    Int32x3_operator_lte_Int32x3.returnType = Type::FullType { Bool8x3Type.name };
    Int32x3_operator_lte_Int32x3.parameters = Int32x3_operator_lte_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_lte_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_lte_Int32x3)->signature = "operator<=(i32x3) b8x3"_c;
    Symbol::Resolved(&Int32x3_operator_lte_Int32x3)->name = "operator<=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lte_Int32x3)->nameWithVarNames = "operator<=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lte_Int32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator> with Int32x3
    Int32x3_operator_gt_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_gt_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_gt_Int32x3.name = Int32x3_operator_gt_Int32x3_name;
    Int32x3_operator_gt_Int32x3.backendIndex = 619;
    Int32x3_operator_gt_Int32x3.returnType = Type::FullType { Bool8x3Type.name };
    Int32x3_operator_gt_Int32x3.parameters = Int32x3_operator_gt_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_gt_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_gt_Int32x3)->signature = "operator>(i32x3) b8x3"_c;
    Symbol::Resolved(&Int32x3_operator_gt_Int32x3)->name = "operator>(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_gt_Int32x3)->nameWithVarNames = "operator>(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_gt_Int32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator>= with Int32x3
    Int32x3_operator_gte_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_gte_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_gte_Int32x3.name = Int32x3_operator_gte_Int32x3_name;
    Int32x3_operator_gte_Int32x3.backendIndex = 620;
    Int32x3_operator_gte_Int32x3.returnType = Type::FullType { Bool8x3Type.name };
    Int32x3_operator_gte_Int32x3.parameters = Int32x3_operator_gte_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_gte_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_gte_Int32x3)->signature = "operator>=(i32x3) b8x3"_c;
    Symbol::Resolved(&Int32x3_operator_gte_Int32x3)->name = "operator>=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_gte_Int32x3)->nameWithVarNames = "operator>=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_gte_Int32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator== with Int32x3
    Int32x3_operator_eq_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_eq_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_eq_Int32x3.name = Int32x3_operator_eq_Int32x3_name;
    Int32x3_operator_eq_Int32x3.backendIndex = 621;
    Int32x3_operator_eq_Int32x3.returnType = Type::FullType { Bool8x3Type.name };
    Int32x3_operator_eq_Int32x3.parameters = Int32x3_operator_eq_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_eq_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_eq_Int32x3)->signature = "operator==(i32x3) b8x3"_c;
    Symbol::Resolved(&Int32x3_operator_eq_Int32x3)->name = "operator==(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_eq_Int32x3)->nameWithVarNames = "operator==(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_eq_Int32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator!= with Int32x3
    Int32x3_operator_neq_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_neq_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_neq_Int32x3.name = Int32x3_operator_neq_Int32x3_name;
    Int32x3_operator_neq_Int32x3.backendIndex = 622;
    Int32x3_operator_neq_Int32x3.returnType = Type::FullType { Bool8x3Type.name };
    Int32x3_operator_neq_Int32x3.parameters = Int32x3_operator_neq_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_neq_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_neq_Int32x3)->signature = "operator!=(i32x3) b8x3"_c;
    Symbol::Resolved(&Int32x3_operator_neq_Int32x3)->name = "operator!=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_neq_Int32x3)->nameWithVarNames = "operator!=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_neq_Int32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator* with Float32
    Int32x3_operator_scale_Float32_arg.name = "arg"_c;
    Int32x3_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int32x3_operator_scale_Float32.name = Int32x3_operator_scale_Float32_name;
    Int32x3_operator_scale_Float32.backendIndex = 623;
    Int32x3_operator_scale_Float32.returnType = Type::FullType { Float32x3Type.name };
    Int32x3_operator_scale_Float32.parameters = Int32x3_operator_scale_Float32_args;
    Symbol::Resolved(&Int32x3_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x3_operator_scale_Float32)->signature = "operator*(f32) f32x3"_c;
    Symbol::Resolved(&Int32x3_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Int32x3_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Int32x3_operator_scale_Float32)->returnTypeSymbol = &Float32x3Type;

    /// operator* with UInt32
    Int32x3_operator_scale_UInt32_arg.name = "arg"_c;
    Int32x3_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x3_operator_scale_UInt32.name = Int32x3_operator_scale_UInt32_name;
    Int32x3_operator_scale_UInt32.backendIndex = 624;
    Int32x3_operator_scale_UInt32.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_scale_UInt32.parameters = Int32x3_operator_scale_UInt32_args;
    Symbol::Resolved(&Int32x3_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x3_operator_scale_UInt32)->signature = "operator*(u32) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&Int32x3_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&Int32x3_operator_scale_UInt32)->returnTypeSymbol = &Int32x3Type;

    /// operator* with Int32
    Int32x3_operator_scale_Int32_arg.name = "arg"_c;
    Int32x3_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x3_operator_scale_Int32.name = Int32x3_operator_scale_Int32_name;
    Int32x3_operator_scale_Int32.backendIndex = 625;
    Int32x3_operator_scale_Int32.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_scale_Int32.parameters = Int32x3_operator_scale_Int32_args;
    Symbol::Resolved(&Int32x3_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_operator_scale_Int32)->signature = "operator*(i32) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&Int32x3_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&Int32x3_operator_scale_Int32)->returnTypeSymbol = &Int32x3Type;

    /// operator| with Int32x3
    Int32x3_operator_or_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_or_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_or_Int32x3.name = Int32x3_operator_or_Int32x3_name;
    Int32x3_operator_or_Int32x3.backendIndex = 626;
    Int32x3_operator_or_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_or_Int32x3.parameters = Int32x3_operator_or_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_or_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_or_Int32x3)->signature = "operator|(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_or_Int32x3)->name = "operator|(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_or_Int32x3)->nameWithVarNames = "operator|(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_or_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator& with Int32x3
    Int32x3_operator_and_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_and_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_and_Int32x3.name = Int32x3_operator_and_Int32x3_name;
    Int32x3_operator_and_Int32x3.backendIndex = 627;
    Int32x3_operator_and_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_and_Int32x3.parameters = Int32x3_operator_and_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_and_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_and_Int32x3)->signature = "operator&(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_and_Int32x3)->name = "operator&(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_and_Int32x3)->nameWithVarNames = "operator&(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_and_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator^ with Int32x3
    Int32x3_operator_xor_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_xor_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_xor_Int32x3.name = Int32x3_operator_xor_Int32x3_name;
    Int32x3_operator_xor_Int32x3.backendIndex = 628;
    Int32x3_operator_xor_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_xor_Int32x3.parameters = Int32x3_operator_xor_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_xor_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_xor_Int32x3)->signature = "operator^(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_xor_Int32x3)->name = "operator^(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_xor_Int32x3)->nameWithVarNames = "operator^(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_xor_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator<< with Int32x3
    Int32x3_operator_lsh_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_lsh_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_lsh_Int32x3.name = Int32x3_operator_lsh_Int32x3_name;
    Int32x3_operator_lsh_Int32x3.backendIndex = 629;
    Int32x3_operator_lsh_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_lsh_Int32x3.parameters = Int32x3_operator_lsh_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_lsh_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_lsh_Int32x3)->signature = "operator<<(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_lsh_Int32x3)->name = "operator<<(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lsh_Int32x3)->nameWithVarNames = "operator<<(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lsh_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator>> with Int32x3
    Int32x3_operator_rsh_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_rsh_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_rsh_Int32x3.name = Int32x3_operator_rsh_Int32x3_name;
    Int32x3_operator_rsh_Int32x3.backendIndex = 630;
    Int32x3_operator_rsh_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_rsh_Int32x3.parameters = Int32x3_operator_rsh_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_rsh_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_rsh_Int32x3)->signature = "operator>>(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_rsh_Int32x3)->name = "operator>>(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_rsh_Int32x3)->nameWithVarNames = "operator>>(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_rsh_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator|= with Int32x3
    Int32x3_operator_orasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_orasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_orasg_Int32x3.name = Int32x3_operator_orasg_Int32x3_name;
    Int32x3_operator_orasg_Int32x3.backendIndex = 631;
    Int32x3_operator_orasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_orasg_Int32x3.parameters = Int32x3_operator_orasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_orasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_orasg_Int32x3)->signature = "operator|=(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_orasg_Int32x3)->name = "operator|=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_orasg_Int32x3)->nameWithVarNames = "operator|=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_orasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator&= with Int32x3
    Int32x3_operator_andasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_andasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_andasg_Int32x3.name = Int32x3_operator_andasg_Int32x3_name;
    Int32x3_operator_andasg_Int32x3.backendIndex = 632;
    Int32x3_operator_andasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_andasg_Int32x3.parameters = Int32x3_operator_andasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_andasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_andasg_Int32x3)->signature = "operator&=(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_andasg_Int32x3)->name = "operator&=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_andasg_Int32x3)->nameWithVarNames = "operator&=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_andasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator^= with Int32x3
    Int32x3_operator_xorasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_xorasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_xorasg_Int32x3.name = Int32x3_operator_xorasg_Int32x3_name;
    Int32x3_operator_xorasg_Int32x3.backendIndex = 633;
    Int32x3_operator_xorasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_xorasg_Int32x3.parameters = Int32x3_operator_xorasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_xorasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_xorasg_Int32x3)->signature = "operator^=(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_xorasg_Int32x3)->name = "operator^=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_xorasg_Int32x3)->nameWithVarNames = "operator^=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_xorasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator<<= with Int32x3
    Int32x3_operator_lshasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_lshasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_lshasg_Int32x3.name = Int32x3_operator_lshasg_Int32x3_name;
    Int32x3_operator_lshasg_Int32x3.backendIndex = 634;
    Int32x3_operator_lshasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_lshasg_Int32x3.parameters = Int32x3_operator_lshasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_lshasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_lshasg_Int32x3)->signature = "operator<<=(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_lshasg_Int32x3)->name = "operator<<=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lshasg_Int32x3)->nameWithVarNames = "operator<<=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lshasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator>>= with Int32x3
    Int32x3_operator_rhsasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_rhsasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_rhsasg_Int32x3.name = Int32x3_operator_rhsasg_Int32x3_name;
    Int32x3_operator_rhsasg_Int32x3.backendIndex = 635;
    Int32x3_operator_rhsasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_rhsasg_Int32x3.parameters = Int32x3_operator_rhsasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_rhsasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_rhsasg_Int32x3)->signature = "operator>>=(i32x3) i32x3"_c;
    Symbol::Resolved(&Int32x3_operator_rhsasg_Int32x3)->name = "operator>>=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_rhsasg_Int32x3)->nameWithVarNames = "operator>>=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_rhsasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    this->scope.symbolLookup = Int32x3_symbolLookup;
}
Int32x3 Int32x3Type;

/// operator[] with Int32
Variable Bool8x3_operator_index_Int32_arg;
Function Bool8x3_operator_index_Int32;
inline constexpr std::array Bool8x3_operator_index_Int32_args = { &Bool8x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Bool8x3_operator_index_UInt32_arg;
Function Bool8x3_operator_index_UInt32;
inline constexpr std::array Bool8x3_operator_index_UInt32_args = { &Bool8x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Bool8x3_operator_index_Int16_arg;
Function Bool8x3_operator_index_Int16;
inline constexpr std::array Bool8x3_operator_index_Int16_args = { &Bool8x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Bool8x3_operator_index_UInt16_arg;
Function Bool8x3_operator_index_UInt16;
inline constexpr std::array Bool8x3_operator_index_UInt16_args = { &Bool8x3_operator_index_UInt16_arg };

/// operator|| with Bool8x3
Variable Bool8x3_operator_oror_Bool8x3_arg;
Function Bool8x3_operator_oror_Bool8x3;
inline constexpr std::array Bool8x3_operator_oror_Bool8x3_args = { &Bool8x3_operator_oror_Bool8x3_arg };

/// operator&& with Bool8x3
Variable Bool8x3_operator_andand_Bool8x3_arg;
Function Bool8x3_operator_andand_Bool8x3;
inline constexpr std::array Bool8x3_operator_andand_Bool8x3_args = { &Bool8x3_operator_andand_Bool8x3_arg };

/// operator== with Bool8x3
Variable Bool8x3_operator_eq_Bool8x3_arg;
Function Bool8x3_operator_eq_Bool8x3;
inline constexpr std::array Bool8x3_operator_eq_Bool8x3_args = { &Bool8x3_operator_eq_Bool8x3_arg };

/// operator!= with Bool8x3
Variable Bool8x3_operator_neq_Bool8x3_arg;
Function Bool8x3_operator_neq_Bool8x3;
inline constexpr std::array Bool8x3_operator_neq_Bool8x3_args = { &Bool8x3_operator_neq_Bool8x3_arg };

static constexpr StaticMap<HashString, Symbol*, 256> Bool8x3_symbolLookup = {
    std::pair{ "bgg"_h, &Bool8x3Type },
    std::pair{ "bgb"_h, &Bool8x3Type },
    std::pair{ "bgr"_h, &Bool8x3Type },
    std::pair{ "bbg"_h, &Bool8x3Type },
    std::pair{ "bbb"_h, &Bool8x3Type },
    std::pair{ "bbr"_h, &Bool8x3Type },
    std::pair{ "brr"_h, &Bool8x3Type },
    std::pair{ "brg"_h, &Bool8x3Type },
    std::pair{ "brb"_h, &Bool8x3Type },
    std::pair{ "gg"_h, &Bool8x2Type },
    std::pair{ "gb"_h, &Bool8x2Type },
    std::pair{ "gr"_h, &Bool8x2Type },
    std::pair{ "bg"_h, &Bool8x2Type },
    std::pair{ "bb"_h, &Bool8x2Type },
    std::pair{ "br"_h, &Bool8x2Type },
    std::pair{ "rr"_h, &Bool8x2Type },
    std::pair{ "rg"_h, &Bool8x2Type },
    std::pair{ "rb"_h, &Bool8x2Type },
    std::pair{ "yx"_h, &Bool8x2Type },
    std::pair{ "yy"_h, &Bool8x2Type },
    std::pair{ "yz"_h, &Bool8x2Type },
    std::pair{ "xz"_h, &Bool8x2Type },
    std::pair{ "xy"_h, &Bool8x2Type },
    std::pair{ "xx"_h, &Bool8x2Type },
    std::pair{ "zy"_h, &Bool8x2Type },
    std::pair{ "zx"_h, &Bool8x2Type },
    std::pair{ "zz"_h, &Bool8x2Type },
    std::pair{ "operator[](i16)"_h, &Bool8x3_operator_index_Int16 },
    std::pair{ "brrg"_h, &Bool8x4Type },
    std::pair{ "brrb"_h, &Bool8x4Type },
    std::pair{ "brrr"_h, &Bool8x4Type },
    std::pair{ "brgr"_h, &Bool8x4Type },
    std::pair{ "brgg"_h, &Bool8x4Type },
    std::pair{ "brgb"_h, &Bool8x4Type },
    std::pair{ "brbr"_h, &Bool8x4Type },
    std::pair{ "brbg"_h, &Bool8x4Type },
    std::pair{ "brbb"_h, &Bool8x4Type },
    std::pair{ "xzzz"_h, &Bool8x4Type },
    std::pair{ "xzzy"_h, &Bool8x4Type },
    std::pair{ "xzzx"_h, &Bool8x4Type },
    std::pair{ "xzyz"_h, &Bool8x4Type },
    std::pair{ "xzyx"_h, &Bool8x4Type },
    std::pair{ "xzyy"_h, &Bool8x4Type },
    std::pair{ "xzxy"_h, &Bool8x4Type },
    std::pair{ "xzxx"_h, &Bool8x4Type },
    std::pair{ "xzxz"_h, &Bool8x4Type },
    std::pair{ "yxxx"_h, &Bool8x4Type },
    std::pair{ "yxxy"_h, &Bool8x4Type },
    std::pair{ "yxxz"_h, &Bool8x4Type },
    std::pair{ "yxyz"_h, &Bool8x4Type },
    std::pair{ "yxyy"_h, &Bool8x4Type },
    std::pair{ "yxyx"_h, &Bool8x4Type },
    std::pair{ "yxzz"_h, &Bool8x4Type },
    std::pair{ "yxzx"_h, &Bool8x4Type },
    std::pair{ "yxzy"_h, &Bool8x4Type },
    std::pair{ "xyzx"_h, &Bool8x4Type },
    std::pair{ "xyzy"_h, &Bool8x4Type },
    std::pair{ "xyzz"_h, &Bool8x4Type },
    std::pair{ "xyxz"_h, &Bool8x4Type },
    std::pair{ "xyxx"_h, &Bool8x4Type },
    std::pair{ "xyxy"_h, &Bool8x4Type },
    std::pair{ "xyyy"_h, &Bool8x4Type },
    std::pair{ "xyyx"_h, &Bool8x4Type },
    std::pair{ "xyyz"_h, &Bool8x4Type },
    std::pair{ "ggrr"_h, &Bool8x4Type },
    std::pair{ "ggrb"_h, &Bool8x4Type },
    std::pair{ "ggrg"_h, &Bool8x4Type },
    std::pair{ "ggbb"_h, &Bool8x4Type },
    std::pair{ "ggbg"_h, &Bool8x4Type },
    std::pair{ "ggbr"_h, &Bool8x4Type },
    std::pair{ "gggr"_h, &Bool8x4Type },
    std::pair{ "gggg"_h, &Bool8x4Type },
    std::pair{ "gggb"_h, &Bool8x4Type },
    std::pair{ "yyzz"_h, &Bool8x4Type },
    std::pair{ "yyzy"_h, &Bool8x4Type },
    std::pair{ "yyzx"_h, &Bool8x4Type },
    std::pair{ "yyyz"_h, &Bool8x4Type },
    std::pair{ "yyyx"_h, &Bool8x4Type },
    std::pair{ "yyyy"_h, &Bool8x4Type },
    std::pair{ "yyxy"_h, &Bool8x4Type },
    std::pair{ "yyxx"_h, &Bool8x4Type },
    std::pair{ "yyxz"_h, &Bool8x4Type },
    std::pair{ "xxyx"_h, &Bool8x4Type },
    std::pair{ "xxyy"_h, &Bool8x4Type },
    std::pair{ "xxyz"_h, &Bool8x4Type },
    std::pair{ "xxxz"_h, &Bool8x4Type },
    std::pair{ "xxxy"_h, &Bool8x4Type },
    std::pair{ "xxxx"_h, &Bool8x4Type },
    std::pair{ "xxzy"_h, &Bool8x4Type },
    std::pair{ "xxzx"_h, &Bool8x4Type },
    std::pair{ "xxzz"_h, &Bool8x4Type },
    std::pair{ "rgrg"_h, &Bool8x4Type },
    std::pair{ "rgrb"_h, &Bool8x4Type },
    std::pair{ "rgrr"_h, &Bool8x4Type },
    std::pair{ "rggb"_h, &Bool8x4Type },
    std::pair{ "rggg"_h, &Bool8x4Type },
    std::pair{ "rggr"_h, &Bool8x4Type },
    std::pair{ "rgbr"_h, &Bool8x4Type },
    std::pair{ "rgbg"_h, &Bool8x4Type },
    std::pair{ "rgbb"_h, &Bool8x4Type },
    std::pair{ "yzzx"_h, &Bool8x4Type },
    std::pair{ "yzzy"_h, &Bool8x4Type },
    std::pair{ "yzzz"_h, &Bool8x4Type },
    std::pair{ "yzxz"_h, &Bool8x4Type },
    std::pair{ "yzxx"_h, &Bool8x4Type },
    std::pair{ "yzxy"_h, &Bool8x4Type },
    std::pair{ "yzyy"_h, &Bool8x4Type },
    std::pair{ "yzyx"_h, &Bool8x4Type },
    std::pair{ "yzyz"_h, &Bool8x4Type },
    std::pair{ "operator&&(b8x3)"_h, &Bool8x3_operator_andand_Bool8x3 },
    std::pair{ "gbgr"_h, &Bool8x4Type },
    std::pair{ "gbgb"_h, &Bool8x4Type },
    std::pair{ "gbgg"_h, &Bool8x4Type },
    std::pair{ "gbbb"_h, &Bool8x4Type },
    std::pair{ "gbbg"_h, &Bool8x4Type },
    std::pair{ "gbbr"_h, &Bool8x4Type },
    std::pair{ "gbrr"_h, &Bool8x4Type },
    std::pair{ "gbrb"_h, &Bool8x4Type },
    std::pair{ "gbrg"_h, &Bool8x4Type },
    std::pair{ "operator==(b8x3)"_h, &Bool8x3_operator_eq_Bool8x3 },
    std::pair{ "rbrg"_h, &Bool8x4Type },
    std::pair{ "rbrb"_h, &Bool8x4Type },
    std::pair{ "rbrr"_h, &Bool8x4Type },
    std::pair{ "rbgr"_h, &Bool8x4Type },
    std::pair{ "rbgg"_h, &Bool8x4Type },
    std::pair{ "rbgb"_h, &Bool8x4Type },
    std::pair{ "rbbr"_h, &Bool8x4Type },
    std::pair{ "rbbg"_h, &Bool8x4Type },
    std::pair{ "rbbb"_h, &Bool8x4Type },
    std::pair{ "zyxx"_h, &Bool8x4Type },
    std::pair{ "zyxy"_h, &Bool8x4Type },
    std::pair{ "zyxz"_h, &Bool8x4Type },
    std::pair{ "zyyz"_h, &Bool8x4Type },
    std::pair{ "zyyy"_h, &Bool8x4Type },
    std::pair{ "zyyx"_h, &Bool8x4Type },
    std::pair{ "zyzz"_h, &Bool8x4Type },
    std::pair{ "zyzx"_h, &Bool8x4Type },
    std::pair{ "zyzy"_h, &Bool8x4Type },
    std::pair{ "bggr"_h, &Bool8x4Type },
    std::pair{ "bggb"_h, &Bool8x4Type },
    std::pair{ "bggg"_h, &Bool8x4Type },
    std::pair{ "bgbg"_h, &Bool8x4Type },
    std::pair{ "bgbb"_h, &Bool8x4Type },
    std::pair{ "bgbr"_h, &Bool8x4Type },
    std::pair{ "bgrr"_h, &Bool8x4Type },
    std::pair{ "bgrg"_h, &Bool8x4Type },
    std::pair{ "bgrb"_h, &Bool8x4Type },
    std::pair{ "rrg"_h, &Bool8x3Type },
    std::pair{ "rrb"_h, &Bool8x3Type },
    std::pair{ "rrr"_h, &Bool8x3Type },
    std::pair{ "rgr"_h, &Bool8x3Type },
    std::pair{ "rgg"_h, &Bool8x3Type },
    std::pair{ "rgb"_h, &Bool8x3Type },
    std::pair{ "rbr"_h, &Bool8x3Type },
    std::pair{ "rbg"_h, &Bool8x3Type },
    std::pair{ "rbb"_h, &Bool8x3Type },
    std::pair{ "operator[](u32)"_h, &Bool8x3_operator_index_UInt32 },
    std::pair{ "zxzz"_h, &Bool8x4Type },
    std::pair{ "zxzy"_h, &Bool8x4Type },
    std::pair{ "zxzx"_h, &Bool8x4Type },
    std::pair{ "zxyz"_h, &Bool8x4Type },
    std::pair{ "zxyx"_h, &Bool8x4Type },
    std::pair{ "zxyy"_h, &Bool8x4Type },
    std::pair{ "zxxy"_h, &Bool8x4Type },
    std::pair{ "zxxx"_h, &Bool8x4Type },
    std::pair{ "zxxz"_h, &Bool8x4Type },
    std::pair{ "operator[](u16)"_h, &Bool8x3_operator_index_UInt16 },
    std::pair{ "zzyx"_h, &Bool8x4Type },
    std::pair{ "zzyy"_h, &Bool8x4Type },
    std::pair{ "zzyz"_h, &Bool8x4Type },
    std::pair{ "zzxz"_h, &Bool8x4Type },
    std::pair{ "zzxy"_h, &Bool8x4Type },
    std::pair{ "zzxx"_h, &Bool8x4Type },
    std::pair{ "zzzy"_h, &Bool8x4Type },
    std::pair{ "zzzx"_h, &Bool8x4Type },
    std::pair{ "zzzz"_h, &Bool8x4Type },
    std::pair{ "g"_h, &Bool8Type },
    std::pair{ "b"_h, &Bool8Type },
    std::pair{ "r"_h, &Bool8Type },
    std::pair{ "y"_h, &Bool8Type },
    std::pair{ "x"_h, &Bool8Type },
    std::pair{ "z"_h, &Bool8Type },
    std::pair{ "bbgg"_h, &Bool8x4Type },
    std::pair{ "bbgb"_h, &Bool8x4Type },
    std::pair{ "bbgr"_h, &Bool8x4Type },
    std::pair{ "bbbg"_h, &Bool8x4Type },
    std::pair{ "bbbb"_h, &Bool8x4Type },
    std::pair{ "bbbr"_h, &Bool8x4Type },
    std::pair{ "bbrr"_h, &Bool8x4Type },
    std::pair{ "bbrg"_h, &Bool8x4Type },
    std::pair{ "bbrb"_h, &Bool8x4Type },
    std::pair{ "yxx"_h, &Bool8x3Type },
    std::pair{ "yxy"_h, &Bool8x3Type },
    std::pair{ "yxz"_h, &Bool8x3Type },
    std::pair{ "yyz"_h, &Bool8x3Type },
    std::pair{ "yyy"_h, &Bool8x3Type },
    std::pair{ "yyx"_h, &Bool8x3Type },
    std::pair{ "yzz"_h, &Bool8x3Type },
    std::pair{ "yzx"_h, &Bool8x3Type },
    std::pair{ "yzy"_h, &Bool8x3Type },
    std::pair{ "xzz"_h, &Bool8x3Type },
    std::pair{ "xzy"_h, &Bool8x3Type },
    std::pair{ "xzx"_h, &Bool8x3Type },
    std::pair{ "xyz"_h, &Bool8x3Type },
    std::pair{ "xyx"_h, &Bool8x3Type },
    std::pair{ "xyy"_h, &Bool8x3Type },
    std::pair{ "xxy"_h, &Bool8x3Type },
    std::pair{ "xxx"_h, &Bool8x3Type },
    std::pair{ "xxz"_h, &Bool8x3Type },
    std::pair{ "zyx"_h, &Bool8x3Type },
    std::pair{ "zyy"_h, &Bool8x3Type },
    std::pair{ "zyz"_h, &Bool8x3Type },
    std::pair{ "zxz"_h, &Bool8x3Type },
    std::pair{ "zxy"_h, &Bool8x3Type },
    std::pair{ "zxx"_h, &Bool8x3Type },
    std::pair{ "zzy"_h, &Bool8x3Type },
    std::pair{ "zzx"_h, &Bool8x3Type },
    std::pair{ "zzz"_h, &Bool8x3Type },
    std::pair{ "operator!=(b8x3)"_h, &Bool8x3_operator_neq_Bool8x3 },
    std::pair{ "ggr"_h, &Bool8x3Type },
    std::pair{ "ggb"_h, &Bool8x3Type },
    std::pair{ "ggg"_h, &Bool8x3Type },
    std::pair{ "gbg"_h, &Bool8x3Type },
    std::pair{ "gbb"_h, &Bool8x3Type },
    std::pair{ "gbr"_h, &Bool8x3Type },
    std::pair{ "grr"_h, &Bool8x3Type },
    std::pair{ "grg"_h, &Bool8x3Type },
    std::pair{ "grb"_h, &Bool8x3Type },
    std::pair{ "operator||(b8x3)"_h, &Bool8x3_operator_oror_Bool8x3 },
    std::pair{ "operator[]"_h, &Bool8x3_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Bool8x3_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Bool8x3_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Bool8x3_operator_index_UInt16 },
    std::pair{ "operator||"_h, &Bool8x3_operator_oror_Bool8x3 },
    std::pair{ "operator=="_h, &Bool8x3_operator_eq_Bool8x3 },
    std::pair{ "operator&&"_h, &Bool8x3_operator_andand_Bool8x3 },
    std::pair{ "operator!="_h, &Bool8x3_operator_neq_Bool8x3 },
    std::pair{ "operator[](i32)"_h, &Bool8x3_operator_index_Int32 },
    std::pair{ "grrb"_h, &Bool8x4Type },
    std::pair{ "grrg"_h, &Bool8x4Type },
    std::pair{ "grrr"_h, &Bool8x4Type },
    std::pair{ "grgb"_h, &Bool8x4Type },
    std::pair{ "grgg"_h, &Bool8x4Type },
    std::pair{ "grgr"_h, &Bool8x4Type },
    std::pair{ "grbr"_h, &Bool8x4Type },
    std::pair{ "grbb"_h, &Bool8x4Type },
    std::pair{ "grbg"_h, &Bool8x4Type },
    std::pair{ "rrgg"_h, &Bool8x4Type },
    std::pair{ "rrgb"_h, &Bool8x4Type },
    std::pair{ "rrgr"_h, &Bool8x4Type },
    std::pair{ "rrbg"_h, &Bool8x4Type },
    std::pair{ "rrbb"_h, &Bool8x4Type },
    std::pair{ "rrbr"_h, &Bool8x4Type },
    std::pair{ "rrrr"_h, &Bool8x4Type },
    std::pair{ "rrrg"_h, &Bool8x4Type },
    std::pair{ "rrrb"_h, &Bool8x4Type }
    };

Bool8x3::Bool8x3()
{
    this->name = "b8x3"_c;
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 3;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    /// operator[] with Int32
    Bool8x3_operator_index_Int32_arg.name = "arg"_c;
    Bool8x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Bool8x3_operator_index_Int32.name = Bool8x3_operator_index_Int32_name;
    Bool8x3_operator_index_Int32.backendIndex = 649;
    Bool8x3_operator_index_Int32.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_index_Int32.parameters = Bool8x3_operator_index_Int32_args;
    Symbol::Resolved(&Bool8x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x3_operator_index_Int32)->signature = "operator[](i32) b8"_c;
    Symbol::Resolved(&Bool8x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt32
    Bool8x3_operator_index_UInt32_arg.name = "arg"_c;
    Bool8x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Bool8x3_operator_index_UInt32.name = Bool8x3_operator_index_UInt32_name;
    Bool8x3_operator_index_UInt32.backendIndex = 650;
    Bool8x3_operator_index_UInt32.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_index_UInt32.parameters = Bool8x3_operator_index_UInt32_args;
    Symbol::Resolved(&Bool8x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x3_operator_index_UInt32)->signature = "operator[](u32) b8"_c;
    Symbol::Resolved(&Bool8x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with Int16
    Bool8x3_operator_index_Int16_arg.name = "arg"_c;
    Bool8x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Bool8x3_operator_index_Int16.name = Bool8x3_operator_index_Int16_name;
    Bool8x3_operator_index_Int16.backendIndex = 651;
    Bool8x3_operator_index_Int16.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_index_Int16.parameters = Bool8x3_operator_index_Int16_args;
    Symbol::Resolved(&Bool8x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x3_operator_index_Int16)->signature = "operator[](i16) b8"_c;
    Symbol::Resolved(&Bool8x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt16
    Bool8x3_operator_index_UInt16_arg.name = "arg"_c;
    Bool8x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Bool8x3_operator_index_UInt16.name = Bool8x3_operator_index_UInt16_name;
    Bool8x3_operator_index_UInt16.backendIndex = 652;
    Bool8x3_operator_index_UInt16.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_index_UInt16.parameters = Bool8x3_operator_index_UInt16_args;
    Symbol::Resolved(&Bool8x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x3_operator_index_UInt16)->signature = "operator[](u16) b8"_c;
    Symbol::Resolved(&Bool8x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator|| with Bool8x3
    Bool8x3_operator_oror_Bool8x3_arg.name = "arg"_c;
    Bool8x3_operator_oror_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    Bool8x3_operator_oror_Bool8x3.name = Bool8x3_operator_oror_Bool8x3_name;
    Bool8x3_operator_oror_Bool8x3.backendIndex = 653;
    Bool8x3_operator_oror_Bool8x3.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_operator_oror_Bool8x3.parameters = Bool8x3_operator_oror_Bool8x3_args;
    Symbol::Resolved(&Bool8x3_operator_oror_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x3_operator_oror_Bool8x3)->signature = "operator||(b8x3) b8x3"_c;
    Symbol::Resolved(&Bool8x3_operator_oror_Bool8x3)->name = "operator||(b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_oror_Bool8x3)->nameWithVarNames = "operator||(arg : b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_oror_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator&& with Bool8x3
    Bool8x3_operator_andand_Bool8x3_arg.name = "arg"_c;
    Bool8x3_operator_andand_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    Bool8x3_operator_andand_Bool8x3.name = Bool8x3_operator_andand_Bool8x3_name;
    Bool8x3_operator_andand_Bool8x3.backendIndex = 654;
    Bool8x3_operator_andand_Bool8x3.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_operator_andand_Bool8x3.parameters = Bool8x3_operator_andand_Bool8x3_args;
    Symbol::Resolved(&Bool8x3_operator_andand_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x3_operator_andand_Bool8x3)->signature = "operator&&(b8x3) b8x3"_c;
    Symbol::Resolved(&Bool8x3_operator_andand_Bool8x3)->name = "operator&&(b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_andand_Bool8x3)->nameWithVarNames = "operator&&(arg : b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_andand_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator== with Bool8x3
    Bool8x3_operator_eq_Bool8x3_arg.name = "arg"_c;
    Bool8x3_operator_eq_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    Bool8x3_operator_eq_Bool8x3.name = Bool8x3_operator_eq_Bool8x3_name;
    Bool8x3_operator_eq_Bool8x3.backendIndex = 655;
    Bool8x3_operator_eq_Bool8x3.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_operator_eq_Bool8x3.parameters = Bool8x3_operator_eq_Bool8x3_args;
    Symbol::Resolved(&Bool8x3_operator_eq_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x3_operator_eq_Bool8x3)->signature = "operator==(b8x3) b8x3"_c;
    Symbol::Resolved(&Bool8x3_operator_eq_Bool8x3)->name = "operator==(b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_eq_Bool8x3)->nameWithVarNames = "operator==(arg : b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_eq_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator!= with Bool8x3
    Bool8x3_operator_neq_Bool8x3_arg.name = "arg"_c;
    Bool8x3_operator_neq_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    Bool8x3_operator_neq_Bool8x3.name = Bool8x3_operator_neq_Bool8x3_name;
    Bool8x3_operator_neq_Bool8x3.backendIndex = 656;
    Bool8x3_operator_neq_Bool8x3.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_operator_neq_Bool8x3.parameters = Bool8x3_operator_neq_Bool8x3_args;
    Symbol::Resolved(&Bool8x3_operator_neq_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x3_operator_neq_Bool8x3)->signature = "operator!=(b8x3) b8x3"_c;
    Symbol::Resolved(&Bool8x3_operator_neq_Bool8x3)->name = "operator!=(b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_neq_Bool8x3)->nameWithVarNames = "operator!=(arg : b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_neq_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    this->scope.symbolLookup = Bool8x3_symbolLookup;
}
Bool8x3 Bool8x3Type;

/// operator[] with Int32
Variable Float16x3_operator_index_Int32_arg;
Function Float16x3_operator_index_Int32;
inline constexpr std::array Float16x3_operator_index_Int32_args = { &Float16x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x3_operator_index_UInt32_arg;
Function Float16x3_operator_index_UInt32;
inline constexpr std::array Float16x3_operator_index_UInt32_args = { &Float16x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x3_operator_index_Int16_arg;
Function Float16x3_operator_index_Int16;
inline constexpr std::array Float16x3_operator_index_Int16_args = { &Float16x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x3_operator_index_UInt16_arg;
Function Float16x3_operator_index_UInt16;
inline constexpr std::array Float16x3_operator_index_UInt16_args = { &Float16x3_operator_index_UInt16_arg };

/// operator+ with Float16x3
Variable Float16x3_operator_add_Float16x3_arg;
Function Float16x3_operator_add_Float16x3;
inline constexpr std::array Float16x3_operator_add_Float16x3_args = { &Float16x3_operator_add_Float16x3_arg };

/// operator- with Float16x3
Variable Float16x3_operator_sub_Float16x3_arg;
Function Float16x3_operator_sub_Float16x3;
inline constexpr std::array Float16x3_operator_sub_Float16x3_args = { &Float16x3_operator_sub_Float16x3_arg };

/// operator* with Float16x3
Variable Float16x3_operator_mul_Float16x3_arg;
Function Float16x3_operator_mul_Float16x3;
inline constexpr std::array Float16x3_operator_mul_Float16x3_args = { &Float16x3_operator_mul_Float16x3_arg };

/// operator/ with Float16x3
Variable Float16x3_operator_div_Float16x3_arg;
Function Float16x3_operator_div_Float16x3;
inline constexpr std::array Float16x3_operator_div_Float16x3_args = { &Float16x3_operator_div_Float16x3_arg };

/// operator% with Float16x3
Variable Float16x3_operator_mod_Float16x3_arg;
Function Float16x3_operator_mod_Float16x3;
inline constexpr std::array Float16x3_operator_mod_Float16x3_args = { &Float16x3_operator_mod_Float16x3_arg };

/// operator+= with Float16x3
Variable Float16x3_operator_addasg_Float16x3_arg;
Function Float16x3_operator_addasg_Float16x3;
inline constexpr std::array Float16x3_operator_addasg_Float16x3_args = { &Float16x3_operator_addasg_Float16x3_arg };

/// operator-= with Float16x3
Variable Float16x3_operator_subasg_Float16x3_arg;
Function Float16x3_operator_subasg_Float16x3;
inline constexpr std::array Float16x3_operator_subasg_Float16x3_args = { &Float16x3_operator_subasg_Float16x3_arg };

/// operator*= with Float16x3
Variable Float16x3_operator_mulasg_Float16x3_arg;
Function Float16x3_operator_mulasg_Float16x3;
inline constexpr std::array Float16x3_operator_mulasg_Float16x3_args = { &Float16x3_operator_mulasg_Float16x3_arg };

/// operator/= with Float16x3
Variable Float16x3_operator_divasg_Float16x3_arg;
Function Float16x3_operator_divasg_Float16x3;
inline constexpr std::array Float16x3_operator_divasg_Float16x3_args = { &Float16x3_operator_divasg_Float16x3_arg };

/// operator< with Float16x3
Variable Float16x3_operator_lt_Float16x3_arg;
Function Float16x3_operator_lt_Float16x3;
inline constexpr std::array Float16x3_operator_lt_Float16x3_args = { &Float16x3_operator_lt_Float16x3_arg };

/// operator<= with Float16x3
Variable Float16x3_operator_lte_Float16x3_arg;
Function Float16x3_operator_lte_Float16x3;
inline constexpr std::array Float16x3_operator_lte_Float16x3_args = { &Float16x3_operator_lte_Float16x3_arg };

/// operator> with Float16x3
Variable Float16x3_operator_gt_Float16x3_arg;
Function Float16x3_operator_gt_Float16x3;
inline constexpr std::array Float16x3_operator_gt_Float16x3_args = { &Float16x3_operator_gt_Float16x3_arg };

/// operator>= with Float16x3
Variable Float16x3_operator_gte_Float16x3_arg;
Function Float16x3_operator_gte_Float16x3;
inline constexpr std::array Float16x3_operator_gte_Float16x3_args = { &Float16x3_operator_gte_Float16x3_arg };

/// operator== with Float16x3
Variable Float16x3_operator_eq_Float16x3_arg;
Function Float16x3_operator_eq_Float16x3;
inline constexpr std::array Float16x3_operator_eq_Float16x3_args = { &Float16x3_operator_eq_Float16x3_arg };

/// operator!= with Float16x3
Variable Float16x3_operator_neq_Float16x3_arg;
Function Float16x3_operator_neq_Float16x3;
inline constexpr std::array Float16x3_operator_neq_Float16x3_args = { &Float16x3_operator_neq_Float16x3_arg };

/// operator* with Float16
Variable Float16x3_operator_scale_Float16_arg;
Function Float16x3_operator_scale_Float16;
inline constexpr std::array Float16x3_operator_scale_Float16_args = { &Float16x3_operator_scale_Float16_arg };

/// operator* with UInt16
Variable Float16x3_operator_scale_UInt16_arg;
Function Float16x3_operator_scale_UInt16;
inline constexpr std::array Float16x3_operator_scale_UInt16_args = { &Float16x3_operator_scale_UInt16_arg };

/// operator* with Int16
Variable Float16x3_operator_scale_Int16_arg;
Function Float16x3_operator_scale_Int16;
inline constexpr std::array Float16x3_operator_scale_Int16_args = { &Float16x3_operator_scale_Int16_arg };

/// operator* with Float32x3x2
Variable Float16x3_operator_transform_Float32x3x2_arg;
Function Float16x3_operator_transform_Float32x3x2;
inline constexpr std::array Float16x3_operator_transform_Float32x3x2_args = { &Float16x3_operator_transform_Float32x3x2_arg };

/// operator* with Float32x3x3
Variable Float16x3_operator_transform_Float32x3x3_arg;
Function Float16x3_operator_transform_Float32x3x3;
inline constexpr std::array Float16x3_operator_transform_Float32x3x3_args = { &Float16x3_operator_transform_Float32x3x3_arg };

/// operator* with Float32x3x4
Variable Float16x3_operator_transform_Float32x3x4_arg;
Function Float16x3_operator_transform_Float32x3x4;
inline constexpr std::array Float16x3_operator_transform_Float32x3x4_args = { &Float16x3_operator_transform_Float32x3x4_arg };

static constexpr StaticMap<HashString, Symbol*, 290> Float16x3_symbolLookup = {
    std::pair{ "bgg"_h, &Float16x3Type },
    std::pair{ "bgb"_h, &Float16x3Type },
    std::pair{ "bgr"_h, &Float16x3Type },
    std::pair{ "bbg"_h, &Float16x3Type },
    std::pair{ "bbb"_h, &Float16x3Type },
    std::pair{ "bbr"_h, &Float16x3Type },
    std::pair{ "brr"_h, &Float16x3Type },
    std::pair{ "brg"_h, &Float16x3Type },
    std::pair{ "brb"_h, &Float16x3Type },
    std::pair{ "gg"_h, &Float16x2Type },
    std::pair{ "gb"_h, &Float16x2Type },
    std::pair{ "gr"_h, &Float16x2Type },
    std::pair{ "bg"_h, &Float16x2Type },
    std::pair{ "bb"_h, &Float16x2Type },
    std::pair{ "br"_h, &Float16x2Type },
    std::pair{ "rr"_h, &Float16x2Type },
    std::pair{ "rg"_h, &Float16x2Type },
    std::pair{ "rb"_h, &Float16x2Type },
    std::pair{ "yx"_h, &Float16x2Type },
    std::pair{ "yy"_h, &Float16x2Type },
    std::pair{ "yz"_h, &Float16x2Type },
    std::pair{ "xz"_h, &Float16x2Type },
    std::pair{ "xy"_h, &Float16x2Type },
    std::pair{ "xx"_h, &Float16x2Type },
    std::pair{ "zy"_h, &Float16x2Type },
    std::pair{ "zx"_h, &Float16x2Type },
    std::pair{ "zz"_h, &Float16x2Type },
    std::pair{ "operator[](i16)"_h, &Float16x3_operator_index_Int16 },
    std::pair{ "operator<=(f16x3)"_h, &Float16x3_operator_lte_Float16x3 },
    std::pair{ "operator>=(f16x3)"_h, &Float16x3_operator_gte_Float16x3 },
    std::pair{ "operator/(f16x3)"_h, &Float16x3_operator_div_Float16x3 },
    std::pair{ "operator*(f32x3x3)"_h, &Float16x3_operator_transform_Float32x3x3 },
    std::pair{ "operator*(f32x3x2)"_h, &Float16x3_operator_transform_Float32x3x2 },
    std::pair{ "operator*(f32x3x4)"_h, &Float16x3_operator_transform_Float32x3x4 },
    std::pair{ "operator>(f16x3)"_h, &Float16x3_operator_gt_Float16x3 },
    std::pair{ "operator-(f16x3)"_h, &Float16x3_operator_sub_Float16x3 },
    std::pair{ "operator*=(f16x3)"_h, &Float16x3_operator_mulasg_Float16x3 },
    std::pair{ "operator*(u16)"_h, &Float16x3_operator_scale_UInt16 },
    std::pair{ "operator+=(f16x3)"_h, &Float16x3_operator_addasg_Float16x3 },
    std::pair{ "operator+(f16x3)"_h, &Float16x3_operator_add_Float16x3 },
    std::pair{ "brrg"_h, &Float16x4Type },
    std::pair{ "brrb"_h, &Float16x4Type },
    std::pair{ "brrr"_h, &Float16x4Type },
    std::pair{ "brgr"_h, &Float16x4Type },
    std::pair{ "brgg"_h, &Float16x4Type },
    std::pair{ "brgb"_h, &Float16x4Type },
    std::pair{ "brbr"_h, &Float16x4Type },
    std::pair{ "brbg"_h, &Float16x4Type },
    std::pair{ "brbb"_h, &Float16x4Type },
    std::pair{ "operator<"_h, &Float16x3_operator_lt_Float16x3 },
    std::pair{ "operator>"_h, &Float16x3_operator_gt_Float16x3 },
    std::pair{ "operator-"_h, &Float16x3_operator_sub_Float16x3 },
    std::pair{ "operator/"_h, &Float16x3_operator_div_Float16x3 },
    std::pair{ "operator+"_h, &Float16x3_operator_add_Float16x3 },
    std::pair{ "operator*"_h, &Float16x3_operator_mul_Float16x3 },
    std::pair{ "operator*"_h, &Float16x3_operator_scale_Float16 },
    std::pair{ "operator*"_h, &Float16x3_operator_scale_UInt16 },
    std::pair{ "operator*"_h, &Float16x3_operator_scale_Int16 },
    std::pair{ "operator*"_h, &Float16x3_operator_transform_Float32x3x2 },
    std::pair{ "operator*"_h, &Float16x3_operator_transform_Float32x3x3 },
    std::pair{ "operator*"_h, &Float16x3_operator_transform_Float32x3x4 },
    std::pair{ "operator%"_h, &Float16x3_operator_mod_Float16x3 },
    std::pair{ "xzzz"_h, &Float16x4Type },
    std::pair{ "xzzy"_h, &Float16x4Type },
    std::pair{ "xzzx"_h, &Float16x4Type },
    std::pair{ "xzyz"_h, &Float16x4Type },
    std::pair{ "xzyx"_h, &Float16x4Type },
    std::pair{ "xzyy"_h, &Float16x4Type },
    std::pair{ "xzxy"_h, &Float16x4Type },
    std::pair{ "xzxx"_h, &Float16x4Type },
    std::pair{ "xzxz"_h, &Float16x4Type },
    std::pair{ "yxxx"_h, &Float16x4Type },
    std::pair{ "yxxy"_h, &Float16x4Type },
    std::pair{ "yxxz"_h, &Float16x4Type },
    std::pair{ "yxyz"_h, &Float16x4Type },
    std::pair{ "yxyy"_h, &Float16x4Type },
    std::pair{ "yxyx"_h, &Float16x4Type },
    std::pair{ "yxzz"_h, &Float16x4Type },
    std::pair{ "yxzx"_h, &Float16x4Type },
    std::pair{ "yxzy"_h, &Float16x4Type },
    std::pair{ "xyzx"_h, &Float16x4Type },
    std::pair{ "xyzy"_h, &Float16x4Type },
    std::pair{ "xyzz"_h, &Float16x4Type },
    std::pair{ "xyxz"_h, &Float16x4Type },
    std::pair{ "xyxx"_h, &Float16x4Type },
    std::pair{ "xyxy"_h, &Float16x4Type },
    std::pair{ "xyyy"_h, &Float16x4Type },
    std::pair{ "xyyx"_h, &Float16x4Type },
    std::pair{ "xyyz"_h, &Float16x4Type },
    std::pair{ "ggrr"_h, &Float16x4Type },
    std::pair{ "ggrb"_h, &Float16x4Type },
    std::pair{ "ggrg"_h, &Float16x4Type },
    std::pair{ "ggbb"_h, &Float16x4Type },
    std::pair{ "ggbg"_h, &Float16x4Type },
    std::pair{ "ggbr"_h, &Float16x4Type },
    std::pair{ "gggr"_h, &Float16x4Type },
    std::pair{ "gggg"_h, &Float16x4Type },
    std::pair{ "gggb"_h, &Float16x4Type },
    std::pair{ "yyzz"_h, &Float16x4Type },
    std::pair{ "yyzy"_h, &Float16x4Type },
    std::pair{ "yyzx"_h, &Float16x4Type },
    std::pair{ "yyyz"_h, &Float16x4Type },
    std::pair{ "yyyx"_h, &Float16x4Type },
    std::pair{ "yyyy"_h, &Float16x4Type },
    std::pair{ "yyxy"_h, &Float16x4Type },
    std::pair{ "yyxx"_h, &Float16x4Type },
    std::pair{ "yyxz"_h, &Float16x4Type },
    std::pair{ "xxyx"_h, &Float16x4Type },
    std::pair{ "xxyy"_h, &Float16x4Type },
    std::pair{ "xxyz"_h, &Float16x4Type },
    std::pair{ "xxxz"_h, &Float16x4Type },
    std::pair{ "xxxy"_h, &Float16x4Type },
    std::pair{ "xxxx"_h, &Float16x4Type },
    std::pair{ "xxzy"_h, &Float16x4Type },
    std::pair{ "xxzx"_h, &Float16x4Type },
    std::pair{ "xxzz"_h, &Float16x4Type },
    std::pair{ "rgrg"_h, &Float16x4Type },
    std::pair{ "rgrb"_h, &Float16x4Type },
    std::pair{ "rgrr"_h, &Float16x4Type },
    std::pair{ "rggb"_h, &Float16x4Type },
    std::pair{ "rggg"_h, &Float16x4Type },
    std::pair{ "rggr"_h, &Float16x4Type },
    std::pair{ "rgbr"_h, &Float16x4Type },
    std::pair{ "rgbg"_h, &Float16x4Type },
    std::pair{ "rgbb"_h, &Float16x4Type },
    std::pair{ "yzzx"_h, &Float16x4Type },
    std::pair{ "yzzy"_h, &Float16x4Type },
    std::pair{ "yzzz"_h, &Float16x4Type },
    std::pair{ "yzxz"_h, &Float16x4Type },
    std::pair{ "yzxx"_h, &Float16x4Type },
    std::pair{ "yzxy"_h, &Float16x4Type },
    std::pair{ "yzyy"_h, &Float16x4Type },
    std::pair{ "yzyx"_h, &Float16x4Type },
    std::pair{ "yzyz"_h, &Float16x4Type },
    std::pair{ "gbgr"_h, &Float16x4Type },
    std::pair{ "gbgb"_h, &Float16x4Type },
    std::pair{ "gbgg"_h, &Float16x4Type },
    std::pair{ "gbbb"_h, &Float16x4Type },
    std::pair{ "gbbg"_h, &Float16x4Type },
    std::pair{ "gbbr"_h, &Float16x4Type },
    std::pair{ "gbrr"_h, &Float16x4Type },
    std::pair{ "gbrb"_h, &Float16x4Type },
    std::pair{ "gbrg"_h, &Float16x4Type },
    std::pair{ "operator*(f16x3)"_h, &Float16x3_operator_mul_Float16x3 },
    std::pair{ "rbrg"_h, &Float16x4Type },
    std::pair{ "rbrb"_h, &Float16x4Type },
    std::pair{ "rbrr"_h, &Float16x4Type },
    std::pair{ "rbgr"_h, &Float16x4Type },
    std::pair{ "rbgg"_h, &Float16x4Type },
    std::pair{ "rbgb"_h, &Float16x4Type },
    std::pair{ "rbbr"_h, &Float16x4Type },
    std::pair{ "rbbg"_h, &Float16x4Type },
    std::pair{ "rbbb"_h, &Float16x4Type },
    std::pair{ "zyxx"_h, &Float16x4Type },
    std::pair{ "zyxy"_h, &Float16x4Type },
    std::pair{ "zyxz"_h, &Float16x4Type },
    std::pair{ "zyyz"_h, &Float16x4Type },
    std::pair{ "zyyy"_h, &Float16x4Type },
    std::pair{ "zyyx"_h, &Float16x4Type },
    std::pair{ "zyzz"_h, &Float16x4Type },
    std::pair{ "zyzx"_h, &Float16x4Type },
    std::pair{ "zyzy"_h, &Float16x4Type },
    std::pair{ "bggr"_h, &Float16x4Type },
    std::pair{ "bggb"_h, &Float16x4Type },
    std::pair{ "bggg"_h, &Float16x4Type },
    std::pair{ "bgbg"_h, &Float16x4Type },
    std::pair{ "bgbb"_h, &Float16x4Type },
    std::pair{ "bgbr"_h, &Float16x4Type },
    std::pair{ "bgrr"_h, &Float16x4Type },
    std::pair{ "bgrg"_h, &Float16x4Type },
    std::pair{ "bgrb"_h, &Float16x4Type },
    std::pair{ "rrg"_h, &Float16x3Type },
    std::pair{ "rrb"_h, &Float16x3Type },
    std::pair{ "rrr"_h, &Float16x3Type },
    std::pair{ "rgr"_h, &Float16x3Type },
    std::pair{ "rgg"_h, &Float16x3Type },
    std::pair{ "rgb"_h, &Float16x3Type },
    std::pair{ "rbr"_h, &Float16x3Type },
    std::pair{ "rbg"_h, &Float16x3Type },
    std::pair{ "rbb"_h, &Float16x3Type },
    std::pair{ "operator[](u32)"_h, &Float16x3_operator_index_UInt32 },
    std::pair{ "zxzz"_h, &Float16x4Type },
    std::pair{ "zxzy"_h, &Float16x4Type },
    std::pair{ "zxzx"_h, &Float16x4Type },
    std::pair{ "zxyz"_h, &Float16x4Type },
    std::pair{ "zxyx"_h, &Float16x4Type },
    std::pair{ "zxyy"_h, &Float16x4Type },
    std::pair{ "zxxy"_h, &Float16x4Type },
    std::pair{ "zxxx"_h, &Float16x4Type },
    std::pair{ "zxxz"_h, &Float16x4Type },
    std::pair{ "operator!=(f16x3)"_h, &Float16x3_operator_neq_Float16x3 },
    std::pair{ "operator[](u16)"_h, &Float16x3_operator_index_UInt16 },
    std::pair{ "operator<(f16x3)"_h, &Float16x3_operator_lt_Float16x3 },
    std::pair{ "zzyx"_h, &Float16x4Type },
    std::pair{ "zzyy"_h, &Float16x4Type },
    std::pair{ "zzyz"_h, &Float16x4Type },
    std::pair{ "zzxz"_h, &Float16x4Type },
    std::pair{ "zzxy"_h, &Float16x4Type },
    std::pair{ "zzxx"_h, &Float16x4Type },
    std::pair{ "zzzy"_h, &Float16x4Type },
    std::pair{ "zzzx"_h, &Float16x4Type },
    std::pair{ "zzzz"_h, &Float16x4Type },
    std::pair{ "operator*(f16)"_h, &Float16x3_operator_scale_Float16 },
    std::pair{ "g"_h, &Float16Type },
    std::pair{ "b"_h, &Float16Type },
    std::pair{ "r"_h, &Float16Type },
    std::pair{ "y"_h, &Float16Type },
    std::pair{ "x"_h, &Float16Type },
    std::pair{ "z"_h, &Float16Type },
    std::pair{ "bbgg"_h, &Float16x4Type },
    std::pair{ "bbgb"_h, &Float16x4Type },
    std::pair{ "bbgr"_h, &Float16x4Type },
    std::pair{ "bbbg"_h, &Float16x4Type },
    std::pair{ "bbbb"_h, &Float16x4Type },
    std::pair{ "bbbr"_h, &Float16x4Type },
    std::pair{ "bbrr"_h, &Float16x4Type },
    std::pair{ "bbrg"_h, &Float16x4Type },
    std::pair{ "bbrb"_h, &Float16x4Type },
    std::pair{ "yxx"_h, &Float16x3Type },
    std::pair{ "yxy"_h, &Float16x3Type },
    std::pair{ "yxz"_h, &Float16x3Type },
    std::pair{ "yyz"_h, &Float16x3Type },
    std::pair{ "yyy"_h, &Float16x3Type },
    std::pair{ "yyx"_h, &Float16x3Type },
    std::pair{ "yzz"_h, &Float16x3Type },
    std::pair{ "yzx"_h, &Float16x3Type },
    std::pair{ "yzy"_h, &Float16x3Type },
    std::pair{ "xzz"_h, &Float16x3Type },
    std::pair{ "xzy"_h, &Float16x3Type },
    std::pair{ "xzx"_h, &Float16x3Type },
    std::pair{ "xyz"_h, &Float16x3Type },
    std::pair{ "xyx"_h, &Float16x3Type },
    std::pair{ "xyy"_h, &Float16x3Type },
    std::pair{ "xxy"_h, &Float16x3Type },
    std::pair{ "xxx"_h, &Float16x3Type },
    std::pair{ "xxz"_h, &Float16x3Type },
    std::pair{ "operator*(i16)"_h, &Float16x3_operator_scale_Int16 },
    std::pair{ "operator/=(f16x3)"_h, &Float16x3_operator_divasg_Float16x3 },
    std::pair{ "zyx"_h, &Float16x3Type },
    std::pair{ "zyy"_h, &Float16x3Type },
    std::pair{ "zyz"_h, &Float16x3Type },
    std::pair{ "zxz"_h, &Float16x3Type },
    std::pair{ "zxy"_h, &Float16x3Type },
    std::pair{ "zxx"_h, &Float16x3Type },
    std::pair{ "zzy"_h, &Float16x3Type },
    std::pair{ "zzx"_h, &Float16x3Type },
    std::pair{ "zzz"_h, &Float16x3Type },
    std::pair{ "operator%(f16x3)"_h, &Float16x3_operator_mod_Float16x3 },
    std::pair{ "ggr"_h, &Float16x3Type },
    std::pair{ "ggb"_h, &Float16x3Type },
    std::pair{ "ggg"_h, &Float16x3Type },
    std::pair{ "gbg"_h, &Float16x3Type },
    std::pair{ "gbb"_h, &Float16x3Type },
    std::pair{ "gbr"_h, &Float16x3Type },
    std::pair{ "grr"_h, &Float16x3Type },
    std::pair{ "grg"_h, &Float16x3Type },
    std::pair{ "grb"_h, &Float16x3Type },
    std::pair{ "operator[]"_h, &Float16x3_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float16x3_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float16x3_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float16x3_operator_index_UInt16 },
    std::pair{ "operator=="_h, &Float16x3_operator_eq_Float16x3 },
    std::pair{ "operator<="_h, &Float16x3_operator_lte_Float16x3 },
    std::pair{ "operator>="_h, &Float16x3_operator_gte_Float16x3 },
    std::pair{ "operator-="_h, &Float16x3_operator_subasg_Float16x3 },
    std::pair{ "operator/="_h, &Float16x3_operator_divasg_Float16x3 },
    std::pair{ "operator+="_h, &Float16x3_operator_addasg_Float16x3 },
    std::pair{ "operator*="_h, &Float16x3_operator_mulasg_Float16x3 },
    std::pair{ "operator!="_h, &Float16x3_operator_neq_Float16x3 },
    std::pair{ "operator-=(f16x3)"_h, &Float16x3_operator_subasg_Float16x3 },
    std::pair{ "operator==(f16x3)"_h, &Float16x3_operator_eq_Float16x3 },
    std::pair{ "operator[](i32)"_h, &Float16x3_operator_index_Int32 },
    std::pair{ "grrb"_h, &Float16x4Type },
    std::pair{ "grrg"_h, &Float16x4Type },
    std::pair{ "grrr"_h, &Float16x4Type },
    std::pair{ "grgb"_h, &Float16x4Type },
    std::pair{ "grgg"_h, &Float16x4Type },
    std::pair{ "grgr"_h, &Float16x4Type },
    std::pair{ "grbr"_h, &Float16x4Type },
    std::pair{ "grbb"_h, &Float16x4Type },
    std::pair{ "grbg"_h, &Float16x4Type },
    std::pair{ "rrgg"_h, &Float16x4Type },
    std::pair{ "rrgb"_h, &Float16x4Type },
    std::pair{ "rrgr"_h, &Float16x4Type },
    std::pair{ "rrbg"_h, &Float16x4Type },
    std::pair{ "rrbb"_h, &Float16x4Type },
    std::pair{ "rrbr"_h, &Float16x4Type },
    std::pair{ "rrrr"_h, &Float16x4Type },
    std::pair{ "rrrg"_h, &Float16x4Type },
    std::pair{ "rrrb"_h, &Float16x4Type }
    };

Float16x3::Float16x3()
{
    this->name = "f16x3"_c;
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 6;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x3_operator_index_Int32_arg.name = "arg"_c;
    Float16x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x3_operator_index_Int32.name = Float16x3_operator_index_Int32_name;
    Float16x3_operator_index_Int32.backendIndex = 674;
    Float16x3_operator_index_Int32.returnType = Type::FullType { Float16Type.name };
    Float16x3_operator_index_Int32.parameters = Float16x3_operator_index_Int32_args;
    Symbol::Resolved(&Float16x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x3_operator_index_Int32)->signature = "operator[](i32) f16"_c;
    Symbol::Resolved(&Float16x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x3_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float16x3_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt32
    Float16x3_operator_index_UInt32_arg.name = "arg"_c;
    Float16x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x3_operator_index_UInt32.name = Float16x3_operator_index_UInt32_name;
    Float16x3_operator_index_UInt32.backendIndex = 675;
    Float16x3_operator_index_UInt32.returnType = Type::FullType { Float16Type.name };
    Float16x3_operator_index_UInt32.parameters = Float16x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x3_operator_index_UInt32)->signature = "operator[](u32) f16"_c;
    Symbol::Resolved(&Float16x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x3_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float16x3_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    /// operator[] with Int16
    Float16x3_operator_index_Int16_arg.name = "arg"_c;
    Float16x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x3_operator_index_Int16.name = Float16x3_operator_index_Int16_name;
    Float16x3_operator_index_Int16.backendIndex = 676;
    Float16x3_operator_index_Int16.returnType = Type::FullType { Float16Type.name };
    Float16x3_operator_index_Int16.parameters = Float16x3_operator_index_Int16_args;
    Symbol::Resolved(&Float16x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3_operator_index_Int16)->signature = "operator[](i16) f16"_c;
    Symbol::Resolved(&Float16x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x3_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float16x3_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt16
    Float16x3_operator_index_UInt16_arg.name = "arg"_c;
    Float16x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x3_operator_index_UInt16.name = Float16x3_operator_index_UInt16_name;
    Float16x3_operator_index_UInt16.backendIndex = 677;
    Float16x3_operator_index_UInt16.returnType = Type::FullType { Float16Type.name };
    Float16x3_operator_index_UInt16.parameters = Float16x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3_operator_index_UInt16)->signature = "operator[](u16) f16"_c;
    Symbol::Resolved(&Float16x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x3_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float16x3_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    /// operator+ with Float16x3
    Float16x3_operator_add_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_add_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_add_Float16x3.name = Float16x3_operator_add_Float16x3_name;
    Float16x3_operator_add_Float16x3.backendIndex = 678;
    Float16x3_operator_add_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_add_Float16x3.parameters = Float16x3_operator_add_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_add_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_add_Float16x3)->signature = "operator+(f16x3) f16x3"_c;
    Symbol::Resolved(&Float16x3_operator_add_Float16x3)->name = "operator+(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_add_Float16x3)->nameWithVarNames = "operator+(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_add_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator- with Float16x3
    Float16x3_operator_sub_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_sub_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_sub_Float16x3.name = Float16x3_operator_sub_Float16x3_name;
    Float16x3_operator_sub_Float16x3.backendIndex = 679;
    Float16x3_operator_sub_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_sub_Float16x3.parameters = Float16x3_operator_sub_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_sub_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_sub_Float16x3)->signature = "operator-(f16x3) f16x3"_c;
    Symbol::Resolved(&Float16x3_operator_sub_Float16x3)->name = "operator-(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_sub_Float16x3)->nameWithVarNames = "operator-(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_sub_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float16x3
    Float16x3_operator_mul_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_mul_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_mul_Float16x3.name = Float16x3_operator_mul_Float16x3_name;
    Float16x3_operator_mul_Float16x3.backendIndex = 680;
    Float16x3_operator_mul_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_mul_Float16x3.parameters = Float16x3_operator_mul_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_mul_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_mul_Float16x3)->signature = "operator*(f16x3) f16x3"_c;
    Symbol::Resolved(&Float16x3_operator_mul_Float16x3)->name = "operator*(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_mul_Float16x3)->nameWithVarNames = "operator*(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_mul_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator/ with Float16x3
    Float16x3_operator_div_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_div_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_div_Float16x3.name = Float16x3_operator_div_Float16x3_name;
    Float16x3_operator_div_Float16x3.backendIndex = 681;
    Float16x3_operator_div_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_div_Float16x3.parameters = Float16x3_operator_div_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_div_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_div_Float16x3)->signature = "operator/(f16x3) f16x3"_c;
    Symbol::Resolved(&Float16x3_operator_div_Float16x3)->name = "operator/(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_div_Float16x3)->nameWithVarNames = "operator/(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_div_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator% with Float16x3
    Float16x3_operator_mod_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_mod_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_mod_Float16x3.name = Float16x3_operator_mod_Float16x3_name;
    Float16x3_operator_mod_Float16x3.backendIndex = 682;
    Float16x3_operator_mod_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_mod_Float16x3.parameters = Float16x3_operator_mod_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_mod_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_mod_Float16x3)->signature = "operator%(f16x3) f16x3"_c;
    Symbol::Resolved(&Float16x3_operator_mod_Float16x3)->name = "operator%(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_mod_Float16x3)->nameWithVarNames = "operator%(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_mod_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator+= with Float16x3
    Float16x3_operator_addasg_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_addasg_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_addasg_Float16x3.name = Float16x3_operator_addasg_Float16x3_name;
    Float16x3_operator_addasg_Float16x3.backendIndex = 683;
    Float16x3_operator_addasg_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_addasg_Float16x3.parameters = Float16x3_operator_addasg_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_addasg_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_addasg_Float16x3)->signature = "operator+=(f16x3) f16x3"_c;
    Symbol::Resolved(&Float16x3_operator_addasg_Float16x3)->name = "operator+=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_addasg_Float16x3)->nameWithVarNames = "operator+=(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_addasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator-= with Float16x3
    Float16x3_operator_subasg_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_subasg_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_subasg_Float16x3.name = Float16x3_operator_subasg_Float16x3_name;
    Float16x3_operator_subasg_Float16x3.backendIndex = 684;
    Float16x3_operator_subasg_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_subasg_Float16x3.parameters = Float16x3_operator_subasg_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_subasg_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_subasg_Float16x3)->signature = "operator-=(f16x3) f16x3"_c;
    Symbol::Resolved(&Float16x3_operator_subasg_Float16x3)->name = "operator-=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_subasg_Float16x3)->nameWithVarNames = "operator-=(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_subasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator*= with Float16x3
    Float16x3_operator_mulasg_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_mulasg_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_mulasg_Float16x3.name = Float16x3_operator_mulasg_Float16x3_name;
    Float16x3_operator_mulasg_Float16x3.backendIndex = 685;
    Float16x3_operator_mulasg_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_mulasg_Float16x3.parameters = Float16x3_operator_mulasg_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_mulasg_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_mulasg_Float16x3)->signature = "operator*=(f16x3) f16x3"_c;
    Symbol::Resolved(&Float16x3_operator_mulasg_Float16x3)->name = "operator*=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_mulasg_Float16x3)->nameWithVarNames = "operator*=(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_mulasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator/= with Float16x3
    Float16x3_operator_divasg_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_divasg_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_divasg_Float16x3.name = Float16x3_operator_divasg_Float16x3_name;
    Float16x3_operator_divasg_Float16x3.backendIndex = 686;
    Float16x3_operator_divasg_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_divasg_Float16x3.parameters = Float16x3_operator_divasg_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_divasg_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_divasg_Float16x3)->signature = "operator/=(f16x3) f16x3"_c;
    Symbol::Resolved(&Float16x3_operator_divasg_Float16x3)->name = "operator/=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_divasg_Float16x3)->nameWithVarNames = "operator/=(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_divasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator< with Float16x3
    Float16x3_operator_lt_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_lt_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_lt_Float16x3.name = Float16x3_operator_lt_Float16x3_name;
    Float16x3_operator_lt_Float16x3.backendIndex = 687;
    Float16x3_operator_lt_Float16x3.returnType = Type::FullType { Bool8x3Type.name };
    Float16x3_operator_lt_Float16x3.parameters = Float16x3_operator_lt_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_lt_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_lt_Float16x3)->signature = "operator<(f16x3) b8x3"_c;
    Symbol::Resolved(&Float16x3_operator_lt_Float16x3)->name = "operator<(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_lt_Float16x3)->nameWithVarNames = "operator<(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_lt_Float16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator<= with Float16x3
    Float16x3_operator_lte_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_lte_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_lte_Float16x3.name = Float16x3_operator_lte_Float16x3_name;
    Float16x3_operator_lte_Float16x3.backendIndex = 688;
    Float16x3_operator_lte_Float16x3.returnType = Type::FullType { Bool8x3Type.name };
    Float16x3_operator_lte_Float16x3.parameters = Float16x3_operator_lte_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_lte_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_lte_Float16x3)->signature = "operator<=(f16x3) b8x3"_c;
    Symbol::Resolved(&Float16x3_operator_lte_Float16x3)->name = "operator<=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_lte_Float16x3)->nameWithVarNames = "operator<=(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_lte_Float16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator> with Float16x3
    Float16x3_operator_gt_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_gt_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_gt_Float16x3.name = Float16x3_operator_gt_Float16x3_name;
    Float16x3_operator_gt_Float16x3.backendIndex = 689;
    Float16x3_operator_gt_Float16x3.returnType = Type::FullType { Bool8x3Type.name };
    Float16x3_operator_gt_Float16x3.parameters = Float16x3_operator_gt_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_gt_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_gt_Float16x3)->signature = "operator>(f16x3) b8x3"_c;
    Symbol::Resolved(&Float16x3_operator_gt_Float16x3)->name = "operator>(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_gt_Float16x3)->nameWithVarNames = "operator>(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_gt_Float16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator>= with Float16x3
    Float16x3_operator_gte_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_gte_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_gte_Float16x3.name = Float16x3_operator_gte_Float16x3_name;
    Float16x3_operator_gte_Float16x3.backendIndex = 690;
    Float16x3_operator_gte_Float16x3.returnType = Type::FullType { Bool8x3Type.name };
    Float16x3_operator_gte_Float16x3.parameters = Float16x3_operator_gte_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_gte_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_gte_Float16x3)->signature = "operator>=(f16x3) b8x3"_c;
    Symbol::Resolved(&Float16x3_operator_gte_Float16x3)->name = "operator>=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_gte_Float16x3)->nameWithVarNames = "operator>=(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_gte_Float16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator== with Float16x3
    Float16x3_operator_eq_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_eq_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_eq_Float16x3.name = Float16x3_operator_eq_Float16x3_name;
    Float16x3_operator_eq_Float16x3.backendIndex = 691;
    Float16x3_operator_eq_Float16x3.returnType = Type::FullType { Bool8x3Type.name };
    Float16x3_operator_eq_Float16x3.parameters = Float16x3_operator_eq_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_eq_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_eq_Float16x3)->signature = "operator==(f16x3) b8x3"_c;
    Symbol::Resolved(&Float16x3_operator_eq_Float16x3)->name = "operator==(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_eq_Float16x3)->nameWithVarNames = "operator==(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_eq_Float16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator!= with Float16x3
    Float16x3_operator_neq_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_neq_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_neq_Float16x3.name = Float16x3_operator_neq_Float16x3_name;
    Float16x3_operator_neq_Float16x3.backendIndex = 692;
    Float16x3_operator_neq_Float16x3.returnType = Type::FullType { Bool8x3Type.name };
    Float16x3_operator_neq_Float16x3.parameters = Float16x3_operator_neq_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_neq_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_neq_Float16x3)->signature = "operator!=(f16x3) b8x3"_c;
    Symbol::Resolved(&Float16x3_operator_neq_Float16x3)->name = "operator!=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_neq_Float16x3)->nameWithVarNames = "operator!=(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_neq_Float16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator* with Float16
    Float16x3_operator_scale_Float16_arg.name = "arg"_c;
    Float16x3_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x3_operator_scale_Float16.name = Float16x3_operator_scale_Float16_name;
    Float16x3_operator_scale_Float16.backendIndex = 693;
    Float16x3_operator_scale_Float16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_scale_Float16.parameters = Float16x3_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x3_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3_operator_scale_Float16)->signature = "operator*(f16) f16x3"_c;
    Symbol::Resolved(&Float16x3_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x3_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x3_operator_scale_Float16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with UInt16
    Float16x3_operator_scale_UInt16_arg.name = "arg"_c;
    Float16x3_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x3_operator_scale_UInt16.name = Float16x3_operator_scale_UInt16_name;
    Float16x3_operator_scale_UInt16.backendIndex = 694;
    Float16x3_operator_scale_UInt16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_scale_UInt16.parameters = Float16x3_operator_scale_UInt16_args;
    Symbol::Resolved(&Float16x3_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3_operator_scale_UInt16)->signature = "operator*(u16) f16x3"_c;
    Symbol::Resolved(&Float16x3_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&Float16x3_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&Float16x3_operator_scale_UInt16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Int16
    Float16x3_operator_scale_Int16_arg.name = "arg"_c;
    Float16x3_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x3_operator_scale_Int16.name = Float16x3_operator_scale_Int16_name;
    Float16x3_operator_scale_Int16.backendIndex = 695;
    Float16x3_operator_scale_Int16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_scale_Int16.parameters = Float16x3_operator_scale_Int16_args;
    Symbol::Resolved(&Float16x3_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3_operator_scale_Int16)->signature = "operator*(i16) f16x3"_c;
    Symbol::Resolved(&Float16x3_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&Float16x3_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&Float16x3_operator_scale_Int16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float32x3x2
    Float16x3_operator_transform_Float32x3x2_arg.name = "arg"_c;
    Float16x3_operator_transform_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float16x3_operator_transform_Float32x3x2.name = Float16x3_operator_transform_Float32x3x2_name;
    Float16x3_operator_transform_Float32x3x2.backendIndex = 696;
    Float16x3_operator_transform_Float32x3x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x3_operator_transform_Float32x3x2.parameters = Float16x3_operator_transform_Float32x3x2_args;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x2)->signature = "operator*(f32x3x2) f16x2"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x2)->name = "operator*(f32x3x2)"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x2)->nameWithVarNames = "operator*(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x2)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float32x3x3
    Float16x3_operator_transform_Float32x3x3_arg.name = "arg"_c;
    Float16x3_operator_transform_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float16x3_operator_transform_Float32x3x3.name = Float16x3_operator_transform_Float32x3x3_name;
    Float16x3_operator_transform_Float32x3x3.backendIndex = 697;
    Float16x3_operator_transform_Float32x3x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_transform_Float32x3x3.parameters = Float16x3_operator_transform_Float32x3x3_args;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x3)->signature = "operator*(f32x3x3) f16x3"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x3)->name = "operator*(f32x3x3)"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x3)->nameWithVarNames = "operator*(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x3)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float32x3x4
    Float16x3_operator_transform_Float32x3x4_arg.name = "arg"_c;
    Float16x3_operator_transform_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float16x3_operator_transform_Float32x3x4.name = Float16x3_operator_transform_Float32x3x4_name;
    Float16x3_operator_transform_Float32x3x4.backendIndex = 698;
    Float16x3_operator_transform_Float32x3x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x3_operator_transform_Float32x3x4.parameters = Float16x3_operator_transform_Float32x3x4_args;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x4)->signature = "operator*(f32x3x4) f16x4"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x4)->name = "operator*(f32x3x4)"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x4)->nameWithVarNames = "operator*(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x4)->returnTypeSymbol = &Float16x4Type;

    this->scope.symbolLookup = Float16x3_symbolLookup;
}
Float16x3 Float16x3Type;

/// operator[] with Int32
Variable UInt16x3_operator_index_Int32_arg;
Function UInt16x3_operator_index_Int32;
inline constexpr std::array UInt16x3_operator_index_Int32_args = { &UInt16x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt16x3_operator_index_UInt32_arg;
Function UInt16x3_operator_index_UInt32;
inline constexpr std::array UInt16x3_operator_index_UInt32_args = { &UInt16x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt16x3_operator_index_Int16_arg;
Function UInt16x3_operator_index_Int16;
inline constexpr std::array UInt16x3_operator_index_Int16_args = { &UInt16x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt16x3_operator_index_UInt16_arg;
Function UInt16x3_operator_index_UInt16;
inline constexpr std::array UInt16x3_operator_index_UInt16_args = { &UInt16x3_operator_index_UInt16_arg };

/// operator+ with UInt16x3
Variable UInt16x3_operator_add_UInt16x3_arg;
Function UInt16x3_operator_add_UInt16x3;
inline constexpr std::array UInt16x3_operator_add_UInt16x3_args = { &UInt16x3_operator_add_UInt16x3_arg };

/// operator- with UInt16x3
Variable UInt16x3_operator_sub_UInt16x3_arg;
Function UInt16x3_operator_sub_UInt16x3;
inline constexpr std::array UInt16x3_operator_sub_UInt16x3_args = { &UInt16x3_operator_sub_UInt16x3_arg };

/// operator* with UInt16x3
Variable UInt16x3_operator_mul_UInt16x3_arg;
Function UInt16x3_operator_mul_UInt16x3;
inline constexpr std::array UInt16x3_operator_mul_UInt16x3_args = { &UInt16x3_operator_mul_UInt16x3_arg };

/// operator/ with UInt16x3
Variable UInt16x3_operator_div_UInt16x3_arg;
Function UInt16x3_operator_div_UInt16x3;
inline constexpr std::array UInt16x3_operator_div_UInt16x3_args = { &UInt16x3_operator_div_UInt16x3_arg };

/// operator% with UInt16x3
Variable UInt16x3_operator_mod_UInt16x3_arg;
Function UInt16x3_operator_mod_UInt16x3;
inline constexpr std::array UInt16x3_operator_mod_UInt16x3_args = { &UInt16x3_operator_mod_UInt16x3_arg };

/// operator+= with UInt16x3
Variable UInt16x3_operator_addasg_UInt16x3_arg;
Function UInt16x3_operator_addasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_addasg_UInt16x3_args = { &UInt16x3_operator_addasg_UInt16x3_arg };

/// operator-= with UInt16x3
Variable UInt16x3_operator_subasg_UInt16x3_arg;
Function UInt16x3_operator_subasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_subasg_UInt16x3_args = { &UInt16x3_operator_subasg_UInt16x3_arg };

/// operator*= with UInt16x3
Variable UInt16x3_operator_mulasg_UInt16x3_arg;
Function UInt16x3_operator_mulasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_mulasg_UInt16x3_args = { &UInt16x3_operator_mulasg_UInt16x3_arg };

/// operator/= with UInt16x3
Variable UInt16x3_operator_divasg_UInt16x3_arg;
Function UInt16x3_operator_divasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_divasg_UInt16x3_args = { &UInt16x3_operator_divasg_UInt16x3_arg };

/// operator< with UInt16x3
Variable UInt16x3_operator_lt_UInt16x3_arg;
Function UInt16x3_operator_lt_UInt16x3;
inline constexpr std::array UInt16x3_operator_lt_UInt16x3_args = { &UInt16x3_operator_lt_UInt16x3_arg };

/// operator<= with UInt16x3
Variable UInt16x3_operator_lte_UInt16x3_arg;
Function UInt16x3_operator_lte_UInt16x3;
inline constexpr std::array UInt16x3_operator_lte_UInt16x3_args = { &UInt16x3_operator_lte_UInt16x3_arg };

/// operator> with UInt16x3
Variable UInt16x3_operator_gt_UInt16x3_arg;
Function UInt16x3_operator_gt_UInt16x3;
inline constexpr std::array UInt16x3_operator_gt_UInt16x3_args = { &UInt16x3_operator_gt_UInt16x3_arg };

/// operator>= with UInt16x3
Variable UInt16x3_operator_gte_UInt16x3_arg;
Function UInt16x3_operator_gte_UInt16x3;
inline constexpr std::array UInt16x3_operator_gte_UInt16x3_args = { &UInt16x3_operator_gte_UInt16x3_arg };

/// operator== with UInt16x3
Variable UInt16x3_operator_eq_UInt16x3_arg;
Function UInt16x3_operator_eq_UInt16x3;
inline constexpr std::array UInt16x3_operator_eq_UInt16x3_args = { &UInt16x3_operator_eq_UInt16x3_arg };

/// operator!= with UInt16x3
Variable UInt16x3_operator_neq_UInt16x3_arg;
Function UInt16x3_operator_neq_UInt16x3;
inline constexpr std::array UInt16x3_operator_neq_UInt16x3_args = { &UInt16x3_operator_neq_UInt16x3_arg };

/// operator* with Float16
Variable UInt16x3_operator_scale_Float16_arg;
Function UInt16x3_operator_scale_Float16;
inline constexpr std::array UInt16x3_operator_scale_Float16_args = { &UInt16x3_operator_scale_Float16_arg };

/// operator* with UInt16
Variable UInt16x3_operator_scale_UInt16_arg;
Function UInt16x3_operator_scale_UInt16;
inline constexpr std::array UInt16x3_operator_scale_UInt16_args = { &UInt16x3_operator_scale_UInt16_arg };

/// operator* with Int16
Variable UInt16x3_operator_scale_Int16_arg;
Function UInt16x3_operator_scale_Int16;
inline constexpr std::array UInt16x3_operator_scale_Int16_args = { &UInt16x3_operator_scale_Int16_arg };

/// operator| with UInt16x3
Variable UInt16x3_operator_or_UInt16x3_arg;
Function UInt16x3_operator_or_UInt16x3;
inline constexpr std::array UInt16x3_operator_or_UInt16x3_args = { &UInt16x3_operator_or_UInt16x3_arg };

/// operator& with UInt16x3
Variable UInt16x3_operator_and_UInt16x3_arg;
Function UInt16x3_operator_and_UInt16x3;
inline constexpr std::array UInt16x3_operator_and_UInt16x3_args = { &UInt16x3_operator_and_UInt16x3_arg };

/// operator^ with UInt16x3
Variable UInt16x3_operator_xor_UInt16x3_arg;
Function UInt16x3_operator_xor_UInt16x3;
inline constexpr std::array UInt16x3_operator_xor_UInt16x3_args = { &UInt16x3_operator_xor_UInt16x3_arg };

/// operator<< with UInt16x3
Variable UInt16x3_operator_lsh_UInt16x3_arg;
Function UInt16x3_operator_lsh_UInt16x3;
inline constexpr std::array UInt16x3_operator_lsh_UInt16x3_args = { &UInt16x3_operator_lsh_UInt16x3_arg };

/// operator>> with UInt16x3
Variable UInt16x3_operator_rsh_UInt16x3_arg;
Function UInt16x3_operator_rsh_UInt16x3;
inline constexpr std::array UInt16x3_operator_rsh_UInt16x3_args = { &UInt16x3_operator_rsh_UInt16x3_arg };

/// operator|= with UInt16x3
Variable UInt16x3_operator_orasg_UInt16x3_arg;
Function UInt16x3_operator_orasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_orasg_UInt16x3_args = { &UInt16x3_operator_orasg_UInt16x3_arg };

/// operator&= with UInt16x3
Variable UInt16x3_operator_andasg_UInt16x3_arg;
Function UInt16x3_operator_andasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_andasg_UInt16x3_args = { &UInt16x3_operator_andasg_UInt16x3_arg };

/// operator^= with UInt16x3
Variable UInt16x3_operator_xorasg_UInt16x3_arg;
Function UInt16x3_operator_xorasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_xorasg_UInt16x3_args = { &UInt16x3_operator_xorasg_UInt16x3_arg };

/// operator<<= with UInt16x3
Variable UInt16x3_operator_lshasg_UInt16x3_arg;
Function UInt16x3_operator_lshasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_lshasg_UInt16x3_args = { &UInt16x3_operator_lshasg_UInt16x3_arg };

/// operator>>= with UInt16x3
Variable UInt16x3_operator_rhsasg_UInt16x3_arg;
Function UInt16x3_operator_rhsasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_rhsasg_UInt16x3_args = { &UInt16x3_operator_rhsasg_UInt16x3_arg };

static constexpr StaticMap<HashString, Symbol*, 304> UInt16x3_symbolLookup = {
    std::pair{ "bgg"_h, &UInt16x3Type },
    std::pair{ "bgb"_h, &UInt16x3Type },
    std::pair{ "bgr"_h, &UInt16x3Type },
    std::pair{ "bbg"_h, &UInt16x3Type },
    std::pair{ "bbb"_h, &UInt16x3Type },
    std::pair{ "bbr"_h, &UInt16x3Type },
    std::pair{ "brr"_h, &UInt16x3Type },
    std::pair{ "brg"_h, &UInt16x3Type },
    std::pair{ "brb"_h, &UInt16x3Type },
    std::pair{ "operator>=(u16x3)"_h, &UInt16x3_operator_gte_UInt16x3 },
    std::pair{ "operator==(u16x3)"_h, &UInt16x3_operator_eq_UInt16x3 },
    std::pair{ "gg"_h, &UInt16x2Type },
    std::pair{ "gb"_h, &UInt16x2Type },
    std::pair{ "gr"_h, &UInt16x2Type },
    std::pair{ "bg"_h, &UInt16x2Type },
    std::pair{ "bb"_h, &UInt16x2Type },
    std::pair{ "br"_h, &UInt16x2Type },
    std::pair{ "rr"_h, &UInt16x2Type },
    std::pair{ "rg"_h, &UInt16x2Type },
    std::pair{ "rb"_h, &UInt16x2Type },
    std::pair{ "yx"_h, &UInt16x2Type },
    std::pair{ "yy"_h, &UInt16x2Type },
    std::pair{ "yz"_h, &UInt16x2Type },
    std::pair{ "xz"_h, &UInt16x2Type },
    std::pair{ "xy"_h, &UInt16x2Type },
    std::pair{ "xx"_h, &UInt16x2Type },
    std::pair{ "zy"_h, &UInt16x2Type },
    std::pair{ "zx"_h, &UInt16x2Type },
    std::pair{ "zz"_h, &UInt16x2Type },
    std::pair{ "operator[](i16)"_h, &UInt16x3_operator_index_Int16 },
    std::pair{ "operator/(u16x3)"_h, &UInt16x3_operator_div_UInt16x3 },
    std::pair{ "operator*(u16x3)"_h, &UInt16x3_operator_mul_UInt16x3 },
    std::pair{ "operator-(u16x3)"_h, &UInt16x3_operator_sub_UInt16x3 },
    std::pair{ "operator>>=(u16x3)"_h, &UInt16x3_operator_rhsasg_UInt16x3 },
    std::pair{ "operator*(u16)"_h, &UInt16x3_operator_scale_UInt16 },
    std::pair{ "operator|(u16x3)"_h, &UInt16x3_operator_or_UInt16x3 },
    std::pair{ "operator-=(u16x3)"_h, &UInt16x3_operator_subasg_UInt16x3 },
    std::pair{ "operator+(u16x3)"_h, &UInt16x3_operator_add_UInt16x3 },
    std::pair{ "brrg"_h, &UInt16x4Type },
    std::pair{ "brrb"_h, &UInt16x4Type },
    std::pair{ "brrr"_h, &UInt16x4Type },
    std::pair{ "brgr"_h, &UInt16x4Type },
    std::pair{ "brgg"_h, &UInt16x4Type },
    std::pair{ "brgb"_h, &UInt16x4Type },
    std::pair{ "brbr"_h, &UInt16x4Type },
    std::pair{ "brbg"_h, &UInt16x4Type },
    std::pair{ "brbb"_h, &UInt16x4Type },
    std::pair{ "operator<=(u16x3)"_h, &UInt16x3_operator_lte_UInt16x3 },
    std::pair{ "operator^"_h, &UInt16x3_operator_xor_UInt16x3 },
    std::pair{ "operator|"_h, &UInt16x3_operator_or_UInt16x3 },
    std::pair{ "operator<"_h, &UInt16x3_operator_lt_UInt16x3 },
    std::pair{ "operator>"_h, &UInt16x3_operator_gt_UInt16x3 },
    std::pair{ "operator-"_h, &UInt16x3_operator_sub_UInt16x3 },
    std::pair{ "operator/"_h, &UInt16x3_operator_div_UInt16x3 },
    std::pair{ "operator+"_h, &UInt16x3_operator_add_UInt16x3 },
    std::pair{ "operator*"_h, &UInt16x3_operator_mul_UInt16x3 },
    std::pair{ "operator*"_h, &UInt16x3_operator_scale_Float16 },
    std::pair{ "operator*"_h, &UInt16x3_operator_scale_UInt16 },
    std::pair{ "operator*"_h, &UInt16x3_operator_scale_Int16 },
    std::pair{ "operator%"_h, &UInt16x3_operator_mod_UInt16x3 },
    std::pair{ "operator&"_h, &UInt16x3_operator_and_UInt16x3 },
    std::pair{ "xzzz"_h, &UInt16x4Type },
    std::pair{ "xzzy"_h, &UInt16x4Type },
    std::pair{ "xzzx"_h, &UInt16x4Type },
    std::pair{ "xzyz"_h, &UInt16x4Type },
    std::pair{ "xzyx"_h, &UInt16x4Type },
    std::pair{ "xzyy"_h, &UInt16x4Type },
    std::pair{ "xzxy"_h, &UInt16x4Type },
    std::pair{ "xzxx"_h, &UInt16x4Type },
    std::pair{ "xzxz"_h, &UInt16x4Type },
    std::pair{ "operator&(u16x3)"_h, &UInt16x3_operator_and_UInt16x3 },
    std::pair{ "yxxx"_h, &UInt16x4Type },
    std::pair{ "yxxy"_h, &UInt16x4Type },
    std::pair{ "yxxz"_h, &UInt16x4Type },
    std::pair{ "yxyz"_h, &UInt16x4Type },
    std::pair{ "yxyy"_h, &UInt16x4Type },
    std::pair{ "yxyx"_h, &UInt16x4Type },
    std::pair{ "yxzz"_h, &UInt16x4Type },
    std::pair{ "yxzx"_h, &UInt16x4Type },
    std::pair{ "yxzy"_h, &UInt16x4Type },
    std::pair{ "operator&=(u16x3)"_h, &UInt16x3_operator_andasg_UInt16x3 },
    std::pair{ "xyzx"_h, &UInt16x4Type },
    std::pair{ "xyzy"_h, &UInt16x4Type },
    std::pair{ "xyzz"_h, &UInt16x4Type },
    std::pair{ "xyxz"_h, &UInt16x4Type },
    std::pair{ "xyxx"_h, &UInt16x4Type },
    std::pair{ "xyxy"_h, &UInt16x4Type },
    std::pair{ "xyyy"_h, &UInt16x4Type },
    std::pair{ "xyyx"_h, &UInt16x4Type },
    std::pair{ "xyyz"_h, &UInt16x4Type },
    std::pair{ "ggrr"_h, &UInt16x4Type },
    std::pair{ "ggrb"_h, &UInt16x4Type },
    std::pair{ "ggrg"_h, &UInt16x4Type },
    std::pair{ "ggbb"_h, &UInt16x4Type },
    std::pair{ "ggbg"_h, &UInt16x4Type },
    std::pair{ "ggbr"_h, &UInt16x4Type },
    std::pair{ "gggr"_h, &UInt16x4Type },
    std::pair{ "gggg"_h, &UInt16x4Type },
    std::pair{ "gggb"_h, &UInt16x4Type },
    std::pair{ "operator<<(u16x3)"_h, &UInt16x3_operator_lsh_UInt16x3 },
    std::pair{ "yyzz"_h, &UInt16x4Type },
    std::pair{ "yyzy"_h, &UInt16x4Type },
    std::pair{ "yyzx"_h, &UInt16x4Type },
    std::pair{ "yyyz"_h, &UInt16x4Type },
    std::pair{ "yyyx"_h, &UInt16x4Type },
    std::pair{ "yyyy"_h, &UInt16x4Type },
    std::pair{ "yyxy"_h, &UInt16x4Type },
    std::pair{ "yyxx"_h, &UInt16x4Type },
    std::pair{ "yyxz"_h, &UInt16x4Type },
    std::pair{ "xxyx"_h, &UInt16x4Type },
    std::pair{ "xxyy"_h, &UInt16x4Type },
    std::pair{ "xxyz"_h, &UInt16x4Type },
    std::pair{ "xxxz"_h, &UInt16x4Type },
    std::pair{ "xxxy"_h, &UInt16x4Type },
    std::pair{ "xxxx"_h, &UInt16x4Type },
    std::pair{ "xxzy"_h, &UInt16x4Type },
    std::pair{ "xxzx"_h, &UInt16x4Type },
    std::pair{ "xxzz"_h, &UInt16x4Type },
    std::pair{ "rgrg"_h, &UInt16x4Type },
    std::pair{ "rgrb"_h, &UInt16x4Type },
    std::pair{ "rgrr"_h, &UInt16x4Type },
    std::pair{ "rggb"_h, &UInt16x4Type },
    std::pair{ "rggg"_h, &UInt16x4Type },
    std::pair{ "rggr"_h, &UInt16x4Type },
    std::pair{ "rgbr"_h, &UInt16x4Type },
    std::pair{ "rgbg"_h, &UInt16x4Type },
    std::pair{ "rgbb"_h, &UInt16x4Type },
    std::pair{ "operator<<=(u16x3)"_h, &UInt16x3_operator_lshasg_UInt16x3 },
    std::pair{ "yzzx"_h, &UInt16x4Type },
    std::pair{ "yzzy"_h, &UInt16x4Type },
    std::pair{ "yzzz"_h, &UInt16x4Type },
    std::pair{ "yzxz"_h, &UInt16x4Type },
    std::pair{ "yzxx"_h, &UInt16x4Type },
    std::pair{ "yzxy"_h, &UInt16x4Type },
    std::pair{ "yzyy"_h, &UInt16x4Type },
    std::pair{ "yzyx"_h, &UInt16x4Type },
    std::pair{ "yzyz"_h, &UInt16x4Type },
    std::pair{ "operator|=(u16x3)"_h, &UInt16x3_operator_orasg_UInt16x3 },
    std::pair{ "gbgr"_h, &UInt16x4Type },
    std::pair{ "gbgb"_h, &UInt16x4Type },
    std::pair{ "gbgg"_h, &UInt16x4Type },
    std::pair{ "gbbb"_h, &UInt16x4Type },
    std::pair{ "gbbg"_h, &UInt16x4Type },
    std::pair{ "gbbr"_h, &UInt16x4Type },
    std::pair{ "gbrr"_h, &UInt16x4Type },
    std::pair{ "gbrb"_h, &UInt16x4Type },
    std::pair{ "gbrg"_h, &UInt16x4Type },
    std::pair{ "operator%(u16x3)"_h, &UInt16x3_operator_mod_UInt16x3 },
    std::pair{ "operator^(u16x3)"_h, &UInt16x3_operator_xor_UInt16x3 },
    std::pair{ "rbrg"_h, &UInt16x4Type },
    std::pair{ "rbrb"_h, &UInt16x4Type },
    std::pair{ "rbrr"_h, &UInt16x4Type },
    std::pair{ "rbgr"_h, &UInt16x4Type },
    std::pair{ "rbgg"_h, &UInt16x4Type },
    std::pair{ "rbgb"_h, &UInt16x4Type },
    std::pair{ "rbbr"_h, &UInt16x4Type },
    std::pair{ "rbbg"_h, &UInt16x4Type },
    std::pair{ "rbbb"_h, &UInt16x4Type },
    std::pair{ "zyxx"_h, &UInt16x4Type },
    std::pair{ "zyxy"_h, &UInt16x4Type },
    std::pair{ "zyxz"_h, &UInt16x4Type },
    std::pair{ "zyyz"_h, &UInt16x4Type },
    std::pair{ "zyyy"_h, &UInt16x4Type },
    std::pair{ "zyyx"_h, &UInt16x4Type },
    std::pair{ "zyzz"_h, &UInt16x4Type },
    std::pair{ "zyzx"_h, &UInt16x4Type },
    std::pair{ "zyzy"_h, &UInt16x4Type },
    std::pair{ "bggr"_h, &UInt16x4Type },
    std::pair{ "bggb"_h, &UInt16x4Type },
    std::pair{ "bggg"_h, &UInt16x4Type },
    std::pair{ "bgbg"_h, &UInt16x4Type },
    std::pair{ "bgbb"_h, &UInt16x4Type },
    std::pair{ "bgbr"_h, &UInt16x4Type },
    std::pair{ "bgrr"_h, &UInt16x4Type },
    std::pair{ "bgrg"_h, &UInt16x4Type },
    std::pair{ "bgrb"_h, &UInt16x4Type },
    std::pair{ "rrg"_h, &UInt16x3Type },
    std::pair{ "rrb"_h, &UInt16x3Type },
    std::pair{ "rrr"_h, &UInt16x3Type },
    std::pair{ "rgr"_h, &UInt16x3Type },
    std::pair{ "rgg"_h, &UInt16x3Type },
    std::pair{ "rgb"_h, &UInt16x3Type },
    std::pair{ "rbr"_h, &UInt16x3Type },
    std::pair{ "rbg"_h, &UInt16x3Type },
    std::pair{ "rbb"_h, &UInt16x3Type },
    std::pair{ "operator[](u32)"_h, &UInt16x3_operator_index_UInt32 },
    std::pair{ "operator<<="_h, &UInt16x3_operator_lshasg_UInt16x3 },
    std::pair{ "zxzz"_h, &UInt16x4Type },
    std::pair{ "zxzy"_h, &UInt16x4Type },
    std::pair{ "zxzx"_h, &UInt16x4Type },
    std::pair{ "zxyz"_h, &UInt16x4Type },
    std::pair{ "zxyx"_h, &UInt16x4Type },
    std::pair{ "zxyy"_h, &UInt16x4Type },
    std::pair{ "zxxy"_h, &UInt16x4Type },
    std::pair{ "zxxx"_h, &UInt16x4Type },
    std::pair{ "zxxz"_h, &UInt16x4Type },
    std::pair{ "operator>>(u16x3)"_h, &UInt16x3_operator_rsh_UInt16x3 },
    std::pair{ "operator[](u16)"_h, &UInt16x3_operator_index_UInt16 },
    std::pair{ "operator>>="_h, &UInt16x3_operator_rhsasg_UInt16x3 },
    std::pair{ "zzyx"_h, &UInt16x4Type },
    std::pair{ "zzyy"_h, &UInt16x4Type },
    std::pair{ "zzyz"_h, &UInt16x4Type },
    std::pair{ "zzxz"_h, &UInt16x4Type },
    std::pair{ "zzxy"_h, &UInt16x4Type },
    std::pair{ "zzxx"_h, &UInt16x4Type },
    std::pair{ "zzzy"_h, &UInt16x4Type },
    std::pair{ "zzzx"_h, &UInt16x4Type },
    std::pair{ "zzzz"_h, &UInt16x4Type },
    std::pair{ "operator*(f16)"_h, &UInt16x3_operator_scale_Float16 },
    std::pair{ "g"_h, &UInt16Type },
    std::pair{ "b"_h, &UInt16Type },
    std::pair{ "r"_h, &UInt16Type },
    std::pair{ "y"_h, &UInt16Type },
    std::pair{ "x"_h, &UInt16Type },
    std::pair{ "z"_h, &UInt16Type },
    std::pair{ "operator!=(u16x3)"_h, &UInt16x3_operator_neq_UInt16x3 },
    std::pair{ "bbgg"_h, &UInt16x4Type },
    std::pair{ "bbgb"_h, &UInt16x4Type },
    std::pair{ "bbgr"_h, &UInt16x4Type },
    std::pair{ "bbbg"_h, &UInt16x4Type },
    std::pair{ "bbbb"_h, &UInt16x4Type },
    std::pair{ "bbbr"_h, &UInt16x4Type },
    std::pair{ "bbrr"_h, &UInt16x4Type },
    std::pair{ "bbrg"_h, &UInt16x4Type },
    std::pair{ "bbrb"_h, &UInt16x4Type },
    std::pair{ "yxx"_h, &UInt16x3Type },
    std::pair{ "yxy"_h, &UInt16x3Type },
    std::pair{ "yxz"_h, &UInt16x3Type },
    std::pair{ "yyz"_h, &UInt16x3Type },
    std::pair{ "yyy"_h, &UInt16x3Type },
    std::pair{ "yyx"_h, &UInt16x3Type },
    std::pair{ "yzz"_h, &UInt16x3Type },
    std::pair{ "yzx"_h, &UInt16x3Type },
    std::pair{ "yzy"_h, &UInt16x3Type },
    std::pair{ "xzz"_h, &UInt16x3Type },
    std::pair{ "xzy"_h, &UInt16x3Type },
    std::pair{ "xzx"_h, &UInt16x3Type },
    std::pair{ "xyz"_h, &UInt16x3Type },
    std::pair{ "xyx"_h, &UInt16x3Type },
    std::pair{ "xyy"_h, &UInt16x3Type },
    std::pair{ "xxy"_h, &UInt16x3Type },
    std::pair{ "xxx"_h, &UInt16x3Type },
    std::pair{ "xxz"_h, &UInt16x3Type },
    std::pair{ "operator*(i16)"_h, &UInt16x3_operator_scale_Int16 },
    std::pair{ "zyx"_h, &UInt16x3Type },
    std::pair{ "zyy"_h, &UInt16x3Type },
    std::pair{ "zyz"_h, &UInt16x3Type },
    std::pair{ "zxz"_h, &UInt16x3Type },
    std::pair{ "zxy"_h, &UInt16x3Type },
    std::pair{ "zxx"_h, &UInt16x3Type },
    std::pair{ "zzy"_h, &UInt16x3Type },
    std::pair{ "zzx"_h, &UInt16x3Type },
    std::pair{ "zzz"_h, &UInt16x3Type },
    std::pair{ "ggr"_h, &UInt16x3Type },
    std::pair{ "ggb"_h, &UInt16x3Type },
    std::pair{ "ggg"_h, &UInt16x3Type },
    std::pair{ "gbg"_h, &UInt16x3Type },
    std::pair{ "gbb"_h, &UInt16x3Type },
    std::pair{ "gbr"_h, &UInt16x3Type },
    std::pair{ "grr"_h, &UInt16x3Type },
    std::pair{ "grg"_h, &UInt16x3Type },
    std::pair{ "grb"_h, &UInt16x3Type },
    std::pair{ "operator/=(u16x3)"_h, &UInt16x3_operator_divasg_UInt16x3 },
    std::pair{ "operator^="_h, &UInt16x3_operator_xorasg_UInt16x3 },
    std::pair{ "operator[]"_h, &UInt16x3_operator_index_Int32 },
    std::pair{ "operator[]"_h, &UInt16x3_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &UInt16x3_operator_index_Int16 },
    std::pair{ "operator[]"_h, &UInt16x3_operator_index_UInt16 },
    std::pair{ "operator|="_h, &UInt16x3_operator_orasg_UInt16x3 },
    std::pair{ "operator=="_h, &UInt16x3_operator_eq_UInt16x3 },
    std::pair{ "operator<="_h, &UInt16x3_operator_lte_UInt16x3 },
    std::pair{ "operator<<"_h, &UInt16x3_operator_lsh_UInt16x3 },
    std::pair{ "operator>="_h, &UInt16x3_operator_gte_UInt16x3 },
    std::pair{ "operator>>"_h, &UInt16x3_operator_rsh_UInt16x3 },
    std::pair{ "operator-="_h, &UInt16x3_operator_subasg_UInt16x3 },
    std::pair{ "operator/="_h, &UInt16x3_operator_divasg_UInt16x3 },
    std::pair{ "operator+="_h, &UInt16x3_operator_addasg_UInt16x3 },
    std::pair{ "operator*="_h, &UInt16x3_operator_mulasg_UInt16x3 },
    std::pair{ "operator&="_h, &UInt16x3_operator_andasg_UInt16x3 },
    std::pair{ "operator!="_h, &UInt16x3_operator_neq_UInt16x3 },
    std::pair{ "operator+=(u16x3)"_h, &UInt16x3_operator_addasg_UInt16x3 },
    std::pair{ "operator<(u16x3)"_h, &UInt16x3_operator_lt_UInt16x3 },
    std::pair{ "operator^=(u16x3)"_h, &UInt16x3_operator_xorasg_UInt16x3 },
    std::pair{ "operator*=(u16x3)"_h, &UInt16x3_operator_mulasg_UInt16x3 },
    std::pair{ "operator[](i32)"_h, &UInt16x3_operator_index_Int32 },
    std::pair{ "grrb"_h, &UInt16x4Type },
    std::pair{ "grrg"_h, &UInt16x4Type },
    std::pair{ "grrr"_h, &UInt16x4Type },
    std::pair{ "grgb"_h, &UInt16x4Type },
    std::pair{ "grgg"_h, &UInt16x4Type },
    std::pair{ "grgr"_h, &UInt16x4Type },
    std::pair{ "grbr"_h, &UInt16x4Type },
    std::pair{ "grbb"_h, &UInt16x4Type },
    std::pair{ "grbg"_h, &UInt16x4Type },
    std::pair{ "operator>(u16x3)"_h, &UInt16x3_operator_gt_UInt16x3 },
    std::pair{ "rrgg"_h, &UInt16x4Type },
    std::pair{ "rrgb"_h, &UInt16x4Type },
    std::pair{ "rrgr"_h, &UInt16x4Type },
    std::pair{ "rrbg"_h, &UInt16x4Type },
    std::pair{ "rrbb"_h, &UInt16x4Type },
    std::pair{ "rrbr"_h, &UInt16x4Type },
    std::pair{ "rrrr"_h, &UInt16x4Type },
    std::pair{ "rrrg"_h, &UInt16x4Type },
    std::pair{ "rrrb"_h, &UInt16x4Type }
    };

UInt16x3::UInt16x3()
{
    this->name = "u16x3"_c;
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 6;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    /// operator[] with Int32
    UInt16x3_operator_index_Int32_arg.name = "arg"_c;
    UInt16x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt16x3_operator_index_Int32.name = UInt16x3_operator_index_Int32_name;
    UInt16x3_operator_index_Int32.backendIndex = 716;
    UInt16x3_operator_index_Int32.returnType = Type::FullType { UInt16Type.name };
    UInt16x3_operator_index_Int32.parameters = UInt16x3_operator_index_Int32_args;
    Symbol::Resolved(&UInt16x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x3_operator_index_Int32)->signature = "operator[](i32) u16"_c;
    Symbol::Resolved(&UInt16x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt32
    UInt16x3_operator_index_UInt32_arg.name = "arg"_c;
    UInt16x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt16x3_operator_index_UInt32.name = UInt16x3_operator_index_UInt32_name;
    UInt16x3_operator_index_UInt32.backendIndex = 717;
    UInt16x3_operator_index_UInt32.returnType = Type::FullType { UInt16Type.name };
    UInt16x3_operator_index_UInt32.parameters = UInt16x3_operator_index_UInt32_args;
    Symbol::Resolved(&UInt16x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x3_operator_index_UInt32)->signature = "operator[](u32) u16"_c;
    Symbol::Resolved(&UInt16x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with Int16
    UInt16x3_operator_index_Int16_arg.name = "arg"_c;
    UInt16x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16x3_operator_index_Int16.name = UInt16x3_operator_index_Int16_name;
    UInt16x3_operator_index_Int16.backendIndex = 718;
    UInt16x3_operator_index_Int16.returnType = Type::FullType { UInt16Type.name };
    UInt16x3_operator_index_Int16.parameters = UInt16x3_operator_index_Int16_args;
    Symbol::Resolved(&UInt16x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x3_operator_index_Int16)->signature = "operator[](i16) u16"_c;
    Symbol::Resolved(&UInt16x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt16
    UInt16x3_operator_index_UInt16_arg.name = "arg"_c;
    UInt16x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16x3_operator_index_UInt16.name = UInt16x3_operator_index_UInt16_name;
    UInt16x3_operator_index_UInt16.backendIndex = 719;
    UInt16x3_operator_index_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16x3_operator_index_UInt16.parameters = UInt16x3_operator_index_UInt16_args;
    Symbol::Resolved(&UInt16x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_operator_index_UInt16)->signature = "operator[](u16) u16"_c;
    Symbol::Resolved(&UInt16x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator+ with UInt16x3
    UInt16x3_operator_add_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_add_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_add_UInt16x3.name = UInt16x3_operator_add_UInt16x3_name;
    UInt16x3_operator_add_UInt16x3.backendIndex = 720;
    UInt16x3_operator_add_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_add_UInt16x3.parameters = UInt16x3_operator_add_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_add_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_add_UInt16x3)->signature = "operator+(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_add_UInt16x3)->name = "operator+(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_add_UInt16x3)->nameWithVarNames = "operator+(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_add_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator- with UInt16x3
    UInt16x3_operator_sub_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_sub_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_sub_UInt16x3.name = UInt16x3_operator_sub_UInt16x3_name;
    UInt16x3_operator_sub_UInt16x3.backendIndex = 721;
    UInt16x3_operator_sub_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_sub_UInt16x3.parameters = UInt16x3_operator_sub_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_sub_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_sub_UInt16x3)->signature = "operator-(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_sub_UInt16x3)->name = "operator-(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_sub_UInt16x3)->nameWithVarNames = "operator-(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_sub_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator* with UInt16x3
    UInt16x3_operator_mul_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_mul_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_mul_UInt16x3.name = UInt16x3_operator_mul_UInt16x3_name;
    UInt16x3_operator_mul_UInt16x3.backendIndex = 722;
    UInt16x3_operator_mul_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_mul_UInt16x3.parameters = UInt16x3_operator_mul_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_mul_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_mul_UInt16x3)->signature = "operator*(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_mul_UInt16x3)->name = "operator*(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_mul_UInt16x3)->nameWithVarNames = "operator*(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_mul_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator/ with UInt16x3
    UInt16x3_operator_div_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_div_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_div_UInt16x3.name = UInt16x3_operator_div_UInt16x3_name;
    UInt16x3_operator_div_UInt16x3.backendIndex = 723;
    UInt16x3_operator_div_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_div_UInt16x3.parameters = UInt16x3_operator_div_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_div_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_div_UInt16x3)->signature = "operator/(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_div_UInt16x3)->name = "operator/(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_div_UInt16x3)->nameWithVarNames = "operator/(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_div_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator% with UInt16x3
    UInt16x3_operator_mod_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_mod_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_mod_UInt16x3.name = UInt16x3_operator_mod_UInt16x3_name;
    UInt16x3_operator_mod_UInt16x3.backendIndex = 724;
    UInt16x3_operator_mod_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_mod_UInt16x3.parameters = UInt16x3_operator_mod_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_mod_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_mod_UInt16x3)->signature = "operator%(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_mod_UInt16x3)->name = "operator%(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_mod_UInt16x3)->nameWithVarNames = "operator%(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_mod_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator+= with UInt16x3
    UInt16x3_operator_addasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_addasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_addasg_UInt16x3.name = UInt16x3_operator_addasg_UInt16x3_name;
    UInt16x3_operator_addasg_UInt16x3.backendIndex = 725;
    UInt16x3_operator_addasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_addasg_UInt16x3.parameters = UInt16x3_operator_addasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_addasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_addasg_UInt16x3)->signature = "operator+=(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_addasg_UInt16x3)->name = "operator+=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_addasg_UInt16x3)->nameWithVarNames = "operator+=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_addasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator-= with UInt16x3
    UInt16x3_operator_subasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_subasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_subasg_UInt16x3.name = UInt16x3_operator_subasg_UInt16x3_name;
    UInt16x3_operator_subasg_UInt16x3.backendIndex = 726;
    UInt16x3_operator_subasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_subasg_UInt16x3.parameters = UInt16x3_operator_subasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_subasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_subasg_UInt16x3)->signature = "operator-=(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_subasg_UInt16x3)->name = "operator-=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_subasg_UInt16x3)->nameWithVarNames = "operator-=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_subasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator*= with UInt16x3
    UInt16x3_operator_mulasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_mulasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_mulasg_UInt16x3.name = UInt16x3_operator_mulasg_UInt16x3_name;
    UInt16x3_operator_mulasg_UInt16x3.backendIndex = 727;
    UInt16x3_operator_mulasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_mulasg_UInt16x3.parameters = UInt16x3_operator_mulasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_mulasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_mulasg_UInt16x3)->signature = "operator*=(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_mulasg_UInt16x3)->name = "operator*=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_mulasg_UInt16x3)->nameWithVarNames = "operator*=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_mulasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator/= with UInt16x3
    UInt16x3_operator_divasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_divasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_divasg_UInt16x3.name = UInt16x3_operator_divasg_UInt16x3_name;
    UInt16x3_operator_divasg_UInt16x3.backendIndex = 728;
    UInt16x3_operator_divasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_divasg_UInt16x3.parameters = UInt16x3_operator_divasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_divasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_divasg_UInt16x3)->signature = "operator/=(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_divasg_UInt16x3)->name = "operator/=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_divasg_UInt16x3)->nameWithVarNames = "operator/=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_divasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator< with UInt16x3
    UInt16x3_operator_lt_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_lt_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_lt_UInt16x3.name = UInt16x3_operator_lt_UInt16x3_name;
    UInt16x3_operator_lt_UInt16x3.backendIndex = 729;
    UInt16x3_operator_lt_UInt16x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt16x3_operator_lt_UInt16x3.parameters = UInt16x3_operator_lt_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_lt_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_lt_UInt16x3)->signature = "operator<(u16x3) b8x3"_c;
    Symbol::Resolved(&UInt16x3_operator_lt_UInt16x3)->name = "operator<(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lt_UInt16x3)->nameWithVarNames = "operator<(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lt_UInt16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator<= with UInt16x3
    UInt16x3_operator_lte_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_lte_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_lte_UInt16x3.name = UInt16x3_operator_lte_UInt16x3_name;
    UInt16x3_operator_lte_UInt16x3.backendIndex = 730;
    UInt16x3_operator_lte_UInt16x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt16x3_operator_lte_UInt16x3.parameters = UInt16x3_operator_lte_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_lte_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_lte_UInt16x3)->signature = "operator<=(u16x3) b8x3"_c;
    Symbol::Resolved(&UInt16x3_operator_lte_UInt16x3)->name = "operator<=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lte_UInt16x3)->nameWithVarNames = "operator<=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lte_UInt16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator> with UInt16x3
    UInt16x3_operator_gt_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_gt_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_gt_UInt16x3.name = UInt16x3_operator_gt_UInt16x3_name;
    UInt16x3_operator_gt_UInt16x3.backendIndex = 731;
    UInt16x3_operator_gt_UInt16x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt16x3_operator_gt_UInt16x3.parameters = UInt16x3_operator_gt_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_gt_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_gt_UInt16x3)->signature = "operator>(u16x3) b8x3"_c;
    Symbol::Resolved(&UInt16x3_operator_gt_UInt16x3)->name = "operator>(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_gt_UInt16x3)->nameWithVarNames = "operator>(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_gt_UInt16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator>= with UInt16x3
    UInt16x3_operator_gte_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_gte_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_gte_UInt16x3.name = UInt16x3_operator_gte_UInt16x3_name;
    UInt16x3_operator_gte_UInt16x3.backendIndex = 732;
    UInt16x3_operator_gte_UInt16x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt16x3_operator_gte_UInt16x3.parameters = UInt16x3_operator_gte_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_gte_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_gte_UInt16x3)->signature = "operator>=(u16x3) b8x3"_c;
    Symbol::Resolved(&UInt16x3_operator_gte_UInt16x3)->name = "operator>=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_gte_UInt16x3)->nameWithVarNames = "operator>=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_gte_UInt16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator== with UInt16x3
    UInt16x3_operator_eq_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_eq_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_eq_UInt16x3.name = UInt16x3_operator_eq_UInt16x3_name;
    UInt16x3_operator_eq_UInt16x3.backendIndex = 733;
    UInt16x3_operator_eq_UInt16x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt16x3_operator_eq_UInt16x3.parameters = UInt16x3_operator_eq_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_eq_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_eq_UInt16x3)->signature = "operator==(u16x3) b8x3"_c;
    Symbol::Resolved(&UInt16x3_operator_eq_UInt16x3)->name = "operator==(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_eq_UInt16x3)->nameWithVarNames = "operator==(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_eq_UInt16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator!= with UInt16x3
    UInt16x3_operator_neq_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_neq_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_neq_UInt16x3.name = UInt16x3_operator_neq_UInt16x3_name;
    UInt16x3_operator_neq_UInt16x3.backendIndex = 734;
    UInt16x3_operator_neq_UInt16x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt16x3_operator_neq_UInt16x3.parameters = UInt16x3_operator_neq_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_neq_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_neq_UInt16x3)->signature = "operator!=(u16x3) b8x3"_c;
    Symbol::Resolved(&UInt16x3_operator_neq_UInt16x3)->name = "operator!=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_neq_UInt16x3)->nameWithVarNames = "operator!=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_neq_UInt16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator* with Float16
    UInt16x3_operator_scale_Float16_arg.name = "arg"_c;
    UInt16x3_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt16x3_operator_scale_Float16.name = UInt16x3_operator_scale_Float16_name;
    UInt16x3_operator_scale_Float16.backendIndex = 735;
    UInt16x3_operator_scale_Float16.returnType = Type::FullType { Float16x3Type.name };
    UInt16x3_operator_scale_Float16.parameters = UInt16x3_operator_scale_Float16_args;
    Symbol::Resolved(&UInt16x3_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x3_operator_scale_Float16)->signature = "operator*(f16) f16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_Float16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with UInt16
    UInt16x3_operator_scale_UInt16_arg.name = "arg"_c;
    UInt16x3_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16x3_operator_scale_UInt16.name = UInt16x3_operator_scale_UInt16_name;
    UInt16x3_operator_scale_UInt16.backendIndex = 736;
    UInt16x3_operator_scale_UInt16.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_scale_UInt16.parameters = UInt16x3_operator_scale_UInt16_args;
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16)->signature = "operator*(u16) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16)->returnTypeSymbol = &UInt16x3Type;

    /// operator* with Int16
    UInt16x3_operator_scale_Int16_arg.name = "arg"_c;
    UInt16x3_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16x3_operator_scale_Int16.name = UInt16x3_operator_scale_Int16_name;
    UInt16x3_operator_scale_Int16.backendIndex = 737;
    UInt16x3_operator_scale_Int16.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_scale_Int16.parameters = UInt16x3_operator_scale_Int16_args;
    Symbol::Resolved(&UInt16x3_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x3_operator_scale_Int16)->signature = "operator*(i16) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_Int16)->returnTypeSymbol = &UInt16x3Type;

    /// operator| with UInt16x3
    UInt16x3_operator_or_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_or_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_or_UInt16x3.name = UInt16x3_operator_or_UInt16x3_name;
    UInt16x3_operator_or_UInt16x3.backendIndex = 738;
    UInt16x3_operator_or_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_or_UInt16x3.parameters = UInt16x3_operator_or_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_or_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_or_UInt16x3)->signature = "operator|(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_or_UInt16x3)->name = "operator|(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_or_UInt16x3)->nameWithVarNames = "operator|(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_or_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator& with UInt16x3
    UInt16x3_operator_and_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_and_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_and_UInt16x3.name = UInt16x3_operator_and_UInt16x3_name;
    UInt16x3_operator_and_UInt16x3.backendIndex = 739;
    UInt16x3_operator_and_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_and_UInt16x3.parameters = UInt16x3_operator_and_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_and_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_and_UInt16x3)->signature = "operator&(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_and_UInt16x3)->name = "operator&(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_and_UInt16x3)->nameWithVarNames = "operator&(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_and_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator^ with UInt16x3
    UInt16x3_operator_xor_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_xor_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_xor_UInt16x3.name = UInt16x3_operator_xor_UInt16x3_name;
    UInt16x3_operator_xor_UInt16x3.backendIndex = 740;
    UInt16x3_operator_xor_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_xor_UInt16x3.parameters = UInt16x3_operator_xor_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_xor_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_xor_UInt16x3)->signature = "operator^(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_xor_UInt16x3)->name = "operator^(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_xor_UInt16x3)->nameWithVarNames = "operator^(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_xor_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator<< with UInt16x3
    UInt16x3_operator_lsh_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_lsh_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_lsh_UInt16x3.name = UInt16x3_operator_lsh_UInt16x3_name;
    UInt16x3_operator_lsh_UInt16x3.backendIndex = 741;
    UInt16x3_operator_lsh_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_lsh_UInt16x3.parameters = UInt16x3_operator_lsh_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_lsh_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_lsh_UInt16x3)->signature = "operator<<(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_lsh_UInt16x3)->name = "operator<<(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lsh_UInt16x3)->nameWithVarNames = "operator<<(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lsh_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator>> with UInt16x3
    UInt16x3_operator_rsh_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_rsh_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_rsh_UInt16x3.name = UInt16x3_operator_rsh_UInt16x3_name;
    UInt16x3_operator_rsh_UInt16x3.backendIndex = 742;
    UInt16x3_operator_rsh_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_rsh_UInt16x3.parameters = UInt16x3_operator_rsh_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_rsh_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_rsh_UInt16x3)->signature = "operator>>(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_rsh_UInt16x3)->name = "operator>>(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_rsh_UInt16x3)->nameWithVarNames = "operator>>(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_rsh_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator|= with UInt16x3
    UInt16x3_operator_orasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_orasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_orasg_UInt16x3.name = UInt16x3_operator_orasg_UInt16x3_name;
    UInt16x3_operator_orasg_UInt16x3.backendIndex = 743;
    UInt16x3_operator_orasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_orasg_UInt16x3.parameters = UInt16x3_operator_orasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_orasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_orasg_UInt16x3)->signature = "operator|=(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_orasg_UInt16x3)->name = "operator|=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_orasg_UInt16x3)->nameWithVarNames = "operator|=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_orasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator&= with UInt16x3
    UInt16x3_operator_andasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_andasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_andasg_UInt16x3.name = UInt16x3_operator_andasg_UInt16x3_name;
    UInt16x3_operator_andasg_UInt16x3.backendIndex = 744;
    UInt16x3_operator_andasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_andasg_UInt16x3.parameters = UInt16x3_operator_andasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_andasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_andasg_UInt16x3)->signature = "operator&=(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_andasg_UInt16x3)->name = "operator&=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_andasg_UInt16x3)->nameWithVarNames = "operator&=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_andasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator^= with UInt16x3
    UInt16x3_operator_xorasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_xorasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_xorasg_UInt16x3.name = UInt16x3_operator_xorasg_UInt16x3_name;
    UInt16x3_operator_xorasg_UInt16x3.backendIndex = 745;
    UInt16x3_operator_xorasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_xorasg_UInt16x3.parameters = UInt16x3_operator_xorasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_xorasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_xorasg_UInt16x3)->signature = "operator^=(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_xorasg_UInt16x3)->name = "operator^=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_xorasg_UInt16x3)->nameWithVarNames = "operator^=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_xorasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator<<= with UInt16x3
    UInt16x3_operator_lshasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_lshasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_lshasg_UInt16x3.name = UInt16x3_operator_lshasg_UInt16x3_name;
    UInt16x3_operator_lshasg_UInt16x3.backendIndex = 746;
    UInt16x3_operator_lshasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_lshasg_UInt16x3.parameters = UInt16x3_operator_lshasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_lshasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_lshasg_UInt16x3)->signature = "operator<<=(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_lshasg_UInt16x3)->name = "operator<<=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lshasg_UInt16x3)->nameWithVarNames = "operator<<=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lshasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator>>= with UInt16x3
    UInt16x3_operator_rhsasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_rhsasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_rhsasg_UInt16x3.name = UInt16x3_operator_rhsasg_UInt16x3_name;
    UInt16x3_operator_rhsasg_UInt16x3.backendIndex = 747;
    UInt16x3_operator_rhsasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_rhsasg_UInt16x3.parameters = UInt16x3_operator_rhsasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_rhsasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_rhsasg_UInt16x3)->signature = "operator>>=(u16x3) u16x3"_c;
    Symbol::Resolved(&UInt16x3_operator_rhsasg_UInt16x3)->name = "operator>>=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_rhsasg_UInt16x3)->nameWithVarNames = "operator>>=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_rhsasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    this->scope.symbolLookup = UInt16x3_symbolLookup;
}
UInt16x3 UInt16x3Type;

/// operator[] with Int32
Variable Int16x3_operator_index_Int32_arg;
Function Int16x3_operator_index_Int32;
inline constexpr std::array Int16x3_operator_index_Int32_args = { &Int16x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int16x3_operator_index_UInt32_arg;
Function Int16x3_operator_index_UInt32;
inline constexpr std::array Int16x3_operator_index_UInt32_args = { &Int16x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int16x3_operator_index_Int16_arg;
Function Int16x3_operator_index_Int16;
inline constexpr std::array Int16x3_operator_index_Int16_args = { &Int16x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int16x3_operator_index_UInt16_arg;
Function Int16x3_operator_index_UInt16;
inline constexpr std::array Int16x3_operator_index_UInt16_args = { &Int16x3_operator_index_UInt16_arg };

/// operator+ with Int16x3
Variable Int16x3_operator_add_Int16x3_arg;
Function Int16x3_operator_add_Int16x3;
inline constexpr std::array Int16x3_operator_add_Int16x3_args = { &Int16x3_operator_add_Int16x3_arg };

/// operator- with Int16x3
Variable Int16x3_operator_sub_Int16x3_arg;
Function Int16x3_operator_sub_Int16x3;
inline constexpr std::array Int16x3_operator_sub_Int16x3_args = { &Int16x3_operator_sub_Int16x3_arg };

/// operator* with Int16x3
Variable Int16x3_operator_mul_Int16x3_arg;
Function Int16x3_operator_mul_Int16x3;
inline constexpr std::array Int16x3_operator_mul_Int16x3_args = { &Int16x3_operator_mul_Int16x3_arg };

/// operator/ with Int16x3
Variable Int16x3_operator_div_Int16x3_arg;
Function Int16x3_operator_div_Int16x3;
inline constexpr std::array Int16x3_operator_div_Int16x3_args = { &Int16x3_operator_div_Int16x3_arg };

/// operator% with Int16x3
Variable Int16x3_operator_mod_Int16x3_arg;
Function Int16x3_operator_mod_Int16x3;
inline constexpr std::array Int16x3_operator_mod_Int16x3_args = { &Int16x3_operator_mod_Int16x3_arg };

/// operator+= with Int16x3
Variable Int16x3_operator_addasg_Int16x3_arg;
Function Int16x3_operator_addasg_Int16x3;
inline constexpr std::array Int16x3_operator_addasg_Int16x3_args = { &Int16x3_operator_addasg_Int16x3_arg };

/// operator-= with Int16x3
Variable Int16x3_operator_subasg_Int16x3_arg;
Function Int16x3_operator_subasg_Int16x3;
inline constexpr std::array Int16x3_operator_subasg_Int16x3_args = { &Int16x3_operator_subasg_Int16x3_arg };

/// operator*= with Int16x3
Variable Int16x3_operator_mulasg_Int16x3_arg;
Function Int16x3_operator_mulasg_Int16x3;
inline constexpr std::array Int16x3_operator_mulasg_Int16x3_args = { &Int16x3_operator_mulasg_Int16x3_arg };

/// operator/= with Int16x3
Variable Int16x3_operator_divasg_Int16x3_arg;
Function Int16x3_operator_divasg_Int16x3;
inline constexpr std::array Int16x3_operator_divasg_Int16x3_args = { &Int16x3_operator_divasg_Int16x3_arg };

/// operator< with Int16x3
Variable Int16x3_operator_lt_Int16x3_arg;
Function Int16x3_operator_lt_Int16x3;
inline constexpr std::array Int16x3_operator_lt_Int16x3_args = { &Int16x3_operator_lt_Int16x3_arg };

/// operator<= with Int16x3
Variable Int16x3_operator_lte_Int16x3_arg;
Function Int16x3_operator_lte_Int16x3;
inline constexpr std::array Int16x3_operator_lte_Int16x3_args = { &Int16x3_operator_lte_Int16x3_arg };

/// operator> with Int16x3
Variable Int16x3_operator_gt_Int16x3_arg;
Function Int16x3_operator_gt_Int16x3;
inline constexpr std::array Int16x3_operator_gt_Int16x3_args = { &Int16x3_operator_gt_Int16x3_arg };

/// operator>= with Int16x3
Variable Int16x3_operator_gte_Int16x3_arg;
Function Int16x3_operator_gte_Int16x3;
inline constexpr std::array Int16x3_operator_gte_Int16x3_args = { &Int16x3_operator_gte_Int16x3_arg };

/// operator== with Int16x3
Variable Int16x3_operator_eq_Int16x3_arg;
Function Int16x3_operator_eq_Int16x3;
inline constexpr std::array Int16x3_operator_eq_Int16x3_args = { &Int16x3_operator_eq_Int16x3_arg };

/// operator!= with Int16x3
Variable Int16x3_operator_neq_Int16x3_arg;
Function Int16x3_operator_neq_Int16x3;
inline constexpr std::array Int16x3_operator_neq_Int16x3_args = { &Int16x3_operator_neq_Int16x3_arg };

/// operator* with Float16
Variable Int16x3_operator_scale_Float16_arg;
Function Int16x3_operator_scale_Float16;
inline constexpr std::array Int16x3_operator_scale_Float16_args = { &Int16x3_operator_scale_Float16_arg };

/// operator* with UInt16
Variable Int16x3_operator_scale_UInt16_arg;
Function Int16x3_operator_scale_UInt16;
inline constexpr std::array Int16x3_operator_scale_UInt16_args = { &Int16x3_operator_scale_UInt16_arg };

/// operator* with Int16
Variable Int16x3_operator_scale_Int16_arg;
Function Int16x3_operator_scale_Int16;
inline constexpr std::array Int16x3_operator_scale_Int16_args = { &Int16x3_operator_scale_Int16_arg };

/// operator| with Int16x3
Variable Int16x3_operator_or_Int16x3_arg;
Function Int16x3_operator_or_Int16x3;
inline constexpr std::array Int16x3_operator_or_Int16x3_args = { &Int16x3_operator_or_Int16x3_arg };

/// operator& with Int16x3
Variable Int16x3_operator_and_Int16x3_arg;
Function Int16x3_operator_and_Int16x3;
inline constexpr std::array Int16x3_operator_and_Int16x3_args = { &Int16x3_operator_and_Int16x3_arg };

/// operator^ with Int16x3
Variable Int16x3_operator_xor_Int16x3_arg;
Function Int16x3_operator_xor_Int16x3;
inline constexpr std::array Int16x3_operator_xor_Int16x3_args = { &Int16x3_operator_xor_Int16x3_arg };

/// operator<< with Int16x3
Variable Int16x3_operator_lsh_Int16x3_arg;
Function Int16x3_operator_lsh_Int16x3;
inline constexpr std::array Int16x3_operator_lsh_Int16x3_args = { &Int16x3_operator_lsh_Int16x3_arg };

/// operator>> with Int16x3
Variable Int16x3_operator_rsh_Int16x3_arg;
Function Int16x3_operator_rsh_Int16x3;
inline constexpr std::array Int16x3_operator_rsh_Int16x3_args = { &Int16x3_operator_rsh_Int16x3_arg };

/// operator|= with Int16x3
Variable Int16x3_operator_orasg_Int16x3_arg;
Function Int16x3_operator_orasg_Int16x3;
inline constexpr std::array Int16x3_operator_orasg_Int16x3_args = { &Int16x3_operator_orasg_Int16x3_arg };

/// operator&= with Int16x3
Variable Int16x3_operator_andasg_Int16x3_arg;
Function Int16x3_operator_andasg_Int16x3;
inline constexpr std::array Int16x3_operator_andasg_Int16x3_args = { &Int16x3_operator_andasg_Int16x3_arg };

/// operator^= with Int16x3
Variable Int16x3_operator_xorasg_Int16x3_arg;
Function Int16x3_operator_xorasg_Int16x3;
inline constexpr std::array Int16x3_operator_xorasg_Int16x3_args = { &Int16x3_operator_xorasg_Int16x3_arg };

/// operator<<= with Int16x3
Variable Int16x3_operator_lshasg_Int16x3_arg;
Function Int16x3_operator_lshasg_Int16x3;
inline constexpr std::array Int16x3_operator_lshasg_Int16x3_args = { &Int16x3_operator_lshasg_Int16x3_arg };

/// operator>>= with Int16x3
Variable Int16x3_operator_rhsasg_Int16x3_arg;
Function Int16x3_operator_rhsasg_Int16x3;
inline constexpr std::array Int16x3_operator_rhsasg_Int16x3_args = { &Int16x3_operator_rhsasg_Int16x3_arg };

static constexpr StaticMap<HashString, Symbol*, 304> Int16x3_symbolLookup = {
    std::pair{ "bgg"_h, &Int16x3Type },
    std::pair{ "bgb"_h, &Int16x3Type },
    std::pair{ "bgr"_h, &Int16x3Type },
    std::pair{ "bbg"_h, &Int16x3Type },
    std::pair{ "bbb"_h, &Int16x3Type },
    std::pair{ "bbr"_h, &Int16x3Type },
    std::pair{ "brr"_h, &Int16x3Type },
    std::pair{ "brg"_h, &Int16x3Type },
    std::pair{ "brb"_h, &Int16x3Type },
    std::pair{ "operator+(i16x3)"_h, &Int16x3_operator_add_Int16x3 },
    std::pair{ "gg"_h, &Int16x2Type },
    std::pair{ "gb"_h, &Int16x2Type },
    std::pair{ "gr"_h, &Int16x2Type },
    std::pair{ "bg"_h, &Int16x2Type },
    std::pair{ "bb"_h, &Int16x2Type },
    std::pair{ "br"_h, &Int16x2Type },
    std::pair{ "rr"_h, &Int16x2Type },
    std::pair{ "rg"_h, &Int16x2Type },
    std::pair{ "rb"_h, &Int16x2Type },
    std::pair{ "yx"_h, &Int16x2Type },
    std::pair{ "yy"_h, &Int16x2Type },
    std::pair{ "yz"_h, &Int16x2Type },
    std::pair{ "xz"_h, &Int16x2Type },
    std::pair{ "xy"_h, &Int16x2Type },
    std::pair{ "xx"_h, &Int16x2Type },
    std::pair{ "zy"_h, &Int16x2Type },
    std::pair{ "zx"_h, &Int16x2Type },
    std::pair{ "zz"_h, &Int16x2Type },
    std::pair{ "operator[](i16)"_h, &Int16x3_operator_index_Int16 },
    std::pair{ "operator>>=(i16x3)"_h, &Int16x3_operator_rhsasg_Int16x3 },
    std::pair{ "operator<<=(i16x3)"_h, &Int16x3_operator_lshasg_Int16x3 },
    std::pair{ "operator%(i16x3)"_h, &Int16x3_operator_mod_Int16x3 },
    std::pair{ "operator&(i16x3)"_h, &Int16x3_operator_and_Int16x3 },
    std::pair{ "operator*(u16)"_h, &Int16x3_operator_scale_UInt16 },
    std::pair{ "brrg"_h, &Int16x4Type },
    std::pair{ "brrb"_h, &Int16x4Type },
    std::pair{ "brrr"_h, &Int16x4Type },
    std::pair{ "brgr"_h, &Int16x4Type },
    std::pair{ "brgg"_h, &Int16x4Type },
    std::pair{ "brgb"_h, &Int16x4Type },
    std::pair{ "brbr"_h, &Int16x4Type },
    std::pair{ "brbg"_h, &Int16x4Type },
    std::pair{ "brbb"_h, &Int16x4Type },
    std::pair{ "operator/=(i16x3)"_h, &Int16x3_operator_divasg_Int16x3 },
    std::pair{ "operator^"_h, &Int16x3_operator_xor_Int16x3 },
    std::pair{ "operator|"_h, &Int16x3_operator_or_Int16x3 },
    std::pair{ "operator<"_h, &Int16x3_operator_lt_Int16x3 },
    std::pair{ "operator>"_h, &Int16x3_operator_gt_Int16x3 },
    std::pair{ "operator-"_h, &Int16x3_operator_sub_Int16x3 },
    std::pair{ "operator/"_h, &Int16x3_operator_div_Int16x3 },
    std::pair{ "operator+"_h, &Int16x3_operator_add_Int16x3 },
    std::pair{ "operator*"_h, &Int16x3_operator_mul_Int16x3 },
    std::pair{ "operator*"_h, &Int16x3_operator_scale_Float16 },
    std::pair{ "operator*"_h, &Int16x3_operator_scale_UInt16 },
    std::pair{ "operator*"_h, &Int16x3_operator_scale_Int16 },
    std::pair{ "operator%"_h, &Int16x3_operator_mod_Int16x3 },
    std::pair{ "operator&"_h, &Int16x3_operator_and_Int16x3 },
    std::pair{ "xzzz"_h, &Int16x4Type },
    std::pair{ "xzzy"_h, &Int16x4Type },
    std::pair{ "xzzx"_h, &Int16x4Type },
    std::pair{ "xzyz"_h, &Int16x4Type },
    std::pair{ "xzyx"_h, &Int16x4Type },
    std::pair{ "xzyy"_h, &Int16x4Type },
    std::pair{ "xzxy"_h, &Int16x4Type },
    std::pair{ "xzxx"_h, &Int16x4Type },
    std::pair{ "xzxz"_h, &Int16x4Type },
    std::pair{ "yxxx"_h, &Int16x4Type },
    std::pair{ "yxxy"_h, &Int16x4Type },
    std::pair{ "yxxz"_h, &Int16x4Type },
    std::pair{ "yxyz"_h, &Int16x4Type },
    std::pair{ "yxyy"_h, &Int16x4Type },
    std::pair{ "yxyx"_h, &Int16x4Type },
    std::pair{ "yxzz"_h, &Int16x4Type },
    std::pair{ "yxzx"_h, &Int16x4Type },
    std::pair{ "yxzy"_h, &Int16x4Type },
    std::pair{ "xyzx"_h, &Int16x4Type },
    std::pair{ "xyzy"_h, &Int16x4Type },
    std::pair{ "xyzz"_h, &Int16x4Type },
    std::pair{ "xyxz"_h, &Int16x4Type },
    std::pair{ "xyxx"_h, &Int16x4Type },
    std::pair{ "xyxy"_h, &Int16x4Type },
    std::pair{ "xyyy"_h, &Int16x4Type },
    std::pair{ "xyyx"_h, &Int16x4Type },
    std::pair{ "xyyz"_h, &Int16x4Type },
    std::pair{ "ggrr"_h, &Int16x4Type },
    std::pair{ "ggrb"_h, &Int16x4Type },
    std::pair{ "ggrg"_h, &Int16x4Type },
    std::pair{ "ggbb"_h, &Int16x4Type },
    std::pair{ "ggbg"_h, &Int16x4Type },
    std::pair{ "ggbr"_h, &Int16x4Type },
    std::pair{ "gggr"_h, &Int16x4Type },
    std::pair{ "gggg"_h, &Int16x4Type },
    std::pair{ "gggb"_h, &Int16x4Type },
    std::pair{ "yyzz"_h, &Int16x4Type },
    std::pair{ "yyzy"_h, &Int16x4Type },
    std::pair{ "yyzx"_h, &Int16x4Type },
    std::pair{ "yyyz"_h, &Int16x4Type },
    std::pair{ "yyyx"_h, &Int16x4Type },
    std::pair{ "yyyy"_h, &Int16x4Type },
    std::pair{ "yyxy"_h, &Int16x4Type },
    std::pair{ "yyxx"_h, &Int16x4Type },
    std::pair{ "yyxz"_h, &Int16x4Type },
    std::pair{ "xxyx"_h, &Int16x4Type },
    std::pair{ "xxyy"_h, &Int16x4Type },
    std::pair{ "xxyz"_h, &Int16x4Type },
    std::pair{ "xxxz"_h, &Int16x4Type },
    std::pair{ "xxxy"_h, &Int16x4Type },
    std::pair{ "xxxx"_h, &Int16x4Type },
    std::pair{ "xxzy"_h, &Int16x4Type },
    std::pair{ "xxzx"_h, &Int16x4Type },
    std::pair{ "xxzz"_h, &Int16x4Type },
    std::pair{ "rgrg"_h, &Int16x4Type },
    std::pair{ "rgrb"_h, &Int16x4Type },
    std::pair{ "rgrr"_h, &Int16x4Type },
    std::pair{ "rggb"_h, &Int16x4Type },
    std::pair{ "rggg"_h, &Int16x4Type },
    std::pair{ "rggr"_h, &Int16x4Type },
    std::pair{ "rgbr"_h, &Int16x4Type },
    std::pair{ "rgbg"_h, &Int16x4Type },
    std::pair{ "rgbb"_h, &Int16x4Type },
    std::pair{ "operator>(i16x3)"_h, &Int16x3_operator_gt_Int16x3 },
    std::pair{ "yzzx"_h, &Int16x4Type },
    std::pair{ "yzzy"_h, &Int16x4Type },
    std::pair{ "yzzz"_h, &Int16x4Type },
    std::pair{ "yzxz"_h, &Int16x4Type },
    std::pair{ "yzxx"_h, &Int16x4Type },
    std::pair{ "yzxy"_h, &Int16x4Type },
    std::pair{ "yzyy"_h, &Int16x4Type },
    std::pair{ "yzyx"_h, &Int16x4Type },
    std::pair{ "yzyz"_h, &Int16x4Type },
    std::pair{ "operator<<(i16x3)"_h, &Int16x3_operator_lsh_Int16x3 },
    std::pair{ "operator^=(i16x3)"_h, &Int16x3_operator_xorasg_Int16x3 },
    std::pair{ "gbgr"_h, &Int16x4Type },
    std::pair{ "gbgb"_h, &Int16x4Type },
    std::pair{ "gbgg"_h, &Int16x4Type },
    std::pair{ "gbbb"_h, &Int16x4Type },
    std::pair{ "gbbg"_h, &Int16x4Type },
    std::pair{ "gbbr"_h, &Int16x4Type },
    std::pair{ "gbrr"_h, &Int16x4Type },
    std::pair{ "gbrb"_h, &Int16x4Type },
    std::pair{ "gbrg"_h, &Int16x4Type },
    std::pair{ "operator==(i16x3)"_h, &Int16x3_operator_eq_Int16x3 },
    std::pair{ "operator<(i16x3)"_h, &Int16x3_operator_lt_Int16x3 },
    std::pair{ "operator*=(i16x3)"_h, &Int16x3_operator_mulasg_Int16x3 },
    std::pair{ "operator&=(i16x3)"_h, &Int16x3_operator_andasg_Int16x3 },
    std::pair{ "rbrg"_h, &Int16x4Type },
    std::pair{ "rbrb"_h, &Int16x4Type },
    std::pair{ "rbrr"_h, &Int16x4Type },
    std::pair{ "rbgr"_h, &Int16x4Type },
    std::pair{ "rbgg"_h, &Int16x4Type },
    std::pair{ "rbgb"_h, &Int16x4Type },
    std::pair{ "rbbr"_h, &Int16x4Type },
    std::pair{ "rbbg"_h, &Int16x4Type },
    std::pair{ "rbbb"_h, &Int16x4Type },
    std::pair{ "zyxx"_h, &Int16x4Type },
    std::pair{ "zyxy"_h, &Int16x4Type },
    std::pair{ "zyxz"_h, &Int16x4Type },
    std::pair{ "zyyz"_h, &Int16x4Type },
    std::pair{ "zyyy"_h, &Int16x4Type },
    std::pair{ "zyyx"_h, &Int16x4Type },
    std::pair{ "zyzz"_h, &Int16x4Type },
    std::pair{ "zyzx"_h, &Int16x4Type },
    std::pair{ "zyzy"_h, &Int16x4Type },
    std::pair{ "bggr"_h, &Int16x4Type },
    std::pair{ "bggb"_h, &Int16x4Type },
    std::pair{ "bggg"_h, &Int16x4Type },
    std::pair{ "bgbg"_h, &Int16x4Type },
    std::pair{ "bgbb"_h, &Int16x4Type },
    std::pair{ "bgbr"_h, &Int16x4Type },
    std::pair{ "bgrr"_h, &Int16x4Type },
    std::pair{ "bgrg"_h, &Int16x4Type },
    std::pair{ "bgrb"_h, &Int16x4Type },
    std::pair{ "rrg"_h, &Int16x3Type },
    std::pair{ "rrb"_h, &Int16x3Type },
    std::pair{ "rrr"_h, &Int16x3Type },
    std::pair{ "rgr"_h, &Int16x3Type },
    std::pair{ "rgg"_h, &Int16x3Type },
    std::pair{ "rgb"_h, &Int16x3Type },
    std::pair{ "rbr"_h, &Int16x3Type },
    std::pair{ "rbg"_h, &Int16x3Type },
    std::pair{ "rbb"_h, &Int16x3Type },
    std::pair{ "operator[](u32)"_h, &Int16x3_operator_index_UInt32 },
    std::pair{ "operator^(i16x3)"_h, &Int16x3_operator_xor_Int16x3 },
    std::pair{ "operator/(i16x3)"_h, &Int16x3_operator_div_Int16x3 },
    std::pair{ "operator<<="_h, &Int16x3_operator_lshasg_Int16x3 },
    std::pair{ "zxzz"_h, &Int16x4Type },
    std::pair{ "zxzy"_h, &Int16x4Type },
    std::pair{ "zxzx"_h, &Int16x4Type },
    std::pair{ "zxyz"_h, &Int16x4Type },
    std::pair{ "zxyx"_h, &Int16x4Type },
    std::pair{ "zxyy"_h, &Int16x4Type },
    std::pair{ "zxxy"_h, &Int16x4Type },
    std::pair{ "zxxx"_h, &Int16x4Type },
    std::pair{ "zxxz"_h, &Int16x4Type },
    std::pair{ "operator-(i16x3)"_h, &Int16x3_operator_sub_Int16x3 },
    std::pair{ "operator[](u16)"_h, &Int16x3_operator_index_UInt16 },
    std::pair{ "operator>>="_h, &Int16x3_operator_rhsasg_Int16x3 },
    std::pair{ "zzyx"_h, &Int16x4Type },
    std::pair{ "zzyy"_h, &Int16x4Type },
    std::pair{ "zzyz"_h, &Int16x4Type },
    std::pair{ "zzxz"_h, &Int16x4Type },
    std::pair{ "zzxy"_h, &Int16x4Type },
    std::pair{ "zzxx"_h, &Int16x4Type },
    std::pair{ "zzzy"_h, &Int16x4Type },
    std::pair{ "zzzx"_h, &Int16x4Type },
    std::pair{ "zzzz"_h, &Int16x4Type },
    std::pair{ "operator*(f16)"_h, &Int16x3_operator_scale_Float16 },
    std::pair{ "operator*(i16x3)"_h, &Int16x3_operator_mul_Int16x3 },
    std::pair{ "g"_h, &Int16Type },
    std::pair{ "b"_h, &Int16Type },
    std::pair{ "r"_h, &Int16Type },
    std::pair{ "y"_h, &Int16Type },
    std::pair{ "x"_h, &Int16Type },
    std::pair{ "z"_h, &Int16Type },
    std::pair{ "bbgg"_h, &Int16x4Type },
    std::pair{ "bbgb"_h, &Int16x4Type },
    std::pair{ "bbgr"_h, &Int16x4Type },
    std::pair{ "bbbg"_h, &Int16x4Type },
    std::pair{ "bbbb"_h, &Int16x4Type },
    std::pair{ "bbbr"_h, &Int16x4Type },
    std::pair{ "bbrr"_h, &Int16x4Type },
    std::pair{ "bbrg"_h, &Int16x4Type },
    std::pair{ "bbrb"_h, &Int16x4Type },
    std::pair{ "yxx"_h, &Int16x3Type },
    std::pair{ "yxy"_h, &Int16x3Type },
    std::pair{ "yxz"_h, &Int16x3Type },
    std::pair{ "yyz"_h, &Int16x3Type },
    std::pair{ "yyy"_h, &Int16x3Type },
    std::pair{ "yyx"_h, &Int16x3Type },
    std::pair{ "yzz"_h, &Int16x3Type },
    std::pair{ "yzx"_h, &Int16x3Type },
    std::pair{ "yzy"_h, &Int16x3Type },
    std::pair{ "operator-=(i16x3)"_h, &Int16x3_operator_subasg_Int16x3 },
    std::pair{ "operator>>(i16x3)"_h, &Int16x3_operator_rsh_Int16x3 },
    std::pair{ "xzz"_h, &Int16x3Type },
    std::pair{ "xzy"_h, &Int16x3Type },
    std::pair{ "xzx"_h, &Int16x3Type },
    std::pair{ "xyz"_h, &Int16x3Type },
    std::pair{ "xyx"_h, &Int16x3Type },
    std::pair{ "xyy"_h, &Int16x3Type },
    std::pair{ "xxy"_h, &Int16x3Type },
    std::pair{ "xxx"_h, &Int16x3Type },
    std::pair{ "xxz"_h, &Int16x3Type },
    std::pair{ "operator*(i16)"_h, &Int16x3_operator_scale_Int16 },
    std::pair{ "operator<=(i16x3)"_h, &Int16x3_operator_lte_Int16x3 },
    std::pair{ "operator|(i16x3)"_h, &Int16x3_operator_or_Int16x3 },
    std::pair{ "zyx"_h, &Int16x3Type },
    std::pair{ "zyy"_h, &Int16x3Type },
    std::pair{ "zyz"_h, &Int16x3Type },
    std::pair{ "zxz"_h, &Int16x3Type },
    std::pair{ "zxy"_h, &Int16x3Type },
    std::pair{ "zxx"_h, &Int16x3Type },
    std::pair{ "zzy"_h, &Int16x3Type },
    std::pair{ "zzx"_h, &Int16x3Type },
    std::pair{ "zzz"_h, &Int16x3Type },
    std::pair{ "operator>=(i16x3)"_h, &Int16x3_operator_gte_Int16x3 },
    std::pair{ "ggr"_h, &Int16x3Type },
    std::pair{ "ggb"_h, &Int16x3Type },
    std::pair{ "ggg"_h, &Int16x3Type },
    std::pair{ "gbg"_h, &Int16x3Type },
    std::pair{ "gbb"_h, &Int16x3Type },
    std::pair{ "gbr"_h, &Int16x3Type },
    std::pair{ "grr"_h, &Int16x3Type },
    std::pair{ "grg"_h, &Int16x3Type },
    std::pair{ "grb"_h, &Int16x3Type },
    std::pair{ "operator+=(i16x3)"_h, &Int16x3_operator_addasg_Int16x3 },
    std::pair{ "operator!=(i16x3)"_h, &Int16x3_operator_neq_Int16x3 },
    std::pair{ "operator^="_h, &Int16x3_operator_xorasg_Int16x3 },
    std::pair{ "operator[]"_h, &Int16x3_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Int16x3_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Int16x3_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Int16x3_operator_index_UInt16 },
    std::pair{ "operator|="_h, &Int16x3_operator_orasg_Int16x3 },
    std::pair{ "operator=="_h, &Int16x3_operator_eq_Int16x3 },
    std::pair{ "operator<="_h, &Int16x3_operator_lte_Int16x3 },
    std::pair{ "operator<<"_h, &Int16x3_operator_lsh_Int16x3 },
    std::pair{ "operator>="_h, &Int16x3_operator_gte_Int16x3 },
    std::pair{ "operator>>"_h, &Int16x3_operator_rsh_Int16x3 },
    std::pair{ "operator-="_h, &Int16x3_operator_subasg_Int16x3 },
    std::pair{ "operator/="_h, &Int16x3_operator_divasg_Int16x3 },
    std::pair{ "operator+="_h, &Int16x3_operator_addasg_Int16x3 },
    std::pair{ "operator*="_h, &Int16x3_operator_mulasg_Int16x3 },
    std::pair{ "operator&="_h, &Int16x3_operator_andasg_Int16x3 },
    std::pair{ "operator!="_h, &Int16x3_operator_neq_Int16x3 },
    std::pair{ "operator|=(i16x3)"_h, &Int16x3_operator_orasg_Int16x3 },
    std::pair{ "operator[](i32)"_h, &Int16x3_operator_index_Int32 },
    std::pair{ "grrb"_h, &Int16x4Type },
    std::pair{ "grrg"_h, &Int16x4Type },
    std::pair{ "grrr"_h, &Int16x4Type },
    std::pair{ "grgb"_h, &Int16x4Type },
    std::pair{ "grgg"_h, &Int16x4Type },
    std::pair{ "grgr"_h, &Int16x4Type },
    std::pair{ "grbr"_h, &Int16x4Type },
    std::pair{ "grbb"_h, &Int16x4Type },
    std::pair{ "grbg"_h, &Int16x4Type },
    std::pair{ "rrgg"_h, &Int16x4Type },
    std::pair{ "rrgb"_h, &Int16x4Type },
    std::pair{ "rrgr"_h, &Int16x4Type },
    std::pair{ "rrbg"_h, &Int16x4Type },
    std::pair{ "rrbb"_h, &Int16x4Type },
    std::pair{ "rrbr"_h, &Int16x4Type },
    std::pair{ "rrrr"_h, &Int16x4Type },
    std::pair{ "rrrg"_h, &Int16x4Type },
    std::pair{ "rrrb"_h, &Int16x4Type }
    };

Int16x3::Int16x3()
{
    this->name = "i16x3"_c;
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 6;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    /// operator[] with Int32
    Int16x3_operator_index_Int32_arg.name = "arg"_c;
    Int16x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int16x3_operator_index_Int32.name = Int16x3_operator_index_Int32_name;
    Int16x3_operator_index_Int32.backendIndex = 765;
    Int16x3_operator_index_Int32.returnType = Type::FullType { Int16Type.name };
    Int16x3_operator_index_Int32.parameters = Int16x3_operator_index_Int32_args;
    Symbol::Resolved(&Int16x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x3_operator_index_Int32)->signature = "operator[](i32) i16"_c;
    Symbol::Resolved(&Int16x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int16x3_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int16x3_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt32
    Int16x3_operator_index_UInt32_arg.name = "arg"_c;
    Int16x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int16x3_operator_index_UInt32.name = Int16x3_operator_index_UInt32_name;
    Int16x3_operator_index_UInt32.backendIndex = 766;
    Int16x3_operator_index_UInt32.returnType = Type::FullType { Int16Type.name };
    Int16x3_operator_index_UInt32.parameters = Int16x3_operator_index_UInt32_args;
    Symbol::Resolved(&Int16x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x3_operator_index_UInt32)->signature = "operator[](u32) i16"_c;
    Symbol::Resolved(&Int16x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int16x3_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int16x3_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    /// operator[] with Int16
    Int16x3_operator_index_Int16_arg.name = "arg"_c;
    Int16x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x3_operator_index_Int16.name = Int16x3_operator_index_Int16_name;
    Int16x3_operator_index_Int16.backendIndex = 767;
    Int16x3_operator_index_Int16.returnType = Type::FullType { Int16Type.name };
    Int16x3_operator_index_Int16.parameters = Int16x3_operator_index_Int16_args;
    Symbol::Resolved(&Int16x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_operator_index_Int16)->signature = "operator[](i16) i16"_c;
    Symbol::Resolved(&Int16x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int16x3_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int16x3_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt16
    Int16x3_operator_index_UInt16_arg.name = "arg"_c;
    Int16x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x3_operator_index_UInt16.name = Int16x3_operator_index_UInt16_name;
    Int16x3_operator_index_UInt16.backendIndex = 768;
    Int16x3_operator_index_UInt16.returnType = Type::FullType { Int16Type.name };
    Int16x3_operator_index_UInt16.parameters = Int16x3_operator_index_UInt16_args;
    Symbol::Resolved(&Int16x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x3_operator_index_UInt16)->signature = "operator[](u16) i16"_c;
    Symbol::Resolved(&Int16x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int16x3_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int16x3_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    /// operator+ with Int16x3
    Int16x3_operator_add_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_add_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_add_Int16x3.name = Int16x3_operator_add_Int16x3_name;
    Int16x3_operator_add_Int16x3.backendIndex = 769;
    Int16x3_operator_add_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_add_Int16x3.parameters = Int16x3_operator_add_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_add_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_add_Int16x3)->signature = "operator+(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_add_Int16x3)->name = "operator+(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_add_Int16x3)->nameWithVarNames = "operator+(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_add_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator- with Int16x3
    Int16x3_operator_sub_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_sub_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_sub_Int16x3.name = Int16x3_operator_sub_Int16x3_name;
    Int16x3_operator_sub_Int16x3.backendIndex = 770;
    Int16x3_operator_sub_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_sub_Int16x3.parameters = Int16x3_operator_sub_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_sub_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_sub_Int16x3)->signature = "operator-(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_sub_Int16x3)->name = "operator-(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_sub_Int16x3)->nameWithVarNames = "operator-(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_sub_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator* with Int16x3
    Int16x3_operator_mul_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_mul_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_mul_Int16x3.name = Int16x3_operator_mul_Int16x3_name;
    Int16x3_operator_mul_Int16x3.backendIndex = 771;
    Int16x3_operator_mul_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_mul_Int16x3.parameters = Int16x3_operator_mul_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_mul_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_mul_Int16x3)->signature = "operator*(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_mul_Int16x3)->name = "operator*(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_mul_Int16x3)->nameWithVarNames = "operator*(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_mul_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator/ with Int16x3
    Int16x3_operator_div_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_div_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_div_Int16x3.name = Int16x3_operator_div_Int16x3_name;
    Int16x3_operator_div_Int16x3.backendIndex = 772;
    Int16x3_operator_div_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_div_Int16x3.parameters = Int16x3_operator_div_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_div_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_div_Int16x3)->signature = "operator/(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_div_Int16x3)->name = "operator/(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_div_Int16x3)->nameWithVarNames = "operator/(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_div_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator% with Int16x3
    Int16x3_operator_mod_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_mod_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_mod_Int16x3.name = Int16x3_operator_mod_Int16x3_name;
    Int16x3_operator_mod_Int16x3.backendIndex = 773;
    Int16x3_operator_mod_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_mod_Int16x3.parameters = Int16x3_operator_mod_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_mod_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_mod_Int16x3)->signature = "operator%(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_mod_Int16x3)->name = "operator%(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_mod_Int16x3)->nameWithVarNames = "operator%(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_mod_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator+= with Int16x3
    Int16x3_operator_addasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_addasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_addasg_Int16x3.name = Int16x3_operator_addasg_Int16x3_name;
    Int16x3_operator_addasg_Int16x3.backendIndex = 774;
    Int16x3_operator_addasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_addasg_Int16x3.parameters = Int16x3_operator_addasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_addasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_addasg_Int16x3)->signature = "operator+=(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_addasg_Int16x3)->name = "operator+=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_addasg_Int16x3)->nameWithVarNames = "operator+=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_addasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator-= with Int16x3
    Int16x3_operator_subasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_subasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_subasg_Int16x3.name = Int16x3_operator_subasg_Int16x3_name;
    Int16x3_operator_subasg_Int16x3.backendIndex = 775;
    Int16x3_operator_subasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_subasg_Int16x3.parameters = Int16x3_operator_subasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_subasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_subasg_Int16x3)->signature = "operator-=(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_subasg_Int16x3)->name = "operator-=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_subasg_Int16x3)->nameWithVarNames = "operator-=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_subasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator*= with Int16x3
    Int16x3_operator_mulasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_mulasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_mulasg_Int16x3.name = Int16x3_operator_mulasg_Int16x3_name;
    Int16x3_operator_mulasg_Int16x3.backendIndex = 776;
    Int16x3_operator_mulasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_mulasg_Int16x3.parameters = Int16x3_operator_mulasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_mulasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_mulasg_Int16x3)->signature = "operator*=(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_mulasg_Int16x3)->name = "operator*=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_mulasg_Int16x3)->nameWithVarNames = "operator*=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_mulasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator/= with Int16x3
    Int16x3_operator_divasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_divasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_divasg_Int16x3.name = Int16x3_operator_divasg_Int16x3_name;
    Int16x3_operator_divasg_Int16x3.backendIndex = 777;
    Int16x3_operator_divasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_divasg_Int16x3.parameters = Int16x3_operator_divasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_divasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_divasg_Int16x3)->signature = "operator/=(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_divasg_Int16x3)->name = "operator/=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_divasg_Int16x3)->nameWithVarNames = "operator/=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_divasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator< with Int16x3
    Int16x3_operator_lt_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_lt_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_lt_Int16x3.name = Int16x3_operator_lt_Int16x3_name;
    Int16x3_operator_lt_Int16x3.backendIndex = 778;
    Int16x3_operator_lt_Int16x3.returnType = Type::FullType { Bool8x3Type.name };
    Int16x3_operator_lt_Int16x3.parameters = Int16x3_operator_lt_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_lt_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_lt_Int16x3)->signature = "operator<(i16x3) b8x3"_c;
    Symbol::Resolved(&Int16x3_operator_lt_Int16x3)->name = "operator<(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lt_Int16x3)->nameWithVarNames = "operator<(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lt_Int16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator<= with Int16x3
    Int16x3_operator_lte_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_lte_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_lte_Int16x3.name = Int16x3_operator_lte_Int16x3_name;
    Int16x3_operator_lte_Int16x3.backendIndex = 779;
    Int16x3_operator_lte_Int16x3.returnType = Type::FullType { Bool8x3Type.name };
    Int16x3_operator_lte_Int16x3.parameters = Int16x3_operator_lte_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_lte_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_lte_Int16x3)->signature = "operator<=(i16x3) b8x3"_c;
    Symbol::Resolved(&Int16x3_operator_lte_Int16x3)->name = "operator<=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lte_Int16x3)->nameWithVarNames = "operator<=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lte_Int16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator> with Int16x3
    Int16x3_operator_gt_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_gt_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_gt_Int16x3.name = Int16x3_operator_gt_Int16x3_name;
    Int16x3_operator_gt_Int16x3.backendIndex = 780;
    Int16x3_operator_gt_Int16x3.returnType = Type::FullType { Bool8x3Type.name };
    Int16x3_operator_gt_Int16x3.parameters = Int16x3_operator_gt_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_gt_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_gt_Int16x3)->signature = "operator>(i16x3) b8x3"_c;
    Symbol::Resolved(&Int16x3_operator_gt_Int16x3)->name = "operator>(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_gt_Int16x3)->nameWithVarNames = "operator>(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_gt_Int16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator>= with Int16x3
    Int16x3_operator_gte_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_gte_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_gte_Int16x3.name = Int16x3_operator_gte_Int16x3_name;
    Int16x3_operator_gte_Int16x3.backendIndex = 781;
    Int16x3_operator_gte_Int16x3.returnType = Type::FullType { Bool8x3Type.name };
    Int16x3_operator_gte_Int16x3.parameters = Int16x3_operator_gte_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_gte_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_gte_Int16x3)->signature = "operator>=(i16x3) b8x3"_c;
    Symbol::Resolved(&Int16x3_operator_gte_Int16x3)->name = "operator>=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_gte_Int16x3)->nameWithVarNames = "operator>=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_gte_Int16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator== with Int16x3
    Int16x3_operator_eq_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_eq_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_eq_Int16x3.name = Int16x3_operator_eq_Int16x3_name;
    Int16x3_operator_eq_Int16x3.backendIndex = 782;
    Int16x3_operator_eq_Int16x3.returnType = Type::FullType { Bool8x3Type.name };
    Int16x3_operator_eq_Int16x3.parameters = Int16x3_operator_eq_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_eq_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_eq_Int16x3)->signature = "operator==(i16x3) b8x3"_c;
    Symbol::Resolved(&Int16x3_operator_eq_Int16x3)->name = "operator==(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_eq_Int16x3)->nameWithVarNames = "operator==(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_eq_Int16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator!= with Int16x3
    Int16x3_operator_neq_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_neq_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_neq_Int16x3.name = Int16x3_operator_neq_Int16x3_name;
    Int16x3_operator_neq_Int16x3.backendIndex = 783;
    Int16x3_operator_neq_Int16x3.returnType = Type::FullType { Bool8x3Type.name };
    Int16x3_operator_neq_Int16x3.parameters = Int16x3_operator_neq_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_neq_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_neq_Int16x3)->signature = "operator!=(i16x3) b8x3"_c;
    Symbol::Resolved(&Int16x3_operator_neq_Int16x3)->name = "operator!=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_neq_Int16x3)->nameWithVarNames = "operator!=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_neq_Int16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator* with Float16
    Int16x3_operator_scale_Float16_arg.name = "arg"_c;
    Int16x3_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int16x3_operator_scale_Float16.name = Int16x3_operator_scale_Float16_name;
    Int16x3_operator_scale_Float16.backendIndex = 784;
    Int16x3_operator_scale_Float16.returnType = Type::FullType { Float16x3Type.name };
    Int16x3_operator_scale_Float16.parameters = Int16x3_operator_scale_Float16_args;
    Symbol::Resolved(&Int16x3_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x3_operator_scale_Float16)->signature = "operator*(f16) f16x3"_c;
    Symbol::Resolved(&Int16x3_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Int16x3_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Int16x3_operator_scale_Float16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with UInt16
    Int16x3_operator_scale_UInt16_arg.name = "arg"_c;
    Int16x3_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x3_operator_scale_UInt16.name = Int16x3_operator_scale_UInt16_name;
    Int16x3_operator_scale_UInt16.backendIndex = 785;
    Int16x3_operator_scale_UInt16.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_scale_UInt16.parameters = Int16x3_operator_scale_UInt16_args;
    Symbol::Resolved(&Int16x3_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x3_operator_scale_UInt16)->signature = "operator*(u16) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&Int16x3_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&Int16x3_operator_scale_UInt16)->returnTypeSymbol = &Int16x3Type;

    /// operator* with Int16
    Int16x3_operator_scale_Int16_arg.name = "arg"_c;
    Int16x3_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x3_operator_scale_Int16.name = Int16x3_operator_scale_Int16_name;
    Int16x3_operator_scale_Int16.backendIndex = 786;
    Int16x3_operator_scale_Int16.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_scale_Int16.parameters = Int16x3_operator_scale_Int16_args;
    Symbol::Resolved(&Int16x3_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_operator_scale_Int16)->signature = "operator*(i16) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&Int16x3_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&Int16x3_operator_scale_Int16)->returnTypeSymbol = &Int16x3Type;

    /// operator| with Int16x3
    Int16x3_operator_or_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_or_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_or_Int16x3.name = Int16x3_operator_or_Int16x3_name;
    Int16x3_operator_or_Int16x3.backendIndex = 787;
    Int16x3_operator_or_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_or_Int16x3.parameters = Int16x3_operator_or_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_or_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_or_Int16x3)->signature = "operator|(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_or_Int16x3)->name = "operator|(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_or_Int16x3)->nameWithVarNames = "operator|(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_or_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator& with Int16x3
    Int16x3_operator_and_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_and_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_and_Int16x3.name = Int16x3_operator_and_Int16x3_name;
    Int16x3_operator_and_Int16x3.backendIndex = 788;
    Int16x3_operator_and_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_and_Int16x3.parameters = Int16x3_operator_and_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_and_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_and_Int16x3)->signature = "operator&(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_and_Int16x3)->name = "operator&(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_and_Int16x3)->nameWithVarNames = "operator&(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_and_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator^ with Int16x3
    Int16x3_operator_xor_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_xor_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_xor_Int16x3.name = Int16x3_operator_xor_Int16x3_name;
    Int16x3_operator_xor_Int16x3.backendIndex = 789;
    Int16x3_operator_xor_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_xor_Int16x3.parameters = Int16x3_operator_xor_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_xor_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_xor_Int16x3)->signature = "operator^(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_xor_Int16x3)->name = "operator^(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_xor_Int16x3)->nameWithVarNames = "operator^(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_xor_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator<< with Int16x3
    Int16x3_operator_lsh_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_lsh_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_lsh_Int16x3.name = Int16x3_operator_lsh_Int16x3_name;
    Int16x3_operator_lsh_Int16x3.backendIndex = 790;
    Int16x3_operator_lsh_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_lsh_Int16x3.parameters = Int16x3_operator_lsh_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_lsh_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_lsh_Int16x3)->signature = "operator<<(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_lsh_Int16x3)->name = "operator<<(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lsh_Int16x3)->nameWithVarNames = "operator<<(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lsh_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator>> with Int16x3
    Int16x3_operator_rsh_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_rsh_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_rsh_Int16x3.name = Int16x3_operator_rsh_Int16x3_name;
    Int16x3_operator_rsh_Int16x3.backendIndex = 791;
    Int16x3_operator_rsh_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_rsh_Int16x3.parameters = Int16x3_operator_rsh_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_rsh_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_rsh_Int16x3)->signature = "operator>>(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_rsh_Int16x3)->name = "operator>>(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_rsh_Int16x3)->nameWithVarNames = "operator>>(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_rsh_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator|= with Int16x3
    Int16x3_operator_orasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_orasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_orasg_Int16x3.name = Int16x3_operator_orasg_Int16x3_name;
    Int16x3_operator_orasg_Int16x3.backendIndex = 792;
    Int16x3_operator_orasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_orasg_Int16x3.parameters = Int16x3_operator_orasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_orasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_orasg_Int16x3)->signature = "operator|=(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_orasg_Int16x3)->name = "operator|=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_orasg_Int16x3)->nameWithVarNames = "operator|=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_orasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator&= with Int16x3
    Int16x3_operator_andasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_andasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_andasg_Int16x3.name = Int16x3_operator_andasg_Int16x3_name;
    Int16x3_operator_andasg_Int16x3.backendIndex = 793;
    Int16x3_operator_andasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_andasg_Int16x3.parameters = Int16x3_operator_andasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_andasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_andasg_Int16x3)->signature = "operator&=(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_andasg_Int16x3)->name = "operator&=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_andasg_Int16x3)->nameWithVarNames = "operator&=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_andasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator^= with Int16x3
    Int16x3_operator_xorasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_xorasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_xorasg_Int16x3.name = Int16x3_operator_xorasg_Int16x3_name;
    Int16x3_operator_xorasg_Int16x3.backendIndex = 794;
    Int16x3_operator_xorasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_xorasg_Int16x3.parameters = Int16x3_operator_xorasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_xorasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_xorasg_Int16x3)->signature = "operator^=(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_xorasg_Int16x3)->name = "operator^=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_xorasg_Int16x3)->nameWithVarNames = "operator^=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_xorasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator<<= with Int16x3
    Int16x3_operator_lshasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_lshasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_lshasg_Int16x3.name = Int16x3_operator_lshasg_Int16x3_name;
    Int16x3_operator_lshasg_Int16x3.backendIndex = 795;
    Int16x3_operator_lshasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_lshasg_Int16x3.parameters = Int16x3_operator_lshasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_lshasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_lshasg_Int16x3)->signature = "operator<<=(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_lshasg_Int16x3)->name = "operator<<=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lshasg_Int16x3)->nameWithVarNames = "operator<<=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lshasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator>>= with Int16x3
    Int16x3_operator_rhsasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_rhsasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_rhsasg_Int16x3.name = Int16x3_operator_rhsasg_Int16x3_name;
    Int16x3_operator_rhsasg_Int16x3.backendIndex = 796;
    Int16x3_operator_rhsasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_rhsasg_Int16x3.parameters = Int16x3_operator_rhsasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_rhsasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_rhsasg_Int16x3)->signature = "operator>>=(i16x3) i16x3"_c;
    Symbol::Resolved(&Int16x3_operator_rhsasg_Int16x3)->name = "operator>>=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_rhsasg_Int16x3)->nameWithVarNames = "operator>>=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_rhsasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    this->scope.symbolLookup = Int16x3_symbolLookup;
}
Int16x3 Int16x3Type;

/// operator[] with Int32
Variable Float32x4_operator_index_Int32_arg;
Function Float32x4_operator_index_Int32;
inline constexpr std::array Float32x4_operator_index_Int32_args = { &Float32x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x4_operator_index_UInt32_arg;
Function Float32x4_operator_index_UInt32;
inline constexpr std::array Float32x4_operator_index_UInt32_args = { &Float32x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x4_operator_index_Int16_arg;
Function Float32x4_operator_index_Int16;
inline constexpr std::array Float32x4_operator_index_Int16_args = { &Float32x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x4_operator_index_UInt16_arg;
Function Float32x4_operator_index_UInt16;
inline constexpr std::array Float32x4_operator_index_UInt16_args = { &Float32x4_operator_index_UInt16_arg };

/// operator+ with Float32x4
Variable Float32x4_operator_add_Float32x4_arg;
Function Float32x4_operator_add_Float32x4;
inline constexpr std::array Float32x4_operator_add_Float32x4_args = { &Float32x4_operator_add_Float32x4_arg };

/// operator- with Float32x4
Variable Float32x4_operator_sub_Float32x4_arg;
Function Float32x4_operator_sub_Float32x4;
inline constexpr std::array Float32x4_operator_sub_Float32x4_args = { &Float32x4_operator_sub_Float32x4_arg };

/// operator* with Float32x4
Variable Float32x4_operator_mul_Float32x4_arg;
Function Float32x4_operator_mul_Float32x4;
inline constexpr std::array Float32x4_operator_mul_Float32x4_args = { &Float32x4_operator_mul_Float32x4_arg };

/// operator/ with Float32x4
Variable Float32x4_operator_div_Float32x4_arg;
Function Float32x4_operator_div_Float32x4;
inline constexpr std::array Float32x4_operator_div_Float32x4_args = { &Float32x4_operator_div_Float32x4_arg };

/// operator% with Float32x4
Variable Float32x4_operator_mod_Float32x4_arg;
Function Float32x4_operator_mod_Float32x4;
inline constexpr std::array Float32x4_operator_mod_Float32x4_args = { &Float32x4_operator_mod_Float32x4_arg };

/// operator+= with Float32x4
Variable Float32x4_operator_addasg_Float32x4_arg;
Function Float32x4_operator_addasg_Float32x4;
inline constexpr std::array Float32x4_operator_addasg_Float32x4_args = { &Float32x4_operator_addasg_Float32x4_arg };

/// operator-= with Float32x4
Variable Float32x4_operator_subasg_Float32x4_arg;
Function Float32x4_operator_subasg_Float32x4;
inline constexpr std::array Float32x4_operator_subasg_Float32x4_args = { &Float32x4_operator_subasg_Float32x4_arg };

/// operator*= with Float32x4
Variable Float32x4_operator_mulasg_Float32x4_arg;
Function Float32x4_operator_mulasg_Float32x4;
inline constexpr std::array Float32x4_operator_mulasg_Float32x4_args = { &Float32x4_operator_mulasg_Float32x4_arg };

/// operator/= with Float32x4
Variable Float32x4_operator_divasg_Float32x4_arg;
Function Float32x4_operator_divasg_Float32x4;
inline constexpr std::array Float32x4_operator_divasg_Float32x4_args = { &Float32x4_operator_divasg_Float32x4_arg };

/// operator< with Float32x4
Variable Float32x4_operator_lt_Float32x4_arg;
Function Float32x4_operator_lt_Float32x4;
inline constexpr std::array Float32x4_operator_lt_Float32x4_args = { &Float32x4_operator_lt_Float32x4_arg };

/// operator<= with Float32x4
Variable Float32x4_operator_lte_Float32x4_arg;
Function Float32x4_operator_lte_Float32x4;
inline constexpr std::array Float32x4_operator_lte_Float32x4_args = { &Float32x4_operator_lte_Float32x4_arg };

/// operator> with Float32x4
Variable Float32x4_operator_gt_Float32x4_arg;
Function Float32x4_operator_gt_Float32x4;
inline constexpr std::array Float32x4_operator_gt_Float32x4_args = { &Float32x4_operator_gt_Float32x4_arg };

/// operator>= with Float32x4
Variable Float32x4_operator_gte_Float32x4_arg;
Function Float32x4_operator_gte_Float32x4;
inline constexpr std::array Float32x4_operator_gte_Float32x4_args = { &Float32x4_operator_gte_Float32x4_arg };

/// operator== with Float32x4
Variable Float32x4_operator_eq_Float32x4_arg;
Function Float32x4_operator_eq_Float32x4;
inline constexpr std::array Float32x4_operator_eq_Float32x4_args = { &Float32x4_operator_eq_Float32x4_arg };

/// operator!= with Float32x4
Variable Float32x4_operator_neq_Float32x4_arg;
Function Float32x4_operator_neq_Float32x4;
inline constexpr std::array Float32x4_operator_neq_Float32x4_args = { &Float32x4_operator_neq_Float32x4_arg };

/// operator* with Float32
Variable Float32x4_operator_scale_Float32_arg;
Function Float32x4_operator_scale_Float32;
inline constexpr std::array Float32x4_operator_scale_Float32_args = { &Float32x4_operator_scale_Float32_arg };

/// operator* with UInt32
Variable Float32x4_operator_scale_UInt32_arg;
Function Float32x4_operator_scale_UInt32;
inline constexpr std::array Float32x4_operator_scale_UInt32_args = { &Float32x4_operator_scale_UInt32_arg };

/// operator* with Int32
Variable Float32x4_operator_scale_Int32_arg;
Function Float32x4_operator_scale_Int32;
inline constexpr std::array Float32x4_operator_scale_Int32_args = { &Float32x4_operator_scale_Int32_arg };

/// operator* with Float32x4x2
Variable Float32x4_operator_transform_Float32x4x2_arg;
Function Float32x4_operator_transform_Float32x4x2;
inline constexpr std::array Float32x4_operator_transform_Float32x4x2_args = { &Float32x4_operator_transform_Float32x4x2_arg };

/// operator* with Float32x4x3
Variable Float32x4_operator_transform_Float32x4x3_arg;
Function Float32x4_operator_transform_Float32x4x3;
inline constexpr std::array Float32x4_operator_transform_Float32x4x3_args = { &Float32x4_operator_transform_Float32x4x3_arg };

/// operator* with Float32x4x4
Variable Float32x4_operator_transform_Float32x4x4_arg;
Function Float32x4_operator_transform_Float32x4x4;
inline constexpr std::array Float32x4_operator_transform_Float32x4x4_args = { &Float32x4_operator_transform_Float32x4x4_arg };

static constexpr StaticMap<HashString, Symbol*, 730> Float32x4_symbolLookup = {
    std::pair{ "wzwy"_h, &Float32x4Type },
    std::pair{ "wzwx"_h, &Float32x4Type },
    std::pair{ "wzwz"_h, &Float32x4Type },
    std::pair{ "wzww"_h, &Float32x4Type },
    std::pair{ "bgg"_h, &Float32x3Type },
    std::pair{ "bgb"_h, &Float32x3Type },
    std::pair{ "bga"_h, &Float32x3Type },
    std::pair{ "bgr"_h, &Float32x3Type },
    std::pair{ "bag"_h, &Float32x3Type },
    std::pair{ "baa"_h, &Float32x3Type },
    std::pair{ "bab"_h, &Float32x3Type },
    std::pair{ "bar"_h, &Float32x3Type },
    std::pair{ "bbg"_h, &Float32x3Type },
    std::pair{ "bba"_h, &Float32x3Type },
    std::pair{ "bbb"_h, &Float32x3Type },
    std::pair{ "bbr"_h, &Float32x3Type },
    std::pair{ "wzxw"_h, &Float32x4Type },
    std::pair{ "wzxx"_h, &Float32x4Type },
    std::pair{ "wzxy"_h, &Float32x4Type },
    std::pair{ "wzxz"_h, &Float32x4Type },
    std::pair{ "wzyw"_h, &Float32x4Type },
    std::pair{ "wzyz"_h, &Float32x4Type },
    std::pair{ "wzyy"_h, &Float32x4Type },
    std::pair{ "wzyx"_h, &Float32x4Type },
    std::pair{ "wzzz"_h, &Float32x4Type },
    std::pair{ "wzzx"_h, &Float32x4Type },
    std::pair{ "wzzy"_h, &Float32x4Type },
    std::pair{ "wzzw"_h, &Float32x4Type },
    std::pair{ "brr"_h, &Float32x3Type },
    std::pair{ "brg"_h, &Float32x3Type },
    std::pair{ "bra"_h, &Float32x3Type },
    std::pair{ "brb"_h, &Float32x3Type },
    std::pair{ "ywyw"_h, &Float32x4Type },
    std::pair{ "ywyx"_h, &Float32x4Type },
    std::pair{ "ywyy"_h, &Float32x4Type },
    std::pair{ "ywyz"_h, &Float32x4Type },
    std::pair{ "ywxw"_h, &Float32x4Type },
    std::pair{ "ywxz"_h, &Float32x4Type },
    std::pair{ "ywxy"_h, &Float32x4Type },
    std::pair{ "ywxx"_h, &Float32x4Type },
    std::pair{ "ywzy"_h, &Float32x4Type },
    std::pair{ "ywzx"_h, &Float32x4Type },
    std::pair{ "ywzz"_h, &Float32x4Type },
    std::pair{ "ywzw"_h, &Float32x4Type },
    std::pair{ "ywwz"_h, &Float32x4Type },
    std::pair{ "ywwx"_h, &Float32x4Type },
    std::pair{ "ywwy"_h, &Float32x4Type },
    std::pair{ "ywww"_h, &Float32x4Type },
    std::pair{ "gg"_h, &Float32x2Type },
    std::pair{ "gb"_h, &Float32x2Type },
    std::pair{ "ga"_h, &Float32x2Type },
    std::pair{ "gr"_h, &Float32x2Type },
    std::pair{ "ag"_h, &Float32x2Type },
    std::pair{ "aa"_h, &Float32x2Type },
    std::pair{ "ab"_h, &Float32x2Type },
    std::pair{ "ar"_h, &Float32x2Type },
    std::pair{ "bg"_h, &Float32x2Type },
    std::pair{ "ba"_h, &Float32x2Type },
    std::pair{ "bb"_h, &Float32x2Type },
    std::pair{ "br"_h, &Float32x2Type },
    std::pair{ "ww"_h, &Float32x2Type },
    std::pair{ "wz"_h, &Float32x2Type },
    std::pair{ "wx"_h, &Float32x2Type },
    std::pair{ "wy"_h, &Float32x2Type },
    std::pair{ "rr"_h, &Float32x2Type },
    std::pair{ "rg"_h, &Float32x2Type },
    std::pair{ "ra"_h, &Float32x2Type },
    std::pair{ "rb"_h, &Float32x2Type },
    std::pair{ "yw"_h, &Float32x2Type },
    std::pair{ "yx"_h, &Float32x2Type },
    std::pair{ "yy"_h, &Float32x2Type },
    std::pair{ "yz"_h, &Float32x2Type },
    std::pair{ "xw"_h, &Float32x2Type },
    std::pair{ "xz"_h, &Float32x2Type },
    std::pair{ "xy"_h, &Float32x2Type },
    std::pair{ "xx"_h, &Float32x2Type },
    std::pair{ "zy"_h, &Float32x2Type },
    std::pair{ "zx"_h, &Float32x2Type },
    std::pair{ "zz"_h, &Float32x2Type },
    std::pair{ "zw"_h, &Float32x2Type },
    std::pair{ "operator[](i16)"_h, &Float32x4_operator_index_Int16 },
    std::pair{ "operator!=(f32x4)"_h, &Float32x4_operator_neq_Float32x4 },
    std::pair{ "wxzw"_h, &Float32x4Type },
    std::pair{ "wxzx"_h, &Float32x4Type },
    std::pair{ "wxzy"_h, &Float32x4Type },
    std::pair{ "wxzz"_h, &Float32x4Type },
    std::pair{ "wxxw"_h, &Float32x4Type },
    std::pair{ "wxxz"_h, &Float32x4Type },
    std::pair{ "wxxx"_h, &Float32x4Type },
    std::pair{ "wxxy"_h, &Float32x4Type },
    std::pair{ "wxyy"_h, &Float32x4Type },
    std::pair{ "wxyx"_h, &Float32x4Type },
    std::pair{ "wxyz"_h, &Float32x4Type },
    std::pair{ "wxyw"_h, &Float32x4Type },
    std::pair{ "wxww"_h, &Float32x4Type },
    std::pair{ "wxwz"_h, &Float32x4Type },
    std::pair{ "wxwy"_h, &Float32x4Type },
    std::pair{ "wxwx"_h, &Float32x4Type },
    std::pair{ "operator+=(f32x4)"_h, &Float32x4_operator_addasg_Float32x4 },
    std::pair{ "wyyx"_h, &Float32x4Type },
    std::pair{ "wyyy"_h, &Float32x4Type },
    std::pair{ "wyyz"_h, &Float32x4Type },
    std::pair{ "wyyw"_h, &Float32x4Type },
    std::pair{ "wyxz"_h, &Float32x4Type },
    std::pair{ "wyxy"_h, &Float32x4Type },
    std::pair{ "wyxx"_h, &Float32x4Type },
    std::pair{ "wyxw"_h, &Float32x4Type },
    std::pair{ "wyzw"_h, &Float32x4Type },
    std::pair{ "wyzy"_h, &Float32x4Type },
    std::pair{ "wyzx"_h, &Float32x4Type },
    std::pair{ "wyzz"_h, &Float32x4Type },
    std::pair{ "wywz"_h, &Float32x4Type },
    std::pair{ "wywx"_h, &Float32x4Type },
    std::pair{ "wywy"_h, &Float32x4Type },
    std::pair{ "wyww"_h, &Float32x4Type },
    std::pair{ "operator>(f32x4)"_h, &Float32x4_operator_gt_Float32x4 },
    std::pair{ "operator*(u32)"_h, &Float32x4_operator_scale_UInt32 },
    std::pair{ "operator+(f32x4)"_h, &Float32x4_operator_add_Float32x4 },
    std::pair{ "operator*(f32x4x4)"_h, &Float32x4_operator_transform_Float32x4x4 },
    std::pair{ "operator*(f32x4x2)"_h, &Float32x4_operator_transform_Float32x4x2 },
    std::pair{ "operator*(f32x4x3)"_h, &Float32x4_operator_transform_Float32x4x3 },
    std::pair{ "brrg"_h, &Float32x4Type },
    std::pair{ "brra"_h, &Float32x4Type },
    std::pair{ "brrb"_h, &Float32x4Type },
    std::pair{ "brrr"_h, &Float32x4Type },
    std::pair{ "brgr"_h, &Float32x4Type },
    std::pair{ "brgg"_h, &Float32x4Type },
    std::pair{ "brgb"_h, &Float32x4Type },
    std::pair{ "brga"_h, &Float32x4Type },
    std::pair{ "brar"_h, &Float32x4Type },
    std::pair{ "brag"_h, &Float32x4Type },
    std::pair{ "braa"_h, &Float32x4Type },
    std::pair{ "brab"_h, &Float32x4Type },
    std::pair{ "brbr"_h, &Float32x4Type },
    std::pair{ "brbg"_h, &Float32x4Type },
    std::pair{ "brba"_h, &Float32x4Type },
    std::pair{ "brbb"_h, &Float32x4Type },
    std::pair{ "operator<"_h, &Float32x4_operator_lt_Float32x4 },
    std::pair{ "operator>"_h, &Float32x4_operator_gt_Float32x4 },
    std::pair{ "operator-"_h, &Float32x4_operator_sub_Float32x4 },
    std::pair{ "operator/"_h, &Float32x4_operator_div_Float32x4 },
    std::pair{ "operator+"_h, &Float32x4_operator_add_Float32x4 },
    std::pair{ "operator*"_h, &Float32x4_operator_mul_Float32x4 },
    std::pair{ "operator*"_h, &Float32x4_operator_scale_Float32 },
    std::pair{ "operator*"_h, &Float32x4_operator_scale_UInt32 },
    std::pair{ "operator*"_h, &Float32x4_operator_scale_Int32 },
    std::pair{ "operator*"_h, &Float32x4_operator_transform_Float32x4x2 },
    std::pair{ "operator*"_h, &Float32x4_operator_transform_Float32x4x3 },
    std::pair{ "operator*"_h, &Float32x4_operator_transform_Float32x4x4 },
    std::pair{ "operator%"_h, &Float32x4_operator_mod_Float32x4 },
    std::pair{ "xzww"_h, &Float32x4Type },
    std::pair{ "xzwx"_h, &Float32x4Type },
    std::pair{ "xzwy"_h, &Float32x4Type },
    std::pair{ "xzwz"_h, &Float32x4Type },
    std::pair{ "xzzw"_h, &Float32x4Type },
    std::pair{ "xzzz"_h, &Float32x4Type },
    std::pair{ "xzzy"_h, &Float32x4Type },
    std::pair{ "xzzx"_h, &Float32x4Type },
    std::pair{ "xzyz"_h, &Float32x4Type },
    std::pair{ "xzyx"_h, &Float32x4Type },
    std::pair{ "xzyy"_h, &Float32x4Type },
    std::pair{ "xzyw"_h, &Float32x4Type },
    std::pair{ "xzxy"_h, &Float32x4Type },
    std::pair{ "xzxx"_h, &Float32x4Type },
    std::pair{ "xzxz"_h, &Float32x4Type },
    std::pair{ "xzxw"_h, &Float32x4Type },
    std::pair{ "yxwy"_h, &Float32x4Type },
    std::pair{ "yxwx"_h, &Float32x4Type },
    std::pair{ "yxwz"_h, &Float32x4Type },
    std::pair{ "yxww"_h, &Float32x4Type },
    std::pair{ "yxxw"_h, &Float32x4Type },
    std::pair{ "yxxx"_h, &Float32x4Type },
    std::pair{ "yxxy"_h, &Float32x4Type },
    std::pair{ "yxxz"_h, &Float32x4Type },
    std::pair{ "yxyw"_h, &Float32x4Type },
    std::pair{ "yxyz"_h, &Float32x4Type },
    std::pair{ "yxyy"_h, &Float32x4Type },
    std::pair{ "yxyx"_h, &Float32x4Type },
    std::pair{ "yxzz"_h, &Float32x4Type },
    std::pair{ "yxzx"_h, &Float32x4Type },
    std::pair{ "yxzy"_h, &Float32x4Type },
    std::pair{ "yxzw"_h, &Float32x4Type },
    std::pair{ "xyzw"_h, &Float32x4Type },
    std::pair{ "xyzx"_h, &Float32x4Type },
    std::pair{ "xyzy"_h, &Float32x4Type },
    std::pair{ "xyzz"_h, &Float32x4Type },
    std::pair{ "xyxw"_h, &Float32x4Type },
    std::pair{ "xyxz"_h, &Float32x4Type },
    std::pair{ "xyxx"_h, &Float32x4Type },
    std::pair{ "xyxy"_h, &Float32x4Type },
    std::pair{ "xyyy"_h, &Float32x4Type },
    std::pair{ "xyyx"_h, &Float32x4Type },
    std::pair{ "xyyz"_h, &Float32x4Type },
    std::pair{ "xyyw"_h, &Float32x4Type },
    std::pair{ "xyww"_h, &Float32x4Type },
    std::pair{ "xywz"_h, &Float32x4Type },
    std::pair{ "xywy"_h, &Float32x4Type },
    std::pair{ "xywx"_h, &Float32x4Type },
    std::pair{ "ggrr"_h, &Float32x4Type },
    std::pair{ "ggrb"_h, &Float32x4Type },
    std::pair{ "ggra"_h, &Float32x4Type },
    std::pair{ "ggrg"_h, &Float32x4Type },
    std::pair{ "ggbb"_h, &Float32x4Type },
    std::pair{ "ggba"_h, &Float32x4Type },
    std::pair{ "ggbg"_h, &Float32x4Type },
    std::pair{ "ggbr"_h, &Float32x4Type },
    std::pair{ "ggar"_h, &Float32x4Type },
    std::pair{ "ggag"_h, &Float32x4Type },
    std::pair{ "ggab"_h, &Float32x4Type },
    std::pair{ "ggaa"_h, &Float32x4Type },
    std::pair{ "gggr"_h, &Float32x4Type },
    std::pair{ "gggg"_h, &Float32x4Type },
    std::pair{ "ggga"_h, &Float32x4Type },
    std::pair{ "gggb"_h, &Float32x4Type },
    std::pair{ "yyww"_h, &Float32x4Type },
    std::pair{ "yywx"_h, &Float32x4Type },
    std::pair{ "yywy"_h, &Float32x4Type },
    std::pair{ "yywz"_h, &Float32x4Type },
    std::pair{ "yyzw"_h, &Float32x4Type },
    std::pair{ "yyzz"_h, &Float32x4Type },
    std::pair{ "yyzy"_h, &Float32x4Type },
    std::pair{ "yyzx"_h, &Float32x4Type },
    std::pair{ "yyyz"_h, &Float32x4Type },
    std::pair{ "yyyx"_h, &Float32x4Type },
    std::pair{ "yyyy"_h, &Float32x4Type },
    std::pair{ "yyyw"_h, &Float32x4Type },
    std::pair{ "yyxy"_h, &Float32x4Type },
    std::pair{ "yyxx"_h, &Float32x4Type },
    std::pair{ "yyxz"_h, &Float32x4Type },
    std::pair{ "yyxw"_h, &Float32x4Type },
    std::pair{ "xxyx"_h, &Float32x4Type },
    std::pair{ "xxyy"_h, &Float32x4Type },
    std::pair{ "xxyz"_h, &Float32x4Type },
    std::pair{ "xxyw"_h, &Float32x4Type },
    std::pair{ "xxxz"_h, &Float32x4Type },
    std::pair{ "xxxy"_h, &Float32x4Type },
    std::pair{ "xxxx"_h, &Float32x4Type },
    std::pair{ "xxxw"_h, &Float32x4Type },
    std::pair{ "xxzw"_h, &Float32x4Type },
    std::pair{ "xxzy"_h, &Float32x4Type },
    std::pair{ "xxzx"_h, &Float32x4Type },
    std::pair{ "xxzz"_h, &Float32x4Type },
    std::pair{ "xxwz"_h, &Float32x4Type },
    std::pair{ "xxwx"_h, &Float32x4Type },
    std::pair{ "xxwy"_h, &Float32x4Type },
    std::pair{ "xxww"_h, &Float32x4Type },
    std::pair{ "rgrg"_h, &Float32x4Type },
    std::pair{ "rgra"_h, &Float32x4Type },
    std::pair{ "rgrb"_h, &Float32x4Type },
    std::pair{ "rgrr"_h, &Float32x4Type },
    std::pair{ "rggb"_h, &Float32x4Type },
    std::pair{ "rgga"_h, &Float32x4Type },
    std::pair{ "rggg"_h, &Float32x4Type },
    std::pair{ "rggr"_h, &Float32x4Type },
    std::pair{ "rgbr"_h, &Float32x4Type },
    std::pair{ "rgbg"_h, &Float32x4Type },
    std::pair{ "rgba"_h, &Float32x4Type },
    std::pair{ "rgbb"_h, &Float32x4Type },
    std::pair{ "rgar"_h, &Float32x4Type },
    std::pair{ "rgag"_h, &Float32x4Type },
    std::pair{ "rgaa"_h, &Float32x4Type },
    std::pair{ "rgab"_h, &Float32x4Type },
    std::pair{ "operator*(f32x4)"_h, &Float32x4_operator_mul_Float32x4 },
    std::pair{ "www"_h, &Float32x3Type },
    std::pair{ "wwz"_h, &Float32x3Type },
    std::pair{ "wwy"_h, &Float32x3Type },
    std::pair{ "wwx"_h, &Float32x3Type },
    std::pair{ "wzw"_h, &Float32x3Type },
    std::pair{ "wzx"_h, &Float32x3Type },
    std::pair{ "wzy"_h, &Float32x3Type },
    std::pair{ "wzz"_h, &Float32x3Type },
    std::pair{ "wxz"_h, &Float32x3Type },
    std::pair{ "wxx"_h, &Float32x3Type },
    std::pair{ "wxy"_h, &Float32x3Type },
    std::pair{ "wxw"_h, &Float32x3Type },
    std::pair{ "wyy"_h, &Float32x3Type },
    std::pair{ "wyx"_h, &Float32x3Type },
    std::pair{ "wyz"_h, &Float32x3Type },
    std::pair{ "wyw"_h, &Float32x3Type },
    std::pair{ "yzzw"_h, &Float32x4Type },
    std::pair{ "yzzx"_h, &Float32x4Type },
    std::pair{ "yzzy"_h, &Float32x4Type },
    std::pair{ "yzzz"_h, &Float32x4Type },
    std::pair{ "yzxw"_h, &Float32x4Type },
    std::pair{ "yzxz"_h, &Float32x4Type },
    std::pair{ "yzxx"_h, &Float32x4Type },
    std::pair{ "yzxy"_h, &Float32x4Type },
    std::pair{ "yzyy"_h, &Float32x4Type },
    std::pair{ "yzyx"_h, &Float32x4Type },
    std::pair{ "yzyz"_h, &Float32x4Type },
    std::pair{ "yzyw"_h, &Float32x4Type },
    std::pair{ "yzww"_h, &Float32x4Type },
    std::pair{ "yzwz"_h, &Float32x4Type },
    std::pair{ "yzwy"_h, &Float32x4Type },
    std::pair{ "yzwx"_h, &Float32x4Type },
    std::pair{ "operator%(f32x4)"_h, &Float32x4_operator_mod_Float32x4 },
    std::pair{ "rarb"_h, &Float32x4Type },
    std::pair{ "rara"_h, &Float32x4Type },
    std::pair{ "rarg"_h, &Float32x4Type },
    std::pair{ "rarr"_h, &Float32x4Type },
    std::pair{ "raga"_h, &Float32x4Type },
    std::pair{ "ragb"_h, &Float32x4Type },
    std::pair{ "ragg"_h, &Float32x4Type },
    std::pair{ "ragr"_h, &Float32x4Type },
    std::pair{ "raag"_h, &Float32x4Type },
    std::pair{ "raab"_h, &Float32x4Type },
    std::pair{ "raaa"_h, &Float32x4Type },
    std::pair{ "raar"_h, &Float32x4Type },
    std::pair{ "rabr"_h, &Float32x4Type },
    std::pair{ "rabb"_h, &Float32x4Type },
    std::pair{ "raba"_h, &Float32x4Type },
    std::pair{ "rabg"_h, &Float32x4Type },
    std::pair{ "gbgr"_h, &Float32x4Type },
    std::pair{ "gbga"_h, &Float32x4Type },
    std::pair{ "gbgb"_h, &Float32x4Type },
    std::pair{ "gbgg"_h, &Float32x4Type },
    std::pair{ "gbar"_h, &Float32x4Type },
    std::pair{ "gbag"_h, &Float32x4Type },
    std::pair{ "gbab"_h, &Float32x4Type },
    std::pair{ "gbaa"_h, &Float32x4Type },
    std::pair{ "gbbb"_h, &Float32x4Type },
    std::pair{ "gbba"_h, &Float32x4Type },
    std::pair{ "gbbg"_h, &Float32x4Type },
    std::pair{ "gbbr"_h, &Float32x4Type },
    std::pair{ "gbrr"_h, &Float32x4Type },
    std::pair{ "gbrb"_h, &Float32x4Type },
    std::pair{ "gbra"_h, &Float32x4Type },
    std::pair{ "gbrg"_h, &Float32x4Type },
    std::pair{ "rbrg"_h, &Float32x4Type },
    std::pair{ "rbra"_h, &Float32x4Type },
    std::pair{ "rbrb"_h, &Float32x4Type },
    std::pair{ "rbrr"_h, &Float32x4Type },
    std::pair{ "rbgr"_h, &Float32x4Type },
    std::pair{ "rbgg"_h, &Float32x4Type },
    std::pair{ "rbgb"_h, &Float32x4Type },
    std::pair{ "rbga"_h, &Float32x4Type },
    std::pair{ "rbar"_h, &Float32x4Type },
    std::pair{ "rbag"_h, &Float32x4Type },
    std::pair{ "rbaa"_h, &Float32x4Type },
    std::pair{ "rbab"_h, &Float32x4Type },
    std::pair{ "rbbr"_h, &Float32x4Type },
    std::pair{ "rbbg"_h, &Float32x4Type },
    std::pair{ "rbba"_h, &Float32x4Type },
    std::pair{ "rbbb"_h, &Float32x4Type },
    std::pair{ "zyxx"_h, &Float32x4Type },
    std::pair{ "zyxy"_h, &Float32x4Type },
    std::pair{ "zyxz"_h, &Float32x4Type },
    std::pair{ "zyxw"_h, &Float32x4Type },
    std::pair{ "zyyz"_h, &Float32x4Type },
    std::pair{ "zyyy"_h, &Float32x4Type },
    std::pair{ "zyyx"_h, &Float32x4Type },
    std::pair{ "zyyw"_h, &Float32x4Type },
    std::pair{ "zyzw"_h, &Float32x4Type },
    std::pair{ "zyzz"_h, &Float32x4Type },
    std::pair{ "zyzx"_h, &Float32x4Type },
    std::pair{ "zyzy"_h, &Float32x4Type },
    std::pair{ "zyww"_h, &Float32x4Type },
    std::pair{ "zywy"_h, &Float32x4Type },
    std::pair{ "zywx"_h, &Float32x4Type },
    std::pair{ "zywz"_h, &Float32x4Type },
    std::pair{ "bggr"_h, &Float32x4Type },
    std::pair{ "bggb"_h, &Float32x4Type },
    std::pair{ "bgga"_h, &Float32x4Type },
    std::pair{ "bggg"_h, &Float32x4Type },
    std::pair{ "bgbg"_h, &Float32x4Type },
    std::pair{ "bgba"_h, &Float32x4Type },
    std::pair{ "bgbb"_h, &Float32x4Type },
    std::pair{ "bgbr"_h, &Float32x4Type },
    std::pair{ "bgag"_h, &Float32x4Type },
    std::pair{ "bgaa"_h, &Float32x4Type },
    std::pair{ "bgab"_h, &Float32x4Type },
    std::pair{ "bgar"_h, &Float32x4Type },
    std::pair{ "bgrr"_h, &Float32x4Type },
    std::pair{ "bgrg"_h, &Float32x4Type },
    std::pair{ "bgra"_h, &Float32x4Type },
    std::pair{ "bgrb"_h, &Float32x4Type },
    std::pair{ "operator<=(f32x4)"_h, &Float32x4_operator_lte_Float32x4 },
    std::pair{ "arrr"_h, &Float32x4Type },
    std::pair{ "arra"_h, &Float32x4Type },
    std::pair{ "arrb"_h, &Float32x4Type },
    std::pair{ "arrg"_h, &Float32x4Type },
    std::pair{ "arba"_h, &Float32x4Type },
    std::pair{ "arbb"_h, &Float32x4Type },
    std::pair{ "arbg"_h, &Float32x4Type },
    std::pair{ "arbr"_h, &Float32x4Type },
    std::pair{ "araa"_h, &Float32x4Type },
    std::pair{ "arab"_h, &Float32x4Type },
    std::pair{ "arag"_h, &Float32x4Type },
    std::pair{ "arar"_h, &Float32x4Type },
    std::pair{ "argg"_h, &Float32x4Type },
    std::pair{ "argb"_h, &Float32x4Type },
    std::pair{ "arga"_h, &Float32x4Type },
    std::pair{ "argr"_h, &Float32x4Type },
    std::pair{ "rrg"_h, &Float32x3Type },
    std::pair{ "rra"_h, &Float32x3Type },
    std::pair{ "rrb"_h, &Float32x3Type },
    std::pair{ "rrr"_h, &Float32x3Type },
    std::pair{ "rgr"_h, &Float32x3Type },
    std::pair{ "rgg"_h, &Float32x3Type },
    std::pair{ "rgb"_h, &Float32x3Type },
    std::pair{ "rga"_h, &Float32x3Type },
    std::pair{ "rar"_h, &Float32x3Type },
    std::pair{ "rag"_h, &Float32x3Type },
    std::pair{ "raa"_h, &Float32x3Type },
    std::pair{ "rab"_h, &Float32x3Type },
    std::pair{ "rbr"_h, &Float32x3Type },
    std::pair{ "rbg"_h, &Float32x3Type },
    std::pair{ "rba"_h, &Float32x3Type },
    std::pair{ "rbb"_h, &Float32x3Type },
    std::pair{ "gagg"_h, &Float32x4Type },
    std::pair{ "gagb"_h, &Float32x4Type },
    std::pair{ "gaga"_h, &Float32x4Type },
    std::pair{ "gagr"_h, &Float32x4Type },
    std::pair{ "gaag"_h, &Float32x4Type },
    std::pair{ "gaaa"_h, &Float32x4Type },
    std::pair{ "gaab"_h, &Float32x4Type },
    std::pair{ "gaar"_h, &Float32x4Type },
    std::pair{ "gabg"_h, &Float32x4Type },
    std::pair{ "gaba"_h, &Float32x4Type },
    std::pair{ "gabb"_h, &Float32x4Type },
    std::pair{ "gabr"_h, &Float32x4Type },
    std::pair{ "garr"_h, &Float32x4Type },
    std::pair{ "garg"_h, &Float32x4Type },
    std::pair{ "gara"_h, &Float32x4Type },
    std::pair{ "garb"_h, &Float32x4Type },
    std::pair{ "operator[](u32)"_h, &Float32x4_operator_index_UInt32 },
    std::pair{ "zxzz"_h, &Float32x4Type },
    std::pair{ "zxzy"_h, &Float32x4Type },
    std::pair{ "zxzx"_h, &Float32x4Type },
    std::pair{ "zxzw"_h, &Float32x4Type },
    std::pair{ "zxyw"_h, &Float32x4Type },
    std::pair{ "zxyz"_h, &Float32x4Type },
    std::pair{ "zxyx"_h, &Float32x4Type },
    std::pair{ "zxyy"_h, &Float32x4Type },
    std::pair{ "zxxw"_h, &Float32x4Type },
    std::pair{ "zxxy"_h, &Float32x4Type },
    std::pair{ "zxxx"_h, &Float32x4Type },
    std::pair{ "zxxz"_h, &Float32x4Type },
    std::pair{ "zxwx"_h, &Float32x4Type },
    std::pair{ "zxwy"_h, &Float32x4Type },
    std::pair{ "zxwz"_h, &Float32x4Type },
    std::pair{ "zxww"_h, &Float32x4Type },
    std::pair{ "operator>=(f32x4)"_h, &Float32x4_operator_gte_Float32x4 },
    std::pair{ "operator*(f32)"_h, &Float32x4_operator_scale_Float32 },
    std::pair{ "bagr"_h, &Float32x4Type },
    std::pair{ "baga"_h, &Float32x4Type },
    std::pair{ "bagb"_h, &Float32x4Type },
    std::pair{ "bagg"_h, &Float32x4Type },
    std::pair{ "baar"_h, &Float32x4Type },
    std::pair{ "baag"_h, &Float32x4Type },
    std::pair{ "baab"_h, &Float32x4Type },
    std::pair{ "baaa"_h, &Float32x4Type },
    std::pair{ "babb"_h, &Float32x4Type },
    std::pair{ "baba"_h, &Float32x4Type },
    std::pair{ "babg"_h, &Float32x4Type },
    std::pair{ "babr"_h, &Float32x4Type },
    std::pair{ "barr"_h, &Float32x4Type },
    std::pair{ "barb"_h, &Float32x4Type },
    std::pair{ "bara"_h, &Float32x4Type },
    std::pair{ "barg"_h, &Float32x4Type },
    std::pair{ "operator==(f32x4)"_h, &Float32x4_operator_eq_Float32x4 },
    std::pair{ "operator[](u16)"_h, &Float32x4_operator_index_UInt16 },
    std::pair{ "wwwx"_h, &Float32x4Type },
    std::pair{ "wwwy"_h, &Float32x4Type },
    std::pair{ "wwwz"_h, &Float32x4Type },
    std::pair{ "wwww"_h, &Float32x4Type },
    std::pair{ "wwzz"_h, &Float32x4Type },
    std::pair{ "wwzy"_h, &Float32x4Type },
    std::pair{ "wwzx"_h, &Float32x4Type },
    std::pair{ "wwzw"_h, &Float32x4Type },
    std::pair{ "wwyz"_h, &Float32x4Type },
    std::pair{ "wwyx"_h, &Float32x4Type },
    std::pair{ "wwyy"_h, &Float32x4Type },
    std::pair{ "wwyw"_h, &Float32x4Type },
    std::pair{ "wwxw"_h, &Float32x4Type },
    std::pair{ "wwxy"_h, &Float32x4Type },
    std::pair{ "wwxx"_h, &Float32x4Type },
    std::pair{ "wwxz"_h, &Float32x4Type },
    std::pair{ "zzww"_h, &Float32x4Type },
    std::pair{ "zzwz"_h, &Float32x4Type },
    std::pair{ "zzwx"_h, &Float32x4Type },
    std::pair{ "zzwy"_h, &Float32x4Type },
    std::pair{ "zzyw"_h, &Float32x4Type },
    std::pair{ "zzyx"_h, &Float32x4Type },
    std::pair{ "zzyy"_h, &Float32x4Type },
    std::pair{ "zzyz"_h, &Float32x4Type },
    std::pair{ "zzxw"_h, &Float32x4Type },
    std::pair{ "zzxz"_h, &Float32x4Type },
    std::pair{ "zzxy"_h, &Float32x4Type },
    std::pair{ "zzxx"_h, &Float32x4Type },
    std::pair{ "zzzy"_h, &Float32x4Type },
    std::pair{ "zzzx"_h, &Float32x4Type },
    std::pair{ "zzzz"_h, &Float32x4Type },
    std::pair{ "zzzw"_h, &Float32x4Type },
    std::pair{ "g"_h, &Float32Type },
    std::pair{ "a"_h, &Float32Type },
    std::pair{ "b"_h, &Float32Type },
    std::pair{ "w"_h, &Float32Type },
    std::pair{ "r"_h, &Float32Type },
    std::pair{ "y"_h, &Float32Type },
    std::pair{ "x"_h, &Float32Type },
    std::pair{ "z"_h, &Float32Type },
    std::pair{ "operator*(i32)"_h, &Float32x4_operator_scale_Int32 },
    std::pair{ "bbgg"_h, &Float32x4Type },
    std::pair{ "bbgb"_h, &Float32x4Type },
    std::pair{ "bbga"_h, &Float32x4Type },
    std::pair{ "bbgr"_h, &Float32x4Type },
    std::pair{ "bbag"_h, &Float32x4Type },
    std::pair{ "bbaa"_h, &Float32x4Type },
    std::pair{ "bbab"_h, &Float32x4Type },
    std::pair{ "bbar"_h, &Float32x4Type },
    std::pair{ "bbbg"_h, &Float32x4Type },
    std::pair{ "bbba"_h, &Float32x4Type },
    std::pair{ "bbbb"_h, &Float32x4Type },
    std::pair{ "bbbr"_h, &Float32x4Type },
    std::pair{ "bbrr"_h, &Float32x4Type },
    std::pair{ "bbrg"_h, &Float32x4Type },
    std::pair{ "bbra"_h, &Float32x4Type },
    std::pair{ "bbrb"_h, &Float32x4Type },
    std::pair{ "ywy"_h, &Float32x3Type },
    std::pair{ "ywx"_h, &Float32x3Type },
    std::pair{ "ywz"_h, &Float32x3Type },
    std::pair{ "yww"_h, &Float32x3Type },
    std::pair{ "yxw"_h, &Float32x3Type },
    std::pair{ "yxx"_h, &Float32x3Type },
    std::pair{ "yxy"_h, &Float32x3Type },
    std::pair{ "yxz"_h, &Float32x3Type },
    std::pair{ "yyw"_h, &Float32x3Type },
    std::pair{ "yyz"_h, &Float32x3Type },
    std::pair{ "yyy"_h, &Float32x3Type },
    std::pair{ "yyx"_h, &Float32x3Type },
    std::pair{ "yzz"_h, &Float32x3Type },
    std::pair{ "yzx"_h, &Float32x3Type },
    std::pair{ "yzy"_h, &Float32x3Type },
    std::pair{ "yzw"_h, &Float32x3Type },
    std::pair{ "zwzx"_h, &Float32x4Type },
    std::pair{ "zwzy"_h, &Float32x4Type },
    std::pair{ "zwzz"_h, &Float32x4Type },
    std::pair{ "zwzw"_h, &Float32x4Type },
    std::pair{ "zwxw"_h, &Float32x4Type },
    std::pair{ "zwxz"_h, &Float32x4Type },
    std::pair{ "zwxx"_h, &Float32x4Type },
    std::pair{ "zwxy"_h, &Float32x4Type },
    std::pair{ "zwyw"_h, &Float32x4Type },
    std::pair{ "zwyy"_h, &Float32x4Type },
    std::pair{ "zwyx"_h, &Float32x4Type },
    std::pair{ "zwyz"_h, &Float32x4Type },
    std::pair{ "zwwz"_h, &Float32x4Type },
    std::pair{ "zwwy"_h, &Float32x4Type },
    std::pair{ "zwwx"_h, &Float32x4Type },
    std::pair{ "zwww"_h, &Float32x4Type },
    std::pair{ "xww"_h, &Float32x3Type },
    std::pair{ "xwx"_h, &Float32x3Type },
    std::pair{ "xwy"_h, &Float32x3Type },
    std::pair{ "xwz"_h, &Float32x3Type },
    std::pair{ "xzw"_h, &Float32x3Type },
    std::pair{ "xzz"_h, &Float32x3Type },
    std::pair{ "xzy"_h, &Float32x3Type },
    std::pair{ "xzx"_h, &Float32x3Type },
    std::pair{ "xyz"_h, &Float32x3Type },
    std::pair{ "xyx"_h, &Float32x3Type },
    std::pair{ "xyy"_h, &Float32x3Type },
    std::pair{ "xyw"_h, &Float32x3Type },
    std::pair{ "xxy"_h, &Float32x3Type },
    std::pair{ "xxx"_h, &Float32x3Type },
    std::pair{ "xxz"_h, &Float32x3Type },
    std::pair{ "xxw"_h, &Float32x3Type },
    std::pair{ "operator*=(f32x4)"_h, &Float32x4_operator_mulasg_Float32x4 },
    std::pair{ "zyx"_h, &Float32x3Type },
    std::pair{ "zyy"_h, &Float32x3Type },
    std::pair{ "zyz"_h, &Float32x3Type },
    std::pair{ "zyw"_h, &Float32x3Type },
    std::pair{ "zxz"_h, &Float32x3Type },
    std::pair{ "zxy"_h, &Float32x3Type },
    std::pair{ "zxx"_h, &Float32x3Type },
    std::pair{ "zxw"_h, &Float32x3Type },
    std::pair{ "zzw"_h, &Float32x3Type },
    std::pair{ "zzy"_h, &Float32x3Type },
    std::pair{ "zzx"_h, &Float32x3Type },
    std::pair{ "zzz"_h, &Float32x3Type },
    std::pair{ "zwz"_h, &Float32x3Type },
    std::pair{ "zwx"_h, &Float32x3Type },
    std::pair{ "zwy"_h, &Float32x3Type },
    std::pair{ "zww"_h, &Float32x3Type },
    std::pair{ "ggr"_h, &Float32x3Type },
    std::pair{ "ggb"_h, &Float32x3Type },
    std::pair{ "gga"_h, &Float32x3Type },
    std::pair{ "ggg"_h, &Float32x3Type },
    std::pair{ "gbg"_h, &Float32x3Type },
    std::pair{ "gba"_h, &Float32x3Type },
    std::pair{ "gbb"_h, &Float32x3Type },
    std::pair{ "gbr"_h, &Float32x3Type },
    std::pair{ "gag"_h, &Float32x3Type },
    std::pair{ "gaa"_h, &Float32x3Type },
    std::pair{ "gab"_h, &Float32x3Type },
    std::pair{ "gar"_h, &Float32x3Type },
    std::pair{ "grr"_h, &Float32x3Type },
    std::pair{ "grg"_h, &Float32x3Type },
    std::pair{ "gra"_h, &Float32x3Type },
    std::pair{ "grb"_h, &Float32x3Type },
    std::pair{ "xwww"_h, &Float32x4Type },
    std::pair{ "xwwy"_h, &Float32x4Type },
    std::pair{ "xwwx"_h, &Float32x4Type },
    std::pair{ "xwwz"_h, &Float32x4Type },
    std::pair{ "xwxx"_h, &Float32x4Type },
    std::pair{ "xwxy"_h, &Float32x4Type },
    std::pair{ "xwxz"_h, &Float32x4Type },
    std::pair{ "xwxw"_h, &Float32x4Type },
    std::pair{ "xwyz"_h, &Float32x4Type },
    std::pair{ "xwyy"_h, &Float32x4Type },
    std::pair{ "xwyx"_h, &Float32x4Type },
    std::pair{ "xwyw"_h, &Float32x4Type },
    std::pair{ "xwzz"_h, &Float32x4Type },
    std::pair{ "xwzx"_h, &Float32x4Type },
    std::pair{ "xwzy"_h, &Float32x4Type },
    std::pair{ "xwzw"_h, &Float32x4Type },
    std::pair{ "operator[]"_h, &Float32x4_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float32x4_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float32x4_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float32x4_operator_index_UInt16 },
    std::pair{ "agrr"_h, &Float32x4Type },
    std::pair{ "agra"_h, &Float32x4Type },
    std::pair{ "agrb"_h, &Float32x4Type },
    std::pair{ "agrg"_h, &Float32x4Type },
    std::pair{ "agar"_h, &Float32x4Type },
    std::pair{ "agaa"_h, &Float32x4Type },
    std::pair{ "agab"_h, &Float32x4Type },
    std::pair{ "agag"_h, &Float32x4Type },
    std::pair{ "agba"_h, &Float32x4Type },
    std::pair{ "agbb"_h, &Float32x4Type },
    std::pair{ "agbg"_h, &Float32x4Type },
    std::pair{ "agbr"_h, &Float32x4Type },
    std::pair{ "aggb"_h, &Float32x4Type },
    std::pair{ "agga"_h, &Float32x4Type },
    std::pair{ "aggg"_h, &Float32x4Type },
    std::pair{ "aggr"_h, &Float32x4Type },
    std::pair{ "operator-=(f32x4)"_h, &Float32x4_operator_subasg_Float32x4 },
    std::pair{ "operator=="_h, &Float32x4_operator_eq_Float32x4 },
    std::pair{ "operator<="_h, &Float32x4_operator_lte_Float32x4 },
    std::pair{ "operator>="_h, &Float32x4_operator_gte_Float32x4 },
    std::pair{ "operator-="_h, &Float32x4_operator_subasg_Float32x4 },
    std::pair{ "operator/="_h, &Float32x4_operator_divasg_Float32x4 },
    std::pair{ "operator+="_h, &Float32x4_operator_addasg_Float32x4 },
    std::pair{ "operator*="_h, &Float32x4_operator_mulasg_Float32x4 },
    std::pair{ "operator!="_h, &Float32x4_operator_neq_Float32x4 },
    std::pair{ "agr"_h, &Float32x3Type },
    std::pair{ "aga"_h, &Float32x3Type },
    std::pair{ "agb"_h, &Float32x3Type },
    std::pair{ "agg"_h, &Float32x3Type },
    std::pair{ "aar"_h, &Float32x3Type },
    std::pair{ "aag"_h, &Float32x3Type },
    std::pair{ "aab"_h, &Float32x3Type },
    std::pair{ "aaa"_h, &Float32x3Type },
    std::pair{ "abb"_h, &Float32x3Type },
    std::pair{ "aba"_h, &Float32x3Type },
    std::pair{ "abg"_h, &Float32x3Type },
    std::pair{ "abr"_h, &Float32x3Type },
    std::pair{ "arr"_h, &Float32x3Type },
    std::pair{ "arb"_h, &Float32x3Type },
    std::pair{ "ara"_h, &Float32x3Type },
    std::pair{ "arg"_h, &Float32x3Type },
    std::pair{ "operator-(f32x4)"_h, &Float32x4_operator_sub_Float32x4 },
    std::pair{ "operator<(f32x4)"_h, &Float32x4_operator_lt_Float32x4 },
    std::pair{ "operator/=(f32x4)"_h, &Float32x4_operator_divasg_Float32x4 },
    std::pair{ "aarr"_h, &Float32x4Type },
    std::pair{ "aarg"_h, &Float32x4Type },
    std::pair{ "aarb"_h, &Float32x4Type },
    std::pair{ "aara"_h, &Float32x4Type },
    std::pair{ "aagr"_h, &Float32x4Type },
    std::pair{ "aaga"_h, &Float32x4Type },
    std::pair{ "aagb"_h, &Float32x4Type },
    std::pair{ "aagg"_h, &Float32x4Type },
    std::pair{ "aabg"_h, &Float32x4Type },
    std::pair{ "aabb"_h, &Float32x4Type },
    std::pair{ "aaba"_h, &Float32x4Type },
    std::pair{ "aabr"_h, &Float32x4Type },
    std::pair{ "aaab"_h, &Float32x4Type },
    std::pair{ "aaaa"_h, &Float32x4Type },
    std::pair{ "aaag"_h, &Float32x4Type },
    std::pair{ "aaar"_h, &Float32x4Type },
    std::pair{ "operator/(f32x4)"_h, &Float32x4_operator_div_Float32x4 },
    std::pair{ "operator[](i32)"_h, &Float32x4_operator_index_Int32 },
    std::pair{ "grrb"_h, &Float32x4Type },
    std::pair{ "grra"_h, &Float32x4Type },
    std::pair{ "grrg"_h, &Float32x4Type },
    std::pair{ "grrr"_h, &Float32x4Type },
    std::pair{ "grga"_h, &Float32x4Type },
    std::pair{ "grgb"_h, &Float32x4Type },
    std::pair{ "grgg"_h, &Float32x4Type },
    std::pair{ "grgr"_h, &Float32x4Type },
    std::pair{ "grag"_h, &Float32x4Type },
    std::pair{ "grab"_h, &Float32x4Type },
    std::pair{ "graa"_h, &Float32x4Type },
    std::pair{ "grar"_h, &Float32x4Type },
    std::pair{ "grbr"_h, &Float32x4Type },
    std::pair{ "grbb"_h, &Float32x4Type },
    std::pair{ "grba"_h, &Float32x4Type },
    std::pair{ "grbg"_h, &Float32x4Type },
    std::pair{ "abbr"_h, &Float32x4Type },
    std::pair{ "abba"_h, &Float32x4Type },
    std::pair{ "abbb"_h, &Float32x4Type },
    std::pair{ "abbg"_h, &Float32x4Type },
    std::pair{ "abar"_h, &Float32x4Type },
    std::pair{ "abaa"_h, &Float32x4Type },
    std::pair{ "abab"_h, &Float32x4Type },
    std::pair{ "abag"_h, &Float32x4Type },
    std::pair{ "abgr"_h, &Float32x4Type },
    std::pair{ "abgg"_h, &Float32x4Type },
    std::pair{ "abgb"_h, &Float32x4Type },
    std::pair{ "abga"_h, &Float32x4Type },
    std::pair{ "abra"_h, &Float32x4Type },
    std::pair{ "abrb"_h, &Float32x4Type },
    std::pair{ "abrg"_h, &Float32x4Type },
    std::pair{ "abrr"_h, &Float32x4Type },
    std::pair{ "rrgg"_h, &Float32x4Type },
    std::pair{ "rrgb"_h, &Float32x4Type },
    std::pair{ "rrga"_h, &Float32x4Type },
    std::pair{ "rrgr"_h, &Float32x4Type },
    std::pair{ "rrag"_h, &Float32x4Type },
    std::pair{ "rraa"_h, &Float32x4Type },
    std::pair{ "rrab"_h, &Float32x4Type },
    std::pair{ "rrar"_h, &Float32x4Type },
    std::pair{ "rrbg"_h, &Float32x4Type },
    std::pair{ "rrba"_h, &Float32x4Type },
    std::pair{ "rrbb"_h, &Float32x4Type },
    std::pair{ "rrbr"_h, &Float32x4Type },
    std::pair{ "rrrr"_h, &Float32x4Type },
    std::pair{ "rrrg"_h, &Float32x4Type },
    std::pair{ "rrra"_h, &Float32x4Type },
    std::pair{ "rrrb"_h, &Float32x4Type }
    };

Float32x4::Float32x4()
{
    this->name = "f32x4"_c;
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x4_operator_index_Int32_arg.name = "arg"_c;
    Float32x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x4_operator_index_Int32.name = Float32x4_operator_index_Int32_name;
    Float32x4_operator_index_Int32.backendIndex = 818;
    Float32x4_operator_index_Int32.returnType = Type::FullType { Float32Type.name };
    Float32x4_operator_index_Int32.parameters = Float32x4_operator_index_Int32_args;
    Symbol::Resolved(&Float32x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4_operator_index_Int32)->signature = "operator[](i32) f32"_c;
    Symbol::Resolved(&Float32x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x4_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float32x4_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt32
    Float32x4_operator_index_UInt32_arg.name = "arg"_c;
    Float32x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x4_operator_index_UInt32.name = Float32x4_operator_index_UInt32_name;
    Float32x4_operator_index_UInt32.backendIndex = 819;
    Float32x4_operator_index_UInt32.returnType = Type::FullType { Float32Type.name };
    Float32x4_operator_index_UInt32.parameters = Float32x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4_operator_index_UInt32)->signature = "operator[](u32) f32"_c;
    Symbol::Resolved(&Float32x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x4_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float32x4_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    /// operator[] with Int16
    Float32x4_operator_index_Int16_arg.name = "arg"_c;
    Float32x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x4_operator_index_Int16.name = Float32x4_operator_index_Int16_name;
    Float32x4_operator_index_Int16.backendIndex = 820;
    Float32x4_operator_index_Int16.returnType = Type::FullType { Float32Type.name };
    Float32x4_operator_index_Int16.parameters = Float32x4_operator_index_Int16_args;
    Symbol::Resolved(&Float32x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x4_operator_index_Int16)->signature = "operator[](i16) f32"_c;
    Symbol::Resolved(&Float32x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x4_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float32x4_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt16
    Float32x4_operator_index_UInt16_arg.name = "arg"_c;
    Float32x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x4_operator_index_UInt16.name = Float32x4_operator_index_UInt16_name;
    Float32x4_operator_index_UInt16.backendIndex = 821;
    Float32x4_operator_index_UInt16.returnType = Type::FullType { Float32Type.name };
    Float32x4_operator_index_UInt16.parameters = Float32x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x4_operator_index_UInt16)->signature = "operator[](u16) f32"_c;
    Symbol::Resolved(&Float32x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x4_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float32x4_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    /// operator+ with Float32x4
    Float32x4_operator_add_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_add_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_add_Float32x4.name = Float32x4_operator_add_Float32x4_name;
    Float32x4_operator_add_Float32x4.backendIndex = 822;
    Float32x4_operator_add_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_add_Float32x4.parameters = Float32x4_operator_add_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_add_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_add_Float32x4)->signature = "operator+(f32x4) f32x4"_c;
    Symbol::Resolved(&Float32x4_operator_add_Float32x4)->name = "operator+(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_add_Float32x4)->nameWithVarNames = "operator+(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_add_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator- with Float32x4
    Float32x4_operator_sub_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_sub_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_sub_Float32x4.name = Float32x4_operator_sub_Float32x4_name;
    Float32x4_operator_sub_Float32x4.backendIndex = 823;
    Float32x4_operator_sub_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_sub_Float32x4.parameters = Float32x4_operator_sub_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_sub_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_sub_Float32x4)->signature = "operator-(f32x4) f32x4"_c;
    Symbol::Resolved(&Float32x4_operator_sub_Float32x4)->name = "operator-(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_sub_Float32x4)->nameWithVarNames = "operator-(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_sub_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Float32x4
    Float32x4_operator_mul_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_mul_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_mul_Float32x4.name = Float32x4_operator_mul_Float32x4_name;
    Float32x4_operator_mul_Float32x4.backendIndex = 824;
    Float32x4_operator_mul_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_mul_Float32x4.parameters = Float32x4_operator_mul_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4)->signature = "operator*(f32x4) f32x4"_c;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4)->name = "operator*(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4)->nameWithVarNames = "operator*(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator/ with Float32x4
    Float32x4_operator_div_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_div_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_div_Float32x4.name = Float32x4_operator_div_Float32x4_name;
    Float32x4_operator_div_Float32x4.backendIndex = 825;
    Float32x4_operator_div_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_div_Float32x4.parameters = Float32x4_operator_div_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_div_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_div_Float32x4)->signature = "operator/(f32x4) f32x4"_c;
    Symbol::Resolved(&Float32x4_operator_div_Float32x4)->name = "operator/(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_div_Float32x4)->nameWithVarNames = "operator/(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_div_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator% with Float32x4
    Float32x4_operator_mod_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_mod_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_mod_Float32x4.name = Float32x4_operator_mod_Float32x4_name;
    Float32x4_operator_mod_Float32x4.backendIndex = 826;
    Float32x4_operator_mod_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_mod_Float32x4.parameters = Float32x4_operator_mod_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_mod_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_mod_Float32x4)->signature = "operator%(f32x4) f32x4"_c;
    Symbol::Resolved(&Float32x4_operator_mod_Float32x4)->name = "operator%(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_mod_Float32x4)->nameWithVarNames = "operator%(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_mod_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator+= with Float32x4
    Float32x4_operator_addasg_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_addasg_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_addasg_Float32x4.name = Float32x4_operator_addasg_Float32x4_name;
    Float32x4_operator_addasg_Float32x4.backendIndex = 827;
    Float32x4_operator_addasg_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_addasg_Float32x4.parameters = Float32x4_operator_addasg_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_addasg_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_addasg_Float32x4)->signature = "operator+=(f32x4) f32x4"_c;
    Symbol::Resolved(&Float32x4_operator_addasg_Float32x4)->name = "operator+=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_addasg_Float32x4)->nameWithVarNames = "operator+=(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_addasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator-= with Float32x4
    Float32x4_operator_subasg_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_subasg_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_subasg_Float32x4.name = Float32x4_operator_subasg_Float32x4_name;
    Float32x4_operator_subasg_Float32x4.backendIndex = 828;
    Float32x4_operator_subasg_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_subasg_Float32x4.parameters = Float32x4_operator_subasg_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_subasg_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_subasg_Float32x4)->signature = "operator-=(f32x4) f32x4"_c;
    Symbol::Resolved(&Float32x4_operator_subasg_Float32x4)->name = "operator-=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_subasg_Float32x4)->nameWithVarNames = "operator-=(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_subasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator*= with Float32x4
    Float32x4_operator_mulasg_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_mulasg_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_mulasg_Float32x4.name = Float32x4_operator_mulasg_Float32x4_name;
    Float32x4_operator_mulasg_Float32x4.backendIndex = 829;
    Float32x4_operator_mulasg_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_mulasg_Float32x4.parameters = Float32x4_operator_mulasg_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_mulasg_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_mulasg_Float32x4)->signature = "operator*=(f32x4) f32x4"_c;
    Symbol::Resolved(&Float32x4_operator_mulasg_Float32x4)->name = "operator*=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_mulasg_Float32x4)->nameWithVarNames = "operator*=(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_mulasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator/= with Float32x4
    Float32x4_operator_divasg_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_divasg_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_divasg_Float32x4.name = Float32x4_operator_divasg_Float32x4_name;
    Float32x4_operator_divasg_Float32x4.backendIndex = 830;
    Float32x4_operator_divasg_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_divasg_Float32x4.parameters = Float32x4_operator_divasg_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_divasg_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_divasg_Float32x4)->signature = "operator/=(f32x4) f32x4"_c;
    Symbol::Resolved(&Float32x4_operator_divasg_Float32x4)->name = "operator/=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_divasg_Float32x4)->nameWithVarNames = "operator/=(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_divasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator< with Float32x4
    Float32x4_operator_lt_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_lt_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_lt_Float32x4.name = Float32x4_operator_lt_Float32x4_name;
    Float32x4_operator_lt_Float32x4.backendIndex = 831;
    Float32x4_operator_lt_Float32x4.returnType = Type::FullType { Bool8x4Type.name };
    Float32x4_operator_lt_Float32x4.parameters = Float32x4_operator_lt_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_lt_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_lt_Float32x4)->signature = "operator<(f32x4) b8x4"_c;
    Symbol::Resolved(&Float32x4_operator_lt_Float32x4)->name = "operator<(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_lt_Float32x4)->nameWithVarNames = "operator<(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_lt_Float32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator<= with Float32x4
    Float32x4_operator_lte_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_lte_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_lte_Float32x4.name = Float32x4_operator_lte_Float32x4_name;
    Float32x4_operator_lte_Float32x4.backendIndex = 832;
    Float32x4_operator_lte_Float32x4.returnType = Type::FullType { Bool8x4Type.name };
    Float32x4_operator_lte_Float32x4.parameters = Float32x4_operator_lte_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_lte_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_lte_Float32x4)->signature = "operator<=(f32x4) b8x4"_c;
    Symbol::Resolved(&Float32x4_operator_lte_Float32x4)->name = "operator<=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_lte_Float32x4)->nameWithVarNames = "operator<=(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_lte_Float32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator> with Float32x4
    Float32x4_operator_gt_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_gt_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_gt_Float32x4.name = Float32x4_operator_gt_Float32x4_name;
    Float32x4_operator_gt_Float32x4.backendIndex = 833;
    Float32x4_operator_gt_Float32x4.returnType = Type::FullType { Bool8x4Type.name };
    Float32x4_operator_gt_Float32x4.parameters = Float32x4_operator_gt_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_gt_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_gt_Float32x4)->signature = "operator>(f32x4) b8x4"_c;
    Symbol::Resolved(&Float32x4_operator_gt_Float32x4)->name = "operator>(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_gt_Float32x4)->nameWithVarNames = "operator>(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_gt_Float32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator>= with Float32x4
    Float32x4_operator_gte_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_gte_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_gte_Float32x4.name = Float32x4_operator_gte_Float32x4_name;
    Float32x4_operator_gte_Float32x4.backendIndex = 834;
    Float32x4_operator_gte_Float32x4.returnType = Type::FullType { Bool8x4Type.name };
    Float32x4_operator_gte_Float32x4.parameters = Float32x4_operator_gte_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_gte_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_gte_Float32x4)->signature = "operator>=(f32x4) b8x4"_c;
    Symbol::Resolved(&Float32x4_operator_gte_Float32x4)->name = "operator>=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_gte_Float32x4)->nameWithVarNames = "operator>=(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_gte_Float32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator== with Float32x4
    Float32x4_operator_eq_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_eq_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_eq_Float32x4.name = Float32x4_operator_eq_Float32x4_name;
    Float32x4_operator_eq_Float32x4.backendIndex = 835;
    Float32x4_operator_eq_Float32x4.returnType = Type::FullType { Bool8x4Type.name };
    Float32x4_operator_eq_Float32x4.parameters = Float32x4_operator_eq_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_eq_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_eq_Float32x4)->signature = "operator==(f32x4) b8x4"_c;
    Symbol::Resolved(&Float32x4_operator_eq_Float32x4)->name = "operator==(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_eq_Float32x4)->nameWithVarNames = "operator==(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_eq_Float32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator!= with Float32x4
    Float32x4_operator_neq_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_neq_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_neq_Float32x4.name = Float32x4_operator_neq_Float32x4_name;
    Float32x4_operator_neq_Float32x4.backendIndex = 836;
    Float32x4_operator_neq_Float32x4.returnType = Type::FullType { Bool8x4Type.name };
    Float32x4_operator_neq_Float32x4.parameters = Float32x4_operator_neq_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_neq_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_neq_Float32x4)->signature = "operator!=(f32x4) b8x4"_c;
    Symbol::Resolved(&Float32x4_operator_neq_Float32x4)->name = "operator!=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_neq_Float32x4)->nameWithVarNames = "operator!=(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_neq_Float32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator* with Float32
    Float32x4_operator_scale_Float32_arg.name = "arg"_c;
    Float32x4_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x4_operator_scale_Float32.name = Float32x4_operator_scale_Float32_name;
    Float32x4_operator_scale_Float32.backendIndex = 837;
    Float32x4_operator_scale_Float32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_scale_Float32.parameters = Float32x4_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x4_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_operator_scale_Float32)->signature = "operator*(f32) f32x4"_c;
    Symbol::Resolved(&Float32x4_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x4_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x4_operator_scale_Float32)->returnTypeSymbol = &Float32x4Type;

    /// operator* with UInt32
    Float32x4_operator_scale_UInt32_arg.name = "arg"_c;
    Float32x4_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x4_operator_scale_UInt32.name = Float32x4_operator_scale_UInt32_name;
    Float32x4_operator_scale_UInt32.backendIndex = 838;
    Float32x4_operator_scale_UInt32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_scale_UInt32.parameters = Float32x4_operator_scale_UInt32_args;
    Symbol::Resolved(&Float32x4_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4_operator_scale_UInt32)->signature = "operator*(u32) f32x4"_c;
    Symbol::Resolved(&Float32x4_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&Float32x4_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&Float32x4_operator_scale_UInt32)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Int32
    Float32x4_operator_scale_Int32_arg.name = "arg"_c;
    Float32x4_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x4_operator_scale_Int32.name = Float32x4_operator_scale_Int32_name;
    Float32x4_operator_scale_Int32.backendIndex = 839;
    Float32x4_operator_scale_Int32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_scale_Int32.parameters = Float32x4_operator_scale_Int32_args;
    Symbol::Resolved(&Float32x4_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4_operator_scale_Int32)->signature = "operator*(i32) f32x4"_c;
    Symbol::Resolved(&Float32x4_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&Float32x4_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&Float32x4_operator_scale_Int32)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Float32x4x2
    Float32x4_operator_transform_Float32x4x2_arg.name = "arg"_c;
    Float32x4_operator_transform_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4_operator_transform_Float32x4x2.name = Float32x4_operator_transform_Float32x4x2_name;
    Float32x4_operator_transform_Float32x4x2.backendIndex = 840;
    Float32x4_operator_transform_Float32x4x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x4_operator_transform_Float32x4x2.parameters = Float32x4_operator_transform_Float32x4x2_args;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x2)->signature = "operator*(f32x4x2) f32x2"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x2)->name = "operator*(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x2)->nameWithVarNames = "operator*(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x2)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x4x3
    Float32x4_operator_transform_Float32x4x3_arg.name = "arg"_c;
    Float32x4_operator_transform_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4_operator_transform_Float32x4x3.name = Float32x4_operator_transform_Float32x4x3_name;
    Float32x4_operator_transform_Float32x4x3.backendIndex = 841;
    Float32x4_operator_transform_Float32x4x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x4_operator_transform_Float32x4x3.parameters = Float32x4_operator_transform_Float32x4x3_args;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x3)->signature = "operator*(f32x4x3) f32x3"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x3)->name = "operator*(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x3)->nameWithVarNames = "operator*(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x3)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x4x4
    Float32x4_operator_transform_Float32x4x4_arg.name = "arg"_c;
    Float32x4_operator_transform_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4_operator_transform_Float32x4x4.name = Float32x4_operator_transform_Float32x4x4_name;
    Float32x4_operator_transform_Float32x4x4.backendIndex = 842;
    Float32x4_operator_transform_Float32x4x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_transform_Float32x4x4.parameters = Float32x4_operator_transform_Float32x4x4_args;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x4)->signature = "operator*(f32x4x4) f32x4"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x4)->name = "operator*(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x4)->nameWithVarNames = "operator*(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x4)->returnTypeSymbol = &Float32x4Type;

    this->scope.symbolLookup = Float32x4_symbolLookup;
}
Float32x4 Float32x4Type;

/// operator[] with Int32
Variable UInt32x4_operator_index_Int32_arg;
Function UInt32x4_operator_index_Int32;
inline constexpr std::array UInt32x4_operator_index_Int32_args = { &UInt32x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt32x4_operator_index_UInt32_arg;
Function UInt32x4_operator_index_UInt32;
inline constexpr std::array UInt32x4_operator_index_UInt32_args = { &UInt32x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt32x4_operator_index_Int16_arg;
Function UInt32x4_operator_index_Int16;
inline constexpr std::array UInt32x4_operator_index_Int16_args = { &UInt32x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt32x4_operator_index_UInt16_arg;
Function UInt32x4_operator_index_UInt16;
inline constexpr std::array UInt32x4_operator_index_UInt16_args = { &UInt32x4_operator_index_UInt16_arg };

/// operator+ with UInt32x4
Variable UInt32x4_operator_add_UInt32x4_arg;
Function UInt32x4_operator_add_UInt32x4;
inline constexpr std::array UInt32x4_operator_add_UInt32x4_args = { &UInt32x4_operator_add_UInt32x4_arg };

/// operator- with UInt32x4
Variable UInt32x4_operator_sub_UInt32x4_arg;
Function UInt32x4_operator_sub_UInt32x4;
inline constexpr std::array UInt32x4_operator_sub_UInt32x4_args = { &UInt32x4_operator_sub_UInt32x4_arg };

/// operator* with UInt32x4
Variable UInt32x4_operator_mul_UInt32x4_arg;
Function UInt32x4_operator_mul_UInt32x4;
inline constexpr std::array UInt32x4_operator_mul_UInt32x4_args = { &UInt32x4_operator_mul_UInt32x4_arg };

/// operator/ with UInt32x4
Variable UInt32x4_operator_div_UInt32x4_arg;
Function UInt32x4_operator_div_UInt32x4;
inline constexpr std::array UInt32x4_operator_div_UInt32x4_args = { &UInt32x4_operator_div_UInt32x4_arg };

/// operator% with UInt32x4
Variable UInt32x4_operator_mod_UInt32x4_arg;
Function UInt32x4_operator_mod_UInt32x4;
inline constexpr std::array UInt32x4_operator_mod_UInt32x4_args = { &UInt32x4_operator_mod_UInt32x4_arg };

/// operator+= with UInt32x4
Variable UInt32x4_operator_addasg_UInt32x4_arg;
Function UInt32x4_operator_addasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_addasg_UInt32x4_args = { &UInt32x4_operator_addasg_UInt32x4_arg };

/// operator-= with UInt32x4
Variable UInt32x4_operator_subasg_UInt32x4_arg;
Function UInt32x4_operator_subasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_subasg_UInt32x4_args = { &UInt32x4_operator_subasg_UInt32x4_arg };

/// operator*= with UInt32x4
Variable UInt32x4_operator_mulasg_UInt32x4_arg;
Function UInt32x4_operator_mulasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_mulasg_UInt32x4_args = { &UInt32x4_operator_mulasg_UInt32x4_arg };

/// operator/= with UInt32x4
Variable UInt32x4_operator_divasg_UInt32x4_arg;
Function UInt32x4_operator_divasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_divasg_UInt32x4_args = { &UInt32x4_operator_divasg_UInt32x4_arg };

/// operator< with UInt32x4
Variable UInt32x4_operator_lt_UInt32x4_arg;
Function UInt32x4_operator_lt_UInt32x4;
inline constexpr std::array UInt32x4_operator_lt_UInt32x4_args = { &UInt32x4_operator_lt_UInt32x4_arg };

/// operator<= with UInt32x4
Variable UInt32x4_operator_lte_UInt32x4_arg;
Function UInt32x4_operator_lte_UInt32x4;
inline constexpr std::array UInt32x4_operator_lte_UInt32x4_args = { &UInt32x4_operator_lte_UInt32x4_arg };

/// operator> with UInt32x4
Variable UInt32x4_operator_gt_UInt32x4_arg;
Function UInt32x4_operator_gt_UInt32x4;
inline constexpr std::array UInt32x4_operator_gt_UInt32x4_args = { &UInt32x4_operator_gt_UInt32x4_arg };

/// operator>= with UInt32x4
Variable UInt32x4_operator_gte_UInt32x4_arg;
Function UInt32x4_operator_gte_UInt32x4;
inline constexpr std::array UInt32x4_operator_gte_UInt32x4_args = { &UInt32x4_operator_gte_UInt32x4_arg };

/// operator== with UInt32x4
Variable UInt32x4_operator_eq_UInt32x4_arg;
Function UInt32x4_operator_eq_UInt32x4;
inline constexpr std::array UInt32x4_operator_eq_UInt32x4_args = { &UInt32x4_operator_eq_UInt32x4_arg };

/// operator!= with UInt32x4
Variable UInt32x4_operator_neq_UInt32x4_arg;
Function UInt32x4_operator_neq_UInt32x4;
inline constexpr std::array UInt32x4_operator_neq_UInt32x4_args = { &UInt32x4_operator_neq_UInt32x4_arg };

/// operator* with Float32
Variable UInt32x4_operator_scale_Float32_arg;
Function UInt32x4_operator_scale_Float32;
inline constexpr std::array UInt32x4_operator_scale_Float32_args = { &UInt32x4_operator_scale_Float32_arg };

/// operator* with UInt32
Variable UInt32x4_operator_scale_UInt32_arg;
Function UInt32x4_operator_scale_UInt32;
inline constexpr std::array UInt32x4_operator_scale_UInt32_args = { &UInt32x4_operator_scale_UInt32_arg };

/// operator* with Int32
Variable UInt32x4_operator_scale_Int32_arg;
Function UInt32x4_operator_scale_Int32;
inline constexpr std::array UInt32x4_operator_scale_Int32_args = { &UInt32x4_operator_scale_Int32_arg };

/// operator| with UInt32x4
Variable UInt32x4_operator_or_UInt32x4_arg;
Function UInt32x4_operator_or_UInt32x4;
inline constexpr std::array UInt32x4_operator_or_UInt32x4_args = { &UInt32x4_operator_or_UInt32x4_arg };

/// operator& with UInt32x4
Variable UInt32x4_operator_and_UInt32x4_arg;
Function UInt32x4_operator_and_UInt32x4;
inline constexpr std::array UInt32x4_operator_and_UInt32x4_args = { &UInt32x4_operator_and_UInt32x4_arg };

/// operator^ with UInt32x4
Variable UInt32x4_operator_xor_UInt32x4_arg;
Function UInt32x4_operator_xor_UInt32x4;
inline constexpr std::array UInt32x4_operator_xor_UInt32x4_args = { &UInt32x4_operator_xor_UInt32x4_arg };

/// operator<< with UInt32x4
Variable UInt32x4_operator_lsh_UInt32x4_arg;
Function UInt32x4_operator_lsh_UInt32x4;
inline constexpr std::array UInt32x4_operator_lsh_UInt32x4_args = { &UInt32x4_operator_lsh_UInt32x4_arg };

/// operator>> with UInt32x4
Variable UInt32x4_operator_rsh_UInt32x4_arg;
Function UInt32x4_operator_rsh_UInt32x4;
inline constexpr std::array UInt32x4_operator_rsh_UInt32x4_args = { &UInt32x4_operator_rsh_UInt32x4_arg };

/// operator|= with UInt32x4
Variable UInt32x4_operator_orasg_UInt32x4_arg;
Function UInt32x4_operator_orasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_orasg_UInt32x4_args = { &UInt32x4_operator_orasg_UInt32x4_arg };

/// operator&= with UInt32x4
Variable UInt32x4_operator_andasg_UInt32x4_arg;
Function UInt32x4_operator_andasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_andasg_UInt32x4_args = { &UInt32x4_operator_andasg_UInt32x4_arg };

/// operator^= with UInt32x4
Variable UInt32x4_operator_xorasg_UInt32x4_arg;
Function UInt32x4_operator_xorasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_xorasg_UInt32x4_args = { &UInt32x4_operator_xorasg_UInt32x4_arg };

/// operator<<= with UInt32x4
Variable UInt32x4_operator_lshasg_UInt32x4_arg;
Function UInt32x4_operator_lshasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_lshasg_UInt32x4_args = { &UInt32x4_operator_lshasg_UInt32x4_arg };

/// operator>>= with UInt32x4
Variable UInt32x4_operator_rhsasg_UInt32x4_arg;
Function UInt32x4_operator_rhsasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_rhsasg_UInt32x4_args = { &UInt32x4_operator_rhsasg_UInt32x4_arg };

static constexpr StaticMap<HashString, Symbol*, 744> UInt32x4_symbolLookup = {
    std::pair{ "wzwy"_h, &UInt32x4Type },
    std::pair{ "wzwx"_h, &UInt32x4Type },
    std::pair{ "wzwz"_h, &UInt32x4Type },
    std::pair{ "wzww"_h, &UInt32x4Type },
    std::pair{ "bgg"_h, &UInt32x3Type },
    std::pair{ "bgb"_h, &UInt32x3Type },
    std::pair{ "bga"_h, &UInt32x3Type },
    std::pair{ "bgr"_h, &UInt32x3Type },
    std::pair{ "bag"_h, &UInt32x3Type },
    std::pair{ "baa"_h, &UInt32x3Type },
    std::pair{ "bab"_h, &UInt32x3Type },
    std::pair{ "bar"_h, &UInt32x3Type },
    std::pair{ "bbg"_h, &UInt32x3Type },
    std::pair{ "bba"_h, &UInt32x3Type },
    std::pair{ "bbb"_h, &UInt32x3Type },
    std::pair{ "bbr"_h, &UInt32x3Type },
    std::pair{ "wzxw"_h, &UInt32x4Type },
    std::pair{ "wzxx"_h, &UInt32x4Type },
    std::pair{ "wzxy"_h, &UInt32x4Type },
    std::pair{ "wzxz"_h, &UInt32x4Type },
    std::pair{ "wzyw"_h, &UInt32x4Type },
    std::pair{ "wzyz"_h, &UInt32x4Type },
    std::pair{ "wzyy"_h, &UInt32x4Type },
    std::pair{ "wzyx"_h, &UInt32x4Type },
    std::pair{ "wzzz"_h, &UInt32x4Type },
    std::pair{ "wzzx"_h, &UInt32x4Type },
    std::pair{ "wzzy"_h, &UInt32x4Type },
    std::pair{ "wzzw"_h, &UInt32x4Type },
    std::pair{ "brr"_h, &UInt32x3Type },
    std::pair{ "brg"_h, &UInt32x3Type },
    std::pair{ "bra"_h, &UInt32x3Type },
    std::pair{ "brb"_h, &UInt32x3Type },
    std::pair{ "operator==(u32x4)"_h, &UInt32x4_operator_eq_UInt32x4 },
    std::pair{ "ywyw"_h, &UInt32x4Type },
    std::pair{ "ywyx"_h, &UInt32x4Type },
    std::pair{ "ywyy"_h, &UInt32x4Type },
    std::pair{ "ywyz"_h, &UInt32x4Type },
    std::pair{ "ywxw"_h, &UInt32x4Type },
    std::pair{ "ywxz"_h, &UInt32x4Type },
    std::pair{ "ywxy"_h, &UInt32x4Type },
    std::pair{ "ywxx"_h, &UInt32x4Type },
    std::pair{ "ywzy"_h, &UInt32x4Type },
    std::pair{ "ywzx"_h, &UInt32x4Type },
    std::pair{ "ywzz"_h, &UInt32x4Type },
    std::pair{ "ywzw"_h, &UInt32x4Type },
    std::pair{ "ywwz"_h, &UInt32x4Type },
    std::pair{ "ywwx"_h, &UInt32x4Type },
    std::pair{ "ywwy"_h, &UInt32x4Type },
    std::pair{ "ywww"_h, &UInt32x4Type },
    std::pair{ "gg"_h, &UInt32x2Type },
    std::pair{ "gb"_h, &UInt32x2Type },
    std::pair{ "ga"_h, &UInt32x2Type },
    std::pair{ "gr"_h, &UInt32x2Type },
    std::pair{ "ag"_h, &UInt32x2Type },
    std::pair{ "aa"_h, &UInt32x2Type },
    std::pair{ "ab"_h, &UInt32x2Type },
    std::pair{ "ar"_h, &UInt32x2Type },
    std::pair{ "bg"_h, &UInt32x2Type },
    std::pair{ "ba"_h, &UInt32x2Type },
    std::pair{ "bb"_h, &UInt32x2Type },
    std::pair{ "br"_h, &UInt32x2Type },
    std::pair{ "ww"_h, &UInt32x2Type },
    std::pair{ "wz"_h, &UInt32x2Type },
    std::pair{ "wx"_h, &UInt32x2Type },
    std::pair{ "wy"_h, &UInt32x2Type },
    std::pair{ "rr"_h, &UInt32x2Type },
    std::pair{ "rg"_h, &UInt32x2Type },
    std::pair{ "ra"_h, &UInt32x2Type },
    std::pair{ "rb"_h, &UInt32x2Type },
    std::pair{ "yw"_h, &UInt32x2Type },
    std::pair{ "yx"_h, &UInt32x2Type },
    std::pair{ "yy"_h, &UInt32x2Type },
    std::pair{ "yz"_h, &UInt32x2Type },
    std::pair{ "xw"_h, &UInt32x2Type },
    std::pair{ "xz"_h, &UInt32x2Type },
    std::pair{ "xy"_h, &UInt32x2Type },
    std::pair{ "xx"_h, &UInt32x2Type },
    std::pair{ "zy"_h, &UInt32x2Type },
    std::pair{ "zx"_h, &UInt32x2Type },
    std::pair{ "zz"_h, &UInt32x2Type },
    std::pair{ "zw"_h, &UInt32x2Type },
    std::pair{ "operator[](i16)"_h, &UInt32x4_operator_index_Int16 },
    std::pair{ "wxzw"_h, &UInt32x4Type },
    std::pair{ "wxzx"_h, &UInt32x4Type },
    std::pair{ "wxzy"_h, &UInt32x4Type },
    std::pair{ "wxzz"_h, &UInt32x4Type },
    std::pair{ "wxxw"_h, &UInt32x4Type },
    std::pair{ "wxxz"_h, &UInt32x4Type },
    std::pair{ "wxxx"_h, &UInt32x4Type },
    std::pair{ "wxxy"_h, &UInt32x4Type },
    std::pair{ "wxyy"_h, &UInt32x4Type },
    std::pair{ "wxyx"_h, &UInt32x4Type },
    std::pair{ "wxyz"_h, &UInt32x4Type },
    std::pair{ "wxyw"_h, &UInt32x4Type },
    std::pair{ "wxww"_h, &UInt32x4Type },
    std::pair{ "wxwz"_h, &UInt32x4Type },
    std::pair{ "wxwy"_h, &UInt32x4Type },
    std::pair{ "wxwx"_h, &UInt32x4Type },
    std::pair{ "operator|=(u32x4)"_h, &UInt32x4_operator_orasg_UInt32x4 },
    std::pair{ "operator&(u32x4)"_h, &UInt32x4_operator_and_UInt32x4 },
    std::pair{ "operator>>=(u32x4)"_h, &UInt32x4_operator_rhsasg_UInt32x4 },
    std::pair{ "wyyx"_h, &UInt32x4Type },
    std::pair{ "wyyy"_h, &UInt32x4Type },
    std::pair{ "wyyz"_h, &UInt32x4Type },
    std::pair{ "wyyw"_h, &UInt32x4Type },
    std::pair{ "wyxz"_h, &UInt32x4Type },
    std::pair{ "wyxy"_h, &UInt32x4Type },
    std::pair{ "wyxx"_h, &UInt32x4Type },
    std::pair{ "wyxw"_h, &UInt32x4Type },
    std::pair{ "wyzw"_h, &UInt32x4Type },
    std::pair{ "wyzy"_h, &UInt32x4Type },
    std::pair{ "wyzx"_h, &UInt32x4Type },
    std::pair{ "wyzz"_h, &UInt32x4Type },
    std::pair{ "wywz"_h, &UInt32x4Type },
    std::pair{ "wywx"_h, &UInt32x4Type },
    std::pair{ "wywy"_h, &UInt32x4Type },
    std::pair{ "wyww"_h, &UInt32x4Type },
    std::pair{ "operator*(u32)"_h, &UInt32x4_operator_scale_UInt32 },
    std::pair{ "operator^(u32x4)"_h, &UInt32x4_operator_xor_UInt32x4 },
    std::pair{ "operator<<(u32x4)"_h, &UInt32x4_operator_lsh_UInt32x4 },
    std::pair{ "operator&=(u32x4)"_h, &UInt32x4_operator_andasg_UInt32x4 },
    std::pair{ "brrg"_h, &UInt32x4Type },
    std::pair{ "brra"_h, &UInt32x4Type },
    std::pair{ "brrb"_h, &UInt32x4Type },
    std::pair{ "brrr"_h, &UInt32x4Type },
    std::pair{ "brgr"_h, &UInt32x4Type },
    std::pair{ "brgg"_h, &UInt32x4Type },
    std::pair{ "brgb"_h, &UInt32x4Type },
    std::pair{ "brga"_h, &UInt32x4Type },
    std::pair{ "brar"_h, &UInt32x4Type },
    std::pair{ "brag"_h, &UInt32x4Type },
    std::pair{ "braa"_h, &UInt32x4Type },
    std::pair{ "brab"_h, &UInt32x4Type },
    std::pair{ "brbr"_h, &UInt32x4Type },
    std::pair{ "brbg"_h, &UInt32x4Type },
    std::pair{ "brba"_h, &UInt32x4Type },
    std::pair{ "brbb"_h, &UInt32x4Type },
    std::pair{ "operator-(u32x4)"_h, &UInt32x4_operator_sub_UInt32x4 },
    std::pair{ "operator^"_h, &UInt32x4_operator_xor_UInt32x4 },
    std::pair{ "operator|"_h, &UInt32x4_operator_or_UInt32x4 },
    std::pair{ "operator<"_h, &UInt32x4_operator_lt_UInt32x4 },
    std::pair{ "operator>"_h, &UInt32x4_operator_gt_UInt32x4 },
    std::pair{ "operator-"_h, &UInt32x4_operator_sub_UInt32x4 },
    std::pair{ "operator/"_h, &UInt32x4_operator_div_UInt32x4 },
    std::pair{ "operator+"_h, &UInt32x4_operator_add_UInt32x4 },
    std::pair{ "operator*"_h, &UInt32x4_operator_mul_UInt32x4 },
    std::pair{ "operator*"_h, &UInt32x4_operator_scale_Float32 },
    std::pair{ "operator*"_h, &UInt32x4_operator_scale_UInt32 },
    std::pair{ "operator*"_h, &UInt32x4_operator_scale_Int32 },
    std::pair{ "operator%"_h, &UInt32x4_operator_mod_UInt32x4 },
    std::pair{ "operator&"_h, &UInt32x4_operator_and_UInt32x4 },
    std::pair{ "xzww"_h, &UInt32x4Type },
    std::pair{ "xzwx"_h, &UInt32x4Type },
    std::pair{ "xzwy"_h, &UInt32x4Type },
    std::pair{ "xzwz"_h, &UInt32x4Type },
    std::pair{ "xzzw"_h, &UInt32x4Type },
    std::pair{ "xzzz"_h, &UInt32x4Type },
    std::pair{ "xzzy"_h, &UInt32x4Type },
    std::pair{ "xzzx"_h, &UInt32x4Type },
    std::pair{ "xzyz"_h, &UInt32x4Type },
    std::pair{ "xzyx"_h, &UInt32x4Type },
    std::pair{ "xzyy"_h, &UInt32x4Type },
    std::pair{ "xzyw"_h, &UInt32x4Type },
    std::pair{ "xzxy"_h, &UInt32x4Type },
    std::pair{ "xzxx"_h, &UInt32x4Type },
    std::pair{ "xzxz"_h, &UInt32x4Type },
    std::pair{ "xzxw"_h, &UInt32x4Type },
    std::pair{ "yxwy"_h, &UInt32x4Type },
    std::pair{ "yxwx"_h, &UInt32x4Type },
    std::pair{ "yxwz"_h, &UInt32x4Type },
    std::pair{ "yxww"_h, &UInt32x4Type },
    std::pair{ "yxxw"_h, &UInt32x4Type },
    std::pair{ "yxxx"_h, &UInt32x4Type },
    std::pair{ "yxxy"_h, &UInt32x4Type },
    std::pair{ "yxxz"_h, &UInt32x4Type },
    std::pair{ "yxyw"_h, &UInt32x4Type },
    std::pair{ "yxyz"_h, &UInt32x4Type },
    std::pair{ "yxyy"_h, &UInt32x4Type },
    std::pair{ "yxyx"_h, &UInt32x4Type },
    std::pair{ "yxzz"_h, &UInt32x4Type },
    std::pair{ "yxzx"_h, &UInt32x4Type },
    std::pair{ "yxzy"_h, &UInt32x4Type },
    std::pair{ "yxzw"_h, &UInt32x4Type },
    std::pair{ "xyzw"_h, &UInt32x4Type },
    std::pair{ "xyzx"_h, &UInt32x4Type },
    std::pair{ "xyzy"_h, &UInt32x4Type },
    std::pair{ "xyzz"_h, &UInt32x4Type },
    std::pair{ "xyxw"_h, &UInt32x4Type },
    std::pair{ "xyxz"_h, &UInt32x4Type },
    std::pair{ "xyxx"_h, &UInt32x4Type },
    std::pair{ "xyxy"_h, &UInt32x4Type },
    std::pair{ "xyyy"_h, &UInt32x4Type },
    std::pair{ "xyyx"_h, &UInt32x4Type },
    std::pair{ "xyyz"_h, &UInt32x4Type },
    std::pair{ "xyyw"_h, &UInt32x4Type },
    std::pair{ "xyww"_h, &UInt32x4Type },
    std::pair{ "xywz"_h, &UInt32x4Type },
    std::pair{ "xywy"_h, &UInt32x4Type },
    std::pair{ "xywx"_h, &UInt32x4Type },
    std::pair{ "ggrr"_h, &UInt32x4Type },
    std::pair{ "ggrb"_h, &UInt32x4Type },
    std::pair{ "ggra"_h, &UInt32x4Type },
    std::pair{ "ggrg"_h, &UInt32x4Type },
    std::pair{ "ggbb"_h, &UInt32x4Type },
    std::pair{ "ggba"_h, &UInt32x4Type },
    std::pair{ "ggbg"_h, &UInt32x4Type },
    std::pair{ "ggbr"_h, &UInt32x4Type },
    std::pair{ "ggar"_h, &UInt32x4Type },
    std::pair{ "ggag"_h, &UInt32x4Type },
    std::pair{ "ggab"_h, &UInt32x4Type },
    std::pair{ "ggaa"_h, &UInt32x4Type },
    std::pair{ "gggr"_h, &UInt32x4Type },
    std::pair{ "gggg"_h, &UInt32x4Type },
    std::pair{ "ggga"_h, &UInt32x4Type },
    std::pair{ "gggb"_h, &UInt32x4Type },
    std::pair{ "yyww"_h, &UInt32x4Type },
    std::pair{ "yywx"_h, &UInt32x4Type },
    std::pair{ "yywy"_h, &UInt32x4Type },
    std::pair{ "yywz"_h, &UInt32x4Type },
    std::pair{ "yyzw"_h, &UInt32x4Type },
    std::pair{ "yyzz"_h, &UInt32x4Type },
    std::pair{ "yyzy"_h, &UInt32x4Type },
    std::pair{ "yyzx"_h, &UInt32x4Type },
    std::pair{ "yyyz"_h, &UInt32x4Type },
    std::pair{ "yyyx"_h, &UInt32x4Type },
    std::pair{ "yyyy"_h, &UInt32x4Type },
    std::pair{ "yyyw"_h, &UInt32x4Type },
    std::pair{ "yyxy"_h, &UInt32x4Type },
    std::pair{ "yyxx"_h, &UInt32x4Type },
    std::pair{ "yyxz"_h, &UInt32x4Type },
    std::pair{ "yyxw"_h, &UInt32x4Type },
    std::pair{ "xxyx"_h, &UInt32x4Type },
    std::pair{ "xxyy"_h, &UInt32x4Type },
    std::pair{ "xxyz"_h, &UInt32x4Type },
    std::pair{ "xxyw"_h, &UInt32x4Type },
    std::pair{ "xxxz"_h, &UInt32x4Type },
    std::pair{ "xxxy"_h, &UInt32x4Type },
    std::pair{ "xxxx"_h, &UInt32x4Type },
    std::pair{ "xxxw"_h, &UInt32x4Type },
    std::pair{ "xxzw"_h, &UInt32x4Type },
    std::pair{ "xxzy"_h, &UInt32x4Type },
    std::pair{ "xxzx"_h, &UInt32x4Type },
    std::pair{ "xxzz"_h, &UInt32x4Type },
    std::pair{ "xxwz"_h, &UInt32x4Type },
    std::pair{ "xxwx"_h, &UInt32x4Type },
    std::pair{ "xxwy"_h, &UInt32x4Type },
    std::pair{ "xxww"_h, &UInt32x4Type },
    std::pair{ "rgrg"_h, &UInt32x4Type },
    std::pair{ "rgra"_h, &UInt32x4Type },
    std::pair{ "rgrb"_h, &UInt32x4Type },
    std::pair{ "rgrr"_h, &UInt32x4Type },
    std::pair{ "rggb"_h, &UInt32x4Type },
    std::pair{ "rgga"_h, &UInt32x4Type },
    std::pair{ "rggg"_h, &UInt32x4Type },
    std::pair{ "rggr"_h, &UInt32x4Type },
    std::pair{ "rgbr"_h, &UInt32x4Type },
    std::pair{ "rgbg"_h, &UInt32x4Type },
    std::pair{ "rgba"_h, &UInt32x4Type },
    std::pair{ "rgbb"_h, &UInt32x4Type },
    std::pair{ "rgar"_h, &UInt32x4Type },
    std::pair{ "rgag"_h, &UInt32x4Type },
    std::pair{ "rgaa"_h, &UInt32x4Type },
    std::pair{ "rgab"_h, &UInt32x4Type },
    std::pair{ "www"_h, &UInt32x3Type },
    std::pair{ "wwz"_h, &UInt32x3Type },
    std::pair{ "wwy"_h, &UInt32x3Type },
    std::pair{ "wwx"_h, &UInt32x3Type },
    std::pair{ "wzw"_h, &UInt32x3Type },
    std::pair{ "wzx"_h, &UInt32x3Type },
    std::pair{ "wzy"_h, &UInt32x3Type },
    std::pair{ "wzz"_h, &UInt32x3Type },
    std::pair{ "wxz"_h, &UInt32x3Type },
    std::pair{ "wxx"_h, &UInt32x3Type },
    std::pair{ "wxy"_h, &UInt32x3Type },
    std::pair{ "wxw"_h, &UInt32x3Type },
    std::pair{ "wyy"_h, &UInt32x3Type },
    std::pair{ "wyx"_h, &UInt32x3Type },
    std::pair{ "wyz"_h, &UInt32x3Type },
    std::pair{ "wyw"_h, &UInt32x3Type },
    std::pair{ "yzzw"_h, &UInt32x4Type },
    std::pair{ "yzzx"_h, &UInt32x4Type },
    std::pair{ "yzzy"_h, &UInt32x4Type },
    std::pair{ "yzzz"_h, &UInt32x4Type },
    std::pair{ "yzxw"_h, &UInt32x4Type },
    std::pair{ "yzxz"_h, &UInt32x4Type },
    std::pair{ "yzxx"_h, &UInt32x4Type },
    std::pair{ "yzxy"_h, &UInt32x4Type },
    std::pair{ "yzyy"_h, &UInt32x4Type },
    std::pair{ "yzyx"_h, &UInt32x4Type },
    std::pair{ "yzyz"_h, &UInt32x4Type },
    std::pair{ "yzyw"_h, &UInt32x4Type },
    std::pair{ "yzww"_h, &UInt32x4Type },
    std::pair{ "yzwz"_h, &UInt32x4Type },
    std::pair{ "yzwy"_h, &UInt32x4Type },
    std::pair{ "yzwx"_h, &UInt32x4Type },
    std::pair{ "rarb"_h, &UInt32x4Type },
    std::pair{ "rara"_h, &UInt32x4Type },
    std::pair{ "rarg"_h, &UInt32x4Type },
    std::pair{ "rarr"_h, &UInt32x4Type },
    std::pair{ "raga"_h, &UInt32x4Type },
    std::pair{ "ragb"_h, &UInt32x4Type },
    std::pair{ "ragg"_h, &UInt32x4Type },
    std::pair{ "ragr"_h, &UInt32x4Type },
    std::pair{ "raag"_h, &UInt32x4Type },
    std::pair{ "raab"_h, &UInt32x4Type },
    std::pair{ "raaa"_h, &UInt32x4Type },
    std::pair{ "raar"_h, &UInt32x4Type },
    std::pair{ "rabr"_h, &UInt32x4Type },
    std::pair{ "rabb"_h, &UInt32x4Type },
    std::pair{ "raba"_h, &UInt32x4Type },
    std::pair{ "rabg"_h, &UInt32x4Type },
    std::pair{ "gbgr"_h, &UInt32x4Type },
    std::pair{ "gbga"_h, &UInt32x4Type },
    std::pair{ "gbgb"_h, &UInt32x4Type },
    std::pair{ "gbgg"_h, &UInt32x4Type },
    std::pair{ "gbar"_h, &UInt32x4Type },
    std::pair{ "gbag"_h, &UInt32x4Type },
    std::pair{ "gbab"_h, &UInt32x4Type },
    std::pair{ "gbaa"_h, &UInt32x4Type },
    std::pair{ "gbbb"_h, &UInt32x4Type },
    std::pair{ "gbba"_h, &UInt32x4Type },
    std::pair{ "gbbg"_h, &UInt32x4Type },
    std::pair{ "gbbr"_h, &UInt32x4Type },
    std::pair{ "gbrr"_h, &UInt32x4Type },
    std::pair{ "gbrb"_h, &UInt32x4Type },
    std::pair{ "gbra"_h, &UInt32x4Type },
    std::pair{ "gbrg"_h, &UInt32x4Type },
    std::pair{ "operator-=(u32x4)"_h, &UInt32x4_operator_subasg_UInt32x4 },
    std::pair{ "rbrg"_h, &UInt32x4Type },
    std::pair{ "rbra"_h, &UInt32x4Type },
    std::pair{ "rbrb"_h, &UInt32x4Type },
    std::pair{ "rbrr"_h, &UInt32x4Type },
    std::pair{ "rbgr"_h, &UInt32x4Type },
    std::pair{ "rbgg"_h, &UInt32x4Type },
    std::pair{ "rbgb"_h, &UInt32x4Type },
    std::pair{ "rbga"_h, &UInt32x4Type },
    std::pair{ "rbar"_h, &UInt32x4Type },
    std::pair{ "rbag"_h, &UInt32x4Type },
    std::pair{ "rbaa"_h, &UInt32x4Type },
    std::pair{ "rbab"_h, &UInt32x4Type },
    std::pair{ "rbbr"_h, &UInt32x4Type },
    std::pair{ "rbbg"_h, &UInt32x4Type },
    std::pair{ "rbba"_h, &UInt32x4Type },
    std::pair{ "rbbb"_h, &UInt32x4Type },
    std::pair{ "zyxx"_h, &UInt32x4Type },
    std::pair{ "zyxy"_h, &UInt32x4Type },
    std::pair{ "zyxz"_h, &UInt32x4Type },
    std::pair{ "zyxw"_h, &UInt32x4Type },
    std::pair{ "zyyz"_h, &UInt32x4Type },
    std::pair{ "zyyy"_h, &UInt32x4Type },
    std::pair{ "zyyx"_h, &UInt32x4Type },
    std::pair{ "zyyw"_h, &UInt32x4Type },
    std::pair{ "zyzw"_h, &UInt32x4Type },
    std::pair{ "zyzz"_h, &UInt32x4Type },
    std::pair{ "zyzx"_h, &UInt32x4Type },
    std::pair{ "zyzy"_h, &UInt32x4Type },
    std::pair{ "zyww"_h, &UInt32x4Type },
    std::pair{ "zywy"_h, &UInt32x4Type },
    std::pair{ "zywx"_h, &UInt32x4Type },
    std::pair{ "zywz"_h, &UInt32x4Type },
    std::pair{ "operator/(u32x4)"_h, &UInt32x4_operator_div_UInt32x4 },
    std::pair{ "bggr"_h, &UInt32x4Type },
    std::pair{ "bggb"_h, &UInt32x4Type },
    std::pair{ "bgga"_h, &UInt32x4Type },
    std::pair{ "bggg"_h, &UInt32x4Type },
    std::pair{ "bgbg"_h, &UInt32x4Type },
    std::pair{ "bgba"_h, &UInt32x4Type },
    std::pair{ "bgbb"_h, &UInt32x4Type },
    std::pair{ "bgbr"_h, &UInt32x4Type },
    std::pair{ "bgag"_h, &UInt32x4Type },
    std::pair{ "bgaa"_h, &UInt32x4Type },
    std::pair{ "bgab"_h, &UInt32x4Type },
    std::pair{ "bgar"_h, &UInt32x4Type },
    std::pair{ "bgrr"_h, &UInt32x4Type },
    std::pair{ "bgrg"_h, &UInt32x4Type },
    std::pair{ "bgra"_h, &UInt32x4Type },
    std::pair{ "bgrb"_h, &UInt32x4Type },
    std::pair{ "arrr"_h, &UInt32x4Type },
    std::pair{ "arra"_h, &UInt32x4Type },
    std::pair{ "arrb"_h, &UInt32x4Type },
    std::pair{ "arrg"_h, &UInt32x4Type },
    std::pair{ "arba"_h, &UInt32x4Type },
    std::pair{ "arbb"_h, &UInt32x4Type },
    std::pair{ "arbg"_h, &UInt32x4Type },
    std::pair{ "arbr"_h, &UInt32x4Type },
    std::pair{ "araa"_h, &UInt32x4Type },
    std::pair{ "arab"_h, &UInt32x4Type },
    std::pair{ "arag"_h, &UInt32x4Type },
    std::pair{ "arar"_h, &UInt32x4Type },
    std::pair{ "argg"_h, &UInt32x4Type },
    std::pair{ "argb"_h, &UInt32x4Type },
    std::pair{ "arga"_h, &UInt32x4Type },
    std::pair{ "argr"_h, &UInt32x4Type },
    std::pair{ "rrg"_h, &UInt32x3Type },
    std::pair{ "rra"_h, &UInt32x3Type },
    std::pair{ "rrb"_h, &UInt32x3Type },
    std::pair{ "rrr"_h, &UInt32x3Type },
    std::pair{ "rgr"_h, &UInt32x3Type },
    std::pair{ "rgg"_h, &UInt32x3Type },
    std::pair{ "rgb"_h, &UInt32x3Type },
    std::pair{ "rga"_h, &UInt32x3Type },
    std::pair{ "rar"_h, &UInt32x3Type },
    std::pair{ "rag"_h, &UInt32x3Type },
    std::pair{ "raa"_h, &UInt32x3Type },
    std::pair{ "rab"_h, &UInt32x3Type },
    std::pair{ "rbr"_h, &UInt32x3Type },
    std::pair{ "rbg"_h, &UInt32x3Type },
    std::pair{ "rba"_h, &UInt32x3Type },
    std::pair{ "rbb"_h, &UInt32x3Type },
    std::pair{ "gagg"_h, &UInt32x4Type },
    std::pair{ "gagb"_h, &UInt32x4Type },
    std::pair{ "gaga"_h, &UInt32x4Type },
    std::pair{ "gagr"_h, &UInt32x4Type },
    std::pair{ "gaag"_h, &UInt32x4Type },
    std::pair{ "gaaa"_h, &UInt32x4Type },
    std::pair{ "gaab"_h, &UInt32x4Type },
    std::pair{ "gaar"_h, &UInt32x4Type },
    std::pair{ "gabg"_h, &UInt32x4Type },
    std::pair{ "gaba"_h, &UInt32x4Type },
    std::pair{ "gabb"_h, &UInt32x4Type },
    std::pair{ "gabr"_h, &UInt32x4Type },
    std::pair{ "garr"_h, &UInt32x4Type },
    std::pair{ "garg"_h, &UInt32x4Type },
    std::pair{ "gara"_h, &UInt32x4Type },
    std::pair{ "garb"_h, &UInt32x4Type },
    std::pair{ "operator[](u32)"_h, &UInt32x4_operator_index_UInt32 },
    std::pair{ "operator<<="_h, &UInt32x4_operator_lshasg_UInt32x4 },
    std::pair{ "zxzz"_h, &UInt32x4Type },
    std::pair{ "zxzy"_h, &UInt32x4Type },
    std::pair{ "zxzx"_h, &UInt32x4Type },
    std::pair{ "zxzw"_h, &UInt32x4Type },
    std::pair{ "zxyw"_h, &UInt32x4Type },
    std::pair{ "zxyz"_h, &UInt32x4Type },
    std::pair{ "zxyx"_h, &UInt32x4Type },
    std::pair{ "zxyy"_h, &UInt32x4Type },
    std::pair{ "zxxw"_h, &UInt32x4Type },
    std::pair{ "zxxy"_h, &UInt32x4Type },
    std::pair{ "zxxx"_h, &UInt32x4Type },
    std::pair{ "zxxz"_h, &UInt32x4Type },
    std::pair{ "zxwx"_h, &UInt32x4Type },
    std::pair{ "zxwy"_h, &UInt32x4Type },
    std::pair{ "zxwz"_h, &UInt32x4Type },
    std::pair{ "zxww"_h, &UInt32x4Type },
    std::pair{ "operator!=(u32x4)"_h, &UInt32x4_operator_neq_UInt32x4 },
    std::pair{ "operator*(f32)"_h, &UInt32x4_operator_scale_Float32 },
    std::pair{ "operator|(u32x4)"_h, &UInt32x4_operator_or_UInt32x4 },
    std::pair{ "operator>>(u32x4)"_h, &UInt32x4_operator_rsh_UInt32x4 },
    std::pair{ "bagr"_h, &UInt32x4Type },
    std::pair{ "baga"_h, &UInt32x4Type },
    std::pair{ "bagb"_h, &UInt32x4Type },
    std::pair{ "bagg"_h, &UInt32x4Type },
    std::pair{ "baar"_h, &UInt32x4Type },
    std::pair{ "baag"_h, &UInt32x4Type },
    std::pair{ "baab"_h, &UInt32x4Type },
    std::pair{ "baaa"_h, &UInt32x4Type },
    std::pair{ "babb"_h, &UInt32x4Type },
    std::pair{ "baba"_h, &UInt32x4Type },
    std::pair{ "babg"_h, &UInt32x4Type },
    std::pair{ "babr"_h, &UInt32x4Type },
    std::pair{ "barr"_h, &UInt32x4Type },
    std::pair{ "barb"_h, &UInt32x4Type },
    std::pair{ "bara"_h, &UInt32x4Type },
    std::pair{ "barg"_h, &UInt32x4Type },
    std::pair{ "operator[](u16)"_h, &UInt32x4_operator_index_UInt16 },
    std::pair{ "operator/=(u32x4)"_h, &UInt32x4_operator_divasg_UInt32x4 },
    std::pair{ "operator>>="_h, &UInt32x4_operator_rhsasg_UInt32x4 },
    std::pair{ "wwwx"_h, &UInt32x4Type },
    std::pair{ "wwwy"_h, &UInt32x4Type },
    std::pair{ "wwwz"_h, &UInt32x4Type },
    std::pair{ "wwww"_h, &UInt32x4Type },
    std::pair{ "wwzz"_h, &UInt32x4Type },
    std::pair{ "wwzy"_h, &UInt32x4Type },
    std::pair{ "wwzx"_h, &UInt32x4Type },
    std::pair{ "wwzw"_h, &UInt32x4Type },
    std::pair{ "wwyz"_h, &UInt32x4Type },
    std::pair{ "wwyx"_h, &UInt32x4Type },
    std::pair{ "wwyy"_h, &UInt32x4Type },
    std::pair{ "wwyw"_h, &UInt32x4Type },
    std::pair{ "wwxw"_h, &UInt32x4Type },
    std::pair{ "wwxy"_h, &UInt32x4Type },
    std::pair{ "wwxx"_h, &UInt32x4Type },
    std::pair{ "wwxz"_h, &UInt32x4Type },
    std::pair{ "zzww"_h, &UInt32x4Type },
    std::pair{ "zzwz"_h, &UInt32x4Type },
    std::pair{ "zzwx"_h, &UInt32x4Type },
    std::pair{ "zzwy"_h, &UInt32x4Type },
    std::pair{ "zzyw"_h, &UInt32x4Type },
    std::pair{ "zzyx"_h, &UInt32x4Type },
    std::pair{ "zzyy"_h, &UInt32x4Type },
    std::pair{ "zzyz"_h, &UInt32x4Type },
    std::pair{ "zzxw"_h, &UInt32x4Type },
    std::pair{ "zzxz"_h, &UInt32x4Type },
    std::pair{ "zzxy"_h, &UInt32x4Type },
    std::pair{ "zzxx"_h, &UInt32x4Type },
    std::pair{ "zzzy"_h, &UInt32x4Type },
    std::pair{ "zzzx"_h, &UInt32x4Type },
    std::pair{ "zzzz"_h, &UInt32x4Type },
    std::pair{ "zzzw"_h, &UInt32x4Type },
    std::pair{ "g"_h, &UInt32Type },
    std::pair{ "a"_h, &UInt32Type },
    std::pair{ "b"_h, &UInt32Type },
    std::pair{ "w"_h, &UInt32Type },
    std::pair{ "r"_h, &UInt32Type },
    std::pair{ "y"_h, &UInt32Type },
    std::pair{ "x"_h, &UInt32Type },
    std::pair{ "z"_h, &UInt32Type },
    std::pair{ "operator*(i32)"_h, &UInt32x4_operator_scale_Int32 },
    std::pair{ "bbgg"_h, &UInt32x4Type },
    std::pair{ "bbgb"_h, &UInt32x4Type },
    std::pair{ "bbga"_h, &UInt32x4Type },
    std::pair{ "bbgr"_h, &UInt32x4Type },
    std::pair{ "bbag"_h, &UInt32x4Type },
    std::pair{ "bbaa"_h, &UInt32x4Type },
    std::pair{ "bbab"_h, &UInt32x4Type },
    std::pair{ "bbar"_h, &UInt32x4Type },
    std::pair{ "bbbg"_h, &UInt32x4Type },
    std::pair{ "bbba"_h, &UInt32x4Type },
    std::pair{ "bbbb"_h, &UInt32x4Type },
    std::pair{ "bbbr"_h, &UInt32x4Type },
    std::pair{ "bbrr"_h, &UInt32x4Type },
    std::pair{ "bbrg"_h, &UInt32x4Type },
    std::pair{ "bbra"_h, &UInt32x4Type },
    std::pair{ "bbrb"_h, &UInt32x4Type },
    std::pair{ "ywy"_h, &UInt32x3Type },
    std::pair{ "ywx"_h, &UInt32x3Type },
    std::pair{ "ywz"_h, &UInt32x3Type },
    std::pair{ "yww"_h, &UInt32x3Type },
    std::pair{ "yxw"_h, &UInt32x3Type },
    std::pair{ "yxx"_h, &UInt32x3Type },
    std::pair{ "yxy"_h, &UInt32x3Type },
    std::pair{ "yxz"_h, &UInt32x3Type },
    std::pair{ "yyw"_h, &UInt32x3Type },
    std::pair{ "yyz"_h, &UInt32x3Type },
    std::pair{ "yyy"_h, &UInt32x3Type },
    std::pair{ "yyx"_h, &UInt32x3Type },
    std::pair{ "yzz"_h, &UInt32x3Type },
    std::pair{ "yzx"_h, &UInt32x3Type },
    std::pair{ "yzy"_h, &UInt32x3Type },
    std::pair{ "yzw"_h, &UInt32x3Type },
    std::pair{ "zwzx"_h, &UInt32x4Type },
    std::pair{ "zwzy"_h, &UInt32x4Type },
    std::pair{ "zwzz"_h, &UInt32x4Type },
    std::pair{ "zwzw"_h, &UInt32x4Type },
    std::pair{ "zwxw"_h, &UInt32x4Type },
    std::pair{ "zwxz"_h, &UInt32x4Type },
    std::pair{ "zwxx"_h, &UInt32x4Type },
    std::pair{ "zwxy"_h, &UInt32x4Type },
    std::pair{ "zwyw"_h, &UInt32x4Type },
    std::pair{ "zwyy"_h, &UInt32x4Type },
    std::pair{ "zwyx"_h, &UInt32x4Type },
    std::pair{ "zwyz"_h, &UInt32x4Type },
    std::pair{ "zwwz"_h, &UInt32x4Type },
    std::pair{ "zwwy"_h, &UInt32x4Type },
    std::pair{ "zwwx"_h, &UInt32x4Type },
    std::pair{ "zwww"_h, &UInt32x4Type },
    std::pair{ "xww"_h, &UInt32x3Type },
    std::pair{ "xwx"_h, &UInt32x3Type },
    std::pair{ "xwy"_h, &UInt32x3Type },
    std::pair{ "xwz"_h, &UInt32x3Type },
    std::pair{ "xzw"_h, &UInt32x3Type },
    std::pair{ "xzz"_h, &UInt32x3Type },
    std::pair{ "xzy"_h, &UInt32x3Type },
    std::pair{ "xzx"_h, &UInt32x3Type },
    std::pair{ "xyz"_h, &UInt32x3Type },
    std::pair{ "xyx"_h, &UInt32x3Type },
    std::pair{ "xyy"_h, &UInt32x3Type },
    std::pair{ "xyw"_h, &UInt32x3Type },
    std::pair{ "xxy"_h, &UInt32x3Type },
    std::pair{ "xxx"_h, &UInt32x3Type },
    std::pair{ "xxz"_h, &UInt32x3Type },
    std::pair{ "xxw"_h, &UInt32x3Type },
    std::pair{ "operator+=(u32x4)"_h, &UInt32x4_operator_addasg_UInt32x4 },
    std::pair{ "operator*(u32x4)"_h, &UInt32x4_operator_mul_UInt32x4 },
    std::pair{ "zyx"_h, &UInt32x3Type },
    std::pair{ "zyy"_h, &UInt32x3Type },
    std::pair{ "zyz"_h, &UInt32x3Type },
    std::pair{ "zyw"_h, &UInt32x3Type },
    std::pair{ "zxz"_h, &UInt32x3Type },
    std::pair{ "zxy"_h, &UInt32x3Type },
    std::pair{ "zxx"_h, &UInt32x3Type },
    std::pair{ "zxw"_h, &UInt32x3Type },
    std::pair{ "zzw"_h, &UInt32x3Type },
    std::pair{ "zzy"_h, &UInt32x3Type },
    std::pair{ "zzx"_h, &UInt32x3Type },
    std::pair{ "zzz"_h, &UInt32x3Type },
    std::pair{ "zwz"_h, &UInt32x3Type },
    std::pair{ "zwx"_h, &UInt32x3Type },
    std::pair{ "zwy"_h, &UInt32x3Type },
    std::pair{ "zww"_h, &UInt32x3Type },
    std::pair{ "ggr"_h, &UInt32x3Type },
    std::pair{ "ggb"_h, &UInt32x3Type },
    std::pair{ "gga"_h, &UInt32x3Type },
    std::pair{ "ggg"_h, &UInt32x3Type },
    std::pair{ "gbg"_h, &UInt32x3Type },
    std::pair{ "gba"_h, &UInt32x3Type },
    std::pair{ "gbb"_h, &UInt32x3Type },
    std::pair{ "gbr"_h, &UInt32x3Type },
    std::pair{ "gag"_h, &UInt32x3Type },
    std::pair{ "gaa"_h, &UInt32x3Type },
    std::pair{ "gab"_h, &UInt32x3Type },
    std::pair{ "gar"_h, &UInt32x3Type },
    std::pair{ "grr"_h, &UInt32x3Type },
    std::pair{ "grg"_h, &UInt32x3Type },
    std::pair{ "gra"_h, &UInt32x3Type },
    std::pair{ "grb"_h, &UInt32x3Type },
    std::pair{ "operator%(u32x4)"_h, &UInt32x4_operator_mod_UInt32x4 },
    std::pair{ "xwww"_h, &UInt32x4Type },
    std::pair{ "xwwy"_h, &UInt32x4Type },
    std::pair{ "xwwx"_h, &UInt32x4Type },
    std::pair{ "xwwz"_h, &UInt32x4Type },
    std::pair{ "xwxx"_h, &UInt32x4Type },
    std::pair{ "xwxy"_h, &UInt32x4Type },
    std::pair{ "xwxz"_h, &UInt32x4Type },
    std::pair{ "xwxw"_h, &UInt32x4Type },
    std::pair{ "xwyz"_h, &UInt32x4Type },
    std::pair{ "xwyy"_h, &UInt32x4Type },
    std::pair{ "xwyx"_h, &UInt32x4Type },
    std::pair{ "xwyw"_h, &UInt32x4Type },
    std::pair{ "xwzz"_h, &UInt32x4Type },
    std::pair{ "xwzx"_h, &UInt32x4Type },
    std::pair{ "xwzy"_h, &UInt32x4Type },
    std::pair{ "xwzw"_h, &UInt32x4Type },
    std::pair{ "operator+(u32x4)"_h, &UInt32x4_operator_add_UInt32x4 },
    std::pair{ "operator^=(u32x4)"_h, &UInt32x4_operator_xorasg_UInt32x4 },
    std::pair{ "operator<<=(u32x4)"_h, &UInt32x4_operator_lshasg_UInt32x4 },
    std::pair{ "operator^="_h, &UInt32x4_operator_xorasg_UInt32x4 },
    std::pair{ "operator[]"_h, &UInt32x4_operator_index_Int32 },
    std::pair{ "operator[]"_h, &UInt32x4_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &UInt32x4_operator_index_Int16 },
    std::pair{ "operator[]"_h, &UInt32x4_operator_index_UInt16 },
    std::pair{ "agrr"_h, &UInt32x4Type },
    std::pair{ "agra"_h, &UInt32x4Type },
    std::pair{ "agrb"_h, &UInt32x4Type },
    std::pair{ "agrg"_h, &UInt32x4Type },
    std::pair{ "operator|="_h, &UInt32x4_operator_orasg_UInt32x4 },
    std::pair{ "agar"_h, &UInt32x4Type },
    std::pair{ "agaa"_h, &UInt32x4Type },
    std::pair{ "agab"_h, &UInt32x4Type },
    std::pair{ "agag"_h, &UInt32x4Type },
    std::pair{ "agba"_h, &UInt32x4Type },
    std::pair{ "agbb"_h, &UInt32x4Type },
    std::pair{ "agbg"_h, &UInt32x4Type },
    std::pair{ "agbr"_h, &UInt32x4Type },
    std::pair{ "aggb"_h, &UInt32x4Type },
    std::pair{ "agga"_h, &UInt32x4Type },
    std::pair{ "aggg"_h, &UInt32x4Type },
    std::pair{ "aggr"_h, &UInt32x4Type },
    std::pair{ "operator<=(u32x4)"_h, &UInt32x4_operator_lte_UInt32x4 },
    std::pair{ "operator=="_h, &UInt32x4_operator_eq_UInt32x4 },
    std::pair{ "operator<="_h, &UInt32x4_operator_lte_UInt32x4 },
    std::pair{ "operator<<"_h, &UInt32x4_operator_lsh_UInt32x4 },
    std::pair{ "operator>="_h, &UInt32x4_operator_gte_UInt32x4 },
    std::pair{ "operator>>"_h, &UInt32x4_operator_rsh_UInt32x4 },
    std::pair{ "operator-="_h, &UInt32x4_operator_subasg_UInt32x4 },
    std::pair{ "operator/="_h, &UInt32x4_operator_divasg_UInt32x4 },
    std::pair{ "operator+="_h, &UInt32x4_operator_addasg_UInt32x4 },
    std::pair{ "operator*="_h, &UInt32x4_operator_mulasg_UInt32x4 },
    std::pair{ "operator&="_h, &UInt32x4_operator_andasg_UInt32x4 },
    std::pair{ "operator!="_h, &UInt32x4_operator_neq_UInt32x4 },
    std::pair{ "operator>=(u32x4)"_h, &UInt32x4_operator_gte_UInt32x4 },
    std::pair{ "agr"_h, &UInt32x3Type },
    std::pair{ "aga"_h, &UInt32x3Type },
    std::pair{ "agb"_h, &UInt32x3Type },
    std::pair{ "agg"_h, &UInt32x3Type },
    std::pair{ "aar"_h, &UInt32x3Type },
    std::pair{ "aag"_h, &UInt32x3Type },
    std::pair{ "aab"_h, &UInt32x3Type },
    std::pair{ "aaa"_h, &UInt32x3Type },
    std::pair{ "abb"_h, &UInt32x3Type },
    std::pair{ "aba"_h, &UInt32x3Type },
    std::pair{ "abg"_h, &UInt32x3Type },
    std::pair{ "abr"_h, &UInt32x3Type },
    std::pair{ "arr"_h, &UInt32x3Type },
    std::pair{ "arb"_h, &UInt32x3Type },
    std::pair{ "ara"_h, &UInt32x3Type },
    std::pair{ "arg"_h, &UInt32x3Type },
    std::pair{ "operator>(u32x4)"_h, &UInt32x4_operator_gt_UInt32x4 },
    std::pair{ "operator*=(u32x4)"_h, &UInt32x4_operator_mulasg_UInt32x4 },
    std::pair{ "operator<(u32x4)"_h, &UInt32x4_operator_lt_UInt32x4 },
    std::pair{ "aarr"_h, &UInt32x4Type },
    std::pair{ "aarg"_h, &UInt32x4Type },
    std::pair{ "aarb"_h, &UInt32x4Type },
    std::pair{ "aara"_h, &UInt32x4Type },
    std::pair{ "aagr"_h, &UInt32x4Type },
    std::pair{ "aaga"_h, &UInt32x4Type },
    std::pair{ "aagb"_h, &UInt32x4Type },
    std::pair{ "aagg"_h, &UInt32x4Type },
    std::pair{ "aabg"_h, &UInt32x4Type },
    std::pair{ "aabb"_h, &UInt32x4Type },
    std::pair{ "aaba"_h, &UInt32x4Type },
    std::pair{ "aabr"_h, &UInt32x4Type },
    std::pair{ "aaab"_h, &UInt32x4Type },
    std::pair{ "aaaa"_h, &UInt32x4Type },
    std::pair{ "aaag"_h, &UInt32x4Type },
    std::pair{ "aaar"_h, &UInt32x4Type },
    std::pair{ "operator[](i32)"_h, &UInt32x4_operator_index_Int32 },
    std::pair{ "grrb"_h, &UInt32x4Type },
    std::pair{ "grra"_h, &UInt32x4Type },
    std::pair{ "grrg"_h, &UInt32x4Type },
    std::pair{ "grrr"_h, &UInt32x4Type },
    std::pair{ "grga"_h, &UInt32x4Type },
    std::pair{ "grgb"_h, &UInt32x4Type },
    std::pair{ "grgg"_h, &UInt32x4Type },
    std::pair{ "grgr"_h, &UInt32x4Type },
    std::pair{ "grag"_h, &UInt32x4Type },
    std::pair{ "grab"_h, &UInt32x4Type },
    std::pair{ "graa"_h, &UInt32x4Type },
    std::pair{ "grar"_h, &UInt32x4Type },
    std::pair{ "grbr"_h, &UInt32x4Type },
    std::pair{ "grbb"_h, &UInt32x4Type },
    std::pair{ "grba"_h, &UInt32x4Type },
    std::pair{ "grbg"_h, &UInt32x4Type },
    std::pair{ "abbr"_h, &UInt32x4Type },
    std::pair{ "abba"_h, &UInt32x4Type },
    std::pair{ "abbb"_h, &UInt32x4Type },
    std::pair{ "abbg"_h, &UInt32x4Type },
    std::pair{ "abar"_h, &UInt32x4Type },
    std::pair{ "abaa"_h, &UInt32x4Type },
    std::pair{ "abab"_h, &UInt32x4Type },
    std::pair{ "abag"_h, &UInt32x4Type },
    std::pair{ "abgr"_h, &UInt32x4Type },
    std::pair{ "abgg"_h, &UInt32x4Type },
    std::pair{ "abgb"_h, &UInt32x4Type },
    std::pair{ "abga"_h, &UInt32x4Type },
    std::pair{ "abra"_h, &UInt32x4Type },
    std::pair{ "abrb"_h, &UInt32x4Type },
    std::pair{ "abrg"_h, &UInt32x4Type },
    std::pair{ "abrr"_h, &UInt32x4Type },
    std::pair{ "rrgg"_h, &UInt32x4Type },
    std::pair{ "rrgb"_h, &UInt32x4Type },
    std::pair{ "rrga"_h, &UInt32x4Type },
    std::pair{ "rrgr"_h, &UInt32x4Type },
    std::pair{ "rrag"_h, &UInt32x4Type },
    std::pair{ "rraa"_h, &UInt32x4Type },
    std::pair{ "rrab"_h, &UInt32x4Type },
    std::pair{ "rrar"_h, &UInt32x4Type },
    std::pair{ "rrbg"_h, &UInt32x4Type },
    std::pair{ "rrba"_h, &UInt32x4Type },
    std::pair{ "rrbb"_h, &UInt32x4Type },
    std::pair{ "rrbr"_h, &UInt32x4Type },
    std::pair{ "rrrr"_h, &UInt32x4Type },
    std::pair{ "rrrg"_h, &UInt32x4Type },
    std::pair{ "rrra"_h, &UInt32x4Type },
    std::pair{ "rrrb"_h, &UInt32x4Type }
    };

UInt32x4::UInt32x4()
{
    this->name = "u32x4"_c;
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    /// operator[] with Int32
    UInt32x4_operator_index_Int32_arg.name = "arg"_c;
    UInt32x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x4_operator_index_Int32.name = UInt32x4_operator_index_Int32_name;
    UInt32x4_operator_index_Int32.backendIndex = 864;
    UInt32x4_operator_index_Int32.returnType = Type::FullType { UInt32Type.name };
    UInt32x4_operator_index_Int32.parameters = UInt32x4_operator_index_Int32_args;
    Symbol::Resolved(&UInt32x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x4_operator_index_Int32)->signature = "operator[](i32) u32"_c;
    Symbol::Resolved(&UInt32x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt32
    UInt32x4_operator_index_UInt32_arg.name = "arg"_c;
    UInt32x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x4_operator_index_UInt32.name = UInt32x4_operator_index_UInt32_name;
    UInt32x4_operator_index_UInt32.backendIndex = 865;
    UInt32x4_operator_index_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32x4_operator_index_UInt32.parameters = UInt32x4_operator_index_UInt32_args;
    Symbol::Resolved(&UInt32x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_operator_index_UInt32)->signature = "operator[](u32) u32"_c;
    Symbol::Resolved(&UInt32x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with Int16
    UInt32x4_operator_index_Int16_arg.name = "arg"_c;
    UInt32x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt32x4_operator_index_Int16.name = UInt32x4_operator_index_Int16_name;
    UInt32x4_operator_index_Int16.backendIndex = 866;
    UInt32x4_operator_index_Int16.returnType = Type::FullType { UInt32Type.name };
    UInt32x4_operator_index_Int16.parameters = UInt32x4_operator_index_Int16_args;
    Symbol::Resolved(&UInt32x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x4_operator_index_Int16)->signature = "operator[](i16) u32"_c;
    Symbol::Resolved(&UInt32x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt16
    UInt32x4_operator_index_UInt16_arg.name = "arg"_c;
    UInt32x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt32x4_operator_index_UInt16.name = UInt32x4_operator_index_UInt16_name;
    UInt32x4_operator_index_UInt16.backendIndex = 867;
    UInt32x4_operator_index_UInt16.returnType = Type::FullType { UInt32Type.name };
    UInt32x4_operator_index_UInt16.parameters = UInt32x4_operator_index_UInt16_args;
    Symbol::Resolved(&UInt32x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x4_operator_index_UInt16)->signature = "operator[](u16) u32"_c;
    Symbol::Resolved(&UInt32x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    /// operator+ with UInt32x4
    UInt32x4_operator_add_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_add_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_add_UInt32x4.name = UInt32x4_operator_add_UInt32x4_name;
    UInt32x4_operator_add_UInt32x4.backendIndex = 868;
    UInt32x4_operator_add_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_add_UInt32x4.parameters = UInt32x4_operator_add_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_add_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_add_UInt32x4)->signature = "operator+(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_add_UInt32x4)->name = "operator+(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_add_UInt32x4)->nameWithVarNames = "operator+(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_add_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator- with UInt32x4
    UInt32x4_operator_sub_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_sub_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_sub_UInt32x4.name = UInt32x4_operator_sub_UInt32x4_name;
    UInt32x4_operator_sub_UInt32x4.backendIndex = 869;
    UInt32x4_operator_sub_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_sub_UInt32x4.parameters = UInt32x4_operator_sub_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_sub_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_sub_UInt32x4)->signature = "operator-(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_sub_UInt32x4)->name = "operator-(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_sub_UInt32x4)->nameWithVarNames = "operator-(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_sub_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator* with UInt32x4
    UInt32x4_operator_mul_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_mul_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_mul_UInt32x4.name = UInt32x4_operator_mul_UInt32x4_name;
    UInt32x4_operator_mul_UInt32x4.backendIndex = 870;
    UInt32x4_operator_mul_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_mul_UInt32x4.parameters = UInt32x4_operator_mul_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_mul_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_mul_UInt32x4)->signature = "operator*(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_mul_UInt32x4)->name = "operator*(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_mul_UInt32x4)->nameWithVarNames = "operator*(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_mul_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator/ with UInt32x4
    UInt32x4_operator_div_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_div_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_div_UInt32x4.name = UInt32x4_operator_div_UInt32x4_name;
    UInt32x4_operator_div_UInt32x4.backendIndex = 871;
    UInt32x4_operator_div_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_div_UInt32x4.parameters = UInt32x4_operator_div_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_div_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_div_UInt32x4)->signature = "operator/(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_div_UInt32x4)->name = "operator/(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_div_UInt32x4)->nameWithVarNames = "operator/(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_div_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator% with UInt32x4
    UInt32x4_operator_mod_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_mod_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_mod_UInt32x4.name = UInt32x4_operator_mod_UInt32x4_name;
    UInt32x4_operator_mod_UInt32x4.backendIndex = 872;
    UInt32x4_operator_mod_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_mod_UInt32x4.parameters = UInt32x4_operator_mod_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_mod_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_mod_UInt32x4)->signature = "operator%(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_mod_UInt32x4)->name = "operator%(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_mod_UInt32x4)->nameWithVarNames = "operator%(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_mod_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator+= with UInt32x4
    UInt32x4_operator_addasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_addasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_addasg_UInt32x4.name = UInt32x4_operator_addasg_UInt32x4_name;
    UInt32x4_operator_addasg_UInt32x4.backendIndex = 873;
    UInt32x4_operator_addasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_addasg_UInt32x4.parameters = UInt32x4_operator_addasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_addasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_addasg_UInt32x4)->signature = "operator+=(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_addasg_UInt32x4)->name = "operator+=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_addasg_UInt32x4)->nameWithVarNames = "operator+=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_addasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator-= with UInt32x4
    UInt32x4_operator_subasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_subasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_subasg_UInt32x4.name = UInt32x4_operator_subasg_UInt32x4_name;
    UInt32x4_operator_subasg_UInt32x4.backendIndex = 874;
    UInt32x4_operator_subasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_subasg_UInt32x4.parameters = UInt32x4_operator_subasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_subasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_subasg_UInt32x4)->signature = "operator-=(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_subasg_UInt32x4)->name = "operator-=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_subasg_UInt32x4)->nameWithVarNames = "operator-=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_subasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator*= with UInt32x4
    UInt32x4_operator_mulasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_mulasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_mulasg_UInt32x4.name = UInt32x4_operator_mulasg_UInt32x4_name;
    UInt32x4_operator_mulasg_UInt32x4.backendIndex = 875;
    UInt32x4_operator_mulasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_mulasg_UInt32x4.parameters = UInt32x4_operator_mulasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_mulasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_mulasg_UInt32x4)->signature = "operator*=(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_mulasg_UInt32x4)->name = "operator*=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_mulasg_UInt32x4)->nameWithVarNames = "operator*=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_mulasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator/= with UInt32x4
    UInt32x4_operator_divasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_divasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_divasg_UInt32x4.name = UInt32x4_operator_divasg_UInt32x4_name;
    UInt32x4_operator_divasg_UInt32x4.backendIndex = 876;
    UInt32x4_operator_divasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_divasg_UInt32x4.parameters = UInt32x4_operator_divasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_divasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_divasg_UInt32x4)->signature = "operator/=(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_divasg_UInt32x4)->name = "operator/=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_divasg_UInt32x4)->nameWithVarNames = "operator/=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_divasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator< with UInt32x4
    UInt32x4_operator_lt_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_lt_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_lt_UInt32x4.name = UInt32x4_operator_lt_UInt32x4_name;
    UInt32x4_operator_lt_UInt32x4.backendIndex = 877;
    UInt32x4_operator_lt_UInt32x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt32x4_operator_lt_UInt32x4.parameters = UInt32x4_operator_lt_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_lt_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_lt_UInt32x4)->signature = "operator<(u32x4) b8x4"_c;
    Symbol::Resolved(&UInt32x4_operator_lt_UInt32x4)->name = "operator<(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lt_UInt32x4)->nameWithVarNames = "operator<(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lt_UInt32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator<= with UInt32x4
    UInt32x4_operator_lte_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_lte_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_lte_UInt32x4.name = UInt32x4_operator_lte_UInt32x4_name;
    UInt32x4_operator_lte_UInt32x4.backendIndex = 878;
    UInt32x4_operator_lte_UInt32x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt32x4_operator_lte_UInt32x4.parameters = UInt32x4_operator_lte_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_lte_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_lte_UInt32x4)->signature = "operator<=(u32x4) b8x4"_c;
    Symbol::Resolved(&UInt32x4_operator_lte_UInt32x4)->name = "operator<=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lte_UInt32x4)->nameWithVarNames = "operator<=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lte_UInt32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator> with UInt32x4
    UInt32x4_operator_gt_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_gt_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_gt_UInt32x4.name = UInt32x4_operator_gt_UInt32x4_name;
    UInt32x4_operator_gt_UInt32x4.backendIndex = 879;
    UInt32x4_operator_gt_UInt32x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt32x4_operator_gt_UInt32x4.parameters = UInt32x4_operator_gt_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_gt_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_gt_UInt32x4)->signature = "operator>(u32x4) b8x4"_c;
    Symbol::Resolved(&UInt32x4_operator_gt_UInt32x4)->name = "operator>(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_gt_UInt32x4)->nameWithVarNames = "operator>(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_gt_UInt32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator>= with UInt32x4
    UInt32x4_operator_gte_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_gte_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_gte_UInt32x4.name = UInt32x4_operator_gte_UInt32x4_name;
    UInt32x4_operator_gte_UInt32x4.backendIndex = 880;
    UInt32x4_operator_gte_UInt32x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt32x4_operator_gte_UInt32x4.parameters = UInt32x4_operator_gte_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_gte_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_gte_UInt32x4)->signature = "operator>=(u32x4) b8x4"_c;
    Symbol::Resolved(&UInt32x4_operator_gte_UInt32x4)->name = "operator>=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_gte_UInt32x4)->nameWithVarNames = "operator>=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_gte_UInt32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator== with UInt32x4
    UInt32x4_operator_eq_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_eq_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_eq_UInt32x4.name = UInt32x4_operator_eq_UInt32x4_name;
    UInt32x4_operator_eq_UInt32x4.backendIndex = 881;
    UInt32x4_operator_eq_UInt32x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt32x4_operator_eq_UInt32x4.parameters = UInt32x4_operator_eq_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_eq_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_eq_UInt32x4)->signature = "operator==(u32x4) b8x4"_c;
    Symbol::Resolved(&UInt32x4_operator_eq_UInt32x4)->name = "operator==(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_eq_UInt32x4)->nameWithVarNames = "operator==(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_eq_UInt32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator!= with UInt32x4
    UInt32x4_operator_neq_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_neq_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_neq_UInt32x4.name = UInt32x4_operator_neq_UInt32x4_name;
    UInt32x4_operator_neq_UInt32x4.backendIndex = 882;
    UInt32x4_operator_neq_UInt32x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt32x4_operator_neq_UInt32x4.parameters = UInt32x4_operator_neq_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_neq_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_neq_UInt32x4)->signature = "operator!=(u32x4) b8x4"_c;
    Symbol::Resolved(&UInt32x4_operator_neq_UInt32x4)->name = "operator!=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_neq_UInt32x4)->nameWithVarNames = "operator!=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_neq_UInt32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator* with Float32
    UInt32x4_operator_scale_Float32_arg.name = "arg"_c;
    UInt32x4_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt32x4_operator_scale_Float32.name = UInt32x4_operator_scale_Float32_name;
    UInt32x4_operator_scale_Float32.backendIndex = 883;
    UInt32x4_operator_scale_Float32.returnType = Type::FullType { Float32x4Type.name };
    UInt32x4_operator_scale_Float32.parameters = UInt32x4_operator_scale_Float32_args;
    Symbol::Resolved(&UInt32x4_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x4_operator_scale_Float32)->signature = "operator*(f32) f32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_Float32)->returnTypeSymbol = &Float32x4Type;

    /// operator* with UInt32
    UInt32x4_operator_scale_UInt32_arg.name = "arg"_c;
    UInt32x4_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x4_operator_scale_UInt32.name = UInt32x4_operator_scale_UInt32_name;
    UInt32x4_operator_scale_UInt32.backendIndex = 884;
    UInt32x4_operator_scale_UInt32.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_scale_UInt32.parameters = UInt32x4_operator_scale_UInt32_args;
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32)->signature = "operator*(u32) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32)->returnTypeSymbol = &UInt32x4Type;

    /// operator* with Int32
    UInt32x4_operator_scale_Int32_arg.name = "arg"_c;
    UInt32x4_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x4_operator_scale_Int32.name = UInt32x4_operator_scale_Int32_name;
    UInt32x4_operator_scale_Int32.backendIndex = 885;
    UInt32x4_operator_scale_Int32.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_scale_Int32.parameters = UInt32x4_operator_scale_Int32_args;
    Symbol::Resolved(&UInt32x4_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x4_operator_scale_Int32)->signature = "operator*(i32) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_Int32)->returnTypeSymbol = &UInt32x4Type;

    /// operator| with UInt32x4
    UInt32x4_operator_or_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_or_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_or_UInt32x4.name = UInt32x4_operator_or_UInt32x4_name;
    UInt32x4_operator_or_UInt32x4.backendIndex = 886;
    UInt32x4_operator_or_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_or_UInt32x4.parameters = UInt32x4_operator_or_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_or_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_or_UInt32x4)->signature = "operator|(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_or_UInt32x4)->name = "operator|(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_or_UInt32x4)->nameWithVarNames = "operator|(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_or_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator& with UInt32x4
    UInt32x4_operator_and_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_and_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_and_UInt32x4.name = UInt32x4_operator_and_UInt32x4_name;
    UInt32x4_operator_and_UInt32x4.backendIndex = 887;
    UInt32x4_operator_and_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_and_UInt32x4.parameters = UInt32x4_operator_and_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_and_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_and_UInt32x4)->signature = "operator&(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_and_UInt32x4)->name = "operator&(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_and_UInt32x4)->nameWithVarNames = "operator&(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_and_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator^ with UInt32x4
    UInt32x4_operator_xor_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_xor_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_xor_UInt32x4.name = UInt32x4_operator_xor_UInt32x4_name;
    UInt32x4_operator_xor_UInt32x4.backendIndex = 888;
    UInt32x4_operator_xor_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_xor_UInt32x4.parameters = UInt32x4_operator_xor_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_xor_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_xor_UInt32x4)->signature = "operator^(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_xor_UInt32x4)->name = "operator^(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_xor_UInt32x4)->nameWithVarNames = "operator^(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_xor_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator<< with UInt32x4
    UInt32x4_operator_lsh_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_lsh_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_lsh_UInt32x4.name = UInt32x4_operator_lsh_UInt32x4_name;
    UInt32x4_operator_lsh_UInt32x4.backendIndex = 889;
    UInt32x4_operator_lsh_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_lsh_UInt32x4.parameters = UInt32x4_operator_lsh_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_lsh_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_lsh_UInt32x4)->signature = "operator<<(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_lsh_UInt32x4)->name = "operator<<(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lsh_UInt32x4)->nameWithVarNames = "operator<<(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lsh_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator>> with UInt32x4
    UInt32x4_operator_rsh_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_rsh_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_rsh_UInt32x4.name = UInt32x4_operator_rsh_UInt32x4_name;
    UInt32x4_operator_rsh_UInt32x4.backendIndex = 890;
    UInt32x4_operator_rsh_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_rsh_UInt32x4.parameters = UInt32x4_operator_rsh_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_rsh_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_rsh_UInt32x4)->signature = "operator>>(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_rsh_UInt32x4)->name = "operator>>(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_rsh_UInt32x4)->nameWithVarNames = "operator>>(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_rsh_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator|= with UInt32x4
    UInt32x4_operator_orasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_orasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_orasg_UInt32x4.name = UInt32x4_operator_orasg_UInt32x4_name;
    UInt32x4_operator_orasg_UInt32x4.backendIndex = 891;
    UInt32x4_operator_orasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_orasg_UInt32x4.parameters = UInt32x4_operator_orasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_orasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_orasg_UInt32x4)->signature = "operator|=(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_orasg_UInt32x4)->name = "operator|=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_orasg_UInt32x4)->nameWithVarNames = "operator|=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_orasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator&= with UInt32x4
    UInt32x4_operator_andasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_andasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_andasg_UInt32x4.name = UInt32x4_operator_andasg_UInt32x4_name;
    UInt32x4_operator_andasg_UInt32x4.backendIndex = 892;
    UInt32x4_operator_andasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_andasg_UInt32x4.parameters = UInt32x4_operator_andasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_andasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_andasg_UInt32x4)->signature = "operator&=(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_andasg_UInt32x4)->name = "operator&=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_andasg_UInt32x4)->nameWithVarNames = "operator&=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_andasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator^= with UInt32x4
    UInt32x4_operator_xorasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_xorasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_xorasg_UInt32x4.name = UInt32x4_operator_xorasg_UInt32x4_name;
    UInt32x4_operator_xorasg_UInt32x4.backendIndex = 893;
    UInt32x4_operator_xorasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_xorasg_UInt32x4.parameters = UInt32x4_operator_xorasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_xorasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_xorasg_UInt32x4)->signature = "operator^=(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_xorasg_UInt32x4)->name = "operator^=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_xorasg_UInt32x4)->nameWithVarNames = "operator^=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_xorasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator<<= with UInt32x4
    UInt32x4_operator_lshasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_lshasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_lshasg_UInt32x4.name = UInt32x4_operator_lshasg_UInt32x4_name;
    UInt32x4_operator_lshasg_UInt32x4.backendIndex = 894;
    UInt32x4_operator_lshasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_lshasg_UInt32x4.parameters = UInt32x4_operator_lshasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_lshasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_lshasg_UInt32x4)->signature = "operator<<=(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_lshasg_UInt32x4)->name = "operator<<=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lshasg_UInt32x4)->nameWithVarNames = "operator<<=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lshasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator>>= with UInt32x4
    UInt32x4_operator_rhsasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_rhsasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_rhsasg_UInt32x4.name = UInt32x4_operator_rhsasg_UInt32x4_name;
    UInt32x4_operator_rhsasg_UInt32x4.backendIndex = 895;
    UInt32x4_operator_rhsasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_rhsasg_UInt32x4.parameters = UInt32x4_operator_rhsasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_rhsasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_rhsasg_UInt32x4)->signature = "operator>>=(u32x4) u32x4"_c;
    Symbol::Resolved(&UInt32x4_operator_rhsasg_UInt32x4)->name = "operator>>=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_rhsasg_UInt32x4)->nameWithVarNames = "operator>>=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_rhsasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    this->scope.symbolLookup = UInt32x4_symbolLookup;
}
UInt32x4 UInt32x4Type;

/// operator[] with Int32
Variable Int32x4_operator_index_Int32_arg;
Function Int32x4_operator_index_Int32;
inline constexpr std::array Int32x4_operator_index_Int32_args = { &Int32x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int32x4_operator_index_UInt32_arg;
Function Int32x4_operator_index_UInt32;
inline constexpr std::array Int32x4_operator_index_UInt32_args = { &Int32x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int32x4_operator_index_Int16_arg;
Function Int32x4_operator_index_Int16;
inline constexpr std::array Int32x4_operator_index_Int16_args = { &Int32x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int32x4_operator_index_UInt16_arg;
Function Int32x4_operator_index_UInt16;
inline constexpr std::array Int32x4_operator_index_UInt16_args = { &Int32x4_operator_index_UInt16_arg };

/// operator+ with Int32x4
Variable Int32x4_operator_add_Int32x4_arg;
Function Int32x4_operator_add_Int32x4;
inline constexpr std::array Int32x4_operator_add_Int32x4_args = { &Int32x4_operator_add_Int32x4_arg };

/// operator- with Int32x4
Variable Int32x4_operator_sub_Int32x4_arg;
Function Int32x4_operator_sub_Int32x4;
inline constexpr std::array Int32x4_operator_sub_Int32x4_args = { &Int32x4_operator_sub_Int32x4_arg };

/// operator* with Int32x4
Variable Int32x4_operator_mul_Int32x4_arg;
Function Int32x4_operator_mul_Int32x4;
inline constexpr std::array Int32x4_operator_mul_Int32x4_args = { &Int32x4_operator_mul_Int32x4_arg };

/// operator/ with Int32x4
Variable Int32x4_operator_div_Int32x4_arg;
Function Int32x4_operator_div_Int32x4;
inline constexpr std::array Int32x4_operator_div_Int32x4_args = { &Int32x4_operator_div_Int32x4_arg };

/// operator% with Int32x4
Variable Int32x4_operator_mod_Int32x4_arg;
Function Int32x4_operator_mod_Int32x4;
inline constexpr std::array Int32x4_operator_mod_Int32x4_args = { &Int32x4_operator_mod_Int32x4_arg };

/// operator+= with Int32x4
Variable Int32x4_operator_addasg_Int32x4_arg;
Function Int32x4_operator_addasg_Int32x4;
inline constexpr std::array Int32x4_operator_addasg_Int32x4_args = { &Int32x4_operator_addasg_Int32x4_arg };

/// operator-= with Int32x4
Variable Int32x4_operator_subasg_Int32x4_arg;
Function Int32x4_operator_subasg_Int32x4;
inline constexpr std::array Int32x4_operator_subasg_Int32x4_args = { &Int32x4_operator_subasg_Int32x4_arg };

/// operator*= with Int32x4
Variable Int32x4_operator_mulasg_Int32x4_arg;
Function Int32x4_operator_mulasg_Int32x4;
inline constexpr std::array Int32x4_operator_mulasg_Int32x4_args = { &Int32x4_operator_mulasg_Int32x4_arg };

/// operator/= with Int32x4
Variable Int32x4_operator_divasg_Int32x4_arg;
Function Int32x4_operator_divasg_Int32x4;
inline constexpr std::array Int32x4_operator_divasg_Int32x4_args = { &Int32x4_operator_divasg_Int32x4_arg };

/// operator< with Int32x4
Variable Int32x4_operator_lt_Int32x4_arg;
Function Int32x4_operator_lt_Int32x4;
inline constexpr std::array Int32x4_operator_lt_Int32x4_args = { &Int32x4_operator_lt_Int32x4_arg };

/// operator<= with Int32x4
Variable Int32x4_operator_lte_Int32x4_arg;
Function Int32x4_operator_lte_Int32x4;
inline constexpr std::array Int32x4_operator_lte_Int32x4_args = { &Int32x4_operator_lte_Int32x4_arg };

/// operator> with Int32x4
Variable Int32x4_operator_gt_Int32x4_arg;
Function Int32x4_operator_gt_Int32x4;
inline constexpr std::array Int32x4_operator_gt_Int32x4_args = { &Int32x4_operator_gt_Int32x4_arg };

/// operator>= with Int32x4
Variable Int32x4_operator_gte_Int32x4_arg;
Function Int32x4_operator_gte_Int32x4;
inline constexpr std::array Int32x4_operator_gte_Int32x4_args = { &Int32x4_operator_gte_Int32x4_arg };

/// operator== with Int32x4
Variable Int32x4_operator_eq_Int32x4_arg;
Function Int32x4_operator_eq_Int32x4;
inline constexpr std::array Int32x4_operator_eq_Int32x4_args = { &Int32x4_operator_eq_Int32x4_arg };

/// operator!= with Int32x4
Variable Int32x4_operator_neq_Int32x4_arg;
Function Int32x4_operator_neq_Int32x4;
inline constexpr std::array Int32x4_operator_neq_Int32x4_args = { &Int32x4_operator_neq_Int32x4_arg };

/// operator* with Float32
Variable Int32x4_operator_scale_Float32_arg;
Function Int32x4_operator_scale_Float32;
inline constexpr std::array Int32x4_operator_scale_Float32_args = { &Int32x4_operator_scale_Float32_arg };

/// operator* with UInt32
Variable Int32x4_operator_scale_UInt32_arg;
Function Int32x4_operator_scale_UInt32;
inline constexpr std::array Int32x4_operator_scale_UInt32_args = { &Int32x4_operator_scale_UInt32_arg };

/// operator* with Int32
Variable Int32x4_operator_scale_Int32_arg;
Function Int32x4_operator_scale_Int32;
inline constexpr std::array Int32x4_operator_scale_Int32_args = { &Int32x4_operator_scale_Int32_arg };

/// operator| with Int32x4
Variable Int32x4_operator_or_Int32x4_arg;
Function Int32x4_operator_or_Int32x4;
inline constexpr std::array Int32x4_operator_or_Int32x4_args = { &Int32x4_operator_or_Int32x4_arg };

/// operator& with Int32x4
Variable Int32x4_operator_and_Int32x4_arg;
Function Int32x4_operator_and_Int32x4;
inline constexpr std::array Int32x4_operator_and_Int32x4_args = { &Int32x4_operator_and_Int32x4_arg };

/// operator^ with Int32x4
Variable Int32x4_operator_xor_Int32x4_arg;
Function Int32x4_operator_xor_Int32x4;
inline constexpr std::array Int32x4_operator_xor_Int32x4_args = { &Int32x4_operator_xor_Int32x4_arg };

/// operator<< with Int32x4
Variable Int32x4_operator_lsh_Int32x4_arg;
Function Int32x4_operator_lsh_Int32x4;
inline constexpr std::array Int32x4_operator_lsh_Int32x4_args = { &Int32x4_operator_lsh_Int32x4_arg };

/// operator>> with Int32x4
Variable Int32x4_operator_rsh_Int32x4_arg;
Function Int32x4_operator_rsh_Int32x4;
inline constexpr std::array Int32x4_operator_rsh_Int32x4_args = { &Int32x4_operator_rsh_Int32x4_arg };

/// operator|= with Int32x4
Variable Int32x4_operator_orasg_Int32x4_arg;
Function Int32x4_operator_orasg_Int32x4;
inline constexpr std::array Int32x4_operator_orasg_Int32x4_args = { &Int32x4_operator_orasg_Int32x4_arg };

/// operator&= with Int32x4
Variable Int32x4_operator_andasg_Int32x4_arg;
Function Int32x4_operator_andasg_Int32x4;
inline constexpr std::array Int32x4_operator_andasg_Int32x4_args = { &Int32x4_operator_andasg_Int32x4_arg };

/// operator^= with Int32x4
Variable Int32x4_operator_xorasg_Int32x4_arg;
Function Int32x4_operator_xorasg_Int32x4;
inline constexpr std::array Int32x4_operator_xorasg_Int32x4_args = { &Int32x4_operator_xorasg_Int32x4_arg };

/// operator<<= with Int32x4
Variable Int32x4_operator_lshasg_Int32x4_arg;
Function Int32x4_operator_lshasg_Int32x4;
inline constexpr std::array Int32x4_operator_lshasg_Int32x4_args = { &Int32x4_operator_lshasg_Int32x4_arg };

/// operator>>= with Int32x4
Variable Int32x4_operator_rhsasg_Int32x4_arg;
Function Int32x4_operator_rhsasg_Int32x4;
inline constexpr std::array Int32x4_operator_rhsasg_Int32x4_args = { &Int32x4_operator_rhsasg_Int32x4_arg };

static constexpr StaticMap<HashString, Symbol*, 744> Int32x4_symbolLookup = {
    std::pair{ "wzwy"_h, &Int32x4Type },
    std::pair{ "wzwx"_h, &Int32x4Type },
    std::pair{ "wzwz"_h, &Int32x4Type },
    std::pair{ "wzww"_h, &Int32x4Type },
    std::pair{ "bgg"_h, &Int32x3Type },
    std::pair{ "bgb"_h, &Int32x3Type },
    std::pair{ "bga"_h, &Int32x3Type },
    std::pair{ "bgr"_h, &Int32x3Type },
    std::pair{ "bag"_h, &Int32x3Type },
    std::pair{ "baa"_h, &Int32x3Type },
    std::pair{ "bab"_h, &Int32x3Type },
    std::pair{ "bar"_h, &Int32x3Type },
    std::pair{ "bbg"_h, &Int32x3Type },
    std::pair{ "bba"_h, &Int32x3Type },
    std::pair{ "bbb"_h, &Int32x3Type },
    std::pair{ "bbr"_h, &Int32x3Type },
    std::pair{ "wzxw"_h, &Int32x4Type },
    std::pair{ "wzxx"_h, &Int32x4Type },
    std::pair{ "wzxy"_h, &Int32x4Type },
    std::pair{ "wzxz"_h, &Int32x4Type },
    std::pair{ "wzyw"_h, &Int32x4Type },
    std::pair{ "wzyz"_h, &Int32x4Type },
    std::pair{ "wzyy"_h, &Int32x4Type },
    std::pair{ "wzyx"_h, &Int32x4Type },
    std::pair{ "wzzz"_h, &Int32x4Type },
    std::pair{ "wzzx"_h, &Int32x4Type },
    std::pair{ "wzzy"_h, &Int32x4Type },
    std::pair{ "wzzw"_h, &Int32x4Type },
    std::pair{ "brr"_h, &Int32x3Type },
    std::pair{ "brg"_h, &Int32x3Type },
    std::pair{ "bra"_h, &Int32x3Type },
    std::pair{ "brb"_h, &Int32x3Type },
    std::pair{ "ywyw"_h, &Int32x4Type },
    std::pair{ "ywyx"_h, &Int32x4Type },
    std::pair{ "ywyy"_h, &Int32x4Type },
    std::pair{ "ywyz"_h, &Int32x4Type },
    std::pair{ "ywxw"_h, &Int32x4Type },
    std::pair{ "ywxz"_h, &Int32x4Type },
    std::pair{ "ywxy"_h, &Int32x4Type },
    std::pair{ "ywxx"_h, &Int32x4Type },
    std::pair{ "ywzy"_h, &Int32x4Type },
    std::pair{ "ywzx"_h, &Int32x4Type },
    std::pair{ "ywzz"_h, &Int32x4Type },
    std::pair{ "ywzw"_h, &Int32x4Type },
    std::pair{ "ywwz"_h, &Int32x4Type },
    std::pair{ "ywwx"_h, &Int32x4Type },
    std::pair{ "ywwy"_h, &Int32x4Type },
    std::pair{ "ywww"_h, &Int32x4Type },
    std::pair{ "operator<<(i32x4)"_h, &Int32x4_operator_lsh_Int32x4 },
    std::pair{ "operator<<=(i32x4)"_h, &Int32x4_operator_lshasg_Int32x4 },
    std::pair{ "operator%(i32x4)"_h, &Int32x4_operator_mod_Int32x4 },
    std::pair{ "gg"_h, &Int32x2Type },
    std::pair{ "gb"_h, &Int32x2Type },
    std::pair{ "ga"_h, &Int32x2Type },
    std::pair{ "gr"_h, &Int32x2Type },
    std::pair{ "ag"_h, &Int32x2Type },
    std::pair{ "aa"_h, &Int32x2Type },
    std::pair{ "ab"_h, &Int32x2Type },
    std::pair{ "ar"_h, &Int32x2Type },
    std::pair{ "bg"_h, &Int32x2Type },
    std::pair{ "ba"_h, &Int32x2Type },
    std::pair{ "bb"_h, &Int32x2Type },
    std::pair{ "br"_h, &Int32x2Type },
    std::pair{ "ww"_h, &Int32x2Type },
    std::pair{ "wz"_h, &Int32x2Type },
    std::pair{ "wx"_h, &Int32x2Type },
    std::pair{ "wy"_h, &Int32x2Type },
    std::pair{ "rr"_h, &Int32x2Type },
    std::pair{ "rg"_h, &Int32x2Type },
    std::pair{ "ra"_h, &Int32x2Type },
    std::pair{ "rb"_h, &Int32x2Type },
    std::pair{ "yw"_h, &Int32x2Type },
    std::pair{ "yx"_h, &Int32x2Type },
    std::pair{ "yy"_h, &Int32x2Type },
    std::pair{ "yz"_h, &Int32x2Type },
    std::pair{ "xw"_h, &Int32x2Type },
    std::pair{ "xz"_h, &Int32x2Type },
    std::pair{ "xy"_h, &Int32x2Type },
    std::pair{ "xx"_h, &Int32x2Type },
    std::pair{ "zy"_h, &Int32x2Type },
    std::pair{ "zx"_h, &Int32x2Type },
    std::pair{ "zz"_h, &Int32x2Type },
    std::pair{ "zw"_h, &Int32x2Type },
    std::pair{ "operator[](i16)"_h, &Int32x4_operator_index_Int16 },
    std::pair{ "wxzw"_h, &Int32x4Type },
    std::pair{ "wxzx"_h, &Int32x4Type },
    std::pair{ "wxzy"_h, &Int32x4Type },
    std::pair{ "wxzz"_h, &Int32x4Type },
    std::pair{ "wxxw"_h, &Int32x4Type },
    std::pair{ "wxxz"_h, &Int32x4Type },
    std::pair{ "wxxx"_h, &Int32x4Type },
    std::pair{ "wxxy"_h, &Int32x4Type },
    std::pair{ "wxyy"_h, &Int32x4Type },
    std::pair{ "wxyx"_h, &Int32x4Type },
    std::pair{ "wxyz"_h, &Int32x4Type },
    std::pair{ "wxyw"_h, &Int32x4Type },
    std::pair{ "wxww"_h, &Int32x4Type },
    std::pair{ "wxwz"_h, &Int32x4Type },
    std::pair{ "wxwy"_h, &Int32x4Type },
    std::pair{ "wxwx"_h, &Int32x4Type },
    std::pair{ "operator|(i32x4)"_h, &Int32x4_operator_or_Int32x4 },
    std::pair{ "wyyx"_h, &Int32x4Type },
    std::pair{ "wyyy"_h, &Int32x4Type },
    std::pair{ "wyyz"_h, &Int32x4Type },
    std::pair{ "wyyw"_h, &Int32x4Type },
    std::pair{ "wyxz"_h, &Int32x4Type },
    std::pair{ "wyxy"_h, &Int32x4Type },
    std::pair{ "wyxx"_h, &Int32x4Type },
    std::pair{ "wyxw"_h, &Int32x4Type },
    std::pair{ "wyzw"_h, &Int32x4Type },
    std::pair{ "wyzy"_h, &Int32x4Type },
    std::pair{ "wyzx"_h, &Int32x4Type },
    std::pair{ "wyzz"_h, &Int32x4Type },
    std::pair{ "wywz"_h, &Int32x4Type },
    std::pair{ "wywx"_h, &Int32x4Type },
    std::pair{ "wywy"_h, &Int32x4Type },
    std::pair{ "wyww"_h, &Int32x4Type },
    std::pair{ "operator*(u32)"_h, &Int32x4_operator_scale_UInt32 },
    std::pair{ "operator/(i32x4)"_h, &Int32x4_operator_div_Int32x4 },
    std::pair{ "operator<=(i32x4)"_h, &Int32x4_operator_lte_Int32x4 },
    std::pair{ "brrg"_h, &Int32x4Type },
    std::pair{ "brra"_h, &Int32x4Type },
    std::pair{ "brrb"_h, &Int32x4Type },
    std::pair{ "brrr"_h, &Int32x4Type },
    std::pair{ "brgr"_h, &Int32x4Type },
    std::pair{ "brgg"_h, &Int32x4Type },
    std::pair{ "brgb"_h, &Int32x4Type },
    std::pair{ "brga"_h, &Int32x4Type },
    std::pair{ "brar"_h, &Int32x4Type },
    std::pair{ "brag"_h, &Int32x4Type },
    std::pair{ "braa"_h, &Int32x4Type },
    std::pair{ "brab"_h, &Int32x4Type },
    std::pair{ "brbr"_h, &Int32x4Type },
    std::pair{ "brbg"_h, &Int32x4Type },
    std::pair{ "brba"_h, &Int32x4Type },
    std::pair{ "brbb"_h, &Int32x4Type },
    std::pair{ "operator^"_h, &Int32x4_operator_xor_Int32x4 },
    std::pair{ "operator|"_h, &Int32x4_operator_or_Int32x4 },
    std::pair{ "operator<"_h, &Int32x4_operator_lt_Int32x4 },
    std::pair{ "operator>"_h, &Int32x4_operator_gt_Int32x4 },
    std::pair{ "operator-"_h, &Int32x4_operator_sub_Int32x4 },
    std::pair{ "operator/"_h, &Int32x4_operator_div_Int32x4 },
    std::pair{ "operator+"_h, &Int32x4_operator_add_Int32x4 },
    std::pair{ "operator*"_h, &Int32x4_operator_mul_Int32x4 },
    std::pair{ "operator*"_h, &Int32x4_operator_scale_Float32 },
    std::pair{ "operator*"_h, &Int32x4_operator_scale_UInt32 },
    std::pair{ "operator*"_h, &Int32x4_operator_scale_Int32 },
    std::pair{ "operator%"_h, &Int32x4_operator_mod_Int32x4 },
    std::pair{ "operator&"_h, &Int32x4_operator_and_Int32x4 },
    std::pair{ "xzww"_h, &Int32x4Type },
    std::pair{ "xzwx"_h, &Int32x4Type },
    std::pair{ "xzwy"_h, &Int32x4Type },
    std::pair{ "xzwz"_h, &Int32x4Type },
    std::pair{ "xzzw"_h, &Int32x4Type },
    std::pair{ "xzzz"_h, &Int32x4Type },
    std::pair{ "xzzy"_h, &Int32x4Type },
    std::pair{ "xzzx"_h, &Int32x4Type },
    std::pair{ "xzyz"_h, &Int32x4Type },
    std::pair{ "xzyx"_h, &Int32x4Type },
    std::pair{ "xzyy"_h, &Int32x4Type },
    std::pair{ "xzyw"_h, &Int32x4Type },
    std::pair{ "xzxy"_h, &Int32x4Type },
    std::pair{ "xzxx"_h, &Int32x4Type },
    std::pair{ "xzxz"_h, &Int32x4Type },
    std::pair{ "xzxw"_h, &Int32x4Type },
    std::pair{ "yxwy"_h, &Int32x4Type },
    std::pair{ "yxwx"_h, &Int32x4Type },
    std::pair{ "yxwz"_h, &Int32x4Type },
    std::pair{ "yxww"_h, &Int32x4Type },
    std::pair{ "yxxw"_h, &Int32x4Type },
    std::pair{ "yxxx"_h, &Int32x4Type },
    std::pair{ "yxxy"_h, &Int32x4Type },
    std::pair{ "yxxz"_h, &Int32x4Type },
    std::pair{ "yxyw"_h, &Int32x4Type },
    std::pair{ "yxyz"_h, &Int32x4Type },
    std::pair{ "yxyy"_h, &Int32x4Type },
    std::pair{ "yxyx"_h, &Int32x4Type },
    std::pair{ "yxzz"_h, &Int32x4Type },
    std::pair{ "yxzx"_h, &Int32x4Type },
    std::pair{ "yxzy"_h, &Int32x4Type },
    std::pair{ "yxzw"_h, &Int32x4Type },
    std::pair{ "operator+(i32x4)"_h, &Int32x4_operator_add_Int32x4 },
    std::pair{ "xyzw"_h, &Int32x4Type },
    std::pair{ "xyzx"_h, &Int32x4Type },
    std::pair{ "xyzy"_h, &Int32x4Type },
    std::pair{ "xyzz"_h, &Int32x4Type },
    std::pair{ "xyxw"_h, &Int32x4Type },
    std::pair{ "xyxz"_h, &Int32x4Type },
    std::pair{ "xyxx"_h, &Int32x4Type },
    std::pair{ "xyxy"_h, &Int32x4Type },
    std::pair{ "xyyy"_h, &Int32x4Type },
    std::pair{ "xyyx"_h, &Int32x4Type },
    std::pair{ "xyyz"_h, &Int32x4Type },
    std::pair{ "xyyw"_h, &Int32x4Type },
    std::pair{ "xyww"_h, &Int32x4Type },
    std::pair{ "xywz"_h, &Int32x4Type },
    std::pair{ "xywy"_h, &Int32x4Type },
    std::pair{ "xywx"_h, &Int32x4Type },
    std::pair{ "ggrr"_h, &Int32x4Type },
    std::pair{ "ggrb"_h, &Int32x4Type },
    std::pair{ "ggra"_h, &Int32x4Type },
    std::pair{ "ggrg"_h, &Int32x4Type },
    std::pair{ "ggbb"_h, &Int32x4Type },
    std::pair{ "ggba"_h, &Int32x4Type },
    std::pair{ "ggbg"_h, &Int32x4Type },
    std::pair{ "ggbr"_h, &Int32x4Type },
    std::pair{ "ggar"_h, &Int32x4Type },
    std::pair{ "ggag"_h, &Int32x4Type },
    std::pair{ "ggab"_h, &Int32x4Type },
    std::pair{ "ggaa"_h, &Int32x4Type },
    std::pair{ "gggr"_h, &Int32x4Type },
    std::pair{ "gggg"_h, &Int32x4Type },
    std::pair{ "ggga"_h, &Int32x4Type },
    std::pair{ "gggb"_h, &Int32x4Type },
    std::pair{ "yyww"_h, &Int32x4Type },
    std::pair{ "yywx"_h, &Int32x4Type },
    std::pair{ "yywy"_h, &Int32x4Type },
    std::pair{ "yywz"_h, &Int32x4Type },
    std::pair{ "yyzw"_h, &Int32x4Type },
    std::pair{ "yyzz"_h, &Int32x4Type },
    std::pair{ "yyzy"_h, &Int32x4Type },
    std::pair{ "yyzx"_h, &Int32x4Type },
    std::pair{ "yyyz"_h, &Int32x4Type },
    std::pair{ "yyyx"_h, &Int32x4Type },
    std::pair{ "yyyy"_h, &Int32x4Type },
    std::pair{ "yyyw"_h, &Int32x4Type },
    std::pair{ "yyxy"_h, &Int32x4Type },
    std::pair{ "yyxx"_h, &Int32x4Type },
    std::pair{ "yyxz"_h, &Int32x4Type },
    std::pair{ "yyxw"_h, &Int32x4Type },
    std::pair{ "operator!=(i32x4)"_h, &Int32x4_operator_neq_Int32x4 },
    std::pair{ "xxyx"_h, &Int32x4Type },
    std::pair{ "xxyy"_h, &Int32x4Type },
    std::pair{ "xxyz"_h, &Int32x4Type },
    std::pair{ "xxyw"_h, &Int32x4Type },
    std::pair{ "xxxz"_h, &Int32x4Type },
    std::pair{ "xxxy"_h, &Int32x4Type },
    std::pair{ "xxxx"_h, &Int32x4Type },
    std::pair{ "xxxw"_h, &Int32x4Type },
    std::pair{ "xxzw"_h, &Int32x4Type },
    std::pair{ "xxzy"_h, &Int32x4Type },
    std::pair{ "xxzx"_h, &Int32x4Type },
    std::pair{ "xxzz"_h, &Int32x4Type },
    std::pair{ "xxwz"_h, &Int32x4Type },
    std::pair{ "xxwx"_h, &Int32x4Type },
    std::pair{ "xxwy"_h, &Int32x4Type },
    std::pair{ "xxww"_h, &Int32x4Type },
    std::pair{ "rgrg"_h, &Int32x4Type },
    std::pair{ "rgra"_h, &Int32x4Type },
    std::pair{ "rgrb"_h, &Int32x4Type },
    std::pair{ "rgrr"_h, &Int32x4Type },
    std::pair{ "rggb"_h, &Int32x4Type },
    std::pair{ "rgga"_h, &Int32x4Type },
    std::pair{ "rggg"_h, &Int32x4Type },
    std::pair{ "rggr"_h, &Int32x4Type },
    std::pair{ "rgbr"_h, &Int32x4Type },
    std::pair{ "rgbg"_h, &Int32x4Type },
    std::pair{ "rgba"_h, &Int32x4Type },
    std::pair{ "rgbb"_h, &Int32x4Type },
    std::pair{ "rgar"_h, &Int32x4Type },
    std::pair{ "rgag"_h, &Int32x4Type },
    std::pair{ "rgaa"_h, &Int32x4Type },
    std::pair{ "rgab"_h, &Int32x4Type },
    std::pair{ "www"_h, &Int32x3Type },
    std::pair{ "wwz"_h, &Int32x3Type },
    std::pair{ "wwy"_h, &Int32x3Type },
    std::pair{ "wwx"_h, &Int32x3Type },
    std::pair{ "wzw"_h, &Int32x3Type },
    std::pair{ "wzx"_h, &Int32x3Type },
    std::pair{ "wzy"_h, &Int32x3Type },
    std::pair{ "wzz"_h, &Int32x3Type },
    std::pair{ "wxz"_h, &Int32x3Type },
    std::pair{ "wxx"_h, &Int32x3Type },
    std::pair{ "wxy"_h, &Int32x3Type },
    std::pair{ "wxw"_h, &Int32x3Type },
    std::pair{ "wyy"_h, &Int32x3Type },
    std::pair{ "wyx"_h, &Int32x3Type },
    std::pair{ "wyz"_h, &Int32x3Type },
    std::pair{ "wyw"_h, &Int32x3Type },
    std::pair{ "operator*=(i32x4)"_h, &Int32x4_operator_mulasg_Int32x4 },
    std::pair{ "yzzw"_h, &Int32x4Type },
    std::pair{ "yzzx"_h, &Int32x4Type },
    std::pair{ "yzzy"_h, &Int32x4Type },
    std::pair{ "yzzz"_h, &Int32x4Type },
    std::pair{ "yzxw"_h, &Int32x4Type },
    std::pair{ "yzxz"_h, &Int32x4Type },
    std::pair{ "yzxx"_h, &Int32x4Type },
    std::pair{ "yzxy"_h, &Int32x4Type },
    std::pair{ "yzyy"_h, &Int32x4Type },
    std::pair{ "yzyx"_h, &Int32x4Type },
    std::pair{ "yzyz"_h, &Int32x4Type },
    std::pair{ "yzyw"_h, &Int32x4Type },
    std::pair{ "yzww"_h, &Int32x4Type },
    std::pair{ "yzwz"_h, &Int32x4Type },
    std::pair{ "yzwy"_h, &Int32x4Type },
    std::pair{ "yzwx"_h, &Int32x4Type },
    std::pair{ "operator|=(i32x4)"_h, &Int32x4_operator_orasg_Int32x4 },
    std::pair{ "operator^=(i32x4)"_h, &Int32x4_operator_xorasg_Int32x4 },
    std::pair{ "operator^(i32x4)"_h, &Int32x4_operator_xor_Int32x4 },
    std::pair{ "rarb"_h, &Int32x4Type },
    std::pair{ "rara"_h, &Int32x4Type },
    std::pair{ "rarg"_h, &Int32x4Type },
    std::pair{ "rarr"_h, &Int32x4Type },
    std::pair{ "raga"_h, &Int32x4Type },
    std::pair{ "ragb"_h, &Int32x4Type },
    std::pair{ "ragg"_h, &Int32x4Type },
    std::pair{ "ragr"_h, &Int32x4Type },
    std::pair{ "raag"_h, &Int32x4Type },
    std::pair{ "raab"_h, &Int32x4Type },
    std::pair{ "raaa"_h, &Int32x4Type },
    std::pair{ "raar"_h, &Int32x4Type },
    std::pair{ "rabr"_h, &Int32x4Type },
    std::pair{ "rabb"_h, &Int32x4Type },
    std::pair{ "raba"_h, &Int32x4Type },
    std::pair{ "rabg"_h, &Int32x4Type },
    std::pair{ "gbgr"_h, &Int32x4Type },
    std::pair{ "gbga"_h, &Int32x4Type },
    std::pair{ "gbgb"_h, &Int32x4Type },
    std::pair{ "gbgg"_h, &Int32x4Type },
    std::pair{ "gbar"_h, &Int32x4Type },
    std::pair{ "gbag"_h, &Int32x4Type },
    std::pair{ "gbab"_h, &Int32x4Type },
    std::pair{ "gbaa"_h, &Int32x4Type },
    std::pair{ "gbbb"_h, &Int32x4Type },
    std::pair{ "gbba"_h, &Int32x4Type },
    std::pair{ "gbbg"_h, &Int32x4Type },
    std::pair{ "gbbr"_h, &Int32x4Type },
    std::pair{ "gbrr"_h, &Int32x4Type },
    std::pair{ "gbrb"_h, &Int32x4Type },
    std::pair{ "gbra"_h, &Int32x4Type },
    std::pair{ "gbrg"_h, &Int32x4Type },
    std::pair{ "operator<(i32x4)"_h, &Int32x4_operator_lt_Int32x4 },
    std::pair{ "operator*(i32x4)"_h, &Int32x4_operator_mul_Int32x4 },
    std::pair{ "operator+=(i32x4)"_h, &Int32x4_operator_addasg_Int32x4 },
    std::pair{ "operator-(i32x4)"_h, &Int32x4_operator_sub_Int32x4 },
    std::pair{ "operator==(i32x4)"_h, &Int32x4_operator_eq_Int32x4 },
    std::pair{ "rbrg"_h, &Int32x4Type },
    std::pair{ "rbra"_h, &Int32x4Type },
    std::pair{ "rbrb"_h, &Int32x4Type },
    std::pair{ "rbrr"_h, &Int32x4Type },
    std::pair{ "rbgr"_h, &Int32x4Type },
    std::pair{ "rbgg"_h, &Int32x4Type },
    std::pair{ "rbgb"_h, &Int32x4Type },
    std::pair{ "rbga"_h, &Int32x4Type },
    std::pair{ "rbar"_h, &Int32x4Type },
    std::pair{ "rbag"_h, &Int32x4Type },
    std::pair{ "rbaa"_h, &Int32x4Type },
    std::pair{ "rbab"_h, &Int32x4Type },
    std::pair{ "rbbr"_h, &Int32x4Type },
    std::pair{ "rbbg"_h, &Int32x4Type },
    std::pair{ "rbba"_h, &Int32x4Type },
    std::pair{ "rbbb"_h, &Int32x4Type },
    std::pair{ "zyxx"_h, &Int32x4Type },
    std::pair{ "zyxy"_h, &Int32x4Type },
    std::pair{ "zyxz"_h, &Int32x4Type },
    std::pair{ "zyxw"_h, &Int32x4Type },
    std::pair{ "zyyz"_h, &Int32x4Type },
    std::pair{ "zyyy"_h, &Int32x4Type },
    std::pair{ "zyyx"_h, &Int32x4Type },
    std::pair{ "zyyw"_h, &Int32x4Type },
    std::pair{ "zyzw"_h, &Int32x4Type },
    std::pair{ "zyzz"_h, &Int32x4Type },
    std::pair{ "zyzx"_h, &Int32x4Type },
    std::pair{ "zyzy"_h, &Int32x4Type },
    std::pair{ "zyww"_h, &Int32x4Type },
    std::pair{ "zywy"_h, &Int32x4Type },
    std::pair{ "zywx"_h, &Int32x4Type },
    std::pair{ "zywz"_h, &Int32x4Type },
    std::pair{ "bggr"_h, &Int32x4Type },
    std::pair{ "bggb"_h, &Int32x4Type },
    std::pair{ "bgga"_h, &Int32x4Type },
    std::pair{ "bggg"_h, &Int32x4Type },
    std::pair{ "bgbg"_h, &Int32x4Type },
    std::pair{ "bgba"_h, &Int32x4Type },
    std::pair{ "bgbb"_h, &Int32x4Type },
    std::pair{ "bgbr"_h, &Int32x4Type },
    std::pair{ "bgag"_h, &Int32x4Type },
    std::pair{ "bgaa"_h, &Int32x4Type },
    std::pair{ "bgab"_h, &Int32x4Type },
    std::pair{ "bgar"_h, &Int32x4Type },
    std::pair{ "bgrr"_h, &Int32x4Type },
    std::pair{ "bgrg"_h, &Int32x4Type },
    std::pair{ "bgra"_h, &Int32x4Type },
    std::pair{ "bgrb"_h, &Int32x4Type },
    std::pair{ "arrr"_h, &Int32x4Type },
    std::pair{ "arra"_h, &Int32x4Type },
    std::pair{ "arrb"_h, &Int32x4Type },
    std::pair{ "arrg"_h, &Int32x4Type },
    std::pair{ "arba"_h, &Int32x4Type },
    std::pair{ "arbb"_h, &Int32x4Type },
    std::pair{ "arbg"_h, &Int32x4Type },
    std::pair{ "arbr"_h, &Int32x4Type },
    std::pair{ "araa"_h, &Int32x4Type },
    std::pair{ "arab"_h, &Int32x4Type },
    std::pair{ "arag"_h, &Int32x4Type },
    std::pair{ "arar"_h, &Int32x4Type },
    std::pair{ "argg"_h, &Int32x4Type },
    std::pair{ "argb"_h, &Int32x4Type },
    std::pair{ "arga"_h, &Int32x4Type },
    std::pair{ "argr"_h, &Int32x4Type },
    std::pair{ "rrg"_h, &Int32x3Type },
    std::pair{ "rra"_h, &Int32x3Type },
    std::pair{ "rrb"_h, &Int32x3Type },
    std::pair{ "rrr"_h, &Int32x3Type },
    std::pair{ "rgr"_h, &Int32x3Type },
    std::pair{ "rgg"_h, &Int32x3Type },
    std::pair{ "rgb"_h, &Int32x3Type },
    std::pair{ "rga"_h, &Int32x3Type },
    std::pair{ "rar"_h, &Int32x3Type },
    std::pair{ "rag"_h, &Int32x3Type },
    std::pair{ "raa"_h, &Int32x3Type },
    std::pair{ "rab"_h, &Int32x3Type },
    std::pair{ "rbr"_h, &Int32x3Type },
    std::pair{ "rbg"_h, &Int32x3Type },
    std::pair{ "rba"_h, &Int32x3Type },
    std::pair{ "rbb"_h, &Int32x3Type },
    std::pair{ "gagg"_h, &Int32x4Type },
    std::pair{ "gagb"_h, &Int32x4Type },
    std::pair{ "gaga"_h, &Int32x4Type },
    std::pair{ "gagr"_h, &Int32x4Type },
    std::pair{ "gaag"_h, &Int32x4Type },
    std::pair{ "gaaa"_h, &Int32x4Type },
    std::pair{ "gaab"_h, &Int32x4Type },
    std::pair{ "gaar"_h, &Int32x4Type },
    std::pair{ "gabg"_h, &Int32x4Type },
    std::pair{ "gaba"_h, &Int32x4Type },
    std::pair{ "gabb"_h, &Int32x4Type },
    std::pair{ "gabr"_h, &Int32x4Type },
    std::pair{ "garr"_h, &Int32x4Type },
    std::pair{ "garg"_h, &Int32x4Type },
    std::pair{ "gara"_h, &Int32x4Type },
    std::pair{ "garb"_h, &Int32x4Type },
    std::pair{ "operator[](u32)"_h, &Int32x4_operator_index_UInt32 },
    std::pair{ "operator<<="_h, &Int32x4_operator_lshasg_Int32x4 },
    std::pair{ "zxzz"_h, &Int32x4Type },
    std::pair{ "zxzy"_h, &Int32x4Type },
    std::pair{ "zxzx"_h, &Int32x4Type },
    std::pair{ "zxzw"_h, &Int32x4Type },
    std::pair{ "zxyw"_h, &Int32x4Type },
    std::pair{ "zxyz"_h, &Int32x4Type },
    std::pair{ "zxyx"_h, &Int32x4Type },
    std::pair{ "zxyy"_h, &Int32x4Type },
    std::pair{ "zxxw"_h, &Int32x4Type },
    std::pair{ "zxxy"_h, &Int32x4Type },
    std::pair{ "zxxx"_h, &Int32x4Type },
    std::pair{ "zxxz"_h, &Int32x4Type },
    std::pair{ "zxwx"_h, &Int32x4Type },
    std::pair{ "zxwy"_h, &Int32x4Type },
    std::pair{ "zxwz"_h, &Int32x4Type },
    std::pair{ "zxww"_h, &Int32x4Type },
    std::pair{ "operator*(f32)"_h, &Int32x4_operator_scale_Float32 },
    std::pair{ "bagr"_h, &Int32x4Type },
    std::pair{ "baga"_h, &Int32x4Type },
    std::pair{ "bagb"_h, &Int32x4Type },
    std::pair{ "bagg"_h, &Int32x4Type },
    std::pair{ "baar"_h, &Int32x4Type },
    std::pair{ "baag"_h, &Int32x4Type },
    std::pair{ "baab"_h, &Int32x4Type },
    std::pair{ "baaa"_h, &Int32x4Type },
    std::pair{ "babb"_h, &Int32x4Type },
    std::pair{ "baba"_h, &Int32x4Type },
    std::pair{ "babg"_h, &Int32x4Type },
    std::pair{ "babr"_h, &Int32x4Type },
    std::pair{ "barr"_h, &Int32x4Type },
    std::pair{ "barb"_h, &Int32x4Type },
    std::pair{ "bara"_h, &Int32x4Type },
    std::pair{ "barg"_h, &Int32x4Type },
    std::pair{ "operator[](u16)"_h, &Int32x4_operator_index_UInt16 },
    std::pair{ "operator>>="_h, &Int32x4_operator_rhsasg_Int32x4 },
    std::pair{ "wwwx"_h, &Int32x4Type },
    std::pair{ "wwwy"_h, &Int32x4Type },
    std::pair{ "wwwz"_h, &Int32x4Type },
    std::pair{ "wwww"_h, &Int32x4Type },
    std::pair{ "wwzz"_h, &Int32x4Type },
    std::pair{ "wwzy"_h, &Int32x4Type },
    std::pair{ "wwzx"_h, &Int32x4Type },
    std::pair{ "wwzw"_h, &Int32x4Type },
    std::pair{ "wwyz"_h, &Int32x4Type },
    std::pair{ "wwyx"_h, &Int32x4Type },
    std::pair{ "wwyy"_h, &Int32x4Type },
    std::pair{ "wwyw"_h, &Int32x4Type },
    std::pair{ "wwxw"_h, &Int32x4Type },
    std::pair{ "wwxy"_h, &Int32x4Type },
    std::pair{ "wwxx"_h, &Int32x4Type },
    std::pair{ "wwxz"_h, &Int32x4Type },
    std::pair{ "zzww"_h, &Int32x4Type },
    std::pair{ "zzwz"_h, &Int32x4Type },
    std::pair{ "zzwx"_h, &Int32x4Type },
    std::pair{ "zzwy"_h, &Int32x4Type },
    std::pair{ "zzyw"_h, &Int32x4Type },
    std::pair{ "zzyx"_h, &Int32x4Type },
    std::pair{ "zzyy"_h, &Int32x4Type },
    std::pair{ "zzyz"_h, &Int32x4Type },
    std::pair{ "zzxw"_h, &Int32x4Type },
    std::pair{ "zzxz"_h, &Int32x4Type },
    std::pair{ "zzxy"_h, &Int32x4Type },
    std::pair{ "zzxx"_h, &Int32x4Type },
    std::pair{ "zzzy"_h, &Int32x4Type },
    std::pair{ "zzzx"_h, &Int32x4Type },
    std::pair{ "zzzz"_h, &Int32x4Type },
    std::pair{ "zzzw"_h, &Int32x4Type },
    std::pair{ "operator&=(i32x4)"_h, &Int32x4_operator_andasg_Int32x4 },
    std::pair{ "g"_h, &Int32Type },
    std::pair{ "a"_h, &Int32Type },
    std::pair{ "b"_h, &Int32Type },
    std::pair{ "w"_h, &Int32Type },
    std::pair{ "r"_h, &Int32Type },
    std::pair{ "y"_h, &Int32Type },
    std::pair{ "x"_h, &Int32Type },
    std::pair{ "z"_h, &Int32Type },
    std::pair{ "operator*(i32)"_h, &Int32x4_operator_scale_Int32 },
    std::pair{ "bbgg"_h, &Int32x4Type },
    std::pair{ "bbgb"_h, &Int32x4Type },
    std::pair{ "bbga"_h, &Int32x4Type },
    std::pair{ "bbgr"_h, &Int32x4Type },
    std::pair{ "bbag"_h, &Int32x4Type },
    std::pair{ "bbaa"_h, &Int32x4Type },
    std::pair{ "bbab"_h, &Int32x4Type },
    std::pair{ "bbar"_h, &Int32x4Type },
    std::pair{ "bbbg"_h, &Int32x4Type },
    std::pair{ "bbba"_h, &Int32x4Type },
    std::pair{ "bbbb"_h, &Int32x4Type },
    std::pair{ "bbbr"_h, &Int32x4Type },
    std::pair{ "bbrr"_h, &Int32x4Type },
    std::pair{ "bbrg"_h, &Int32x4Type },
    std::pair{ "bbra"_h, &Int32x4Type },
    std::pair{ "bbrb"_h, &Int32x4Type },
    std::pair{ "ywy"_h, &Int32x3Type },
    std::pair{ "ywx"_h, &Int32x3Type },
    std::pair{ "ywz"_h, &Int32x3Type },
    std::pair{ "yww"_h, &Int32x3Type },
    std::pair{ "yxw"_h, &Int32x3Type },
    std::pair{ "yxx"_h, &Int32x3Type },
    std::pair{ "yxy"_h, &Int32x3Type },
    std::pair{ "yxz"_h, &Int32x3Type },
    std::pair{ "yyw"_h, &Int32x3Type },
    std::pair{ "yyz"_h, &Int32x3Type },
    std::pair{ "yyy"_h, &Int32x3Type },
    std::pair{ "yyx"_h, &Int32x3Type },
    std::pair{ "yzz"_h, &Int32x3Type },
    std::pair{ "yzx"_h, &Int32x3Type },
    std::pair{ "yzy"_h, &Int32x3Type },
    std::pair{ "yzw"_h, &Int32x3Type },
    std::pair{ "zwzx"_h, &Int32x4Type },
    std::pair{ "zwzy"_h, &Int32x4Type },
    std::pair{ "zwzz"_h, &Int32x4Type },
    std::pair{ "zwzw"_h, &Int32x4Type },
    std::pair{ "zwxw"_h, &Int32x4Type },
    std::pair{ "zwxz"_h, &Int32x4Type },
    std::pair{ "zwxx"_h, &Int32x4Type },
    std::pair{ "zwxy"_h, &Int32x4Type },
    std::pair{ "zwyw"_h, &Int32x4Type },
    std::pair{ "zwyy"_h, &Int32x4Type },
    std::pair{ "zwyx"_h, &Int32x4Type },
    std::pair{ "zwyz"_h, &Int32x4Type },
    std::pair{ "zwwz"_h, &Int32x4Type },
    std::pair{ "zwwy"_h, &Int32x4Type },
    std::pair{ "zwwx"_h, &Int32x4Type },
    std::pair{ "zwww"_h, &Int32x4Type },
    std::pair{ "xww"_h, &Int32x3Type },
    std::pair{ "xwx"_h, &Int32x3Type },
    std::pair{ "xwy"_h, &Int32x3Type },
    std::pair{ "xwz"_h, &Int32x3Type },
    std::pair{ "xzw"_h, &Int32x3Type },
    std::pair{ "xzz"_h, &Int32x3Type },
    std::pair{ "xzy"_h, &Int32x3Type },
    std::pair{ "xzx"_h, &Int32x3Type },
    std::pair{ "xyz"_h, &Int32x3Type },
    std::pair{ "xyx"_h, &Int32x3Type },
    std::pair{ "xyy"_h, &Int32x3Type },
    std::pair{ "xyw"_h, &Int32x3Type },
    std::pair{ "xxy"_h, &Int32x3Type },
    std::pair{ "xxx"_h, &Int32x3Type },
    std::pair{ "xxz"_h, &Int32x3Type },
    std::pair{ "xxw"_h, &Int32x3Type },
    std::pair{ "operator-=(i32x4)"_h, &Int32x4_operator_subasg_Int32x4 },
    std::pair{ "operator>=(i32x4)"_h, &Int32x4_operator_gte_Int32x4 },
    std::pair{ "zyx"_h, &Int32x3Type },
    std::pair{ "zyy"_h, &Int32x3Type },
    std::pair{ "zyz"_h, &Int32x3Type },
    std::pair{ "zyw"_h, &Int32x3Type },
    std::pair{ "zxz"_h, &Int32x3Type },
    std::pair{ "zxy"_h, &Int32x3Type },
    std::pair{ "zxx"_h, &Int32x3Type },
    std::pair{ "zxw"_h, &Int32x3Type },
    std::pair{ "zzw"_h, &Int32x3Type },
    std::pair{ "zzy"_h, &Int32x3Type },
    std::pair{ "zzx"_h, &Int32x3Type },
    std::pair{ "zzz"_h, &Int32x3Type },
    std::pair{ "zwz"_h, &Int32x3Type },
    std::pair{ "zwx"_h, &Int32x3Type },
    std::pair{ "zwy"_h, &Int32x3Type },
    std::pair{ "zww"_h, &Int32x3Type },
    std::pair{ "ggr"_h, &Int32x3Type },
    std::pair{ "ggb"_h, &Int32x3Type },
    std::pair{ "gga"_h, &Int32x3Type },
    std::pair{ "ggg"_h, &Int32x3Type },
    std::pair{ "gbg"_h, &Int32x3Type },
    std::pair{ "gba"_h, &Int32x3Type },
    std::pair{ "gbb"_h, &Int32x3Type },
    std::pair{ "gbr"_h, &Int32x3Type },
    std::pair{ "gag"_h, &Int32x3Type },
    std::pair{ "gaa"_h, &Int32x3Type },
    std::pair{ "gab"_h, &Int32x3Type },
    std::pair{ "gar"_h, &Int32x3Type },
    std::pair{ "grr"_h, &Int32x3Type },
    std::pair{ "grg"_h, &Int32x3Type },
    std::pair{ "gra"_h, &Int32x3Type },
    std::pair{ "grb"_h, &Int32x3Type },
    std::pair{ "operator&(i32x4)"_h, &Int32x4_operator_and_Int32x4 },
    std::pair{ "xwww"_h, &Int32x4Type },
    std::pair{ "xwwy"_h, &Int32x4Type },
    std::pair{ "xwwx"_h, &Int32x4Type },
    std::pair{ "xwwz"_h, &Int32x4Type },
    std::pair{ "xwxx"_h, &Int32x4Type },
    std::pair{ "xwxy"_h, &Int32x4Type },
    std::pair{ "xwxz"_h, &Int32x4Type },
    std::pair{ "xwxw"_h, &Int32x4Type },
    std::pair{ "xwyz"_h, &Int32x4Type },
    std::pair{ "xwyy"_h, &Int32x4Type },
    std::pair{ "xwyx"_h, &Int32x4Type },
    std::pair{ "xwyw"_h, &Int32x4Type },
    std::pair{ "xwzz"_h, &Int32x4Type },
    std::pair{ "xwzx"_h, &Int32x4Type },
    std::pair{ "xwzy"_h, &Int32x4Type },
    std::pair{ "xwzw"_h, &Int32x4Type },
    std::pair{ "operator>>(i32x4)"_h, &Int32x4_operator_rsh_Int32x4 },
    std::pair{ "operator>(i32x4)"_h, &Int32x4_operator_gt_Int32x4 },
    std::pair{ "operator^="_h, &Int32x4_operator_xorasg_Int32x4 },
    std::pair{ "operator[]"_h, &Int32x4_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Int32x4_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Int32x4_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Int32x4_operator_index_UInt16 },
    std::pair{ "agrr"_h, &Int32x4Type },
    std::pair{ "agra"_h, &Int32x4Type },
    std::pair{ "agrb"_h, &Int32x4Type },
    std::pair{ "agrg"_h, &Int32x4Type },
    std::pair{ "operator|="_h, &Int32x4_operator_orasg_Int32x4 },
    std::pair{ "agar"_h, &Int32x4Type },
    std::pair{ "agaa"_h, &Int32x4Type },
    std::pair{ "agab"_h, &Int32x4Type },
    std::pair{ "agag"_h, &Int32x4Type },
    std::pair{ "agba"_h, &Int32x4Type },
    std::pair{ "agbb"_h, &Int32x4Type },
    std::pair{ "agbg"_h, &Int32x4Type },
    std::pair{ "agbr"_h, &Int32x4Type },
    std::pair{ "aggb"_h, &Int32x4Type },
    std::pair{ "agga"_h, &Int32x4Type },
    std::pair{ "aggg"_h, &Int32x4Type },
    std::pair{ "aggr"_h, &Int32x4Type },
    std::pair{ "operator=="_h, &Int32x4_operator_eq_Int32x4 },
    std::pair{ "operator<="_h, &Int32x4_operator_lte_Int32x4 },
    std::pair{ "operator<<"_h, &Int32x4_operator_lsh_Int32x4 },
    std::pair{ "operator>="_h, &Int32x4_operator_gte_Int32x4 },
    std::pair{ "operator>>"_h, &Int32x4_operator_rsh_Int32x4 },
    std::pair{ "operator-="_h, &Int32x4_operator_subasg_Int32x4 },
    std::pair{ "operator/="_h, &Int32x4_operator_divasg_Int32x4 },
    std::pair{ "operator+="_h, &Int32x4_operator_addasg_Int32x4 },
    std::pair{ "operator*="_h, &Int32x4_operator_mulasg_Int32x4 },
    std::pair{ "operator&="_h, &Int32x4_operator_andasg_Int32x4 },
    std::pair{ "operator!="_h, &Int32x4_operator_neq_Int32x4 },
    std::pair{ "agr"_h, &Int32x3Type },
    std::pair{ "aga"_h, &Int32x3Type },
    std::pair{ "agb"_h, &Int32x3Type },
    std::pair{ "agg"_h, &Int32x3Type },
    std::pair{ "aar"_h, &Int32x3Type },
    std::pair{ "aag"_h, &Int32x3Type },
    std::pair{ "aab"_h, &Int32x3Type },
    std::pair{ "aaa"_h, &Int32x3Type },
    std::pair{ "abb"_h, &Int32x3Type },
    std::pair{ "aba"_h, &Int32x3Type },
    std::pair{ "abg"_h, &Int32x3Type },
    std::pair{ "abr"_h, &Int32x3Type },
    std::pair{ "arr"_h, &Int32x3Type },
    std::pair{ "arb"_h, &Int32x3Type },
    std::pair{ "ara"_h, &Int32x3Type },
    std::pair{ "arg"_h, &Int32x3Type },
    std::pair{ "operator/=(i32x4)"_h, &Int32x4_operator_divasg_Int32x4 },
    std::pair{ "aarr"_h, &Int32x4Type },
    std::pair{ "aarg"_h, &Int32x4Type },
    std::pair{ "aarb"_h, &Int32x4Type },
    std::pair{ "aara"_h, &Int32x4Type },
    std::pair{ "aagr"_h, &Int32x4Type },
    std::pair{ "aaga"_h, &Int32x4Type },
    std::pair{ "aagb"_h, &Int32x4Type },
    std::pair{ "aagg"_h, &Int32x4Type },
    std::pair{ "aabg"_h, &Int32x4Type },
    std::pair{ "aabb"_h, &Int32x4Type },
    std::pair{ "aaba"_h, &Int32x4Type },
    std::pair{ "aabr"_h, &Int32x4Type },
    std::pair{ "aaab"_h, &Int32x4Type },
    std::pair{ "aaaa"_h, &Int32x4Type },
    std::pair{ "aaag"_h, &Int32x4Type },
    std::pair{ "aaar"_h, &Int32x4Type },
    std::pair{ "operator>>=(i32x4)"_h, &Int32x4_operator_rhsasg_Int32x4 },
    std::pair{ "operator[](i32)"_h, &Int32x4_operator_index_Int32 },
    std::pair{ "grrb"_h, &Int32x4Type },
    std::pair{ "grra"_h, &Int32x4Type },
    std::pair{ "grrg"_h, &Int32x4Type },
    std::pair{ "grrr"_h, &Int32x4Type },
    std::pair{ "grga"_h, &Int32x4Type },
    std::pair{ "grgb"_h, &Int32x4Type },
    std::pair{ "grgg"_h, &Int32x4Type },
    std::pair{ "grgr"_h, &Int32x4Type },
    std::pair{ "grag"_h, &Int32x4Type },
    std::pair{ "grab"_h, &Int32x4Type },
    std::pair{ "graa"_h, &Int32x4Type },
    std::pair{ "grar"_h, &Int32x4Type },
    std::pair{ "grbr"_h, &Int32x4Type },
    std::pair{ "grbb"_h, &Int32x4Type },
    std::pair{ "grba"_h, &Int32x4Type },
    std::pair{ "grbg"_h, &Int32x4Type },
    std::pair{ "abbr"_h, &Int32x4Type },
    std::pair{ "abba"_h, &Int32x4Type },
    std::pair{ "abbb"_h, &Int32x4Type },
    std::pair{ "abbg"_h, &Int32x4Type },
    std::pair{ "abar"_h, &Int32x4Type },
    std::pair{ "abaa"_h, &Int32x4Type },
    std::pair{ "abab"_h, &Int32x4Type },
    std::pair{ "abag"_h, &Int32x4Type },
    std::pair{ "abgr"_h, &Int32x4Type },
    std::pair{ "abgg"_h, &Int32x4Type },
    std::pair{ "abgb"_h, &Int32x4Type },
    std::pair{ "abga"_h, &Int32x4Type },
    std::pair{ "abra"_h, &Int32x4Type },
    std::pair{ "abrb"_h, &Int32x4Type },
    std::pair{ "abrg"_h, &Int32x4Type },
    std::pair{ "abrr"_h, &Int32x4Type },
    std::pair{ "rrgg"_h, &Int32x4Type },
    std::pair{ "rrgb"_h, &Int32x4Type },
    std::pair{ "rrga"_h, &Int32x4Type },
    std::pair{ "rrgr"_h, &Int32x4Type },
    std::pair{ "rrag"_h, &Int32x4Type },
    std::pair{ "rraa"_h, &Int32x4Type },
    std::pair{ "rrab"_h, &Int32x4Type },
    std::pair{ "rrar"_h, &Int32x4Type },
    std::pair{ "rrbg"_h, &Int32x4Type },
    std::pair{ "rrba"_h, &Int32x4Type },
    std::pair{ "rrbb"_h, &Int32x4Type },
    std::pair{ "rrbr"_h, &Int32x4Type },
    std::pair{ "rrrr"_h, &Int32x4Type },
    std::pair{ "rrrg"_h, &Int32x4Type },
    std::pair{ "rrra"_h, &Int32x4Type },
    std::pair{ "rrrb"_h, &Int32x4Type }
    };

Int32x4::Int32x4()
{
    this->name = "i32x4"_c;
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    /// operator[] with Int32
    Int32x4_operator_index_Int32_arg.name = "arg"_c;
    Int32x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x4_operator_index_Int32.name = Int32x4_operator_index_Int32_name;
    Int32x4_operator_index_Int32.backendIndex = 917;
    Int32x4_operator_index_Int32.returnType = Type::FullType { Int32Type.name };
    Int32x4_operator_index_Int32.parameters = Int32x4_operator_index_Int32_args;
    Symbol::Resolved(&Int32x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_operator_index_Int32)->signature = "operator[](i32) i32"_c;
    Symbol::Resolved(&Int32x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int32x4_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int32x4_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt32
    Int32x4_operator_index_UInt32_arg.name = "arg"_c;
    Int32x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x4_operator_index_UInt32.name = Int32x4_operator_index_UInt32_name;
    Int32x4_operator_index_UInt32.backendIndex = 918;
    Int32x4_operator_index_UInt32.returnType = Type::FullType { Int32Type.name };
    Int32x4_operator_index_UInt32.parameters = Int32x4_operator_index_UInt32_args;
    Symbol::Resolved(&Int32x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x4_operator_index_UInt32)->signature = "operator[](u32) i32"_c;
    Symbol::Resolved(&Int32x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int32x4_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int32x4_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    /// operator[] with Int16
    Int32x4_operator_index_Int16_arg.name = "arg"_c;
    Int32x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int32x4_operator_index_Int16.name = Int32x4_operator_index_Int16_name;
    Int32x4_operator_index_Int16.backendIndex = 919;
    Int32x4_operator_index_Int16.returnType = Type::FullType { Int32Type.name };
    Int32x4_operator_index_Int16.parameters = Int32x4_operator_index_Int16_args;
    Symbol::Resolved(&Int32x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x4_operator_index_Int16)->signature = "operator[](i16) i32"_c;
    Symbol::Resolved(&Int32x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int32x4_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int32x4_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt16
    Int32x4_operator_index_UInt16_arg.name = "arg"_c;
    Int32x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int32x4_operator_index_UInt16.name = Int32x4_operator_index_UInt16_name;
    Int32x4_operator_index_UInt16.backendIndex = 920;
    Int32x4_operator_index_UInt16.returnType = Type::FullType { Int32Type.name };
    Int32x4_operator_index_UInt16.parameters = Int32x4_operator_index_UInt16_args;
    Symbol::Resolved(&Int32x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x4_operator_index_UInt16)->signature = "operator[](u16) i32"_c;
    Symbol::Resolved(&Int32x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int32x4_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int32x4_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    /// operator+ with Int32x4
    Int32x4_operator_add_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_add_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_add_Int32x4.name = Int32x4_operator_add_Int32x4_name;
    Int32x4_operator_add_Int32x4.backendIndex = 921;
    Int32x4_operator_add_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_add_Int32x4.parameters = Int32x4_operator_add_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_add_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_add_Int32x4)->signature = "operator+(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_add_Int32x4)->name = "operator+(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_add_Int32x4)->nameWithVarNames = "operator+(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_add_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator- with Int32x4
    Int32x4_operator_sub_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_sub_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_sub_Int32x4.name = Int32x4_operator_sub_Int32x4_name;
    Int32x4_operator_sub_Int32x4.backendIndex = 922;
    Int32x4_operator_sub_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_sub_Int32x4.parameters = Int32x4_operator_sub_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_sub_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_sub_Int32x4)->signature = "operator-(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_sub_Int32x4)->name = "operator-(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_sub_Int32x4)->nameWithVarNames = "operator-(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_sub_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator* with Int32x4
    Int32x4_operator_mul_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_mul_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_mul_Int32x4.name = Int32x4_operator_mul_Int32x4_name;
    Int32x4_operator_mul_Int32x4.backendIndex = 923;
    Int32x4_operator_mul_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_mul_Int32x4.parameters = Int32x4_operator_mul_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_mul_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_mul_Int32x4)->signature = "operator*(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_mul_Int32x4)->name = "operator*(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_mul_Int32x4)->nameWithVarNames = "operator*(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_mul_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator/ with Int32x4
    Int32x4_operator_div_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_div_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_div_Int32x4.name = Int32x4_operator_div_Int32x4_name;
    Int32x4_operator_div_Int32x4.backendIndex = 924;
    Int32x4_operator_div_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_div_Int32x4.parameters = Int32x4_operator_div_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_div_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_div_Int32x4)->signature = "operator/(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_div_Int32x4)->name = "operator/(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_div_Int32x4)->nameWithVarNames = "operator/(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_div_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator% with Int32x4
    Int32x4_operator_mod_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_mod_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_mod_Int32x4.name = Int32x4_operator_mod_Int32x4_name;
    Int32x4_operator_mod_Int32x4.backendIndex = 925;
    Int32x4_operator_mod_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_mod_Int32x4.parameters = Int32x4_operator_mod_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_mod_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_mod_Int32x4)->signature = "operator%(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_mod_Int32x4)->name = "operator%(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_mod_Int32x4)->nameWithVarNames = "operator%(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_mod_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator+= with Int32x4
    Int32x4_operator_addasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_addasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_addasg_Int32x4.name = Int32x4_operator_addasg_Int32x4_name;
    Int32x4_operator_addasg_Int32x4.backendIndex = 926;
    Int32x4_operator_addasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_addasg_Int32x4.parameters = Int32x4_operator_addasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_addasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_addasg_Int32x4)->signature = "operator+=(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_addasg_Int32x4)->name = "operator+=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_addasg_Int32x4)->nameWithVarNames = "operator+=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_addasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator-= with Int32x4
    Int32x4_operator_subasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_subasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_subasg_Int32x4.name = Int32x4_operator_subasg_Int32x4_name;
    Int32x4_operator_subasg_Int32x4.backendIndex = 927;
    Int32x4_operator_subasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_subasg_Int32x4.parameters = Int32x4_operator_subasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_subasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_subasg_Int32x4)->signature = "operator-=(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_subasg_Int32x4)->name = "operator-=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_subasg_Int32x4)->nameWithVarNames = "operator-=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_subasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator*= with Int32x4
    Int32x4_operator_mulasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_mulasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_mulasg_Int32x4.name = Int32x4_operator_mulasg_Int32x4_name;
    Int32x4_operator_mulasg_Int32x4.backendIndex = 928;
    Int32x4_operator_mulasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_mulasg_Int32x4.parameters = Int32x4_operator_mulasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_mulasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_mulasg_Int32x4)->signature = "operator*=(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_mulasg_Int32x4)->name = "operator*=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_mulasg_Int32x4)->nameWithVarNames = "operator*=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_mulasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator/= with Int32x4
    Int32x4_operator_divasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_divasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_divasg_Int32x4.name = Int32x4_operator_divasg_Int32x4_name;
    Int32x4_operator_divasg_Int32x4.backendIndex = 929;
    Int32x4_operator_divasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_divasg_Int32x4.parameters = Int32x4_operator_divasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_divasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_divasg_Int32x4)->signature = "operator/=(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_divasg_Int32x4)->name = "operator/=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_divasg_Int32x4)->nameWithVarNames = "operator/=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_divasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator< with Int32x4
    Int32x4_operator_lt_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_lt_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_lt_Int32x4.name = Int32x4_operator_lt_Int32x4_name;
    Int32x4_operator_lt_Int32x4.backendIndex = 930;
    Int32x4_operator_lt_Int32x4.returnType = Type::FullType { Bool8x4Type.name };
    Int32x4_operator_lt_Int32x4.parameters = Int32x4_operator_lt_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_lt_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_lt_Int32x4)->signature = "operator<(i32x4) b8x4"_c;
    Symbol::Resolved(&Int32x4_operator_lt_Int32x4)->name = "operator<(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lt_Int32x4)->nameWithVarNames = "operator<(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lt_Int32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator<= with Int32x4
    Int32x4_operator_lte_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_lte_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_lte_Int32x4.name = Int32x4_operator_lte_Int32x4_name;
    Int32x4_operator_lte_Int32x4.backendIndex = 931;
    Int32x4_operator_lte_Int32x4.returnType = Type::FullType { Bool8x4Type.name };
    Int32x4_operator_lte_Int32x4.parameters = Int32x4_operator_lte_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_lte_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_lte_Int32x4)->signature = "operator<=(i32x4) b8x4"_c;
    Symbol::Resolved(&Int32x4_operator_lte_Int32x4)->name = "operator<=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lte_Int32x4)->nameWithVarNames = "operator<=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lte_Int32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator> with Int32x4
    Int32x4_operator_gt_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_gt_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_gt_Int32x4.name = Int32x4_operator_gt_Int32x4_name;
    Int32x4_operator_gt_Int32x4.backendIndex = 932;
    Int32x4_operator_gt_Int32x4.returnType = Type::FullType { Bool8x4Type.name };
    Int32x4_operator_gt_Int32x4.parameters = Int32x4_operator_gt_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_gt_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_gt_Int32x4)->signature = "operator>(i32x4) b8x4"_c;
    Symbol::Resolved(&Int32x4_operator_gt_Int32x4)->name = "operator>(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_gt_Int32x4)->nameWithVarNames = "operator>(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_gt_Int32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator>= with Int32x4
    Int32x4_operator_gte_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_gte_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_gte_Int32x4.name = Int32x4_operator_gte_Int32x4_name;
    Int32x4_operator_gte_Int32x4.backendIndex = 933;
    Int32x4_operator_gte_Int32x4.returnType = Type::FullType { Bool8x4Type.name };
    Int32x4_operator_gte_Int32x4.parameters = Int32x4_operator_gte_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_gte_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_gte_Int32x4)->signature = "operator>=(i32x4) b8x4"_c;
    Symbol::Resolved(&Int32x4_operator_gte_Int32x4)->name = "operator>=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_gte_Int32x4)->nameWithVarNames = "operator>=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_gte_Int32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator== with Int32x4
    Int32x4_operator_eq_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_eq_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_eq_Int32x4.name = Int32x4_operator_eq_Int32x4_name;
    Int32x4_operator_eq_Int32x4.backendIndex = 934;
    Int32x4_operator_eq_Int32x4.returnType = Type::FullType { Bool8x4Type.name };
    Int32x4_operator_eq_Int32x4.parameters = Int32x4_operator_eq_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_eq_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_eq_Int32x4)->signature = "operator==(i32x4) b8x4"_c;
    Symbol::Resolved(&Int32x4_operator_eq_Int32x4)->name = "operator==(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_eq_Int32x4)->nameWithVarNames = "operator==(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_eq_Int32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator!= with Int32x4
    Int32x4_operator_neq_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_neq_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_neq_Int32x4.name = Int32x4_operator_neq_Int32x4_name;
    Int32x4_operator_neq_Int32x4.backendIndex = 935;
    Int32x4_operator_neq_Int32x4.returnType = Type::FullType { Bool8x4Type.name };
    Int32x4_operator_neq_Int32x4.parameters = Int32x4_operator_neq_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_neq_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_neq_Int32x4)->signature = "operator!=(i32x4) b8x4"_c;
    Symbol::Resolved(&Int32x4_operator_neq_Int32x4)->name = "operator!=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_neq_Int32x4)->nameWithVarNames = "operator!=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_neq_Int32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator* with Float32
    Int32x4_operator_scale_Float32_arg.name = "arg"_c;
    Int32x4_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int32x4_operator_scale_Float32.name = Int32x4_operator_scale_Float32_name;
    Int32x4_operator_scale_Float32.backendIndex = 936;
    Int32x4_operator_scale_Float32.returnType = Type::FullType { Float32x4Type.name };
    Int32x4_operator_scale_Float32.parameters = Int32x4_operator_scale_Float32_args;
    Symbol::Resolved(&Int32x4_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x4_operator_scale_Float32)->signature = "operator*(f32) f32x4"_c;
    Symbol::Resolved(&Int32x4_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Int32x4_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Int32x4_operator_scale_Float32)->returnTypeSymbol = &Float32x4Type;

    /// operator* with UInt32
    Int32x4_operator_scale_UInt32_arg.name = "arg"_c;
    Int32x4_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x4_operator_scale_UInt32.name = Int32x4_operator_scale_UInt32_name;
    Int32x4_operator_scale_UInt32.backendIndex = 937;
    Int32x4_operator_scale_UInt32.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_scale_UInt32.parameters = Int32x4_operator_scale_UInt32_args;
    Symbol::Resolved(&Int32x4_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x4_operator_scale_UInt32)->signature = "operator*(u32) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&Int32x4_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&Int32x4_operator_scale_UInt32)->returnTypeSymbol = &Int32x4Type;

    /// operator* with Int32
    Int32x4_operator_scale_Int32_arg.name = "arg"_c;
    Int32x4_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x4_operator_scale_Int32.name = Int32x4_operator_scale_Int32_name;
    Int32x4_operator_scale_Int32.backendIndex = 938;
    Int32x4_operator_scale_Int32.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_scale_Int32.parameters = Int32x4_operator_scale_Int32_args;
    Symbol::Resolved(&Int32x4_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_operator_scale_Int32)->signature = "operator*(i32) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&Int32x4_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&Int32x4_operator_scale_Int32)->returnTypeSymbol = &Int32x4Type;

    /// operator| with Int32x4
    Int32x4_operator_or_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_or_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_or_Int32x4.name = Int32x4_operator_or_Int32x4_name;
    Int32x4_operator_or_Int32x4.backendIndex = 939;
    Int32x4_operator_or_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_or_Int32x4.parameters = Int32x4_operator_or_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_or_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_or_Int32x4)->signature = "operator|(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_or_Int32x4)->name = "operator|(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_or_Int32x4)->nameWithVarNames = "operator|(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_or_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator& with Int32x4
    Int32x4_operator_and_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_and_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_and_Int32x4.name = Int32x4_operator_and_Int32x4_name;
    Int32x4_operator_and_Int32x4.backendIndex = 940;
    Int32x4_operator_and_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_and_Int32x4.parameters = Int32x4_operator_and_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_and_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_and_Int32x4)->signature = "operator&(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_and_Int32x4)->name = "operator&(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_and_Int32x4)->nameWithVarNames = "operator&(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_and_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator^ with Int32x4
    Int32x4_operator_xor_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_xor_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_xor_Int32x4.name = Int32x4_operator_xor_Int32x4_name;
    Int32x4_operator_xor_Int32x4.backendIndex = 941;
    Int32x4_operator_xor_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_xor_Int32x4.parameters = Int32x4_operator_xor_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_xor_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_xor_Int32x4)->signature = "operator^(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_xor_Int32x4)->name = "operator^(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_xor_Int32x4)->nameWithVarNames = "operator^(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_xor_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator<< with Int32x4
    Int32x4_operator_lsh_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_lsh_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_lsh_Int32x4.name = Int32x4_operator_lsh_Int32x4_name;
    Int32x4_operator_lsh_Int32x4.backendIndex = 942;
    Int32x4_operator_lsh_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_lsh_Int32x4.parameters = Int32x4_operator_lsh_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_lsh_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_lsh_Int32x4)->signature = "operator<<(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_lsh_Int32x4)->name = "operator<<(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lsh_Int32x4)->nameWithVarNames = "operator<<(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lsh_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator>> with Int32x4
    Int32x4_operator_rsh_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_rsh_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_rsh_Int32x4.name = Int32x4_operator_rsh_Int32x4_name;
    Int32x4_operator_rsh_Int32x4.backendIndex = 943;
    Int32x4_operator_rsh_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_rsh_Int32x4.parameters = Int32x4_operator_rsh_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_rsh_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_rsh_Int32x4)->signature = "operator>>(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_rsh_Int32x4)->name = "operator>>(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_rsh_Int32x4)->nameWithVarNames = "operator>>(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_rsh_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator|= with Int32x4
    Int32x4_operator_orasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_orasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_orasg_Int32x4.name = Int32x4_operator_orasg_Int32x4_name;
    Int32x4_operator_orasg_Int32x4.backendIndex = 944;
    Int32x4_operator_orasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_orasg_Int32x4.parameters = Int32x4_operator_orasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_orasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_orasg_Int32x4)->signature = "operator|=(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_orasg_Int32x4)->name = "operator|=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_orasg_Int32x4)->nameWithVarNames = "operator|=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_orasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator&= with Int32x4
    Int32x4_operator_andasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_andasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_andasg_Int32x4.name = Int32x4_operator_andasg_Int32x4_name;
    Int32x4_operator_andasg_Int32x4.backendIndex = 945;
    Int32x4_operator_andasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_andasg_Int32x4.parameters = Int32x4_operator_andasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_andasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_andasg_Int32x4)->signature = "operator&=(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_andasg_Int32x4)->name = "operator&=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_andasg_Int32x4)->nameWithVarNames = "operator&=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_andasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator^= with Int32x4
    Int32x4_operator_xorasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_xorasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_xorasg_Int32x4.name = Int32x4_operator_xorasg_Int32x4_name;
    Int32x4_operator_xorasg_Int32x4.backendIndex = 946;
    Int32x4_operator_xorasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_xorasg_Int32x4.parameters = Int32x4_operator_xorasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_xorasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_xorasg_Int32x4)->signature = "operator^=(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_xorasg_Int32x4)->name = "operator^=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_xorasg_Int32x4)->nameWithVarNames = "operator^=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_xorasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator<<= with Int32x4
    Int32x4_operator_lshasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_lshasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_lshasg_Int32x4.name = Int32x4_operator_lshasg_Int32x4_name;
    Int32x4_operator_lshasg_Int32x4.backendIndex = 947;
    Int32x4_operator_lshasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_lshasg_Int32x4.parameters = Int32x4_operator_lshasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_lshasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_lshasg_Int32x4)->signature = "operator<<=(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_lshasg_Int32x4)->name = "operator<<=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lshasg_Int32x4)->nameWithVarNames = "operator<<=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lshasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator>>= with Int32x4
    Int32x4_operator_rhsasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_rhsasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_rhsasg_Int32x4.name = Int32x4_operator_rhsasg_Int32x4_name;
    Int32x4_operator_rhsasg_Int32x4.backendIndex = 948;
    Int32x4_operator_rhsasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_rhsasg_Int32x4.parameters = Int32x4_operator_rhsasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_rhsasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_rhsasg_Int32x4)->signature = "operator>>=(i32x4) i32x4"_c;
    Symbol::Resolved(&Int32x4_operator_rhsasg_Int32x4)->name = "operator>>=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_rhsasg_Int32x4)->nameWithVarNames = "operator>>=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_rhsasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    this->scope.symbolLookup = Int32x4_symbolLookup;
}
Int32x4 Int32x4Type;

/// operator[] with Int32
Variable Bool8x4_operator_index_Int32_arg;
Function Bool8x4_operator_index_Int32;
inline constexpr std::array Bool8x4_operator_index_Int32_args = { &Bool8x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Bool8x4_operator_index_UInt32_arg;
Function Bool8x4_operator_index_UInt32;
inline constexpr std::array Bool8x4_operator_index_UInt32_args = { &Bool8x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Bool8x4_operator_index_Int16_arg;
Function Bool8x4_operator_index_Int16;
inline constexpr std::array Bool8x4_operator_index_Int16_args = { &Bool8x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Bool8x4_operator_index_UInt16_arg;
Function Bool8x4_operator_index_UInt16;
inline constexpr std::array Bool8x4_operator_index_UInt16_args = { &Bool8x4_operator_index_UInt16_arg };

/// operator|| with Bool8x4
Variable Bool8x4_operator_oror_Bool8x4_arg;
Function Bool8x4_operator_oror_Bool8x4;
inline constexpr std::array Bool8x4_operator_oror_Bool8x4_args = { &Bool8x4_operator_oror_Bool8x4_arg };

/// operator&& with Bool8x4
Variable Bool8x4_operator_andand_Bool8x4_arg;
Function Bool8x4_operator_andand_Bool8x4;
inline constexpr std::array Bool8x4_operator_andand_Bool8x4_args = { &Bool8x4_operator_andand_Bool8x4_arg };

/// operator== with Bool8x4
Variable Bool8x4_operator_eq_Bool8x4_arg;
Function Bool8x4_operator_eq_Bool8x4;
inline constexpr std::array Bool8x4_operator_eq_Bool8x4_args = { &Bool8x4_operator_eq_Bool8x4_arg };

/// operator!= with Bool8x4
Variable Bool8x4_operator_neq_Bool8x4_arg;
Function Bool8x4_operator_neq_Bool8x4;
inline constexpr std::array Bool8x4_operator_neq_Bool8x4_args = { &Bool8x4_operator_neq_Bool8x4_arg };

static constexpr StaticMap<HashString, Symbol*, 696> Bool8x4_symbolLookup = {
    std::pair{ "wzwy"_h, &Bool8x4Type },
    std::pair{ "wzwx"_h, &Bool8x4Type },
    std::pair{ "wzwz"_h, &Bool8x4Type },
    std::pair{ "wzww"_h, &Bool8x4Type },
    std::pair{ "bgg"_h, &Bool8x3Type },
    std::pair{ "bgb"_h, &Bool8x3Type },
    std::pair{ "bga"_h, &Bool8x3Type },
    std::pair{ "bgr"_h, &Bool8x3Type },
    std::pair{ "bag"_h, &Bool8x3Type },
    std::pair{ "baa"_h, &Bool8x3Type },
    std::pair{ "bab"_h, &Bool8x3Type },
    std::pair{ "bar"_h, &Bool8x3Type },
    std::pair{ "bbg"_h, &Bool8x3Type },
    std::pair{ "bba"_h, &Bool8x3Type },
    std::pair{ "bbb"_h, &Bool8x3Type },
    std::pair{ "bbr"_h, &Bool8x3Type },
    std::pair{ "wzxw"_h, &Bool8x4Type },
    std::pair{ "wzxx"_h, &Bool8x4Type },
    std::pair{ "wzxy"_h, &Bool8x4Type },
    std::pair{ "wzxz"_h, &Bool8x4Type },
    std::pair{ "wzyw"_h, &Bool8x4Type },
    std::pair{ "wzyz"_h, &Bool8x4Type },
    std::pair{ "wzyy"_h, &Bool8x4Type },
    std::pair{ "wzyx"_h, &Bool8x4Type },
    std::pair{ "wzzz"_h, &Bool8x4Type },
    std::pair{ "wzzx"_h, &Bool8x4Type },
    std::pair{ "wzzy"_h, &Bool8x4Type },
    std::pair{ "wzzw"_h, &Bool8x4Type },
    std::pair{ "brr"_h, &Bool8x3Type },
    std::pair{ "brg"_h, &Bool8x3Type },
    std::pair{ "bra"_h, &Bool8x3Type },
    std::pair{ "brb"_h, &Bool8x3Type },
    std::pair{ "ywyw"_h, &Bool8x4Type },
    std::pair{ "ywyx"_h, &Bool8x4Type },
    std::pair{ "ywyy"_h, &Bool8x4Type },
    std::pair{ "ywyz"_h, &Bool8x4Type },
    std::pair{ "ywxw"_h, &Bool8x4Type },
    std::pair{ "ywxz"_h, &Bool8x4Type },
    std::pair{ "ywxy"_h, &Bool8x4Type },
    std::pair{ "ywxx"_h, &Bool8x4Type },
    std::pair{ "ywzy"_h, &Bool8x4Type },
    std::pair{ "ywzx"_h, &Bool8x4Type },
    std::pair{ "ywzz"_h, &Bool8x4Type },
    std::pair{ "ywzw"_h, &Bool8x4Type },
    std::pair{ "ywwz"_h, &Bool8x4Type },
    std::pair{ "ywwx"_h, &Bool8x4Type },
    std::pair{ "ywwy"_h, &Bool8x4Type },
    std::pair{ "ywww"_h, &Bool8x4Type },
    std::pair{ "gg"_h, &Bool8x2Type },
    std::pair{ "gb"_h, &Bool8x2Type },
    std::pair{ "ga"_h, &Bool8x2Type },
    std::pair{ "gr"_h, &Bool8x2Type },
    std::pair{ "ag"_h, &Bool8x2Type },
    std::pair{ "aa"_h, &Bool8x2Type },
    std::pair{ "ab"_h, &Bool8x2Type },
    std::pair{ "ar"_h, &Bool8x2Type },
    std::pair{ "bg"_h, &Bool8x2Type },
    std::pair{ "ba"_h, &Bool8x2Type },
    std::pair{ "bb"_h, &Bool8x2Type },
    std::pair{ "br"_h, &Bool8x2Type },
    std::pair{ "ww"_h, &Bool8x2Type },
    std::pair{ "wz"_h, &Bool8x2Type },
    std::pair{ "wx"_h, &Bool8x2Type },
    std::pair{ "wy"_h, &Bool8x2Type },
    std::pair{ "rr"_h, &Bool8x2Type },
    std::pair{ "rg"_h, &Bool8x2Type },
    std::pair{ "ra"_h, &Bool8x2Type },
    std::pair{ "rb"_h, &Bool8x2Type },
    std::pair{ "yw"_h, &Bool8x2Type },
    std::pair{ "yx"_h, &Bool8x2Type },
    std::pair{ "yy"_h, &Bool8x2Type },
    std::pair{ "yz"_h, &Bool8x2Type },
    std::pair{ "xw"_h, &Bool8x2Type },
    std::pair{ "xz"_h, &Bool8x2Type },
    std::pair{ "xy"_h, &Bool8x2Type },
    std::pair{ "xx"_h, &Bool8x2Type },
    std::pair{ "zy"_h, &Bool8x2Type },
    std::pair{ "zx"_h, &Bool8x2Type },
    std::pair{ "zz"_h, &Bool8x2Type },
    std::pair{ "zw"_h, &Bool8x2Type },
    std::pair{ "operator[](i16)"_h, &Bool8x4_operator_index_Int16 },
    std::pair{ "wxzw"_h, &Bool8x4Type },
    std::pair{ "wxzx"_h, &Bool8x4Type },
    std::pair{ "wxzy"_h, &Bool8x4Type },
    std::pair{ "wxzz"_h, &Bool8x4Type },
    std::pair{ "wxxw"_h, &Bool8x4Type },
    std::pair{ "wxxz"_h, &Bool8x4Type },
    std::pair{ "wxxx"_h, &Bool8x4Type },
    std::pair{ "wxxy"_h, &Bool8x4Type },
    std::pair{ "wxyy"_h, &Bool8x4Type },
    std::pair{ "wxyx"_h, &Bool8x4Type },
    std::pair{ "wxyz"_h, &Bool8x4Type },
    std::pair{ "wxyw"_h, &Bool8x4Type },
    std::pair{ "wxww"_h, &Bool8x4Type },
    std::pair{ "wxwz"_h, &Bool8x4Type },
    std::pair{ "wxwy"_h, &Bool8x4Type },
    std::pair{ "wxwx"_h, &Bool8x4Type },
    std::pair{ "wyyx"_h, &Bool8x4Type },
    std::pair{ "wyyy"_h, &Bool8x4Type },
    std::pair{ "wyyz"_h, &Bool8x4Type },
    std::pair{ "wyyw"_h, &Bool8x4Type },
    std::pair{ "wyxz"_h, &Bool8x4Type },
    std::pair{ "wyxy"_h, &Bool8x4Type },
    std::pair{ "wyxx"_h, &Bool8x4Type },
    std::pair{ "wyxw"_h, &Bool8x4Type },
    std::pair{ "wyzw"_h, &Bool8x4Type },
    std::pair{ "wyzy"_h, &Bool8x4Type },
    std::pair{ "wyzx"_h, &Bool8x4Type },
    std::pair{ "wyzz"_h, &Bool8x4Type },
    std::pair{ "wywz"_h, &Bool8x4Type },
    std::pair{ "wywx"_h, &Bool8x4Type },
    std::pair{ "wywy"_h, &Bool8x4Type },
    std::pair{ "wyww"_h, &Bool8x4Type },
    std::pair{ "brrg"_h, &Bool8x4Type },
    std::pair{ "brra"_h, &Bool8x4Type },
    std::pair{ "brrb"_h, &Bool8x4Type },
    std::pair{ "brrr"_h, &Bool8x4Type },
    std::pair{ "brgr"_h, &Bool8x4Type },
    std::pair{ "brgg"_h, &Bool8x4Type },
    std::pair{ "brgb"_h, &Bool8x4Type },
    std::pair{ "brga"_h, &Bool8x4Type },
    std::pair{ "brar"_h, &Bool8x4Type },
    std::pair{ "brag"_h, &Bool8x4Type },
    std::pair{ "braa"_h, &Bool8x4Type },
    std::pair{ "brab"_h, &Bool8x4Type },
    std::pair{ "brbr"_h, &Bool8x4Type },
    std::pair{ "brbg"_h, &Bool8x4Type },
    std::pair{ "brba"_h, &Bool8x4Type },
    std::pair{ "brbb"_h, &Bool8x4Type },
    std::pair{ "xzww"_h, &Bool8x4Type },
    std::pair{ "xzwx"_h, &Bool8x4Type },
    std::pair{ "xzwy"_h, &Bool8x4Type },
    std::pair{ "xzwz"_h, &Bool8x4Type },
    std::pair{ "xzzw"_h, &Bool8x4Type },
    std::pair{ "xzzz"_h, &Bool8x4Type },
    std::pair{ "xzzy"_h, &Bool8x4Type },
    std::pair{ "xzzx"_h, &Bool8x4Type },
    std::pair{ "xzyz"_h, &Bool8x4Type },
    std::pair{ "xzyx"_h, &Bool8x4Type },
    std::pair{ "xzyy"_h, &Bool8x4Type },
    std::pair{ "xzyw"_h, &Bool8x4Type },
    std::pair{ "xzxy"_h, &Bool8x4Type },
    std::pair{ "xzxx"_h, &Bool8x4Type },
    std::pair{ "xzxz"_h, &Bool8x4Type },
    std::pair{ "xzxw"_h, &Bool8x4Type },
    std::pair{ "yxwy"_h, &Bool8x4Type },
    std::pair{ "yxwx"_h, &Bool8x4Type },
    std::pair{ "yxwz"_h, &Bool8x4Type },
    std::pair{ "yxww"_h, &Bool8x4Type },
    std::pair{ "yxxw"_h, &Bool8x4Type },
    std::pair{ "yxxx"_h, &Bool8x4Type },
    std::pair{ "yxxy"_h, &Bool8x4Type },
    std::pair{ "yxxz"_h, &Bool8x4Type },
    std::pair{ "yxyw"_h, &Bool8x4Type },
    std::pair{ "yxyz"_h, &Bool8x4Type },
    std::pair{ "yxyy"_h, &Bool8x4Type },
    std::pair{ "yxyx"_h, &Bool8x4Type },
    std::pair{ "yxzz"_h, &Bool8x4Type },
    std::pair{ "yxzx"_h, &Bool8x4Type },
    std::pair{ "yxzy"_h, &Bool8x4Type },
    std::pair{ "yxzw"_h, &Bool8x4Type },
    std::pair{ "xyzw"_h, &Bool8x4Type },
    std::pair{ "xyzx"_h, &Bool8x4Type },
    std::pair{ "xyzy"_h, &Bool8x4Type },
    std::pair{ "xyzz"_h, &Bool8x4Type },
    std::pair{ "xyxw"_h, &Bool8x4Type },
    std::pair{ "xyxz"_h, &Bool8x4Type },
    std::pair{ "xyxx"_h, &Bool8x4Type },
    std::pair{ "xyxy"_h, &Bool8x4Type },
    std::pair{ "xyyy"_h, &Bool8x4Type },
    std::pair{ "xyyx"_h, &Bool8x4Type },
    std::pair{ "xyyz"_h, &Bool8x4Type },
    std::pair{ "xyyw"_h, &Bool8x4Type },
    std::pair{ "xyww"_h, &Bool8x4Type },
    std::pair{ "xywz"_h, &Bool8x4Type },
    std::pair{ "xywy"_h, &Bool8x4Type },
    std::pair{ "xywx"_h, &Bool8x4Type },
    std::pair{ "ggrr"_h, &Bool8x4Type },
    std::pair{ "ggrb"_h, &Bool8x4Type },
    std::pair{ "ggra"_h, &Bool8x4Type },
    std::pair{ "ggrg"_h, &Bool8x4Type },
    std::pair{ "ggbb"_h, &Bool8x4Type },
    std::pair{ "ggba"_h, &Bool8x4Type },
    std::pair{ "ggbg"_h, &Bool8x4Type },
    std::pair{ "ggbr"_h, &Bool8x4Type },
    std::pair{ "ggar"_h, &Bool8x4Type },
    std::pair{ "ggag"_h, &Bool8x4Type },
    std::pair{ "ggab"_h, &Bool8x4Type },
    std::pair{ "ggaa"_h, &Bool8x4Type },
    std::pair{ "gggr"_h, &Bool8x4Type },
    std::pair{ "gggg"_h, &Bool8x4Type },
    std::pair{ "ggga"_h, &Bool8x4Type },
    std::pair{ "gggb"_h, &Bool8x4Type },
    std::pair{ "yyww"_h, &Bool8x4Type },
    std::pair{ "yywx"_h, &Bool8x4Type },
    std::pair{ "yywy"_h, &Bool8x4Type },
    std::pair{ "yywz"_h, &Bool8x4Type },
    std::pair{ "yyzw"_h, &Bool8x4Type },
    std::pair{ "yyzz"_h, &Bool8x4Type },
    std::pair{ "yyzy"_h, &Bool8x4Type },
    std::pair{ "yyzx"_h, &Bool8x4Type },
    std::pair{ "yyyz"_h, &Bool8x4Type },
    std::pair{ "yyyx"_h, &Bool8x4Type },
    std::pair{ "yyyy"_h, &Bool8x4Type },
    std::pair{ "yyyw"_h, &Bool8x4Type },
    std::pair{ "yyxy"_h, &Bool8x4Type },
    std::pair{ "yyxx"_h, &Bool8x4Type },
    std::pair{ "yyxz"_h, &Bool8x4Type },
    std::pair{ "yyxw"_h, &Bool8x4Type },
    std::pair{ "xxyx"_h, &Bool8x4Type },
    std::pair{ "xxyy"_h, &Bool8x4Type },
    std::pair{ "xxyz"_h, &Bool8x4Type },
    std::pair{ "xxyw"_h, &Bool8x4Type },
    std::pair{ "xxxz"_h, &Bool8x4Type },
    std::pair{ "xxxy"_h, &Bool8x4Type },
    std::pair{ "xxxx"_h, &Bool8x4Type },
    std::pair{ "xxxw"_h, &Bool8x4Type },
    std::pair{ "xxzw"_h, &Bool8x4Type },
    std::pair{ "xxzy"_h, &Bool8x4Type },
    std::pair{ "xxzx"_h, &Bool8x4Type },
    std::pair{ "xxzz"_h, &Bool8x4Type },
    std::pair{ "xxwz"_h, &Bool8x4Type },
    std::pair{ "xxwx"_h, &Bool8x4Type },
    std::pair{ "xxwy"_h, &Bool8x4Type },
    std::pair{ "xxww"_h, &Bool8x4Type },
    std::pair{ "rgrg"_h, &Bool8x4Type },
    std::pair{ "rgra"_h, &Bool8x4Type },
    std::pair{ "rgrb"_h, &Bool8x4Type },
    std::pair{ "rgrr"_h, &Bool8x4Type },
    std::pair{ "rggb"_h, &Bool8x4Type },
    std::pair{ "rgga"_h, &Bool8x4Type },
    std::pair{ "rggg"_h, &Bool8x4Type },
    std::pair{ "rggr"_h, &Bool8x4Type },
    std::pair{ "rgbr"_h, &Bool8x4Type },
    std::pair{ "rgbg"_h, &Bool8x4Type },
    std::pair{ "rgba"_h, &Bool8x4Type },
    std::pair{ "rgbb"_h, &Bool8x4Type },
    std::pair{ "rgar"_h, &Bool8x4Type },
    std::pair{ "rgag"_h, &Bool8x4Type },
    std::pair{ "rgaa"_h, &Bool8x4Type },
    std::pair{ "rgab"_h, &Bool8x4Type },
    std::pair{ "www"_h, &Bool8x3Type },
    std::pair{ "wwz"_h, &Bool8x3Type },
    std::pair{ "wwy"_h, &Bool8x3Type },
    std::pair{ "wwx"_h, &Bool8x3Type },
    std::pair{ "wzw"_h, &Bool8x3Type },
    std::pair{ "wzx"_h, &Bool8x3Type },
    std::pair{ "wzy"_h, &Bool8x3Type },
    std::pair{ "wzz"_h, &Bool8x3Type },
    std::pair{ "wxz"_h, &Bool8x3Type },
    std::pair{ "wxx"_h, &Bool8x3Type },
    std::pair{ "wxy"_h, &Bool8x3Type },
    std::pair{ "wxw"_h, &Bool8x3Type },
    std::pair{ "wyy"_h, &Bool8x3Type },
    std::pair{ "wyx"_h, &Bool8x3Type },
    std::pair{ "wyz"_h, &Bool8x3Type },
    std::pair{ "wyw"_h, &Bool8x3Type },
    std::pair{ "yzzw"_h, &Bool8x4Type },
    std::pair{ "yzzx"_h, &Bool8x4Type },
    std::pair{ "yzzy"_h, &Bool8x4Type },
    std::pair{ "yzzz"_h, &Bool8x4Type },
    std::pair{ "yzxw"_h, &Bool8x4Type },
    std::pair{ "yzxz"_h, &Bool8x4Type },
    std::pair{ "yzxx"_h, &Bool8x4Type },
    std::pair{ "yzxy"_h, &Bool8x4Type },
    std::pair{ "yzyy"_h, &Bool8x4Type },
    std::pair{ "yzyx"_h, &Bool8x4Type },
    std::pair{ "yzyz"_h, &Bool8x4Type },
    std::pair{ "yzyw"_h, &Bool8x4Type },
    std::pair{ "yzww"_h, &Bool8x4Type },
    std::pair{ "yzwz"_h, &Bool8x4Type },
    std::pair{ "yzwy"_h, &Bool8x4Type },
    std::pair{ "yzwx"_h, &Bool8x4Type },
    std::pair{ "rarb"_h, &Bool8x4Type },
    std::pair{ "rara"_h, &Bool8x4Type },
    std::pair{ "rarg"_h, &Bool8x4Type },
    std::pair{ "rarr"_h, &Bool8x4Type },
    std::pair{ "raga"_h, &Bool8x4Type },
    std::pair{ "ragb"_h, &Bool8x4Type },
    std::pair{ "ragg"_h, &Bool8x4Type },
    std::pair{ "ragr"_h, &Bool8x4Type },
    std::pair{ "raag"_h, &Bool8x4Type },
    std::pair{ "raab"_h, &Bool8x4Type },
    std::pair{ "raaa"_h, &Bool8x4Type },
    std::pair{ "raar"_h, &Bool8x4Type },
    std::pair{ "rabr"_h, &Bool8x4Type },
    std::pair{ "rabb"_h, &Bool8x4Type },
    std::pair{ "raba"_h, &Bool8x4Type },
    std::pair{ "rabg"_h, &Bool8x4Type },
    std::pair{ "operator&&(b8x4)"_h, &Bool8x4_operator_andand_Bool8x4 },
    std::pair{ "gbgr"_h, &Bool8x4Type },
    std::pair{ "gbga"_h, &Bool8x4Type },
    std::pair{ "gbgb"_h, &Bool8x4Type },
    std::pair{ "gbgg"_h, &Bool8x4Type },
    std::pair{ "gbar"_h, &Bool8x4Type },
    std::pair{ "gbag"_h, &Bool8x4Type },
    std::pair{ "gbab"_h, &Bool8x4Type },
    std::pair{ "gbaa"_h, &Bool8x4Type },
    std::pair{ "gbbb"_h, &Bool8x4Type },
    std::pair{ "gbba"_h, &Bool8x4Type },
    std::pair{ "gbbg"_h, &Bool8x4Type },
    std::pair{ "gbbr"_h, &Bool8x4Type },
    std::pair{ "gbrr"_h, &Bool8x4Type },
    std::pair{ "gbrb"_h, &Bool8x4Type },
    std::pair{ "gbra"_h, &Bool8x4Type },
    std::pair{ "gbrg"_h, &Bool8x4Type },
    std::pair{ "operator==(b8x4)"_h, &Bool8x4_operator_eq_Bool8x4 },
    std::pair{ "rbrg"_h, &Bool8x4Type },
    std::pair{ "rbra"_h, &Bool8x4Type },
    std::pair{ "rbrb"_h, &Bool8x4Type },
    std::pair{ "rbrr"_h, &Bool8x4Type },
    std::pair{ "rbgr"_h, &Bool8x4Type },
    std::pair{ "rbgg"_h, &Bool8x4Type },
    std::pair{ "rbgb"_h, &Bool8x4Type },
    std::pair{ "rbga"_h, &Bool8x4Type },
    std::pair{ "rbar"_h, &Bool8x4Type },
    std::pair{ "rbag"_h, &Bool8x4Type },
    std::pair{ "rbaa"_h, &Bool8x4Type },
    std::pair{ "rbab"_h, &Bool8x4Type },
    std::pair{ "rbbr"_h, &Bool8x4Type },
    std::pair{ "rbbg"_h, &Bool8x4Type },
    std::pair{ "rbba"_h, &Bool8x4Type },
    std::pair{ "rbbb"_h, &Bool8x4Type },
    std::pair{ "zyxx"_h, &Bool8x4Type },
    std::pair{ "zyxy"_h, &Bool8x4Type },
    std::pair{ "zyxz"_h, &Bool8x4Type },
    std::pair{ "zyxw"_h, &Bool8x4Type },
    std::pair{ "zyyz"_h, &Bool8x4Type },
    std::pair{ "zyyy"_h, &Bool8x4Type },
    std::pair{ "zyyx"_h, &Bool8x4Type },
    std::pair{ "zyyw"_h, &Bool8x4Type },
    std::pair{ "zyzw"_h, &Bool8x4Type },
    std::pair{ "zyzz"_h, &Bool8x4Type },
    std::pair{ "zyzx"_h, &Bool8x4Type },
    std::pair{ "zyzy"_h, &Bool8x4Type },
    std::pair{ "zyww"_h, &Bool8x4Type },
    std::pair{ "zywy"_h, &Bool8x4Type },
    std::pair{ "zywx"_h, &Bool8x4Type },
    std::pair{ "zywz"_h, &Bool8x4Type },
    std::pair{ "bggr"_h, &Bool8x4Type },
    std::pair{ "bggb"_h, &Bool8x4Type },
    std::pair{ "bgga"_h, &Bool8x4Type },
    std::pair{ "bggg"_h, &Bool8x4Type },
    std::pair{ "bgbg"_h, &Bool8x4Type },
    std::pair{ "bgba"_h, &Bool8x4Type },
    std::pair{ "bgbb"_h, &Bool8x4Type },
    std::pair{ "bgbr"_h, &Bool8x4Type },
    std::pair{ "bgag"_h, &Bool8x4Type },
    std::pair{ "bgaa"_h, &Bool8x4Type },
    std::pair{ "bgab"_h, &Bool8x4Type },
    std::pair{ "bgar"_h, &Bool8x4Type },
    std::pair{ "bgrr"_h, &Bool8x4Type },
    std::pair{ "bgrg"_h, &Bool8x4Type },
    std::pair{ "bgra"_h, &Bool8x4Type },
    std::pair{ "bgrb"_h, &Bool8x4Type },
    std::pair{ "arrr"_h, &Bool8x4Type },
    std::pair{ "arra"_h, &Bool8x4Type },
    std::pair{ "arrb"_h, &Bool8x4Type },
    std::pair{ "arrg"_h, &Bool8x4Type },
    std::pair{ "arba"_h, &Bool8x4Type },
    std::pair{ "arbb"_h, &Bool8x4Type },
    std::pair{ "arbg"_h, &Bool8x4Type },
    std::pair{ "arbr"_h, &Bool8x4Type },
    std::pair{ "araa"_h, &Bool8x4Type },
    std::pair{ "arab"_h, &Bool8x4Type },
    std::pair{ "arag"_h, &Bool8x4Type },
    std::pair{ "arar"_h, &Bool8x4Type },
    std::pair{ "argg"_h, &Bool8x4Type },
    std::pair{ "argb"_h, &Bool8x4Type },
    std::pair{ "arga"_h, &Bool8x4Type },
    std::pair{ "argr"_h, &Bool8x4Type },
    std::pair{ "rrg"_h, &Bool8x3Type },
    std::pair{ "rra"_h, &Bool8x3Type },
    std::pair{ "rrb"_h, &Bool8x3Type },
    std::pair{ "rrr"_h, &Bool8x3Type },
    std::pair{ "rgr"_h, &Bool8x3Type },
    std::pair{ "rgg"_h, &Bool8x3Type },
    std::pair{ "rgb"_h, &Bool8x3Type },
    std::pair{ "rga"_h, &Bool8x3Type },
    std::pair{ "rar"_h, &Bool8x3Type },
    std::pair{ "rag"_h, &Bool8x3Type },
    std::pair{ "raa"_h, &Bool8x3Type },
    std::pair{ "rab"_h, &Bool8x3Type },
    std::pair{ "rbr"_h, &Bool8x3Type },
    std::pair{ "rbg"_h, &Bool8x3Type },
    std::pair{ "rba"_h, &Bool8x3Type },
    std::pair{ "rbb"_h, &Bool8x3Type },
    std::pair{ "gagg"_h, &Bool8x4Type },
    std::pair{ "gagb"_h, &Bool8x4Type },
    std::pair{ "gaga"_h, &Bool8x4Type },
    std::pair{ "gagr"_h, &Bool8x4Type },
    std::pair{ "gaag"_h, &Bool8x4Type },
    std::pair{ "gaaa"_h, &Bool8x4Type },
    std::pair{ "gaab"_h, &Bool8x4Type },
    std::pair{ "gaar"_h, &Bool8x4Type },
    std::pair{ "gabg"_h, &Bool8x4Type },
    std::pair{ "gaba"_h, &Bool8x4Type },
    std::pair{ "gabb"_h, &Bool8x4Type },
    std::pair{ "gabr"_h, &Bool8x4Type },
    std::pair{ "garr"_h, &Bool8x4Type },
    std::pair{ "garg"_h, &Bool8x4Type },
    std::pair{ "gara"_h, &Bool8x4Type },
    std::pair{ "garb"_h, &Bool8x4Type },
    std::pair{ "operator[](u32)"_h, &Bool8x4_operator_index_UInt32 },
    std::pair{ "zxzz"_h, &Bool8x4Type },
    std::pair{ "zxzy"_h, &Bool8x4Type },
    std::pair{ "zxzx"_h, &Bool8x4Type },
    std::pair{ "zxzw"_h, &Bool8x4Type },
    std::pair{ "zxyw"_h, &Bool8x4Type },
    std::pair{ "zxyz"_h, &Bool8x4Type },
    std::pair{ "zxyx"_h, &Bool8x4Type },
    std::pair{ "zxyy"_h, &Bool8x4Type },
    std::pair{ "zxxw"_h, &Bool8x4Type },
    std::pair{ "zxxy"_h, &Bool8x4Type },
    std::pair{ "zxxx"_h, &Bool8x4Type },
    std::pair{ "zxxz"_h, &Bool8x4Type },
    std::pair{ "zxwx"_h, &Bool8x4Type },
    std::pair{ "zxwy"_h, &Bool8x4Type },
    std::pair{ "zxwz"_h, &Bool8x4Type },
    std::pair{ "zxww"_h, &Bool8x4Type },
    std::pair{ "bagr"_h, &Bool8x4Type },
    std::pair{ "baga"_h, &Bool8x4Type },
    std::pair{ "bagb"_h, &Bool8x4Type },
    std::pair{ "bagg"_h, &Bool8x4Type },
    std::pair{ "baar"_h, &Bool8x4Type },
    std::pair{ "baag"_h, &Bool8x4Type },
    std::pair{ "baab"_h, &Bool8x4Type },
    std::pair{ "baaa"_h, &Bool8x4Type },
    std::pair{ "babb"_h, &Bool8x4Type },
    std::pair{ "baba"_h, &Bool8x4Type },
    std::pair{ "babg"_h, &Bool8x4Type },
    std::pair{ "babr"_h, &Bool8x4Type },
    std::pair{ "barr"_h, &Bool8x4Type },
    std::pair{ "barb"_h, &Bool8x4Type },
    std::pair{ "bara"_h, &Bool8x4Type },
    std::pair{ "barg"_h, &Bool8x4Type },
    std::pair{ "operator[](u16)"_h, &Bool8x4_operator_index_UInt16 },
    std::pair{ "wwwx"_h, &Bool8x4Type },
    std::pair{ "wwwy"_h, &Bool8x4Type },
    std::pair{ "wwwz"_h, &Bool8x4Type },
    std::pair{ "wwww"_h, &Bool8x4Type },
    std::pair{ "wwzz"_h, &Bool8x4Type },
    std::pair{ "wwzy"_h, &Bool8x4Type },
    std::pair{ "wwzx"_h, &Bool8x4Type },
    std::pair{ "wwzw"_h, &Bool8x4Type },
    std::pair{ "wwyz"_h, &Bool8x4Type },
    std::pair{ "wwyx"_h, &Bool8x4Type },
    std::pair{ "wwyy"_h, &Bool8x4Type },
    std::pair{ "wwyw"_h, &Bool8x4Type },
    std::pair{ "wwxw"_h, &Bool8x4Type },
    std::pair{ "wwxy"_h, &Bool8x4Type },
    std::pair{ "wwxx"_h, &Bool8x4Type },
    std::pair{ "wwxz"_h, &Bool8x4Type },
    std::pair{ "zzww"_h, &Bool8x4Type },
    std::pair{ "zzwz"_h, &Bool8x4Type },
    std::pair{ "zzwx"_h, &Bool8x4Type },
    std::pair{ "zzwy"_h, &Bool8x4Type },
    std::pair{ "zzyw"_h, &Bool8x4Type },
    std::pair{ "zzyx"_h, &Bool8x4Type },
    std::pair{ "zzyy"_h, &Bool8x4Type },
    std::pair{ "zzyz"_h, &Bool8x4Type },
    std::pair{ "zzxw"_h, &Bool8x4Type },
    std::pair{ "zzxz"_h, &Bool8x4Type },
    std::pair{ "zzxy"_h, &Bool8x4Type },
    std::pair{ "zzxx"_h, &Bool8x4Type },
    std::pair{ "zzzy"_h, &Bool8x4Type },
    std::pair{ "zzzx"_h, &Bool8x4Type },
    std::pair{ "zzzz"_h, &Bool8x4Type },
    std::pair{ "zzzw"_h, &Bool8x4Type },
    std::pair{ "g"_h, &Bool8Type },
    std::pair{ "a"_h, &Bool8Type },
    std::pair{ "b"_h, &Bool8Type },
    std::pair{ "w"_h, &Bool8Type },
    std::pair{ "r"_h, &Bool8Type },
    std::pair{ "y"_h, &Bool8Type },
    std::pair{ "x"_h, &Bool8Type },
    std::pair{ "z"_h, &Bool8Type },
    std::pair{ "bbgg"_h, &Bool8x4Type },
    std::pair{ "bbgb"_h, &Bool8x4Type },
    std::pair{ "bbga"_h, &Bool8x4Type },
    std::pair{ "bbgr"_h, &Bool8x4Type },
    std::pair{ "bbag"_h, &Bool8x4Type },
    std::pair{ "bbaa"_h, &Bool8x4Type },
    std::pair{ "bbab"_h, &Bool8x4Type },
    std::pair{ "bbar"_h, &Bool8x4Type },
    std::pair{ "bbbg"_h, &Bool8x4Type },
    std::pair{ "bbba"_h, &Bool8x4Type },
    std::pair{ "bbbb"_h, &Bool8x4Type },
    std::pair{ "bbbr"_h, &Bool8x4Type },
    std::pair{ "bbrr"_h, &Bool8x4Type },
    std::pair{ "bbrg"_h, &Bool8x4Type },
    std::pair{ "bbra"_h, &Bool8x4Type },
    std::pair{ "bbrb"_h, &Bool8x4Type },
    std::pair{ "ywy"_h, &Bool8x3Type },
    std::pair{ "ywx"_h, &Bool8x3Type },
    std::pair{ "ywz"_h, &Bool8x3Type },
    std::pair{ "yww"_h, &Bool8x3Type },
    std::pair{ "yxw"_h, &Bool8x3Type },
    std::pair{ "yxx"_h, &Bool8x3Type },
    std::pair{ "yxy"_h, &Bool8x3Type },
    std::pair{ "yxz"_h, &Bool8x3Type },
    std::pair{ "yyw"_h, &Bool8x3Type },
    std::pair{ "yyz"_h, &Bool8x3Type },
    std::pair{ "yyy"_h, &Bool8x3Type },
    std::pair{ "yyx"_h, &Bool8x3Type },
    std::pair{ "yzz"_h, &Bool8x3Type },
    std::pair{ "yzx"_h, &Bool8x3Type },
    std::pair{ "yzy"_h, &Bool8x3Type },
    std::pair{ "yzw"_h, &Bool8x3Type },
    std::pair{ "zwzx"_h, &Bool8x4Type },
    std::pair{ "zwzy"_h, &Bool8x4Type },
    std::pair{ "zwzz"_h, &Bool8x4Type },
    std::pair{ "zwzw"_h, &Bool8x4Type },
    std::pair{ "zwxw"_h, &Bool8x4Type },
    std::pair{ "zwxz"_h, &Bool8x4Type },
    std::pair{ "zwxx"_h, &Bool8x4Type },
    std::pair{ "zwxy"_h, &Bool8x4Type },
    std::pair{ "zwyw"_h, &Bool8x4Type },
    std::pair{ "zwyy"_h, &Bool8x4Type },
    std::pair{ "zwyx"_h, &Bool8x4Type },
    std::pair{ "zwyz"_h, &Bool8x4Type },
    std::pair{ "zwwz"_h, &Bool8x4Type },
    std::pair{ "zwwy"_h, &Bool8x4Type },
    std::pair{ "zwwx"_h, &Bool8x4Type },
    std::pair{ "zwww"_h, &Bool8x4Type },
    std::pair{ "xww"_h, &Bool8x3Type },
    std::pair{ "xwx"_h, &Bool8x3Type },
    std::pair{ "xwy"_h, &Bool8x3Type },
    std::pair{ "xwz"_h, &Bool8x3Type },
    std::pair{ "xzw"_h, &Bool8x3Type },
    std::pair{ "xzz"_h, &Bool8x3Type },
    std::pair{ "xzy"_h, &Bool8x3Type },
    std::pair{ "xzx"_h, &Bool8x3Type },
    std::pair{ "xyz"_h, &Bool8x3Type },
    std::pair{ "xyx"_h, &Bool8x3Type },
    std::pair{ "xyy"_h, &Bool8x3Type },
    std::pair{ "xyw"_h, &Bool8x3Type },
    std::pair{ "xxy"_h, &Bool8x3Type },
    std::pair{ "xxx"_h, &Bool8x3Type },
    std::pair{ "xxz"_h, &Bool8x3Type },
    std::pair{ "xxw"_h, &Bool8x3Type },
    std::pair{ "zyx"_h, &Bool8x3Type },
    std::pair{ "zyy"_h, &Bool8x3Type },
    std::pair{ "zyz"_h, &Bool8x3Type },
    std::pair{ "zyw"_h, &Bool8x3Type },
    std::pair{ "zxz"_h, &Bool8x3Type },
    std::pair{ "zxy"_h, &Bool8x3Type },
    std::pair{ "zxx"_h, &Bool8x3Type },
    std::pair{ "zxw"_h, &Bool8x3Type },
    std::pair{ "zzw"_h, &Bool8x3Type },
    std::pair{ "zzy"_h, &Bool8x3Type },
    std::pair{ "zzx"_h, &Bool8x3Type },
    std::pair{ "zzz"_h, &Bool8x3Type },
    std::pair{ "zwz"_h, &Bool8x3Type },
    std::pair{ "zwx"_h, &Bool8x3Type },
    std::pair{ "zwy"_h, &Bool8x3Type },
    std::pair{ "zww"_h, &Bool8x3Type },
    std::pair{ "operator!=(b8x4)"_h, &Bool8x4_operator_neq_Bool8x4 },
    std::pair{ "ggr"_h, &Bool8x3Type },
    std::pair{ "ggb"_h, &Bool8x3Type },
    std::pair{ "gga"_h, &Bool8x3Type },
    std::pair{ "ggg"_h, &Bool8x3Type },
    std::pair{ "gbg"_h, &Bool8x3Type },
    std::pair{ "gba"_h, &Bool8x3Type },
    std::pair{ "gbb"_h, &Bool8x3Type },
    std::pair{ "gbr"_h, &Bool8x3Type },
    std::pair{ "gag"_h, &Bool8x3Type },
    std::pair{ "gaa"_h, &Bool8x3Type },
    std::pair{ "gab"_h, &Bool8x3Type },
    std::pair{ "gar"_h, &Bool8x3Type },
    std::pair{ "grr"_h, &Bool8x3Type },
    std::pair{ "grg"_h, &Bool8x3Type },
    std::pair{ "gra"_h, &Bool8x3Type },
    std::pair{ "grb"_h, &Bool8x3Type },
    std::pair{ "operator||(b8x4)"_h, &Bool8x4_operator_oror_Bool8x4 },
    std::pair{ "xwww"_h, &Bool8x4Type },
    std::pair{ "xwwy"_h, &Bool8x4Type },
    std::pair{ "xwwx"_h, &Bool8x4Type },
    std::pair{ "xwwz"_h, &Bool8x4Type },
    std::pair{ "xwxx"_h, &Bool8x4Type },
    std::pair{ "xwxy"_h, &Bool8x4Type },
    std::pair{ "xwxz"_h, &Bool8x4Type },
    std::pair{ "xwxw"_h, &Bool8x4Type },
    std::pair{ "xwyz"_h, &Bool8x4Type },
    std::pair{ "xwyy"_h, &Bool8x4Type },
    std::pair{ "xwyx"_h, &Bool8x4Type },
    std::pair{ "xwyw"_h, &Bool8x4Type },
    std::pair{ "xwzz"_h, &Bool8x4Type },
    std::pair{ "xwzx"_h, &Bool8x4Type },
    std::pair{ "xwzy"_h, &Bool8x4Type },
    std::pair{ "xwzw"_h, &Bool8x4Type },
    std::pair{ "operator[]"_h, &Bool8x4_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Bool8x4_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Bool8x4_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Bool8x4_operator_index_UInt16 },
    std::pair{ "agrr"_h, &Bool8x4Type },
    std::pair{ "agra"_h, &Bool8x4Type },
    std::pair{ "agrb"_h, &Bool8x4Type },
    std::pair{ "agrg"_h, &Bool8x4Type },
    std::pair{ "operator||"_h, &Bool8x4_operator_oror_Bool8x4 },
    std::pair{ "agar"_h, &Bool8x4Type },
    std::pair{ "agaa"_h, &Bool8x4Type },
    std::pair{ "agab"_h, &Bool8x4Type },
    std::pair{ "agag"_h, &Bool8x4Type },
    std::pair{ "agba"_h, &Bool8x4Type },
    std::pair{ "agbb"_h, &Bool8x4Type },
    std::pair{ "agbg"_h, &Bool8x4Type },
    std::pair{ "agbr"_h, &Bool8x4Type },
    std::pair{ "aggb"_h, &Bool8x4Type },
    std::pair{ "agga"_h, &Bool8x4Type },
    std::pair{ "aggg"_h, &Bool8x4Type },
    std::pair{ "aggr"_h, &Bool8x4Type },
    std::pair{ "operator=="_h, &Bool8x4_operator_eq_Bool8x4 },
    std::pair{ "operator&&"_h, &Bool8x4_operator_andand_Bool8x4 },
    std::pair{ "operator!="_h, &Bool8x4_operator_neq_Bool8x4 },
    std::pair{ "agr"_h, &Bool8x3Type },
    std::pair{ "aga"_h, &Bool8x3Type },
    std::pair{ "agb"_h, &Bool8x3Type },
    std::pair{ "agg"_h, &Bool8x3Type },
    std::pair{ "aar"_h, &Bool8x3Type },
    std::pair{ "aag"_h, &Bool8x3Type },
    std::pair{ "aab"_h, &Bool8x3Type },
    std::pair{ "aaa"_h, &Bool8x3Type },
    std::pair{ "abb"_h, &Bool8x3Type },
    std::pair{ "aba"_h, &Bool8x3Type },
    std::pair{ "abg"_h, &Bool8x3Type },
    std::pair{ "abr"_h, &Bool8x3Type },
    std::pair{ "arr"_h, &Bool8x3Type },
    std::pair{ "arb"_h, &Bool8x3Type },
    std::pair{ "ara"_h, &Bool8x3Type },
    std::pair{ "arg"_h, &Bool8x3Type },
    std::pair{ "aarr"_h, &Bool8x4Type },
    std::pair{ "aarg"_h, &Bool8x4Type },
    std::pair{ "aarb"_h, &Bool8x4Type },
    std::pair{ "aara"_h, &Bool8x4Type },
    std::pair{ "aagr"_h, &Bool8x4Type },
    std::pair{ "aaga"_h, &Bool8x4Type },
    std::pair{ "aagb"_h, &Bool8x4Type },
    std::pair{ "aagg"_h, &Bool8x4Type },
    std::pair{ "aabg"_h, &Bool8x4Type },
    std::pair{ "aabb"_h, &Bool8x4Type },
    std::pair{ "aaba"_h, &Bool8x4Type },
    std::pair{ "aabr"_h, &Bool8x4Type },
    std::pair{ "aaab"_h, &Bool8x4Type },
    std::pair{ "aaaa"_h, &Bool8x4Type },
    std::pair{ "aaag"_h, &Bool8x4Type },
    std::pair{ "aaar"_h, &Bool8x4Type },
    std::pair{ "operator[](i32)"_h, &Bool8x4_operator_index_Int32 },
    std::pair{ "grrb"_h, &Bool8x4Type },
    std::pair{ "grra"_h, &Bool8x4Type },
    std::pair{ "grrg"_h, &Bool8x4Type },
    std::pair{ "grrr"_h, &Bool8x4Type },
    std::pair{ "grga"_h, &Bool8x4Type },
    std::pair{ "grgb"_h, &Bool8x4Type },
    std::pair{ "grgg"_h, &Bool8x4Type },
    std::pair{ "grgr"_h, &Bool8x4Type },
    std::pair{ "grag"_h, &Bool8x4Type },
    std::pair{ "grab"_h, &Bool8x4Type },
    std::pair{ "graa"_h, &Bool8x4Type },
    std::pair{ "grar"_h, &Bool8x4Type },
    std::pair{ "grbr"_h, &Bool8x4Type },
    std::pair{ "grbb"_h, &Bool8x4Type },
    std::pair{ "grba"_h, &Bool8x4Type },
    std::pair{ "grbg"_h, &Bool8x4Type },
    std::pair{ "abbr"_h, &Bool8x4Type },
    std::pair{ "abba"_h, &Bool8x4Type },
    std::pair{ "abbb"_h, &Bool8x4Type },
    std::pair{ "abbg"_h, &Bool8x4Type },
    std::pair{ "abar"_h, &Bool8x4Type },
    std::pair{ "abaa"_h, &Bool8x4Type },
    std::pair{ "abab"_h, &Bool8x4Type },
    std::pair{ "abag"_h, &Bool8x4Type },
    std::pair{ "abgr"_h, &Bool8x4Type },
    std::pair{ "abgg"_h, &Bool8x4Type },
    std::pair{ "abgb"_h, &Bool8x4Type },
    std::pair{ "abga"_h, &Bool8x4Type },
    std::pair{ "abra"_h, &Bool8x4Type },
    std::pair{ "abrb"_h, &Bool8x4Type },
    std::pair{ "abrg"_h, &Bool8x4Type },
    std::pair{ "abrr"_h, &Bool8x4Type },
    std::pair{ "rrgg"_h, &Bool8x4Type },
    std::pair{ "rrgb"_h, &Bool8x4Type },
    std::pair{ "rrga"_h, &Bool8x4Type },
    std::pair{ "rrgr"_h, &Bool8x4Type },
    std::pair{ "rrag"_h, &Bool8x4Type },
    std::pair{ "rraa"_h, &Bool8x4Type },
    std::pair{ "rrab"_h, &Bool8x4Type },
    std::pair{ "rrar"_h, &Bool8x4Type },
    std::pair{ "rrbg"_h, &Bool8x4Type },
    std::pair{ "rrba"_h, &Bool8x4Type },
    std::pair{ "rrbb"_h, &Bool8x4Type },
    std::pair{ "rrbr"_h, &Bool8x4Type },
    std::pair{ "rrrr"_h, &Bool8x4Type },
    std::pair{ "rrrg"_h, &Bool8x4Type },
    std::pair{ "rrra"_h, &Bool8x4Type },
    std::pair{ "rrrb"_h, &Bool8x4Type }
    };

Bool8x4::Bool8x4()
{
    this->name = "b8x4"_c;
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    /// operator[] with Int32
    Bool8x4_operator_index_Int32_arg.name = "arg"_c;
    Bool8x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Bool8x4_operator_index_Int32.name = Bool8x4_operator_index_Int32_name;
    Bool8x4_operator_index_Int32.backendIndex = 966;
    Bool8x4_operator_index_Int32.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_index_Int32.parameters = Bool8x4_operator_index_Int32_args;
    Symbol::Resolved(&Bool8x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x4_operator_index_Int32)->signature = "operator[](i32) b8"_c;
    Symbol::Resolved(&Bool8x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt32
    Bool8x4_operator_index_UInt32_arg.name = "arg"_c;
    Bool8x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Bool8x4_operator_index_UInt32.name = Bool8x4_operator_index_UInt32_name;
    Bool8x4_operator_index_UInt32.backendIndex = 967;
    Bool8x4_operator_index_UInt32.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_index_UInt32.parameters = Bool8x4_operator_index_UInt32_args;
    Symbol::Resolved(&Bool8x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x4_operator_index_UInt32)->signature = "operator[](u32) b8"_c;
    Symbol::Resolved(&Bool8x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with Int16
    Bool8x4_operator_index_Int16_arg.name = "arg"_c;
    Bool8x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Bool8x4_operator_index_Int16.name = Bool8x4_operator_index_Int16_name;
    Bool8x4_operator_index_Int16.backendIndex = 968;
    Bool8x4_operator_index_Int16.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_index_Int16.parameters = Bool8x4_operator_index_Int16_args;
    Symbol::Resolved(&Bool8x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x4_operator_index_Int16)->signature = "operator[](i16) b8"_c;
    Symbol::Resolved(&Bool8x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt16
    Bool8x4_operator_index_UInt16_arg.name = "arg"_c;
    Bool8x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Bool8x4_operator_index_UInt16.name = Bool8x4_operator_index_UInt16_name;
    Bool8x4_operator_index_UInt16.backendIndex = 969;
    Bool8x4_operator_index_UInt16.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_index_UInt16.parameters = Bool8x4_operator_index_UInt16_args;
    Symbol::Resolved(&Bool8x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x4_operator_index_UInt16)->signature = "operator[](u16) b8"_c;
    Symbol::Resolved(&Bool8x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator|| with Bool8x4
    Bool8x4_operator_oror_Bool8x4_arg.name = "arg"_c;
    Bool8x4_operator_oror_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    Bool8x4_operator_oror_Bool8x4.name = Bool8x4_operator_oror_Bool8x4_name;
    Bool8x4_operator_oror_Bool8x4.backendIndex = 970;
    Bool8x4_operator_oror_Bool8x4.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_operator_oror_Bool8x4.parameters = Bool8x4_operator_oror_Bool8x4_args;
    Symbol::Resolved(&Bool8x4_operator_oror_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Bool8x4_operator_oror_Bool8x4)->signature = "operator||(b8x4) b8x4"_c;
    Symbol::Resolved(&Bool8x4_operator_oror_Bool8x4)->name = "operator||(b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_oror_Bool8x4)->nameWithVarNames = "operator||(arg : b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_oror_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator&& with Bool8x4
    Bool8x4_operator_andand_Bool8x4_arg.name = "arg"_c;
    Bool8x4_operator_andand_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    Bool8x4_operator_andand_Bool8x4.name = Bool8x4_operator_andand_Bool8x4_name;
    Bool8x4_operator_andand_Bool8x4.backendIndex = 971;
    Bool8x4_operator_andand_Bool8x4.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_operator_andand_Bool8x4.parameters = Bool8x4_operator_andand_Bool8x4_args;
    Symbol::Resolved(&Bool8x4_operator_andand_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Bool8x4_operator_andand_Bool8x4)->signature = "operator&&(b8x4) b8x4"_c;
    Symbol::Resolved(&Bool8x4_operator_andand_Bool8x4)->name = "operator&&(b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_andand_Bool8x4)->nameWithVarNames = "operator&&(arg : b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_andand_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator== with Bool8x4
    Bool8x4_operator_eq_Bool8x4_arg.name = "arg"_c;
    Bool8x4_operator_eq_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    Bool8x4_operator_eq_Bool8x4.name = Bool8x4_operator_eq_Bool8x4_name;
    Bool8x4_operator_eq_Bool8x4.backendIndex = 972;
    Bool8x4_operator_eq_Bool8x4.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_operator_eq_Bool8x4.parameters = Bool8x4_operator_eq_Bool8x4_args;
    Symbol::Resolved(&Bool8x4_operator_eq_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Bool8x4_operator_eq_Bool8x4)->signature = "operator==(b8x4) b8x4"_c;
    Symbol::Resolved(&Bool8x4_operator_eq_Bool8x4)->name = "operator==(b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_eq_Bool8x4)->nameWithVarNames = "operator==(arg : b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_eq_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator!= with Bool8x4
    Bool8x4_operator_neq_Bool8x4_arg.name = "arg"_c;
    Bool8x4_operator_neq_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    Bool8x4_operator_neq_Bool8x4.name = Bool8x4_operator_neq_Bool8x4_name;
    Bool8x4_operator_neq_Bool8x4.backendIndex = 973;
    Bool8x4_operator_neq_Bool8x4.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_operator_neq_Bool8x4.parameters = Bool8x4_operator_neq_Bool8x4_args;
    Symbol::Resolved(&Bool8x4_operator_neq_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Bool8x4_operator_neq_Bool8x4)->signature = "operator!=(b8x4) b8x4"_c;
    Symbol::Resolved(&Bool8x4_operator_neq_Bool8x4)->name = "operator!=(b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_neq_Bool8x4)->nameWithVarNames = "operator!=(arg : b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_neq_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    this->scope.symbolLookup = Bool8x4_symbolLookup;
}
Bool8x4 Bool8x4Type;

/// operator[] with Int32
Variable Float16x4_operator_index_Int32_arg;
Function Float16x4_operator_index_Int32;
inline constexpr std::array Float16x4_operator_index_Int32_args = { &Float16x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x4_operator_index_UInt32_arg;
Function Float16x4_operator_index_UInt32;
inline constexpr std::array Float16x4_operator_index_UInt32_args = { &Float16x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x4_operator_index_Int16_arg;
Function Float16x4_operator_index_Int16;
inline constexpr std::array Float16x4_operator_index_Int16_args = { &Float16x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x4_operator_index_UInt16_arg;
Function Float16x4_operator_index_UInt16;
inline constexpr std::array Float16x4_operator_index_UInt16_args = { &Float16x4_operator_index_UInt16_arg };

/// operator+ with Float16x4
Variable Float16x4_operator_add_Float16x4_arg;
Function Float16x4_operator_add_Float16x4;
inline constexpr std::array Float16x4_operator_add_Float16x4_args = { &Float16x4_operator_add_Float16x4_arg };

/// operator- with Float16x4
Variable Float16x4_operator_sub_Float16x4_arg;
Function Float16x4_operator_sub_Float16x4;
inline constexpr std::array Float16x4_operator_sub_Float16x4_args = { &Float16x4_operator_sub_Float16x4_arg };

/// operator* with Float16x4
Variable Float16x4_operator_mul_Float16x4_arg;
Function Float16x4_operator_mul_Float16x4;
inline constexpr std::array Float16x4_operator_mul_Float16x4_args = { &Float16x4_operator_mul_Float16x4_arg };

/// operator/ with Float16x4
Variable Float16x4_operator_div_Float16x4_arg;
Function Float16x4_operator_div_Float16x4;
inline constexpr std::array Float16x4_operator_div_Float16x4_args = { &Float16x4_operator_div_Float16x4_arg };

/// operator% with Float16x4
Variable Float16x4_operator_mod_Float16x4_arg;
Function Float16x4_operator_mod_Float16x4;
inline constexpr std::array Float16x4_operator_mod_Float16x4_args = { &Float16x4_operator_mod_Float16x4_arg };

/// operator+= with Float16x4
Variable Float16x4_operator_addasg_Float16x4_arg;
Function Float16x4_operator_addasg_Float16x4;
inline constexpr std::array Float16x4_operator_addasg_Float16x4_args = { &Float16x4_operator_addasg_Float16x4_arg };

/// operator-= with Float16x4
Variable Float16x4_operator_subasg_Float16x4_arg;
Function Float16x4_operator_subasg_Float16x4;
inline constexpr std::array Float16x4_operator_subasg_Float16x4_args = { &Float16x4_operator_subasg_Float16x4_arg };

/// operator*= with Float16x4
Variable Float16x4_operator_mulasg_Float16x4_arg;
Function Float16x4_operator_mulasg_Float16x4;
inline constexpr std::array Float16x4_operator_mulasg_Float16x4_args = { &Float16x4_operator_mulasg_Float16x4_arg };

/// operator/= with Float16x4
Variable Float16x4_operator_divasg_Float16x4_arg;
Function Float16x4_operator_divasg_Float16x4;
inline constexpr std::array Float16x4_operator_divasg_Float16x4_args = { &Float16x4_operator_divasg_Float16x4_arg };

/// operator< with Float16x4
Variable Float16x4_operator_lt_Float16x4_arg;
Function Float16x4_operator_lt_Float16x4;
inline constexpr std::array Float16x4_operator_lt_Float16x4_args = { &Float16x4_operator_lt_Float16x4_arg };

/// operator<= with Float16x4
Variable Float16x4_operator_lte_Float16x4_arg;
Function Float16x4_operator_lte_Float16x4;
inline constexpr std::array Float16x4_operator_lte_Float16x4_args = { &Float16x4_operator_lte_Float16x4_arg };

/// operator> with Float16x4
Variable Float16x4_operator_gt_Float16x4_arg;
Function Float16x4_operator_gt_Float16x4;
inline constexpr std::array Float16x4_operator_gt_Float16x4_args = { &Float16x4_operator_gt_Float16x4_arg };

/// operator>= with Float16x4
Variable Float16x4_operator_gte_Float16x4_arg;
Function Float16x4_operator_gte_Float16x4;
inline constexpr std::array Float16x4_operator_gte_Float16x4_args = { &Float16x4_operator_gte_Float16x4_arg };

/// operator== with Float16x4
Variable Float16x4_operator_eq_Float16x4_arg;
Function Float16x4_operator_eq_Float16x4;
inline constexpr std::array Float16x4_operator_eq_Float16x4_args = { &Float16x4_operator_eq_Float16x4_arg };

/// operator!= with Float16x4
Variable Float16x4_operator_neq_Float16x4_arg;
Function Float16x4_operator_neq_Float16x4;
inline constexpr std::array Float16x4_operator_neq_Float16x4_args = { &Float16x4_operator_neq_Float16x4_arg };

/// operator* with Float16
Variable Float16x4_operator_scale_Float16_arg;
Function Float16x4_operator_scale_Float16;
inline constexpr std::array Float16x4_operator_scale_Float16_args = { &Float16x4_operator_scale_Float16_arg };

/// operator* with UInt16
Variable Float16x4_operator_scale_UInt16_arg;
Function Float16x4_operator_scale_UInt16;
inline constexpr std::array Float16x4_operator_scale_UInt16_args = { &Float16x4_operator_scale_UInt16_arg };

/// operator* with Int16
Variable Float16x4_operator_scale_Int16_arg;
Function Float16x4_operator_scale_Int16;
inline constexpr std::array Float16x4_operator_scale_Int16_args = { &Float16x4_operator_scale_Int16_arg };

/// operator* with Float32x4x2
Variable Float16x4_operator_transform_Float32x4x2_arg;
Function Float16x4_operator_transform_Float32x4x2;
inline constexpr std::array Float16x4_operator_transform_Float32x4x2_args = { &Float16x4_operator_transform_Float32x4x2_arg };

/// operator* with Float32x4x3
Variable Float16x4_operator_transform_Float32x4x3_arg;
Function Float16x4_operator_transform_Float32x4x3;
inline constexpr std::array Float16x4_operator_transform_Float32x4x3_args = { &Float16x4_operator_transform_Float32x4x3_arg };

/// operator* with Float32x4x4
Variable Float16x4_operator_transform_Float32x4x4_arg;
Function Float16x4_operator_transform_Float32x4x4;
inline constexpr std::array Float16x4_operator_transform_Float32x4x4_args = { &Float16x4_operator_transform_Float32x4x4_arg };

static constexpr StaticMap<HashString, Symbol*, 730> Float16x4_symbolLookup = {
    std::pair{ "wzwy"_h, &Float16x4Type },
    std::pair{ "wzwx"_h, &Float16x4Type },
    std::pair{ "wzwz"_h, &Float16x4Type },
    std::pair{ "wzww"_h, &Float16x4Type },
    std::pair{ "bgg"_h, &Float16x3Type },
    std::pair{ "bgb"_h, &Float16x3Type },
    std::pair{ "bga"_h, &Float16x3Type },
    std::pair{ "bgr"_h, &Float16x3Type },
    std::pair{ "bag"_h, &Float16x3Type },
    std::pair{ "baa"_h, &Float16x3Type },
    std::pair{ "bab"_h, &Float16x3Type },
    std::pair{ "bar"_h, &Float16x3Type },
    std::pair{ "bbg"_h, &Float16x3Type },
    std::pair{ "bba"_h, &Float16x3Type },
    std::pair{ "bbb"_h, &Float16x3Type },
    std::pair{ "bbr"_h, &Float16x3Type },
    std::pair{ "wzxw"_h, &Float16x4Type },
    std::pair{ "wzxx"_h, &Float16x4Type },
    std::pair{ "wzxy"_h, &Float16x4Type },
    std::pair{ "wzxz"_h, &Float16x4Type },
    std::pair{ "wzyw"_h, &Float16x4Type },
    std::pair{ "wzyz"_h, &Float16x4Type },
    std::pair{ "wzyy"_h, &Float16x4Type },
    std::pair{ "wzyx"_h, &Float16x4Type },
    std::pair{ "wzzz"_h, &Float16x4Type },
    std::pair{ "wzzx"_h, &Float16x4Type },
    std::pair{ "wzzy"_h, &Float16x4Type },
    std::pair{ "wzzw"_h, &Float16x4Type },
    std::pair{ "brr"_h, &Float16x3Type },
    std::pair{ "brg"_h, &Float16x3Type },
    std::pair{ "bra"_h, &Float16x3Type },
    std::pair{ "brb"_h, &Float16x3Type },
    std::pair{ "ywyw"_h, &Float16x4Type },
    std::pair{ "ywyx"_h, &Float16x4Type },
    std::pair{ "ywyy"_h, &Float16x4Type },
    std::pair{ "ywyz"_h, &Float16x4Type },
    std::pair{ "ywxw"_h, &Float16x4Type },
    std::pair{ "ywxz"_h, &Float16x4Type },
    std::pair{ "ywxy"_h, &Float16x4Type },
    std::pair{ "ywxx"_h, &Float16x4Type },
    std::pair{ "ywzy"_h, &Float16x4Type },
    std::pair{ "ywzx"_h, &Float16x4Type },
    std::pair{ "ywzz"_h, &Float16x4Type },
    std::pair{ "ywzw"_h, &Float16x4Type },
    std::pair{ "ywwz"_h, &Float16x4Type },
    std::pair{ "ywwx"_h, &Float16x4Type },
    std::pair{ "ywwy"_h, &Float16x4Type },
    std::pair{ "ywww"_h, &Float16x4Type },
    std::pair{ "gg"_h, &Float16x2Type },
    std::pair{ "gb"_h, &Float16x2Type },
    std::pair{ "ga"_h, &Float16x2Type },
    std::pair{ "gr"_h, &Float16x2Type },
    std::pair{ "ag"_h, &Float16x2Type },
    std::pair{ "aa"_h, &Float16x2Type },
    std::pair{ "ab"_h, &Float16x2Type },
    std::pair{ "ar"_h, &Float16x2Type },
    std::pair{ "bg"_h, &Float16x2Type },
    std::pair{ "ba"_h, &Float16x2Type },
    std::pair{ "bb"_h, &Float16x2Type },
    std::pair{ "br"_h, &Float16x2Type },
    std::pair{ "ww"_h, &Float16x2Type },
    std::pair{ "wz"_h, &Float16x2Type },
    std::pair{ "wx"_h, &Float16x2Type },
    std::pair{ "wy"_h, &Float16x2Type },
    std::pair{ "rr"_h, &Float16x2Type },
    std::pair{ "rg"_h, &Float16x2Type },
    std::pair{ "ra"_h, &Float16x2Type },
    std::pair{ "rb"_h, &Float16x2Type },
    std::pair{ "yw"_h, &Float16x2Type },
    std::pair{ "yx"_h, &Float16x2Type },
    std::pair{ "yy"_h, &Float16x2Type },
    std::pair{ "yz"_h, &Float16x2Type },
    std::pair{ "xw"_h, &Float16x2Type },
    std::pair{ "xz"_h, &Float16x2Type },
    std::pair{ "xy"_h, &Float16x2Type },
    std::pair{ "xx"_h, &Float16x2Type },
    std::pair{ "zy"_h, &Float16x2Type },
    std::pair{ "zx"_h, &Float16x2Type },
    std::pair{ "zz"_h, &Float16x2Type },
    std::pair{ "zw"_h, &Float16x2Type },
    std::pair{ "operator[](i16)"_h, &Float16x4_operator_index_Int16 },
    std::pair{ "operator<=(f16x4)"_h, &Float16x4_operator_lte_Float16x4 },
    std::pair{ "operator>=(f16x4)"_h, &Float16x4_operator_gte_Float16x4 },
    std::pair{ "wxzw"_h, &Float16x4Type },
    std::pair{ "wxzx"_h, &Float16x4Type },
    std::pair{ "wxzy"_h, &Float16x4Type },
    std::pair{ "wxzz"_h, &Float16x4Type },
    std::pair{ "wxxw"_h, &Float16x4Type },
    std::pair{ "wxxz"_h, &Float16x4Type },
    std::pair{ "wxxx"_h, &Float16x4Type },
    std::pair{ "wxxy"_h, &Float16x4Type },
    std::pair{ "wxyy"_h, &Float16x4Type },
    std::pair{ "wxyx"_h, &Float16x4Type },
    std::pair{ "wxyz"_h, &Float16x4Type },
    std::pair{ "wxyw"_h, &Float16x4Type },
    std::pair{ "wxww"_h, &Float16x4Type },
    std::pair{ "wxwz"_h, &Float16x4Type },
    std::pair{ "wxwy"_h, &Float16x4Type },
    std::pair{ "wxwx"_h, &Float16x4Type },
    std::pair{ "operator/(f16x4)"_h, &Float16x4_operator_div_Float16x4 },
    std::pair{ "wyyx"_h, &Float16x4Type },
    std::pair{ "wyyy"_h, &Float16x4Type },
    std::pair{ "wyyz"_h, &Float16x4Type },
    std::pair{ "wyyw"_h, &Float16x4Type },
    std::pair{ "wyxz"_h, &Float16x4Type },
    std::pair{ "wyxy"_h, &Float16x4Type },
    std::pair{ "wyxx"_h, &Float16x4Type },
    std::pair{ "wyxw"_h, &Float16x4Type },
    std::pair{ "wyzw"_h, &Float16x4Type },
    std::pair{ "wyzy"_h, &Float16x4Type },
    std::pair{ "wyzx"_h, &Float16x4Type },
    std::pair{ "wyzz"_h, &Float16x4Type },
    std::pair{ "wywz"_h, &Float16x4Type },
    std::pair{ "wywx"_h, &Float16x4Type },
    std::pair{ "wywy"_h, &Float16x4Type },
    std::pair{ "wyww"_h, &Float16x4Type },
    std::pair{ "operator>(f16x4)"_h, &Float16x4_operator_gt_Float16x4 },
    std::pair{ "operator-(f16x4)"_h, &Float16x4_operator_sub_Float16x4 },
    std::pair{ "operator*=(f16x4)"_h, &Float16x4_operator_mulasg_Float16x4 },
    std::pair{ "operator*(u16)"_h, &Float16x4_operator_scale_UInt16 },
    std::pair{ "operator+=(f16x4)"_h, &Float16x4_operator_addasg_Float16x4 },
    std::pair{ "operator+(f16x4)"_h, &Float16x4_operator_add_Float16x4 },
    std::pair{ "operator*(f32x4x4)"_h, &Float16x4_operator_transform_Float32x4x4 },
    std::pair{ "operator*(f32x4x2)"_h, &Float16x4_operator_transform_Float32x4x2 },
    std::pair{ "operator*(f32x4x3)"_h, &Float16x4_operator_transform_Float32x4x3 },
    std::pair{ "brrg"_h, &Float16x4Type },
    std::pair{ "brra"_h, &Float16x4Type },
    std::pair{ "brrb"_h, &Float16x4Type },
    std::pair{ "brrr"_h, &Float16x4Type },
    std::pair{ "brgr"_h, &Float16x4Type },
    std::pair{ "brgg"_h, &Float16x4Type },
    std::pair{ "brgb"_h, &Float16x4Type },
    std::pair{ "brga"_h, &Float16x4Type },
    std::pair{ "brar"_h, &Float16x4Type },
    std::pair{ "brag"_h, &Float16x4Type },
    std::pair{ "braa"_h, &Float16x4Type },
    std::pair{ "brab"_h, &Float16x4Type },
    std::pair{ "brbr"_h, &Float16x4Type },
    std::pair{ "brbg"_h, &Float16x4Type },
    std::pair{ "brba"_h, &Float16x4Type },
    std::pair{ "brbb"_h, &Float16x4Type },
    std::pair{ "operator<"_h, &Float16x4_operator_lt_Float16x4 },
    std::pair{ "operator>"_h, &Float16x4_operator_gt_Float16x4 },
    std::pair{ "operator-"_h, &Float16x4_operator_sub_Float16x4 },
    std::pair{ "operator/"_h, &Float16x4_operator_div_Float16x4 },
    std::pair{ "operator+"_h, &Float16x4_operator_add_Float16x4 },
    std::pair{ "operator*"_h, &Float16x4_operator_mul_Float16x4 },
    std::pair{ "operator*"_h, &Float16x4_operator_scale_Float16 },
    std::pair{ "operator*"_h, &Float16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_h, &Float16x4_operator_scale_Int16 },
    std::pair{ "operator*"_h, &Float16x4_operator_transform_Float32x4x2 },
    std::pair{ "operator*"_h, &Float16x4_operator_transform_Float32x4x3 },
    std::pair{ "operator*"_h, &Float16x4_operator_transform_Float32x4x4 },
    std::pair{ "operator%"_h, &Float16x4_operator_mod_Float16x4 },
    std::pair{ "xzww"_h, &Float16x4Type },
    std::pair{ "xzwx"_h, &Float16x4Type },
    std::pair{ "xzwy"_h, &Float16x4Type },
    std::pair{ "xzwz"_h, &Float16x4Type },
    std::pair{ "xzzw"_h, &Float16x4Type },
    std::pair{ "xzzz"_h, &Float16x4Type },
    std::pair{ "xzzy"_h, &Float16x4Type },
    std::pair{ "xzzx"_h, &Float16x4Type },
    std::pair{ "xzyz"_h, &Float16x4Type },
    std::pair{ "xzyx"_h, &Float16x4Type },
    std::pair{ "xzyy"_h, &Float16x4Type },
    std::pair{ "xzyw"_h, &Float16x4Type },
    std::pair{ "xzxy"_h, &Float16x4Type },
    std::pair{ "xzxx"_h, &Float16x4Type },
    std::pair{ "xzxz"_h, &Float16x4Type },
    std::pair{ "xzxw"_h, &Float16x4Type },
    std::pair{ "yxwy"_h, &Float16x4Type },
    std::pair{ "yxwx"_h, &Float16x4Type },
    std::pair{ "yxwz"_h, &Float16x4Type },
    std::pair{ "yxww"_h, &Float16x4Type },
    std::pair{ "yxxw"_h, &Float16x4Type },
    std::pair{ "yxxx"_h, &Float16x4Type },
    std::pair{ "yxxy"_h, &Float16x4Type },
    std::pair{ "yxxz"_h, &Float16x4Type },
    std::pair{ "yxyw"_h, &Float16x4Type },
    std::pair{ "yxyz"_h, &Float16x4Type },
    std::pair{ "yxyy"_h, &Float16x4Type },
    std::pair{ "yxyx"_h, &Float16x4Type },
    std::pair{ "yxzz"_h, &Float16x4Type },
    std::pair{ "yxzx"_h, &Float16x4Type },
    std::pair{ "yxzy"_h, &Float16x4Type },
    std::pair{ "yxzw"_h, &Float16x4Type },
    std::pair{ "xyzw"_h, &Float16x4Type },
    std::pair{ "xyzx"_h, &Float16x4Type },
    std::pair{ "xyzy"_h, &Float16x4Type },
    std::pair{ "xyzz"_h, &Float16x4Type },
    std::pair{ "xyxw"_h, &Float16x4Type },
    std::pair{ "xyxz"_h, &Float16x4Type },
    std::pair{ "xyxx"_h, &Float16x4Type },
    std::pair{ "xyxy"_h, &Float16x4Type },
    std::pair{ "xyyy"_h, &Float16x4Type },
    std::pair{ "xyyx"_h, &Float16x4Type },
    std::pair{ "xyyz"_h, &Float16x4Type },
    std::pair{ "xyyw"_h, &Float16x4Type },
    std::pair{ "xyww"_h, &Float16x4Type },
    std::pair{ "xywz"_h, &Float16x4Type },
    std::pair{ "xywy"_h, &Float16x4Type },
    std::pair{ "xywx"_h, &Float16x4Type },
    std::pair{ "ggrr"_h, &Float16x4Type },
    std::pair{ "ggrb"_h, &Float16x4Type },
    std::pair{ "ggra"_h, &Float16x4Type },
    std::pair{ "ggrg"_h, &Float16x4Type },
    std::pair{ "ggbb"_h, &Float16x4Type },
    std::pair{ "ggba"_h, &Float16x4Type },
    std::pair{ "ggbg"_h, &Float16x4Type },
    std::pair{ "ggbr"_h, &Float16x4Type },
    std::pair{ "ggar"_h, &Float16x4Type },
    std::pair{ "ggag"_h, &Float16x4Type },
    std::pair{ "ggab"_h, &Float16x4Type },
    std::pair{ "ggaa"_h, &Float16x4Type },
    std::pair{ "gggr"_h, &Float16x4Type },
    std::pair{ "gggg"_h, &Float16x4Type },
    std::pair{ "ggga"_h, &Float16x4Type },
    std::pair{ "gggb"_h, &Float16x4Type },
    std::pair{ "yyww"_h, &Float16x4Type },
    std::pair{ "yywx"_h, &Float16x4Type },
    std::pair{ "yywy"_h, &Float16x4Type },
    std::pair{ "yywz"_h, &Float16x4Type },
    std::pair{ "yyzw"_h, &Float16x4Type },
    std::pair{ "yyzz"_h, &Float16x4Type },
    std::pair{ "yyzy"_h, &Float16x4Type },
    std::pair{ "yyzx"_h, &Float16x4Type },
    std::pair{ "yyyz"_h, &Float16x4Type },
    std::pair{ "yyyx"_h, &Float16x4Type },
    std::pair{ "yyyy"_h, &Float16x4Type },
    std::pair{ "yyyw"_h, &Float16x4Type },
    std::pair{ "yyxy"_h, &Float16x4Type },
    std::pair{ "yyxx"_h, &Float16x4Type },
    std::pair{ "yyxz"_h, &Float16x4Type },
    std::pair{ "yyxw"_h, &Float16x4Type },
    std::pair{ "xxyx"_h, &Float16x4Type },
    std::pair{ "xxyy"_h, &Float16x4Type },
    std::pair{ "xxyz"_h, &Float16x4Type },
    std::pair{ "xxyw"_h, &Float16x4Type },
    std::pair{ "xxxz"_h, &Float16x4Type },
    std::pair{ "xxxy"_h, &Float16x4Type },
    std::pair{ "xxxx"_h, &Float16x4Type },
    std::pair{ "xxxw"_h, &Float16x4Type },
    std::pair{ "xxzw"_h, &Float16x4Type },
    std::pair{ "xxzy"_h, &Float16x4Type },
    std::pair{ "xxzx"_h, &Float16x4Type },
    std::pair{ "xxzz"_h, &Float16x4Type },
    std::pair{ "xxwz"_h, &Float16x4Type },
    std::pair{ "xxwx"_h, &Float16x4Type },
    std::pair{ "xxwy"_h, &Float16x4Type },
    std::pair{ "xxww"_h, &Float16x4Type },
    std::pair{ "rgrg"_h, &Float16x4Type },
    std::pair{ "rgra"_h, &Float16x4Type },
    std::pair{ "rgrb"_h, &Float16x4Type },
    std::pair{ "rgrr"_h, &Float16x4Type },
    std::pair{ "rggb"_h, &Float16x4Type },
    std::pair{ "rgga"_h, &Float16x4Type },
    std::pair{ "rggg"_h, &Float16x4Type },
    std::pair{ "rggr"_h, &Float16x4Type },
    std::pair{ "rgbr"_h, &Float16x4Type },
    std::pair{ "rgbg"_h, &Float16x4Type },
    std::pair{ "rgba"_h, &Float16x4Type },
    std::pair{ "rgbb"_h, &Float16x4Type },
    std::pair{ "rgar"_h, &Float16x4Type },
    std::pair{ "rgag"_h, &Float16x4Type },
    std::pair{ "rgaa"_h, &Float16x4Type },
    std::pair{ "rgab"_h, &Float16x4Type },
    std::pair{ "www"_h, &Float16x3Type },
    std::pair{ "wwz"_h, &Float16x3Type },
    std::pair{ "wwy"_h, &Float16x3Type },
    std::pair{ "wwx"_h, &Float16x3Type },
    std::pair{ "wzw"_h, &Float16x3Type },
    std::pair{ "wzx"_h, &Float16x3Type },
    std::pair{ "wzy"_h, &Float16x3Type },
    std::pair{ "wzz"_h, &Float16x3Type },
    std::pair{ "wxz"_h, &Float16x3Type },
    std::pair{ "wxx"_h, &Float16x3Type },
    std::pair{ "wxy"_h, &Float16x3Type },
    std::pair{ "wxw"_h, &Float16x3Type },
    std::pair{ "wyy"_h, &Float16x3Type },
    std::pair{ "wyx"_h, &Float16x3Type },
    std::pair{ "wyz"_h, &Float16x3Type },
    std::pair{ "wyw"_h, &Float16x3Type },
    std::pair{ "yzzw"_h, &Float16x4Type },
    std::pair{ "yzzx"_h, &Float16x4Type },
    std::pair{ "yzzy"_h, &Float16x4Type },
    std::pair{ "yzzz"_h, &Float16x4Type },
    std::pair{ "yzxw"_h, &Float16x4Type },
    std::pair{ "yzxz"_h, &Float16x4Type },
    std::pair{ "yzxx"_h, &Float16x4Type },
    std::pair{ "yzxy"_h, &Float16x4Type },
    std::pair{ "yzyy"_h, &Float16x4Type },
    std::pair{ "yzyx"_h, &Float16x4Type },
    std::pair{ "yzyz"_h, &Float16x4Type },
    std::pair{ "yzyw"_h, &Float16x4Type },
    std::pair{ "yzww"_h, &Float16x4Type },
    std::pair{ "yzwz"_h, &Float16x4Type },
    std::pair{ "yzwy"_h, &Float16x4Type },
    std::pair{ "yzwx"_h, &Float16x4Type },
    std::pair{ "rarb"_h, &Float16x4Type },
    std::pair{ "rara"_h, &Float16x4Type },
    std::pair{ "rarg"_h, &Float16x4Type },
    std::pair{ "rarr"_h, &Float16x4Type },
    std::pair{ "raga"_h, &Float16x4Type },
    std::pair{ "ragb"_h, &Float16x4Type },
    std::pair{ "ragg"_h, &Float16x4Type },
    std::pair{ "ragr"_h, &Float16x4Type },
    std::pair{ "raag"_h, &Float16x4Type },
    std::pair{ "raab"_h, &Float16x4Type },
    std::pair{ "raaa"_h, &Float16x4Type },
    std::pair{ "raar"_h, &Float16x4Type },
    std::pair{ "rabr"_h, &Float16x4Type },
    std::pair{ "rabb"_h, &Float16x4Type },
    std::pair{ "raba"_h, &Float16x4Type },
    std::pair{ "rabg"_h, &Float16x4Type },
    std::pair{ "gbgr"_h, &Float16x4Type },
    std::pair{ "gbga"_h, &Float16x4Type },
    std::pair{ "gbgb"_h, &Float16x4Type },
    std::pair{ "gbgg"_h, &Float16x4Type },
    std::pair{ "gbar"_h, &Float16x4Type },
    std::pair{ "gbag"_h, &Float16x4Type },
    std::pair{ "gbab"_h, &Float16x4Type },
    std::pair{ "gbaa"_h, &Float16x4Type },
    std::pair{ "gbbb"_h, &Float16x4Type },
    std::pair{ "gbba"_h, &Float16x4Type },
    std::pair{ "gbbg"_h, &Float16x4Type },
    std::pair{ "gbbr"_h, &Float16x4Type },
    std::pair{ "gbrr"_h, &Float16x4Type },
    std::pair{ "gbrb"_h, &Float16x4Type },
    std::pair{ "gbra"_h, &Float16x4Type },
    std::pair{ "gbrg"_h, &Float16x4Type },
    std::pair{ "operator*(f16x4)"_h, &Float16x4_operator_mul_Float16x4 },
    std::pair{ "rbrg"_h, &Float16x4Type },
    std::pair{ "rbra"_h, &Float16x4Type },
    std::pair{ "rbrb"_h, &Float16x4Type },
    std::pair{ "rbrr"_h, &Float16x4Type },
    std::pair{ "rbgr"_h, &Float16x4Type },
    std::pair{ "rbgg"_h, &Float16x4Type },
    std::pair{ "rbgb"_h, &Float16x4Type },
    std::pair{ "rbga"_h, &Float16x4Type },
    std::pair{ "rbar"_h, &Float16x4Type },
    std::pair{ "rbag"_h, &Float16x4Type },
    std::pair{ "rbaa"_h, &Float16x4Type },
    std::pair{ "rbab"_h, &Float16x4Type },
    std::pair{ "rbbr"_h, &Float16x4Type },
    std::pair{ "rbbg"_h, &Float16x4Type },
    std::pair{ "rbba"_h, &Float16x4Type },
    std::pair{ "rbbb"_h, &Float16x4Type },
    std::pair{ "zyxx"_h, &Float16x4Type },
    std::pair{ "zyxy"_h, &Float16x4Type },
    std::pair{ "zyxz"_h, &Float16x4Type },
    std::pair{ "zyxw"_h, &Float16x4Type },
    std::pair{ "zyyz"_h, &Float16x4Type },
    std::pair{ "zyyy"_h, &Float16x4Type },
    std::pair{ "zyyx"_h, &Float16x4Type },
    std::pair{ "zyyw"_h, &Float16x4Type },
    std::pair{ "zyzw"_h, &Float16x4Type },
    std::pair{ "zyzz"_h, &Float16x4Type },
    std::pair{ "zyzx"_h, &Float16x4Type },
    std::pair{ "zyzy"_h, &Float16x4Type },
    std::pair{ "zyww"_h, &Float16x4Type },
    std::pair{ "zywy"_h, &Float16x4Type },
    std::pair{ "zywx"_h, &Float16x4Type },
    std::pair{ "zywz"_h, &Float16x4Type },
    std::pair{ "bggr"_h, &Float16x4Type },
    std::pair{ "bggb"_h, &Float16x4Type },
    std::pair{ "bgga"_h, &Float16x4Type },
    std::pair{ "bggg"_h, &Float16x4Type },
    std::pair{ "bgbg"_h, &Float16x4Type },
    std::pair{ "bgba"_h, &Float16x4Type },
    std::pair{ "bgbb"_h, &Float16x4Type },
    std::pair{ "bgbr"_h, &Float16x4Type },
    std::pair{ "bgag"_h, &Float16x4Type },
    std::pair{ "bgaa"_h, &Float16x4Type },
    std::pair{ "bgab"_h, &Float16x4Type },
    std::pair{ "bgar"_h, &Float16x4Type },
    std::pair{ "bgrr"_h, &Float16x4Type },
    std::pair{ "bgrg"_h, &Float16x4Type },
    std::pair{ "bgra"_h, &Float16x4Type },
    std::pair{ "bgrb"_h, &Float16x4Type },
    std::pair{ "arrr"_h, &Float16x4Type },
    std::pair{ "arra"_h, &Float16x4Type },
    std::pair{ "arrb"_h, &Float16x4Type },
    std::pair{ "arrg"_h, &Float16x4Type },
    std::pair{ "arba"_h, &Float16x4Type },
    std::pair{ "arbb"_h, &Float16x4Type },
    std::pair{ "arbg"_h, &Float16x4Type },
    std::pair{ "arbr"_h, &Float16x4Type },
    std::pair{ "araa"_h, &Float16x4Type },
    std::pair{ "arab"_h, &Float16x4Type },
    std::pair{ "arag"_h, &Float16x4Type },
    std::pair{ "arar"_h, &Float16x4Type },
    std::pair{ "argg"_h, &Float16x4Type },
    std::pair{ "argb"_h, &Float16x4Type },
    std::pair{ "arga"_h, &Float16x4Type },
    std::pair{ "argr"_h, &Float16x4Type },
    std::pair{ "rrg"_h, &Float16x3Type },
    std::pair{ "rra"_h, &Float16x3Type },
    std::pair{ "rrb"_h, &Float16x3Type },
    std::pair{ "rrr"_h, &Float16x3Type },
    std::pair{ "rgr"_h, &Float16x3Type },
    std::pair{ "rgg"_h, &Float16x3Type },
    std::pair{ "rgb"_h, &Float16x3Type },
    std::pair{ "rga"_h, &Float16x3Type },
    std::pair{ "rar"_h, &Float16x3Type },
    std::pair{ "rag"_h, &Float16x3Type },
    std::pair{ "raa"_h, &Float16x3Type },
    std::pair{ "rab"_h, &Float16x3Type },
    std::pair{ "rbr"_h, &Float16x3Type },
    std::pair{ "rbg"_h, &Float16x3Type },
    std::pair{ "rba"_h, &Float16x3Type },
    std::pair{ "rbb"_h, &Float16x3Type },
    std::pair{ "gagg"_h, &Float16x4Type },
    std::pair{ "gagb"_h, &Float16x4Type },
    std::pair{ "gaga"_h, &Float16x4Type },
    std::pair{ "gagr"_h, &Float16x4Type },
    std::pair{ "gaag"_h, &Float16x4Type },
    std::pair{ "gaaa"_h, &Float16x4Type },
    std::pair{ "gaab"_h, &Float16x4Type },
    std::pair{ "gaar"_h, &Float16x4Type },
    std::pair{ "gabg"_h, &Float16x4Type },
    std::pair{ "gaba"_h, &Float16x4Type },
    std::pair{ "gabb"_h, &Float16x4Type },
    std::pair{ "gabr"_h, &Float16x4Type },
    std::pair{ "garr"_h, &Float16x4Type },
    std::pair{ "garg"_h, &Float16x4Type },
    std::pair{ "gara"_h, &Float16x4Type },
    std::pair{ "garb"_h, &Float16x4Type },
    std::pair{ "operator[](u32)"_h, &Float16x4_operator_index_UInt32 },
    std::pair{ "zxzz"_h, &Float16x4Type },
    std::pair{ "zxzy"_h, &Float16x4Type },
    std::pair{ "zxzx"_h, &Float16x4Type },
    std::pair{ "zxzw"_h, &Float16x4Type },
    std::pair{ "zxyw"_h, &Float16x4Type },
    std::pair{ "zxyz"_h, &Float16x4Type },
    std::pair{ "zxyx"_h, &Float16x4Type },
    std::pair{ "zxyy"_h, &Float16x4Type },
    std::pair{ "zxxw"_h, &Float16x4Type },
    std::pair{ "zxxy"_h, &Float16x4Type },
    std::pair{ "zxxx"_h, &Float16x4Type },
    std::pair{ "zxxz"_h, &Float16x4Type },
    std::pair{ "zxwx"_h, &Float16x4Type },
    std::pair{ "zxwy"_h, &Float16x4Type },
    std::pair{ "zxwz"_h, &Float16x4Type },
    std::pair{ "zxww"_h, &Float16x4Type },
    std::pair{ "operator!=(f16x4)"_h, &Float16x4_operator_neq_Float16x4 },
    std::pair{ "bagr"_h, &Float16x4Type },
    std::pair{ "baga"_h, &Float16x4Type },
    std::pair{ "bagb"_h, &Float16x4Type },
    std::pair{ "bagg"_h, &Float16x4Type },
    std::pair{ "baar"_h, &Float16x4Type },
    std::pair{ "baag"_h, &Float16x4Type },
    std::pair{ "baab"_h, &Float16x4Type },
    std::pair{ "baaa"_h, &Float16x4Type },
    std::pair{ "babb"_h, &Float16x4Type },
    std::pair{ "baba"_h, &Float16x4Type },
    std::pair{ "babg"_h, &Float16x4Type },
    std::pair{ "babr"_h, &Float16x4Type },
    std::pair{ "barr"_h, &Float16x4Type },
    std::pair{ "barb"_h, &Float16x4Type },
    std::pair{ "bara"_h, &Float16x4Type },
    std::pair{ "barg"_h, &Float16x4Type },
    std::pair{ "operator[](u16)"_h, &Float16x4_operator_index_UInt16 },
    std::pair{ "wwwx"_h, &Float16x4Type },
    std::pair{ "wwwy"_h, &Float16x4Type },
    std::pair{ "wwwz"_h, &Float16x4Type },
    std::pair{ "wwww"_h, &Float16x4Type },
    std::pair{ "wwzz"_h, &Float16x4Type },
    std::pair{ "wwzy"_h, &Float16x4Type },
    std::pair{ "wwzx"_h, &Float16x4Type },
    std::pair{ "wwzw"_h, &Float16x4Type },
    std::pair{ "wwyz"_h, &Float16x4Type },
    std::pair{ "wwyx"_h, &Float16x4Type },
    std::pair{ "wwyy"_h, &Float16x4Type },
    std::pair{ "wwyw"_h, &Float16x4Type },
    std::pair{ "wwxw"_h, &Float16x4Type },
    std::pair{ "wwxy"_h, &Float16x4Type },
    std::pair{ "wwxx"_h, &Float16x4Type },
    std::pair{ "wwxz"_h, &Float16x4Type },
    std::pair{ "operator<(f16x4)"_h, &Float16x4_operator_lt_Float16x4 },
    std::pair{ "zzww"_h, &Float16x4Type },
    std::pair{ "zzwz"_h, &Float16x4Type },
    std::pair{ "zzwx"_h, &Float16x4Type },
    std::pair{ "zzwy"_h, &Float16x4Type },
    std::pair{ "zzyw"_h, &Float16x4Type },
    std::pair{ "zzyx"_h, &Float16x4Type },
    std::pair{ "zzyy"_h, &Float16x4Type },
    std::pair{ "zzyz"_h, &Float16x4Type },
    std::pair{ "zzxw"_h, &Float16x4Type },
    std::pair{ "zzxz"_h, &Float16x4Type },
    std::pair{ "zzxy"_h, &Float16x4Type },
    std::pair{ "zzxx"_h, &Float16x4Type },
    std::pair{ "zzzy"_h, &Float16x4Type },
    std::pair{ "zzzx"_h, &Float16x4Type },
    std::pair{ "zzzz"_h, &Float16x4Type },
    std::pair{ "zzzw"_h, &Float16x4Type },
    std::pair{ "operator*(f16)"_h, &Float16x4_operator_scale_Float16 },
    std::pair{ "g"_h, &Float16Type },
    std::pair{ "a"_h, &Float16Type },
    std::pair{ "b"_h, &Float16Type },
    std::pair{ "w"_h, &Float16Type },
    std::pair{ "r"_h, &Float16Type },
    std::pair{ "y"_h, &Float16Type },
    std::pair{ "x"_h, &Float16Type },
    std::pair{ "z"_h, &Float16Type },
    std::pair{ "bbgg"_h, &Float16x4Type },
    std::pair{ "bbgb"_h, &Float16x4Type },
    std::pair{ "bbga"_h, &Float16x4Type },
    std::pair{ "bbgr"_h, &Float16x4Type },
    std::pair{ "bbag"_h, &Float16x4Type },
    std::pair{ "bbaa"_h, &Float16x4Type },
    std::pair{ "bbab"_h, &Float16x4Type },
    std::pair{ "bbar"_h, &Float16x4Type },
    std::pair{ "bbbg"_h, &Float16x4Type },
    std::pair{ "bbba"_h, &Float16x4Type },
    std::pair{ "bbbb"_h, &Float16x4Type },
    std::pair{ "bbbr"_h, &Float16x4Type },
    std::pair{ "bbrr"_h, &Float16x4Type },
    std::pair{ "bbrg"_h, &Float16x4Type },
    std::pair{ "bbra"_h, &Float16x4Type },
    std::pair{ "bbrb"_h, &Float16x4Type },
    std::pair{ "ywy"_h, &Float16x3Type },
    std::pair{ "ywx"_h, &Float16x3Type },
    std::pair{ "ywz"_h, &Float16x3Type },
    std::pair{ "yww"_h, &Float16x3Type },
    std::pair{ "yxw"_h, &Float16x3Type },
    std::pair{ "yxx"_h, &Float16x3Type },
    std::pair{ "yxy"_h, &Float16x3Type },
    std::pair{ "yxz"_h, &Float16x3Type },
    std::pair{ "yyw"_h, &Float16x3Type },
    std::pair{ "yyz"_h, &Float16x3Type },
    std::pair{ "yyy"_h, &Float16x3Type },
    std::pair{ "yyx"_h, &Float16x3Type },
    std::pair{ "yzz"_h, &Float16x3Type },
    std::pair{ "yzx"_h, &Float16x3Type },
    std::pair{ "yzy"_h, &Float16x3Type },
    std::pair{ "yzw"_h, &Float16x3Type },
    std::pair{ "zwzx"_h, &Float16x4Type },
    std::pair{ "zwzy"_h, &Float16x4Type },
    std::pair{ "zwzz"_h, &Float16x4Type },
    std::pair{ "zwzw"_h, &Float16x4Type },
    std::pair{ "zwxw"_h, &Float16x4Type },
    std::pair{ "zwxz"_h, &Float16x4Type },
    std::pair{ "zwxx"_h, &Float16x4Type },
    std::pair{ "zwxy"_h, &Float16x4Type },
    std::pair{ "zwyw"_h, &Float16x4Type },
    std::pair{ "zwyy"_h, &Float16x4Type },
    std::pair{ "zwyx"_h, &Float16x4Type },
    std::pair{ "zwyz"_h, &Float16x4Type },
    std::pair{ "zwwz"_h, &Float16x4Type },
    std::pair{ "zwwy"_h, &Float16x4Type },
    std::pair{ "zwwx"_h, &Float16x4Type },
    std::pair{ "zwww"_h, &Float16x4Type },
    std::pair{ "xww"_h, &Float16x3Type },
    std::pair{ "xwx"_h, &Float16x3Type },
    std::pair{ "xwy"_h, &Float16x3Type },
    std::pair{ "xwz"_h, &Float16x3Type },
    std::pair{ "xzw"_h, &Float16x3Type },
    std::pair{ "xzz"_h, &Float16x3Type },
    std::pair{ "xzy"_h, &Float16x3Type },
    std::pair{ "xzx"_h, &Float16x3Type },
    std::pair{ "xyz"_h, &Float16x3Type },
    std::pair{ "xyx"_h, &Float16x3Type },
    std::pair{ "xyy"_h, &Float16x3Type },
    std::pair{ "xyw"_h, &Float16x3Type },
    std::pair{ "xxy"_h, &Float16x3Type },
    std::pair{ "xxx"_h, &Float16x3Type },
    std::pair{ "xxz"_h, &Float16x3Type },
    std::pair{ "xxw"_h, &Float16x3Type },
    std::pair{ "operator*(i16)"_h, &Float16x4_operator_scale_Int16 },
    std::pair{ "operator/=(f16x4)"_h, &Float16x4_operator_divasg_Float16x4 },
    std::pair{ "zyx"_h, &Float16x3Type },
    std::pair{ "zyy"_h, &Float16x3Type },
    std::pair{ "zyz"_h, &Float16x3Type },
    std::pair{ "zyw"_h, &Float16x3Type },
    std::pair{ "zxz"_h, &Float16x3Type },
    std::pair{ "zxy"_h, &Float16x3Type },
    std::pair{ "zxx"_h, &Float16x3Type },
    std::pair{ "zxw"_h, &Float16x3Type },
    std::pair{ "zzw"_h, &Float16x3Type },
    std::pair{ "zzy"_h, &Float16x3Type },
    std::pair{ "zzx"_h, &Float16x3Type },
    std::pair{ "zzz"_h, &Float16x3Type },
    std::pair{ "zwz"_h, &Float16x3Type },
    std::pair{ "zwx"_h, &Float16x3Type },
    std::pair{ "zwy"_h, &Float16x3Type },
    std::pair{ "zww"_h, &Float16x3Type },
    std::pair{ "operator%(f16x4)"_h, &Float16x4_operator_mod_Float16x4 },
    std::pair{ "ggr"_h, &Float16x3Type },
    std::pair{ "ggb"_h, &Float16x3Type },
    std::pair{ "gga"_h, &Float16x3Type },
    std::pair{ "ggg"_h, &Float16x3Type },
    std::pair{ "gbg"_h, &Float16x3Type },
    std::pair{ "gba"_h, &Float16x3Type },
    std::pair{ "gbb"_h, &Float16x3Type },
    std::pair{ "gbr"_h, &Float16x3Type },
    std::pair{ "gag"_h, &Float16x3Type },
    std::pair{ "gaa"_h, &Float16x3Type },
    std::pair{ "gab"_h, &Float16x3Type },
    std::pair{ "gar"_h, &Float16x3Type },
    std::pair{ "grr"_h, &Float16x3Type },
    std::pair{ "grg"_h, &Float16x3Type },
    std::pair{ "gra"_h, &Float16x3Type },
    std::pair{ "grb"_h, &Float16x3Type },
    std::pair{ "xwww"_h, &Float16x4Type },
    std::pair{ "xwwy"_h, &Float16x4Type },
    std::pair{ "xwwx"_h, &Float16x4Type },
    std::pair{ "xwwz"_h, &Float16x4Type },
    std::pair{ "xwxx"_h, &Float16x4Type },
    std::pair{ "xwxy"_h, &Float16x4Type },
    std::pair{ "xwxz"_h, &Float16x4Type },
    std::pair{ "xwxw"_h, &Float16x4Type },
    std::pair{ "xwyz"_h, &Float16x4Type },
    std::pair{ "xwyy"_h, &Float16x4Type },
    std::pair{ "xwyx"_h, &Float16x4Type },
    std::pair{ "xwyw"_h, &Float16x4Type },
    std::pair{ "xwzz"_h, &Float16x4Type },
    std::pair{ "xwzx"_h, &Float16x4Type },
    std::pair{ "xwzy"_h, &Float16x4Type },
    std::pair{ "xwzw"_h, &Float16x4Type },
    std::pair{ "operator[]"_h, &Float16x4_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float16x4_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float16x4_operator_index_UInt16 },
    std::pair{ "agrr"_h, &Float16x4Type },
    std::pair{ "agra"_h, &Float16x4Type },
    std::pair{ "agrb"_h, &Float16x4Type },
    std::pair{ "agrg"_h, &Float16x4Type },
    std::pair{ "agar"_h, &Float16x4Type },
    std::pair{ "agaa"_h, &Float16x4Type },
    std::pair{ "agab"_h, &Float16x4Type },
    std::pair{ "agag"_h, &Float16x4Type },
    std::pair{ "agba"_h, &Float16x4Type },
    std::pair{ "agbb"_h, &Float16x4Type },
    std::pair{ "agbg"_h, &Float16x4Type },
    std::pair{ "agbr"_h, &Float16x4Type },
    std::pair{ "aggb"_h, &Float16x4Type },
    std::pair{ "agga"_h, &Float16x4Type },
    std::pair{ "aggg"_h, &Float16x4Type },
    std::pair{ "aggr"_h, &Float16x4Type },
    std::pair{ "operator=="_h, &Float16x4_operator_eq_Float16x4 },
    std::pair{ "operator<="_h, &Float16x4_operator_lte_Float16x4 },
    std::pair{ "operator>="_h, &Float16x4_operator_gte_Float16x4 },
    std::pair{ "operator-="_h, &Float16x4_operator_subasg_Float16x4 },
    std::pair{ "operator/="_h, &Float16x4_operator_divasg_Float16x4 },
    std::pair{ "operator+="_h, &Float16x4_operator_addasg_Float16x4 },
    std::pair{ "operator*="_h, &Float16x4_operator_mulasg_Float16x4 },
    std::pair{ "operator!="_h, &Float16x4_operator_neq_Float16x4 },
    std::pair{ "agr"_h, &Float16x3Type },
    std::pair{ "aga"_h, &Float16x3Type },
    std::pair{ "agb"_h, &Float16x3Type },
    std::pair{ "agg"_h, &Float16x3Type },
    std::pair{ "aar"_h, &Float16x3Type },
    std::pair{ "aag"_h, &Float16x3Type },
    std::pair{ "aab"_h, &Float16x3Type },
    std::pair{ "aaa"_h, &Float16x3Type },
    std::pair{ "abb"_h, &Float16x3Type },
    std::pair{ "aba"_h, &Float16x3Type },
    std::pair{ "abg"_h, &Float16x3Type },
    std::pair{ "abr"_h, &Float16x3Type },
    std::pair{ "operator-=(f16x4)"_h, &Float16x4_operator_subasg_Float16x4 },
    std::pair{ "arr"_h, &Float16x3Type },
    std::pair{ "arb"_h, &Float16x3Type },
    std::pair{ "ara"_h, &Float16x3Type },
    std::pair{ "arg"_h, &Float16x3Type },
    std::pair{ "aarr"_h, &Float16x4Type },
    std::pair{ "aarg"_h, &Float16x4Type },
    std::pair{ "aarb"_h, &Float16x4Type },
    std::pair{ "aara"_h, &Float16x4Type },
    std::pair{ "aagr"_h, &Float16x4Type },
    std::pair{ "aaga"_h, &Float16x4Type },
    std::pair{ "aagb"_h, &Float16x4Type },
    std::pair{ "aagg"_h, &Float16x4Type },
    std::pair{ "aabg"_h, &Float16x4Type },
    std::pair{ "aabb"_h, &Float16x4Type },
    std::pair{ "aaba"_h, &Float16x4Type },
    std::pair{ "aabr"_h, &Float16x4Type },
    std::pair{ "aaab"_h, &Float16x4Type },
    std::pair{ "aaaa"_h, &Float16x4Type },
    std::pair{ "aaag"_h, &Float16x4Type },
    std::pair{ "aaar"_h, &Float16x4Type },
    std::pair{ "operator==(f16x4)"_h, &Float16x4_operator_eq_Float16x4 },
    std::pair{ "operator[](i32)"_h, &Float16x4_operator_index_Int32 },
    std::pair{ "grrb"_h, &Float16x4Type },
    std::pair{ "grra"_h, &Float16x4Type },
    std::pair{ "grrg"_h, &Float16x4Type },
    std::pair{ "grrr"_h, &Float16x4Type },
    std::pair{ "grga"_h, &Float16x4Type },
    std::pair{ "grgb"_h, &Float16x4Type },
    std::pair{ "grgg"_h, &Float16x4Type },
    std::pair{ "grgr"_h, &Float16x4Type },
    std::pair{ "grag"_h, &Float16x4Type },
    std::pair{ "grab"_h, &Float16x4Type },
    std::pair{ "graa"_h, &Float16x4Type },
    std::pair{ "grar"_h, &Float16x4Type },
    std::pair{ "grbr"_h, &Float16x4Type },
    std::pair{ "grbb"_h, &Float16x4Type },
    std::pair{ "grba"_h, &Float16x4Type },
    std::pair{ "grbg"_h, &Float16x4Type },
    std::pair{ "abbr"_h, &Float16x4Type },
    std::pair{ "abba"_h, &Float16x4Type },
    std::pair{ "abbb"_h, &Float16x4Type },
    std::pair{ "abbg"_h, &Float16x4Type },
    std::pair{ "abar"_h, &Float16x4Type },
    std::pair{ "abaa"_h, &Float16x4Type },
    std::pair{ "abab"_h, &Float16x4Type },
    std::pair{ "abag"_h, &Float16x4Type },
    std::pair{ "abgr"_h, &Float16x4Type },
    std::pair{ "abgg"_h, &Float16x4Type },
    std::pair{ "abgb"_h, &Float16x4Type },
    std::pair{ "abga"_h, &Float16x4Type },
    std::pair{ "abra"_h, &Float16x4Type },
    std::pair{ "abrb"_h, &Float16x4Type },
    std::pair{ "abrg"_h, &Float16x4Type },
    std::pair{ "abrr"_h, &Float16x4Type },
    std::pair{ "rrgg"_h, &Float16x4Type },
    std::pair{ "rrgb"_h, &Float16x4Type },
    std::pair{ "rrga"_h, &Float16x4Type },
    std::pair{ "rrgr"_h, &Float16x4Type },
    std::pair{ "rrag"_h, &Float16x4Type },
    std::pair{ "rraa"_h, &Float16x4Type },
    std::pair{ "rrab"_h, &Float16x4Type },
    std::pair{ "rrar"_h, &Float16x4Type },
    std::pair{ "rrbg"_h, &Float16x4Type },
    std::pair{ "rrba"_h, &Float16x4Type },
    std::pair{ "rrbb"_h, &Float16x4Type },
    std::pair{ "rrbr"_h, &Float16x4Type },
    std::pair{ "rrrr"_h, &Float16x4Type },
    std::pair{ "rrrg"_h, &Float16x4Type },
    std::pair{ "rrra"_h, &Float16x4Type },
    std::pair{ "rrrb"_h, &Float16x4Type }
    };

Float16x4::Float16x4()
{
    this->name = "f16x4"_c;
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x4_operator_index_Int32_arg.name = "arg"_c;
    Float16x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x4_operator_index_Int32.name = Float16x4_operator_index_Int32_name;
    Float16x4_operator_index_Int32.backendIndex = 995;
    Float16x4_operator_index_Int32.returnType = Type::FullType { Float16Type.name };
    Float16x4_operator_index_Int32.parameters = Float16x4_operator_index_Int32_args;
    Symbol::Resolved(&Float16x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x4_operator_index_Int32)->signature = "operator[](i32) f16"_c;
    Symbol::Resolved(&Float16x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x4_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float16x4_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt32
    Float16x4_operator_index_UInt32_arg.name = "arg"_c;
    Float16x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x4_operator_index_UInt32.name = Float16x4_operator_index_UInt32_name;
    Float16x4_operator_index_UInt32.backendIndex = 996;
    Float16x4_operator_index_UInt32.returnType = Type::FullType { Float16Type.name };
    Float16x4_operator_index_UInt32.parameters = Float16x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x4_operator_index_UInt32)->signature = "operator[](u32) f16"_c;
    Symbol::Resolved(&Float16x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x4_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float16x4_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    /// operator[] with Int16
    Float16x4_operator_index_Int16_arg.name = "arg"_c;
    Float16x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x4_operator_index_Int16.name = Float16x4_operator_index_Int16_name;
    Float16x4_operator_index_Int16.backendIndex = 997;
    Float16x4_operator_index_Int16.returnType = Type::FullType { Float16Type.name };
    Float16x4_operator_index_Int16.parameters = Float16x4_operator_index_Int16_args;
    Symbol::Resolved(&Float16x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4_operator_index_Int16)->signature = "operator[](i16) f16"_c;
    Symbol::Resolved(&Float16x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x4_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float16x4_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt16
    Float16x4_operator_index_UInt16_arg.name = "arg"_c;
    Float16x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x4_operator_index_UInt16.name = Float16x4_operator_index_UInt16_name;
    Float16x4_operator_index_UInt16.backendIndex = 998;
    Float16x4_operator_index_UInt16.returnType = Type::FullType { Float16Type.name };
    Float16x4_operator_index_UInt16.parameters = Float16x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4_operator_index_UInt16)->signature = "operator[](u16) f16"_c;
    Symbol::Resolved(&Float16x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x4_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float16x4_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    /// operator+ with Float16x4
    Float16x4_operator_add_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_add_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_add_Float16x4.name = Float16x4_operator_add_Float16x4_name;
    Float16x4_operator_add_Float16x4.backendIndex = 999;
    Float16x4_operator_add_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_add_Float16x4.parameters = Float16x4_operator_add_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_add_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_add_Float16x4)->signature = "operator+(f16x4) f16x4"_c;
    Symbol::Resolved(&Float16x4_operator_add_Float16x4)->name = "operator+(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_add_Float16x4)->nameWithVarNames = "operator+(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_add_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator- with Float16x4
    Float16x4_operator_sub_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_sub_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_sub_Float16x4.name = Float16x4_operator_sub_Float16x4_name;
    Float16x4_operator_sub_Float16x4.backendIndex = 1000;
    Float16x4_operator_sub_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_sub_Float16x4.parameters = Float16x4_operator_sub_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_sub_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_sub_Float16x4)->signature = "operator-(f16x4) f16x4"_c;
    Symbol::Resolved(&Float16x4_operator_sub_Float16x4)->name = "operator-(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_sub_Float16x4)->nameWithVarNames = "operator-(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_sub_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Float16x4
    Float16x4_operator_mul_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_mul_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_mul_Float16x4.name = Float16x4_operator_mul_Float16x4_name;
    Float16x4_operator_mul_Float16x4.backendIndex = 1001;
    Float16x4_operator_mul_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_mul_Float16x4.parameters = Float16x4_operator_mul_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_mul_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_mul_Float16x4)->signature = "operator*(f16x4) f16x4"_c;
    Symbol::Resolved(&Float16x4_operator_mul_Float16x4)->name = "operator*(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_mul_Float16x4)->nameWithVarNames = "operator*(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_mul_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator/ with Float16x4
    Float16x4_operator_div_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_div_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_div_Float16x4.name = Float16x4_operator_div_Float16x4_name;
    Float16x4_operator_div_Float16x4.backendIndex = 1002;
    Float16x4_operator_div_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_div_Float16x4.parameters = Float16x4_operator_div_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_div_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_div_Float16x4)->signature = "operator/(f16x4) f16x4"_c;
    Symbol::Resolved(&Float16x4_operator_div_Float16x4)->name = "operator/(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_div_Float16x4)->nameWithVarNames = "operator/(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_div_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator% with Float16x4
    Float16x4_operator_mod_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_mod_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_mod_Float16x4.name = Float16x4_operator_mod_Float16x4_name;
    Float16x4_operator_mod_Float16x4.backendIndex = 1003;
    Float16x4_operator_mod_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_mod_Float16x4.parameters = Float16x4_operator_mod_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_mod_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_mod_Float16x4)->signature = "operator%(f16x4) f16x4"_c;
    Symbol::Resolved(&Float16x4_operator_mod_Float16x4)->name = "operator%(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_mod_Float16x4)->nameWithVarNames = "operator%(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_mod_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator+= with Float16x4
    Float16x4_operator_addasg_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_addasg_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_addasg_Float16x4.name = Float16x4_operator_addasg_Float16x4_name;
    Float16x4_operator_addasg_Float16x4.backendIndex = 1004;
    Float16x4_operator_addasg_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_addasg_Float16x4.parameters = Float16x4_operator_addasg_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_addasg_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_addasg_Float16x4)->signature = "operator+=(f16x4) f16x4"_c;
    Symbol::Resolved(&Float16x4_operator_addasg_Float16x4)->name = "operator+=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_addasg_Float16x4)->nameWithVarNames = "operator+=(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_addasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator-= with Float16x4
    Float16x4_operator_subasg_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_subasg_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_subasg_Float16x4.name = Float16x4_operator_subasg_Float16x4_name;
    Float16x4_operator_subasg_Float16x4.backendIndex = 1005;
    Float16x4_operator_subasg_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_subasg_Float16x4.parameters = Float16x4_operator_subasg_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_subasg_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_subasg_Float16x4)->signature = "operator-=(f16x4) f16x4"_c;
    Symbol::Resolved(&Float16x4_operator_subasg_Float16x4)->name = "operator-=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_subasg_Float16x4)->nameWithVarNames = "operator-=(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_subasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator*= with Float16x4
    Float16x4_operator_mulasg_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_mulasg_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_mulasg_Float16x4.name = Float16x4_operator_mulasg_Float16x4_name;
    Float16x4_operator_mulasg_Float16x4.backendIndex = 1006;
    Float16x4_operator_mulasg_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_mulasg_Float16x4.parameters = Float16x4_operator_mulasg_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_mulasg_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_mulasg_Float16x4)->signature = "operator*=(f16x4) f16x4"_c;
    Symbol::Resolved(&Float16x4_operator_mulasg_Float16x4)->name = "operator*=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_mulasg_Float16x4)->nameWithVarNames = "operator*=(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_mulasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator/= with Float16x4
    Float16x4_operator_divasg_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_divasg_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_divasg_Float16x4.name = Float16x4_operator_divasg_Float16x4_name;
    Float16x4_operator_divasg_Float16x4.backendIndex = 1007;
    Float16x4_operator_divasg_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_divasg_Float16x4.parameters = Float16x4_operator_divasg_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_divasg_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_divasg_Float16x4)->signature = "operator/=(f16x4) f16x4"_c;
    Symbol::Resolved(&Float16x4_operator_divasg_Float16x4)->name = "operator/=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_divasg_Float16x4)->nameWithVarNames = "operator/=(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_divasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator< with Float16x4
    Float16x4_operator_lt_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_lt_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_lt_Float16x4.name = Float16x4_operator_lt_Float16x4_name;
    Float16x4_operator_lt_Float16x4.backendIndex = 1008;
    Float16x4_operator_lt_Float16x4.returnType = Type::FullType { Bool8x4Type.name };
    Float16x4_operator_lt_Float16x4.parameters = Float16x4_operator_lt_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_lt_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_lt_Float16x4)->signature = "operator<(f16x4) b8x4"_c;
    Symbol::Resolved(&Float16x4_operator_lt_Float16x4)->name = "operator<(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_lt_Float16x4)->nameWithVarNames = "operator<(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_lt_Float16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator<= with Float16x4
    Float16x4_operator_lte_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_lte_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_lte_Float16x4.name = Float16x4_operator_lte_Float16x4_name;
    Float16x4_operator_lte_Float16x4.backendIndex = 1009;
    Float16x4_operator_lte_Float16x4.returnType = Type::FullType { Bool8x4Type.name };
    Float16x4_operator_lte_Float16x4.parameters = Float16x4_operator_lte_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_lte_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_lte_Float16x4)->signature = "operator<=(f16x4) b8x4"_c;
    Symbol::Resolved(&Float16x4_operator_lte_Float16x4)->name = "operator<=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_lte_Float16x4)->nameWithVarNames = "operator<=(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_lte_Float16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator> with Float16x4
    Float16x4_operator_gt_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_gt_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_gt_Float16x4.name = Float16x4_operator_gt_Float16x4_name;
    Float16x4_operator_gt_Float16x4.backendIndex = 1010;
    Float16x4_operator_gt_Float16x4.returnType = Type::FullType { Bool8x4Type.name };
    Float16x4_operator_gt_Float16x4.parameters = Float16x4_operator_gt_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_gt_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_gt_Float16x4)->signature = "operator>(f16x4) b8x4"_c;
    Symbol::Resolved(&Float16x4_operator_gt_Float16x4)->name = "operator>(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_gt_Float16x4)->nameWithVarNames = "operator>(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_gt_Float16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator>= with Float16x4
    Float16x4_operator_gte_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_gte_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_gte_Float16x4.name = Float16x4_operator_gte_Float16x4_name;
    Float16x4_operator_gte_Float16x4.backendIndex = 1011;
    Float16x4_operator_gte_Float16x4.returnType = Type::FullType { Bool8x4Type.name };
    Float16x4_operator_gte_Float16x4.parameters = Float16x4_operator_gte_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_gte_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_gte_Float16x4)->signature = "operator>=(f16x4) b8x4"_c;
    Symbol::Resolved(&Float16x4_operator_gte_Float16x4)->name = "operator>=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_gte_Float16x4)->nameWithVarNames = "operator>=(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_gte_Float16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator== with Float16x4
    Float16x4_operator_eq_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_eq_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_eq_Float16x4.name = Float16x4_operator_eq_Float16x4_name;
    Float16x4_operator_eq_Float16x4.backendIndex = 1012;
    Float16x4_operator_eq_Float16x4.returnType = Type::FullType { Bool8x4Type.name };
    Float16x4_operator_eq_Float16x4.parameters = Float16x4_operator_eq_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_eq_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_eq_Float16x4)->signature = "operator==(f16x4) b8x4"_c;
    Symbol::Resolved(&Float16x4_operator_eq_Float16x4)->name = "operator==(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_eq_Float16x4)->nameWithVarNames = "operator==(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_eq_Float16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator!= with Float16x4
    Float16x4_operator_neq_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_neq_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_neq_Float16x4.name = Float16x4_operator_neq_Float16x4_name;
    Float16x4_operator_neq_Float16x4.backendIndex = 1013;
    Float16x4_operator_neq_Float16x4.returnType = Type::FullType { Bool8x4Type.name };
    Float16x4_operator_neq_Float16x4.parameters = Float16x4_operator_neq_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_neq_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_neq_Float16x4)->signature = "operator!=(f16x4) b8x4"_c;
    Symbol::Resolved(&Float16x4_operator_neq_Float16x4)->name = "operator!=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_neq_Float16x4)->nameWithVarNames = "operator!=(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_neq_Float16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator* with Float16
    Float16x4_operator_scale_Float16_arg.name = "arg"_c;
    Float16x4_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x4_operator_scale_Float16.name = Float16x4_operator_scale_Float16_name;
    Float16x4_operator_scale_Float16.backendIndex = 1014;
    Float16x4_operator_scale_Float16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_scale_Float16.parameters = Float16x4_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x4_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_operator_scale_Float16)->signature = "operator*(f16) f16x4"_c;
    Symbol::Resolved(&Float16x4_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x4_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x4_operator_scale_Float16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with UInt16
    Float16x4_operator_scale_UInt16_arg.name = "arg"_c;
    Float16x4_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x4_operator_scale_UInt16.name = Float16x4_operator_scale_UInt16_name;
    Float16x4_operator_scale_UInt16.backendIndex = 1015;
    Float16x4_operator_scale_UInt16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_scale_UInt16.parameters = Float16x4_operator_scale_UInt16_args;
    Symbol::Resolved(&Float16x4_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4_operator_scale_UInt16)->signature = "operator*(u16) f16x4"_c;
    Symbol::Resolved(&Float16x4_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&Float16x4_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&Float16x4_operator_scale_UInt16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Int16
    Float16x4_operator_scale_Int16_arg.name = "arg"_c;
    Float16x4_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x4_operator_scale_Int16.name = Float16x4_operator_scale_Int16_name;
    Float16x4_operator_scale_Int16.backendIndex = 1016;
    Float16x4_operator_scale_Int16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_scale_Int16.parameters = Float16x4_operator_scale_Int16_args;
    Symbol::Resolved(&Float16x4_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4_operator_scale_Int16)->signature = "operator*(i16) f16x4"_c;
    Symbol::Resolved(&Float16x4_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&Float16x4_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&Float16x4_operator_scale_Int16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Float32x4x2
    Float16x4_operator_transform_Float32x4x2_arg.name = "arg"_c;
    Float16x4_operator_transform_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float16x4_operator_transform_Float32x4x2.name = Float16x4_operator_transform_Float32x4x2_name;
    Float16x4_operator_transform_Float32x4x2.backendIndex = 1017;
    Float16x4_operator_transform_Float32x4x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x4_operator_transform_Float32x4x2.parameters = Float16x4_operator_transform_Float32x4x2_args;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x2)->signature = "operator*(f32x4x2) f16x2"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x2)->name = "operator*(f32x4x2)"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x2)->nameWithVarNames = "operator*(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x2)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float32x4x3
    Float16x4_operator_transform_Float32x4x3_arg.name = "arg"_c;
    Float16x4_operator_transform_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float16x4_operator_transform_Float32x4x3.name = Float16x4_operator_transform_Float32x4x3_name;
    Float16x4_operator_transform_Float32x4x3.backendIndex = 1018;
    Float16x4_operator_transform_Float32x4x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x4_operator_transform_Float32x4x3.parameters = Float16x4_operator_transform_Float32x4x3_args;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x3)->signature = "operator*(f32x4x3) f16x3"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x3)->name = "operator*(f32x4x3)"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x3)->nameWithVarNames = "operator*(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x3)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float32x4x4
    Float16x4_operator_transform_Float32x4x4_arg.name = "arg"_c;
    Float16x4_operator_transform_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float16x4_operator_transform_Float32x4x4.name = Float16x4_operator_transform_Float32x4x4_name;
    Float16x4_operator_transform_Float32x4x4.backendIndex = 1019;
    Float16x4_operator_transform_Float32x4x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_transform_Float32x4x4.parameters = Float16x4_operator_transform_Float32x4x4_args;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x4)->signature = "operator*(f32x4x4) f16x4"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x4)->name = "operator*(f32x4x4)"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x4)->nameWithVarNames = "operator*(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x4)->returnTypeSymbol = &Float16x4Type;

    this->scope.symbolLookup = Float16x4_symbolLookup;
}
Float16x4 Float16x4Type;

/// operator[] with Int32
Variable UInt16x4_operator_index_Int32_arg;
Function UInt16x4_operator_index_Int32;
inline constexpr std::array UInt16x4_operator_index_Int32_args = { &UInt16x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt16x4_operator_index_UInt32_arg;
Function UInt16x4_operator_index_UInt32;
inline constexpr std::array UInt16x4_operator_index_UInt32_args = { &UInt16x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt16x4_operator_index_Int16_arg;
Function UInt16x4_operator_index_Int16;
inline constexpr std::array UInt16x4_operator_index_Int16_args = { &UInt16x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt16x4_operator_index_UInt16_arg;
Function UInt16x4_operator_index_UInt16;
inline constexpr std::array UInt16x4_operator_index_UInt16_args = { &UInt16x4_operator_index_UInt16_arg };

/// operator+ with UInt16x4
Variable UInt16x4_operator_add_UInt16x4_arg;
Function UInt16x4_operator_add_UInt16x4;
inline constexpr std::array UInt16x4_operator_add_UInt16x4_args = { &UInt16x4_operator_add_UInt16x4_arg };

/// operator- with UInt16x4
Variable UInt16x4_operator_sub_UInt16x4_arg;
Function UInt16x4_operator_sub_UInt16x4;
inline constexpr std::array UInt16x4_operator_sub_UInt16x4_args = { &UInt16x4_operator_sub_UInt16x4_arg };

/// operator* with UInt16x4
Variable UInt16x4_operator_mul_UInt16x4_arg;
Function UInt16x4_operator_mul_UInt16x4;
inline constexpr std::array UInt16x4_operator_mul_UInt16x4_args = { &UInt16x4_operator_mul_UInt16x4_arg };

/// operator/ with UInt16x4
Variable UInt16x4_operator_div_UInt16x4_arg;
Function UInt16x4_operator_div_UInt16x4;
inline constexpr std::array UInt16x4_operator_div_UInt16x4_args = { &UInt16x4_operator_div_UInt16x4_arg };

/// operator% with UInt16x4
Variable UInt16x4_operator_mod_UInt16x4_arg;
Function UInt16x4_operator_mod_UInt16x4;
inline constexpr std::array UInt16x4_operator_mod_UInt16x4_args = { &UInt16x4_operator_mod_UInt16x4_arg };

/// operator+= with UInt16x4
Variable UInt16x4_operator_addasg_UInt16x4_arg;
Function UInt16x4_operator_addasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_addasg_UInt16x4_args = { &UInt16x4_operator_addasg_UInt16x4_arg };

/// operator-= with UInt16x4
Variable UInt16x4_operator_subasg_UInt16x4_arg;
Function UInt16x4_operator_subasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_subasg_UInt16x4_args = { &UInt16x4_operator_subasg_UInt16x4_arg };

/// operator*= with UInt16x4
Variable UInt16x4_operator_mulasg_UInt16x4_arg;
Function UInt16x4_operator_mulasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_mulasg_UInt16x4_args = { &UInt16x4_operator_mulasg_UInt16x4_arg };

/// operator/= with UInt16x4
Variable UInt16x4_operator_divasg_UInt16x4_arg;
Function UInt16x4_operator_divasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_divasg_UInt16x4_args = { &UInt16x4_operator_divasg_UInt16x4_arg };

/// operator< with UInt16x4
Variable UInt16x4_operator_lt_UInt16x4_arg;
Function UInt16x4_operator_lt_UInt16x4;
inline constexpr std::array UInt16x4_operator_lt_UInt16x4_args = { &UInt16x4_operator_lt_UInt16x4_arg };

/// operator<= with UInt16x4
Variable UInt16x4_operator_lte_UInt16x4_arg;
Function UInt16x4_operator_lte_UInt16x4;
inline constexpr std::array UInt16x4_operator_lte_UInt16x4_args = { &UInt16x4_operator_lte_UInt16x4_arg };

/// operator> with UInt16x4
Variable UInt16x4_operator_gt_UInt16x4_arg;
Function UInt16x4_operator_gt_UInt16x4;
inline constexpr std::array UInt16x4_operator_gt_UInt16x4_args = { &UInt16x4_operator_gt_UInt16x4_arg };

/// operator>= with UInt16x4
Variable UInt16x4_operator_gte_UInt16x4_arg;
Function UInt16x4_operator_gte_UInt16x4;
inline constexpr std::array UInt16x4_operator_gte_UInt16x4_args = { &UInt16x4_operator_gte_UInt16x4_arg };

/// operator== with UInt16x4
Variable UInt16x4_operator_eq_UInt16x4_arg;
Function UInt16x4_operator_eq_UInt16x4;
inline constexpr std::array UInt16x4_operator_eq_UInt16x4_args = { &UInt16x4_operator_eq_UInt16x4_arg };

/// operator!= with UInt16x4
Variable UInt16x4_operator_neq_UInt16x4_arg;
Function UInt16x4_operator_neq_UInt16x4;
inline constexpr std::array UInt16x4_operator_neq_UInt16x4_args = { &UInt16x4_operator_neq_UInt16x4_arg };

/// operator* with Float16
Variable UInt16x4_operator_scale_Float16_arg;
Function UInt16x4_operator_scale_Float16;
inline constexpr std::array UInt16x4_operator_scale_Float16_args = { &UInt16x4_operator_scale_Float16_arg };

/// operator* with UInt16
Variable UInt16x4_operator_scale_UInt16_arg;
Function UInt16x4_operator_scale_UInt16;
inline constexpr std::array UInt16x4_operator_scale_UInt16_args = { &UInt16x4_operator_scale_UInt16_arg };

/// operator* with Int16
Variable UInt16x4_operator_scale_Int16_arg;
Function UInt16x4_operator_scale_Int16;
inline constexpr std::array UInt16x4_operator_scale_Int16_args = { &UInt16x4_operator_scale_Int16_arg };

/// operator| with UInt16x4
Variable UInt16x4_operator_or_UInt16x4_arg;
Function UInt16x4_operator_or_UInt16x4;
inline constexpr std::array UInt16x4_operator_or_UInt16x4_args = { &UInt16x4_operator_or_UInt16x4_arg };

/// operator& with UInt16x4
Variable UInt16x4_operator_and_UInt16x4_arg;
Function UInt16x4_operator_and_UInt16x4;
inline constexpr std::array UInt16x4_operator_and_UInt16x4_args = { &UInt16x4_operator_and_UInt16x4_arg };

/// operator^ with UInt16x4
Variable UInt16x4_operator_xor_UInt16x4_arg;
Function UInt16x4_operator_xor_UInt16x4;
inline constexpr std::array UInt16x4_operator_xor_UInt16x4_args = { &UInt16x4_operator_xor_UInt16x4_arg };

/// operator<< with UInt16x4
Variable UInt16x4_operator_lsh_UInt16x4_arg;
Function UInt16x4_operator_lsh_UInt16x4;
inline constexpr std::array UInt16x4_operator_lsh_UInt16x4_args = { &UInt16x4_operator_lsh_UInt16x4_arg };

/// operator>> with UInt16x4
Variable UInt16x4_operator_rsh_UInt16x4_arg;
Function UInt16x4_operator_rsh_UInt16x4;
inline constexpr std::array UInt16x4_operator_rsh_UInt16x4_args = { &UInt16x4_operator_rsh_UInt16x4_arg };

/// operator|= with UInt16x4
Variable UInt16x4_operator_orasg_UInt16x4_arg;
Function UInt16x4_operator_orasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_orasg_UInt16x4_args = { &UInt16x4_operator_orasg_UInt16x4_arg };

/// operator&= with UInt16x4
Variable UInt16x4_operator_andasg_UInt16x4_arg;
Function UInt16x4_operator_andasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_andasg_UInt16x4_args = { &UInt16x4_operator_andasg_UInt16x4_arg };

/// operator^= with UInt16x4
Variable UInt16x4_operator_xorasg_UInt16x4_arg;
Function UInt16x4_operator_xorasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_xorasg_UInt16x4_args = { &UInt16x4_operator_xorasg_UInt16x4_arg };

/// operator<<= with UInt16x4
Variable UInt16x4_operator_lshasg_UInt16x4_arg;
Function UInt16x4_operator_lshasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_lshasg_UInt16x4_args = { &UInt16x4_operator_lshasg_UInt16x4_arg };

/// operator>>= with UInt16x4
Variable UInt16x4_operator_rhsasg_UInt16x4_arg;
Function UInt16x4_operator_rhsasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_rhsasg_UInt16x4_args = { &UInt16x4_operator_rhsasg_UInt16x4_arg };

static constexpr StaticMap<HashString, Symbol*, 744> UInt16x4_symbolLookup = {
    std::pair{ "wzwy"_h, &UInt16x4Type },
    std::pair{ "wzwx"_h, &UInt16x4Type },
    std::pair{ "wzwz"_h, &UInt16x4Type },
    std::pair{ "wzww"_h, &UInt16x4Type },
    std::pair{ "bgg"_h, &UInt16x3Type },
    std::pair{ "bgb"_h, &UInt16x3Type },
    std::pair{ "bga"_h, &UInt16x3Type },
    std::pair{ "bgr"_h, &UInt16x3Type },
    std::pair{ "bag"_h, &UInt16x3Type },
    std::pair{ "baa"_h, &UInt16x3Type },
    std::pair{ "bab"_h, &UInt16x3Type },
    std::pair{ "bar"_h, &UInt16x3Type },
    std::pair{ "bbg"_h, &UInt16x3Type },
    std::pair{ "bba"_h, &UInt16x3Type },
    std::pair{ "bbb"_h, &UInt16x3Type },
    std::pair{ "bbr"_h, &UInt16x3Type },
    std::pair{ "wzxw"_h, &UInt16x4Type },
    std::pair{ "wzxx"_h, &UInt16x4Type },
    std::pair{ "wzxy"_h, &UInt16x4Type },
    std::pair{ "wzxz"_h, &UInt16x4Type },
    std::pair{ "wzyw"_h, &UInt16x4Type },
    std::pair{ "wzyz"_h, &UInt16x4Type },
    std::pair{ "wzyy"_h, &UInt16x4Type },
    std::pair{ "wzyx"_h, &UInt16x4Type },
    std::pair{ "wzzz"_h, &UInt16x4Type },
    std::pair{ "wzzx"_h, &UInt16x4Type },
    std::pair{ "wzzy"_h, &UInt16x4Type },
    std::pair{ "wzzw"_h, &UInt16x4Type },
    std::pair{ "brr"_h, &UInt16x3Type },
    std::pair{ "brg"_h, &UInt16x3Type },
    std::pair{ "bra"_h, &UInt16x3Type },
    std::pair{ "brb"_h, &UInt16x3Type },
    std::pair{ "operator>=(u16x4)"_h, &UInt16x4_operator_gte_UInt16x4 },
    std::pair{ "ywyw"_h, &UInt16x4Type },
    std::pair{ "ywyx"_h, &UInt16x4Type },
    std::pair{ "ywyy"_h, &UInt16x4Type },
    std::pair{ "ywyz"_h, &UInt16x4Type },
    std::pair{ "ywxw"_h, &UInt16x4Type },
    std::pair{ "ywxz"_h, &UInt16x4Type },
    std::pair{ "ywxy"_h, &UInt16x4Type },
    std::pair{ "ywxx"_h, &UInt16x4Type },
    std::pair{ "ywzy"_h, &UInt16x4Type },
    std::pair{ "ywzx"_h, &UInt16x4Type },
    std::pair{ "ywzz"_h, &UInt16x4Type },
    std::pair{ "ywzw"_h, &UInt16x4Type },
    std::pair{ "ywwz"_h, &UInt16x4Type },
    std::pair{ "ywwx"_h, &UInt16x4Type },
    std::pair{ "ywwy"_h, &UInt16x4Type },
    std::pair{ "ywww"_h, &UInt16x4Type },
    std::pair{ "operator==(u16x4)"_h, &UInt16x4_operator_eq_UInt16x4 },
    std::pair{ "gg"_h, &UInt16x2Type },
    std::pair{ "gb"_h, &UInt16x2Type },
    std::pair{ "ga"_h, &UInt16x2Type },
    std::pair{ "gr"_h, &UInt16x2Type },
    std::pair{ "ag"_h, &UInt16x2Type },
    std::pair{ "aa"_h, &UInt16x2Type },
    std::pair{ "ab"_h, &UInt16x2Type },
    std::pair{ "ar"_h, &UInt16x2Type },
    std::pair{ "bg"_h, &UInt16x2Type },
    std::pair{ "ba"_h, &UInt16x2Type },
    std::pair{ "bb"_h, &UInt16x2Type },
    std::pair{ "br"_h, &UInt16x2Type },
    std::pair{ "ww"_h, &UInt16x2Type },
    std::pair{ "wz"_h, &UInt16x2Type },
    std::pair{ "wx"_h, &UInt16x2Type },
    std::pair{ "wy"_h, &UInt16x2Type },
    std::pair{ "rr"_h, &UInt16x2Type },
    std::pair{ "rg"_h, &UInt16x2Type },
    std::pair{ "ra"_h, &UInt16x2Type },
    std::pair{ "rb"_h, &UInt16x2Type },
    std::pair{ "yw"_h, &UInt16x2Type },
    std::pair{ "yx"_h, &UInt16x2Type },
    std::pair{ "yy"_h, &UInt16x2Type },
    std::pair{ "yz"_h, &UInt16x2Type },
    std::pair{ "xw"_h, &UInt16x2Type },
    std::pair{ "xz"_h, &UInt16x2Type },
    std::pair{ "xy"_h, &UInt16x2Type },
    std::pair{ "xx"_h, &UInt16x2Type },
    std::pair{ "zy"_h, &UInt16x2Type },
    std::pair{ "zx"_h, &UInt16x2Type },
    std::pair{ "zz"_h, &UInt16x2Type },
    std::pair{ "zw"_h, &UInt16x2Type },
    std::pair{ "operator[](i16)"_h, &UInt16x4_operator_index_Int16 },
    std::pair{ "operator/(u16x4)"_h, &UInt16x4_operator_div_UInt16x4 },
    std::pair{ "wxzw"_h, &UInt16x4Type },
    std::pair{ "wxzx"_h, &UInt16x4Type },
    std::pair{ "wxzy"_h, &UInt16x4Type },
    std::pair{ "wxzz"_h, &UInt16x4Type },
    std::pair{ "wxxw"_h, &UInt16x4Type },
    std::pair{ "wxxz"_h, &UInt16x4Type },
    std::pair{ "wxxx"_h, &UInt16x4Type },
    std::pair{ "wxxy"_h, &UInt16x4Type },
    std::pair{ "wxyy"_h, &UInt16x4Type },
    std::pair{ "wxyx"_h, &UInt16x4Type },
    std::pair{ "wxyz"_h, &UInt16x4Type },
    std::pair{ "wxyw"_h, &UInt16x4Type },
    std::pair{ "wxww"_h, &UInt16x4Type },
    std::pair{ "wxwz"_h, &UInt16x4Type },
    std::pair{ "wxwy"_h, &UInt16x4Type },
    std::pair{ "wxwx"_h, &UInt16x4Type },
    std::pair{ "operator*(u16x4)"_h, &UInt16x4_operator_mul_UInt16x4 },
    std::pair{ "wyyx"_h, &UInt16x4Type },
    std::pair{ "wyyy"_h, &UInt16x4Type },
    std::pair{ "wyyz"_h, &UInt16x4Type },
    std::pair{ "wyyw"_h, &UInt16x4Type },
    std::pair{ "wyxz"_h, &UInt16x4Type },
    std::pair{ "wyxy"_h, &UInt16x4Type },
    std::pair{ "wyxx"_h, &UInt16x4Type },
    std::pair{ "wyxw"_h, &UInt16x4Type },
    std::pair{ "wyzw"_h, &UInt16x4Type },
    std::pair{ "wyzy"_h, &UInt16x4Type },
    std::pair{ "wyzx"_h, &UInt16x4Type },
    std::pair{ "wyzz"_h, &UInt16x4Type },
    std::pair{ "wywz"_h, &UInt16x4Type },
    std::pair{ "wywx"_h, &UInt16x4Type },
    std::pair{ "wywy"_h, &UInt16x4Type },
    std::pair{ "wyww"_h, &UInt16x4Type },
    std::pair{ "operator-(u16x4)"_h, &UInt16x4_operator_sub_UInt16x4 },
    std::pair{ "operator>>=(u16x4)"_h, &UInt16x4_operator_rhsasg_UInt16x4 },
    std::pair{ "operator*(u16)"_h, &UInt16x4_operator_scale_UInt16 },
    std::pair{ "operator|(u16x4)"_h, &UInt16x4_operator_or_UInt16x4 },
    std::pair{ "operator-=(u16x4)"_h, &UInt16x4_operator_subasg_UInt16x4 },
    std::pair{ "operator+(u16x4)"_h, &UInt16x4_operator_add_UInt16x4 },
    std::pair{ "brrg"_h, &UInt16x4Type },
    std::pair{ "brra"_h, &UInt16x4Type },
    std::pair{ "brrb"_h, &UInt16x4Type },
    std::pair{ "brrr"_h, &UInt16x4Type },
    std::pair{ "brgr"_h, &UInt16x4Type },
    std::pair{ "brgg"_h, &UInt16x4Type },
    std::pair{ "brgb"_h, &UInt16x4Type },
    std::pair{ "brga"_h, &UInt16x4Type },
    std::pair{ "brar"_h, &UInt16x4Type },
    std::pair{ "brag"_h, &UInt16x4Type },
    std::pair{ "braa"_h, &UInt16x4Type },
    std::pair{ "brab"_h, &UInt16x4Type },
    std::pair{ "brbr"_h, &UInt16x4Type },
    std::pair{ "brbg"_h, &UInt16x4Type },
    std::pair{ "brba"_h, &UInt16x4Type },
    std::pair{ "brbb"_h, &UInt16x4Type },
    std::pair{ "operator<=(u16x4)"_h, &UInt16x4_operator_lte_UInt16x4 },
    std::pair{ "operator^"_h, &UInt16x4_operator_xor_UInt16x4 },
    std::pair{ "operator|"_h, &UInt16x4_operator_or_UInt16x4 },
    std::pair{ "operator<"_h, &UInt16x4_operator_lt_UInt16x4 },
    std::pair{ "operator>"_h, &UInt16x4_operator_gt_UInt16x4 },
    std::pair{ "operator-"_h, &UInt16x4_operator_sub_UInt16x4 },
    std::pair{ "operator/"_h, &UInt16x4_operator_div_UInt16x4 },
    std::pair{ "operator+"_h, &UInt16x4_operator_add_UInt16x4 },
    std::pair{ "operator*"_h, &UInt16x4_operator_mul_UInt16x4 },
    std::pair{ "operator*"_h, &UInt16x4_operator_scale_Float16 },
    std::pair{ "operator*"_h, &UInt16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_h, &UInt16x4_operator_scale_Int16 },
    std::pair{ "operator%"_h, &UInt16x4_operator_mod_UInt16x4 },
    std::pair{ "operator&"_h, &UInt16x4_operator_and_UInt16x4 },
    std::pair{ "xzww"_h, &UInt16x4Type },
    std::pair{ "xzwx"_h, &UInt16x4Type },
    std::pair{ "xzwy"_h, &UInt16x4Type },
    std::pair{ "xzwz"_h, &UInt16x4Type },
    std::pair{ "xzzw"_h, &UInt16x4Type },
    std::pair{ "xzzz"_h, &UInt16x4Type },
    std::pair{ "xzzy"_h, &UInt16x4Type },
    std::pair{ "xzzx"_h, &UInt16x4Type },
    std::pair{ "xzyz"_h, &UInt16x4Type },
    std::pair{ "xzyx"_h, &UInt16x4Type },
    std::pair{ "xzyy"_h, &UInt16x4Type },
    std::pair{ "xzyw"_h, &UInt16x4Type },
    std::pair{ "xzxy"_h, &UInt16x4Type },
    std::pair{ "xzxx"_h, &UInt16x4Type },
    std::pair{ "xzxz"_h, &UInt16x4Type },
    std::pair{ "xzxw"_h, &UInt16x4Type },
    std::pair{ "operator&(u16x4)"_h, &UInt16x4_operator_and_UInt16x4 },
    std::pair{ "yxwy"_h, &UInt16x4Type },
    std::pair{ "yxwx"_h, &UInt16x4Type },
    std::pair{ "yxwz"_h, &UInt16x4Type },
    std::pair{ "yxww"_h, &UInt16x4Type },
    std::pair{ "yxxw"_h, &UInt16x4Type },
    std::pair{ "yxxx"_h, &UInt16x4Type },
    std::pair{ "yxxy"_h, &UInt16x4Type },
    std::pair{ "yxxz"_h, &UInt16x4Type },
    std::pair{ "yxyw"_h, &UInt16x4Type },
    std::pair{ "yxyz"_h, &UInt16x4Type },
    std::pair{ "yxyy"_h, &UInt16x4Type },
    std::pair{ "yxyx"_h, &UInt16x4Type },
    std::pair{ "yxzz"_h, &UInt16x4Type },
    std::pair{ "yxzx"_h, &UInt16x4Type },
    std::pair{ "yxzy"_h, &UInt16x4Type },
    std::pair{ "yxzw"_h, &UInt16x4Type },
    std::pair{ "operator&=(u16x4)"_h, &UInt16x4_operator_andasg_UInt16x4 },
    std::pair{ "xyzw"_h, &UInt16x4Type },
    std::pair{ "xyzx"_h, &UInt16x4Type },
    std::pair{ "xyzy"_h, &UInt16x4Type },
    std::pair{ "xyzz"_h, &UInt16x4Type },
    std::pair{ "xyxw"_h, &UInt16x4Type },
    std::pair{ "xyxz"_h, &UInt16x4Type },
    std::pair{ "xyxx"_h, &UInt16x4Type },
    std::pair{ "xyxy"_h, &UInt16x4Type },
    std::pair{ "xyyy"_h, &UInt16x4Type },
    std::pair{ "xyyx"_h, &UInt16x4Type },
    std::pair{ "xyyz"_h, &UInt16x4Type },
    std::pair{ "xyyw"_h, &UInt16x4Type },
    std::pair{ "xyww"_h, &UInt16x4Type },
    std::pair{ "xywz"_h, &UInt16x4Type },
    std::pair{ "xywy"_h, &UInt16x4Type },
    std::pair{ "xywx"_h, &UInt16x4Type },
    std::pair{ "ggrr"_h, &UInt16x4Type },
    std::pair{ "ggrb"_h, &UInt16x4Type },
    std::pair{ "ggra"_h, &UInt16x4Type },
    std::pair{ "ggrg"_h, &UInt16x4Type },
    std::pair{ "ggbb"_h, &UInt16x4Type },
    std::pair{ "ggba"_h, &UInt16x4Type },
    std::pair{ "ggbg"_h, &UInt16x4Type },
    std::pair{ "ggbr"_h, &UInt16x4Type },
    std::pair{ "ggar"_h, &UInt16x4Type },
    std::pair{ "ggag"_h, &UInt16x4Type },
    std::pair{ "ggab"_h, &UInt16x4Type },
    std::pair{ "ggaa"_h, &UInt16x4Type },
    std::pair{ "gggr"_h, &UInt16x4Type },
    std::pair{ "gggg"_h, &UInt16x4Type },
    std::pair{ "ggga"_h, &UInt16x4Type },
    std::pair{ "gggb"_h, &UInt16x4Type },
    std::pair{ "operator<<(u16x4)"_h, &UInt16x4_operator_lsh_UInt16x4 },
    std::pair{ "yyww"_h, &UInt16x4Type },
    std::pair{ "yywx"_h, &UInt16x4Type },
    std::pair{ "yywy"_h, &UInt16x4Type },
    std::pair{ "yywz"_h, &UInt16x4Type },
    std::pair{ "yyzw"_h, &UInt16x4Type },
    std::pair{ "yyzz"_h, &UInt16x4Type },
    std::pair{ "yyzy"_h, &UInt16x4Type },
    std::pair{ "yyzx"_h, &UInt16x4Type },
    std::pair{ "yyyz"_h, &UInt16x4Type },
    std::pair{ "yyyx"_h, &UInt16x4Type },
    std::pair{ "yyyy"_h, &UInt16x4Type },
    std::pair{ "yyyw"_h, &UInt16x4Type },
    std::pair{ "yyxy"_h, &UInt16x4Type },
    std::pair{ "yyxx"_h, &UInt16x4Type },
    std::pair{ "yyxz"_h, &UInt16x4Type },
    std::pair{ "yyxw"_h, &UInt16x4Type },
    std::pair{ "xxyx"_h, &UInt16x4Type },
    std::pair{ "xxyy"_h, &UInt16x4Type },
    std::pair{ "xxyz"_h, &UInt16x4Type },
    std::pair{ "xxyw"_h, &UInt16x4Type },
    std::pair{ "xxxz"_h, &UInt16x4Type },
    std::pair{ "xxxy"_h, &UInt16x4Type },
    std::pair{ "xxxx"_h, &UInt16x4Type },
    std::pair{ "xxxw"_h, &UInt16x4Type },
    std::pair{ "xxzw"_h, &UInt16x4Type },
    std::pair{ "xxzy"_h, &UInt16x4Type },
    std::pair{ "xxzx"_h, &UInt16x4Type },
    std::pair{ "xxzz"_h, &UInt16x4Type },
    std::pair{ "xxwz"_h, &UInt16x4Type },
    std::pair{ "xxwx"_h, &UInt16x4Type },
    std::pair{ "xxwy"_h, &UInt16x4Type },
    std::pair{ "xxww"_h, &UInt16x4Type },
    std::pair{ "rgrg"_h, &UInt16x4Type },
    std::pair{ "rgra"_h, &UInt16x4Type },
    std::pair{ "rgrb"_h, &UInt16x4Type },
    std::pair{ "rgrr"_h, &UInt16x4Type },
    std::pair{ "rggb"_h, &UInt16x4Type },
    std::pair{ "rgga"_h, &UInt16x4Type },
    std::pair{ "rggg"_h, &UInt16x4Type },
    std::pair{ "rggr"_h, &UInt16x4Type },
    std::pair{ "rgbr"_h, &UInt16x4Type },
    std::pair{ "rgbg"_h, &UInt16x4Type },
    std::pair{ "rgba"_h, &UInt16x4Type },
    std::pair{ "rgbb"_h, &UInt16x4Type },
    std::pair{ "rgar"_h, &UInt16x4Type },
    std::pair{ "rgag"_h, &UInt16x4Type },
    std::pair{ "rgaa"_h, &UInt16x4Type },
    std::pair{ "rgab"_h, &UInt16x4Type },
    std::pair{ "www"_h, &UInt16x3Type },
    std::pair{ "wwz"_h, &UInt16x3Type },
    std::pair{ "wwy"_h, &UInt16x3Type },
    std::pair{ "wwx"_h, &UInt16x3Type },
    std::pair{ "wzw"_h, &UInt16x3Type },
    std::pair{ "wzx"_h, &UInt16x3Type },
    std::pair{ "wzy"_h, &UInt16x3Type },
    std::pair{ "wzz"_h, &UInt16x3Type },
    std::pair{ "wxz"_h, &UInt16x3Type },
    std::pair{ "wxx"_h, &UInt16x3Type },
    std::pair{ "wxy"_h, &UInt16x3Type },
    std::pair{ "wxw"_h, &UInt16x3Type },
    std::pair{ "wyy"_h, &UInt16x3Type },
    std::pair{ "wyx"_h, &UInt16x3Type },
    std::pair{ "wyz"_h, &UInt16x3Type },
    std::pair{ "wyw"_h, &UInt16x3Type },
    std::pair{ "operator<<=(u16x4)"_h, &UInt16x4_operator_lshasg_UInt16x4 },
    std::pair{ "yzzw"_h, &UInt16x4Type },
    std::pair{ "yzzx"_h, &UInt16x4Type },
    std::pair{ "yzzy"_h, &UInt16x4Type },
    std::pair{ "yzzz"_h, &UInt16x4Type },
    std::pair{ "yzxw"_h, &UInt16x4Type },
    std::pair{ "yzxz"_h, &UInt16x4Type },
    std::pair{ "yzxx"_h, &UInt16x4Type },
    std::pair{ "yzxy"_h, &UInt16x4Type },
    std::pair{ "yzyy"_h, &UInt16x4Type },
    std::pair{ "yzyx"_h, &UInt16x4Type },
    std::pair{ "yzyz"_h, &UInt16x4Type },
    std::pair{ "yzyw"_h, &UInt16x4Type },
    std::pair{ "yzww"_h, &UInt16x4Type },
    std::pair{ "yzwz"_h, &UInt16x4Type },
    std::pair{ "yzwy"_h, &UInt16x4Type },
    std::pair{ "yzwx"_h, &UInt16x4Type },
    std::pair{ "rarb"_h, &UInt16x4Type },
    std::pair{ "rara"_h, &UInt16x4Type },
    std::pair{ "rarg"_h, &UInt16x4Type },
    std::pair{ "rarr"_h, &UInt16x4Type },
    std::pair{ "raga"_h, &UInt16x4Type },
    std::pair{ "ragb"_h, &UInt16x4Type },
    std::pair{ "ragg"_h, &UInt16x4Type },
    std::pair{ "ragr"_h, &UInt16x4Type },
    std::pair{ "raag"_h, &UInt16x4Type },
    std::pair{ "raab"_h, &UInt16x4Type },
    std::pair{ "raaa"_h, &UInt16x4Type },
    std::pair{ "raar"_h, &UInt16x4Type },
    std::pair{ "rabr"_h, &UInt16x4Type },
    std::pair{ "rabb"_h, &UInt16x4Type },
    std::pair{ "raba"_h, &UInt16x4Type },
    std::pair{ "rabg"_h, &UInt16x4Type },
    std::pair{ "operator|=(u16x4)"_h, &UInt16x4_operator_orasg_UInt16x4 },
    std::pair{ "gbgr"_h, &UInt16x4Type },
    std::pair{ "gbga"_h, &UInt16x4Type },
    std::pair{ "gbgb"_h, &UInt16x4Type },
    std::pair{ "gbgg"_h, &UInt16x4Type },
    std::pair{ "gbar"_h, &UInt16x4Type },
    std::pair{ "gbag"_h, &UInt16x4Type },
    std::pair{ "gbab"_h, &UInt16x4Type },
    std::pair{ "gbaa"_h, &UInt16x4Type },
    std::pair{ "gbbb"_h, &UInt16x4Type },
    std::pair{ "gbba"_h, &UInt16x4Type },
    std::pair{ "gbbg"_h, &UInt16x4Type },
    std::pair{ "gbbr"_h, &UInt16x4Type },
    std::pair{ "gbrr"_h, &UInt16x4Type },
    std::pair{ "gbrb"_h, &UInt16x4Type },
    std::pair{ "gbra"_h, &UInt16x4Type },
    std::pair{ "gbrg"_h, &UInt16x4Type },
    std::pair{ "operator%(u16x4)"_h, &UInt16x4_operator_mod_UInt16x4 },
    std::pair{ "operator^(u16x4)"_h, &UInt16x4_operator_xor_UInt16x4 },
    std::pair{ "rbrg"_h, &UInt16x4Type },
    std::pair{ "rbra"_h, &UInt16x4Type },
    std::pair{ "rbrb"_h, &UInt16x4Type },
    std::pair{ "rbrr"_h, &UInt16x4Type },
    std::pair{ "rbgr"_h, &UInt16x4Type },
    std::pair{ "rbgg"_h, &UInt16x4Type },
    std::pair{ "rbgb"_h, &UInt16x4Type },
    std::pair{ "rbga"_h, &UInt16x4Type },
    std::pair{ "rbar"_h, &UInt16x4Type },
    std::pair{ "rbag"_h, &UInt16x4Type },
    std::pair{ "rbaa"_h, &UInt16x4Type },
    std::pair{ "rbab"_h, &UInt16x4Type },
    std::pair{ "rbbr"_h, &UInt16x4Type },
    std::pair{ "rbbg"_h, &UInt16x4Type },
    std::pair{ "rbba"_h, &UInt16x4Type },
    std::pair{ "rbbb"_h, &UInt16x4Type },
    std::pair{ "zyxx"_h, &UInt16x4Type },
    std::pair{ "zyxy"_h, &UInt16x4Type },
    std::pair{ "zyxz"_h, &UInt16x4Type },
    std::pair{ "zyxw"_h, &UInt16x4Type },
    std::pair{ "zyyz"_h, &UInt16x4Type },
    std::pair{ "zyyy"_h, &UInt16x4Type },
    std::pair{ "zyyx"_h, &UInt16x4Type },
    std::pair{ "zyyw"_h, &UInt16x4Type },
    std::pair{ "zyzw"_h, &UInt16x4Type },
    std::pair{ "zyzz"_h, &UInt16x4Type },
    std::pair{ "zyzx"_h, &UInt16x4Type },
    std::pair{ "zyzy"_h, &UInt16x4Type },
    std::pair{ "zyww"_h, &UInt16x4Type },
    std::pair{ "zywy"_h, &UInt16x4Type },
    std::pair{ "zywx"_h, &UInt16x4Type },
    std::pair{ "zywz"_h, &UInt16x4Type },
    std::pair{ "bggr"_h, &UInt16x4Type },
    std::pair{ "bggb"_h, &UInt16x4Type },
    std::pair{ "bgga"_h, &UInt16x4Type },
    std::pair{ "bggg"_h, &UInt16x4Type },
    std::pair{ "bgbg"_h, &UInt16x4Type },
    std::pair{ "bgba"_h, &UInt16x4Type },
    std::pair{ "bgbb"_h, &UInt16x4Type },
    std::pair{ "bgbr"_h, &UInt16x4Type },
    std::pair{ "bgag"_h, &UInt16x4Type },
    std::pair{ "bgaa"_h, &UInt16x4Type },
    std::pair{ "bgab"_h, &UInt16x4Type },
    std::pair{ "bgar"_h, &UInt16x4Type },
    std::pair{ "bgrr"_h, &UInt16x4Type },
    std::pair{ "bgrg"_h, &UInt16x4Type },
    std::pair{ "bgra"_h, &UInt16x4Type },
    std::pair{ "bgrb"_h, &UInt16x4Type },
    std::pair{ "arrr"_h, &UInt16x4Type },
    std::pair{ "arra"_h, &UInt16x4Type },
    std::pair{ "arrb"_h, &UInt16x4Type },
    std::pair{ "arrg"_h, &UInt16x4Type },
    std::pair{ "arba"_h, &UInt16x4Type },
    std::pair{ "arbb"_h, &UInt16x4Type },
    std::pair{ "arbg"_h, &UInt16x4Type },
    std::pair{ "arbr"_h, &UInt16x4Type },
    std::pair{ "araa"_h, &UInt16x4Type },
    std::pair{ "arab"_h, &UInt16x4Type },
    std::pair{ "arag"_h, &UInt16x4Type },
    std::pair{ "arar"_h, &UInt16x4Type },
    std::pair{ "argg"_h, &UInt16x4Type },
    std::pair{ "argb"_h, &UInt16x4Type },
    std::pair{ "arga"_h, &UInt16x4Type },
    std::pair{ "argr"_h, &UInt16x4Type },
    std::pair{ "rrg"_h, &UInt16x3Type },
    std::pair{ "rra"_h, &UInt16x3Type },
    std::pair{ "rrb"_h, &UInt16x3Type },
    std::pair{ "rrr"_h, &UInt16x3Type },
    std::pair{ "rgr"_h, &UInt16x3Type },
    std::pair{ "rgg"_h, &UInt16x3Type },
    std::pair{ "rgb"_h, &UInt16x3Type },
    std::pair{ "rga"_h, &UInt16x3Type },
    std::pair{ "rar"_h, &UInt16x3Type },
    std::pair{ "rag"_h, &UInt16x3Type },
    std::pair{ "raa"_h, &UInt16x3Type },
    std::pair{ "rab"_h, &UInt16x3Type },
    std::pair{ "rbr"_h, &UInt16x3Type },
    std::pair{ "rbg"_h, &UInt16x3Type },
    std::pair{ "rba"_h, &UInt16x3Type },
    std::pair{ "rbb"_h, &UInt16x3Type },
    std::pair{ "gagg"_h, &UInt16x4Type },
    std::pair{ "gagb"_h, &UInt16x4Type },
    std::pair{ "gaga"_h, &UInt16x4Type },
    std::pair{ "gagr"_h, &UInt16x4Type },
    std::pair{ "gaag"_h, &UInt16x4Type },
    std::pair{ "gaaa"_h, &UInt16x4Type },
    std::pair{ "gaab"_h, &UInt16x4Type },
    std::pair{ "gaar"_h, &UInt16x4Type },
    std::pair{ "gabg"_h, &UInt16x4Type },
    std::pair{ "gaba"_h, &UInt16x4Type },
    std::pair{ "gabb"_h, &UInt16x4Type },
    std::pair{ "gabr"_h, &UInt16x4Type },
    std::pair{ "garr"_h, &UInt16x4Type },
    std::pair{ "garg"_h, &UInt16x4Type },
    std::pair{ "gara"_h, &UInt16x4Type },
    std::pair{ "garb"_h, &UInt16x4Type },
    std::pair{ "operator[](u32)"_h, &UInt16x4_operator_index_UInt32 },
    std::pair{ "operator<<="_h, &UInt16x4_operator_lshasg_UInt16x4 },
    std::pair{ "zxzz"_h, &UInt16x4Type },
    std::pair{ "zxzy"_h, &UInt16x4Type },
    std::pair{ "zxzx"_h, &UInt16x4Type },
    std::pair{ "zxzw"_h, &UInt16x4Type },
    std::pair{ "zxyw"_h, &UInt16x4Type },
    std::pair{ "zxyz"_h, &UInt16x4Type },
    std::pair{ "zxyx"_h, &UInt16x4Type },
    std::pair{ "zxyy"_h, &UInt16x4Type },
    std::pair{ "zxxw"_h, &UInt16x4Type },
    std::pair{ "zxxy"_h, &UInt16x4Type },
    std::pair{ "zxxx"_h, &UInt16x4Type },
    std::pair{ "zxxz"_h, &UInt16x4Type },
    std::pair{ "zxwx"_h, &UInt16x4Type },
    std::pair{ "zxwy"_h, &UInt16x4Type },
    std::pair{ "zxwz"_h, &UInt16x4Type },
    std::pair{ "zxww"_h, &UInt16x4Type },
    std::pair{ "operator>>(u16x4)"_h, &UInt16x4_operator_rsh_UInt16x4 },
    std::pair{ "bagr"_h, &UInt16x4Type },
    std::pair{ "baga"_h, &UInt16x4Type },
    std::pair{ "bagb"_h, &UInt16x4Type },
    std::pair{ "bagg"_h, &UInt16x4Type },
    std::pair{ "baar"_h, &UInt16x4Type },
    std::pair{ "baag"_h, &UInt16x4Type },
    std::pair{ "baab"_h, &UInt16x4Type },
    std::pair{ "baaa"_h, &UInt16x4Type },
    std::pair{ "babb"_h, &UInt16x4Type },
    std::pair{ "baba"_h, &UInt16x4Type },
    std::pair{ "babg"_h, &UInt16x4Type },
    std::pair{ "babr"_h, &UInt16x4Type },
    std::pair{ "barr"_h, &UInt16x4Type },
    std::pair{ "barb"_h, &UInt16x4Type },
    std::pair{ "bara"_h, &UInt16x4Type },
    std::pair{ "barg"_h, &UInt16x4Type },
    std::pair{ "operator[](u16)"_h, &UInt16x4_operator_index_UInt16 },
    std::pair{ "operator>>="_h, &UInt16x4_operator_rhsasg_UInt16x4 },
    std::pair{ "wwwx"_h, &UInt16x4Type },
    std::pair{ "wwwy"_h, &UInt16x4Type },
    std::pair{ "wwwz"_h, &UInt16x4Type },
    std::pair{ "wwww"_h, &UInt16x4Type },
    std::pair{ "wwzz"_h, &UInt16x4Type },
    std::pair{ "wwzy"_h, &UInt16x4Type },
    std::pair{ "wwzx"_h, &UInt16x4Type },
    std::pair{ "wwzw"_h, &UInt16x4Type },
    std::pair{ "wwyz"_h, &UInt16x4Type },
    std::pair{ "wwyx"_h, &UInt16x4Type },
    std::pair{ "wwyy"_h, &UInt16x4Type },
    std::pair{ "wwyw"_h, &UInt16x4Type },
    std::pair{ "wwxw"_h, &UInt16x4Type },
    std::pair{ "wwxy"_h, &UInt16x4Type },
    std::pair{ "wwxx"_h, &UInt16x4Type },
    std::pair{ "wwxz"_h, &UInt16x4Type },
    std::pair{ "zzww"_h, &UInt16x4Type },
    std::pair{ "zzwz"_h, &UInt16x4Type },
    std::pair{ "zzwx"_h, &UInt16x4Type },
    std::pair{ "zzwy"_h, &UInt16x4Type },
    std::pair{ "zzyw"_h, &UInt16x4Type },
    std::pair{ "zzyx"_h, &UInt16x4Type },
    std::pair{ "zzyy"_h, &UInt16x4Type },
    std::pair{ "zzyz"_h, &UInt16x4Type },
    std::pair{ "zzxw"_h, &UInt16x4Type },
    std::pair{ "zzxz"_h, &UInt16x4Type },
    std::pair{ "zzxy"_h, &UInt16x4Type },
    std::pair{ "zzxx"_h, &UInt16x4Type },
    std::pair{ "zzzy"_h, &UInt16x4Type },
    std::pair{ "zzzx"_h, &UInt16x4Type },
    std::pair{ "zzzz"_h, &UInt16x4Type },
    std::pair{ "zzzw"_h, &UInt16x4Type },
    std::pair{ "operator*(f16)"_h, &UInt16x4_operator_scale_Float16 },
    std::pair{ "g"_h, &UInt16Type },
    std::pair{ "a"_h, &UInt16Type },
    std::pair{ "b"_h, &UInt16Type },
    std::pair{ "w"_h, &UInt16Type },
    std::pair{ "r"_h, &UInt16Type },
    std::pair{ "y"_h, &UInt16Type },
    std::pair{ "x"_h, &UInt16Type },
    std::pair{ "z"_h, &UInt16Type },
    std::pair{ "operator!=(u16x4)"_h, &UInt16x4_operator_neq_UInt16x4 },
    std::pair{ "bbgg"_h, &UInt16x4Type },
    std::pair{ "bbgb"_h, &UInt16x4Type },
    std::pair{ "bbga"_h, &UInt16x4Type },
    std::pair{ "bbgr"_h, &UInt16x4Type },
    std::pair{ "bbag"_h, &UInt16x4Type },
    std::pair{ "bbaa"_h, &UInt16x4Type },
    std::pair{ "bbab"_h, &UInt16x4Type },
    std::pair{ "bbar"_h, &UInt16x4Type },
    std::pair{ "bbbg"_h, &UInt16x4Type },
    std::pair{ "bbba"_h, &UInt16x4Type },
    std::pair{ "bbbb"_h, &UInt16x4Type },
    std::pair{ "bbbr"_h, &UInt16x4Type },
    std::pair{ "bbrr"_h, &UInt16x4Type },
    std::pair{ "bbrg"_h, &UInt16x4Type },
    std::pair{ "bbra"_h, &UInt16x4Type },
    std::pair{ "bbrb"_h, &UInt16x4Type },
    std::pair{ "ywy"_h, &UInt16x3Type },
    std::pair{ "ywx"_h, &UInt16x3Type },
    std::pair{ "ywz"_h, &UInt16x3Type },
    std::pair{ "yww"_h, &UInt16x3Type },
    std::pair{ "yxw"_h, &UInt16x3Type },
    std::pair{ "yxx"_h, &UInt16x3Type },
    std::pair{ "yxy"_h, &UInt16x3Type },
    std::pair{ "yxz"_h, &UInt16x3Type },
    std::pair{ "yyw"_h, &UInt16x3Type },
    std::pair{ "yyz"_h, &UInt16x3Type },
    std::pair{ "yyy"_h, &UInt16x3Type },
    std::pair{ "yyx"_h, &UInt16x3Type },
    std::pair{ "yzz"_h, &UInt16x3Type },
    std::pair{ "yzx"_h, &UInt16x3Type },
    std::pair{ "yzy"_h, &UInt16x3Type },
    std::pair{ "yzw"_h, &UInt16x3Type },
    std::pair{ "zwzx"_h, &UInt16x4Type },
    std::pair{ "zwzy"_h, &UInt16x4Type },
    std::pair{ "zwzz"_h, &UInt16x4Type },
    std::pair{ "zwzw"_h, &UInt16x4Type },
    std::pair{ "zwxw"_h, &UInt16x4Type },
    std::pair{ "zwxz"_h, &UInt16x4Type },
    std::pair{ "zwxx"_h, &UInt16x4Type },
    std::pair{ "zwxy"_h, &UInt16x4Type },
    std::pair{ "zwyw"_h, &UInt16x4Type },
    std::pair{ "zwyy"_h, &UInt16x4Type },
    std::pair{ "zwyx"_h, &UInt16x4Type },
    std::pair{ "zwyz"_h, &UInt16x4Type },
    std::pair{ "zwwz"_h, &UInt16x4Type },
    std::pair{ "zwwy"_h, &UInt16x4Type },
    std::pair{ "zwwx"_h, &UInt16x4Type },
    std::pair{ "zwww"_h, &UInt16x4Type },
    std::pair{ "xww"_h, &UInt16x3Type },
    std::pair{ "xwx"_h, &UInt16x3Type },
    std::pair{ "xwy"_h, &UInt16x3Type },
    std::pair{ "xwz"_h, &UInt16x3Type },
    std::pair{ "xzw"_h, &UInt16x3Type },
    std::pair{ "xzz"_h, &UInt16x3Type },
    std::pair{ "xzy"_h, &UInt16x3Type },
    std::pair{ "xzx"_h, &UInt16x3Type },
    std::pair{ "xyz"_h, &UInt16x3Type },
    std::pair{ "xyx"_h, &UInt16x3Type },
    std::pair{ "xyy"_h, &UInt16x3Type },
    std::pair{ "xyw"_h, &UInt16x3Type },
    std::pair{ "xxy"_h, &UInt16x3Type },
    std::pair{ "xxx"_h, &UInt16x3Type },
    std::pair{ "xxz"_h, &UInt16x3Type },
    std::pair{ "xxw"_h, &UInt16x3Type },
    std::pair{ "operator*(i16)"_h, &UInt16x4_operator_scale_Int16 },
    std::pair{ "zyx"_h, &UInt16x3Type },
    std::pair{ "zyy"_h, &UInt16x3Type },
    std::pair{ "zyz"_h, &UInt16x3Type },
    std::pair{ "zyw"_h, &UInt16x3Type },
    std::pair{ "zxz"_h, &UInt16x3Type },
    std::pair{ "zxy"_h, &UInt16x3Type },
    std::pair{ "zxx"_h, &UInt16x3Type },
    std::pair{ "zxw"_h, &UInt16x3Type },
    std::pair{ "zzw"_h, &UInt16x3Type },
    std::pair{ "zzy"_h, &UInt16x3Type },
    std::pair{ "zzx"_h, &UInt16x3Type },
    std::pair{ "zzz"_h, &UInt16x3Type },
    std::pair{ "zwz"_h, &UInt16x3Type },
    std::pair{ "zwx"_h, &UInt16x3Type },
    std::pair{ "zwy"_h, &UInt16x3Type },
    std::pair{ "zww"_h, &UInt16x3Type },
    std::pair{ "ggr"_h, &UInt16x3Type },
    std::pair{ "ggb"_h, &UInt16x3Type },
    std::pair{ "gga"_h, &UInt16x3Type },
    std::pair{ "ggg"_h, &UInt16x3Type },
    std::pair{ "gbg"_h, &UInt16x3Type },
    std::pair{ "gba"_h, &UInt16x3Type },
    std::pair{ "gbb"_h, &UInt16x3Type },
    std::pair{ "gbr"_h, &UInt16x3Type },
    std::pair{ "gag"_h, &UInt16x3Type },
    std::pair{ "gaa"_h, &UInt16x3Type },
    std::pair{ "gab"_h, &UInt16x3Type },
    std::pair{ "gar"_h, &UInt16x3Type },
    std::pair{ "grr"_h, &UInt16x3Type },
    std::pair{ "grg"_h, &UInt16x3Type },
    std::pair{ "gra"_h, &UInt16x3Type },
    std::pair{ "grb"_h, &UInt16x3Type },
    std::pair{ "operator/=(u16x4)"_h, &UInt16x4_operator_divasg_UInt16x4 },
    std::pair{ "xwww"_h, &UInt16x4Type },
    std::pair{ "xwwy"_h, &UInt16x4Type },
    std::pair{ "xwwx"_h, &UInt16x4Type },
    std::pair{ "xwwz"_h, &UInt16x4Type },
    std::pair{ "xwxx"_h, &UInt16x4Type },
    std::pair{ "xwxy"_h, &UInt16x4Type },
    std::pair{ "xwxz"_h, &UInt16x4Type },
    std::pair{ "xwxw"_h, &UInt16x4Type },
    std::pair{ "xwyz"_h, &UInt16x4Type },
    std::pair{ "xwyy"_h, &UInt16x4Type },
    std::pair{ "xwyx"_h, &UInt16x4Type },
    std::pair{ "xwyw"_h, &UInt16x4Type },
    std::pair{ "xwzz"_h, &UInt16x4Type },
    std::pair{ "xwzx"_h, &UInt16x4Type },
    std::pair{ "xwzy"_h, &UInt16x4Type },
    std::pair{ "xwzw"_h, &UInt16x4Type },
    std::pair{ "operator^="_h, &UInt16x4_operator_xorasg_UInt16x4 },
    std::pair{ "operator[]"_h, &UInt16x4_operator_index_Int32 },
    std::pair{ "operator[]"_h, &UInt16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &UInt16x4_operator_index_Int16 },
    std::pair{ "operator[]"_h, &UInt16x4_operator_index_UInt16 },
    std::pair{ "agrr"_h, &UInt16x4Type },
    std::pair{ "agra"_h, &UInt16x4Type },
    std::pair{ "agrb"_h, &UInt16x4Type },
    std::pair{ "agrg"_h, &UInt16x4Type },
    std::pair{ "operator|="_h, &UInt16x4_operator_orasg_UInt16x4 },
    std::pair{ "agar"_h, &UInt16x4Type },
    std::pair{ "agaa"_h, &UInt16x4Type },
    std::pair{ "agab"_h, &UInt16x4Type },
    std::pair{ "agag"_h, &UInt16x4Type },
    std::pair{ "agba"_h, &UInt16x4Type },
    std::pair{ "agbb"_h, &UInt16x4Type },
    std::pair{ "agbg"_h, &UInt16x4Type },
    std::pair{ "agbr"_h, &UInt16x4Type },
    std::pair{ "aggb"_h, &UInt16x4Type },
    std::pair{ "agga"_h, &UInt16x4Type },
    std::pair{ "aggg"_h, &UInt16x4Type },
    std::pair{ "aggr"_h, &UInt16x4Type },
    std::pair{ "operator=="_h, &UInt16x4_operator_eq_UInt16x4 },
    std::pair{ "operator<="_h, &UInt16x4_operator_lte_UInt16x4 },
    std::pair{ "operator<<"_h, &UInt16x4_operator_lsh_UInt16x4 },
    std::pair{ "operator>="_h, &UInt16x4_operator_gte_UInt16x4 },
    std::pair{ "operator>>"_h, &UInt16x4_operator_rsh_UInt16x4 },
    std::pair{ "operator-="_h, &UInt16x4_operator_subasg_UInt16x4 },
    std::pair{ "operator/="_h, &UInt16x4_operator_divasg_UInt16x4 },
    std::pair{ "operator+="_h, &UInt16x4_operator_addasg_UInt16x4 },
    std::pair{ "operator*="_h, &UInt16x4_operator_mulasg_UInt16x4 },
    std::pair{ "operator&="_h, &UInt16x4_operator_andasg_UInt16x4 },
    std::pair{ "operator!="_h, &UInt16x4_operator_neq_UInt16x4 },
    std::pair{ "operator+=(u16x4)"_h, &UInt16x4_operator_addasg_UInt16x4 },
    std::pair{ "operator<(u16x4)"_h, &UInt16x4_operator_lt_UInt16x4 },
    std::pair{ "agr"_h, &UInt16x3Type },
    std::pair{ "aga"_h, &UInt16x3Type },
    std::pair{ "agb"_h, &UInt16x3Type },
    std::pair{ "agg"_h, &UInt16x3Type },
    std::pair{ "aar"_h, &UInt16x3Type },
    std::pair{ "aag"_h, &UInt16x3Type },
    std::pair{ "aab"_h, &UInt16x3Type },
    std::pair{ "aaa"_h, &UInt16x3Type },
    std::pair{ "abb"_h, &UInt16x3Type },
    std::pair{ "aba"_h, &UInt16x3Type },
    std::pair{ "abg"_h, &UInt16x3Type },
    std::pair{ "abr"_h, &UInt16x3Type },
    std::pair{ "arr"_h, &UInt16x3Type },
    std::pair{ "arb"_h, &UInt16x3Type },
    std::pair{ "ara"_h, &UInt16x3Type },
    std::pair{ "arg"_h, &UInt16x3Type },
    std::pair{ "aarr"_h, &UInt16x4Type },
    std::pair{ "aarg"_h, &UInt16x4Type },
    std::pair{ "aarb"_h, &UInt16x4Type },
    std::pair{ "aara"_h, &UInt16x4Type },
    std::pair{ "aagr"_h, &UInt16x4Type },
    std::pair{ "aaga"_h, &UInt16x4Type },
    std::pair{ "aagb"_h, &UInt16x4Type },
    std::pair{ "aagg"_h, &UInt16x4Type },
    std::pair{ "aabg"_h, &UInt16x4Type },
    std::pair{ "aabb"_h, &UInt16x4Type },
    std::pair{ "aaba"_h, &UInt16x4Type },
    std::pair{ "aabr"_h, &UInt16x4Type },
    std::pair{ "aaab"_h, &UInt16x4Type },
    std::pair{ "aaaa"_h, &UInt16x4Type },
    std::pair{ "aaag"_h, &UInt16x4Type },
    std::pair{ "aaar"_h, &UInt16x4Type },
    std::pair{ "operator^=(u16x4)"_h, &UInt16x4_operator_xorasg_UInt16x4 },
    std::pair{ "operator*=(u16x4)"_h, &UInt16x4_operator_mulasg_UInt16x4 },
    std::pair{ "operator[](i32)"_h, &UInt16x4_operator_index_Int32 },
    std::pair{ "grrb"_h, &UInt16x4Type },
    std::pair{ "grra"_h, &UInt16x4Type },
    std::pair{ "grrg"_h, &UInt16x4Type },
    std::pair{ "grrr"_h, &UInt16x4Type },
    std::pair{ "grga"_h, &UInt16x4Type },
    std::pair{ "grgb"_h, &UInt16x4Type },
    std::pair{ "grgg"_h, &UInt16x4Type },
    std::pair{ "grgr"_h, &UInt16x4Type },
    std::pair{ "grag"_h, &UInt16x4Type },
    std::pair{ "grab"_h, &UInt16x4Type },
    std::pair{ "graa"_h, &UInt16x4Type },
    std::pair{ "grar"_h, &UInt16x4Type },
    std::pair{ "grbr"_h, &UInt16x4Type },
    std::pair{ "grbb"_h, &UInt16x4Type },
    std::pair{ "grba"_h, &UInt16x4Type },
    std::pair{ "grbg"_h, &UInt16x4Type },
    std::pair{ "abbr"_h, &UInt16x4Type },
    std::pair{ "abba"_h, &UInt16x4Type },
    std::pair{ "abbb"_h, &UInt16x4Type },
    std::pair{ "abbg"_h, &UInt16x4Type },
    std::pair{ "abar"_h, &UInt16x4Type },
    std::pair{ "abaa"_h, &UInt16x4Type },
    std::pair{ "abab"_h, &UInt16x4Type },
    std::pair{ "abag"_h, &UInt16x4Type },
    std::pair{ "abgr"_h, &UInt16x4Type },
    std::pair{ "abgg"_h, &UInt16x4Type },
    std::pair{ "abgb"_h, &UInt16x4Type },
    std::pair{ "abga"_h, &UInt16x4Type },
    std::pair{ "abra"_h, &UInt16x4Type },
    std::pair{ "abrb"_h, &UInt16x4Type },
    std::pair{ "abrg"_h, &UInt16x4Type },
    std::pair{ "abrr"_h, &UInt16x4Type },
    std::pair{ "operator>(u16x4)"_h, &UInt16x4_operator_gt_UInt16x4 },
    std::pair{ "rrgg"_h, &UInt16x4Type },
    std::pair{ "rrgb"_h, &UInt16x4Type },
    std::pair{ "rrga"_h, &UInt16x4Type },
    std::pair{ "rrgr"_h, &UInt16x4Type },
    std::pair{ "rrag"_h, &UInt16x4Type },
    std::pair{ "rraa"_h, &UInt16x4Type },
    std::pair{ "rrab"_h, &UInt16x4Type },
    std::pair{ "rrar"_h, &UInt16x4Type },
    std::pair{ "rrbg"_h, &UInt16x4Type },
    std::pair{ "rrba"_h, &UInt16x4Type },
    std::pair{ "rrbb"_h, &UInt16x4Type },
    std::pair{ "rrbr"_h, &UInt16x4Type },
    std::pair{ "rrrr"_h, &UInt16x4Type },
    std::pair{ "rrrg"_h, &UInt16x4Type },
    std::pair{ "rrra"_h, &UInt16x4Type },
    std::pair{ "rrrb"_h, &UInt16x4Type }
    };

UInt16x4::UInt16x4()
{
    this->name = "u16x4"_c;
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    /// operator[] with Int32
    UInt16x4_operator_index_Int32_arg.name = "arg"_c;
    UInt16x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt16x4_operator_index_Int32.name = UInt16x4_operator_index_Int32_name;
    UInt16x4_operator_index_Int32.backendIndex = 1041;
    UInt16x4_operator_index_Int32.returnType = Type::FullType { UInt16Type.name };
    UInt16x4_operator_index_Int32.parameters = UInt16x4_operator_index_Int32_args;
    Symbol::Resolved(&UInt16x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x4_operator_index_Int32)->signature = "operator[](i32) u16"_c;
    Symbol::Resolved(&UInt16x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt32
    UInt16x4_operator_index_UInt32_arg.name = "arg"_c;
    UInt16x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt16x4_operator_index_UInt32.name = UInt16x4_operator_index_UInt32_name;
    UInt16x4_operator_index_UInt32.backendIndex = 1042;
    UInt16x4_operator_index_UInt32.returnType = Type::FullType { UInt16Type.name };
    UInt16x4_operator_index_UInt32.parameters = UInt16x4_operator_index_UInt32_args;
    Symbol::Resolved(&UInt16x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x4_operator_index_UInt32)->signature = "operator[](u32) u16"_c;
    Symbol::Resolved(&UInt16x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with Int16
    UInt16x4_operator_index_Int16_arg.name = "arg"_c;
    UInt16x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16x4_operator_index_Int16.name = UInt16x4_operator_index_Int16_name;
    UInt16x4_operator_index_Int16.backendIndex = 1043;
    UInt16x4_operator_index_Int16.returnType = Type::FullType { UInt16Type.name };
    UInt16x4_operator_index_Int16.parameters = UInt16x4_operator_index_Int16_args;
    Symbol::Resolved(&UInt16x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x4_operator_index_Int16)->signature = "operator[](i16) u16"_c;
    Symbol::Resolved(&UInt16x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt16
    UInt16x4_operator_index_UInt16_arg.name = "arg"_c;
    UInt16x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16x4_operator_index_UInt16.name = UInt16x4_operator_index_UInt16_name;
    UInt16x4_operator_index_UInt16.backendIndex = 1044;
    UInt16x4_operator_index_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16x4_operator_index_UInt16.parameters = UInt16x4_operator_index_UInt16_args;
    Symbol::Resolved(&UInt16x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_operator_index_UInt16)->signature = "operator[](u16) u16"_c;
    Symbol::Resolved(&UInt16x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator+ with UInt16x4
    UInt16x4_operator_add_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_add_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_add_UInt16x4.name = UInt16x4_operator_add_UInt16x4_name;
    UInt16x4_operator_add_UInt16x4.backendIndex = 1045;
    UInt16x4_operator_add_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_add_UInt16x4.parameters = UInt16x4_operator_add_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_add_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_add_UInt16x4)->signature = "operator+(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_add_UInt16x4)->name = "operator+(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_add_UInt16x4)->nameWithVarNames = "operator+(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_add_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator- with UInt16x4
    UInt16x4_operator_sub_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_sub_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_sub_UInt16x4.name = UInt16x4_operator_sub_UInt16x4_name;
    UInt16x4_operator_sub_UInt16x4.backendIndex = 1046;
    UInt16x4_operator_sub_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_sub_UInt16x4.parameters = UInt16x4_operator_sub_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_sub_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_sub_UInt16x4)->signature = "operator-(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_sub_UInt16x4)->name = "operator-(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_sub_UInt16x4)->nameWithVarNames = "operator-(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_sub_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator* with UInt16x4
    UInt16x4_operator_mul_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_mul_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_mul_UInt16x4.name = UInt16x4_operator_mul_UInt16x4_name;
    UInt16x4_operator_mul_UInt16x4.backendIndex = 1047;
    UInt16x4_operator_mul_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_mul_UInt16x4.parameters = UInt16x4_operator_mul_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_mul_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_mul_UInt16x4)->signature = "operator*(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_mul_UInt16x4)->name = "operator*(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_mul_UInt16x4)->nameWithVarNames = "operator*(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_mul_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator/ with UInt16x4
    UInt16x4_operator_div_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_div_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_div_UInt16x4.name = UInt16x4_operator_div_UInt16x4_name;
    UInt16x4_operator_div_UInt16x4.backendIndex = 1048;
    UInt16x4_operator_div_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_div_UInt16x4.parameters = UInt16x4_operator_div_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_div_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_div_UInt16x4)->signature = "operator/(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_div_UInt16x4)->name = "operator/(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_div_UInt16x4)->nameWithVarNames = "operator/(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_div_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator% with UInt16x4
    UInt16x4_operator_mod_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_mod_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_mod_UInt16x4.name = UInt16x4_operator_mod_UInt16x4_name;
    UInt16x4_operator_mod_UInt16x4.backendIndex = 1049;
    UInt16x4_operator_mod_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_mod_UInt16x4.parameters = UInt16x4_operator_mod_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_mod_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_mod_UInt16x4)->signature = "operator%(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_mod_UInt16x4)->name = "operator%(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_mod_UInt16x4)->nameWithVarNames = "operator%(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_mod_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator+= with UInt16x4
    UInt16x4_operator_addasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_addasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_addasg_UInt16x4.name = UInt16x4_operator_addasg_UInt16x4_name;
    UInt16x4_operator_addasg_UInt16x4.backendIndex = 1050;
    UInt16x4_operator_addasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_addasg_UInt16x4.parameters = UInt16x4_operator_addasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_addasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_addasg_UInt16x4)->signature = "operator+=(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_addasg_UInt16x4)->name = "operator+=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_addasg_UInt16x4)->nameWithVarNames = "operator+=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_addasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator-= with UInt16x4
    UInt16x4_operator_subasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_subasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_subasg_UInt16x4.name = UInt16x4_operator_subasg_UInt16x4_name;
    UInt16x4_operator_subasg_UInt16x4.backendIndex = 1051;
    UInt16x4_operator_subasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_subasg_UInt16x4.parameters = UInt16x4_operator_subasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_subasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_subasg_UInt16x4)->signature = "operator-=(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_subasg_UInt16x4)->name = "operator-=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_subasg_UInt16x4)->nameWithVarNames = "operator-=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_subasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator*= with UInt16x4
    UInt16x4_operator_mulasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_mulasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_mulasg_UInt16x4.name = UInt16x4_operator_mulasg_UInt16x4_name;
    UInt16x4_operator_mulasg_UInt16x4.backendIndex = 1052;
    UInt16x4_operator_mulasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_mulasg_UInt16x4.parameters = UInt16x4_operator_mulasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_mulasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_mulasg_UInt16x4)->signature = "operator*=(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_mulasg_UInt16x4)->name = "operator*=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_mulasg_UInt16x4)->nameWithVarNames = "operator*=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_mulasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator/= with UInt16x4
    UInt16x4_operator_divasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_divasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_divasg_UInt16x4.name = UInt16x4_operator_divasg_UInt16x4_name;
    UInt16x4_operator_divasg_UInt16x4.backendIndex = 1053;
    UInt16x4_operator_divasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_divasg_UInt16x4.parameters = UInt16x4_operator_divasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_divasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_divasg_UInt16x4)->signature = "operator/=(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_divasg_UInt16x4)->name = "operator/=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_divasg_UInt16x4)->nameWithVarNames = "operator/=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_divasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator< with UInt16x4
    UInt16x4_operator_lt_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_lt_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_lt_UInt16x4.name = UInt16x4_operator_lt_UInt16x4_name;
    UInt16x4_operator_lt_UInt16x4.backendIndex = 1054;
    UInt16x4_operator_lt_UInt16x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt16x4_operator_lt_UInt16x4.parameters = UInt16x4_operator_lt_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_lt_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_lt_UInt16x4)->signature = "operator<(u16x4) b8x4"_c;
    Symbol::Resolved(&UInt16x4_operator_lt_UInt16x4)->name = "operator<(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lt_UInt16x4)->nameWithVarNames = "operator<(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lt_UInt16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator<= with UInt16x4
    UInt16x4_operator_lte_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_lte_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_lte_UInt16x4.name = UInt16x4_operator_lte_UInt16x4_name;
    UInt16x4_operator_lte_UInt16x4.backendIndex = 1055;
    UInt16x4_operator_lte_UInt16x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt16x4_operator_lte_UInt16x4.parameters = UInt16x4_operator_lte_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_lte_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_lte_UInt16x4)->signature = "operator<=(u16x4) b8x4"_c;
    Symbol::Resolved(&UInt16x4_operator_lte_UInt16x4)->name = "operator<=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lte_UInt16x4)->nameWithVarNames = "operator<=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lte_UInt16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator> with UInt16x4
    UInt16x4_operator_gt_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_gt_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_gt_UInt16x4.name = UInt16x4_operator_gt_UInt16x4_name;
    UInt16x4_operator_gt_UInt16x4.backendIndex = 1056;
    UInt16x4_operator_gt_UInt16x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt16x4_operator_gt_UInt16x4.parameters = UInt16x4_operator_gt_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_gt_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_gt_UInt16x4)->signature = "operator>(u16x4) b8x4"_c;
    Symbol::Resolved(&UInt16x4_operator_gt_UInt16x4)->name = "operator>(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_gt_UInt16x4)->nameWithVarNames = "operator>(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_gt_UInt16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator>= with UInt16x4
    UInt16x4_operator_gte_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_gte_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_gte_UInt16x4.name = UInt16x4_operator_gte_UInt16x4_name;
    UInt16x4_operator_gte_UInt16x4.backendIndex = 1057;
    UInt16x4_operator_gte_UInt16x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt16x4_operator_gte_UInt16x4.parameters = UInt16x4_operator_gte_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_gte_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_gte_UInt16x4)->signature = "operator>=(u16x4) b8x4"_c;
    Symbol::Resolved(&UInt16x4_operator_gte_UInt16x4)->name = "operator>=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_gte_UInt16x4)->nameWithVarNames = "operator>=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_gte_UInt16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator== with UInt16x4
    UInt16x4_operator_eq_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_eq_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_eq_UInt16x4.name = UInt16x4_operator_eq_UInt16x4_name;
    UInt16x4_operator_eq_UInt16x4.backendIndex = 1058;
    UInt16x4_operator_eq_UInt16x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt16x4_operator_eq_UInt16x4.parameters = UInt16x4_operator_eq_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_eq_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_eq_UInt16x4)->signature = "operator==(u16x4) b8x4"_c;
    Symbol::Resolved(&UInt16x4_operator_eq_UInt16x4)->name = "operator==(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_eq_UInt16x4)->nameWithVarNames = "operator==(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_eq_UInt16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator!= with UInt16x4
    UInt16x4_operator_neq_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_neq_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_neq_UInt16x4.name = UInt16x4_operator_neq_UInt16x4_name;
    UInt16x4_operator_neq_UInt16x4.backendIndex = 1059;
    UInt16x4_operator_neq_UInt16x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt16x4_operator_neq_UInt16x4.parameters = UInt16x4_operator_neq_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_neq_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_neq_UInt16x4)->signature = "operator!=(u16x4) b8x4"_c;
    Symbol::Resolved(&UInt16x4_operator_neq_UInt16x4)->name = "operator!=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_neq_UInt16x4)->nameWithVarNames = "operator!=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_neq_UInt16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator* with Float16
    UInt16x4_operator_scale_Float16_arg.name = "arg"_c;
    UInt16x4_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt16x4_operator_scale_Float16.name = UInt16x4_operator_scale_Float16_name;
    UInt16x4_operator_scale_Float16.backendIndex = 1060;
    UInt16x4_operator_scale_Float16.returnType = Type::FullType { Float16x4Type.name };
    UInt16x4_operator_scale_Float16.parameters = UInt16x4_operator_scale_Float16_args;
    Symbol::Resolved(&UInt16x4_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x4_operator_scale_Float16)->signature = "operator*(f16) f16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_Float16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with UInt16
    UInt16x4_operator_scale_UInt16_arg.name = "arg"_c;
    UInt16x4_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16x4_operator_scale_UInt16.name = UInt16x4_operator_scale_UInt16_name;
    UInt16x4_operator_scale_UInt16.backendIndex = 1061;
    UInt16x4_operator_scale_UInt16.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_scale_UInt16.parameters = UInt16x4_operator_scale_UInt16_args;
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16)->signature = "operator*(u16) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16)->returnTypeSymbol = &UInt16x4Type;

    /// operator* with Int16
    UInt16x4_operator_scale_Int16_arg.name = "arg"_c;
    UInt16x4_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16x4_operator_scale_Int16.name = UInt16x4_operator_scale_Int16_name;
    UInt16x4_operator_scale_Int16.backendIndex = 1062;
    UInt16x4_operator_scale_Int16.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_scale_Int16.parameters = UInt16x4_operator_scale_Int16_args;
    Symbol::Resolved(&UInt16x4_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x4_operator_scale_Int16)->signature = "operator*(i16) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_Int16)->returnTypeSymbol = &UInt16x4Type;

    /// operator| with UInt16x4
    UInt16x4_operator_or_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_or_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_or_UInt16x4.name = UInt16x4_operator_or_UInt16x4_name;
    UInt16x4_operator_or_UInt16x4.backendIndex = 1063;
    UInt16x4_operator_or_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_or_UInt16x4.parameters = UInt16x4_operator_or_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_or_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_or_UInt16x4)->signature = "operator|(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_or_UInt16x4)->name = "operator|(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_or_UInt16x4)->nameWithVarNames = "operator|(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_or_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator& with UInt16x4
    UInt16x4_operator_and_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_and_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_and_UInt16x4.name = UInt16x4_operator_and_UInt16x4_name;
    UInt16x4_operator_and_UInt16x4.backendIndex = 1064;
    UInt16x4_operator_and_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_and_UInt16x4.parameters = UInt16x4_operator_and_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_and_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_and_UInt16x4)->signature = "operator&(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_and_UInt16x4)->name = "operator&(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_and_UInt16x4)->nameWithVarNames = "operator&(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_and_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator^ with UInt16x4
    UInt16x4_operator_xor_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_xor_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_xor_UInt16x4.name = UInt16x4_operator_xor_UInt16x4_name;
    UInt16x4_operator_xor_UInt16x4.backendIndex = 1065;
    UInt16x4_operator_xor_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_xor_UInt16x4.parameters = UInt16x4_operator_xor_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_xor_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_xor_UInt16x4)->signature = "operator^(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_xor_UInt16x4)->name = "operator^(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_xor_UInt16x4)->nameWithVarNames = "operator^(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_xor_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator<< with UInt16x4
    UInt16x4_operator_lsh_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_lsh_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_lsh_UInt16x4.name = UInt16x4_operator_lsh_UInt16x4_name;
    UInt16x4_operator_lsh_UInt16x4.backendIndex = 1066;
    UInt16x4_operator_lsh_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_lsh_UInt16x4.parameters = UInt16x4_operator_lsh_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_lsh_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_lsh_UInt16x4)->signature = "operator<<(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_lsh_UInt16x4)->name = "operator<<(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lsh_UInt16x4)->nameWithVarNames = "operator<<(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lsh_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator>> with UInt16x4
    UInt16x4_operator_rsh_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_rsh_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_rsh_UInt16x4.name = UInt16x4_operator_rsh_UInt16x4_name;
    UInt16x4_operator_rsh_UInt16x4.backendIndex = 1067;
    UInt16x4_operator_rsh_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_rsh_UInt16x4.parameters = UInt16x4_operator_rsh_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_rsh_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_rsh_UInt16x4)->signature = "operator>>(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_rsh_UInt16x4)->name = "operator>>(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_rsh_UInt16x4)->nameWithVarNames = "operator>>(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_rsh_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator|= with UInt16x4
    UInt16x4_operator_orasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_orasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_orasg_UInt16x4.name = UInt16x4_operator_orasg_UInt16x4_name;
    UInt16x4_operator_orasg_UInt16x4.backendIndex = 1068;
    UInt16x4_operator_orasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_orasg_UInt16x4.parameters = UInt16x4_operator_orasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_orasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_orasg_UInt16x4)->signature = "operator|=(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_orasg_UInt16x4)->name = "operator|=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_orasg_UInt16x4)->nameWithVarNames = "operator|=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_orasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator&= with UInt16x4
    UInt16x4_operator_andasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_andasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_andasg_UInt16x4.name = UInt16x4_operator_andasg_UInt16x4_name;
    UInt16x4_operator_andasg_UInt16x4.backendIndex = 1069;
    UInt16x4_operator_andasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_andasg_UInt16x4.parameters = UInt16x4_operator_andasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_andasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_andasg_UInt16x4)->signature = "operator&=(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_andasg_UInt16x4)->name = "operator&=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_andasg_UInt16x4)->nameWithVarNames = "operator&=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_andasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator^= with UInt16x4
    UInt16x4_operator_xorasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_xorasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_xorasg_UInt16x4.name = UInt16x4_operator_xorasg_UInt16x4_name;
    UInt16x4_operator_xorasg_UInt16x4.backendIndex = 1070;
    UInt16x4_operator_xorasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_xorasg_UInt16x4.parameters = UInt16x4_operator_xorasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_xorasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_xorasg_UInt16x4)->signature = "operator^=(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_xorasg_UInt16x4)->name = "operator^=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_xorasg_UInt16x4)->nameWithVarNames = "operator^=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_xorasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator<<= with UInt16x4
    UInt16x4_operator_lshasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_lshasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_lshasg_UInt16x4.name = UInt16x4_operator_lshasg_UInt16x4_name;
    UInt16x4_operator_lshasg_UInt16x4.backendIndex = 1071;
    UInt16x4_operator_lshasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_lshasg_UInt16x4.parameters = UInt16x4_operator_lshasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_lshasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_lshasg_UInt16x4)->signature = "operator<<=(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_lshasg_UInt16x4)->name = "operator<<=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lshasg_UInt16x4)->nameWithVarNames = "operator<<=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lshasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator>>= with UInt16x4
    UInt16x4_operator_rhsasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_rhsasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_rhsasg_UInt16x4.name = UInt16x4_operator_rhsasg_UInt16x4_name;
    UInt16x4_operator_rhsasg_UInt16x4.backendIndex = 1072;
    UInt16x4_operator_rhsasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_rhsasg_UInt16x4.parameters = UInt16x4_operator_rhsasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_rhsasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_rhsasg_UInt16x4)->signature = "operator>>=(u16x4) u16x4"_c;
    Symbol::Resolved(&UInt16x4_operator_rhsasg_UInt16x4)->name = "operator>>=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_rhsasg_UInt16x4)->nameWithVarNames = "operator>>=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_rhsasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    this->scope.symbolLookup = UInt16x4_symbolLookup;
}
UInt16x4 UInt16x4Type;

/// operator[] with Int32
Variable Int16x4_operator_index_Int32_arg;
Function Int16x4_operator_index_Int32;
inline constexpr std::array Int16x4_operator_index_Int32_args = { &Int16x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int16x4_operator_index_UInt32_arg;
Function Int16x4_operator_index_UInt32;
inline constexpr std::array Int16x4_operator_index_UInt32_args = { &Int16x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int16x4_operator_index_Int16_arg;
Function Int16x4_operator_index_Int16;
inline constexpr std::array Int16x4_operator_index_Int16_args = { &Int16x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int16x4_operator_index_UInt16_arg;
Function Int16x4_operator_index_UInt16;
inline constexpr std::array Int16x4_operator_index_UInt16_args = { &Int16x4_operator_index_UInt16_arg };

/// operator+ with Int16x4
Variable Int16x4_operator_add_Int16x4_arg;
Function Int16x4_operator_add_Int16x4;
inline constexpr std::array Int16x4_operator_add_Int16x4_args = { &Int16x4_operator_add_Int16x4_arg };

/// operator- with Int16x4
Variable Int16x4_operator_sub_Int16x4_arg;
Function Int16x4_operator_sub_Int16x4;
inline constexpr std::array Int16x4_operator_sub_Int16x4_args = { &Int16x4_operator_sub_Int16x4_arg };

/// operator* with Int16x4
Variable Int16x4_operator_mul_Int16x4_arg;
Function Int16x4_operator_mul_Int16x4;
inline constexpr std::array Int16x4_operator_mul_Int16x4_args = { &Int16x4_operator_mul_Int16x4_arg };

/// operator/ with Int16x4
Variable Int16x4_operator_div_Int16x4_arg;
Function Int16x4_operator_div_Int16x4;
inline constexpr std::array Int16x4_operator_div_Int16x4_args = { &Int16x4_operator_div_Int16x4_arg };

/// operator% with Int16x4
Variable Int16x4_operator_mod_Int16x4_arg;
Function Int16x4_operator_mod_Int16x4;
inline constexpr std::array Int16x4_operator_mod_Int16x4_args = { &Int16x4_operator_mod_Int16x4_arg };

/// operator+= with Int16x4
Variable Int16x4_operator_addasg_Int16x4_arg;
Function Int16x4_operator_addasg_Int16x4;
inline constexpr std::array Int16x4_operator_addasg_Int16x4_args = { &Int16x4_operator_addasg_Int16x4_arg };

/// operator-= with Int16x4
Variable Int16x4_operator_subasg_Int16x4_arg;
Function Int16x4_operator_subasg_Int16x4;
inline constexpr std::array Int16x4_operator_subasg_Int16x4_args = { &Int16x4_operator_subasg_Int16x4_arg };

/// operator*= with Int16x4
Variable Int16x4_operator_mulasg_Int16x4_arg;
Function Int16x4_operator_mulasg_Int16x4;
inline constexpr std::array Int16x4_operator_mulasg_Int16x4_args = { &Int16x4_operator_mulasg_Int16x4_arg };

/// operator/= with Int16x4
Variable Int16x4_operator_divasg_Int16x4_arg;
Function Int16x4_operator_divasg_Int16x4;
inline constexpr std::array Int16x4_operator_divasg_Int16x4_args = { &Int16x4_operator_divasg_Int16x4_arg };

/// operator< with Int16x4
Variable Int16x4_operator_lt_Int16x4_arg;
Function Int16x4_operator_lt_Int16x4;
inline constexpr std::array Int16x4_operator_lt_Int16x4_args = { &Int16x4_operator_lt_Int16x4_arg };

/// operator<= with Int16x4
Variable Int16x4_operator_lte_Int16x4_arg;
Function Int16x4_operator_lte_Int16x4;
inline constexpr std::array Int16x4_operator_lte_Int16x4_args = { &Int16x4_operator_lte_Int16x4_arg };

/// operator> with Int16x4
Variable Int16x4_operator_gt_Int16x4_arg;
Function Int16x4_operator_gt_Int16x4;
inline constexpr std::array Int16x4_operator_gt_Int16x4_args = { &Int16x4_operator_gt_Int16x4_arg };

/// operator>= with Int16x4
Variable Int16x4_operator_gte_Int16x4_arg;
Function Int16x4_operator_gte_Int16x4;
inline constexpr std::array Int16x4_operator_gte_Int16x4_args = { &Int16x4_operator_gte_Int16x4_arg };

/// operator== with Int16x4
Variable Int16x4_operator_eq_Int16x4_arg;
Function Int16x4_operator_eq_Int16x4;
inline constexpr std::array Int16x4_operator_eq_Int16x4_args = { &Int16x4_operator_eq_Int16x4_arg };

/// operator!= with Int16x4
Variable Int16x4_operator_neq_Int16x4_arg;
Function Int16x4_operator_neq_Int16x4;
inline constexpr std::array Int16x4_operator_neq_Int16x4_args = { &Int16x4_operator_neq_Int16x4_arg };

/// operator* with Float16
Variable Int16x4_operator_scale_Float16_arg;
Function Int16x4_operator_scale_Float16;
inline constexpr std::array Int16x4_operator_scale_Float16_args = { &Int16x4_operator_scale_Float16_arg };

/// operator* with UInt16
Variable Int16x4_operator_scale_UInt16_arg;
Function Int16x4_operator_scale_UInt16;
inline constexpr std::array Int16x4_operator_scale_UInt16_args = { &Int16x4_operator_scale_UInt16_arg };

/// operator* with Int16
Variable Int16x4_operator_scale_Int16_arg;
Function Int16x4_operator_scale_Int16;
inline constexpr std::array Int16x4_operator_scale_Int16_args = { &Int16x4_operator_scale_Int16_arg };

/// operator| with Int16x4
Variable Int16x4_operator_or_Int16x4_arg;
Function Int16x4_operator_or_Int16x4;
inline constexpr std::array Int16x4_operator_or_Int16x4_args = { &Int16x4_operator_or_Int16x4_arg };

/// operator& with Int16x4
Variable Int16x4_operator_and_Int16x4_arg;
Function Int16x4_operator_and_Int16x4;
inline constexpr std::array Int16x4_operator_and_Int16x4_args = { &Int16x4_operator_and_Int16x4_arg };

/// operator^ with Int16x4
Variable Int16x4_operator_xor_Int16x4_arg;
Function Int16x4_operator_xor_Int16x4;
inline constexpr std::array Int16x4_operator_xor_Int16x4_args = { &Int16x4_operator_xor_Int16x4_arg };

/// operator<< with Int16x4
Variable Int16x4_operator_lsh_Int16x4_arg;
Function Int16x4_operator_lsh_Int16x4;
inline constexpr std::array Int16x4_operator_lsh_Int16x4_args = { &Int16x4_operator_lsh_Int16x4_arg };

/// operator>> with Int16x4
Variable Int16x4_operator_rsh_Int16x4_arg;
Function Int16x4_operator_rsh_Int16x4;
inline constexpr std::array Int16x4_operator_rsh_Int16x4_args = { &Int16x4_operator_rsh_Int16x4_arg };

/// operator|= with Int16x4
Variable Int16x4_operator_orasg_Int16x4_arg;
Function Int16x4_operator_orasg_Int16x4;
inline constexpr std::array Int16x4_operator_orasg_Int16x4_args = { &Int16x4_operator_orasg_Int16x4_arg };

/// operator&= with Int16x4
Variable Int16x4_operator_andasg_Int16x4_arg;
Function Int16x4_operator_andasg_Int16x4;
inline constexpr std::array Int16x4_operator_andasg_Int16x4_args = { &Int16x4_operator_andasg_Int16x4_arg };

/// operator^= with Int16x4
Variable Int16x4_operator_xorasg_Int16x4_arg;
Function Int16x4_operator_xorasg_Int16x4;
inline constexpr std::array Int16x4_operator_xorasg_Int16x4_args = { &Int16x4_operator_xorasg_Int16x4_arg };

/// operator<<= with Int16x4
Variable Int16x4_operator_lshasg_Int16x4_arg;
Function Int16x4_operator_lshasg_Int16x4;
inline constexpr std::array Int16x4_operator_lshasg_Int16x4_args = { &Int16x4_operator_lshasg_Int16x4_arg };

/// operator>>= with Int16x4
Variable Int16x4_operator_rhsasg_Int16x4_arg;
Function Int16x4_operator_rhsasg_Int16x4;
inline constexpr std::array Int16x4_operator_rhsasg_Int16x4_args = { &Int16x4_operator_rhsasg_Int16x4_arg };

static constexpr StaticMap<HashString, Symbol*, 744> Int16x4_symbolLookup = {
    std::pair{ "wzwy"_h, &Int16x4Type },
    std::pair{ "wzwx"_h, &Int16x4Type },
    std::pair{ "wzwz"_h, &Int16x4Type },
    std::pair{ "wzww"_h, &Int16x4Type },
    std::pair{ "bgg"_h, &Int16x3Type },
    std::pair{ "bgb"_h, &Int16x3Type },
    std::pair{ "bga"_h, &Int16x3Type },
    std::pair{ "bgr"_h, &Int16x3Type },
    std::pair{ "bag"_h, &Int16x3Type },
    std::pair{ "baa"_h, &Int16x3Type },
    std::pair{ "bab"_h, &Int16x3Type },
    std::pair{ "bar"_h, &Int16x3Type },
    std::pair{ "bbg"_h, &Int16x3Type },
    std::pair{ "bba"_h, &Int16x3Type },
    std::pair{ "bbb"_h, &Int16x3Type },
    std::pair{ "bbr"_h, &Int16x3Type },
    std::pair{ "wzxw"_h, &Int16x4Type },
    std::pair{ "wzxx"_h, &Int16x4Type },
    std::pair{ "wzxy"_h, &Int16x4Type },
    std::pair{ "wzxz"_h, &Int16x4Type },
    std::pair{ "wzyw"_h, &Int16x4Type },
    std::pair{ "wzyz"_h, &Int16x4Type },
    std::pair{ "wzyy"_h, &Int16x4Type },
    std::pair{ "wzyx"_h, &Int16x4Type },
    std::pair{ "wzzz"_h, &Int16x4Type },
    std::pair{ "wzzx"_h, &Int16x4Type },
    std::pair{ "wzzy"_h, &Int16x4Type },
    std::pair{ "wzzw"_h, &Int16x4Type },
    std::pair{ "brr"_h, &Int16x3Type },
    std::pair{ "brg"_h, &Int16x3Type },
    std::pair{ "bra"_h, &Int16x3Type },
    std::pair{ "brb"_h, &Int16x3Type },
    std::pair{ "ywyw"_h, &Int16x4Type },
    std::pair{ "ywyx"_h, &Int16x4Type },
    std::pair{ "ywyy"_h, &Int16x4Type },
    std::pair{ "ywyz"_h, &Int16x4Type },
    std::pair{ "ywxw"_h, &Int16x4Type },
    std::pair{ "ywxz"_h, &Int16x4Type },
    std::pair{ "ywxy"_h, &Int16x4Type },
    std::pair{ "ywxx"_h, &Int16x4Type },
    std::pair{ "ywzy"_h, &Int16x4Type },
    std::pair{ "ywzx"_h, &Int16x4Type },
    std::pair{ "ywzz"_h, &Int16x4Type },
    std::pair{ "ywzw"_h, &Int16x4Type },
    std::pair{ "ywwz"_h, &Int16x4Type },
    std::pair{ "ywwx"_h, &Int16x4Type },
    std::pair{ "ywwy"_h, &Int16x4Type },
    std::pair{ "ywww"_h, &Int16x4Type },
    std::pair{ "operator+(i16x4)"_h, &Int16x4_operator_add_Int16x4 },
    std::pair{ "gg"_h, &Int16x2Type },
    std::pair{ "gb"_h, &Int16x2Type },
    std::pair{ "ga"_h, &Int16x2Type },
    std::pair{ "gr"_h, &Int16x2Type },
    std::pair{ "ag"_h, &Int16x2Type },
    std::pair{ "aa"_h, &Int16x2Type },
    std::pair{ "ab"_h, &Int16x2Type },
    std::pair{ "ar"_h, &Int16x2Type },
    std::pair{ "bg"_h, &Int16x2Type },
    std::pair{ "ba"_h, &Int16x2Type },
    std::pair{ "bb"_h, &Int16x2Type },
    std::pair{ "br"_h, &Int16x2Type },
    std::pair{ "ww"_h, &Int16x2Type },
    std::pair{ "wz"_h, &Int16x2Type },
    std::pair{ "wx"_h, &Int16x2Type },
    std::pair{ "wy"_h, &Int16x2Type },
    std::pair{ "rr"_h, &Int16x2Type },
    std::pair{ "rg"_h, &Int16x2Type },
    std::pair{ "ra"_h, &Int16x2Type },
    std::pair{ "rb"_h, &Int16x2Type },
    std::pair{ "yw"_h, &Int16x2Type },
    std::pair{ "yx"_h, &Int16x2Type },
    std::pair{ "yy"_h, &Int16x2Type },
    std::pair{ "yz"_h, &Int16x2Type },
    std::pair{ "xw"_h, &Int16x2Type },
    std::pair{ "xz"_h, &Int16x2Type },
    std::pair{ "xy"_h, &Int16x2Type },
    std::pair{ "xx"_h, &Int16x2Type },
    std::pair{ "zy"_h, &Int16x2Type },
    std::pair{ "zx"_h, &Int16x2Type },
    std::pair{ "zz"_h, &Int16x2Type },
    std::pair{ "zw"_h, &Int16x2Type },
    std::pair{ "operator[](i16)"_h, &Int16x4_operator_index_Int16 },
    std::pair{ "operator>>=(i16x4)"_h, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "wxzw"_h, &Int16x4Type },
    std::pair{ "wxzx"_h, &Int16x4Type },
    std::pair{ "wxzy"_h, &Int16x4Type },
    std::pair{ "wxzz"_h, &Int16x4Type },
    std::pair{ "wxxw"_h, &Int16x4Type },
    std::pair{ "wxxz"_h, &Int16x4Type },
    std::pair{ "wxxx"_h, &Int16x4Type },
    std::pair{ "wxxy"_h, &Int16x4Type },
    std::pair{ "wxyy"_h, &Int16x4Type },
    std::pair{ "wxyx"_h, &Int16x4Type },
    std::pair{ "wxyz"_h, &Int16x4Type },
    std::pair{ "wxyw"_h, &Int16x4Type },
    std::pair{ "wxww"_h, &Int16x4Type },
    std::pair{ "wxwz"_h, &Int16x4Type },
    std::pair{ "wxwy"_h, &Int16x4Type },
    std::pair{ "wxwx"_h, &Int16x4Type },
    std::pair{ "wyyx"_h, &Int16x4Type },
    std::pair{ "wyyy"_h, &Int16x4Type },
    std::pair{ "wyyz"_h, &Int16x4Type },
    std::pair{ "wyyw"_h, &Int16x4Type },
    std::pair{ "wyxz"_h, &Int16x4Type },
    std::pair{ "wyxy"_h, &Int16x4Type },
    std::pair{ "wyxx"_h, &Int16x4Type },
    std::pair{ "wyxw"_h, &Int16x4Type },
    std::pair{ "wyzw"_h, &Int16x4Type },
    std::pair{ "wyzy"_h, &Int16x4Type },
    std::pair{ "wyzx"_h, &Int16x4Type },
    std::pair{ "wyzz"_h, &Int16x4Type },
    std::pair{ "wywz"_h, &Int16x4Type },
    std::pair{ "wywx"_h, &Int16x4Type },
    std::pair{ "wywy"_h, &Int16x4Type },
    std::pair{ "wyww"_h, &Int16x4Type },
    std::pair{ "operator<<=(i16x4)"_h, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator%(i16x4)"_h, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator&(i16x4)"_h, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator*(u16)"_h, &Int16x4_operator_scale_UInt16 },
    std::pair{ "brrg"_h, &Int16x4Type },
    std::pair{ "brra"_h, &Int16x4Type },
    std::pair{ "brrb"_h, &Int16x4Type },
    std::pair{ "brrr"_h, &Int16x4Type },
    std::pair{ "brgr"_h, &Int16x4Type },
    std::pair{ "brgg"_h, &Int16x4Type },
    std::pair{ "brgb"_h, &Int16x4Type },
    std::pair{ "brga"_h, &Int16x4Type },
    std::pair{ "brar"_h, &Int16x4Type },
    std::pair{ "brag"_h, &Int16x4Type },
    std::pair{ "braa"_h, &Int16x4Type },
    std::pair{ "brab"_h, &Int16x4Type },
    std::pair{ "brbr"_h, &Int16x4Type },
    std::pair{ "brbg"_h, &Int16x4Type },
    std::pair{ "brba"_h, &Int16x4Type },
    std::pair{ "brbb"_h, &Int16x4Type },
    std::pair{ "operator/=(i16x4)"_h, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator^"_h, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator|"_h, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator<"_h, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator>"_h, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator-"_h, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator/"_h, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator+"_h, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator*"_h, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator*"_h, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_h, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_h, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator%"_h, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator&"_h, &Int16x4_operator_and_Int16x4 },
    std::pair{ "xzww"_h, &Int16x4Type },
    std::pair{ "xzwx"_h, &Int16x4Type },
    std::pair{ "xzwy"_h, &Int16x4Type },
    std::pair{ "xzwz"_h, &Int16x4Type },
    std::pair{ "xzzw"_h, &Int16x4Type },
    std::pair{ "xzzz"_h, &Int16x4Type },
    std::pair{ "xzzy"_h, &Int16x4Type },
    std::pair{ "xzzx"_h, &Int16x4Type },
    std::pair{ "xzyz"_h, &Int16x4Type },
    std::pair{ "xzyx"_h, &Int16x4Type },
    std::pair{ "xzyy"_h, &Int16x4Type },
    std::pair{ "xzyw"_h, &Int16x4Type },
    std::pair{ "xzxy"_h, &Int16x4Type },
    std::pair{ "xzxx"_h, &Int16x4Type },
    std::pair{ "xzxz"_h, &Int16x4Type },
    std::pair{ "xzxw"_h, &Int16x4Type },
    std::pair{ "yxwy"_h, &Int16x4Type },
    std::pair{ "yxwx"_h, &Int16x4Type },
    std::pair{ "yxwz"_h, &Int16x4Type },
    std::pair{ "yxww"_h, &Int16x4Type },
    std::pair{ "yxxw"_h, &Int16x4Type },
    std::pair{ "yxxx"_h, &Int16x4Type },
    std::pair{ "yxxy"_h, &Int16x4Type },
    std::pair{ "yxxz"_h, &Int16x4Type },
    std::pair{ "yxyw"_h, &Int16x4Type },
    std::pair{ "yxyz"_h, &Int16x4Type },
    std::pair{ "yxyy"_h, &Int16x4Type },
    std::pair{ "yxyx"_h, &Int16x4Type },
    std::pair{ "yxzz"_h, &Int16x4Type },
    std::pair{ "yxzx"_h, &Int16x4Type },
    std::pair{ "yxzy"_h, &Int16x4Type },
    std::pair{ "yxzw"_h, &Int16x4Type },
    std::pair{ "xyzw"_h, &Int16x4Type },
    std::pair{ "xyzx"_h, &Int16x4Type },
    std::pair{ "xyzy"_h, &Int16x4Type },
    std::pair{ "xyzz"_h, &Int16x4Type },
    std::pair{ "xyxw"_h, &Int16x4Type },
    std::pair{ "xyxz"_h, &Int16x4Type },
    std::pair{ "xyxx"_h, &Int16x4Type },
    std::pair{ "xyxy"_h, &Int16x4Type },
    std::pair{ "xyyy"_h, &Int16x4Type },
    std::pair{ "xyyx"_h, &Int16x4Type },
    std::pair{ "xyyz"_h, &Int16x4Type },
    std::pair{ "xyyw"_h, &Int16x4Type },
    std::pair{ "xyww"_h, &Int16x4Type },
    std::pair{ "xywz"_h, &Int16x4Type },
    std::pair{ "xywy"_h, &Int16x4Type },
    std::pair{ "xywx"_h, &Int16x4Type },
    std::pair{ "ggrr"_h, &Int16x4Type },
    std::pair{ "ggrb"_h, &Int16x4Type },
    std::pair{ "ggra"_h, &Int16x4Type },
    std::pair{ "ggrg"_h, &Int16x4Type },
    std::pair{ "ggbb"_h, &Int16x4Type },
    std::pair{ "ggba"_h, &Int16x4Type },
    std::pair{ "ggbg"_h, &Int16x4Type },
    std::pair{ "ggbr"_h, &Int16x4Type },
    std::pair{ "ggar"_h, &Int16x4Type },
    std::pair{ "ggag"_h, &Int16x4Type },
    std::pair{ "ggab"_h, &Int16x4Type },
    std::pair{ "ggaa"_h, &Int16x4Type },
    std::pair{ "gggr"_h, &Int16x4Type },
    std::pair{ "gggg"_h, &Int16x4Type },
    std::pair{ "ggga"_h, &Int16x4Type },
    std::pair{ "gggb"_h, &Int16x4Type },
    std::pair{ "yyww"_h, &Int16x4Type },
    std::pair{ "yywx"_h, &Int16x4Type },
    std::pair{ "yywy"_h, &Int16x4Type },
    std::pair{ "yywz"_h, &Int16x4Type },
    std::pair{ "yyzw"_h, &Int16x4Type },
    std::pair{ "yyzz"_h, &Int16x4Type },
    std::pair{ "yyzy"_h, &Int16x4Type },
    std::pair{ "yyzx"_h, &Int16x4Type },
    std::pair{ "yyyz"_h, &Int16x4Type },
    std::pair{ "yyyx"_h, &Int16x4Type },
    std::pair{ "yyyy"_h, &Int16x4Type },
    std::pair{ "yyyw"_h, &Int16x4Type },
    std::pair{ "yyxy"_h, &Int16x4Type },
    std::pair{ "yyxx"_h, &Int16x4Type },
    std::pair{ "yyxz"_h, &Int16x4Type },
    std::pair{ "yyxw"_h, &Int16x4Type },
    std::pair{ "xxyx"_h, &Int16x4Type },
    std::pair{ "xxyy"_h, &Int16x4Type },
    std::pair{ "xxyz"_h, &Int16x4Type },
    std::pair{ "xxyw"_h, &Int16x4Type },
    std::pair{ "xxxz"_h, &Int16x4Type },
    std::pair{ "xxxy"_h, &Int16x4Type },
    std::pair{ "xxxx"_h, &Int16x4Type },
    std::pair{ "xxxw"_h, &Int16x4Type },
    std::pair{ "xxzw"_h, &Int16x4Type },
    std::pair{ "xxzy"_h, &Int16x4Type },
    std::pair{ "xxzx"_h, &Int16x4Type },
    std::pair{ "xxzz"_h, &Int16x4Type },
    std::pair{ "xxwz"_h, &Int16x4Type },
    std::pair{ "xxwx"_h, &Int16x4Type },
    std::pair{ "xxwy"_h, &Int16x4Type },
    std::pair{ "xxww"_h, &Int16x4Type },
    std::pair{ "rgrg"_h, &Int16x4Type },
    std::pair{ "rgra"_h, &Int16x4Type },
    std::pair{ "rgrb"_h, &Int16x4Type },
    std::pair{ "rgrr"_h, &Int16x4Type },
    std::pair{ "rggb"_h, &Int16x4Type },
    std::pair{ "rgga"_h, &Int16x4Type },
    std::pair{ "rggg"_h, &Int16x4Type },
    std::pair{ "rggr"_h, &Int16x4Type },
    std::pair{ "rgbr"_h, &Int16x4Type },
    std::pair{ "rgbg"_h, &Int16x4Type },
    std::pair{ "rgba"_h, &Int16x4Type },
    std::pair{ "rgbb"_h, &Int16x4Type },
    std::pair{ "rgar"_h, &Int16x4Type },
    std::pair{ "rgag"_h, &Int16x4Type },
    std::pair{ "rgaa"_h, &Int16x4Type },
    std::pair{ "rgab"_h, &Int16x4Type },
    std::pair{ "operator>(i16x4)"_h, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "www"_h, &Int16x3Type },
    std::pair{ "wwz"_h, &Int16x3Type },
    std::pair{ "wwy"_h, &Int16x3Type },
    std::pair{ "wwx"_h, &Int16x3Type },
    std::pair{ "wzw"_h, &Int16x3Type },
    std::pair{ "wzx"_h, &Int16x3Type },
    std::pair{ "wzy"_h, &Int16x3Type },
    std::pair{ "wzz"_h, &Int16x3Type },
    std::pair{ "wxz"_h, &Int16x3Type },
    std::pair{ "wxx"_h, &Int16x3Type },
    std::pair{ "wxy"_h, &Int16x3Type },
    std::pair{ "wxw"_h, &Int16x3Type },
    std::pair{ "wyy"_h, &Int16x3Type },
    std::pair{ "wyx"_h, &Int16x3Type },
    std::pair{ "wyz"_h, &Int16x3Type },
    std::pair{ "wyw"_h, &Int16x3Type },
    std::pair{ "yzzw"_h, &Int16x4Type },
    std::pair{ "yzzx"_h, &Int16x4Type },
    std::pair{ "yzzy"_h, &Int16x4Type },
    std::pair{ "yzzz"_h, &Int16x4Type },
    std::pair{ "yzxw"_h, &Int16x4Type },
    std::pair{ "yzxz"_h, &Int16x4Type },
    std::pair{ "yzxx"_h, &Int16x4Type },
    std::pair{ "yzxy"_h, &Int16x4Type },
    std::pair{ "yzyy"_h, &Int16x4Type },
    std::pair{ "yzyx"_h, &Int16x4Type },
    std::pair{ "yzyz"_h, &Int16x4Type },
    std::pair{ "yzyw"_h, &Int16x4Type },
    std::pair{ "yzww"_h, &Int16x4Type },
    std::pair{ "yzwz"_h, &Int16x4Type },
    std::pair{ "yzwy"_h, &Int16x4Type },
    std::pair{ "yzwx"_h, &Int16x4Type },
    std::pair{ "operator<<(i16x4)"_h, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "rarb"_h, &Int16x4Type },
    std::pair{ "rara"_h, &Int16x4Type },
    std::pair{ "rarg"_h, &Int16x4Type },
    std::pair{ "rarr"_h, &Int16x4Type },
    std::pair{ "raga"_h, &Int16x4Type },
    std::pair{ "ragb"_h, &Int16x4Type },
    std::pair{ "ragg"_h, &Int16x4Type },
    std::pair{ "ragr"_h, &Int16x4Type },
    std::pair{ "raag"_h, &Int16x4Type },
    std::pair{ "raab"_h, &Int16x4Type },
    std::pair{ "raaa"_h, &Int16x4Type },
    std::pair{ "raar"_h, &Int16x4Type },
    std::pair{ "rabr"_h, &Int16x4Type },
    std::pair{ "rabb"_h, &Int16x4Type },
    std::pair{ "raba"_h, &Int16x4Type },
    std::pair{ "rabg"_h, &Int16x4Type },
    std::pair{ "operator^=(i16x4)"_h, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "gbgr"_h, &Int16x4Type },
    std::pair{ "gbga"_h, &Int16x4Type },
    std::pair{ "gbgb"_h, &Int16x4Type },
    std::pair{ "gbgg"_h, &Int16x4Type },
    std::pair{ "gbar"_h, &Int16x4Type },
    std::pair{ "gbag"_h, &Int16x4Type },
    std::pair{ "gbab"_h, &Int16x4Type },
    std::pair{ "gbaa"_h, &Int16x4Type },
    std::pair{ "gbbb"_h, &Int16x4Type },
    std::pair{ "gbba"_h, &Int16x4Type },
    std::pair{ "gbbg"_h, &Int16x4Type },
    std::pair{ "gbbr"_h, &Int16x4Type },
    std::pair{ "gbrr"_h, &Int16x4Type },
    std::pair{ "gbrb"_h, &Int16x4Type },
    std::pair{ "gbra"_h, &Int16x4Type },
    std::pair{ "gbrg"_h, &Int16x4Type },
    std::pair{ "operator==(i16x4)"_h, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator<(i16x4)"_h, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator*=(i16x4)"_h, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator&=(i16x4)"_h, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "rbrg"_h, &Int16x4Type },
    std::pair{ "rbra"_h, &Int16x4Type },
    std::pair{ "rbrb"_h, &Int16x4Type },
    std::pair{ "rbrr"_h, &Int16x4Type },
    std::pair{ "rbgr"_h, &Int16x4Type },
    std::pair{ "rbgg"_h, &Int16x4Type },
    std::pair{ "rbgb"_h, &Int16x4Type },
    std::pair{ "rbga"_h, &Int16x4Type },
    std::pair{ "rbar"_h, &Int16x4Type },
    std::pair{ "rbag"_h, &Int16x4Type },
    std::pair{ "rbaa"_h, &Int16x4Type },
    std::pair{ "rbab"_h, &Int16x4Type },
    std::pair{ "rbbr"_h, &Int16x4Type },
    std::pair{ "rbbg"_h, &Int16x4Type },
    std::pair{ "rbba"_h, &Int16x4Type },
    std::pair{ "rbbb"_h, &Int16x4Type },
    std::pair{ "zyxx"_h, &Int16x4Type },
    std::pair{ "zyxy"_h, &Int16x4Type },
    std::pair{ "zyxz"_h, &Int16x4Type },
    std::pair{ "zyxw"_h, &Int16x4Type },
    std::pair{ "zyyz"_h, &Int16x4Type },
    std::pair{ "zyyy"_h, &Int16x4Type },
    std::pair{ "zyyx"_h, &Int16x4Type },
    std::pair{ "zyyw"_h, &Int16x4Type },
    std::pair{ "zyzw"_h, &Int16x4Type },
    std::pair{ "zyzz"_h, &Int16x4Type },
    std::pair{ "zyzx"_h, &Int16x4Type },
    std::pair{ "zyzy"_h, &Int16x4Type },
    std::pair{ "zyww"_h, &Int16x4Type },
    std::pair{ "zywy"_h, &Int16x4Type },
    std::pair{ "zywx"_h, &Int16x4Type },
    std::pair{ "zywz"_h, &Int16x4Type },
    std::pair{ "bggr"_h, &Int16x4Type },
    std::pair{ "bggb"_h, &Int16x4Type },
    std::pair{ "bgga"_h, &Int16x4Type },
    std::pair{ "bggg"_h, &Int16x4Type },
    std::pair{ "bgbg"_h, &Int16x4Type },
    std::pair{ "bgba"_h, &Int16x4Type },
    std::pair{ "bgbb"_h, &Int16x4Type },
    std::pair{ "bgbr"_h, &Int16x4Type },
    std::pair{ "bgag"_h, &Int16x4Type },
    std::pair{ "bgaa"_h, &Int16x4Type },
    std::pair{ "bgab"_h, &Int16x4Type },
    std::pair{ "bgar"_h, &Int16x4Type },
    std::pair{ "bgrr"_h, &Int16x4Type },
    std::pair{ "bgrg"_h, &Int16x4Type },
    std::pair{ "bgra"_h, &Int16x4Type },
    std::pair{ "bgrb"_h, &Int16x4Type },
    std::pair{ "arrr"_h, &Int16x4Type },
    std::pair{ "arra"_h, &Int16x4Type },
    std::pair{ "arrb"_h, &Int16x4Type },
    std::pair{ "arrg"_h, &Int16x4Type },
    std::pair{ "arba"_h, &Int16x4Type },
    std::pair{ "arbb"_h, &Int16x4Type },
    std::pair{ "arbg"_h, &Int16x4Type },
    std::pair{ "arbr"_h, &Int16x4Type },
    std::pair{ "araa"_h, &Int16x4Type },
    std::pair{ "arab"_h, &Int16x4Type },
    std::pair{ "arag"_h, &Int16x4Type },
    std::pair{ "arar"_h, &Int16x4Type },
    std::pair{ "argg"_h, &Int16x4Type },
    std::pair{ "argb"_h, &Int16x4Type },
    std::pair{ "arga"_h, &Int16x4Type },
    std::pair{ "argr"_h, &Int16x4Type },
    std::pair{ "rrg"_h, &Int16x3Type },
    std::pair{ "rra"_h, &Int16x3Type },
    std::pair{ "rrb"_h, &Int16x3Type },
    std::pair{ "rrr"_h, &Int16x3Type },
    std::pair{ "rgr"_h, &Int16x3Type },
    std::pair{ "rgg"_h, &Int16x3Type },
    std::pair{ "rgb"_h, &Int16x3Type },
    std::pair{ "rga"_h, &Int16x3Type },
    std::pair{ "rar"_h, &Int16x3Type },
    std::pair{ "rag"_h, &Int16x3Type },
    std::pair{ "raa"_h, &Int16x3Type },
    std::pair{ "rab"_h, &Int16x3Type },
    std::pair{ "rbr"_h, &Int16x3Type },
    std::pair{ "rbg"_h, &Int16x3Type },
    std::pair{ "rba"_h, &Int16x3Type },
    std::pair{ "rbb"_h, &Int16x3Type },
    std::pair{ "gagg"_h, &Int16x4Type },
    std::pair{ "gagb"_h, &Int16x4Type },
    std::pair{ "gaga"_h, &Int16x4Type },
    std::pair{ "gagr"_h, &Int16x4Type },
    std::pair{ "gaag"_h, &Int16x4Type },
    std::pair{ "gaaa"_h, &Int16x4Type },
    std::pair{ "gaab"_h, &Int16x4Type },
    std::pair{ "gaar"_h, &Int16x4Type },
    std::pair{ "gabg"_h, &Int16x4Type },
    std::pair{ "gaba"_h, &Int16x4Type },
    std::pair{ "gabb"_h, &Int16x4Type },
    std::pair{ "gabr"_h, &Int16x4Type },
    std::pair{ "garr"_h, &Int16x4Type },
    std::pair{ "garg"_h, &Int16x4Type },
    std::pair{ "gara"_h, &Int16x4Type },
    std::pair{ "garb"_h, &Int16x4Type },
    std::pair{ "operator[](u32)"_h, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator^(i16x4)"_h, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator/(i16x4)"_h, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator<<="_h, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "zxzz"_h, &Int16x4Type },
    std::pair{ "zxzy"_h, &Int16x4Type },
    std::pair{ "zxzx"_h, &Int16x4Type },
    std::pair{ "zxzw"_h, &Int16x4Type },
    std::pair{ "zxyw"_h, &Int16x4Type },
    std::pair{ "zxyz"_h, &Int16x4Type },
    std::pair{ "zxyx"_h, &Int16x4Type },
    std::pair{ "zxyy"_h, &Int16x4Type },
    std::pair{ "zxxw"_h, &Int16x4Type },
    std::pair{ "zxxy"_h, &Int16x4Type },
    std::pair{ "zxxx"_h, &Int16x4Type },
    std::pair{ "zxxz"_h, &Int16x4Type },
    std::pair{ "zxwx"_h, &Int16x4Type },
    std::pair{ "zxwy"_h, &Int16x4Type },
    std::pair{ "zxwz"_h, &Int16x4Type },
    std::pair{ "zxww"_h, &Int16x4Type },
    std::pair{ "bagr"_h, &Int16x4Type },
    std::pair{ "baga"_h, &Int16x4Type },
    std::pair{ "bagb"_h, &Int16x4Type },
    std::pair{ "bagg"_h, &Int16x4Type },
    std::pair{ "baar"_h, &Int16x4Type },
    std::pair{ "baag"_h, &Int16x4Type },
    std::pair{ "baab"_h, &Int16x4Type },
    std::pair{ "baaa"_h, &Int16x4Type },
    std::pair{ "babb"_h, &Int16x4Type },
    std::pair{ "baba"_h, &Int16x4Type },
    std::pair{ "babg"_h, &Int16x4Type },
    std::pair{ "babr"_h, &Int16x4Type },
    std::pair{ "operator-(i16x4)"_h, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "barr"_h, &Int16x4Type },
    std::pair{ "barb"_h, &Int16x4Type },
    std::pair{ "bara"_h, &Int16x4Type },
    std::pair{ "barg"_h, &Int16x4Type },
    std::pair{ "operator[](u16)"_h, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator>>="_h, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "wwwx"_h, &Int16x4Type },
    std::pair{ "wwwy"_h, &Int16x4Type },
    std::pair{ "wwwz"_h, &Int16x4Type },
    std::pair{ "wwww"_h, &Int16x4Type },
    std::pair{ "wwzz"_h, &Int16x4Type },
    std::pair{ "wwzy"_h, &Int16x4Type },
    std::pair{ "wwzx"_h, &Int16x4Type },
    std::pair{ "wwzw"_h, &Int16x4Type },
    std::pair{ "wwyz"_h, &Int16x4Type },
    std::pair{ "wwyx"_h, &Int16x4Type },
    std::pair{ "wwyy"_h, &Int16x4Type },
    std::pair{ "wwyw"_h, &Int16x4Type },
    std::pair{ "wwxw"_h, &Int16x4Type },
    std::pair{ "wwxy"_h, &Int16x4Type },
    std::pair{ "wwxx"_h, &Int16x4Type },
    std::pair{ "wwxz"_h, &Int16x4Type },
    std::pair{ "zzww"_h, &Int16x4Type },
    std::pair{ "zzwz"_h, &Int16x4Type },
    std::pair{ "zzwx"_h, &Int16x4Type },
    std::pair{ "zzwy"_h, &Int16x4Type },
    std::pair{ "zzyw"_h, &Int16x4Type },
    std::pair{ "zzyx"_h, &Int16x4Type },
    std::pair{ "zzyy"_h, &Int16x4Type },
    std::pair{ "zzyz"_h, &Int16x4Type },
    std::pair{ "zzxw"_h, &Int16x4Type },
    std::pair{ "zzxz"_h, &Int16x4Type },
    std::pair{ "zzxy"_h, &Int16x4Type },
    std::pair{ "zzxx"_h, &Int16x4Type },
    std::pair{ "zzzy"_h, &Int16x4Type },
    std::pair{ "zzzx"_h, &Int16x4Type },
    std::pair{ "zzzz"_h, &Int16x4Type },
    std::pair{ "zzzw"_h, &Int16x4Type },
    std::pair{ "operator*(f16)"_h, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*(i16x4)"_h, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "g"_h, &Int16Type },
    std::pair{ "a"_h, &Int16Type },
    std::pair{ "b"_h, &Int16Type },
    std::pair{ "w"_h, &Int16Type },
    std::pair{ "r"_h, &Int16Type },
    std::pair{ "y"_h, &Int16Type },
    std::pair{ "x"_h, &Int16Type },
    std::pair{ "z"_h, &Int16Type },
    std::pair{ "bbgg"_h, &Int16x4Type },
    std::pair{ "bbgb"_h, &Int16x4Type },
    std::pair{ "bbga"_h, &Int16x4Type },
    std::pair{ "bbgr"_h, &Int16x4Type },
    std::pair{ "bbag"_h, &Int16x4Type },
    std::pair{ "bbaa"_h, &Int16x4Type },
    std::pair{ "bbab"_h, &Int16x4Type },
    std::pair{ "bbar"_h, &Int16x4Type },
    std::pair{ "bbbg"_h, &Int16x4Type },
    std::pair{ "bbba"_h, &Int16x4Type },
    std::pair{ "bbbb"_h, &Int16x4Type },
    std::pair{ "bbbr"_h, &Int16x4Type },
    std::pair{ "bbrr"_h, &Int16x4Type },
    std::pair{ "bbrg"_h, &Int16x4Type },
    std::pair{ "bbra"_h, &Int16x4Type },
    std::pair{ "bbrb"_h, &Int16x4Type },
    std::pair{ "ywy"_h, &Int16x3Type },
    std::pair{ "ywx"_h, &Int16x3Type },
    std::pair{ "ywz"_h, &Int16x3Type },
    std::pair{ "yww"_h, &Int16x3Type },
    std::pair{ "yxw"_h, &Int16x3Type },
    std::pair{ "yxx"_h, &Int16x3Type },
    std::pair{ "yxy"_h, &Int16x3Type },
    std::pair{ "yxz"_h, &Int16x3Type },
    std::pair{ "yyw"_h, &Int16x3Type },
    std::pair{ "yyz"_h, &Int16x3Type },
    std::pair{ "yyy"_h, &Int16x3Type },
    std::pair{ "yyx"_h, &Int16x3Type },
    std::pair{ "yzz"_h, &Int16x3Type },
    std::pair{ "yzx"_h, &Int16x3Type },
    std::pair{ "yzy"_h, &Int16x3Type },
    std::pair{ "yzw"_h, &Int16x3Type },
    std::pair{ "operator-=(i16x4)"_h, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator>>(i16x4)"_h, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "zwzx"_h, &Int16x4Type },
    std::pair{ "zwzy"_h, &Int16x4Type },
    std::pair{ "zwzz"_h, &Int16x4Type },
    std::pair{ "zwzw"_h, &Int16x4Type },
    std::pair{ "zwxw"_h, &Int16x4Type },
    std::pair{ "zwxz"_h, &Int16x4Type },
    std::pair{ "zwxx"_h, &Int16x4Type },
    std::pair{ "zwxy"_h, &Int16x4Type },
    std::pair{ "zwyw"_h, &Int16x4Type },
    std::pair{ "zwyy"_h, &Int16x4Type },
    std::pair{ "zwyx"_h, &Int16x4Type },
    std::pair{ "zwyz"_h, &Int16x4Type },
    std::pair{ "zwwz"_h, &Int16x4Type },
    std::pair{ "zwwy"_h, &Int16x4Type },
    std::pair{ "zwwx"_h, &Int16x4Type },
    std::pair{ "zwww"_h, &Int16x4Type },
    std::pair{ "xww"_h, &Int16x3Type },
    std::pair{ "xwx"_h, &Int16x3Type },
    std::pair{ "xwy"_h, &Int16x3Type },
    std::pair{ "xwz"_h, &Int16x3Type },
    std::pair{ "xzw"_h, &Int16x3Type },
    std::pair{ "xzz"_h, &Int16x3Type },
    std::pair{ "xzy"_h, &Int16x3Type },
    std::pair{ "xzx"_h, &Int16x3Type },
    std::pair{ "xyz"_h, &Int16x3Type },
    std::pair{ "xyx"_h, &Int16x3Type },
    std::pair{ "xyy"_h, &Int16x3Type },
    std::pair{ "xyw"_h, &Int16x3Type },
    std::pair{ "xxy"_h, &Int16x3Type },
    std::pair{ "xxx"_h, &Int16x3Type },
    std::pair{ "xxz"_h, &Int16x3Type },
    std::pair{ "xxw"_h, &Int16x3Type },
    std::pair{ "operator*(i16)"_h, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|(i16x4)"_h, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator<=(i16x4)"_h, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "zyx"_h, &Int16x3Type },
    std::pair{ "zyy"_h, &Int16x3Type },
    std::pair{ "zyz"_h, &Int16x3Type },
    std::pair{ "zyw"_h, &Int16x3Type },
    std::pair{ "zxz"_h, &Int16x3Type },
    std::pair{ "zxy"_h, &Int16x3Type },
    std::pair{ "zxx"_h, &Int16x3Type },
    std::pair{ "zxw"_h, &Int16x3Type },
    std::pair{ "zzw"_h, &Int16x3Type },
    std::pair{ "zzy"_h, &Int16x3Type },
    std::pair{ "zzx"_h, &Int16x3Type },
    std::pair{ "zzz"_h, &Int16x3Type },
    std::pair{ "zwz"_h, &Int16x3Type },
    std::pair{ "zwx"_h, &Int16x3Type },
    std::pair{ "zwy"_h, &Int16x3Type },
    std::pair{ "zww"_h, &Int16x3Type },
    std::pair{ "operator>=(i16x4)"_h, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "ggr"_h, &Int16x3Type },
    std::pair{ "ggb"_h, &Int16x3Type },
    std::pair{ "gga"_h, &Int16x3Type },
    std::pair{ "ggg"_h, &Int16x3Type },
    std::pair{ "gbg"_h, &Int16x3Type },
    std::pair{ "gba"_h, &Int16x3Type },
    std::pair{ "gbb"_h, &Int16x3Type },
    std::pair{ "gbr"_h, &Int16x3Type },
    std::pair{ "gag"_h, &Int16x3Type },
    std::pair{ "gaa"_h, &Int16x3Type },
    std::pair{ "gab"_h, &Int16x3Type },
    std::pair{ "gar"_h, &Int16x3Type },
    std::pair{ "grr"_h, &Int16x3Type },
    std::pair{ "grg"_h, &Int16x3Type },
    std::pair{ "gra"_h, &Int16x3Type },
    std::pair{ "grb"_h, &Int16x3Type },
    std::pair{ "xwww"_h, &Int16x4Type },
    std::pair{ "xwwy"_h, &Int16x4Type },
    std::pair{ "xwwx"_h, &Int16x4Type },
    std::pair{ "xwwz"_h, &Int16x4Type },
    std::pair{ "xwxx"_h, &Int16x4Type },
    std::pair{ "xwxy"_h, &Int16x4Type },
    std::pair{ "xwxz"_h, &Int16x4Type },
    std::pair{ "xwxw"_h, &Int16x4Type },
    std::pair{ "xwyz"_h, &Int16x4Type },
    std::pair{ "xwyy"_h, &Int16x4Type },
    std::pair{ "xwyx"_h, &Int16x4Type },
    std::pair{ "xwyw"_h, &Int16x4Type },
    std::pair{ "xwzz"_h, &Int16x4Type },
    std::pair{ "xwzx"_h, &Int16x4Type },
    std::pair{ "xwzy"_h, &Int16x4Type },
    std::pair{ "xwzw"_h, &Int16x4Type },
    std::pair{ "operator+=(i16x4)"_h, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator!=(i16x4)"_h, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator^="_h, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator[]"_h, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Int16x4_operator_index_UInt16 },
    std::pair{ "agrr"_h, &Int16x4Type },
    std::pair{ "agra"_h, &Int16x4Type },
    std::pair{ "agrb"_h, &Int16x4Type },
    std::pair{ "agrg"_h, &Int16x4Type },
    std::pair{ "operator|="_h, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "agar"_h, &Int16x4Type },
    std::pair{ "agaa"_h, &Int16x4Type },
    std::pair{ "agab"_h, &Int16x4Type },
    std::pair{ "agag"_h, &Int16x4Type },
    std::pair{ "agba"_h, &Int16x4Type },
    std::pair{ "agbb"_h, &Int16x4Type },
    std::pair{ "agbg"_h, &Int16x4Type },
    std::pair{ "agbr"_h, &Int16x4Type },
    std::pair{ "aggb"_h, &Int16x4Type },
    std::pair{ "agga"_h, &Int16x4Type },
    std::pair{ "aggg"_h, &Int16x4Type },
    std::pair{ "aggr"_h, &Int16x4Type },
    std::pair{ "operator=="_h, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator<="_h, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator<<"_h, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>="_h, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator>>"_h, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator-="_h, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator/="_h, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator+="_h, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator*="_h, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator&="_h, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator!="_h, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "agr"_h, &Int16x3Type },
    std::pair{ "aga"_h, &Int16x3Type },
    std::pair{ "agb"_h, &Int16x3Type },
    std::pair{ "agg"_h, &Int16x3Type },
    std::pair{ "aar"_h, &Int16x3Type },
    std::pair{ "aag"_h, &Int16x3Type },
    std::pair{ "aab"_h, &Int16x3Type },
    std::pair{ "aaa"_h, &Int16x3Type },
    std::pair{ "abb"_h, &Int16x3Type },
    std::pair{ "aba"_h, &Int16x3Type },
    std::pair{ "abg"_h, &Int16x3Type },
    std::pair{ "abr"_h, &Int16x3Type },
    std::pair{ "arr"_h, &Int16x3Type },
    std::pair{ "arb"_h, &Int16x3Type },
    std::pair{ "ara"_h, &Int16x3Type },
    std::pair{ "arg"_h, &Int16x3Type },
    std::pair{ "operator|=(i16x4)"_h, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "aarr"_h, &Int16x4Type },
    std::pair{ "aarg"_h, &Int16x4Type },
    std::pair{ "aarb"_h, &Int16x4Type },
    std::pair{ "aara"_h, &Int16x4Type },
    std::pair{ "aagr"_h, &Int16x4Type },
    std::pair{ "aaga"_h, &Int16x4Type },
    std::pair{ "aagb"_h, &Int16x4Type },
    std::pair{ "aagg"_h, &Int16x4Type },
    std::pair{ "aabg"_h, &Int16x4Type },
    std::pair{ "aabb"_h, &Int16x4Type },
    std::pair{ "aaba"_h, &Int16x4Type },
    std::pair{ "aabr"_h, &Int16x4Type },
    std::pair{ "aaab"_h, &Int16x4Type },
    std::pair{ "aaaa"_h, &Int16x4Type },
    std::pair{ "aaag"_h, &Int16x4Type },
    std::pair{ "aaar"_h, &Int16x4Type },
    std::pair{ "operator[](i32)"_h, &Int16x4_operator_index_Int32 },
    std::pair{ "grrb"_h, &Int16x4Type },
    std::pair{ "grra"_h, &Int16x4Type },
    std::pair{ "grrg"_h, &Int16x4Type },
    std::pair{ "grrr"_h, &Int16x4Type },
    std::pair{ "grga"_h, &Int16x4Type },
    std::pair{ "grgb"_h, &Int16x4Type },
    std::pair{ "grgg"_h, &Int16x4Type },
    std::pair{ "grgr"_h, &Int16x4Type },
    std::pair{ "grag"_h, &Int16x4Type },
    std::pair{ "grab"_h, &Int16x4Type },
    std::pair{ "graa"_h, &Int16x4Type },
    std::pair{ "grar"_h, &Int16x4Type },
    std::pair{ "grbr"_h, &Int16x4Type },
    std::pair{ "grbb"_h, &Int16x4Type },
    std::pair{ "grba"_h, &Int16x4Type },
    std::pair{ "grbg"_h, &Int16x4Type },
    std::pair{ "abbr"_h, &Int16x4Type },
    std::pair{ "abba"_h, &Int16x4Type },
    std::pair{ "abbb"_h, &Int16x4Type },
    std::pair{ "abbg"_h, &Int16x4Type },
    std::pair{ "abar"_h, &Int16x4Type },
    std::pair{ "abaa"_h, &Int16x4Type },
    std::pair{ "abab"_h, &Int16x4Type },
    std::pair{ "abag"_h, &Int16x4Type },
    std::pair{ "abgr"_h, &Int16x4Type },
    std::pair{ "abgg"_h, &Int16x4Type },
    std::pair{ "abgb"_h, &Int16x4Type },
    std::pair{ "abga"_h, &Int16x4Type },
    std::pair{ "abra"_h, &Int16x4Type },
    std::pair{ "abrb"_h, &Int16x4Type },
    std::pair{ "abrg"_h, &Int16x4Type },
    std::pair{ "abrr"_h, &Int16x4Type },
    std::pair{ "rrgg"_h, &Int16x4Type },
    std::pair{ "rrgb"_h, &Int16x4Type },
    std::pair{ "rrga"_h, &Int16x4Type },
    std::pair{ "rrgr"_h, &Int16x4Type },
    std::pair{ "rrag"_h, &Int16x4Type },
    std::pair{ "rraa"_h, &Int16x4Type },
    std::pair{ "rrab"_h, &Int16x4Type },
    std::pair{ "rrar"_h, &Int16x4Type },
    std::pair{ "rrbg"_h, &Int16x4Type },
    std::pair{ "rrba"_h, &Int16x4Type },
    std::pair{ "rrbb"_h, &Int16x4Type },
    std::pair{ "rrbr"_h, &Int16x4Type },
    std::pair{ "rrrr"_h, &Int16x4Type },
    std::pair{ "rrrg"_h, &Int16x4Type },
    std::pair{ "rrra"_h, &Int16x4Type },
    std::pair{ "rrrb"_h, &Int16x4Type }
    };

Int16x4::Int16x4()
{
    this->name = "i16x4"_c;
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    /// operator[] with Int32
    Int16x4_operator_index_Int32_arg.name = "arg"_c;
    Int16x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int16x4_operator_index_Int32.name = Int16x4_operator_index_Int32_name;
    Int16x4_operator_index_Int32.backendIndex = 1094;
    Int16x4_operator_index_Int32.returnType = Type::FullType { Int16Type.name };
    Int16x4_operator_index_Int32.parameters = Int16x4_operator_index_Int32_args;
    Symbol::Resolved(&Int16x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x4_operator_index_Int32)->signature = "operator[](i32) i16"_c;
    Symbol::Resolved(&Int16x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int16x4_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int16x4_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt32
    Int16x4_operator_index_UInt32_arg.name = "arg"_c;
    Int16x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int16x4_operator_index_UInt32.name = Int16x4_operator_index_UInt32_name;
    Int16x4_operator_index_UInt32.backendIndex = 1095;
    Int16x4_operator_index_UInt32.returnType = Type::FullType { Int16Type.name };
    Int16x4_operator_index_UInt32.parameters = Int16x4_operator_index_UInt32_args;
    Symbol::Resolved(&Int16x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x4_operator_index_UInt32)->signature = "operator[](u32) i16"_c;
    Symbol::Resolved(&Int16x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int16x4_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int16x4_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    /// operator[] with Int16
    Int16x4_operator_index_Int16_arg.name = "arg"_c;
    Int16x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x4_operator_index_Int16.name = Int16x4_operator_index_Int16_name;
    Int16x4_operator_index_Int16.backendIndex = 1096;
    Int16x4_operator_index_Int16.returnType = Type::FullType { Int16Type.name };
    Int16x4_operator_index_Int16.parameters = Int16x4_operator_index_Int16_args;
    Symbol::Resolved(&Int16x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_operator_index_Int16)->signature = "operator[](i16) i16"_c;
    Symbol::Resolved(&Int16x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int16x4_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int16x4_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt16
    Int16x4_operator_index_UInt16_arg.name = "arg"_c;
    Int16x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x4_operator_index_UInt16.name = Int16x4_operator_index_UInt16_name;
    Int16x4_operator_index_UInt16.backendIndex = 1097;
    Int16x4_operator_index_UInt16.returnType = Type::FullType { Int16Type.name };
    Int16x4_operator_index_UInt16.parameters = Int16x4_operator_index_UInt16_args;
    Symbol::Resolved(&Int16x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x4_operator_index_UInt16)->signature = "operator[](u16) i16"_c;
    Symbol::Resolved(&Int16x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int16x4_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int16x4_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    /// operator+ with Int16x4
    Int16x4_operator_add_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_add_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_add_Int16x4.name = Int16x4_operator_add_Int16x4_name;
    Int16x4_operator_add_Int16x4.backendIndex = 1098;
    Int16x4_operator_add_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_add_Int16x4.parameters = Int16x4_operator_add_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_add_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_add_Int16x4)->signature = "operator+(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_add_Int16x4)->name = "operator+(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_add_Int16x4)->nameWithVarNames = "operator+(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_add_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator- with Int16x4
    Int16x4_operator_sub_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_sub_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_sub_Int16x4.name = Int16x4_operator_sub_Int16x4_name;
    Int16x4_operator_sub_Int16x4.backendIndex = 1099;
    Int16x4_operator_sub_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_sub_Int16x4.parameters = Int16x4_operator_sub_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_sub_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_sub_Int16x4)->signature = "operator-(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_sub_Int16x4)->name = "operator-(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_sub_Int16x4)->nameWithVarNames = "operator-(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_sub_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator* with Int16x4
    Int16x4_operator_mul_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_mul_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_mul_Int16x4.name = Int16x4_operator_mul_Int16x4_name;
    Int16x4_operator_mul_Int16x4.backendIndex = 1100;
    Int16x4_operator_mul_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_mul_Int16x4.parameters = Int16x4_operator_mul_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_mul_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_mul_Int16x4)->signature = "operator*(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_mul_Int16x4)->name = "operator*(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_mul_Int16x4)->nameWithVarNames = "operator*(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_mul_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator/ with Int16x4
    Int16x4_operator_div_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_div_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_div_Int16x4.name = Int16x4_operator_div_Int16x4_name;
    Int16x4_operator_div_Int16x4.backendIndex = 1101;
    Int16x4_operator_div_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_div_Int16x4.parameters = Int16x4_operator_div_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_div_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_div_Int16x4)->signature = "operator/(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_div_Int16x4)->name = "operator/(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_div_Int16x4)->nameWithVarNames = "operator/(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_div_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator% with Int16x4
    Int16x4_operator_mod_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_mod_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_mod_Int16x4.name = Int16x4_operator_mod_Int16x4_name;
    Int16x4_operator_mod_Int16x4.backendIndex = 1102;
    Int16x4_operator_mod_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_mod_Int16x4.parameters = Int16x4_operator_mod_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_mod_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_mod_Int16x4)->signature = "operator%(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_mod_Int16x4)->name = "operator%(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_mod_Int16x4)->nameWithVarNames = "operator%(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_mod_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator+= with Int16x4
    Int16x4_operator_addasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_addasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_addasg_Int16x4.name = Int16x4_operator_addasg_Int16x4_name;
    Int16x4_operator_addasg_Int16x4.backendIndex = 1103;
    Int16x4_operator_addasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_addasg_Int16x4.parameters = Int16x4_operator_addasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_addasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_addasg_Int16x4)->signature = "operator+=(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_addasg_Int16x4)->name = "operator+=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_addasg_Int16x4)->nameWithVarNames = "operator+=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_addasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator-= with Int16x4
    Int16x4_operator_subasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_subasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_subasg_Int16x4.name = Int16x4_operator_subasg_Int16x4_name;
    Int16x4_operator_subasg_Int16x4.backendIndex = 1104;
    Int16x4_operator_subasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_subasg_Int16x4.parameters = Int16x4_operator_subasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_subasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_subasg_Int16x4)->signature = "operator-=(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_subasg_Int16x4)->name = "operator-=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_subasg_Int16x4)->nameWithVarNames = "operator-=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_subasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator*= with Int16x4
    Int16x4_operator_mulasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_mulasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_mulasg_Int16x4.name = Int16x4_operator_mulasg_Int16x4_name;
    Int16x4_operator_mulasg_Int16x4.backendIndex = 1105;
    Int16x4_operator_mulasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_mulasg_Int16x4.parameters = Int16x4_operator_mulasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_mulasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_mulasg_Int16x4)->signature = "operator*=(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_mulasg_Int16x4)->name = "operator*=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_mulasg_Int16x4)->nameWithVarNames = "operator*=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_mulasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator/= with Int16x4
    Int16x4_operator_divasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_divasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_divasg_Int16x4.name = Int16x4_operator_divasg_Int16x4_name;
    Int16x4_operator_divasg_Int16x4.backendIndex = 1106;
    Int16x4_operator_divasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_divasg_Int16x4.parameters = Int16x4_operator_divasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_divasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_divasg_Int16x4)->signature = "operator/=(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_divasg_Int16x4)->name = "operator/=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_divasg_Int16x4)->nameWithVarNames = "operator/=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_divasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator< with Int16x4
    Int16x4_operator_lt_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_lt_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_lt_Int16x4.name = Int16x4_operator_lt_Int16x4_name;
    Int16x4_operator_lt_Int16x4.backendIndex = 1107;
    Int16x4_operator_lt_Int16x4.returnType = Type::FullType { Bool8x4Type.name };
    Int16x4_operator_lt_Int16x4.parameters = Int16x4_operator_lt_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_lt_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_lt_Int16x4)->signature = "operator<(i16x4) b8x4"_c;
    Symbol::Resolved(&Int16x4_operator_lt_Int16x4)->name = "operator<(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lt_Int16x4)->nameWithVarNames = "operator<(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lt_Int16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator<= with Int16x4
    Int16x4_operator_lte_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_lte_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_lte_Int16x4.name = Int16x4_operator_lte_Int16x4_name;
    Int16x4_operator_lte_Int16x4.backendIndex = 1108;
    Int16x4_operator_lte_Int16x4.returnType = Type::FullType { Bool8x4Type.name };
    Int16x4_operator_lte_Int16x4.parameters = Int16x4_operator_lte_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_lte_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_lte_Int16x4)->signature = "operator<=(i16x4) b8x4"_c;
    Symbol::Resolved(&Int16x4_operator_lte_Int16x4)->name = "operator<=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lte_Int16x4)->nameWithVarNames = "operator<=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lte_Int16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator> with Int16x4
    Int16x4_operator_gt_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_gt_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_gt_Int16x4.name = Int16x4_operator_gt_Int16x4_name;
    Int16x4_operator_gt_Int16x4.backendIndex = 1109;
    Int16x4_operator_gt_Int16x4.returnType = Type::FullType { Bool8x4Type.name };
    Int16x4_operator_gt_Int16x4.parameters = Int16x4_operator_gt_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_gt_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_gt_Int16x4)->signature = "operator>(i16x4) b8x4"_c;
    Symbol::Resolved(&Int16x4_operator_gt_Int16x4)->name = "operator>(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_gt_Int16x4)->nameWithVarNames = "operator>(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_gt_Int16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator>= with Int16x4
    Int16x4_operator_gte_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_gte_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_gte_Int16x4.name = Int16x4_operator_gte_Int16x4_name;
    Int16x4_operator_gte_Int16x4.backendIndex = 1110;
    Int16x4_operator_gte_Int16x4.returnType = Type::FullType { Bool8x4Type.name };
    Int16x4_operator_gte_Int16x4.parameters = Int16x4_operator_gte_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_gte_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_gte_Int16x4)->signature = "operator>=(i16x4) b8x4"_c;
    Symbol::Resolved(&Int16x4_operator_gte_Int16x4)->name = "operator>=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_gte_Int16x4)->nameWithVarNames = "operator>=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_gte_Int16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator== with Int16x4
    Int16x4_operator_eq_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_eq_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_eq_Int16x4.name = Int16x4_operator_eq_Int16x4_name;
    Int16x4_operator_eq_Int16x4.backendIndex = 1111;
    Int16x4_operator_eq_Int16x4.returnType = Type::FullType { Bool8x4Type.name };
    Int16x4_operator_eq_Int16x4.parameters = Int16x4_operator_eq_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_eq_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_eq_Int16x4)->signature = "operator==(i16x4) b8x4"_c;
    Symbol::Resolved(&Int16x4_operator_eq_Int16x4)->name = "operator==(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_eq_Int16x4)->nameWithVarNames = "operator==(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_eq_Int16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator!= with Int16x4
    Int16x4_operator_neq_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_neq_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_neq_Int16x4.name = Int16x4_operator_neq_Int16x4_name;
    Int16x4_operator_neq_Int16x4.backendIndex = 1112;
    Int16x4_operator_neq_Int16x4.returnType = Type::FullType { Bool8x4Type.name };
    Int16x4_operator_neq_Int16x4.parameters = Int16x4_operator_neq_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_neq_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_neq_Int16x4)->signature = "operator!=(i16x4) b8x4"_c;
    Symbol::Resolved(&Int16x4_operator_neq_Int16x4)->name = "operator!=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_neq_Int16x4)->nameWithVarNames = "operator!=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_neq_Int16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator* with Float16
    Int16x4_operator_scale_Float16_arg.name = "arg"_c;
    Int16x4_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int16x4_operator_scale_Float16.name = Int16x4_operator_scale_Float16_name;
    Int16x4_operator_scale_Float16.backendIndex = 1113;
    Int16x4_operator_scale_Float16.returnType = Type::FullType { Float16x4Type.name };
    Int16x4_operator_scale_Float16.parameters = Int16x4_operator_scale_Float16_args;
    Symbol::Resolved(&Int16x4_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x4_operator_scale_Float16)->signature = "operator*(f16) f16x4"_c;
    Symbol::Resolved(&Int16x4_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Int16x4_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Int16x4_operator_scale_Float16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with UInt16
    Int16x4_operator_scale_UInt16_arg.name = "arg"_c;
    Int16x4_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x4_operator_scale_UInt16.name = Int16x4_operator_scale_UInt16_name;
    Int16x4_operator_scale_UInt16.backendIndex = 1114;
    Int16x4_operator_scale_UInt16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_scale_UInt16.parameters = Int16x4_operator_scale_UInt16_args;
    Symbol::Resolved(&Int16x4_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x4_operator_scale_UInt16)->signature = "operator*(u16) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&Int16x4_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&Int16x4_operator_scale_UInt16)->returnTypeSymbol = &Int16x4Type;

    /// operator* with Int16
    Int16x4_operator_scale_Int16_arg.name = "arg"_c;
    Int16x4_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x4_operator_scale_Int16.name = Int16x4_operator_scale_Int16_name;
    Int16x4_operator_scale_Int16.backendIndex = 1115;
    Int16x4_operator_scale_Int16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_scale_Int16.parameters = Int16x4_operator_scale_Int16_args;
    Symbol::Resolved(&Int16x4_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_operator_scale_Int16)->signature = "operator*(i16) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&Int16x4_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&Int16x4_operator_scale_Int16)->returnTypeSymbol = &Int16x4Type;

    /// operator| with Int16x4
    Int16x4_operator_or_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_or_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_or_Int16x4.name = Int16x4_operator_or_Int16x4_name;
    Int16x4_operator_or_Int16x4.backendIndex = 1116;
    Int16x4_operator_or_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_or_Int16x4.parameters = Int16x4_operator_or_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_or_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_or_Int16x4)->signature = "operator|(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_or_Int16x4)->name = "operator|(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_or_Int16x4)->nameWithVarNames = "operator|(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_or_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator& with Int16x4
    Int16x4_operator_and_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_and_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_and_Int16x4.name = Int16x4_operator_and_Int16x4_name;
    Int16x4_operator_and_Int16x4.backendIndex = 1117;
    Int16x4_operator_and_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_and_Int16x4.parameters = Int16x4_operator_and_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_and_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_and_Int16x4)->signature = "operator&(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_and_Int16x4)->name = "operator&(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_and_Int16x4)->nameWithVarNames = "operator&(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_and_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator^ with Int16x4
    Int16x4_operator_xor_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_xor_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_xor_Int16x4.name = Int16x4_operator_xor_Int16x4_name;
    Int16x4_operator_xor_Int16x4.backendIndex = 1118;
    Int16x4_operator_xor_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_xor_Int16x4.parameters = Int16x4_operator_xor_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_xor_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_xor_Int16x4)->signature = "operator^(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_xor_Int16x4)->name = "operator^(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_xor_Int16x4)->nameWithVarNames = "operator^(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_xor_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator<< with Int16x4
    Int16x4_operator_lsh_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_lsh_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_lsh_Int16x4.name = Int16x4_operator_lsh_Int16x4_name;
    Int16x4_operator_lsh_Int16x4.backendIndex = 1119;
    Int16x4_operator_lsh_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_lsh_Int16x4.parameters = Int16x4_operator_lsh_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_lsh_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_lsh_Int16x4)->signature = "operator<<(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_lsh_Int16x4)->name = "operator<<(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lsh_Int16x4)->nameWithVarNames = "operator<<(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lsh_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator>> with Int16x4
    Int16x4_operator_rsh_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_rsh_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_rsh_Int16x4.name = Int16x4_operator_rsh_Int16x4_name;
    Int16x4_operator_rsh_Int16x4.backendIndex = 1120;
    Int16x4_operator_rsh_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_rsh_Int16x4.parameters = Int16x4_operator_rsh_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_rsh_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_rsh_Int16x4)->signature = "operator>>(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_rsh_Int16x4)->name = "operator>>(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_rsh_Int16x4)->nameWithVarNames = "operator>>(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_rsh_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator|= with Int16x4
    Int16x4_operator_orasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_orasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_orasg_Int16x4.name = Int16x4_operator_orasg_Int16x4_name;
    Int16x4_operator_orasg_Int16x4.backendIndex = 1121;
    Int16x4_operator_orasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_orasg_Int16x4.parameters = Int16x4_operator_orasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_orasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_orasg_Int16x4)->signature = "operator|=(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_orasg_Int16x4)->name = "operator|=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_orasg_Int16x4)->nameWithVarNames = "operator|=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_orasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator&= with Int16x4
    Int16x4_operator_andasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_andasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_andasg_Int16x4.name = Int16x4_operator_andasg_Int16x4_name;
    Int16x4_operator_andasg_Int16x4.backendIndex = 1122;
    Int16x4_operator_andasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_andasg_Int16x4.parameters = Int16x4_operator_andasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_andasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_andasg_Int16x4)->signature = "operator&=(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_andasg_Int16x4)->name = "operator&=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_andasg_Int16x4)->nameWithVarNames = "operator&=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_andasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator^= with Int16x4
    Int16x4_operator_xorasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_xorasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_xorasg_Int16x4.name = Int16x4_operator_xorasg_Int16x4_name;
    Int16x4_operator_xorasg_Int16x4.backendIndex = 1123;
    Int16x4_operator_xorasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_xorasg_Int16x4.parameters = Int16x4_operator_xorasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_xorasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_xorasg_Int16x4)->signature = "operator^=(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_xorasg_Int16x4)->name = "operator^=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_xorasg_Int16x4)->nameWithVarNames = "operator^=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_xorasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator<<= with Int16x4
    Int16x4_operator_lshasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_lshasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_lshasg_Int16x4.name = Int16x4_operator_lshasg_Int16x4_name;
    Int16x4_operator_lshasg_Int16x4.backendIndex = 1124;
    Int16x4_operator_lshasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_lshasg_Int16x4.parameters = Int16x4_operator_lshasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_lshasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_lshasg_Int16x4)->signature = "operator<<=(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_lshasg_Int16x4)->name = "operator<<=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lshasg_Int16x4)->nameWithVarNames = "operator<<=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lshasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator>>= with Int16x4
    Int16x4_operator_rhsasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_rhsasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_rhsasg_Int16x4.name = Int16x4_operator_rhsasg_Int16x4_name;
    Int16x4_operator_rhsasg_Int16x4.backendIndex = 1125;
    Int16x4_operator_rhsasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_rhsasg_Int16x4.parameters = Int16x4_operator_rhsasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_rhsasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_rhsasg_Int16x4)->signature = "operator>>=(i16x4) i16x4"_c;
    Symbol::Resolved(&Int16x4_operator_rhsasg_Int16x4)->name = "operator>>=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_rhsasg_Int16x4)->nameWithVarNames = "operator>>=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_rhsasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    this->scope.symbolLookup = Int16x4_symbolLookup;
}
Int16x4 Int16x4Type;

/// operator[] with Int32
Variable Float32x2x2_operator_index_Int32_arg;
Function Float32x2x2_operator_index_Int32;
inline constexpr std::array Float32x2x2_operator_index_Int32_args = { &Float32x2x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x2x2_operator_index_UInt32_arg;
Function Float32x2x2_operator_index_UInt32;
inline constexpr std::array Float32x2x2_operator_index_UInt32_args = { &Float32x2x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x2x2_operator_index_Int16_arg;
Function Float32x2x2_operator_index_Int16;
inline constexpr std::array Float32x2x2_operator_index_Int16_args = { &Float32x2x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x2x2_operator_index_UInt16_arg;
Function Float32x2x2_operator_index_UInt16;
inline constexpr std::array Float32x2x2_operator_index_UInt16_args = { &Float32x2x2_operator_index_UInt16_arg };

/// operator* with Float32x2
Variable Float32x2x2_transform_Float32x2_vec;
Function Float32x2x2_transform_Float32x2;
inline constexpr std::array Float32x2x2_transform_Float32x2_args = { &Float32x2x2_transform_Float32x2_vec };

/// operator+ with Float32x2x2
Variable Float32x2x2_operator_add_Float32x2x2_arg;
Function Float32x2x2_operator_add_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_add_Float32x2x2_args = { &Float32x2x2_operator_add_Float32x2x2_arg };

/// operator- with Float32x2x2
Variable Float32x2x2_operator_sub_Float32x2x2_arg;
Function Float32x2x2_operator_sub_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_sub_Float32x2x2_args = { &Float32x2x2_operator_sub_Float32x2x2_arg };

/// operator* with Float32x2x2
Variable Float32x2x2_operator_mul_Float32x2x2_arg;
Function Float32x2x2_operator_mul_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_mul_Float32x2x2_args = { &Float32x2x2_operator_mul_Float32x2x2_arg };

/// operator+= with Float32x2x2
Variable Float32x2x2_operator_addasg_Float32x2x2_arg;
Function Float32x2x2_operator_addasg_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_addasg_Float32x2x2_args = { &Float32x2x2_operator_addasg_Float32x2x2_arg };

/// operator-= with Float32x2x2
Variable Float32x2x2_operator_subasg_Float32x2x2_arg;
Function Float32x2x2_operator_subasg_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_subasg_Float32x2x2_args = { &Float32x2x2_operator_subasg_Float32x2x2_arg };

/// operator*= with Float32x2x2
Variable Float32x2x2_operator_mulasg_Float32x2x2_arg;
Function Float32x2x2_operator_mulasg_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_mulasg_Float32x2x2_args = { &Float32x2x2_operator_mulasg_Float32x2x2_arg };

/// operator* with Float32
Variable Float32x2x2_operator_scale_Float32_arg;
Function Float32x2x2_operator_scale_Float32;
inline constexpr std::array Float32x2x2_operator_scale_Float32_args = { &Float32x2x2_operator_scale_Float32_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float32x2x2_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator+(f32x2x2)"_h, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_h, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator+"_h, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator*"_h, &Float32x2x2_transform_Float32x2 },
    std::pair{ "operator*"_h, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator*"_h, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator*(f32x2)"_h, &Float32x2x2_transform_Float32x2 },
    std::pair{ "operator+=(f32x2x2)"_h, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator*=(f32x2x2)"_h, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator[](u32)"_h, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator-=(f32x2x2)"_h, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*(f32)"_h, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[](u16)"_h, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator*(f32x2x2)"_h, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator[]"_h, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator+="_h, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator*="_h, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator-(f32x2x2)"_h, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator[](i32)"_h, &Float32x2x2_operator_index_Int32 }
    };

Float32x2x2::Float32x2x2()
{
    this->name = "f32x2x2"_c;
    this->columnSize = 2;
    this->rowSize = 2;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x2x2_operator_index_Int32_arg.name = "idx"_c;
    Float32x2x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x2x2_operator_index_Int32.name = Float32x2x2_operator_index_Int32_name;
    Float32x2x2_operator_index_Int32.backendIndex = 1129;
    Float32x2x2_operator_index_Int32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x2_operator_index_Int32.parameters = Float32x2x2_operator_index_Int32_args;
    Symbol::Resolved(&Float32x2x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2x2_operator_index_Int32)->signature = "operator[](i32) f32x2"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_Int32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt32
    Float32x2x2_operator_index_UInt32_arg.name = "idx"_c;
    Float32x2x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x2x2_operator_index_UInt32.name = Float32x2x2_operator_index_UInt32_name;
    Float32x2x2_operator_index_UInt32.backendIndex = 1130;
    Float32x2x2_operator_index_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x2_operator_index_UInt32.parameters = Float32x2x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt32)->signature = "operator[](u32) f32x2"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with Int16
    Float32x2x2_operator_index_Int16_arg.name = "idx"_c;
    Float32x2x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x2x2_operator_index_Int16.name = Float32x2x2_operator_index_Int16_name;
    Float32x2x2_operator_index_Int16.backendIndex = 1131;
    Float32x2x2_operator_index_Int16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x2_operator_index_Int16.parameters = Float32x2x2_operator_index_Int16_args;
    Symbol::Resolved(&Float32x2x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2x2_operator_index_Int16)->signature = "operator[](i16) f32x2"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_Int16)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt16
    Float32x2x2_operator_index_UInt16_arg.name = "idx"_c;
    Float32x2x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x2x2_operator_index_UInt16.name = Float32x2x2_operator_index_UInt16_name;
    Float32x2x2_operator_index_UInt16.backendIndex = 1132;
    Float32x2x2_operator_index_UInt16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x2_operator_index_UInt16.parameters = Float32x2x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt16)->signature = "operator[](u16) f32x2"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt16)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x2
    Float32x2x2_transform_Float32x2_vec.name = "vec"_c;
    Float32x2x2_transform_Float32x2_vec.type = Type::FullType{ Float32x2Type.name };
    Float32x2x2_transform_Float32x2.name = Float32x2x2_transform_Float32x2_name;
    Float32x2x2_transform_Float32x2.backendIndex = 1133;
    Float32x2x2_transform_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x2_transform_Float32x2.parameters = Float32x2x2_transform_Float32x2_args;
    Symbol::Resolved(&Float32x2x2_transform_Float32x2_vec)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2x2_transform_Float32x2)->signature = "operator*(f32x2) f32x2"_c;
    Symbol::Resolved(&Float32x2x2_transform_Float32x2)->name = "operator*(f32x2)"_c;
    Symbol::Resolved(&Float32x2x2_transform_Float32x2)->nameWithVarNames = "operator*(vec : f32x2)"_c;
    Symbol::Resolved(&Float32x2x2_transform_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator+ with Float32x2x2
    Float32x2x2_operator_add_Float32x2x2_arg.name = "arg"_c;
    Float32x2x2_operator_add_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_add_Float32x2x2.name = Float32x2x2_operator_add_Float32x2x2_name;
    Float32x2x2_operator_add_Float32x2x2.backendIndex = 1134;
    Float32x2x2_operator_add_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_add_Float32x2x2.parameters = Float32x2x2_operator_add_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_add_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_add_Float32x2x2)->signature = "operator+(f32x2x2) f32x2x2"_c;
    Symbol::Resolved(&Float32x2x2_operator_add_Float32x2x2)->name = "operator+(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_add_Float32x2x2)->nameWithVarNames = "operator+(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_add_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator- with Float32x2x2
    Float32x2x2_operator_sub_Float32x2x2_arg.name = "arg"_c;
    Float32x2x2_operator_sub_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_sub_Float32x2x2.name = Float32x2x2_operator_sub_Float32x2x2_name;
    Float32x2x2_operator_sub_Float32x2x2.backendIndex = 1135;
    Float32x2x2_operator_sub_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_sub_Float32x2x2.parameters = Float32x2x2_operator_sub_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_sub_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_sub_Float32x2x2)->signature = "operator-(f32x2x2) f32x2x2"_c;
    Symbol::Resolved(&Float32x2x2_operator_sub_Float32x2x2)->name = "operator-(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_sub_Float32x2x2)->nameWithVarNames = "operator-(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_sub_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator* with Float32x2x2
    Float32x2x2_operator_mul_Float32x2x2_arg.name = "arg"_c;
    Float32x2x2_operator_mul_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_mul_Float32x2x2.name = Float32x2x2_operator_mul_Float32x2x2_name;
    Float32x2x2_operator_mul_Float32x2x2.backendIndex = 1136;
    Float32x2x2_operator_mul_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_mul_Float32x2x2.parameters = Float32x2x2_operator_mul_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_mul_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_mul_Float32x2x2)->signature = "operator*(f32x2x2) f32x2x2"_c;
    Symbol::Resolved(&Float32x2x2_operator_mul_Float32x2x2)->name = "operator*(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_mul_Float32x2x2)->nameWithVarNames = "operator*(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_mul_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator+= with Float32x2x2
    Float32x2x2_operator_addasg_Float32x2x2_arg.name = "arg"_c;
    Float32x2x2_operator_addasg_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_addasg_Float32x2x2.name = Float32x2x2_operator_addasg_Float32x2x2_name;
    Float32x2x2_operator_addasg_Float32x2x2.backendIndex = 1137;
    Float32x2x2_operator_addasg_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_addasg_Float32x2x2.parameters = Float32x2x2_operator_addasg_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_addasg_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_addasg_Float32x2x2)->signature = "operator+=(f32x2x2) f32x2x2"_c;
    Symbol::Resolved(&Float32x2x2_operator_addasg_Float32x2x2)->name = "operator+=(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_addasg_Float32x2x2)->nameWithVarNames = "operator+=(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_addasg_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator-= with Float32x2x2
    Float32x2x2_operator_subasg_Float32x2x2_arg.name = "arg"_c;
    Float32x2x2_operator_subasg_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_subasg_Float32x2x2.name = Float32x2x2_operator_subasg_Float32x2x2_name;
    Float32x2x2_operator_subasg_Float32x2x2.backendIndex = 1138;
    Float32x2x2_operator_subasg_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_subasg_Float32x2x2.parameters = Float32x2x2_operator_subasg_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_subasg_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_subasg_Float32x2x2)->signature = "operator-=(f32x2x2) f32x2x2"_c;
    Symbol::Resolved(&Float32x2x2_operator_subasg_Float32x2x2)->name = "operator-=(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_subasg_Float32x2x2)->nameWithVarNames = "operator-=(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_subasg_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator*= with Float32x2x2
    Float32x2x2_operator_mulasg_Float32x2x2_arg.name = "arg"_c;
    Float32x2x2_operator_mulasg_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_mulasg_Float32x2x2.name = Float32x2x2_operator_mulasg_Float32x2x2_name;
    Float32x2x2_operator_mulasg_Float32x2x2.backendIndex = 1139;
    Float32x2x2_operator_mulasg_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_mulasg_Float32x2x2.parameters = Float32x2x2_operator_mulasg_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_mulasg_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_mulasg_Float32x2x2)->signature = "operator*=(f32x2x2) f32x2x2"_c;
    Symbol::Resolved(&Float32x2x2_operator_mulasg_Float32x2x2)->name = "operator*=(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_mulasg_Float32x2x2)->nameWithVarNames = "operator*=(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_mulasg_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator* with Float32
    Float32x2x2_operator_scale_Float32_arg.name = "arg"_c;
    Float32x2x2_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x2x2_operator_scale_Float32.name = Float32x2x2_operator_scale_Float32_name;
    Float32x2x2_operator_scale_Float32.backendIndex = 1140;
    Float32x2x2_operator_scale_Float32.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_scale_Float32.parameters = Float32x2x2_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32)->signature = "operator*(f32) f32x2x2"_c;
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32)->returnTypeSymbol = &Float32x2x2Type;

    this->scope.symbolLookup = Float32x2x2_symbolLookup;
}
Float32x2x2 Float32x2x2Type;

/// operator[] with Int32
Variable Float32x3x2_operator_index_Int32_arg;
Function Float32x3x2_operator_index_Int32;
inline constexpr std::array Float32x3x2_operator_index_Int32_args = { &Float32x3x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x3x2_operator_index_UInt32_arg;
Function Float32x3x2_operator_index_UInt32;
inline constexpr std::array Float32x3x2_operator_index_UInt32_args = { &Float32x3x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x3x2_operator_index_Int16_arg;
Function Float32x3x2_operator_index_Int16;
inline constexpr std::array Float32x3x2_operator_index_Int16_args = { &Float32x3x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x3x2_operator_index_UInt16_arg;
Function Float32x3x2_operator_index_UInt16;
inline constexpr std::array Float32x3x2_operator_index_UInt16_args = { &Float32x3x2_operator_index_UInt16_arg };

/// operator* with Float32x2
Variable Float32x3x2_transform_Float32x3_vec;
Function Float32x3x2_transform_Float32x3;
inline constexpr std::array Float32x3x2_transform_Float32x3_args = { &Float32x3x2_transform_Float32x3_vec };

/// operator+ with Float32x3x2
Variable Float32x3x2_operator_add_Float32x3x2_arg;
Function Float32x3x2_operator_add_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_add_Float32x3x2_args = { &Float32x3x2_operator_add_Float32x3x2_arg };

/// operator- with Float32x3x2
Variable Float32x3x2_operator_sub_Float32x3x2_arg;
Function Float32x3x2_operator_sub_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_sub_Float32x3x2_args = { &Float32x3x2_operator_sub_Float32x3x2_arg };

/// operator* with Float32x3x2
Variable Float32x3x2_operator_mul_Float32x3x2_arg;
Function Float32x3x2_operator_mul_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_mul_Float32x3x2_args = { &Float32x3x2_operator_mul_Float32x3x2_arg };

/// operator+= with Float32x3x2
Variable Float32x3x2_operator_addasg_Float32x3x2_arg;
Function Float32x3x2_operator_addasg_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_addasg_Float32x3x2_args = { &Float32x3x2_operator_addasg_Float32x3x2_arg };

/// operator-= with Float32x3x2
Variable Float32x3x2_operator_subasg_Float32x3x2_arg;
Function Float32x3x2_operator_subasg_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_subasg_Float32x3x2_args = { &Float32x3x2_operator_subasg_Float32x3x2_arg };

/// operator*= with Float32x3x2
Variable Float32x3x2_operator_mulasg_Float32x3x2_arg;
Function Float32x3x2_operator_mulasg_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_mulasg_Float32x3x2_args = { &Float32x3x2_operator_mulasg_Float32x3x2_arg };

/// operator* with Float32
Variable Float32x3x2_operator_scale_Float32_arg;
Function Float32x3x2_operator_scale_Float32;
inline constexpr std::array Float32x3x2_operator_scale_Float32_args = { &Float32x3x2_operator_scale_Float32_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float32x3x2_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator*=(f32x3x2)"_h, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*(f32x3x2)"_h, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator-(f32x3x2)"_h, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator-"_h, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator+"_h, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator*"_h, &Float32x3x2_transform_Float32x3 },
    std::pair{ "operator*"_h, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator*"_h, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator*(f32x2)"_h, &Float32x3x2_transform_Float32x3 },
    std::pair{ "operator[](u32)"_h, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator*(f32)"_h, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator[](u16)"_h, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+(f32x3x2)"_h, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator+=(f32x3x2)"_h, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator[]"_h, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator+="_h, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator*="_h, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator-=(f32x3x2)"_h, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator[](i32)"_h, &Float32x3x2_operator_index_Int32 }
    };

Float32x3x2::Float32x3x2()
{
    this->name = "f32x3x2"_c;
    this->columnSize = 3;
    this->rowSize = 2;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x3x2_operator_index_Int32_arg.name = "idx"_c;
    Float32x3x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x3x2_operator_index_Int32.name = Float32x3x2_operator_index_Int32_name;
    Float32x3x2_operator_index_Int32.backendIndex = 1143;
    Float32x3x2_operator_index_Int32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x2_operator_index_Int32.parameters = Float32x3x2_operator_index_Int32_args;
    Symbol::Resolved(&Float32x3x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3x2_operator_index_Int32)->signature = "operator[](i32) f32x3"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_Int32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt32
    Float32x3x2_operator_index_UInt32_arg.name = "idx"_c;
    Float32x3x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x3x2_operator_index_UInt32.name = Float32x3x2_operator_index_UInt32_name;
    Float32x3x2_operator_index_UInt32.backendIndex = 1144;
    Float32x3x2_operator_index_UInt32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x2_operator_index_UInt32.parameters = Float32x3x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt32)->signature = "operator[](u32) f32x3"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with Int16
    Float32x3x2_operator_index_Int16_arg.name = "idx"_c;
    Float32x3x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x3x2_operator_index_Int16.name = Float32x3x2_operator_index_Int16_name;
    Float32x3x2_operator_index_Int16.backendIndex = 1145;
    Float32x3x2_operator_index_Int16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x2_operator_index_Int16.parameters = Float32x3x2_operator_index_Int16_args;
    Symbol::Resolved(&Float32x3x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x3x2_operator_index_Int16)->signature = "operator[](i16) f32x3"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_Int16)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt16
    Float32x3x2_operator_index_UInt16_arg.name = "idx"_c;
    Float32x3x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x3x2_operator_index_UInt16.name = Float32x3x2_operator_index_UInt16_name;
    Float32x3x2_operator_index_UInt16.backendIndex = 1146;
    Float32x3x2_operator_index_UInt16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x2_operator_index_UInt16.parameters = Float32x3x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt16)->signature = "operator[](u16) f32x3"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt16)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x2
    Float32x3x2_transform_Float32x3_vec.name = "vec"_c;
    Float32x3x2_transform_Float32x3_vec.type = Type::FullType{ Float32x2Type.name };
    Float32x3x2_transform_Float32x3.name = Float32x3x2_transform_Float32x3_name;
    Float32x3x2_transform_Float32x3.backendIndex = 1147;
    Float32x3x2_transform_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x2_transform_Float32x3.parameters = Float32x3x2_transform_Float32x3_args;
    Symbol::Resolved(&Float32x3x2_transform_Float32x3_vec)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x3x2_transform_Float32x3)->signature = "operator*(f32x2) f32x3"_c;
    Symbol::Resolved(&Float32x3x2_transform_Float32x3)->name = "operator*(f32x2)"_c;
    Symbol::Resolved(&Float32x3x2_transform_Float32x3)->nameWithVarNames = "operator*(vec : f32x2)"_c;
    Symbol::Resolved(&Float32x3x2_transform_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator+ with Float32x3x2
    Float32x3x2_operator_add_Float32x3x2_arg.name = "arg"_c;
    Float32x3x2_operator_add_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_add_Float32x3x2.name = Float32x3x2_operator_add_Float32x3x2_name;
    Float32x3x2_operator_add_Float32x3x2.backendIndex = 1148;
    Float32x3x2_operator_add_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_add_Float32x3x2.parameters = Float32x3x2_operator_add_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_add_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_add_Float32x3x2)->signature = "operator+(f32x3x2) f32x3x2"_c;
    Symbol::Resolved(&Float32x3x2_operator_add_Float32x3x2)->name = "operator+(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_add_Float32x3x2)->nameWithVarNames = "operator+(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_add_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator- with Float32x3x2
    Float32x3x2_operator_sub_Float32x3x2_arg.name = "arg"_c;
    Float32x3x2_operator_sub_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_sub_Float32x3x2.name = Float32x3x2_operator_sub_Float32x3x2_name;
    Float32x3x2_operator_sub_Float32x3x2.backendIndex = 1149;
    Float32x3x2_operator_sub_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_sub_Float32x3x2.parameters = Float32x3x2_operator_sub_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_sub_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_sub_Float32x3x2)->signature = "operator-(f32x3x2) f32x3x2"_c;
    Symbol::Resolved(&Float32x3x2_operator_sub_Float32x3x2)->name = "operator-(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_sub_Float32x3x2)->nameWithVarNames = "operator-(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_sub_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator* with Float32x3x2
    Float32x3x2_operator_mul_Float32x3x2_arg.name = "arg"_c;
    Float32x3x2_operator_mul_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_mul_Float32x3x2.name = Float32x3x2_operator_mul_Float32x3x2_name;
    Float32x3x2_operator_mul_Float32x3x2.backendIndex = 1150;
    Float32x3x2_operator_mul_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_mul_Float32x3x2.parameters = Float32x3x2_operator_mul_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_mul_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_mul_Float32x3x2)->signature = "operator*(f32x3x2) f32x3x2"_c;
    Symbol::Resolved(&Float32x3x2_operator_mul_Float32x3x2)->name = "operator*(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_mul_Float32x3x2)->nameWithVarNames = "operator*(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_mul_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator+= with Float32x3x2
    Float32x3x2_operator_addasg_Float32x3x2_arg.name = "arg"_c;
    Float32x3x2_operator_addasg_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_addasg_Float32x3x2.name = Float32x3x2_operator_addasg_Float32x3x2_name;
    Float32x3x2_operator_addasg_Float32x3x2.backendIndex = 1151;
    Float32x3x2_operator_addasg_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_addasg_Float32x3x2.parameters = Float32x3x2_operator_addasg_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_addasg_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_addasg_Float32x3x2)->signature = "operator+=(f32x3x2) f32x3x2"_c;
    Symbol::Resolved(&Float32x3x2_operator_addasg_Float32x3x2)->name = "operator+=(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_addasg_Float32x3x2)->nameWithVarNames = "operator+=(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_addasg_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator-= with Float32x3x2
    Float32x3x2_operator_subasg_Float32x3x2_arg.name = "arg"_c;
    Float32x3x2_operator_subasg_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_subasg_Float32x3x2.name = Float32x3x2_operator_subasg_Float32x3x2_name;
    Float32x3x2_operator_subasg_Float32x3x2.backendIndex = 1152;
    Float32x3x2_operator_subasg_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_subasg_Float32x3x2.parameters = Float32x3x2_operator_subasg_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_subasg_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_subasg_Float32x3x2)->signature = "operator-=(f32x3x2) f32x3x2"_c;
    Symbol::Resolved(&Float32x3x2_operator_subasg_Float32x3x2)->name = "operator-=(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_subasg_Float32x3x2)->nameWithVarNames = "operator-=(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_subasg_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator*= with Float32x3x2
    Float32x3x2_operator_mulasg_Float32x3x2_arg.name = "arg"_c;
    Float32x3x2_operator_mulasg_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_mulasg_Float32x3x2.name = Float32x3x2_operator_mulasg_Float32x3x2_name;
    Float32x3x2_operator_mulasg_Float32x3x2.backendIndex = 1153;
    Float32x3x2_operator_mulasg_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_mulasg_Float32x3x2.parameters = Float32x3x2_operator_mulasg_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_mulasg_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_mulasg_Float32x3x2)->signature = "operator*=(f32x3x2) f32x3x2"_c;
    Symbol::Resolved(&Float32x3x2_operator_mulasg_Float32x3x2)->name = "operator*=(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_mulasg_Float32x3x2)->nameWithVarNames = "operator*=(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_mulasg_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator* with Float32
    Float32x3x2_operator_scale_Float32_arg.name = "arg"_c;
    Float32x3x2_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x3x2_operator_scale_Float32.name = Float32x3x2_operator_scale_Float32_name;
    Float32x3x2_operator_scale_Float32.backendIndex = 1154;
    Float32x3x2_operator_scale_Float32.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_scale_Float32.parameters = Float32x3x2_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32)->signature = "operator*(f32) f32x3x2"_c;
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32)->returnTypeSymbol = &Float32x3x2Type;

    this->scope.symbolLookup = Float32x3x2_symbolLookup;
}
Float32x3x2 Float32x3x2Type;

/// operator[] with Int32
Variable Float32x4x2_operator_index_Int32_arg;
Function Float32x4x2_operator_index_Int32;
inline constexpr std::array Float32x4x2_operator_index_Int32_args = { &Float32x4x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x4x2_operator_index_UInt32_arg;
Function Float32x4x2_operator_index_UInt32;
inline constexpr std::array Float32x4x2_operator_index_UInt32_args = { &Float32x4x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x4x2_operator_index_Int16_arg;
Function Float32x4x2_operator_index_Int16;
inline constexpr std::array Float32x4x2_operator_index_Int16_args = { &Float32x4x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x4x2_operator_index_UInt16_arg;
Function Float32x4x2_operator_index_UInt16;
inline constexpr std::array Float32x4x2_operator_index_UInt16_args = { &Float32x4x2_operator_index_UInt16_arg };

/// operator* with Float32x2
Variable Float32x4x2_transform_Float32x4_vec;
Function Float32x4x2_transform_Float32x4;
inline constexpr std::array Float32x4x2_transform_Float32x4_args = { &Float32x4x2_transform_Float32x4_vec };

/// operator+ with Float32x4x2
Variable Float32x4x2_operator_add_Float32x4x2_arg;
Function Float32x4x2_operator_add_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_add_Float32x4x2_args = { &Float32x4x2_operator_add_Float32x4x2_arg };

/// operator- with Float32x4x2
Variable Float32x4x2_operator_sub_Float32x4x2_arg;
Function Float32x4x2_operator_sub_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_sub_Float32x4x2_args = { &Float32x4x2_operator_sub_Float32x4x2_arg };

/// operator* with Float32x4x2
Variable Float32x4x2_operator_mul_Float32x4x2_arg;
Function Float32x4x2_operator_mul_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_mul_Float32x4x2_args = { &Float32x4x2_operator_mul_Float32x4x2_arg };

/// operator+= with Float32x4x2
Variable Float32x4x2_operator_addasg_Float32x4x2_arg;
Function Float32x4x2_operator_addasg_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_addasg_Float32x4x2_args = { &Float32x4x2_operator_addasg_Float32x4x2_arg };

/// operator-= with Float32x4x2
Variable Float32x4x2_operator_subasg_Float32x4x2_arg;
Function Float32x4x2_operator_subasg_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_subasg_Float32x4x2_args = { &Float32x4x2_operator_subasg_Float32x4x2_arg };

/// operator*= with Float32x4x2
Variable Float32x4x2_operator_mulasg_Float32x4x2_arg;
Function Float32x4x2_operator_mulasg_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_mulasg_Float32x4x2_args = { &Float32x4x2_operator_mulasg_Float32x4x2_arg };

/// operator* with Float32
Variable Float32x4x2_operator_scale_Float32_arg;
Function Float32x4x2_operator_scale_Float32;
inline constexpr std::array Float32x4x2_operator_scale_Float32_args = { &Float32x4x2_operator_scale_Float32_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float32x4x2_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &Float32x4x2_operator_index_Int16 },
    std::pair{ "operator*(f32x4x2)"_h, &Float32x4x2_operator_mul_Float32x4x2 },
    std::pair{ "operator-"_h, &Float32x4x2_operator_sub_Float32x4x2 },
    std::pair{ "operator+"_h, &Float32x4x2_operator_add_Float32x4x2 },
    std::pair{ "operator*"_h, &Float32x4x2_transform_Float32x4 },
    std::pair{ "operator*"_h, &Float32x4x2_operator_mul_Float32x4x2 },
    std::pair{ "operator*"_h, &Float32x4x2_operator_scale_Float32 },
    std::pair{ "operator-(f32x4x2)"_h, &Float32x4x2_operator_sub_Float32x4x2 },
    std::pair{ "operator*(f32x2)"_h, &Float32x4x2_transform_Float32x4 },
    std::pair{ "operator-=(f32x4x2)"_h, &Float32x4x2_operator_subasg_Float32x4x2 },
    std::pair{ "operator[](u32)"_h, &Float32x4x2_operator_index_UInt32 },
    std::pair{ "operator*(f32)"_h, &Float32x4x2_operator_scale_Float32 },
    std::pair{ "operator+(f32x4x2)"_h, &Float32x4x2_operator_add_Float32x4x2 },
    std::pair{ "operator[](u16)"_h, &Float32x4x2_operator_index_UInt16 },
    std::pair{ "operator[]"_h, &Float32x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float32x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float32x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float32x4x2_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float32x4x2_operator_subasg_Float32x4x2 },
    std::pair{ "operator+="_h, &Float32x4x2_operator_addasg_Float32x4x2 },
    std::pair{ "operator*="_h, &Float32x4x2_operator_mulasg_Float32x4x2 },
    std::pair{ "operator*=(f32x4x2)"_h, &Float32x4x2_operator_mulasg_Float32x4x2 },
    std::pair{ "operator+=(f32x4x2)"_h, &Float32x4x2_operator_addasg_Float32x4x2 },
    std::pair{ "operator[](i32)"_h, &Float32x4x2_operator_index_Int32 }
    };

Float32x4x2::Float32x4x2()
{
    this->name = "f32x4x2"_c;
    this->columnSize = 4;
    this->rowSize = 2;
    this->byteSize = 32;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x4x2_operator_index_Int32_arg.name = "idx"_c;
    Float32x4x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x4x2_operator_index_Int32.name = Float32x4x2_operator_index_Int32_name;
    Float32x4x2_operator_index_Int32.backendIndex = 1157;
    Float32x4x2_operator_index_Int32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x2_operator_index_Int32.parameters = Float32x4x2_operator_index_Int32_args;
    Symbol::Resolved(&Float32x4x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4x2_operator_index_Int32)->signature = "operator[](i32) f32x4"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_Int32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt32
    Float32x4x2_operator_index_UInt32_arg.name = "idx"_c;
    Float32x4x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x4x2_operator_index_UInt32.name = Float32x4x2_operator_index_UInt32_name;
    Float32x4x2_operator_index_UInt32.backendIndex = 1158;
    Float32x4x2_operator_index_UInt32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x2_operator_index_UInt32.parameters = Float32x4x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt32)->signature = "operator[](u32) f32x4"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with Int16
    Float32x4x2_operator_index_Int16_arg.name = "idx"_c;
    Float32x4x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x4x2_operator_index_Int16.name = Float32x4x2_operator_index_Int16_name;
    Float32x4x2_operator_index_Int16.backendIndex = 1159;
    Float32x4x2_operator_index_Int16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x2_operator_index_Int16.parameters = Float32x4x2_operator_index_Int16_args;
    Symbol::Resolved(&Float32x4x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x4x2_operator_index_Int16)->signature = "operator[](i16) f32x4"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_Int16)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt16
    Float32x4x2_operator_index_UInt16_arg.name = "idx"_c;
    Float32x4x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x4x2_operator_index_UInt16.name = Float32x4x2_operator_index_UInt16_name;
    Float32x4x2_operator_index_UInt16.backendIndex = 1160;
    Float32x4x2_operator_index_UInt16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x2_operator_index_UInt16.parameters = Float32x4x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt16)->signature = "operator[](u16) f32x4"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt16)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Float32x2
    Float32x4x2_transform_Float32x4_vec.name = "vec"_c;
    Float32x4x2_transform_Float32x4_vec.type = Type::FullType{ Float32x2Type.name };
    Float32x4x2_transform_Float32x4.name = Float32x4x2_transform_Float32x4_name;
    Float32x4x2_transform_Float32x4.backendIndex = 1161;
    Float32x4x2_transform_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x2_transform_Float32x4.parameters = Float32x4x2_transform_Float32x4_args;
    Symbol::Resolved(&Float32x4x2_transform_Float32x4_vec)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4x2_transform_Float32x4)->signature = "operator*(f32x2) f32x4"_c;
    Symbol::Resolved(&Float32x4x2_transform_Float32x4)->name = "operator*(f32x2)"_c;
    Symbol::Resolved(&Float32x4x2_transform_Float32x4)->nameWithVarNames = "operator*(vec : f32x2)"_c;
    Symbol::Resolved(&Float32x4x2_transform_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator+ with Float32x4x2
    Float32x4x2_operator_add_Float32x4x2_arg.name = "arg"_c;
    Float32x4x2_operator_add_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_add_Float32x4x2.name = Float32x4x2_operator_add_Float32x4x2_name;
    Float32x4x2_operator_add_Float32x4x2.backendIndex = 1162;
    Float32x4x2_operator_add_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_add_Float32x4x2.parameters = Float32x4x2_operator_add_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_add_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_add_Float32x4x2)->signature = "operator+(f32x4x2) f32x4x2"_c;
    Symbol::Resolved(&Float32x4x2_operator_add_Float32x4x2)->name = "operator+(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_add_Float32x4x2)->nameWithVarNames = "operator+(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_add_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator- with Float32x4x2
    Float32x4x2_operator_sub_Float32x4x2_arg.name = "arg"_c;
    Float32x4x2_operator_sub_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_sub_Float32x4x2.name = Float32x4x2_operator_sub_Float32x4x2_name;
    Float32x4x2_operator_sub_Float32x4x2.backendIndex = 1163;
    Float32x4x2_operator_sub_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_sub_Float32x4x2.parameters = Float32x4x2_operator_sub_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_sub_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_sub_Float32x4x2)->signature = "operator-(f32x4x2) f32x4x2"_c;
    Symbol::Resolved(&Float32x4x2_operator_sub_Float32x4x2)->name = "operator-(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_sub_Float32x4x2)->nameWithVarNames = "operator-(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_sub_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator* with Float32x4x2
    Float32x4x2_operator_mul_Float32x4x2_arg.name = "arg"_c;
    Float32x4x2_operator_mul_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_mul_Float32x4x2.name = Float32x4x2_operator_mul_Float32x4x2_name;
    Float32x4x2_operator_mul_Float32x4x2.backendIndex = 1164;
    Float32x4x2_operator_mul_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_mul_Float32x4x2.parameters = Float32x4x2_operator_mul_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_mul_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_mul_Float32x4x2)->signature = "operator*(f32x4x2) f32x4x2"_c;
    Symbol::Resolved(&Float32x4x2_operator_mul_Float32x4x2)->name = "operator*(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_mul_Float32x4x2)->nameWithVarNames = "operator*(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_mul_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator+= with Float32x4x2
    Float32x4x2_operator_addasg_Float32x4x2_arg.name = "arg"_c;
    Float32x4x2_operator_addasg_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_addasg_Float32x4x2.name = Float32x4x2_operator_addasg_Float32x4x2_name;
    Float32x4x2_operator_addasg_Float32x4x2.backendIndex = 1165;
    Float32x4x2_operator_addasg_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_addasg_Float32x4x2.parameters = Float32x4x2_operator_addasg_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_addasg_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_addasg_Float32x4x2)->signature = "operator+=(f32x4x2) f32x4x2"_c;
    Symbol::Resolved(&Float32x4x2_operator_addasg_Float32x4x2)->name = "operator+=(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_addasg_Float32x4x2)->nameWithVarNames = "operator+=(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_addasg_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator-= with Float32x4x2
    Float32x4x2_operator_subasg_Float32x4x2_arg.name = "arg"_c;
    Float32x4x2_operator_subasg_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_subasg_Float32x4x2.name = Float32x4x2_operator_subasg_Float32x4x2_name;
    Float32x4x2_operator_subasg_Float32x4x2.backendIndex = 1166;
    Float32x4x2_operator_subasg_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_subasg_Float32x4x2.parameters = Float32x4x2_operator_subasg_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_subasg_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_subasg_Float32x4x2)->signature = "operator-=(f32x4x2) f32x4x2"_c;
    Symbol::Resolved(&Float32x4x2_operator_subasg_Float32x4x2)->name = "operator-=(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_subasg_Float32x4x2)->nameWithVarNames = "operator-=(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_subasg_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator*= with Float32x4x2
    Float32x4x2_operator_mulasg_Float32x4x2_arg.name = "arg"_c;
    Float32x4x2_operator_mulasg_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_mulasg_Float32x4x2.name = Float32x4x2_operator_mulasg_Float32x4x2_name;
    Float32x4x2_operator_mulasg_Float32x4x2.backendIndex = 1167;
    Float32x4x2_operator_mulasg_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_mulasg_Float32x4x2.parameters = Float32x4x2_operator_mulasg_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_mulasg_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_mulasg_Float32x4x2)->signature = "operator*=(f32x4x2) f32x4x2"_c;
    Symbol::Resolved(&Float32x4x2_operator_mulasg_Float32x4x2)->name = "operator*=(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_mulasg_Float32x4x2)->nameWithVarNames = "operator*=(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_mulasg_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator* with Float32
    Float32x4x2_operator_scale_Float32_arg.name = "arg"_c;
    Float32x4x2_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x4x2_operator_scale_Float32.name = Float32x4x2_operator_scale_Float32_name;
    Float32x4x2_operator_scale_Float32.backendIndex = 1168;
    Float32x4x2_operator_scale_Float32.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_scale_Float32.parameters = Float32x4x2_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32)->signature = "operator*(f32) f32x4x2"_c;
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32)->returnTypeSymbol = &Float32x4x2Type;

    this->scope.symbolLookup = Float32x4x2_symbolLookup;
}
Float32x4x2 Float32x4x2Type;

/// operator[] with Int32
Variable Float32x2x3_operator_index_Int32_arg;
Function Float32x2x3_operator_index_Int32;
inline constexpr std::array Float32x2x3_operator_index_Int32_args = { &Float32x2x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x2x3_operator_index_UInt32_arg;
Function Float32x2x3_operator_index_UInt32;
inline constexpr std::array Float32x2x3_operator_index_UInt32_args = { &Float32x2x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x2x3_operator_index_Int16_arg;
Function Float32x2x3_operator_index_Int16;
inline constexpr std::array Float32x2x3_operator_index_Int16_args = { &Float32x2x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x2x3_operator_index_UInt16_arg;
Function Float32x2x3_operator_index_UInt16;
inline constexpr std::array Float32x2x3_operator_index_UInt16_args = { &Float32x2x3_operator_index_UInt16_arg };

/// operator* with Float32x3
Variable Float32x2x3_transform_Float32x2_vec;
Function Float32x2x3_transform_Float32x2;
inline constexpr std::array Float32x2x3_transform_Float32x2_args = { &Float32x2x3_transform_Float32x2_vec };

/// operator+ with Float32x2x3
Variable Float32x2x3_operator_add_Float32x2x3_arg;
Function Float32x2x3_operator_add_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_add_Float32x2x3_args = { &Float32x2x3_operator_add_Float32x2x3_arg };

/// operator- with Float32x2x3
Variable Float32x2x3_operator_sub_Float32x2x3_arg;
Function Float32x2x3_operator_sub_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_sub_Float32x2x3_args = { &Float32x2x3_operator_sub_Float32x2x3_arg };

/// operator* with Float32x2x3
Variable Float32x2x3_operator_mul_Float32x2x3_arg;
Function Float32x2x3_operator_mul_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_mul_Float32x2x3_args = { &Float32x2x3_operator_mul_Float32x2x3_arg };

/// operator+= with Float32x2x3
Variable Float32x2x3_operator_addasg_Float32x2x3_arg;
Function Float32x2x3_operator_addasg_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_addasg_Float32x2x3_args = { &Float32x2x3_operator_addasg_Float32x2x3_arg };

/// operator-= with Float32x2x3
Variable Float32x2x3_operator_subasg_Float32x2x3_arg;
Function Float32x2x3_operator_subasg_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_subasg_Float32x2x3_args = { &Float32x2x3_operator_subasg_Float32x2x3_arg };

/// operator*= with Float32x2x3
Variable Float32x2x3_operator_mulasg_Float32x2x3_arg;
Function Float32x2x3_operator_mulasg_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_mulasg_Float32x2x3_args = { &Float32x2x3_operator_mulasg_Float32x2x3_arg };

/// operator* with Float32
Variable Float32x2x3_operator_scale_Float32_arg;
Function Float32x2x3_operator_scale_Float32;
inline constexpr std::array Float32x2x3_operator_scale_Float32_args = { &Float32x2x3_operator_scale_Float32_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float32x2x3_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator+(f32x2x3)"_h, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_h, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator+"_h, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator*"_h, &Float32x2x3_transform_Float32x2 },
    std::pair{ "operator*"_h, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator*"_h, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator*(f32x3)"_h, &Float32x2x3_transform_Float32x2 },
    std::pair{ "operator+=(f32x2x3)"_h, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator*=(f32x2x3)"_h, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator[](u32)"_h, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator-=(f32x2x3)"_h, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*(f32)"_h, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[](u16)"_h, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator*(f32x2x3)"_h, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator[]"_h, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator+="_h, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator*="_h, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator-(f32x2x3)"_h, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator[](i32)"_h, &Float32x2x3_operator_index_Int32 }
    };

Float32x2x3::Float32x2x3()
{
    this->name = "f32x2x3"_c;
    this->columnSize = 2;
    this->rowSize = 3;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x2x3_operator_index_Int32_arg.name = "idx"_c;
    Float32x2x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x2x3_operator_index_Int32.name = Float32x2x3_operator_index_Int32_name;
    Float32x2x3_operator_index_Int32.backendIndex = 1171;
    Float32x2x3_operator_index_Int32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x3_operator_index_Int32.parameters = Float32x2x3_operator_index_Int32_args;
    Symbol::Resolved(&Float32x2x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2x3_operator_index_Int32)->signature = "operator[](i32) f32x2"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_Int32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt32
    Float32x2x3_operator_index_UInt32_arg.name = "idx"_c;
    Float32x2x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x2x3_operator_index_UInt32.name = Float32x2x3_operator_index_UInt32_name;
    Float32x2x3_operator_index_UInt32.backendIndex = 1172;
    Float32x2x3_operator_index_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x3_operator_index_UInt32.parameters = Float32x2x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt32)->signature = "operator[](u32) f32x2"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with Int16
    Float32x2x3_operator_index_Int16_arg.name = "idx"_c;
    Float32x2x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x2x3_operator_index_Int16.name = Float32x2x3_operator_index_Int16_name;
    Float32x2x3_operator_index_Int16.backendIndex = 1173;
    Float32x2x3_operator_index_Int16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x3_operator_index_Int16.parameters = Float32x2x3_operator_index_Int16_args;
    Symbol::Resolved(&Float32x2x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2x3_operator_index_Int16)->signature = "operator[](i16) f32x2"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_Int16)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt16
    Float32x2x3_operator_index_UInt16_arg.name = "idx"_c;
    Float32x2x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x2x3_operator_index_UInt16.name = Float32x2x3_operator_index_UInt16_name;
    Float32x2x3_operator_index_UInt16.backendIndex = 1174;
    Float32x2x3_operator_index_UInt16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x3_operator_index_UInt16.parameters = Float32x2x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt16)->signature = "operator[](u16) f32x2"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt16)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x3
    Float32x2x3_transform_Float32x2_vec.name = "vec"_c;
    Float32x2x3_transform_Float32x2_vec.type = Type::FullType{ Float32x3Type.name };
    Float32x2x3_transform_Float32x2.name = Float32x2x3_transform_Float32x2_name;
    Float32x2x3_transform_Float32x2.backendIndex = 1175;
    Float32x2x3_transform_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x3_transform_Float32x2.parameters = Float32x2x3_transform_Float32x2_args;
    Symbol::Resolved(&Float32x2x3_transform_Float32x2_vec)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x2x3_transform_Float32x2)->signature = "operator*(f32x3) f32x2"_c;
    Symbol::Resolved(&Float32x2x3_transform_Float32x2)->name = "operator*(f32x3)"_c;
    Symbol::Resolved(&Float32x2x3_transform_Float32x2)->nameWithVarNames = "operator*(vec : f32x3)"_c;
    Symbol::Resolved(&Float32x2x3_transform_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator+ with Float32x2x3
    Float32x2x3_operator_add_Float32x2x3_arg.name = "arg"_c;
    Float32x2x3_operator_add_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_add_Float32x2x3.name = Float32x2x3_operator_add_Float32x2x3_name;
    Float32x2x3_operator_add_Float32x2x3.backendIndex = 1176;
    Float32x2x3_operator_add_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_add_Float32x2x3.parameters = Float32x2x3_operator_add_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_add_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_add_Float32x2x3)->signature = "operator+(f32x2x3) f32x2x3"_c;
    Symbol::Resolved(&Float32x2x3_operator_add_Float32x2x3)->name = "operator+(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_add_Float32x2x3)->nameWithVarNames = "operator+(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_add_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator- with Float32x2x3
    Float32x2x3_operator_sub_Float32x2x3_arg.name = "arg"_c;
    Float32x2x3_operator_sub_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_sub_Float32x2x3.name = Float32x2x3_operator_sub_Float32x2x3_name;
    Float32x2x3_operator_sub_Float32x2x3.backendIndex = 1177;
    Float32x2x3_operator_sub_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_sub_Float32x2x3.parameters = Float32x2x3_operator_sub_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_sub_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_sub_Float32x2x3)->signature = "operator-(f32x2x3) f32x2x3"_c;
    Symbol::Resolved(&Float32x2x3_operator_sub_Float32x2x3)->name = "operator-(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_sub_Float32x2x3)->nameWithVarNames = "operator-(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_sub_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator* with Float32x2x3
    Float32x2x3_operator_mul_Float32x2x3_arg.name = "arg"_c;
    Float32x2x3_operator_mul_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_mul_Float32x2x3.name = Float32x2x3_operator_mul_Float32x2x3_name;
    Float32x2x3_operator_mul_Float32x2x3.backendIndex = 1178;
    Float32x2x3_operator_mul_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_mul_Float32x2x3.parameters = Float32x2x3_operator_mul_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_mul_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_mul_Float32x2x3)->signature = "operator*(f32x2x3) f32x2x3"_c;
    Symbol::Resolved(&Float32x2x3_operator_mul_Float32x2x3)->name = "operator*(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_mul_Float32x2x3)->nameWithVarNames = "operator*(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_mul_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator+= with Float32x2x3
    Float32x2x3_operator_addasg_Float32x2x3_arg.name = "arg"_c;
    Float32x2x3_operator_addasg_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_addasg_Float32x2x3.name = Float32x2x3_operator_addasg_Float32x2x3_name;
    Float32x2x3_operator_addasg_Float32x2x3.backendIndex = 1179;
    Float32x2x3_operator_addasg_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_addasg_Float32x2x3.parameters = Float32x2x3_operator_addasg_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_addasg_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_addasg_Float32x2x3)->signature = "operator+=(f32x2x3) f32x2x3"_c;
    Symbol::Resolved(&Float32x2x3_operator_addasg_Float32x2x3)->name = "operator+=(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_addasg_Float32x2x3)->nameWithVarNames = "operator+=(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_addasg_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator-= with Float32x2x3
    Float32x2x3_operator_subasg_Float32x2x3_arg.name = "arg"_c;
    Float32x2x3_operator_subasg_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_subasg_Float32x2x3.name = Float32x2x3_operator_subasg_Float32x2x3_name;
    Float32x2x3_operator_subasg_Float32x2x3.backendIndex = 1180;
    Float32x2x3_operator_subasg_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_subasg_Float32x2x3.parameters = Float32x2x3_operator_subasg_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_subasg_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_subasg_Float32x2x3)->signature = "operator-=(f32x2x3) f32x2x3"_c;
    Symbol::Resolved(&Float32x2x3_operator_subasg_Float32x2x3)->name = "operator-=(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_subasg_Float32x2x3)->nameWithVarNames = "operator-=(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_subasg_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator*= with Float32x2x3
    Float32x2x3_operator_mulasg_Float32x2x3_arg.name = "arg"_c;
    Float32x2x3_operator_mulasg_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_mulasg_Float32x2x3.name = Float32x2x3_operator_mulasg_Float32x2x3_name;
    Float32x2x3_operator_mulasg_Float32x2x3.backendIndex = 1181;
    Float32x2x3_operator_mulasg_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_mulasg_Float32x2x3.parameters = Float32x2x3_operator_mulasg_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_mulasg_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_mulasg_Float32x2x3)->signature = "operator*=(f32x2x3) f32x2x3"_c;
    Symbol::Resolved(&Float32x2x3_operator_mulasg_Float32x2x3)->name = "operator*=(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_mulasg_Float32x2x3)->nameWithVarNames = "operator*=(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_mulasg_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator* with Float32
    Float32x2x3_operator_scale_Float32_arg.name = "arg"_c;
    Float32x2x3_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x2x3_operator_scale_Float32.name = Float32x2x3_operator_scale_Float32_name;
    Float32x2x3_operator_scale_Float32.backendIndex = 1182;
    Float32x2x3_operator_scale_Float32.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_scale_Float32.parameters = Float32x2x3_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32)->signature = "operator*(f32) f32x2x3"_c;
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32)->returnTypeSymbol = &Float32x2x3Type;

    this->scope.symbolLookup = Float32x2x3_symbolLookup;
}
Float32x2x3 Float32x2x3Type;

/// operator[] with Int32
Variable Float32x3x3_operator_index_Int32_arg;
Function Float32x3x3_operator_index_Int32;
inline constexpr std::array Float32x3x3_operator_index_Int32_args = { &Float32x3x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x3x3_operator_index_UInt32_arg;
Function Float32x3x3_operator_index_UInt32;
inline constexpr std::array Float32x3x3_operator_index_UInt32_args = { &Float32x3x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x3x3_operator_index_Int16_arg;
Function Float32x3x3_operator_index_Int16;
inline constexpr std::array Float32x3x3_operator_index_Int16_args = { &Float32x3x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x3x3_operator_index_UInt16_arg;
Function Float32x3x3_operator_index_UInt16;
inline constexpr std::array Float32x3x3_operator_index_UInt16_args = { &Float32x3x3_operator_index_UInt16_arg };

/// operator* with Float32x3
Variable Float32x3x3_transform_Float32x3_vec;
Function Float32x3x3_transform_Float32x3;
inline constexpr std::array Float32x3x3_transform_Float32x3_args = { &Float32x3x3_transform_Float32x3_vec };

/// operator+ with Float32x3x3
Variable Float32x3x3_operator_add_Float32x3x3_arg;
Function Float32x3x3_operator_add_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_add_Float32x3x3_args = { &Float32x3x3_operator_add_Float32x3x3_arg };

/// operator- with Float32x3x3
Variable Float32x3x3_operator_sub_Float32x3x3_arg;
Function Float32x3x3_operator_sub_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_sub_Float32x3x3_args = { &Float32x3x3_operator_sub_Float32x3x3_arg };

/// operator* with Float32x3x3
Variable Float32x3x3_operator_mul_Float32x3x3_arg;
Function Float32x3x3_operator_mul_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_mul_Float32x3x3_args = { &Float32x3x3_operator_mul_Float32x3x3_arg };

/// operator+= with Float32x3x3
Variable Float32x3x3_operator_addasg_Float32x3x3_arg;
Function Float32x3x3_operator_addasg_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_addasg_Float32x3x3_args = { &Float32x3x3_operator_addasg_Float32x3x3_arg };

/// operator-= with Float32x3x3
Variable Float32x3x3_operator_subasg_Float32x3x3_arg;
Function Float32x3x3_operator_subasg_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_subasg_Float32x3x3_args = { &Float32x3x3_operator_subasg_Float32x3x3_arg };

/// operator*= with Float32x3x3
Variable Float32x3x3_operator_mulasg_Float32x3x3_arg;
Function Float32x3x3_operator_mulasg_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_mulasg_Float32x3x3_args = { &Float32x3x3_operator_mulasg_Float32x3x3_arg };

/// operator* with Float32
Variable Float32x3x3_operator_scale_Float32_arg;
Function Float32x3x3_operator_scale_Float32;
inline constexpr std::array Float32x3x3_operator_scale_Float32_args = { &Float32x3x3_operator_scale_Float32_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float32x3x3_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator*=(f32x3x3)"_h, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator*(f32x3x3)"_h, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator-(f32x3x3)"_h, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator-"_h, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator+"_h, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator*"_h, &Float32x3x3_transform_Float32x3 },
    std::pair{ "operator*"_h, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator*"_h, &Float32x3x3_operator_scale_Float32 },
    std::pair{ "operator*(f32x3)"_h, &Float32x3x3_transform_Float32x3 },
    std::pair{ "operator[](u32)"_h, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator*(f32)"_h, &Float32x3x3_operator_scale_Float32 },
    std::pair{ "operator[](u16)"_h, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator+(f32x3x3)"_h, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator+=(f32x3x3)"_h, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator[]"_h, &Float32x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator+="_h, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator*="_h, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator-=(f32x3x3)"_h, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator[](i32)"_h, &Float32x3x3_operator_index_Int32 }
    };

Float32x3x3::Float32x3x3()
{
    this->name = "f32x3x3"_c;
    this->columnSize = 3;
    this->rowSize = 3;
    this->byteSize = 36;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x3x3_operator_index_Int32_arg.name = "idx"_c;
    Float32x3x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x3x3_operator_index_Int32.name = Float32x3x3_operator_index_Int32_name;
    Float32x3x3_operator_index_Int32.backendIndex = 1186;
    Float32x3x3_operator_index_Int32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x3_operator_index_Int32.parameters = Float32x3x3_operator_index_Int32_args;
    Symbol::Resolved(&Float32x3x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3x3_operator_index_Int32)->signature = "operator[](i32) f32x3"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_Int32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt32
    Float32x3x3_operator_index_UInt32_arg.name = "idx"_c;
    Float32x3x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x3x3_operator_index_UInt32.name = Float32x3x3_operator_index_UInt32_name;
    Float32x3x3_operator_index_UInt32.backendIndex = 1187;
    Float32x3x3_operator_index_UInt32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x3_operator_index_UInt32.parameters = Float32x3x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt32)->signature = "operator[](u32) f32x3"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with Int16
    Float32x3x3_operator_index_Int16_arg.name = "idx"_c;
    Float32x3x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x3x3_operator_index_Int16.name = Float32x3x3_operator_index_Int16_name;
    Float32x3x3_operator_index_Int16.backendIndex = 1188;
    Float32x3x3_operator_index_Int16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x3_operator_index_Int16.parameters = Float32x3x3_operator_index_Int16_args;
    Symbol::Resolved(&Float32x3x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x3x3_operator_index_Int16)->signature = "operator[](i16) f32x3"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_Int16)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt16
    Float32x3x3_operator_index_UInt16_arg.name = "idx"_c;
    Float32x3x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x3x3_operator_index_UInt16.name = Float32x3x3_operator_index_UInt16_name;
    Float32x3x3_operator_index_UInt16.backendIndex = 1189;
    Float32x3x3_operator_index_UInt16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x3_operator_index_UInt16.parameters = Float32x3x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt16)->signature = "operator[](u16) f32x3"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt16)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x3
    Float32x3x3_transform_Float32x3_vec.name = "vec"_c;
    Float32x3x3_transform_Float32x3_vec.type = Type::FullType{ Float32x3Type.name };
    Float32x3x3_transform_Float32x3.name = Float32x3x3_transform_Float32x3_name;
    Float32x3x3_transform_Float32x3.backendIndex = 1190;
    Float32x3x3_transform_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x3_transform_Float32x3.parameters = Float32x3x3_transform_Float32x3_args;
    Symbol::Resolved(&Float32x3x3_transform_Float32x3_vec)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3x3_transform_Float32x3)->signature = "operator*(f32x3) f32x3"_c;
    Symbol::Resolved(&Float32x3x3_transform_Float32x3)->name = "operator*(f32x3)"_c;
    Symbol::Resolved(&Float32x3x3_transform_Float32x3)->nameWithVarNames = "operator*(vec : f32x3)"_c;
    Symbol::Resolved(&Float32x3x3_transform_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator+ with Float32x3x3
    Float32x3x3_operator_add_Float32x3x3_arg.name = "arg"_c;
    Float32x3x3_operator_add_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_add_Float32x3x3.name = Float32x3x3_operator_add_Float32x3x3_name;
    Float32x3x3_operator_add_Float32x3x3.backendIndex = 1191;
    Float32x3x3_operator_add_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_add_Float32x3x3.parameters = Float32x3x3_operator_add_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_add_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_add_Float32x3x3)->signature = "operator+(f32x3x3) f32x3x3"_c;
    Symbol::Resolved(&Float32x3x3_operator_add_Float32x3x3)->name = "operator+(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_add_Float32x3x3)->nameWithVarNames = "operator+(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_add_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator- with Float32x3x3
    Float32x3x3_operator_sub_Float32x3x3_arg.name = "arg"_c;
    Float32x3x3_operator_sub_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_sub_Float32x3x3.name = Float32x3x3_operator_sub_Float32x3x3_name;
    Float32x3x3_operator_sub_Float32x3x3.backendIndex = 1192;
    Float32x3x3_operator_sub_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_sub_Float32x3x3.parameters = Float32x3x3_operator_sub_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_sub_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_sub_Float32x3x3)->signature = "operator-(f32x3x3) f32x3x3"_c;
    Symbol::Resolved(&Float32x3x3_operator_sub_Float32x3x3)->name = "operator-(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_sub_Float32x3x3)->nameWithVarNames = "operator-(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_sub_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator* with Float32x3x3
    Float32x3x3_operator_mul_Float32x3x3_arg.name = "arg"_c;
    Float32x3x3_operator_mul_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_mul_Float32x3x3.name = Float32x3x3_operator_mul_Float32x3x3_name;
    Float32x3x3_operator_mul_Float32x3x3.backendIndex = 1193;
    Float32x3x3_operator_mul_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_mul_Float32x3x3.parameters = Float32x3x3_operator_mul_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_mul_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_mul_Float32x3x3)->signature = "operator*(f32x3x3) f32x3x3"_c;
    Symbol::Resolved(&Float32x3x3_operator_mul_Float32x3x3)->name = "operator*(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_mul_Float32x3x3)->nameWithVarNames = "operator*(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_mul_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator+= with Float32x3x3
    Float32x3x3_operator_addasg_Float32x3x3_arg.name = "arg"_c;
    Float32x3x3_operator_addasg_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_addasg_Float32x3x3.name = Float32x3x3_operator_addasg_Float32x3x3_name;
    Float32x3x3_operator_addasg_Float32x3x3.backendIndex = 1194;
    Float32x3x3_operator_addasg_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_addasg_Float32x3x3.parameters = Float32x3x3_operator_addasg_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_addasg_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_addasg_Float32x3x3)->signature = "operator+=(f32x3x3) f32x3x3"_c;
    Symbol::Resolved(&Float32x3x3_operator_addasg_Float32x3x3)->name = "operator+=(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_addasg_Float32x3x3)->nameWithVarNames = "operator+=(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_addasg_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator-= with Float32x3x3
    Float32x3x3_operator_subasg_Float32x3x3_arg.name = "arg"_c;
    Float32x3x3_operator_subasg_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_subasg_Float32x3x3.name = Float32x3x3_operator_subasg_Float32x3x3_name;
    Float32x3x3_operator_subasg_Float32x3x3.backendIndex = 1195;
    Float32x3x3_operator_subasg_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_subasg_Float32x3x3.parameters = Float32x3x3_operator_subasg_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_subasg_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_subasg_Float32x3x3)->signature = "operator-=(f32x3x3) f32x3x3"_c;
    Symbol::Resolved(&Float32x3x3_operator_subasg_Float32x3x3)->name = "operator-=(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_subasg_Float32x3x3)->nameWithVarNames = "operator-=(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_subasg_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator*= with Float32x3x3
    Float32x3x3_operator_mulasg_Float32x3x3_arg.name = "arg"_c;
    Float32x3x3_operator_mulasg_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_mulasg_Float32x3x3.name = Float32x3x3_operator_mulasg_Float32x3x3_name;
    Float32x3x3_operator_mulasg_Float32x3x3.backendIndex = 1196;
    Float32x3x3_operator_mulasg_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_mulasg_Float32x3x3.parameters = Float32x3x3_operator_mulasg_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_mulasg_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_mulasg_Float32x3x3)->signature = "operator*=(f32x3x3) f32x3x3"_c;
    Symbol::Resolved(&Float32x3x3_operator_mulasg_Float32x3x3)->name = "operator*=(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_mulasg_Float32x3x3)->nameWithVarNames = "operator*=(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_mulasg_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator* with Float32
    Float32x3x3_operator_scale_Float32_arg.name = "arg"_c;
    Float32x3x3_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x3x3_operator_scale_Float32.name = Float32x3x3_operator_scale_Float32_name;
    Float32x3x3_operator_scale_Float32.backendIndex = 1197;
    Float32x3x3_operator_scale_Float32.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_scale_Float32.parameters = Float32x3x3_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32)->signature = "operator*(f32) f32x3x3"_c;
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32)->returnTypeSymbol = &Float32x3x3Type;

    this->scope.symbolLookup = Float32x3x3_symbolLookup;
}
Float32x3x3 Float32x3x3Type;

/// operator[] with Int32
Variable Float32x4x3_operator_index_Int32_arg;
Function Float32x4x3_operator_index_Int32;
inline constexpr std::array Float32x4x3_operator_index_Int32_args = { &Float32x4x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x4x3_operator_index_UInt32_arg;
Function Float32x4x3_operator_index_UInt32;
inline constexpr std::array Float32x4x3_operator_index_UInt32_args = { &Float32x4x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x4x3_operator_index_Int16_arg;
Function Float32x4x3_operator_index_Int16;
inline constexpr std::array Float32x4x3_operator_index_Int16_args = { &Float32x4x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x4x3_operator_index_UInt16_arg;
Function Float32x4x3_operator_index_UInt16;
inline constexpr std::array Float32x4x3_operator_index_UInt16_args = { &Float32x4x3_operator_index_UInt16_arg };

/// operator* with Float32x3
Variable Float32x4x3_transform_Float32x4_vec;
Function Float32x4x3_transform_Float32x4;
inline constexpr std::array Float32x4x3_transform_Float32x4_args = { &Float32x4x3_transform_Float32x4_vec };

/// operator+ with Float32x4x3
Variable Float32x4x3_operator_add_Float32x4x3_arg;
Function Float32x4x3_operator_add_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_add_Float32x4x3_args = { &Float32x4x3_operator_add_Float32x4x3_arg };

/// operator- with Float32x4x3
Variable Float32x4x3_operator_sub_Float32x4x3_arg;
Function Float32x4x3_operator_sub_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_sub_Float32x4x3_args = { &Float32x4x3_operator_sub_Float32x4x3_arg };

/// operator* with Float32x4x3
Variable Float32x4x3_operator_mul_Float32x4x3_arg;
Function Float32x4x3_operator_mul_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_mul_Float32x4x3_args = { &Float32x4x3_operator_mul_Float32x4x3_arg };

/// operator+= with Float32x4x3
Variable Float32x4x3_operator_addasg_Float32x4x3_arg;
Function Float32x4x3_operator_addasg_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_addasg_Float32x4x3_args = { &Float32x4x3_operator_addasg_Float32x4x3_arg };

/// operator-= with Float32x4x3
Variable Float32x4x3_operator_subasg_Float32x4x3_arg;
Function Float32x4x3_operator_subasg_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_subasg_Float32x4x3_args = { &Float32x4x3_operator_subasg_Float32x4x3_arg };

/// operator*= with Float32x4x3
Variable Float32x4x3_operator_mulasg_Float32x4x3_arg;
Function Float32x4x3_operator_mulasg_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_mulasg_Float32x4x3_args = { &Float32x4x3_operator_mulasg_Float32x4x3_arg };

/// operator* with Float32
Variable Float32x4x3_operator_scale_Float32_arg;
Function Float32x4x3_operator_scale_Float32;
inline constexpr std::array Float32x4x3_operator_scale_Float32_args = { &Float32x4x3_operator_scale_Float32_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float32x4x3_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &Float32x4x3_operator_index_Int16 },
    std::pair{ "operator*(f32x4x3)"_h, &Float32x4x3_operator_mul_Float32x4x3 },
    std::pair{ "operator-"_h, &Float32x4x3_operator_sub_Float32x4x3 },
    std::pair{ "operator+"_h, &Float32x4x3_operator_add_Float32x4x3 },
    std::pair{ "operator*"_h, &Float32x4x3_transform_Float32x4 },
    std::pair{ "operator*"_h, &Float32x4x3_operator_mul_Float32x4x3 },
    std::pair{ "operator*"_h, &Float32x4x3_operator_scale_Float32 },
    std::pair{ "operator-(f32x4x3)"_h, &Float32x4x3_operator_sub_Float32x4x3 },
    std::pair{ "operator*(f32x3)"_h, &Float32x4x3_transform_Float32x4 },
    std::pair{ "operator-=(f32x4x3)"_h, &Float32x4x3_operator_subasg_Float32x4x3 },
    std::pair{ "operator[](u32)"_h, &Float32x4x3_operator_index_UInt32 },
    std::pair{ "operator*(f32)"_h, &Float32x4x3_operator_scale_Float32 },
    std::pair{ "operator+(f32x4x3)"_h, &Float32x4x3_operator_add_Float32x4x3 },
    std::pair{ "operator[](u16)"_h, &Float32x4x3_operator_index_UInt16 },
    std::pair{ "operator[]"_h, &Float32x4x3_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float32x4x3_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float32x4x3_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float32x4x3_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float32x4x3_operator_subasg_Float32x4x3 },
    std::pair{ "operator+="_h, &Float32x4x3_operator_addasg_Float32x4x3 },
    std::pair{ "operator*="_h, &Float32x4x3_operator_mulasg_Float32x4x3 },
    std::pair{ "operator*=(f32x4x3)"_h, &Float32x4x3_operator_mulasg_Float32x4x3 },
    std::pair{ "operator+=(f32x4x3)"_h, &Float32x4x3_operator_addasg_Float32x4x3 },
    std::pair{ "operator[](i32)"_h, &Float32x4x3_operator_index_Int32 }
    };

Float32x4x3::Float32x4x3()
{
    this->name = "f32x4x3"_c;
    this->columnSize = 4;
    this->rowSize = 3;
    this->byteSize = 48;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x4x3_operator_index_Int32_arg.name = "idx"_c;
    Float32x4x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x4x3_operator_index_Int32.name = Float32x4x3_operator_index_Int32_name;
    Float32x4x3_operator_index_Int32.backendIndex = 1200;
    Float32x4x3_operator_index_Int32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x3_operator_index_Int32.parameters = Float32x4x3_operator_index_Int32_args;
    Symbol::Resolved(&Float32x4x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4x3_operator_index_Int32)->signature = "operator[](i32) f32x4"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_Int32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt32
    Float32x4x3_operator_index_UInt32_arg.name = "idx"_c;
    Float32x4x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x4x3_operator_index_UInt32.name = Float32x4x3_operator_index_UInt32_name;
    Float32x4x3_operator_index_UInt32.backendIndex = 1201;
    Float32x4x3_operator_index_UInt32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x3_operator_index_UInt32.parameters = Float32x4x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt32)->signature = "operator[](u32) f32x4"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with Int16
    Float32x4x3_operator_index_Int16_arg.name = "idx"_c;
    Float32x4x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x4x3_operator_index_Int16.name = Float32x4x3_operator_index_Int16_name;
    Float32x4x3_operator_index_Int16.backendIndex = 1202;
    Float32x4x3_operator_index_Int16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x3_operator_index_Int16.parameters = Float32x4x3_operator_index_Int16_args;
    Symbol::Resolved(&Float32x4x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x4x3_operator_index_Int16)->signature = "operator[](i16) f32x4"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_Int16)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt16
    Float32x4x3_operator_index_UInt16_arg.name = "idx"_c;
    Float32x4x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x4x3_operator_index_UInt16.name = Float32x4x3_operator_index_UInt16_name;
    Float32x4x3_operator_index_UInt16.backendIndex = 1203;
    Float32x4x3_operator_index_UInt16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x3_operator_index_UInt16.parameters = Float32x4x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt16)->signature = "operator[](u16) f32x4"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt16)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Float32x3
    Float32x4x3_transform_Float32x4_vec.name = "vec"_c;
    Float32x4x3_transform_Float32x4_vec.type = Type::FullType{ Float32x3Type.name };
    Float32x4x3_transform_Float32x4.name = Float32x4x3_transform_Float32x4_name;
    Float32x4x3_transform_Float32x4.backendIndex = 1204;
    Float32x4x3_transform_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x3_transform_Float32x4.parameters = Float32x4x3_transform_Float32x4_args;
    Symbol::Resolved(&Float32x4x3_transform_Float32x4_vec)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4x3_transform_Float32x4)->signature = "operator*(f32x3) f32x4"_c;
    Symbol::Resolved(&Float32x4x3_transform_Float32x4)->name = "operator*(f32x3)"_c;
    Symbol::Resolved(&Float32x4x3_transform_Float32x4)->nameWithVarNames = "operator*(vec : f32x3)"_c;
    Symbol::Resolved(&Float32x4x3_transform_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator+ with Float32x4x3
    Float32x4x3_operator_add_Float32x4x3_arg.name = "arg"_c;
    Float32x4x3_operator_add_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_add_Float32x4x3.name = Float32x4x3_operator_add_Float32x4x3_name;
    Float32x4x3_operator_add_Float32x4x3.backendIndex = 1205;
    Float32x4x3_operator_add_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_add_Float32x4x3.parameters = Float32x4x3_operator_add_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_add_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_add_Float32x4x3)->signature = "operator+(f32x4x3) f32x4x3"_c;
    Symbol::Resolved(&Float32x4x3_operator_add_Float32x4x3)->name = "operator+(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_add_Float32x4x3)->nameWithVarNames = "operator+(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_add_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator- with Float32x4x3
    Float32x4x3_operator_sub_Float32x4x3_arg.name = "arg"_c;
    Float32x4x3_operator_sub_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_sub_Float32x4x3.name = Float32x4x3_operator_sub_Float32x4x3_name;
    Float32x4x3_operator_sub_Float32x4x3.backendIndex = 1206;
    Float32x4x3_operator_sub_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_sub_Float32x4x3.parameters = Float32x4x3_operator_sub_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_sub_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_sub_Float32x4x3)->signature = "operator-(f32x4x3) f32x4x3"_c;
    Symbol::Resolved(&Float32x4x3_operator_sub_Float32x4x3)->name = "operator-(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_sub_Float32x4x3)->nameWithVarNames = "operator-(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_sub_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator* with Float32x4x3
    Float32x4x3_operator_mul_Float32x4x3_arg.name = "arg"_c;
    Float32x4x3_operator_mul_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_mul_Float32x4x3.name = Float32x4x3_operator_mul_Float32x4x3_name;
    Float32x4x3_operator_mul_Float32x4x3.backendIndex = 1207;
    Float32x4x3_operator_mul_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_mul_Float32x4x3.parameters = Float32x4x3_operator_mul_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_mul_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_mul_Float32x4x3)->signature = "operator*(f32x4x3) f32x4x3"_c;
    Symbol::Resolved(&Float32x4x3_operator_mul_Float32x4x3)->name = "operator*(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_mul_Float32x4x3)->nameWithVarNames = "operator*(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_mul_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator+= with Float32x4x3
    Float32x4x3_operator_addasg_Float32x4x3_arg.name = "arg"_c;
    Float32x4x3_operator_addasg_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_addasg_Float32x4x3.name = Float32x4x3_operator_addasg_Float32x4x3_name;
    Float32x4x3_operator_addasg_Float32x4x3.backendIndex = 1208;
    Float32x4x3_operator_addasg_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_addasg_Float32x4x3.parameters = Float32x4x3_operator_addasg_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_addasg_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_addasg_Float32x4x3)->signature = "operator+=(f32x4x3) f32x4x3"_c;
    Symbol::Resolved(&Float32x4x3_operator_addasg_Float32x4x3)->name = "operator+=(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_addasg_Float32x4x3)->nameWithVarNames = "operator+=(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_addasg_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator-= with Float32x4x3
    Float32x4x3_operator_subasg_Float32x4x3_arg.name = "arg"_c;
    Float32x4x3_operator_subasg_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_subasg_Float32x4x3.name = Float32x4x3_operator_subasg_Float32x4x3_name;
    Float32x4x3_operator_subasg_Float32x4x3.backendIndex = 1209;
    Float32x4x3_operator_subasg_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_subasg_Float32x4x3.parameters = Float32x4x3_operator_subasg_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_subasg_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_subasg_Float32x4x3)->signature = "operator-=(f32x4x3) f32x4x3"_c;
    Symbol::Resolved(&Float32x4x3_operator_subasg_Float32x4x3)->name = "operator-=(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_subasg_Float32x4x3)->nameWithVarNames = "operator-=(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_subasg_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator*= with Float32x4x3
    Float32x4x3_operator_mulasg_Float32x4x3_arg.name = "arg"_c;
    Float32x4x3_operator_mulasg_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_mulasg_Float32x4x3.name = Float32x4x3_operator_mulasg_Float32x4x3_name;
    Float32x4x3_operator_mulasg_Float32x4x3.backendIndex = 1210;
    Float32x4x3_operator_mulasg_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_mulasg_Float32x4x3.parameters = Float32x4x3_operator_mulasg_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_mulasg_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_mulasg_Float32x4x3)->signature = "operator*=(f32x4x3) f32x4x3"_c;
    Symbol::Resolved(&Float32x4x3_operator_mulasg_Float32x4x3)->name = "operator*=(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_mulasg_Float32x4x3)->nameWithVarNames = "operator*=(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_mulasg_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator* with Float32
    Float32x4x3_operator_scale_Float32_arg.name = "arg"_c;
    Float32x4x3_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x4x3_operator_scale_Float32.name = Float32x4x3_operator_scale_Float32_name;
    Float32x4x3_operator_scale_Float32.backendIndex = 1211;
    Float32x4x3_operator_scale_Float32.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_scale_Float32.parameters = Float32x4x3_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32)->signature = "operator*(f32) f32x4x3"_c;
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32)->returnTypeSymbol = &Float32x4x3Type;

    this->scope.symbolLookup = Float32x4x3_symbolLookup;
}
Float32x4x3 Float32x4x3Type;

/// operator[] with Int32
Variable Float32x2x4_operator_index_Int32_arg;
Function Float32x2x4_operator_index_Int32;
inline constexpr std::array Float32x2x4_operator_index_Int32_args = { &Float32x2x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x2x4_operator_index_UInt32_arg;
Function Float32x2x4_operator_index_UInt32;
inline constexpr std::array Float32x2x4_operator_index_UInt32_args = { &Float32x2x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x2x4_operator_index_Int16_arg;
Function Float32x2x4_operator_index_Int16;
inline constexpr std::array Float32x2x4_operator_index_Int16_args = { &Float32x2x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x2x4_operator_index_UInt16_arg;
Function Float32x2x4_operator_index_UInt16;
inline constexpr std::array Float32x2x4_operator_index_UInt16_args = { &Float32x2x4_operator_index_UInt16_arg };

/// operator* with Float32x4
Variable Float32x2x4_transform_Float32x2_vec;
Function Float32x2x4_transform_Float32x2;
inline constexpr std::array Float32x2x4_transform_Float32x2_args = { &Float32x2x4_transform_Float32x2_vec };

/// operator+ with Float32x2x4
Variable Float32x2x4_operator_add_Float32x2x4_arg;
Function Float32x2x4_operator_add_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_add_Float32x2x4_args = { &Float32x2x4_operator_add_Float32x2x4_arg };

/// operator- with Float32x2x4
Variable Float32x2x4_operator_sub_Float32x2x4_arg;
Function Float32x2x4_operator_sub_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_sub_Float32x2x4_args = { &Float32x2x4_operator_sub_Float32x2x4_arg };

/// operator* with Float32x2x4
Variable Float32x2x4_operator_mul_Float32x2x4_arg;
Function Float32x2x4_operator_mul_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_mul_Float32x2x4_args = { &Float32x2x4_operator_mul_Float32x2x4_arg };

/// operator+= with Float32x2x4
Variable Float32x2x4_operator_addasg_Float32x2x4_arg;
Function Float32x2x4_operator_addasg_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_addasg_Float32x2x4_args = { &Float32x2x4_operator_addasg_Float32x2x4_arg };

/// operator-= with Float32x2x4
Variable Float32x2x4_operator_subasg_Float32x2x4_arg;
Function Float32x2x4_operator_subasg_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_subasg_Float32x2x4_args = { &Float32x2x4_operator_subasg_Float32x2x4_arg };

/// operator*= with Float32x2x4
Variable Float32x2x4_operator_mulasg_Float32x2x4_arg;
Function Float32x2x4_operator_mulasg_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_mulasg_Float32x2x4_args = { &Float32x2x4_operator_mulasg_Float32x2x4_arg };

/// operator* with Float32
Variable Float32x2x4_operator_scale_Float32_arg;
Function Float32x2x4_operator_scale_Float32;
inline constexpr std::array Float32x2x4_operator_scale_Float32_args = { &Float32x2x4_operator_scale_Float32_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float32x2x4_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator+(f32x2x4)"_h, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_h, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator+"_h, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator*"_h, &Float32x2x4_transform_Float32x2 },
    std::pair{ "operator*"_h, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator*"_h, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator*(f32x4)"_h, &Float32x2x4_transform_Float32x2 },
    std::pair{ "operator+=(f32x2x4)"_h, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator*=(f32x2x4)"_h, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator[](u32)"_h, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator-=(f32x2x4)"_h, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*(f32)"_h, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[](u16)"_h, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator*(f32x2x4)"_h, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator[]"_h, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator+="_h, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator*="_h, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator-(f32x2x4)"_h, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator[](i32)"_h, &Float32x2x4_operator_index_Int32 }
    };

Float32x2x4::Float32x2x4()
{
    this->name = "f32x2x4"_c;
    this->columnSize = 2;
    this->rowSize = 4;
    this->byteSize = 32;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x2x4_operator_index_Int32_arg.name = "idx"_c;
    Float32x2x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x2x4_operator_index_Int32.name = Float32x2x4_operator_index_Int32_name;
    Float32x2x4_operator_index_Int32.backendIndex = 1214;
    Float32x2x4_operator_index_Int32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x4_operator_index_Int32.parameters = Float32x2x4_operator_index_Int32_args;
    Symbol::Resolved(&Float32x2x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2x4_operator_index_Int32)->signature = "operator[](i32) f32x2"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_Int32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt32
    Float32x2x4_operator_index_UInt32_arg.name = "idx"_c;
    Float32x2x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x2x4_operator_index_UInt32.name = Float32x2x4_operator_index_UInt32_name;
    Float32x2x4_operator_index_UInt32.backendIndex = 1215;
    Float32x2x4_operator_index_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x4_operator_index_UInt32.parameters = Float32x2x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt32)->signature = "operator[](u32) f32x2"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with Int16
    Float32x2x4_operator_index_Int16_arg.name = "idx"_c;
    Float32x2x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x2x4_operator_index_Int16.name = Float32x2x4_operator_index_Int16_name;
    Float32x2x4_operator_index_Int16.backendIndex = 1216;
    Float32x2x4_operator_index_Int16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x4_operator_index_Int16.parameters = Float32x2x4_operator_index_Int16_args;
    Symbol::Resolved(&Float32x2x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2x4_operator_index_Int16)->signature = "operator[](i16) f32x2"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_Int16)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt16
    Float32x2x4_operator_index_UInt16_arg.name = "idx"_c;
    Float32x2x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x2x4_operator_index_UInt16.name = Float32x2x4_operator_index_UInt16_name;
    Float32x2x4_operator_index_UInt16.backendIndex = 1217;
    Float32x2x4_operator_index_UInt16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x4_operator_index_UInt16.parameters = Float32x2x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt16)->signature = "operator[](u16) f32x2"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt16)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x4
    Float32x2x4_transform_Float32x2_vec.name = "vec"_c;
    Float32x2x4_transform_Float32x2_vec.type = Type::FullType{ Float32x4Type.name };
    Float32x2x4_transform_Float32x2.name = Float32x2x4_transform_Float32x2_name;
    Float32x2x4_transform_Float32x2.backendIndex = 1218;
    Float32x2x4_transform_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x4_transform_Float32x2.parameters = Float32x2x4_transform_Float32x2_args;
    Symbol::Resolved(&Float32x2x4_transform_Float32x2_vec)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x2x4_transform_Float32x2)->signature = "operator*(f32x4) f32x2"_c;
    Symbol::Resolved(&Float32x2x4_transform_Float32x2)->name = "operator*(f32x4)"_c;
    Symbol::Resolved(&Float32x2x4_transform_Float32x2)->nameWithVarNames = "operator*(vec : f32x4)"_c;
    Symbol::Resolved(&Float32x2x4_transform_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator+ with Float32x2x4
    Float32x2x4_operator_add_Float32x2x4_arg.name = "arg"_c;
    Float32x2x4_operator_add_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_add_Float32x2x4.name = Float32x2x4_operator_add_Float32x2x4_name;
    Float32x2x4_operator_add_Float32x2x4.backendIndex = 1219;
    Float32x2x4_operator_add_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_add_Float32x2x4.parameters = Float32x2x4_operator_add_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_add_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_add_Float32x2x4)->signature = "operator+(f32x2x4) f32x2x4"_c;
    Symbol::Resolved(&Float32x2x4_operator_add_Float32x2x4)->name = "operator+(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_add_Float32x2x4)->nameWithVarNames = "operator+(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_add_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator- with Float32x2x4
    Float32x2x4_operator_sub_Float32x2x4_arg.name = "arg"_c;
    Float32x2x4_operator_sub_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_sub_Float32x2x4.name = Float32x2x4_operator_sub_Float32x2x4_name;
    Float32x2x4_operator_sub_Float32x2x4.backendIndex = 1220;
    Float32x2x4_operator_sub_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_sub_Float32x2x4.parameters = Float32x2x4_operator_sub_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_sub_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_sub_Float32x2x4)->signature = "operator-(f32x2x4) f32x2x4"_c;
    Symbol::Resolved(&Float32x2x4_operator_sub_Float32x2x4)->name = "operator-(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_sub_Float32x2x4)->nameWithVarNames = "operator-(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_sub_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator* with Float32x2x4
    Float32x2x4_operator_mul_Float32x2x4_arg.name = "arg"_c;
    Float32x2x4_operator_mul_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_mul_Float32x2x4.name = Float32x2x4_operator_mul_Float32x2x4_name;
    Float32x2x4_operator_mul_Float32x2x4.backendIndex = 1221;
    Float32x2x4_operator_mul_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_mul_Float32x2x4.parameters = Float32x2x4_operator_mul_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_mul_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_mul_Float32x2x4)->signature = "operator*(f32x2x4) f32x2x4"_c;
    Symbol::Resolved(&Float32x2x4_operator_mul_Float32x2x4)->name = "operator*(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_mul_Float32x2x4)->nameWithVarNames = "operator*(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_mul_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator+= with Float32x2x4
    Float32x2x4_operator_addasg_Float32x2x4_arg.name = "arg"_c;
    Float32x2x4_operator_addasg_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_addasg_Float32x2x4.name = Float32x2x4_operator_addasg_Float32x2x4_name;
    Float32x2x4_operator_addasg_Float32x2x4.backendIndex = 1222;
    Float32x2x4_operator_addasg_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_addasg_Float32x2x4.parameters = Float32x2x4_operator_addasg_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_addasg_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_addasg_Float32x2x4)->signature = "operator+=(f32x2x4) f32x2x4"_c;
    Symbol::Resolved(&Float32x2x4_operator_addasg_Float32x2x4)->name = "operator+=(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_addasg_Float32x2x4)->nameWithVarNames = "operator+=(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_addasg_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator-= with Float32x2x4
    Float32x2x4_operator_subasg_Float32x2x4_arg.name = "arg"_c;
    Float32x2x4_operator_subasg_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_subasg_Float32x2x4.name = Float32x2x4_operator_subasg_Float32x2x4_name;
    Float32x2x4_operator_subasg_Float32x2x4.backendIndex = 1223;
    Float32x2x4_operator_subasg_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_subasg_Float32x2x4.parameters = Float32x2x4_operator_subasg_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_subasg_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_subasg_Float32x2x4)->signature = "operator-=(f32x2x4) f32x2x4"_c;
    Symbol::Resolved(&Float32x2x4_operator_subasg_Float32x2x4)->name = "operator-=(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_subasg_Float32x2x4)->nameWithVarNames = "operator-=(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_subasg_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator*= with Float32x2x4
    Float32x2x4_operator_mulasg_Float32x2x4_arg.name = "arg"_c;
    Float32x2x4_operator_mulasg_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_mulasg_Float32x2x4.name = Float32x2x4_operator_mulasg_Float32x2x4_name;
    Float32x2x4_operator_mulasg_Float32x2x4.backendIndex = 1224;
    Float32x2x4_operator_mulasg_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_mulasg_Float32x2x4.parameters = Float32x2x4_operator_mulasg_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_mulasg_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_mulasg_Float32x2x4)->signature = "operator*=(f32x2x4) f32x2x4"_c;
    Symbol::Resolved(&Float32x2x4_operator_mulasg_Float32x2x4)->name = "operator*=(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_mulasg_Float32x2x4)->nameWithVarNames = "operator*=(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_mulasg_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator* with Float32
    Float32x2x4_operator_scale_Float32_arg.name = "arg"_c;
    Float32x2x4_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x2x4_operator_scale_Float32.name = Float32x2x4_operator_scale_Float32_name;
    Float32x2x4_operator_scale_Float32.backendIndex = 1225;
    Float32x2x4_operator_scale_Float32.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_scale_Float32.parameters = Float32x2x4_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32)->signature = "operator*(f32) f32x2x4"_c;
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32)->returnTypeSymbol = &Float32x2x4Type;

    this->scope.symbolLookup = Float32x2x4_symbolLookup;
}
Float32x2x4 Float32x2x4Type;

/// operator[] with Int32
Variable Float32x3x4_operator_index_Int32_arg;
Function Float32x3x4_operator_index_Int32;
inline constexpr std::array Float32x3x4_operator_index_Int32_args = { &Float32x3x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x3x4_operator_index_UInt32_arg;
Function Float32x3x4_operator_index_UInt32;
inline constexpr std::array Float32x3x4_operator_index_UInt32_args = { &Float32x3x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x3x4_operator_index_Int16_arg;
Function Float32x3x4_operator_index_Int16;
inline constexpr std::array Float32x3x4_operator_index_Int16_args = { &Float32x3x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x3x4_operator_index_UInt16_arg;
Function Float32x3x4_operator_index_UInt16;
inline constexpr std::array Float32x3x4_operator_index_UInt16_args = { &Float32x3x4_operator_index_UInt16_arg };

/// operator* with Float32x4
Variable Float32x3x4_transform_Float32x3_vec;
Function Float32x3x4_transform_Float32x3;
inline constexpr std::array Float32x3x4_transform_Float32x3_args = { &Float32x3x4_transform_Float32x3_vec };

/// operator+ with Float32x3x4
Variable Float32x3x4_operator_add_Float32x3x4_arg;
Function Float32x3x4_operator_add_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_add_Float32x3x4_args = { &Float32x3x4_operator_add_Float32x3x4_arg };

/// operator- with Float32x3x4
Variable Float32x3x4_operator_sub_Float32x3x4_arg;
Function Float32x3x4_operator_sub_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_sub_Float32x3x4_args = { &Float32x3x4_operator_sub_Float32x3x4_arg };

/// operator* with Float32x3x4
Variable Float32x3x4_operator_mul_Float32x3x4_arg;
Function Float32x3x4_operator_mul_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_mul_Float32x3x4_args = { &Float32x3x4_operator_mul_Float32x3x4_arg };

/// operator+= with Float32x3x4
Variable Float32x3x4_operator_addasg_Float32x3x4_arg;
Function Float32x3x4_operator_addasg_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_addasg_Float32x3x4_args = { &Float32x3x4_operator_addasg_Float32x3x4_arg };

/// operator-= with Float32x3x4
Variable Float32x3x4_operator_subasg_Float32x3x4_arg;
Function Float32x3x4_operator_subasg_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_subasg_Float32x3x4_args = { &Float32x3x4_operator_subasg_Float32x3x4_arg };

/// operator*= with Float32x3x4
Variable Float32x3x4_operator_mulasg_Float32x3x4_arg;
Function Float32x3x4_operator_mulasg_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_mulasg_Float32x3x4_args = { &Float32x3x4_operator_mulasg_Float32x3x4_arg };

/// operator* with Float32
Variable Float32x3x4_operator_scale_Float32_arg;
Function Float32x3x4_operator_scale_Float32;
inline constexpr std::array Float32x3x4_operator_scale_Float32_args = { &Float32x3x4_operator_scale_Float32_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float32x3x4_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &Float32x3x4_operator_index_Int16 },
    std::pair{ "operator*=(f32x3x4)"_h, &Float32x3x4_operator_mulasg_Float32x3x4 },
    std::pair{ "operator*(f32x3x4)"_h, &Float32x3x4_operator_mul_Float32x3x4 },
    std::pair{ "operator-(f32x3x4)"_h, &Float32x3x4_operator_sub_Float32x3x4 },
    std::pair{ "operator-"_h, &Float32x3x4_operator_sub_Float32x3x4 },
    std::pair{ "operator+"_h, &Float32x3x4_operator_add_Float32x3x4 },
    std::pair{ "operator*"_h, &Float32x3x4_transform_Float32x3 },
    std::pair{ "operator*"_h, &Float32x3x4_operator_mul_Float32x3x4 },
    std::pair{ "operator*"_h, &Float32x3x4_operator_scale_Float32 },
    std::pair{ "operator*(f32x4)"_h, &Float32x3x4_transform_Float32x3 },
    std::pair{ "operator[](u32)"_h, &Float32x3x4_operator_index_UInt32 },
    std::pair{ "operator*(f32)"_h, &Float32x3x4_operator_scale_Float32 },
    std::pair{ "operator[](u16)"_h, &Float32x3x4_operator_index_UInt16 },
    std::pair{ "operator+(f32x3x4)"_h, &Float32x3x4_operator_add_Float32x3x4 },
    std::pair{ "operator+=(f32x3x4)"_h, &Float32x3x4_operator_addasg_Float32x3x4 },
    std::pair{ "operator[]"_h, &Float32x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float32x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float32x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float32x3x4_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float32x3x4_operator_subasg_Float32x3x4 },
    std::pair{ "operator+="_h, &Float32x3x4_operator_addasg_Float32x3x4 },
    std::pair{ "operator*="_h, &Float32x3x4_operator_mulasg_Float32x3x4 },
    std::pair{ "operator-=(f32x3x4)"_h, &Float32x3x4_operator_subasg_Float32x3x4 },
    std::pair{ "operator[](i32)"_h, &Float32x3x4_operator_index_Int32 }
    };

Float32x3x4::Float32x3x4()
{
    this->name = "f32x3x4"_c;
    this->columnSize = 3;
    this->rowSize = 4;
    this->byteSize = 48;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x3x4_operator_index_Int32_arg.name = "idx"_c;
    Float32x3x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x3x4_operator_index_Int32.name = Float32x3x4_operator_index_Int32_name;
    Float32x3x4_operator_index_Int32.backendIndex = 1228;
    Float32x3x4_operator_index_Int32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x4_operator_index_Int32.parameters = Float32x3x4_operator_index_Int32_args;
    Symbol::Resolved(&Float32x3x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3x4_operator_index_Int32)->signature = "operator[](i32) f32x3"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_Int32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt32
    Float32x3x4_operator_index_UInt32_arg.name = "idx"_c;
    Float32x3x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x3x4_operator_index_UInt32.name = Float32x3x4_operator_index_UInt32_name;
    Float32x3x4_operator_index_UInt32.backendIndex = 1229;
    Float32x3x4_operator_index_UInt32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x4_operator_index_UInt32.parameters = Float32x3x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt32)->signature = "operator[](u32) f32x3"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with Int16
    Float32x3x4_operator_index_Int16_arg.name = "idx"_c;
    Float32x3x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x3x4_operator_index_Int16.name = Float32x3x4_operator_index_Int16_name;
    Float32x3x4_operator_index_Int16.backendIndex = 1230;
    Float32x3x4_operator_index_Int16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x4_operator_index_Int16.parameters = Float32x3x4_operator_index_Int16_args;
    Symbol::Resolved(&Float32x3x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x3x4_operator_index_Int16)->signature = "operator[](i16) f32x3"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_Int16)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt16
    Float32x3x4_operator_index_UInt16_arg.name = "idx"_c;
    Float32x3x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x3x4_operator_index_UInt16.name = Float32x3x4_operator_index_UInt16_name;
    Float32x3x4_operator_index_UInt16.backendIndex = 1231;
    Float32x3x4_operator_index_UInt16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x4_operator_index_UInt16.parameters = Float32x3x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt16)->signature = "operator[](u16) f32x3"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt16)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x4
    Float32x3x4_transform_Float32x3_vec.name = "vec"_c;
    Float32x3x4_transform_Float32x3_vec.type = Type::FullType{ Float32x4Type.name };
    Float32x3x4_transform_Float32x3.name = Float32x3x4_transform_Float32x3_name;
    Float32x3x4_transform_Float32x3.backendIndex = 1232;
    Float32x3x4_transform_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x4_transform_Float32x3.parameters = Float32x3x4_transform_Float32x3_args;
    Symbol::Resolved(&Float32x3x4_transform_Float32x3_vec)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x3x4_transform_Float32x3)->signature = "operator*(f32x4) f32x3"_c;
    Symbol::Resolved(&Float32x3x4_transform_Float32x3)->name = "operator*(f32x4)"_c;
    Symbol::Resolved(&Float32x3x4_transform_Float32x3)->nameWithVarNames = "operator*(vec : f32x4)"_c;
    Symbol::Resolved(&Float32x3x4_transform_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator+ with Float32x3x4
    Float32x3x4_operator_add_Float32x3x4_arg.name = "arg"_c;
    Float32x3x4_operator_add_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_add_Float32x3x4.name = Float32x3x4_operator_add_Float32x3x4_name;
    Float32x3x4_operator_add_Float32x3x4.backendIndex = 1233;
    Float32x3x4_operator_add_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_add_Float32x3x4.parameters = Float32x3x4_operator_add_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_add_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_add_Float32x3x4)->signature = "operator+(f32x3x4) f32x3x4"_c;
    Symbol::Resolved(&Float32x3x4_operator_add_Float32x3x4)->name = "operator+(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_add_Float32x3x4)->nameWithVarNames = "operator+(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_add_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator- with Float32x3x4
    Float32x3x4_operator_sub_Float32x3x4_arg.name = "arg"_c;
    Float32x3x4_operator_sub_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_sub_Float32x3x4.name = Float32x3x4_operator_sub_Float32x3x4_name;
    Float32x3x4_operator_sub_Float32x3x4.backendIndex = 1234;
    Float32x3x4_operator_sub_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_sub_Float32x3x4.parameters = Float32x3x4_operator_sub_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_sub_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_sub_Float32x3x4)->signature = "operator-(f32x3x4) f32x3x4"_c;
    Symbol::Resolved(&Float32x3x4_operator_sub_Float32x3x4)->name = "operator-(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_sub_Float32x3x4)->nameWithVarNames = "operator-(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_sub_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator* with Float32x3x4
    Float32x3x4_operator_mul_Float32x3x4_arg.name = "arg"_c;
    Float32x3x4_operator_mul_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_mul_Float32x3x4.name = Float32x3x4_operator_mul_Float32x3x4_name;
    Float32x3x4_operator_mul_Float32x3x4.backendIndex = 1235;
    Float32x3x4_operator_mul_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_mul_Float32x3x4.parameters = Float32x3x4_operator_mul_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_mul_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_mul_Float32x3x4)->signature = "operator*(f32x3x4) f32x3x4"_c;
    Symbol::Resolved(&Float32x3x4_operator_mul_Float32x3x4)->name = "operator*(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_mul_Float32x3x4)->nameWithVarNames = "operator*(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_mul_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator+= with Float32x3x4
    Float32x3x4_operator_addasg_Float32x3x4_arg.name = "arg"_c;
    Float32x3x4_operator_addasg_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_addasg_Float32x3x4.name = Float32x3x4_operator_addasg_Float32x3x4_name;
    Float32x3x4_operator_addasg_Float32x3x4.backendIndex = 1236;
    Float32x3x4_operator_addasg_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_addasg_Float32x3x4.parameters = Float32x3x4_operator_addasg_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_addasg_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_addasg_Float32x3x4)->signature = "operator+=(f32x3x4) f32x3x4"_c;
    Symbol::Resolved(&Float32x3x4_operator_addasg_Float32x3x4)->name = "operator+=(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_addasg_Float32x3x4)->nameWithVarNames = "operator+=(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_addasg_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator-= with Float32x3x4
    Float32x3x4_operator_subasg_Float32x3x4_arg.name = "arg"_c;
    Float32x3x4_operator_subasg_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_subasg_Float32x3x4.name = Float32x3x4_operator_subasg_Float32x3x4_name;
    Float32x3x4_operator_subasg_Float32x3x4.backendIndex = 1237;
    Float32x3x4_operator_subasg_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_subasg_Float32x3x4.parameters = Float32x3x4_operator_subasg_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_subasg_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_subasg_Float32x3x4)->signature = "operator-=(f32x3x4) f32x3x4"_c;
    Symbol::Resolved(&Float32x3x4_operator_subasg_Float32x3x4)->name = "operator-=(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_subasg_Float32x3x4)->nameWithVarNames = "operator-=(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_subasg_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator*= with Float32x3x4
    Float32x3x4_operator_mulasg_Float32x3x4_arg.name = "arg"_c;
    Float32x3x4_operator_mulasg_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_mulasg_Float32x3x4.name = Float32x3x4_operator_mulasg_Float32x3x4_name;
    Float32x3x4_operator_mulasg_Float32x3x4.backendIndex = 1238;
    Float32x3x4_operator_mulasg_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_mulasg_Float32x3x4.parameters = Float32x3x4_operator_mulasg_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_mulasg_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_mulasg_Float32x3x4)->signature = "operator*=(f32x3x4) f32x3x4"_c;
    Symbol::Resolved(&Float32x3x4_operator_mulasg_Float32x3x4)->name = "operator*=(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_mulasg_Float32x3x4)->nameWithVarNames = "operator*=(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_mulasg_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator* with Float32
    Float32x3x4_operator_scale_Float32_arg.name = "arg"_c;
    Float32x3x4_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x3x4_operator_scale_Float32.name = Float32x3x4_operator_scale_Float32_name;
    Float32x3x4_operator_scale_Float32.backendIndex = 1239;
    Float32x3x4_operator_scale_Float32.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_scale_Float32.parameters = Float32x3x4_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32)->signature = "operator*(f32) f32x3x4"_c;
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32)->returnTypeSymbol = &Float32x3x4Type;

    this->scope.symbolLookup = Float32x3x4_symbolLookup;
}
Float32x3x4 Float32x3x4Type;

/// operator[] with Int32
Variable Float32x4x4_operator_index_Int32_arg;
Function Float32x4x4_operator_index_Int32;
inline constexpr std::array Float32x4x4_operator_index_Int32_args = { &Float32x4x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x4x4_operator_index_UInt32_arg;
Function Float32x4x4_operator_index_UInt32;
inline constexpr std::array Float32x4x4_operator_index_UInt32_args = { &Float32x4x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x4x4_operator_index_Int16_arg;
Function Float32x4x4_operator_index_Int16;
inline constexpr std::array Float32x4x4_operator_index_Int16_args = { &Float32x4x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x4x4_operator_index_UInt16_arg;
Function Float32x4x4_operator_index_UInt16;
inline constexpr std::array Float32x4x4_operator_index_UInt16_args = { &Float32x4x4_operator_index_UInt16_arg };

/// operator* with Float32x4
Variable Float32x4x4_transform_Float32x4_vec;
Function Float32x4x4_transform_Float32x4;
inline constexpr std::array Float32x4x4_transform_Float32x4_args = { &Float32x4x4_transform_Float32x4_vec };

/// operator+ with Float32x4x4
Variable Float32x4x4_operator_add_Float32x4x4_arg;
Function Float32x4x4_operator_add_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_add_Float32x4x4_args = { &Float32x4x4_operator_add_Float32x4x4_arg };

/// operator- with Float32x4x4
Variable Float32x4x4_operator_sub_Float32x4x4_arg;
Function Float32x4x4_operator_sub_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_sub_Float32x4x4_args = { &Float32x4x4_operator_sub_Float32x4x4_arg };

/// operator* with Float32x4x4
Variable Float32x4x4_operator_mul_Float32x4x4_arg;
Function Float32x4x4_operator_mul_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_mul_Float32x4x4_args = { &Float32x4x4_operator_mul_Float32x4x4_arg };

/// operator+= with Float32x4x4
Variable Float32x4x4_operator_addasg_Float32x4x4_arg;
Function Float32x4x4_operator_addasg_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_addasg_Float32x4x4_args = { &Float32x4x4_operator_addasg_Float32x4x4_arg };

/// operator-= with Float32x4x4
Variable Float32x4x4_operator_subasg_Float32x4x4_arg;
Function Float32x4x4_operator_subasg_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_subasg_Float32x4x4_args = { &Float32x4x4_operator_subasg_Float32x4x4_arg };

/// operator*= with Float32x4x4
Variable Float32x4x4_operator_mulasg_Float32x4x4_arg;
Function Float32x4x4_operator_mulasg_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_mulasg_Float32x4x4_args = { &Float32x4x4_operator_mulasg_Float32x4x4_arg };

/// operator* with Float32
Variable Float32x4x4_operator_scale_Float32_arg;
Function Float32x4x4_operator_scale_Float32;
inline constexpr std::array Float32x4x4_operator_scale_Float32_args = { &Float32x4x4_operator_scale_Float32_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float32x4x4_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &Float32x4x4_operator_index_Int16 },
    std::pair{ "operator*(f32x4x4)"_h, &Float32x4x4_operator_mul_Float32x4x4 },
    std::pair{ "operator-"_h, &Float32x4x4_operator_sub_Float32x4x4 },
    std::pair{ "operator+"_h, &Float32x4x4_operator_add_Float32x4x4 },
    std::pair{ "operator*"_h, &Float32x4x4_transform_Float32x4 },
    std::pair{ "operator*"_h, &Float32x4x4_operator_mul_Float32x4x4 },
    std::pair{ "operator*"_h, &Float32x4x4_operator_scale_Float32 },
    std::pair{ "operator-(f32x4x4)"_h, &Float32x4x4_operator_sub_Float32x4x4 },
    std::pair{ "operator*(f32x4)"_h, &Float32x4x4_transform_Float32x4 },
    std::pair{ "operator-=(f32x4x4)"_h, &Float32x4x4_operator_subasg_Float32x4x4 },
    std::pair{ "operator[](u32)"_h, &Float32x4x4_operator_index_UInt32 },
    std::pair{ "operator*(f32)"_h, &Float32x4x4_operator_scale_Float32 },
    std::pair{ "operator+(f32x4x4)"_h, &Float32x4x4_operator_add_Float32x4x4 },
    std::pair{ "operator[](u16)"_h, &Float32x4x4_operator_index_UInt16 },
    std::pair{ "operator[]"_h, &Float32x4x4_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float32x4x4_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float32x4x4_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float32x4x4_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float32x4x4_operator_subasg_Float32x4x4 },
    std::pair{ "operator+="_h, &Float32x4x4_operator_addasg_Float32x4x4 },
    std::pair{ "operator*="_h, &Float32x4x4_operator_mulasg_Float32x4x4 },
    std::pair{ "operator*=(f32x4x4)"_h, &Float32x4x4_operator_mulasg_Float32x4x4 },
    std::pair{ "operator+=(f32x4x4)"_h, &Float32x4x4_operator_addasg_Float32x4x4 },
    std::pair{ "operator[](i32)"_h, &Float32x4x4_operator_index_Int32 }
    };

Float32x4x4::Float32x4x4()
{
    this->name = "f32x4x4"_c;
    this->columnSize = 4;
    this->rowSize = 4;
    this->byteSize = 64;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x4x4_operator_index_Int32_arg.name = "idx"_c;
    Float32x4x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x4x4_operator_index_Int32.name = Float32x4x4_operator_index_Int32_name;
    Float32x4x4_operator_index_Int32.backendIndex = 1243;
    Float32x4x4_operator_index_Int32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x4_operator_index_Int32.parameters = Float32x4x4_operator_index_Int32_args;
    Symbol::Resolved(&Float32x4x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4x4_operator_index_Int32)->signature = "operator[](i32) f32x4"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_Int32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt32
    Float32x4x4_operator_index_UInt32_arg.name = "idx"_c;
    Float32x4x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x4x4_operator_index_UInt32.name = Float32x4x4_operator_index_UInt32_name;
    Float32x4x4_operator_index_UInt32.backendIndex = 1244;
    Float32x4x4_operator_index_UInt32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x4_operator_index_UInt32.parameters = Float32x4x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt32)->signature = "operator[](u32) f32x4"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with Int16
    Float32x4x4_operator_index_Int16_arg.name = "idx"_c;
    Float32x4x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x4x4_operator_index_Int16.name = Float32x4x4_operator_index_Int16_name;
    Float32x4x4_operator_index_Int16.backendIndex = 1245;
    Float32x4x4_operator_index_Int16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x4_operator_index_Int16.parameters = Float32x4x4_operator_index_Int16_args;
    Symbol::Resolved(&Float32x4x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x4x4_operator_index_Int16)->signature = "operator[](i16) f32x4"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_Int16)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt16
    Float32x4x4_operator_index_UInt16_arg.name = "idx"_c;
    Float32x4x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x4x4_operator_index_UInt16.name = Float32x4x4_operator_index_UInt16_name;
    Float32x4x4_operator_index_UInt16.backendIndex = 1246;
    Float32x4x4_operator_index_UInt16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x4_operator_index_UInt16.parameters = Float32x4x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt16)->signature = "operator[](u16) f32x4"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt16)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Float32x4
    Float32x4x4_transform_Float32x4_vec.name = "vec"_c;
    Float32x4x4_transform_Float32x4_vec.type = Type::FullType{ Float32x4Type.name };
    Float32x4x4_transform_Float32x4.name = Float32x4x4_transform_Float32x4_name;
    Float32x4x4_transform_Float32x4.backendIndex = 1247;
    Float32x4x4_transform_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x4_transform_Float32x4.parameters = Float32x4x4_transform_Float32x4_args;
    Symbol::Resolved(&Float32x4x4_transform_Float32x4_vec)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4x4_transform_Float32x4)->signature = "operator*(f32x4) f32x4"_c;
    Symbol::Resolved(&Float32x4x4_transform_Float32x4)->name = "operator*(f32x4)"_c;
    Symbol::Resolved(&Float32x4x4_transform_Float32x4)->nameWithVarNames = "operator*(vec : f32x4)"_c;
    Symbol::Resolved(&Float32x4x4_transform_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator+ with Float32x4x4
    Float32x4x4_operator_add_Float32x4x4_arg.name = "arg"_c;
    Float32x4x4_operator_add_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_add_Float32x4x4.name = Float32x4x4_operator_add_Float32x4x4_name;
    Float32x4x4_operator_add_Float32x4x4.backendIndex = 1248;
    Float32x4x4_operator_add_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_add_Float32x4x4.parameters = Float32x4x4_operator_add_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_add_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_add_Float32x4x4)->signature = "operator+(f32x4x4) f32x4x4"_c;
    Symbol::Resolved(&Float32x4x4_operator_add_Float32x4x4)->name = "operator+(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_add_Float32x4x4)->nameWithVarNames = "operator+(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_add_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator- with Float32x4x4
    Float32x4x4_operator_sub_Float32x4x4_arg.name = "arg"_c;
    Float32x4x4_operator_sub_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_sub_Float32x4x4.name = Float32x4x4_operator_sub_Float32x4x4_name;
    Float32x4x4_operator_sub_Float32x4x4.backendIndex = 1249;
    Float32x4x4_operator_sub_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_sub_Float32x4x4.parameters = Float32x4x4_operator_sub_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_sub_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_sub_Float32x4x4)->signature = "operator-(f32x4x4) f32x4x4"_c;
    Symbol::Resolved(&Float32x4x4_operator_sub_Float32x4x4)->name = "operator-(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_sub_Float32x4x4)->nameWithVarNames = "operator-(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_sub_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator* with Float32x4x4
    Float32x4x4_operator_mul_Float32x4x4_arg.name = "arg"_c;
    Float32x4x4_operator_mul_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_mul_Float32x4x4.name = Float32x4x4_operator_mul_Float32x4x4_name;
    Float32x4x4_operator_mul_Float32x4x4.backendIndex = 1250;
    Float32x4x4_operator_mul_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_mul_Float32x4x4.parameters = Float32x4x4_operator_mul_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_mul_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_mul_Float32x4x4)->signature = "operator*(f32x4x4) f32x4x4"_c;
    Symbol::Resolved(&Float32x4x4_operator_mul_Float32x4x4)->name = "operator*(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_mul_Float32x4x4)->nameWithVarNames = "operator*(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_mul_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator+= with Float32x4x4
    Float32x4x4_operator_addasg_Float32x4x4_arg.name = "arg"_c;
    Float32x4x4_operator_addasg_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_addasg_Float32x4x4.name = Float32x4x4_operator_addasg_Float32x4x4_name;
    Float32x4x4_operator_addasg_Float32x4x4.backendIndex = 1251;
    Float32x4x4_operator_addasg_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_addasg_Float32x4x4.parameters = Float32x4x4_operator_addasg_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_addasg_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_addasg_Float32x4x4)->signature = "operator+=(f32x4x4) f32x4x4"_c;
    Symbol::Resolved(&Float32x4x4_operator_addasg_Float32x4x4)->name = "operator+=(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_addasg_Float32x4x4)->nameWithVarNames = "operator+=(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_addasg_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator-= with Float32x4x4
    Float32x4x4_operator_subasg_Float32x4x4_arg.name = "arg"_c;
    Float32x4x4_operator_subasg_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_subasg_Float32x4x4.name = Float32x4x4_operator_subasg_Float32x4x4_name;
    Float32x4x4_operator_subasg_Float32x4x4.backendIndex = 1252;
    Float32x4x4_operator_subasg_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_subasg_Float32x4x4.parameters = Float32x4x4_operator_subasg_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_subasg_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_subasg_Float32x4x4)->signature = "operator-=(f32x4x4) f32x4x4"_c;
    Symbol::Resolved(&Float32x4x4_operator_subasg_Float32x4x4)->name = "operator-=(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_subasg_Float32x4x4)->nameWithVarNames = "operator-=(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_subasg_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator*= with Float32x4x4
    Float32x4x4_operator_mulasg_Float32x4x4_arg.name = "arg"_c;
    Float32x4x4_operator_mulasg_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_mulasg_Float32x4x4.name = Float32x4x4_operator_mulasg_Float32x4x4_name;
    Float32x4x4_operator_mulasg_Float32x4x4.backendIndex = 1253;
    Float32x4x4_operator_mulasg_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_mulasg_Float32x4x4.parameters = Float32x4x4_operator_mulasg_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_mulasg_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_mulasg_Float32x4x4)->signature = "operator*=(f32x4x4) f32x4x4"_c;
    Symbol::Resolved(&Float32x4x4_operator_mulasg_Float32x4x4)->name = "operator*=(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_mulasg_Float32x4x4)->nameWithVarNames = "operator*=(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_mulasg_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator* with Float32
    Float32x4x4_operator_scale_Float32_arg.name = "arg"_c;
    Float32x4x4_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x4x4_operator_scale_Float32.name = Float32x4x4_operator_scale_Float32_name;
    Float32x4x4_operator_scale_Float32.backendIndex = 1254;
    Float32x4x4_operator_scale_Float32.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_scale_Float32.parameters = Float32x4x4_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32)->signature = "operator*(f32) f32x4x4"_c;
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32)->returnTypeSymbol = &Float32x4x4Type;

    this->scope.symbolLookup = Float32x4x4_symbolLookup;
}
Float32x4x4 Float32x4x4Type;

/// operator[] with Int32
Variable Float16x2x2_operator_index_Int32_arg;
Function Float16x2x2_operator_index_Int32;
inline constexpr std::array Float16x2x2_operator_index_Int32_args = { &Float16x2x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x2x2_operator_index_UInt32_arg;
Function Float16x2x2_operator_index_UInt32;
inline constexpr std::array Float16x2x2_operator_index_UInt32_args = { &Float16x2x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x2x2_operator_index_Int16_arg;
Function Float16x2x2_operator_index_Int16;
inline constexpr std::array Float16x2x2_operator_index_Int16_args = { &Float16x2x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x2x2_operator_index_UInt16_arg;
Function Float16x2x2_operator_index_UInt16;
inline constexpr std::array Float16x2x2_operator_index_UInt16_args = { &Float16x2x2_operator_index_UInt16_arg };

/// operator* with Float16x2
Variable Float16x2x2_transform_Float16x2_vec;
Function Float16x2x2_transform_Float16x2;
inline constexpr std::array Float16x2x2_transform_Float16x2_args = { &Float16x2x2_transform_Float16x2_vec };

/// operator+ with Float16x2x2
Variable Float16x2x2_operator_add_Float16x2x2_arg;
Function Float16x2x2_operator_add_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_add_Float16x2x2_args = { &Float16x2x2_operator_add_Float16x2x2_arg };

/// operator- with Float16x2x2
Variable Float16x2x2_operator_sub_Float16x2x2_arg;
Function Float16x2x2_operator_sub_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_sub_Float16x2x2_args = { &Float16x2x2_operator_sub_Float16x2x2_arg };

/// operator* with Float16x2x2
Variable Float16x2x2_operator_mul_Float16x2x2_arg;
Function Float16x2x2_operator_mul_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_mul_Float16x2x2_args = { &Float16x2x2_operator_mul_Float16x2x2_arg };

/// operator+= with Float16x2x2
Variable Float16x2x2_operator_addasg_Float16x2x2_arg;
Function Float16x2x2_operator_addasg_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_addasg_Float16x2x2_args = { &Float16x2x2_operator_addasg_Float16x2x2_arg };

/// operator-= with Float16x2x2
Variable Float16x2x2_operator_subasg_Float16x2x2_arg;
Function Float16x2x2_operator_subasg_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_subasg_Float16x2x2_args = { &Float16x2x2_operator_subasg_Float16x2x2_arg };

/// operator*= with Float16x2x2
Variable Float16x2x2_operator_mulasg_Float16x2x2_arg;
Function Float16x2x2_operator_mulasg_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_mulasg_Float16x2x2_args = { &Float16x2x2_operator_mulasg_Float16x2x2_arg };

/// operator* with Float16
Variable Float16x2x2_operator_scale_Float16_arg;
Function Float16x2x2_operator_scale_Float16;
inline constexpr std::array Float16x2x2_operator_scale_Float16_args = { &Float16x2x2_operator_scale_Float16_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float16x2x2_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &Float16x2x2_operator_index_Int16 },
    std::pair{ "operator+(f16x2x2)"_h, &Float16x2x2_operator_add_Float16x2x2 },
    std::pair{ "operator*=(f16x2x2)"_h, &Float16x2x2_operator_mulasg_Float16x2x2 },
    std::pair{ "operator*(f16x2x2)"_h, &Float16x2x2_operator_mul_Float16x2x2 },
    std::pair{ "operator+=(f16x2x2)"_h, &Float16x2x2_operator_addasg_Float16x2x2 },
    std::pair{ "operator-"_h, &Float16x2x2_operator_sub_Float16x2x2 },
    std::pair{ "operator+"_h, &Float16x2x2_operator_add_Float16x2x2 },
    std::pair{ "operator*"_h, &Float16x2x2_transform_Float16x2 },
    std::pair{ "operator*"_h, &Float16x2x2_operator_mul_Float16x2x2 },
    std::pair{ "operator*"_h, &Float16x2x2_operator_scale_Float16 },
    std::pair{ "operator*(f16x2)"_h, &Float16x2x2_transform_Float16x2 },
    std::pair{ "operator[](u32)"_h, &Float16x2x2_operator_index_UInt32 },
    std::pair{ "operator[](u16)"_h, &Float16x2x2_operator_index_UInt16 },
    std::pair{ "operator*(f16)"_h, &Float16x2x2_operator_scale_Float16 },
    std::pair{ "operator-(f16x2x2)"_h, &Float16x2x2_operator_sub_Float16x2x2 },
    std::pair{ "operator-=(f16x2x2)"_h, &Float16x2x2_operator_subasg_Float16x2x2 },
    std::pair{ "operator[]"_h, &Float16x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float16x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float16x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float16x2x2_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float16x2x2_operator_subasg_Float16x2x2 },
    std::pair{ "operator+="_h, &Float16x2x2_operator_addasg_Float16x2x2 },
    std::pair{ "operator*="_h, &Float16x2x2_operator_mulasg_Float16x2x2 },
    std::pair{ "operator[](i32)"_h, &Float16x2x2_operator_index_Int32 }
    };

Float16x2x2::Float16x2x2()
{
    this->name = "f16x2x2"_c;
    this->columnSize = 2;
    this->rowSize = 2;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x2x2_operator_index_Int32_arg.name = "idx"_c;
    Float16x2x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x2x2_operator_index_Int32.name = Float16x2x2_operator_index_Int32_name;
    Float16x2x2_operator_index_Int32.backendIndex = 1258;
    Float16x2x2_operator_index_Int32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x2_operator_index_Int32.parameters = Float16x2x2_operator_index_Int32_args;
    Symbol::Resolved(&Float16x2x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2x2_operator_index_Int32)->signature = "operator[](i32) f16x2"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_Int32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt32
    Float16x2x2_operator_index_UInt32_arg.name = "idx"_c;
    Float16x2x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x2x2_operator_index_UInt32.name = Float16x2x2_operator_index_UInt32_name;
    Float16x2x2_operator_index_UInt32.backendIndex = 1259;
    Float16x2x2_operator_index_UInt32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x2_operator_index_UInt32.parameters = Float16x2x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt32)->signature = "operator[](u32) f16x2"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with Int16
    Float16x2x2_operator_index_Int16_arg.name = "idx"_c;
    Float16x2x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x2x2_operator_index_Int16.name = Float16x2x2_operator_index_Int16_name;
    Float16x2x2_operator_index_Int16.backendIndex = 1260;
    Float16x2x2_operator_index_Int16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x2_operator_index_Int16.parameters = Float16x2x2_operator_index_Int16_args;
    Symbol::Resolved(&Float16x2x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2x2_operator_index_Int16)->signature = "operator[](i16) f16x2"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_Int16)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt16
    Float16x2x2_operator_index_UInt16_arg.name = "idx"_c;
    Float16x2x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x2x2_operator_index_UInt16.name = Float16x2x2_operator_index_UInt16_name;
    Float16x2x2_operator_index_UInt16.backendIndex = 1261;
    Float16x2x2_operator_index_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x2_operator_index_UInt16.parameters = Float16x2x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt16)->signature = "operator[](u16) f16x2"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float16x2
    Float16x2x2_transform_Float16x2_vec.name = "vec"_c;
    Float16x2x2_transform_Float16x2_vec.type = Type::FullType{ Float16x2Type.name };
    Float16x2x2_transform_Float16x2.name = Float16x2x2_transform_Float16x2_name;
    Float16x2x2_transform_Float16x2.backendIndex = 1262;
    Float16x2x2_transform_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x2_transform_Float16x2.parameters = Float16x2x2_transform_Float16x2_args;
    Symbol::Resolved(&Float16x2x2_transform_Float16x2_vec)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2x2_transform_Float16x2)->signature = "operator*(f16x2) f16x2"_c;
    Symbol::Resolved(&Float16x2x2_transform_Float16x2)->name = "operator*(f16x2)"_c;
    Symbol::Resolved(&Float16x2x2_transform_Float16x2)->nameWithVarNames = "operator*(vec : f16x2)"_c;
    Symbol::Resolved(&Float16x2x2_transform_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator+ with Float16x2x2
    Float16x2x2_operator_add_Float16x2x2_arg.name = "arg"_c;
    Float16x2x2_operator_add_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_add_Float16x2x2.name = Float16x2x2_operator_add_Float16x2x2_name;
    Float16x2x2_operator_add_Float16x2x2.backendIndex = 1263;
    Float16x2x2_operator_add_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_add_Float16x2x2.parameters = Float16x2x2_operator_add_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_add_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_add_Float16x2x2)->signature = "operator+(f16x2x2) f16x2x2"_c;
    Symbol::Resolved(&Float16x2x2_operator_add_Float16x2x2)->name = "operator+(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_add_Float16x2x2)->nameWithVarNames = "operator+(arg : f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_add_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator- with Float16x2x2
    Float16x2x2_operator_sub_Float16x2x2_arg.name = "arg"_c;
    Float16x2x2_operator_sub_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_sub_Float16x2x2.name = Float16x2x2_operator_sub_Float16x2x2_name;
    Float16x2x2_operator_sub_Float16x2x2.backendIndex = 1264;
    Float16x2x2_operator_sub_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_sub_Float16x2x2.parameters = Float16x2x2_operator_sub_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_sub_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_sub_Float16x2x2)->signature = "operator-(f16x2x2) f16x2x2"_c;
    Symbol::Resolved(&Float16x2x2_operator_sub_Float16x2x2)->name = "operator-(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_sub_Float16x2x2)->nameWithVarNames = "operator-(arg : f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_sub_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator* with Float16x2x2
    Float16x2x2_operator_mul_Float16x2x2_arg.name = "arg"_c;
    Float16x2x2_operator_mul_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_mul_Float16x2x2.name = Float16x2x2_operator_mul_Float16x2x2_name;
    Float16x2x2_operator_mul_Float16x2x2.backendIndex = 1265;
    Float16x2x2_operator_mul_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_mul_Float16x2x2.parameters = Float16x2x2_operator_mul_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_mul_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_mul_Float16x2x2)->signature = "operator*(f16x2x2) f16x2x2"_c;
    Symbol::Resolved(&Float16x2x2_operator_mul_Float16x2x2)->name = "operator*(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_mul_Float16x2x2)->nameWithVarNames = "operator*(arg : f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_mul_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator+= with Float16x2x2
    Float16x2x2_operator_addasg_Float16x2x2_arg.name = "arg"_c;
    Float16x2x2_operator_addasg_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_addasg_Float16x2x2.name = Float16x2x2_operator_addasg_Float16x2x2_name;
    Float16x2x2_operator_addasg_Float16x2x2.backendIndex = 1266;
    Float16x2x2_operator_addasg_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_addasg_Float16x2x2.parameters = Float16x2x2_operator_addasg_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_addasg_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_addasg_Float16x2x2)->signature = "operator+=(f16x2x2) f16x2x2"_c;
    Symbol::Resolved(&Float16x2x2_operator_addasg_Float16x2x2)->name = "operator+=(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_addasg_Float16x2x2)->nameWithVarNames = "operator+=(arg : f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_addasg_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator-= with Float16x2x2
    Float16x2x2_operator_subasg_Float16x2x2_arg.name = "arg"_c;
    Float16x2x2_operator_subasg_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_subasg_Float16x2x2.name = Float16x2x2_operator_subasg_Float16x2x2_name;
    Float16x2x2_operator_subasg_Float16x2x2.backendIndex = 1267;
    Float16x2x2_operator_subasg_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_subasg_Float16x2x2.parameters = Float16x2x2_operator_subasg_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_subasg_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_subasg_Float16x2x2)->signature = "operator-=(f16x2x2) f16x2x2"_c;
    Symbol::Resolved(&Float16x2x2_operator_subasg_Float16x2x2)->name = "operator-=(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_subasg_Float16x2x2)->nameWithVarNames = "operator-=(arg : f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_subasg_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator*= with Float16x2x2
    Float16x2x2_operator_mulasg_Float16x2x2_arg.name = "arg"_c;
    Float16x2x2_operator_mulasg_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_mulasg_Float16x2x2.name = Float16x2x2_operator_mulasg_Float16x2x2_name;
    Float16x2x2_operator_mulasg_Float16x2x2.backendIndex = 1268;
    Float16x2x2_operator_mulasg_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_mulasg_Float16x2x2.parameters = Float16x2x2_operator_mulasg_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_mulasg_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_mulasg_Float16x2x2)->signature = "operator*=(f16x2x2) f16x2x2"_c;
    Symbol::Resolved(&Float16x2x2_operator_mulasg_Float16x2x2)->name = "operator*=(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_mulasg_Float16x2x2)->nameWithVarNames = "operator*=(arg : f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_mulasg_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator* with Float16
    Float16x2x2_operator_scale_Float16_arg.name = "arg"_c;
    Float16x2x2_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x2x2_operator_scale_Float16.name = Float16x2x2_operator_scale_Float16_name;
    Float16x2x2_operator_scale_Float16.backendIndex = 1269;
    Float16x2x2_operator_scale_Float16.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_scale_Float16.parameters = Float16x2x2_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16)->signature = "operator*(f16) f16x2x2"_c;
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16)->returnTypeSymbol = &Float16x2x2Type;

    this->scope.symbolLookup = Float16x2x2_symbolLookup;
}
Float16x2x2 Float16x2x2Type;

/// operator[] with Int32
Variable Float16x3x2_operator_index_Int32_arg;
Function Float16x3x2_operator_index_Int32;
inline constexpr std::array Float16x3x2_operator_index_Int32_args = { &Float16x3x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x3x2_operator_index_UInt32_arg;
Function Float16x3x2_operator_index_UInt32;
inline constexpr std::array Float16x3x2_operator_index_UInt32_args = { &Float16x3x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x3x2_operator_index_Int16_arg;
Function Float16x3x2_operator_index_Int16;
inline constexpr std::array Float16x3x2_operator_index_Int16_args = { &Float16x3x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x3x2_operator_index_UInt16_arg;
Function Float16x3x2_operator_index_UInt16;
inline constexpr std::array Float16x3x2_operator_index_UInt16_args = { &Float16x3x2_operator_index_UInt16_arg };

/// operator* with Float16x2
Variable Float16x3x2_transform_Float16x3_vec;
Function Float16x3x2_transform_Float16x3;
inline constexpr std::array Float16x3x2_transform_Float16x3_args = { &Float16x3x2_transform_Float16x3_vec };

/// operator+ with Float16x3x2
Variable Float16x3x2_operator_add_Float16x3x2_arg;
Function Float16x3x2_operator_add_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_add_Float16x3x2_args = { &Float16x3x2_operator_add_Float16x3x2_arg };

/// operator- with Float16x3x2
Variable Float16x3x2_operator_sub_Float16x3x2_arg;
Function Float16x3x2_operator_sub_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_sub_Float16x3x2_args = { &Float16x3x2_operator_sub_Float16x3x2_arg };

/// operator* with Float16x3x2
Variable Float16x3x2_operator_mul_Float16x3x2_arg;
Function Float16x3x2_operator_mul_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_mul_Float16x3x2_args = { &Float16x3x2_operator_mul_Float16x3x2_arg };

/// operator+= with Float16x3x2
Variable Float16x3x2_operator_addasg_Float16x3x2_arg;
Function Float16x3x2_operator_addasg_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_addasg_Float16x3x2_args = { &Float16x3x2_operator_addasg_Float16x3x2_arg };

/// operator-= with Float16x3x2
Variable Float16x3x2_operator_subasg_Float16x3x2_arg;
Function Float16x3x2_operator_subasg_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_subasg_Float16x3x2_args = { &Float16x3x2_operator_subasg_Float16x3x2_arg };

/// operator*= with Float16x3x2
Variable Float16x3x2_operator_mulasg_Float16x3x2_arg;
Function Float16x3x2_operator_mulasg_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_mulasg_Float16x3x2_args = { &Float16x3x2_operator_mulasg_Float16x3x2_arg };

/// operator* with Float16
Variable Float16x3x2_operator_scale_Float16_arg;
Function Float16x3x2_operator_scale_Float16;
inline constexpr std::array Float16x3x2_operator_scale_Float16_args = { &Float16x3x2_operator_scale_Float16_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float16x3x2_symbolLookup = {
    std::pair{ "operator+(f16x3x2)"_h, &Float16x3x2_operator_add_Float16x3x2 },
    std::pair{ "operator*=(f16x3x2)"_h, &Float16x3x2_operator_mulasg_Float16x3x2 },
    std::pair{ "operator[](i16)"_h, &Float16x3x2_operator_index_Int16 },
    std::pair{ "operator-=(f16x3x2)"_h, &Float16x3x2_operator_subasg_Float16x3x2 },
    std::pair{ "operator-"_h, &Float16x3x2_operator_sub_Float16x3x2 },
    std::pair{ "operator+"_h, &Float16x3x2_operator_add_Float16x3x2 },
    std::pair{ "operator*"_h, &Float16x3x2_transform_Float16x3 },
    std::pair{ "operator*"_h, &Float16x3x2_operator_mul_Float16x3x2 },
    std::pair{ "operator*"_h, &Float16x3x2_operator_scale_Float16 },
    std::pair{ "operator-(f16x3x2)"_h, &Float16x3x2_operator_sub_Float16x3x2 },
    std::pair{ "operator*(f16x2)"_h, &Float16x3x2_transform_Float16x3 },
    std::pair{ "operator[](u32)"_h, &Float16x3x2_operator_index_UInt32 },
    std::pair{ "operator[](u16)"_h, &Float16x3x2_operator_index_UInt16 },
    std::pair{ "operator*(f16)"_h, &Float16x3x2_operator_scale_Float16 },
    std::pair{ "operator+=(f16x3x2)"_h, &Float16x3x2_operator_addasg_Float16x3x2 },
    std::pair{ "operator[]"_h, &Float16x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float16x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float16x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float16x3x2_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float16x3x2_operator_subasg_Float16x3x2 },
    std::pair{ "operator+="_h, &Float16x3x2_operator_addasg_Float16x3x2 },
    std::pair{ "operator*="_h, &Float16x3x2_operator_mulasg_Float16x3x2 },
    std::pair{ "operator*(f16x3x2)"_h, &Float16x3x2_operator_mul_Float16x3x2 },
    std::pair{ "operator[](i32)"_h, &Float16x3x2_operator_index_Int32 }
    };

Float16x3x2::Float16x3x2()
{
    this->name = "f16x3x2"_c;
    this->columnSize = 3;
    this->rowSize = 2;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x3x2_operator_index_Int32_arg.name = "idx"_c;
    Float16x3x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x3x2_operator_index_Int32.name = Float16x3x2_operator_index_Int32_name;
    Float16x3x2_operator_index_Int32.backendIndex = 1272;
    Float16x3x2_operator_index_Int32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x2_operator_index_Int32.parameters = Float16x3x2_operator_index_Int32_args;
    Symbol::Resolved(&Float16x3x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x3x2_operator_index_Int32)->signature = "operator[](i32) f16x3"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_Int32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt32
    Float16x3x2_operator_index_UInt32_arg.name = "idx"_c;
    Float16x3x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x3x2_operator_index_UInt32.name = Float16x3x2_operator_index_UInt32_name;
    Float16x3x2_operator_index_UInt32.backendIndex = 1273;
    Float16x3x2_operator_index_UInt32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x2_operator_index_UInt32.parameters = Float16x3x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt32)->signature = "operator[](u32) f16x3"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with Int16
    Float16x3x2_operator_index_Int16_arg.name = "idx"_c;
    Float16x3x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x3x2_operator_index_Int16.name = Float16x3x2_operator_index_Int16_name;
    Float16x3x2_operator_index_Int16.backendIndex = 1274;
    Float16x3x2_operator_index_Int16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x2_operator_index_Int16.parameters = Float16x3x2_operator_index_Int16_args;
    Symbol::Resolved(&Float16x3x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3x2_operator_index_Int16)->signature = "operator[](i16) f16x3"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_Int16)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt16
    Float16x3x2_operator_index_UInt16_arg.name = "idx"_c;
    Float16x3x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x3x2_operator_index_UInt16.name = Float16x3x2_operator_index_UInt16_name;
    Float16x3x2_operator_index_UInt16.backendIndex = 1275;
    Float16x3x2_operator_index_UInt16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x2_operator_index_UInt16.parameters = Float16x3x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt16)->signature = "operator[](u16) f16x3"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float16x2
    Float16x3x2_transform_Float16x3_vec.name = "vec"_c;
    Float16x3x2_transform_Float16x3_vec.type = Type::FullType{ Float16x2Type.name };
    Float16x3x2_transform_Float16x3.name = Float16x3x2_transform_Float16x3_name;
    Float16x3x2_transform_Float16x3.backendIndex = 1276;
    Float16x3x2_transform_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x2_transform_Float16x3.parameters = Float16x3x2_transform_Float16x3_args;
    Symbol::Resolved(&Float16x3x2_transform_Float16x3_vec)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x3x2_transform_Float16x3)->signature = "operator*(f16x2) f16x3"_c;
    Symbol::Resolved(&Float16x3x2_transform_Float16x3)->name = "operator*(f16x2)"_c;
    Symbol::Resolved(&Float16x3x2_transform_Float16x3)->nameWithVarNames = "operator*(vec : f16x2)"_c;
    Symbol::Resolved(&Float16x3x2_transform_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator+ with Float16x3x2
    Float16x3x2_operator_add_Float16x3x2_arg.name = "arg"_c;
    Float16x3x2_operator_add_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_add_Float16x3x2.name = Float16x3x2_operator_add_Float16x3x2_name;
    Float16x3x2_operator_add_Float16x3x2.backendIndex = 1277;
    Float16x3x2_operator_add_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_add_Float16x3x2.parameters = Float16x3x2_operator_add_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_add_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_add_Float16x3x2)->signature = "operator+(f16x3x2) f16x3x2"_c;
    Symbol::Resolved(&Float16x3x2_operator_add_Float16x3x2)->name = "operator+(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_add_Float16x3x2)->nameWithVarNames = "operator+(arg : f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_add_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator- with Float16x3x2
    Float16x3x2_operator_sub_Float16x3x2_arg.name = "arg"_c;
    Float16x3x2_operator_sub_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_sub_Float16x3x2.name = Float16x3x2_operator_sub_Float16x3x2_name;
    Float16x3x2_operator_sub_Float16x3x2.backendIndex = 1278;
    Float16x3x2_operator_sub_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_sub_Float16x3x2.parameters = Float16x3x2_operator_sub_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_sub_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_sub_Float16x3x2)->signature = "operator-(f16x3x2) f16x3x2"_c;
    Symbol::Resolved(&Float16x3x2_operator_sub_Float16x3x2)->name = "operator-(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_sub_Float16x3x2)->nameWithVarNames = "operator-(arg : f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_sub_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator* with Float16x3x2
    Float16x3x2_operator_mul_Float16x3x2_arg.name = "arg"_c;
    Float16x3x2_operator_mul_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_mul_Float16x3x2.name = Float16x3x2_operator_mul_Float16x3x2_name;
    Float16x3x2_operator_mul_Float16x3x2.backendIndex = 1279;
    Float16x3x2_operator_mul_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_mul_Float16x3x2.parameters = Float16x3x2_operator_mul_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_mul_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_mul_Float16x3x2)->signature = "operator*(f16x3x2) f16x3x2"_c;
    Symbol::Resolved(&Float16x3x2_operator_mul_Float16x3x2)->name = "operator*(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_mul_Float16x3x2)->nameWithVarNames = "operator*(arg : f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_mul_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator+= with Float16x3x2
    Float16x3x2_operator_addasg_Float16x3x2_arg.name = "arg"_c;
    Float16x3x2_operator_addasg_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_addasg_Float16x3x2.name = Float16x3x2_operator_addasg_Float16x3x2_name;
    Float16x3x2_operator_addasg_Float16x3x2.backendIndex = 1280;
    Float16x3x2_operator_addasg_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_addasg_Float16x3x2.parameters = Float16x3x2_operator_addasg_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_addasg_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_addasg_Float16x3x2)->signature = "operator+=(f16x3x2) f16x3x2"_c;
    Symbol::Resolved(&Float16x3x2_operator_addasg_Float16x3x2)->name = "operator+=(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_addasg_Float16x3x2)->nameWithVarNames = "operator+=(arg : f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_addasg_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator-= with Float16x3x2
    Float16x3x2_operator_subasg_Float16x3x2_arg.name = "arg"_c;
    Float16x3x2_operator_subasg_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_subasg_Float16x3x2.name = Float16x3x2_operator_subasg_Float16x3x2_name;
    Float16x3x2_operator_subasg_Float16x3x2.backendIndex = 1281;
    Float16x3x2_operator_subasg_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_subasg_Float16x3x2.parameters = Float16x3x2_operator_subasg_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_subasg_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_subasg_Float16x3x2)->signature = "operator-=(f16x3x2) f16x3x2"_c;
    Symbol::Resolved(&Float16x3x2_operator_subasg_Float16x3x2)->name = "operator-=(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_subasg_Float16x3x2)->nameWithVarNames = "operator-=(arg : f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_subasg_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator*= with Float16x3x2
    Float16x3x2_operator_mulasg_Float16x3x2_arg.name = "arg"_c;
    Float16x3x2_operator_mulasg_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_mulasg_Float16x3x2.name = Float16x3x2_operator_mulasg_Float16x3x2_name;
    Float16x3x2_operator_mulasg_Float16x3x2.backendIndex = 1282;
    Float16x3x2_operator_mulasg_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_mulasg_Float16x3x2.parameters = Float16x3x2_operator_mulasg_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_mulasg_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_mulasg_Float16x3x2)->signature = "operator*=(f16x3x2) f16x3x2"_c;
    Symbol::Resolved(&Float16x3x2_operator_mulasg_Float16x3x2)->name = "operator*=(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_mulasg_Float16x3x2)->nameWithVarNames = "operator*=(arg : f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_mulasg_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator* with Float16
    Float16x3x2_operator_scale_Float16_arg.name = "arg"_c;
    Float16x3x2_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x3x2_operator_scale_Float16.name = Float16x3x2_operator_scale_Float16_name;
    Float16x3x2_operator_scale_Float16.backendIndex = 1283;
    Float16x3x2_operator_scale_Float16.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_scale_Float16.parameters = Float16x3x2_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16)->signature = "operator*(f16) f16x3x2"_c;
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16)->returnTypeSymbol = &Float16x3x2Type;

    this->scope.symbolLookup = Float16x3x2_symbolLookup;
}
Float16x3x2 Float16x3x2Type;

/// operator[] with Int32
Variable Float16x4x2_operator_index_Int32_arg;
Function Float16x4x2_operator_index_Int32;
inline constexpr std::array Float16x4x2_operator_index_Int32_args = { &Float16x4x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x4x2_operator_index_UInt32_arg;
Function Float16x4x2_operator_index_UInt32;
inline constexpr std::array Float16x4x2_operator_index_UInt32_args = { &Float16x4x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x4x2_operator_index_Int16_arg;
Function Float16x4x2_operator_index_Int16;
inline constexpr std::array Float16x4x2_operator_index_Int16_args = { &Float16x4x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x4x2_operator_index_UInt16_arg;
Function Float16x4x2_operator_index_UInt16;
inline constexpr std::array Float16x4x2_operator_index_UInt16_args = { &Float16x4x2_operator_index_UInt16_arg };

/// operator* with Float16x2
Variable Float16x4x2_transform_Float16x4_vec;
Function Float16x4x2_transform_Float16x4;
inline constexpr std::array Float16x4x2_transform_Float16x4_args = { &Float16x4x2_transform_Float16x4_vec };

/// operator+ with Float16x4x2
Variable Float16x4x2_operator_add_Float16x4x2_arg;
Function Float16x4x2_operator_add_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_add_Float16x4x2_args = { &Float16x4x2_operator_add_Float16x4x2_arg };

/// operator- with Float16x4x2
Variable Float16x4x2_operator_sub_Float16x4x2_arg;
Function Float16x4x2_operator_sub_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_sub_Float16x4x2_args = { &Float16x4x2_operator_sub_Float16x4x2_arg };

/// operator* with Float16x4x2
Variable Float16x4x2_operator_mul_Float16x4x2_arg;
Function Float16x4x2_operator_mul_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_mul_Float16x4x2_args = { &Float16x4x2_operator_mul_Float16x4x2_arg };

/// operator+= with Float16x4x2
Variable Float16x4x2_operator_addasg_Float16x4x2_arg;
Function Float16x4x2_operator_addasg_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_addasg_Float16x4x2_args = { &Float16x4x2_operator_addasg_Float16x4x2_arg };

/// operator-= with Float16x4x2
Variable Float16x4x2_operator_subasg_Float16x4x2_arg;
Function Float16x4x2_operator_subasg_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_subasg_Float16x4x2_args = { &Float16x4x2_operator_subasg_Float16x4x2_arg };

/// operator*= with Float16x4x2
Variable Float16x4x2_operator_mulasg_Float16x4x2_arg;
Function Float16x4x2_operator_mulasg_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_mulasg_Float16x4x2_args = { &Float16x4x2_operator_mulasg_Float16x4x2_arg };

/// operator* with Float16
Variable Float16x4x2_operator_scale_Float16_arg;
Function Float16x4x2_operator_scale_Float16;
inline constexpr std::array Float16x4x2_operator_scale_Float16_args = { &Float16x4x2_operator_scale_Float16_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float16x4x2_symbolLookup = {
    std::pair{ "operator+=(f16x4x2)"_h, &Float16x4x2_operator_addasg_Float16x4x2 },
    std::pair{ "operator[](i16)"_h, &Float16x4x2_operator_index_Int16 },
    std::pair{ "operator-(f16x4x2)"_h, &Float16x4x2_operator_sub_Float16x4x2 },
    std::pair{ "operator-"_h, &Float16x4x2_operator_sub_Float16x4x2 },
    std::pair{ "operator+"_h, &Float16x4x2_operator_add_Float16x4x2 },
    std::pair{ "operator*"_h, &Float16x4x2_transform_Float16x4 },
    std::pair{ "operator*"_h, &Float16x4x2_operator_mul_Float16x4x2 },
    std::pair{ "operator*"_h, &Float16x4x2_operator_scale_Float16 },
    std::pair{ "operator*(f16x2)"_h, &Float16x4x2_transform_Float16x4 },
    std::pair{ "operator[](u32)"_h, &Float16x4x2_operator_index_UInt32 },
    std::pair{ "operator[](u16)"_h, &Float16x4x2_operator_index_UInt16 },
    std::pair{ "operator*(f16)"_h, &Float16x4x2_operator_scale_Float16 },
    std::pair{ "operator*=(f16x4x2)"_h, &Float16x4x2_operator_mulasg_Float16x4x2 },
    std::pair{ "operator[]"_h, &Float16x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float16x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float16x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float16x4x2_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float16x4x2_operator_subasg_Float16x4x2 },
    std::pair{ "operator+="_h, &Float16x4x2_operator_addasg_Float16x4x2 },
    std::pair{ "operator*="_h, &Float16x4x2_operator_mulasg_Float16x4x2 },
    std::pair{ "operator+(f16x4x2)"_h, &Float16x4x2_operator_add_Float16x4x2 },
    std::pair{ "operator-=(f16x4x2)"_h, &Float16x4x2_operator_subasg_Float16x4x2 },
    std::pair{ "operator[](i32)"_h, &Float16x4x2_operator_index_Int32 },
    std::pair{ "operator*(f16x4x2)"_h, &Float16x4x2_operator_mul_Float16x4x2 }
    };

Float16x4x2::Float16x4x2()
{
    this->name = "f16x4x2"_c;
    this->columnSize = 4;
    this->rowSize = 2;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x4x2_operator_index_Int32_arg.name = "idx"_c;
    Float16x4x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x4x2_operator_index_Int32.name = Float16x4x2_operator_index_Int32_name;
    Float16x4x2_operator_index_Int32.backendIndex = 1286;
    Float16x4x2_operator_index_Int32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x2_operator_index_Int32.parameters = Float16x4x2_operator_index_Int32_args;
    Symbol::Resolved(&Float16x4x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x4x2_operator_index_Int32)->signature = "operator[](i32) f16x4"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_Int32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt32
    Float16x4x2_operator_index_UInt32_arg.name = "idx"_c;
    Float16x4x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x4x2_operator_index_UInt32.name = Float16x4x2_operator_index_UInt32_name;
    Float16x4x2_operator_index_UInt32.backendIndex = 1287;
    Float16x4x2_operator_index_UInt32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x2_operator_index_UInt32.parameters = Float16x4x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt32)->signature = "operator[](u32) f16x4"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with Int16
    Float16x4x2_operator_index_Int16_arg.name = "idx"_c;
    Float16x4x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x4x2_operator_index_Int16.name = Float16x4x2_operator_index_Int16_name;
    Float16x4x2_operator_index_Int16.backendIndex = 1288;
    Float16x4x2_operator_index_Int16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x2_operator_index_Int16.parameters = Float16x4x2_operator_index_Int16_args;
    Symbol::Resolved(&Float16x4x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4x2_operator_index_Int16)->signature = "operator[](i16) f16x4"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_Int16)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt16
    Float16x4x2_operator_index_UInt16_arg.name = "idx"_c;
    Float16x4x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x4x2_operator_index_UInt16.name = Float16x4x2_operator_index_UInt16_name;
    Float16x4x2_operator_index_UInt16.backendIndex = 1289;
    Float16x4x2_operator_index_UInt16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x2_operator_index_UInt16.parameters = Float16x4x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt16)->signature = "operator[](u16) f16x4"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Float16x2
    Float16x4x2_transform_Float16x4_vec.name = "vec"_c;
    Float16x4x2_transform_Float16x4_vec.type = Type::FullType{ Float16x2Type.name };
    Float16x4x2_transform_Float16x4.name = Float16x4x2_transform_Float16x4_name;
    Float16x4x2_transform_Float16x4.backendIndex = 1290;
    Float16x4x2_transform_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x2_transform_Float16x4.parameters = Float16x4x2_transform_Float16x4_args;
    Symbol::Resolved(&Float16x4x2_transform_Float16x4_vec)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4x2_transform_Float16x4)->signature = "operator*(f16x2) f16x4"_c;
    Symbol::Resolved(&Float16x4x2_transform_Float16x4)->name = "operator*(f16x2)"_c;
    Symbol::Resolved(&Float16x4x2_transform_Float16x4)->nameWithVarNames = "operator*(vec : f16x2)"_c;
    Symbol::Resolved(&Float16x4x2_transform_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator+ with Float16x4x2
    Float16x4x2_operator_add_Float16x4x2_arg.name = "arg"_c;
    Float16x4x2_operator_add_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_add_Float16x4x2.name = Float16x4x2_operator_add_Float16x4x2_name;
    Float16x4x2_operator_add_Float16x4x2.backendIndex = 1291;
    Float16x4x2_operator_add_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_add_Float16x4x2.parameters = Float16x4x2_operator_add_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_add_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_add_Float16x4x2)->signature = "operator+(f16x4x2) f16x4x2"_c;
    Symbol::Resolved(&Float16x4x2_operator_add_Float16x4x2)->name = "operator+(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_add_Float16x4x2)->nameWithVarNames = "operator+(arg : f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_add_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator- with Float16x4x2
    Float16x4x2_operator_sub_Float16x4x2_arg.name = "arg"_c;
    Float16x4x2_operator_sub_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_sub_Float16x4x2.name = Float16x4x2_operator_sub_Float16x4x2_name;
    Float16x4x2_operator_sub_Float16x4x2.backendIndex = 1292;
    Float16x4x2_operator_sub_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_sub_Float16x4x2.parameters = Float16x4x2_operator_sub_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_sub_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_sub_Float16x4x2)->signature = "operator-(f16x4x2) f16x4x2"_c;
    Symbol::Resolved(&Float16x4x2_operator_sub_Float16x4x2)->name = "operator-(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_sub_Float16x4x2)->nameWithVarNames = "operator-(arg : f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_sub_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator* with Float16x4x2
    Float16x4x2_operator_mul_Float16x4x2_arg.name = "arg"_c;
    Float16x4x2_operator_mul_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_mul_Float16x4x2.name = Float16x4x2_operator_mul_Float16x4x2_name;
    Float16x4x2_operator_mul_Float16x4x2.backendIndex = 1293;
    Float16x4x2_operator_mul_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_mul_Float16x4x2.parameters = Float16x4x2_operator_mul_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_mul_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_mul_Float16x4x2)->signature = "operator*(f16x4x2) f16x4x2"_c;
    Symbol::Resolved(&Float16x4x2_operator_mul_Float16x4x2)->name = "operator*(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_mul_Float16x4x2)->nameWithVarNames = "operator*(arg : f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_mul_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator+= with Float16x4x2
    Float16x4x2_operator_addasg_Float16x4x2_arg.name = "arg"_c;
    Float16x4x2_operator_addasg_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_addasg_Float16x4x2.name = Float16x4x2_operator_addasg_Float16x4x2_name;
    Float16x4x2_operator_addasg_Float16x4x2.backendIndex = 1294;
    Float16x4x2_operator_addasg_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_addasg_Float16x4x2.parameters = Float16x4x2_operator_addasg_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_addasg_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_addasg_Float16x4x2)->signature = "operator+=(f16x4x2) f16x4x2"_c;
    Symbol::Resolved(&Float16x4x2_operator_addasg_Float16x4x2)->name = "operator+=(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_addasg_Float16x4x2)->nameWithVarNames = "operator+=(arg : f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_addasg_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator-= with Float16x4x2
    Float16x4x2_operator_subasg_Float16x4x2_arg.name = "arg"_c;
    Float16x4x2_operator_subasg_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_subasg_Float16x4x2.name = Float16x4x2_operator_subasg_Float16x4x2_name;
    Float16x4x2_operator_subasg_Float16x4x2.backendIndex = 1295;
    Float16x4x2_operator_subasg_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_subasg_Float16x4x2.parameters = Float16x4x2_operator_subasg_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_subasg_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_subasg_Float16x4x2)->signature = "operator-=(f16x4x2) f16x4x2"_c;
    Symbol::Resolved(&Float16x4x2_operator_subasg_Float16x4x2)->name = "operator-=(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_subasg_Float16x4x2)->nameWithVarNames = "operator-=(arg : f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_subasg_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator*= with Float16x4x2
    Float16x4x2_operator_mulasg_Float16x4x2_arg.name = "arg"_c;
    Float16x4x2_operator_mulasg_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_mulasg_Float16x4x2.name = Float16x4x2_operator_mulasg_Float16x4x2_name;
    Float16x4x2_operator_mulasg_Float16x4x2.backendIndex = 1296;
    Float16x4x2_operator_mulasg_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_mulasg_Float16x4x2.parameters = Float16x4x2_operator_mulasg_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_mulasg_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_mulasg_Float16x4x2)->signature = "operator*=(f16x4x2) f16x4x2"_c;
    Symbol::Resolved(&Float16x4x2_operator_mulasg_Float16x4x2)->name = "operator*=(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_mulasg_Float16x4x2)->nameWithVarNames = "operator*=(arg : f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_mulasg_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator* with Float16
    Float16x4x2_operator_scale_Float16_arg.name = "arg"_c;
    Float16x4x2_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x4x2_operator_scale_Float16.name = Float16x4x2_operator_scale_Float16_name;
    Float16x4x2_operator_scale_Float16.backendIndex = 1297;
    Float16x4x2_operator_scale_Float16.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_scale_Float16.parameters = Float16x4x2_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16)->signature = "operator*(f16) f16x4x2"_c;
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16)->returnTypeSymbol = &Float16x4x2Type;

    this->scope.symbolLookup = Float16x4x2_symbolLookup;
}
Float16x4x2 Float16x4x2Type;

/// operator[] with Int32
Variable Float16x2x3_operator_index_Int32_arg;
Function Float16x2x3_operator_index_Int32;
inline constexpr std::array Float16x2x3_operator_index_Int32_args = { &Float16x2x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x2x3_operator_index_UInt32_arg;
Function Float16x2x3_operator_index_UInt32;
inline constexpr std::array Float16x2x3_operator_index_UInt32_args = { &Float16x2x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x2x3_operator_index_Int16_arg;
Function Float16x2x3_operator_index_Int16;
inline constexpr std::array Float16x2x3_operator_index_Int16_args = { &Float16x2x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x2x3_operator_index_UInt16_arg;
Function Float16x2x3_operator_index_UInt16;
inline constexpr std::array Float16x2x3_operator_index_UInt16_args = { &Float16x2x3_operator_index_UInt16_arg };

/// operator* with Float16x3
Variable Float16x2x3_transform_Float16x2_vec;
Function Float16x2x3_transform_Float16x2;
inline constexpr std::array Float16x2x3_transform_Float16x2_args = { &Float16x2x3_transform_Float16x2_vec };

/// operator+ with Float16x2x3
Variable Float16x2x3_operator_add_Float16x2x3_arg;
Function Float16x2x3_operator_add_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_add_Float16x2x3_args = { &Float16x2x3_operator_add_Float16x2x3_arg };

/// operator- with Float16x2x3
Variable Float16x2x3_operator_sub_Float16x2x3_arg;
Function Float16x2x3_operator_sub_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_sub_Float16x2x3_args = { &Float16x2x3_operator_sub_Float16x2x3_arg };

/// operator* with Float16x2x3
Variable Float16x2x3_operator_mul_Float16x2x3_arg;
Function Float16x2x3_operator_mul_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_mul_Float16x2x3_args = { &Float16x2x3_operator_mul_Float16x2x3_arg };

/// operator+= with Float16x2x3
Variable Float16x2x3_operator_addasg_Float16x2x3_arg;
Function Float16x2x3_operator_addasg_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_addasg_Float16x2x3_args = { &Float16x2x3_operator_addasg_Float16x2x3_arg };

/// operator-= with Float16x2x3
Variable Float16x2x3_operator_subasg_Float16x2x3_arg;
Function Float16x2x3_operator_subasg_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_subasg_Float16x2x3_args = { &Float16x2x3_operator_subasg_Float16x2x3_arg };

/// operator*= with Float16x2x3
Variable Float16x2x3_operator_mulasg_Float16x2x3_arg;
Function Float16x2x3_operator_mulasg_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_mulasg_Float16x2x3_args = { &Float16x2x3_operator_mulasg_Float16x2x3_arg };

/// operator* with Float16
Variable Float16x2x3_operator_scale_Float16_arg;
Function Float16x2x3_operator_scale_Float16;
inline constexpr std::array Float16x2x3_operator_scale_Float16_args = { &Float16x2x3_operator_scale_Float16_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float16x2x3_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &Float16x2x3_operator_index_Int16 },
    std::pair{ "operator+(f16x2x3)"_h, &Float16x2x3_operator_add_Float16x2x3 },
    std::pair{ "operator*=(f16x2x3)"_h, &Float16x2x3_operator_mulasg_Float16x2x3 },
    std::pair{ "operator*(f16x2x3)"_h, &Float16x2x3_operator_mul_Float16x2x3 },
    std::pair{ "operator+=(f16x2x3)"_h, &Float16x2x3_operator_addasg_Float16x2x3 },
    std::pair{ "operator-"_h, &Float16x2x3_operator_sub_Float16x2x3 },
    std::pair{ "operator+"_h, &Float16x2x3_operator_add_Float16x2x3 },
    std::pair{ "operator*"_h, &Float16x2x3_transform_Float16x2 },
    std::pair{ "operator*"_h, &Float16x2x3_operator_mul_Float16x2x3 },
    std::pair{ "operator*"_h, &Float16x2x3_operator_scale_Float16 },
    std::pair{ "operator*(f16x3)"_h, &Float16x2x3_transform_Float16x2 },
    std::pair{ "operator[](u32)"_h, &Float16x2x3_operator_index_UInt32 },
    std::pair{ "operator[](u16)"_h, &Float16x2x3_operator_index_UInt16 },
    std::pair{ "operator*(f16)"_h, &Float16x2x3_operator_scale_Float16 },
    std::pair{ "operator-(f16x2x3)"_h, &Float16x2x3_operator_sub_Float16x2x3 },
    std::pair{ "operator-=(f16x2x3)"_h, &Float16x2x3_operator_subasg_Float16x2x3 },
    std::pair{ "operator[]"_h, &Float16x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float16x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float16x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float16x2x3_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float16x2x3_operator_subasg_Float16x2x3 },
    std::pair{ "operator+="_h, &Float16x2x3_operator_addasg_Float16x2x3 },
    std::pair{ "operator*="_h, &Float16x2x3_operator_mulasg_Float16x2x3 },
    std::pair{ "operator[](i32)"_h, &Float16x2x3_operator_index_Int32 }
    };

Float16x2x3::Float16x2x3()
{
    this->name = "f16x2x3"_c;
    this->columnSize = 2;
    this->rowSize = 3;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x2x3_operator_index_Int32_arg.name = "idx"_c;
    Float16x2x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x2x3_operator_index_Int32.name = Float16x2x3_operator_index_Int32_name;
    Float16x2x3_operator_index_Int32.backendIndex = 1300;
    Float16x2x3_operator_index_Int32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x3_operator_index_Int32.parameters = Float16x2x3_operator_index_Int32_args;
    Symbol::Resolved(&Float16x2x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2x3_operator_index_Int32)->signature = "operator[](i32) f16x2"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_Int32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt32
    Float16x2x3_operator_index_UInt32_arg.name = "idx"_c;
    Float16x2x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x2x3_operator_index_UInt32.name = Float16x2x3_operator_index_UInt32_name;
    Float16x2x3_operator_index_UInt32.backendIndex = 1301;
    Float16x2x3_operator_index_UInt32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x3_operator_index_UInt32.parameters = Float16x2x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt32)->signature = "operator[](u32) f16x2"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with Int16
    Float16x2x3_operator_index_Int16_arg.name = "idx"_c;
    Float16x2x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x2x3_operator_index_Int16.name = Float16x2x3_operator_index_Int16_name;
    Float16x2x3_operator_index_Int16.backendIndex = 1302;
    Float16x2x3_operator_index_Int16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x3_operator_index_Int16.parameters = Float16x2x3_operator_index_Int16_args;
    Symbol::Resolved(&Float16x2x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2x3_operator_index_Int16)->signature = "operator[](i16) f16x2"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_Int16)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt16
    Float16x2x3_operator_index_UInt16_arg.name = "idx"_c;
    Float16x2x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x2x3_operator_index_UInt16.name = Float16x2x3_operator_index_UInt16_name;
    Float16x2x3_operator_index_UInt16.backendIndex = 1303;
    Float16x2x3_operator_index_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x3_operator_index_UInt16.parameters = Float16x2x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt16)->signature = "operator[](u16) f16x2"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float16x3
    Float16x2x3_transform_Float16x2_vec.name = "vec"_c;
    Float16x2x3_transform_Float16x2_vec.type = Type::FullType{ Float16x3Type.name };
    Float16x2x3_transform_Float16x2.name = Float16x2x3_transform_Float16x2_name;
    Float16x2x3_transform_Float16x2.backendIndex = 1304;
    Float16x2x3_transform_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x3_transform_Float16x2.parameters = Float16x2x3_transform_Float16x2_args;
    Symbol::Resolved(&Float16x2x3_transform_Float16x2_vec)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x2x3_transform_Float16x2)->signature = "operator*(f16x3) f16x2"_c;
    Symbol::Resolved(&Float16x2x3_transform_Float16x2)->name = "operator*(f16x3)"_c;
    Symbol::Resolved(&Float16x2x3_transform_Float16x2)->nameWithVarNames = "operator*(vec : f16x3)"_c;
    Symbol::Resolved(&Float16x2x3_transform_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator+ with Float16x2x3
    Float16x2x3_operator_add_Float16x2x3_arg.name = "arg"_c;
    Float16x2x3_operator_add_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_add_Float16x2x3.name = Float16x2x3_operator_add_Float16x2x3_name;
    Float16x2x3_operator_add_Float16x2x3.backendIndex = 1305;
    Float16x2x3_operator_add_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_add_Float16x2x3.parameters = Float16x2x3_operator_add_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_add_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_add_Float16x2x3)->signature = "operator+(f16x2x3) f16x2x3"_c;
    Symbol::Resolved(&Float16x2x3_operator_add_Float16x2x3)->name = "operator+(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_add_Float16x2x3)->nameWithVarNames = "operator+(arg : f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_add_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator- with Float16x2x3
    Float16x2x3_operator_sub_Float16x2x3_arg.name = "arg"_c;
    Float16x2x3_operator_sub_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_sub_Float16x2x3.name = Float16x2x3_operator_sub_Float16x2x3_name;
    Float16x2x3_operator_sub_Float16x2x3.backendIndex = 1306;
    Float16x2x3_operator_sub_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_sub_Float16x2x3.parameters = Float16x2x3_operator_sub_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_sub_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_sub_Float16x2x3)->signature = "operator-(f16x2x3) f16x2x3"_c;
    Symbol::Resolved(&Float16x2x3_operator_sub_Float16x2x3)->name = "operator-(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_sub_Float16x2x3)->nameWithVarNames = "operator-(arg : f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_sub_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator* with Float16x2x3
    Float16x2x3_operator_mul_Float16x2x3_arg.name = "arg"_c;
    Float16x2x3_operator_mul_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_mul_Float16x2x3.name = Float16x2x3_operator_mul_Float16x2x3_name;
    Float16x2x3_operator_mul_Float16x2x3.backendIndex = 1307;
    Float16x2x3_operator_mul_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_mul_Float16x2x3.parameters = Float16x2x3_operator_mul_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_mul_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_mul_Float16x2x3)->signature = "operator*(f16x2x3) f16x2x3"_c;
    Symbol::Resolved(&Float16x2x3_operator_mul_Float16x2x3)->name = "operator*(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_mul_Float16x2x3)->nameWithVarNames = "operator*(arg : f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_mul_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator+= with Float16x2x3
    Float16x2x3_operator_addasg_Float16x2x3_arg.name = "arg"_c;
    Float16x2x3_operator_addasg_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_addasg_Float16x2x3.name = Float16x2x3_operator_addasg_Float16x2x3_name;
    Float16x2x3_operator_addasg_Float16x2x3.backendIndex = 1308;
    Float16x2x3_operator_addasg_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_addasg_Float16x2x3.parameters = Float16x2x3_operator_addasg_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_addasg_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_addasg_Float16x2x3)->signature = "operator+=(f16x2x3) f16x2x3"_c;
    Symbol::Resolved(&Float16x2x3_operator_addasg_Float16x2x3)->name = "operator+=(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_addasg_Float16x2x3)->nameWithVarNames = "operator+=(arg : f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_addasg_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator-= with Float16x2x3
    Float16x2x3_operator_subasg_Float16x2x3_arg.name = "arg"_c;
    Float16x2x3_operator_subasg_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_subasg_Float16x2x3.name = Float16x2x3_operator_subasg_Float16x2x3_name;
    Float16x2x3_operator_subasg_Float16x2x3.backendIndex = 1309;
    Float16x2x3_operator_subasg_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_subasg_Float16x2x3.parameters = Float16x2x3_operator_subasg_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_subasg_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_subasg_Float16x2x3)->signature = "operator-=(f16x2x3) f16x2x3"_c;
    Symbol::Resolved(&Float16x2x3_operator_subasg_Float16x2x3)->name = "operator-=(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_subasg_Float16x2x3)->nameWithVarNames = "operator-=(arg : f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_subasg_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator*= with Float16x2x3
    Float16x2x3_operator_mulasg_Float16x2x3_arg.name = "arg"_c;
    Float16x2x3_operator_mulasg_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_mulasg_Float16x2x3.name = Float16x2x3_operator_mulasg_Float16x2x3_name;
    Float16x2x3_operator_mulasg_Float16x2x3.backendIndex = 1310;
    Float16x2x3_operator_mulasg_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_mulasg_Float16x2x3.parameters = Float16x2x3_operator_mulasg_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_mulasg_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_mulasg_Float16x2x3)->signature = "operator*=(f16x2x3) f16x2x3"_c;
    Symbol::Resolved(&Float16x2x3_operator_mulasg_Float16x2x3)->name = "operator*=(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_mulasg_Float16x2x3)->nameWithVarNames = "operator*=(arg : f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_mulasg_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator* with Float16
    Float16x2x3_operator_scale_Float16_arg.name = "arg"_c;
    Float16x2x3_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x2x3_operator_scale_Float16.name = Float16x2x3_operator_scale_Float16_name;
    Float16x2x3_operator_scale_Float16.backendIndex = 1311;
    Float16x2x3_operator_scale_Float16.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_scale_Float16.parameters = Float16x2x3_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16)->signature = "operator*(f16) f16x2x3"_c;
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16)->returnTypeSymbol = &Float16x2x3Type;

    this->scope.symbolLookup = Float16x2x3_symbolLookup;
}
Float16x2x3 Float16x2x3Type;

/// operator[] with Int32
Variable Float16x3x3_operator_index_Int32_arg;
Function Float16x3x3_operator_index_Int32;
inline constexpr std::array Float16x3x3_operator_index_Int32_args = { &Float16x3x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x3x3_operator_index_UInt32_arg;
Function Float16x3x3_operator_index_UInt32;
inline constexpr std::array Float16x3x3_operator_index_UInt32_args = { &Float16x3x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x3x3_operator_index_Int16_arg;
Function Float16x3x3_operator_index_Int16;
inline constexpr std::array Float16x3x3_operator_index_Int16_args = { &Float16x3x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x3x3_operator_index_UInt16_arg;
Function Float16x3x3_operator_index_UInt16;
inline constexpr std::array Float16x3x3_operator_index_UInt16_args = { &Float16x3x3_operator_index_UInt16_arg };

/// operator* with Float16x3
Variable Float16x3x3_transform_Float16x3_vec;
Function Float16x3x3_transform_Float16x3;
inline constexpr std::array Float16x3x3_transform_Float16x3_args = { &Float16x3x3_transform_Float16x3_vec };

/// operator+ with Float16x3x3
Variable Float16x3x3_operator_add_Float16x3x3_arg;
Function Float16x3x3_operator_add_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_add_Float16x3x3_args = { &Float16x3x3_operator_add_Float16x3x3_arg };

/// operator- with Float16x3x3
Variable Float16x3x3_operator_sub_Float16x3x3_arg;
Function Float16x3x3_operator_sub_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_sub_Float16x3x3_args = { &Float16x3x3_operator_sub_Float16x3x3_arg };

/// operator* with Float16x3x3
Variable Float16x3x3_operator_mul_Float16x3x3_arg;
Function Float16x3x3_operator_mul_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_mul_Float16x3x3_args = { &Float16x3x3_operator_mul_Float16x3x3_arg };

/// operator+= with Float16x3x3
Variable Float16x3x3_operator_addasg_Float16x3x3_arg;
Function Float16x3x3_operator_addasg_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_addasg_Float16x3x3_args = { &Float16x3x3_operator_addasg_Float16x3x3_arg };

/// operator-= with Float16x3x3
Variable Float16x3x3_operator_subasg_Float16x3x3_arg;
Function Float16x3x3_operator_subasg_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_subasg_Float16x3x3_args = { &Float16x3x3_operator_subasg_Float16x3x3_arg };

/// operator*= with Float16x3x3
Variable Float16x3x3_operator_mulasg_Float16x3x3_arg;
Function Float16x3x3_operator_mulasg_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_mulasg_Float16x3x3_args = { &Float16x3x3_operator_mulasg_Float16x3x3_arg };

/// operator* with Float16
Variable Float16x3x3_operator_scale_Float16_arg;
Function Float16x3x3_operator_scale_Float16;
inline constexpr std::array Float16x3x3_operator_scale_Float16_args = { &Float16x3x3_operator_scale_Float16_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float16x3x3_symbolLookup = {
    std::pair{ "operator+(f16x3x3)"_h, &Float16x3x3_operator_add_Float16x3x3 },
    std::pair{ "operator*=(f16x3x3)"_h, &Float16x3x3_operator_mulasg_Float16x3x3 },
    std::pair{ "operator[](i16)"_h, &Float16x3x3_operator_index_Int16 },
    std::pair{ "operator-=(f16x3x3)"_h, &Float16x3x3_operator_subasg_Float16x3x3 },
    std::pair{ "operator-"_h, &Float16x3x3_operator_sub_Float16x3x3 },
    std::pair{ "operator+"_h, &Float16x3x3_operator_add_Float16x3x3 },
    std::pair{ "operator*"_h, &Float16x3x3_transform_Float16x3 },
    std::pair{ "operator*"_h, &Float16x3x3_operator_mul_Float16x3x3 },
    std::pair{ "operator*"_h, &Float16x3x3_operator_scale_Float16 },
    std::pair{ "operator-(f16x3x3)"_h, &Float16x3x3_operator_sub_Float16x3x3 },
    std::pair{ "operator*(f16x3)"_h, &Float16x3x3_transform_Float16x3 },
    std::pair{ "operator[](u32)"_h, &Float16x3x3_operator_index_UInt32 },
    std::pair{ "operator[](u16)"_h, &Float16x3x3_operator_index_UInt16 },
    std::pair{ "operator*(f16)"_h, &Float16x3x3_operator_scale_Float16 },
    std::pair{ "operator+=(f16x3x3)"_h, &Float16x3x3_operator_addasg_Float16x3x3 },
    std::pair{ "operator[]"_h, &Float16x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float16x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float16x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float16x3x3_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float16x3x3_operator_subasg_Float16x3x3 },
    std::pair{ "operator+="_h, &Float16x3x3_operator_addasg_Float16x3x3 },
    std::pair{ "operator*="_h, &Float16x3x3_operator_mulasg_Float16x3x3 },
    std::pair{ "operator*(f16x3x3)"_h, &Float16x3x3_operator_mul_Float16x3x3 },
    std::pair{ "operator[](i32)"_h, &Float16x3x3_operator_index_Int32 }
    };

Float16x3x3::Float16x3x3()
{
    this->name = "f16x3x3"_c;
    this->columnSize = 3;
    this->rowSize = 3;
    this->byteSize = 18;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x3x3_operator_index_Int32_arg.name = "idx"_c;
    Float16x3x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x3x3_operator_index_Int32.name = Float16x3x3_operator_index_Int32_name;
    Float16x3x3_operator_index_Int32.backendIndex = 1315;
    Float16x3x3_operator_index_Int32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x3_operator_index_Int32.parameters = Float16x3x3_operator_index_Int32_args;
    Symbol::Resolved(&Float16x3x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x3x3_operator_index_Int32)->signature = "operator[](i32) f16x3"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_Int32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt32
    Float16x3x3_operator_index_UInt32_arg.name = "idx"_c;
    Float16x3x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x3x3_operator_index_UInt32.name = Float16x3x3_operator_index_UInt32_name;
    Float16x3x3_operator_index_UInt32.backendIndex = 1316;
    Float16x3x3_operator_index_UInt32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x3_operator_index_UInt32.parameters = Float16x3x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt32)->signature = "operator[](u32) f16x3"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with Int16
    Float16x3x3_operator_index_Int16_arg.name = "idx"_c;
    Float16x3x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x3x3_operator_index_Int16.name = Float16x3x3_operator_index_Int16_name;
    Float16x3x3_operator_index_Int16.backendIndex = 1317;
    Float16x3x3_operator_index_Int16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x3_operator_index_Int16.parameters = Float16x3x3_operator_index_Int16_args;
    Symbol::Resolved(&Float16x3x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3x3_operator_index_Int16)->signature = "operator[](i16) f16x3"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_Int16)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt16
    Float16x3x3_operator_index_UInt16_arg.name = "idx"_c;
    Float16x3x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x3x3_operator_index_UInt16.name = Float16x3x3_operator_index_UInt16_name;
    Float16x3x3_operator_index_UInt16.backendIndex = 1318;
    Float16x3x3_operator_index_UInt16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x3_operator_index_UInt16.parameters = Float16x3x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt16)->signature = "operator[](u16) f16x3"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float16x3
    Float16x3x3_transform_Float16x3_vec.name = "vec"_c;
    Float16x3x3_transform_Float16x3_vec.type = Type::FullType{ Float16x3Type.name };
    Float16x3x3_transform_Float16x3.name = Float16x3x3_transform_Float16x3_name;
    Float16x3x3_transform_Float16x3.backendIndex = 1319;
    Float16x3x3_transform_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x3_transform_Float16x3.parameters = Float16x3x3_transform_Float16x3_args;
    Symbol::Resolved(&Float16x3x3_transform_Float16x3_vec)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3x3_transform_Float16x3)->signature = "operator*(f16x3) f16x3"_c;
    Symbol::Resolved(&Float16x3x3_transform_Float16x3)->name = "operator*(f16x3)"_c;
    Symbol::Resolved(&Float16x3x3_transform_Float16x3)->nameWithVarNames = "operator*(vec : f16x3)"_c;
    Symbol::Resolved(&Float16x3x3_transform_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator+ with Float16x3x3
    Float16x3x3_operator_add_Float16x3x3_arg.name = "arg"_c;
    Float16x3x3_operator_add_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_add_Float16x3x3.name = Float16x3x3_operator_add_Float16x3x3_name;
    Float16x3x3_operator_add_Float16x3x3.backendIndex = 1320;
    Float16x3x3_operator_add_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_add_Float16x3x3.parameters = Float16x3x3_operator_add_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_add_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_add_Float16x3x3)->signature = "operator+(f16x3x3) f16x3x3"_c;
    Symbol::Resolved(&Float16x3x3_operator_add_Float16x3x3)->name = "operator+(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_add_Float16x3x3)->nameWithVarNames = "operator+(arg : f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_add_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator- with Float16x3x3
    Float16x3x3_operator_sub_Float16x3x3_arg.name = "arg"_c;
    Float16x3x3_operator_sub_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_sub_Float16x3x3.name = Float16x3x3_operator_sub_Float16x3x3_name;
    Float16x3x3_operator_sub_Float16x3x3.backendIndex = 1321;
    Float16x3x3_operator_sub_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_sub_Float16x3x3.parameters = Float16x3x3_operator_sub_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_sub_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_sub_Float16x3x3)->signature = "operator-(f16x3x3) f16x3x3"_c;
    Symbol::Resolved(&Float16x3x3_operator_sub_Float16x3x3)->name = "operator-(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_sub_Float16x3x3)->nameWithVarNames = "operator-(arg : f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_sub_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator* with Float16x3x3
    Float16x3x3_operator_mul_Float16x3x3_arg.name = "arg"_c;
    Float16x3x3_operator_mul_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_mul_Float16x3x3.name = Float16x3x3_operator_mul_Float16x3x3_name;
    Float16x3x3_operator_mul_Float16x3x3.backendIndex = 1322;
    Float16x3x3_operator_mul_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_mul_Float16x3x3.parameters = Float16x3x3_operator_mul_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_mul_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_mul_Float16x3x3)->signature = "operator*(f16x3x3) f16x3x3"_c;
    Symbol::Resolved(&Float16x3x3_operator_mul_Float16x3x3)->name = "operator*(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_mul_Float16x3x3)->nameWithVarNames = "operator*(arg : f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_mul_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator+= with Float16x3x3
    Float16x3x3_operator_addasg_Float16x3x3_arg.name = "arg"_c;
    Float16x3x3_operator_addasg_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_addasg_Float16x3x3.name = Float16x3x3_operator_addasg_Float16x3x3_name;
    Float16x3x3_operator_addasg_Float16x3x3.backendIndex = 1323;
    Float16x3x3_operator_addasg_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_addasg_Float16x3x3.parameters = Float16x3x3_operator_addasg_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_addasg_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_addasg_Float16x3x3)->signature = "operator+=(f16x3x3) f16x3x3"_c;
    Symbol::Resolved(&Float16x3x3_operator_addasg_Float16x3x3)->name = "operator+=(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_addasg_Float16x3x3)->nameWithVarNames = "operator+=(arg : f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_addasg_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator-= with Float16x3x3
    Float16x3x3_operator_subasg_Float16x3x3_arg.name = "arg"_c;
    Float16x3x3_operator_subasg_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_subasg_Float16x3x3.name = Float16x3x3_operator_subasg_Float16x3x3_name;
    Float16x3x3_operator_subasg_Float16x3x3.backendIndex = 1324;
    Float16x3x3_operator_subasg_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_subasg_Float16x3x3.parameters = Float16x3x3_operator_subasg_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_subasg_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_subasg_Float16x3x3)->signature = "operator-=(f16x3x3) f16x3x3"_c;
    Symbol::Resolved(&Float16x3x3_operator_subasg_Float16x3x3)->name = "operator-=(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_subasg_Float16x3x3)->nameWithVarNames = "operator-=(arg : f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_subasg_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator*= with Float16x3x3
    Float16x3x3_operator_mulasg_Float16x3x3_arg.name = "arg"_c;
    Float16x3x3_operator_mulasg_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_mulasg_Float16x3x3.name = Float16x3x3_operator_mulasg_Float16x3x3_name;
    Float16x3x3_operator_mulasg_Float16x3x3.backendIndex = 1325;
    Float16x3x3_operator_mulasg_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_mulasg_Float16x3x3.parameters = Float16x3x3_operator_mulasg_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_mulasg_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_mulasg_Float16x3x3)->signature = "operator*=(f16x3x3) f16x3x3"_c;
    Symbol::Resolved(&Float16x3x3_operator_mulasg_Float16x3x3)->name = "operator*=(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_mulasg_Float16x3x3)->nameWithVarNames = "operator*=(arg : f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_mulasg_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator* with Float16
    Float16x3x3_operator_scale_Float16_arg.name = "arg"_c;
    Float16x3x3_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x3x3_operator_scale_Float16.name = Float16x3x3_operator_scale_Float16_name;
    Float16x3x3_operator_scale_Float16.backendIndex = 1326;
    Float16x3x3_operator_scale_Float16.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_scale_Float16.parameters = Float16x3x3_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16)->signature = "operator*(f16) f16x3x3"_c;
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16)->returnTypeSymbol = &Float16x3x3Type;

    this->scope.symbolLookup = Float16x3x3_symbolLookup;
}
Float16x3x3 Float16x3x3Type;

/// operator[] with Int32
Variable Float16x4x3_operator_index_Int32_arg;
Function Float16x4x3_operator_index_Int32;
inline constexpr std::array Float16x4x3_operator_index_Int32_args = { &Float16x4x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x4x3_operator_index_UInt32_arg;
Function Float16x4x3_operator_index_UInt32;
inline constexpr std::array Float16x4x3_operator_index_UInt32_args = { &Float16x4x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x4x3_operator_index_Int16_arg;
Function Float16x4x3_operator_index_Int16;
inline constexpr std::array Float16x4x3_operator_index_Int16_args = { &Float16x4x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x4x3_operator_index_UInt16_arg;
Function Float16x4x3_operator_index_UInt16;
inline constexpr std::array Float16x4x3_operator_index_UInt16_args = { &Float16x4x3_operator_index_UInt16_arg };

/// operator* with Float16x3
Variable Float16x4x3_transform_Float16x4_vec;
Function Float16x4x3_transform_Float16x4;
inline constexpr std::array Float16x4x3_transform_Float16x4_args = { &Float16x4x3_transform_Float16x4_vec };

/// operator+ with Float16x4x3
Variable Float16x4x3_operator_add_Float16x4x3_arg;
Function Float16x4x3_operator_add_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_add_Float16x4x3_args = { &Float16x4x3_operator_add_Float16x4x3_arg };

/// operator- with Float16x4x3
Variable Float16x4x3_operator_sub_Float16x4x3_arg;
Function Float16x4x3_operator_sub_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_sub_Float16x4x3_args = { &Float16x4x3_operator_sub_Float16x4x3_arg };

/// operator* with Float16x4x3
Variable Float16x4x3_operator_mul_Float16x4x3_arg;
Function Float16x4x3_operator_mul_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_mul_Float16x4x3_args = { &Float16x4x3_operator_mul_Float16x4x3_arg };

/// operator+= with Float16x4x3
Variable Float16x4x3_operator_addasg_Float16x4x3_arg;
Function Float16x4x3_operator_addasg_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_addasg_Float16x4x3_args = { &Float16x4x3_operator_addasg_Float16x4x3_arg };

/// operator-= with Float16x4x3
Variable Float16x4x3_operator_subasg_Float16x4x3_arg;
Function Float16x4x3_operator_subasg_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_subasg_Float16x4x3_args = { &Float16x4x3_operator_subasg_Float16x4x3_arg };

/// operator*= with Float16x4x3
Variable Float16x4x3_operator_mulasg_Float16x4x3_arg;
Function Float16x4x3_operator_mulasg_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_mulasg_Float16x4x3_args = { &Float16x4x3_operator_mulasg_Float16x4x3_arg };

/// operator* with Float16
Variable Float16x4x3_operator_scale_Float16_arg;
Function Float16x4x3_operator_scale_Float16;
inline constexpr std::array Float16x4x3_operator_scale_Float16_args = { &Float16x4x3_operator_scale_Float16_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float16x4x3_symbolLookup = {
    std::pair{ "operator+=(f16x4x3)"_h, &Float16x4x3_operator_addasg_Float16x4x3 },
    std::pair{ "operator[](i16)"_h, &Float16x4x3_operator_index_Int16 },
    std::pair{ "operator-(f16x4x3)"_h, &Float16x4x3_operator_sub_Float16x4x3 },
    std::pair{ "operator-"_h, &Float16x4x3_operator_sub_Float16x4x3 },
    std::pair{ "operator+"_h, &Float16x4x3_operator_add_Float16x4x3 },
    std::pair{ "operator*"_h, &Float16x4x3_transform_Float16x4 },
    std::pair{ "operator*"_h, &Float16x4x3_operator_mul_Float16x4x3 },
    std::pair{ "operator*"_h, &Float16x4x3_operator_scale_Float16 },
    std::pair{ "operator*(f16x3)"_h, &Float16x4x3_transform_Float16x4 },
    std::pair{ "operator[](u32)"_h, &Float16x4x3_operator_index_UInt32 },
    std::pair{ "operator[](u16)"_h, &Float16x4x3_operator_index_UInt16 },
    std::pair{ "operator*(f16)"_h, &Float16x4x3_operator_scale_Float16 },
    std::pair{ "operator*=(f16x4x3)"_h, &Float16x4x3_operator_mulasg_Float16x4x3 },
    std::pair{ "operator[]"_h, &Float16x4x3_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float16x4x3_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float16x4x3_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float16x4x3_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float16x4x3_operator_subasg_Float16x4x3 },
    std::pair{ "operator+="_h, &Float16x4x3_operator_addasg_Float16x4x3 },
    std::pair{ "operator*="_h, &Float16x4x3_operator_mulasg_Float16x4x3 },
    std::pair{ "operator+(f16x4x3)"_h, &Float16x4x3_operator_add_Float16x4x3 },
    std::pair{ "operator-=(f16x4x3)"_h, &Float16x4x3_operator_subasg_Float16x4x3 },
    std::pair{ "operator[](i32)"_h, &Float16x4x3_operator_index_Int32 },
    std::pair{ "operator*(f16x4x3)"_h, &Float16x4x3_operator_mul_Float16x4x3 }
    };

Float16x4x3::Float16x4x3()
{
    this->name = "f16x4x3"_c;
    this->columnSize = 4;
    this->rowSize = 3;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x4x3_operator_index_Int32_arg.name = "idx"_c;
    Float16x4x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x4x3_operator_index_Int32.name = Float16x4x3_operator_index_Int32_name;
    Float16x4x3_operator_index_Int32.backendIndex = 1329;
    Float16x4x3_operator_index_Int32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x3_operator_index_Int32.parameters = Float16x4x3_operator_index_Int32_args;
    Symbol::Resolved(&Float16x4x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x4x3_operator_index_Int32)->signature = "operator[](i32) f16x4"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_Int32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt32
    Float16x4x3_operator_index_UInt32_arg.name = "idx"_c;
    Float16x4x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x4x3_operator_index_UInt32.name = Float16x4x3_operator_index_UInt32_name;
    Float16x4x3_operator_index_UInt32.backendIndex = 1330;
    Float16x4x3_operator_index_UInt32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x3_operator_index_UInt32.parameters = Float16x4x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt32)->signature = "operator[](u32) f16x4"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with Int16
    Float16x4x3_operator_index_Int16_arg.name = "idx"_c;
    Float16x4x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x4x3_operator_index_Int16.name = Float16x4x3_operator_index_Int16_name;
    Float16x4x3_operator_index_Int16.backendIndex = 1331;
    Float16x4x3_operator_index_Int16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x3_operator_index_Int16.parameters = Float16x4x3_operator_index_Int16_args;
    Symbol::Resolved(&Float16x4x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4x3_operator_index_Int16)->signature = "operator[](i16) f16x4"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_Int16)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt16
    Float16x4x3_operator_index_UInt16_arg.name = "idx"_c;
    Float16x4x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x4x3_operator_index_UInt16.name = Float16x4x3_operator_index_UInt16_name;
    Float16x4x3_operator_index_UInt16.backendIndex = 1332;
    Float16x4x3_operator_index_UInt16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x3_operator_index_UInt16.parameters = Float16x4x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt16)->signature = "operator[](u16) f16x4"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Float16x3
    Float16x4x3_transform_Float16x4_vec.name = "vec"_c;
    Float16x4x3_transform_Float16x4_vec.type = Type::FullType{ Float16x3Type.name };
    Float16x4x3_transform_Float16x4.name = Float16x4x3_transform_Float16x4_name;
    Float16x4x3_transform_Float16x4.backendIndex = 1333;
    Float16x4x3_transform_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x3_transform_Float16x4.parameters = Float16x4x3_transform_Float16x4_args;
    Symbol::Resolved(&Float16x4x3_transform_Float16x4_vec)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4x3_transform_Float16x4)->signature = "operator*(f16x3) f16x4"_c;
    Symbol::Resolved(&Float16x4x3_transform_Float16x4)->name = "operator*(f16x3)"_c;
    Symbol::Resolved(&Float16x4x3_transform_Float16x4)->nameWithVarNames = "operator*(vec : f16x3)"_c;
    Symbol::Resolved(&Float16x4x3_transform_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator+ with Float16x4x3
    Float16x4x3_operator_add_Float16x4x3_arg.name = "arg"_c;
    Float16x4x3_operator_add_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_add_Float16x4x3.name = Float16x4x3_operator_add_Float16x4x3_name;
    Float16x4x3_operator_add_Float16x4x3.backendIndex = 1334;
    Float16x4x3_operator_add_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_add_Float16x4x3.parameters = Float16x4x3_operator_add_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_add_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_add_Float16x4x3)->signature = "operator+(f16x4x3) f16x4x3"_c;
    Symbol::Resolved(&Float16x4x3_operator_add_Float16x4x3)->name = "operator+(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_add_Float16x4x3)->nameWithVarNames = "operator+(arg : f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_add_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator- with Float16x4x3
    Float16x4x3_operator_sub_Float16x4x3_arg.name = "arg"_c;
    Float16x4x3_operator_sub_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_sub_Float16x4x3.name = Float16x4x3_operator_sub_Float16x4x3_name;
    Float16x4x3_operator_sub_Float16x4x3.backendIndex = 1335;
    Float16x4x3_operator_sub_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_sub_Float16x4x3.parameters = Float16x4x3_operator_sub_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_sub_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_sub_Float16x4x3)->signature = "operator-(f16x4x3) f16x4x3"_c;
    Symbol::Resolved(&Float16x4x3_operator_sub_Float16x4x3)->name = "operator-(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_sub_Float16x4x3)->nameWithVarNames = "operator-(arg : f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_sub_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator* with Float16x4x3
    Float16x4x3_operator_mul_Float16x4x3_arg.name = "arg"_c;
    Float16x4x3_operator_mul_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_mul_Float16x4x3.name = Float16x4x3_operator_mul_Float16x4x3_name;
    Float16x4x3_operator_mul_Float16x4x3.backendIndex = 1336;
    Float16x4x3_operator_mul_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_mul_Float16x4x3.parameters = Float16x4x3_operator_mul_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_mul_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_mul_Float16x4x3)->signature = "operator*(f16x4x3) f16x4x3"_c;
    Symbol::Resolved(&Float16x4x3_operator_mul_Float16x4x3)->name = "operator*(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_mul_Float16x4x3)->nameWithVarNames = "operator*(arg : f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_mul_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator+= with Float16x4x3
    Float16x4x3_operator_addasg_Float16x4x3_arg.name = "arg"_c;
    Float16x4x3_operator_addasg_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_addasg_Float16x4x3.name = Float16x4x3_operator_addasg_Float16x4x3_name;
    Float16x4x3_operator_addasg_Float16x4x3.backendIndex = 1337;
    Float16x4x3_operator_addasg_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_addasg_Float16x4x3.parameters = Float16x4x3_operator_addasg_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_addasg_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_addasg_Float16x4x3)->signature = "operator+=(f16x4x3) f16x4x3"_c;
    Symbol::Resolved(&Float16x4x3_operator_addasg_Float16x4x3)->name = "operator+=(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_addasg_Float16x4x3)->nameWithVarNames = "operator+=(arg : f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_addasg_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator-= with Float16x4x3
    Float16x4x3_operator_subasg_Float16x4x3_arg.name = "arg"_c;
    Float16x4x3_operator_subasg_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_subasg_Float16x4x3.name = Float16x4x3_operator_subasg_Float16x4x3_name;
    Float16x4x3_operator_subasg_Float16x4x3.backendIndex = 1338;
    Float16x4x3_operator_subasg_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_subasg_Float16x4x3.parameters = Float16x4x3_operator_subasg_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_subasg_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_subasg_Float16x4x3)->signature = "operator-=(f16x4x3) f16x4x3"_c;
    Symbol::Resolved(&Float16x4x3_operator_subasg_Float16x4x3)->name = "operator-=(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_subasg_Float16x4x3)->nameWithVarNames = "operator-=(arg : f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_subasg_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator*= with Float16x4x3
    Float16x4x3_operator_mulasg_Float16x4x3_arg.name = "arg"_c;
    Float16x4x3_operator_mulasg_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_mulasg_Float16x4x3.name = Float16x4x3_operator_mulasg_Float16x4x3_name;
    Float16x4x3_operator_mulasg_Float16x4x3.backendIndex = 1339;
    Float16x4x3_operator_mulasg_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_mulasg_Float16x4x3.parameters = Float16x4x3_operator_mulasg_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_mulasg_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_mulasg_Float16x4x3)->signature = "operator*=(f16x4x3) f16x4x3"_c;
    Symbol::Resolved(&Float16x4x3_operator_mulasg_Float16x4x3)->name = "operator*=(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_mulasg_Float16x4x3)->nameWithVarNames = "operator*=(arg : f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_mulasg_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator* with Float16
    Float16x4x3_operator_scale_Float16_arg.name = "arg"_c;
    Float16x4x3_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x4x3_operator_scale_Float16.name = Float16x4x3_operator_scale_Float16_name;
    Float16x4x3_operator_scale_Float16.backendIndex = 1340;
    Float16x4x3_operator_scale_Float16.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_scale_Float16.parameters = Float16x4x3_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16)->signature = "operator*(f16) f16x4x3"_c;
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16)->returnTypeSymbol = &Float16x4x3Type;

    this->scope.symbolLookup = Float16x4x3_symbolLookup;
}
Float16x4x3 Float16x4x3Type;

/// operator[] with Int32
Variable Float16x2x4_operator_index_Int32_arg;
Function Float16x2x4_operator_index_Int32;
inline constexpr std::array Float16x2x4_operator_index_Int32_args = { &Float16x2x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x2x4_operator_index_UInt32_arg;
Function Float16x2x4_operator_index_UInt32;
inline constexpr std::array Float16x2x4_operator_index_UInt32_args = { &Float16x2x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x2x4_operator_index_Int16_arg;
Function Float16x2x4_operator_index_Int16;
inline constexpr std::array Float16x2x4_operator_index_Int16_args = { &Float16x2x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x2x4_operator_index_UInt16_arg;
Function Float16x2x4_operator_index_UInt16;
inline constexpr std::array Float16x2x4_operator_index_UInt16_args = { &Float16x2x4_operator_index_UInt16_arg };

/// operator* with Float16x4
Variable Float16x2x4_transform_Float16x2_vec;
Function Float16x2x4_transform_Float16x2;
inline constexpr std::array Float16x2x4_transform_Float16x2_args = { &Float16x2x4_transform_Float16x2_vec };

/// operator+ with Float16x2x4
Variable Float16x2x4_operator_add_Float16x2x4_arg;
Function Float16x2x4_operator_add_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_add_Float16x2x4_args = { &Float16x2x4_operator_add_Float16x2x4_arg };

/// operator- with Float16x2x4
Variable Float16x2x4_operator_sub_Float16x2x4_arg;
Function Float16x2x4_operator_sub_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_sub_Float16x2x4_args = { &Float16x2x4_operator_sub_Float16x2x4_arg };

/// operator* with Float16x2x4
Variable Float16x2x4_operator_mul_Float16x2x4_arg;
Function Float16x2x4_operator_mul_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_mul_Float16x2x4_args = { &Float16x2x4_operator_mul_Float16x2x4_arg };

/// operator+= with Float16x2x4
Variable Float16x2x4_operator_addasg_Float16x2x4_arg;
Function Float16x2x4_operator_addasg_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_addasg_Float16x2x4_args = { &Float16x2x4_operator_addasg_Float16x2x4_arg };

/// operator-= with Float16x2x4
Variable Float16x2x4_operator_subasg_Float16x2x4_arg;
Function Float16x2x4_operator_subasg_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_subasg_Float16x2x4_args = { &Float16x2x4_operator_subasg_Float16x2x4_arg };

/// operator*= with Float16x2x4
Variable Float16x2x4_operator_mulasg_Float16x2x4_arg;
Function Float16x2x4_operator_mulasg_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_mulasg_Float16x2x4_args = { &Float16x2x4_operator_mulasg_Float16x2x4_arg };

/// operator* with Float16
Variable Float16x2x4_operator_scale_Float16_arg;
Function Float16x2x4_operator_scale_Float16;
inline constexpr std::array Float16x2x4_operator_scale_Float16_args = { &Float16x2x4_operator_scale_Float16_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float16x2x4_symbolLookup = {
    std::pair{ "operator[](i16)"_h, &Float16x2x4_operator_index_Int16 },
    std::pair{ "operator+(f16x2x4)"_h, &Float16x2x4_operator_add_Float16x2x4 },
    std::pair{ "operator*=(f16x2x4)"_h, &Float16x2x4_operator_mulasg_Float16x2x4 },
    std::pair{ "operator*(f16x2x4)"_h, &Float16x2x4_operator_mul_Float16x2x4 },
    std::pair{ "operator+=(f16x2x4)"_h, &Float16x2x4_operator_addasg_Float16x2x4 },
    std::pair{ "operator-"_h, &Float16x2x4_operator_sub_Float16x2x4 },
    std::pair{ "operator+"_h, &Float16x2x4_operator_add_Float16x2x4 },
    std::pair{ "operator*"_h, &Float16x2x4_transform_Float16x2 },
    std::pair{ "operator*"_h, &Float16x2x4_operator_mul_Float16x2x4 },
    std::pair{ "operator*"_h, &Float16x2x4_operator_scale_Float16 },
    std::pair{ "operator*(f16x4)"_h, &Float16x2x4_transform_Float16x2 },
    std::pair{ "operator[](u32)"_h, &Float16x2x4_operator_index_UInt32 },
    std::pair{ "operator[](u16)"_h, &Float16x2x4_operator_index_UInt16 },
    std::pair{ "operator*(f16)"_h, &Float16x2x4_operator_scale_Float16 },
    std::pair{ "operator-(f16x2x4)"_h, &Float16x2x4_operator_sub_Float16x2x4 },
    std::pair{ "operator-=(f16x2x4)"_h, &Float16x2x4_operator_subasg_Float16x2x4 },
    std::pair{ "operator[]"_h, &Float16x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float16x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float16x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float16x2x4_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float16x2x4_operator_subasg_Float16x2x4 },
    std::pair{ "operator+="_h, &Float16x2x4_operator_addasg_Float16x2x4 },
    std::pair{ "operator*="_h, &Float16x2x4_operator_mulasg_Float16x2x4 },
    std::pair{ "operator[](i32)"_h, &Float16x2x4_operator_index_Int32 }
    };

Float16x2x4::Float16x2x4()
{
    this->name = "f16x2x4"_c;
    this->columnSize = 2;
    this->rowSize = 4;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x2x4_operator_index_Int32_arg.name = "idx"_c;
    Float16x2x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x2x4_operator_index_Int32.name = Float16x2x4_operator_index_Int32_name;
    Float16x2x4_operator_index_Int32.backendIndex = 1343;
    Float16x2x4_operator_index_Int32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x4_operator_index_Int32.parameters = Float16x2x4_operator_index_Int32_args;
    Symbol::Resolved(&Float16x2x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2x4_operator_index_Int32)->signature = "operator[](i32) f16x2"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_Int32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt32
    Float16x2x4_operator_index_UInt32_arg.name = "idx"_c;
    Float16x2x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x2x4_operator_index_UInt32.name = Float16x2x4_operator_index_UInt32_name;
    Float16x2x4_operator_index_UInt32.backendIndex = 1344;
    Float16x2x4_operator_index_UInt32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x4_operator_index_UInt32.parameters = Float16x2x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt32)->signature = "operator[](u32) f16x2"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with Int16
    Float16x2x4_operator_index_Int16_arg.name = "idx"_c;
    Float16x2x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x2x4_operator_index_Int16.name = Float16x2x4_operator_index_Int16_name;
    Float16x2x4_operator_index_Int16.backendIndex = 1345;
    Float16x2x4_operator_index_Int16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x4_operator_index_Int16.parameters = Float16x2x4_operator_index_Int16_args;
    Symbol::Resolved(&Float16x2x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2x4_operator_index_Int16)->signature = "operator[](i16) f16x2"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_Int16)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt16
    Float16x2x4_operator_index_UInt16_arg.name = "idx"_c;
    Float16x2x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x2x4_operator_index_UInt16.name = Float16x2x4_operator_index_UInt16_name;
    Float16x2x4_operator_index_UInt16.backendIndex = 1346;
    Float16x2x4_operator_index_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x4_operator_index_UInt16.parameters = Float16x2x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt16)->signature = "operator[](u16) f16x2"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float16x4
    Float16x2x4_transform_Float16x2_vec.name = "vec"_c;
    Float16x2x4_transform_Float16x2_vec.type = Type::FullType{ Float16x4Type.name };
    Float16x2x4_transform_Float16x2.name = Float16x2x4_transform_Float16x2_name;
    Float16x2x4_transform_Float16x2.backendIndex = 1347;
    Float16x2x4_transform_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x4_transform_Float16x2.parameters = Float16x2x4_transform_Float16x2_args;
    Symbol::Resolved(&Float16x2x4_transform_Float16x2_vec)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x2x4_transform_Float16x2)->signature = "operator*(f16x4) f16x2"_c;
    Symbol::Resolved(&Float16x2x4_transform_Float16x2)->name = "operator*(f16x4)"_c;
    Symbol::Resolved(&Float16x2x4_transform_Float16x2)->nameWithVarNames = "operator*(vec : f16x4)"_c;
    Symbol::Resolved(&Float16x2x4_transform_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator+ with Float16x2x4
    Float16x2x4_operator_add_Float16x2x4_arg.name = "arg"_c;
    Float16x2x4_operator_add_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_add_Float16x2x4.name = Float16x2x4_operator_add_Float16x2x4_name;
    Float16x2x4_operator_add_Float16x2x4.backendIndex = 1348;
    Float16x2x4_operator_add_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_add_Float16x2x4.parameters = Float16x2x4_operator_add_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_add_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_add_Float16x2x4)->signature = "operator+(f16x2x4) f16x2x4"_c;
    Symbol::Resolved(&Float16x2x4_operator_add_Float16x2x4)->name = "operator+(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_add_Float16x2x4)->nameWithVarNames = "operator+(arg : f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_add_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator- with Float16x2x4
    Float16x2x4_operator_sub_Float16x2x4_arg.name = "arg"_c;
    Float16x2x4_operator_sub_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_sub_Float16x2x4.name = Float16x2x4_operator_sub_Float16x2x4_name;
    Float16x2x4_operator_sub_Float16x2x4.backendIndex = 1349;
    Float16x2x4_operator_sub_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_sub_Float16x2x4.parameters = Float16x2x4_operator_sub_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_sub_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_sub_Float16x2x4)->signature = "operator-(f16x2x4) f16x2x4"_c;
    Symbol::Resolved(&Float16x2x4_operator_sub_Float16x2x4)->name = "operator-(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_sub_Float16x2x4)->nameWithVarNames = "operator-(arg : f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_sub_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator* with Float16x2x4
    Float16x2x4_operator_mul_Float16x2x4_arg.name = "arg"_c;
    Float16x2x4_operator_mul_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_mul_Float16x2x4.name = Float16x2x4_operator_mul_Float16x2x4_name;
    Float16x2x4_operator_mul_Float16x2x4.backendIndex = 1350;
    Float16x2x4_operator_mul_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_mul_Float16x2x4.parameters = Float16x2x4_operator_mul_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_mul_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_mul_Float16x2x4)->signature = "operator*(f16x2x4) f16x2x4"_c;
    Symbol::Resolved(&Float16x2x4_operator_mul_Float16x2x4)->name = "operator*(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_mul_Float16x2x4)->nameWithVarNames = "operator*(arg : f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_mul_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator+= with Float16x2x4
    Float16x2x4_operator_addasg_Float16x2x4_arg.name = "arg"_c;
    Float16x2x4_operator_addasg_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_addasg_Float16x2x4.name = Float16x2x4_operator_addasg_Float16x2x4_name;
    Float16x2x4_operator_addasg_Float16x2x4.backendIndex = 1351;
    Float16x2x4_operator_addasg_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_addasg_Float16x2x4.parameters = Float16x2x4_operator_addasg_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_addasg_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_addasg_Float16x2x4)->signature = "operator+=(f16x2x4) f16x2x4"_c;
    Symbol::Resolved(&Float16x2x4_operator_addasg_Float16x2x4)->name = "operator+=(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_addasg_Float16x2x4)->nameWithVarNames = "operator+=(arg : f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_addasg_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator-= with Float16x2x4
    Float16x2x4_operator_subasg_Float16x2x4_arg.name = "arg"_c;
    Float16x2x4_operator_subasg_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_subasg_Float16x2x4.name = Float16x2x4_operator_subasg_Float16x2x4_name;
    Float16x2x4_operator_subasg_Float16x2x4.backendIndex = 1352;
    Float16x2x4_operator_subasg_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_subasg_Float16x2x4.parameters = Float16x2x4_operator_subasg_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_subasg_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_subasg_Float16x2x4)->signature = "operator-=(f16x2x4) f16x2x4"_c;
    Symbol::Resolved(&Float16x2x4_operator_subasg_Float16x2x4)->name = "operator-=(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_subasg_Float16x2x4)->nameWithVarNames = "operator-=(arg : f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_subasg_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator*= with Float16x2x4
    Float16x2x4_operator_mulasg_Float16x2x4_arg.name = "arg"_c;
    Float16x2x4_operator_mulasg_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_mulasg_Float16x2x4.name = Float16x2x4_operator_mulasg_Float16x2x4_name;
    Float16x2x4_operator_mulasg_Float16x2x4.backendIndex = 1353;
    Float16x2x4_operator_mulasg_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_mulasg_Float16x2x4.parameters = Float16x2x4_operator_mulasg_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_mulasg_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_mulasg_Float16x2x4)->signature = "operator*=(f16x2x4) f16x2x4"_c;
    Symbol::Resolved(&Float16x2x4_operator_mulasg_Float16x2x4)->name = "operator*=(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_mulasg_Float16x2x4)->nameWithVarNames = "operator*=(arg : f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_mulasg_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator* with Float16
    Float16x2x4_operator_scale_Float16_arg.name = "arg"_c;
    Float16x2x4_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x2x4_operator_scale_Float16.name = Float16x2x4_operator_scale_Float16_name;
    Float16x2x4_operator_scale_Float16.backendIndex = 1354;
    Float16x2x4_operator_scale_Float16.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_scale_Float16.parameters = Float16x2x4_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16)->signature = "operator*(f16) f16x2x4"_c;
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16)->returnTypeSymbol = &Float16x2x4Type;

    this->scope.symbolLookup = Float16x2x4_symbolLookup;
}
Float16x2x4 Float16x2x4Type;

/// operator[] with Int32
Variable Float16x3x4_operator_index_Int32_arg;
Function Float16x3x4_operator_index_Int32;
inline constexpr std::array Float16x3x4_operator_index_Int32_args = { &Float16x3x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x3x4_operator_index_UInt32_arg;
Function Float16x3x4_operator_index_UInt32;
inline constexpr std::array Float16x3x4_operator_index_UInt32_args = { &Float16x3x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x3x4_operator_index_Int16_arg;
Function Float16x3x4_operator_index_Int16;
inline constexpr std::array Float16x3x4_operator_index_Int16_args = { &Float16x3x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x3x4_operator_index_UInt16_arg;
Function Float16x3x4_operator_index_UInt16;
inline constexpr std::array Float16x3x4_operator_index_UInt16_args = { &Float16x3x4_operator_index_UInt16_arg };

/// operator* with Float16x4
Variable Float16x3x4_transform_Float16x3_vec;
Function Float16x3x4_transform_Float16x3;
inline constexpr std::array Float16x3x4_transform_Float16x3_args = { &Float16x3x4_transform_Float16x3_vec };

/// operator+ with Float16x3x4
Variable Float16x3x4_operator_add_Float16x3x4_arg;
Function Float16x3x4_operator_add_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_add_Float16x3x4_args = { &Float16x3x4_operator_add_Float16x3x4_arg };

/// operator- with Float16x3x4
Variable Float16x3x4_operator_sub_Float16x3x4_arg;
Function Float16x3x4_operator_sub_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_sub_Float16x3x4_args = { &Float16x3x4_operator_sub_Float16x3x4_arg };

/// operator* with Float16x3x4
Variable Float16x3x4_operator_mul_Float16x3x4_arg;
Function Float16x3x4_operator_mul_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_mul_Float16x3x4_args = { &Float16x3x4_operator_mul_Float16x3x4_arg };

/// operator+= with Float16x3x4
Variable Float16x3x4_operator_addasg_Float16x3x4_arg;
Function Float16x3x4_operator_addasg_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_addasg_Float16x3x4_args = { &Float16x3x4_operator_addasg_Float16x3x4_arg };

/// operator-= with Float16x3x4
Variable Float16x3x4_operator_subasg_Float16x3x4_arg;
Function Float16x3x4_operator_subasg_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_subasg_Float16x3x4_args = { &Float16x3x4_operator_subasg_Float16x3x4_arg };

/// operator*= with Float16x3x4
Variable Float16x3x4_operator_mulasg_Float16x3x4_arg;
Function Float16x3x4_operator_mulasg_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_mulasg_Float16x3x4_args = { &Float16x3x4_operator_mulasg_Float16x3x4_arg };

/// operator* with Float16
Variable Float16x3x4_operator_scale_Float16_arg;
Function Float16x3x4_operator_scale_Float16;
inline constexpr std::array Float16x3x4_operator_scale_Float16_args = { &Float16x3x4_operator_scale_Float16_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float16x3x4_symbolLookup = {
    std::pair{ "operator+(f16x3x4)"_h, &Float16x3x4_operator_add_Float16x3x4 },
    std::pair{ "operator*=(f16x3x4)"_h, &Float16x3x4_operator_mulasg_Float16x3x4 },
    std::pair{ "operator[](i16)"_h, &Float16x3x4_operator_index_Int16 },
    std::pair{ "operator-=(f16x3x4)"_h, &Float16x3x4_operator_subasg_Float16x3x4 },
    std::pair{ "operator-"_h, &Float16x3x4_operator_sub_Float16x3x4 },
    std::pair{ "operator+"_h, &Float16x3x4_operator_add_Float16x3x4 },
    std::pair{ "operator*"_h, &Float16x3x4_transform_Float16x3 },
    std::pair{ "operator*"_h, &Float16x3x4_operator_mul_Float16x3x4 },
    std::pair{ "operator*"_h, &Float16x3x4_operator_scale_Float16 },
    std::pair{ "operator-(f16x3x4)"_h, &Float16x3x4_operator_sub_Float16x3x4 },
    std::pair{ "operator*(f16x4)"_h, &Float16x3x4_transform_Float16x3 },
    std::pair{ "operator[](u32)"_h, &Float16x3x4_operator_index_UInt32 },
    std::pair{ "operator[](u16)"_h, &Float16x3x4_operator_index_UInt16 },
    std::pair{ "operator*(f16)"_h, &Float16x3x4_operator_scale_Float16 },
    std::pair{ "operator+=(f16x3x4)"_h, &Float16x3x4_operator_addasg_Float16x3x4 },
    std::pair{ "operator[]"_h, &Float16x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float16x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float16x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float16x3x4_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float16x3x4_operator_subasg_Float16x3x4 },
    std::pair{ "operator+="_h, &Float16x3x4_operator_addasg_Float16x3x4 },
    std::pair{ "operator*="_h, &Float16x3x4_operator_mulasg_Float16x3x4 },
    std::pair{ "operator*(f16x3x4)"_h, &Float16x3x4_operator_mul_Float16x3x4 },
    std::pair{ "operator[](i32)"_h, &Float16x3x4_operator_index_Int32 }
    };

Float16x3x4::Float16x3x4()
{
    this->name = "f16x3x4"_c;
    this->columnSize = 3;
    this->rowSize = 4;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x3x4_operator_index_Int32_arg.name = "idx"_c;
    Float16x3x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x3x4_operator_index_Int32.name = Float16x3x4_operator_index_Int32_name;
    Float16x3x4_operator_index_Int32.backendIndex = 1357;
    Float16x3x4_operator_index_Int32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x4_operator_index_Int32.parameters = Float16x3x4_operator_index_Int32_args;
    Symbol::Resolved(&Float16x3x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x3x4_operator_index_Int32)->signature = "operator[](i32) f16x3"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_Int32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt32
    Float16x3x4_operator_index_UInt32_arg.name = "idx"_c;
    Float16x3x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x3x4_operator_index_UInt32.name = Float16x3x4_operator_index_UInt32_name;
    Float16x3x4_operator_index_UInt32.backendIndex = 1358;
    Float16x3x4_operator_index_UInt32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x4_operator_index_UInt32.parameters = Float16x3x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt32)->signature = "operator[](u32) f16x3"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with Int16
    Float16x3x4_operator_index_Int16_arg.name = "idx"_c;
    Float16x3x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x3x4_operator_index_Int16.name = Float16x3x4_operator_index_Int16_name;
    Float16x3x4_operator_index_Int16.backendIndex = 1359;
    Float16x3x4_operator_index_Int16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x4_operator_index_Int16.parameters = Float16x3x4_operator_index_Int16_args;
    Symbol::Resolved(&Float16x3x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3x4_operator_index_Int16)->signature = "operator[](i16) f16x3"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_Int16)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt16
    Float16x3x4_operator_index_UInt16_arg.name = "idx"_c;
    Float16x3x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x3x4_operator_index_UInt16.name = Float16x3x4_operator_index_UInt16_name;
    Float16x3x4_operator_index_UInt16.backendIndex = 1360;
    Float16x3x4_operator_index_UInt16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x4_operator_index_UInt16.parameters = Float16x3x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt16)->signature = "operator[](u16) f16x3"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float16x4
    Float16x3x4_transform_Float16x3_vec.name = "vec"_c;
    Float16x3x4_transform_Float16x3_vec.type = Type::FullType{ Float16x4Type.name };
    Float16x3x4_transform_Float16x3.name = Float16x3x4_transform_Float16x3_name;
    Float16x3x4_transform_Float16x3.backendIndex = 1361;
    Float16x3x4_transform_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x4_transform_Float16x3.parameters = Float16x3x4_transform_Float16x3_args;
    Symbol::Resolved(&Float16x3x4_transform_Float16x3_vec)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x3x4_transform_Float16x3)->signature = "operator*(f16x4) f16x3"_c;
    Symbol::Resolved(&Float16x3x4_transform_Float16x3)->name = "operator*(f16x4)"_c;
    Symbol::Resolved(&Float16x3x4_transform_Float16x3)->nameWithVarNames = "operator*(vec : f16x4)"_c;
    Symbol::Resolved(&Float16x3x4_transform_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator+ with Float16x3x4
    Float16x3x4_operator_add_Float16x3x4_arg.name = "arg"_c;
    Float16x3x4_operator_add_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_add_Float16x3x4.name = Float16x3x4_operator_add_Float16x3x4_name;
    Float16x3x4_operator_add_Float16x3x4.backendIndex = 1362;
    Float16x3x4_operator_add_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_add_Float16x3x4.parameters = Float16x3x4_operator_add_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_add_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_add_Float16x3x4)->signature = "operator+(f16x3x4) f16x3x4"_c;
    Symbol::Resolved(&Float16x3x4_operator_add_Float16x3x4)->name = "operator+(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_add_Float16x3x4)->nameWithVarNames = "operator+(arg : f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_add_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator- with Float16x3x4
    Float16x3x4_operator_sub_Float16x3x4_arg.name = "arg"_c;
    Float16x3x4_operator_sub_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_sub_Float16x3x4.name = Float16x3x4_operator_sub_Float16x3x4_name;
    Float16x3x4_operator_sub_Float16x3x4.backendIndex = 1363;
    Float16x3x4_operator_sub_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_sub_Float16x3x4.parameters = Float16x3x4_operator_sub_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_sub_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_sub_Float16x3x4)->signature = "operator-(f16x3x4) f16x3x4"_c;
    Symbol::Resolved(&Float16x3x4_operator_sub_Float16x3x4)->name = "operator-(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_sub_Float16x3x4)->nameWithVarNames = "operator-(arg : f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_sub_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator* with Float16x3x4
    Float16x3x4_operator_mul_Float16x3x4_arg.name = "arg"_c;
    Float16x3x4_operator_mul_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_mul_Float16x3x4.name = Float16x3x4_operator_mul_Float16x3x4_name;
    Float16x3x4_operator_mul_Float16x3x4.backendIndex = 1364;
    Float16x3x4_operator_mul_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_mul_Float16x3x4.parameters = Float16x3x4_operator_mul_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_mul_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_mul_Float16x3x4)->signature = "operator*(f16x3x4) f16x3x4"_c;
    Symbol::Resolved(&Float16x3x4_operator_mul_Float16x3x4)->name = "operator*(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_mul_Float16x3x4)->nameWithVarNames = "operator*(arg : f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_mul_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator+= with Float16x3x4
    Float16x3x4_operator_addasg_Float16x3x4_arg.name = "arg"_c;
    Float16x3x4_operator_addasg_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_addasg_Float16x3x4.name = Float16x3x4_operator_addasg_Float16x3x4_name;
    Float16x3x4_operator_addasg_Float16x3x4.backendIndex = 1365;
    Float16x3x4_operator_addasg_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_addasg_Float16x3x4.parameters = Float16x3x4_operator_addasg_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_addasg_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_addasg_Float16x3x4)->signature = "operator+=(f16x3x4) f16x3x4"_c;
    Symbol::Resolved(&Float16x3x4_operator_addasg_Float16x3x4)->name = "operator+=(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_addasg_Float16x3x4)->nameWithVarNames = "operator+=(arg : f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_addasg_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator-= with Float16x3x4
    Float16x3x4_operator_subasg_Float16x3x4_arg.name = "arg"_c;
    Float16x3x4_operator_subasg_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_subasg_Float16x3x4.name = Float16x3x4_operator_subasg_Float16x3x4_name;
    Float16x3x4_operator_subasg_Float16x3x4.backendIndex = 1366;
    Float16x3x4_operator_subasg_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_subasg_Float16x3x4.parameters = Float16x3x4_operator_subasg_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_subasg_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_subasg_Float16x3x4)->signature = "operator-=(f16x3x4) f16x3x4"_c;
    Symbol::Resolved(&Float16x3x4_operator_subasg_Float16x3x4)->name = "operator-=(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_subasg_Float16x3x4)->nameWithVarNames = "operator-=(arg : f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_subasg_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator*= with Float16x3x4
    Float16x3x4_operator_mulasg_Float16x3x4_arg.name = "arg"_c;
    Float16x3x4_operator_mulasg_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_mulasg_Float16x3x4.name = Float16x3x4_operator_mulasg_Float16x3x4_name;
    Float16x3x4_operator_mulasg_Float16x3x4.backendIndex = 1367;
    Float16x3x4_operator_mulasg_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_mulasg_Float16x3x4.parameters = Float16x3x4_operator_mulasg_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_mulasg_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_mulasg_Float16x3x4)->signature = "operator*=(f16x3x4) f16x3x4"_c;
    Symbol::Resolved(&Float16x3x4_operator_mulasg_Float16x3x4)->name = "operator*=(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_mulasg_Float16x3x4)->nameWithVarNames = "operator*=(arg : f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_mulasg_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator* with Float16
    Float16x3x4_operator_scale_Float16_arg.name = "arg"_c;
    Float16x3x4_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x3x4_operator_scale_Float16.name = Float16x3x4_operator_scale_Float16_name;
    Float16x3x4_operator_scale_Float16.backendIndex = 1368;
    Float16x3x4_operator_scale_Float16.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_scale_Float16.parameters = Float16x3x4_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16)->signature = "operator*(f16) f16x3x4"_c;
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16)->returnTypeSymbol = &Float16x3x4Type;

    this->scope.symbolLookup = Float16x3x4_symbolLookup;
}
Float16x3x4 Float16x3x4Type;

/// operator[] with Int32
Variable Float16x4x4_operator_index_Int32_arg;
Function Float16x4x4_operator_index_Int32;
inline constexpr std::array Float16x4x4_operator_index_Int32_args = { &Float16x4x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x4x4_operator_index_UInt32_arg;
Function Float16x4x4_operator_index_UInt32;
inline constexpr std::array Float16x4x4_operator_index_UInt32_args = { &Float16x4x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x4x4_operator_index_Int16_arg;
Function Float16x4x4_operator_index_Int16;
inline constexpr std::array Float16x4x4_operator_index_Int16_args = { &Float16x4x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x4x4_operator_index_UInt16_arg;
Function Float16x4x4_operator_index_UInt16;
inline constexpr std::array Float16x4x4_operator_index_UInt16_args = { &Float16x4x4_operator_index_UInt16_arg };

/// operator* with Float16x4
Variable Float16x4x4_transform_Float16x4_vec;
Function Float16x4x4_transform_Float16x4;
inline constexpr std::array Float16x4x4_transform_Float16x4_args = { &Float16x4x4_transform_Float16x4_vec };

/// operator+ with Float16x4x4
Variable Float16x4x4_operator_add_Float16x4x4_arg;
Function Float16x4x4_operator_add_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_add_Float16x4x4_args = { &Float16x4x4_operator_add_Float16x4x4_arg };

/// operator- with Float16x4x4
Variable Float16x4x4_operator_sub_Float16x4x4_arg;
Function Float16x4x4_operator_sub_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_sub_Float16x4x4_args = { &Float16x4x4_operator_sub_Float16x4x4_arg };

/// operator* with Float16x4x4
Variable Float16x4x4_operator_mul_Float16x4x4_arg;
Function Float16x4x4_operator_mul_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_mul_Float16x4x4_args = { &Float16x4x4_operator_mul_Float16x4x4_arg };

/// operator+= with Float16x4x4
Variable Float16x4x4_operator_addasg_Float16x4x4_arg;
Function Float16x4x4_operator_addasg_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_addasg_Float16x4x4_args = { &Float16x4x4_operator_addasg_Float16x4x4_arg };

/// operator-= with Float16x4x4
Variable Float16x4x4_operator_subasg_Float16x4x4_arg;
Function Float16x4x4_operator_subasg_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_subasg_Float16x4x4_args = { &Float16x4x4_operator_subasg_Float16x4x4_arg };

/// operator*= with Float16x4x4
Variable Float16x4x4_operator_mulasg_Float16x4x4_arg;
Function Float16x4x4_operator_mulasg_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_mulasg_Float16x4x4_args = { &Float16x4x4_operator_mulasg_Float16x4x4_arg };

/// operator* with Float16
Variable Float16x4x4_operator_scale_Float16_arg;
Function Float16x4x4_operator_scale_Float16;
inline constexpr std::array Float16x4x4_operator_scale_Float16_args = { &Float16x4x4_operator_scale_Float16_arg };

static constexpr StaticMap<HashString, Symbol*, 24> Float16x4x4_symbolLookup = {
    std::pair{ "operator+=(f16x4x4)"_h, &Float16x4x4_operator_addasg_Float16x4x4 },
    std::pair{ "operator[](i16)"_h, &Float16x4x4_operator_index_Int16 },
    std::pair{ "operator-(f16x4x4)"_h, &Float16x4x4_operator_sub_Float16x4x4 },
    std::pair{ "operator-"_h, &Float16x4x4_operator_sub_Float16x4x4 },
    std::pair{ "operator+"_h, &Float16x4x4_operator_add_Float16x4x4 },
    std::pair{ "operator*"_h, &Float16x4x4_transform_Float16x4 },
    std::pair{ "operator*"_h, &Float16x4x4_operator_mul_Float16x4x4 },
    std::pair{ "operator*"_h, &Float16x4x4_operator_scale_Float16 },
    std::pair{ "operator*(f16x4)"_h, &Float16x4x4_transform_Float16x4 },
    std::pair{ "operator[](u32)"_h, &Float16x4x4_operator_index_UInt32 },
    std::pair{ "operator[](u16)"_h, &Float16x4x4_operator_index_UInt16 },
    std::pair{ "operator*(f16)"_h, &Float16x4x4_operator_scale_Float16 },
    std::pair{ "operator*=(f16x4x4)"_h, &Float16x4x4_operator_mulasg_Float16x4x4 },
    std::pair{ "operator[]"_h, &Float16x4x4_operator_index_Int32 },
    std::pair{ "operator[]"_h, &Float16x4x4_operator_index_UInt32 },
    std::pair{ "operator[]"_h, &Float16x4x4_operator_index_Int16 },
    std::pair{ "operator[]"_h, &Float16x4x4_operator_index_UInt16 },
    std::pair{ "operator-="_h, &Float16x4x4_operator_subasg_Float16x4x4 },
    std::pair{ "operator+="_h, &Float16x4x4_operator_addasg_Float16x4x4 },
    std::pair{ "operator*="_h, &Float16x4x4_operator_mulasg_Float16x4x4 },
    std::pair{ "operator+(f16x4x4)"_h, &Float16x4x4_operator_add_Float16x4x4 },
    std::pair{ "operator-=(f16x4x4)"_h, &Float16x4x4_operator_subasg_Float16x4x4 },
    std::pair{ "operator[](i32)"_h, &Float16x4x4_operator_index_Int32 },
    std::pair{ "operator*(f16x4x4)"_h, &Float16x4x4_operator_mul_Float16x4x4 }
    };

Float16x4x4::Float16x4x4()
{
    this->name = "f16x4x4"_c;
    this->columnSize = 4;
    this->rowSize = 4;
    this->byteSize = 32;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x4x4_operator_index_Int32_arg.name = "idx"_c;
    Float16x4x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x4x4_operator_index_Int32.name = Float16x4x4_operator_index_Int32_name;
    Float16x4x4_operator_index_Int32.backendIndex = 1372;
    Float16x4x4_operator_index_Int32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x4_operator_index_Int32.parameters = Float16x4x4_operator_index_Int32_args;
    Symbol::Resolved(&Float16x4x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x4x4_operator_index_Int32)->signature = "operator[](i32) f16x4"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_Int32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt32
    Float16x4x4_operator_index_UInt32_arg.name = "idx"_c;
    Float16x4x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x4x4_operator_index_UInt32.name = Float16x4x4_operator_index_UInt32_name;
    Float16x4x4_operator_index_UInt32.backendIndex = 1373;
    Float16x4x4_operator_index_UInt32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x4_operator_index_UInt32.parameters = Float16x4x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt32)->signature = "operator[](u32) f16x4"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with Int16
    Float16x4x4_operator_index_Int16_arg.name = "idx"_c;
    Float16x4x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x4x4_operator_index_Int16.name = Float16x4x4_operator_index_Int16_name;
    Float16x4x4_operator_index_Int16.backendIndex = 1374;
    Float16x4x4_operator_index_Int16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x4_operator_index_Int16.parameters = Float16x4x4_operator_index_Int16_args;
    Symbol::Resolved(&Float16x4x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4x4_operator_index_Int16)->signature = "operator[](i16) f16x4"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_Int16)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt16
    Float16x4x4_operator_index_UInt16_arg.name = "idx"_c;
    Float16x4x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x4x4_operator_index_UInt16.name = Float16x4x4_operator_index_UInt16_name;
    Float16x4x4_operator_index_UInt16.backendIndex = 1375;
    Float16x4x4_operator_index_UInt16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x4_operator_index_UInt16.parameters = Float16x4x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt16)->signature = "operator[](u16) f16x4"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Float16x4
    Float16x4x4_transform_Float16x4_vec.name = "vec"_c;
    Float16x4x4_transform_Float16x4_vec.type = Type::FullType{ Float16x4Type.name };
    Float16x4x4_transform_Float16x4.name = Float16x4x4_transform_Float16x4_name;
    Float16x4x4_transform_Float16x4.backendIndex = 1376;
    Float16x4x4_transform_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x4_transform_Float16x4.parameters = Float16x4x4_transform_Float16x4_args;
    Symbol::Resolved(&Float16x4x4_transform_Float16x4_vec)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4x4_transform_Float16x4)->signature = "operator*(f16x4) f16x4"_c;
    Symbol::Resolved(&Float16x4x4_transform_Float16x4)->name = "operator*(f16x4)"_c;
    Symbol::Resolved(&Float16x4x4_transform_Float16x4)->nameWithVarNames = "operator*(vec : f16x4)"_c;
    Symbol::Resolved(&Float16x4x4_transform_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator+ with Float16x4x4
    Float16x4x4_operator_add_Float16x4x4_arg.name = "arg"_c;
    Float16x4x4_operator_add_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_add_Float16x4x4.name = Float16x4x4_operator_add_Float16x4x4_name;
    Float16x4x4_operator_add_Float16x4x4.backendIndex = 1377;
    Float16x4x4_operator_add_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_add_Float16x4x4.parameters = Float16x4x4_operator_add_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_add_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_add_Float16x4x4)->signature = "operator+(f16x4x4) f16x4x4"_c;
    Symbol::Resolved(&Float16x4x4_operator_add_Float16x4x4)->name = "operator+(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_add_Float16x4x4)->nameWithVarNames = "operator+(arg : f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_add_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator- with Float16x4x4
    Float16x4x4_operator_sub_Float16x4x4_arg.name = "arg"_c;
    Float16x4x4_operator_sub_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_sub_Float16x4x4.name = Float16x4x4_operator_sub_Float16x4x4_name;
    Float16x4x4_operator_sub_Float16x4x4.backendIndex = 1378;
    Float16x4x4_operator_sub_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_sub_Float16x4x4.parameters = Float16x4x4_operator_sub_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_sub_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_sub_Float16x4x4)->signature = "operator-(f16x4x4) f16x4x4"_c;
    Symbol::Resolved(&Float16x4x4_operator_sub_Float16x4x4)->name = "operator-(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_sub_Float16x4x4)->nameWithVarNames = "operator-(arg : f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_sub_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator* with Float16x4x4
    Float16x4x4_operator_mul_Float16x4x4_arg.name = "arg"_c;
    Float16x4x4_operator_mul_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_mul_Float16x4x4.name = Float16x4x4_operator_mul_Float16x4x4_name;
    Float16x4x4_operator_mul_Float16x4x4.backendIndex = 1379;
    Float16x4x4_operator_mul_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_mul_Float16x4x4.parameters = Float16x4x4_operator_mul_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_mul_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_mul_Float16x4x4)->signature = "operator*(f16x4x4) f16x4x4"_c;
    Symbol::Resolved(&Float16x4x4_operator_mul_Float16x4x4)->name = "operator*(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_mul_Float16x4x4)->nameWithVarNames = "operator*(arg : f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_mul_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator+= with Float16x4x4
    Float16x4x4_operator_addasg_Float16x4x4_arg.name = "arg"_c;
    Float16x4x4_operator_addasg_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_addasg_Float16x4x4.name = Float16x4x4_operator_addasg_Float16x4x4_name;
    Float16x4x4_operator_addasg_Float16x4x4.backendIndex = 1380;
    Float16x4x4_operator_addasg_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_addasg_Float16x4x4.parameters = Float16x4x4_operator_addasg_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_addasg_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_addasg_Float16x4x4)->signature = "operator+=(f16x4x4) f16x4x4"_c;
    Symbol::Resolved(&Float16x4x4_operator_addasg_Float16x4x4)->name = "operator+=(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_addasg_Float16x4x4)->nameWithVarNames = "operator+=(arg : f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_addasg_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator-= with Float16x4x4
    Float16x4x4_operator_subasg_Float16x4x4_arg.name = "arg"_c;
    Float16x4x4_operator_subasg_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_subasg_Float16x4x4.name = Float16x4x4_operator_subasg_Float16x4x4_name;
    Float16x4x4_operator_subasg_Float16x4x4.backendIndex = 1381;
    Float16x4x4_operator_subasg_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_subasg_Float16x4x4.parameters = Float16x4x4_operator_subasg_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_subasg_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_subasg_Float16x4x4)->signature = "operator-=(f16x4x4) f16x4x4"_c;
    Symbol::Resolved(&Float16x4x4_operator_subasg_Float16x4x4)->name = "operator-=(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_subasg_Float16x4x4)->nameWithVarNames = "operator-=(arg : f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_subasg_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator*= with Float16x4x4
    Float16x4x4_operator_mulasg_Float16x4x4_arg.name = "arg"_c;
    Float16x4x4_operator_mulasg_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_mulasg_Float16x4x4.name = Float16x4x4_operator_mulasg_Float16x4x4_name;
    Float16x4x4_operator_mulasg_Float16x4x4.backendIndex = 1382;
    Float16x4x4_operator_mulasg_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_mulasg_Float16x4x4.parameters = Float16x4x4_operator_mulasg_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_mulasg_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_mulasg_Float16x4x4)->signature = "operator*=(f16x4x4) f16x4x4"_c;
    Symbol::Resolved(&Float16x4x4_operator_mulasg_Float16x4x4)->name = "operator*=(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_mulasg_Float16x4x4)->nameWithVarNames = "operator*=(arg : f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_mulasg_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator* with Float16
    Float16x4x4_operator_scale_Float16_arg.name = "arg"_c;
    Float16x4x4_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x4x4_operator_scale_Float16.name = Float16x4x4_operator_scale_Float16_name;
    Float16x4x4_operator_scale_Float16.backendIndex = 1383;
    Float16x4x4_operator_scale_Float16.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_scale_Float16.parameters = Float16x4x4_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16)->signature = "operator*(f16) f16x4x4"_c;
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16)->returnTypeSymbol = &Float16x4x4Type;

    this->scope.symbolLookup = Float16x4x4_symbolLookup;
}
Float16x4x4 Float16x4x4Type;

Texture1D::Texture1D()
{
    this->name = "texture1D"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture1D;
    this->builtin = true;
};
Texture1D Texture1DType;

Texture1DArray::Texture1DArray()
{
    this->name = "texture1DArray"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture1D;
    this->builtin = true;
};
Texture1DArray Texture1DArrayType;

Texture2D::Texture2D()
{
    this->name = "texture2D"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture2D;
    this->builtin = true;
};
Texture2D Texture2DType;

Texture2DMS::Texture2DMS()
{
    this->name = "texture2DMS"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture2D;
    this->builtin = true;
};
Texture2DMS Texture2DMSType;

Texture2DMSArray::Texture2DMSArray()
{
    this->name = "texture2DMSArray"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture2D;
    this->builtin = true;
};
Texture2DMSArray Texture2DMSArrayType;

Texture2DArray::Texture2DArray()
{
    this->name = "texture2DArray"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture2D;
    this->builtin = true;
};
Texture2DArray Texture2DArrayType;

Texture3D::Texture3D()
{
    this->name = "texture3D"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture3D;
    this->builtin = true;
};
Texture3D Texture3DType;

TextureCube::TextureCube()
{
    this->name = "textureCube"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::TextureCube;
    this->builtin = true;
};
TextureCube TextureCubeType;

TextureCubeArray::TextureCubeArray()
{
    this->name = "textureCubeArray"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::TextureCube;
    this->builtin = true;
};
TextureCubeArray TextureCubeArrayType;

SampledTexture1D::SampledTexture1D()
{
    this->name = "textureSampled1D"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTexture1D;
    this->builtin = true;
};
SampledTexture1D SampledTexture1DType;

SampledTexture1DArray::SampledTexture1DArray()
{
    this->name = "textureSampled1DArray"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTexture1D;
    this->builtin = true;
};
SampledTexture1DArray SampledTexture1DArrayType;

SampledTexture2D::SampledTexture2D()
{
    this->name = "textureSampled2D"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTexture2D;
    this->builtin = true;
};
SampledTexture2D SampledTexture2DType;

SampledTexture2DMS::SampledTexture2DMS()
{
    this->name = "textureSampled2DMS"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTexture2D;
    this->builtin = true;
};
SampledTexture2DMS SampledTexture2DMSType;

SampledTexture2DMSArray::SampledTexture2DMSArray()
{
    this->name = "textureSampled2DMSArray"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTexture2D;
    this->builtin = true;
};
SampledTexture2DMSArray SampledTexture2DMSArrayType;

SampledTexture2DArray::SampledTexture2DArray()
{
    this->name = "textureSampled2DArray"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTexture2D;
    this->builtin = true;
};
SampledTexture2DArray SampledTexture2DArrayType;

SampledTexture3D::SampledTexture3D()
{
    this->name = "textureSampled3D"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTexture3D;
    this->builtin = true;
};
SampledTexture3D SampledTexture3DType;

SampledTextureCube::SampledTextureCube()
{
    this->name = "textureSampledCube"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTextureCube;
    this->builtin = true;
};
SampledTextureCube SampledTextureCubeType;

SampledTextureCubeArray::SampledTextureCubeArray()
{
    this->name = "textureSampledCubeArray"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTextureCube;
    this->builtin = true;
};
SampledTextureCubeArray SampledTextureCubeArrayType;

PixelCache::PixelCache()
{
    this->name = "pixelCache"_c;
    this->category = Type::PixelCacheCategory;
    this->baseType = TypeCode::PixelCache;
    this->builtin = true;
};
PixelCache PixelCacheType;

PixelCacheMS::PixelCacheMS()
{
    this->name = "pixelCacheMS"_c;
    this->category = Type::PixelCacheCategory;
    this->baseType = TypeCode::PixelCacheMS;
    this->builtin = true;
};
PixelCacheMS PixelCacheMSType;

Sampler::Sampler()
{
    this->name = "sampler"_c;
    this->category = Type::SamplerCategory;
    this->baseType = TypeCode::Sampler;
    this->builtin = true;
};
Sampler SamplerType;

FunctionPtr::FunctionPtr()
{
    this->name = "Function"_c;
    this->builtin = true;
};
FunctionPtr FunctionPtrType;

AccelerationStructure::AccelerationStructure()
{
    this->name = "accelerationStructure"_c;
    this->category = Type::AccelerationStructureCategory;
    this->baseType = TypeCode::AccelerationStructure;
    this->builtin = true;
};
AccelerationStructure AccelerationStructureType;

Void::Void()
{
    this->name = "void"_c;
    this->category = Type::VoidCategory;
    this->baseType = TypeCode::Void;
    this->builtin = true;
};
Void VoidType;

EnumExpression CompareModeLess;
EnumExpression CompareModeLessEqual;
EnumExpression CompareModeGreater;
EnumExpression CompareModeGreaterEqual;
EnumExpression CompareModeEqual;
EnumExpression CompareModeNotEqual;
EnumExpression CompareModeAlways;
EnumExpression CompareModeNever;
CompareMode::CompareMode()
{
    this->name = "CompareMode"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    CompareModeLess.value = CompareModeLess_value;
    CompareModeLess.type = Type::FullType{ CompareModeType.name, true };
    CompareModeLess.underlyingType = Type::FullType{ UInt32Type.name };
    CompareModeLess.thisResolved->type = this;
    CompareModeLessEqual.value = CompareModeLessEqual_value;
    CompareModeLessEqual.type = Type::FullType{ CompareModeType.name, true };
    CompareModeLessEqual.underlyingType = Type::FullType{ UInt32Type.name };
    CompareModeLessEqual.thisResolved->type = this;
    CompareModeGreater.value = CompareModeGreater_value;
    CompareModeGreater.type = Type::FullType{ CompareModeType.name, true };
    CompareModeGreater.underlyingType = Type::FullType{ UInt32Type.name };
    CompareModeGreater.thisResolved->type = this;
    CompareModeGreaterEqual.value = CompareModeGreaterEqual_value;
    CompareModeGreaterEqual.type = Type::FullType{ CompareModeType.name, true };
    CompareModeGreaterEqual.underlyingType = Type::FullType{ UInt32Type.name };
    CompareModeGreaterEqual.thisResolved->type = this;
    CompareModeEqual.value = CompareModeEqual_value;
    CompareModeEqual.type = Type::FullType{ CompareModeType.name, true };
    CompareModeEqual.underlyingType = Type::FullType{ UInt32Type.name };
    CompareModeEqual.thisResolved->type = this;
    CompareModeNotEqual.value = CompareModeNotEqual_value;
    CompareModeNotEqual.type = Type::FullType{ CompareModeType.name, true };
    CompareModeNotEqual.underlyingType = Type::FullType{ UInt32Type.name };
    CompareModeNotEqual.thisResolved->type = this;
    CompareModeAlways.value = CompareModeAlways_value;
    CompareModeAlways.type = Type::FullType{ CompareModeType.name, true };
    CompareModeAlways.underlyingType = Type::FullType{ UInt32Type.name };
    CompareModeAlways.thisResolved->type = this;
    CompareModeNever.value = CompareModeNever_value;
    CompareModeNever.type = Type::FullType{ CompareModeType.name, true };
    CompareModeNever.underlyingType = Type::FullType{ UInt32Type.name };
    CompareModeNever.thisResolved->type = this;
    this->labels = std::array{ "Less"_c, "LessEqual"_c, "Greater"_c, "GreaterEqual"_c, "Equal"_c, "NotEqual"_c, "Always"_c, "Never"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 10> {
        std::pair{ "NotEqual"_h, &CompareModeNotEqual },
        std::pair{ "Equal"_h, &CompareModeEqual },
        std::pair{ "Always"_h, &CompareModeAlways },
        std::pair{ "Never"_h, &CompareModeNever },
        std::pair{ "Greater"_h, &CompareModeGreater },
        std::pair{ "GreaterEqual"_h, &CompareModeGreaterEqual },
        std::pair{ "Less"_h, &CompareModeLess },
        std::pair{ "operator=="_h, &CompareModeType.eqOp },
        std::pair{ "operator!="_h, &CompareModeType.neqOp },
        std::pair{ "LessEqual"_h, &CompareModeLessEqual }
    };
};
CompareMode CompareModeType;

EnumExpression StencilOpKeep;
EnumExpression StencilOpZero;
EnumExpression StencilOpReplace;
EnumExpression StencilOpIncrement;
EnumExpression StencilOpDecrement;
EnumExpression StencilOpInvert;
EnumExpression StencilOpIncrementWrap;
EnumExpression StencilOpDecrementWrap;
StencilOp::StencilOp()
{
    this->name = "StencilOp"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    StencilOpKeep.value = StencilOpKeep_value;
    StencilOpKeep.type = Type::FullType{ StencilOpType.name, true };
    StencilOpKeep.underlyingType = Type::FullType{ UInt32Type.name };
    StencilOpKeep.thisResolved->type = this;
    StencilOpZero.value = StencilOpZero_value;
    StencilOpZero.type = Type::FullType{ StencilOpType.name, true };
    StencilOpZero.underlyingType = Type::FullType{ UInt32Type.name };
    StencilOpZero.thisResolved->type = this;
    StencilOpReplace.value = StencilOpReplace_value;
    StencilOpReplace.type = Type::FullType{ StencilOpType.name, true };
    StencilOpReplace.underlyingType = Type::FullType{ UInt32Type.name };
    StencilOpReplace.thisResolved->type = this;
    StencilOpIncrement.value = StencilOpIncrement_value;
    StencilOpIncrement.type = Type::FullType{ StencilOpType.name, true };
    StencilOpIncrement.underlyingType = Type::FullType{ UInt32Type.name };
    StencilOpIncrement.thisResolved->type = this;
    StencilOpDecrement.value = StencilOpDecrement_value;
    StencilOpDecrement.type = Type::FullType{ StencilOpType.name, true };
    StencilOpDecrement.underlyingType = Type::FullType{ UInt32Type.name };
    StencilOpDecrement.thisResolved->type = this;
    StencilOpInvert.value = StencilOpInvert_value;
    StencilOpInvert.type = Type::FullType{ StencilOpType.name, true };
    StencilOpInvert.underlyingType = Type::FullType{ UInt32Type.name };
    StencilOpInvert.thisResolved->type = this;
    StencilOpIncrementWrap.value = StencilOpIncrementWrap_value;
    StencilOpIncrementWrap.type = Type::FullType{ StencilOpType.name, true };
    StencilOpIncrementWrap.underlyingType = Type::FullType{ UInt32Type.name };
    StencilOpIncrementWrap.thisResolved->type = this;
    StencilOpDecrementWrap.value = StencilOpDecrementWrap_value;
    StencilOpDecrementWrap.type = Type::FullType{ StencilOpType.name, true };
    StencilOpDecrementWrap.underlyingType = Type::FullType{ UInt32Type.name };
    StencilOpDecrementWrap.thisResolved->type = this;
    this->labels = std::array{ "Keep"_c, "Zero"_c, "Replace"_c, "Increment"_c, "Decrement"_c, "Invert"_c, "IncrementWrap"_c, "DecrementWrap"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 10> {
        std::pair{ "Decrement"_h, &StencilOpDecrement },
        std::pair{ "DecrementWrap"_h, &StencilOpDecrementWrap },
        std::pair{ "Replace"_h, &StencilOpReplace },
        std::pair{ "Zero"_h, &StencilOpZero },
        std::pair{ "Increment"_h, &StencilOpIncrement },
        std::pair{ "Invert"_h, &StencilOpInvert },
        std::pair{ "Keep"_h, &StencilOpKeep },
        std::pair{ "operator=="_h, &StencilOpType.eqOp },
        std::pair{ "operator!="_h, &StencilOpType.neqOp },
        std::pair{ "IncrementWrap"_h, &StencilOpIncrementWrap }
    };
};
StencilOp StencilOpType;

EnumExpression ExecutionScopeGlobal;
EnumExpression ExecutionScopeDevice;
EnumExpression ExecutionScopeWorkgroup;
EnumExpression ExecutionScopeSubgroup;
EnumExpression ExecutionScopeInvocation;
EnumExpression ExecutionScopeQueue;
ExecutionScope::ExecutionScope()
{
    this->name = "ExecutionScope"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    ExecutionScopeGlobal.value = ExecutionScopeGlobal_value;
    ExecutionScopeGlobal.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeGlobal.underlyingType = Type::FullType{ UInt32Type.name };
    ExecutionScopeGlobal.thisResolved->type = this;
    ExecutionScopeDevice.value = ExecutionScopeDevice_value;
    ExecutionScopeDevice.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeDevice.underlyingType = Type::FullType{ UInt32Type.name };
    ExecutionScopeDevice.thisResolved->type = this;
    ExecutionScopeWorkgroup.value = ExecutionScopeWorkgroup_value;
    ExecutionScopeWorkgroup.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeWorkgroup.underlyingType = Type::FullType{ UInt32Type.name };
    ExecutionScopeWorkgroup.thisResolved->type = this;
    ExecutionScopeSubgroup.value = ExecutionScopeSubgroup_value;
    ExecutionScopeSubgroup.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeSubgroup.underlyingType = Type::FullType{ UInt32Type.name };
    ExecutionScopeSubgroup.thisResolved->type = this;
    ExecutionScopeInvocation.value = ExecutionScopeInvocation_value;
    ExecutionScopeInvocation.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeInvocation.underlyingType = Type::FullType{ UInt32Type.name };
    ExecutionScopeInvocation.thisResolved->type = this;
    ExecutionScopeQueue.value = ExecutionScopeQueue_value;
    ExecutionScopeQueue.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeQueue.underlyingType = Type::FullType{ UInt32Type.name };
    ExecutionScopeQueue.thisResolved->type = this;
    this->labels = std::array{ "Global"_c, "Device"_c, "Workgroup"_c, "Subgroup"_c, "Invocation"_c, "Queue"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 8> {
        std::pair{ "Device"_h, &ExecutionScopeDevice },
        std::pair{ "Global"_h, &ExecutionScopeGlobal },
        std::pair{ "Subgroup"_h, &ExecutionScopeSubgroup },
        std::pair{ "Invocation"_h, &ExecutionScopeInvocation },
        std::pair{ "Workgroup"_h, &ExecutionScopeWorkgroup },
        std::pair{ "Queue"_h, &ExecutionScopeQueue },
        std::pair{ "operator=="_h, &ExecutionScopeType.eqOp },
        std::pair{ "operator!="_h, &ExecutionScopeType.neqOp }
    };
};
ExecutionScope ExecutionScopeType;

EnumExpression MemorySemanticsAcquire;
EnumExpression MemorySemanticsRelease;
EnumExpression MemorySemanticsAcquireRelease;
EnumExpression MemorySemanticsSequentiallyConsistent;
EnumExpression MemorySemanticsRelaxed;
MemorySemantics::MemorySemantics()
{
    this->name = "MemorySemantics"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    MemorySemanticsAcquire.value = MemorySemanticsAcquire_value;
    MemorySemanticsAcquire.type = Type::FullType{ MemorySemanticsType.name, true };
    MemorySemanticsAcquire.underlyingType = Type::FullType{ UInt32Type.name };
    MemorySemanticsAcquire.thisResolved->type = this;
    MemorySemanticsRelease.value = MemorySemanticsRelease_value;
    MemorySemanticsRelease.type = Type::FullType{ MemorySemanticsType.name, true };
    MemorySemanticsRelease.underlyingType = Type::FullType{ UInt32Type.name };
    MemorySemanticsRelease.thisResolved->type = this;
    MemorySemanticsAcquireRelease.value = MemorySemanticsAcquireRelease_value;
    MemorySemanticsAcquireRelease.type = Type::FullType{ MemorySemanticsType.name, true };
    MemorySemanticsAcquireRelease.underlyingType = Type::FullType{ UInt32Type.name };
    MemorySemanticsAcquireRelease.thisResolved->type = this;
    MemorySemanticsSequentiallyConsistent.value = MemorySemanticsSequentiallyConsistent_value;
    MemorySemanticsSequentiallyConsistent.type = Type::FullType{ MemorySemanticsType.name, true };
    MemorySemanticsSequentiallyConsistent.underlyingType = Type::FullType{ UInt32Type.name };
    MemorySemanticsSequentiallyConsistent.thisResolved->type = this;
    MemorySemanticsRelaxed.value = MemorySemanticsRelaxed_value;
    MemorySemanticsRelaxed.type = Type::FullType{ MemorySemanticsType.name, true };
    MemorySemanticsRelaxed.underlyingType = Type::FullType{ UInt32Type.name };
    MemorySemanticsRelaxed.thisResolved->type = this;
    this->labels = std::array{ "Acquire"_c, "Release"_c, "AcquireRelease"_c, "SequentiallyConsistent"_c, "Relaxed"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 7> {
        std::pair{ "AcquireRelease"_h, &MemorySemanticsAcquireRelease },
        std::pair{ "SequentiallyConsistent"_h, &MemorySemanticsSequentiallyConsistent },
        std::pair{ "Release"_h, &MemorySemanticsRelease },
        std::pair{ "Acquire"_h, &MemorySemanticsAcquire },
        std::pair{ "Relaxed"_h, &MemorySemanticsRelaxed },
        std::pair{ "operator=="_h, &MemorySemanticsType.eqOp },
        std::pair{ "operator!="_h, &MemorySemanticsType.neqOp }
    };
};
MemorySemantics MemorySemanticsType;

EnumExpression RasterizationModeFill;
EnumExpression RasterizationModeLine;
EnumExpression RasterizationModePoint;
RasterizationMode::RasterizationMode()
{
    this->name = "RasterizationMode"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    RasterizationModeFill.value = RasterizationModeFill_value;
    RasterizationModeFill.type = Type::FullType{ RasterizationModeType.name, true };
    RasterizationModeFill.underlyingType = Type::FullType{ UInt32Type.name };
    RasterizationModeFill.thisResolved->type = this;
    RasterizationModeLine.value = RasterizationModeLine_value;
    RasterizationModeLine.type = Type::FullType{ RasterizationModeType.name, true };
    RasterizationModeLine.underlyingType = Type::FullType{ UInt32Type.name };
    RasterizationModeLine.thisResolved->type = this;
    RasterizationModePoint.value = RasterizationModePoint_value;
    RasterizationModePoint.type = Type::FullType{ RasterizationModeType.name, true };
    RasterizationModePoint.underlyingType = Type::FullType{ UInt32Type.name };
    RasterizationModePoint.thisResolved->type = this;
    this->labels = std::array{ "Fill"_c, "Line"_c, "Point"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 5> {
        std::pair{ "Line"_h, &RasterizationModeLine },
        std::pair{ "Point"_h, &RasterizationModePoint },
        std::pair{ "Fill"_h, &RasterizationModeFill },
        std::pair{ "operator=="_h, &RasterizationModeType.eqOp },
        std::pair{ "operator!="_h, &RasterizationModeType.neqOp }
    };
};
RasterizationMode RasterizationModeType;

EnumExpression CullFaceNone;
EnumExpression CullFaceFront;
EnumExpression CullFaceBack;
EnumExpression CullFaceFrontAndBack;
CullFace::CullFace()
{
    this->name = "CullFace"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    CullFaceNone.value = CullFaceNone_value;
    CullFaceNone.type = Type::FullType{ CullFaceType.name, true };
    CullFaceNone.underlyingType = Type::FullType{ UInt32Type.name };
    CullFaceNone.thisResolved->type = this;
    CullFaceFront.value = CullFaceFront_value;
    CullFaceFront.type = Type::FullType{ CullFaceType.name, true };
    CullFaceFront.underlyingType = Type::FullType{ UInt32Type.name };
    CullFaceFront.thisResolved->type = this;
    CullFaceBack.value = CullFaceBack_value;
    CullFaceBack.type = Type::FullType{ CullFaceType.name, true };
    CullFaceBack.underlyingType = Type::FullType{ UInt32Type.name };
    CullFaceBack.thisResolved->type = this;
    CullFaceFrontAndBack.value = CullFaceFrontAndBack_value;
    CullFaceFrontAndBack.type = Type::FullType{ CullFaceType.name, true };
    CullFaceFrontAndBack.underlyingType = Type::FullType{ UInt32Type.name };
    CullFaceFrontAndBack.thisResolved->type = this;
    this->labels = std::array{ "None"_c, "Front"_c, "Back"_c, "FrontAndBack"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 6> {
        std::pair{ "Front"_h, &CullFaceFront },
        std::pair{ "None"_h, &CullFaceNone },
        std::pair{ "Back"_h, &CullFaceBack },
        std::pair{ "operator=="_h, &CullFaceType.eqOp },
        std::pair{ "operator!="_h, &CullFaceType.neqOp },
        std::pair{ "FrontAndBack"_h, &CullFaceFrontAndBack }
    };
};
CullFace CullFaceType;

EnumExpression WindingOrderClockwise;
EnumExpression WindingOrderCounterClockwise;
WindingOrder::WindingOrder()
{
    this->name = "WindingOrder"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    WindingOrderClockwise.value = WindingOrderClockwise_value;
    WindingOrderClockwise.type = Type::FullType{ WindingOrderType.name, true };
    WindingOrderClockwise.underlyingType = Type::FullType{ UInt32Type.name };
    WindingOrderClockwise.thisResolved->type = this;
    WindingOrderCounterClockwise.value = WindingOrderCounterClockwise_value;
    WindingOrderCounterClockwise.type = Type::FullType{ WindingOrderType.name, true };
    WindingOrderCounterClockwise.underlyingType = Type::FullType{ UInt32Type.name };
    WindingOrderCounterClockwise.thisResolved->type = this;
    this->labels = std::array{ "Clockwise"_c, "CounterClockwise"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 4> {
        std::pair{ "CounterClockwise"_h, &WindingOrderCounterClockwise },
        std::pair{ "operator=="_h, &WindingOrderType.eqOp },
        std::pair{ "operator!="_h, &WindingOrderType.neqOp },
        std::pair{ "Clockwise"_h, &WindingOrderClockwise }
    };
};
WindingOrder WindingOrderType;

EnumExpression LogicOpAnd;
EnumExpression LogicOpAndInverted;
EnumExpression LogicOpAndReverse;
EnumExpression LogicOpClear;
EnumExpression LogicOpCopy;
EnumExpression LogicOpCopyInverted;
EnumExpression LogicOpEquivalence;
EnumExpression LogicOpInvert;
EnumExpression LogicOpNand;
EnumExpression LogicOpNo;
EnumExpression LogicOpNor;
EnumExpression LogicOpOr;
EnumExpression LogicOpOrInverted;
EnumExpression LogicOpOrReverse;
EnumExpression LogicOpSet;
EnumExpression LogicOpXor;
LogicOp::LogicOp()
{
    this->name = "LogicOp"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    LogicOpAnd.value = LogicOpAnd_value;
    LogicOpAnd.type = Type::FullType{ LogicOpType.name, true };
    LogicOpAnd.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpAnd.thisResolved->type = this;
    LogicOpAndInverted.value = LogicOpAndInverted_value;
    LogicOpAndInverted.type = Type::FullType{ LogicOpType.name, true };
    LogicOpAndInverted.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpAndInverted.thisResolved->type = this;
    LogicOpAndReverse.value = LogicOpAndReverse_value;
    LogicOpAndReverse.type = Type::FullType{ LogicOpType.name, true };
    LogicOpAndReverse.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpAndReverse.thisResolved->type = this;
    LogicOpClear.value = LogicOpClear_value;
    LogicOpClear.type = Type::FullType{ LogicOpType.name, true };
    LogicOpClear.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpClear.thisResolved->type = this;
    LogicOpCopy.value = LogicOpCopy_value;
    LogicOpCopy.type = Type::FullType{ LogicOpType.name, true };
    LogicOpCopy.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpCopy.thisResolved->type = this;
    LogicOpCopyInverted.value = LogicOpCopyInverted_value;
    LogicOpCopyInverted.type = Type::FullType{ LogicOpType.name, true };
    LogicOpCopyInverted.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpCopyInverted.thisResolved->type = this;
    LogicOpEquivalence.value = LogicOpEquivalence_value;
    LogicOpEquivalence.type = Type::FullType{ LogicOpType.name, true };
    LogicOpEquivalence.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpEquivalence.thisResolved->type = this;
    LogicOpInvert.value = LogicOpInvert_value;
    LogicOpInvert.type = Type::FullType{ LogicOpType.name, true };
    LogicOpInvert.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpInvert.thisResolved->type = this;
    LogicOpNand.value = LogicOpNand_value;
    LogicOpNand.type = Type::FullType{ LogicOpType.name, true };
    LogicOpNand.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpNand.thisResolved->type = this;
    LogicOpNo.value = LogicOpNo_value;
    LogicOpNo.type = Type::FullType{ LogicOpType.name, true };
    LogicOpNo.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpNo.thisResolved->type = this;
    LogicOpNor.value = LogicOpNor_value;
    LogicOpNor.type = Type::FullType{ LogicOpType.name, true };
    LogicOpNor.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpNor.thisResolved->type = this;
    LogicOpOr.value = LogicOpOr_value;
    LogicOpOr.type = Type::FullType{ LogicOpType.name, true };
    LogicOpOr.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpOr.thisResolved->type = this;
    LogicOpOrInverted.value = LogicOpOrInverted_value;
    LogicOpOrInverted.type = Type::FullType{ LogicOpType.name, true };
    LogicOpOrInverted.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpOrInverted.thisResolved->type = this;
    LogicOpOrReverse.value = LogicOpOrReverse_value;
    LogicOpOrReverse.type = Type::FullType{ LogicOpType.name, true };
    LogicOpOrReverse.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpOrReverse.thisResolved->type = this;
    LogicOpSet.value = LogicOpSet_value;
    LogicOpSet.type = Type::FullType{ LogicOpType.name, true };
    LogicOpSet.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpSet.thisResolved->type = this;
    LogicOpXor.value = LogicOpXor_value;
    LogicOpXor.type = Type::FullType{ LogicOpType.name, true };
    LogicOpXor.underlyingType = Type::FullType{ UInt32Type.name };
    LogicOpXor.thisResolved->type = this;
    this->labels = std::array{ "And"_c, "AndInverted"_c, "AndReverse"_c, "Clear"_c, "Copy"_c, "CopyInverted"_c, "Equivalence"_c, "Invert"_c, "Nand"_c, "No"_c, "Nor"_c, "Or"_c, "OrInverted"_c, "OrReverse"_c, "Set"_c, "Xor"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 18> {
        std::pair{ "Or"_h, &LogicOpOr },
        std::pair{ "No"_h, &LogicOpNo },
        std::pair{ "OrReverse"_h, &LogicOpOrReverse },
        std::pair{ "Copy"_h, &LogicOpCopy },
        std::pair{ "Nor"_h, &LogicOpNor },
        std::pair{ "AndInverted"_h, &LogicOpAndInverted },
        std::pair{ "Invert"_h, &LogicOpInvert },
        std::pair{ "Set"_h, &LogicOpSet },
        std::pair{ "Clear"_h, &LogicOpClear },
        std::pair{ "CopyInverted"_h, &LogicOpCopyInverted },
        std::pair{ "Xor"_h, &LogicOpXor },
        std::pair{ "AndReverse"_h, &LogicOpAndReverse },
        std::pair{ "operator=="_h, &LogicOpType.eqOp },
        std::pair{ "operator!="_h, &LogicOpType.neqOp },
        std::pair{ "Nand"_h, &LogicOpNand },
        std::pair{ "OrInverted"_h, &LogicOpOrInverted },
        std::pair{ "And"_h, &LogicOpAnd },
        std::pair{ "Equivalence"_h, &LogicOpEquivalence }
    };
};
LogicOp LogicOpType;

EnumExpression BlendFactorZero;
EnumExpression BlendFactorOne;
EnumExpression BlendFactorSourceColor;
EnumExpression BlendFactorOneMinusSourceColor;
EnumExpression BlendFactorSourceAlpha;
EnumExpression BlendFactorOneMinusSourceAlpha;
EnumExpression BlendFactorDestinationColor;
EnumExpression BlendFactorOneMinusDestinationColor;
EnumExpression BlendFactorDestinationAlpha;
EnumExpression BlendFactorOneMinusDestinationAlpha;
EnumExpression BlendFactorConstantColor;
EnumExpression BlendFactorOneMinusConstantColor;
EnumExpression BlendFactorConstantAlpha;
EnumExpression BlendFactorOneMinusConstantAlpha;
BlendFactor::BlendFactor()
{
    this->name = "BlendFactor"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    BlendFactorZero.value = BlendFactorZero_value;
    BlendFactorZero.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorZero.underlyingType = Type::FullType{ UInt32Type.name };
    BlendFactorZero.thisResolved->type = this;
    BlendFactorOne.value = BlendFactorOne_value;
    BlendFactorOne.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOne.underlyingType = Type::FullType{ UInt32Type.name };
    BlendFactorOne.thisResolved->type = this;
    BlendFactorSourceColor.value = BlendFactorSourceColor_value;
    BlendFactorSourceColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorSourceColor.underlyingType = Type::FullType{ UInt32Type.name };
    BlendFactorSourceColor.thisResolved->type = this;
    BlendFactorOneMinusSourceColor.value = BlendFactorOneMinusSourceColor_value;
    BlendFactorOneMinusSourceColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusSourceColor.underlyingType = Type::FullType{ UInt32Type.name };
    BlendFactorOneMinusSourceColor.thisResolved->type = this;
    BlendFactorSourceAlpha.value = BlendFactorSourceAlpha_value;
    BlendFactorSourceAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorSourceAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    BlendFactorSourceAlpha.thisResolved->type = this;
    BlendFactorOneMinusSourceAlpha.value = BlendFactorOneMinusSourceAlpha_value;
    BlendFactorOneMinusSourceAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusSourceAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    BlendFactorOneMinusSourceAlpha.thisResolved->type = this;
    BlendFactorDestinationColor.value = BlendFactorDestinationColor_value;
    BlendFactorDestinationColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorDestinationColor.underlyingType = Type::FullType{ UInt32Type.name };
    BlendFactorDestinationColor.thisResolved->type = this;
    BlendFactorOneMinusDestinationColor.value = BlendFactorOneMinusDestinationColor_value;
    BlendFactorOneMinusDestinationColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusDestinationColor.underlyingType = Type::FullType{ UInt32Type.name };
    BlendFactorOneMinusDestinationColor.thisResolved->type = this;
    BlendFactorDestinationAlpha.value = BlendFactorDestinationAlpha_value;
    BlendFactorDestinationAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorDestinationAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    BlendFactorDestinationAlpha.thisResolved->type = this;
    BlendFactorOneMinusDestinationAlpha.value = BlendFactorOneMinusDestinationAlpha_value;
    BlendFactorOneMinusDestinationAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusDestinationAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    BlendFactorOneMinusDestinationAlpha.thisResolved->type = this;
    BlendFactorConstantColor.value = BlendFactorConstantColor_value;
    BlendFactorConstantColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorConstantColor.underlyingType = Type::FullType{ UInt32Type.name };
    BlendFactorConstantColor.thisResolved->type = this;
    BlendFactorOneMinusConstantColor.value = BlendFactorOneMinusConstantColor_value;
    BlendFactorOneMinusConstantColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusConstantColor.underlyingType = Type::FullType{ UInt32Type.name };
    BlendFactorOneMinusConstantColor.thisResolved->type = this;
    BlendFactorConstantAlpha.value = BlendFactorConstantAlpha_value;
    BlendFactorConstantAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorConstantAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    BlendFactorConstantAlpha.thisResolved->type = this;
    BlendFactorOneMinusConstantAlpha.value = BlendFactorOneMinusConstantAlpha_value;
    BlendFactorOneMinusConstantAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusConstantAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    BlendFactorOneMinusConstantAlpha.thisResolved->type = this;
    this->labels = std::array{ "Zero"_c, "One"_c, "SourceColor"_c, "OneMinusSourceColor"_c, "SourceAlpha"_c, "OneMinusSourceAlpha"_c, "DestinationColor"_c, "OneMinusDestinationColor"_c, "DestinationAlpha"_c, "OneMinusDestinationAlpha"_c, "ConstantColor"_c, "OneMinusConstantColor"_c, "ConstantAlpha"_c, "OneMinusConstantAlpha"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 16> {
        std::pair{ "ConstantAlpha"_h, &BlendFactorConstantAlpha },
        std::pair{ "DestinationAlpha"_h, &BlendFactorDestinationAlpha },
        std::pair{ "OneMinusDestinationColor"_h, &BlendFactorOneMinusDestinationColor },
        std::pair{ "One"_h, &BlendFactorOne },
        std::pair{ "Zero"_h, &BlendFactorZero },
        std::pair{ "OneMinusSourceAlpha"_h, &BlendFactorOneMinusSourceAlpha },
        std::pair{ "SourceAlpha"_h, &BlendFactorSourceAlpha },
        std::pair{ "OneMinusConstantColor"_h, &BlendFactorOneMinusConstantColor },
        std::pair{ "OneMinusConstantAlpha"_h, &BlendFactorOneMinusConstantAlpha },
        std::pair{ "DestinationColor"_h, &BlendFactorDestinationColor },
        std::pair{ "OneMinusDestinationAlpha"_h, &BlendFactorOneMinusDestinationAlpha },
        std::pair{ "OneMinusSourceColor"_h, &BlendFactorOneMinusSourceColor },
        std::pair{ "operator=="_h, &BlendFactorType.eqOp },
        std::pair{ "operator!="_h, &BlendFactorType.neqOp },
        std::pair{ "SourceColor"_h, &BlendFactorSourceColor },
        std::pair{ "ConstantColor"_h, &BlendFactorConstantColor }
    };
};
BlendFactor BlendFactorType;

EnumExpression BlendOperationAdd;
EnumExpression BlendOperationSubtract;
EnumExpression BlendOperationReverseSubtract;
EnumExpression BlendOperationMin;
EnumExpression BlendOperationMax;
BlendOperation::BlendOperation()
{
    this->name = "BlendOperation"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    BlendOperationAdd.value = BlendOperationAdd_value;
    BlendOperationAdd.type = Type::FullType{ BlendOperationType.name, true };
    BlendOperationAdd.underlyingType = Type::FullType{ UInt32Type.name };
    BlendOperationAdd.thisResolved->type = this;
    BlendOperationSubtract.value = BlendOperationSubtract_value;
    BlendOperationSubtract.type = Type::FullType{ BlendOperationType.name, true };
    BlendOperationSubtract.underlyingType = Type::FullType{ UInt32Type.name };
    BlendOperationSubtract.thisResolved->type = this;
    BlendOperationReverseSubtract.value = BlendOperationReverseSubtract_value;
    BlendOperationReverseSubtract.type = Type::FullType{ BlendOperationType.name, true };
    BlendOperationReverseSubtract.underlyingType = Type::FullType{ UInt32Type.name };
    BlendOperationReverseSubtract.thisResolved->type = this;
    BlendOperationMin.value = BlendOperationMin_value;
    BlendOperationMin.type = Type::FullType{ BlendOperationType.name, true };
    BlendOperationMin.underlyingType = Type::FullType{ UInt32Type.name };
    BlendOperationMin.thisResolved->type = this;
    BlendOperationMax.value = BlendOperationMax_value;
    BlendOperationMax.type = Type::FullType{ BlendOperationType.name, true };
    BlendOperationMax.underlyingType = Type::FullType{ UInt32Type.name };
    BlendOperationMax.thisResolved->type = this;
    this->labels = std::array{ "Add"_c, "Subtract"_c, "ReverseSubtract"_c, "Min"_c, "Max"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 7> {
        std::pair{ "Min"_h, &BlendOperationMin },
        std::pair{ "Max"_h, &BlendOperationMax },
        std::pair{ "ReverseSubtract"_h, &BlendOperationReverseSubtract },
        std::pair{ "operator=="_h, &BlendOperationType.eqOp },
        std::pair{ "operator!="_h, &BlendOperationType.neqOp },
        std::pair{ "Add"_h, &BlendOperationAdd },
        std::pair{ "Subtract"_h, &BlendOperationSubtract }
    };
};
BlendOperation BlendOperationType;

EnumExpression BlendColorMaskNone;
EnumExpression BlendColorMaskR;
EnumExpression BlendColorMaskRG;
EnumExpression BlendColorMaskRGB;
EnumExpression BlendColorMaskRGBA;
BlendColorMask::BlendColorMask()
{
    this->name = "BlendColorMask"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    BlendColorMaskNone.value = BlendColorMaskNone_value;
    BlendColorMaskNone.type = Type::FullType{ BlendColorMaskType.name, true };
    BlendColorMaskNone.underlyingType = Type::FullType{ UInt32Type.name };
    BlendColorMaskNone.thisResolved->type = this;
    BlendColorMaskR.value = BlendColorMaskR_value;
    BlendColorMaskR.type = Type::FullType{ BlendColorMaskType.name, true };
    BlendColorMaskR.underlyingType = Type::FullType{ UInt32Type.name };
    BlendColorMaskR.thisResolved->type = this;
    BlendColorMaskRG.value = BlendColorMaskRG_value;
    BlendColorMaskRG.type = Type::FullType{ BlendColorMaskType.name, true };
    BlendColorMaskRG.underlyingType = Type::FullType{ UInt32Type.name };
    BlendColorMaskRG.thisResolved->type = this;
    BlendColorMaskRGB.value = BlendColorMaskRGB_value;
    BlendColorMaskRGB.type = Type::FullType{ BlendColorMaskType.name, true };
    BlendColorMaskRGB.underlyingType = Type::FullType{ UInt32Type.name };
    BlendColorMaskRGB.thisResolved->type = this;
    BlendColorMaskRGBA.value = BlendColorMaskRGBA_value;
    BlendColorMaskRGBA.type = Type::FullType{ BlendColorMaskType.name, true };
    BlendColorMaskRGBA.underlyingType = Type::FullType{ UInt32Type.name };
    BlendColorMaskRGBA.thisResolved->type = this;
    this->labels = std::array{ "None"_c, "R"_c, "RG"_c, "RGB"_c, "RGBA"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 7> {
        std::pair{ "RG"_h, &BlendColorMaskRG },
        std::pair{ "None"_h, &BlendColorMaskNone },
        std::pair{ "RGBA"_h, &BlendColorMaskRGBA },
        std::pair{ "RGB"_h, &BlendColorMaskRGB },
        std::pair{ "R"_h, &BlendColorMaskR },
        std::pair{ "operator=="_h, &BlendColorMaskType.eqOp },
        std::pair{ "operator!="_h, &BlendColorMaskType.neqOp }
    };
};
BlendColorMask BlendColorMaskType;

EnumExpression FilterModePoint;
EnumExpression FilterModeNearest;
EnumExpression FilterModeLinear;
EnumExpression FilterModeMinMagMipLinear;
EnumExpression FilterModeMinMagLinearMipPoint;
EnumExpression FilterModeMinLinearMagMipPoint;
EnumExpression FilterModeMinMagMipPoint;
EnumExpression FilterModeMinMagPointMipLinear;
EnumExpression FilterModeMinPointMagMipLinear;
EnumExpression FilterModeMinLinearMagPointMipLinear;
EnumExpression FilterModeMinPointMagLinearMipPoint;
FilterMode::FilterMode()
{
    this->name = "FilterMode"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    FilterModePoint.value = FilterModePoint_value;
    FilterModePoint.type = Type::FullType{ FilterModeType.name, true };
    FilterModePoint.underlyingType = Type::FullType{ UInt32Type.name };
    FilterModePoint.thisResolved->type = this;
    FilterModeNearest.value = FilterModeNearest_value;
    FilterModeNearest.type = Type::FullType{ FilterModeType.name, true };
    FilterModeNearest.underlyingType = Type::FullType{ UInt32Type.name };
    FilterModeNearest.thisResolved->type = this;
    FilterModeLinear.value = FilterModeLinear_value;
    FilterModeLinear.type = Type::FullType{ FilterModeType.name, true };
    FilterModeLinear.underlyingType = Type::FullType{ UInt32Type.name };
    FilterModeLinear.thisResolved->type = this;
    FilterModeMinMagMipLinear.value = FilterModeMinMagMipLinear_value;
    FilterModeMinMagMipLinear.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinMagMipLinear.underlyingType = Type::FullType{ UInt32Type.name };
    FilterModeMinMagMipLinear.thisResolved->type = this;
    FilterModeMinMagLinearMipPoint.value = FilterModeMinMagLinearMipPoint_value;
    FilterModeMinMagLinearMipPoint.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinMagLinearMipPoint.underlyingType = Type::FullType{ UInt32Type.name };
    FilterModeMinMagLinearMipPoint.thisResolved->type = this;
    FilterModeMinLinearMagMipPoint.value = FilterModeMinLinearMagMipPoint_value;
    FilterModeMinLinearMagMipPoint.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinLinearMagMipPoint.underlyingType = Type::FullType{ UInt32Type.name };
    FilterModeMinLinearMagMipPoint.thisResolved->type = this;
    FilterModeMinMagMipPoint.value = FilterModeMinMagMipPoint_value;
    FilterModeMinMagMipPoint.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinMagMipPoint.underlyingType = Type::FullType{ UInt32Type.name };
    FilterModeMinMagMipPoint.thisResolved->type = this;
    FilterModeMinMagPointMipLinear.value = FilterModeMinMagPointMipLinear_value;
    FilterModeMinMagPointMipLinear.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinMagPointMipLinear.underlyingType = Type::FullType{ UInt32Type.name };
    FilterModeMinMagPointMipLinear.thisResolved->type = this;
    FilterModeMinPointMagMipLinear.value = FilterModeMinPointMagMipLinear_value;
    FilterModeMinPointMagMipLinear.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinPointMagMipLinear.underlyingType = Type::FullType{ UInt32Type.name };
    FilterModeMinPointMagMipLinear.thisResolved->type = this;
    FilterModeMinLinearMagPointMipLinear.value = FilterModeMinLinearMagPointMipLinear_value;
    FilterModeMinLinearMagPointMipLinear.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinLinearMagPointMipLinear.underlyingType = Type::FullType{ UInt32Type.name };
    FilterModeMinLinearMagPointMipLinear.thisResolved->type = this;
    FilterModeMinPointMagLinearMipPoint.value = FilterModeMinPointMagLinearMipPoint_value;
    FilterModeMinPointMagLinearMipPoint.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinPointMagLinearMipPoint.underlyingType = Type::FullType{ UInt32Type.name };
    FilterModeMinPointMagLinearMipPoint.thisResolved->type = this;
    this->labels = std::array{ "Point"_c, "Nearest"_c, "Linear"_c, "MinMagMipLinear"_c, "MinMagLinearMipPoint"_c, "MinLinearMagMipPoint"_c, "MinMagMipPoint"_c, "MinMagPointMipLinear"_c, "MinPointMagMipLinear"_c, "MinLinearMagPointMipLinear"_c, "MinPointMagLinearMipPoint"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 13> {
        std::pair{ "MinLinearMagPointMipLinear"_h, &FilterModeMinLinearMagPointMipLinear },
        std::pair{ "Nearest"_h, &FilterModeNearest },
        std::pair{ "MinMagMipLinear"_h, &FilterModeMinMagMipLinear },
        std::pair{ "MinPointMagLinearMipPoint"_h, &FilterModeMinPointMagLinearMipPoint },
        std::pair{ "MinPointMagMipLinear"_h, &FilterModeMinPointMagMipLinear },
        std::pair{ "Point"_h, &FilterModePoint },
        std::pair{ "MinLinearMagMipPoint"_h, &FilterModeMinLinearMagMipPoint },
        std::pair{ "MinMagPointMipLinear"_h, &FilterModeMinMagPointMipLinear },
        std::pair{ "MinMagMipPoint"_h, &FilterModeMinMagMipPoint },
        std::pair{ "operator=="_h, &FilterModeType.eqOp },
        std::pair{ "operator!="_h, &FilterModeType.neqOp },
        std::pair{ "Linear"_h, &FilterModeLinear },
        std::pair{ "MinMagLinearMipPoint"_h, &FilterModeMinMagLinearMipPoint }
    };
};
FilterMode FilterModeType;

EnumExpression AddressModeRepeat;
EnumExpression AddressModeMirror;
EnumExpression AddressModeClamp;
EnumExpression AddressModeBorder;
AddressMode::AddressMode()
{
    this->name = "AddressMode"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    AddressModeRepeat.value = AddressModeRepeat_value;
    AddressModeRepeat.type = Type::FullType{ AddressModeType.name, true };
    AddressModeRepeat.underlyingType = Type::FullType{ UInt32Type.name };
    AddressModeRepeat.thisResolved->type = this;
    AddressModeMirror.value = AddressModeMirror_value;
    AddressModeMirror.type = Type::FullType{ AddressModeType.name, true };
    AddressModeMirror.underlyingType = Type::FullType{ UInt32Type.name };
    AddressModeMirror.thisResolved->type = this;
    AddressModeClamp.value = AddressModeClamp_value;
    AddressModeClamp.type = Type::FullType{ AddressModeType.name, true };
    AddressModeClamp.underlyingType = Type::FullType{ UInt32Type.name };
    AddressModeClamp.thisResolved->type = this;
    AddressModeBorder.value = AddressModeBorder_value;
    AddressModeBorder.type = Type::FullType{ AddressModeType.name, true };
    AddressModeBorder.underlyingType = Type::FullType{ UInt32Type.name };
    AddressModeBorder.thisResolved->type = this;
    this->labels = std::array{ "Repeat"_c, "Mirror"_c, "Clamp"_c, "Border"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 6> {
        std::pair{ "Mirror"_h, &AddressModeMirror },
        std::pair{ "Repeat"_h, &AddressModeRepeat },
        std::pair{ "Clamp"_h, &AddressModeClamp },
        std::pair{ "Border"_h, &AddressModeBorder },
        std::pair{ "operator=="_h, &AddressModeType.eqOp },
        std::pair{ "operator!="_h, &AddressModeType.neqOp }
    };
};
AddressMode AddressModeType;

EnumExpression ColorTransparent;
EnumExpression ColorBlack;
EnumExpression ColorWhite;
Color::Color()
{
    this->name = "Color"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    ColorTransparent.value = ColorTransparent_value;
    ColorTransparent.type = Type::FullType{ ColorType.name, true };
    ColorTransparent.underlyingType = Type::FullType{ UInt32Type.name };
    ColorTransparent.thisResolved->type = this;
    ColorBlack.value = ColorBlack_value;
    ColorBlack.type = Type::FullType{ ColorType.name, true };
    ColorBlack.underlyingType = Type::FullType{ UInt32Type.name };
    ColorBlack.thisResolved->type = this;
    ColorWhite.value = ColorWhite_value;
    ColorWhite.type = Type::FullType{ ColorType.name, true };
    ColorWhite.underlyingType = Type::FullType{ UInt32Type.name };
    ColorWhite.thisResolved->type = this;
    this->labels = std::array{ "Transparent"_c, "Black"_c, "White"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 5> {
        std::pair{ "Black"_h, &ColorBlack },
        std::pair{ "White"_h, &ColorWhite },
        std::pair{ "Transparent"_h, &ColorTransparent },
        std::pair{ "operator=="_h, &ColorType.eqOp },
        std::pair{ "operator!="_h, &ColorType.neqOp }
    };
};
Color ColorType;

EnumExpression InputTopologyInvalid;
EnumExpression InputTopologyPoints;
EnumExpression InputTopologyLines;
EnumExpression InputTopologyLinesAdjacency;
EnumExpression InputTopologyTriangles;
EnumExpression InputTopologyTrianglesAdjacency;
EnumExpression InputTopologyQuads;
EnumExpression InputTopologyIsolines;
InputTopology::InputTopology()
{
    this->name = "InputTopology"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    InputTopologyInvalid.value = InputTopologyInvalid_value;
    InputTopologyInvalid.type = Type::FullType{ InputTopologyType.name, true };
    InputTopologyInvalid.underlyingType = Type::FullType{ UInt32Type.name };
    InputTopologyInvalid.thisResolved->type = this;
    InputTopologyPoints.value = InputTopologyPoints_value;
    InputTopologyPoints.type = Type::FullType{ InputTopologyType.name, true };
    InputTopologyPoints.underlyingType = Type::FullType{ UInt32Type.name };
    InputTopologyPoints.thisResolved->type = this;
    InputTopologyLines.value = InputTopologyLines_value;
    InputTopologyLines.type = Type::FullType{ InputTopologyType.name, true };
    InputTopologyLines.underlyingType = Type::FullType{ UInt32Type.name };
    InputTopologyLines.thisResolved->type = this;
    InputTopologyLinesAdjacency.value = InputTopologyLinesAdjacency_value;
    InputTopologyLinesAdjacency.type = Type::FullType{ InputTopologyType.name, true };
    InputTopologyLinesAdjacency.underlyingType = Type::FullType{ UInt32Type.name };
    InputTopologyLinesAdjacency.thisResolved->type = this;
    InputTopologyTriangles.value = InputTopologyTriangles_value;
    InputTopologyTriangles.type = Type::FullType{ InputTopologyType.name, true };
    InputTopologyTriangles.underlyingType = Type::FullType{ UInt32Type.name };
    InputTopologyTriangles.thisResolved->type = this;
    InputTopologyTrianglesAdjacency.value = InputTopologyTrianglesAdjacency_value;
    InputTopologyTrianglesAdjacency.type = Type::FullType{ InputTopologyType.name, true };
    InputTopologyTrianglesAdjacency.underlyingType = Type::FullType{ UInt32Type.name };
    InputTopologyTrianglesAdjacency.thisResolved->type = this;
    InputTopologyQuads.value = InputTopologyQuads_value;
    InputTopologyQuads.type = Type::FullType{ InputTopologyType.name, true };
    InputTopologyQuads.underlyingType = Type::FullType{ UInt32Type.name };
    InputTopologyQuads.thisResolved->type = this;
    InputTopologyIsolines.value = InputTopologyIsolines_value;
    InputTopologyIsolines.type = Type::FullType{ InputTopologyType.name, true };
    InputTopologyIsolines.underlyingType = Type::FullType{ UInt32Type.name };
    InputTopologyIsolines.thisResolved->type = this;
    this->labels = std::array{ "Invalid"_c, "Points"_c, "Lines"_c, "LinesAdjacency"_c, "Triangles"_c, "TrianglesAdjacency"_c, "Quads"_c, "Isolines"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 10> {
        std::pair{ "TrianglesAdjacency"_h, &InputTopologyTrianglesAdjacency },
        std::pair{ "Invalid"_h, &InputTopologyInvalid },
        std::pair{ "Isolines"_h, &InputTopologyIsolines },
        std::pair{ "Lines"_h, &InputTopologyLines },
        std::pair{ "Triangles"_h, &InputTopologyTriangles },
        std::pair{ "Quads"_h, &InputTopologyQuads },
        std::pair{ "Points"_h, &InputTopologyPoints },
        std::pair{ "LinesAdjacency"_h, &InputTopologyLinesAdjacency },
        std::pair{ "operator=="_h, &InputTopologyType.eqOp },
        std::pair{ "operator!="_h, &InputTopologyType.neqOp }
    };
};
InputTopology InputTopologyType;

EnumExpression OutputTopologyInvalid;
EnumExpression OutputTopologyPoints;
EnumExpression OutputTopologyLines;
EnumExpression OutputTopologyTriangles;
OutputTopology::OutputTopology()
{
    this->name = "OutputTopology"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    OutputTopologyInvalid.value = OutputTopologyInvalid_value;
    OutputTopologyInvalid.type = Type::FullType{ OutputTopologyType.name, true };
    OutputTopologyInvalid.underlyingType = Type::FullType{ UInt32Type.name };
    OutputTopologyInvalid.thisResolved->type = this;
    OutputTopologyPoints.value = OutputTopologyPoints_value;
    OutputTopologyPoints.type = Type::FullType{ OutputTopologyType.name, true };
    OutputTopologyPoints.underlyingType = Type::FullType{ UInt32Type.name };
    OutputTopologyPoints.thisResolved->type = this;
    OutputTopologyLines.value = OutputTopologyLines_value;
    OutputTopologyLines.type = Type::FullType{ OutputTopologyType.name, true };
    OutputTopologyLines.underlyingType = Type::FullType{ UInt32Type.name };
    OutputTopologyLines.thisResolved->type = this;
    OutputTopologyTriangles.value = OutputTopologyTriangles_value;
    OutputTopologyTriangles.type = Type::FullType{ OutputTopologyType.name, true };
    OutputTopologyTriangles.underlyingType = Type::FullType{ UInt32Type.name };
    OutputTopologyTriangles.thisResolved->type = this;
    this->labels = std::array{ "Invalid"_c, "Points"_c, "Lines"_c, "Triangles"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 6> {
        std::pair{ "Invalid"_h, &OutputTopologyInvalid },
        std::pair{ "Lines"_h, &OutputTopologyLines },
        std::pair{ "Triangles"_h, &OutputTopologyTriangles },
        std::pair{ "Points"_h, &OutputTopologyPoints },
        std::pair{ "operator=="_h, &OutputTopologyType.eqOp },
        std::pair{ "operator!="_h, &OutputTopologyType.neqOp }
    };
};
OutputTopology OutputTopologyType;

EnumExpression PatchInvalid;
EnumExpression PatchIsolines;
EnumExpression PatchTriangles;
EnumExpression PatchQuads;
Patch::Patch()
{
    this->name = "Patch"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    PatchInvalid.value = PatchInvalid_value;
    PatchInvalid.type = Type::FullType{ PatchType.name, true };
    PatchInvalid.underlyingType = Type::FullType{ UInt32Type.name };
    PatchInvalid.thisResolved->type = this;
    PatchIsolines.value = PatchIsolines_value;
    PatchIsolines.type = Type::FullType{ PatchType.name, true };
    PatchIsolines.underlyingType = Type::FullType{ UInt32Type.name };
    PatchIsolines.thisResolved->type = this;
    PatchTriangles.value = PatchTriangles_value;
    PatchTriangles.type = Type::FullType{ PatchType.name, true };
    PatchTriangles.underlyingType = Type::FullType{ UInt32Type.name };
    PatchTriangles.thisResolved->type = this;
    PatchQuads.value = PatchQuads_value;
    PatchQuads.type = Type::FullType{ PatchType.name, true };
    PatchQuads.underlyingType = Type::FullType{ UInt32Type.name };
    PatchQuads.thisResolved->type = this;
    this->labels = std::array{ "Invalid"_c, "Isolines"_c, "Triangles"_c, "Quads"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 6> {
        std::pair{ "Invalid"_h, &PatchInvalid },
        std::pair{ "Isolines"_h, &PatchIsolines },
        std::pair{ "Triangles"_h, &PatchTriangles },
        std::pair{ "Quads"_h, &PatchQuads },
        std::pair{ "operator=="_h, &PatchType.eqOp },
        std::pair{ "operator!="_h, &PatchType.neqOp }
    };
};
Patch PatchType;

EnumExpression WindingInvalid;
EnumExpression WindingClockwise;
EnumExpression WindingCounterClockwise;
Winding::Winding()
{
    this->name = "Winding"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    WindingInvalid.value = WindingInvalid_value;
    WindingInvalid.type = Type::FullType{ WindingType.name, true };
    WindingInvalid.underlyingType = Type::FullType{ UInt32Type.name };
    WindingInvalid.thisResolved->type = this;
    WindingClockwise.value = WindingClockwise_value;
    WindingClockwise.type = Type::FullType{ WindingType.name, true };
    WindingClockwise.underlyingType = Type::FullType{ UInt32Type.name };
    WindingClockwise.thisResolved->type = this;
    WindingCounterClockwise.value = WindingCounterClockwise_value;
    WindingCounterClockwise.type = Type::FullType{ WindingType.name, true };
    WindingCounterClockwise.underlyingType = Type::FullType{ UInt32Type.name };
    WindingCounterClockwise.thisResolved->type = this;
    this->labels = std::array{ "Invalid"_c, "Clockwise"_c, "CounterClockwise"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 5> {
        std::pair{ "Invalid"_h, &WindingInvalid },
        std::pair{ "CounterClockwise"_h, &WindingCounterClockwise },
        std::pair{ "operator=="_h, &WindingType.eqOp },
        std::pair{ "operator!="_h, &WindingType.neqOp },
        std::pair{ "Clockwise"_h, &WindingClockwise }
    };
};
Winding WindingType;

EnumExpression PartitionInvalid;
EnumExpression PartitionIntegerSteps;
EnumExpression PartitionFractionalEven;
EnumExpression PartitionFractionalOdd;
Partition::Partition()
{
    this->name = "Partition"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    PartitionInvalid.value = PartitionInvalid_value;
    PartitionInvalid.type = Type::FullType{ PartitionType.name, true };
    PartitionInvalid.underlyingType = Type::FullType{ UInt32Type.name };
    PartitionInvalid.thisResolved->type = this;
    PartitionIntegerSteps.value = PartitionIntegerSteps_value;
    PartitionIntegerSteps.type = Type::FullType{ PartitionType.name, true };
    PartitionIntegerSteps.underlyingType = Type::FullType{ UInt32Type.name };
    PartitionIntegerSteps.thisResolved->type = this;
    PartitionFractionalEven.value = PartitionFractionalEven_value;
    PartitionFractionalEven.type = Type::FullType{ PartitionType.name, true };
    PartitionFractionalEven.underlyingType = Type::FullType{ UInt32Type.name };
    PartitionFractionalEven.thisResolved->type = this;
    PartitionFractionalOdd.value = PartitionFractionalOdd_value;
    PartitionFractionalOdd.type = Type::FullType{ PartitionType.name, true };
    PartitionFractionalOdd.underlyingType = Type::FullType{ UInt32Type.name };
    PartitionFractionalOdd.thisResolved->type = this;
    this->labels = std::array{ "Invalid"_c, "IntegerSteps"_c, "FractionalEven"_c, "FractionalOdd"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 6> {
        std::pair{ "Invalid"_h, &PartitionInvalid },
        std::pair{ "IntegerSteps"_h, &PartitionIntegerSteps },
        std::pair{ "FractionalEven"_h, &PartitionFractionalEven },
        std::pair{ "FractionalOdd"_h, &PartitionFractionalOdd },
        std::pair{ "operator=="_h, &PartitionType.eqOp },
        std::pair{ "operator!="_h, &PartitionType.neqOp }
    };
};
Partition PartitionType;

EnumExpression PixelOriginInvalid;
EnumExpression PixelOriginLowerLeft;
EnumExpression PixelOriginUpperLeft;
EnumExpression PixelOriginCenter;
PixelOrigin::PixelOrigin()
{
    this->name = "PixelOrigin"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    PixelOriginInvalid.value = PixelOriginInvalid_value;
    PixelOriginInvalid.type = Type::FullType{ PixelOriginType.name, true };
    PixelOriginInvalid.underlyingType = Type::FullType{ UInt32Type.name };
    PixelOriginInvalid.thisResolved->type = this;
    PixelOriginLowerLeft.value = PixelOriginLowerLeft_value;
    PixelOriginLowerLeft.type = Type::FullType{ PixelOriginType.name, true };
    PixelOriginLowerLeft.underlyingType = Type::FullType{ UInt32Type.name };
    PixelOriginLowerLeft.thisResolved->type = this;
    PixelOriginUpperLeft.value = PixelOriginUpperLeft_value;
    PixelOriginUpperLeft.type = Type::FullType{ PixelOriginType.name, true };
    PixelOriginUpperLeft.underlyingType = Type::FullType{ UInt32Type.name };
    PixelOriginUpperLeft.thisResolved->type = this;
    PixelOriginCenter.value = PixelOriginCenter_value;
    PixelOriginCenter.type = Type::FullType{ PixelOriginType.name, true };
    PixelOriginCenter.underlyingType = Type::FullType{ UInt32Type.name };
    PixelOriginCenter.thisResolved->type = this;
    this->labels = std::array{ "Invalid"_c, "LowerLeft"_c, "UpperLeft"_c, "Center"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 6> {
        std::pair{ "UpperLeft"_h, &PixelOriginUpperLeft },
        std::pair{ "Invalid"_h, &PixelOriginInvalid },
        std::pair{ "Center"_h, &PixelOriginCenter },
        std::pair{ "operator=="_h, &PixelOriginType.eqOp },
        std::pair{ "operator!="_h, &PixelOriginType.neqOp },
        std::pair{ "LowerLeft"_h, &PixelOriginLowerLeft }
    };
};
PixelOrigin PixelOriginType;

EnumExpression ComputeDerivativesInvalid;
EnumExpression ComputeDerivativesIndexLinear;
EnumExpression ComputeDerivativesIndexQuad;
ComputeDerivatives::ComputeDerivatives()
{
    this->name = "ComputeDerivatives"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    this->thisResolved->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    ComputeDerivativesInvalid.value = ComputeDerivativesInvalid_value;
    ComputeDerivativesInvalid.type = Type::FullType{ ComputeDerivativesType.name, true };
    ComputeDerivativesInvalid.underlyingType = Type::FullType{ UInt32Type.name };
    ComputeDerivativesInvalid.thisResolved->type = this;
    ComputeDerivativesIndexLinear.value = ComputeDerivativesIndexLinear_value;
    ComputeDerivativesIndexLinear.type = Type::FullType{ ComputeDerivativesType.name, true };
    ComputeDerivativesIndexLinear.underlyingType = Type::FullType{ UInt32Type.name };
    ComputeDerivativesIndexLinear.thisResolved->type = this;
    ComputeDerivativesIndexQuad.value = ComputeDerivativesIndexQuad_value;
    ComputeDerivativesIndexQuad.type = Type::FullType{ ComputeDerivativesType.name, true };
    ComputeDerivativesIndexQuad.underlyingType = Type::FullType{ UInt32Type.name };
    ComputeDerivativesIndexQuad.thisResolved->type = this;
    this->labels = std::array{ "Invalid"_c, "IndexLinear"_c, "IndexQuad"_c };
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = this->thisResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = this->thisResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 5> {
        std::pair{ "IndexQuad"_h, &ComputeDerivativesIndexQuad },
        std::pair{ "Invalid"_h, &ComputeDerivativesInvalid },
        std::pair{ "IndexLinear"_h, &ComputeDerivativesIndexLinear },
        std::pair{ "operator=="_h, &ComputeDerivativesType.eqOp },
        std::pair{ "operator!="_h, &ComputeDerivativesType.neqOp }
    };
};
ComputeDerivatives ComputeDerivativesType;

Variable GeometryPointPosition;
Variable GeometryPointPointSize;
Variable GeometryPointCullDistance;
Variable GeometryPointClipDistance;
GeometryPoint::GeometryPoint()
{
    this->name = "GeometryPoint"_c;
    this->resolved = Alloc<Structure::__Resolved>();
    this->category = Type::StructureCategory;
    this->arraySizeExpression = nullptr;
    this->isArray = false;
    this->scope.owningSymbol = this;
    this->scope.type = Scope::ScopeType::Type;
    this->baseType = TypeCode::InvalidType;
    this->builtin = true;
    Structure::__Resolved* typeResolved = static_cast<Structure::__Resolved*>(this->resolved);
    typeResolved->usageFlags.bits = 0x0;
    typeResolved->accessBits.bits = 0x0;
    typeResolved->byteSize = 28;
    typeResolved->baseAlignment = 0;
    typeResolved->packMembers = false;
    GeometryPointPosition.name = "position"_c;
    GeometryPointPosition.type = Type::FullType{ Float32x4Type.name };
    GeometryPointPosition.thisResolved->typeSymbol = &Float32x4Type;
    GeometryPointPosition.thisResolved->structureOffset = 0;
    GeometryPointPointSize.name = "pointSize"_c;
    GeometryPointPointSize.type = Type::FullType{ Float32Type.name };
    GeometryPointPointSize.thisResolved->typeSymbol = &Float32Type;
    GeometryPointPointSize.thisResolved->structureOffset = 16;
    GeometryPointCullDistance.name = "cullDistance"_c;
    GeometryPointCullDistance.type = Type::FullType{ Float32Type.name };
    GeometryPointCullDistance.thisResolved->typeSymbol = &Float32Type;
    GeometryPointCullDistance.thisResolved->structureOffset = 20;
    GeometryPointClipDistance.name = "clipDistance"_c;
    GeometryPointClipDistance.type = Type::FullType{ Float32Type.name };
    GeometryPointClipDistance.thisResolved->typeSymbol = &Float32Type;
    GeometryPointClipDistance.thisResolved->structureOffset = 24;
    this->symbols = TransientArray<Symbol*>({ &GeometryPointPosition, &GeometryPointPointSize, &GeometryPointCullDistance, &GeometryPointClipDistance });
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 4> {
        std::pair{ "cullDistance"_h, &GeometryPointCullDistance },
        std::pair{ "position"_h, &GeometryPointPosition },
        std::pair{ "clipDistance"_h, &GeometryPointClipDistance },
        std::pair{ "pointSize"_h, &GeometryPointPointSize }
    };
};
GeometryPoint GeometryPointType;

Variable GeometryLinePosition;
IntExpression GeometryLinePositionArraySize(2);
Variable GeometryLinePointSize;
IntExpression GeometryLinePointSizeArraySize(2);
Variable GeometryLineCullDistance;
IntExpression GeometryLineCullDistanceArraySize(2);
Variable GeometryLineClipDistance;
IntExpression GeometryLineClipDistanceArraySize(2);
GeometryLine::GeometryLine()
{
    this->name = "GeometryLine"_c;
    this->resolved = Alloc<Structure::__Resolved>();
    this->category = Type::StructureCategory;
    this->arraySizeExpression = nullptr;
    this->isArray = false;
    this->scope.owningSymbol = this;
    this->scope.type = Scope::ScopeType::Type;
    this->baseType = TypeCode::InvalidType;
    this->builtin = true;
    Structure::__Resolved* typeResolved = static_cast<Structure::__Resolved*>(this->resolved);
    typeResolved->usageFlags.bits = 0x0;
    typeResolved->accessBits.bits = 0x0;
    typeResolved->byteSize = 56;
    typeResolved->baseAlignment = 0;
    typeResolved->packMembers = false;
    GeometryLinePosition.name = "position"_c;
    GeometryLinePosition.type = Type::FullType{ Float32x4Type.name, {Type::FullType::Modifier::Array}, {&GeometryLinePositionArraySize} };
    GeometryLinePosition.thisResolved->typeSymbol = &Float32x4Type;
    GeometryLinePosition.thisResolved->structureOffset = 0;
    GeometryLinePointSize.name = "pointSize"_c;
    GeometryLinePointSize.type = Type::FullType{ Float32Type.name, {Type::FullType::Modifier::Array}, {&GeometryLinePointSizeArraySize} };
    GeometryLinePointSize.thisResolved->typeSymbol = &Float32Type;
    GeometryLinePointSize.thisResolved->structureOffset = 32;
    GeometryLineCullDistance.name = "cullDistance"_c;
    GeometryLineCullDistance.type = Type::FullType{ Float32Type.name, {Type::FullType::Modifier::Array}, {&GeometryLineCullDistanceArraySize} };
    GeometryLineCullDistance.thisResolved->typeSymbol = &Float32Type;
    GeometryLineCullDistance.thisResolved->structureOffset = 40;
    GeometryLineClipDistance.name = "clipDistance"_c;
    GeometryLineClipDistance.type = Type::FullType{ Float32Type.name, {Type::FullType::Modifier::Array}, {&GeometryLineClipDistanceArraySize} };
    GeometryLineClipDistance.thisResolved->typeSymbol = &Float32Type;
    GeometryLineClipDistance.thisResolved->structureOffset = 48;
    this->symbols = TransientArray<Symbol*>({ &GeometryLinePosition, &GeometryLinePointSize, &GeometryLineCullDistance, &GeometryLineClipDistance });
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 4> {
        std::pair{ "cullDistance"_h, &GeometryLineCullDistance },
        std::pair{ "position"_h, &GeometryLinePosition },
        std::pair{ "clipDistance"_h, &GeometryLineClipDistance },
        std::pair{ "pointSize"_h, &GeometryLinePointSize }
    };
};
GeometryLine GeometryLineType;

Variable GeometryLineAdjacencyPosition;
IntExpression GeometryLineAdjacencyPositionArraySize(4);
Variable GeometryLineAdjacencyPointSize;
IntExpression GeometryLineAdjacencyPointSizeArraySize(4);
Variable GeometryLineAdjacencyCullDistance;
IntExpression GeometryLineAdjacencyCullDistanceArraySize(4);
Variable GeometryLineAdjacencyClipDistance;
IntExpression GeometryLineAdjacencyClipDistanceArraySize(4);
GeometryLineAdjacency::GeometryLineAdjacency()
{
    this->name = "GeometryLineAdjacency"_c;
    this->resolved = Alloc<Structure::__Resolved>();
    this->category = Type::StructureCategory;
    this->arraySizeExpression = nullptr;
    this->isArray = false;
    this->scope.owningSymbol = this;
    this->scope.type = Scope::ScopeType::Type;
    this->baseType = TypeCode::InvalidType;
    this->builtin = true;
    Structure::__Resolved* typeResolved = static_cast<Structure::__Resolved*>(this->resolved);
    typeResolved->usageFlags.bits = 0x0;
    typeResolved->accessBits.bits = 0x0;
    typeResolved->byteSize = 112;
    typeResolved->baseAlignment = 0;
    typeResolved->packMembers = false;
    GeometryLineAdjacencyPosition.name = "position"_c;
    GeometryLineAdjacencyPosition.type = Type::FullType{ Float32x4Type.name, {Type::FullType::Modifier::Array}, {&GeometryLineAdjacencyPositionArraySize} };
    GeometryLineAdjacencyPosition.thisResolved->typeSymbol = &Float32x4Type;
    GeometryLineAdjacencyPosition.thisResolved->structureOffset = 0;
    GeometryLineAdjacencyPointSize.name = "pointSize"_c;
    GeometryLineAdjacencyPointSize.type = Type::FullType{ Float32Type.name, {Type::FullType::Modifier::Array}, {&GeometryLineAdjacencyPointSizeArraySize} };
    GeometryLineAdjacencyPointSize.thisResolved->typeSymbol = &Float32Type;
    GeometryLineAdjacencyPointSize.thisResolved->structureOffset = 64;
    GeometryLineAdjacencyCullDistance.name = "cullDistance"_c;
    GeometryLineAdjacencyCullDistance.type = Type::FullType{ Float32Type.name, {Type::FullType::Modifier::Array}, {&GeometryLineAdjacencyCullDistanceArraySize} };
    GeometryLineAdjacencyCullDistance.thisResolved->typeSymbol = &Float32Type;
    GeometryLineAdjacencyCullDistance.thisResolved->structureOffset = 80;
    GeometryLineAdjacencyClipDistance.name = "clipDistance"_c;
    GeometryLineAdjacencyClipDistance.type = Type::FullType{ Float32Type.name, {Type::FullType::Modifier::Array}, {&GeometryLineAdjacencyClipDistanceArraySize} };
    GeometryLineAdjacencyClipDistance.thisResolved->typeSymbol = &Float32Type;
    GeometryLineAdjacencyClipDistance.thisResolved->structureOffset = 96;
    this->symbols = TransientArray<Symbol*>({ &GeometryLineAdjacencyPosition, &GeometryLineAdjacencyPointSize, &GeometryLineAdjacencyCullDistance, &GeometryLineAdjacencyClipDistance });
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 4> {
        std::pair{ "cullDistance"_h, &GeometryLineAdjacencyCullDistance },
        std::pair{ "position"_h, &GeometryLineAdjacencyPosition },
        std::pair{ "clipDistance"_h, &GeometryLineAdjacencyClipDistance },
        std::pair{ "pointSize"_h, &GeometryLineAdjacencyPointSize }
    };
};
GeometryLineAdjacency GeometryLineAdjacencyType;

Variable GeometryTrianglePosition;
IntExpression GeometryTrianglePositionArraySize(3);
Variable GeometryTrianglePointSize;
IntExpression GeometryTrianglePointSizeArraySize(3);
Variable GeometryTriangleCullDistance;
IntExpression GeometryTriangleCullDistanceArraySize(3);
Variable GeometryTriangleClipDistance;
IntExpression GeometryTriangleClipDistanceArraySize(3);
GeometryTriangle::GeometryTriangle()
{
    this->name = "GeometryTriangle"_c;
    this->resolved = Alloc<Structure::__Resolved>();
    this->category = Type::StructureCategory;
    this->arraySizeExpression = nullptr;
    this->isArray = false;
    this->scope.owningSymbol = this;
    this->scope.type = Scope::ScopeType::Type;
    this->baseType = TypeCode::InvalidType;
    this->builtin = true;
    Structure::__Resolved* typeResolved = static_cast<Structure::__Resolved*>(this->resolved);
    typeResolved->usageFlags.bits = 0x0;
    typeResolved->accessBits.bits = 0x0;
    typeResolved->byteSize = 84;
    typeResolved->baseAlignment = 0;
    typeResolved->packMembers = false;
    GeometryTrianglePosition.name = "position"_c;
    GeometryTrianglePosition.type = Type::FullType{ Float32x4Type.name, {Type::FullType::Modifier::Array}, {&GeometryTrianglePositionArraySize} };
    GeometryTrianglePosition.thisResolved->typeSymbol = &Float32x4Type;
    GeometryTrianglePosition.thisResolved->structureOffset = 0;
    GeometryTrianglePointSize.name = "pointSize"_c;
    GeometryTrianglePointSize.type = Type::FullType{ Float32Type.name, {Type::FullType::Modifier::Array}, {&GeometryTrianglePointSizeArraySize} };
    GeometryTrianglePointSize.thisResolved->typeSymbol = &Float32Type;
    GeometryTrianglePointSize.thisResolved->structureOffset = 48;
    GeometryTriangleCullDistance.name = "cullDistance"_c;
    GeometryTriangleCullDistance.type = Type::FullType{ Float32Type.name, {Type::FullType::Modifier::Array}, {&GeometryTriangleCullDistanceArraySize} };
    GeometryTriangleCullDistance.thisResolved->typeSymbol = &Float32Type;
    GeometryTriangleCullDistance.thisResolved->structureOffset = 60;
    GeometryTriangleClipDistance.name = "clipDistance"_c;
    GeometryTriangleClipDistance.type = Type::FullType{ Float32Type.name, {Type::FullType::Modifier::Array}, {&GeometryTriangleClipDistanceArraySize} };
    GeometryTriangleClipDistance.thisResolved->typeSymbol = &Float32Type;
    GeometryTriangleClipDistance.thisResolved->structureOffset = 72;
    this->symbols = TransientArray<Symbol*>({ &GeometryTrianglePosition, &GeometryTrianglePointSize, &GeometryTriangleCullDistance, &GeometryTriangleClipDistance });
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 4> {
        std::pair{ "cullDistance"_h, &GeometryTriangleCullDistance },
        std::pair{ "position"_h, &GeometryTrianglePosition },
        std::pair{ "clipDistance"_h, &GeometryTriangleClipDistance },
        std::pair{ "pointSize"_h, &GeometryTrianglePointSize }
    };
};
GeometryTriangle GeometryTriangleType;

Variable GeometryTriangleAdjacencyPosition;
IntExpression GeometryTriangleAdjacencyPositionArraySize(6);
Variable GeometryTriangleAdjacencyPointSize;
IntExpression GeometryTriangleAdjacencyPointSizeArraySize(6);
Variable GeometryTriangleAdjacencyCullDistance;
IntExpression GeometryTriangleAdjacencyCullDistanceArraySize(6);
Variable GeometryTriangleAdjacencyClipDistance;
IntExpression GeometryTriangleAdjacencyClipDistanceArraySize(6);
GeometryTriangleAdjacency::GeometryTriangleAdjacency()
{
    this->name = "GeometryTriangleAdjacency"_c;
    this->resolved = Alloc<Structure::__Resolved>();
    this->category = Type::StructureCategory;
    this->arraySizeExpression = nullptr;
    this->isArray = false;
    this->scope.owningSymbol = this;
    this->scope.type = Scope::ScopeType::Type;
    this->baseType = TypeCode::InvalidType;
    this->builtin = true;
    Structure::__Resolved* typeResolved = static_cast<Structure::__Resolved*>(this->resolved);
    typeResolved->usageFlags.bits = 0x0;
    typeResolved->accessBits.bits = 0x0;
    typeResolved->byteSize = 168;
    typeResolved->baseAlignment = 0;
    typeResolved->packMembers = false;
    GeometryTriangleAdjacencyPosition.name = "position"_c;
    GeometryTriangleAdjacencyPosition.type = Type::FullType{ Float32x4Type.name, {Type::FullType::Modifier::Array}, {&GeometryTriangleAdjacencyPositionArraySize} };
    GeometryTriangleAdjacencyPosition.thisResolved->typeSymbol = &Float32x4Type;
    GeometryTriangleAdjacencyPosition.thisResolved->structureOffset = 0;
    GeometryTriangleAdjacencyPointSize.name = "pointSize"_c;
    GeometryTriangleAdjacencyPointSize.type = Type::FullType{ Float32Type.name, {Type::FullType::Modifier::Array}, {&GeometryTriangleAdjacencyPointSizeArraySize} };
    GeometryTriangleAdjacencyPointSize.thisResolved->typeSymbol = &Float32Type;
    GeometryTriangleAdjacencyPointSize.thisResolved->structureOffset = 96;
    GeometryTriangleAdjacencyCullDistance.name = "cullDistance"_c;
    GeometryTriangleAdjacencyCullDistance.type = Type::FullType{ Float32Type.name, {Type::FullType::Modifier::Array}, {&GeometryTriangleAdjacencyCullDistanceArraySize} };
    GeometryTriangleAdjacencyCullDistance.thisResolved->typeSymbol = &Float32Type;
    GeometryTriangleAdjacencyCullDistance.thisResolved->structureOffset = 120;
    GeometryTriangleAdjacencyClipDistance.name = "clipDistance"_c;
    GeometryTriangleAdjacencyClipDistance.type = Type::FullType{ Float32Type.name, {Type::FullType::Modifier::Array}, {&GeometryTriangleAdjacencyClipDistanceArraySize} };
    GeometryTriangleAdjacencyClipDistance.thisResolved->typeSymbol = &Float32Type;
    GeometryTriangleAdjacencyClipDistance.thisResolved->structureOffset = 144;
    this->symbols = TransientArray<Symbol*>({ &GeometryTriangleAdjacencyPosition, &GeometryTriangleAdjacencyPointSize, &GeometryTriangleAdjacencyCullDistance, &GeometryTriangleAdjacencyClipDistance });
    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 4> {
        std::pair{ "cullDistance"_h, &GeometryTriangleAdjacencyCullDistance },
        std::pair{ "position"_h, &GeometryTriangleAdjacencyPosition },
        std::pair{ "clipDistance"_h, &GeometryTriangleAdjacencyClipDistance },
        std::pair{ "pointSize"_h, &GeometryTriangleAdjacencyPointSize }
    };
};
GeometryTriangleAdjacency GeometryTriangleAdjacencyType;

Variable StencilStateFail;
Variable StencilStatePass;
Variable StencilStateDepthFail;
Variable StencilStateCompareFunction;
Variable StencilStateCompareMask;
Variable StencilStateWriteMask;
Variable StencilStateReference;
StencilState::StencilState()
{
    this->name = "StencilState"_c;
    this->builtin = true;
    StencilStateFail.name = "Fail"_c;
    StencilStateFail.type = Type::FullType{ StencilOpType.name };
    Symbol::Resolved(&StencilStateFail)->typeSymbol = &StencilOpType;

    StencilStatePass.name = "Pass"_c;
    StencilStatePass.type = Type::FullType{ StencilOpType.name };
    Symbol::Resolved(&StencilStatePass)->typeSymbol = &StencilOpType;

    StencilStateDepthFail.name = "DepthFail"_c;
    StencilStateDepthFail.type = Type::FullType{ StencilOpType.name };
    Symbol::Resolved(&StencilStateDepthFail)->typeSymbol = &StencilOpType;

    StencilStateCompareFunction.name = "CompareFunction"_c;
    StencilStateCompareFunction.type = Type::FullType{ CompareModeType.name };
    Symbol::Resolved(&StencilStateCompareFunction)->typeSymbol = &CompareModeType;

    StencilStateCompareMask.name = "CompareMask"_c;
    StencilStateCompareMask.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilStateCompareMask)->typeSymbol = &UInt32Type;

    StencilStateWriteMask.name = "WriteMask"_c;
    StencilStateWriteMask.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilStateWriteMask)->typeSymbol = &UInt32Type;

    StencilStateReference.name = "Reference"_c;
    StencilStateReference.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilStateReference)->typeSymbol = &UInt32Type;

    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 7>{
        std::pair{ "Fail"_h, &StencilStateFail },
        std::pair{ "Pass"_h, &StencilStatePass },
        std::pair{ "DepthFail"_h, &StencilStateDepthFail },
        std::pair{ "WriteMask"_h, &StencilStateWriteMask },
        std::pair{ "CompareFunction"_h, &StencilStateCompareFunction },
        std::pair{ "CompareMask"_h, &StencilStateCompareMask },
        std::pair{ "Reference"_h, &StencilStateReference }
    };
};
StencilState StencilStateType;

Variable RenderStateDepthClampEnabled;
Variable RenderStateDepthTestEnabled;
Variable RenderStateDepthWriteEnabled;
Variable RenderStateDepthBiasEnabled;
Variable RenderStateDepthBiasFactor;
Variable RenderStateDepthBiasClamp;
Variable RenderStateDepthBiasSlopeFactor;
Variable RenderStateDepthTestFunction;
Variable RenderStateDepthBoundsTestEnabled;
Variable RenderStateDepthBoundsMin;
Variable RenderStateDepthBoundsMax;
Variable RenderStateNoRasterization;
Variable RenderStateRasterize;
Variable RenderStateCull;
Variable RenderStateWindingOrder;
Variable RenderStateScissorEnabled;
Variable RenderStateStencilEnabled;
Variable RenderStateStencilFront;
Variable RenderStateStencilBack;
Variable RenderStateLogicOpEnabled;
Variable RenderStateLogicOp;
Variable RenderStateBlendEnabled;
IntExpression RenderStateBlendEnabledArraySize(8);
Variable RenderStateSourceBlend;
IntExpression RenderStateSourceBlendArraySize(8);
Variable RenderStateDestinationBlend;
IntExpression RenderStateDestinationBlendArraySize(8);
Variable RenderStateSourceAlphaBlend;
IntExpression RenderStateSourceAlphaBlendArraySize(8);
Variable RenderStateDestinationAlphaBlend;
IntExpression RenderStateDestinationAlphaBlendArraySize(8);
Variable RenderStateColorBlendOp;
IntExpression RenderStateColorBlendOpArraySize(8);
Variable RenderStateAlphaBlendOp;
IntExpression RenderStateAlphaBlendOpArraySize(8);
Variable RenderStateMask;
IntExpression RenderStateMaskArraySize(8);
RenderState::RenderState()
{
    this->name = "RenderState"_c;
    this->builtin = true;
    RenderStateDepthClampEnabled.name = "DepthClampEnabled"_c;
    RenderStateDepthClampEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateDepthClampEnabled)->typeSymbol = &Bool8Type;

    RenderStateDepthTestEnabled.name = "DepthTestEnabled"_c;
    RenderStateDepthTestEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateDepthTestEnabled)->typeSymbol = &Bool8Type;

    RenderStateDepthWriteEnabled.name = "DepthWriteEnabled"_c;
    RenderStateDepthWriteEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateDepthWriteEnabled)->typeSymbol = &Bool8Type;

    RenderStateDepthBiasEnabled.name = "DepthBiasEnabled"_c;
    RenderStateDepthBiasEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateDepthBiasEnabled)->typeSymbol = &Bool8Type;

    RenderStateDepthBiasFactor.name = "DepthBiasFactor"_c;
    RenderStateDepthBiasFactor.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&RenderStateDepthBiasFactor)->typeSymbol = &Float32Type;

    RenderStateDepthBiasClamp.name = "DepthBiasClamp"_c;
    RenderStateDepthBiasClamp.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&RenderStateDepthBiasClamp)->typeSymbol = &Float32Type;

    RenderStateDepthBiasSlopeFactor.name = "DepthBiasSlopeFactor"_c;
    RenderStateDepthBiasSlopeFactor.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&RenderStateDepthBiasSlopeFactor)->typeSymbol = &Float32Type;

    RenderStateDepthTestFunction.name = "DepthTestFunction"_c;
    RenderStateDepthTestFunction.type = Type::FullType{ CompareModeType.name };
    Symbol::Resolved(&RenderStateDepthTestFunction)->typeSymbol = &CompareModeType;

    RenderStateDepthBoundsTestEnabled.name = "DepthBoundsTestEnabled"_c;
    RenderStateDepthBoundsTestEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateDepthBoundsTestEnabled)->typeSymbol = &Bool8Type;

    RenderStateDepthBoundsMin.name = "DepthBoundsMin"_c;
    RenderStateDepthBoundsMin.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&RenderStateDepthBoundsMin)->typeSymbol = &Float32Type;

    RenderStateDepthBoundsMax.name = "DepthBoundsMax"_c;
    RenderStateDepthBoundsMax.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&RenderStateDepthBoundsMax)->typeSymbol = &Float32Type;

    RenderStateNoRasterization.name = "NoRasterization"_c;
    RenderStateNoRasterization.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateNoRasterization)->typeSymbol = &Bool8Type;

    RenderStateRasterize.name = "Rasterize"_c;
    RenderStateRasterize.type = Type::FullType{ RasterizationModeType.name };
    Symbol::Resolved(&RenderStateRasterize)->typeSymbol = &RasterizationModeType;

    RenderStateCull.name = "Cull"_c;
    RenderStateCull.type = Type::FullType{ CullFaceType.name };
    Symbol::Resolved(&RenderStateCull)->typeSymbol = &CullFaceType;

    RenderStateWindingOrder.name = "WindingOrder"_c;
    RenderStateWindingOrder.type = Type::FullType{ WindingOrderType.name };
    Symbol::Resolved(&RenderStateWindingOrder)->typeSymbol = &WindingOrderType;

    RenderStateScissorEnabled.name = "ScissorEnabled"_c;
    RenderStateScissorEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateScissorEnabled)->typeSymbol = &Bool8Type;

    RenderStateStencilEnabled.name = "StencilEnabled"_c;
    RenderStateStencilEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateStencilEnabled)->typeSymbol = &Bool8Type;

    RenderStateStencilFront.name = "StencilFront"_c;
    RenderStateStencilFront.type = Type::FullType{ StencilStateType.name };
    Symbol::Resolved(&RenderStateStencilFront)->typeSymbol = &StencilStateType;

    RenderStateStencilBack.name = "StencilBack"_c;
    RenderStateStencilBack.type = Type::FullType{ StencilStateType.name };
    Symbol::Resolved(&RenderStateStencilBack)->typeSymbol = &StencilStateType;

    RenderStateLogicOpEnabled.name = "LogicOpEnabled"_c;
    RenderStateLogicOpEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateLogicOpEnabled)->typeSymbol = &Bool8Type;

    RenderStateLogicOp.name = "LogicOp"_c;
    RenderStateLogicOp.type = Type::FullType{ LogicOpType.name };
    Symbol::Resolved(&RenderStateLogicOp)->typeSymbol = &LogicOpType;

    RenderStateBlendEnabled.name = "BlendEnabled"_c;
    RenderStateBlendEnabled.type = Type::FullType{ Bool8Type.name, {Type::FullType::Modifier::Array}, {&RenderStateBlendEnabledArraySize} };
    Symbol::Resolved(&RenderStateBlendEnabled)->typeSymbol = &Bool8Type;

    RenderStateSourceBlend.name = "SourceBlend"_c;
    RenderStateSourceBlend.type = Type::FullType{ BlendFactorType.name, {Type::FullType::Modifier::Array}, {&RenderStateSourceBlendArraySize} };
    Symbol::Resolved(&RenderStateSourceBlend)->typeSymbol = &BlendFactorType;

    RenderStateDestinationBlend.name = "DestinationBlend"_c;
    RenderStateDestinationBlend.type = Type::FullType{ BlendFactorType.name, {Type::FullType::Modifier::Array}, {&RenderStateDestinationBlendArraySize} };
    Symbol::Resolved(&RenderStateDestinationBlend)->typeSymbol = &BlendFactorType;

    RenderStateSourceAlphaBlend.name = "SourceAlphaBlend"_c;
    RenderStateSourceAlphaBlend.type = Type::FullType{ BlendFactorType.name, {Type::FullType::Modifier::Array}, {&RenderStateSourceAlphaBlendArraySize} };
    Symbol::Resolved(&RenderStateSourceAlphaBlend)->typeSymbol = &BlendFactorType;

    RenderStateDestinationAlphaBlend.name = "DestinationAlphaBlend"_c;
    RenderStateDestinationAlphaBlend.type = Type::FullType{ BlendFactorType.name, {Type::FullType::Modifier::Array}, {&RenderStateDestinationAlphaBlendArraySize} };
    Symbol::Resolved(&RenderStateDestinationAlphaBlend)->typeSymbol = &BlendFactorType;

    RenderStateColorBlendOp.name = "ColorBlendOp"_c;
    RenderStateColorBlendOp.type = Type::FullType{ BlendOperationType.name, {Type::FullType::Modifier::Array}, {&RenderStateColorBlendOpArraySize} };
    Symbol::Resolved(&RenderStateColorBlendOp)->typeSymbol = &BlendOperationType;

    RenderStateAlphaBlendOp.name = "AlphaBlendOp"_c;
    RenderStateAlphaBlendOp.type = Type::FullType{ BlendOperationType.name, {Type::FullType::Modifier::Array}, {&RenderStateAlphaBlendOpArraySize} };
    Symbol::Resolved(&RenderStateAlphaBlendOp)->typeSymbol = &BlendOperationType;

    RenderStateMask.name = "Mask"_c;
    RenderStateMask.type = Type::FullType{ BlendColorMaskType.name, {Type::FullType::Modifier::Array}, {&RenderStateMaskArraySize} };
    Symbol::Resolved(&RenderStateMask)->typeSymbol = &BlendColorMaskType;

    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 29>{
        std::pair{ "ScissorEnabled"_h, &RenderStateScissorEnabled },
        std::pair{ "WindingOrder"_h, &RenderStateWindingOrder },
        std::pair{ "DepthBoundsTestEnabled"_h, &RenderStateDepthBoundsTestEnabled },
        std::pair{ "ColorBlendOp"_h, &RenderStateColorBlendOp },
        std::pair{ "BlendEnabled"_h, &RenderStateBlendEnabled },
        std::pair{ "Rasterize"_h, &RenderStateRasterize },
        std::pair{ "StencilEnabled"_h, &RenderStateStencilEnabled },
        std::pair{ "Mask"_h, &RenderStateMask },
        std::pair{ "DepthBiasEnabled"_h, &RenderStateDepthBiasEnabled },
        std::pair{ "DepthBoundsMax"_h, &RenderStateDepthBoundsMax },
        std::pair{ "DepthBoundsMin"_h, &RenderStateDepthBoundsMin },
        std::pair{ "StencilFront"_h, &RenderStateStencilFront },
        std::pair{ "Cull"_h, &RenderStateCull },
        std::pair{ "DestinationBlend"_h, &RenderStateDestinationBlend },
        std::pair{ "DepthTestFunction"_h, &RenderStateDepthTestFunction },
        std::pair{ "DepthTestEnabled"_h, &RenderStateDepthTestEnabled },
        std::pair{ "SourceAlphaBlend"_h, &RenderStateSourceAlphaBlend },
        std::pair{ "DepthWriteEnabled"_h, &RenderStateDepthWriteEnabled },
        std::pair{ "DepthClampEnabled"_h, &RenderStateDepthClampEnabled },
        std::pair{ "StencilBack"_h, &RenderStateStencilBack },
        std::pair{ "DepthBiasSlopeFactor"_h, &RenderStateDepthBiasSlopeFactor },
        std::pair{ "DestinationAlphaBlend"_h, &RenderStateDestinationAlphaBlend },
        std::pair{ "LogicOp"_h, &RenderStateLogicOp },
        std::pair{ "NoRasterization"_h, &RenderStateNoRasterization },
        std::pair{ "SourceBlend"_h, &RenderStateSourceBlend },
        std::pair{ "AlphaBlendOp"_h, &RenderStateAlphaBlendOp },
        std::pair{ "DepthBiasClamp"_h, &RenderStateDepthBiasClamp },
        std::pair{ "LogicOpEnabled"_h, &RenderStateLogicOpEnabled },
        std::pair{ "DepthBiasFactor"_h, &RenderStateDepthBiasFactor }
    };
};
RenderState RenderStateType;

Variable SamplerStateAddress;
Variable SamplerStateAddressU;
Variable SamplerStateAddressV;
Variable SamplerStateAddressW;
Variable SamplerStateFilter;
Variable SamplerStateMinFilter;
Variable SamplerStateMagFilter;
Variable SamplerStateMipFilter;
Variable SamplerStateMipLodBias;
Variable SamplerStateAnisotropyEnabled;
Variable SamplerStateMaxAnisotropy;
Variable SamplerStateCompareEnabled;
Variable SamplerStateCompareFunction;
Variable SamplerStateMinLod;
Variable SamplerStateMaxLod;
Variable SamplerStateBorder;
Variable SamplerStateUnnormalizedSamplingEnabled;
SamplerState::SamplerState()
{
    this->name = "SamplerState"_c;
    this->builtin = true;
    SamplerStateAddress.name = "Address"_c;
    SamplerStateAddress.type = Type::FullType{ AddressModeType.name };
    Symbol::Resolved(&SamplerStateAddress)->typeSymbol = &AddressModeType;

    SamplerStateAddressU.name = "AddressU"_c;
    SamplerStateAddressU.type = Type::FullType{ AddressModeType.name };
    Symbol::Resolved(&SamplerStateAddressU)->typeSymbol = &AddressModeType;

    SamplerStateAddressV.name = "AddressV"_c;
    SamplerStateAddressV.type = Type::FullType{ AddressModeType.name };
    Symbol::Resolved(&SamplerStateAddressV)->typeSymbol = &AddressModeType;

    SamplerStateAddressW.name = "AddressW"_c;
    SamplerStateAddressW.type = Type::FullType{ AddressModeType.name };
    Symbol::Resolved(&SamplerStateAddressW)->typeSymbol = &AddressModeType;

    SamplerStateFilter.name = "Filter"_c;
    SamplerStateFilter.type = Type::FullType{ FilterModeType.name };
    Symbol::Resolved(&SamplerStateFilter)->typeSymbol = &FilterModeType;

    SamplerStateMinFilter.name = "MinFilter"_c;
    SamplerStateMinFilter.type = Type::FullType{ FilterModeType.name };
    Symbol::Resolved(&SamplerStateMinFilter)->typeSymbol = &FilterModeType;

    SamplerStateMagFilter.name = "MagFilter"_c;
    SamplerStateMagFilter.type = Type::FullType{ FilterModeType.name };
    Symbol::Resolved(&SamplerStateMagFilter)->typeSymbol = &FilterModeType;

    SamplerStateMipFilter.name = "MipFilter"_c;
    SamplerStateMipFilter.type = Type::FullType{ FilterModeType.name };
    Symbol::Resolved(&SamplerStateMipFilter)->typeSymbol = &FilterModeType;

    SamplerStateMipLodBias.name = "MipLodBias"_c;
    SamplerStateMipLodBias.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&SamplerStateMipLodBias)->typeSymbol = &Float32Type;

    SamplerStateAnisotropyEnabled.name = "AnisotropyEnabled"_c;
    SamplerStateAnisotropyEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&SamplerStateAnisotropyEnabled)->typeSymbol = &Bool8Type;

    SamplerStateMaxAnisotropy.name = "MaxAnisotropy"_c;
    SamplerStateMaxAnisotropy.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SamplerStateMaxAnisotropy)->typeSymbol = &UInt32Type;

    SamplerStateCompareEnabled.name = "CompareEnabled"_c;
    SamplerStateCompareEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&SamplerStateCompareEnabled)->typeSymbol = &Bool8Type;

    SamplerStateCompareFunction.name = "CompareFunction"_c;
    SamplerStateCompareFunction.type = Type::FullType{ CompareModeType.name };
    Symbol::Resolved(&SamplerStateCompareFunction)->typeSymbol = &CompareModeType;

    SamplerStateMinLod.name = "MinLod"_c;
    SamplerStateMinLod.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&SamplerStateMinLod)->typeSymbol = &Float32Type;

    SamplerStateMaxLod.name = "MaxLod"_c;
    SamplerStateMaxLod.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&SamplerStateMaxLod)->typeSymbol = &Float32Type;

    SamplerStateBorder.name = "Border"_c;
    SamplerStateBorder.type = Type::FullType{ ColorType.name };
    Symbol::Resolved(&SamplerStateBorder)->typeSymbol = &ColorType;

    SamplerStateUnnormalizedSamplingEnabled.name = "UnnormalizedSamplingEnabled"_c;
    SamplerStateUnnormalizedSamplingEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&SamplerStateUnnormalizedSamplingEnabled)->typeSymbol = &Bool8Type;

    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 17>{
        std::pair{ "MinLod"_h, &SamplerStateMinLod },
        std::pair{ "AddressW"_h, &SamplerStateAddressW },
        std::pair{ "AddressV"_h, &SamplerStateAddressV },
        std::pair{ "AddressU"_h, &SamplerStateAddressU },
        std::pair{ "MinFilter"_h, &SamplerStateMinFilter },
        std::pair{ "MipLodBias"_h, &SamplerStateMipLodBias },
        std::pair{ "MaxAnisotropy"_h, &SamplerStateMaxAnisotropy },
        std::pair{ "Filter"_h, &SamplerStateFilter },
        std::pair{ "Border"_h, &SamplerStateBorder },
        std::pair{ "MagFilter"_h, &SamplerStateMagFilter },
        std::pair{ "AnisotropyEnabled"_h, &SamplerStateAnisotropyEnabled },
        std::pair{ "UnnormalizedSamplingEnabled"_h, &SamplerStateUnnormalizedSamplingEnabled },
        std::pair{ "CompareFunction"_h, &SamplerStateCompareFunction },
        std::pair{ "CompareEnabled"_h, &SamplerStateCompareEnabled },
        std::pair{ "MipFilter"_h, &SamplerStateMipFilter },
        std::pair{ "MaxLod"_h, &SamplerStateMaxLod },
        std::pair{ "Address"_h, &SamplerStateAddress }
    };
};
SamplerState SamplerStateType;

Variable ProgramVertexShader;
Variable ProgramHullShader;
Variable ProgramDomainShader;
Variable ProgramGeometryShader;
Variable ProgramPixelShader;
Variable ProgramComputeShader;
Variable ProgramTaskShader;
Variable ProgramMeshShader;
Variable ProgramRayGenerationShader;
Variable ProgramRayAnyHitShader;
Variable ProgramRayClosestHitShader;
Variable ProgramRayMissShader;
Variable ProgramRayIntersectionShader;
Variable ProgramRayCallableShader;
Variable ProgramRenderState;
Program::Program()
{
    this->name = "Program"_c;
    this->builtin = true;
    ProgramVertexShader.name = "VertexShader"_c;
    ProgramVertexShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramVertexShader)->typeSymbol = &FunctionPtrType;

    ProgramHullShader.name = "HullShader"_c;
    ProgramHullShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramHullShader)->typeSymbol = &FunctionPtrType;

    ProgramDomainShader.name = "DomainShader"_c;
    ProgramDomainShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramDomainShader)->typeSymbol = &FunctionPtrType;

    ProgramGeometryShader.name = "GeometryShader"_c;
    ProgramGeometryShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramGeometryShader)->typeSymbol = &FunctionPtrType;

    ProgramPixelShader.name = "PixelShader"_c;
    ProgramPixelShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramPixelShader)->typeSymbol = &FunctionPtrType;

    ProgramComputeShader.name = "ComputeShader"_c;
    ProgramComputeShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramComputeShader)->typeSymbol = &FunctionPtrType;

    ProgramTaskShader.name = "TaskShader"_c;
    ProgramTaskShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramTaskShader)->typeSymbol = &FunctionPtrType;

    ProgramMeshShader.name = "MeshShader"_c;
    ProgramMeshShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramMeshShader)->typeSymbol = &FunctionPtrType;

    ProgramRayGenerationShader.name = "RayGenerationShader"_c;
    ProgramRayGenerationShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayGenerationShader)->typeSymbol = &FunctionPtrType;

    ProgramRayAnyHitShader.name = "RayAnyHitShader"_c;
    ProgramRayAnyHitShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayAnyHitShader)->typeSymbol = &FunctionPtrType;

    ProgramRayClosestHitShader.name = "RayClosestHitShader"_c;
    ProgramRayClosestHitShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayClosestHitShader)->typeSymbol = &FunctionPtrType;

    ProgramRayMissShader.name = "RayMissShader"_c;
    ProgramRayMissShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayMissShader)->typeSymbol = &FunctionPtrType;

    ProgramRayIntersectionShader.name = "RayIntersectionShader"_c;
    ProgramRayIntersectionShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayIntersectionShader)->typeSymbol = &FunctionPtrType;

    ProgramRayCallableShader.name = "RayCallableShader"_c;
    ProgramRayCallableShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayCallableShader)->typeSymbol = &FunctionPtrType;

    ProgramRenderState.name = "RenderState"_c;
    ProgramRenderState.type = Type::FullType{ RenderStateType.name };
    Symbol::Resolved(&ProgramRenderState)->typeSymbol = &RenderStateType;

    this->scope.symbolLookup = StaticMap<HashString, Symbol*, 15>{
        std::pair{ "PixelShader"_h, &ProgramPixelShader },
        std::pair{ "RayGenerationShader"_h, &ProgramRayGenerationShader },
        std::pair{ "RayIntersectionShader"_h, &ProgramRayIntersectionShader },
        std::pair{ "ComputeShader"_h, &ProgramComputeShader },
        std::pair{ "DomainShader"_h, &ProgramDomainShader },
        std::pair{ "RayAnyHitShader"_h, &ProgramRayAnyHitShader },
        std::pair{ "RayClosestHitShader"_h, &ProgramRayClosestHitShader },
        std::pair{ "RayCallableShader"_h, &ProgramRayCallableShader },
        std::pair{ "TaskShader"_h, &ProgramTaskShader },
        std::pair{ "MeshShader"_h, &ProgramMeshShader },
        std::pair{ "RayMissShader"_h, &ProgramRayMissShader },
        std::pair{ "RenderState"_h, &ProgramRenderState },
        std::pair{ "VertexShader"_h, &ProgramVertexShader },
        std::pair{ "GeometryShader"_h, &ProgramGeometryShader },
        std::pair{ "HullShader"_h, &ProgramHullShader }
    };
};
Program ProgramType;


} // namespace GPULang

