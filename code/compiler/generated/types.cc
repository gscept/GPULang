//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "types.h"
namespace GPULang
{
Float32::Float32()
{
    this->name = "f32";
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    // Conversion from UInt32
    Float32_convert_UInt32_arg0.name = "_arg0"_c;
    Float32_convert_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32_convert_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32_convert_UInt32.name = "f32"_c;
    Float32_convert_UInt32.returnType = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32_convert_UInt32)->returnTypeSymbol = &Float32Type;

    // Conversion from Int32
    Float32_convert_Int32_arg0.name = "_arg0"_c;
    Float32_convert_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32_convert_Int32_arg0)->typeSymbol = &Int32Type;
    Float32_convert_Int32.name = "f32"_c;
    Float32_convert_Int32.returnType = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32_convert_Int32)->returnTypeSymbol = &Float32Type;

    // Conversion from Bool8
    Float32_convert_Bool8_arg0.name = "_arg0"_c;
    Float32_convert_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Float32_convert_Bool8_arg0)->typeSymbol = &Bool8Type;
    Float32_convert_Bool8.name = "f32"_c;
    Float32_convert_Bool8.returnType = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32_convert_Bool8)->returnTypeSymbol = &Float32Type;

    // Conversion from Float16
    Float32_convert_Float16_arg0.name = "_arg0"_c;
    Float32_convert_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32_convert_Float16_arg0)->typeSymbol = &Float16Type;
    Float32_convert_Float16.name = "f32"_c;
    Float32_convert_Float16.returnType = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32_convert_Float16)->returnTypeSymbol = &Float32Type;

    // Conversion from UInt16
    Float32_convert_UInt16_arg0.name = "_arg0"_c;
    Float32_convert_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32_convert_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32_convert_UInt16.name = "f32"_c;
    Float32_convert_UInt16.returnType = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32_convert_UInt16)->returnTypeSymbol = &Float32Type;

    // Conversion from Int16
    Float32_convert_Int16_arg0.name = "_arg0"_c;
    Float32_convert_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32_convert_Int16_arg0)->typeSymbol = &Int16Type;
    Float32_convert_Int16.name = "f32"_c;
    Float32_convert_Int16.returnType = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32_convert_Int16)->returnTypeSymbol = &Float32Type;

    // Construct with Float32
    Float32_ctor0_arg0.name = "_arg0"_c;
    Float32_ctor0_arg0.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32_ctor0_arg0)->typeSymbol = &Float32Type;
    Float32_ctor0_Float32.name = "0"_c;
    Float32_ctor0_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_ctor0_Float32)->returnTypeSymbol = &Float32Type;

    // operator[](i32)
    Float32_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float32_operator_index_Int32.name = "operator[]"_c;
    Float32_operator_index_Int32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    // operator[](u32)
    Float32_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32_operator_index_UInt32.name = "operator[]"_c;
    Float32_operator_index_UInt32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    // operator[](i16)
    Float32_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float32_operator_index_Int16.name = "operator[]"_c;
    Float32_operator_index_Int16.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    // operator[](u16)
    Float32_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32_operator_index_UInt16.name = "operator[]"_c;
    Float32_operator_index_UInt16.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    // operator+(f32)
    Float32_operator_add_Float32_arg0.name = "_arg0"_c;
    Float32_operator_add_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_add_Float32_arg0)->typeSymbol = &Float32Type;
    Float32_operator_add_Float32.name = "operator+"_c;
    Float32_operator_add_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_add_Float32)->returnTypeSymbol = &Float32Type;

    // operator-(f32)
    Float32_operator_sub_Float32_arg0.name = "_arg0"_c;
    Float32_operator_sub_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_sub_Float32_arg0)->typeSymbol = &Float32Type;
    Float32_operator_sub_Float32.name = "operator-"_c;
    Float32_operator_sub_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_sub_Float32)->returnTypeSymbol = &Float32Type;

    // operator*(f32)
    Float32_operator_mul_Float32_arg0.name = "_arg0"_c;
    Float32_operator_mul_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_mul_Float32_arg0)->typeSymbol = &Float32Type;
    Float32_operator_mul_Float32.name = "operator*"_c;
    Float32_operator_mul_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_mul_Float32)->returnTypeSymbol = &Float32Type;

    // operator/(f32)
    Float32_operator_div_Float32_arg0.name = "_arg0"_c;
    Float32_operator_div_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_div_Float32_arg0)->typeSymbol = &Float32Type;
    Float32_operator_div_Float32.name = "operator/"_c;
    Float32_operator_div_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_div_Float32)->returnTypeSymbol = &Float32Type;

    // operator%(f32)
    Float32_operator_mod_Float32_arg0.name = "_arg0"_c;
    Float32_operator_mod_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_mod_Float32_arg0)->typeSymbol = &Float32Type;
    Float32_operator_mod_Float32.name = "operator%"_c;
    Float32_operator_mod_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_mod_Float32)->returnTypeSymbol = &Float32Type;

    // operator+=(f32)
    Float32_operator_addasg_Float32_arg0.name = "_arg0"_c;
    Float32_operator_addasg_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_addasg_Float32_arg0)->typeSymbol = &Float32Type;
    Float32_operator_addasg_Float32.name = "operator+="_c;
    Float32_operator_addasg_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_addasg_Float32)->returnTypeSymbol = &Float32Type;

    // operator-=(f32)
    Float32_operator_subasg_Float32_arg0.name = "_arg0"_c;
    Float32_operator_subasg_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_subasg_Float32_arg0)->typeSymbol = &Float32Type;
    Float32_operator_subasg_Float32.name = "operator-="_c;
    Float32_operator_subasg_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_subasg_Float32)->returnTypeSymbol = &Float32Type;

    // operator*=(f32)
    Float32_operator_mulasg_Float32_arg0.name = "_arg0"_c;
    Float32_operator_mulasg_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_mulasg_Float32_arg0)->typeSymbol = &Float32Type;
    Float32_operator_mulasg_Float32.name = "operator*="_c;
    Float32_operator_mulasg_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_mulasg_Float32)->returnTypeSymbol = &Float32Type;

    // operator/=(f32)
    Float32_operator_divasg_Float32_arg0.name = "_arg0"_c;
    Float32_operator_divasg_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_divasg_Float32_arg0)->typeSymbol = &Float32Type;
    Float32_operator_divasg_Float32.name = "operator/="_c;
    Float32_operator_divasg_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_divasg_Float32)->returnTypeSymbol = &Float32Type;

    // operator<(f32)
    Float32_operator_lt_Float32_arg0.name = "_arg0"_c;
    Float32_operator_lt_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_lt_Float32_arg0)->typeSymbol = &Float32Type;
    Float32_operator_lt_Float32.name = "operator<"_c;
    Float32_operator_lt_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_lt_Float32)->returnTypeSymbol = &Float32Type;

    // operator<=(f32)
    Float32_operator_lte_Float32_arg0.name = "_arg0"_c;
    Float32_operator_lte_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_lte_Float32_arg0)->typeSymbol = &Float32Type;
    Float32_operator_lte_Float32.name = "operator<="_c;
    Float32_operator_lte_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_lte_Float32)->returnTypeSymbol = &Float32Type;

    // operator>(f32)
    Float32_operator_gt_Float32_arg0.name = "_arg0"_c;
    Float32_operator_gt_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_gt_Float32_arg0)->typeSymbol = &Float32Type;
    Float32_operator_gt_Float32.name = "operator>"_c;
    Float32_operator_gt_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_gt_Float32)->returnTypeSymbol = &Float32Type;

    // operator>=(f32)
    Float32_operator_gte_Float32_arg0.name = "_arg0"_c;
    Float32_operator_gte_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_gte_Float32_arg0)->typeSymbol = &Float32Type;
    Float32_operator_gte_Float32.name = "operator>="_c;
    Float32_operator_gte_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_gte_Float32)->returnTypeSymbol = &Float32Type;

    // operator==(f32)
    Float32_operator_eq_Float32_arg0.name = "_arg0"_c;
    Float32_operator_eq_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_eq_Float32_arg0)->typeSymbol = &Float32Type;
    Float32_operator_eq_Float32.name = "operator=="_c;
    Float32_operator_eq_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_eq_Float32)->returnTypeSymbol = &Float32Type;

    // operator!=(f32)
    Float32_operator_neq_Float32_arg0.name = "_arg0"_c;
    Float32_operator_neq_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_neq_Float32_arg0)->typeSymbol = &Float32Type;
    Float32_operator_neq_Float32.name = "operator!="_c;
    Float32_operator_neq_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32_operator_neq_Float32)->returnTypeSymbol = &Float32Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f32"_c, &Float32_convert_UInt32 },
        std::pair{ "f32(u32)"_c, &Float32_convert_UInt32 },
        std::pair{ "f32"_c, &Float32_convert_Int32 },
        std::pair{ "f32(i32)"_c, &Float32_convert_Int32 },
        std::pair{ "f32"_c, &Float32_convert_Bool8 },
        std::pair{ "f32(b8)"_c, &Float32_convert_Bool8 },
        std::pair{ "f32"_c, &Float32_convert_Float16 },
        std::pair{ "f32(f16)"_c, &Float32_convert_Float16 },
        std::pair{ "f32"_c, &Float32_convert_UInt16 },
        std::pair{ "f32(u16)"_c, &Float32_convert_UInt16 },
        std::pair{ "f32"_c, &Float32_convert_Int16 },
        std::pair{ "f32(i16)"_c, &Float32_convert_Int16 },
        std::pair{ "f32"_c, &Float32_ctor0_Float32},
        std::pair{ "f32(f32)"_c, &Float32_ctor0_Float32},
        std::pair{ "operator[](i32)"_c, &Float32_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float32_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float32_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float32_operator_index_UInt16},
        std::pair{ "operator+(f32)"_c, &Float32_operator_add_Float32},
        std::pair{ "operator-(f32)"_c, &Float32_operator_sub_Float32},
        std::pair{ "operator*(f32)"_c, &Float32_operator_mul_Float32},
        std::pair{ "operator/(f32)"_c, &Float32_operator_div_Float32},
        std::pair{ "operator%(f32)"_c, &Float32_operator_mod_Float32},
        std::pair{ "operator+=(f32)"_c, &Float32_operator_addasg_Float32},
        std::pair{ "operator-=(f32)"_c, &Float32_operator_subasg_Float32},
        std::pair{ "operator*=(f32)"_c, &Float32_operator_mulasg_Float32},
        std::pair{ "operator/=(f32)"_c, &Float32_operator_divasg_Float32},
        std::pair{ "operator<(f32)"_c, &Float32_operator_lt_Float32},
        std::pair{ "operator<=(f32)"_c, &Float32_operator_lte_Float32},
        std::pair{ "operator>(f32)"_c, &Float32_operator_gt_Float32},
        std::pair{ "operator>=(f32)"_c, &Float32_operator_gte_Float32},
        std::pair{ "operator==(f32)"_c, &Float32_operator_eq_Float32},
        std::pair{ "operator!=(f32)"_c, &Float32_operator_neq_Float32}
    }
    };   
}

Float32x2::Float32x2()
{
    this->name = "f32";
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    // Conversion from Float32x2
    Float32x2_convert_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_convert_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_convert_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_convert_Float32x2.name = "f32x2"_c;
    Float32x2_convert_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x2_convert_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // Splat with Float32
    Float32x2_splat_Float32_arg0.name = "_arg0"_c;
    Float32x2_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x2_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Float32x2_splat_Float32.name = "f32x2"_c;
    Float32x2_splat_Float32.returnType = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x2_splat_Float32)->returnTypeSymbol = &Float32x2Type;

    // Conversion from UInt32x2
    Float32x2_convert_UInt32x2_arg0.name = "_arg0"_c;
    Float32x2_convert_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&Float32x2_convert_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Float32x2_convert_UInt32x2.name = "f32x2"_c;
    Float32x2_convert_UInt32x2.returnType = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x2_convert_UInt32x2)->returnTypeSymbol = &Float32x2Type;

    // Splat with UInt32
    Float32x2_splat_UInt32_arg0.name = "_arg0"_c;
    Float32x2_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x2_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x2_splat_UInt32.name = "f32x2"_c;
    Float32x2_splat_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x2_splat_UInt32)->returnTypeSymbol = &Float32x2Type;

    // Conversion from Int32x2
    Float32x2_convert_Int32x2_arg0.name = "_arg0"_c;
    Float32x2_convert_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Float32x2_convert_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Float32x2_convert_Int32x2.name = "f32x2"_c;
    Float32x2_convert_Int32x2.returnType = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x2_convert_Int32x2)->returnTypeSymbol = &Float32x2Type;

    // Splat with Int32
    Float32x2_splat_Int32_arg0.name = "_arg0"_c;
    Float32x2_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x2_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x2_splat_Int32.name = "f32x2"_c;
    Float32x2_splat_Int32.returnType = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x2_splat_Int32)->returnTypeSymbol = &Float32x2Type;

    // Conversion from Bool8x2
    Float32x2_convert_Bool8x2_arg0.name = "_arg0"_c;
    Float32x2_convert_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Float32x2_convert_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Float32x2_convert_Bool8x2.name = "f32x2"_c;
    Float32x2_convert_Bool8x2.returnType = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x2_convert_Bool8x2)->returnTypeSymbol = &Float32x2Type;

    // Splat with Bool8
    Float32x2_splat_Bool8_arg0.name = "_arg0"_c;
    Float32x2_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Float32x2_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    Float32x2_splat_Bool8.name = "f32x2"_c;
    Float32x2_splat_Bool8.returnType = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x2_splat_Bool8)->returnTypeSymbol = &Float32x2Type;

    // Conversion from Float16x2
    Float32x2_convert_Float16x2_arg0.name = "_arg0"_c;
    Float32x2_convert_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float32x2_convert_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float32x2_convert_Float16x2.name = "f32x2"_c;
    Float32x2_convert_Float16x2.returnType = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x2_convert_Float16x2)->returnTypeSymbol = &Float32x2Type;

    // Splat with Float16
    Float32x2_splat_Float16_arg0.name = "_arg0"_c;
    Float32x2_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32x2_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Float32x2_splat_Float16.name = "f32x2"_c;
    Float32x2_splat_Float16.returnType = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x2_splat_Float16)->returnTypeSymbol = &Float32x2Type;

    // Conversion from UInt16x2
    Float32x2_convert_UInt16x2_arg0.name = "_arg0"_c;
    Float32x2_convert_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&Float32x2_convert_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Float32x2_convert_UInt16x2.name = "f32x2"_c;
    Float32x2_convert_UInt16x2.returnType = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x2_convert_UInt16x2)->returnTypeSymbol = &Float32x2Type;

    // Splat with UInt16
    Float32x2_splat_UInt16_arg0.name = "_arg0"_c;
    Float32x2_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x2_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x2_splat_UInt16.name = "f32x2"_c;
    Float32x2_splat_UInt16.returnType = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x2_splat_UInt16)->returnTypeSymbol = &Float32x2Type;

    // Conversion from Int16x2
    Float32x2_convert_Int16x2_arg0.name = "_arg0"_c;
    Float32x2_convert_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Float32x2_convert_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Float32x2_convert_Int16x2.name = "f32x2"_c;
    Float32x2_convert_Int16x2.returnType = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x2_convert_Int16x2)->returnTypeSymbol = &Float32x2Type;

    // Splat with Int16
    Float32x2_splat_Int16_arg0.name = "_arg0"_c;
    Float32x2_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x2_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x2_splat_Int16.name = "f32x2"_c;
    Float32x2_splat_Int16.returnType = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x2_splat_Int16)->returnTypeSymbol = &Float32x2Type;

    // Construct with Float32, Float32
    Float32x2_ctor0_arg0.name = "_arg0"_c;
    Float32x2_ctor0_arg0.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x2_ctor0_arg0)->typeSymbol = &Float32Type;
    Float32x2_ctor0_arg1.name = "_arg1"_c;
    Float32x2_ctor0_arg1.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x2_ctor0_arg1)->typeSymbol = &Float32Type;
    Float32x2_ctor0_Float32_Float32.name = "0"_c;
    Float32x2_ctor0_Float32_Float32.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_ctor0_Float32_Float32)->returnTypeSymbol = &Float32x2Type;

    // operator[](i32)
    Float32x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x2_operator_index_Int32.name = "operator[]"_c;
    Float32x2_operator_index_Int32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x2_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    // operator[](u32)
    Float32x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x2_operator_index_UInt32.name = "operator[]"_c;
    Float32x2_operator_index_UInt32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x2_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    // operator[](i16)
    Float32x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x2_operator_index_Int16.name = "operator[]"_c;
    Float32x2_operator_index_Int16.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x2_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    // operator[](u16)
    Float32x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x2_operator_index_UInt16.name = "operator[]"_c;
    Float32x2_operator_index_UInt16.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x2_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    // operator+(f32x2)
    Float32x2_operator_add_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_add_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_add_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_operator_add_Float32x2.name = "operator+"_c;
    Float32x2_operator_add_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_add_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // operator-(f32x2)
    Float32x2_operator_sub_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_sub_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_sub_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_operator_sub_Float32x2.name = "operator-"_c;
    Float32x2_operator_sub_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_sub_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // operator*(f32x2)
    Float32x2_operator_mul_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_mul_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_operator_mul_Float32x2.name = "operator*"_c;
    Float32x2_operator_mul_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // operator/(f32x2)
    Float32x2_operator_div_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_div_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_div_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_operator_div_Float32x2.name = "operator/"_c;
    Float32x2_operator_div_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_div_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // operator%(f32x2)
    Float32x2_operator_mod_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_mod_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_mod_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_operator_mod_Float32x2.name = "operator%"_c;
    Float32x2_operator_mod_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_mod_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // operator+=(f32x2)
    Float32x2_operator_addasg_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_addasg_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_addasg_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_operator_addasg_Float32x2.name = "operator+="_c;
    Float32x2_operator_addasg_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_addasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // operator-=(f32x2)
    Float32x2_operator_subasg_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_subasg_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_subasg_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_operator_subasg_Float32x2.name = "operator-="_c;
    Float32x2_operator_subasg_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_subasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // operator*=(f32x2)
    Float32x2_operator_mulasg_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_mulasg_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_mulasg_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_operator_mulasg_Float32x2.name = "operator*="_c;
    Float32x2_operator_mulasg_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_mulasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // operator/=(f32x2)
    Float32x2_operator_divasg_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_divasg_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_divasg_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_operator_divasg_Float32x2.name = "operator/="_c;
    Float32x2_operator_divasg_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_divasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // operator<(f32x2)
    Float32x2_operator_lt_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_lt_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_lt_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_operator_lt_Float32x2.name = "operator<"_c;
    Float32x2_operator_lt_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_lt_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // operator<=(f32x2)
    Float32x2_operator_lte_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_lte_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_lte_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_operator_lte_Float32x2.name = "operator<="_c;
    Float32x2_operator_lte_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_lte_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // operator>(f32x2)
    Float32x2_operator_gt_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_gt_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_gt_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_operator_gt_Float32x2.name = "operator>"_c;
    Float32x2_operator_gt_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_gt_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // operator>=(f32x2)
    Float32x2_operator_gte_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_gte_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_gte_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_operator_gte_Float32x2.name = "operator>="_c;
    Float32x2_operator_gte_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_gte_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // operator==(f32x2)
    Float32x2_operator_eq_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_eq_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_eq_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_operator_eq_Float32x2.name = "operator=="_c;
    Float32x2_operator_eq_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_eq_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // operator!=(f32x2)
    Float32x2_operator_neq_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_neq_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_neq_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float32x2_operator_neq_Float32x2.name = "operator!="_c;
    Float32x2_operator_neq_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_neq_Float32x2)->returnTypeSymbol = &Float32x2Type;

    // operator*(f32)
    Float32x2_operator_scale_Float32x2_Float32_arg0.name = "_arg0"_c;
    Float32x2_operator_scale_Float32x2_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x2_operator_scale_Float32x2_Float32_arg0)->typeSymbol = &Float32Type;
    Float32x2_operator_scale_Float32x2_Float32.name = "operator*"_c;
    Float32x2_operator_scale_Float32x2_Float32.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_scale_Float32x2_Float32)->returnTypeSymbol = &Float32x2Type;

    // operator*(f16)
    Float32x2_operator_scale_Float32x2_Float16_arg0.name = "_arg0"_c;
    Float32x2_operator_scale_Float32x2_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32x2_operator_scale_Float32x2_Float16_arg0)->typeSymbol = &Float16Type;
    Float32x2_operator_scale_Float32x2_Float16.name = "operator*"_c;
    Float32x2_operator_scale_Float32x2_Float16.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_scale_Float32x2_Float16)->returnTypeSymbol = &Float32x2Type;

    // operator*(u32)
    Float32x2_operator_scale_Float32x2_UInt32_arg0.name = "_arg0"_c;
    Float32x2_operator_scale_Float32x2_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x2_operator_scale_Float32x2_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x2_operator_scale_Float32x2_UInt32.name = "operator*"_c;
    Float32x2_operator_scale_Float32x2_UInt32.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_scale_Float32x2_UInt32)->returnTypeSymbol = &Float32x2Type;

    // operator*(u16)
    Float32x2_operator_scale_Float32x2_UInt16_arg0.name = "_arg0"_c;
    Float32x2_operator_scale_Float32x2_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x2_operator_scale_Float32x2_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x2_operator_scale_Float32x2_UInt16.name = "operator*"_c;
    Float32x2_operator_scale_Float32x2_UInt16.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_scale_Float32x2_UInt16)->returnTypeSymbol = &Float32x2Type;

    // operator*(i32)
    Float32x2_operator_scale_Float32x2_Int32_arg0.name = "_arg0"_c;
    Float32x2_operator_scale_Float32x2_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x2_operator_scale_Float32x2_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x2_operator_scale_Float32x2_Int32.name = "operator*"_c;
    Float32x2_operator_scale_Float32x2_Int32.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_scale_Float32x2_Int32)->returnTypeSymbol = &Float32x2Type;

    // operator*(i16)
    Float32x2_operator_scale_Float32x2_Int16_arg0.name = "_arg0"_c;
    Float32x2_operator_scale_Float32x2_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x2_operator_scale_Float32x2_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x2_operator_scale_Float32x2_Int16.name = "operator*"_c;
    Float32x2_operator_scale_Float32x2_Int16.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_scale_Float32x2_Int16)->returnTypeSymbol = &Float32x2Type;

    // operator*(f32x2x2)
    Float32x2_operator_mul_Float32x2x2_arg0.name = "_arg0"_c;
    Float32x2_operator_mul_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Float32x2_operator_mul_Float32x2x2.name = "operator*"_c;
    Float32x2_operator_mul_Float32x2x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2x2)->returnTypeSymbol = &Float32x2Type;

    // operator*(f32x2x3)
    Float32x2_operator_mul_Float32x2x3_arg0.name = "_arg0"_c;
    Float32x2_operator_mul_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Float32x2_operator_mul_Float32x2x3.name = "operator*"_c;
    Float32x2_operator_mul_Float32x2x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2x3)->returnTypeSymbol = &Float32x3Type;

    // operator*(f32x2x4)
    Float32x2_operator_mul_Float32x2x4_arg0.name = "_arg0"_c;
    Float32x2_operator_mul_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Float32x2_operator_mul_Float32x2x4.name = "operator*"_c;
    Float32x2_operator_mul_Float32x2x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2x4)->returnTypeSymbol = &Float32x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f32x2"_c, &Float32x2_convert_Float32x2 },
        std::pair{ "f32x2(f32x2)"_c, &Float32x2_convert_Float32x2 },
        std::pair{ "f32x2"_c, &Float32x2_splat_Float32 },
        std::pair{ "f32x2(f32)"_c, &Float32x2_splat_Float32 },
        std::pair{ "f32x2"_c, &Float32x2_convert_UInt32x2 },
        std::pair{ "f32x2(u32x2)"_c, &Float32x2_convert_UInt32x2 },
        std::pair{ "f32x2"_c, &Float32x2_splat_UInt32 },
        std::pair{ "f32x2(u32)"_c, &Float32x2_splat_UInt32 },
        std::pair{ "f32x2"_c, &Float32x2_convert_Int32x2 },
        std::pair{ "f32x2(i32x2)"_c, &Float32x2_convert_Int32x2 },
        std::pair{ "f32x2"_c, &Float32x2_splat_Int32 },
        std::pair{ "f32x2(i32)"_c, &Float32x2_splat_Int32 },
        std::pair{ "f32x2"_c, &Float32x2_convert_Bool8x2 },
        std::pair{ "f32x2(b8x2)"_c, &Float32x2_convert_Bool8x2 },
        std::pair{ "f32x2"_c, &Float32x2_splat_Bool8 },
        std::pair{ "f32x2(b8)"_c, &Float32x2_splat_Bool8 },
        std::pair{ "f32x2"_c, &Float32x2_convert_Float16x2 },
        std::pair{ "f32x2(f16x2)"_c, &Float32x2_convert_Float16x2 },
        std::pair{ "f32x2"_c, &Float32x2_splat_Float16 },
        std::pair{ "f32x2(f16)"_c, &Float32x2_splat_Float16 },
        std::pair{ "f32x2"_c, &Float32x2_convert_UInt16x2 },
        std::pair{ "f32x2(u16x2)"_c, &Float32x2_convert_UInt16x2 },
        std::pair{ "f32x2"_c, &Float32x2_splat_UInt16 },
        std::pair{ "f32x2(u16)"_c, &Float32x2_splat_UInt16 },
        std::pair{ "f32x2"_c, &Float32x2_convert_Int16x2 },
        std::pair{ "f32x2(i16x2)"_c, &Float32x2_convert_Int16x2 },
        std::pair{ "f32x2"_c, &Float32x2_splat_Int16 },
        std::pair{ "f32x2(i16)"_c, &Float32x2_splat_Int16 },
        std::pair{ "f32x2"_c, &Float32x2_ctor0_Float32_Float32},
        std::pair{ "f32x2(f32,f32)"_c, &Float32x2_ctor0_Float32_Float32},
        std::pair{ "operator[](i32)"_c, &Float32x2_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float32x2_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float32x2_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float32x2_operator_index_UInt16},
        std::pair{ "operator+(f32x2)"_c, &Float32x2_operator_add_Float32x2},
        std::pair{ "operator-(f32x2)"_c, &Float32x2_operator_sub_Float32x2},
        std::pair{ "operator*(f32x2)"_c, &Float32x2_operator_mul_Float32x2},
        std::pair{ "operator/(f32x2)"_c, &Float32x2_operator_div_Float32x2},
        std::pair{ "operator%(f32x2)"_c, &Float32x2_operator_mod_Float32x2},
        std::pair{ "operator+=(f32x2)"_c, &Float32x2_operator_addasg_Float32x2},
        std::pair{ "operator-=(f32x2)"_c, &Float32x2_operator_subasg_Float32x2},
        std::pair{ "operator*=(f32x2)"_c, &Float32x2_operator_mulasg_Float32x2},
        std::pair{ "operator/=(f32x2)"_c, &Float32x2_operator_divasg_Float32x2},
        std::pair{ "operator<(f32x2)"_c, &Float32x2_operator_lt_Float32x2},
        std::pair{ "operator<=(f32x2)"_c, &Float32x2_operator_lte_Float32x2},
        std::pair{ "operator>(f32x2)"_c, &Float32x2_operator_gt_Float32x2},
        std::pair{ "operator>=(f32x2)"_c, &Float32x2_operator_gte_Float32x2},
        std::pair{ "operator==(f32x2)"_c, &Float32x2_operator_eq_Float32x2},
        std::pair{ "operator!=(f32x2)"_c, &Float32x2_operator_neq_Float32x2},
        std::pair{ "operator*(f32)"_c, &Float32x2_operator_scale_Float32x2_Float32},
        std::pair{ "operator*(f16)"_c, &Float32x2_operator_scale_Float32x2_Float16},
        std::pair{ "operator*(u32)"_c, &Float32x2_operator_scale_Float32x2_UInt32},
        std::pair{ "operator*(u16)"_c, &Float32x2_operator_scale_Float32x2_UInt16},
        std::pair{ "operator*(i32)"_c, &Float32x2_operator_scale_Float32x2_Int32},
        std::pair{ "operator*(i16)"_c, &Float32x2_operator_scale_Float32x2_Int16},
        std::pair{ "operator*(f32x2x2)"_c, &Float32x2_operator_mul_Float32x2x2},
        std::pair{ "operator*(f32x2x3)"_c, &Float32x2_operator_mul_Float32x2x3},
        std::pair{ "operator*(f32x2x4)"_c, &Float32x2_operator_mul_Float32x2x4}
    }
    };   
}

Float32x3::Float32x3()
{
    this->name = "f32";
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    // Conversion from Float32x3
    Float32x3_convert_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_convert_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_convert_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_convert_Float32x3.name = "f32x3"_c;
    Float32x3_convert_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x3_convert_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // Splat with Float32
    Float32x3_splat_Float32_arg0.name = "_arg0"_c;
    Float32x3_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x3_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Float32x3_splat_Float32.name = "f32x3"_c;
    Float32x3_splat_Float32.returnType = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x3_splat_Float32)->returnTypeSymbol = &Float32x3Type;

    // Conversion from UInt32x3
    Float32x3_convert_UInt32x3_arg0.name = "_arg0"_c;
    Float32x3_convert_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&Float32x3_convert_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Float32x3_convert_UInt32x3.name = "f32x3"_c;
    Float32x3_convert_UInt32x3.returnType = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x3_convert_UInt32x3)->returnTypeSymbol = &Float32x3Type;

    // Splat with UInt32
    Float32x3_splat_UInt32_arg0.name = "_arg0"_c;
    Float32x3_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x3_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x3_splat_UInt32.name = "f32x3"_c;
    Float32x3_splat_UInt32.returnType = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x3_splat_UInt32)->returnTypeSymbol = &Float32x3Type;

    // Conversion from Int32x3
    Float32x3_convert_Int32x3_arg0.name = "_arg0"_c;
    Float32x3_convert_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Float32x3_convert_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Float32x3_convert_Int32x3.name = "f32x3"_c;
    Float32x3_convert_Int32x3.returnType = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x3_convert_Int32x3)->returnTypeSymbol = &Float32x3Type;

    // Splat with Int32
    Float32x3_splat_Int32_arg0.name = "_arg0"_c;
    Float32x3_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x3_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x3_splat_Int32.name = "f32x3"_c;
    Float32x3_splat_Int32.returnType = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x3_splat_Int32)->returnTypeSymbol = &Float32x3Type;

    // Conversion from Bool8x3
    Float32x3_convert_Bool8x3_arg0.name = "_arg0"_c;
    Float32x3_convert_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Float32x3_convert_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Float32x3_convert_Bool8x3.name = "f32x3"_c;
    Float32x3_convert_Bool8x3.returnType = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x3_convert_Bool8x3)->returnTypeSymbol = &Float32x3Type;

    // Splat with Bool8
    Float32x3_splat_Bool8_arg0.name = "_arg0"_c;
    Float32x3_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Float32x3_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    Float32x3_splat_Bool8.name = "f32x3"_c;
    Float32x3_splat_Bool8.returnType = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x3_splat_Bool8)->returnTypeSymbol = &Float32x3Type;

    // Conversion from Float16x3
    Float32x3_convert_Float16x3_arg0.name = "_arg0"_c;
    Float32x3_convert_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float32x3_convert_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float32x3_convert_Float16x3.name = "f32x3"_c;
    Float32x3_convert_Float16x3.returnType = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x3_convert_Float16x3)->returnTypeSymbol = &Float32x3Type;

    // Splat with Float16
    Float32x3_splat_Float16_arg0.name = "_arg0"_c;
    Float32x3_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32x3_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Float32x3_splat_Float16.name = "f32x3"_c;
    Float32x3_splat_Float16.returnType = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x3_splat_Float16)->returnTypeSymbol = &Float32x3Type;

    // Conversion from UInt16x3
    Float32x3_convert_UInt16x3_arg0.name = "_arg0"_c;
    Float32x3_convert_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&Float32x3_convert_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Float32x3_convert_UInt16x3.name = "f32x3"_c;
    Float32x3_convert_UInt16x3.returnType = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x3_convert_UInt16x3)->returnTypeSymbol = &Float32x3Type;

    // Splat with UInt16
    Float32x3_splat_UInt16_arg0.name = "_arg0"_c;
    Float32x3_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x3_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x3_splat_UInt16.name = "f32x3"_c;
    Float32x3_splat_UInt16.returnType = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x3_splat_UInt16)->returnTypeSymbol = &Float32x3Type;

    // Conversion from Int16x3
    Float32x3_convert_Int16x3_arg0.name = "_arg0"_c;
    Float32x3_convert_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Float32x3_convert_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Float32x3_convert_Int16x3.name = "f32x3"_c;
    Float32x3_convert_Int16x3.returnType = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x3_convert_Int16x3)->returnTypeSymbol = &Float32x3Type;

    // Splat with Int16
    Float32x3_splat_Int16_arg0.name = "_arg0"_c;
    Float32x3_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x3_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x3_splat_Int16.name = "f32x3"_c;
    Float32x3_splat_Int16.returnType = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x3_splat_Int16)->returnTypeSymbol = &Float32x3Type;

    // Construct with Float32, Float32, Float32
    Float32x3_ctor0_arg0.name = "_arg0"_c;
    Float32x3_ctor0_arg0.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x3_ctor0_arg0)->typeSymbol = &Float32Type;
    Float32x3_ctor0_arg1.name = "_arg1"_c;
    Float32x3_ctor0_arg1.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x3_ctor0_arg1)->typeSymbol = &Float32Type;
    Float32x3_ctor0_arg2.name = "_arg2"_c;
    Float32x3_ctor0_arg2.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x3_ctor0_arg2)->typeSymbol = &Float32Type;
    Float32x3_ctor0_Float32_Float32_Float32.name = "0"_c;
    Float32x3_ctor0_Float32_Float32_Float32.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_ctor0_Float32_Float32_Float32)->returnTypeSymbol = &Float32x3Type;

    // Construct with Float32x2, Float32
    Float32x3_ctor1_arg0.name = "_arg0"_c;
    Float32x3_ctor1_arg0.type = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x3_ctor1_arg0)->typeSymbol = &Float32x2Type;
    Float32x3_ctor1_arg1.name = "_arg1"_c;
    Float32x3_ctor1_arg1.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x3_ctor1_arg1)->typeSymbol = &Float32Type;
    Float32x3_ctor1_Float32x2_Float32.name = "1"_c;
    Float32x3_ctor1_Float32x2_Float32.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_ctor1_Float32x2_Float32)->returnTypeSymbol = &Float32x3Type;

    // Construct with Float32, Float32x2
    Float32x3_ctor2_arg0.name = "_arg0"_c;
    Float32x3_ctor2_arg0.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x3_ctor2_arg0)->typeSymbol = &Float32Type;
    Float32x3_ctor2_arg1.name = "_arg1"_c;
    Float32x3_ctor2_arg1.type = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x3_ctor2_arg1)->typeSymbol = &Float32x2Type;
    Float32x3_ctor2_Float32_Float32x2.name = "2"_c;
    Float32x3_ctor2_Float32_Float32x2.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_ctor2_Float32_Float32x2)->returnTypeSymbol = &Float32x3Type;

    // operator[](i32)
    Float32x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x3_operator_index_Int32.name = "operator[]"_c;
    Float32x3_operator_index_Int32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x3_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    // operator[](u32)
    Float32x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x3_operator_index_UInt32.name = "operator[]"_c;
    Float32x3_operator_index_UInt32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x3_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    // operator[](i16)
    Float32x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x3_operator_index_Int16.name = "operator[]"_c;
    Float32x3_operator_index_Int16.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x3_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    // operator[](u16)
    Float32x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x3_operator_index_UInt16.name = "operator[]"_c;
    Float32x3_operator_index_UInt16.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x3_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    // operator+(f32x3)
    Float32x3_operator_add_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_add_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_add_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_operator_add_Float32x3.name = "operator+"_c;
    Float32x3_operator_add_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_add_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // operator-(f32x3)
    Float32x3_operator_sub_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_sub_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_sub_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_operator_sub_Float32x3.name = "operator-"_c;
    Float32x3_operator_sub_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_sub_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // operator*(f32x3)
    Float32x3_operator_mul_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_mul_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_operator_mul_Float32x3.name = "operator*"_c;
    Float32x3_operator_mul_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // operator/(f32x3)
    Float32x3_operator_div_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_div_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_div_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_operator_div_Float32x3.name = "operator/"_c;
    Float32x3_operator_div_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_div_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // operator%(f32x3)
    Float32x3_operator_mod_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_mod_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_mod_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_operator_mod_Float32x3.name = "operator%"_c;
    Float32x3_operator_mod_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_mod_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // operator+=(f32x3)
    Float32x3_operator_addasg_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_addasg_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_addasg_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_operator_addasg_Float32x3.name = "operator+="_c;
    Float32x3_operator_addasg_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_addasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // operator-=(f32x3)
    Float32x3_operator_subasg_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_subasg_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_subasg_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_operator_subasg_Float32x3.name = "operator-="_c;
    Float32x3_operator_subasg_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_subasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // operator*=(f32x3)
    Float32x3_operator_mulasg_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_mulasg_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_mulasg_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_operator_mulasg_Float32x3.name = "operator*="_c;
    Float32x3_operator_mulasg_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_mulasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // operator/=(f32x3)
    Float32x3_operator_divasg_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_divasg_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_divasg_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_operator_divasg_Float32x3.name = "operator/="_c;
    Float32x3_operator_divasg_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_divasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // operator<(f32x3)
    Float32x3_operator_lt_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_lt_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_lt_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_operator_lt_Float32x3.name = "operator<"_c;
    Float32x3_operator_lt_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_lt_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // operator<=(f32x3)
    Float32x3_operator_lte_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_lte_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_lte_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_operator_lte_Float32x3.name = "operator<="_c;
    Float32x3_operator_lte_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_lte_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // operator>(f32x3)
    Float32x3_operator_gt_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_gt_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_gt_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_operator_gt_Float32x3.name = "operator>"_c;
    Float32x3_operator_gt_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_gt_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // operator>=(f32x3)
    Float32x3_operator_gte_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_gte_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_gte_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_operator_gte_Float32x3.name = "operator>="_c;
    Float32x3_operator_gte_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_gte_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // operator==(f32x3)
    Float32x3_operator_eq_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_eq_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_eq_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_operator_eq_Float32x3.name = "operator=="_c;
    Float32x3_operator_eq_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_eq_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // operator!=(f32x3)
    Float32x3_operator_neq_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_neq_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_neq_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float32x3_operator_neq_Float32x3.name = "operator!="_c;
    Float32x3_operator_neq_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_neq_Float32x3)->returnTypeSymbol = &Float32x3Type;

    // operator*(f32)
    Float32x3_operator_scale_Float32x3_Float32_arg0.name = "_arg0"_c;
    Float32x3_operator_scale_Float32x3_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x3_operator_scale_Float32x3_Float32_arg0)->typeSymbol = &Float32Type;
    Float32x3_operator_scale_Float32x3_Float32.name = "operator*"_c;
    Float32x3_operator_scale_Float32x3_Float32.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_scale_Float32x3_Float32)->returnTypeSymbol = &Float32x3Type;

    // operator*(f16)
    Float32x3_operator_scale_Float32x3_Float16_arg0.name = "_arg0"_c;
    Float32x3_operator_scale_Float32x3_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32x3_operator_scale_Float32x3_Float16_arg0)->typeSymbol = &Float16Type;
    Float32x3_operator_scale_Float32x3_Float16.name = "operator*"_c;
    Float32x3_operator_scale_Float32x3_Float16.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_scale_Float32x3_Float16)->returnTypeSymbol = &Float32x3Type;

    // operator*(u32)
    Float32x3_operator_scale_Float32x3_UInt32_arg0.name = "_arg0"_c;
    Float32x3_operator_scale_Float32x3_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x3_operator_scale_Float32x3_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x3_operator_scale_Float32x3_UInt32.name = "operator*"_c;
    Float32x3_operator_scale_Float32x3_UInt32.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_scale_Float32x3_UInt32)->returnTypeSymbol = &Float32x3Type;

    // operator*(u16)
    Float32x3_operator_scale_Float32x3_UInt16_arg0.name = "_arg0"_c;
    Float32x3_operator_scale_Float32x3_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x3_operator_scale_Float32x3_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x3_operator_scale_Float32x3_UInt16.name = "operator*"_c;
    Float32x3_operator_scale_Float32x3_UInt16.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_scale_Float32x3_UInt16)->returnTypeSymbol = &Float32x3Type;

    // operator*(i32)
    Float32x3_operator_scale_Float32x3_Int32_arg0.name = "_arg0"_c;
    Float32x3_operator_scale_Float32x3_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x3_operator_scale_Float32x3_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x3_operator_scale_Float32x3_Int32.name = "operator*"_c;
    Float32x3_operator_scale_Float32x3_Int32.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_scale_Float32x3_Int32)->returnTypeSymbol = &Float32x3Type;

    // operator*(i16)
    Float32x3_operator_scale_Float32x3_Int16_arg0.name = "_arg0"_c;
    Float32x3_operator_scale_Float32x3_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x3_operator_scale_Float32x3_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x3_operator_scale_Float32x3_Int16.name = "operator*"_c;
    Float32x3_operator_scale_Float32x3_Int16.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_scale_Float32x3_Int16)->returnTypeSymbol = &Float32x3Type;

    // operator*(f32x3x2)
    Float32x3_operator_mul_Float32x3x2_arg0.name = "_arg0"_c;
    Float32x3_operator_mul_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Float32x3_operator_mul_Float32x3x2.name = "operator*"_c;
    Float32x3_operator_mul_Float32x3x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3x2)->returnTypeSymbol = &Float32x2Type;

    // operator*(f32x3x3)
    Float32x3_operator_mul_Float32x3x3_arg0.name = "_arg0"_c;
    Float32x3_operator_mul_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Float32x3_operator_mul_Float32x3x3.name = "operator*"_c;
    Float32x3_operator_mul_Float32x3x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3x3)->returnTypeSymbol = &Float32x3Type;

    // operator*(f32x3x4)
    Float32x3_operator_mul_Float32x3x4_arg0.name = "_arg0"_c;
    Float32x3_operator_mul_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Float32x3_operator_mul_Float32x3x4.name = "operator*"_c;
    Float32x3_operator_mul_Float32x3x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3x4)->returnTypeSymbol = &Float32x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f32x3"_c, &Float32x3_convert_Float32x3 },
        std::pair{ "f32x3(f32x3)"_c, &Float32x3_convert_Float32x3 },
        std::pair{ "f32x3"_c, &Float32x3_splat_Float32 },
        std::pair{ "f32x3(f32)"_c, &Float32x3_splat_Float32 },
        std::pair{ "f32x3"_c, &Float32x3_convert_UInt32x3 },
        std::pair{ "f32x3(u32x3)"_c, &Float32x3_convert_UInt32x3 },
        std::pair{ "f32x3"_c, &Float32x3_splat_UInt32 },
        std::pair{ "f32x3(u32)"_c, &Float32x3_splat_UInt32 },
        std::pair{ "f32x3"_c, &Float32x3_convert_Int32x3 },
        std::pair{ "f32x3(i32x3)"_c, &Float32x3_convert_Int32x3 },
        std::pair{ "f32x3"_c, &Float32x3_splat_Int32 },
        std::pair{ "f32x3(i32)"_c, &Float32x3_splat_Int32 },
        std::pair{ "f32x3"_c, &Float32x3_convert_Bool8x3 },
        std::pair{ "f32x3(b8x3)"_c, &Float32x3_convert_Bool8x3 },
        std::pair{ "f32x3"_c, &Float32x3_splat_Bool8 },
        std::pair{ "f32x3(b8)"_c, &Float32x3_splat_Bool8 },
        std::pair{ "f32x3"_c, &Float32x3_convert_Float16x3 },
        std::pair{ "f32x3(f16x3)"_c, &Float32x3_convert_Float16x3 },
        std::pair{ "f32x3"_c, &Float32x3_splat_Float16 },
        std::pair{ "f32x3(f16)"_c, &Float32x3_splat_Float16 },
        std::pair{ "f32x3"_c, &Float32x3_convert_UInt16x3 },
        std::pair{ "f32x3(u16x3)"_c, &Float32x3_convert_UInt16x3 },
        std::pair{ "f32x3"_c, &Float32x3_splat_UInt16 },
        std::pair{ "f32x3(u16)"_c, &Float32x3_splat_UInt16 },
        std::pair{ "f32x3"_c, &Float32x3_convert_Int16x3 },
        std::pair{ "f32x3(i16x3)"_c, &Float32x3_convert_Int16x3 },
        std::pair{ "f32x3"_c, &Float32x3_splat_Int16 },
        std::pair{ "f32x3(i16)"_c, &Float32x3_splat_Int16 },
        std::pair{ "f32x3"_c, &Float32x3_ctor0_Float32_Float32_Float32},
        std::pair{ "f32x3(f32,f32,f32)"_c, &Float32x3_ctor0_Float32_Float32_Float32},
        std::pair{ "f32x3"_c, &Float32x3_ctor1_Float32x2_Float32},
        std::pair{ "f32x3(f32x2,f32)"_c, &Float32x3_ctor1_Float32x2_Float32},
        std::pair{ "f32x3"_c, &Float32x3_ctor2_Float32_Float32x2},
        std::pair{ "f32x3(f32,f32x2)"_c, &Float32x3_ctor2_Float32_Float32x2},
        std::pair{ "operator[](i32)"_c, &Float32x3_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float32x3_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float32x3_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float32x3_operator_index_UInt16},
        std::pair{ "operator+(f32x3)"_c, &Float32x3_operator_add_Float32x3},
        std::pair{ "operator-(f32x3)"_c, &Float32x3_operator_sub_Float32x3},
        std::pair{ "operator*(f32x3)"_c, &Float32x3_operator_mul_Float32x3},
        std::pair{ "operator/(f32x3)"_c, &Float32x3_operator_div_Float32x3},
        std::pair{ "operator%(f32x3)"_c, &Float32x3_operator_mod_Float32x3},
        std::pair{ "operator+=(f32x3)"_c, &Float32x3_operator_addasg_Float32x3},
        std::pair{ "operator-=(f32x3)"_c, &Float32x3_operator_subasg_Float32x3},
        std::pair{ "operator*=(f32x3)"_c, &Float32x3_operator_mulasg_Float32x3},
        std::pair{ "operator/=(f32x3)"_c, &Float32x3_operator_divasg_Float32x3},
        std::pair{ "operator<(f32x3)"_c, &Float32x3_operator_lt_Float32x3},
        std::pair{ "operator<=(f32x3)"_c, &Float32x3_operator_lte_Float32x3},
        std::pair{ "operator>(f32x3)"_c, &Float32x3_operator_gt_Float32x3},
        std::pair{ "operator>=(f32x3)"_c, &Float32x3_operator_gte_Float32x3},
        std::pair{ "operator==(f32x3)"_c, &Float32x3_operator_eq_Float32x3},
        std::pair{ "operator!=(f32x3)"_c, &Float32x3_operator_neq_Float32x3},
        std::pair{ "operator*(f32)"_c, &Float32x3_operator_scale_Float32x3_Float32},
        std::pair{ "operator*(f16)"_c, &Float32x3_operator_scale_Float32x3_Float16},
        std::pair{ "operator*(u32)"_c, &Float32x3_operator_scale_Float32x3_UInt32},
        std::pair{ "operator*(u16)"_c, &Float32x3_operator_scale_Float32x3_UInt16},
        std::pair{ "operator*(i32)"_c, &Float32x3_operator_scale_Float32x3_Int32},
        std::pair{ "operator*(i16)"_c, &Float32x3_operator_scale_Float32x3_Int16},
        std::pair{ "operator*(f32x3x2)"_c, &Float32x3_operator_mul_Float32x3x2},
        std::pair{ "operator*(f32x3x3)"_c, &Float32x3_operator_mul_Float32x3x3},
        std::pair{ "operator*(f32x3x4)"_c, &Float32x3_operator_mul_Float32x3x4}
    }
    };   
}

Float32x4::Float32x4()
{
    this->name = "f32";
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    // Conversion from Float32x4
    Float32x4_convert_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_convert_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_convert_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_convert_Float32x4.name = "f32x4"_c;
    Float32x4_convert_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&Float32x4_convert_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // Splat with Float32
    Float32x4_splat_Float32_arg0.name = "_arg0"_c;
    Float32x4_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x4_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Float32x4_splat_Float32.name = "f32x4"_c;
    Float32x4_splat_Float32.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&Float32x4_splat_Float32)->returnTypeSymbol = &Float32x4Type;

    // Conversion from UInt32x4
    Float32x4_convert_UInt32x4_arg0.name = "_arg0"_c;
    Float32x4_convert_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&Float32x4_convert_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Float32x4_convert_UInt32x4.name = "f32x4"_c;
    Float32x4_convert_UInt32x4.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&Float32x4_convert_UInt32x4)->returnTypeSymbol = &Float32x4Type;

    // Splat with UInt32
    Float32x4_splat_UInt32_arg0.name = "_arg0"_c;
    Float32x4_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x4_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x4_splat_UInt32.name = "f32x4"_c;
    Float32x4_splat_UInt32.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&Float32x4_splat_UInt32)->returnTypeSymbol = &Float32x4Type;

    // Conversion from Int32x4
    Float32x4_convert_Int32x4_arg0.name = "_arg0"_c;
    Float32x4_convert_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Float32x4_convert_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Float32x4_convert_Int32x4.name = "f32x4"_c;
    Float32x4_convert_Int32x4.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&Float32x4_convert_Int32x4)->returnTypeSymbol = &Float32x4Type;

    // Splat with Int32
    Float32x4_splat_Int32_arg0.name = "_arg0"_c;
    Float32x4_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x4_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x4_splat_Int32.name = "f32x4"_c;
    Float32x4_splat_Int32.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&Float32x4_splat_Int32)->returnTypeSymbol = &Float32x4Type;

    // Conversion from Bool8x4
    Float32x4_convert_Bool8x4_arg0.name = "_arg0"_c;
    Float32x4_convert_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Float32x4_convert_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Float32x4_convert_Bool8x4.name = "f32x4"_c;
    Float32x4_convert_Bool8x4.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&Float32x4_convert_Bool8x4)->returnTypeSymbol = &Float32x4Type;

    // Splat with Bool8
    Float32x4_splat_Bool8_arg0.name = "_arg0"_c;
    Float32x4_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Float32x4_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    Float32x4_splat_Bool8.name = "f32x4"_c;
    Float32x4_splat_Bool8.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&Float32x4_splat_Bool8)->returnTypeSymbol = &Float32x4Type;

    // Conversion from Float16x4
    Float32x4_convert_Float16x4_arg0.name = "_arg0"_c;
    Float32x4_convert_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float32x4_convert_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float32x4_convert_Float16x4.name = "f32x4"_c;
    Float32x4_convert_Float16x4.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&Float32x4_convert_Float16x4)->returnTypeSymbol = &Float32x4Type;

    // Splat with Float16
    Float32x4_splat_Float16_arg0.name = "_arg0"_c;
    Float32x4_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32x4_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Float32x4_splat_Float16.name = "f32x4"_c;
    Float32x4_splat_Float16.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&Float32x4_splat_Float16)->returnTypeSymbol = &Float32x4Type;

    // Conversion from UInt16x4
    Float32x4_convert_UInt16x4_arg0.name = "_arg0"_c;
    Float32x4_convert_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&Float32x4_convert_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Float32x4_convert_UInt16x4.name = "f32x4"_c;
    Float32x4_convert_UInt16x4.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&Float32x4_convert_UInt16x4)->returnTypeSymbol = &Float32x4Type;

    // Splat with UInt16
    Float32x4_splat_UInt16_arg0.name = "_arg0"_c;
    Float32x4_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x4_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x4_splat_UInt16.name = "f32x4"_c;
    Float32x4_splat_UInt16.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&Float32x4_splat_UInt16)->returnTypeSymbol = &Float32x4Type;

    // Conversion from Int16x4
    Float32x4_convert_Int16x4_arg0.name = "_arg0"_c;
    Float32x4_convert_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Float32x4_convert_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Float32x4_convert_Int16x4.name = "f32x4"_c;
    Float32x4_convert_Int16x4.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&Float32x4_convert_Int16x4)->returnTypeSymbol = &Float32x4Type;

    // Splat with Int16
    Float32x4_splat_Int16_arg0.name = "_arg0"_c;
    Float32x4_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x4_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x4_splat_Int16.name = "f32x4"_c;
    Float32x4_splat_Int16.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&Float32x4_splat_Int16)->returnTypeSymbol = &Float32x4Type;

    // Construct with Float32, Float32, Float32, Float32
    Float32x4_ctor0_arg0.name = "_arg0"_c;
    Float32x4_ctor0_arg0.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x4_ctor0_arg0)->typeSymbol = &Float32Type;
    Float32x4_ctor0_arg1.name = "_arg1"_c;
    Float32x4_ctor0_arg1.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x4_ctor0_arg1)->typeSymbol = &Float32Type;
    Float32x4_ctor0_arg2.name = "_arg2"_c;
    Float32x4_ctor0_arg2.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x4_ctor0_arg2)->typeSymbol = &Float32Type;
    Float32x4_ctor0_arg3.name = "_arg3"_c;
    Float32x4_ctor0_arg3.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x4_ctor0_arg3)->typeSymbol = &Float32Type;
    Float32x4_ctor0_Float32_Float32_Float32_Float32.name = "0"_c;
    Float32x4_ctor0_Float32_Float32_Float32_Float32.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_ctor0_Float32_Float32_Float32_Float32)->returnTypeSymbol = &Float32x4Type;

    // Construct with Float32x2, Float32, Float32
    Float32x4_ctor1_arg0.name = "_arg0"_c;
    Float32x4_ctor1_arg0.type = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x4_ctor1_arg0)->typeSymbol = &Float32x2Type;
    Float32x4_ctor1_arg1.name = "_arg1"_c;
    Float32x4_ctor1_arg1.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x4_ctor1_arg1)->typeSymbol = &Float32Type;
    Float32x4_ctor1_arg2.name = "_arg2"_c;
    Float32x4_ctor1_arg2.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x4_ctor1_arg2)->typeSymbol = &Float32Type;
    Float32x4_ctor1_Float32x2_Float32_Float32.name = "1"_c;
    Float32x4_ctor1_Float32x2_Float32_Float32.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_ctor1_Float32x2_Float32_Float32)->returnTypeSymbol = &Float32x4Type;

    // Construct with Float32, Float32x2, Float32
    Float32x4_ctor2_arg0.name = "_arg0"_c;
    Float32x4_ctor2_arg0.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x4_ctor2_arg0)->typeSymbol = &Float32Type;
    Float32x4_ctor2_arg1.name = "_arg1"_c;
    Float32x4_ctor2_arg1.type = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x4_ctor2_arg1)->typeSymbol = &Float32x2Type;
    Float32x4_ctor2_arg2.name = "_arg2"_c;
    Float32x4_ctor2_arg2.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x4_ctor2_arg2)->typeSymbol = &Float32Type;
    Float32x4_ctor2_Float32_Float32x2_Float32.name = "2"_c;
    Float32x4_ctor2_Float32_Float32x2_Float32.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_ctor2_Float32_Float32x2_Float32)->returnTypeSymbol = &Float32x4Type;

    // Construct with Float32, Float32, Float32x2
    Float32x4_ctor3_arg0.name = "_arg0"_c;
    Float32x4_ctor3_arg0.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x4_ctor3_arg0)->typeSymbol = &Float32Type;
    Float32x4_ctor3_arg1.name = "_arg1"_c;
    Float32x4_ctor3_arg1.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x4_ctor3_arg1)->typeSymbol = &Float32Type;
    Float32x4_ctor3_arg2.name = "_arg2"_c;
    Float32x4_ctor3_arg2.type = Type::FullType { Float32x2Type.name };
    Symbol::Resolved(&Float32x4_ctor3_arg2)->typeSymbol = &Float32x2Type;
    Float32x4_ctor3_Float32_Float32_Float32x2.name = "3"_c;
    Float32x4_ctor3_Float32_Float32_Float32x2.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_ctor3_Float32_Float32_Float32x2)->returnTypeSymbol = &Float32x4Type;

    // Construct with Float32x3, Float32
    Float32x4_ctor4_arg0.name = "_arg0"_c;
    Float32x4_ctor4_arg0.type = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x4_ctor4_arg0)->typeSymbol = &Float32x3Type;
    Float32x4_ctor4_arg1.name = "_arg1"_c;
    Float32x4_ctor4_arg1.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x4_ctor4_arg1)->typeSymbol = &Float32Type;
    Float32x4_ctor4_Float32x3_Float32.name = "4"_c;
    Float32x4_ctor4_Float32x3_Float32.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_ctor4_Float32x3_Float32)->returnTypeSymbol = &Float32x4Type;

    // Construct with Float32, Float32x3
    Float32x4_ctor5_arg0.name = "_arg0"_c;
    Float32x4_ctor5_arg0.type = Type::FullType { Float32Type.name };
    Symbol::Resolved(&Float32x4_ctor5_arg0)->typeSymbol = &Float32Type;
    Float32x4_ctor5_arg1.name = "_arg1"_c;
    Float32x4_ctor5_arg1.type = Type::FullType { Float32x3Type.name };
    Symbol::Resolved(&Float32x4_ctor5_arg1)->typeSymbol = &Float32x3Type;
    Float32x4_ctor5_Float32_Float32x3.name = "5"_c;
    Float32x4_ctor5_Float32_Float32x3.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_ctor5_Float32_Float32x3)->returnTypeSymbol = &Float32x4Type;

    // operator[](i32)
    Float32x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x4_operator_index_Int32.name = "operator[]"_c;
    Float32x4_operator_index_Int32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x4_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    // operator[](u32)
    Float32x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x4_operator_index_UInt32.name = "operator[]"_c;
    Float32x4_operator_index_UInt32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x4_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    // operator[](i16)
    Float32x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x4_operator_index_Int16.name = "operator[]"_c;
    Float32x4_operator_index_Int16.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x4_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    // operator[](u16)
    Float32x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x4_operator_index_UInt16.name = "operator[]"_c;
    Float32x4_operator_index_UInt16.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x4_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    // operator+(f32x4)
    Float32x4_operator_add_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_add_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_add_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_operator_add_Float32x4.name = "operator+"_c;
    Float32x4_operator_add_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_add_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // operator-(f32x4)
    Float32x4_operator_sub_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_sub_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_sub_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_operator_sub_Float32x4.name = "operator-"_c;
    Float32x4_operator_sub_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_sub_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // operator*(f32x4)
    Float32x4_operator_mul_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_mul_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_operator_mul_Float32x4.name = "operator*"_c;
    Float32x4_operator_mul_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // operator/(f32x4)
    Float32x4_operator_div_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_div_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_div_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_operator_div_Float32x4.name = "operator/"_c;
    Float32x4_operator_div_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_div_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // operator%(f32x4)
    Float32x4_operator_mod_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_mod_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_mod_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_operator_mod_Float32x4.name = "operator%"_c;
    Float32x4_operator_mod_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_mod_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // operator+=(f32x4)
    Float32x4_operator_addasg_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_addasg_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_addasg_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_operator_addasg_Float32x4.name = "operator+="_c;
    Float32x4_operator_addasg_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_addasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // operator-=(f32x4)
    Float32x4_operator_subasg_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_subasg_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_subasg_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_operator_subasg_Float32x4.name = "operator-="_c;
    Float32x4_operator_subasg_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_subasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // operator*=(f32x4)
    Float32x4_operator_mulasg_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_mulasg_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_mulasg_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_operator_mulasg_Float32x4.name = "operator*="_c;
    Float32x4_operator_mulasg_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_mulasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // operator/=(f32x4)
    Float32x4_operator_divasg_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_divasg_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_divasg_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_operator_divasg_Float32x4.name = "operator/="_c;
    Float32x4_operator_divasg_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_divasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // operator<(f32x4)
    Float32x4_operator_lt_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_lt_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_lt_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_operator_lt_Float32x4.name = "operator<"_c;
    Float32x4_operator_lt_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_lt_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // operator<=(f32x4)
    Float32x4_operator_lte_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_lte_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_lte_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_operator_lte_Float32x4.name = "operator<="_c;
    Float32x4_operator_lte_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_lte_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // operator>(f32x4)
    Float32x4_operator_gt_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_gt_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_gt_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_operator_gt_Float32x4.name = "operator>"_c;
    Float32x4_operator_gt_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_gt_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // operator>=(f32x4)
    Float32x4_operator_gte_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_gte_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_gte_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_operator_gte_Float32x4.name = "operator>="_c;
    Float32x4_operator_gte_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_gte_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // operator==(f32x4)
    Float32x4_operator_eq_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_eq_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_eq_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_operator_eq_Float32x4.name = "operator=="_c;
    Float32x4_operator_eq_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_eq_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // operator!=(f32x4)
    Float32x4_operator_neq_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_neq_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_neq_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float32x4_operator_neq_Float32x4.name = "operator!="_c;
    Float32x4_operator_neq_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_neq_Float32x4)->returnTypeSymbol = &Float32x4Type;

    // operator*(f32)
    Float32x4_operator_scale_Float32x4_Float32_arg0.name = "_arg0"_c;
    Float32x4_operator_scale_Float32x4_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x4_operator_scale_Float32x4_Float32_arg0)->typeSymbol = &Float32Type;
    Float32x4_operator_scale_Float32x4_Float32.name = "operator*"_c;
    Float32x4_operator_scale_Float32x4_Float32.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_scale_Float32x4_Float32)->returnTypeSymbol = &Float32x4Type;

    // operator*(f16)
    Float32x4_operator_scale_Float32x4_Float16_arg0.name = "_arg0"_c;
    Float32x4_operator_scale_Float32x4_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32x4_operator_scale_Float32x4_Float16_arg0)->typeSymbol = &Float16Type;
    Float32x4_operator_scale_Float32x4_Float16.name = "operator*"_c;
    Float32x4_operator_scale_Float32x4_Float16.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_scale_Float32x4_Float16)->returnTypeSymbol = &Float32x4Type;

    // operator*(u32)
    Float32x4_operator_scale_Float32x4_UInt32_arg0.name = "_arg0"_c;
    Float32x4_operator_scale_Float32x4_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x4_operator_scale_Float32x4_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x4_operator_scale_Float32x4_UInt32.name = "operator*"_c;
    Float32x4_operator_scale_Float32x4_UInt32.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_scale_Float32x4_UInt32)->returnTypeSymbol = &Float32x4Type;

    // operator*(u16)
    Float32x4_operator_scale_Float32x4_UInt16_arg0.name = "_arg0"_c;
    Float32x4_operator_scale_Float32x4_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x4_operator_scale_Float32x4_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x4_operator_scale_Float32x4_UInt16.name = "operator*"_c;
    Float32x4_operator_scale_Float32x4_UInt16.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_scale_Float32x4_UInt16)->returnTypeSymbol = &Float32x4Type;

    // operator*(i32)
    Float32x4_operator_scale_Float32x4_Int32_arg0.name = "_arg0"_c;
    Float32x4_operator_scale_Float32x4_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x4_operator_scale_Float32x4_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x4_operator_scale_Float32x4_Int32.name = "operator*"_c;
    Float32x4_operator_scale_Float32x4_Int32.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_scale_Float32x4_Int32)->returnTypeSymbol = &Float32x4Type;

    // operator*(i16)
    Float32x4_operator_scale_Float32x4_Int16_arg0.name = "_arg0"_c;
    Float32x4_operator_scale_Float32x4_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x4_operator_scale_Float32x4_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x4_operator_scale_Float32x4_Int16.name = "operator*"_c;
    Float32x4_operator_scale_Float32x4_Int16.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_scale_Float32x4_Int16)->returnTypeSymbol = &Float32x4Type;

    // operator*(f32x4x2)
    Float32x4_operator_mul_Float32x4x2_arg0.name = "_arg0"_c;
    Float32x4_operator_mul_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Float32x4_operator_mul_Float32x4x2.name = "operator*"_c;
    Float32x4_operator_mul_Float32x4x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4x2)->returnTypeSymbol = &Float32x2Type;

    // operator*(f32x4x3)
    Float32x4_operator_mul_Float32x4x3_arg0.name = "_arg0"_c;
    Float32x4_operator_mul_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Float32x4_operator_mul_Float32x4x3.name = "operator*"_c;
    Float32x4_operator_mul_Float32x4x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4x3)->returnTypeSymbol = &Float32x3Type;

    // operator*(f32x4x4)
    Float32x4_operator_mul_Float32x4x4_arg0.name = "_arg0"_c;
    Float32x4_operator_mul_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Float32x4_operator_mul_Float32x4x4.name = "operator*"_c;
    Float32x4_operator_mul_Float32x4x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4x4)->returnTypeSymbol = &Float32x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f32x4"_c, &Float32x4_convert_Float32x4 },
        std::pair{ "f32x4(f32x4)"_c, &Float32x4_convert_Float32x4 },
        std::pair{ "f32x4"_c, &Float32x4_splat_Float32 },
        std::pair{ "f32x4(f32)"_c, &Float32x4_splat_Float32 },
        std::pair{ "f32x4"_c, &Float32x4_convert_UInt32x4 },
        std::pair{ "f32x4(u32x4)"_c, &Float32x4_convert_UInt32x4 },
        std::pair{ "f32x4"_c, &Float32x4_splat_UInt32 },
        std::pair{ "f32x4(u32)"_c, &Float32x4_splat_UInt32 },
        std::pair{ "f32x4"_c, &Float32x4_convert_Int32x4 },
        std::pair{ "f32x4(i32x4)"_c, &Float32x4_convert_Int32x4 },
        std::pair{ "f32x4"_c, &Float32x4_splat_Int32 },
        std::pair{ "f32x4(i32)"_c, &Float32x4_splat_Int32 },
        std::pair{ "f32x4"_c, &Float32x4_convert_Bool8x4 },
        std::pair{ "f32x4(b8x4)"_c, &Float32x4_convert_Bool8x4 },
        std::pair{ "f32x4"_c, &Float32x4_splat_Bool8 },
        std::pair{ "f32x4(b8)"_c, &Float32x4_splat_Bool8 },
        std::pair{ "f32x4"_c, &Float32x4_convert_Float16x4 },
        std::pair{ "f32x4(f16x4)"_c, &Float32x4_convert_Float16x4 },
        std::pair{ "f32x4"_c, &Float32x4_splat_Float16 },
        std::pair{ "f32x4(f16)"_c, &Float32x4_splat_Float16 },
        std::pair{ "f32x4"_c, &Float32x4_convert_UInt16x4 },
        std::pair{ "f32x4(u16x4)"_c, &Float32x4_convert_UInt16x4 },
        std::pair{ "f32x4"_c, &Float32x4_splat_UInt16 },
        std::pair{ "f32x4(u16)"_c, &Float32x4_splat_UInt16 },
        std::pair{ "f32x4"_c, &Float32x4_convert_Int16x4 },
        std::pair{ "f32x4(i16x4)"_c, &Float32x4_convert_Int16x4 },
        std::pair{ "f32x4"_c, &Float32x4_splat_Int16 },
        std::pair{ "f32x4(i16)"_c, &Float32x4_splat_Int16 },
        std::pair{ "f32x4"_c, &Float32x4_ctor0_Float32_Float32_Float32_Float32},
        std::pair{ "f32x4(f32,f32,f32,f32)"_c, &Float32x4_ctor0_Float32_Float32_Float32_Float32},
        std::pair{ "f32x4"_c, &Float32x4_ctor1_Float32x2_Float32_Float32},
        std::pair{ "f32x4(f32x2,f32,f32)"_c, &Float32x4_ctor1_Float32x2_Float32_Float32},
        std::pair{ "f32x4"_c, &Float32x4_ctor2_Float32_Float32x2_Float32},
        std::pair{ "f32x4(f32,f32x2,f32)"_c, &Float32x4_ctor2_Float32_Float32x2_Float32},
        std::pair{ "f32x4"_c, &Float32x4_ctor3_Float32_Float32_Float32x2},
        std::pair{ "f32x4(f32,f32,f32x2)"_c, &Float32x4_ctor3_Float32_Float32_Float32x2},
        std::pair{ "f32x4"_c, &Float32x4_ctor4_Float32x3_Float32},
        std::pair{ "f32x4(f32x3,f32)"_c, &Float32x4_ctor4_Float32x3_Float32},
        std::pair{ "f32x4"_c, &Float32x4_ctor5_Float32_Float32x3},
        std::pair{ "f32x4(f32,f32x3)"_c, &Float32x4_ctor5_Float32_Float32x3},
        std::pair{ "operator[](i32)"_c, &Float32x4_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float32x4_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float32x4_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float32x4_operator_index_UInt16},
        std::pair{ "operator+(f32x4)"_c, &Float32x4_operator_add_Float32x4},
        std::pair{ "operator-(f32x4)"_c, &Float32x4_operator_sub_Float32x4},
        std::pair{ "operator*(f32x4)"_c, &Float32x4_operator_mul_Float32x4},
        std::pair{ "operator/(f32x4)"_c, &Float32x4_operator_div_Float32x4},
        std::pair{ "operator%(f32x4)"_c, &Float32x4_operator_mod_Float32x4},
        std::pair{ "operator+=(f32x4)"_c, &Float32x4_operator_addasg_Float32x4},
        std::pair{ "operator-=(f32x4)"_c, &Float32x4_operator_subasg_Float32x4},
        std::pair{ "operator*=(f32x4)"_c, &Float32x4_operator_mulasg_Float32x4},
        std::pair{ "operator/=(f32x4)"_c, &Float32x4_operator_divasg_Float32x4},
        std::pair{ "operator<(f32x4)"_c, &Float32x4_operator_lt_Float32x4},
        std::pair{ "operator<=(f32x4)"_c, &Float32x4_operator_lte_Float32x4},
        std::pair{ "operator>(f32x4)"_c, &Float32x4_operator_gt_Float32x4},
        std::pair{ "operator>=(f32x4)"_c, &Float32x4_operator_gte_Float32x4},
        std::pair{ "operator==(f32x4)"_c, &Float32x4_operator_eq_Float32x4},
        std::pair{ "operator!=(f32x4)"_c, &Float32x4_operator_neq_Float32x4},
        std::pair{ "operator*(f32)"_c, &Float32x4_operator_scale_Float32x4_Float32},
        std::pair{ "operator*(f16)"_c, &Float32x4_operator_scale_Float32x4_Float16},
        std::pair{ "operator*(u32)"_c, &Float32x4_operator_scale_Float32x4_UInt32},
        std::pair{ "operator*(u16)"_c, &Float32x4_operator_scale_Float32x4_UInt16},
        std::pair{ "operator*(i32)"_c, &Float32x4_operator_scale_Float32x4_Int32},
        std::pair{ "operator*(i16)"_c, &Float32x4_operator_scale_Float32x4_Int16},
        std::pair{ "operator*(f32x4x2)"_c, &Float32x4_operator_mul_Float32x4x2},
        std::pair{ "operator*(f32x4x3)"_c, &Float32x4_operator_mul_Float32x4x3},
        std::pair{ "operator*(f32x4x4)"_c, &Float32x4_operator_mul_Float32x4x4}
    }
    };   
}

UInt32::UInt32()
{
    this->name = "u32";
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    // Conversion from Float32
    UInt32_convert_Float32_arg0.name = "_arg0"_c;
    UInt32_convert_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&UInt32_convert_Float32_arg0)->typeSymbol = &Float32Type;
    UInt32_convert_Float32.name = "u32"_c;
    UInt32_convert_Float32.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32_convert_Float32)->returnTypeSymbol = &UInt32Type;

    // Conversion from Int32
    UInt32_convert_Int32_arg0.name = "_arg0"_c;
    UInt32_convert_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt32_convert_Int32_arg0)->typeSymbol = &Int32Type;
    UInt32_convert_Int32.name = "u32"_c;
    UInt32_convert_Int32.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32_convert_Int32)->returnTypeSymbol = &UInt32Type;

    // Conversion from Bool8
    UInt32_convert_Bool8_arg0.name = "_arg0"_c;
    UInt32_convert_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&UInt32_convert_Bool8_arg0)->typeSymbol = &Bool8Type;
    UInt32_convert_Bool8.name = "u32"_c;
    UInt32_convert_Bool8.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32_convert_Bool8)->returnTypeSymbol = &UInt32Type;

    // Conversion from Float16
    UInt32_convert_Float16_arg0.name = "_arg0"_c;
    UInt32_convert_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&UInt32_convert_Float16_arg0)->typeSymbol = &Float16Type;
    UInt32_convert_Float16.name = "u32"_c;
    UInt32_convert_Float16.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32_convert_Float16)->returnTypeSymbol = &UInt32Type;

    // Conversion from UInt16
    UInt32_convert_UInt16_arg0.name = "_arg0"_c;
    UInt32_convert_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt32_convert_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt32_convert_UInt16.name = "u32"_c;
    UInt32_convert_UInt16.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32_convert_UInt16)->returnTypeSymbol = &UInt32Type;

    // Conversion from Int16
    UInt32_convert_Int16_arg0.name = "_arg0"_c;
    UInt32_convert_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt32_convert_Int16_arg0)->typeSymbol = &Int16Type;
    UInt32_convert_Int16.name = "u32"_c;
    UInt32_convert_Int16.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32_convert_Int16)->returnTypeSymbol = &UInt32Type;

    // Construct with UInt32
    UInt32_ctor0_arg0.name = "_arg0"_c;
    UInt32_ctor0_arg0.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32_ctor0_arg0)->typeSymbol = &UInt32Type;
    UInt32_ctor0_UInt32.name = "0"_c;
    UInt32_ctor0_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_ctor0_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator[](i32)
    UInt32_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt32_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt32_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    UInt32_operator_index_Int32.name = "operator[]"_c;
    UInt32_operator_index_Int32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    // operator[](u32)
    UInt32_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_index_UInt32.name = "operator[]"_c;
    UInt32_operator_index_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator[](i16)
    UInt32_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt32_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt32_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    UInt32_operator_index_Int16.name = "operator[]"_c;
    UInt32_operator_index_Int16.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    // operator[](u16)
    UInt32_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt32_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt32_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt32_operator_index_UInt16.name = "operator[]"_c;
    UInt32_operator_index_UInt16.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    // operator+(u32)
    UInt32_operator_add_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_add_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_add_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_add_UInt32.name = "operator+"_c;
    UInt32_operator_add_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_add_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator-(u32)
    UInt32_operator_sub_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_sub_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_sub_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_sub_UInt32.name = "operator-"_c;
    UInt32_operator_sub_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_sub_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator*(u32)
    UInt32_operator_mul_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_mul_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_mul_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_mul_UInt32.name = "operator*"_c;
    UInt32_operator_mul_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_mul_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator/(u32)
    UInt32_operator_div_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_div_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_div_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_div_UInt32.name = "operator/"_c;
    UInt32_operator_div_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_div_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator%(u32)
    UInt32_operator_mod_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_mod_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_mod_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_mod_UInt32.name = "operator%"_c;
    UInt32_operator_mod_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_mod_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator+=(u32)
    UInt32_operator_addasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_addasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_addasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_addasg_UInt32.name = "operator+="_c;
    UInt32_operator_addasg_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_addasg_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator-=(u32)
    UInt32_operator_subasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_subasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_subasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_subasg_UInt32.name = "operator-="_c;
    UInt32_operator_subasg_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_subasg_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator*=(u32)
    UInt32_operator_mulasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_mulasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_mulasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_mulasg_UInt32.name = "operator*="_c;
    UInt32_operator_mulasg_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_mulasg_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator/=(u32)
    UInt32_operator_divasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_divasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_divasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_divasg_UInt32.name = "operator/="_c;
    UInt32_operator_divasg_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_divasg_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator<(u32)
    UInt32_operator_lt_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_lt_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_lt_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_lt_UInt32.name = "operator<"_c;
    UInt32_operator_lt_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_lt_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator<=(u32)
    UInt32_operator_lte_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_lte_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_lte_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_lte_UInt32.name = "operator<="_c;
    UInt32_operator_lte_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_lte_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator>(u32)
    UInt32_operator_gt_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_gt_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_gt_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_gt_UInt32.name = "operator>"_c;
    UInt32_operator_gt_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_gt_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator>=(u32)
    UInt32_operator_gte_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_gte_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_gte_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_gte_UInt32.name = "operator>="_c;
    UInt32_operator_gte_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_gte_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator==(u32)
    UInt32_operator_eq_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_eq_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_eq_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_eq_UInt32.name = "operator=="_c;
    UInt32_operator_eq_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_eq_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator!=(u32)
    UInt32_operator_neq_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_neq_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_neq_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_neq_UInt32.name = "operator!="_c;
    UInt32_operator_neq_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_neq_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator|
    UInt32_operator_or_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_or_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_or_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_or_UInt32.name = "operator|"_c;
    UInt32_operator_or_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_or_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator&
    UInt32_operator_and_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_and_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_and_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_and_UInt32.name = "operator&"_c;
    UInt32_operator_and_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_and_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator^
    UInt32_operator_xor_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_xor_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_xor_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_xor_UInt32.name = "operator^"_c;
    UInt32_operator_xor_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_xor_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator<<
    UInt32_operator_lsh_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_lsh_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_lsh_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_lsh_UInt32.name = "operator<<"_c;
    UInt32_operator_lsh_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_lsh_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator>>
    UInt32_operator_rsh_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_rsh_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_rsh_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_rsh_UInt32.name = "operator>>"_c;
    UInt32_operator_rsh_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_rsh_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator|=
    UInt32_operator_orasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_orasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_orasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_orasg_UInt32.name = "operator|="_c;
    UInt32_operator_orasg_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_orasg_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator&=
    UInt32_operator_andasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_andasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_andasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_andasg_UInt32.name = "operator&="_c;
    UInt32_operator_andasg_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_andasg_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator^=
    UInt32_operator_xorasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_xorasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_xorasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_xorasg_UInt32.name = "operator^="_c;
    UInt32_operator_xorasg_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_xorasg_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator<<=
    UInt32_operator_lshasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_lshasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_lshasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_lshasg_UInt32.name = "operator<<="_c;
    UInt32_operator_lshasg_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_lshasg_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator>>=
    UInt32_operator_rhsasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_rhsasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_rhsasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32_operator_rhsasg_UInt32.name = "operator>>="_c;
    UInt32_operator_rhsasg_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32_operator_rhsasg_UInt32)->returnTypeSymbol = &UInt32Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "u32"_c, &UInt32_convert_Float32 },
        std::pair{ "u32(f32)"_c, &UInt32_convert_Float32 },
        std::pair{ "u32"_c, &UInt32_convert_Int32 },
        std::pair{ "u32(i32)"_c, &UInt32_convert_Int32 },
        std::pair{ "u32"_c, &UInt32_convert_Bool8 },
        std::pair{ "u32(b8)"_c, &UInt32_convert_Bool8 },
        std::pair{ "u32"_c, &UInt32_convert_Float16 },
        std::pair{ "u32(f16)"_c, &UInt32_convert_Float16 },
        std::pair{ "u32"_c, &UInt32_convert_UInt16 },
        std::pair{ "u32(u16)"_c, &UInt32_convert_UInt16 },
        std::pair{ "u32"_c, &UInt32_convert_Int16 },
        std::pair{ "u32(i16)"_c, &UInt32_convert_Int16 },
        std::pair{ "u32"_c, &UInt32_ctor0_UInt32},
        std::pair{ "u32(u32)"_c, &UInt32_ctor0_UInt32},
        std::pair{ "operator[](i32)"_c, &UInt32_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &UInt32_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &UInt32_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &UInt32_operator_index_UInt16},
        std::pair{ "operator+(u32)"_c, &UInt32_operator_add_UInt32},
        std::pair{ "operator-(u32)"_c, &UInt32_operator_sub_UInt32},
        std::pair{ "operator*(u32)"_c, &UInt32_operator_mul_UInt32},
        std::pair{ "operator/(u32)"_c, &UInt32_operator_div_UInt32},
        std::pair{ "operator%(u32)"_c, &UInt32_operator_mod_UInt32},
        std::pair{ "operator+=(u32)"_c, &UInt32_operator_addasg_UInt32},
        std::pair{ "operator-=(u32)"_c, &UInt32_operator_subasg_UInt32},
        std::pair{ "operator*=(u32)"_c, &UInt32_operator_mulasg_UInt32},
        std::pair{ "operator/=(u32)"_c, &UInt32_operator_divasg_UInt32},
        std::pair{ "operator<(u32)"_c, &UInt32_operator_lt_UInt32},
        std::pair{ "operator<=(u32)"_c, &UInt32_operator_lte_UInt32},
        std::pair{ "operator>(u32)"_c, &UInt32_operator_gt_UInt32},
        std::pair{ "operator>=(u32)"_c, &UInt32_operator_gte_UInt32},
        std::pair{ "operator==(u32)"_c, &UInt32_operator_eq_UInt32},
        std::pair{ "operator!=(u32)"_c, &UInt32_operator_neq_UInt32},
        std::pair{ "operator|(u32)"_c, &UInt32_operator_or_UInt32},
        std::pair{ "operator&(u32)"_c, &UInt32_operator_and_UInt32},
        std::pair{ "operator^(u32)"_c, &UInt32_operator_xor_UInt32},
        std::pair{ "operator<<(u32)"_c, &UInt32_operator_lsh_UInt32},
        std::pair{ "operator>>(u32)"_c, &UInt32_operator_rsh_UInt32},
        std::pair{ "operator|=(u32)"_c, &UInt32_operator_orasg_UInt32},
        std::pair{ "operator&=(u32)"_c, &UInt32_operator_andasg_UInt32},
        std::pair{ "operator^=(u32)"_c, &UInt32_operator_xorasg_UInt32},
        std::pair{ "operator<<=(u32)"_c, &UInt32_operator_lshasg_UInt32},
        std::pair{ "operator>>=(u32)"_c, &UInt32_operator_rhsasg_UInt32}
    }
    };   
}

UInt32x2::UInt32x2()
{
    this->name = "u32";
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    // Conversion from Float32x2
    UInt32x2_convert_Float32x2_arg0.name = "_arg0"_c;
    UInt32x2_convert_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&UInt32x2_convert_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    UInt32x2_convert_Float32x2.name = "u32x2"_c;
    UInt32x2_convert_Float32x2.returnType = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_convert_Float32x2)->returnTypeSymbol = &UInt32x2Type;

    // Splat with Float32
    UInt32x2_splat_Float32_arg0.name = "_arg0"_c;
    UInt32x2_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&UInt32x2_splat_Float32_arg0)->typeSymbol = &Float32Type;
    UInt32x2_splat_Float32.name = "u32x2"_c;
    UInt32x2_splat_Float32.returnType = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_splat_Float32)->returnTypeSymbol = &UInt32x2Type;

    // Conversion from UInt32x2
    UInt32x2_convert_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_convert_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_convert_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_convert_UInt32x2.name = "u32x2"_c;
    UInt32x2_convert_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_convert_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // Splat with UInt32
    UInt32x2_splat_UInt32_arg0.name = "_arg0"_c;
    UInt32x2_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x2_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32x2_splat_UInt32.name = "u32x2"_c;
    UInt32x2_splat_UInt32.returnType = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_splat_UInt32)->returnTypeSymbol = &UInt32x2Type;

    // Conversion from Int32x2
    UInt32x2_convert_Int32x2_arg0.name = "_arg0"_c;
    UInt32x2_convert_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&UInt32x2_convert_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    UInt32x2_convert_Int32x2.name = "u32x2"_c;
    UInt32x2_convert_Int32x2.returnType = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_convert_Int32x2)->returnTypeSymbol = &UInt32x2Type;

    // Splat with Int32
    UInt32x2_splat_Int32_arg0.name = "_arg0"_c;
    UInt32x2_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt32x2_splat_Int32_arg0)->typeSymbol = &Int32Type;
    UInt32x2_splat_Int32.name = "u32x2"_c;
    UInt32x2_splat_Int32.returnType = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_splat_Int32)->returnTypeSymbol = &UInt32x2Type;

    // Conversion from Bool8x2
    UInt32x2_convert_Bool8x2_arg0.name = "_arg0"_c;
    UInt32x2_convert_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&UInt32x2_convert_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    UInt32x2_convert_Bool8x2.name = "u32x2"_c;
    UInt32x2_convert_Bool8x2.returnType = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_convert_Bool8x2)->returnTypeSymbol = &UInt32x2Type;

    // Splat with Bool8
    UInt32x2_splat_Bool8_arg0.name = "_arg0"_c;
    UInt32x2_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&UInt32x2_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    UInt32x2_splat_Bool8.name = "u32x2"_c;
    UInt32x2_splat_Bool8.returnType = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_splat_Bool8)->returnTypeSymbol = &UInt32x2Type;

    // Conversion from Float16x2
    UInt32x2_convert_Float16x2_arg0.name = "_arg0"_c;
    UInt32x2_convert_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&UInt32x2_convert_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    UInt32x2_convert_Float16x2.name = "u32x2"_c;
    UInt32x2_convert_Float16x2.returnType = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_convert_Float16x2)->returnTypeSymbol = &UInt32x2Type;

    // Splat with Float16
    UInt32x2_splat_Float16_arg0.name = "_arg0"_c;
    UInt32x2_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&UInt32x2_splat_Float16_arg0)->typeSymbol = &Float16Type;
    UInt32x2_splat_Float16.name = "u32x2"_c;
    UInt32x2_splat_Float16.returnType = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_splat_Float16)->returnTypeSymbol = &UInt32x2Type;

    // Conversion from UInt16x2
    UInt32x2_convert_UInt16x2_arg0.name = "_arg0"_c;
    UInt32x2_convert_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt32x2_convert_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt32x2_convert_UInt16x2.name = "u32x2"_c;
    UInt32x2_convert_UInt16x2.returnType = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_convert_UInt16x2)->returnTypeSymbol = &UInt32x2Type;

    // Splat with UInt16
    UInt32x2_splat_UInt16_arg0.name = "_arg0"_c;
    UInt32x2_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt32x2_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt32x2_splat_UInt16.name = "u32x2"_c;
    UInt32x2_splat_UInt16.returnType = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_splat_UInt16)->returnTypeSymbol = &UInt32x2Type;

    // Conversion from Int16x2
    UInt32x2_convert_Int16x2_arg0.name = "_arg0"_c;
    UInt32x2_convert_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&UInt32x2_convert_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    UInt32x2_convert_Int16x2.name = "u32x2"_c;
    UInt32x2_convert_Int16x2.returnType = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_convert_Int16x2)->returnTypeSymbol = &UInt32x2Type;

    // Splat with Int16
    UInt32x2_splat_Int16_arg0.name = "_arg0"_c;
    UInt32x2_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt32x2_splat_Int16_arg0)->typeSymbol = &Int16Type;
    UInt32x2_splat_Int16.name = "u32x2"_c;
    UInt32x2_splat_Int16.returnType = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_splat_Int16)->returnTypeSymbol = &UInt32x2Type;

    // Construct with UInt32, UInt32
    UInt32x2_ctor0_arg0.name = "_arg0"_c;
    UInt32x2_ctor0_arg0.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x2_ctor0_arg0)->typeSymbol = &UInt32Type;
    UInt32x2_ctor0_arg1.name = "_arg1"_c;
    UInt32x2_ctor0_arg1.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x2_ctor0_arg1)->typeSymbol = &UInt32Type;
    UInt32x2_ctor0_UInt32_UInt32.name = "0"_c;
    UInt32x2_ctor0_UInt32_UInt32.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_ctor0_UInt32_UInt32)->returnTypeSymbol = &UInt32x2Type;

    // operator[](i32)
    UInt32x2_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt32x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt32x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    UInt32x2_operator_index_Int32.name = "operator[]"_c;
    UInt32x2_operator_index_Int32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x2_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    // operator[](u32)
    UInt32x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt32x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32x2_operator_index_UInt32.name = "operator[]"_c;
    UInt32x2_operator_index_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x2_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator[](i16)
    UInt32x2_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt32x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt32x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    UInt32x2_operator_index_Int16.name = "operator[]"_c;
    UInt32x2_operator_index_Int16.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x2_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    // operator[](u16)
    UInt32x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt32x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt32x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt32x2_operator_index_UInt16.name = "operator[]"_c;
    UInt32x2_operator_index_UInt16.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x2_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    // operator+(u32x2)
    UInt32x2_operator_add_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_add_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_add_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_add_UInt32x2.name = "operator+"_c;
    UInt32x2_operator_add_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_add_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator-(u32x2)
    UInt32x2_operator_sub_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_sub_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_sub_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_sub_UInt32x2.name = "operator-"_c;
    UInt32x2_operator_sub_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_sub_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator*(u32x2)
    UInt32x2_operator_mul_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_mul_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_mul_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_mul_UInt32x2.name = "operator*"_c;
    UInt32x2_operator_mul_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_mul_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator/(u32x2)
    UInt32x2_operator_div_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_div_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_div_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_div_UInt32x2.name = "operator/"_c;
    UInt32x2_operator_div_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_div_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator%(u32x2)
    UInt32x2_operator_mod_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_mod_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_mod_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_mod_UInt32x2.name = "operator%"_c;
    UInt32x2_operator_mod_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_mod_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator+=(u32x2)
    UInt32x2_operator_addasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_addasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_addasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_addasg_UInt32x2.name = "operator+="_c;
    UInt32x2_operator_addasg_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_addasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator-=(u32x2)
    UInt32x2_operator_subasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_subasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_subasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_subasg_UInt32x2.name = "operator-="_c;
    UInt32x2_operator_subasg_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_subasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator*=(u32x2)
    UInt32x2_operator_mulasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_mulasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_mulasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_mulasg_UInt32x2.name = "operator*="_c;
    UInt32x2_operator_mulasg_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_mulasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator/=(u32x2)
    UInt32x2_operator_divasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_divasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_divasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_divasg_UInt32x2.name = "operator/="_c;
    UInt32x2_operator_divasg_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_divasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator<(u32x2)
    UInt32x2_operator_lt_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_lt_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_lt_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_lt_UInt32x2.name = "operator<"_c;
    UInt32x2_operator_lt_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_lt_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator<=(u32x2)
    UInt32x2_operator_lte_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_lte_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_lte_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_lte_UInt32x2.name = "operator<="_c;
    UInt32x2_operator_lte_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_lte_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator>(u32x2)
    UInt32x2_operator_gt_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_gt_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_gt_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_gt_UInt32x2.name = "operator>"_c;
    UInt32x2_operator_gt_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_gt_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator>=(u32x2)
    UInt32x2_operator_gte_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_gte_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_gte_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_gte_UInt32x2.name = "operator>="_c;
    UInt32x2_operator_gte_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_gte_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator==(u32x2)
    UInt32x2_operator_eq_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_eq_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_eq_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_eq_UInt32x2.name = "operator=="_c;
    UInt32x2_operator_eq_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_eq_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator!=(u32x2)
    UInt32x2_operator_neq_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_neq_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_neq_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_neq_UInt32x2.name = "operator!="_c;
    UInt32x2_operator_neq_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_neq_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator*(f32)
    UInt32x2_operator_scale_UInt32x2_Float32_arg0.name = "_arg0"_c;
    UInt32x2_operator_scale_UInt32x2_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32x2_Float32_arg0)->typeSymbol = &Float32Type;
    UInt32x2_operator_scale_UInt32x2_Float32.name = "operator*"_c;
    UInt32x2_operator_scale_UInt32x2_Float32.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32x2_Float32)->returnTypeSymbol = &UInt32x2Type;

    // operator*(f16)
    UInt32x2_operator_scale_UInt32x2_Float16_arg0.name = "_arg0"_c;
    UInt32x2_operator_scale_UInt32x2_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32x2_Float16_arg0)->typeSymbol = &Float16Type;
    UInt32x2_operator_scale_UInt32x2_Float16.name = "operator*"_c;
    UInt32x2_operator_scale_UInt32x2_Float16.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32x2_Float16)->returnTypeSymbol = &UInt32x2Type;

    // operator*(u32)
    UInt32x2_operator_scale_UInt32x2_UInt32_arg0.name = "_arg0"_c;
    UInt32x2_operator_scale_UInt32x2_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32x2_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32x2_operator_scale_UInt32x2_UInt32.name = "operator*"_c;
    UInt32x2_operator_scale_UInt32x2_UInt32.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32x2_UInt32)->returnTypeSymbol = &UInt32x2Type;

    // operator*(u16)
    UInt32x2_operator_scale_UInt32x2_UInt16_arg0.name = "_arg0"_c;
    UInt32x2_operator_scale_UInt32x2_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32x2_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt32x2_operator_scale_UInt32x2_UInt16.name = "operator*"_c;
    UInt32x2_operator_scale_UInt32x2_UInt16.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32x2_UInt16)->returnTypeSymbol = &UInt32x2Type;

    // operator*(i32)
    UInt32x2_operator_scale_UInt32x2_Int32_arg0.name = "_arg0"_c;
    UInt32x2_operator_scale_UInt32x2_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32x2_Int32_arg0)->typeSymbol = &Int32Type;
    UInt32x2_operator_scale_UInt32x2_Int32.name = "operator*"_c;
    UInt32x2_operator_scale_UInt32x2_Int32.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32x2_Int32)->returnTypeSymbol = &UInt32x2Type;

    // operator*(i16)
    UInt32x2_operator_scale_UInt32x2_Int16_arg0.name = "_arg0"_c;
    UInt32x2_operator_scale_UInt32x2_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32x2_Int16_arg0)->typeSymbol = &Int16Type;
    UInt32x2_operator_scale_UInt32x2_Int16.name = "operator*"_c;
    UInt32x2_operator_scale_UInt32x2_Int16.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32x2_Int16)->returnTypeSymbol = &UInt32x2Type;

    // operator|
    UInt32x2_operator_or_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_or_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_or_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_or_UInt32x2.name = "operator|"_c;
    UInt32x2_operator_or_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_or_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator&
    UInt32x2_operator_and_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_and_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_and_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_and_UInt32x2.name = "operator&"_c;
    UInt32x2_operator_and_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_and_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator^
    UInt32x2_operator_xor_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_xor_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_xor_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_xor_UInt32x2.name = "operator^"_c;
    UInt32x2_operator_xor_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_xor_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator<<
    UInt32x2_operator_lsh_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_lsh_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_lsh_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_lsh_UInt32x2.name = "operator<<"_c;
    UInt32x2_operator_lsh_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_lsh_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator>>
    UInt32x2_operator_rsh_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_rsh_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_rsh_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_rsh_UInt32x2.name = "operator>>"_c;
    UInt32x2_operator_rsh_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_rsh_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator|=
    UInt32x2_operator_orasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_orasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_orasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_orasg_UInt32x2.name = "operator|="_c;
    UInt32x2_operator_orasg_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_orasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator&=
    UInt32x2_operator_andasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_andasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_andasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_andasg_UInt32x2.name = "operator&="_c;
    UInt32x2_operator_andasg_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_andasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator^=
    UInt32x2_operator_xorasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_xorasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_xorasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_xorasg_UInt32x2.name = "operator^="_c;
    UInt32x2_operator_xorasg_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_xorasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator<<=
    UInt32x2_operator_lshasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_lshasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_lshasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_lshasg_UInt32x2.name = "operator<<="_c;
    UInt32x2_operator_lshasg_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_lshasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    // operator>>=
    UInt32x2_operator_rhsasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_rhsasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_rhsasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x2_operator_rhsasg_UInt32x2.name = "operator>>="_c;
    UInt32x2_operator_rhsasg_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt32x2_operator_rhsasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "u32x2"_c, &UInt32x2_convert_Float32x2 },
        std::pair{ "u32x2(f32x2)"_c, &UInt32x2_convert_Float32x2 },
        std::pair{ "u32x2"_c, &UInt32x2_splat_Float32 },
        std::pair{ "u32x2(f32)"_c, &UInt32x2_splat_Float32 },
        std::pair{ "u32x2"_c, &UInt32x2_convert_UInt32x2 },
        std::pair{ "u32x2(u32x2)"_c, &UInt32x2_convert_UInt32x2 },
        std::pair{ "u32x2"_c, &UInt32x2_splat_UInt32 },
        std::pair{ "u32x2(u32)"_c, &UInt32x2_splat_UInt32 },
        std::pair{ "u32x2"_c, &UInt32x2_convert_Int32x2 },
        std::pair{ "u32x2(i32x2)"_c, &UInt32x2_convert_Int32x2 },
        std::pair{ "u32x2"_c, &UInt32x2_splat_Int32 },
        std::pair{ "u32x2(i32)"_c, &UInt32x2_splat_Int32 },
        std::pair{ "u32x2"_c, &UInt32x2_convert_Bool8x2 },
        std::pair{ "u32x2(b8x2)"_c, &UInt32x2_convert_Bool8x2 },
        std::pair{ "u32x2"_c, &UInt32x2_splat_Bool8 },
        std::pair{ "u32x2(b8)"_c, &UInt32x2_splat_Bool8 },
        std::pair{ "u32x2"_c, &UInt32x2_convert_Float16x2 },
        std::pair{ "u32x2(f16x2)"_c, &UInt32x2_convert_Float16x2 },
        std::pair{ "u32x2"_c, &UInt32x2_splat_Float16 },
        std::pair{ "u32x2(f16)"_c, &UInt32x2_splat_Float16 },
        std::pair{ "u32x2"_c, &UInt32x2_convert_UInt16x2 },
        std::pair{ "u32x2(u16x2)"_c, &UInt32x2_convert_UInt16x2 },
        std::pair{ "u32x2"_c, &UInt32x2_splat_UInt16 },
        std::pair{ "u32x2(u16)"_c, &UInt32x2_splat_UInt16 },
        std::pair{ "u32x2"_c, &UInt32x2_convert_Int16x2 },
        std::pair{ "u32x2(i16x2)"_c, &UInt32x2_convert_Int16x2 },
        std::pair{ "u32x2"_c, &UInt32x2_splat_Int16 },
        std::pair{ "u32x2(i16)"_c, &UInt32x2_splat_Int16 },
        std::pair{ "u32x2"_c, &UInt32x2_ctor0_UInt32_UInt32},
        std::pair{ "u32x2(u32,u32)"_c, &UInt32x2_ctor0_UInt32_UInt32},
        std::pair{ "operator[](i32)"_c, &UInt32x2_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &UInt32x2_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &UInt32x2_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &UInt32x2_operator_index_UInt16},
        std::pair{ "operator+(u32x2)"_c, &UInt32x2_operator_add_UInt32x2},
        std::pair{ "operator-(u32x2)"_c, &UInt32x2_operator_sub_UInt32x2},
        std::pair{ "operator*(u32x2)"_c, &UInt32x2_operator_mul_UInt32x2},
        std::pair{ "operator/(u32x2)"_c, &UInt32x2_operator_div_UInt32x2},
        std::pair{ "operator%(u32x2)"_c, &UInt32x2_operator_mod_UInt32x2},
        std::pair{ "operator+=(u32x2)"_c, &UInt32x2_operator_addasg_UInt32x2},
        std::pair{ "operator-=(u32x2)"_c, &UInt32x2_operator_subasg_UInt32x2},
        std::pair{ "operator*=(u32x2)"_c, &UInt32x2_operator_mulasg_UInt32x2},
        std::pair{ "operator/=(u32x2)"_c, &UInt32x2_operator_divasg_UInt32x2},
        std::pair{ "operator<(u32x2)"_c, &UInt32x2_operator_lt_UInt32x2},
        std::pair{ "operator<=(u32x2)"_c, &UInt32x2_operator_lte_UInt32x2},
        std::pair{ "operator>(u32x2)"_c, &UInt32x2_operator_gt_UInt32x2},
        std::pair{ "operator>=(u32x2)"_c, &UInt32x2_operator_gte_UInt32x2},
        std::pair{ "operator==(u32x2)"_c, &UInt32x2_operator_eq_UInt32x2},
        std::pair{ "operator!=(u32x2)"_c, &UInt32x2_operator_neq_UInt32x2},
        std::pair{ "operator*(f32)"_c, &UInt32x2_operator_scale_UInt32x2_Float32},
        std::pair{ "operator*(f16)"_c, &UInt32x2_operator_scale_UInt32x2_Float16},
        std::pair{ "operator*(u32)"_c, &UInt32x2_operator_scale_UInt32x2_UInt32},
        std::pair{ "operator*(u16)"_c, &UInt32x2_operator_scale_UInt32x2_UInt16},
        std::pair{ "operator*(i32)"_c, &UInt32x2_operator_scale_UInt32x2_Int32},
        std::pair{ "operator*(i16)"_c, &UInt32x2_operator_scale_UInt32x2_Int16},
        std::pair{ "operator|(u32x2)"_c, &UInt32x2_operator_or_UInt32x2},
        std::pair{ "operator&(u32x2)"_c, &UInt32x2_operator_and_UInt32x2},
        std::pair{ "operator^(u32x2)"_c, &UInt32x2_operator_xor_UInt32x2},
        std::pair{ "operator<<(u32x2)"_c, &UInt32x2_operator_lsh_UInt32x2},
        std::pair{ "operator>>(u32x2)"_c, &UInt32x2_operator_rsh_UInt32x2},
        std::pair{ "operator|=(u32x2)"_c, &UInt32x2_operator_orasg_UInt32x2},
        std::pair{ "operator&=(u32x2)"_c, &UInt32x2_operator_andasg_UInt32x2},
        std::pair{ "operator^=(u32x2)"_c, &UInt32x2_operator_xorasg_UInt32x2},
        std::pair{ "operator<<=(u32x2)"_c, &UInt32x2_operator_lshasg_UInt32x2},
        std::pair{ "operator>>=(u32x2)"_c, &UInt32x2_operator_rhsasg_UInt32x2}
    }
    };   
}

UInt32x3::UInt32x3()
{
    this->name = "u32";
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    // Conversion from Float32x3
    UInt32x3_convert_Float32x3_arg0.name = "_arg0"_c;
    UInt32x3_convert_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&UInt32x3_convert_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    UInt32x3_convert_Float32x3.name = "u32x3"_c;
    UInt32x3_convert_Float32x3.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_convert_Float32x3)->returnTypeSymbol = &UInt32x3Type;

    // Splat with Float32
    UInt32x3_splat_Float32_arg0.name = "_arg0"_c;
    UInt32x3_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&UInt32x3_splat_Float32_arg0)->typeSymbol = &Float32Type;
    UInt32x3_splat_Float32.name = "u32x3"_c;
    UInt32x3_splat_Float32.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_splat_Float32)->returnTypeSymbol = &UInt32x3Type;

    // Conversion from UInt32x3
    UInt32x3_convert_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_convert_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_convert_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_convert_UInt32x3.name = "u32x3"_c;
    UInt32x3_convert_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_convert_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // Splat with UInt32
    UInt32x3_splat_UInt32_arg0.name = "_arg0"_c;
    UInt32x3_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x3_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32x3_splat_UInt32.name = "u32x3"_c;
    UInt32x3_splat_UInt32.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_splat_UInt32)->returnTypeSymbol = &UInt32x3Type;

    // Conversion from Int32x3
    UInt32x3_convert_Int32x3_arg0.name = "_arg0"_c;
    UInt32x3_convert_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&UInt32x3_convert_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    UInt32x3_convert_Int32x3.name = "u32x3"_c;
    UInt32x3_convert_Int32x3.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_convert_Int32x3)->returnTypeSymbol = &UInt32x3Type;

    // Splat with Int32
    UInt32x3_splat_Int32_arg0.name = "_arg0"_c;
    UInt32x3_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt32x3_splat_Int32_arg0)->typeSymbol = &Int32Type;
    UInt32x3_splat_Int32.name = "u32x3"_c;
    UInt32x3_splat_Int32.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_splat_Int32)->returnTypeSymbol = &UInt32x3Type;

    // Conversion from Bool8x3
    UInt32x3_convert_Bool8x3_arg0.name = "_arg0"_c;
    UInt32x3_convert_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&UInt32x3_convert_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    UInt32x3_convert_Bool8x3.name = "u32x3"_c;
    UInt32x3_convert_Bool8x3.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_convert_Bool8x3)->returnTypeSymbol = &UInt32x3Type;

    // Splat with Bool8
    UInt32x3_splat_Bool8_arg0.name = "_arg0"_c;
    UInt32x3_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&UInt32x3_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    UInt32x3_splat_Bool8.name = "u32x3"_c;
    UInt32x3_splat_Bool8.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_splat_Bool8)->returnTypeSymbol = &UInt32x3Type;

    // Conversion from Float16x3
    UInt32x3_convert_Float16x3_arg0.name = "_arg0"_c;
    UInt32x3_convert_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&UInt32x3_convert_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    UInt32x3_convert_Float16x3.name = "u32x3"_c;
    UInt32x3_convert_Float16x3.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_convert_Float16x3)->returnTypeSymbol = &UInt32x3Type;

    // Splat with Float16
    UInt32x3_splat_Float16_arg0.name = "_arg0"_c;
    UInt32x3_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&UInt32x3_splat_Float16_arg0)->typeSymbol = &Float16Type;
    UInt32x3_splat_Float16.name = "u32x3"_c;
    UInt32x3_splat_Float16.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_splat_Float16)->returnTypeSymbol = &UInt32x3Type;

    // Conversion from UInt16x3
    UInt32x3_convert_UInt16x3_arg0.name = "_arg0"_c;
    UInt32x3_convert_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt32x3_convert_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt32x3_convert_UInt16x3.name = "u32x3"_c;
    UInt32x3_convert_UInt16x3.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_convert_UInt16x3)->returnTypeSymbol = &UInt32x3Type;

    // Splat with UInt16
    UInt32x3_splat_UInt16_arg0.name = "_arg0"_c;
    UInt32x3_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt32x3_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt32x3_splat_UInt16.name = "u32x3"_c;
    UInt32x3_splat_UInt16.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_splat_UInt16)->returnTypeSymbol = &UInt32x3Type;

    // Conversion from Int16x3
    UInt32x3_convert_Int16x3_arg0.name = "_arg0"_c;
    UInt32x3_convert_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&UInt32x3_convert_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    UInt32x3_convert_Int16x3.name = "u32x3"_c;
    UInt32x3_convert_Int16x3.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_convert_Int16x3)->returnTypeSymbol = &UInt32x3Type;

    // Splat with Int16
    UInt32x3_splat_Int16_arg0.name = "_arg0"_c;
    UInt32x3_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt32x3_splat_Int16_arg0)->typeSymbol = &Int16Type;
    UInt32x3_splat_Int16.name = "u32x3"_c;
    UInt32x3_splat_Int16.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_splat_Int16)->returnTypeSymbol = &UInt32x3Type;

    // Construct with UInt32, UInt32, UInt32
    UInt32x3_ctor0_arg0.name = "_arg0"_c;
    UInt32x3_ctor0_arg0.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x3_ctor0_arg0)->typeSymbol = &UInt32Type;
    UInt32x3_ctor0_arg1.name = "_arg1"_c;
    UInt32x3_ctor0_arg1.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x3_ctor0_arg1)->typeSymbol = &UInt32Type;
    UInt32x3_ctor0_arg2.name = "_arg2"_c;
    UInt32x3_ctor0_arg2.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x3_ctor0_arg2)->typeSymbol = &UInt32Type;
    UInt32x3_ctor0_UInt32_UInt32_UInt32.name = "0"_c;
    UInt32x3_ctor0_UInt32_UInt32_UInt32.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_ctor0_UInt32_UInt32_UInt32)->returnTypeSymbol = &UInt32x3Type;

    // Construct with UInt32x2, UInt32
    UInt32x3_ctor1_arg0.name = "_arg0"_c;
    UInt32x3_ctor1_arg0.type = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x3_ctor1_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x3_ctor1_arg1.name = "_arg1"_c;
    UInt32x3_ctor1_arg1.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x3_ctor1_arg1)->typeSymbol = &UInt32Type;
    UInt32x3_ctor1_UInt32x2_UInt32.name = "1"_c;
    UInt32x3_ctor1_UInt32x2_UInt32.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_ctor1_UInt32x2_UInt32)->returnTypeSymbol = &UInt32x3Type;

    // Construct with UInt32, UInt32x2
    UInt32x3_ctor2_arg0.name = "_arg0"_c;
    UInt32x3_ctor2_arg0.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x3_ctor2_arg0)->typeSymbol = &UInt32Type;
    UInt32x3_ctor2_arg1.name = "_arg1"_c;
    UInt32x3_ctor2_arg1.type = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x3_ctor2_arg1)->typeSymbol = &UInt32x2Type;
    UInt32x3_ctor2_UInt32_UInt32x2.name = "2"_c;
    UInt32x3_ctor2_UInt32_UInt32x2.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_ctor2_UInt32_UInt32x2)->returnTypeSymbol = &UInt32x3Type;

    // operator[](i32)
    UInt32x3_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt32x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt32x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    UInt32x3_operator_index_Int32.name = "operator[]"_c;
    UInt32x3_operator_index_Int32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x3_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    // operator[](u32)
    UInt32x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt32x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32x3_operator_index_UInt32.name = "operator[]"_c;
    UInt32x3_operator_index_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x3_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator[](i16)
    UInt32x3_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt32x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt32x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    UInt32x3_operator_index_Int16.name = "operator[]"_c;
    UInt32x3_operator_index_Int16.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x3_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    // operator[](u16)
    UInt32x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt32x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt32x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt32x3_operator_index_UInt16.name = "operator[]"_c;
    UInt32x3_operator_index_UInt16.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x3_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    // operator+(u32x3)
    UInt32x3_operator_add_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_add_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_add_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_add_UInt32x3.name = "operator+"_c;
    UInt32x3_operator_add_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_add_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator-(u32x3)
    UInt32x3_operator_sub_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_sub_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_sub_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_sub_UInt32x3.name = "operator-"_c;
    UInt32x3_operator_sub_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_sub_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator*(u32x3)
    UInt32x3_operator_mul_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_mul_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_mul_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_mul_UInt32x3.name = "operator*"_c;
    UInt32x3_operator_mul_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_mul_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator/(u32x3)
    UInt32x3_operator_div_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_div_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_div_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_div_UInt32x3.name = "operator/"_c;
    UInt32x3_operator_div_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_div_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator%(u32x3)
    UInt32x3_operator_mod_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_mod_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_mod_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_mod_UInt32x3.name = "operator%"_c;
    UInt32x3_operator_mod_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_mod_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator+=(u32x3)
    UInt32x3_operator_addasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_addasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_addasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_addasg_UInt32x3.name = "operator+="_c;
    UInt32x3_operator_addasg_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_addasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator-=(u32x3)
    UInt32x3_operator_subasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_subasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_subasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_subasg_UInt32x3.name = "operator-="_c;
    UInt32x3_operator_subasg_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_subasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator*=(u32x3)
    UInt32x3_operator_mulasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_mulasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_mulasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_mulasg_UInt32x3.name = "operator*="_c;
    UInt32x3_operator_mulasg_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_mulasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator/=(u32x3)
    UInt32x3_operator_divasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_divasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_divasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_divasg_UInt32x3.name = "operator/="_c;
    UInt32x3_operator_divasg_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_divasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator<(u32x3)
    UInt32x3_operator_lt_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_lt_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_lt_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_lt_UInt32x3.name = "operator<"_c;
    UInt32x3_operator_lt_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_lt_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator<=(u32x3)
    UInt32x3_operator_lte_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_lte_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_lte_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_lte_UInt32x3.name = "operator<="_c;
    UInt32x3_operator_lte_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_lte_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator>(u32x3)
    UInt32x3_operator_gt_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_gt_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_gt_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_gt_UInt32x3.name = "operator>"_c;
    UInt32x3_operator_gt_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_gt_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator>=(u32x3)
    UInt32x3_operator_gte_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_gte_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_gte_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_gte_UInt32x3.name = "operator>="_c;
    UInt32x3_operator_gte_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_gte_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator==(u32x3)
    UInt32x3_operator_eq_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_eq_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_eq_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_eq_UInt32x3.name = "operator=="_c;
    UInt32x3_operator_eq_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_eq_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator!=(u32x3)
    UInt32x3_operator_neq_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_neq_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_neq_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_neq_UInt32x3.name = "operator!="_c;
    UInt32x3_operator_neq_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_neq_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator*(f32)
    UInt32x3_operator_scale_UInt32x3_Float32_arg0.name = "_arg0"_c;
    UInt32x3_operator_scale_UInt32x3_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32x3_Float32_arg0)->typeSymbol = &Float32Type;
    UInt32x3_operator_scale_UInt32x3_Float32.name = "operator*"_c;
    UInt32x3_operator_scale_UInt32x3_Float32.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32x3_Float32)->returnTypeSymbol = &UInt32x3Type;

    // operator*(f16)
    UInt32x3_operator_scale_UInt32x3_Float16_arg0.name = "_arg0"_c;
    UInt32x3_operator_scale_UInt32x3_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32x3_Float16_arg0)->typeSymbol = &Float16Type;
    UInt32x3_operator_scale_UInt32x3_Float16.name = "operator*"_c;
    UInt32x3_operator_scale_UInt32x3_Float16.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32x3_Float16)->returnTypeSymbol = &UInt32x3Type;

    // operator*(u32)
    UInt32x3_operator_scale_UInt32x3_UInt32_arg0.name = "_arg0"_c;
    UInt32x3_operator_scale_UInt32x3_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32x3_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32x3_operator_scale_UInt32x3_UInt32.name = "operator*"_c;
    UInt32x3_operator_scale_UInt32x3_UInt32.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32x3_UInt32)->returnTypeSymbol = &UInt32x3Type;

    // operator*(u16)
    UInt32x3_operator_scale_UInt32x3_UInt16_arg0.name = "_arg0"_c;
    UInt32x3_operator_scale_UInt32x3_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32x3_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt32x3_operator_scale_UInt32x3_UInt16.name = "operator*"_c;
    UInt32x3_operator_scale_UInt32x3_UInt16.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32x3_UInt16)->returnTypeSymbol = &UInt32x3Type;

    // operator*(i32)
    UInt32x3_operator_scale_UInt32x3_Int32_arg0.name = "_arg0"_c;
    UInt32x3_operator_scale_UInt32x3_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32x3_Int32_arg0)->typeSymbol = &Int32Type;
    UInt32x3_operator_scale_UInt32x3_Int32.name = "operator*"_c;
    UInt32x3_operator_scale_UInt32x3_Int32.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32x3_Int32)->returnTypeSymbol = &UInt32x3Type;

    // operator*(i16)
    UInt32x3_operator_scale_UInt32x3_Int16_arg0.name = "_arg0"_c;
    UInt32x3_operator_scale_UInt32x3_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32x3_Int16_arg0)->typeSymbol = &Int16Type;
    UInt32x3_operator_scale_UInt32x3_Int16.name = "operator*"_c;
    UInt32x3_operator_scale_UInt32x3_Int16.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32x3_Int16)->returnTypeSymbol = &UInt32x3Type;

    // operator|
    UInt32x3_operator_or_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_or_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_or_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_or_UInt32x3.name = "operator|"_c;
    UInt32x3_operator_or_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_or_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator&
    UInt32x3_operator_and_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_and_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_and_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_and_UInt32x3.name = "operator&"_c;
    UInt32x3_operator_and_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_and_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator^
    UInt32x3_operator_xor_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_xor_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_xor_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_xor_UInt32x3.name = "operator^"_c;
    UInt32x3_operator_xor_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_xor_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator<<
    UInt32x3_operator_lsh_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_lsh_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_lsh_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_lsh_UInt32x3.name = "operator<<"_c;
    UInt32x3_operator_lsh_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_lsh_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator>>
    UInt32x3_operator_rsh_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_rsh_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_rsh_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_rsh_UInt32x3.name = "operator>>"_c;
    UInt32x3_operator_rsh_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_rsh_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator|=
    UInt32x3_operator_orasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_orasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_orasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_orasg_UInt32x3.name = "operator|="_c;
    UInt32x3_operator_orasg_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_orasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator&=
    UInt32x3_operator_andasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_andasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_andasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_andasg_UInt32x3.name = "operator&="_c;
    UInt32x3_operator_andasg_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_andasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator^=
    UInt32x3_operator_xorasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_xorasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_xorasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_xorasg_UInt32x3.name = "operator^="_c;
    UInt32x3_operator_xorasg_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_xorasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator<<=
    UInt32x3_operator_lshasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_lshasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_lshasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_lshasg_UInt32x3.name = "operator<<="_c;
    UInt32x3_operator_lshasg_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_lshasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    // operator>>=
    UInt32x3_operator_rhsasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_rhsasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_rhsasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x3_operator_rhsasg_UInt32x3.name = "operator>>="_c;
    UInt32x3_operator_rhsasg_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt32x3_operator_rhsasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "u32x3"_c, &UInt32x3_convert_Float32x3 },
        std::pair{ "u32x3(f32x3)"_c, &UInt32x3_convert_Float32x3 },
        std::pair{ "u32x3"_c, &UInt32x3_splat_Float32 },
        std::pair{ "u32x3(f32)"_c, &UInt32x3_splat_Float32 },
        std::pair{ "u32x3"_c, &UInt32x3_convert_UInt32x3 },
        std::pair{ "u32x3(u32x3)"_c, &UInt32x3_convert_UInt32x3 },
        std::pair{ "u32x3"_c, &UInt32x3_splat_UInt32 },
        std::pair{ "u32x3(u32)"_c, &UInt32x3_splat_UInt32 },
        std::pair{ "u32x3"_c, &UInt32x3_convert_Int32x3 },
        std::pair{ "u32x3(i32x3)"_c, &UInt32x3_convert_Int32x3 },
        std::pair{ "u32x3"_c, &UInt32x3_splat_Int32 },
        std::pair{ "u32x3(i32)"_c, &UInt32x3_splat_Int32 },
        std::pair{ "u32x3"_c, &UInt32x3_convert_Bool8x3 },
        std::pair{ "u32x3(b8x3)"_c, &UInt32x3_convert_Bool8x3 },
        std::pair{ "u32x3"_c, &UInt32x3_splat_Bool8 },
        std::pair{ "u32x3(b8)"_c, &UInt32x3_splat_Bool8 },
        std::pair{ "u32x3"_c, &UInt32x3_convert_Float16x3 },
        std::pair{ "u32x3(f16x3)"_c, &UInt32x3_convert_Float16x3 },
        std::pair{ "u32x3"_c, &UInt32x3_splat_Float16 },
        std::pair{ "u32x3(f16)"_c, &UInt32x3_splat_Float16 },
        std::pair{ "u32x3"_c, &UInt32x3_convert_UInt16x3 },
        std::pair{ "u32x3(u16x3)"_c, &UInt32x3_convert_UInt16x3 },
        std::pair{ "u32x3"_c, &UInt32x3_splat_UInt16 },
        std::pair{ "u32x3(u16)"_c, &UInt32x3_splat_UInt16 },
        std::pair{ "u32x3"_c, &UInt32x3_convert_Int16x3 },
        std::pair{ "u32x3(i16x3)"_c, &UInt32x3_convert_Int16x3 },
        std::pair{ "u32x3"_c, &UInt32x3_splat_Int16 },
        std::pair{ "u32x3(i16)"_c, &UInt32x3_splat_Int16 },
        std::pair{ "u32x3"_c, &UInt32x3_ctor0_UInt32_UInt32_UInt32},
        std::pair{ "u32x3(u32,u32,u32)"_c, &UInt32x3_ctor0_UInt32_UInt32_UInt32},
        std::pair{ "u32x3"_c, &UInt32x3_ctor1_UInt32x2_UInt32},
        std::pair{ "u32x3(u32x2,u32)"_c, &UInt32x3_ctor1_UInt32x2_UInt32},
        std::pair{ "u32x3"_c, &UInt32x3_ctor2_UInt32_UInt32x2},
        std::pair{ "u32x3(u32,u32x2)"_c, &UInt32x3_ctor2_UInt32_UInt32x2},
        std::pair{ "operator[](i32)"_c, &UInt32x3_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &UInt32x3_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &UInt32x3_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &UInt32x3_operator_index_UInt16},
        std::pair{ "operator+(u32x3)"_c, &UInt32x3_operator_add_UInt32x3},
        std::pair{ "operator-(u32x3)"_c, &UInt32x3_operator_sub_UInt32x3},
        std::pair{ "operator*(u32x3)"_c, &UInt32x3_operator_mul_UInt32x3},
        std::pair{ "operator/(u32x3)"_c, &UInt32x3_operator_div_UInt32x3},
        std::pair{ "operator%(u32x3)"_c, &UInt32x3_operator_mod_UInt32x3},
        std::pair{ "operator+=(u32x3)"_c, &UInt32x3_operator_addasg_UInt32x3},
        std::pair{ "operator-=(u32x3)"_c, &UInt32x3_operator_subasg_UInt32x3},
        std::pair{ "operator*=(u32x3)"_c, &UInt32x3_operator_mulasg_UInt32x3},
        std::pair{ "operator/=(u32x3)"_c, &UInt32x3_operator_divasg_UInt32x3},
        std::pair{ "operator<(u32x3)"_c, &UInt32x3_operator_lt_UInt32x3},
        std::pair{ "operator<=(u32x3)"_c, &UInt32x3_operator_lte_UInt32x3},
        std::pair{ "operator>(u32x3)"_c, &UInt32x3_operator_gt_UInt32x3},
        std::pair{ "operator>=(u32x3)"_c, &UInt32x3_operator_gte_UInt32x3},
        std::pair{ "operator==(u32x3)"_c, &UInt32x3_operator_eq_UInt32x3},
        std::pair{ "operator!=(u32x3)"_c, &UInt32x3_operator_neq_UInt32x3},
        std::pair{ "operator*(f32)"_c, &UInt32x3_operator_scale_UInt32x3_Float32},
        std::pair{ "operator*(f16)"_c, &UInt32x3_operator_scale_UInt32x3_Float16},
        std::pair{ "operator*(u32)"_c, &UInt32x3_operator_scale_UInt32x3_UInt32},
        std::pair{ "operator*(u16)"_c, &UInt32x3_operator_scale_UInt32x3_UInt16},
        std::pair{ "operator*(i32)"_c, &UInt32x3_operator_scale_UInt32x3_Int32},
        std::pair{ "operator*(i16)"_c, &UInt32x3_operator_scale_UInt32x3_Int16},
        std::pair{ "operator|(u32x3)"_c, &UInt32x3_operator_or_UInt32x3},
        std::pair{ "operator&(u32x3)"_c, &UInt32x3_operator_and_UInt32x3},
        std::pair{ "operator^(u32x3)"_c, &UInt32x3_operator_xor_UInt32x3},
        std::pair{ "operator<<(u32x3)"_c, &UInt32x3_operator_lsh_UInt32x3},
        std::pair{ "operator>>(u32x3)"_c, &UInt32x3_operator_rsh_UInt32x3},
        std::pair{ "operator|=(u32x3)"_c, &UInt32x3_operator_orasg_UInt32x3},
        std::pair{ "operator&=(u32x3)"_c, &UInt32x3_operator_andasg_UInt32x3},
        std::pair{ "operator^=(u32x3)"_c, &UInt32x3_operator_xorasg_UInt32x3},
        std::pair{ "operator<<=(u32x3)"_c, &UInt32x3_operator_lshasg_UInt32x3},
        std::pair{ "operator>>=(u32x3)"_c, &UInt32x3_operator_rhsasg_UInt32x3}
    }
    };   
}

UInt32x4::UInt32x4()
{
    this->name = "u32";
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    // Conversion from Float32x4
    UInt32x4_convert_Float32x4_arg0.name = "_arg0"_c;
    UInt32x4_convert_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&UInt32x4_convert_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    UInt32x4_convert_Float32x4.name = "u32x4"_c;
    UInt32x4_convert_Float32x4.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_convert_Float32x4)->returnTypeSymbol = &UInt32x4Type;

    // Splat with Float32
    UInt32x4_splat_Float32_arg0.name = "_arg0"_c;
    UInt32x4_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&UInt32x4_splat_Float32_arg0)->typeSymbol = &Float32Type;
    UInt32x4_splat_Float32.name = "u32x4"_c;
    UInt32x4_splat_Float32.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_splat_Float32)->returnTypeSymbol = &UInt32x4Type;

    // Conversion from UInt32x4
    UInt32x4_convert_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_convert_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_convert_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_convert_UInt32x4.name = "u32x4"_c;
    UInt32x4_convert_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_convert_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // Splat with UInt32
    UInt32x4_splat_UInt32_arg0.name = "_arg0"_c;
    UInt32x4_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x4_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32x4_splat_UInt32.name = "u32x4"_c;
    UInt32x4_splat_UInt32.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_splat_UInt32)->returnTypeSymbol = &UInt32x4Type;

    // Conversion from Int32x4
    UInt32x4_convert_Int32x4_arg0.name = "_arg0"_c;
    UInt32x4_convert_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&UInt32x4_convert_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    UInt32x4_convert_Int32x4.name = "u32x4"_c;
    UInt32x4_convert_Int32x4.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_convert_Int32x4)->returnTypeSymbol = &UInt32x4Type;

    // Splat with Int32
    UInt32x4_splat_Int32_arg0.name = "_arg0"_c;
    UInt32x4_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt32x4_splat_Int32_arg0)->typeSymbol = &Int32Type;
    UInt32x4_splat_Int32.name = "u32x4"_c;
    UInt32x4_splat_Int32.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_splat_Int32)->returnTypeSymbol = &UInt32x4Type;

    // Conversion from Bool8x4
    UInt32x4_convert_Bool8x4_arg0.name = "_arg0"_c;
    UInt32x4_convert_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&UInt32x4_convert_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    UInt32x4_convert_Bool8x4.name = "u32x4"_c;
    UInt32x4_convert_Bool8x4.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_convert_Bool8x4)->returnTypeSymbol = &UInt32x4Type;

    // Splat with Bool8
    UInt32x4_splat_Bool8_arg0.name = "_arg0"_c;
    UInt32x4_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&UInt32x4_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    UInt32x4_splat_Bool8.name = "u32x4"_c;
    UInt32x4_splat_Bool8.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_splat_Bool8)->returnTypeSymbol = &UInt32x4Type;

    // Conversion from Float16x4
    UInt32x4_convert_Float16x4_arg0.name = "_arg0"_c;
    UInt32x4_convert_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&UInt32x4_convert_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    UInt32x4_convert_Float16x4.name = "u32x4"_c;
    UInt32x4_convert_Float16x4.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_convert_Float16x4)->returnTypeSymbol = &UInt32x4Type;

    // Splat with Float16
    UInt32x4_splat_Float16_arg0.name = "_arg0"_c;
    UInt32x4_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&UInt32x4_splat_Float16_arg0)->typeSymbol = &Float16Type;
    UInt32x4_splat_Float16.name = "u32x4"_c;
    UInt32x4_splat_Float16.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_splat_Float16)->returnTypeSymbol = &UInt32x4Type;

    // Conversion from UInt16x4
    UInt32x4_convert_UInt16x4_arg0.name = "_arg0"_c;
    UInt32x4_convert_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt32x4_convert_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt32x4_convert_UInt16x4.name = "u32x4"_c;
    UInt32x4_convert_UInt16x4.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_convert_UInt16x4)->returnTypeSymbol = &UInt32x4Type;

    // Splat with UInt16
    UInt32x4_splat_UInt16_arg0.name = "_arg0"_c;
    UInt32x4_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt32x4_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt32x4_splat_UInt16.name = "u32x4"_c;
    UInt32x4_splat_UInt16.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_splat_UInt16)->returnTypeSymbol = &UInt32x4Type;

    // Conversion from Int16x4
    UInt32x4_convert_Int16x4_arg0.name = "_arg0"_c;
    UInt32x4_convert_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&UInt32x4_convert_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    UInt32x4_convert_Int16x4.name = "u32x4"_c;
    UInt32x4_convert_Int16x4.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_convert_Int16x4)->returnTypeSymbol = &UInt32x4Type;

    // Splat with Int16
    UInt32x4_splat_Int16_arg0.name = "_arg0"_c;
    UInt32x4_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt32x4_splat_Int16_arg0)->typeSymbol = &Int16Type;
    UInt32x4_splat_Int16.name = "u32x4"_c;
    UInt32x4_splat_Int16.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_splat_Int16)->returnTypeSymbol = &UInt32x4Type;

    // Construct with UInt32, UInt32, UInt32, UInt32
    UInt32x4_ctor0_arg0.name = "_arg0"_c;
    UInt32x4_ctor0_arg0.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x4_ctor0_arg0)->typeSymbol = &UInt32Type;
    UInt32x4_ctor0_arg1.name = "_arg1"_c;
    UInt32x4_ctor0_arg1.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x4_ctor0_arg1)->typeSymbol = &UInt32Type;
    UInt32x4_ctor0_arg2.name = "_arg2"_c;
    UInt32x4_ctor0_arg2.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x4_ctor0_arg2)->typeSymbol = &UInt32Type;
    UInt32x4_ctor0_arg3.name = "_arg3"_c;
    UInt32x4_ctor0_arg3.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x4_ctor0_arg3)->typeSymbol = &UInt32Type;
    UInt32x4_ctor0_UInt32_UInt32_UInt32_UInt32.name = "0"_c;
    UInt32x4_ctor0_UInt32_UInt32_UInt32_UInt32.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_ctor0_UInt32_UInt32_UInt32_UInt32)->returnTypeSymbol = &UInt32x4Type;

    // Construct with UInt32x2, UInt32, UInt32
    UInt32x4_ctor1_arg0.name = "_arg0"_c;
    UInt32x4_ctor1_arg0.type = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x4_ctor1_arg0)->typeSymbol = &UInt32x2Type;
    UInt32x4_ctor1_arg1.name = "_arg1"_c;
    UInt32x4_ctor1_arg1.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x4_ctor1_arg1)->typeSymbol = &UInt32Type;
    UInt32x4_ctor1_arg2.name = "_arg2"_c;
    UInt32x4_ctor1_arg2.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x4_ctor1_arg2)->typeSymbol = &UInt32Type;
    UInt32x4_ctor1_UInt32x2_UInt32_UInt32.name = "1"_c;
    UInt32x4_ctor1_UInt32x2_UInt32_UInt32.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_ctor1_UInt32x2_UInt32_UInt32)->returnTypeSymbol = &UInt32x4Type;

    // Construct with UInt32, UInt32x2, UInt32
    UInt32x4_ctor2_arg0.name = "_arg0"_c;
    UInt32x4_ctor2_arg0.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x4_ctor2_arg0)->typeSymbol = &UInt32Type;
    UInt32x4_ctor2_arg1.name = "_arg1"_c;
    UInt32x4_ctor2_arg1.type = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x4_ctor2_arg1)->typeSymbol = &UInt32x2Type;
    UInt32x4_ctor2_arg2.name = "_arg2"_c;
    UInt32x4_ctor2_arg2.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x4_ctor2_arg2)->typeSymbol = &UInt32Type;
    UInt32x4_ctor2_UInt32_UInt32x2_UInt32.name = "2"_c;
    UInt32x4_ctor2_UInt32_UInt32x2_UInt32.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_ctor2_UInt32_UInt32x2_UInt32)->returnTypeSymbol = &UInt32x4Type;

    // Construct with UInt32, UInt32, UInt32x2
    UInt32x4_ctor3_arg0.name = "_arg0"_c;
    UInt32x4_ctor3_arg0.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x4_ctor3_arg0)->typeSymbol = &UInt32Type;
    UInt32x4_ctor3_arg1.name = "_arg1"_c;
    UInt32x4_ctor3_arg1.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x4_ctor3_arg1)->typeSymbol = &UInt32Type;
    UInt32x4_ctor3_arg2.name = "_arg2"_c;
    UInt32x4_ctor3_arg2.type = Type::FullType { UInt32x2Type.name };
    Symbol::Resolved(&UInt32x4_ctor3_arg2)->typeSymbol = &UInt32x2Type;
    UInt32x4_ctor3_UInt32_UInt32_UInt32x2.name = "3"_c;
    UInt32x4_ctor3_UInt32_UInt32_UInt32x2.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_ctor3_UInt32_UInt32_UInt32x2)->returnTypeSymbol = &UInt32x4Type;

    // Construct with UInt32x3, UInt32
    UInt32x4_ctor4_arg0.name = "_arg0"_c;
    UInt32x4_ctor4_arg0.type = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x4_ctor4_arg0)->typeSymbol = &UInt32x3Type;
    UInt32x4_ctor4_arg1.name = "_arg1"_c;
    UInt32x4_ctor4_arg1.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x4_ctor4_arg1)->typeSymbol = &UInt32Type;
    UInt32x4_ctor4_UInt32x3_UInt32.name = "4"_c;
    UInt32x4_ctor4_UInt32x3_UInt32.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_ctor4_UInt32x3_UInt32)->returnTypeSymbol = &UInt32x4Type;

    // Construct with UInt32, UInt32x3
    UInt32x4_ctor5_arg0.name = "_arg0"_c;
    UInt32x4_ctor5_arg0.type = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&UInt32x4_ctor5_arg0)->typeSymbol = &UInt32Type;
    UInt32x4_ctor5_arg1.name = "_arg1"_c;
    UInt32x4_ctor5_arg1.type = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&UInt32x4_ctor5_arg1)->typeSymbol = &UInt32x3Type;
    UInt32x4_ctor5_UInt32_UInt32x3.name = "5"_c;
    UInt32x4_ctor5_UInt32_UInt32x3.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_ctor5_UInt32_UInt32x3)->returnTypeSymbol = &UInt32x4Type;

    // operator[](i32)
    UInt32x4_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt32x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt32x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    UInt32x4_operator_index_Int32.name = "operator[]"_c;
    UInt32x4_operator_index_Int32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x4_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    // operator[](u32)
    UInt32x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt32x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32x4_operator_index_UInt32.name = "operator[]"_c;
    UInt32x4_operator_index_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x4_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    // operator[](i16)
    UInt32x4_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt32x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt32x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    UInt32x4_operator_index_Int16.name = "operator[]"_c;
    UInt32x4_operator_index_Int16.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x4_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    // operator[](u16)
    UInt32x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt32x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt32x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt32x4_operator_index_UInt16.name = "operator[]"_c;
    UInt32x4_operator_index_UInt16.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x4_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    // operator+(u32x4)
    UInt32x4_operator_add_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_add_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_add_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_add_UInt32x4.name = "operator+"_c;
    UInt32x4_operator_add_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_add_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator-(u32x4)
    UInt32x4_operator_sub_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_sub_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_sub_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_sub_UInt32x4.name = "operator-"_c;
    UInt32x4_operator_sub_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_sub_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator*(u32x4)
    UInt32x4_operator_mul_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_mul_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_mul_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_mul_UInt32x4.name = "operator*"_c;
    UInt32x4_operator_mul_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_mul_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator/(u32x4)
    UInt32x4_operator_div_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_div_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_div_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_div_UInt32x4.name = "operator/"_c;
    UInt32x4_operator_div_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_div_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator%(u32x4)
    UInt32x4_operator_mod_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_mod_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_mod_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_mod_UInt32x4.name = "operator%"_c;
    UInt32x4_operator_mod_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_mod_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator+=(u32x4)
    UInt32x4_operator_addasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_addasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_addasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_addasg_UInt32x4.name = "operator+="_c;
    UInt32x4_operator_addasg_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_addasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator-=(u32x4)
    UInt32x4_operator_subasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_subasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_subasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_subasg_UInt32x4.name = "operator-="_c;
    UInt32x4_operator_subasg_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_subasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator*=(u32x4)
    UInt32x4_operator_mulasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_mulasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_mulasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_mulasg_UInt32x4.name = "operator*="_c;
    UInt32x4_operator_mulasg_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_mulasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator/=(u32x4)
    UInt32x4_operator_divasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_divasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_divasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_divasg_UInt32x4.name = "operator/="_c;
    UInt32x4_operator_divasg_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_divasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator<(u32x4)
    UInt32x4_operator_lt_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_lt_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_lt_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_lt_UInt32x4.name = "operator<"_c;
    UInt32x4_operator_lt_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_lt_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator<=(u32x4)
    UInt32x4_operator_lte_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_lte_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_lte_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_lte_UInt32x4.name = "operator<="_c;
    UInt32x4_operator_lte_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_lte_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator>(u32x4)
    UInt32x4_operator_gt_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_gt_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_gt_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_gt_UInt32x4.name = "operator>"_c;
    UInt32x4_operator_gt_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_gt_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator>=(u32x4)
    UInt32x4_operator_gte_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_gte_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_gte_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_gte_UInt32x4.name = "operator>="_c;
    UInt32x4_operator_gte_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_gte_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator==(u32x4)
    UInt32x4_operator_eq_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_eq_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_eq_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_eq_UInt32x4.name = "operator=="_c;
    UInt32x4_operator_eq_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_eq_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator!=(u32x4)
    UInt32x4_operator_neq_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_neq_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_neq_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_neq_UInt32x4.name = "operator!="_c;
    UInt32x4_operator_neq_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_neq_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator*(f32)
    UInt32x4_operator_scale_UInt32x4_Float32_arg0.name = "_arg0"_c;
    UInt32x4_operator_scale_UInt32x4_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32x4_Float32_arg0)->typeSymbol = &Float32Type;
    UInt32x4_operator_scale_UInt32x4_Float32.name = "operator*"_c;
    UInt32x4_operator_scale_UInt32x4_Float32.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32x4_Float32)->returnTypeSymbol = &UInt32x4Type;

    // operator*(f16)
    UInt32x4_operator_scale_UInt32x4_Float16_arg0.name = "_arg0"_c;
    UInt32x4_operator_scale_UInt32x4_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32x4_Float16_arg0)->typeSymbol = &Float16Type;
    UInt32x4_operator_scale_UInt32x4_Float16.name = "operator*"_c;
    UInt32x4_operator_scale_UInt32x4_Float16.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32x4_Float16)->returnTypeSymbol = &UInt32x4Type;

    // operator*(u32)
    UInt32x4_operator_scale_UInt32x4_UInt32_arg0.name = "_arg0"_c;
    UInt32x4_operator_scale_UInt32x4_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32x4_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt32x4_operator_scale_UInt32x4_UInt32.name = "operator*"_c;
    UInt32x4_operator_scale_UInt32x4_UInt32.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32x4_UInt32)->returnTypeSymbol = &UInt32x4Type;

    // operator*(u16)
    UInt32x4_operator_scale_UInt32x4_UInt16_arg0.name = "_arg0"_c;
    UInt32x4_operator_scale_UInt32x4_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32x4_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt32x4_operator_scale_UInt32x4_UInt16.name = "operator*"_c;
    UInt32x4_operator_scale_UInt32x4_UInt16.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32x4_UInt16)->returnTypeSymbol = &UInt32x4Type;

    // operator*(i32)
    UInt32x4_operator_scale_UInt32x4_Int32_arg0.name = "_arg0"_c;
    UInt32x4_operator_scale_UInt32x4_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32x4_Int32_arg0)->typeSymbol = &Int32Type;
    UInt32x4_operator_scale_UInt32x4_Int32.name = "operator*"_c;
    UInt32x4_operator_scale_UInt32x4_Int32.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32x4_Int32)->returnTypeSymbol = &UInt32x4Type;

    // operator*(i16)
    UInt32x4_operator_scale_UInt32x4_Int16_arg0.name = "_arg0"_c;
    UInt32x4_operator_scale_UInt32x4_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32x4_Int16_arg0)->typeSymbol = &Int16Type;
    UInt32x4_operator_scale_UInt32x4_Int16.name = "operator*"_c;
    UInt32x4_operator_scale_UInt32x4_Int16.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32x4_Int16)->returnTypeSymbol = &UInt32x4Type;

    // operator|
    UInt32x4_operator_or_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_or_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_or_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_or_UInt32x4.name = "operator|"_c;
    UInt32x4_operator_or_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_or_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator&
    UInt32x4_operator_and_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_and_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_and_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_and_UInt32x4.name = "operator&"_c;
    UInt32x4_operator_and_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_and_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator^
    UInt32x4_operator_xor_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_xor_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_xor_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_xor_UInt32x4.name = "operator^"_c;
    UInt32x4_operator_xor_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_xor_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator<<
    UInt32x4_operator_lsh_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_lsh_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_lsh_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_lsh_UInt32x4.name = "operator<<"_c;
    UInt32x4_operator_lsh_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_lsh_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator>>
    UInt32x4_operator_rsh_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_rsh_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_rsh_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_rsh_UInt32x4.name = "operator>>"_c;
    UInt32x4_operator_rsh_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_rsh_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator|=
    UInt32x4_operator_orasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_orasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_orasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_orasg_UInt32x4.name = "operator|="_c;
    UInt32x4_operator_orasg_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_orasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator&=
    UInt32x4_operator_andasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_andasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_andasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_andasg_UInt32x4.name = "operator&="_c;
    UInt32x4_operator_andasg_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_andasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator^=
    UInt32x4_operator_xorasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_xorasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_xorasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_xorasg_UInt32x4.name = "operator^="_c;
    UInt32x4_operator_xorasg_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_xorasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator<<=
    UInt32x4_operator_lshasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_lshasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_lshasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_lshasg_UInt32x4.name = "operator<<="_c;
    UInt32x4_operator_lshasg_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_lshasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    // operator>>=
    UInt32x4_operator_rhsasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_rhsasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_rhsasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt32x4_operator_rhsasg_UInt32x4.name = "operator>>="_c;
    UInt32x4_operator_rhsasg_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt32x4_operator_rhsasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "u32x4"_c, &UInt32x4_convert_Float32x4 },
        std::pair{ "u32x4(f32x4)"_c, &UInt32x4_convert_Float32x4 },
        std::pair{ "u32x4"_c, &UInt32x4_splat_Float32 },
        std::pair{ "u32x4(f32)"_c, &UInt32x4_splat_Float32 },
        std::pair{ "u32x4"_c, &UInt32x4_convert_UInt32x4 },
        std::pair{ "u32x4(u32x4)"_c, &UInt32x4_convert_UInt32x4 },
        std::pair{ "u32x4"_c, &UInt32x4_splat_UInt32 },
        std::pair{ "u32x4(u32)"_c, &UInt32x4_splat_UInt32 },
        std::pair{ "u32x4"_c, &UInt32x4_convert_Int32x4 },
        std::pair{ "u32x4(i32x4)"_c, &UInt32x4_convert_Int32x4 },
        std::pair{ "u32x4"_c, &UInt32x4_splat_Int32 },
        std::pair{ "u32x4(i32)"_c, &UInt32x4_splat_Int32 },
        std::pair{ "u32x4"_c, &UInt32x4_convert_Bool8x4 },
        std::pair{ "u32x4(b8x4)"_c, &UInt32x4_convert_Bool8x4 },
        std::pair{ "u32x4"_c, &UInt32x4_splat_Bool8 },
        std::pair{ "u32x4(b8)"_c, &UInt32x4_splat_Bool8 },
        std::pair{ "u32x4"_c, &UInt32x4_convert_Float16x4 },
        std::pair{ "u32x4(f16x4)"_c, &UInt32x4_convert_Float16x4 },
        std::pair{ "u32x4"_c, &UInt32x4_splat_Float16 },
        std::pair{ "u32x4(f16)"_c, &UInt32x4_splat_Float16 },
        std::pair{ "u32x4"_c, &UInt32x4_convert_UInt16x4 },
        std::pair{ "u32x4(u16x4)"_c, &UInt32x4_convert_UInt16x4 },
        std::pair{ "u32x4"_c, &UInt32x4_splat_UInt16 },
        std::pair{ "u32x4(u16)"_c, &UInt32x4_splat_UInt16 },
        std::pair{ "u32x4"_c, &UInt32x4_convert_Int16x4 },
        std::pair{ "u32x4(i16x4)"_c, &UInt32x4_convert_Int16x4 },
        std::pair{ "u32x4"_c, &UInt32x4_splat_Int16 },
        std::pair{ "u32x4(i16)"_c, &UInt32x4_splat_Int16 },
        std::pair{ "u32x4"_c, &UInt32x4_ctor0_UInt32_UInt32_UInt32_UInt32},
        std::pair{ "u32x4(u32,u32,u32,u32)"_c, &UInt32x4_ctor0_UInt32_UInt32_UInt32_UInt32},
        std::pair{ "u32x4"_c, &UInt32x4_ctor1_UInt32x2_UInt32_UInt32},
        std::pair{ "u32x4(u32x2,u32,u32)"_c, &UInt32x4_ctor1_UInt32x2_UInt32_UInt32},
        std::pair{ "u32x4"_c, &UInt32x4_ctor2_UInt32_UInt32x2_UInt32},
        std::pair{ "u32x4(u32,u32x2,u32)"_c, &UInt32x4_ctor2_UInt32_UInt32x2_UInt32},
        std::pair{ "u32x4"_c, &UInt32x4_ctor3_UInt32_UInt32_UInt32x2},
        std::pair{ "u32x4(u32,u32,u32x2)"_c, &UInt32x4_ctor3_UInt32_UInt32_UInt32x2},
        std::pair{ "u32x4"_c, &UInt32x4_ctor4_UInt32x3_UInt32},
        std::pair{ "u32x4(u32x3,u32)"_c, &UInt32x4_ctor4_UInt32x3_UInt32},
        std::pair{ "u32x4"_c, &UInt32x4_ctor5_UInt32_UInt32x3},
        std::pair{ "u32x4(u32,u32x3)"_c, &UInt32x4_ctor5_UInt32_UInt32x3},
        std::pair{ "operator[](i32)"_c, &UInt32x4_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &UInt32x4_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &UInt32x4_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &UInt32x4_operator_index_UInt16},
        std::pair{ "operator+(u32x4)"_c, &UInt32x4_operator_add_UInt32x4},
        std::pair{ "operator-(u32x4)"_c, &UInt32x4_operator_sub_UInt32x4},
        std::pair{ "operator*(u32x4)"_c, &UInt32x4_operator_mul_UInt32x4},
        std::pair{ "operator/(u32x4)"_c, &UInt32x4_operator_div_UInt32x4},
        std::pair{ "operator%(u32x4)"_c, &UInt32x4_operator_mod_UInt32x4},
        std::pair{ "operator+=(u32x4)"_c, &UInt32x4_operator_addasg_UInt32x4},
        std::pair{ "operator-=(u32x4)"_c, &UInt32x4_operator_subasg_UInt32x4},
        std::pair{ "operator*=(u32x4)"_c, &UInt32x4_operator_mulasg_UInt32x4},
        std::pair{ "operator/=(u32x4)"_c, &UInt32x4_operator_divasg_UInt32x4},
        std::pair{ "operator<(u32x4)"_c, &UInt32x4_operator_lt_UInt32x4},
        std::pair{ "operator<=(u32x4)"_c, &UInt32x4_operator_lte_UInt32x4},
        std::pair{ "operator>(u32x4)"_c, &UInt32x4_operator_gt_UInt32x4},
        std::pair{ "operator>=(u32x4)"_c, &UInt32x4_operator_gte_UInt32x4},
        std::pair{ "operator==(u32x4)"_c, &UInt32x4_operator_eq_UInt32x4},
        std::pair{ "operator!=(u32x4)"_c, &UInt32x4_operator_neq_UInt32x4},
        std::pair{ "operator*(f32)"_c, &UInt32x4_operator_scale_UInt32x4_Float32},
        std::pair{ "operator*(f16)"_c, &UInt32x4_operator_scale_UInt32x4_Float16},
        std::pair{ "operator*(u32)"_c, &UInt32x4_operator_scale_UInt32x4_UInt32},
        std::pair{ "operator*(u16)"_c, &UInt32x4_operator_scale_UInt32x4_UInt16},
        std::pair{ "operator*(i32)"_c, &UInt32x4_operator_scale_UInt32x4_Int32},
        std::pair{ "operator*(i16)"_c, &UInt32x4_operator_scale_UInt32x4_Int16},
        std::pair{ "operator|(u32x4)"_c, &UInt32x4_operator_or_UInt32x4},
        std::pair{ "operator&(u32x4)"_c, &UInt32x4_operator_and_UInt32x4},
        std::pair{ "operator^(u32x4)"_c, &UInt32x4_operator_xor_UInt32x4},
        std::pair{ "operator<<(u32x4)"_c, &UInt32x4_operator_lsh_UInt32x4},
        std::pair{ "operator>>(u32x4)"_c, &UInt32x4_operator_rsh_UInt32x4},
        std::pair{ "operator|=(u32x4)"_c, &UInt32x4_operator_orasg_UInt32x4},
        std::pair{ "operator&=(u32x4)"_c, &UInt32x4_operator_andasg_UInt32x4},
        std::pair{ "operator^=(u32x4)"_c, &UInt32x4_operator_xorasg_UInt32x4},
        std::pair{ "operator<<=(u32x4)"_c, &UInt32x4_operator_lshasg_UInt32x4},
        std::pair{ "operator>>=(u32x4)"_c, &UInt32x4_operator_rhsasg_UInt32x4}
    }
    };   
}

Int32::Int32()
{
    this->name = "i32";
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    // Conversion from Float32
    Int32_convert_Float32_arg0.name = "_arg0"_c;
    Int32_convert_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Int32_convert_Float32_arg0)->typeSymbol = &Float32Type;
    Int32_convert_Float32.name = "i32"_c;
    Int32_convert_Float32.returnType = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32_convert_Float32)->returnTypeSymbol = &Int32Type;

    // Conversion from UInt32
    Int32_convert_UInt32_arg0.name = "_arg0"_c;
    Int32_convert_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int32_convert_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int32_convert_UInt32.name = "i32"_c;
    Int32_convert_UInt32.returnType = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32_convert_UInt32)->returnTypeSymbol = &Int32Type;

    // Conversion from Bool8
    Int32_convert_Bool8_arg0.name = "_arg0"_c;
    Int32_convert_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Int32_convert_Bool8_arg0)->typeSymbol = &Bool8Type;
    Int32_convert_Bool8.name = "i32"_c;
    Int32_convert_Bool8.returnType = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32_convert_Bool8)->returnTypeSymbol = &Int32Type;

    // Conversion from Float16
    Int32_convert_Float16_arg0.name = "_arg0"_c;
    Int32_convert_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Int32_convert_Float16_arg0)->typeSymbol = &Float16Type;
    Int32_convert_Float16.name = "i32"_c;
    Int32_convert_Float16.returnType = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32_convert_Float16)->returnTypeSymbol = &Int32Type;

    // Conversion from UInt16
    Int32_convert_UInt16_arg0.name = "_arg0"_c;
    Int32_convert_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int32_convert_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int32_convert_UInt16.name = "i32"_c;
    Int32_convert_UInt16.returnType = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32_convert_UInt16)->returnTypeSymbol = &Int32Type;

    // Conversion from Int16
    Int32_convert_Int16_arg0.name = "_arg0"_c;
    Int32_convert_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int32_convert_Int16_arg0)->typeSymbol = &Int16Type;
    Int32_convert_Int16.name = "i32"_c;
    Int32_convert_Int16.returnType = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32_convert_Int16)->returnTypeSymbol = &Int32Type;

    // Construct with Int32
    Int32_ctor0_arg0.name = "_arg0"_c;
    Int32_ctor0_arg0.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32_ctor0_arg0)->typeSymbol = &Int32Type;
    Int32_ctor0_Int32.name = "0"_c;
    Int32_ctor0_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_ctor0_Int32)->returnTypeSymbol = &Int32Type;

    // operator[](i32)
    Int32_operator_index_Int32_arg0.name = "_arg0"_c;
    Int32_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_index_Int32.name = "operator[]"_c;
    Int32_operator_index_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    // operator[](u32)
    Int32_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int32_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int32_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int32_operator_index_UInt32.name = "operator[]"_c;
    Int32_operator_index_UInt32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    // operator[](i16)
    Int32_operator_index_Int16_arg0.name = "_arg0"_c;
    Int32_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int32_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Int32_operator_index_Int16.name = "operator[]"_c;
    Int32_operator_index_Int16.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    // operator[](u16)
    Int32_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int32_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int32_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int32_operator_index_UInt16.name = "operator[]"_c;
    Int32_operator_index_UInt16.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    // operator+(i32)
    Int32_operator_add_Int32_arg0.name = "_arg0"_c;
    Int32_operator_add_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_add_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_add_Int32.name = "operator+"_c;
    Int32_operator_add_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_add_Int32)->returnTypeSymbol = &Int32Type;

    // operator-(i32)
    Int32_operator_sub_Int32_arg0.name = "_arg0"_c;
    Int32_operator_sub_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_sub_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_sub_Int32.name = "operator-"_c;
    Int32_operator_sub_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_sub_Int32)->returnTypeSymbol = &Int32Type;

    // operator*(i32)
    Int32_operator_mul_Int32_arg0.name = "_arg0"_c;
    Int32_operator_mul_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_mul_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_mul_Int32.name = "operator*"_c;
    Int32_operator_mul_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_mul_Int32)->returnTypeSymbol = &Int32Type;

    // operator/(i32)
    Int32_operator_div_Int32_arg0.name = "_arg0"_c;
    Int32_operator_div_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_div_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_div_Int32.name = "operator/"_c;
    Int32_operator_div_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_div_Int32)->returnTypeSymbol = &Int32Type;

    // operator%(i32)
    Int32_operator_mod_Int32_arg0.name = "_arg0"_c;
    Int32_operator_mod_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_mod_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_mod_Int32.name = "operator%"_c;
    Int32_operator_mod_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_mod_Int32)->returnTypeSymbol = &Int32Type;

    // operator+=(i32)
    Int32_operator_addasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_addasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_addasg_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_addasg_Int32.name = "operator+="_c;
    Int32_operator_addasg_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_addasg_Int32)->returnTypeSymbol = &Int32Type;

    // operator-=(i32)
    Int32_operator_subasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_subasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_subasg_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_subasg_Int32.name = "operator-="_c;
    Int32_operator_subasg_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_subasg_Int32)->returnTypeSymbol = &Int32Type;

    // operator*=(i32)
    Int32_operator_mulasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_mulasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_mulasg_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_mulasg_Int32.name = "operator*="_c;
    Int32_operator_mulasg_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_mulasg_Int32)->returnTypeSymbol = &Int32Type;

    // operator/=(i32)
    Int32_operator_divasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_divasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_divasg_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_divasg_Int32.name = "operator/="_c;
    Int32_operator_divasg_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_divasg_Int32)->returnTypeSymbol = &Int32Type;

    // operator<(i32)
    Int32_operator_lt_Int32_arg0.name = "_arg0"_c;
    Int32_operator_lt_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_lt_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_lt_Int32.name = "operator<"_c;
    Int32_operator_lt_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_lt_Int32)->returnTypeSymbol = &Int32Type;

    // operator<=(i32)
    Int32_operator_lte_Int32_arg0.name = "_arg0"_c;
    Int32_operator_lte_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_lte_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_lte_Int32.name = "operator<="_c;
    Int32_operator_lte_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_lte_Int32)->returnTypeSymbol = &Int32Type;

    // operator>(i32)
    Int32_operator_gt_Int32_arg0.name = "_arg0"_c;
    Int32_operator_gt_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_gt_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_gt_Int32.name = "operator>"_c;
    Int32_operator_gt_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_gt_Int32)->returnTypeSymbol = &Int32Type;

    // operator>=(i32)
    Int32_operator_gte_Int32_arg0.name = "_arg0"_c;
    Int32_operator_gte_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_gte_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_gte_Int32.name = "operator>="_c;
    Int32_operator_gte_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_gte_Int32)->returnTypeSymbol = &Int32Type;

    // operator==(i32)
    Int32_operator_eq_Int32_arg0.name = "_arg0"_c;
    Int32_operator_eq_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_eq_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_eq_Int32.name = "operator=="_c;
    Int32_operator_eq_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_eq_Int32)->returnTypeSymbol = &Int32Type;

    // operator!=(i32)
    Int32_operator_neq_Int32_arg0.name = "_arg0"_c;
    Int32_operator_neq_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_neq_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_neq_Int32.name = "operator!="_c;
    Int32_operator_neq_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_neq_Int32)->returnTypeSymbol = &Int32Type;

    // operator|
    Int32_operator_or_Int32_arg0.name = "_arg0"_c;
    Int32_operator_or_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_or_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_or_Int32.name = "operator|"_c;
    Int32_operator_or_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_or_Int32)->returnTypeSymbol = &Int32Type;

    // operator&
    Int32_operator_and_Int32_arg0.name = "_arg0"_c;
    Int32_operator_and_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_and_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_and_Int32.name = "operator&"_c;
    Int32_operator_and_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_and_Int32)->returnTypeSymbol = &Int32Type;

    // operator^
    Int32_operator_xor_Int32_arg0.name = "_arg0"_c;
    Int32_operator_xor_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_xor_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_xor_Int32.name = "operator^"_c;
    Int32_operator_xor_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_xor_Int32)->returnTypeSymbol = &Int32Type;

    // operator<<
    Int32_operator_lsh_Int32_arg0.name = "_arg0"_c;
    Int32_operator_lsh_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_lsh_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_lsh_Int32.name = "operator<<"_c;
    Int32_operator_lsh_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_lsh_Int32)->returnTypeSymbol = &Int32Type;

    // operator>>
    Int32_operator_rsh_Int32_arg0.name = "_arg0"_c;
    Int32_operator_rsh_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_rsh_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_rsh_Int32.name = "operator>>"_c;
    Int32_operator_rsh_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_rsh_Int32)->returnTypeSymbol = &Int32Type;

    // operator|=
    Int32_operator_orasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_orasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_orasg_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_orasg_Int32.name = "operator|="_c;
    Int32_operator_orasg_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_orasg_Int32)->returnTypeSymbol = &Int32Type;

    // operator&=
    Int32_operator_andasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_andasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_andasg_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_andasg_Int32.name = "operator&="_c;
    Int32_operator_andasg_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_andasg_Int32)->returnTypeSymbol = &Int32Type;

    // operator^=
    Int32_operator_xorasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_xorasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_xorasg_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_xorasg_Int32.name = "operator^="_c;
    Int32_operator_xorasg_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_xorasg_Int32)->returnTypeSymbol = &Int32Type;

    // operator<<=
    Int32_operator_lshasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_lshasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_lshasg_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_lshasg_Int32.name = "operator<<="_c;
    Int32_operator_lshasg_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_lshasg_Int32)->returnTypeSymbol = &Int32Type;

    // operator>>=
    Int32_operator_rhsasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_rhsasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_rhsasg_Int32_arg0)->typeSymbol = &Int32Type;
    Int32_operator_rhsasg_Int32.name = "operator>>="_c;
    Int32_operator_rhsasg_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32_operator_rhsasg_Int32)->returnTypeSymbol = &Int32Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "i32"_c, &Int32_convert_Float32 },
        std::pair{ "i32(f32)"_c, &Int32_convert_Float32 },
        std::pair{ "i32"_c, &Int32_convert_UInt32 },
        std::pair{ "i32(u32)"_c, &Int32_convert_UInt32 },
        std::pair{ "i32"_c, &Int32_convert_Bool8 },
        std::pair{ "i32(b8)"_c, &Int32_convert_Bool8 },
        std::pair{ "i32"_c, &Int32_convert_Float16 },
        std::pair{ "i32(f16)"_c, &Int32_convert_Float16 },
        std::pair{ "i32"_c, &Int32_convert_UInt16 },
        std::pair{ "i32(u16)"_c, &Int32_convert_UInt16 },
        std::pair{ "i32"_c, &Int32_convert_Int16 },
        std::pair{ "i32(i16)"_c, &Int32_convert_Int16 },
        std::pair{ "i32"_c, &Int32_ctor0_Int32},
        std::pair{ "i32(i32)"_c, &Int32_ctor0_Int32},
        std::pair{ "operator[](i32)"_c, &Int32_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Int32_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Int32_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Int32_operator_index_UInt16},
        std::pair{ "operator+(i32)"_c, &Int32_operator_add_Int32},
        std::pair{ "operator-(i32)"_c, &Int32_operator_sub_Int32},
        std::pair{ "operator*(i32)"_c, &Int32_operator_mul_Int32},
        std::pair{ "operator/(i32)"_c, &Int32_operator_div_Int32},
        std::pair{ "operator%(i32)"_c, &Int32_operator_mod_Int32},
        std::pair{ "operator+=(i32)"_c, &Int32_operator_addasg_Int32},
        std::pair{ "operator-=(i32)"_c, &Int32_operator_subasg_Int32},
        std::pair{ "operator*=(i32)"_c, &Int32_operator_mulasg_Int32},
        std::pair{ "operator/=(i32)"_c, &Int32_operator_divasg_Int32},
        std::pair{ "operator<(i32)"_c, &Int32_operator_lt_Int32},
        std::pair{ "operator<=(i32)"_c, &Int32_operator_lte_Int32},
        std::pair{ "operator>(i32)"_c, &Int32_operator_gt_Int32},
        std::pair{ "operator>=(i32)"_c, &Int32_operator_gte_Int32},
        std::pair{ "operator==(i32)"_c, &Int32_operator_eq_Int32},
        std::pair{ "operator!=(i32)"_c, &Int32_operator_neq_Int32},
        std::pair{ "operator|(i32)"_c, &Int32_operator_or_Int32},
        std::pair{ "operator&(i32)"_c, &Int32_operator_and_Int32},
        std::pair{ "operator^(i32)"_c, &Int32_operator_xor_Int32},
        std::pair{ "operator<<(i32)"_c, &Int32_operator_lsh_Int32},
        std::pair{ "operator>>(i32)"_c, &Int32_operator_rsh_Int32},
        std::pair{ "operator|=(i32)"_c, &Int32_operator_orasg_Int32},
        std::pair{ "operator&=(i32)"_c, &Int32_operator_andasg_Int32},
        std::pair{ "operator^=(i32)"_c, &Int32_operator_xorasg_Int32},
        std::pair{ "operator<<=(i32)"_c, &Int32_operator_lshasg_Int32},
        std::pair{ "operator>>=(i32)"_c, &Int32_operator_rhsasg_Int32}
    }
    };   
}

Int32x2::Int32x2()
{
    this->name = "i32";
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    // Conversion from Float32x2
    Int32x2_convert_Float32x2_arg0.name = "_arg0"_c;
    Int32x2_convert_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Int32x2_convert_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Int32x2_convert_Float32x2.name = "i32x2"_c;
    Int32x2_convert_Float32x2.returnType = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x2_convert_Float32x2)->returnTypeSymbol = &Int32x2Type;

    // Splat with Float32
    Int32x2_splat_Float32_arg0.name = "_arg0"_c;
    Int32x2_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Int32x2_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Int32x2_splat_Float32.name = "i32x2"_c;
    Int32x2_splat_Float32.returnType = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x2_splat_Float32)->returnTypeSymbol = &Int32x2Type;

    // Conversion from UInt32x2
    Int32x2_convert_UInt32x2_arg0.name = "_arg0"_c;
    Int32x2_convert_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&Int32x2_convert_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Int32x2_convert_UInt32x2.name = "i32x2"_c;
    Int32x2_convert_UInt32x2.returnType = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x2_convert_UInt32x2)->returnTypeSymbol = &Int32x2Type;

    // Splat with UInt32
    Int32x2_splat_UInt32_arg0.name = "_arg0"_c;
    Int32x2_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int32x2_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int32x2_splat_UInt32.name = "i32x2"_c;
    Int32x2_splat_UInt32.returnType = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x2_splat_UInt32)->returnTypeSymbol = &Int32x2Type;

    // Conversion from Int32x2
    Int32x2_convert_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_convert_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_convert_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_convert_Int32x2.name = "i32x2"_c;
    Int32x2_convert_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x2_convert_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // Splat with Int32
    Int32x2_splat_Int32_arg0.name = "_arg0"_c;
    Int32x2_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x2_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Int32x2_splat_Int32.name = "i32x2"_c;
    Int32x2_splat_Int32.returnType = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x2_splat_Int32)->returnTypeSymbol = &Int32x2Type;

    // Conversion from Bool8x2
    Int32x2_convert_Bool8x2_arg0.name = "_arg0"_c;
    Int32x2_convert_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Int32x2_convert_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Int32x2_convert_Bool8x2.name = "i32x2"_c;
    Int32x2_convert_Bool8x2.returnType = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x2_convert_Bool8x2)->returnTypeSymbol = &Int32x2Type;

    // Splat with Bool8
    Int32x2_splat_Bool8_arg0.name = "_arg0"_c;
    Int32x2_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Int32x2_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    Int32x2_splat_Bool8.name = "i32x2"_c;
    Int32x2_splat_Bool8.returnType = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x2_splat_Bool8)->returnTypeSymbol = &Int32x2Type;

    // Conversion from Float16x2
    Int32x2_convert_Float16x2_arg0.name = "_arg0"_c;
    Int32x2_convert_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Int32x2_convert_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Int32x2_convert_Float16x2.name = "i32x2"_c;
    Int32x2_convert_Float16x2.returnType = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x2_convert_Float16x2)->returnTypeSymbol = &Int32x2Type;

    // Splat with Float16
    Int32x2_splat_Float16_arg0.name = "_arg0"_c;
    Int32x2_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Int32x2_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Int32x2_splat_Float16.name = "i32x2"_c;
    Int32x2_splat_Float16.returnType = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x2_splat_Float16)->returnTypeSymbol = &Int32x2Type;

    // Conversion from UInt16x2
    Int32x2_convert_UInt16x2_arg0.name = "_arg0"_c;
    Int32x2_convert_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&Int32x2_convert_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Int32x2_convert_UInt16x2.name = "i32x2"_c;
    Int32x2_convert_UInt16x2.returnType = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x2_convert_UInt16x2)->returnTypeSymbol = &Int32x2Type;

    // Splat with UInt16
    Int32x2_splat_UInt16_arg0.name = "_arg0"_c;
    Int32x2_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int32x2_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int32x2_splat_UInt16.name = "i32x2"_c;
    Int32x2_splat_UInt16.returnType = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x2_splat_UInt16)->returnTypeSymbol = &Int32x2Type;

    // Conversion from Int16x2
    Int32x2_convert_Int16x2_arg0.name = "_arg0"_c;
    Int32x2_convert_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int32x2_convert_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int32x2_convert_Int16x2.name = "i32x2"_c;
    Int32x2_convert_Int16x2.returnType = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x2_convert_Int16x2)->returnTypeSymbol = &Int32x2Type;

    // Splat with Int16
    Int32x2_splat_Int16_arg0.name = "_arg0"_c;
    Int32x2_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int32x2_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Int32x2_splat_Int16.name = "i32x2"_c;
    Int32x2_splat_Int16.returnType = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x2_splat_Int16)->returnTypeSymbol = &Int32x2Type;

    // Construct with Int32, Int32
    Int32x2_ctor0_arg0.name = "_arg0"_c;
    Int32x2_ctor0_arg0.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x2_ctor0_arg0)->typeSymbol = &Int32Type;
    Int32x2_ctor0_arg1.name = "_arg1"_c;
    Int32x2_ctor0_arg1.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x2_ctor0_arg1)->typeSymbol = &Int32Type;
    Int32x2_ctor0_Int32_Int32.name = "0"_c;
    Int32x2_ctor0_Int32_Int32.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_ctor0_Int32_Int32)->returnTypeSymbol = &Int32x2Type;

    // operator[](i32)
    Int32x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Int32x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Int32x2_operator_index_Int32.name = "operator[]"_c;
    Int32x2_operator_index_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x2_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    // operator[](u32)
    Int32x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int32x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int32x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int32x2_operator_index_UInt32.name = "operator[]"_c;
    Int32x2_operator_index_UInt32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x2_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    // operator[](i16)
    Int32x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Int32x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int32x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Int32x2_operator_index_Int16.name = "operator[]"_c;
    Int32x2_operator_index_Int16.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x2_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    // operator[](u16)
    Int32x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int32x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int32x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int32x2_operator_index_UInt16.name = "operator[]"_c;
    Int32x2_operator_index_UInt16.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x2_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    // operator+(i32x2)
    Int32x2_operator_add_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_add_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_add_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_add_Int32x2.name = "operator+"_c;
    Int32x2_operator_add_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_add_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator-(i32x2)
    Int32x2_operator_sub_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_sub_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_sub_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_sub_Int32x2.name = "operator-"_c;
    Int32x2_operator_sub_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_sub_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator*(i32x2)
    Int32x2_operator_mul_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_mul_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_mul_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_mul_Int32x2.name = "operator*"_c;
    Int32x2_operator_mul_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_mul_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator/(i32x2)
    Int32x2_operator_div_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_div_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_div_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_div_Int32x2.name = "operator/"_c;
    Int32x2_operator_div_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_div_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator%(i32x2)
    Int32x2_operator_mod_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_mod_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_mod_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_mod_Int32x2.name = "operator%"_c;
    Int32x2_operator_mod_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_mod_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator+=(i32x2)
    Int32x2_operator_addasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_addasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_addasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_addasg_Int32x2.name = "operator+="_c;
    Int32x2_operator_addasg_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_addasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator-=(i32x2)
    Int32x2_operator_subasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_subasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_subasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_subasg_Int32x2.name = "operator-="_c;
    Int32x2_operator_subasg_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_subasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator*=(i32x2)
    Int32x2_operator_mulasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_mulasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_mulasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_mulasg_Int32x2.name = "operator*="_c;
    Int32x2_operator_mulasg_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_mulasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator/=(i32x2)
    Int32x2_operator_divasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_divasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_divasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_divasg_Int32x2.name = "operator/="_c;
    Int32x2_operator_divasg_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_divasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator<(i32x2)
    Int32x2_operator_lt_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_lt_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_lt_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_lt_Int32x2.name = "operator<"_c;
    Int32x2_operator_lt_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_lt_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator<=(i32x2)
    Int32x2_operator_lte_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_lte_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_lte_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_lte_Int32x2.name = "operator<="_c;
    Int32x2_operator_lte_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_lte_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator>(i32x2)
    Int32x2_operator_gt_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_gt_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_gt_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_gt_Int32x2.name = "operator>"_c;
    Int32x2_operator_gt_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_gt_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator>=(i32x2)
    Int32x2_operator_gte_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_gte_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_gte_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_gte_Int32x2.name = "operator>="_c;
    Int32x2_operator_gte_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_gte_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator==(i32x2)
    Int32x2_operator_eq_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_eq_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_eq_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_eq_Int32x2.name = "operator=="_c;
    Int32x2_operator_eq_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_eq_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator!=(i32x2)
    Int32x2_operator_neq_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_neq_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_neq_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_neq_Int32x2.name = "operator!="_c;
    Int32x2_operator_neq_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_neq_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator*(f32)
    Int32x2_operator_scale_Int32x2_Float32_arg0.name = "_arg0"_c;
    Int32x2_operator_scale_Int32x2_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Int32x2_operator_scale_Int32x2_Float32_arg0)->typeSymbol = &Float32Type;
    Int32x2_operator_scale_Int32x2_Float32.name = "operator*"_c;
    Int32x2_operator_scale_Int32x2_Float32.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_scale_Int32x2_Float32)->returnTypeSymbol = &Int32x2Type;

    // operator*(f16)
    Int32x2_operator_scale_Int32x2_Float16_arg0.name = "_arg0"_c;
    Int32x2_operator_scale_Int32x2_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Int32x2_operator_scale_Int32x2_Float16_arg0)->typeSymbol = &Float16Type;
    Int32x2_operator_scale_Int32x2_Float16.name = "operator*"_c;
    Int32x2_operator_scale_Int32x2_Float16.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_scale_Int32x2_Float16)->returnTypeSymbol = &Int32x2Type;

    // operator*(u32)
    Int32x2_operator_scale_Int32x2_UInt32_arg0.name = "_arg0"_c;
    Int32x2_operator_scale_Int32x2_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int32x2_operator_scale_Int32x2_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int32x2_operator_scale_Int32x2_UInt32.name = "operator*"_c;
    Int32x2_operator_scale_Int32x2_UInt32.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_scale_Int32x2_UInt32)->returnTypeSymbol = &Int32x2Type;

    // operator*(u16)
    Int32x2_operator_scale_Int32x2_UInt16_arg0.name = "_arg0"_c;
    Int32x2_operator_scale_Int32x2_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int32x2_operator_scale_Int32x2_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int32x2_operator_scale_Int32x2_UInt16.name = "operator*"_c;
    Int32x2_operator_scale_Int32x2_UInt16.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_scale_Int32x2_UInt16)->returnTypeSymbol = &Int32x2Type;

    // operator*(i32)
    Int32x2_operator_scale_Int32x2_Int32_arg0.name = "_arg0"_c;
    Int32x2_operator_scale_Int32x2_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x2_operator_scale_Int32x2_Int32_arg0)->typeSymbol = &Int32Type;
    Int32x2_operator_scale_Int32x2_Int32.name = "operator*"_c;
    Int32x2_operator_scale_Int32x2_Int32.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_scale_Int32x2_Int32)->returnTypeSymbol = &Int32x2Type;

    // operator*(i16)
    Int32x2_operator_scale_Int32x2_Int16_arg0.name = "_arg0"_c;
    Int32x2_operator_scale_Int32x2_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int32x2_operator_scale_Int32x2_Int16_arg0)->typeSymbol = &Int16Type;
    Int32x2_operator_scale_Int32x2_Int16.name = "operator*"_c;
    Int32x2_operator_scale_Int32x2_Int16.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_scale_Int32x2_Int16)->returnTypeSymbol = &Int32x2Type;

    // operator|
    Int32x2_operator_or_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_or_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_or_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_or_Int32x2.name = "operator|"_c;
    Int32x2_operator_or_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_or_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator&
    Int32x2_operator_and_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_and_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_and_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_and_Int32x2.name = "operator&"_c;
    Int32x2_operator_and_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_and_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator^
    Int32x2_operator_xor_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_xor_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_xor_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_xor_Int32x2.name = "operator^"_c;
    Int32x2_operator_xor_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_xor_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator<<
    Int32x2_operator_lsh_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_lsh_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_lsh_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_lsh_Int32x2.name = "operator<<"_c;
    Int32x2_operator_lsh_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_lsh_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator>>
    Int32x2_operator_rsh_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_rsh_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_rsh_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_rsh_Int32x2.name = "operator>>"_c;
    Int32x2_operator_rsh_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_rsh_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator|=
    Int32x2_operator_orasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_orasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_orasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_orasg_Int32x2.name = "operator|="_c;
    Int32x2_operator_orasg_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_orasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator&=
    Int32x2_operator_andasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_andasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_andasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_andasg_Int32x2.name = "operator&="_c;
    Int32x2_operator_andasg_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_andasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator^=
    Int32x2_operator_xorasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_xorasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_xorasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_xorasg_Int32x2.name = "operator^="_c;
    Int32x2_operator_xorasg_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_xorasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator<<=
    Int32x2_operator_lshasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_lshasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_lshasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_lshasg_Int32x2.name = "operator<<="_c;
    Int32x2_operator_lshasg_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_lshasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    // operator>>=
    Int32x2_operator_rhsasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_rhsasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_rhsasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int32x2_operator_rhsasg_Int32x2.name = "operator>>="_c;
    Int32x2_operator_rhsasg_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int32x2_operator_rhsasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "i32x2"_c, &Int32x2_convert_Float32x2 },
        std::pair{ "i32x2(f32x2)"_c, &Int32x2_convert_Float32x2 },
        std::pair{ "i32x2"_c, &Int32x2_splat_Float32 },
        std::pair{ "i32x2(f32)"_c, &Int32x2_splat_Float32 },
        std::pair{ "i32x2"_c, &Int32x2_convert_UInt32x2 },
        std::pair{ "i32x2(u32x2)"_c, &Int32x2_convert_UInt32x2 },
        std::pair{ "i32x2"_c, &Int32x2_splat_UInt32 },
        std::pair{ "i32x2(u32)"_c, &Int32x2_splat_UInt32 },
        std::pair{ "i32x2"_c, &Int32x2_convert_Int32x2 },
        std::pair{ "i32x2(i32x2)"_c, &Int32x2_convert_Int32x2 },
        std::pair{ "i32x2"_c, &Int32x2_splat_Int32 },
        std::pair{ "i32x2(i32)"_c, &Int32x2_splat_Int32 },
        std::pair{ "i32x2"_c, &Int32x2_convert_Bool8x2 },
        std::pair{ "i32x2(b8x2)"_c, &Int32x2_convert_Bool8x2 },
        std::pair{ "i32x2"_c, &Int32x2_splat_Bool8 },
        std::pair{ "i32x2(b8)"_c, &Int32x2_splat_Bool8 },
        std::pair{ "i32x2"_c, &Int32x2_convert_Float16x2 },
        std::pair{ "i32x2(f16x2)"_c, &Int32x2_convert_Float16x2 },
        std::pair{ "i32x2"_c, &Int32x2_splat_Float16 },
        std::pair{ "i32x2(f16)"_c, &Int32x2_splat_Float16 },
        std::pair{ "i32x2"_c, &Int32x2_convert_UInt16x2 },
        std::pair{ "i32x2(u16x2)"_c, &Int32x2_convert_UInt16x2 },
        std::pair{ "i32x2"_c, &Int32x2_splat_UInt16 },
        std::pair{ "i32x2(u16)"_c, &Int32x2_splat_UInt16 },
        std::pair{ "i32x2"_c, &Int32x2_convert_Int16x2 },
        std::pair{ "i32x2(i16x2)"_c, &Int32x2_convert_Int16x2 },
        std::pair{ "i32x2"_c, &Int32x2_splat_Int16 },
        std::pair{ "i32x2(i16)"_c, &Int32x2_splat_Int16 },
        std::pair{ "i32x2"_c, &Int32x2_ctor0_Int32_Int32},
        std::pair{ "i32x2(i32,i32)"_c, &Int32x2_ctor0_Int32_Int32},
        std::pair{ "operator[](i32)"_c, &Int32x2_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Int32x2_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Int32x2_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Int32x2_operator_index_UInt16},
        std::pair{ "operator+(i32x2)"_c, &Int32x2_operator_add_Int32x2},
        std::pair{ "operator-(i32x2)"_c, &Int32x2_operator_sub_Int32x2},
        std::pair{ "operator*(i32x2)"_c, &Int32x2_operator_mul_Int32x2},
        std::pair{ "operator/(i32x2)"_c, &Int32x2_operator_div_Int32x2},
        std::pair{ "operator%(i32x2)"_c, &Int32x2_operator_mod_Int32x2},
        std::pair{ "operator+=(i32x2)"_c, &Int32x2_operator_addasg_Int32x2},
        std::pair{ "operator-=(i32x2)"_c, &Int32x2_operator_subasg_Int32x2},
        std::pair{ "operator*=(i32x2)"_c, &Int32x2_operator_mulasg_Int32x2},
        std::pair{ "operator/=(i32x2)"_c, &Int32x2_operator_divasg_Int32x2},
        std::pair{ "operator<(i32x2)"_c, &Int32x2_operator_lt_Int32x2},
        std::pair{ "operator<=(i32x2)"_c, &Int32x2_operator_lte_Int32x2},
        std::pair{ "operator>(i32x2)"_c, &Int32x2_operator_gt_Int32x2},
        std::pair{ "operator>=(i32x2)"_c, &Int32x2_operator_gte_Int32x2},
        std::pair{ "operator==(i32x2)"_c, &Int32x2_operator_eq_Int32x2},
        std::pair{ "operator!=(i32x2)"_c, &Int32x2_operator_neq_Int32x2},
        std::pair{ "operator*(f32)"_c, &Int32x2_operator_scale_Int32x2_Float32},
        std::pair{ "operator*(f16)"_c, &Int32x2_operator_scale_Int32x2_Float16},
        std::pair{ "operator*(u32)"_c, &Int32x2_operator_scale_Int32x2_UInt32},
        std::pair{ "operator*(u16)"_c, &Int32x2_operator_scale_Int32x2_UInt16},
        std::pair{ "operator*(i32)"_c, &Int32x2_operator_scale_Int32x2_Int32},
        std::pair{ "operator*(i16)"_c, &Int32x2_operator_scale_Int32x2_Int16},
        std::pair{ "operator|(i32x2)"_c, &Int32x2_operator_or_Int32x2},
        std::pair{ "operator&(i32x2)"_c, &Int32x2_operator_and_Int32x2},
        std::pair{ "operator^(i32x2)"_c, &Int32x2_operator_xor_Int32x2},
        std::pair{ "operator<<(i32x2)"_c, &Int32x2_operator_lsh_Int32x2},
        std::pair{ "operator>>(i32x2)"_c, &Int32x2_operator_rsh_Int32x2},
        std::pair{ "operator|=(i32x2)"_c, &Int32x2_operator_orasg_Int32x2},
        std::pair{ "operator&=(i32x2)"_c, &Int32x2_operator_andasg_Int32x2},
        std::pair{ "operator^=(i32x2)"_c, &Int32x2_operator_xorasg_Int32x2},
        std::pair{ "operator<<=(i32x2)"_c, &Int32x2_operator_lshasg_Int32x2},
        std::pair{ "operator>>=(i32x2)"_c, &Int32x2_operator_rhsasg_Int32x2}
    }
    };   
}

Int32x3::Int32x3()
{
    this->name = "i32";
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    // Conversion from Float32x3
    Int32x3_convert_Float32x3_arg0.name = "_arg0"_c;
    Int32x3_convert_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Int32x3_convert_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Int32x3_convert_Float32x3.name = "i32x3"_c;
    Int32x3_convert_Float32x3.returnType = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x3_convert_Float32x3)->returnTypeSymbol = &Int32x3Type;

    // Splat with Float32
    Int32x3_splat_Float32_arg0.name = "_arg0"_c;
    Int32x3_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Int32x3_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Int32x3_splat_Float32.name = "i32x3"_c;
    Int32x3_splat_Float32.returnType = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x3_splat_Float32)->returnTypeSymbol = &Int32x3Type;

    // Conversion from UInt32x3
    Int32x3_convert_UInt32x3_arg0.name = "_arg0"_c;
    Int32x3_convert_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&Int32x3_convert_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Int32x3_convert_UInt32x3.name = "i32x3"_c;
    Int32x3_convert_UInt32x3.returnType = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x3_convert_UInt32x3)->returnTypeSymbol = &Int32x3Type;

    // Splat with UInt32
    Int32x3_splat_UInt32_arg0.name = "_arg0"_c;
    Int32x3_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int32x3_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int32x3_splat_UInt32.name = "i32x3"_c;
    Int32x3_splat_UInt32.returnType = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x3_splat_UInt32)->returnTypeSymbol = &Int32x3Type;

    // Conversion from Int32x3
    Int32x3_convert_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_convert_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_convert_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_convert_Int32x3.name = "i32x3"_c;
    Int32x3_convert_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x3_convert_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // Splat with Int32
    Int32x3_splat_Int32_arg0.name = "_arg0"_c;
    Int32x3_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x3_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Int32x3_splat_Int32.name = "i32x3"_c;
    Int32x3_splat_Int32.returnType = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x3_splat_Int32)->returnTypeSymbol = &Int32x3Type;

    // Conversion from Bool8x3
    Int32x3_convert_Bool8x3_arg0.name = "_arg0"_c;
    Int32x3_convert_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Int32x3_convert_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Int32x3_convert_Bool8x3.name = "i32x3"_c;
    Int32x3_convert_Bool8x3.returnType = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x3_convert_Bool8x3)->returnTypeSymbol = &Int32x3Type;

    // Splat with Bool8
    Int32x3_splat_Bool8_arg0.name = "_arg0"_c;
    Int32x3_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Int32x3_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    Int32x3_splat_Bool8.name = "i32x3"_c;
    Int32x3_splat_Bool8.returnType = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x3_splat_Bool8)->returnTypeSymbol = &Int32x3Type;

    // Conversion from Float16x3
    Int32x3_convert_Float16x3_arg0.name = "_arg0"_c;
    Int32x3_convert_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Int32x3_convert_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Int32x3_convert_Float16x3.name = "i32x3"_c;
    Int32x3_convert_Float16x3.returnType = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x3_convert_Float16x3)->returnTypeSymbol = &Int32x3Type;

    // Splat with Float16
    Int32x3_splat_Float16_arg0.name = "_arg0"_c;
    Int32x3_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Int32x3_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Int32x3_splat_Float16.name = "i32x3"_c;
    Int32x3_splat_Float16.returnType = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x3_splat_Float16)->returnTypeSymbol = &Int32x3Type;

    // Conversion from UInt16x3
    Int32x3_convert_UInt16x3_arg0.name = "_arg0"_c;
    Int32x3_convert_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&Int32x3_convert_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Int32x3_convert_UInt16x3.name = "i32x3"_c;
    Int32x3_convert_UInt16x3.returnType = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x3_convert_UInt16x3)->returnTypeSymbol = &Int32x3Type;

    // Splat with UInt16
    Int32x3_splat_UInt16_arg0.name = "_arg0"_c;
    Int32x3_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int32x3_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int32x3_splat_UInt16.name = "i32x3"_c;
    Int32x3_splat_UInt16.returnType = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x3_splat_UInt16)->returnTypeSymbol = &Int32x3Type;

    // Conversion from Int16x3
    Int32x3_convert_Int16x3_arg0.name = "_arg0"_c;
    Int32x3_convert_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int32x3_convert_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int32x3_convert_Int16x3.name = "i32x3"_c;
    Int32x3_convert_Int16x3.returnType = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x3_convert_Int16x3)->returnTypeSymbol = &Int32x3Type;

    // Splat with Int16
    Int32x3_splat_Int16_arg0.name = "_arg0"_c;
    Int32x3_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int32x3_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Int32x3_splat_Int16.name = "i32x3"_c;
    Int32x3_splat_Int16.returnType = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x3_splat_Int16)->returnTypeSymbol = &Int32x3Type;

    // Construct with Int32, Int32, Int32
    Int32x3_ctor0_arg0.name = "_arg0"_c;
    Int32x3_ctor0_arg0.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x3_ctor0_arg0)->typeSymbol = &Int32Type;
    Int32x3_ctor0_arg1.name = "_arg1"_c;
    Int32x3_ctor0_arg1.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x3_ctor0_arg1)->typeSymbol = &Int32Type;
    Int32x3_ctor0_arg2.name = "_arg2"_c;
    Int32x3_ctor0_arg2.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x3_ctor0_arg2)->typeSymbol = &Int32Type;
    Int32x3_ctor0_Int32_Int32_Int32.name = "0"_c;
    Int32x3_ctor0_Int32_Int32_Int32.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_ctor0_Int32_Int32_Int32)->returnTypeSymbol = &Int32x3Type;

    // Construct with Int32x2, Int32
    Int32x3_ctor1_arg0.name = "_arg0"_c;
    Int32x3_ctor1_arg0.type = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x3_ctor1_arg0)->typeSymbol = &Int32x2Type;
    Int32x3_ctor1_arg1.name = "_arg1"_c;
    Int32x3_ctor1_arg1.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x3_ctor1_arg1)->typeSymbol = &Int32Type;
    Int32x3_ctor1_Int32x2_Int32.name = "1"_c;
    Int32x3_ctor1_Int32x2_Int32.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_ctor1_Int32x2_Int32)->returnTypeSymbol = &Int32x3Type;

    // Construct with Int32, Int32x2
    Int32x3_ctor2_arg0.name = "_arg0"_c;
    Int32x3_ctor2_arg0.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x3_ctor2_arg0)->typeSymbol = &Int32Type;
    Int32x3_ctor2_arg1.name = "_arg1"_c;
    Int32x3_ctor2_arg1.type = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x3_ctor2_arg1)->typeSymbol = &Int32x2Type;
    Int32x3_ctor2_Int32_Int32x2.name = "2"_c;
    Int32x3_ctor2_Int32_Int32x2.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_ctor2_Int32_Int32x2)->returnTypeSymbol = &Int32x3Type;

    // operator[](i32)
    Int32x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Int32x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Int32x3_operator_index_Int32.name = "operator[]"_c;
    Int32x3_operator_index_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x3_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    // operator[](u32)
    Int32x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int32x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int32x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int32x3_operator_index_UInt32.name = "operator[]"_c;
    Int32x3_operator_index_UInt32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x3_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    // operator[](i16)
    Int32x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Int32x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int32x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Int32x3_operator_index_Int16.name = "operator[]"_c;
    Int32x3_operator_index_Int16.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x3_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    // operator[](u16)
    Int32x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int32x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int32x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int32x3_operator_index_UInt16.name = "operator[]"_c;
    Int32x3_operator_index_UInt16.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x3_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    // operator+(i32x3)
    Int32x3_operator_add_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_add_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_add_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_add_Int32x3.name = "operator+"_c;
    Int32x3_operator_add_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_add_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator-(i32x3)
    Int32x3_operator_sub_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_sub_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_sub_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_sub_Int32x3.name = "operator-"_c;
    Int32x3_operator_sub_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_sub_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator*(i32x3)
    Int32x3_operator_mul_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_mul_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_mul_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_mul_Int32x3.name = "operator*"_c;
    Int32x3_operator_mul_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_mul_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator/(i32x3)
    Int32x3_operator_div_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_div_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_div_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_div_Int32x3.name = "operator/"_c;
    Int32x3_operator_div_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_div_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator%(i32x3)
    Int32x3_operator_mod_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_mod_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_mod_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_mod_Int32x3.name = "operator%"_c;
    Int32x3_operator_mod_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_mod_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator+=(i32x3)
    Int32x3_operator_addasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_addasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_addasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_addasg_Int32x3.name = "operator+="_c;
    Int32x3_operator_addasg_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_addasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator-=(i32x3)
    Int32x3_operator_subasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_subasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_subasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_subasg_Int32x3.name = "operator-="_c;
    Int32x3_operator_subasg_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_subasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator*=(i32x3)
    Int32x3_operator_mulasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_mulasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_mulasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_mulasg_Int32x3.name = "operator*="_c;
    Int32x3_operator_mulasg_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_mulasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator/=(i32x3)
    Int32x3_operator_divasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_divasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_divasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_divasg_Int32x3.name = "operator/="_c;
    Int32x3_operator_divasg_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_divasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator<(i32x3)
    Int32x3_operator_lt_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_lt_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_lt_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_lt_Int32x3.name = "operator<"_c;
    Int32x3_operator_lt_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_lt_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator<=(i32x3)
    Int32x3_operator_lte_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_lte_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_lte_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_lte_Int32x3.name = "operator<="_c;
    Int32x3_operator_lte_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_lte_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator>(i32x3)
    Int32x3_operator_gt_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_gt_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_gt_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_gt_Int32x3.name = "operator>"_c;
    Int32x3_operator_gt_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_gt_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator>=(i32x3)
    Int32x3_operator_gte_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_gte_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_gte_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_gte_Int32x3.name = "operator>="_c;
    Int32x3_operator_gte_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_gte_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator==(i32x3)
    Int32x3_operator_eq_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_eq_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_eq_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_eq_Int32x3.name = "operator=="_c;
    Int32x3_operator_eq_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_eq_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator!=(i32x3)
    Int32x3_operator_neq_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_neq_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_neq_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_neq_Int32x3.name = "operator!="_c;
    Int32x3_operator_neq_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_neq_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator*(f32)
    Int32x3_operator_scale_Int32x3_Float32_arg0.name = "_arg0"_c;
    Int32x3_operator_scale_Int32x3_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Int32x3_operator_scale_Int32x3_Float32_arg0)->typeSymbol = &Float32Type;
    Int32x3_operator_scale_Int32x3_Float32.name = "operator*"_c;
    Int32x3_operator_scale_Int32x3_Float32.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_scale_Int32x3_Float32)->returnTypeSymbol = &Int32x3Type;

    // operator*(f16)
    Int32x3_operator_scale_Int32x3_Float16_arg0.name = "_arg0"_c;
    Int32x3_operator_scale_Int32x3_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Int32x3_operator_scale_Int32x3_Float16_arg0)->typeSymbol = &Float16Type;
    Int32x3_operator_scale_Int32x3_Float16.name = "operator*"_c;
    Int32x3_operator_scale_Int32x3_Float16.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_scale_Int32x3_Float16)->returnTypeSymbol = &Int32x3Type;

    // operator*(u32)
    Int32x3_operator_scale_Int32x3_UInt32_arg0.name = "_arg0"_c;
    Int32x3_operator_scale_Int32x3_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int32x3_operator_scale_Int32x3_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int32x3_operator_scale_Int32x3_UInt32.name = "operator*"_c;
    Int32x3_operator_scale_Int32x3_UInt32.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_scale_Int32x3_UInt32)->returnTypeSymbol = &Int32x3Type;

    // operator*(u16)
    Int32x3_operator_scale_Int32x3_UInt16_arg0.name = "_arg0"_c;
    Int32x3_operator_scale_Int32x3_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int32x3_operator_scale_Int32x3_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int32x3_operator_scale_Int32x3_UInt16.name = "operator*"_c;
    Int32x3_operator_scale_Int32x3_UInt16.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_scale_Int32x3_UInt16)->returnTypeSymbol = &Int32x3Type;

    // operator*(i32)
    Int32x3_operator_scale_Int32x3_Int32_arg0.name = "_arg0"_c;
    Int32x3_operator_scale_Int32x3_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x3_operator_scale_Int32x3_Int32_arg0)->typeSymbol = &Int32Type;
    Int32x3_operator_scale_Int32x3_Int32.name = "operator*"_c;
    Int32x3_operator_scale_Int32x3_Int32.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_scale_Int32x3_Int32)->returnTypeSymbol = &Int32x3Type;

    // operator*(i16)
    Int32x3_operator_scale_Int32x3_Int16_arg0.name = "_arg0"_c;
    Int32x3_operator_scale_Int32x3_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int32x3_operator_scale_Int32x3_Int16_arg0)->typeSymbol = &Int16Type;
    Int32x3_operator_scale_Int32x3_Int16.name = "operator*"_c;
    Int32x3_operator_scale_Int32x3_Int16.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_scale_Int32x3_Int16)->returnTypeSymbol = &Int32x3Type;

    // operator|
    Int32x3_operator_or_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_or_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_or_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_or_Int32x3.name = "operator|"_c;
    Int32x3_operator_or_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_or_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator&
    Int32x3_operator_and_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_and_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_and_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_and_Int32x3.name = "operator&"_c;
    Int32x3_operator_and_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_and_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator^
    Int32x3_operator_xor_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_xor_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_xor_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_xor_Int32x3.name = "operator^"_c;
    Int32x3_operator_xor_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_xor_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator<<
    Int32x3_operator_lsh_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_lsh_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_lsh_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_lsh_Int32x3.name = "operator<<"_c;
    Int32x3_operator_lsh_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_lsh_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator>>
    Int32x3_operator_rsh_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_rsh_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_rsh_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_rsh_Int32x3.name = "operator>>"_c;
    Int32x3_operator_rsh_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_rsh_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator|=
    Int32x3_operator_orasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_orasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_orasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_orasg_Int32x3.name = "operator|="_c;
    Int32x3_operator_orasg_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_orasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator&=
    Int32x3_operator_andasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_andasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_andasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_andasg_Int32x3.name = "operator&="_c;
    Int32x3_operator_andasg_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_andasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator^=
    Int32x3_operator_xorasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_xorasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_xorasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_xorasg_Int32x3.name = "operator^="_c;
    Int32x3_operator_xorasg_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_xorasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator<<=
    Int32x3_operator_lshasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_lshasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_lshasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_lshasg_Int32x3.name = "operator<<="_c;
    Int32x3_operator_lshasg_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_lshasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    // operator>>=
    Int32x3_operator_rhsasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_rhsasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_rhsasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int32x3_operator_rhsasg_Int32x3.name = "operator>>="_c;
    Int32x3_operator_rhsasg_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int32x3_operator_rhsasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "i32x3"_c, &Int32x3_convert_Float32x3 },
        std::pair{ "i32x3(f32x3)"_c, &Int32x3_convert_Float32x3 },
        std::pair{ "i32x3"_c, &Int32x3_splat_Float32 },
        std::pair{ "i32x3(f32)"_c, &Int32x3_splat_Float32 },
        std::pair{ "i32x3"_c, &Int32x3_convert_UInt32x3 },
        std::pair{ "i32x3(u32x3)"_c, &Int32x3_convert_UInt32x3 },
        std::pair{ "i32x3"_c, &Int32x3_splat_UInt32 },
        std::pair{ "i32x3(u32)"_c, &Int32x3_splat_UInt32 },
        std::pair{ "i32x3"_c, &Int32x3_convert_Int32x3 },
        std::pair{ "i32x3(i32x3)"_c, &Int32x3_convert_Int32x3 },
        std::pair{ "i32x3"_c, &Int32x3_splat_Int32 },
        std::pair{ "i32x3(i32)"_c, &Int32x3_splat_Int32 },
        std::pair{ "i32x3"_c, &Int32x3_convert_Bool8x3 },
        std::pair{ "i32x3(b8x3)"_c, &Int32x3_convert_Bool8x3 },
        std::pair{ "i32x3"_c, &Int32x3_splat_Bool8 },
        std::pair{ "i32x3(b8)"_c, &Int32x3_splat_Bool8 },
        std::pair{ "i32x3"_c, &Int32x3_convert_Float16x3 },
        std::pair{ "i32x3(f16x3)"_c, &Int32x3_convert_Float16x3 },
        std::pair{ "i32x3"_c, &Int32x3_splat_Float16 },
        std::pair{ "i32x3(f16)"_c, &Int32x3_splat_Float16 },
        std::pair{ "i32x3"_c, &Int32x3_convert_UInt16x3 },
        std::pair{ "i32x3(u16x3)"_c, &Int32x3_convert_UInt16x3 },
        std::pair{ "i32x3"_c, &Int32x3_splat_UInt16 },
        std::pair{ "i32x3(u16)"_c, &Int32x3_splat_UInt16 },
        std::pair{ "i32x3"_c, &Int32x3_convert_Int16x3 },
        std::pair{ "i32x3(i16x3)"_c, &Int32x3_convert_Int16x3 },
        std::pair{ "i32x3"_c, &Int32x3_splat_Int16 },
        std::pair{ "i32x3(i16)"_c, &Int32x3_splat_Int16 },
        std::pair{ "i32x3"_c, &Int32x3_ctor0_Int32_Int32_Int32},
        std::pair{ "i32x3(i32,i32,i32)"_c, &Int32x3_ctor0_Int32_Int32_Int32},
        std::pair{ "i32x3"_c, &Int32x3_ctor1_Int32x2_Int32},
        std::pair{ "i32x3(i32x2,i32)"_c, &Int32x3_ctor1_Int32x2_Int32},
        std::pair{ "i32x3"_c, &Int32x3_ctor2_Int32_Int32x2},
        std::pair{ "i32x3(i32,i32x2)"_c, &Int32x3_ctor2_Int32_Int32x2},
        std::pair{ "operator[](i32)"_c, &Int32x3_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Int32x3_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Int32x3_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Int32x3_operator_index_UInt16},
        std::pair{ "operator+(i32x3)"_c, &Int32x3_operator_add_Int32x3},
        std::pair{ "operator-(i32x3)"_c, &Int32x3_operator_sub_Int32x3},
        std::pair{ "operator*(i32x3)"_c, &Int32x3_operator_mul_Int32x3},
        std::pair{ "operator/(i32x3)"_c, &Int32x3_operator_div_Int32x3},
        std::pair{ "operator%(i32x3)"_c, &Int32x3_operator_mod_Int32x3},
        std::pair{ "operator+=(i32x3)"_c, &Int32x3_operator_addasg_Int32x3},
        std::pair{ "operator-=(i32x3)"_c, &Int32x3_operator_subasg_Int32x3},
        std::pair{ "operator*=(i32x3)"_c, &Int32x3_operator_mulasg_Int32x3},
        std::pair{ "operator/=(i32x3)"_c, &Int32x3_operator_divasg_Int32x3},
        std::pair{ "operator<(i32x3)"_c, &Int32x3_operator_lt_Int32x3},
        std::pair{ "operator<=(i32x3)"_c, &Int32x3_operator_lte_Int32x3},
        std::pair{ "operator>(i32x3)"_c, &Int32x3_operator_gt_Int32x3},
        std::pair{ "operator>=(i32x3)"_c, &Int32x3_operator_gte_Int32x3},
        std::pair{ "operator==(i32x3)"_c, &Int32x3_operator_eq_Int32x3},
        std::pair{ "operator!=(i32x3)"_c, &Int32x3_operator_neq_Int32x3},
        std::pair{ "operator*(f32)"_c, &Int32x3_operator_scale_Int32x3_Float32},
        std::pair{ "operator*(f16)"_c, &Int32x3_operator_scale_Int32x3_Float16},
        std::pair{ "operator*(u32)"_c, &Int32x3_operator_scale_Int32x3_UInt32},
        std::pair{ "operator*(u16)"_c, &Int32x3_operator_scale_Int32x3_UInt16},
        std::pair{ "operator*(i32)"_c, &Int32x3_operator_scale_Int32x3_Int32},
        std::pair{ "operator*(i16)"_c, &Int32x3_operator_scale_Int32x3_Int16},
        std::pair{ "operator|(i32x3)"_c, &Int32x3_operator_or_Int32x3},
        std::pair{ "operator&(i32x3)"_c, &Int32x3_operator_and_Int32x3},
        std::pair{ "operator^(i32x3)"_c, &Int32x3_operator_xor_Int32x3},
        std::pair{ "operator<<(i32x3)"_c, &Int32x3_operator_lsh_Int32x3},
        std::pair{ "operator>>(i32x3)"_c, &Int32x3_operator_rsh_Int32x3},
        std::pair{ "operator|=(i32x3)"_c, &Int32x3_operator_orasg_Int32x3},
        std::pair{ "operator&=(i32x3)"_c, &Int32x3_operator_andasg_Int32x3},
        std::pair{ "operator^=(i32x3)"_c, &Int32x3_operator_xorasg_Int32x3},
        std::pair{ "operator<<=(i32x3)"_c, &Int32x3_operator_lshasg_Int32x3},
        std::pair{ "operator>>=(i32x3)"_c, &Int32x3_operator_rhsasg_Int32x3}
    }
    };   
}

Int32x4::Int32x4()
{
    this->name = "i32";
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    // Conversion from Float32x4
    Int32x4_convert_Float32x4_arg0.name = "_arg0"_c;
    Int32x4_convert_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Int32x4_convert_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Int32x4_convert_Float32x4.name = "i32x4"_c;
    Int32x4_convert_Float32x4.returnType = Type::FullType { Int32x4Type.name };
    Symbol::Resolved(&Int32x4_convert_Float32x4)->returnTypeSymbol = &Int32x4Type;

    // Splat with Float32
    Int32x4_splat_Float32_arg0.name = "_arg0"_c;
    Int32x4_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Int32x4_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Int32x4_splat_Float32.name = "i32x4"_c;
    Int32x4_splat_Float32.returnType = Type::FullType { Int32x4Type.name };
    Symbol::Resolved(&Int32x4_splat_Float32)->returnTypeSymbol = &Int32x4Type;

    // Conversion from UInt32x4
    Int32x4_convert_UInt32x4_arg0.name = "_arg0"_c;
    Int32x4_convert_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&Int32x4_convert_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Int32x4_convert_UInt32x4.name = "i32x4"_c;
    Int32x4_convert_UInt32x4.returnType = Type::FullType { Int32x4Type.name };
    Symbol::Resolved(&Int32x4_convert_UInt32x4)->returnTypeSymbol = &Int32x4Type;

    // Splat with UInt32
    Int32x4_splat_UInt32_arg0.name = "_arg0"_c;
    Int32x4_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int32x4_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int32x4_splat_UInt32.name = "i32x4"_c;
    Int32x4_splat_UInt32.returnType = Type::FullType { Int32x4Type.name };
    Symbol::Resolved(&Int32x4_splat_UInt32)->returnTypeSymbol = &Int32x4Type;

    // Conversion from Int32x4
    Int32x4_convert_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_convert_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_convert_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_convert_Int32x4.name = "i32x4"_c;
    Int32x4_convert_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Symbol::Resolved(&Int32x4_convert_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // Splat with Int32
    Int32x4_splat_Int32_arg0.name = "_arg0"_c;
    Int32x4_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x4_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Int32x4_splat_Int32.name = "i32x4"_c;
    Int32x4_splat_Int32.returnType = Type::FullType { Int32x4Type.name };
    Symbol::Resolved(&Int32x4_splat_Int32)->returnTypeSymbol = &Int32x4Type;

    // Conversion from Bool8x4
    Int32x4_convert_Bool8x4_arg0.name = "_arg0"_c;
    Int32x4_convert_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Int32x4_convert_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Int32x4_convert_Bool8x4.name = "i32x4"_c;
    Int32x4_convert_Bool8x4.returnType = Type::FullType { Int32x4Type.name };
    Symbol::Resolved(&Int32x4_convert_Bool8x4)->returnTypeSymbol = &Int32x4Type;

    // Splat with Bool8
    Int32x4_splat_Bool8_arg0.name = "_arg0"_c;
    Int32x4_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Int32x4_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    Int32x4_splat_Bool8.name = "i32x4"_c;
    Int32x4_splat_Bool8.returnType = Type::FullType { Int32x4Type.name };
    Symbol::Resolved(&Int32x4_splat_Bool8)->returnTypeSymbol = &Int32x4Type;

    // Conversion from Float16x4
    Int32x4_convert_Float16x4_arg0.name = "_arg0"_c;
    Int32x4_convert_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Int32x4_convert_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Int32x4_convert_Float16x4.name = "i32x4"_c;
    Int32x4_convert_Float16x4.returnType = Type::FullType { Int32x4Type.name };
    Symbol::Resolved(&Int32x4_convert_Float16x4)->returnTypeSymbol = &Int32x4Type;

    // Splat with Float16
    Int32x4_splat_Float16_arg0.name = "_arg0"_c;
    Int32x4_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Int32x4_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Int32x4_splat_Float16.name = "i32x4"_c;
    Int32x4_splat_Float16.returnType = Type::FullType { Int32x4Type.name };
    Symbol::Resolved(&Int32x4_splat_Float16)->returnTypeSymbol = &Int32x4Type;

    // Conversion from UInt16x4
    Int32x4_convert_UInt16x4_arg0.name = "_arg0"_c;
    Int32x4_convert_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&Int32x4_convert_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Int32x4_convert_UInt16x4.name = "i32x4"_c;
    Int32x4_convert_UInt16x4.returnType = Type::FullType { Int32x4Type.name };
    Symbol::Resolved(&Int32x4_convert_UInt16x4)->returnTypeSymbol = &Int32x4Type;

    // Splat with UInt16
    Int32x4_splat_UInt16_arg0.name = "_arg0"_c;
    Int32x4_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int32x4_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int32x4_splat_UInt16.name = "i32x4"_c;
    Int32x4_splat_UInt16.returnType = Type::FullType { Int32x4Type.name };
    Symbol::Resolved(&Int32x4_splat_UInt16)->returnTypeSymbol = &Int32x4Type;

    // Conversion from Int16x4
    Int32x4_convert_Int16x4_arg0.name = "_arg0"_c;
    Int32x4_convert_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int32x4_convert_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int32x4_convert_Int16x4.name = "i32x4"_c;
    Int32x4_convert_Int16x4.returnType = Type::FullType { Int32x4Type.name };
    Symbol::Resolved(&Int32x4_convert_Int16x4)->returnTypeSymbol = &Int32x4Type;

    // Splat with Int16
    Int32x4_splat_Int16_arg0.name = "_arg0"_c;
    Int32x4_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int32x4_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Int32x4_splat_Int16.name = "i32x4"_c;
    Int32x4_splat_Int16.returnType = Type::FullType { Int32x4Type.name };
    Symbol::Resolved(&Int32x4_splat_Int16)->returnTypeSymbol = &Int32x4Type;

    // Construct with Int32, Int32, Int32, Int32
    Int32x4_ctor0_arg0.name = "_arg0"_c;
    Int32x4_ctor0_arg0.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x4_ctor0_arg0)->typeSymbol = &Int32Type;
    Int32x4_ctor0_arg1.name = "_arg1"_c;
    Int32x4_ctor0_arg1.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x4_ctor0_arg1)->typeSymbol = &Int32Type;
    Int32x4_ctor0_arg2.name = "_arg2"_c;
    Int32x4_ctor0_arg2.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x4_ctor0_arg2)->typeSymbol = &Int32Type;
    Int32x4_ctor0_arg3.name = "_arg3"_c;
    Int32x4_ctor0_arg3.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x4_ctor0_arg3)->typeSymbol = &Int32Type;
    Int32x4_ctor0_Int32_Int32_Int32_Int32.name = "0"_c;
    Int32x4_ctor0_Int32_Int32_Int32_Int32.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_ctor0_Int32_Int32_Int32_Int32)->returnTypeSymbol = &Int32x4Type;

    // Construct with Int32x2, Int32, Int32
    Int32x4_ctor1_arg0.name = "_arg0"_c;
    Int32x4_ctor1_arg0.type = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x4_ctor1_arg0)->typeSymbol = &Int32x2Type;
    Int32x4_ctor1_arg1.name = "_arg1"_c;
    Int32x4_ctor1_arg1.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x4_ctor1_arg1)->typeSymbol = &Int32Type;
    Int32x4_ctor1_arg2.name = "_arg2"_c;
    Int32x4_ctor1_arg2.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x4_ctor1_arg2)->typeSymbol = &Int32Type;
    Int32x4_ctor1_Int32x2_Int32_Int32.name = "1"_c;
    Int32x4_ctor1_Int32x2_Int32_Int32.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_ctor1_Int32x2_Int32_Int32)->returnTypeSymbol = &Int32x4Type;

    // Construct with Int32, Int32x2, Int32
    Int32x4_ctor2_arg0.name = "_arg0"_c;
    Int32x4_ctor2_arg0.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x4_ctor2_arg0)->typeSymbol = &Int32Type;
    Int32x4_ctor2_arg1.name = "_arg1"_c;
    Int32x4_ctor2_arg1.type = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x4_ctor2_arg1)->typeSymbol = &Int32x2Type;
    Int32x4_ctor2_arg2.name = "_arg2"_c;
    Int32x4_ctor2_arg2.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x4_ctor2_arg2)->typeSymbol = &Int32Type;
    Int32x4_ctor2_Int32_Int32x2_Int32.name = "2"_c;
    Int32x4_ctor2_Int32_Int32x2_Int32.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_ctor2_Int32_Int32x2_Int32)->returnTypeSymbol = &Int32x4Type;

    // Construct with Int32, Int32, Int32x2
    Int32x4_ctor3_arg0.name = "_arg0"_c;
    Int32x4_ctor3_arg0.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x4_ctor3_arg0)->typeSymbol = &Int32Type;
    Int32x4_ctor3_arg1.name = "_arg1"_c;
    Int32x4_ctor3_arg1.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x4_ctor3_arg1)->typeSymbol = &Int32Type;
    Int32x4_ctor3_arg2.name = "_arg2"_c;
    Int32x4_ctor3_arg2.type = Type::FullType { Int32x2Type.name };
    Symbol::Resolved(&Int32x4_ctor3_arg2)->typeSymbol = &Int32x2Type;
    Int32x4_ctor3_Int32_Int32_Int32x2.name = "3"_c;
    Int32x4_ctor3_Int32_Int32_Int32x2.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_ctor3_Int32_Int32_Int32x2)->returnTypeSymbol = &Int32x4Type;

    // Construct with Int32x3, Int32
    Int32x4_ctor4_arg0.name = "_arg0"_c;
    Int32x4_ctor4_arg0.type = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x4_ctor4_arg0)->typeSymbol = &Int32x3Type;
    Int32x4_ctor4_arg1.name = "_arg1"_c;
    Int32x4_ctor4_arg1.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x4_ctor4_arg1)->typeSymbol = &Int32Type;
    Int32x4_ctor4_Int32x3_Int32.name = "4"_c;
    Int32x4_ctor4_Int32x3_Int32.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_ctor4_Int32x3_Int32)->returnTypeSymbol = &Int32x4Type;

    // Construct with Int32, Int32x3
    Int32x4_ctor5_arg0.name = "_arg0"_c;
    Int32x4_ctor5_arg0.type = Type::FullType { Int32Type.name };
    Symbol::Resolved(&Int32x4_ctor5_arg0)->typeSymbol = &Int32Type;
    Int32x4_ctor5_arg1.name = "_arg1"_c;
    Int32x4_ctor5_arg1.type = Type::FullType { Int32x3Type.name };
    Symbol::Resolved(&Int32x4_ctor5_arg1)->typeSymbol = &Int32x3Type;
    Int32x4_ctor5_Int32_Int32x3.name = "5"_c;
    Int32x4_ctor5_Int32_Int32x3.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_ctor5_Int32_Int32x3)->returnTypeSymbol = &Int32x4Type;

    // operator[](i32)
    Int32x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Int32x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Int32x4_operator_index_Int32.name = "operator[]"_c;
    Int32x4_operator_index_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x4_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    // operator[](u32)
    Int32x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int32x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int32x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int32x4_operator_index_UInt32.name = "operator[]"_c;
    Int32x4_operator_index_UInt32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x4_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    // operator[](i16)
    Int32x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Int32x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int32x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Int32x4_operator_index_Int16.name = "operator[]"_c;
    Int32x4_operator_index_Int16.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x4_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    // operator[](u16)
    Int32x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int32x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int32x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int32x4_operator_index_UInt16.name = "operator[]"_c;
    Int32x4_operator_index_UInt16.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x4_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    // operator+(i32x4)
    Int32x4_operator_add_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_add_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_add_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_add_Int32x4.name = "operator+"_c;
    Int32x4_operator_add_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_add_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator-(i32x4)
    Int32x4_operator_sub_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_sub_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_sub_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_sub_Int32x4.name = "operator-"_c;
    Int32x4_operator_sub_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_sub_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator*(i32x4)
    Int32x4_operator_mul_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_mul_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_mul_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_mul_Int32x4.name = "operator*"_c;
    Int32x4_operator_mul_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_mul_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator/(i32x4)
    Int32x4_operator_div_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_div_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_div_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_div_Int32x4.name = "operator/"_c;
    Int32x4_operator_div_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_div_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator%(i32x4)
    Int32x4_operator_mod_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_mod_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_mod_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_mod_Int32x4.name = "operator%"_c;
    Int32x4_operator_mod_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_mod_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator+=(i32x4)
    Int32x4_operator_addasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_addasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_addasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_addasg_Int32x4.name = "operator+="_c;
    Int32x4_operator_addasg_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_addasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator-=(i32x4)
    Int32x4_operator_subasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_subasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_subasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_subasg_Int32x4.name = "operator-="_c;
    Int32x4_operator_subasg_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_subasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator*=(i32x4)
    Int32x4_operator_mulasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_mulasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_mulasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_mulasg_Int32x4.name = "operator*="_c;
    Int32x4_operator_mulasg_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_mulasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator/=(i32x4)
    Int32x4_operator_divasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_divasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_divasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_divasg_Int32x4.name = "operator/="_c;
    Int32x4_operator_divasg_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_divasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator<(i32x4)
    Int32x4_operator_lt_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_lt_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_lt_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_lt_Int32x4.name = "operator<"_c;
    Int32x4_operator_lt_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_lt_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator<=(i32x4)
    Int32x4_operator_lte_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_lte_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_lte_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_lte_Int32x4.name = "operator<="_c;
    Int32x4_operator_lte_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_lte_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator>(i32x4)
    Int32x4_operator_gt_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_gt_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_gt_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_gt_Int32x4.name = "operator>"_c;
    Int32x4_operator_gt_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_gt_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator>=(i32x4)
    Int32x4_operator_gte_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_gte_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_gte_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_gte_Int32x4.name = "operator>="_c;
    Int32x4_operator_gte_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_gte_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator==(i32x4)
    Int32x4_operator_eq_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_eq_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_eq_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_eq_Int32x4.name = "operator=="_c;
    Int32x4_operator_eq_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_eq_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator!=(i32x4)
    Int32x4_operator_neq_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_neq_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_neq_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_neq_Int32x4.name = "operator!="_c;
    Int32x4_operator_neq_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_neq_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator*(f32)
    Int32x4_operator_scale_Int32x4_Float32_arg0.name = "_arg0"_c;
    Int32x4_operator_scale_Int32x4_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Int32x4_operator_scale_Int32x4_Float32_arg0)->typeSymbol = &Float32Type;
    Int32x4_operator_scale_Int32x4_Float32.name = "operator*"_c;
    Int32x4_operator_scale_Int32x4_Float32.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_scale_Int32x4_Float32)->returnTypeSymbol = &Int32x4Type;

    // operator*(f16)
    Int32x4_operator_scale_Int32x4_Float16_arg0.name = "_arg0"_c;
    Int32x4_operator_scale_Int32x4_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Int32x4_operator_scale_Int32x4_Float16_arg0)->typeSymbol = &Float16Type;
    Int32x4_operator_scale_Int32x4_Float16.name = "operator*"_c;
    Int32x4_operator_scale_Int32x4_Float16.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_scale_Int32x4_Float16)->returnTypeSymbol = &Int32x4Type;

    // operator*(u32)
    Int32x4_operator_scale_Int32x4_UInt32_arg0.name = "_arg0"_c;
    Int32x4_operator_scale_Int32x4_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int32x4_operator_scale_Int32x4_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int32x4_operator_scale_Int32x4_UInt32.name = "operator*"_c;
    Int32x4_operator_scale_Int32x4_UInt32.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_scale_Int32x4_UInt32)->returnTypeSymbol = &Int32x4Type;

    // operator*(u16)
    Int32x4_operator_scale_Int32x4_UInt16_arg0.name = "_arg0"_c;
    Int32x4_operator_scale_Int32x4_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int32x4_operator_scale_Int32x4_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int32x4_operator_scale_Int32x4_UInt16.name = "operator*"_c;
    Int32x4_operator_scale_Int32x4_UInt16.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_scale_Int32x4_UInt16)->returnTypeSymbol = &Int32x4Type;

    // operator*(i32)
    Int32x4_operator_scale_Int32x4_Int32_arg0.name = "_arg0"_c;
    Int32x4_operator_scale_Int32x4_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int32x4_operator_scale_Int32x4_Int32_arg0)->typeSymbol = &Int32Type;
    Int32x4_operator_scale_Int32x4_Int32.name = "operator*"_c;
    Int32x4_operator_scale_Int32x4_Int32.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_scale_Int32x4_Int32)->returnTypeSymbol = &Int32x4Type;

    // operator*(i16)
    Int32x4_operator_scale_Int32x4_Int16_arg0.name = "_arg0"_c;
    Int32x4_operator_scale_Int32x4_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int32x4_operator_scale_Int32x4_Int16_arg0)->typeSymbol = &Int16Type;
    Int32x4_operator_scale_Int32x4_Int16.name = "operator*"_c;
    Int32x4_operator_scale_Int32x4_Int16.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_scale_Int32x4_Int16)->returnTypeSymbol = &Int32x4Type;

    // operator|
    Int32x4_operator_or_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_or_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_or_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_or_Int32x4.name = "operator|"_c;
    Int32x4_operator_or_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_or_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator&
    Int32x4_operator_and_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_and_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_and_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_and_Int32x4.name = "operator&"_c;
    Int32x4_operator_and_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_and_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator^
    Int32x4_operator_xor_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_xor_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_xor_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_xor_Int32x4.name = "operator^"_c;
    Int32x4_operator_xor_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_xor_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator<<
    Int32x4_operator_lsh_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_lsh_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_lsh_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_lsh_Int32x4.name = "operator<<"_c;
    Int32x4_operator_lsh_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_lsh_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator>>
    Int32x4_operator_rsh_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_rsh_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_rsh_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_rsh_Int32x4.name = "operator>>"_c;
    Int32x4_operator_rsh_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_rsh_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator|=
    Int32x4_operator_orasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_orasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_orasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_orasg_Int32x4.name = "operator|="_c;
    Int32x4_operator_orasg_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_orasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator&=
    Int32x4_operator_andasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_andasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_andasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_andasg_Int32x4.name = "operator&="_c;
    Int32x4_operator_andasg_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_andasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator^=
    Int32x4_operator_xorasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_xorasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_xorasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_xorasg_Int32x4.name = "operator^="_c;
    Int32x4_operator_xorasg_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_xorasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator<<=
    Int32x4_operator_lshasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_lshasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_lshasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_lshasg_Int32x4.name = "operator<<="_c;
    Int32x4_operator_lshasg_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_lshasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    // operator>>=
    Int32x4_operator_rhsasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_rhsasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_rhsasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int32x4_operator_rhsasg_Int32x4.name = "operator>>="_c;
    Int32x4_operator_rhsasg_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int32x4_operator_rhsasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "i32x4"_c, &Int32x4_convert_Float32x4 },
        std::pair{ "i32x4(f32x4)"_c, &Int32x4_convert_Float32x4 },
        std::pair{ "i32x4"_c, &Int32x4_splat_Float32 },
        std::pair{ "i32x4(f32)"_c, &Int32x4_splat_Float32 },
        std::pair{ "i32x4"_c, &Int32x4_convert_UInt32x4 },
        std::pair{ "i32x4(u32x4)"_c, &Int32x4_convert_UInt32x4 },
        std::pair{ "i32x4"_c, &Int32x4_splat_UInt32 },
        std::pair{ "i32x4(u32)"_c, &Int32x4_splat_UInt32 },
        std::pair{ "i32x4"_c, &Int32x4_convert_Int32x4 },
        std::pair{ "i32x4(i32x4)"_c, &Int32x4_convert_Int32x4 },
        std::pair{ "i32x4"_c, &Int32x4_splat_Int32 },
        std::pair{ "i32x4(i32)"_c, &Int32x4_splat_Int32 },
        std::pair{ "i32x4"_c, &Int32x4_convert_Bool8x4 },
        std::pair{ "i32x4(b8x4)"_c, &Int32x4_convert_Bool8x4 },
        std::pair{ "i32x4"_c, &Int32x4_splat_Bool8 },
        std::pair{ "i32x4(b8)"_c, &Int32x4_splat_Bool8 },
        std::pair{ "i32x4"_c, &Int32x4_convert_Float16x4 },
        std::pair{ "i32x4(f16x4)"_c, &Int32x4_convert_Float16x4 },
        std::pair{ "i32x4"_c, &Int32x4_splat_Float16 },
        std::pair{ "i32x4(f16)"_c, &Int32x4_splat_Float16 },
        std::pair{ "i32x4"_c, &Int32x4_convert_UInt16x4 },
        std::pair{ "i32x4(u16x4)"_c, &Int32x4_convert_UInt16x4 },
        std::pair{ "i32x4"_c, &Int32x4_splat_UInt16 },
        std::pair{ "i32x4(u16)"_c, &Int32x4_splat_UInt16 },
        std::pair{ "i32x4"_c, &Int32x4_convert_Int16x4 },
        std::pair{ "i32x4(i16x4)"_c, &Int32x4_convert_Int16x4 },
        std::pair{ "i32x4"_c, &Int32x4_splat_Int16 },
        std::pair{ "i32x4(i16)"_c, &Int32x4_splat_Int16 },
        std::pair{ "i32x4"_c, &Int32x4_ctor0_Int32_Int32_Int32_Int32},
        std::pair{ "i32x4(i32,i32,i32,i32)"_c, &Int32x4_ctor0_Int32_Int32_Int32_Int32},
        std::pair{ "i32x4"_c, &Int32x4_ctor1_Int32x2_Int32_Int32},
        std::pair{ "i32x4(i32x2,i32,i32)"_c, &Int32x4_ctor1_Int32x2_Int32_Int32},
        std::pair{ "i32x4"_c, &Int32x4_ctor2_Int32_Int32x2_Int32},
        std::pair{ "i32x4(i32,i32x2,i32)"_c, &Int32x4_ctor2_Int32_Int32x2_Int32},
        std::pair{ "i32x4"_c, &Int32x4_ctor3_Int32_Int32_Int32x2},
        std::pair{ "i32x4(i32,i32,i32x2)"_c, &Int32x4_ctor3_Int32_Int32_Int32x2},
        std::pair{ "i32x4"_c, &Int32x4_ctor4_Int32x3_Int32},
        std::pair{ "i32x4(i32x3,i32)"_c, &Int32x4_ctor4_Int32x3_Int32},
        std::pair{ "i32x4"_c, &Int32x4_ctor5_Int32_Int32x3},
        std::pair{ "i32x4(i32,i32x3)"_c, &Int32x4_ctor5_Int32_Int32x3},
        std::pair{ "operator[](i32)"_c, &Int32x4_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Int32x4_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Int32x4_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Int32x4_operator_index_UInt16},
        std::pair{ "operator+(i32x4)"_c, &Int32x4_operator_add_Int32x4},
        std::pair{ "operator-(i32x4)"_c, &Int32x4_operator_sub_Int32x4},
        std::pair{ "operator*(i32x4)"_c, &Int32x4_operator_mul_Int32x4},
        std::pair{ "operator/(i32x4)"_c, &Int32x4_operator_div_Int32x4},
        std::pair{ "operator%(i32x4)"_c, &Int32x4_operator_mod_Int32x4},
        std::pair{ "operator+=(i32x4)"_c, &Int32x4_operator_addasg_Int32x4},
        std::pair{ "operator-=(i32x4)"_c, &Int32x4_operator_subasg_Int32x4},
        std::pair{ "operator*=(i32x4)"_c, &Int32x4_operator_mulasg_Int32x4},
        std::pair{ "operator/=(i32x4)"_c, &Int32x4_operator_divasg_Int32x4},
        std::pair{ "operator<(i32x4)"_c, &Int32x4_operator_lt_Int32x4},
        std::pair{ "operator<=(i32x4)"_c, &Int32x4_operator_lte_Int32x4},
        std::pair{ "operator>(i32x4)"_c, &Int32x4_operator_gt_Int32x4},
        std::pair{ "operator>=(i32x4)"_c, &Int32x4_operator_gte_Int32x4},
        std::pair{ "operator==(i32x4)"_c, &Int32x4_operator_eq_Int32x4},
        std::pair{ "operator!=(i32x4)"_c, &Int32x4_operator_neq_Int32x4},
        std::pair{ "operator*(f32)"_c, &Int32x4_operator_scale_Int32x4_Float32},
        std::pair{ "operator*(f16)"_c, &Int32x4_operator_scale_Int32x4_Float16},
        std::pair{ "operator*(u32)"_c, &Int32x4_operator_scale_Int32x4_UInt32},
        std::pair{ "operator*(u16)"_c, &Int32x4_operator_scale_Int32x4_UInt16},
        std::pair{ "operator*(i32)"_c, &Int32x4_operator_scale_Int32x4_Int32},
        std::pair{ "operator*(i16)"_c, &Int32x4_operator_scale_Int32x4_Int16},
        std::pair{ "operator|(i32x4)"_c, &Int32x4_operator_or_Int32x4},
        std::pair{ "operator&(i32x4)"_c, &Int32x4_operator_and_Int32x4},
        std::pair{ "operator^(i32x4)"_c, &Int32x4_operator_xor_Int32x4},
        std::pair{ "operator<<(i32x4)"_c, &Int32x4_operator_lsh_Int32x4},
        std::pair{ "operator>>(i32x4)"_c, &Int32x4_operator_rsh_Int32x4},
        std::pair{ "operator|=(i32x4)"_c, &Int32x4_operator_orasg_Int32x4},
        std::pair{ "operator&=(i32x4)"_c, &Int32x4_operator_andasg_Int32x4},
        std::pair{ "operator^=(i32x4)"_c, &Int32x4_operator_xorasg_Int32x4},
        std::pair{ "operator<<=(i32x4)"_c, &Int32x4_operator_lshasg_Int32x4},
        std::pair{ "operator>>=(i32x4)"_c, &Int32x4_operator_rhsasg_Int32x4}
    }
    };   
}

Bool8::Bool8()
{
    this->name = "b8";
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 1;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    // Conversion from Float32
    Bool8_convert_Float32_arg0.name = "_arg0"_c;
    Bool8_convert_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Bool8_convert_Float32_arg0)->typeSymbol = &Float32Type;
    Bool8_convert_Float32.name = "b8"_c;
    Bool8_convert_Float32.returnType = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8_convert_Float32)->returnTypeSymbol = &Bool8Type;

    // Conversion from UInt32
    Bool8_convert_UInt32_arg0.name = "_arg0"_c;
    Bool8_convert_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Bool8_convert_UInt32_arg0)->typeSymbol = &UInt32Type;
    Bool8_convert_UInt32.name = "b8"_c;
    Bool8_convert_UInt32.returnType = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8_convert_UInt32)->returnTypeSymbol = &Bool8Type;

    // Conversion from Int32
    Bool8_convert_Int32_arg0.name = "_arg0"_c;
    Bool8_convert_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Bool8_convert_Int32_arg0)->typeSymbol = &Int32Type;
    Bool8_convert_Int32.name = "b8"_c;
    Bool8_convert_Int32.returnType = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8_convert_Int32)->returnTypeSymbol = &Bool8Type;

    // Conversion from Float16
    Bool8_convert_Float16_arg0.name = "_arg0"_c;
    Bool8_convert_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Bool8_convert_Float16_arg0)->typeSymbol = &Float16Type;
    Bool8_convert_Float16.name = "b8"_c;
    Bool8_convert_Float16.returnType = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8_convert_Float16)->returnTypeSymbol = &Bool8Type;

    // Conversion from UInt16
    Bool8_convert_UInt16_arg0.name = "_arg0"_c;
    Bool8_convert_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Bool8_convert_UInt16_arg0)->typeSymbol = &UInt16Type;
    Bool8_convert_UInt16.name = "b8"_c;
    Bool8_convert_UInt16.returnType = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8_convert_UInt16)->returnTypeSymbol = &Bool8Type;

    // Conversion from Int16
    Bool8_convert_Int16_arg0.name = "_arg0"_c;
    Bool8_convert_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Bool8_convert_Int16_arg0)->typeSymbol = &Int16Type;
    Bool8_convert_Int16.name = "b8"_c;
    Bool8_convert_Int16.returnType = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8_convert_Int16)->returnTypeSymbol = &Bool8Type;

    // Construct with Bool8
    Bool8_ctor0_arg0.name = "_arg0"_c;
    Bool8_ctor0_arg0.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8_ctor0_arg0)->typeSymbol = &Bool8Type;
    Bool8_ctor0_Bool8.name = "0"_c;
    Bool8_ctor0_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_ctor0_Bool8)->returnTypeSymbol = &Bool8Type;

    // operator[](i32)
    Bool8_operator_index_Int32_arg0.name = "_arg0"_c;
    Bool8_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Bool8_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Bool8_operator_index_Int32.name = "operator[]"_c;
    Bool8_operator_index_Int32.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    // operator[](u32)
    Bool8_operator_index_UInt32_arg0.name = "_arg0"_c;
    Bool8_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Bool8_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Bool8_operator_index_UInt32.name = "operator[]"_c;
    Bool8_operator_index_UInt32.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    // operator[](i16)
    Bool8_operator_index_Int16_arg0.name = "_arg0"_c;
    Bool8_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Bool8_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Bool8_operator_index_Int16.name = "operator[]"_c;
    Bool8_operator_index_Int16.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    // operator[](u16)
    Bool8_operator_index_UInt16_arg0.name = "_arg0"_c;
    Bool8_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Bool8_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Bool8_operator_index_UInt16.name = "operator[]"_c;
    Bool8_operator_index_UInt16.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    // operator+(b8)
    Bool8_operator_add_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_add_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_add_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8_operator_add_Bool8.name = "operator+"_c;
    Bool8_operator_add_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_add_Bool8)->returnTypeSymbol = &Bool8Type;

    // operator-(b8)
    Bool8_operator_sub_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_sub_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_sub_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8_operator_sub_Bool8.name = "operator-"_c;
    Bool8_operator_sub_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_sub_Bool8)->returnTypeSymbol = &Bool8Type;

    // operator*(b8)
    Bool8_operator_mul_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_mul_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_mul_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8_operator_mul_Bool8.name = "operator*"_c;
    Bool8_operator_mul_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_mul_Bool8)->returnTypeSymbol = &Bool8Type;

    // operator/(b8)
    Bool8_operator_div_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_div_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_div_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8_operator_div_Bool8.name = "operator/"_c;
    Bool8_operator_div_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_div_Bool8)->returnTypeSymbol = &Bool8Type;

    // operator%(b8)
    Bool8_operator_mod_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_mod_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_mod_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8_operator_mod_Bool8.name = "operator%"_c;
    Bool8_operator_mod_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_mod_Bool8)->returnTypeSymbol = &Bool8Type;

    // operator+=(b8)
    Bool8_operator_addasg_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_addasg_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_addasg_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8_operator_addasg_Bool8.name = "operator+="_c;
    Bool8_operator_addasg_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_addasg_Bool8)->returnTypeSymbol = &Bool8Type;

    // operator-=(b8)
    Bool8_operator_subasg_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_subasg_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_subasg_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8_operator_subasg_Bool8.name = "operator-="_c;
    Bool8_operator_subasg_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_subasg_Bool8)->returnTypeSymbol = &Bool8Type;

    // operator*=(b8)
    Bool8_operator_mulasg_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_mulasg_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_mulasg_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8_operator_mulasg_Bool8.name = "operator*="_c;
    Bool8_operator_mulasg_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_mulasg_Bool8)->returnTypeSymbol = &Bool8Type;

    // operator/=(b8)
    Bool8_operator_divasg_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_divasg_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_divasg_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8_operator_divasg_Bool8.name = "operator/="_c;
    Bool8_operator_divasg_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_divasg_Bool8)->returnTypeSymbol = &Bool8Type;

    // operator<(b8)
    Bool8_operator_lt_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_lt_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_lt_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8_operator_lt_Bool8.name = "operator<"_c;
    Bool8_operator_lt_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_lt_Bool8)->returnTypeSymbol = &Bool8Type;

    // operator<=(b8)
    Bool8_operator_lte_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_lte_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_lte_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8_operator_lte_Bool8.name = "operator<="_c;
    Bool8_operator_lte_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_lte_Bool8)->returnTypeSymbol = &Bool8Type;

    // operator>(b8)
    Bool8_operator_gt_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_gt_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_gt_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8_operator_gt_Bool8.name = "operator>"_c;
    Bool8_operator_gt_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_gt_Bool8)->returnTypeSymbol = &Bool8Type;

    // operator>=(b8)
    Bool8_operator_gte_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_gte_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_gte_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8_operator_gte_Bool8.name = "operator>="_c;
    Bool8_operator_gte_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_gte_Bool8)->returnTypeSymbol = &Bool8Type;

    // operator==(b8)
    Bool8_operator_eq_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_eq_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_eq_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8_operator_eq_Bool8.name = "operator=="_c;
    Bool8_operator_eq_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_eq_Bool8)->returnTypeSymbol = &Bool8Type;

    // operator!=(b8)
    Bool8_operator_neq_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_neq_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_neq_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8_operator_neq_Bool8.name = "operator!="_c;
    Bool8_operator_neq_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8_operator_neq_Bool8)->returnTypeSymbol = &Bool8Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "b8"_c, &Bool8_convert_Float32 },
        std::pair{ "b8(f32)"_c, &Bool8_convert_Float32 },
        std::pair{ "b8"_c, &Bool8_convert_UInt32 },
        std::pair{ "b8(u32)"_c, &Bool8_convert_UInt32 },
        std::pair{ "b8"_c, &Bool8_convert_Int32 },
        std::pair{ "b8(i32)"_c, &Bool8_convert_Int32 },
        std::pair{ "b8"_c, &Bool8_convert_Float16 },
        std::pair{ "b8(f16)"_c, &Bool8_convert_Float16 },
        std::pair{ "b8"_c, &Bool8_convert_UInt16 },
        std::pair{ "b8(u16)"_c, &Bool8_convert_UInt16 },
        std::pair{ "b8"_c, &Bool8_convert_Int16 },
        std::pair{ "b8(i16)"_c, &Bool8_convert_Int16 },
        std::pair{ "b8"_c, &Bool8_ctor0_Bool8},
        std::pair{ "b8(b8)"_c, &Bool8_ctor0_Bool8},
        std::pair{ "operator[](i32)"_c, &Bool8_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Bool8_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Bool8_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Bool8_operator_index_UInt16},
        std::pair{ "operator+(b8)"_c, &Bool8_operator_add_Bool8},
        std::pair{ "operator-(b8)"_c, &Bool8_operator_sub_Bool8},
        std::pair{ "operator*(b8)"_c, &Bool8_operator_mul_Bool8},
        std::pair{ "operator/(b8)"_c, &Bool8_operator_div_Bool8},
        std::pair{ "operator%(b8)"_c, &Bool8_operator_mod_Bool8},
        std::pair{ "operator+=(b8)"_c, &Bool8_operator_addasg_Bool8},
        std::pair{ "operator-=(b8)"_c, &Bool8_operator_subasg_Bool8},
        std::pair{ "operator*=(b8)"_c, &Bool8_operator_mulasg_Bool8},
        std::pair{ "operator/=(b8)"_c, &Bool8_operator_divasg_Bool8},
        std::pair{ "operator<(b8)"_c, &Bool8_operator_lt_Bool8},
        std::pair{ "operator<=(b8)"_c, &Bool8_operator_lte_Bool8},
        std::pair{ "operator>(b8)"_c, &Bool8_operator_gt_Bool8},
        std::pair{ "operator>=(b8)"_c, &Bool8_operator_gte_Bool8},
        std::pair{ "operator==(b8)"_c, &Bool8_operator_eq_Bool8},
        std::pair{ "operator!=(b8)"_c, &Bool8_operator_neq_Bool8}
    }
    };   
}

Bool8x2::Bool8x2()
{
    this->name = "b8";
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    // Conversion from Float32x2
    Bool8x2_convert_Float32x2_arg0.name = "_arg0"_c;
    Bool8x2_convert_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Bool8x2_convert_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Bool8x2_convert_Float32x2.name = "b8x2"_c;
    Bool8x2_convert_Float32x2.returnType = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_convert_Float32x2)->returnTypeSymbol = &Bool8x2Type;

    // Splat with Float32
    Bool8x2_splat_Float32_arg0.name = "_arg0"_c;
    Bool8x2_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Bool8x2_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Bool8x2_splat_Float32.name = "b8x2"_c;
    Bool8x2_splat_Float32.returnType = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_splat_Float32)->returnTypeSymbol = &Bool8x2Type;

    // Conversion from UInt32x2
    Bool8x2_convert_UInt32x2_arg0.name = "_arg0"_c;
    Bool8x2_convert_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&Bool8x2_convert_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Bool8x2_convert_UInt32x2.name = "b8x2"_c;
    Bool8x2_convert_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_convert_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    // Splat with UInt32
    Bool8x2_splat_UInt32_arg0.name = "_arg0"_c;
    Bool8x2_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Bool8x2_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Bool8x2_splat_UInt32.name = "b8x2"_c;
    Bool8x2_splat_UInt32.returnType = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_splat_UInt32)->returnTypeSymbol = &Bool8x2Type;

    // Conversion from Int32x2
    Bool8x2_convert_Int32x2_arg0.name = "_arg0"_c;
    Bool8x2_convert_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Bool8x2_convert_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Bool8x2_convert_Int32x2.name = "b8x2"_c;
    Bool8x2_convert_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_convert_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    // Splat with Int32
    Bool8x2_splat_Int32_arg0.name = "_arg0"_c;
    Bool8x2_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Bool8x2_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Bool8x2_splat_Int32.name = "b8x2"_c;
    Bool8x2_splat_Int32.returnType = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_splat_Int32)->returnTypeSymbol = &Bool8x2Type;

    // Conversion from Bool8x2
    Bool8x2_convert_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_convert_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_convert_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_convert_Bool8x2.name = "b8x2"_c;
    Bool8x2_convert_Bool8x2.returnType = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_convert_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // Splat with Bool8
    Bool8x2_splat_Bool8_arg0.name = "_arg0"_c;
    Bool8x2_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8x2_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8x2_splat_Bool8.name = "b8x2"_c;
    Bool8x2_splat_Bool8.returnType = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_splat_Bool8)->returnTypeSymbol = &Bool8x2Type;

    // Conversion from Float16x2
    Bool8x2_convert_Float16x2_arg0.name = "_arg0"_c;
    Bool8x2_convert_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Bool8x2_convert_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Bool8x2_convert_Float16x2.name = "b8x2"_c;
    Bool8x2_convert_Float16x2.returnType = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_convert_Float16x2)->returnTypeSymbol = &Bool8x2Type;

    // Splat with Float16
    Bool8x2_splat_Float16_arg0.name = "_arg0"_c;
    Bool8x2_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Bool8x2_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Bool8x2_splat_Float16.name = "b8x2"_c;
    Bool8x2_splat_Float16.returnType = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_splat_Float16)->returnTypeSymbol = &Bool8x2Type;

    // Conversion from UInt16x2
    Bool8x2_convert_UInt16x2_arg0.name = "_arg0"_c;
    Bool8x2_convert_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&Bool8x2_convert_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Bool8x2_convert_UInt16x2.name = "b8x2"_c;
    Bool8x2_convert_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_convert_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    // Splat with UInt16
    Bool8x2_splat_UInt16_arg0.name = "_arg0"_c;
    Bool8x2_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Bool8x2_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Bool8x2_splat_UInt16.name = "b8x2"_c;
    Bool8x2_splat_UInt16.returnType = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_splat_UInt16)->returnTypeSymbol = &Bool8x2Type;

    // Conversion from Int16x2
    Bool8x2_convert_Int16x2_arg0.name = "_arg0"_c;
    Bool8x2_convert_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Bool8x2_convert_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Bool8x2_convert_Int16x2.name = "b8x2"_c;
    Bool8x2_convert_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_convert_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    // Splat with Int16
    Bool8x2_splat_Int16_arg0.name = "_arg0"_c;
    Bool8x2_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Bool8x2_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Bool8x2_splat_Int16.name = "b8x2"_c;
    Bool8x2_splat_Int16.returnType = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_splat_Int16)->returnTypeSymbol = &Bool8x2Type;

    // Construct with Bool8, Bool8
    Bool8x2_ctor0_arg0.name = "_arg0"_c;
    Bool8x2_ctor0_arg0.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x2_ctor0_arg0)->typeSymbol = &Bool8Type;
    Bool8x2_ctor0_arg1.name = "_arg1"_c;
    Bool8x2_ctor0_arg1.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x2_ctor0_arg1)->typeSymbol = &Bool8Type;
    Bool8x2_ctor0_Bool8_Bool8.name = "0"_c;
    Bool8x2_ctor0_Bool8_Bool8.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_ctor0_Bool8_Bool8)->returnTypeSymbol = &Bool8x2Type;

    // operator[](i32)
    Bool8x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Bool8x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Bool8x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Bool8x2_operator_index_Int32.name = "operator[]"_c;
    Bool8x2_operator_index_Int32.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8x2_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    // operator[](u32)
    Bool8x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Bool8x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Bool8x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Bool8x2_operator_index_UInt32.name = "operator[]"_c;
    Bool8x2_operator_index_UInt32.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8x2_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    // operator[](i16)
    Bool8x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Bool8x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Bool8x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Bool8x2_operator_index_Int16.name = "operator[]"_c;
    Bool8x2_operator_index_Int16.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8x2_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    // operator[](u16)
    Bool8x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Bool8x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Bool8x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Bool8x2_operator_index_UInt16.name = "operator[]"_c;
    Bool8x2_operator_index_UInt16.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8x2_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    // operator+(b8x2)
    Bool8x2_operator_add_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_add_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_add_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_operator_add_Bool8x2.name = "operator+"_c;
    Bool8x2_operator_add_Bool8x2.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_add_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // operator-(b8x2)
    Bool8x2_operator_sub_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_sub_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_sub_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_operator_sub_Bool8x2.name = "operator-"_c;
    Bool8x2_operator_sub_Bool8x2.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_sub_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // operator*(b8x2)
    Bool8x2_operator_mul_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_mul_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_mul_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_operator_mul_Bool8x2.name = "operator*"_c;
    Bool8x2_operator_mul_Bool8x2.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_mul_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // operator/(b8x2)
    Bool8x2_operator_div_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_div_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_div_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_operator_div_Bool8x2.name = "operator/"_c;
    Bool8x2_operator_div_Bool8x2.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_div_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // operator%(b8x2)
    Bool8x2_operator_mod_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_mod_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_mod_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_operator_mod_Bool8x2.name = "operator%"_c;
    Bool8x2_operator_mod_Bool8x2.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_mod_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // operator+=(b8x2)
    Bool8x2_operator_addasg_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_addasg_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_addasg_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_operator_addasg_Bool8x2.name = "operator+="_c;
    Bool8x2_operator_addasg_Bool8x2.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_addasg_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // operator-=(b8x2)
    Bool8x2_operator_subasg_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_subasg_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_subasg_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_operator_subasg_Bool8x2.name = "operator-="_c;
    Bool8x2_operator_subasg_Bool8x2.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_subasg_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // operator*=(b8x2)
    Bool8x2_operator_mulasg_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_mulasg_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_mulasg_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_operator_mulasg_Bool8x2.name = "operator*="_c;
    Bool8x2_operator_mulasg_Bool8x2.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_mulasg_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // operator/=(b8x2)
    Bool8x2_operator_divasg_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_divasg_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_divasg_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_operator_divasg_Bool8x2.name = "operator/="_c;
    Bool8x2_operator_divasg_Bool8x2.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_divasg_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // operator<(b8x2)
    Bool8x2_operator_lt_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_lt_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_lt_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_operator_lt_Bool8x2.name = "operator<"_c;
    Bool8x2_operator_lt_Bool8x2.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_lt_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // operator<=(b8x2)
    Bool8x2_operator_lte_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_lte_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_lte_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_operator_lte_Bool8x2.name = "operator<="_c;
    Bool8x2_operator_lte_Bool8x2.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_lte_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // operator>(b8x2)
    Bool8x2_operator_gt_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_gt_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_gt_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_operator_gt_Bool8x2.name = "operator>"_c;
    Bool8x2_operator_gt_Bool8x2.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_gt_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // operator>=(b8x2)
    Bool8x2_operator_gte_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_gte_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_gte_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_operator_gte_Bool8x2.name = "operator>="_c;
    Bool8x2_operator_gte_Bool8x2.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_gte_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // operator==(b8x2)
    Bool8x2_operator_eq_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_eq_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_eq_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_operator_eq_Bool8x2.name = "operator=="_c;
    Bool8x2_operator_eq_Bool8x2.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_eq_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // operator!=(b8x2)
    Bool8x2_operator_neq_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_neq_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_neq_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x2_operator_neq_Bool8x2.name = "operator!="_c;
    Bool8x2_operator_neq_Bool8x2.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_neq_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    // operator*(f32)
    Bool8x2_operator_scale_Bool8x2_Float32_arg0.name = "_arg0"_c;
    Bool8x2_operator_scale_Bool8x2_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Bool8x2_operator_scale_Bool8x2_Float32_arg0)->typeSymbol = &Float32Type;
    Bool8x2_operator_scale_Bool8x2_Float32.name = "operator*"_c;
    Bool8x2_operator_scale_Bool8x2_Float32.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_scale_Bool8x2_Float32)->returnTypeSymbol = &Bool8x2Type;

    // operator*(f16)
    Bool8x2_operator_scale_Bool8x2_Float16_arg0.name = "_arg0"_c;
    Bool8x2_operator_scale_Bool8x2_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Bool8x2_operator_scale_Bool8x2_Float16_arg0)->typeSymbol = &Float16Type;
    Bool8x2_operator_scale_Bool8x2_Float16.name = "operator*"_c;
    Bool8x2_operator_scale_Bool8x2_Float16.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_scale_Bool8x2_Float16)->returnTypeSymbol = &Bool8x2Type;

    // operator*(u32)
    Bool8x2_operator_scale_Bool8x2_UInt32_arg0.name = "_arg0"_c;
    Bool8x2_operator_scale_Bool8x2_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Bool8x2_operator_scale_Bool8x2_UInt32_arg0)->typeSymbol = &UInt32Type;
    Bool8x2_operator_scale_Bool8x2_UInt32.name = "operator*"_c;
    Bool8x2_operator_scale_Bool8x2_UInt32.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_scale_Bool8x2_UInt32)->returnTypeSymbol = &Bool8x2Type;

    // operator*(u16)
    Bool8x2_operator_scale_Bool8x2_UInt16_arg0.name = "_arg0"_c;
    Bool8x2_operator_scale_Bool8x2_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Bool8x2_operator_scale_Bool8x2_UInt16_arg0)->typeSymbol = &UInt16Type;
    Bool8x2_operator_scale_Bool8x2_UInt16.name = "operator*"_c;
    Bool8x2_operator_scale_Bool8x2_UInt16.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_scale_Bool8x2_UInt16)->returnTypeSymbol = &Bool8x2Type;

    // operator*(i32)
    Bool8x2_operator_scale_Bool8x2_Int32_arg0.name = "_arg0"_c;
    Bool8x2_operator_scale_Bool8x2_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Bool8x2_operator_scale_Bool8x2_Int32_arg0)->typeSymbol = &Int32Type;
    Bool8x2_operator_scale_Bool8x2_Int32.name = "operator*"_c;
    Bool8x2_operator_scale_Bool8x2_Int32.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_scale_Bool8x2_Int32)->returnTypeSymbol = &Bool8x2Type;

    // operator*(i16)
    Bool8x2_operator_scale_Bool8x2_Int16_arg0.name = "_arg0"_c;
    Bool8x2_operator_scale_Bool8x2_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Bool8x2_operator_scale_Bool8x2_Int16_arg0)->typeSymbol = &Int16Type;
    Bool8x2_operator_scale_Bool8x2_Int16.name = "operator*"_c;
    Bool8x2_operator_scale_Bool8x2_Int16.returnType = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Bool8x2_operator_scale_Bool8x2_Int16)->returnTypeSymbol = &Bool8x2Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "b8x2"_c, &Bool8x2_convert_Float32x2 },
        std::pair{ "b8x2(f32x2)"_c, &Bool8x2_convert_Float32x2 },
        std::pair{ "b8x2"_c, &Bool8x2_splat_Float32 },
        std::pair{ "b8x2(f32)"_c, &Bool8x2_splat_Float32 },
        std::pair{ "b8x2"_c, &Bool8x2_convert_UInt32x2 },
        std::pair{ "b8x2(u32x2)"_c, &Bool8x2_convert_UInt32x2 },
        std::pair{ "b8x2"_c, &Bool8x2_splat_UInt32 },
        std::pair{ "b8x2(u32)"_c, &Bool8x2_splat_UInt32 },
        std::pair{ "b8x2"_c, &Bool8x2_convert_Int32x2 },
        std::pair{ "b8x2(i32x2)"_c, &Bool8x2_convert_Int32x2 },
        std::pair{ "b8x2"_c, &Bool8x2_splat_Int32 },
        std::pair{ "b8x2(i32)"_c, &Bool8x2_splat_Int32 },
        std::pair{ "b8x2"_c, &Bool8x2_convert_Bool8x2 },
        std::pair{ "b8x2(b8x2)"_c, &Bool8x2_convert_Bool8x2 },
        std::pair{ "b8x2"_c, &Bool8x2_splat_Bool8 },
        std::pair{ "b8x2(b8)"_c, &Bool8x2_splat_Bool8 },
        std::pair{ "b8x2"_c, &Bool8x2_convert_Float16x2 },
        std::pair{ "b8x2(f16x2)"_c, &Bool8x2_convert_Float16x2 },
        std::pair{ "b8x2"_c, &Bool8x2_splat_Float16 },
        std::pair{ "b8x2(f16)"_c, &Bool8x2_splat_Float16 },
        std::pair{ "b8x2"_c, &Bool8x2_convert_UInt16x2 },
        std::pair{ "b8x2(u16x2)"_c, &Bool8x2_convert_UInt16x2 },
        std::pair{ "b8x2"_c, &Bool8x2_splat_UInt16 },
        std::pair{ "b8x2(u16)"_c, &Bool8x2_splat_UInt16 },
        std::pair{ "b8x2"_c, &Bool8x2_convert_Int16x2 },
        std::pair{ "b8x2(i16x2)"_c, &Bool8x2_convert_Int16x2 },
        std::pair{ "b8x2"_c, &Bool8x2_splat_Int16 },
        std::pair{ "b8x2(i16)"_c, &Bool8x2_splat_Int16 },
        std::pair{ "b8x2"_c, &Bool8x2_ctor0_Bool8_Bool8},
        std::pair{ "b8x2(b8,b8)"_c, &Bool8x2_ctor0_Bool8_Bool8},
        std::pair{ "operator[](i32)"_c, &Bool8x2_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Bool8x2_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Bool8x2_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Bool8x2_operator_index_UInt16},
        std::pair{ "operator+(b8x2)"_c, &Bool8x2_operator_add_Bool8x2},
        std::pair{ "operator-(b8x2)"_c, &Bool8x2_operator_sub_Bool8x2},
        std::pair{ "operator*(b8x2)"_c, &Bool8x2_operator_mul_Bool8x2},
        std::pair{ "operator/(b8x2)"_c, &Bool8x2_operator_div_Bool8x2},
        std::pair{ "operator%(b8x2)"_c, &Bool8x2_operator_mod_Bool8x2},
        std::pair{ "operator+=(b8x2)"_c, &Bool8x2_operator_addasg_Bool8x2},
        std::pair{ "operator-=(b8x2)"_c, &Bool8x2_operator_subasg_Bool8x2},
        std::pair{ "operator*=(b8x2)"_c, &Bool8x2_operator_mulasg_Bool8x2},
        std::pair{ "operator/=(b8x2)"_c, &Bool8x2_operator_divasg_Bool8x2},
        std::pair{ "operator<(b8x2)"_c, &Bool8x2_operator_lt_Bool8x2},
        std::pair{ "operator<=(b8x2)"_c, &Bool8x2_operator_lte_Bool8x2},
        std::pair{ "operator>(b8x2)"_c, &Bool8x2_operator_gt_Bool8x2},
        std::pair{ "operator>=(b8x2)"_c, &Bool8x2_operator_gte_Bool8x2},
        std::pair{ "operator==(b8x2)"_c, &Bool8x2_operator_eq_Bool8x2},
        std::pair{ "operator!=(b8x2)"_c, &Bool8x2_operator_neq_Bool8x2},
        std::pair{ "operator*(f32)"_c, &Bool8x2_operator_scale_Bool8x2_Float32},
        std::pair{ "operator*(f16)"_c, &Bool8x2_operator_scale_Bool8x2_Float16},
        std::pair{ "operator*(u32)"_c, &Bool8x2_operator_scale_Bool8x2_UInt32},
        std::pair{ "operator*(u16)"_c, &Bool8x2_operator_scale_Bool8x2_UInt16},
        std::pair{ "operator*(i32)"_c, &Bool8x2_operator_scale_Bool8x2_Int32},
        std::pair{ "operator*(i16)"_c, &Bool8x2_operator_scale_Bool8x2_Int16}
    }
    };   
}

Bool8x3::Bool8x3()
{
    this->name = "b8";
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 3;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    // Conversion from Float32x3
    Bool8x3_convert_Float32x3_arg0.name = "_arg0"_c;
    Bool8x3_convert_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Bool8x3_convert_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Bool8x3_convert_Float32x3.name = "b8x3"_c;
    Bool8x3_convert_Float32x3.returnType = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_convert_Float32x3)->returnTypeSymbol = &Bool8x3Type;

    // Splat with Float32
    Bool8x3_splat_Float32_arg0.name = "_arg0"_c;
    Bool8x3_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Bool8x3_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Bool8x3_splat_Float32.name = "b8x3"_c;
    Bool8x3_splat_Float32.returnType = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_splat_Float32)->returnTypeSymbol = &Bool8x3Type;

    // Conversion from UInt32x3
    Bool8x3_convert_UInt32x3_arg0.name = "_arg0"_c;
    Bool8x3_convert_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&Bool8x3_convert_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Bool8x3_convert_UInt32x3.name = "b8x3"_c;
    Bool8x3_convert_UInt32x3.returnType = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_convert_UInt32x3)->returnTypeSymbol = &Bool8x3Type;

    // Splat with UInt32
    Bool8x3_splat_UInt32_arg0.name = "_arg0"_c;
    Bool8x3_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Bool8x3_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Bool8x3_splat_UInt32.name = "b8x3"_c;
    Bool8x3_splat_UInt32.returnType = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_splat_UInt32)->returnTypeSymbol = &Bool8x3Type;

    // Conversion from Int32x3
    Bool8x3_convert_Int32x3_arg0.name = "_arg0"_c;
    Bool8x3_convert_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Bool8x3_convert_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Bool8x3_convert_Int32x3.name = "b8x3"_c;
    Bool8x3_convert_Int32x3.returnType = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_convert_Int32x3)->returnTypeSymbol = &Bool8x3Type;

    // Splat with Int32
    Bool8x3_splat_Int32_arg0.name = "_arg0"_c;
    Bool8x3_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Bool8x3_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Bool8x3_splat_Int32.name = "b8x3"_c;
    Bool8x3_splat_Int32.returnType = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_splat_Int32)->returnTypeSymbol = &Bool8x3Type;

    // Conversion from Bool8x3
    Bool8x3_convert_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_convert_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_convert_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_convert_Bool8x3.name = "b8x3"_c;
    Bool8x3_convert_Bool8x3.returnType = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_convert_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // Splat with Bool8
    Bool8x3_splat_Bool8_arg0.name = "_arg0"_c;
    Bool8x3_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8x3_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8x3_splat_Bool8.name = "b8x3"_c;
    Bool8x3_splat_Bool8.returnType = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_splat_Bool8)->returnTypeSymbol = &Bool8x3Type;

    // Conversion from Float16x3
    Bool8x3_convert_Float16x3_arg0.name = "_arg0"_c;
    Bool8x3_convert_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Bool8x3_convert_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Bool8x3_convert_Float16x3.name = "b8x3"_c;
    Bool8x3_convert_Float16x3.returnType = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_convert_Float16x3)->returnTypeSymbol = &Bool8x3Type;

    // Splat with Float16
    Bool8x3_splat_Float16_arg0.name = "_arg0"_c;
    Bool8x3_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Bool8x3_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Bool8x3_splat_Float16.name = "b8x3"_c;
    Bool8x3_splat_Float16.returnType = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_splat_Float16)->returnTypeSymbol = &Bool8x3Type;

    // Conversion from UInt16x3
    Bool8x3_convert_UInt16x3_arg0.name = "_arg0"_c;
    Bool8x3_convert_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&Bool8x3_convert_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Bool8x3_convert_UInt16x3.name = "b8x3"_c;
    Bool8x3_convert_UInt16x3.returnType = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_convert_UInt16x3)->returnTypeSymbol = &Bool8x3Type;

    // Splat with UInt16
    Bool8x3_splat_UInt16_arg0.name = "_arg0"_c;
    Bool8x3_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Bool8x3_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Bool8x3_splat_UInt16.name = "b8x3"_c;
    Bool8x3_splat_UInt16.returnType = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_splat_UInt16)->returnTypeSymbol = &Bool8x3Type;

    // Conversion from Int16x3
    Bool8x3_convert_Int16x3_arg0.name = "_arg0"_c;
    Bool8x3_convert_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Bool8x3_convert_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Bool8x3_convert_Int16x3.name = "b8x3"_c;
    Bool8x3_convert_Int16x3.returnType = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_convert_Int16x3)->returnTypeSymbol = &Bool8x3Type;

    // Splat with Int16
    Bool8x3_splat_Int16_arg0.name = "_arg0"_c;
    Bool8x3_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Bool8x3_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Bool8x3_splat_Int16.name = "b8x3"_c;
    Bool8x3_splat_Int16.returnType = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_splat_Int16)->returnTypeSymbol = &Bool8x3Type;

    // Construct with Bool8, Bool8, Bool8
    Bool8x3_ctor0_arg0.name = "_arg0"_c;
    Bool8x3_ctor0_arg0.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x3_ctor0_arg0)->typeSymbol = &Bool8Type;
    Bool8x3_ctor0_arg1.name = "_arg1"_c;
    Bool8x3_ctor0_arg1.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x3_ctor0_arg1)->typeSymbol = &Bool8Type;
    Bool8x3_ctor0_arg2.name = "_arg2"_c;
    Bool8x3_ctor0_arg2.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x3_ctor0_arg2)->typeSymbol = &Bool8Type;
    Bool8x3_ctor0_Bool8_Bool8_Bool8.name = "0"_c;
    Bool8x3_ctor0_Bool8_Bool8_Bool8.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_ctor0_Bool8_Bool8_Bool8)->returnTypeSymbol = &Bool8x3Type;

    // Construct with Bool8x2, Bool8
    Bool8x3_ctor1_arg0.name = "_arg0"_c;
    Bool8x3_ctor1_arg0.type = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x3_ctor1_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x3_ctor1_arg1.name = "_arg1"_c;
    Bool8x3_ctor1_arg1.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x3_ctor1_arg1)->typeSymbol = &Bool8Type;
    Bool8x3_ctor1_Bool8x2_Bool8.name = "1"_c;
    Bool8x3_ctor1_Bool8x2_Bool8.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_ctor1_Bool8x2_Bool8)->returnTypeSymbol = &Bool8x3Type;

    // Construct with Bool8, Bool8x2
    Bool8x3_ctor2_arg0.name = "_arg0"_c;
    Bool8x3_ctor2_arg0.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x3_ctor2_arg0)->typeSymbol = &Bool8Type;
    Bool8x3_ctor2_arg1.name = "_arg1"_c;
    Bool8x3_ctor2_arg1.type = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x3_ctor2_arg1)->typeSymbol = &Bool8x2Type;
    Bool8x3_ctor2_Bool8_Bool8x2.name = "2"_c;
    Bool8x3_ctor2_Bool8_Bool8x2.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_ctor2_Bool8_Bool8x2)->returnTypeSymbol = &Bool8x3Type;

    // operator[](i32)
    Bool8x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Bool8x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Bool8x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Bool8x3_operator_index_Int32.name = "operator[]"_c;
    Bool8x3_operator_index_Int32.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8x3_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    // operator[](u32)
    Bool8x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Bool8x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Bool8x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Bool8x3_operator_index_UInt32.name = "operator[]"_c;
    Bool8x3_operator_index_UInt32.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8x3_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    // operator[](i16)
    Bool8x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Bool8x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Bool8x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Bool8x3_operator_index_Int16.name = "operator[]"_c;
    Bool8x3_operator_index_Int16.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8x3_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    // operator[](u16)
    Bool8x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Bool8x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Bool8x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Bool8x3_operator_index_UInt16.name = "operator[]"_c;
    Bool8x3_operator_index_UInt16.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8x3_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    // operator+(b8x3)
    Bool8x3_operator_add_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_add_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_add_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_operator_add_Bool8x3.name = "operator+"_c;
    Bool8x3_operator_add_Bool8x3.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_add_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // operator-(b8x3)
    Bool8x3_operator_sub_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_sub_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_sub_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_operator_sub_Bool8x3.name = "operator-"_c;
    Bool8x3_operator_sub_Bool8x3.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_sub_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // operator*(b8x3)
    Bool8x3_operator_mul_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_mul_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_mul_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_operator_mul_Bool8x3.name = "operator*"_c;
    Bool8x3_operator_mul_Bool8x3.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_mul_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // operator/(b8x3)
    Bool8x3_operator_div_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_div_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_div_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_operator_div_Bool8x3.name = "operator/"_c;
    Bool8x3_operator_div_Bool8x3.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_div_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // operator%(b8x3)
    Bool8x3_operator_mod_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_mod_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_mod_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_operator_mod_Bool8x3.name = "operator%"_c;
    Bool8x3_operator_mod_Bool8x3.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_mod_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // operator+=(b8x3)
    Bool8x3_operator_addasg_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_addasg_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_addasg_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_operator_addasg_Bool8x3.name = "operator+="_c;
    Bool8x3_operator_addasg_Bool8x3.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_addasg_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // operator-=(b8x3)
    Bool8x3_operator_subasg_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_subasg_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_subasg_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_operator_subasg_Bool8x3.name = "operator-="_c;
    Bool8x3_operator_subasg_Bool8x3.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_subasg_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // operator*=(b8x3)
    Bool8x3_operator_mulasg_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_mulasg_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_mulasg_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_operator_mulasg_Bool8x3.name = "operator*="_c;
    Bool8x3_operator_mulasg_Bool8x3.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_mulasg_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // operator/=(b8x3)
    Bool8x3_operator_divasg_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_divasg_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_divasg_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_operator_divasg_Bool8x3.name = "operator/="_c;
    Bool8x3_operator_divasg_Bool8x3.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_divasg_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // operator<(b8x3)
    Bool8x3_operator_lt_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_lt_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_lt_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_operator_lt_Bool8x3.name = "operator<"_c;
    Bool8x3_operator_lt_Bool8x3.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_lt_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // operator<=(b8x3)
    Bool8x3_operator_lte_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_lte_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_lte_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_operator_lte_Bool8x3.name = "operator<="_c;
    Bool8x3_operator_lte_Bool8x3.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_lte_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // operator>(b8x3)
    Bool8x3_operator_gt_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_gt_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_gt_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_operator_gt_Bool8x3.name = "operator>"_c;
    Bool8x3_operator_gt_Bool8x3.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_gt_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // operator>=(b8x3)
    Bool8x3_operator_gte_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_gte_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_gte_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_operator_gte_Bool8x3.name = "operator>="_c;
    Bool8x3_operator_gte_Bool8x3.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_gte_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // operator==(b8x3)
    Bool8x3_operator_eq_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_eq_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_eq_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_operator_eq_Bool8x3.name = "operator=="_c;
    Bool8x3_operator_eq_Bool8x3.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_eq_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // operator!=(b8x3)
    Bool8x3_operator_neq_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_neq_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_neq_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x3_operator_neq_Bool8x3.name = "operator!="_c;
    Bool8x3_operator_neq_Bool8x3.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_neq_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    // operator*(f32)
    Bool8x3_operator_scale_Bool8x3_Float32_arg0.name = "_arg0"_c;
    Bool8x3_operator_scale_Bool8x3_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Bool8x3_operator_scale_Bool8x3_Float32_arg0)->typeSymbol = &Float32Type;
    Bool8x3_operator_scale_Bool8x3_Float32.name = "operator*"_c;
    Bool8x3_operator_scale_Bool8x3_Float32.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_scale_Bool8x3_Float32)->returnTypeSymbol = &Bool8x3Type;

    // operator*(f16)
    Bool8x3_operator_scale_Bool8x3_Float16_arg0.name = "_arg0"_c;
    Bool8x3_operator_scale_Bool8x3_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Bool8x3_operator_scale_Bool8x3_Float16_arg0)->typeSymbol = &Float16Type;
    Bool8x3_operator_scale_Bool8x3_Float16.name = "operator*"_c;
    Bool8x3_operator_scale_Bool8x3_Float16.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_scale_Bool8x3_Float16)->returnTypeSymbol = &Bool8x3Type;

    // operator*(u32)
    Bool8x3_operator_scale_Bool8x3_UInt32_arg0.name = "_arg0"_c;
    Bool8x3_operator_scale_Bool8x3_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Bool8x3_operator_scale_Bool8x3_UInt32_arg0)->typeSymbol = &UInt32Type;
    Bool8x3_operator_scale_Bool8x3_UInt32.name = "operator*"_c;
    Bool8x3_operator_scale_Bool8x3_UInt32.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_scale_Bool8x3_UInt32)->returnTypeSymbol = &Bool8x3Type;

    // operator*(u16)
    Bool8x3_operator_scale_Bool8x3_UInt16_arg0.name = "_arg0"_c;
    Bool8x3_operator_scale_Bool8x3_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Bool8x3_operator_scale_Bool8x3_UInt16_arg0)->typeSymbol = &UInt16Type;
    Bool8x3_operator_scale_Bool8x3_UInt16.name = "operator*"_c;
    Bool8x3_operator_scale_Bool8x3_UInt16.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_scale_Bool8x3_UInt16)->returnTypeSymbol = &Bool8x3Type;

    // operator*(i32)
    Bool8x3_operator_scale_Bool8x3_Int32_arg0.name = "_arg0"_c;
    Bool8x3_operator_scale_Bool8x3_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Bool8x3_operator_scale_Bool8x3_Int32_arg0)->typeSymbol = &Int32Type;
    Bool8x3_operator_scale_Bool8x3_Int32.name = "operator*"_c;
    Bool8x3_operator_scale_Bool8x3_Int32.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_scale_Bool8x3_Int32)->returnTypeSymbol = &Bool8x3Type;

    // operator*(i16)
    Bool8x3_operator_scale_Bool8x3_Int16_arg0.name = "_arg0"_c;
    Bool8x3_operator_scale_Bool8x3_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Bool8x3_operator_scale_Bool8x3_Int16_arg0)->typeSymbol = &Int16Type;
    Bool8x3_operator_scale_Bool8x3_Int16.name = "operator*"_c;
    Bool8x3_operator_scale_Bool8x3_Int16.returnType = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Bool8x3_operator_scale_Bool8x3_Int16)->returnTypeSymbol = &Bool8x3Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "b8x3"_c, &Bool8x3_convert_Float32x3 },
        std::pair{ "b8x3(f32x3)"_c, &Bool8x3_convert_Float32x3 },
        std::pair{ "b8x3"_c, &Bool8x3_splat_Float32 },
        std::pair{ "b8x3(f32)"_c, &Bool8x3_splat_Float32 },
        std::pair{ "b8x3"_c, &Bool8x3_convert_UInt32x3 },
        std::pair{ "b8x3(u32x3)"_c, &Bool8x3_convert_UInt32x3 },
        std::pair{ "b8x3"_c, &Bool8x3_splat_UInt32 },
        std::pair{ "b8x3(u32)"_c, &Bool8x3_splat_UInt32 },
        std::pair{ "b8x3"_c, &Bool8x3_convert_Int32x3 },
        std::pair{ "b8x3(i32x3)"_c, &Bool8x3_convert_Int32x3 },
        std::pair{ "b8x3"_c, &Bool8x3_splat_Int32 },
        std::pair{ "b8x3(i32)"_c, &Bool8x3_splat_Int32 },
        std::pair{ "b8x3"_c, &Bool8x3_convert_Bool8x3 },
        std::pair{ "b8x3(b8x3)"_c, &Bool8x3_convert_Bool8x3 },
        std::pair{ "b8x3"_c, &Bool8x3_splat_Bool8 },
        std::pair{ "b8x3(b8)"_c, &Bool8x3_splat_Bool8 },
        std::pair{ "b8x3"_c, &Bool8x3_convert_Float16x3 },
        std::pair{ "b8x3(f16x3)"_c, &Bool8x3_convert_Float16x3 },
        std::pair{ "b8x3"_c, &Bool8x3_splat_Float16 },
        std::pair{ "b8x3(f16)"_c, &Bool8x3_splat_Float16 },
        std::pair{ "b8x3"_c, &Bool8x3_convert_UInt16x3 },
        std::pair{ "b8x3(u16x3)"_c, &Bool8x3_convert_UInt16x3 },
        std::pair{ "b8x3"_c, &Bool8x3_splat_UInt16 },
        std::pair{ "b8x3(u16)"_c, &Bool8x3_splat_UInt16 },
        std::pair{ "b8x3"_c, &Bool8x3_convert_Int16x3 },
        std::pair{ "b8x3(i16x3)"_c, &Bool8x3_convert_Int16x3 },
        std::pair{ "b8x3"_c, &Bool8x3_splat_Int16 },
        std::pair{ "b8x3(i16)"_c, &Bool8x3_splat_Int16 },
        std::pair{ "b8x3"_c, &Bool8x3_ctor0_Bool8_Bool8_Bool8},
        std::pair{ "b8x3(b8,b8,b8)"_c, &Bool8x3_ctor0_Bool8_Bool8_Bool8},
        std::pair{ "b8x3"_c, &Bool8x3_ctor1_Bool8x2_Bool8},
        std::pair{ "b8x3(b8x2,b8)"_c, &Bool8x3_ctor1_Bool8x2_Bool8},
        std::pair{ "b8x3"_c, &Bool8x3_ctor2_Bool8_Bool8x2},
        std::pair{ "b8x3(b8,b8x2)"_c, &Bool8x3_ctor2_Bool8_Bool8x2},
        std::pair{ "operator[](i32)"_c, &Bool8x3_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Bool8x3_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Bool8x3_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Bool8x3_operator_index_UInt16},
        std::pair{ "operator+(b8x3)"_c, &Bool8x3_operator_add_Bool8x3},
        std::pair{ "operator-(b8x3)"_c, &Bool8x3_operator_sub_Bool8x3},
        std::pair{ "operator*(b8x3)"_c, &Bool8x3_operator_mul_Bool8x3},
        std::pair{ "operator/(b8x3)"_c, &Bool8x3_operator_div_Bool8x3},
        std::pair{ "operator%(b8x3)"_c, &Bool8x3_operator_mod_Bool8x3},
        std::pair{ "operator+=(b8x3)"_c, &Bool8x3_operator_addasg_Bool8x3},
        std::pair{ "operator-=(b8x3)"_c, &Bool8x3_operator_subasg_Bool8x3},
        std::pair{ "operator*=(b8x3)"_c, &Bool8x3_operator_mulasg_Bool8x3},
        std::pair{ "operator/=(b8x3)"_c, &Bool8x3_operator_divasg_Bool8x3},
        std::pair{ "operator<(b8x3)"_c, &Bool8x3_operator_lt_Bool8x3},
        std::pair{ "operator<=(b8x3)"_c, &Bool8x3_operator_lte_Bool8x3},
        std::pair{ "operator>(b8x3)"_c, &Bool8x3_operator_gt_Bool8x3},
        std::pair{ "operator>=(b8x3)"_c, &Bool8x3_operator_gte_Bool8x3},
        std::pair{ "operator==(b8x3)"_c, &Bool8x3_operator_eq_Bool8x3},
        std::pair{ "operator!=(b8x3)"_c, &Bool8x3_operator_neq_Bool8x3},
        std::pair{ "operator*(f32)"_c, &Bool8x3_operator_scale_Bool8x3_Float32},
        std::pair{ "operator*(f16)"_c, &Bool8x3_operator_scale_Bool8x3_Float16},
        std::pair{ "operator*(u32)"_c, &Bool8x3_operator_scale_Bool8x3_UInt32},
        std::pair{ "operator*(u16)"_c, &Bool8x3_operator_scale_Bool8x3_UInt16},
        std::pair{ "operator*(i32)"_c, &Bool8x3_operator_scale_Bool8x3_Int32},
        std::pair{ "operator*(i16)"_c, &Bool8x3_operator_scale_Bool8x3_Int16}
    }
    };   
}

Bool8x4::Bool8x4()
{
    this->name = "b8";
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    // Conversion from Float32x4
    Bool8x4_convert_Float32x4_arg0.name = "_arg0"_c;
    Bool8x4_convert_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Bool8x4_convert_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Bool8x4_convert_Float32x4.name = "b8x4"_c;
    Bool8x4_convert_Float32x4.returnType = Type::FullType { Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_convert_Float32x4)->returnTypeSymbol = &Bool8x4Type;

    // Splat with Float32
    Bool8x4_splat_Float32_arg0.name = "_arg0"_c;
    Bool8x4_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Bool8x4_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Bool8x4_splat_Float32.name = "b8x4"_c;
    Bool8x4_splat_Float32.returnType = Type::FullType { Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_splat_Float32)->returnTypeSymbol = &Bool8x4Type;

    // Conversion from UInt32x4
    Bool8x4_convert_UInt32x4_arg0.name = "_arg0"_c;
    Bool8x4_convert_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&Bool8x4_convert_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Bool8x4_convert_UInt32x4.name = "b8x4"_c;
    Bool8x4_convert_UInt32x4.returnType = Type::FullType { Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_convert_UInt32x4)->returnTypeSymbol = &Bool8x4Type;

    // Splat with UInt32
    Bool8x4_splat_UInt32_arg0.name = "_arg0"_c;
    Bool8x4_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Bool8x4_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Bool8x4_splat_UInt32.name = "b8x4"_c;
    Bool8x4_splat_UInt32.returnType = Type::FullType { Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_splat_UInt32)->returnTypeSymbol = &Bool8x4Type;

    // Conversion from Int32x4
    Bool8x4_convert_Int32x4_arg0.name = "_arg0"_c;
    Bool8x4_convert_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Bool8x4_convert_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Bool8x4_convert_Int32x4.name = "b8x4"_c;
    Bool8x4_convert_Int32x4.returnType = Type::FullType { Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_convert_Int32x4)->returnTypeSymbol = &Bool8x4Type;

    // Splat with Int32
    Bool8x4_splat_Int32_arg0.name = "_arg0"_c;
    Bool8x4_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Bool8x4_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Bool8x4_splat_Int32.name = "b8x4"_c;
    Bool8x4_splat_Int32.returnType = Type::FullType { Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_splat_Int32)->returnTypeSymbol = &Bool8x4Type;

    // Conversion from Bool8x4
    Bool8x4_convert_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_convert_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_convert_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_convert_Bool8x4.name = "b8x4"_c;
    Bool8x4_convert_Bool8x4.returnType = Type::FullType { Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_convert_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // Splat with Bool8
    Bool8x4_splat_Bool8_arg0.name = "_arg0"_c;
    Bool8x4_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8x4_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    Bool8x4_splat_Bool8.name = "b8x4"_c;
    Bool8x4_splat_Bool8.returnType = Type::FullType { Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_splat_Bool8)->returnTypeSymbol = &Bool8x4Type;

    // Conversion from Float16x4
    Bool8x4_convert_Float16x4_arg0.name = "_arg0"_c;
    Bool8x4_convert_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Bool8x4_convert_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Bool8x4_convert_Float16x4.name = "b8x4"_c;
    Bool8x4_convert_Float16x4.returnType = Type::FullType { Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_convert_Float16x4)->returnTypeSymbol = &Bool8x4Type;

    // Splat with Float16
    Bool8x4_splat_Float16_arg0.name = "_arg0"_c;
    Bool8x4_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Bool8x4_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Bool8x4_splat_Float16.name = "b8x4"_c;
    Bool8x4_splat_Float16.returnType = Type::FullType { Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_splat_Float16)->returnTypeSymbol = &Bool8x4Type;

    // Conversion from UInt16x4
    Bool8x4_convert_UInt16x4_arg0.name = "_arg0"_c;
    Bool8x4_convert_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&Bool8x4_convert_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Bool8x4_convert_UInt16x4.name = "b8x4"_c;
    Bool8x4_convert_UInt16x4.returnType = Type::FullType { Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_convert_UInt16x4)->returnTypeSymbol = &Bool8x4Type;

    // Splat with UInt16
    Bool8x4_splat_UInt16_arg0.name = "_arg0"_c;
    Bool8x4_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Bool8x4_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Bool8x4_splat_UInt16.name = "b8x4"_c;
    Bool8x4_splat_UInt16.returnType = Type::FullType { Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_splat_UInt16)->returnTypeSymbol = &Bool8x4Type;

    // Conversion from Int16x4
    Bool8x4_convert_Int16x4_arg0.name = "_arg0"_c;
    Bool8x4_convert_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Bool8x4_convert_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Bool8x4_convert_Int16x4.name = "b8x4"_c;
    Bool8x4_convert_Int16x4.returnType = Type::FullType { Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_convert_Int16x4)->returnTypeSymbol = &Bool8x4Type;

    // Splat with Int16
    Bool8x4_splat_Int16_arg0.name = "_arg0"_c;
    Bool8x4_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Bool8x4_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Bool8x4_splat_Int16.name = "b8x4"_c;
    Bool8x4_splat_Int16.returnType = Type::FullType { Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_splat_Int16)->returnTypeSymbol = &Bool8x4Type;

    // Construct with Bool8, Bool8, Bool8, Bool8
    Bool8x4_ctor0_arg0.name = "_arg0"_c;
    Bool8x4_ctor0_arg0.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x4_ctor0_arg0)->typeSymbol = &Bool8Type;
    Bool8x4_ctor0_arg1.name = "_arg1"_c;
    Bool8x4_ctor0_arg1.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x4_ctor0_arg1)->typeSymbol = &Bool8Type;
    Bool8x4_ctor0_arg2.name = "_arg2"_c;
    Bool8x4_ctor0_arg2.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x4_ctor0_arg2)->typeSymbol = &Bool8Type;
    Bool8x4_ctor0_arg3.name = "_arg3"_c;
    Bool8x4_ctor0_arg3.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x4_ctor0_arg3)->typeSymbol = &Bool8Type;
    Bool8x4_ctor0_Bool8_Bool8_Bool8_Bool8.name = "0"_c;
    Bool8x4_ctor0_Bool8_Bool8_Bool8_Bool8.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_ctor0_Bool8_Bool8_Bool8_Bool8)->returnTypeSymbol = &Bool8x4Type;

    // Construct with Bool8x2, Bool8, Bool8
    Bool8x4_ctor1_arg0.name = "_arg0"_c;
    Bool8x4_ctor1_arg0.type = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x4_ctor1_arg0)->typeSymbol = &Bool8x2Type;
    Bool8x4_ctor1_arg1.name = "_arg1"_c;
    Bool8x4_ctor1_arg1.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x4_ctor1_arg1)->typeSymbol = &Bool8Type;
    Bool8x4_ctor1_arg2.name = "_arg2"_c;
    Bool8x4_ctor1_arg2.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x4_ctor1_arg2)->typeSymbol = &Bool8Type;
    Bool8x4_ctor1_Bool8x2_Bool8_Bool8.name = "1"_c;
    Bool8x4_ctor1_Bool8x2_Bool8_Bool8.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_ctor1_Bool8x2_Bool8_Bool8)->returnTypeSymbol = &Bool8x4Type;

    // Construct with Bool8, Bool8x2, Bool8
    Bool8x4_ctor2_arg0.name = "_arg0"_c;
    Bool8x4_ctor2_arg0.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x4_ctor2_arg0)->typeSymbol = &Bool8Type;
    Bool8x4_ctor2_arg1.name = "_arg1"_c;
    Bool8x4_ctor2_arg1.type = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x4_ctor2_arg1)->typeSymbol = &Bool8x2Type;
    Bool8x4_ctor2_arg2.name = "_arg2"_c;
    Bool8x4_ctor2_arg2.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x4_ctor2_arg2)->typeSymbol = &Bool8Type;
    Bool8x4_ctor2_Bool8_Bool8x2_Bool8.name = "2"_c;
    Bool8x4_ctor2_Bool8_Bool8x2_Bool8.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_ctor2_Bool8_Bool8x2_Bool8)->returnTypeSymbol = &Bool8x4Type;

    // Construct with Bool8, Bool8, Bool8x2
    Bool8x4_ctor3_arg0.name = "_arg0"_c;
    Bool8x4_ctor3_arg0.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x4_ctor3_arg0)->typeSymbol = &Bool8Type;
    Bool8x4_ctor3_arg1.name = "_arg1"_c;
    Bool8x4_ctor3_arg1.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x4_ctor3_arg1)->typeSymbol = &Bool8Type;
    Bool8x4_ctor3_arg2.name = "_arg2"_c;
    Bool8x4_ctor3_arg2.type = Type::FullType { Bool8x2Type.name };
    Symbol::Resolved(&Bool8x4_ctor3_arg2)->typeSymbol = &Bool8x2Type;
    Bool8x4_ctor3_Bool8_Bool8_Bool8x2.name = "3"_c;
    Bool8x4_ctor3_Bool8_Bool8_Bool8x2.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_ctor3_Bool8_Bool8_Bool8x2)->returnTypeSymbol = &Bool8x4Type;

    // Construct with Bool8x3, Bool8
    Bool8x4_ctor4_arg0.name = "_arg0"_c;
    Bool8x4_ctor4_arg0.type = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x4_ctor4_arg0)->typeSymbol = &Bool8x3Type;
    Bool8x4_ctor4_arg1.name = "_arg1"_c;
    Bool8x4_ctor4_arg1.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x4_ctor4_arg1)->typeSymbol = &Bool8Type;
    Bool8x4_ctor4_Bool8x3_Bool8.name = "4"_c;
    Bool8x4_ctor4_Bool8x3_Bool8.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_ctor4_Bool8x3_Bool8)->returnTypeSymbol = &Bool8x4Type;

    // Construct with Bool8, Bool8x3
    Bool8x4_ctor5_arg0.name = "_arg0"_c;
    Bool8x4_ctor5_arg0.type = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&Bool8x4_ctor5_arg0)->typeSymbol = &Bool8Type;
    Bool8x4_ctor5_arg1.name = "_arg1"_c;
    Bool8x4_ctor5_arg1.type = Type::FullType { Bool8x3Type.name };
    Symbol::Resolved(&Bool8x4_ctor5_arg1)->typeSymbol = &Bool8x3Type;
    Bool8x4_ctor5_Bool8_Bool8x3.name = "5"_c;
    Bool8x4_ctor5_Bool8_Bool8x3.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_ctor5_Bool8_Bool8x3)->returnTypeSymbol = &Bool8x4Type;

    // operator[](i32)
    Bool8x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Bool8x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Bool8x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Bool8x4_operator_index_Int32.name = "operator[]"_c;
    Bool8x4_operator_index_Int32.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8x4_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    // operator[](u32)
    Bool8x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Bool8x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Bool8x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Bool8x4_operator_index_UInt32.name = "operator[]"_c;
    Bool8x4_operator_index_UInt32.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8x4_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    // operator[](i16)
    Bool8x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Bool8x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Bool8x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Bool8x4_operator_index_Int16.name = "operator[]"_c;
    Bool8x4_operator_index_Int16.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8x4_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    // operator[](u16)
    Bool8x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Bool8x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Bool8x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Bool8x4_operator_index_UInt16.name = "operator[]"_c;
    Bool8x4_operator_index_UInt16.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Bool8x4_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    // operator+(b8x4)
    Bool8x4_operator_add_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_add_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_add_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_operator_add_Bool8x4.name = "operator+"_c;
    Bool8x4_operator_add_Bool8x4.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_add_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // operator-(b8x4)
    Bool8x4_operator_sub_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_sub_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_sub_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_operator_sub_Bool8x4.name = "operator-"_c;
    Bool8x4_operator_sub_Bool8x4.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_sub_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // operator*(b8x4)
    Bool8x4_operator_mul_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_mul_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_mul_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_operator_mul_Bool8x4.name = "operator*"_c;
    Bool8x4_operator_mul_Bool8x4.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_mul_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // operator/(b8x4)
    Bool8x4_operator_div_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_div_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_div_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_operator_div_Bool8x4.name = "operator/"_c;
    Bool8x4_operator_div_Bool8x4.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_div_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // operator%(b8x4)
    Bool8x4_operator_mod_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_mod_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_mod_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_operator_mod_Bool8x4.name = "operator%"_c;
    Bool8x4_operator_mod_Bool8x4.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_mod_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // operator+=(b8x4)
    Bool8x4_operator_addasg_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_addasg_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_addasg_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_operator_addasg_Bool8x4.name = "operator+="_c;
    Bool8x4_operator_addasg_Bool8x4.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_addasg_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // operator-=(b8x4)
    Bool8x4_operator_subasg_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_subasg_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_subasg_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_operator_subasg_Bool8x4.name = "operator-="_c;
    Bool8x4_operator_subasg_Bool8x4.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_subasg_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // operator*=(b8x4)
    Bool8x4_operator_mulasg_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_mulasg_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_mulasg_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_operator_mulasg_Bool8x4.name = "operator*="_c;
    Bool8x4_operator_mulasg_Bool8x4.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_mulasg_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // operator/=(b8x4)
    Bool8x4_operator_divasg_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_divasg_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_divasg_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_operator_divasg_Bool8x4.name = "operator/="_c;
    Bool8x4_operator_divasg_Bool8x4.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_divasg_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // operator<(b8x4)
    Bool8x4_operator_lt_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_lt_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_lt_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_operator_lt_Bool8x4.name = "operator<"_c;
    Bool8x4_operator_lt_Bool8x4.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_lt_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // operator<=(b8x4)
    Bool8x4_operator_lte_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_lte_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_lte_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_operator_lte_Bool8x4.name = "operator<="_c;
    Bool8x4_operator_lte_Bool8x4.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_lte_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // operator>(b8x4)
    Bool8x4_operator_gt_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_gt_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_gt_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_operator_gt_Bool8x4.name = "operator>"_c;
    Bool8x4_operator_gt_Bool8x4.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_gt_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // operator>=(b8x4)
    Bool8x4_operator_gte_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_gte_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_gte_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_operator_gte_Bool8x4.name = "operator>="_c;
    Bool8x4_operator_gte_Bool8x4.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_gte_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // operator==(b8x4)
    Bool8x4_operator_eq_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_eq_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_eq_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_operator_eq_Bool8x4.name = "operator=="_c;
    Bool8x4_operator_eq_Bool8x4.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_eq_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // operator!=(b8x4)
    Bool8x4_operator_neq_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_neq_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_neq_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Bool8x4_operator_neq_Bool8x4.name = "operator!="_c;
    Bool8x4_operator_neq_Bool8x4.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_neq_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    // operator*(f32)
    Bool8x4_operator_scale_Bool8x4_Float32_arg0.name = "_arg0"_c;
    Bool8x4_operator_scale_Bool8x4_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Bool8x4_operator_scale_Bool8x4_Float32_arg0)->typeSymbol = &Float32Type;
    Bool8x4_operator_scale_Bool8x4_Float32.name = "operator*"_c;
    Bool8x4_operator_scale_Bool8x4_Float32.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_scale_Bool8x4_Float32)->returnTypeSymbol = &Bool8x4Type;

    // operator*(f16)
    Bool8x4_operator_scale_Bool8x4_Float16_arg0.name = "_arg0"_c;
    Bool8x4_operator_scale_Bool8x4_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Bool8x4_operator_scale_Bool8x4_Float16_arg0)->typeSymbol = &Float16Type;
    Bool8x4_operator_scale_Bool8x4_Float16.name = "operator*"_c;
    Bool8x4_operator_scale_Bool8x4_Float16.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_scale_Bool8x4_Float16)->returnTypeSymbol = &Bool8x4Type;

    // operator*(u32)
    Bool8x4_operator_scale_Bool8x4_UInt32_arg0.name = "_arg0"_c;
    Bool8x4_operator_scale_Bool8x4_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Bool8x4_operator_scale_Bool8x4_UInt32_arg0)->typeSymbol = &UInt32Type;
    Bool8x4_operator_scale_Bool8x4_UInt32.name = "operator*"_c;
    Bool8x4_operator_scale_Bool8x4_UInt32.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_scale_Bool8x4_UInt32)->returnTypeSymbol = &Bool8x4Type;

    // operator*(u16)
    Bool8x4_operator_scale_Bool8x4_UInt16_arg0.name = "_arg0"_c;
    Bool8x4_operator_scale_Bool8x4_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Bool8x4_operator_scale_Bool8x4_UInt16_arg0)->typeSymbol = &UInt16Type;
    Bool8x4_operator_scale_Bool8x4_UInt16.name = "operator*"_c;
    Bool8x4_operator_scale_Bool8x4_UInt16.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_scale_Bool8x4_UInt16)->returnTypeSymbol = &Bool8x4Type;

    // operator*(i32)
    Bool8x4_operator_scale_Bool8x4_Int32_arg0.name = "_arg0"_c;
    Bool8x4_operator_scale_Bool8x4_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Bool8x4_operator_scale_Bool8x4_Int32_arg0)->typeSymbol = &Int32Type;
    Bool8x4_operator_scale_Bool8x4_Int32.name = "operator*"_c;
    Bool8x4_operator_scale_Bool8x4_Int32.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_scale_Bool8x4_Int32)->returnTypeSymbol = &Bool8x4Type;

    // operator*(i16)
    Bool8x4_operator_scale_Bool8x4_Int16_arg0.name = "_arg0"_c;
    Bool8x4_operator_scale_Bool8x4_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Bool8x4_operator_scale_Bool8x4_Int16_arg0)->typeSymbol = &Int16Type;
    Bool8x4_operator_scale_Bool8x4_Int16.name = "operator*"_c;
    Bool8x4_operator_scale_Bool8x4_Int16.returnType = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Bool8x4_operator_scale_Bool8x4_Int16)->returnTypeSymbol = &Bool8x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "b8x4"_c, &Bool8x4_convert_Float32x4 },
        std::pair{ "b8x4(f32x4)"_c, &Bool8x4_convert_Float32x4 },
        std::pair{ "b8x4"_c, &Bool8x4_splat_Float32 },
        std::pair{ "b8x4(f32)"_c, &Bool8x4_splat_Float32 },
        std::pair{ "b8x4"_c, &Bool8x4_convert_UInt32x4 },
        std::pair{ "b8x4(u32x4)"_c, &Bool8x4_convert_UInt32x4 },
        std::pair{ "b8x4"_c, &Bool8x4_splat_UInt32 },
        std::pair{ "b8x4(u32)"_c, &Bool8x4_splat_UInt32 },
        std::pair{ "b8x4"_c, &Bool8x4_convert_Int32x4 },
        std::pair{ "b8x4(i32x4)"_c, &Bool8x4_convert_Int32x4 },
        std::pair{ "b8x4"_c, &Bool8x4_splat_Int32 },
        std::pair{ "b8x4(i32)"_c, &Bool8x4_splat_Int32 },
        std::pair{ "b8x4"_c, &Bool8x4_convert_Bool8x4 },
        std::pair{ "b8x4(b8x4)"_c, &Bool8x4_convert_Bool8x4 },
        std::pair{ "b8x4"_c, &Bool8x4_splat_Bool8 },
        std::pair{ "b8x4(b8)"_c, &Bool8x4_splat_Bool8 },
        std::pair{ "b8x4"_c, &Bool8x4_convert_Float16x4 },
        std::pair{ "b8x4(f16x4)"_c, &Bool8x4_convert_Float16x4 },
        std::pair{ "b8x4"_c, &Bool8x4_splat_Float16 },
        std::pair{ "b8x4(f16)"_c, &Bool8x4_splat_Float16 },
        std::pair{ "b8x4"_c, &Bool8x4_convert_UInt16x4 },
        std::pair{ "b8x4(u16x4)"_c, &Bool8x4_convert_UInt16x4 },
        std::pair{ "b8x4"_c, &Bool8x4_splat_UInt16 },
        std::pair{ "b8x4(u16)"_c, &Bool8x4_splat_UInt16 },
        std::pair{ "b8x4"_c, &Bool8x4_convert_Int16x4 },
        std::pair{ "b8x4(i16x4)"_c, &Bool8x4_convert_Int16x4 },
        std::pair{ "b8x4"_c, &Bool8x4_splat_Int16 },
        std::pair{ "b8x4(i16)"_c, &Bool8x4_splat_Int16 },
        std::pair{ "b8x4"_c, &Bool8x4_ctor0_Bool8_Bool8_Bool8_Bool8},
        std::pair{ "b8x4(b8,b8,b8,b8)"_c, &Bool8x4_ctor0_Bool8_Bool8_Bool8_Bool8},
        std::pair{ "b8x4"_c, &Bool8x4_ctor1_Bool8x2_Bool8_Bool8},
        std::pair{ "b8x4(b8x2,b8,b8)"_c, &Bool8x4_ctor1_Bool8x2_Bool8_Bool8},
        std::pair{ "b8x4"_c, &Bool8x4_ctor2_Bool8_Bool8x2_Bool8},
        std::pair{ "b8x4(b8,b8x2,b8)"_c, &Bool8x4_ctor2_Bool8_Bool8x2_Bool8},
        std::pair{ "b8x4"_c, &Bool8x4_ctor3_Bool8_Bool8_Bool8x2},
        std::pair{ "b8x4(b8,b8,b8x2)"_c, &Bool8x4_ctor3_Bool8_Bool8_Bool8x2},
        std::pair{ "b8x4"_c, &Bool8x4_ctor4_Bool8x3_Bool8},
        std::pair{ "b8x4(b8x3,b8)"_c, &Bool8x4_ctor4_Bool8x3_Bool8},
        std::pair{ "b8x4"_c, &Bool8x4_ctor5_Bool8_Bool8x3},
        std::pair{ "b8x4(b8,b8x3)"_c, &Bool8x4_ctor5_Bool8_Bool8x3},
        std::pair{ "operator[](i32)"_c, &Bool8x4_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Bool8x4_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Bool8x4_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Bool8x4_operator_index_UInt16},
        std::pair{ "operator+(b8x4)"_c, &Bool8x4_operator_add_Bool8x4},
        std::pair{ "operator-(b8x4)"_c, &Bool8x4_operator_sub_Bool8x4},
        std::pair{ "operator*(b8x4)"_c, &Bool8x4_operator_mul_Bool8x4},
        std::pair{ "operator/(b8x4)"_c, &Bool8x4_operator_div_Bool8x4},
        std::pair{ "operator%(b8x4)"_c, &Bool8x4_operator_mod_Bool8x4},
        std::pair{ "operator+=(b8x4)"_c, &Bool8x4_operator_addasg_Bool8x4},
        std::pair{ "operator-=(b8x4)"_c, &Bool8x4_operator_subasg_Bool8x4},
        std::pair{ "operator*=(b8x4)"_c, &Bool8x4_operator_mulasg_Bool8x4},
        std::pair{ "operator/=(b8x4)"_c, &Bool8x4_operator_divasg_Bool8x4},
        std::pair{ "operator<(b8x4)"_c, &Bool8x4_operator_lt_Bool8x4},
        std::pair{ "operator<=(b8x4)"_c, &Bool8x4_operator_lte_Bool8x4},
        std::pair{ "operator>(b8x4)"_c, &Bool8x4_operator_gt_Bool8x4},
        std::pair{ "operator>=(b8x4)"_c, &Bool8x4_operator_gte_Bool8x4},
        std::pair{ "operator==(b8x4)"_c, &Bool8x4_operator_eq_Bool8x4},
        std::pair{ "operator!=(b8x4)"_c, &Bool8x4_operator_neq_Bool8x4},
        std::pair{ "operator*(f32)"_c, &Bool8x4_operator_scale_Bool8x4_Float32},
        std::pair{ "operator*(f16)"_c, &Bool8x4_operator_scale_Bool8x4_Float16},
        std::pair{ "operator*(u32)"_c, &Bool8x4_operator_scale_Bool8x4_UInt32},
        std::pair{ "operator*(u16)"_c, &Bool8x4_operator_scale_Bool8x4_UInt16},
        std::pair{ "operator*(i32)"_c, &Bool8x4_operator_scale_Bool8x4_Int32},
        std::pair{ "operator*(i16)"_c, &Bool8x4_operator_scale_Bool8x4_Int16}
    }
    };   
}

Float16::Float16()
{
    this->name = "f16";
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    // Conversion from Float32
    Float16_convert_Float32_arg0.name = "_arg0"_c;
    Float16_convert_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16_convert_Float32_arg0)->typeSymbol = &Float32Type;
    Float16_convert_Float32.name = "f16"_c;
    Float16_convert_Float32.returnType = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16_convert_Float32)->returnTypeSymbol = &Float16Type;

    // Conversion from UInt32
    Float16_convert_UInt32_arg0.name = "_arg0"_c;
    Float16_convert_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16_convert_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16_convert_UInt32.name = "f16"_c;
    Float16_convert_UInt32.returnType = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16_convert_UInt32)->returnTypeSymbol = &Float16Type;

    // Conversion from Int32
    Float16_convert_Int32_arg0.name = "_arg0"_c;
    Float16_convert_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16_convert_Int32_arg0)->typeSymbol = &Int32Type;
    Float16_convert_Int32.name = "f16"_c;
    Float16_convert_Int32.returnType = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16_convert_Int32)->returnTypeSymbol = &Float16Type;

    // Conversion from Bool8
    Float16_convert_Bool8_arg0.name = "_arg0"_c;
    Float16_convert_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Float16_convert_Bool8_arg0)->typeSymbol = &Bool8Type;
    Float16_convert_Bool8.name = "f16"_c;
    Float16_convert_Bool8.returnType = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16_convert_Bool8)->returnTypeSymbol = &Float16Type;

    // Conversion from UInt16
    Float16_convert_UInt16_arg0.name = "_arg0"_c;
    Float16_convert_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16_convert_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16_convert_UInt16.name = "f16"_c;
    Float16_convert_UInt16.returnType = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16_convert_UInt16)->returnTypeSymbol = &Float16Type;

    // Conversion from Int16
    Float16_convert_Int16_arg0.name = "_arg0"_c;
    Float16_convert_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16_convert_Int16_arg0)->typeSymbol = &Int16Type;
    Float16_convert_Int16.name = "f16"_c;
    Float16_convert_Int16.returnType = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16_convert_Int16)->returnTypeSymbol = &Float16Type;

    // Construct with Float16
    Float16_ctor0_arg0.name = "_arg0"_c;
    Float16_ctor0_arg0.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16_ctor0_arg0)->typeSymbol = &Float16Type;
    Float16_ctor0_Float16.name = "0"_c;
    Float16_ctor0_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_ctor0_Float16)->returnTypeSymbol = &Float16Type;

    // operator[](i32)
    Float16_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float16_operator_index_Int32.name = "operator[]"_c;
    Float16_operator_index_Int32.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    // operator[](u32)
    Float16_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16_operator_index_UInt32.name = "operator[]"_c;
    Float16_operator_index_UInt32.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    // operator[](i16)
    Float16_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float16_operator_index_Int16.name = "operator[]"_c;
    Float16_operator_index_Int16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    // operator[](u16)
    Float16_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16_operator_index_UInt16.name = "operator[]"_c;
    Float16_operator_index_UInt16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    // operator+(f16)
    Float16_operator_add_Float16_arg0.name = "_arg0"_c;
    Float16_operator_add_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_add_Float16_arg0)->typeSymbol = &Float16Type;
    Float16_operator_add_Float16.name = "operator+"_c;
    Float16_operator_add_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_add_Float16)->returnTypeSymbol = &Float16Type;

    // operator-(f16)
    Float16_operator_sub_Float16_arg0.name = "_arg0"_c;
    Float16_operator_sub_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_sub_Float16_arg0)->typeSymbol = &Float16Type;
    Float16_operator_sub_Float16.name = "operator-"_c;
    Float16_operator_sub_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_sub_Float16)->returnTypeSymbol = &Float16Type;

    // operator*(f16)
    Float16_operator_mul_Float16_arg0.name = "_arg0"_c;
    Float16_operator_mul_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_mul_Float16_arg0)->typeSymbol = &Float16Type;
    Float16_operator_mul_Float16.name = "operator*"_c;
    Float16_operator_mul_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_mul_Float16)->returnTypeSymbol = &Float16Type;

    // operator/(f16)
    Float16_operator_div_Float16_arg0.name = "_arg0"_c;
    Float16_operator_div_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_div_Float16_arg0)->typeSymbol = &Float16Type;
    Float16_operator_div_Float16.name = "operator/"_c;
    Float16_operator_div_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_div_Float16)->returnTypeSymbol = &Float16Type;

    // operator%(f16)
    Float16_operator_mod_Float16_arg0.name = "_arg0"_c;
    Float16_operator_mod_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_mod_Float16_arg0)->typeSymbol = &Float16Type;
    Float16_operator_mod_Float16.name = "operator%"_c;
    Float16_operator_mod_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_mod_Float16)->returnTypeSymbol = &Float16Type;

    // operator+=(f16)
    Float16_operator_addasg_Float16_arg0.name = "_arg0"_c;
    Float16_operator_addasg_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_addasg_Float16_arg0)->typeSymbol = &Float16Type;
    Float16_operator_addasg_Float16.name = "operator+="_c;
    Float16_operator_addasg_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_addasg_Float16)->returnTypeSymbol = &Float16Type;

    // operator-=(f16)
    Float16_operator_subasg_Float16_arg0.name = "_arg0"_c;
    Float16_operator_subasg_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_subasg_Float16_arg0)->typeSymbol = &Float16Type;
    Float16_operator_subasg_Float16.name = "operator-="_c;
    Float16_operator_subasg_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_subasg_Float16)->returnTypeSymbol = &Float16Type;

    // operator*=(f16)
    Float16_operator_mulasg_Float16_arg0.name = "_arg0"_c;
    Float16_operator_mulasg_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_mulasg_Float16_arg0)->typeSymbol = &Float16Type;
    Float16_operator_mulasg_Float16.name = "operator*="_c;
    Float16_operator_mulasg_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_mulasg_Float16)->returnTypeSymbol = &Float16Type;

    // operator/=(f16)
    Float16_operator_divasg_Float16_arg0.name = "_arg0"_c;
    Float16_operator_divasg_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_divasg_Float16_arg0)->typeSymbol = &Float16Type;
    Float16_operator_divasg_Float16.name = "operator/="_c;
    Float16_operator_divasg_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_divasg_Float16)->returnTypeSymbol = &Float16Type;

    // operator<(f16)
    Float16_operator_lt_Float16_arg0.name = "_arg0"_c;
    Float16_operator_lt_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_lt_Float16_arg0)->typeSymbol = &Float16Type;
    Float16_operator_lt_Float16.name = "operator<"_c;
    Float16_operator_lt_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_lt_Float16)->returnTypeSymbol = &Float16Type;

    // operator<=(f16)
    Float16_operator_lte_Float16_arg0.name = "_arg0"_c;
    Float16_operator_lte_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_lte_Float16_arg0)->typeSymbol = &Float16Type;
    Float16_operator_lte_Float16.name = "operator<="_c;
    Float16_operator_lte_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_lte_Float16)->returnTypeSymbol = &Float16Type;

    // operator>(f16)
    Float16_operator_gt_Float16_arg0.name = "_arg0"_c;
    Float16_operator_gt_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_gt_Float16_arg0)->typeSymbol = &Float16Type;
    Float16_operator_gt_Float16.name = "operator>"_c;
    Float16_operator_gt_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_gt_Float16)->returnTypeSymbol = &Float16Type;

    // operator>=(f16)
    Float16_operator_gte_Float16_arg0.name = "_arg0"_c;
    Float16_operator_gte_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_gte_Float16_arg0)->typeSymbol = &Float16Type;
    Float16_operator_gte_Float16.name = "operator>="_c;
    Float16_operator_gte_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_gte_Float16)->returnTypeSymbol = &Float16Type;

    // operator==(f16)
    Float16_operator_eq_Float16_arg0.name = "_arg0"_c;
    Float16_operator_eq_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_eq_Float16_arg0)->typeSymbol = &Float16Type;
    Float16_operator_eq_Float16.name = "operator=="_c;
    Float16_operator_eq_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_eq_Float16)->returnTypeSymbol = &Float16Type;

    // operator!=(f16)
    Float16_operator_neq_Float16_arg0.name = "_arg0"_c;
    Float16_operator_neq_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_neq_Float16_arg0)->typeSymbol = &Float16Type;
    Float16_operator_neq_Float16.name = "operator!="_c;
    Float16_operator_neq_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16_operator_neq_Float16)->returnTypeSymbol = &Float16Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f16"_c, &Float16_convert_Float32 },
        std::pair{ "f16(f32)"_c, &Float16_convert_Float32 },
        std::pair{ "f16"_c, &Float16_convert_UInt32 },
        std::pair{ "f16(u32)"_c, &Float16_convert_UInt32 },
        std::pair{ "f16"_c, &Float16_convert_Int32 },
        std::pair{ "f16(i32)"_c, &Float16_convert_Int32 },
        std::pair{ "f16"_c, &Float16_convert_Bool8 },
        std::pair{ "f16(b8)"_c, &Float16_convert_Bool8 },
        std::pair{ "f16"_c, &Float16_convert_UInt16 },
        std::pair{ "f16(u16)"_c, &Float16_convert_UInt16 },
        std::pair{ "f16"_c, &Float16_convert_Int16 },
        std::pair{ "f16(i16)"_c, &Float16_convert_Int16 },
        std::pair{ "f16"_c, &Float16_ctor0_Float16},
        std::pair{ "f16(f16)"_c, &Float16_ctor0_Float16},
        std::pair{ "operator[](i32)"_c, &Float16_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float16_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float16_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float16_operator_index_UInt16},
        std::pair{ "operator+(f16)"_c, &Float16_operator_add_Float16},
        std::pair{ "operator-(f16)"_c, &Float16_operator_sub_Float16},
        std::pair{ "operator*(f16)"_c, &Float16_operator_mul_Float16},
        std::pair{ "operator/(f16)"_c, &Float16_operator_div_Float16},
        std::pair{ "operator%(f16)"_c, &Float16_operator_mod_Float16},
        std::pair{ "operator+=(f16)"_c, &Float16_operator_addasg_Float16},
        std::pair{ "operator-=(f16)"_c, &Float16_operator_subasg_Float16},
        std::pair{ "operator*=(f16)"_c, &Float16_operator_mulasg_Float16},
        std::pair{ "operator/=(f16)"_c, &Float16_operator_divasg_Float16},
        std::pair{ "operator<(f16)"_c, &Float16_operator_lt_Float16},
        std::pair{ "operator<=(f16)"_c, &Float16_operator_lte_Float16},
        std::pair{ "operator>(f16)"_c, &Float16_operator_gt_Float16},
        std::pair{ "operator>=(f16)"_c, &Float16_operator_gte_Float16},
        std::pair{ "operator==(f16)"_c, &Float16_operator_eq_Float16},
        std::pair{ "operator!=(f16)"_c, &Float16_operator_neq_Float16}
    }
    };   
}

Float16x2::Float16x2()
{
    this->name = "f16";
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    // Conversion from Float32x2
    Float16x2_convert_Float32x2_arg0.name = "_arg0"_c;
    Float16x2_convert_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float16x2_convert_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Float16x2_convert_Float32x2.name = "f16x2"_c;
    Float16x2_convert_Float32x2.returnType = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x2_convert_Float32x2)->returnTypeSymbol = &Float16x2Type;

    // Splat with Float32
    Float16x2_splat_Float32_arg0.name = "_arg0"_c;
    Float16x2_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16x2_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Float16x2_splat_Float32.name = "f16x2"_c;
    Float16x2_splat_Float32.returnType = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x2_splat_Float32)->returnTypeSymbol = &Float16x2Type;

    // Conversion from UInt32x2
    Float16x2_convert_UInt32x2_arg0.name = "_arg0"_c;
    Float16x2_convert_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&Float16x2_convert_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Float16x2_convert_UInt32x2.name = "f16x2"_c;
    Float16x2_convert_UInt32x2.returnType = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x2_convert_UInt32x2)->returnTypeSymbol = &Float16x2Type;

    // Splat with UInt32
    Float16x2_splat_UInt32_arg0.name = "_arg0"_c;
    Float16x2_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x2_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x2_splat_UInt32.name = "f16x2"_c;
    Float16x2_splat_UInt32.returnType = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x2_splat_UInt32)->returnTypeSymbol = &Float16x2Type;

    // Conversion from Int32x2
    Float16x2_convert_Int32x2_arg0.name = "_arg0"_c;
    Float16x2_convert_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Float16x2_convert_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Float16x2_convert_Int32x2.name = "f16x2"_c;
    Float16x2_convert_Int32x2.returnType = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x2_convert_Int32x2)->returnTypeSymbol = &Float16x2Type;

    // Splat with Int32
    Float16x2_splat_Int32_arg0.name = "_arg0"_c;
    Float16x2_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x2_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x2_splat_Int32.name = "f16x2"_c;
    Float16x2_splat_Int32.returnType = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x2_splat_Int32)->returnTypeSymbol = &Float16x2Type;

    // Conversion from Bool8x2
    Float16x2_convert_Bool8x2_arg0.name = "_arg0"_c;
    Float16x2_convert_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Float16x2_convert_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Float16x2_convert_Bool8x2.name = "f16x2"_c;
    Float16x2_convert_Bool8x2.returnType = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x2_convert_Bool8x2)->returnTypeSymbol = &Float16x2Type;

    // Splat with Bool8
    Float16x2_splat_Bool8_arg0.name = "_arg0"_c;
    Float16x2_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Float16x2_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    Float16x2_splat_Bool8.name = "f16x2"_c;
    Float16x2_splat_Bool8.returnType = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x2_splat_Bool8)->returnTypeSymbol = &Float16x2Type;

    // Conversion from Float16x2
    Float16x2_convert_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_convert_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_convert_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_convert_Float16x2.name = "f16x2"_c;
    Float16x2_convert_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x2_convert_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // Splat with Float16
    Float16x2_splat_Float16_arg0.name = "_arg0"_c;
    Float16x2_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x2_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Float16x2_splat_Float16.name = "f16x2"_c;
    Float16x2_splat_Float16.returnType = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x2_splat_Float16)->returnTypeSymbol = &Float16x2Type;

    // Conversion from UInt16x2
    Float16x2_convert_UInt16x2_arg0.name = "_arg0"_c;
    Float16x2_convert_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&Float16x2_convert_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Float16x2_convert_UInt16x2.name = "f16x2"_c;
    Float16x2_convert_UInt16x2.returnType = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x2_convert_UInt16x2)->returnTypeSymbol = &Float16x2Type;

    // Splat with UInt16
    Float16x2_splat_UInt16_arg0.name = "_arg0"_c;
    Float16x2_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x2_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x2_splat_UInt16.name = "f16x2"_c;
    Float16x2_splat_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x2_splat_UInt16)->returnTypeSymbol = &Float16x2Type;

    // Conversion from Int16x2
    Float16x2_convert_Int16x2_arg0.name = "_arg0"_c;
    Float16x2_convert_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Float16x2_convert_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Float16x2_convert_Int16x2.name = "f16x2"_c;
    Float16x2_convert_Int16x2.returnType = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x2_convert_Int16x2)->returnTypeSymbol = &Float16x2Type;

    // Splat with Int16
    Float16x2_splat_Int16_arg0.name = "_arg0"_c;
    Float16x2_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x2_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x2_splat_Int16.name = "f16x2"_c;
    Float16x2_splat_Int16.returnType = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x2_splat_Int16)->returnTypeSymbol = &Float16x2Type;

    // Construct with Float16, Float16
    Float16x2_ctor0_arg0.name = "_arg0"_c;
    Float16x2_ctor0_arg0.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x2_ctor0_arg0)->typeSymbol = &Float16Type;
    Float16x2_ctor0_arg1.name = "_arg1"_c;
    Float16x2_ctor0_arg1.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x2_ctor0_arg1)->typeSymbol = &Float16Type;
    Float16x2_ctor0_Float16_Float16.name = "0"_c;
    Float16x2_ctor0_Float16_Float16.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_ctor0_Float16_Float16)->returnTypeSymbol = &Float16x2Type;

    // operator[](i32)
    Float16x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x2_operator_index_Int32.name = "operator[]"_c;
    Float16x2_operator_index_Int32.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x2_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    // operator[](u32)
    Float16x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x2_operator_index_UInt32.name = "operator[]"_c;
    Float16x2_operator_index_UInt32.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x2_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    // operator[](i16)
    Float16x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x2_operator_index_Int16.name = "operator[]"_c;
    Float16x2_operator_index_Int16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x2_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    // operator[](u16)
    Float16x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x2_operator_index_UInt16.name = "operator[]"_c;
    Float16x2_operator_index_UInt16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x2_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    // operator+(f16x2)
    Float16x2_operator_add_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_add_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_add_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_operator_add_Float16x2.name = "operator+"_c;
    Float16x2_operator_add_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_add_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // operator-(f16x2)
    Float16x2_operator_sub_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_sub_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_sub_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_operator_sub_Float16x2.name = "operator-"_c;
    Float16x2_operator_sub_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_sub_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // operator*(f16x2)
    Float16x2_operator_mul_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_mul_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_mul_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_operator_mul_Float16x2.name = "operator*"_c;
    Float16x2_operator_mul_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_mul_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // operator/(f16x2)
    Float16x2_operator_div_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_div_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_div_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_operator_div_Float16x2.name = "operator/"_c;
    Float16x2_operator_div_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_div_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // operator%(f16x2)
    Float16x2_operator_mod_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_mod_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_mod_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_operator_mod_Float16x2.name = "operator%"_c;
    Float16x2_operator_mod_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_mod_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // operator+=(f16x2)
    Float16x2_operator_addasg_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_addasg_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_addasg_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_operator_addasg_Float16x2.name = "operator+="_c;
    Float16x2_operator_addasg_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_addasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // operator-=(f16x2)
    Float16x2_operator_subasg_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_subasg_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_subasg_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_operator_subasg_Float16x2.name = "operator-="_c;
    Float16x2_operator_subasg_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_subasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // operator*=(f16x2)
    Float16x2_operator_mulasg_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_mulasg_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_mulasg_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_operator_mulasg_Float16x2.name = "operator*="_c;
    Float16x2_operator_mulasg_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_mulasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // operator/=(f16x2)
    Float16x2_operator_divasg_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_divasg_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_divasg_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_operator_divasg_Float16x2.name = "operator/="_c;
    Float16x2_operator_divasg_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_divasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // operator<(f16x2)
    Float16x2_operator_lt_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_lt_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_lt_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_operator_lt_Float16x2.name = "operator<"_c;
    Float16x2_operator_lt_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_lt_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // operator<=(f16x2)
    Float16x2_operator_lte_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_lte_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_lte_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_operator_lte_Float16x2.name = "operator<="_c;
    Float16x2_operator_lte_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_lte_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // operator>(f16x2)
    Float16x2_operator_gt_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_gt_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_gt_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_operator_gt_Float16x2.name = "operator>"_c;
    Float16x2_operator_gt_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_gt_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // operator>=(f16x2)
    Float16x2_operator_gte_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_gte_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_gte_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_operator_gte_Float16x2.name = "operator>="_c;
    Float16x2_operator_gte_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_gte_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // operator==(f16x2)
    Float16x2_operator_eq_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_eq_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_eq_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_operator_eq_Float16x2.name = "operator=="_c;
    Float16x2_operator_eq_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_eq_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // operator!=(f16x2)
    Float16x2_operator_neq_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_neq_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_neq_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Float16x2_operator_neq_Float16x2.name = "operator!="_c;
    Float16x2_operator_neq_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_neq_Float16x2)->returnTypeSymbol = &Float16x2Type;

    // operator*(f32)
    Float16x2_operator_scale_Float16x2_Float32_arg0.name = "_arg0"_c;
    Float16x2_operator_scale_Float16x2_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16x2_operator_scale_Float16x2_Float32_arg0)->typeSymbol = &Float32Type;
    Float16x2_operator_scale_Float16x2_Float32.name = "operator*"_c;
    Float16x2_operator_scale_Float16x2_Float32.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_scale_Float16x2_Float32)->returnTypeSymbol = &Float16x2Type;

    // operator*(f16)
    Float16x2_operator_scale_Float16x2_Float16_arg0.name = "_arg0"_c;
    Float16x2_operator_scale_Float16x2_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x2_operator_scale_Float16x2_Float16_arg0)->typeSymbol = &Float16Type;
    Float16x2_operator_scale_Float16x2_Float16.name = "operator*"_c;
    Float16x2_operator_scale_Float16x2_Float16.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_scale_Float16x2_Float16)->returnTypeSymbol = &Float16x2Type;

    // operator*(u32)
    Float16x2_operator_scale_Float16x2_UInt32_arg0.name = "_arg0"_c;
    Float16x2_operator_scale_Float16x2_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x2_operator_scale_Float16x2_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x2_operator_scale_Float16x2_UInt32.name = "operator*"_c;
    Float16x2_operator_scale_Float16x2_UInt32.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_scale_Float16x2_UInt32)->returnTypeSymbol = &Float16x2Type;

    // operator*(u16)
    Float16x2_operator_scale_Float16x2_UInt16_arg0.name = "_arg0"_c;
    Float16x2_operator_scale_Float16x2_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x2_operator_scale_Float16x2_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x2_operator_scale_Float16x2_UInt16.name = "operator*"_c;
    Float16x2_operator_scale_Float16x2_UInt16.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_scale_Float16x2_UInt16)->returnTypeSymbol = &Float16x2Type;

    // operator*(i32)
    Float16x2_operator_scale_Float16x2_Int32_arg0.name = "_arg0"_c;
    Float16x2_operator_scale_Float16x2_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x2_operator_scale_Float16x2_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x2_operator_scale_Float16x2_Int32.name = "operator*"_c;
    Float16x2_operator_scale_Float16x2_Int32.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_scale_Float16x2_Int32)->returnTypeSymbol = &Float16x2Type;

    // operator*(i16)
    Float16x2_operator_scale_Float16x2_Int16_arg0.name = "_arg0"_c;
    Float16x2_operator_scale_Float16x2_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x2_operator_scale_Float16x2_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x2_operator_scale_Float16x2_Int16.name = "operator*"_c;
    Float16x2_operator_scale_Float16x2_Int16.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_scale_Float16x2_Int16)->returnTypeSymbol = &Float16x2Type;

    // operator*(f32x2x2)
    Float16x2_operator_mul_Float32x2x2_arg0.name = "_arg0"_c;
    Float16x2_operator_mul_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float16x2_operator_mul_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Float16x2_operator_mul_Float32x2x2.name = "operator*"_c;
    Float16x2_operator_mul_Float32x2x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2_operator_mul_Float32x2x2)->returnTypeSymbol = &Float16x2Type;

    // operator*(f32x2x3)
    Float16x2_operator_mul_Float32x2x3_arg0.name = "_arg0"_c;
    Float16x2_operator_mul_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float16x2_operator_mul_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Float16x2_operator_mul_Float32x2x3.name = "operator*"_c;
    Float16x2_operator_mul_Float32x2x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x2_operator_mul_Float32x2x3)->returnTypeSymbol = &Float16x3Type;

    // operator*(f32x2x4)
    Float16x2_operator_mul_Float32x2x4_arg0.name = "_arg0"_c;
    Float16x2_operator_mul_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float16x2_operator_mul_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Float16x2_operator_mul_Float32x2x4.name = "operator*"_c;
    Float16x2_operator_mul_Float32x2x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x2_operator_mul_Float32x2x4)->returnTypeSymbol = &Float16x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f16x2"_c, &Float16x2_convert_Float32x2 },
        std::pair{ "f16x2(f32x2)"_c, &Float16x2_convert_Float32x2 },
        std::pair{ "f16x2"_c, &Float16x2_splat_Float32 },
        std::pair{ "f16x2(f32)"_c, &Float16x2_splat_Float32 },
        std::pair{ "f16x2"_c, &Float16x2_convert_UInt32x2 },
        std::pair{ "f16x2(u32x2)"_c, &Float16x2_convert_UInt32x2 },
        std::pair{ "f16x2"_c, &Float16x2_splat_UInt32 },
        std::pair{ "f16x2(u32)"_c, &Float16x2_splat_UInt32 },
        std::pair{ "f16x2"_c, &Float16x2_convert_Int32x2 },
        std::pair{ "f16x2(i32x2)"_c, &Float16x2_convert_Int32x2 },
        std::pair{ "f16x2"_c, &Float16x2_splat_Int32 },
        std::pair{ "f16x2(i32)"_c, &Float16x2_splat_Int32 },
        std::pair{ "f16x2"_c, &Float16x2_convert_Bool8x2 },
        std::pair{ "f16x2(b8x2)"_c, &Float16x2_convert_Bool8x2 },
        std::pair{ "f16x2"_c, &Float16x2_splat_Bool8 },
        std::pair{ "f16x2(b8)"_c, &Float16x2_splat_Bool8 },
        std::pair{ "f16x2"_c, &Float16x2_convert_Float16x2 },
        std::pair{ "f16x2(f16x2)"_c, &Float16x2_convert_Float16x2 },
        std::pair{ "f16x2"_c, &Float16x2_splat_Float16 },
        std::pair{ "f16x2(f16)"_c, &Float16x2_splat_Float16 },
        std::pair{ "f16x2"_c, &Float16x2_convert_UInt16x2 },
        std::pair{ "f16x2(u16x2)"_c, &Float16x2_convert_UInt16x2 },
        std::pair{ "f16x2"_c, &Float16x2_splat_UInt16 },
        std::pair{ "f16x2(u16)"_c, &Float16x2_splat_UInt16 },
        std::pair{ "f16x2"_c, &Float16x2_convert_Int16x2 },
        std::pair{ "f16x2(i16x2)"_c, &Float16x2_convert_Int16x2 },
        std::pair{ "f16x2"_c, &Float16x2_splat_Int16 },
        std::pair{ "f16x2(i16)"_c, &Float16x2_splat_Int16 },
        std::pair{ "f16x2"_c, &Float16x2_ctor0_Float16_Float16},
        std::pair{ "f16x2(f16,f16)"_c, &Float16x2_ctor0_Float16_Float16},
        std::pair{ "operator[](i32)"_c, &Float16x2_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float16x2_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float16x2_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float16x2_operator_index_UInt16},
        std::pair{ "operator+(f16x2)"_c, &Float16x2_operator_add_Float16x2},
        std::pair{ "operator-(f16x2)"_c, &Float16x2_operator_sub_Float16x2},
        std::pair{ "operator*(f16x2)"_c, &Float16x2_operator_mul_Float16x2},
        std::pair{ "operator/(f16x2)"_c, &Float16x2_operator_div_Float16x2},
        std::pair{ "operator%(f16x2)"_c, &Float16x2_operator_mod_Float16x2},
        std::pair{ "operator+=(f16x2)"_c, &Float16x2_operator_addasg_Float16x2},
        std::pair{ "operator-=(f16x2)"_c, &Float16x2_operator_subasg_Float16x2},
        std::pair{ "operator*=(f16x2)"_c, &Float16x2_operator_mulasg_Float16x2},
        std::pair{ "operator/=(f16x2)"_c, &Float16x2_operator_divasg_Float16x2},
        std::pair{ "operator<(f16x2)"_c, &Float16x2_operator_lt_Float16x2},
        std::pair{ "operator<=(f16x2)"_c, &Float16x2_operator_lte_Float16x2},
        std::pair{ "operator>(f16x2)"_c, &Float16x2_operator_gt_Float16x2},
        std::pair{ "operator>=(f16x2)"_c, &Float16x2_operator_gte_Float16x2},
        std::pair{ "operator==(f16x2)"_c, &Float16x2_operator_eq_Float16x2},
        std::pair{ "operator!=(f16x2)"_c, &Float16x2_operator_neq_Float16x2},
        std::pair{ "operator*(f32)"_c, &Float16x2_operator_scale_Float16x2_Float32},
        std::pair{ "operator*(f16)"_c, &Float16x2_operator_scale_Float16x2_Float16},
        std::pair{ "operator*(u32)"_c, &Float16x2_operator_scale_Float16x2_UInt32},
        std::pair{ "operator*(u16)"_c, &Float16x2_operator_scale_Float16x2_UInt16},
        std::pair{ "operator*(i32)"_c, &Float16x2_operator_scale_Float16x2_Int32},
        std::pair{ "operator*(i16)"_c, &Float16x2_operator_scale_Float16x2_Int16},
        std::pair{ "operator*(f32x2x2)"_c, &Float16x2_operator_mul_Float32x2x2},
        std::pair{ "operator*(f32x2x3)"_c, &Float16x2_operator_mul_Float32x2x3},
        std::pair{ "operator*(f32x2x4)"_c, &Float16x2_operator_mul_Float32x2x4}
    }
    };   
}

Float16x3::Float16x3()
{
    this->name = "f16";
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 6;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    // Conversion from Float32x3
    Float16x3_convert_Float32x3_arg0.name = "_arg0"_c;
    Float16x3_convert_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float16x3_convert_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Float16x3_convert_Float32x3.name = "f16x3"_c;
    Float16x3_convert_Float32x3.returnType = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x3_convert_Float32x3)->returnTypeSymbol = &Float16x3Type;

    // Splat with Float32
    Float16x3_splat_Float32_arg0.name = "_arg0"_c;
    Float16x3_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16x3_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Float16x3_splat_Float32.name = "f16x3"_c;
    Float16x3_splat_Float32.returnType = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x3_splat_Float32)->returnTypeSymbol = &Float16x3Type;

    // Conversion from UInt32x3
    Float16x3_convert_UInt32x3_arg0.name = "_arg0"_c;
    Float16x3_convert_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&Float16x3_convert_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Float16x3_convert_UInt32x3.name = "f16x3"_c;
    Float16x3_convert_UInt32x3.returnType = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x3_convert_UInt32x3)->returnTypeSymbol = &Float16x3Type;

    // Splat with UInt32
    Float16x3_splat_UInt32_arg0.name = "_arg0"_c;
    Float16x3_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x3_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x3_splat_UInt32.name = "f16x3"_c;
    Float16x3_splat_UInt32.returnType = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x3_splat_UInt32)->returnTypeSymbol = &Float16x3Type;

    // Conversion from Int32x3
    Float16x3_convert_Int32x3_arg0.name = "_arg0"_c;
    Float16x3_convert_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Float16x3_convert_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Float16x3_convert_Int32x3.name = "f16x3"_c;
    Float16x3_convert_Int32x3.returnType = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x3_convert_Int32x3)->returnTypeSymbol = &Float16x3Type;

    // Splat with Int32
    Float16x3_splat_Int32_arg0.name = "_arg0"_c;
    Float16x3_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x3_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x3_splat_Int32.name = "f16x3"_c;
    Float16x3_splat_Int32.returnType = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x3_splat_Int32)->returnTypeSymbol = &Float16x3Type;

    // Conversion from Bool8x3
    Float16x3_convert_Bool8x3_arg0.name = "_arg0"_c;
    Float16x3_convert_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Float16x3_convert_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Float16x3_convert_Bool8x3.name = "f16x3"_c;
    Float16x3_convert_Bool8x3.returnType = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x3_convert_Bool8x3)->returnTypeSymbol = &Float16x3Type;

    // Splat with Bool8
    Float16x3_splat_Bool8_arg0.name = "_arg0"_c;
    Float16x3_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Float16x3_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    Float16x3_splat_Bool8.name = "f16x3"_c;
    Float16x3_splat_Bool8.returnType = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x3_splat_Bool8)->returnTypeSymbol = &Float16x3Type;

    // Conversion from Float16x3
    Float16x3_convert_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_convert_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_convert_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_convert_Float16x3.name = "f16x3"_c;
    Float16x3_convert_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x3_convert_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // Splat with Float16
    Float16x3_splat_Float16_arg0.name = "_arg0"_c;
    Float16x3_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x3_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Float16x3_splat_Float16.name = "f16x3"_c;
    Float16x3_splat_Float16.returnType = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x3_splat_Float16)->returnTypeSymbol = &Float16x3Type;

    // Conversion from UInt16x3
    Float16x3_convert_UInt16x3_arg0.name = "_arg0"_c;
    Float16x3_convert_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&Float16x3_convert_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Float16x3_convert_UInt16x3.name = "f16x3"_c;
    Float16x3_convert_UInt16x3.returnType = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x3_convert_UInt16x3)->returnTypeSymbol = &Float16x3Type;

    // Splat with UInt16
    Float16x3_splat_UInt16_arg0.name = "_arg0"_c;
    Float16x3_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x3_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x3_splat_UInt16.name = "f16x3"_c;
    Float16x3_splat_UInt16.returnType = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x3_splat_UInt16)->returnTypeSymbol = &Float16x3Type;

    // Conversion from Int16x3
    Float16x3_convert_Int16x3_arg0.name = "_arg0"_c;
    Float16x3_convert_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Float16x3_convert_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Float16x3_convert_Int16x3.name = "f16x3"_c;
    Float16x3_convert_Int16x3.returnType = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x3_convert_Int16x3)->returnTypeSymbol = &Float16x3Type;

    // Splat with Int16
    Float16x3_splat_Int16_arg0.name = "_arg0"_c;
    Float16x3_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x3_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x3_splat_Int16.name = "f16x3"_c;
    Float16x3_splat_Int16.returnType = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x3_splat_Int16)->returnTypeSymbol = &Float16x3Type;

    // Construct with Float16, Float16, Float16
    Float16x3_ctor0_arg0.name = "_arg0"_c;
    Float16x3_ctor0_arg0.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x3_ctor0_arg0)->typeSymbol = &Float16Type;
    Float16x3_ctor0_arg1.name = "_arg1"_c;
    Float16x3_ctor0_arg1.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x3_ctor0_arg1)->typeSymbol = &Float16Type;
    Float16x3_ctor0_arg2.name = "_arg2"_c;
    Float16x3_ctor0_arg2.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x3_ctor0_arg2)->typeSymbol = &Float16Type;
    Float16x3_ctor0_Float16_Float16_Float16.name = "0"_c;
    Float16x3_ctor0_Float16_Float16_Float16.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_ctor0_Float16_Float16_Float16)->returnTypeSymbol = &Float16x3Type;

    // Construct with Float16x2, Float16
    Float16x3_ctor1_arg0.name = "_arg0"_c;
    Float16x3_ctor1_arg0.type = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x3_ctor1_arg0)->typeSymbol = &Float16x2Type;
    Float16x3_ctor1_arg1.name = "_arg1"_c;
    Float16x3_ctor1_arg1.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x3_ctor1_arg1)->typeSymbol = &Float16Type;
    Float16x3_ctor1_Float16x2_Float16.name = "1"_c;
    Float16x3_ctor1_Float16x2_Float16.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_ctor1_Float16x2_Float16)->returnTypeSymbol = &Float16x3Type;

    // Construct with Float16, Float16x2
    Float16x3_ctor2_arg0.name = "_arg0"_c;
    Float16x3_ctor2_arg0.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x3_ctor2_arg0)->typeSymbol = &Float16Type;
    Float16x3_ctor2_arg1.name = "_arg1"_c;
    Float16x3_ctor2_arg1.type = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x3_ctor2_arg1)->typeSymbol = &Float16x2Type;
    Float16x3_ctor2_Float16_Float16x2.name = "2"_c;
    Float16x3_ctor2_Float16_Float16x2.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_ctor2_Float16_Float16x2)->returnTypeSymbol = &Float16x3Type;

    // operator[](i32)
    Float16x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x3_operator_index_Int32.name = "operator[]"_c;
    Float16x3_operator_index_Int32.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x3_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    // operator[](u32)
    Float16x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x3_operator_index_UInt32.name = "operator[]"_c;
    Float16x3_operator_index_UInt32.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x3_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    // operator[](i16)
    Float16x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x3_operator_index_Int16.name = "operator[]"_c;
    Float16x3_operator_index_Int16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x3_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    // operator[](u16)
    Float16x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x3_operator_index_UInt16.name = "operator[]"_c;
    Float16x3_operator_index_UInt16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x3_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    // operator+(f16x3)
    Float16x3_operator_add_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_add_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_add_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_operator_add_Float16x3.name = "operator+"_c;
    Float16x3_operator_add_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_add_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // operator-(f16x3)
    Float16x3_operator_sub_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_sub_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_sub_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_operator_sub_Float16x3.name = "operator-"_c;
    Float16x3_operator_sub_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_sub_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // operator*(f16x3)
    Float16x3_operator_mul_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_mul_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_mul_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_operator_mul_Float16x3.name = "operator*"_c;
    Float16x3_operator_mul_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_mul_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // operator/(f16x3)
    Float16x3_operator_div_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_div_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_div_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_operator_div_Float16x3.name = "operator/"_c;
    Float16x3_operator_div_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_div_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // operator%(f16x3)
    Float16x3_operator_mod_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_mod_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_mod_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_operator_mod_Float16x3.name = "operator%"_c;
    Float16x3_operator_mod_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_mod_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // operator+=(f16x3)
    Float16x3_operator_addasg_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_addasg_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_addasg_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_operator_addasg_Float16x3.name = "operator+="_c;
    Float16x3_operator_addasg_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_addasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // operator-=(f16x3)
    Float16x3_operator_subasg_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_subasg_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_subasg_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_operator_subasg_Float16x3.name = "operator-="_c;
    Float16x3_operator_subasg_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_subasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // operator*=(f16x3)
    Float16x3_operator_mulasg_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_mulasg_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_mulasg_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_operator_mulasg_Float16x3.name = "operator*="_c;
    Float16x3_operator_mulasg_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_mulasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // operator/=(f16x3)
    Float16x3_operator_divasg_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_divasg_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_divasg_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_operator_divasg_Float16x3.name = "operator/="_c;
    Float16x3_operator_divasg_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_divasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // operator<(f16x3)
    Float16x3_operator_lt_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_lt_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_lt_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_operator_lt_Float16x3.name = "operator<"_c;
    Float16x3_operator_lt_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_lt_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // operator<=(f16x3)
    Float16x3_operator_lte_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_lte_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_lte_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_operator_lte_Float16x3.name = "operator<="_c;
    Float16x3_operator_lte_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_lte_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // operator>(f16x3)
    Float16x3_operator_gt_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_gt_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_gt_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_operator_gt_Float16x3.name = "operator>"_c;
    Float16x3_operator_gt_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_gt_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // operator>=(f16x3)
    Float16x3_operator_gte_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_gte_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_gte_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_operator_gte_Float16x3.name = "operator>="_c;
    Float16x3_operator_gte_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_gte_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // operator==(f16x3)
    Float16x3_operator_eq_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_eq_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_eq_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_operator_eq_Float16x3.name = "operator=="_c;
    Float16x3_operator_eq_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_eq_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // operator!=(f16x3)
    Float16x3_operator_neq_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_neq_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_neq_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Float16x3_operator_neq_Float16x3.name = "operator!="_c;
    Float16x3_operator_neq_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_neq_Float16x3)->returnTypeSymbol = &Float16x3Type;

    // operator*(f32)
    Float16x3_operator_scale_Float16x3_Float32_arg0.name = "_arg0"_c;
    Float16x3_operator_scale_Float16x3_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16x3_operator_scale_Float16x3_Float32_arg0)->typeSymbol = &Float32Type;
    Float16x3_operator_scale_Float16x3_Float32.name = "operator*"_c;
    Float16x3_operator_scale_Float16x3_Float32.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_scale_Float16x3_Float32)->returnTypeSymbol = &Float16x3Type;

    // operator*(f16)
    Float16x3_operator_scale_Float16x3_Float16_arg0.name = "_arg0"_c;
    Float16x3_operator_scale_Float16x3_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x3_operator_scale_Float16x3_Float16_arg0)->typeSymbol = &Float16Type;
    Float16x3_operator_scale_Float16x3_Float16.name = "operator*"_c;
    Float16x3_operator_scale_Float16x3_Float16.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_scale_Float16x3_Float16)->returnTypeSymbol = &Float16x3Type;

    // operator*(u32)
    Float16x3_operator_scale_Float16x3_UInt32_arg0.name = "_arg0"_c;
    Float16x3_operator_scale_Float16x3_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x3_operator_scale_Float16x3_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x3_operator_scale_Float16x3_UInt32.name = "operator*"_c;
    Float16x3_operator_scale_Float16x3_UInt32.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_scale_Float16x3_UInt32)->returnTypeSymbol = &Float16x3Type;

    // operator*(u16)
    Float16x3_operator_scale_Float16x3_UInt16_arg0.name = "_arg0"_c;
    Float16x3_operator_scale_Float16x3_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x3_operator_scale_Float16x3_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x3_operator_scale_Float16x3_UInt16.name = "operator*"_c;
    Float16x3_operator_scale_Float16x3_UInt16.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_scale_Float16x3_UInt16)->returnTypeSymbol = &Float16x3Type;

    // operator*(i32)
    Float16x3_operator_scale_Float16x3_Int32_arg0.name = "_arg0"_c;
    Float16x3_operator_scale_Float16x3_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x3_operator_scale_Float16x3_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x3_operator_scale_Float16x3_Int32.name = "operator*"_c;
    Float16x3_operator_scale_Float16x3_Int32.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_scale_Float16x3_Int32)->returnTypeSymbol = &Float16x3Type;

    // operator*(i16)
    Float16x3_operator_scale_Float16x3_Int16_arg0.name = "_arg0"_c;
    Float16x3_operator_scale_Float16x3_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x3_operator_scale_Float16x3_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x3_operator_scale_Float16x3_Int16.name = "operator*"_c;
    Float16x3_operator_scale_Float16x3_Int16.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_scale_Float16x3_Int16)->returnTypeSymbol = &Float16x3Type;

    // operator*(f32x3x2)
    Float16x3_operator_mul_Float32x3x2_arg0.name = "_arg0"_c;
    Float16x3_operator_mul_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float16x3_operator_mul_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Float16x3_operator_mul_Float32x3x2.name = "operator*"_c;
    Float16x3_operator_mul_Float32x3x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x3_operator_mul_Float32x3x2)->returnTypeSymbol = &Float16x2Type;

    // operator*(f32x3x3)
    Float16x3_operator_mul_Float32x3x3_arg0.name = "_arg0"_c;
    Float16x3_operator_mul_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float16x3_operator_mul_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Float16x3_operator_mul_Float32x3x3.name = "operator*"_c;
    Float16x3_operator_mul_Float32x3x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3_operator_mul_Float32x3x3)->returnTypeSymbol = &Float16x3Type;

    // operator*(f32x3x4)
    Float16x3_operator_mul_Float32x3x4_arg0.name = "_arg0"_c;
    Float16x3_operator_mul_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float16x3_operator_mul_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Float16x3_operator_mul_Float32x3x4.name = "operator*"_c;
    Float16x3_operator_mul_Float32x3x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x3_operator_mul_Float32x3x4)->returnTypeSymbol = &Float16x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f16x3"_c, &Float16x3_convert_Float32x3 },
        std::pair{ "f16x3(f32x3)"_c, &Float16x3_convert_Float32x3 },
        std::pair{ "f16x3"_c, &Float16x3_splat_Float32 },
        std::pair{ "f16x3(f32)"_c, &Float16x3_splat_Float32 },
        std::pair{ "f16x3"_c, &Float16x3_convert_UInt32x3 },
        std::pair{ "f16x3(u32x3)"_c, &Float16x3_convert_UInt32x3 },
        std::pair{ "f16x3"_c, &Float16x3_splat_UInt32 },
        std::pair{ "f16x3(u32)"_c, &Float16x3_splat_UInt32 },
        std::pair{ "f16x3"_c, &Float16x3_convert_Int32x3 },
        std::pair{ "f16x3(i32x3)"_c, &Float16x3_convert_Int32x3 },
        std::pair{ "f16x3"_c, &Float16x3_splat_Int32 },
        std::pair{ "f16x3(i32)"_c, &Float16x3_splat_Int32 },
        std::pair{ "f16x3"_c, &Float16x3_convert_Bool8x3 },
        std::pair{ "f16x3(b8x3)"_c, &Float16x3_convert_Bool8x3 },
        std::pair{ "f16x3"_c, &Float16x3_splat_Bool8 },
        std::pair{ "f16x3(b8)"_c, &Float16x3_splat_Bool8 },
        std::pair{ "f16x3"_c, &Float16x3_convert_Float16x3 },
        std::pair{ "f16x3(f16x3)"_c, &Float16x3_convert_Float16x3 },
        std::pair{ "f16x3"_c, &Float16x3_splat_Float16 },
        std::pair{ "f16x3(f16)"_c, &Float16x3_splat_Float16 },
        std::pair{ "f16x3"_c, &Float16x3_convert_UInt16x3 },
        std::pair{ "f16x3(u16x3)"_c, &Float16x3_convert_UInt16x3 },
        std::pair{ "f16x3"_c, &Float16x3_splat_UInt16 },
        std::pair{ "f16x3(u16)"_c, &Float16x3_splat_UInt16 },
        std::pair{ "f16x3"_c, &Float16x3_convert_Int16x3 },
        std::pair{ "f16x3(i16x3)"_c, &Float16x3_convert_Int16x3 },
        std::pair{ "f16x3"_c, &Float16x3_splat_Int16 },
        std::pair{ "f16x3(i16)"_c, &Float16x3_splat_Int16 },
        std::pair{ "f16x3"_c, &Float16x3_ctor0_Float16_Float16_Float16},
        std::pair{ "f16x3(f16,f16,f16)"_c, &Float16x3_ctor0_Float16_Float16_Float16},
        std::pair{ "f16x3"_c, &Float16x3_ctor1_Float16x2_Float16},
        std::pair{ "f16x3(f16x2,f16)"_c, &Float16x3_ctor1_Float16x2_Float16},
        std::pair{ "f16x3"_c, &Float16x3_ctor2_Float16_Float16x2},
        std::pair{ "f16x3(f16,f16x2)"_c, &Float16x3_ctor2_Float16_Float16x2},
        std::pair{ "operator[](i32)"_c, &Float16x3_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float16x3_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float16x3_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float16x3_operator_index_UInt16},
        std::pair{ "operator+(f16x3)"_c, &Float16x3_operator_add_Float16x3},
        std::pair{ "operator-(f16x3)"_c, &Float16x3_operator_sub_Float16x3},
        std::pair{ "operator*(f16x3)"_c, &Float16x3_operator_mul_Float16x3},
        std::pair{ "operator/(f16x3)"_c, &Float16x3_operator_div_Float16x3},
        std::pair{ "operator%(f16x3)"_c, &Float16x3_operator_mod_Float16x3},
        std::pair{ "operator+=(f16x3)"_c, &Float16x3_operator_addasg_Float16x3},
        std::pair{ "operator-=(f16x3)"_c, &Float16x3_operator_subasg_Float16x3},
        std::pair{ "operator*=(f16x3)"_c, &Float16x3_operator_mulasg_Float16x3},
        std::pair{ "operator/=(f16x3)"_c, &Float16x3_operator_divasg_Float16x3},
        std::pair{ "operator<(f16x3)"_c, &Float16x3_operator_lt_Float16x3},
        std::pair{ "operator<=(f16x3)"_c, &Float16x3_operator_lte_Float16x3},
        std::pair{ "operator>(f16x3)"_c, &Float16x3_operator_gt_Float16x3},
        std::pair{ "operator>=(f16x3)"_c, &Float16x3_operator_gte_Float16x3},
        std::pair{ "operator==(f16x3)"_c, &Float16x3_operator_eq_Float16x3},
        std::pair{ "operator!=(f16x3)"_c, &Float16x3_operator_neq_Float16x3},
        std::pair{ "operator*(f32)"_c, &Float16x3_operator_scale_Float16x3_Float32},
        std::pair{ "operator*(f16)"_c, &Float16x3_operator_scale_Float16x3_Float16},
        std::pair{ "operator*(u32)"_c, &Float16x3_operator_scale_Float16x3_UInt32},
        std::pair{ "operator*(u16)"_c, &Float16x3_operator_scale_Float16x3_UInt16},
        std::pair{ "operator*(i32)"_c, &Float16x3_operator_scale_Float16x3_Int32},
        std::pair{ "operator*(i16)"_c, &Float16x3_operator_scale_Float16x3_Int16},
        std::pair{ "operator*(f32x3x2)"_c, &Float16x3_operator_mul_Float32x3x2},
        std::pair{ "operator*(f32x3x3)"_c, &Float16x3_operator_mul_Float32x3x3},
        std::pair{ "operator*(f32x3x4)"_c, &Float16x3_operator_mul_Float32x3x4}
    }
    };   
}

Float16x4::Float16x4()
{
    this->name = "f16";
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    // Conversion from Float32x4
    Float16x4_convert_Float32x4_arg0.name = "_arg0"_c;
    Float16x4_convert_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float16x4_convert_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Float16x4_convert_Float32x4.name = "f16x4"_c;
    Float16x4_convert_Float32x4.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&Float16x4_convert_Float32x4)->returnTypeSymbol = &Float16x4Type;

    // Splat with Float32
    Float16x4_splat_Float32_arg0.name = "_arg0"_c;
    Float16x4_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16x4_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Float16x4_splat_Float32.name = "f16x4"_c;
    Float16x4_splat_Float32.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&Float16x4_splat_Float32)->returnTypeSymbol = &Float16x4Type;

    // Conversion from UInt32x4
    Float16x4_convert_UInt32x4_arg0.name = "_arg0"_c;
    Float16x4_convert_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&Float16x4_convert_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Float16x4_convert_UInt32x4.name = "f16x4"_c;
    Float16x4_convert_UInt32x4.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&Float16x4_convert_UInt32x4)->returnTypeSymbol = &Float16x4Type;

    // Splat with UInt32
    Float16x4_splat_UInt32_arg0.name = "_arg0"_c;
    Float16x4_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x4_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x4_splat_UInt32.name = "f16x4"_c;
    Float16x4_splat_UInt32.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&Float16x4_splat_UInt32)->returnTypeSymbol = &Float16x4Type;

    // Conversion from Int32x4
    Float16x4_convert_Int32x4_arg0.name = "_arg0"_c;
    Float16x4_convert_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Float16x4_convert_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Float16x4_convert_Int32x4.name = "f16x4"_c;
    Float16x4_convert_Int32x4.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&Float16x4_convert_Int32x4)->returnTypeSymbol = &Float16x4Type;

    // Splat with Int32
    Float16x4_splat_Int32_arg0.name = "_arg0"_c;
    Float16x4_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x4_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x4_splat_Int32.name = "f16x4"_c;
    Float16x4_splat_Int32.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&Float16x4_splat_Int32)->returnTypeSymbol = &Float16x4Type;

    // Conversion from Bool8x4
    Float16x4_convert_Bool8x4_arg0.name = "_arg0"_c;
    Float16x4_convert_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Float16x4_convert_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Float16x4_convert_Bool8x4.name = "f16x4"_c;
    Float16x4_convert_Bool8x4.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&Float16x4_convert_Bool8x4)->returnTypeSymbol = &Float16x4Type;

    // Splat with Bool8
    Float16x4_splat_Bool8_arg0.name = "_arg0"_c;
    Float16x4_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Float16x4_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    Float16x4_splat_Bool8.name = "f16x4"_c;
    Float16x4_splat_Bool8.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&Float16x4_splat_Bool8)->returnTypeSymbol = &Float16x4Type;

    // Conversion from Float16x4
    Float16x4_convert_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_convert_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_convert_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_convert_Float16x4.name = "f16x4"_c;
    Float16x4_convert_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&Float16x4_convert_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // Splat with Float16
    Float16x4_splat_Float16_arg0.name = "_arg0"_c;
    Float16x4_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x4_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Float16x4_splat_Float16.name = "f16x4"_c;
    Float16x4_splat_Float16.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&Float16x4_splat_Float16)->returnTypeSymbol = &Float16x4Type;

    // Conversion from UInt16x4
    Float16x4_convert_UInt16x4_arg0.name = "_arg0"_c;
    Float16x4_convert_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&Float16x4_convert_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Float16x4_convert_UInt16x4.name = "f16x4"_c;
    Float16x4_convert_UInt16x4.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&Float16x4_convert_UInt16x4)->returnTypeSymbol = &Float16x4Type;

    // Splat with UInt16
    Float16x4_splat_UInt16_arg0.name = "_arg0"_c;
    Float16x4_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x4_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x4_splat_UInt16.name = "f16x4"_c;
    Float16x4_splat_UInt16.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&Float16x4_splat_UInt16)->returnTypeSymbol = &Float16x4Type;

    // Conversion from Int16x4
    Float16x4_convert_Int16x4_arg0.name = "_arg0"_c;
    Float16x4_convert_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Float16x4_convert_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Float16x4_convert_Int16x4.name = "f16x4"_c;
    Float16x4_convert_Int16x4.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&Float16x4_convert_Int16x4)->returnTypeSymbol = &Float16x4Type;

    // Splat with Int16
    Float16x4_splat_Int16_arg0.name = "_arg0"_c;
    Float16x4_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x4_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x4_splat_Int16.name = "f16x4"_c;
    Float16x4_splat_Int16.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&Float16x4_splat_Int16)->returnTypeSymbol = &Float16x4Type;

    // Construct with Float16, Float16, Float16, Float16
    Float16x4_ctor0_arg0.name = "_arg0"_c;
    Float16x4_ctor0_arg0.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x4_ctor0_arg0)->typeSymbol = &Float16Type;
    Float16x4_ctor0_arg1.name = "_arg1"_c;
    Float16x4_ctor0_arg1.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x4_ctor0_arg1)->typeSymbol = &Float16Type;
    Float16x4_ctor0_arg2.name = "_arg2"_c;
    Float16x4_ctor0_arg2.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x4_ctor0_arg2)->typeSymbol = &Float16Type;
    Float16x4_ctor0_arg3.name = "_arg3"_c;
    Float16x4_ctor0_arg3.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x4_ctor0_arg3)->typeSymbol = &Float16Type;
    Float16x4_ctor0_Float16_Float16_Float16_Float16.name = "0"_c;
    Float16x4_ctor0_Float16_Float16_Float16_Float16.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_ctor0_Float16_Float16_Float16_Float16)->returnTypeSymbol = &Float16x4Type;

    // Construct with Float16x2, Float16, Float16
    Float16x4_ctor1_arg0.name = "_arg0"_c;
    Float16x4_ctor1_arg0.type = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x4_ctor1_arg0)->typeSymbol = &Float16x2Type;
    Float16x4_ctor1_arg1.name = "_arg1"_c;
    Float16x4_ctor1_arg1.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x4_ctor1_arg1)->typeSymbol = &Float16Type;
    Float16x4_ctor1_arg2.name = "_arg2"_c;
    Float16x4_ctor1_arg2.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x4_ctor1_arg2)->typeSymbol = &Float16Type;
    Float16x4_ctor1_Float16x2_Float16_Float16.name = "1"_c;
    Float16x4_ctor1_Float16x2_Float16_Float16.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_ctor1_Float16x2_Float16_Float16)->returnTypeSymbol = &Float16x4Type;

    // Construct with Float16, Float16x2, Float16
    Float16x4_ctor2_arg0.name = "_arg0"_c;
    Float16x4_ctor2_arg0.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x4_ctor2_arg0)->typeSymbol = &Float16Type;
    Float16x4_ctor2_arg1.name = "_arg1"_c;
    Float16x4_ctor2_arg1.type = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x4_ctor2_arg1)->typeSymbol = &Float16x2Type;
    Float16x4_ctor2_arg2.name = "_arg2"_c;
    Float16x4_ctor2_arg2.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x4_ctor2_arg2)->typeSymbol = &Float16Type;
    Float16x4_ctor2_Float16_Float16x2_Float16.name = "2"_c;
    Float16x4_ctor2_Float16_Float16x2_Float16.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_ctor2_Float16_Float16x2_Float16)->returnTypeSymbol = &Float16x4Type;

    // Construct with Float16, Float16, Float16x2
    Float16x4_ctor3_arg0.name = "_arg0"_c;
    Float16x4_ctor3_arg0.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x4_ctor3_arg0)->typeSymbol = &Float16Type;
    Float16x4_ctor3_arg1.name = "_arg1"_c;
    Float16x4_ctor3_arg1.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x4_ctor3_arg1)->typeSymbol = &Float16Type;
    Float16x4_ctor3_arg2.name = "_arg2"_c;
    Float16x4_ctor3_arg2.type = Type::FullType { Float16x2Type.name };
    Symbol::Resolved(&Float16x4_ctor3_arg2)->typeSymbol = &Float16x2Type;
    Float16x4_ctor3_Float16_Float16_Float16x2.name = "3"_c;
    Float16x4_ctor3_Float16_Float16_Float16x2.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_ctor3_Float16_Float16_Float16x2)->returnTypeSymbol = &Float16x4Type;

    // Construct with Float16x3, Float16
    Float16x4_ctor4_arg0.name = "_arg0"_c;
    Float16x4_ctor4_arg0.type = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x4_ctor4_arg0)->typeSymbol = &Float16x3Type;
    Float16x4_ctor4_arg1.name = "_arg1"_c;
    Float16x4_ctor4_arg1.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x4_ctor4_arg1)->typeSymbol = &Float16Type;
    Float16x4_ctor4_Float16x3_Float16.name = "4"_c;
    Float16x4_ctor4_Float16x3_Float16.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_ctor4_Float16x3_Float16)->returnTypeSymbol = &Float16x4Type;

    // Construct with Float16, Float16x3
    Float16x4_ctor5_arg0.name = "_arg0"_c;
    Float16x4_ctor5_arg0.type = Type::FullType { Float16Type.name };
    Symbol::Resolved(&Float16x4_ctor5_arg0)->typeSymbol = &Float16Type;
    Float16x4_ctor5_arg1.name = "_arg1"_c;
    Float16x4_ctor5_arg1.type = Type::FullType { Float16x3Type.name };
    Symbol::Resolved(&Float16x4_ctor5_arg1)->typeSymbol = &Float16x3Type;
    Float16x4_ctor5_Float16_Float16x3.name = "5"_c;
    Float16x4_ctor5_Float16_Float16x3.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_ctor5_Float16_Float16x3)->returnTypeSymbol = &Float16x4Type;

    // operator[](i32)
    Float16x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x4_operator_index_Int32.name = "operator[]"_c;
    Float16x4_operator_index_Int32.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x4_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    // operator[](u32)
    Float16x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x4_operator_index_UInt32.name = "operator[]"_c;
    Float16x4_operator_index_UInt32.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x4_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    // operator[](i16)
    Float16x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x4_operator_index_Int16.name = "operator[]"_c;
    Float16x4_operator_index_Int16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x4_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    // operator[](u16)
    Float16x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x4_operator_index_UInt16.name = "operator[]"_c;
    Float16x4_operator_index_UInt16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x4_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    // operator+(f16x4)
    Float16x4_operator_add_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_add_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_add_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_operator_add_Float16x4.name = "operator+"_c;
    Float16x4_operator_add_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_add_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // operator-(f16x4)
    Float16x4_operator_sub_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_sub_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_sub_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_operator_sub_Float16x4.name = "operator-"_c;
    Float16x4_operator_sub_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_sub_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // operator*(f16x4)
    Float16x4_operator_mul_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_mul_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_mul_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_operator_mul_Float16x4.name = "operator*"_c;
    Float16x4_operator_mul_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_mul_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // operator/(f16x4)
    Float16x4_operator_div_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_div_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_div_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_operator_div_Float16x4.name = "operator/"_c;
    Float16x4_operator_div_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_div_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // operator%(f16x4)
    Float16x4_operator_mod_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_mod_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_mod_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_operator_mod_Float16x4.name = "operator%"_c;
    Float16x4_operator_mod_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_mod_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // operator+=(f16x4)
    Float16x4_operator_addasg_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_addasg_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_addasg_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_operator_addasg_Float16x4.name = "operator+="_c;
    Float16x4_operator_addasg_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_addasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // operator-=(f16x4)
    Float16x4_operator_subasg_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_subasg_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_subasg_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_operator_subasg_Float16x4.name = "operator-="_c;
    Float16x4_operator_subasg_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_subasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // operator*=(f16x4)
    Float16x4_operator_mulasg_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_mulasg_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_mulasg_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_operator_mulasg_Float16x4.name = "operator*="_c;
    Float16x4_operator_mulasg_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_mulasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // operator/=(f16x4)
    Float16x4_operator_divasg_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_divasg_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_divasg_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_operator_divasg_Float16x4.name = "operator/="_c;
    Float16x4_operator_divasg_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_divasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // operator<(f16x4)
    Float16x4_operator_lt_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_lt_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_lt_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_operator_lt_Float16x4.name = "operator<"_c;
    Float16x4_operator_lt_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_lt_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // operator<=(f16x4)
    Float16x4_operator_lte_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_lte_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_lte_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_operator_lte_Float16x4.name = "operator<="_c;
    Float16x4_operator_lte_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_lte_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // operator>(f16x4)
    Float16x4_operator_gt_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_gt_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_gt_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_operator_gt_Float16x4.name = "operator>"_c;
    Float16x4_operator_gt_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_gt_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // operator>=(f16x4)
    Float16x4_operator_gte_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_gte_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_gte_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_operator_gte_Float16x4.name = "operator>="_c;
    Float16x4_operator_gte_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_gte_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // operator==(f16x4)
    Float16x4_operator_eq_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_eq_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_eq_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_operator_eq_Float16x4.name = "operator=="_c;
    Float16x4_operator_eq_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_eq_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // operator!=(f16x4)
    Float16x4_operator_neq_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_neq_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_neq_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Float16x4_operator_neq_Float16x4.name = "operator!="_c;
    Float16x4_operator_neq_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_neq_Float16x4)->returnTypeSymbol = &Float16x4Type;

    // operator*(f32)
    Float16x4_operator_scale_Float16x4_Float32_arg0.name = "_arg0"_c;
    Float16x4_operator_scale_Float16x4_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16x4_operator_scale_Float16x4_Float32_arg0)->typeSymbol = &Float32Type;
    Float16x4_operator_scale_Float16x4_Float32.name = "operator*"_c;
    Float16x4_operator_scale_Float16x4_Float32.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_scale_Float16x4_Float32)->returnTypeSymbol = &Float16x4Type;

    // operator*(f16)
    Float16x4_operator_scale_Float16x4_Float16_arg0.name = "_arg0"_c;
    Float16x4_operator_scale_Float16x4_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x4_operator_scale_Float16x4_Float16_arg0)->typeSymbol = &Float16Type;
    Float16x4_operator_scale_Float16x4_Float16.name = "operator*"_c;
    Float16x4_operator_scale_Float16x4_Float16.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_scale_Float16x4_Float16)->returnTypeSymbol = &Float16x4Type;

    // operator*(u32)
    Float16x4_operator_scale_Float16x4_UInt32_arg0.name = "_arg0"_c;
    Float16x4_operator_scale_Float16x4_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x4_operator_scale_Float16x4_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x4_operator_scale_Float16x4_UInt32.name = "operator*"_c;
    Float16x4_operator_scale_Float16x4_UInt32.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_scale_Float16x4_UInt32)->returnTypeSymbol = &Float16x4Type;

    // operator*(u16)
    Float16x4_operator_scale_Float16x4_UInt16_arg0.name = "_arg0"_c;
    Float16x4_operator_scale_Float16x4_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x4_operator_scale_Float16x4_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x4_operator_scale_Float16x4_UInt16.name = "operator*"_c;
    Float16x4_operator_scale_Float16x4_UInt16.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_scale_Float16x4_UInt16)->returnTypeSymbol = &Float16x4Type;

    // operator*(i32)
    Float16x4_operator_scale_Float16x4_Int32_arg0.name = "_arg0"_c;
    Float16x4_operator_scale_Float16x4_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x4_operator_scale_Float16x4_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x4_operator_scale_Float16x4_Int32.name = "operator*"_c;
    Float16x4_operator_scale_Float16x4_Int32.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_scale_Float16x4_Int32)->returnTypeSymbol = &Float16x4Type;

    // operator*(i16)
    Float16x4_operator_scale_Float16x4_Int16_arg0.name = "_arg0"_c;
    Float16x4_operator_scale_Float16x4_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x4_operator_scale_Float16x4_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x4_operator_scale_Float16x4_Int16.name = "operator*"_c;
    Float16x4_operator_scale_Float16x4_Int16.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_scale_Float16x4_Int16)->returnTypeSymbol = &Float16x4Type;

    // operator*(f32x4x2)
    Float16x4_operator_mul_Float32x4x2_arg0.name = "_arg0"_c;
    Float16x4_operator_mul_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float16x4_operator_mul_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Float16x4_operator_mul_Float32x4x2.name = "operator*"_c;
    Float16x4_operator_mul_Float32x4x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x4_operator_mul_Float32x4x2)->returnTypeSymbol = &Float16x2Type;

    // operator*(f32x4x3)
    Float16x4_operator_mul_Float32x4x3_arg0.name = "_arg0"_c;
    Float16x4_operator_mul_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float16x4_operator_mul_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Float16x4_operator_mul_Float32x4x3.name = "operator*"_c;
    Float16x4_operator_mul_Float32x4x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x4_operator_mul_Float32x4x3)->returnTypeSymbol = &Float16x3Type;

    // operator*(f32x4x4)
    Float16x4_operator_mul_Float32x4x4_arg0.name = "_arg0"_c;
    Float16x4_operator_mul_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float16x4_operator_mul_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Float16x4_operator_mul_Float32x4x4.name = "operator*"_c;
    Float16x4_operator_mul_Float32x4x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4_operator_mul_Float32x4x4)->returnTypeSymbol = &Float16x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f16x4"_c, &Float16x4_convert_Float32x4 },
        std::pair{ "f16x4(f32x4)"_c, &Float16x4_convert_Float32x4 },
        std::pair{ "f16x4"_c, &Float16x4_splat_Float32 },
        std::pair{ "f16x4(f32)"_c, &Float16x4_splat_Float32 },
        std::pair{ "f16x4"_c, &Float16x4_convert_UInt32x4 },
        std::pair{ "f16x4(u32x4)"_c, &Float16x4_convert_UInt32x4 },
        std::pair{ "f16x4"_c, &Float16x4_splat_UInt32 },
        std::pair{ "f16x4(u32)"_c, &Float16x4_splat_UInt32 },
        std::pair{ "f16x4"_c, &Float16x4_convert_Int32x4 },
        std::pair{ "f16x4(i32x4)"_c, &Float16x4_convert_Int32x4 },
        std::pair{ "f16x4"_c, &Float16x4_splat_Int32 },
        std::pair{ "f16x4(i32)"_c, &Float16x4_splat_Int32 },
        std::pair{ "f16x4"_c, &Float16x4_convert_Bool8x4 },
        std::pair{ "f16x4(b8x4)"_c, &Float16x4_convert_Bool8x4 },
        std::pair{ "f16x4"_c, &Float16x4_splat_Bool8 },
        std::pair{ "f16x4(b8)"_c, &Float16x4_splat_Bool8 },
        std::pair{ "f16x4"_c, &Float16x4_convert_Float16x4 },
        std::pair{ "f16x4(f16x4)"_c, &Float16x4_convert_Float16x4 },
        std::pair{ "f16x4"_c, &Float16x4_splat_Float16 },
        std::pair{ "f16x4(f16)"_c, &Float16x4_splat_Float16 },
        std::pair{ "f16x4"_c, &Float16x4_convert_UInt16x4 },
        std::pair{ "f16x4(u16x4)"_c, &Float16x4_convert_UInt16x4 },
        std::pair{ "f16x4"_c, &Float16x4_splat_UInt16 },
        std::pair{ "f16x4(u16)"_c, &Float16x4_splat_UInt16 },
        std::pair{ "f16x4"_c, &Float16x4_convert_Int16x4 },
        std::pair{ "f16x4(i16x4)"_c, &Float16x4_convert_Int16x4 },
        std::pair{ "f16x4"_c, &Float16x4_splat_Int16 },
        std::pair{ "f16x4(i16)"_c, &Float16x4_splat_Int16 },
        std::pair{ "f16x4"_c, &Float16x4_ctor0_Float16_Float16_Float16_Float16},
        std::pair{ "f16x4(f16,f16,f16,f16)"_c, &Float16x4_ctor0_Float16_Float16_Float16_Float16},
        std::pair{ "f16x4"_c, &Float16x4_ctor1_Float16x2_Float16_Float16},
        std::pair{ "f16x4(f16x2,f16,f16)"_c, &Float16x4_ctor1_Float16x2_Float16_Float16},
        std::pair{ "f16x4"_c, &Float16x4_ctor2_Float16_Float16x2_Float16},
        std::pair{ "f16x4(f16,f16x2,f16)"_c, &Float16x4_ctor2_Float16_Float16x2_Float16},
        std::pair{ "f16x4"_c, &Float16x4_ctor3_Float16_Float16_Float16x2},
        std::pair{ "f16x4(f16,f16,f16x2)"_c, &Float16x4_ctor3_Float16_Float16_Float16x2},
        std::pair{ "f16x4"_c, &Float16x4_ctor4_Float16x3_Float16},
        std::pair{ "f16x4(f16x3,f16)"_c, &Float16x4_ctor4_Float16x3_Float16},
        std::pair{ "f16x4"_c, &Float16x4_ctor5_Float16_Float16x3},
        std::pair{ "f16x4(f16,f16x3)"_c, &Float16x4_ctor5_Float16_Float16x3},
        std::pair{ "operator[](i32)"_c, &Float16x4_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float16x4_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float16x4_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float16x4_operator_index_UInt16},
        std::pair{ "operator+(f16x4)"_c, &Float16x4_operator_add_Float16x4},
        std::pair{ "operator-(f16x4)"_c, &Float16x4_operator_sub_Float16x4},
        std::pair{ "operator*(f16x4)"_c, &Float16x4_operator_mul_Float16x4},
        std::pair{ "operator/(f16x4)"_c, &Float16x4_operator_div_Float16x4},
        std::pair{ "operator%(f16x4)"_c, &Float16x4_operator_mod_Float16x4},
        std::pair{ "operator+=(f16x4)"_c, &Float16x4_operator_addasg_Float16x4},
        std::pair{ "operator-=(f16x4)"_c, &Float16x4_operator_subasg_Float16x4},
        std::pair{ "operator*=(f16x4)"_c, &Float16x4_operator_mulasg_Float16x4},
        std::pair{ "operator/=(f16x4)"_c, &Float16x4_operator_divasg_Float16x4},
        std::pair{ "operator<(f16x4)"_c, &Float16x4_operator_lt_Float16x4},
        std::pair{ "operator<=(f16x4)"_c, &Float16x4_operator_lte_Float16x4},
        std::pair{ "operator>(f16x4)"_c, &Float16x4_operator_gt_Float16x4},
        std::pair{ "operator>=(f16x4)"_c, &Float16x4_operator_gte_Float16x4},
        std::pair{ "operator==(f16x4)"_c, &Float16x4_operator_eq_Float16x4},
        std::pair{ "operator!=(f16x4)"_c, &Float16x4_operator_neq_Float16x4},
        std::pair{ "operator*(f32)"_c, &Float16x4_operator_scale_Float16x4_Float32},
        std::pair{ "operator*(f16)"_c, &Float16x4_operator_scale_Float16x4_Float16},
        std::pair{ "operator*(u32)"_c, &Float16x4_operator_scale_Float16x4_UInt32},
        std::pair{ "operator*(u16)"_c, &Float16x4_operator_scale_Float16x4_UInt16},
        std::pair{ "operator*(i32)"_c, &Float16x4_operator_scale_Float16x4_Int32},
        std::pair{ "operator*(i16)"_c, &Float16x4_operator_scale_Float16x4_Int16},
        std::pair{ "operator*(f32x4x2)"_c, &Float16x4_operator_mul_Float32x4x2},
        std::pair{ "operator*(f32x4x3)"_c, &Float16x4_operator_mul_Float32x4x3},
        std::pair{ "operator*(f32x4x4)"_c, &Float16x4_operator_mul_Float32x4x4}
    }
    };   
}

UInt16::UInt16()
{
    this->name = "u16";
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    // Conversion from Float32
    UInt16_convert_Float32_arg0.name = "_arg0"_c;
    UInt16_convert_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&UInt16_convert_Float32_arg0)->typeSymbol = &Float32Type;
    UInt16_convert_Float32.name = "u16"_c;
    UInt16_convert_Float32.returnType = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16_convert_Float32)->returnTypeSymbol = &UInt16Type;

    // Conversion from UInt32
    UInt16_convert_UInt32_arg0.name = "_arg0"_c;
    UInt16_convert_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt16_convert_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt16_convert_UInt32.name = "u16"_c;
    UInt16_convert_UInt32.returnType = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16_convert_UInt32)->returnTypeSymbol = &UInt16Type;

    // Conversion from Int32
    UInt16_convert_Int32_arg0.name = "_arg0"_c;
    UInt16_convert_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt16_convert_Int32_arg0)->typeSymbol = &Int32Type;
    UInt16_convert_Int32.name = "u16"_c;
    UInt16_convert_Int32.returnType = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16_convert_Int32)->returnTypeSymbol = &UInt16Type;

    // Conversion from Bool8
    UInt16_convert_Bool8_arg0.name = "_arg0"_c;
    UInt16_convert_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&UInt16_convert_Bool8_arg0)->typeSymbol = &Bool8Type;
    UInt16_convert_Bool8.name = "u16"_c;
    UInt16_convert_Bool8.returnType = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16_convert_Bool8)->returnTypeSymbol = &UInt16Type;

    // Conversion from Float16
    UInt16_convert_Float16_arg0.name = "_arg0"_c;
    UInt16_convert_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&UInt16_convert_Float16_arg0)->typeSymbol = &Float16Type;
    UInt16_convert_Float16.name = "u16"_c;
    UInt16_convert_Float16.returnType = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16_convert_Float16)->returnTypeSymbol = &UInt16Type;

    // Conversion from Int16
    UInt16_convert_Int16_arg0.name = "_arg0"_c;
    UInt16_convert_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt16_convert_Int16_arg0)->typeSymbol = &Int16Type;
    UInt16_convert_Int16.name = "u16"_c;
    UInt16_convert_Int16.returnType = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16_convert_Int16)->returnTypeSymbol = &UInt16Type;

    // Construct with UInt16
    UInt16_ctor0_arg0.name = "_arg0"_c;
    UInt16_ctor0_arg0.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16_ctor0_arg0)->typeSymbol = &UInt16Type;
    UInt16_ctor0_UInt16.name = "0"_c;
    UInt16_ctor0_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_ctor0_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator[](i32)
    UInt16_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt16_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt16_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    UInt16_operator_index_Int32.name = "operator[]"_c;
    UInt16_operator_index_Int32.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    // operator[](u32)
    UInt16_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt16_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt16_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt16_operator_index_UInt32.name = "operator[]"_c;
    UInt16_operator_index_UInt32.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    // operator[](i16)
    UInt16_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt16_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt16_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    UInt16_operator_index_Int16.name = "operator[]"_c;
    UInt16_operator_index_Int16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    // operator[](u16)
    UInt16_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_index_UInt16.name = "operator[]"_c;
    UInt16_operator_index_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator+(u16)
    UInt16_operator_add_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_add_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_add_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_add_UInt16.name = "operator+"_c;
    UInt16_operator_add_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_add_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator-(u16)
    UInt16_operator_sub_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_sub_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_sub_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_sub_UInt16.name = "operator-"_c;
    UInt16_operator_sub_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_sub_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator*(u16)
    UInt16_operator_mul_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_mul_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_mul_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_mul_UInt16.name = "operator*"_c;
    UInt16_operator_mul_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_mul_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator/(u16)
    UInt16_operator_div_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_div_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_div_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_div_UInt16.name = "operator/"_c;
    UInt16_operator_div_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_div_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator%(u16)
    UInt16_operator_mod_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_mod_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_mod_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_mod_UInt16.name = "operator%"_c;
    UInt16_operator_mod_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_mod_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator+=(u16)
    UInt16_operator_addasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_addasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_addasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_addasg_UInt16.name = "operator+="_c;
    UInt16_operator_addasg_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_addasg_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator-=(u16)
    UInt16_operator_subasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_subasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_subasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_subasg_UInt16.name = "operator-="_c;
    UInt16_operator_subasg_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_subasg_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator*=(u16)
    UInt16_operator_mulasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_mulasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_mulasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_mulasg_UInt16.name = "operator*="_c;
    UInt16_operator_mulasg_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_mulasg_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator/=(u16)
    UInt16_operator_divasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_divasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_divasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_divasg_UInt16.name = "operator/="_c;
    UInt16_operator_divasg_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_divasg_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator<(u16)
    UInt16_operator_lt_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_lt_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_lt_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_lt_UInt16.name = "operator<"_c;
    UInt16_operator_lt_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_lt_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator<=(u16)
    UInt16_operator_lte_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_lte_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_lte_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_lte_UInt16.name = "operator<="_c;
    UInt16_operator_lte_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_lte_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator>(u16)
    UInt16_operator_gt_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_gt_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_gt_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_gt_UInt16.name = "operator>"_c;
    UInt16_operator_gt_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_gt_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator>=(u16)
    UInt16_operator_gte_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_gte_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_gte_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_gte_UInt16.name = "operator>="_c;
    UInt16_operator_gte_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_gte_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator==(u16)
    UInt16_operator_eq_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_eq_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_eq_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_eq_UInt16.name = "operator=="_c;
    UInt16_operator_eq_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_eq_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator!=(u16)
    UInt16_operator_neq_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_neq_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_neq_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_neq_UInt16.name = "operator!="_c;
    UInt16_operator_neq_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_neq_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator|
    UInt16_operator_or_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_or_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_or_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_or_UInt16.name = "operator|"_c;
    UInt16_operator_or_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_or_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator&
    UInt16_operator_and_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_and_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_and_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_and_UInt16.name = "operator&"_c;
    UInt16_operator_and_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_and_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator^
    UInt16_operator_xor_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_xor_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_xor_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_xor_UInt16.name = "operator^"_c;
    UInt16_operator_xor_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_xor_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator<<
    UInt16_operator_lsh_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_lsh_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_lsh_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_lsh_UInt16.name = "operator<<"_c;
    UInt16_operator_lsh_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_lsh_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator>>
    UInt16_operator_rsh_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_rsh_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_rsh_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_rsh_UInt16.name = "operator>>"_c;
    UInt16_operator_rsh_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_rsh_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator|=
    UInt16_operator_orasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_orasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_orasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_orasg_UInt16.name = "operator|="_c;
    UInt16_operator_orasg_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_orasg_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator&=
    UInt16_operator_andasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_andasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_andasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_andasg_UInt16.name = "operator&="_c;
    UInt16_operator_andasg_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_andasg_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator^=
    UInt16_operator_xorasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_xorasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_xorasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_xorasg_UInt16.name = "operator^="_c;
    UInt16_operator_xorasg_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_xorasg_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator<<=
    UInt16_operator_lshasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_lshasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_lshasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_lshasg_UInt16.name = "operator<<="_c;
    UInt16_operator_lshasg_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_lshasg_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator>>=
    UInt16_operator_rhsasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_rhsasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_rhsasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16_operator_rhsasg_UInt16.name = "operator>>="_c;
    UInt16_operator_rhsasg_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16_operator_rhsasg_UInt16)->returnTypeSymbol = &UInt16Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "u16"_c, &UInt16_convert_Float32 },
        std::pair{ "u16(f32)"_c, &UInt16_convert_Float32 },
        std::pair{ "u16"_c, &UInt16_convert_UInt32 },
        std::pair{ "u16(u32)"_c, &UInt16_convert_UInt32 },
        std::pair{ "u16"_c, &UInt16_convert_Int32 },
        std::pair{ "u16(i32)"_c, &UInt16_convert_Int32 },
        std::pair{ "u16"_c, &UInt16_convert_Bool8 },
        std::pair{ "u16(b8)"_c, &UInt16_convert_Bool8 },
        std::pair{ "u16"_c, &UInt16_convert_Float16 },
        std::pair{ "u16(f16)"_c, &UInt16_convert_Float16 },
        std::pair{ "u16"_c, &UInt16_convert_Int16 },
        std::pair{ "u16(i16)"_c, &UInt16_convert_Int16 },
        std::pair{ "u16"_c, &UInt16_ctor0_UInt16},
        std::pair{ "u16(u16)"_c, &UInt16_ctor0_UInt16},
        std::pair{ "operator[](i32)"_c, &UInt16_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &UInt16_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &UInt16_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &UInt16_operator_index_UInt16},
        std::pair{ "operator+(u16)"_c, &UInt16_operator_add_UInt16},
        std::pair{ "operator-(u16)"_c, &UInt16_operator_sub_UInt16},
        std::pair{ "operator*(u16)"_c, &UInt16_operator_mul_UInt16},
        std::pair{ "operator/(u16)"_c, &UInt16_operator_div_UInt16},
        std::pair{ "operator%(u16)"_c, &UInt16_operator_mod_UInt16},
        std::pair{ "operator+=(u16)"_c, &UInt16_operator_addasg_UInt16},
        std::pair{ "operator-=(u16)"_c, &UInt16_operator_subasg_UInt16},
        std::pair{ "operator*=(u16)"_c, &UInt16_operator_mulasg_UInt16},
        std::pair{ "operator/=(u16)"_c, &UInt16_operator_divasg_UInt16},
        std::pair{ "operator<(u16)"_c, &UInt16_operator_lt_UInt16},
        std::pair{ "operator<=(u16)"_c, &UInt16_operator_lte_UInt16},
        std::pair{ "operator>(u16)"_c, &UInt16_operator_gt_UInt16},
        std::pair{ "operator>=(u16)"_c, &UInt16_operator_gte_UInt16},
        std::pair{ "operator==(u16)"_c, &UInt16_operator_eq_UInt16},
        std::pair{ "operator!=(u16)"_c, &UInt16_operator_neq_UInt16},
        std::pair{ "operator|(u16)"_c, &UInt16_operator_or_UInt16},
        std::pair{ "operator&(u16)"_c, &UInt16_operator_and_UInt16},
        std::pair{ "operator^(u16)"_c, &UInt16_operator_xor_UInt16},
        std::pair{ "operator<<(u16)"_c, &UInt16_operator_lsh_UInt16},
        std::pair{ "operator>>(u16)"_c, &UInt16_operator_rsh_UInt16},
        std::pair{ "operator|=(u16)"_c, &UInt16_operator_orasg_UInt16},
        std::pair{ "operator&=(u16)"_c, &UInt16_operator_andasg_UInt16},
        std::pair{ "operator^=(u16)"_c, &UInt16_operator_xorasg_UInt16},
        std::pair{ "operator<<=(u16)"_c, &UInt16_operator_lshasg_UInt16},
        std::pair{ "operator>>=(u16)"_c, &UInt16_operator_rhsasg_UInt16}
    }
    };   
}

UInt16x2::UInt16x2()
{
    this->name = "u16";
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    // Conversion from Float32x2
    UInt16x2_convert_Float32x2_arg0.name = "_arg0"_c;
    UInt16x2_convert_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&UInt16x2_convert_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    UInt16x2_convert_Float32x2.name = "u16x2"_c;
    UInt16x2_convert_Float32x2.returnType = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_convert_Float32x2)->returnTypeSymbol = &UInt16x2Type;

    // Splat with Float32
    UInt16x2_splat_Float32_arg0.name = "_arg0"_c;
    UInt16x2_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&UInt16x2_splat_Float32_arg0)->typeSymbol = &Float32Type;
    UInt16x2_splat_Float32.name = "u16x2"_c;
    UInt16x2_splat_Float32.returnType = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_splat_Float32)->returnTypeSymbol = &UInt16x2Type;

    // Conversion from UInt32x2
    UInt16x2_convert_UInt32x2_arg0.name = "_arg0"_c;
    UInt16x2_convert_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&UInt16x2_convert_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    UInt16x2_convert_UInt32x2.name = "u16x2"_c;
    UInt16x2_convert_UInt32x2.returnType = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_convert_UInt32x2)->returnTypeSymbol = &UInt16x2Type;

    // Splat with UInt32
    UInt16x2_splat_UInt32_arg0.name = "_arg0"_c;
    UInt16x2_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt16x2_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt16x2_splat_UInt32.name = "u16x2"_c;
    UInt16x2_splat_UInt32.returnType = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_splat_UInt32)->returnTypeSymbol = &UInt16x2Type;

    // Conversion from Int32x2
    UInt16x2_convert_Int32x2_arg0.name = "_arg0"_c;
    UInt16x2_convert_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&UInt16x2_convert_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    UInt16x2_convert_Int32x2.name = "u16x2"_c;
    UInt16x2_convert_Int32x2.returnType = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_convert_Int32x2)->returnTypeSymbol = &UInt16x2Type;

    // Splat with Int32
    UInt16x2_splat_Int32_arg0.name = "_arg0"_c;
    UInt16x2_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt16x2_splat_Int32_arg0)->typeSymbol = &Int32Type;
    UInt16x2_splat_Int32.name = "u16x2"_c;
    UInt16x2_splat_Int32.returnType = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_splat_Int32)->returnTypeSymbol = &UInt16x2Type;

    // Conversion from Bool8x2
    UInt16x2_convert_Bool8x2_arg0.name = "_arg0"_c;
    UInt16x2_convert_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&UInt16x2_convert_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    UInt16x2_convert_Bool8x2.name = "u16x2"_c;
    UInt16x2_convert_Bool8x2.returnType = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_convert_Bool8x2)->returnTypeSymbol = &UInt16x2Type;

    // Splat with Bool8
    UInt16x2_splat_Bool8_arg0.name = "_arg0"_c;
    UInt16x2_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&UInt16x2_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    UInt16x2_splat_Bool8.name = "u16x2"_c;
    UInt16x2_splat_Bool8.returnType = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_splat_Bool8)->returnTypeSymbol = &UInt16x2Type;

    // Conversion from Float16x2
    UInt16x2_convert_Float16x2_arg0.name = "_arg0"_c;
    UInt16x2_convert_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&UInt16x2_convert_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    UInt16x2_convert_Float16x2.name = "u16x2"_c;
    UInt16x2_convert_Float16x2.returnType = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_convert_Float16x2)->returnTypeSymbol = &UInt16x2Type;

    // Splat with Float16
    UInt16x2_splat_Float16_arg0.name = "_arg0"_c;
    UInt16x2_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&UInt16x2_splat_Float16_arg0)->typeSymbol = &Float16Type;
    UInt16x2_splat_Float16.name = "u16x2"_c;
    UInt16x2_splat_Float16.returnType = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_splat_Float16)->returnTypeSymbol = &UInt16x2Type;

    // Conversion from UInt16x2
    UInt16x2_convert_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_convert_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_convert_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_convert_UInt16x2.name = "u16x2"_c;
    UInt16x2_convert_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_convert_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // Splat with UInt16
    UInt16x2_splat_UInt16_arg0.name = "_arg0"_c;
    UInt16x2_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x2_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16x2_splat_UInt16.name = "u16x2"_c;
    UInt16x2_splat_UInt16.returnType = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_splat_UInt16)->returnTypeSymbol = &UInt16x2Type;

    // Conversion from Int16x2
    UInt16x2_convert_Int16x2_arg0.name = "_arg0"_c;
    UInt16x2_convert_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&UInt16x2_convert_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    UInt16x2_convert_Int16x2.name = "u16x2"_c;
    UInt16x2_convert_Int16x2.returnType = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_convert_Int16x2)->returnTypeSymbol = &UInt16x2Type;

    // Splat with Int16
    UInt16x2_splat_Int16_arg0.name = "_arg0"_c;
    UInt16x2_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt16x2_splat_Int16_arg0)->typeSymbol = &Int16Type;
    UInt16x2_splat_Int16.name = "u16x2"_c;
    UInt16x2_splat_Int16.returnType = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_splat_Int16)->returnTypeSymbol = &UInt16x2Type;

    // Construct with UInt16, UInt16
    UInt16x2_ctor0_arg0.name = "_arg0"_c;
    UInt16x2_ctor0_arg0.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x2_ctor0_arg0)->typeSymbol = &UInt16Type;
    UInt16x2_ctor0_arg1.name = "_arg1"_c;
    UInt16x2_ctor0_arg1.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x2_ctor0_arg1)->typeSymbol = &UInt16Type;
    UInt16x2_ctor0_UInt16_UInt16.name = "0"_c;
    UInt16x2_ctor0_UInt16_UInt16.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_ctor0_UInt16_UInt16)->returnTypeSymbol = &UInt16x2Type;

    // operator[](i32)
    UInt16x2_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt16x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt16x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    UInt16x2_operator_index_Int32.name = "operator[]"_c;
    UInt16x2_operator_index_Int32.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x2_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    // operator[](u32)
    UInt16x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt16x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt16x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt16x2_operator_index_UInt32.name = "operator[]"_c;
    UInt16x2_operator_index_UInt32.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x2_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    // operator[](i16)
    UInt16x2_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt16x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt16x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    UInt16x2_operator_index_Int16.name = "operator[]"_c;
    UInt16x2_operator_index_Int16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x2_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    // operator[](u16)
    UInt16x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt16x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16x2_operator_index_UInt16.name = "operator[]"_c;
    UInt16x2_operator_index_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x2_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator+(u16x2)
    UInt16x2_operator_add_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_add_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_add_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_add_UInt16x2.name = "operator+"_c;
    UInt16x2_operator_add_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_add_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator-(u16x2)
    UInt16x2_operator_sub_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_sub_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_sub_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_sub_UInt16x2.name = "operator-"_c;
    UInt16x2_operator_sub_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_sub_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator*(u16x2)
    UInt16x2_operator_mul_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_mul_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_mul_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_mul_UInt16x2.name = "operator*"_c;
    UInt16x2_operator_mul_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_mul_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator/(u16x2)
    UInt16x2_operator_div_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_div_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_div_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_div_UInt16x2.name = "operator/"_c;
    UInt16x2_operator_div_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_div_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator%(u16x2)
    UInt16x2_operator_mod_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_mod_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_mod_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_mod_UInt16x2.name = "operator%"_c;
    UInt16x2_operator_mod_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_mod_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator+=(u16x2)
    UInt16x2_operator_addasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_addasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_addasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_addasg_UInt16x2.name = "operator+="_c;
    UInt16x2_operator_addasg_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_addasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator-=(u16x2)
    UInt16x2_operator_subasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_subasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_subasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_subasg_UInt16x2.name = "operator-="_c;
    UInt16x2_operator_subasg_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_subasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator*=(u16x2)
    UInt16x2_operator_mulasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_mulasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_mulasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_mulasg_UInt16x2.name = "operator*="_c;
    UInt16x2_operator_mulasg_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_mulasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator/=(u16x2)
    UInt16x2_operator_divasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_divasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_divasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_divasg_UInt16x2.name = "operator/="_c;
    UInt16x2_operator_divasg_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_divasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator<(u16x2)
    UInt16x2_operator_lt_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_lt_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_lt_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_lt_UInt16x2.name = "operator<"_c;
    UInt16x2_operator_lt_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_lt_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator<=(u16x2)
    UInt16x2_operator_lte_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_lte_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_lte_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_lte_UInt16x2.name = "operator<="_c;
    UInt16x2_operator_lte_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_lte_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator>(u16x2)
    UInt16x2_operator_gt_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_gt_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_gt_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_gt_UInt16x2.name = "operator>"_c;
    UInt16x2_operator_gt_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_gt_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator>=(u16x2)
    UInt16x2_operator_gte_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_gte_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_gte_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_gte_UInt16x2.name = "operator>="_c;
    UInt16x2_operator_gte_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_gte_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator==(u16x2)
    UInt16x2_operator_eq_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_eq_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_eq_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_eq_UInt16x2.name = "operator=="_c;
    UInt16x2_operator_eq_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_eq_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator!=(u16x2)
    UInt16x2_operator_neq_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_neq_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_neq_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_neq_UInt16x2.name = "operator!="_c;
    UInt16x2_operator_neq_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_neq_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator*(f32)
    UInt16x2_operator_scale_UInt16x2_Float32_arg0.name = "_arg0"_c;
    UInt16x2_operator_scale_UInt16x2_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16x2_Float32_arg0)->typeSymbol = &Float32Type;
    UInt16x2_operator_scale_UInt16x2_Float32.name = "operator*"_c;
    UInt16x2_operator_scale_UInt16x2_Float32.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16x2_Float32)->returnTypeSymbol = &UInt16x2Type;

    // operator*(f16)
    UInt16x2_operator_scale_UInt16x2_Float16_arg0.name = "_arg0"_c;
    UInt16x2_operator_scale_UInt16x2_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16x2_Float16_arg0)->typeSymbol = &Float16Type;
    UInt16x2_operator_scale_UInt16x2_Float16.name = "operator*"_c;
    UInt16x2_operator_scale_UInt16x2_Float16.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16x2_Float16)->returnTypeSymbol = &UInt16x2Type;

    // operator*(u32)
    UInt16x2_operator_scale_UInt16x2_UInt32_arg0.name = "_arg0"_c;
    UInt16x2_operator_scale_UInt16x2_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16x2_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt16x2_operator_scale_UInt16x2_UInt32.name = "operator*"_c;
    UInt16x2_operator_scale_UInt16x2_UInt32.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16x2_UInt32)->returnTypeSymbol = &UInt16x2Type;

    // operator*(u16)
    UInt16x2_operator_scale_UInt16x2_UInt16_arg0.name = "_arg0"_c;
    UInt16x2_operator_scale_UInt16x2_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16x2_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16x2_operator_scale_UInt16x2_UInt16.name = "operator*"_c;
    UInt16x2_operator_scale_UInt16x2_UInt16.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16x2_UInt16)->returnTypeSymbol = &UInt16x2Type;

    // operator*(i32)
    UInt16x2_operator_scale_UInt16x2_Int32_arg0.name = "_arg0"_c;
    UInt16x2_operator_scale_UInt16x2_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16x2_Int32_arg0)->typeSymbol = &Int32Type;
    UInt16x2_operator_scale_UInt16x2_Int32.name = "operator*"_c;
    UInt16x2_operator_scale_UInt16x2_Int32.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16x2_Int32)->returnTypeSymbol = &UInt16x2Type;

    // operator*(i16)
    UInt16x2_operator_scale_UInt16x2_Int16_arg0.name = "_arg0"_c;
    UInt16x2_operator_scale_UInt16x2_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16x2_Int16_arg0)->typeSymbol = &Int16Type;
    UInt16x2_operator_scale_UInt16x2_Int16.name = "operator*"_c;
    UInt16x2_operator_scale_UInt16x2_Int16.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16x2_Int16)->returnTypeSymbol = &UInt16x2Type;

    // operator|
    UInt16x2_operator_or_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_or_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_or_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_or_UInt16x2.name = "operator|"_c;
    UInt16x2_operator_or_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_or_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator&
    UInt16x2_operator_and_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_and_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_and_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_and_UInt16x2.name = "operator&"_c;
    UInt16x2_operator_and_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_and_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator^
    UInt16x2_operator_xor_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_xor_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_xor_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_xor_UInt16x2.name = "operator^"_c;
    UInt16x2_operator_xor_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_xor_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator<<
    UInt16x2_operator_lsh_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_lsh_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_lsh_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_lsh_UInt16x2.name = "operator<<"_c;
    UInt16x2_operator_lsh_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_lsh_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator>>
    UInt16x2_operator_rsh_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_rsh_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_rsh_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_rsh_UInt16x2.name = "operator>>"_c;
    UInt16x2_operator_rsh_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_rsh_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator|=
    UInt16x2_operator_orasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_orasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_orasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_orasg_UInt16x2.name = "operator|="_c;
    UInt16x2_operator_orasg_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_orasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator&=
    UInt16x2_operator_andasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_andasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_andasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_andasg_UInt16x2.name = "operator&="_c;
    UInt16x2_operator_andasg_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_andasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator^=
    UInt16x2_operator_xorasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_xorasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_xorasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_xorasg_UInt16x2.name = "operator^="_c;
    UInt16x2_operator_xorasg_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_xorasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator<<=
    UInt16x2_operator_lshasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_lshasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_lshasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_lshasg_UInt16x2.name = "operator<<="_c;
    UInt16x2_operator_lshasg_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_lshasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    // operator>>=
    UInt16x2_operator_rhsasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_rhsasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_rhsasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x2_operator_rhsasg_UInt16x2.name = "operator>>="_c;
    UInt16x2_operator_rhsasg_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&UInt16x2_operator_rhsasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "u16x2"_c, &UInt16x2_convert_Float32x2 },
        std::pair{ "u16x2(f32x2)"_c, &UInt16x2_convert_Float32x2 },
        std::pair{ "u16x2"_c, &UInt16x2_splat_Float32 },
        std::pair{ "u16x2(f32)"_c, &UInt16x2_splat_Float32 },
        std::pair{ "u16x2"_c, &UInt16x2_convert_UInt32x2 },
        std::pair{ "u16x2(u32x2)"_c, &UInt16x2_convert_UInt32x2 },
        std::pair{ "u16x2"_c, &UInt16x2_splat_UInt32 },
        std::pair{ "u16x2(u32)"_c, &UInt16x2_splat_UInt32 },
        std::pair{ "u16x2"_c, &UInt16x2_convert_Int32x2 },
        std::pair{ "u16x2(i32x2)"_c, &UInt16x2_convert_Int32x2 },
        std::pair{ "u16x2"_c, &UInt16x2_splat_Int32 },
        std::pair{ "u16x2(i32)"_c, &UInt16x2_splat_Int32 },
        std::pair{ "u16x2"_c, &UInt16x2_convert_Bool8x2 },
        std::pair{ "u16x2(b8x2)"_c, &UInt16x2_convert_Bool8x2 },
        std::pair{ "u16x2"_c, &UInt16x2_splat_Bool8 },
        std::pair{ "u16x2(b8)"_c, &UInt16x2_splat_Bool8 },
        std::pair{ "u16x2"_c, &UInt16x2_convert_Float16x2 },
        std::pair{ "u16x2(f16x2)"_c, &UInt16x2_convert_Float16x2 },
        std::pair{ "u16x2"_c, &UInt16x2_splat_Float16 },
        std::pair{ "u16x2(f16)"_c, &UInt16x2_splat_Float16 },
        std::pair{ "u16x2"_c, &UInt16x2_convert_UInt16x2 },
        std::pair{ "u16x2(u16x2)"_c, &UInt16x2_convert_UInt16x2 },
        std::pair{ "u16x2"_c, &UInt16x2_splat_UInt16 },
        std::pair{ "u16x2(u16)"_c, &UInt16x2_splat_UInt16 },
        std::pair{ "u16x2"_c, &UInt16x2_convert_Int16x2 },
        std::pair{ "u16x2(i16x2)"_c, &UInt16x2_convert_Int16x2 },
        std::pair{ "u16x2"_c, &UInt16x2_splat_Int16 },
        std::pair{ "u16x2(i16)"_c, &UInt16x2_splat_Int16 },
        std::pair{ "u16x2"_c, &UInt16x2_ctor0_UInt16_UInt16},
        std::pair{ "u16x2(u16,u16)"_c, &UInt16x2_ctor0_UInt16_UInt16},
        std::pair{ "operator[](i32)"_c, &UInt16x2_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &UInt16x2_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &UInt16x2_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &UInt16x2_operator_index_UInt16},
        std::pair{ "operator+(u16x2)"_c, &UInt16x2_operator_add_UInt16x2},
        std::pair{ "operator-(u16x2)"_c, &UInt16x2_operator_sub_UInt16x2},
        std::pair{ "operator*(u16x2)"_c, &UInt16x2_operator_mul_UInt16x2},
        std::pair{ "operator/(u16x2)"_c, &UInt16x2_operator_div_UInt16x2},
        std::pair{ "operator%(u16x2)"_c, &UInt16x2_operator_mod_UInt16x2},
        std::pair{ "operator+=(u16x2)"_c, &UInt16x2_operator_addasg_UInt16x2},
        std::pair{ "operator-=(u16x2)"_c, &UInt16x2_operator_subasg_UInt16x2},
        std::pair{ "operator*=(u16x2)"_c, &UInt16x2_operator_mulasg_UInt16x2},
        std::pair{ "operator/=(u16x2)"_c, &UInt16x2_operator_divasg_UInt16x2},
        std::pair{ "operator<(u16x2)"_c, &UInt16x2_operator_lt_UInt16x2},
        std::pair{ "operator<=(u16x2)"_c, &UInt16x2_operator_lte_UInt16x2},
        std::pair{ "operator>(u16x2)"_c, &UInt16x2_operator_gt_UInt16x2},
        std::pair{ "operator>=(u16x2)"_c, &UInt16x2_operator_gte_UInt16x2},
        std::pair{ "operator==(u16x2)"_c, &UInt16x2_operator_eq_UInt16x2},
        std::pair{ "operator!=(u16x2)"_c, &UInt16x2_operator_neq_UInt16x2},
        std::pair{ "operator*(f32)"_c, &UInt16x2_operator_scale_UInt16x2_Float32},
        std::pair{ "operator*(f16)"_c, &UInt16x2_operator_scale_UInt16x2_Float16},
        std::pair{ "operator*(u32)"_c, &UInt16x2_operator_scale_UInt16x2_UInt32},
        std::pair{ "operator*(u16)"_c, &UInt16x2_operator_scale_UInt16x2_UInt16},
        std::pair{ "operator*(i32)"_c, &UInt16x2_operator_scale_UInt16x2_Int32},
        std::pair{ "operator*(i16)"_c, &UInt16x2_operator_scale_UInt16x2_Int16},
        std::pair{ "operator|(u16x2)"_c, &UInt16x2_operator_or_UInt16x2},
        std::pair{ "operator&(u16x2)"_c, &UInt16x2_operator_and_UInt16x2},
        std::pair{ "operator^(u16x2)"_c, &UInt16x2_operator_xor_UInt16x2},
        std::pair{ "operator<<(u16x2)"_c, &UInt16x2_operator_lsh_UInt16x2},
        std::pair{ "operator>>(u16x2)"_c, &UInt16x2_operator_rsh_UInt16x2},
        std::pair{ "operator|=(u16x2)"_c, &UInt16x2_operator_orasg_UInt16x2},
        std::pair{ "operator&=(u16x2)"_c, &UInt16x2_operator_andasg_UInt16x2},
        std::pair{ "operator^=(u16x2)"_c, &UInt16x2_operator_xorasg_UInt16x2},
        std::pair{ "operator<<=(u16x2)"_c, &UInt16x2_operator_lshasg_UInt16x2},
        std::pair{ "operator>>=(u16x2)"_c, &UInt16x2_operator_rhsasg_UInt16x2}
    }
    };   
}

UInt16x3::UInt16x3()
{
    this->name = "u16";
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 6;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    // Conversion from Float32x3
    UInt16x3_convert_Float32x3_arg0.name = "_arg0"_c;
    UInt16x3_convert_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&UInt16x3_convert_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    UInt16x3_convert_Float32x3.name = "u16x3"_c;
    UInt16x3_convert_Float32x3.returnType = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_convert_Float32x3)->returnTypeSymbol = &UInt16x3Type;

    // Splat with Float32
    UInt16x3_splat_Float32_arg0.name = "_arg0"_c;
    UInt16x3_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&UInt16x3_splat_Float32_arg0)->typeSymbol = &Float32Type;
    UInt16x3_splat_Float32.name = "u16x3"_c;
    UInt16x3_splat_Float32.returnType = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_splat_Float32)->returnTypeSymbol = &UInt16x3Type;

    // Conversion from UInt32x3
    UInt16x3_convert_UInt32x3_arg0.name = "_arg0"_c;
    UInt16x3_convert_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&UInt16x3_convert_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    UInt16x3_convert_UInt32x3.name = "u16x3"_c;
    UInt16x3_convert_UInt32x3.returnType = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_convert_UInt32x3)->returnTypeSymbol = &UInt16x3Type;

    // Splat with UInt32
    UInt16x3_splat_UInt32_arg0.name = "_arg0"_c;
    UInt16x3_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt16x3_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt16x3_splat_UInt32.name = "u16x3"_c;
    UInt16x3_splat_UInt32.returnType = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_splat_UInt32)->returnTypeSymbol = &UInt16x3Type;

    // Conversion from Int32x3
    UInt16x3_convert_Int32x3_arg0.name = "_arg0"_c;
    UInt16x3_convert_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&UInt16x3_convert_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    UInt16x3_convert_Int32x3.name = "u16x3"_c;
    UInt16x3_convert_Int32x3.returnType = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_convert_Int32x3)->returnTypeSymbol = &UInt16x3Type;

    // Splat with Int32
    UInt16x3_splat_Int32_arg0.name = "_arg0"_c;
    UInt16x3_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt16x3_splat_Int32_arg0)->typeSymbol = &Int32Type;
    UInt16x3_splat_Int32.name = "u16x3"_c;
    UInt16x3_splat_Int32.returnType = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_splat_Int32)->returnTypeSymbol = &UInt16x3Type;

    // Conversion from Bool8x3
    UInt16x3_convert_Bool8x3_arg0.name = "_arg0"_c;
    UInt16x3_convert_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&UInt16x3_convert_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    UInt16x3_convert_Bool8x3.name = "u16x3"_c;
    UInt16x3_convert_Bool8x3.returnType = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_convert_Bool8x3)->returnTypeSymbol = &UInt16x3Type;

    // Splat with Bool8
    UInt16x3_splat_Bool8_arg0.name = "_arg0"_c;
    UInt16x3_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&UInt16x3_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    UInt16x3_splat_Bool8.name = "u16x3"_c;
    UInt16x3_splat_Bool8.returnType = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_splat_Bool8)->returnTypeSymbol = &UInt16x3Type;

    // Conversion from Float16x3
    UInt16x3_convert_Float16x3_arg0.name = "_arg0"_c;
    UInt16x3_convert_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&UInt16x3_convert_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    UInt16x3_convert_Float16x3.name = "u16x3"_c;
    UInt16x3_convert_Float16x3.returnType = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_convert_Float16x3)->returnTypeSymbol = &UInt16x3Type;

    // Splat with Float16
    UInt16x3_splat_Float16_arg0.name = "_arg0"_c;
    UInt16x3_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&UInt16x3_splat_Float16_arg0)->typeSymbol = &Float16Type;
    UInt16x3_splat_Float16.name = "u16x3"_c;
    UInt16x3_splat_Float16.returnType = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_splat_Float16)->returnTypeSymbol = &UInt16x3Type;

    // Conversion from UInt16x3
    UInt16x3_convert_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_convert_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_convert_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_convert_UInt16x3.name = "u16x3"_c;
    UInt16x3_convert_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_convert_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // Splat with UInt16
    UInt16x3_splat_UInt16_arg0.name = "_arg0"_c;
    UInt16x3_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x3_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16x3_splat_UInt16.name = "u16x3"_c;
    UInt16x3_splat_UInt16.returnType = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_splat_UInt16)->returnTypeSymbol = &UInt16x3Type;

    // Conversion from Int16x3
    UInt16x3_convert_Int16x3_arg0.name = "_arg0"_c;
    UInt16x3_convert_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&UInt16x3_convert_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    UInt16x3_convert_Int16x3.name = "u16x3"_c;
    UInt16x3_convert_Int16x3.returnType = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_convert_Int16x3)->returnTypeSymbol = &UInt16x3Type;

    // Splat with Int16
    UInt16x3_splat_Int16_arg0.name = "_arg0"_c;
    UInt16x3_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt16x3_splat_Int16_arg0)->typeSymbol = &Int16Type;
    UInt16x3_splat_Int16.name = "u16x3"_c;
    UInt16x3_splat_Int16.returnType = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_splat_Int16)->returnTypeSymbol = &UInt16x3Type;

    // Construct with UInt16, UInt16, UInt16
    UInt16x3_ctor0_arg0.name = "_arg0"_c;
    UInt16x3_ctor0_arg0.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x3_ctor0_arg0)->typeSymbol = &UInt16Type;
    UInt16x3_ctor0_arg1.name = "_arg1"_c;
    UInt16x3_ctor0_arg1.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x3_ctor0_arg1)->typeSymbol = &UInt16Type;
    UInt16x3_ctor0_arg2.name = "_arg2"_c;
    UInt16x3_ctor0_arg2.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x3_ctor0_arg2)->typeSymbol = &UInt16Type;
    UInt16x3_ctor0_UInt16_UInt16_UInt16.name = "0"_c;
    UInt16x3_ctor0_UInt16_UInt16_UInt16.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_ctor0_UInt16_UInt16_UInt16)->returnTypeSymbol = &UInt16x3Type;

    // Construct with UInt16x2, UInt16
    UInt16x3_ctor1_arg0.name = "_arg0"_c;
    UInt16x3_ctor1_arg0.type = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x3_ctor1_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x3_ctor1_arg1.name = "_arg1"_c;
    UInt16x3_ctor1_arg1.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x3_ctor1_arg1)->typeSymbol = &UInt16Type;
    UInt16x3_ctor1_UInt16x2_UInt16.name = "1"_c;
    UInt16x3_ctor1_UInt16x2_UInt16.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_ctor1_UInt16x2_UInt16)->returnTypeSymbol = &UInt16x3Type;

    // Construct with UInt16, UInt16x2
    UInt16x3_ctor2_arg0.name = "_arg0"_c;
    UInt16x3_ctor2_arg0.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x3_ctor2_arg0)->typeSymbol = &UInt16Type;
    UInt16x3_ctor2_arg1.name = "_arg1"_c;
    UInt16x3_ctor2_arg1.type = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x3_ctor2_arg1)->typeSymbol = &UInt16x2Type;
    UInt16x3_ctor2_UInt16_UInt16x2.name = "2"_c;
    UInt16x3_ctor2_UInt16_UInt16x2.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_ctor2_UInt16_UInt16x2)->returnTypeSymbol = &UInt16x3Type;

    // operator[](i32)
    UInt16x3_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt16x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt16x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    UInt16x3_operator_index_Int32.name = "operator[]"_c;
    UInt16x3_operator_index_Int32.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x3_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    // operator[](u32)
    UInt16x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt16x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt16x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt16x3_operator_index_UInt32.name = "operator[]"_c;
    UInt16x3_operator_index_UInt32.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x3_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    // operator[](i16)
    UInt16x3_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt16x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt16x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    UInt16x3_operator_index_Int16.name = "operator[]"_c;
    UInt16x3_operator_index_Int16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x3_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    // operator[](u16)
    UInt16x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt16x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16x3_operator_index_UInt16.name = "operator[]"_c;
    UInt16x3_operator_index_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x3_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator+(u16x3)
    UInt16x3_operator_add_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_add_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_add_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_add_UInt16x3.name = "operator+"_c;
    UInt16x3_operator_add_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_add_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator-(u16x3)
    UInt16x3_operator_sub_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_sub_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_sub_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_sub_UInt16x3.name = "operator-"_c;
    UInt16x3_operator_sub_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_sub_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator*(u16x3)
    UInt16x3_operator_mul_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_mul_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_mul_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_mul_UInt16x3.name = "operator*"_c;
    UInt16x3_operator_mul_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_mul_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator/(u16x3)
    UInt16x3_operator_div_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_div_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_div_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_div_UInt16x3.name = "operator/"_c;
    UInt16x3_operator_div_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_div_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator%(u16x3)
    UInt16x3_operator_mod_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_mod_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_mod_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_mod_UInt16x3.name = "operator%"_c;
    UInt16x3_operator_mod_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_mod_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator+=(u16x3)
    UInt16x3_operator_addasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_addasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_addasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_addasg_UInt16x3.name = "operator+="_c;
    UInt16x3_operator_addasg_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_addasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator-=(u16x3)
    UInt16x3_operator_subasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_subasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_subasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_subasg_UInt16x3.name = "operator-="_c;
    UInt16x3_operator_subasg_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_subasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator*=(u16x3)
    UInt16x3_operator_mulasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_mulasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_mulasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_mulasg_UInt16x3.name = "operator*="_c;
    UInt16x3_operator_mulasg_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_mulasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator/=(u16x3)
    UInt16x3_operator_divasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_divasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_divasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_divasg_UInt16x3.name = "operator/="_c;
    UInt16x3_operator_divasg_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_divasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator<(u16x3)
    UInt16x3_operator_lt_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_lt_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_lt_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_lt_UInt16x3.name = "operator<"_c;
    UInt16x3_operator_lt_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_lt_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator<=(u16x3)
    UInt16x3_operator_lte_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_lte_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_lte_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_lte_UInt16x3.name = "operator<="_c;
    UInt16x3_operator_lte_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_lte_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator>(u16x3)
    UInt16x3_operator_gt_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_gt_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_gt_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_gt_UInt16x3.name = "operator>"_c;
    UInt16x3_operator_gt_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_gt_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator>=(u16x3)
    UInt16x3_operator_gte_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_gte_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_gte_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_gte_UInt16x3.name = "operator>="_c;
    UInt16x3_operator_gte_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_gte_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator==(u16x3)
    UInt16x3_operator_eq_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_eq_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_eq_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_eq_UInt16x3.name = "operator=="_c;
    UInt16x3_operator_eq_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_eq_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator!=(u16x3)
    UInt16x3_operator_neq_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_neq_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_neq_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_neq_UInt16x3.name = "operator!="_c;
    UInt16x3_operator_neq_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_neq_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator*(f32)
    UInt16x3_operator_scale_UInt16x3_Float32_arg0.name = "_arg0"_c;
    UInt16x3_operator_scale_UInt16x3_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16x3_Float32_arg0)->typeSymbol = &Float32Type;
    UInt16x3_operator_scale_UInt16x3_Float32.name = "operator*"_c;
    UInt16x3_operator_scale_UInt16x3_Float32.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16x3_Float32)->returnTypeSymbol = &UInt16x3Type;

    // operator*(f16)
    UInt16x3_operator_scale_UInt16x3_Float16_arg0.name = "_arg0"_c;
    UInt16x3_operator_scale_UInt16x3_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16x3_Float16_arg0)->typeSymbol = &Float16Type;
    UInt16x3_operator_scale_UInt16x3_Float16.name = "operator*"_c;
    UInt16x3_operator_scale_UInt16x3_Float16.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16x3_Float16)->returnTypeSymbol = &UInt16x3Type;

    // operator*(u32)
    UInt16x3_operator_scale_UInt16x3_UInt32_arg0.name = "_arg0"_c;
    UInt16x3_operator_scale_UInt16x3_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16x3_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt16x3_operator_scale_UInt16x3_UInt32.name = "operator*"_c;
    UInt16x3_operator_scale_UInt16x3_UInt32.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16x3_UInt32)->returnTypeSymbol = &UInt16x3Type;

    // operator*(u16)
    UInt16x3_operator_scale_UInt16x3_UInt16_arg0.name = "_arg0"_c;
    UInt16x3_operator_scale_UInt16x3_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16x3_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16x3_operator_scale_UInt16x3_UInt16.name = "operator*"_c;
    UInt16x3_operator_scale_UInt16x3_UInt16.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16x3_UInt16)->returnTypeSymbol = &UInt16x3Type;

    // operator*(i32)
    UInt16x3_operator_scale_UInt16x3_Int32_arg0.name = "_arg0"_c;
    UInt16x3_operator_scale_UInt16x3_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16x3_Int32_arg0)->typeSymbol = &Int32Type;
    UInt16x3_operator_scale_UInt16x3_Int32.name = "operator*"_c;
    UInt16x3_operator_scale_UInt16x3_Int32.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16x3_Int32)->returnTypeSymbol = &UInt16x3Type;

    // operator*(i16)
    UInt16x3_operator_scale_UInt16x3_Int16_arg0.name = "_arg0"_c;
    UInt16x3_operator_scale_UInt16x3_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16x3_Int16_arg0)->typeSymbol = &Int16Type;
    UInt16x3_operator_scale_UInt16x3_Int16.name = "operator*"_c;
    UInt16x3_operator_scale_UInt16x3_Int16.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16x3_Int16)->returnTypeSymbol = &UInt16x3Type;

    // operator|
    UInt16x3_operator_or_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_or_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_or_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_or_UInt16x3.name = "operator|"_c;
    UInt16x3_operator_or_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_or_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator&
    UInt16x3_operator_and_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_and_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_and_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_and_UInt16x3.name = "operator&"_c;
    UInt16x3_operator_and_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_and_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator^
    UInt16x3_operator_xor_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_xor_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_xor_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_xor_UInt16x3.name = "operator^"_c;
    UInt16x3_operator_xor_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_xor_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator<<
    UInt16x3_operator_lsh_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_lsh_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_lsh_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_lsh_UInt16x3.name = "operator<<"_c;
    UInt16x3_operator_lsh_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_lsh_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator>>
    UInt16x3_operator_rsh_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_rsh_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_rsh_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_rsh_UInt16x3.name = "operator>>"_c;
    UInt16x3_operator_rsh_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_rsh_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator|=
    UInt16x3_operator_orasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_orasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_orasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_orasg_UInt16x3.name = "operator|="_c;
    UInt16x3_operator_orasg_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_orasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator&=
    UInt16x3_operator_andasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_andasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_andasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_andasg_UInt16x3.name = "operator&="_c;
    UInt16x3_operator_andasg_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_andasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator^=
    UInt16x3_operator_xorasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_xorasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_xorasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_xorasg_UInt16x3.name = "operator^="_c;
    UInt16x3_operator_xorasg_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_xorasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator<<=
    UInt16x3_operator_lshasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_lshasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_lshasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_lshasg_UInt16x3.name = "operator<<="_c;
    UInt16x3_operator_lshasg_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_lshasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    // operator>>=
    UInt16x3_operator_rhsasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_rhsasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_rhsasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x3_operator_rhsasg_UInt16x3.name = "operator>>="_c;
    UInt16x3_operator_rhsasg_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&UInt16x3_operator_rhsasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "u16x3"_c, &UInt16x3_convert_Float32x3 },
        std::pair{ "u16x3(f32x3)"_c, &UInt16x3_convert_Float32x3 },
        std::pair{ "u16x3"_c, &UInt16x3_splat_Float32 },
        std::pair{ "u16x3(f32)"_c, &UInt16x3_splat_Float32 },
        std::pair{ "u16x3"_c, &UInt16x3_convert_UInt32x3 },
        std::pair{ "u16x3(u32x3)"_c, &UInt16x3_convert_UInt32x3 },
        std::pair{ "u16x3"_c, &UInt16x3_splat_UInt32 },
        std::pair{ "u16x3(u32)"_c, &UInt16x3_splat_UInt32 },
        std::pair{ "u16x3"_c, &UInt16x3_convert_Int32x3 },
        std::pair{ "u16x3(i32x3)"_c, &UInt16x3_convert_Int32x3 },
        std::pair{ "u16x3"_c, &UInt16x3_splat_Int32 },
        std::pair{ "u16x3(i32)"_c, &UInt16x3_splat_Int32 },
        std::pair{ "u16x3"_c, &UInt16x3_convert_Bool8x3 },
        std::pair{ "u16x3(b8x3)"_c, &UInt16x3_convert_Bool8x3 },
        std::pair{ "u16x3"_c, &UInt16x3_splat_Bool8 },
        std::pair{ "u16x3(b8)"_c, &UInt16x3_splat_Bool8 },
        std::pair{ "u16x3"_c, &UInt16x3_convert_Float16x3 },
        std::pair{ "u16x3(f16x3)"_c, &UInt16x3_convert_Float16x3 },
        std::pair{ "u16x3"_c, &UInt16x3_splat_Float16 },
        std::pair{ "u16x3(f16)"_c, &UInt16x3_splat_Float16 },
        std::pair{ "u16x3"_c, &UInt16x3_convert_UInt16x3 },
        std::pair{ "u16x3(u16x3)"_c, &UInt16x3_convert_UInt16x3 },
        std::pair{ "u16x3"_c, &UInt16x3_splat_UInt16 },
        std::pair{ "u16x3(u16)"_c, &UInt16x3_splat_UInt16 },
        std::pair{ "u16x3"_c, &UInt16x3_convert_Int16x3 },
        std::pair{ "u16x3(i16x3)"_c, &UInt16x3_convert_Int16x3 },
        std::pair{ "u16x3"_c, &UInt16x3_splat_Int16 },
        std::pair{ "u16x3(i16)"_c, &UInt16x3_splat_Int16 },
        std::pair{ "u16x3"_c, &UInt16x3_ctor0_UInt16_UInt16_UInt16},
        std::pair{ "u16x3(u16,u16,u16)"_c, &UInt16x3_ctor0_UInt16_UInt16_UInt16},
        std::pair{ "u16x3"_c, &UInt16x3_ctor1_UInt16x2_UInt16},
        std::pair{ "u16x3(u16x2,u16)"_c, &UInt16x3_ctor1_UInt16x2_UInt16},
        std::pair{ "u16x3"_c, &UInt16x3_ctor2_UInt16_UInt16x2},
        std::pair{ "u16x3(u16,u16x2)"_c, &UInt16x3_ctor2_UInt16_UInt16x2},
        std::pair{ "operator[](i32)"_c, &UInt16x3_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &UInt16x3_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &UInt16x3_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &UInt16x3_operator_index_UInt16},
        std::pair{ "operator+(u16x3)"_c, &UInt16x3_operator_add_UInt16x3},
        std::pair{ "operator-(u16x3)"_c, &UInt16x3_operator_sub_UInt16x3},
        std::pair{ "operator*(u16x3)"_c, &UInt16x3_operator_mul_UInt16x3},
        std::pair{ "operator/(u16x3)"_c, &UInt16x3_operator_div_UInt16x3},
        std::pair{ "operator%(u16x3)"_c, &UInt16x3_operator_mod_UInt16x3},
        std::pair{ "operator+=(u16x3)"_c, &UInt16x3_operator_addasg_UInt16x3},
        std::pair{ "operator-=(u16x3)"_c, &UInt16x3_operator_subasg_UInt16x3},
        std::pair{ "operator*=(u16x3)"_c, &UInt16x3_operator_mulasg_UInt16x3},
        std::pair{ "operator/=(u16x3)"_c, &UInt16x3_operator_divasg_UInt16x3},
        std::pair{ "operator<(u16x3)"_c, &UInt16x3_operator_lt_UInt16x3},
        std::pair{ "operator<=(u16x3)"_c, &UInt16x3_operator_lte_UInt16x3},
        std::pair{ "operator>(u16x3)"_c, &UInt16x3_operator_gt_UInt16x3},
        std::pair{ "operator>=(u16x3)"_c, &UInt16x3_operator_gte_UInt16x3},
        std::pair{ "operator==(u16x3)"_c, &UInt16x3_operator_eq_UInt16x3},
        std::pair{ "operator!=(u16x3)"_c, &UInt16x3_operator_neq_UInt16x3},
        std::pair{ "operator*(f32)"_c, &UInt16x3_operator_scale_UInt16x3_Float32},
        std::pair{ "operator*(f16)"_c, &UInt16x3_operator_scale_UInt16x3_Float16},
        std::pair{ "operator*(u32)"_c, &UInt16x3_operator_scale_UInt16x3_UInt32},
        std::pair{ "operator*(u16)"_c, &UInt16x3_operator_scale_UInt16x3_UInt16},
        std::pair{ "operator*(i32)"_c, &UInt16x3_operator_scale_UInt16x3_Int32},
        std::pair{ "operator*(i16)"_c, &UInt16x3_operator_scale_UInt16x3_Int16},
        std::pair{ "operator|(u16x3)"_c, &UInt16x3_operator_or_UInt16x3},
        std::pair{ "operator&(u16x3)"_c, &UInt16x3_operator_and_UInt16x3},
        std::pair{ "operator^(u16x3)"_c, &UInt16x3_operator_xor_UInt16x3},
        std::pair{ "operator<<(u16x3)"_c, &UInt16x3_operator_lsh_UInt16x3},
        std::pair{ "operator>>(u16x3)"_c, &UInt16x3_operator_rsh_UInt16x3},
        std::pair{ "operator|=(u16x3)"_c, &UInt16x3_operator_orasg_UInt16x3},
        std::pair{ "operator&=(u16x3)"_c, &UInt16x3_operator_andasg_UInt16x3},
        std::pair{ "operator^=(u16x3)"_c, &UInt16x3_operator_xorasg_UInt16x3},
        std::pair{ "operator<<=(u16x3)"_c, &UInt16x3_operator_lshasg_UInt16x3},
        std::pair{ "operator>>=(u16x3)"_c, &UInt16x3_operator_rhsasg_UInt16x3}
    }
    };   
}

UInt16x4::UInt16x4()
{
    this->name = "u16";
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    // Conversion from Float32x4
    UInt16x4_convert_Float32x4_arg0.name = "_arg0"_c;
    UInt16x4_convert_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&UInt16x4_convert_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    UInt16x4_convert_Float32x4.name = "u16x4"_c;
    UInt16x4_convert_Float32x4.returnType = Type::FullType { UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_convert_Float32x4)->returnTypeSymbol = &UInt16x4Type;

    // Splat with Float32
    UInt16x4_splat_Float32_arg0.name = "_arg0"_c;
    UInt16x4_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&UInt16x4_splat_Float32_arg0)->typeSymbol = &Float32Type;
    UInt16x4_splat_Float32.name = "u16x4"_c;
    UInt16x4_splat_Float32.returnType = Type::FullType { UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_splat_Float32)->returnTypeSymbol = &UInt16x4Type;

    // Conversion from UInt32x4
    UInt16x4_convert_UInt32x4_arg0.name = "_arg0"_c;
    UInt16x4_convert_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&UInt16x4_convert_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    UInt16x4_convert_UInt32x4.name = "u16x4"_c;
    UInt16x4_convert_UInt32x4.returnType = Type::FullType { UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_convert_UInt32x4)->returnTypeSymbol = &UInt16x4Type;

    // Splat with UInt32
    UInt16x4_splat_UInt32_arg0.name = "_arg0"_c;
    UInt16x4_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt16x4_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt16x4_splat_UInt32.name = "u16x4"_c;
    UInt16x4_splat_UInt32.returnType = Type::FullType { UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_splat_UInt32)->returnTypeSymbol = &UInt16x4Type;

    // Conversion from Int32x4
    UInt16x4_convert_Int32x4_arg0.name = "_arg0"_c;
    UInt16x4_convert_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&UInt16x4_convert_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    UInt16x4_convert_Int32x4.name = "u16x4"_c;
    UInt16x4_convert_Int32x4.returnType = Type::FullType { UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_convert_Int32x4)->returnTypeSymbol = &UInt16x4Type;

    // Splat with Int32
    UInt16x4_splat_Int32_arg0.name = "_arg0"_c;
    UInt16x4_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt16x4_splat_Int32_arg0)->typeSymbol = &Int32Type;
    UInt16x4_splat_Int32.name = "u16x4"_c;
    UInt16x4_splat_Int32.returnType = Type::FullType { UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_splat_Int32)->returnTypeSymbol = &UInt16x4Type;

    // Conversion from Bool8x4
    UInt16x4_convert_Bool8x4_arg0.name = "_arg0"_c;
    UInt16x4_convert_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&UInt16x4_convert_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    UInt16x4_convert_Bool8x4.name = "u16x4"_c;
    UInt16x4_convert_Bool8x4.returnType = Type::FullType { UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_convert_Bool8x4)->returnTypeSymbol = &UInt16x4Type;

    // Splat with Bool8
    UInt16x4_splat_Bool8_arg0.name = "_arg0"_c;
    UInt16x4_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&UInt16x4_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    UInt16x4_splat_Bool8.name = "u16x4"_c;
    UInt16x4_splat_Bool8.returnType = Type::FullType { UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_splat_Bool8)->returnTypeSymbol = &UInt16x4Type;

    // Conversion from Float16x4
    UInt16x4_convert_Float16x4_arg0.name = "_arg0"_c;
    UInt16x4_convert_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&UInt16x4_convert_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    UInt16x4_convert_Float16x4.name = "u16x4"_c;
    UInt16x4_convert_Float16x4.returnType = Type::FullType { UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_convert_Float16x4)->returnTypeSymbol = &UInt16x4Type;

    // Splat with Float16
    UInt16x4_splat_Float16_arg0.name = "_arg0"_c;
    UInt16x4_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&UInt16x4_splat_Float16_arg0)->typeSymbol = &Float16Type;
    UInt16x4_splat_Float16.name = "u16x4"_c;
    UInt16x4_splat_Float16.returnType = Type::FullType { UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_splat_Float16)->returnTypeSymbol = &UInt16x4Type;

    // Conversion from UInt16x4
    UInt16x4_convert_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_convert_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_convert_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_convert_UInt16x4.name = "u16x4"_c;
    UInt16x4_convert_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_convert_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // Splat with UInt16
    UInt16x4_splat_UInt16_arg0.name = "_arg0"_c;
    UInt16x4_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x4_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16x4_splat_UInt16.name = "u16x4"_c;
    UInt16x4_splat_UInt16.returnType = Type::FullType { UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_splat_UInt16)->returnTypeSymbol = &UInt16x4Type;

    // Conversion from Int16x4
    UInt16x4_convert_Int16x4_arg0.name = "_arg0"_c;
    UInt16x4_convert_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&UInt16x4_convert_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    UInt16x4_convert_Int16x4.name = "u16x4"_c;
    UInt16x4_convert_Int16x4.returnType = Type::FullType { UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_convert_Int16x4)->returnTypeSymbol = &UInt16x4Type;

    // Splat with Int16
    UInt16x4_splat_Int16_arg0.name = "_arg0"_c;
    UInt16x4_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt16x4_splat_Int16_arg0)->typeSymbol = &Int16Type;
    UInt16x4_splat_Int16.name = "u16x4"_c;
    UInt16x4_splat_Int16.returnType = Type::FullType { UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_splat_Int16)->returnTypeSymbol = &UInt16x4Type;

    // Construct with UInt16, UInt16, UInt16, UInt16
    UInt16x4_ctor0_arg0.name = "_arg0"_c;
    UInt16x4_ctor0_arg0.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x4_ctor0_arg0)->typeSymbol = &UInt16Type;
    UInt16x4_ctor0_arg1.name = "_arg1"_c;
    UInt16x4_ctor0_arg1.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x4_ctor0_arg1)->typeSymbol = &UInt16Type;
    UInt16x4_ctor0_arg2.name = "_arg2"_c;
    UInt16x4_ctor0_arg2.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x4_ctor0_arg2)->typeSymbol = &UInt16Type;
    UInt16x4_ctor0_arg3.name = "_arg3"_c;
    UInt16x4_ctor0_arg3.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x4_ctor0_arg3)->typeSymbol = &UInt16Type;
    UInt16x4_ctor0_UInt16_UInt16_UInt16_UInt16.name = "0"_c;
    UInt16x4_ctor0_UInt16_UInt16_UInt16_UInt16.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_ctor0_UInt16_UInt16_UInt16_UInt16)->returnTypeSymbol = &UInt16x4Type;

    // Construct with UInt16x2, UInt16, UInt16
    UInt16x4_ctor1_arg0.name = "_arg0"_c;
    UInt16x4_ctor1_arg0.type = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x4_ctor1_arg0)->typeSymbol = &UInt16x2Type;
    UInt16x4_ctor1_arg1.name = "_arg1"_c;
    UInt16x4_ctor1_arg1.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x4_ctor1_arg1)->typeSymbol = &UInt16Type;
    UInt16x4_ctor1_arg2.name = "_arg2"_c;
    UInt16x4_ctor1_arg2.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x4_ctor1_arg2)->typeSymbol = &UInt16Type;
    UInt16x4_ctor1_UInt16x2_UInt16_UInt16.name = "1"_c;
    UInt16x4_ctor1_UInt16x2_UInt16_UInt16.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_ctor1_UInt16x2_UInt16_UInt16)->returnTypeSymbol = &UInt16x4Type;

    // Construct with UInt16, UInt16x2, UInt16
    UInt16x4_ctor2_arg0.name = "_arg0"_c;
    UInt16x4_ctor2_arg0.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x4_ctor2_arg0)->typeSymbol = &UInt16Type;
    UInt16x4_ctor2_arg1.name = "_arg1"_c;
    UInt16x4_ctor2_arg1.type = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x4_ctor2_arg1)->typeSymbol = &UInt16x2Type;
    UInt16x4_ctor2_arg2.name = "_arg2"_c;
    UInt16x4_ctor2_arg2.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x4_ctor2_arg2)->typeSymbol = &UInt16Type;
    UInt16x4_ctor2_UInt16_UInt16x2_UInt16.name = "2"_c;
    UInt16x4_ctor2_UInt16_UInt16x2_UInt16.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_ctor2_UInt16_UInt16x2_UInt16)->returnTypeSymbol = &UInt16x4Type;

    // Construct with UInt16, UInt16, UInt16x2
    UInt16x4_ctor3_arg0.name = "_arg0"_c;
    UInt16x4_ctor3_arg0.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x4_ctor3_arg0)->typeSymbol = &UInt16Type;
    UInt16x4_ctor3_arg1.name = "_arg1"_c;
    UInt16x4_ctor3_arg1.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x4_ctor3_arg1)->typeSymbol = &UInt16Type;
    UInt16x4_ctor3_arg2.name = "_arg2"_c;
    UInt16x4_ctor3_arg2.type = Type::FullType { UInt16x2Type.name };
    Symbol::Resolved(&UInt16x4_ctor3_arg2)->typeSymbol = &UInt16x2Type;
    UInt16x4_ctor3_UInt16_UInt16_UInt16x2.name = "3"_c;
    UInt16x4_ctor3_UInt16_UInt16_UInt16x2.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_ctor3_UInt16_UInt16_UInt16x2)->returnTypeSymbol = &UInt16x4Type;

    // Construct with UInt16x3, UInt16
    UInt16x4_ctor4_arg0.name = "_arg0"_c;
    UInt16x4_ctor4_arg0.type = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x4_ctor4_arg0)->typeSymbol = &UInt16x3Type;
    UInt16x4_ctor4_arg1.name = "_arg1"_c;
    UInt16x4_ctor4_arg1.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x4_ctor4_arg1)->typeSymbol = &UInt16Type;
    UInt16x4_ctor4_UInt16x3_UInt16.name = "4"_c;
    UInt16x4_ctor4_UInt16x3_UInt16.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_ctor4_UInt16x3_UInt16)->returnTypeSymbol = &UInt16x4Type;

    // Construct with UInt16, UInt16x3
    UInt16x4_ctor5_arg0.name = "_arg0"_c;
    UInt16x4_ctor5_arg0.type = Type::FullType { UInt16Type.name };
    Symbol::Resolved(&UInt16x4_ctor5_arg0)->typeSymbol = &UInt16Type;
    UInt16x4_ctor5_arg1.name = "_arg1"_c;
    UInt16x4_ctor5_arg1.type = Type::FullType { UInt16x3Type.name };
    Symbol::Resolved(&UInt16x4_ctor5_arg1)->typeSymbol = &UInt16x3Type;
    UInt16x4_ctor5_UInt16_UInt16x3.name = "5"_c;
    UInt16x4_ctor5_UInt16_UInt16x3.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_ctor5_UInt16_UInt16x3)->returnTypeSymbol = &UInt16x4Type;

    // operator[](i32)
    UInt16x4_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt16x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt16x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    UInt16x4_operator_index_Int32.name = "operator[]"_c;
    UInt16x4_operator_index_Int32.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x4_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    // operator[](u32)
    UInt16x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt16x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt16x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt16x4_operator_index_UInt32.name = "operator[]"_c;
    UInt16x4_operator_index_UInt32.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x4_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    // operator[](i16)
    UInt16x4_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt16x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt16x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    UInt16x4_operator_index_Int16.name = "operator[]"_c;
    UInt16x4_operator_index_Int16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x4_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    // operator[](u16)
    UInt16x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt16x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16x4_operator_index_UInt16.name = "operator[]"_c;
    UInt16x4_operator_index_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x4_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    // operator+(u16x4)
    UInt16x4_operator_add_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_add_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_add_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_add_UInt16x4.name = "operator+"_c;
    UInt16x4_operator_add_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_add_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator-(u16x4)
    UInt16x4_operator_sub_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_sub_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_sub_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_sub_UInt16x4.name = "operator-"_c;
    UInt16x4_operator_sub_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_sub_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator*(u16x4)
    UInt16x4_operator_mul_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_mul_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_mul_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_mul_UInt16x4.name = "operator*"_c;
    UInt16x4_operator_mul_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_mul_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator/(u16x4)
    UInt16x4_operator_div_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_div_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_div_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_div_UInt16x4.name = "operator/"_c;
    UInt16x4_operator_div_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_div_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator%(u16x4)
    UInt16x4_operator_mod_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_mod_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_mod_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_mod_UInt16x4.name = "operator%"_c;
    UInt16x4_operator_mod_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_mod_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator+=(u16x4)
    UInt16x4_operator_addasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_addasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_addasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_addasg_UInt16x4.name = "operator+="_c;
    UInt16x4_operator_addasg_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_addasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator-=(u16x4)
    UInt16x4_operator_subasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_subasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_subasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_subasg_UInt16x4.name = "operator-="_c;
    UInt16x4_operator_subasg_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_subasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator*=(u16x4)
    UInt16x4_operator_mulasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_mulasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_mulasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_mulasg_UInt16x4.name = "operator*="_c;
    UInt16x4_operator_mulasg_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_mulasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator/=(u16x4)
    UInt16x4_operator_divasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_divasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_divasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_divasg_UInt16x4.name = "operator/="_c;
    UInt16x4_operator_divasg_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_divasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator<(u16x4)
    UInt16x4_operator_lt_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_lt_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_lt_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_lt_UInt16x4.name = "operator<"_c;
    UInt16x4_operator_lt_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_lt_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator<=(u16x4)
    UInt16x4_operator_lte_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_lte_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_lte_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_lte_UInt16x4.name = "operator<="_c;
    UInt16x4_operator_lte_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_lte_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator>(u16x4)
    UInt16x4_operator_gt_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_gt_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_gt_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_gt_UInt16x4.name = "operator>"_c;
    UInt16x4_operator_gt_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_gt_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator>=(u16x4)
    UInt16x4_operator_gte_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_gte_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_gte_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_gte_UInt16x4.name = "operator>="_c;
    UInt16x4_operator_gte_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_gte_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator==(u16x4)
    UInt16x4_operator_eq_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_eq_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_eq_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_eq_UInt16x4.name = "operator=="_c;
    UInt16x4_operator_eq_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_eq_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator!=(u16x4)
    UInt16x4_operator_neq_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_neq_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_neq_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_neq_UInt16x4.name = "operator!="_c;
    UInt16x4_operator_neq_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_neq_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator*(f32)
    UInt16x4_operator_scale_UInt16x4_Float32_arg0.name = "_arg0"_c;
    UInt16x4_operator_scale_UInt16x4_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16x4_Float32_arg0)->typeSymbol = &Float32Type;
    UInt16x4_operator_scale_UInt16x4_Float32.name = "operator*"_c;
    UInt16x4_operator_scale_UInt16x4_Float32.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16x4_Float32)->returnTypeSymbol = &UInt16x4Type;

    // operator*(f16)
    UInt16x4_operator_scale_UInt16x4_Float16_arg0.name = "_arg0"_c;
    UInt16x4_operator_scale_UInt16x4_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16x4_Float16_arg0)->typeSymbol = &Float16Type;
    UInt16x4_operator_scale_UInt16x4_Float16.name = "operator*"_c;
    UInt16x4_operator_scale_UInt16x4_Float16.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16x4_Float16)->returnTypeSymbol = &UInt16x4Type;

    // operator*(u32)
    UInt16x4_operator_scale_UInt16x4_UInt32_arg0.name = "_arg0"_c;
    UInt16x4_operator_scale_UInt16x4_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16x4_UInt32_arg0)->typeSymbol = &UInt32Type;
    UInt16x4_operator_scale_UInt16x4_UInt32.name = "operator*"_c;
    UInt16x4_operator_scale_UInt16x4_UInt32.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16x4_UInt32)->returnTypeSymbol = &UInt16x4Type;

    // operator*(u16)
    UInt16x4_operator_scale_UInt16x4_UInt16_arg0.name = "_arg0"_c;
    UInt16x4_operator_scale_UInt16x4_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16x4_UInt16_arg0)->typeSymbol = &UInt16Type;
    UInt16x4_operator_scale_UInt16x4_UInt16.name = "operator*"_c;
    UInt16x4_operator_scale_UInt16x4_UInt16.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16x4_UInt16)->returnTypeSymbol = &UInt16x4Type;

    // operator*(i32)
    UInt16x4_operator_scale_UInt16x4_Int32_arg0.name = "_arg0"_c;
    UInt16x4_operator_scale_UInt16x4_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16x4_Int32_arg0)->typeSymbol = &Int32Type;
    UInt16x4_operator_scale_UInt16x4_Int32.name = "operator*"_c;
    UInt16x4_operator_scale_UInt16x4_Int32.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16x4_Int32)->returnTypeSymbol = &UInt16x4Type;

    // operator*(i16)
    UInt16x4_operator_scale_UInt16x4_Int16_arg0.name = "_arg0"_c;
    UInt16x4_operator_scale_UInt16x4_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16x4_Int16_arg0)->typeSymbol = &Int16Type;
    UInt16x4_operator_scale_UInt16x4_Int16.name = "operator*"_c;
    UInt16x4_operator_scale_UInt16x4_Int16.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16x4_Int16)->returnTypeSymbol = &UInt16x4Type;

    // operator|
    UInt16x4_operator_or_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_or_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_or_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_or_UInt16x4.name = "operator|"_c;
    UInt16x4_operator_or_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_or_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator&
    UInt16x4_operator_and_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_and_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_and_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_and_UInt16x4.name = "operator&"_c;
    UInt16x4_operator_and_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_and_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator^
    UInt16x4_operator_xor_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_xor_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_xor_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_xor_UInt16x4.name = "operator^"_c;
    UInt16x4_operator_xor_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_xor_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator<<
    UInt16x4_operator_lsh_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_lsh_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_lsh_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_lsh_UInt16x4.name = "operator<<"_c;
    UInt16x4_operator_lsh_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_lsh_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator>>
    UInt16x4_operator_rsh_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_rsh_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_rsh_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_rsh_UInt16x4.name = "operator>>"_c;
    UInt16x4_operator_rsh_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_rsh_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator|=
    UInt16x4_operator_orasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_orasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_orasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_orasg_UInt16x4.name = "operator|="_c;
    UInt16x4_operator_orasg_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_orasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator&=
    UInt16x4_operator_andasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_andasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_andasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_andasg_UInt16x4.name = "operator&="_c;
    UInt16x4_operator_andasg_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_andasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator^=
    UInt16x4_operator_xorasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_xorasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_xorasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_xorasg_UInt16x4.name = "operator^="_c;
    UInt16x4_operator_xorasg_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_xorasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator<<=
    UInt16x4_operator_lshasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_lshasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_lshasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_lshasg_UInt16x4.name = "operator<<="_c;
    UInt16x4_operator_lshasg_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_lshasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    // operator>>=
    UInt16x4_operator_rhsasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_rhsasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_rhsasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    UInt16x4_operator_rhsasg_UInt16x4.name = "operator>>="_c;
    UInt16x4_operator_rhsasg_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&UInt16x4_operator_rhsasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "u16x4"_c, &UInt16x4_convert_Float32x4 },
        std::pair{ "u16x4(f32x4)"_c, &UInt16x4_convert_Float32x4 },
        std::pair{ "u16x4"_c, &UInt16x4_splat_Float32 },
        std::pair{ "u16x4(f32)"_c, &UInt16x4_splat_Float32 },
        std::pair{ "u16x4"_c, &UInt16x4_convert_UInt32x4 },
        std::pair{ "u16x4(u32x4)"_c, &UInt16x4_convert_UInt32x4 },
        std::pair{ "u16x4"_c, &UInt16x4_splat_UInt32 },
        std::pair{ "u16x4(u32)"_c, &UInt16x4_splat_UInt32 },
        std::pair{ "u16x4"_c, &UInt16x4_convert_Int32x4 },
        std::pair{ "u16x4(i32x4)"_c, &UInt16x4_convert_Int32x4 },
        std::pair{ "u16x4"_c, &UInt16x4_splat_Int32 },
        std::pair{ "u16x4(i32)"_c, &UInt16x4_splat_Int32 },
        std::pair{ "u16x4"_c, &UInt16x4_convert_Bool8x4 },
        std::pair{ "u16x4(b8x4)"_c, &UInt16x4_convert_Bool8x4 },
        std::pair{ "u16x4"_c, &UInt16x4_splat_Bool8 },
        std::pair{ "u16x4(b8)"_c, &UInt16x4_splat_Bool8 },
        std::pair{ "u16x4"_c, &UInt16x4_convert_Float16x4 },
        std::pair{ "u16x4(f16x4)"_c, &UInt16x4_convert_Float16x4 },
        std::pair{ "u16x4"_c, &UInt16x4_splat_Float16 },
        std::pair{ "u16x4(f16)"_c, &UInt16x4_splat_Float16 },
        std::pair{ "u16x4"_c, &UInt16x4_convert_UInt16x4 },
        std::pair{ "u16x4(u16x4)"_c, &UInt16x4_convert_UInt16x4 },
        std::pair{ "u16x4"_c, &UInt16x4_splat_UInt16 },
        std::pair{ "u16x4(u16)"_c, &UInt16x4_splat_UInt16 },
        std::pair{ "u16x4"_c, &UInt16x4_convert_Int16x4 },
        std::pair{ "u16x4(i16x4)"_c, &UInt16x4_convert_Int16x4 },
        std::pair{ "u16x4"_c, &UInt16x4_splat_Int16 },
        std::pair{ "u16x4(i16)"_c, &UInt16x4_splat_Int16 },
        std::pair{ "u16x4"_c, &UInt16x4_ctor0_UInt16_UInt16_UInt16_UInt16},
        std::pair{ "u16x4(u16,u16,u16,u16)"_c, &UInt16x4_ctor0_UInt16_UInt16_UInt16_UInt16},
        std::pair{ "u16x4"_c, &UInt16x4_ctor1_UInt16x2_UInt16_UInt16},
        std::pair{ "u16x4(u16x2,u16,u16)"_c, &UInt16x4_ctor1_UInt16x2_UInt16_UInt16},
        std::pair{ "u16x4"_c, &UInt16x4_ctor2_UInt16_UInt16x2_UInt16},
        std::pair{ "u16x4(u16,u16x2,u16)"_c, &UInt16x4_ctor2_UInt16_UInt16x2_UInt16},
        std::pair{ "u16x4"_c, &UInt16x4_ctor3_UInt16_UInt16_UInt16x2},
        std::pair{ "u16x4(u16,u16,u16x2)"_c, &UInt16x4_ctor3_UInt16_UInt16_UInt16x2},
        std::pair{ "u16x4"_c, &UInt16x4_ctor4_UInt16x3_UInt16},
        std::pair{ "u16x4(u16x3,u16)"_c, &UInt16x4_ctor4_UInt16x3_UInt16},
        std::pair{ "u16x4"_c, &UInt16x4_ctor5_UInt16_UInt16x3},
        std::pair{ "u16x4(u16,u16x3)"_c, &UInt16x4_ctor5_UInt16_UInt16x3},
        std::pair{ "operator[](i32)"_c, &UInt16x4_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &UInt16x4_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &UInt16x4_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &UInt16x4_operator_index_UInt16},
        std::pair{ "operator+(u16x4)"_c, &UInt16x4_operator_add_UInt16x4},
        std::pair{ "operator-(u16x4)"_c, &UInt16x4_operator_sub_UInt16x4},
        std::pair{ "operator*(u16x4)"_c, &UInt16x4_operator_mul_UInt16x4},
        std::pair{ "operator/(u16x4)"_c, &UInt16x4_operator_div_UInt16x4},
        std::pair{ "operator%(u16x4)"_c, &UInt16x4_operator_mod_UInt16x4},
        std::pair{ "operator+=(u16x4)"_c, &UInt16x4_operator_addasg_UInt16x4},
        std::pair{ "operator-=(u16x4)"_c, &UInt16x4_operator_subasg_UInt16x4},
        std::pair{ "operator*=(u16x4)"_c, &UInt16x4_operator_mulasg_UInt16x4},
        std::pair{ "operator/=(u16x4)"_c, &UInt16x4_operator_divasg_UInt16x4},
        std::pair{ "operator<(u16x4)"_c, &UInt16x4_operator_lt_UInt16x4},
        std::pair{ "operator<=(u16x4)"_c, &UInt16x4_operator_lte_UInt16x4},
        std::pair{ "operator>(u16x4)"_c, &UInt16x4_operator_gt_UInt16x4},
        std::pair{ "operator>=(u16x4)"_c, &UInt16x4_operator_gte_UInt16x4},
        std::pair{ "operator==(u16x4)"_c, &UInt16x4_operator_eq_UInt16x4},
        std::pair{ "operator!=(u16x4)"_c, &UInt16x4_operator_neq_UInt16x4},
        std::pair{ "operator*(f32)"_c, &UInt16x4_operator_scale_UInt16x4_Float32},
        std::pair{ "operator*(f16)"_c, &UInt16x4_operator_scale_UInt16x4_Float16},
        std::pair{ "operator*(u32)"_c, &UInt16x4_operator_scale_UInt16x4_UInt32},
        std::pair{ "operator*(u16)"_c, &UInt16x4_operator_scale_UInt16x4_UInt16},
        std::pair{ "operator*(i32)"_c, &UInt16x4_operator_scale_UInt16x4_Int32},
        std::pair{ "operator*(i16)"_c, &UInt16x4_operator_scale_UInt16x4_Int16},
        std::pair{ "operator|(u16x4)"_c, &UInt16x4_operator_or_UInt16x4},
        std::pair{ "operator&(u16x4)"_c, &UInt16x4_operator_and_UInt16x4},
        std::pair{ "operator^(u16x4)"_c, &UInt16x4_operator_xor_UInt16x4},
        std::pair{ "operator<<(u16x4)"_c, &UInt16x4_operator_lsh_UInt16x4},
        std::pair{ "operator>>(u16x4)"_c, &UInt16x4_operator_rsh_UInt16x4},
        std::pair{ "operator|=(u16x4)"_c, &UInt16x4_operator_orasg_UInt16x4},
        std::pair{ "operator&=(u16x4)"_c, &UInt16x4_operator_andasg_UInt16x4},
        std::pair{ "operator^=(u16x4)"_c, &UInt16x4_operator_xorasg_UInt16x4},
        std::pair{ "operator<<=(u16x4)"_c, &UInt16x4_operator_lshasg_UInt16x4},
        std::pair{ "operator>>=(u16x4)"_c, &UInt16x4_operator_rhsasg_UInt16x4}
    }
    };   
}

Int16::Int16()
{
    this->name = "i16";
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    // Conversion from Float32
    Int16_convert_Float32_arg0.name = "_arg0"_c;
    Int16_convert_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Int16_convert_Float32_arg0)->typeSymbol = &Float32Type;
    Int16_convert_Float32.name = "i16"_c;
    Int16_convert_Float32.returnType = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16_convert_Float32)->returnTypeSymbol = &Int16Type;

    // Conversion from UInt32
    Int16_convert_UInt32_arg0.name = "_arg0"_c;
    Int16_convert_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int16_convert_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int16_convert_UInt32.name = "i16"_c;
    Int16_convert_UInt32.returnType = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16_convert_UInt32)->returnTypeSymbol = &Int16Type;

    // Conversion from Int32
    Int16_convert_Int32_arg0.name = "_arg0"_c;
    Int16_convert_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int16_convert_Int32_arg0)->typeSymbol = &Int32Type;
    Int16_convert_Int32.name = "i16"_c;
    Int16_convert_Int32.returnType = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16_convert_Int32)->returnTypeSymbol = &Int16Type;

    // Conversion from Bool8
    Int16_convert_Bool8_arg0.name = "_arg0"_c;
    Int16_convert_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Int16_convert_Bool8_arg0)->typeSymbol = &Bool8Type;
    Int16_convert_Bool8.name = "i16"_c;
    Int16_convert_Bool8.returnType = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16_convert_Bool8)->returnTypeSymbol = &Int16Type;

    // Conversion from Float16
    Int16_convert_Float16_arg0.name = "_arg0"_c;
    Int16_convert_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Int16_convert_Float16_arg0)->typeSymbol = &Float16Type;
    Int16_convert_Float16.name = "i16"_c;
    Int16_convert_Float16.returnType = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16_convert_Float16)->returnTypeSymbol = &Int16Type;

    // Conversion from UInt16
    Int16_convert_UInt16_arg0.name = "_arg0"_c;
    Int16_convert_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int16_convert_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int16_convert_UInt16.name = "i16"_c;
    Int16_convert_UInt16.returnType = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16_convert_UInt16)->returnTypeSymbol = &Int16Type;

    // Construct with Int16
    Int16_ctor0_arg0.name = "_arg0"_c;
    Int16_ctor0_arg0.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16_ctor0_arg0)->typeSymbol = &Int16Type;
    Int16_ctor0_Int16.name = "0"_c;
    Int16_ctor0_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_ctor0_Int16)->returnTypeSymbol = &Int16Type;

    // operator[](i32)
    Int16_operator_index_Int32_arg0.name = "_arg0"_c;
    Int16_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int16_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Int16_operator_index_Int32.name = "operator[]"_c;
    Int16_operator_index_Int32.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    // operator[](u32)
    Int16_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int16_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int16_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int16_operator_index_UInt32.name = "operator[]"_c;
    Int16_operator_index_UInt32.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    // operator[](i16)
    Int16_operator_index_Int16_arg0.name = "_arg0"_c;
    Int16_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_index_Int16.name = "operator[]"_c;
    Int16_operator_index_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    // operator[](u16)
    Int16_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int16_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int16_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int16_operator_index_UInt16.name = "operator[]"_c;
    Int16_operator_index_UInt16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    // operator+(i16)
    Int16_operator_add_Int16_arg0.name = "_arg0"_c;
    Int16_operator_add_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_add_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_add_Int16.name = "operator+"_c;
    Int16_operator_add_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_add_Int16)->returnTypeSymbol = &Int16Type;

    // operator-(i16)
    Int16_operator_sub_Int16_arg0.name = "_arg0"_c;
    Int16_operator_sub_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_sub_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_sub_Int16.name = "operator-"_c;
    Int16_operator_sub_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_sub_Int16)->returnTypeSymbol = &Int16Type;

    // operator*(i16)
    Int16_operator_mul_Int16_arg0.name = "_arg0"_c;
    Int16_operator_mul_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_mul_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_mul_Int16.name = "operator*"_c;
    Int16_operator_mul_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_mul_Int16)->returnTypeSymbol = &Int16Type;

    // operator/(i16)
    Int16_operator_div_Int16_arg0.name = "_arg0"_c;
    Int16_operator_div_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_div_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_div_Int16.name = "operator/"_c;
    Int16_operator_div_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_div_Int16)->returnTypeSymbol = &Int16Type;

    // operator%(i16)
    Int16_operator_mod_Int16_arg0.name = "_arg0"_c;
    Int16_operator_mod_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_mod_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_mod_Int16.name = "operator%"_c;
    Int16_operator_mod_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_mod_Int16)->returnTypeSymbol = &Int16Type;

    // operator+=(i16)
    Int16_operator_addasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_addasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_addasg_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_addasg_Int16.name = "operator+="_c;
    Int16_operator_addasg_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_addasg_Int16)->returnTypeSymbol = &Int16Type;

    // operator-=(i16)
    Int16_operator_subasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_subasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_subasg_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_subasg_Int16.name = "operator-="_c;
    Int16_operator_subasg_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_subasg_Int16)->returnTypeSymbol = &Int16Type;

    // operator*=(i16)
    Int16_operator_mulasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_mulasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_mulasg_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_mulasg_Int16.name = "operator*="_c;
    Int16_operator_mulasg_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_mulasg_Int16)->returnTypeSymbol = &Int16Type;

    // operator/=(i16)
    Int16_operator_divasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_divasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_divasg_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_divasg_Int16.name = "operator/="_c;
    Int16_operator_divasg_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_divasg_Int16)->returnTypeSymbol = &Int16Type;

    // operator<(i16)
    Int16_operator_lt_Int16_arg0.name = "_arg0"_c;
    Int16_operator_lt_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_lt_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_lt_Int16.name = "operator<"_c;
    Int16_operator_lt_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_lt_Int16)->returnTypeSymbol = &Int16Type;

    // operator<=(i16)
    Int16_operator_lte_Int16_arg0.name = "_arg0"_c;
    Int16_operator_lte_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_lte_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_lte_Int16.name = "operator<="_c;
    Int16_operator_lte_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_lte_Int16)->returnTypeSymbol = &Int16Type;

    // operator>(i16)
    Int16_operator_gt_Int16_arg0.name = "_arg0"_c;
    Int16_operator_gt_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_gt_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_gt_Int16.name = "operator>"_c;
    Int16_operator_gt_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_gt_Int16)->returnTypeSymbol = &Int16Type;

    // operator>=(i16)
    Int16_operator_gte_Int16_arg0.name = "_arg0"_c;
    Int16_operator_gte_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_gte_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_gte_Int16.name = "operator>="_c;
    Int16_operator_gte_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_gte_Int16)->returnTypeSymbol = &Int16Type;

    // operator==(i16)
    Int16_operator_eq_Int16_arg0.name = "_arg0"_c;
    Int16_operator_eq_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_eq_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_eq_Int16.name = "operator=="_c;
    Int16_operator_eq_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_eq_Int16)->returnTypeSymbol = &Int16Type;

    // operator!=(i16)
    Int16_operator_neq_Int16_arg0.name = "_arg0"_c;
    Int16_operator_neq_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_neq_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_neq_Int16.name = "operator!="_c;
    Int16_operator_neq_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_neq_Int16)->returnTypeSymbol = &Int16Type;

    // operator|
    Int16_operator_or_Int16_arg0.name = "_arg0"_c;
    Int16_operator_or_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_or_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_or_Int16.name = "operator|"_c;
    Int16_operator_or_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_or_Int16)->returnTypeSymbol = &Int16Type;

    // operator&
    Int16_operator_and_Int16_arg0.name = "_arg0"_c;
    Int16_operator_and_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_and_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_and_Int16.name = "operator&"_c;
    Int16_operator_and_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_and_Int16)->returnTypeSymbol = &Int16Type;

    // operator^
    Int16_operator_xor_Int16_arg0.name = "_arg0"_c;
    Int16_operator_xor_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_xor_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_xor_Int16.name = "operator^"_c;
    Int16_operator_xor_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_xor_Int16)->returnTypeSymbol = &Int16Type;

    // operator<<
    Int16_operator_lsh_Int16_arg0.name = "_arg0"_c;
    Int16_operator_lsh_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_lsh_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_lsh_Int16.name = "operator<<"_c;
    Int16_operator_lsh_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_lsh_Int16)->returnTypeSymbol = &Int16Type;

    // operator>>
    Int16_operator_rsh_Int16_arg0.name = "_arg0"_c;
    Int16_operator_rsh_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_rsh_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_rsh_Int16.name = "operator>>"_c;
    Int16_operator_rsh_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_rsh_Int16)->returnTypeSymbol = &Int16Type;

    // operator|=
    Int16_operator_orasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_orasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_orasg_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_orasg_Int16.name = "operator|="_c;
    Int16_operator_orasg_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_orasg_Int16)->returnTypeSymbol = &Int16Type;

    // operator&=
    Int16_operator_andasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_andasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_andasg_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_andasg_Int16.name = "operator&="_c;
    Int16_operator_andasg_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_andasg_Int16)->returnTypeSymbol = &Int16Type;

    // operator^=
    Int16_operator_xorasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_xorasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_xorasg_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_xorasg_Int16.name = "operator^="_c;
    Int16_operator_xorasg_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_xorasg_Int16)->returnTypeSymbol = &Int16Type;

    // operator<<=
    Int16_operator_lshasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_lshasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_lshasg_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_lshasg_Int16.name = "operator<<="_c;
    Int16_operator_lshasg_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_lshasg_Int16)->returnTypeSymbol = &Int16Type;

    // operator>>=
    Int16_operator_rhsasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_rhsasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_rhsasg_Int16_arg0)->typeSymbol = &Int16Type;
    Int16_operator_rhsasg_Int16.name = "operator>>="_c;
    Int16_operator_rhsasg_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16_operator_rhsasg_Int16)->returnTypeSymbol = &Int16Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "i16"_c, &Int16_convert_Float32 },
        std::pair{ "i16(f32)"_c, &Int16_convert_Float32 },
        std::pair{ "i16"_c, &Int16_convert_UInt32 },
        std::pair{ "i16(u32)"_c, &Int16_convert_UInt32 },
        std::pair{ "i16"_c, &Int16_convert_Int32 },
        std::pair{ "i16(i32)"_c, &Int16_convert_Int32 },
        std::pair{ "i16"_c, &Int16_convert_Bool8 },
        std::pair{ "i16(b8)"_c, &Int16_convert_Bool8 },
        std::pair{ "i16"_c, &Int16_convert_Float16 },
        std::pair{ "i16(f16)"_c, &Int16_convert_Float16 },
        std::pair{ "i16"_c, &Int16_convert_UInt16 },
        std::pair{ "i16(u16)"_c, &Int16_convert_UInt16 },
        std::pair{ "i16"_c, &Int16_ctor0_Int16},
        std::pair{ "i16(i16)"_c, &Int16_ctor0_Int16},
        std::pair{ "operator[](i32)"_c, &Int16_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Int16_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Int16_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Int16_operator_index_UInt16},
        std::pair{ "operator+(i16)"_c, &Int16_operator_add_Int16},
        std::pair{ "operator-(i16)"_c, &Int16_operator_sub_Int16},
        std::pair{ "operator*(i16)"_c, &Int16_operator_mul_Int16},
        std::pair{ "operator/(i16)"_c, &Int16_operator_div_Int16},
        std::pair{ "operator%(i16)"_c, &Int16_operator_mod_Int16},
        std::pair{ "operator+=(i16)"_c, &Int16_operator_addasg_Int16},
        std::pair{ "operator-=(i16)"_c, &Int16_operator_subasg_Int16},
        std::pair{ "operator*=(i16)"_c, &Int16_operator_mulasg_Int16},
        std::pair{ "operator/=(i16)"_c, &Int16_operator_divasg_Int16},
        std::pair{ "operator<(i16)"_c, &Int16_operator_lt_Int16},
        std::pair{ "operator<=(i16)"_c, &Int16_operator_lte_Int16},
        std::pair{ "operator>(i16)"_c, &Int16_operator_gt_Int16},
        std::pair{ "operator>=(i16)"_c, &Int16_operator_gte_Int16},
        std::pair{ "operator==(i16)"_c, &Int16_operator_eq_Int16},
        std::pair{ "operator!=(i16)"_c, &Int16_operator_neq_Int16},
        std::pair{ "operator|(i16)"_c, &Int16_operator_or_Int16},
        std::pair{ "operator&(i16)"_c, &Int16_operator_and_Int16},
        std::pair{ "operator^(i16)"_c, &Int16_operator_xor_Int16},
        std::pair{ "operator<<(i16)"_c, &Int16_operator_lsh_Int16},
        std::pair{ "operator>>(i16)"_c, &Int16_operator_rsh_Int16},
        std::pair{ "operator|=(i16)"_c, &Int16_operator_orasg_Int16},
        std::pair{ "operator&=(i16)"_c, &Int16_operator_andasg_Int16},
        std::pair{ "operator^=(i16)"_c, &Int16_operator_xorasg_Int16},
        std::pair{ "operator<<=(i16)"_c, &Int16_operator_lshasg_Int16},
        std::pair{ "operator>>=(i16)"_c, &Int16_operator_rhsasg_Int16}
    }
    };   
}

Int16x2::Int16x2()
{
    this->name = "i16";
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    // Conversion from Float32x2
    Int16x2_convert_Float32x2_arg0.name = "_arg0"_c;
    Int16x2_convert_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Int16x2_convert_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Int16x2_convert_Float32x2.name = "i16x2"_c;
    Int16x2_convert_Float32x2.returnType = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x2_convert_Float32x2)->returnTypeSymbol = &Int16x2Type;

    // Splat with Float32
    Int16x2_splat_Float32_arg0.name = "_arg0"_c;
    Int16x2_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Int16x2_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Int16x2_splat_Float32.name = "i16x2"_c;
    Int16x2_splat_Float32.returnType = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x2_splat_Float32)->returnTypeSymbol = &Int16x2Type;

    // Conversion from UInt32x2
    Int16x2_convert_UInt32x2_arg0.name = "_arg0"_c;
    Int16x2_convert_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&Int16x2_convert_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Int16x2_convert_UInt32x2.name = "i16x2"_c;
    Int16x2_convert_UInt32x2.returnType = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x2_convert_UInt32x2)->returnTypeSymbol = &Int16x2Type;

    // Splat with UInt32
    Int16x2_splat_UInt32_arg0.name = "_arg0"_c;
    Int16x2_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int16x2_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int16x2_splat_UInt32.name = "i16x2"_c;
    Int16x2_splat_UInt32.returnType = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x2_splat_UInt32)->returnTypeSymbol = &Int16x2Type;

    // Conversion from Int32x2
    Int16x2_convert_Int32x2_arg0.name = "_arg0"_c;
    Int16x2_convert_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&Int16x2_convert_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Int16x2_convert_Int32x2.name = "i16x2"_c;
    Int16x2_convert_Int32x2.returnType = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x2_convert_Int32x2)->returnTypeSymbol = &Int16x2Type;

    // Splat with Int32
    Int16x2_splat_Int32_arg0.name = "_arg0"_c;
    Int16x2_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int16x2_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Int16x2_splat_Int32.name = "i16x2"_c;
    Int16x2_splat_Int32.returnType = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x2_splat_Int32)->returnTypeSymbol = &Int16x2Type;

    // Conversion from Bool8x2
    Int16x2_convert_Bool8x2_arg0.name = "_arg0"_c;
    Int16x2_convert_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Symbol::Resolved(&Int16x2_convert_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Int16x2_convert_Bool8x2.name = "i16x2"_c;
    Int16x2_convert_Bool8x2.returnType = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x2_convert_Bool8x2)->returnTypeSymbol = &Int16x2Type;

    // Splat with Bool8
    Int16x2_splat_Bool8_arg0.name = "_arg0"_c;
    Int16x2_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Int16x2_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    Int16x2_splat_Bool8.name = "i16x2"_c;
    Int16x2_splat_Bool8.returnType = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x2_splat_Bool8)->returnTypeSymbol = &Int16x2Type;

    // Conversion from Float16x2
    Int16x2_convert_Float16x2_arg0.name = "_arg0"_c;
    Int16x2_convert_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Int16x2_convert_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Int16x2_convert_Float16x2.name = "i16x2"_c;
    Int16x2_convert_Float16x2.returnType = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x2_convert_Float16x2)->returnTypeSymbol = &Int16x2Type;

    // Splat with Float16
    Int16x2_splat_Float16_arg0.name = "_arg0"_c;
    Int16x2_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Int16x2_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Int16x2_splat_Float16.name = "i16x2"_c;
    Int16x2_splat_Float16.returnType = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x2_splat_Float16)->returnTypeSymbol = &Int16x2Type;

    // Conversion from UInt16x2
    Int16x2_convert_UInt16x2_arg0.name = "_arg0"_c;
    Int16x2_convert_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&Int16x2_convert_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Int16x2_convert_UInt16x2.name = "i16x2"_c;
    Int16x2_convert_UInt16x2.returnType = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x2_convert_UInt16x2)->returnTypeSymbol = &Int16x2Type;

    // Splat with UInt16
    Int16x2_splat_UInt16_arg0.name = "_arg0"_c;
    Int16x2_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int16x2_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int16x2_splat_UInt16.name = "i16x2"_c;
    Int16x2_splat_UInt16.returnType = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x2_splat_UInt16)->returnTypeSymbol = &Int16x2Type;

    // Conversion from Int16x2
    Int16x2_convert_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_convert_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_convert_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_convert_Int16x2.name = "i16x2"_c;
    Int16x2_convert_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x2_convert_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // Splat with Int16
    Int16x2_splat_Int16_arg0.name = "_arg0"_c;
    Int16x2_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x2_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Int16x2_splat_Int16.name = "i16x2"_c;
    Int16x2_splat_Int16.returnType = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x2_splat_Int16)->returnTypeSymbol = &Int16x2Type;

    // Construct with Int16, Int16
    Int16x2_ctor0_arg0.name = "_arg0"_c;
    Int16x2_ctor0_arg0.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x2_ctor0_arg0)->typeSymbol = &Int16Type;
    Int16x2_ctor0_arg1.name = "_arg1"_c;
    Int16x2_ctor0_arg1.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x2_ctor0_arg1)->typeSymbol = &Int16Type;
    Int16x2_ctor0_Int16_Int16.name = "0"_c;
    Int16x2_ctor0_Int16_Int16.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_ctor0_Int16_Int16)->returnTypeSymbol = &Int16x2Type;

    // operator[](i32)
    Int16x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Int16x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int16x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Int16x2_operator_index_Int32.name = "operator[]"_c;
    Int16x2_operator_index_Int32.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x2_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    // operator[](u32)
    Int16x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int16x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int16x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int16x2_operator_index_UInt32.name = "operator[]"_c;
    Int16x2_operator_index_UInt32.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x2_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    // operator[](i16)
    Int16x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Int16x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Int16x2_operator_index_Int16.name = "operator[]"_c;
    Int16x2_operator_index_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x2_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    // operator[](u16)
    Int16x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int16x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int16x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int16x2_operator_index_UInt16.name = "operator[]"_c;
    Int16x2_operator_index_UInt16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x2_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    // operator+(i16x2)
    Int16x2_operator_add_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_add_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_add_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_add_Int16x2.name = "operator+"_c;
    Int16x2_operator_add_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_add_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator-(i16x2)
    Int16x2_operator_sub_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_sub_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_sub_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_sub_Int16x2.name = "operator-"_c;
    Int16x2_operator_sub_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_sub_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator*(i16x2)
    Int16x2_operator_mul_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_mul_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_mul_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_mul_Int16x2.name = "operator*"_c;
    Int16x2_operator_mul_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_mul_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator/(i16x2)
    Int16x2_operator_div_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_div_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_div_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_div_Int16x2.name = "operator/"_c;
    Int16x2_operator_div_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_div_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator%(i16x2)
    Int16x2_operator_mod_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_mod_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_mod_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_mod_Int16x2.name = "operator%"_c;
    Int16x2_operator_mod_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_mod_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator+=(i16x2)
    Int16x2_operator_addasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_addasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_addasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_addasg_Int16x2.name = "operator+="_c;
    Int16x2_operator_addasg_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_addasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator-=(i16x2)
    Int16x2_operator_subasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_subasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_subasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_subasg_Int16x2.name = "operator-="_c;
    Int16x2_operator_subasg_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_subasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator*=(i16x2)
    Int16x2_operator_mulasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_mulasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_mulasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_mulasg_Int16x2.name = "operator*="_c;
    Int16x2_operator_mulasg_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_mulasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator/=(i16x2)
    Int16x2_operator_divasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_divasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_divasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_divasg_Int16x2.name = "operator/="_c;
    Int16x2_operator_divasg_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_divasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator<(i16x2)
    Int16x2_operator_lt_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_lt_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_lt_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_lt_Int16x2.name = "operator<"_c;
    Int16x2_operator_lt_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_lt_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator<=(i16x2)
    Int16x2_operator_lte_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_lte_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_lte_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_lte_Int16x2.name = "operator<="_c;
    Int16x2_operator_lte_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_lte_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator>(i16x2)
    Int16x2_operator_gt_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_gt_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_gt_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_gt_Int16x2.name = "operator>"_c;
    Int16x2_operator_gt_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_gt_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator>=(i16x2)
    Int16x2_operator_gte_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_gte_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_gte_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_gte_Int16x2.name = "operator>="_c;
    Int16x2_operator_gte_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_gte_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator==(i16x2)
    Int16x2_operator_eq_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_eq_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_eq_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_eq_Int16x2.name = "operator=="_c;
    Int16x2_operator_eq_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_eq_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator!=(i16x2)
    Int16x2_operator_neq_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_neq_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_neq_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_neq_Int16x2.name = "operator!="_c;
    Int16x2_operator_neq_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_neq_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator*(f32)
    Int16x2_operator_scale_Int16x2_Float32_arg0.name = "_arg0"_c;
    Int16x2_operator_scale_Int16x2_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Int16x2_operator_scale_Int16x2_Float32_arg0)->typeSymbol = &Float32Type;
    Int16x2_operator_scale_Int16x2_Float32.name = "operator*"_c;
    Int16x2_operator_scale_Int16x2_Float32.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_scale_Int16x2_Float32)->returnTypeSymbol = &Int16x2Type;

    // operator*(f16)
    Int16x2_operator_scale_Int16x2_Float16_arg0.name = "_arg0"_c;
    Int16x2_operator_scale_Int16x2_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Int16x2_operator_scale_Int16x2_Float16_arg0)->typeSymbol = &Float16Type;
    Int16x2_operator_scale_Int16x2_Float16.name = "operator*"_c;
    Int16x2_operator_scale_Int16x2_Float16.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_scale_Int16x2_Float16)->returnTypeSymbol = &Int16x2Type;

    // operator*(u32)
    Int16x2_operator_scale_Int16x2_UInt32_arg0.name = "_arg0"_c;
    Int16x2_operator_scale_Int16x2_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int16x2_operator_scale_Int16x2_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int16x2_operator_scale_Int16x2_UInt32.name = "operator*"_c;
    Int16x2_operator_scale_Int16x2_UInt32.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_scale_Int16x2_UInt32)->returnTypeSymbol = &Int16x2Type;

    // operator*(u16)
    Int16x2_operator_scale_Int16x2_UInt16_arg0.name = "_arg0"_c;
    Int16x2_operator_scale_Int16x2_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int16x2_operator_scale_Int16x2_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int16x2_operator_scale_Int16x2_UInt16.name = "operator*"_c;
    Int16x2_operator_scale_Int16x2_UInt16.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_scale_Int16x2_UInt16)->returnTypeSymbol = &Int16x2Type;

    // operator*(i32)
    Int16x2_operator_scale_Int16x2_Int32_arg0.name = "_arg0"_c;
    Int16x2_operator_scale_Int16x2_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int16x2_operator_scale_Int16x2_Int32_arg0)->typeSymbol = &Int32Type;
    Int16x2_operator_scale_Int16x2_Int32.name = "operator*"_c;
    Int16x2_operator_scale_Int16x2_Int32.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_scale_Int16x2_Int32)->returnTypeSymbol = &Int16x2Type;

    // operator*(i16)
    Int16x2_operator_scale_Int16x2_Int16_arg0.name = "_arg0"_c;
    Int16x2_operator_scale_Int16x2_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x2_operator_scale_Int16x2_Int16_arg0)->typeSymbol = &Int16Type;
    Int16x2_operator_scale_Int16x2_Int16.name = "operator*"_c;
    Int16x2_operator_scale_Int16x2_Int16.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_scale_Int16x2_Int16)->returnTypeSymbol = &Int16x2Type;

    // operator|
    Int16x2_operator_or_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_or_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_or_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_or_Int16x2.name = "operator|"_c;
    Int16x2_operator_or_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_or_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator&
    Int16x2_operator_and_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_and_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_and_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_and_Int16x2.name = "operator&"_c;
    Int16x2_operator_and_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_and_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator^
    Int16x2_operator_xor_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_xor_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_xor_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_xor_Int16x2.name = "operator^"_c;
    Int16x2_operator_xor_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_xor_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator<<
    Int16x2_operator_lsh_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_lsh_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_lsh_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_lsh_Int16x2.name = "operator<<"_c;
    Int16x2_operator_lsh_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_lsh_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator>>
    Int16x2_operator_rsh_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_rsh_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_rsh_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_rsh_Int16x2.name = "operator>>"_c;
    Int16x2_operator_rsh_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_rsh_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator|=
    Int16x2_operator_orasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_orasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_orasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_orasg_Int16x2.name = "operator|="_c;
    Int16x2_operator_orasg_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_orasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator&=
    Int16x2_operator_andasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_andasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_andasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_andasg_Int16x2.name = "operator&="_c;
    Int16x2_operator_andasg_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_andasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator^=
    Int16x2_operator_xorasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_xorasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_xorasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_xorasg_Int16x2.name = "operator^="_c;
    Int16x2_operator_xorasg_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_xorasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator<<=
    Int16x2_operator_lshasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_lshasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_lshasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_lshasg_Int16x2.name = "operator<<="_c;
    Int16x2_operator_lshasg_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_lshasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    // operator>>=
    Int16x2_operator_rhsasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_rhsasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_rhsasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Int16x2_operator_rhsasg_Int16x2.name = "operator>>="_c;
    Int16x2_operator_rhsasg_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&Int16x2_operator_rhsasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "i16x2"_c, &Int16x2_convert_Float32x2 },
        std::pair{ "i16x2(f32x2)"_c, &Int16x2_convert_Float32x2 },
        std::pair{ "i16x2"_c, &Int16x2_splat_Float32 },
        std::pair{ "i16x2(f32)"_c, &Int16x2_splat_Float32 },
        std::pair{ "i16x2"_c, &Int16x2_convert_UInt32x2 },
        std::pair{ "i16x2(u32x2)"_c, &Int16x2_convert_UInt32x2 },
        std::pair{ "i16x2"_c, &Int16x2_splat_UInt32 },
        std::pair{ "i16x2(u32)"_c, &Int16x2_splat_UInt32 },
        std::pair{ "i16x2"_c, &Int16x2_convert_Int32x2 },
        std::pair{ "i16x2(i32x2)"_c, &Int16x2_convert_Int32x2 },
        std::pair{ "i16x2"_c, &Int16x2_splat_Int32 },
        std::pair{ "i16x2(i32)"_c, &Int16x2_splat_Int32 },
        std::pair{ "i16x2"_c, &Int16x2_convert_Bool8x2 },
        std::pair{ "i16x2(b8x2)"_c, &Int16x2_convert_Bool8x2 },
        std::pair{ "i16x2"_c, &Int16x2_splat_Bool8 },
        std::pair{ "i16x2(b8)"_c, &Int16x2_splat_Bool8 },
        std::pair{ "i16x2"_c, &Int16x2_convert_Float16x2 },
        std::pair{ "i16x2(f16x2)"_c, &Int16x2_convert_Float16x2 },
        std::pair{ "i16x2"_c, &Int16x2_splat_Float16 },
        std::pair{ "i16x2(f16)"_c, &Int16x2_splat_Float16 },
        std::pair{ "i16x2"_c, &Int16x2_convert_UInt16x2 },
        std::pair{ "i16x2(u16x2)"_c, &Int16x2_convert_UInt16x2 },
        std::pair{ "i16x2"_c, &Int16x2_splat_UInt16 },
        std::pair{ "i16x2(u16)"_c, &Int16x2_splat_UInt16 },
        std::pair{ "i16x2"_c, &Int16x2_convert_Int16x2 },
        std::pair{ "i16x2(i16x2)"_c, &Int16x2_convert_Int16x2 },
        std::pair{ "i16x2"_c, &Int16x2_splat_Int16 },
        std::pair{ "i16x2(i16)"_c, &Int16x2_splat_Int16 },
        std::pair{ "i16x2"_c, &Int16x2_ctor0_Int16_Int16},
        std::pair{ "i16x2(i16,i16)"_c, &Int16x2_ctor0_Int16_Int16},
        std::pair{ "operator[](i32)"_c, &Int16x2_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Int16x2_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Int16x2_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Int16x2_operator_index_UInt16},
        std::pair{ "operator+(i16x2)"_c, &Int16x2_operator_add_Int16x2},
        std::pair{ "operator-(i16x2)"_c, &Int16x2_operator_sub_Int16x2},
        std::pair{ "operator*(i16x2)"_c, &Int16x2_operator_mul_Int16x2},
        std::pair{ "operator/(i16x2)"_c, &Int16x2_operator_div_Int16x2},
        std::pair{ "operator%(i16x2)"_c, &Int16x2_operator_mod_Int16x2},
        std::pair{ "operator+=(i16x2)"_c, &Int16x2_operator_addasg_Int16x2},
        std::pair{ "operator-=(i16x2)"_c, &Int16x2_operator_subasg_Int16x2},
        std::pair{ "operator*=(i16x2)"_c, &Int16x2_operator_mulasg_Int16x2},
        std::pair{ "operator/=(i16x2)"_c, &Int16x2_operator_divasg_Int16x2},
        std::pair{ "operator<(i16x2)"_c, &Int16x2_operator_lt_Int16x2},
        std::pair{ "operator<=(i16x2)"_c, &Int16x2_operator_lte_Int16x2},
        std::pair{ "operator>(i16x2)"_c, &Int16x2_operator_gt_Int16x2},
        std::pair{ "operator>=(i16x2)"_c, &Int16x2_operator_gte_Int16x2},
        std::pair{ "operator==(i16x2)"_c, &Int16x2_operator_eq_Int16x2},
        std::pair{ "operator!=(i16x2)"_c, &Int16x2_operator_neq_Int16x2},
        std::pair{ "operator*(f32)"_c, &Int16x2_operator_scale_Int16x2_Float32},
        std::pair{ "operator*(f16)"_c, &Int16x2_operator_scale_Int16x2_Float16},
        std::pair{ "operator*(u32)"_c, &Int16x2_operator_scale_Int16x2_UInt32},
        std::pair{ "operator*(u16)"_c, &Int16x2_operator_scale_Int16x2_UInt16},
        std::pair{ "operator*(i32)"_c, &Int16x2_operator_scale_Int16x2_Int32},
        std::pair{ "operator*(i16)"_c, &Int16x2_operator_scale_Int16x2_Int16},
        std::pair{ "operator|(i16x2)"_c, &Int16x2_operator_or_Int16x2},
        std::pair{ "operator&(i16x2)"_c, &Int16x2_operator_and_Int16x2},
        std::pair{ "operator^(i16x2)"_c, &Int16x2_operator_xor_Int16x2},
        std::pair{ "operator<<(i16x2)"_c, &Int16x2_operator_lsh_Int16x2},
        std::pair{ "operator>>(i16x2)"_c, &Int16x2_operator_rsh_Int16x2},
        std::pair{ "operator|=(i16x2)"_c, &Int16x2_operator_orasg_Int16x2},
        std::pair{ "operator&=(i16x2)"_c, &Int16x2_operator_andasg_Int16x2},
        std::pair{ "operator^=(i16x2)"_c, &Int16x2_operator_xorasg_Int16x2},
        std::pair{ "operator<<=(i16x2)"_c, &Int16x2_operator_lshasg_Int16x2},
        std::pair{ "operator>>=(i16x2)"_c, &Int16x2_operator_rhsasg_Int16x2}
    }
    };   
}

Int16x3::Int16x3()
{
    this->name = "i16";
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 6;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    // Conversion from Float32x3
    Int16x3_convert_Float32x3_arg0.name = "_arg0"_c;
    Int16x3_convert_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Int16x3_convert_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Int16x3_convert_Float32x3.name = "i16x3"_c;
    Int16x3_convert_Float32x3.returnType = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x3_convert_Float32x3)->returnTypeSymbol = &Int16x3Type;

    // Splat with Float32
    Int16x3_splat_Float32_arg0.name = "_arg0"_c;
    Int16x3_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Int16x3_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Int16x3_splat_Float32.name = "i16x3"_c;
    Int16x3_splat_Float32.returnType = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x3_splat_Float32)->returnTypeSymbol = &Int16x3Type;

    // Conversion from UInt32x3
    Int16x3_convert_UInt32x3_arg0.name = "_arg0"_c;
    Int16x3_convert_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&Int16x3_convert_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Int16x3_convert_UInt32x3.name = "i16x3"_c;
    Int16x3_convert_UInt32x3.returnType = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x3_convert_UInt32x3)->returnTypeSymbol = &Int16x3Type;

    // Splat with UInt32
    Int16x3_splat_UInt32_arg0.name = "_arg0"_c;
    Int16x3_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int16x3_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int16x3_splat_UInt32.name = "i16x3"_c;
    Int16x3_splat_UInt32.returnType = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x3_splat_UInt32)->returnTypeSymbol = &Int16x3Type;

    // Conversion from Int32x3
    Int16x3_convert_Int32x3_arg0.name = "_arg0"_c;
    Int16x3_convert_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&Int16x3_convert_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Int16x3_convert_Int32x3.name = "i16x3"_c;
    Int16x3_convert_Int32x3.returnType = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x3_convert_Int32x3)->returnTypeSymbol = &Int16x3Type;

    // Splat with Int32
    Int16x3_splat_Int32_arg0.name = "_arg0"_c;
    Int16x3_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int16x3_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Int16x3_splat_Int32.name = "i16x3"_c;
    Int16x3_splat_Int32.returnType = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x3_splat_Int32)->returnTypeSymbol = &Int16x3Type;

    // Conversion from Bool8x3
    Int16x3_convert_Bool8x3_arg0.name = "_arg0"_c;
    Int16x3_convert_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Symbol::Resolved(&Int16x3_convert_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Int16x3_convert_Bool8x3.name = "i16x3"_c;
    Int16x3_convert_Bool8x3.returnType = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x3_convert_Bool8x3)->returnTypeSymbol = &Int16x3Type;

    // Splat with Bool8
    Int16x3_splat_Bool8_arg0.name = "_arg0"_c;
    Int16x3_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Int16x3_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    Int16x3_splat_Bool8.name = "i16x3"_c;
    Int16x3_splat_Bool8.returnType = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x3_splat_Bool8)->returnTypeSymbol = &Int16x3Type;

    // Conversion from Float16x3
    Int16x3_convert_Float16x3_arg0.name = "_arg0"_c;
    Int16x3_convert_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Int16x3_convert_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Int16x3_convert_Float16x3.name = "i16x3"_c;
    Int16x3_convert_Float16x3.returnType = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x3_convert_Float16x3)->returnTypeSymbol = &Int16x3Type;

    // Splat with Float16
    Int16x3_splat_Float16_arg0.name = "_arg0"_c;
    Int16x3_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Int16x3_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Int16x3_splat_Float16.name = "i16x3"_c;
    Int16x3_splat_Float16.returnType = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x3_splat_Float16)->returnTypeSymbol = &Int16x3Type;

    // Conversion from UInt16x3
    Int16x3_convert_UInt16x3_arg0.name = "_arg0"_c;
    Int16x3_convert_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&Int16x3_convert_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Int16x3_convert_UInt16x3.name = "i16x3"_c;
    Int16x3_convert_UInt16x3.returnType = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x3_convert_UInt16x3)->returnTypeSymbol = &Int16x3Type;

    // Splat with UInt16
    Int16x3_splat_UInt16_arg0.name = "_arg0"_c;
    Int16x3_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int16x3_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int16x3_splat_UInt16.name = "i16x3"_c;
    Int16x3_splat_UInt16.returnType = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x3_splat_UInt16)->returnTypeSymbol = &Int16x3Type;

    // Conversion from Int16x3
    Int16x3_convert_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_convert_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_convert_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_convert_Int16x3.name = "i16x3"_c;
    Int16x3_convert_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x3_convert_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // Splat with Int16
    Int16x3_splat_Int16_arg0.name = "_arg0"_c;
    Int16x3_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x3_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Int16x3_splat_Int16.name = "i16x3"_c;
    Int16x3_splat_Int16.returnType = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x3_splat_Int16)->returnTypeSymbol = &Int16x3Type;

    // Construct with Int16, Int16, Int16
    Int16x3_ctor0_arg0.name = "_arg0"_c;
    Int16x3_ctor0_arg0.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x3_ctor0_arg0)->typeSymbol = &Int16Type;
    Int16x3_ctor0_arg1.name = "_arg1"_c;
    Int16x3_ctor0_arg1.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x3_ctor0_arg1)->typeSymbol = &Int16Type;
    Int16x3_ctor0_arg2.name = "_arg2"_c;
    Int16x3_ctor0_arg2.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x3_ctor0_arg2)->typeSymbol = &Int16Type;
    Int16x3_ctor0_Int16_Int16_Int16.name = "0"_c;
    Int16x3_ctor0_Int16_Int16_Int16.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_ctor0_Int16_Int16_Int16)->returnTypeSymbol = &Int16x3Type;

    // Construct with Int16x2, Int16
    Int16x3_ctor1_arg0.name = "_arg0"_c;
    Int16x3_ctor1_arg0.type = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x3_ctor1_arg0)->typeSymbol = &Int16x2Type;
    Int16x3_ctor1_arg1.name = "_arg1"_c;
    Int16x3_ctor1_arg1.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x3_ctor1_arg1)->typeSymbol = &Int16Type;
    Int16x3_ctor1_Int16x2_Int16.name = "1"_c;
    Int16x3_ctor1_Int16x2_Int16.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_ctor1_Int16x2_Int16)->returnTypeSymbol = &Int16x3Type;

    // Construct with Int16, Int16x2
    Int16x3_ctor2_arg0.name = "_arg0"_c;
    Int16x3_ctor2_arg0.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x3_ctor2_arg0)->typeSymbol = &Int16Type;
    Int16x3_ctor2_arg1.name = "_arg1"_c;
    Int16x3_ctor2_arg1.type = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x3_ctor2_arg1)->typeSymbol = &Int16x2Type;
    Int16x3_ctor2_Int16_Int16x2.name = "2"_c;
    Int16x3_ctor2_Int16_Int16x2.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_ctor2_Int16_Int16x2)->returnTypeSymbol = &Int16x3Type;

    // operator[](i32)
    Int16x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Int16x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int16x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Int16x3_operator_index_Int32.name = "operator[]"_c;
    Int16x3_operator_index_Int32.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x3_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    // operator[](u32)
    Int16x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int16x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int16x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int16x3_operator_index_UInt32.name = "operator[]"_c;
    Int16x3_operator_index_UInt32.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x3_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    // operator[](i16)
    Int16x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Int16x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Int16x3_operator_index_Int16.name = "operator[]"_c;
    Int16x3_operator_index_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x3_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    // operator[](u16)
    Int16x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int16x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int16x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int16x3_operator_index_UInt16.name = "operator[]"_c;
    Int16x3_operator_index_UInt16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x3_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    // operator+(i16x3)
    Int16x3_operator_add_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_add_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_add_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_add_Int16x3.name = "operator+"_c;
    Int16x3_operator_add_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_add_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator-(i16x3)
    Int16x3_operator_sub_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_sub_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_sub_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_sub_Int16x3.name = "operator-"_c;
    Int16x3_operator_sub_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_sub_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator*(i16x3)
    Int16x3_operator_mul_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_mul_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_mul_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_mul_Int16x3.name = "operator*"_c;
    Int16x3_operator_mul_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_mul_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator/(i16x3)
    Int16x3_operator_div_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_div_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_div_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_div_Int16x3.name = "operator/"_c;
    Int16x3_operator_div_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_div_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator%(i16x3)
    Int16x3_operator_mod_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_mod_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_mod_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_mod_Int16x3.name = "operator%"_c;
    Int16x3_operator_mod_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_mod_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator+=(i16x3)
    Int16x3_operator_addasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_addasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_addasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_addasg_Int16x3.name = "operator+="_c;
    Int16x3_operator_addasg_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_addasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator-=(i16x3)
    Int16x3_operator_subasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_subasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_subasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_subasg_Int16x3.name = "operator-="_c;
    Int16x3_operator_subasg_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_subasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator*=(i16x3)
    Int16x3_operator_mulasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_mulasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_mulasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_mulasg_Int16x3.name = "operator*="_c;
    Int16x3_operator_mulasg_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_mulasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator/=(i16x3)
    Int16x3_operator_divasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_divasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_divasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_divasg_Int16x3.name = "operator/="_c;
    Int16x3_operator_divasg_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_divasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator<(i16x3)
    Int16x3_operator_lt_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_lt_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_lt_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_lt_Int16x3.name = "operator<"_c;
    Int16x3_operator_lt_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_lt_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator<=(i16x3)
    Int16x3_operator_lte_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_lte_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_lte_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_lte_Int16x3.name = "operator<="_c;
    Int16x3_operator_lte_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_lte_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator>(i16x3)
    Int16x3_operator_gt_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_gt_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_gt_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_gt_Int16x3.name = "operator>"_c;
    Int16x3_operator_gt_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_gt_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator>=(i16x3)
    Int16x3_operator_gte_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_gte_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_gte_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_gte_Int16x3.name = "operator>="_c;
    Int16x3_operator_gte_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_gte_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator==(i16x3)
    Int16x3_operator_eq_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_eq_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_eq_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_eq_Int16x3.name = "operator=="_c;
    Int16x3_operator_eq_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_eq_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator!=(i16x3)
    Int16x3_operator_neq_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_neq_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_neq_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_neq_Int16x3.name = "operator!="_c;
    Int16x3_operator_neq_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_neq_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator*(f32)
    Int16x3_operator_scale_Int16x3_Float32_arg0.name = "_arg0"_c;
    Int16x3_operator_scale_Int16x3_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Int16x3_operator_scale_Int16x3_Float32_arg0)->typeSymbol = &Float32Type;
    Int16x3_operator_scale_Int16x3_Float32.name = "operator*"_c;
    Int16x3_operator_scale_Int16x3_Float32.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_scale_Int16x3_Float32)->returnTypeSymbol = &Int16x3Type;

    // operator*(f16)
    Int16x3_operator_scale_Int16x3_Float16_arg0.name = "_arg0"_c;
    Int16x3_operator_scale_Int16x3_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Int16x3_operator_scale_Int16x3_Float16_arg0)->typeSymbol = &Float16Type;
    Int16x3_operator_scale_Int16x3_Float16.name = "operator*"_c;
    Int16x3_operator_scale_Int16x3_Float16.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_scale_Int16x3_Float16)->returnTypeSymbol = &Int16x3Type;

    // operator*(u32)
    Int16x3_operator_scale_Int16x3_UInt32_arg0.name = "_arg0"_c;
    Int16x3_operator_scale_Int16x3_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int16x3_operator_scale_Int16x3_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int16x3_operator_scale_Int16x3_UInt32.name = "operator*"_c;
    Int16x3_operator_scale_Int16x3_UInt32.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_scale_Int16x3_UInt32)->returnTypeSymbol = &Int16x3Type;

    // operator*(u16)
    Int16x3_operator_scale_Int16x3_UInt16_arg0.name = "_arg0"_c;
    Int16x3_operator_scale_Int16x3_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int16x3_operator_scale_Int16x3_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int16x3_operator_scale_Int16x3_UInt16.name = "operator*"_c;
    Int16x3_operator_scale_Int16x3_UInt16.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_scale_Int16x3_UInt16)->returnTypeSymbol = &Int16x3Type;

    // operator*(i32)
    Int16x3_operator_scale_Int16x3_Int32_arg0.name = "_arg0"_c;
    Int16x3_operator_scale_Int16x3_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int16x3_operator_scale_Int16x3_Int32_arg0)->typeSymbol = &Int32Type;
    Int16x3_operator_scale_Int16x3_Int32.name = "operator*"_c;
    Int16x3_operator_scale_Int16x3_Int32.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_scale_Int16x3_Int32)->returnTypeSymbol = &Int16x3Type;

    // operator*(i16)
    Int16x3_operator_scale_Int16x3_Int16_arg0.name = "_arg0"_c;
    Int16x3_operator_scale_Int16x3_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x3_operator_scale_Int16x3_Int16_arg0)->typeSymbol = &Int16Type;
    Int16x3_operator_scale_Int16x3_Int16.name = "operator*"_c;
    Int16x3_operator_scale_Int16x3_Int16.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_scale_Int16x3_Int16)->returnTypeSymbol = &Int16x3Type;

    // operator|
    Int16x3_operator_or_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_or_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_or_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_or_Int16x3.name = "operator|"_c;
    Int16x3_operator_or_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_or_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator&
    Int16x3_operator_and_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_and_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_and_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_and_Int16x3.name = "operator&"_c;
    Int16x3_operator_and_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_and_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator^
    Int16x3_operator_xor_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_xor_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_xor_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_xor_Int16x3.name = "operator^"_c;
    Int16x3_operator_xor_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_xor_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator<<
    Int16x3_operator_lsh_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_lsh_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_lsh_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_lsh_Int16x3.name = "operator<<"_c;
    Int16x3_operator_lsh_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_lsh_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator>>
    Int16x3_operator_rsh_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_rsh_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_rsh_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_rsh_Int16x3.name = "operator>>"_c;
    Int16x3_operator_rsh_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_rsh_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator|=
    Int16x3_operator_orasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_orasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_orasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_orasg_Int16x3.name = "operator|="_c;
    Int16x3_operator_orasg_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_orasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator&=
    Int16x3_operator_andasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_andasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_andasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_andasg_Int16x3.name = "operator&="_c;
    Int16x3_operator_andasg_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_andasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator^=
    Int16x3_operator_xorasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_xorasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_xorasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_xorasg_Int16x3.name = "operator^="_c;
    Int16x3_operator_xorasg_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_xorasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator<<=
    Int16x3_operator_lshasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_lshasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_lshasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_lshasg_Int16x3.name = "operator<<="_c;
    Int16x3_operator_lshasg_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_lshasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    // operator>>=
    Int16x3_operator_rhsasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_rhsasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_rhsasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Int16x3_operator_rhsasg_Int16x3.name = "operator>>="_c;
    Int16x3_operator_rhsasg_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&Int16x3_operator_rhsasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "i16x3"_c, &Int16x3_convert_Float32x3 },
        std::pair{ "i16x3(f32x3)"_c, &Int16x3_convert_Float32x3 },
        std::pair{ "i16x3"_c, &Int16x3_splat_Float32 },
        std::pair{ "i16x3(f32)"_c, &Int16x3_splat_Float32 },
        std::pair{ "i16x3"_c, &Int16x3_convert_UInt32x3 },
        std::pair{ "i16x3(u32x3)"_c, &Int16x3_convert_UInt32x3 },
        std::pair{ "i16x3"_c, &Int16x3_splat_UInt32 },
        std::pair{ "i16x3(u32)"_c, &Int16x3_splat_UInt32 },
        std::pair{ "i16x3"_c, &Int16x3_convert_Int32x3 },
        std::pair{ "i16x3(i32x3)"_c, &Int16x3_convert_Int32x3 },
        std::pair{ "i16x3"_c, &Int16x3_splat_Int32 },
        std::pair{ "i16x3(i32)"_c, &Int16x3_splat_Int32 },
        std::pair{ "i16x3"_c, &Int16x3_convert_Bool8x3 },
        std::pair{ "i16x3(b8x3)"_c, &Int16x3_convert_Bool8x3 },
        std::pair{ "i16x3"_c, &Int16x3_splat_Bool8 },
        std::pair{ "i16x3(b8)"_c, &Int16x3_splat_Bool8 },
        std::pair{ "i16x3"_c, &Int16x3_convert_Float16x3 },
        std::pair{ "i16x3(f16x3)"_c, &Int16x3_convert_Float16x3 },
        std::pair{ "i16x3"_c, &Int16x3_splat_Float16 },
        std::pair{ "i16x3(f16)"_c, &Int16x3_splat_Float16 },
        std::pair{ "i16x3"_c, &Int16x3_convert_UInt16x3 },
        std::pair{ "i16x3(u16x3)"_c, &Int16x3_convert_UInt16x3 },
        std::pair{ "i16x3"_c, &Int16x3_splat_UInt16 },
        std::pair{ "i16x3(u16)"_c, &Int16x3_splat_UInt16 },
        std::pair{ "i16x3"_c, &Int16x3_convert_Int16x3 },
        std::pair{ "i16x3(i16x3)"_c, &Int16x3_convert_Int16x3 },
        std::pair{ "i16x3"_c, &Int16x3_splat_Int16 },
        std::pair{ "i16x3(i16)"_c, &Int16x3_splat_Int16 },
        std::pair{ "i16x3"_c, &Int16x3_ctor0_Int16_Int16_Int16},
        std::pair{ "i16x3(i16,i16,i16)"_c, &Int16x3_ctor0_Int16_Int16_Int16},
        std::pair{ "i16x3"_c, &Int16x3_ctor1_Int16x2_Int16},
        std::pair{ "i16x3(i16x2,i16)"_c, &Int16x3_ctor1_Int16x2_Int16},
        std::pair{ "i16x3"_c, &Int16x3_ctor2_Int16_Int16x2},
        std::pair{ "i16x3(i16,i16x2)"_c, &Int16x3_ctor2_Int16_Int16x2},
        std::pair{ "operator[](i32)"_c, &Int16x3_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Int16x3_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Int16x3_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Int16x3_operator_index_UInt16},
        std::pair{ "operator+(i16x3)"_c, &Int16x3_operator_add_Int16x3},
        std::pair{ "operator-(i16x3)"_c, &Int16x3_operator_sub_Int16x3},
        std::pair{ "operator*(i16x3)"_c, &Int16x3_operator_mul_Int16x3},
        std::pair{ "operator/(i16x3)"_c, &Int16x3_operator_div_Int16x3},
        std::pair{ "operator%(i16x3)"_c, &Int16x3_operator_mod_Int16x3},
        std::pair{ "operator+=(i16x3)"_c, &Int16x3_operator_addasg_Int16x3},
        std::pair{ "operator-=(i16x3)"_c, &Int16x3_operator_subasg_Int16x3},
        std::pair{ "operator*=(i16x3)"_c, &Int16x3_operator_mulasg_Int16x3},
        std::pair{ "operator/=(i16x3)"_c, &Int16x3_operator_divasg_Int16x3},
        std::pair{ "operator<(i16x3)"_c, &Int16x3_operator_lt_Int16x3},
        std::pair{ "operator<=(i16x3)"_c, &Int16x3_operator_lte_Int16x3},
        std::pair{ "operator>(i16x3)"_c, &Int16x3_operator_gt_Int16x3},
        std::pair{ "operator>=(i16x3)"_c, &Int16x3_operator_gte_Int16x3},
        std::pair{ "operator==(i16x3)"_c, &Int16x3_operator_eq_Int16x3},
        std::pair{ "operator!=(i16x3)"_c, &Int16x3_operator_neq_Int16x3},
        std::pair{ "operator*(f32)"_c, &Int16x3_operator_scale_Int16x3_Float32},
        std::pair{ "operator*(f16)"_c, &Int16x3_operator_scale_Int16x3_Float16},
        std::pair{ "operator*(u32)"_c, &Int16x3_operator_scale_Int16x3_UInt32},
        std::pair{ "operator*(u16)"_c, &Int16x3_operator_scale_Int16x3_UInt16},
        std::pair{ "operator*(i32)"_c, &Int16x3_operator_scale_Int16x3_Int32},
        std::pair{ "operator*(i16)"_c, &Int16x3_operator_scale_Int16x3_Int16},
        std::pair{ "operator|(i16x3)"_c, &Int16x3_operator_or_Int16x3},
        std::pair{ "operator&(i16x3)"_c, &Int16x3_operator_and_Int16x3},
        std::pair{ "operator^(i16x3)"_c, &Int16x3_operator_xor_Int16x3},
        std::pair{ "operator<<(i16x3)"_c, &Int16x3_operator_lsh_Int16x3},
        std::pair{ "operator>>(i16x3)"_c, &Int16x3_operator_rsh_Int16x3},
        std::pair{ "operator|=(i16x3)"_c, &Int16x3_operator_orasg_Int16x3},
        std::pair{ "operator&=(i16x3)"_c, &Int16x3_operator_andasg_Int16x3},
        std::pair{ "operator^=(i16x3)"_c, &Int16x3_operator_xorasg_Int16x3},
        std::pair{ "operator<<=(i16x3)"_c, &Int16x3_operator_lshasg_Int16x3},
        std::pair{ "operator>>=(i16x3)"_c, &Int16x3_operator_rhsasg_Int16x3}
    }
    };   
}

Int16x4::Int16x4()
{
    this->name = "i16";
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    // Conversion from Float32x4
    Int16x4_convert_Float32x4_arg0.name = "_arg0"_c;
    Int16x4_convert_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Int16x4_convert_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Int16x4_convert_Float32x4.name = "i16x4"_c;
    Int16x4_convert_Float32x4.returnType = Type::FullType { Int16x4Type.name };
    Symbol::Resolved(&Int16x4_convert_Float32x4)->returnTypeSymbol = &Int16x4Type;

    // Splat with Float32
    Int16x4_splat_Float32_arg0.name = "_arg0"_c;
    Int16x4_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Int16x4_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Int16x4_splat_Float32.name = "i16x4"_c;
    Int16x4_splat_Float32.returnType = Type::FullType { Int16x4Type.name };
    Symbol::Resolved(&Int16x4_splat_Float32)->returnTypeSymbol = &Int16x4Type;

    // Conversion from UInt32x4
    Int16x4_convert_UInt32x4_arg0.name = "_arg0"_c;
    Int16x4_convert_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&Int16x4_convert_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Int16x4_convert_UInt32x4.name = "i16x4"_c;
    Int16x4_convert_UInt32x4.returnType = Type::FullType { Int16x4Type.name };
    Symbol::Resolved(&Int16x4_convert_UInt32x4)->returnTypeSymbol = &Int16x4Type;

    // Splat with UInt32
    Int16x4_splat_UInt32_arg0.name = "_arg0"_c;
    Int16x4_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int16x4_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int16x4_splat_UInt32.name = "i16x4"_c;
    Int16x4_splat_UInt32.returnType = Type::FullType { Int16x4Type.name };
    Symbol::Resolved(&Int16x4_splat_UInt32)->returnTypeSymbol = &Int16x4Type;

    // Conversion from Int32x4
    Int16x4_convert_Int32x4_arg0.name = "_arg0"_c;
    Int16x4_convert_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&Int16x4_convert_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Int16x4_convert_Int32x4.name = "i16x4"_c;
    Int16x4_convert_Int32x4.returnType = Type::FullType { Int16x4Type.name };
    Symbol::Resolved(&Int16x4_convert_Int32x4)->returnTypeSymbol = &Int16x4Type;

    // Splat with Int32
    Int16x4_splat_Int32_arg0.name = "_arg0"_c;
    Int16x4_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int16x4_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Int16x4_splat_Int32.name = "i16x4"_c;
    Int16x4_splat_Int32.returnType = Type::FullType { Int16x4Type.name };
    Symbol::Resolved(&Int16x4_splat_Int32)->returnTypeSymbol = &Int16x4Type;

    // Conversion from Bool8x4
    Int16x4_convert_Bool8x4_arg0.name = "_arg0"_c;
    Int16x4_convert_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Symbol::Resolved(&Int16x4_convert_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Int16x4_convert_Bool8x4.name = "i16x4"_c;
    Int16x4_convert_Bool8x4.returnType = Type::FullType { Int16x4Type.name };
    Symbol::Resolved(&Int16x4_convert_Bool8x4)->returnTypeSymbol = &Int16x4Type;

    // Splat with Bool8
    Int16x4_splat_Bool8_arg0.name = "_arg0"_c;
    Int16x4_splat_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&Int16x4_splat_Bool8_arg0)->typeSymbol = &Bool8Type;
    Int16x4_splat_Bool8.name = "i16x4"_c;
    Int16x4_splat_Bool8.returnType = Type::FullType { Int16x4Type.name };
    Symbol::Resolved(&Int16x4_splat_Bool8)->returnTypeSymbol = &Int16x4Type;

    // Conversion from Float16x4
    Int16x4_convert_Float16x4_arg0.name = "_arg0"_c;
    Int16x4_convert_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Int16x4_convert_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Int16x4_convert_Float16x4.name = "i16x4"_c;
    Int16x4_convert_Float16x4.returnType = Type::FullType { Int16x4Type.name };
    Symbol::Resolved(&Int16x4_convert_Float16x4)->returnTypeSymbol = &Int16x4Type;

    // Splat with Float16
    Int16x4_splat_Float16_arg0.name = "_arg0"_c;
    Int16x4_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Int16x4_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Int16x4_splat_Float16.name = "i16x4"_c;
    Int16x4_splat_Float16.returnType = Type::FullType { Int16x4Type.name };
    Symbol::Resolved(&Int16x4_splat_Float16)->returnTypeSymbol = &Int16x4Type;

    // Conversion from UInt16x4
    Int16x4_convert_UInt16x4_arg0.name = "_arg0"_c;
    Int16x4_convert_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&Int16x4_convert_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Int16x4_convert_UInt16x4.name = "i16x4"_c;
    Int16x4_convert_UInt16x4.returnType = Type::FullType { Int16x4Type.name };
    Symbol::Resolved(&Int16x4_convert_UInt16x4)->returnTypeSymbol = &Int16x4Type;

    // Splat with UInt16
    Int16x4_splat_UInt16_arg0.name = "_arg0"_c;
    Int16x4_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int16x4_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int16x4_splat_UInt16.name = "i16x4"_c;
    Int16x4_splat_UInt16.returnType = Type::FullType { Int16x4Type.name };
    Symbol::Resolved(&Int16x4_splat_UInt16)->returnTypeSymbol = &Int16x4Type;

    // Conversion from Int16x4
    Int16x4_convert_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_convert_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_convert_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_convert_Int16x4.name = "i16x4"_c;
    Int16x4_convert_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Symbol::Resolved(&Int16x4_convert_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // Splat with Int16
    Int16x4_splat_Int16_arg0.name = "_arg0"_c;
    Int16x4_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x4_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Int16x4_splat_Int16.name = "i16x4"_c;
    Int16x4_splat_Int16.returnType = Type::FullType { Int16x4Type.name };
    Symbol::Resolved(&Int16x4_splat_Int16)->returnTypeSymbol = &Int16x4Type;

    // Construct with Int16, Int16, Int16, Int16
    Int16x4_ctor0_arg0.name = "_arg0"_c;
    Int16x4_ctor0_arg0.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x4_ctor0_arg0)->typeSymbol = &Int16Type;
    Int16x4_ctor0_arg1.name = "_arg1"_c;
    Int16x4_ctor0_arg1.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x4_ctor0_arg1)->typeSymbol = &Int16Type;
    Int16x4_ctor0_arg2.name = "_arg2"_c;
    Int16x4_ctor0_arg2.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x4_ctor0_arg2)->typeSymbol = &Int16Type;
    Int16x4_ctor0_arg3.name = "_arg3"_c;
    Int16x4_ctor0_arg3.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x4_ctor0_arg3)->typeSymbol = &Int16Type;
    Int16x4_ctor0_Int16_Int16_Int16_Int16.name = "0"_c;
    Int16x4_ctor0_Int16_Int16_Int16_Int16.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_ctor0_Int16_Int16_Int16_Int16)->returnTypeSymbol = &Int16x4Type;

    // Construct with Int16x2, Int16, Int16
    Int16x4_ctor1_arg0.name = "_arg0"_c;
    Int16x4_ctor1_arg0.type = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x4_ctor1_arg0)->typeSymbol = &Int16x2Type;
    Int16x4_ctor1_arg1.name = "_arg1"_c;
    Int16x4_ctor1_arg1.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x4_ctor1_arg1)->typeSymbol = &Int16Type;
    Int16x4_ctor1_arg2.name = "_arg2"_c;
    Int16x4_ctor1_arg2.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x4_ctor1_arg2)->typeSymbol = &Int16Type;
    Int16x4_ctor1_Int16x2_Int16_Int16.name = "1"_c;
    Int16x4_ctor1_Int16x2_Int16_Int16.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_ctor1_Int16x2_Int16_Int16)->returnTypeSymbol = &Int16x4Type;

    // Construct with Int16, Int16x2, Int16
    Int16x4_ctor2_arg0.name = "_arg0"_c;
    Int16x4_ctor2_arg0.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x4_ctor2_arg0)->typeSymbol = &Int16Type;
    Int16x4_ctor2_arg1.name = "_arg1"_c;
    Int16x4_ctor2_arg1.type = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x4_ctor2_arg1)->typeSymbol = &Int16x2Type;
    Int16x4_ctor2_arg2.name = "_arg2"_c;
    Int16x4_ctor2_arg2.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x4_ctor2_arg2)->typeSymbol = &Int16Type;
    Int16x4_ctor2_Int16_Int16x2_Int16.name = "2"_c;
    Int16x4_ctor2_Int16_Int16x2_Int16.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_ctor2_Int16_Int16x2_Int16)->returnTypeSymbol = &Int16x4Type;

    // Construct with Int16, Int16, Int16x2
    Int16x4_ctor3_arg0.name = "_arg0"_c;
    Int16x4_ctor3_arg0.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x4_ctor3_arg0)->typeSymbol = &Int16Type;
    Int16x4_ctor3_arg1.name = "_arg1"_c;
    Int16x4_ctor3_arg1.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x4_ctor3_arg1)->typeSymbol = &Int16Type;
    Int16x4_ctor3_arg2.name = "_arg2"_c;
    Int16x4_ctor3_arg2.type = Type::FullType { Int16x2Type.name };
    Symbol::Resolved(&Int16x4_ctor3_arg2)->typeSymbol = &Int16x2Type;
    Int16x4_ctor3_Int16_Int16_Int16x2.name = "3"_c;
    Int16x4_ctor3_Int16_Int16_Int16x2.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_ctor3_Int16_Int16_Int16x2)->returnTypeSymbol = &Int16x4Type;

    // Construct with Int16x3, Int16
    Int16x4_ctor4_arg0.name = "_arg0"_c;
    Int16x4_ctor4_arg0.type = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x4_ctor4_arg0)->typeSymbol = &Int16x3Type;
    Int16x4_ctor4_arg1.name = "_arg1"_c;
    Int16x4_ctor4_arg1.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x4_ctor4_arg1)->typeSymbol = &Int16Type;
    Int16x4_ctor4_Int16x3_Int16.name = "4"_c;
    Int16x4_ctor4_Int16x3_Int16.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_ctor4_Int16x3_Int16)->returnTypeSymbol = &Int16x4Type;

    // Construct with Int16, Int16x3
    Int16x4_ctor5_arg0.name = "_arg0"_c;
    Int16x4_ctor5_arg0.type = Type::FullType { Int16Type.name };
    Symbol::Resolved(&Int16x4_ctor5_arg0)->typeSymbol = &Int16Type;
    Int16x4_ctor5_arg1.name = "_arg1"_c;
    Int16x4_ctor5_arg1.type = Type::FullType { Int16x3Type.name };
    Symbol::Resolved(&Int16x4_ctor5_arg1)->typeSymbol = &Int16x3Type;
    Int16x4_ctor5_Int16_Int16x3.name = "5"_c;
    Int16x4_ctor5_Int16_Int16x3.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_ctor5_Int16_Int16x3)->returnTypeSymbol = &Int16x4Type;

    // operator[](i32)
    Int16x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Int16x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int16x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Int16x4_operator_index_Int32.name = "operator[]"_c;
    Int16x4_operator_index_Int32.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x4_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    // operator[](u32)
    Int16x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int16x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int16x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int16x4_operator_index_UInt32.name = "operator[]"_c;
    Int16x4_operator_index_UInt32.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x4_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    // operator[](i16)
    Int16x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Int16x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Int16x4_operator_index_Int16.name = "operator[]"_c;
    Int16x4_operator_index_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x4_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    // operator[](u16)
    Int16x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int16x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int16x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int16x4_operator_index_UInt16.name = "operator[]"_c;
    Int16x4_operator_index_UInt16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x4_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    // operator+(i16x4)
    Int16x4_operator_add_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_add_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_add_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_add_Int16x4.name = "operator+"_c;
    Int16x4_operator_add_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_add_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator-(i16x4)
    Int16x4_operator_sub_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_sub_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_sub_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_sub_Int16x4.name = "operator-"_c;
    Int16x4_operator_sub_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_sub_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator*(i16x4)
    Int16x4_operator_mul_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_mul_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_mul_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_mul_Int16x4.name = "operator*"_c;
    Int16x4_operator_mul_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_mul_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator/(i16x4)
    Int16x4_operator_div_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_div_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_div_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_div_Int16x4.name = "operator/"_c;
    Int16x4_operator_div_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_div_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator%(i16x4)
    Int16x4_operator_mod_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_mod_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_mod_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_mod_Int16x4.name = "operator%"_c;
    Int16x4_operator_mod_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_mod_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator+=(i16x4)
    Int16x4_operator_addasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_addasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_addasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_addasg_Int16x4.name = "operator+="_c;
    Int16x4_operator_addasg_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_addasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator-=(i16x4)
    Int16x4_operator_subasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_subasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_subasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_subasg_Int16x4.name = "operator-="_c;
    Int16x4_operator_subasg_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_subasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator*=(i16x4)
    Int16x4_operator_mulasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_mulasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_mulasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_mulasg_Int16x4.name = "operator*="_c;
    Int16x4_operator_mulasg_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_mulasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator/=(i16x4)
    Int16x4_operator_divasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_divasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_divasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_divasg_Int16x4.name = "operator/="_c;
    Int16x4_operator_divasg_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_divasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator<(i16x4)
    Int16x4_operator_lt_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_lt_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_lt_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_lt_Int16x4.name = "operator<"_c;
    Int16x4_operator_lt_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_lt_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator<=(i16x4)
    Int16x4_operator_lte_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_lte_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_lte_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_lte_Int16x4.name = "operator<="_c;
    Int16x4_operator_lte_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_lte_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator>(i16x4)
    Int16x4_operator_gt_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_gt_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_gt_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_gt_Int16x4.name = "operator>"_c;
    Int16x4_operator_gt_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_gt_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator>=(i16x4)
    Int16x4_operator_gte_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_gte_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_gte_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_gte_Int16x4.name = "operator>="_c;
    Int16x4_operator_gte_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_gte_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator==(i16x4)
    Int16x4_operator_eq_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_eq_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_eq_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_eq_Int16x4.name = "operator=="_c;
    Int16x4_operator_eq_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_eq_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator!=(i16x4)
    Int16x4_operator_neq_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_neq_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_neq_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_neq_Int16x4.name = "operator!="_c;
    Int16x4_operator_neq_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_neq_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator*(f32)
    Int16x4_operator_scale_Int16x4_Float32_arg0.name = "_arg0"_c;
    Int16x4_operator_scale_Int16x4_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Int16x4_operator_scale_Int16x4_Float32_arg0)->typeSymbol = &Float32Type;
    Int16x4_operator_scale_Int16x4_Float32.name = "operator*"_c;
    Int16x4_operator_scale_Int16x4_Float32.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_scale_Int16x4_Float32)->returnTypeSymbol = &Int16x4Type;

    // operator*(f16)
    Int16x4_operator_scale_Int16x4_Float16_arg0.name = "_arg0"_c;
    Int16x4_operator_scale_Int16x4_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Int16x4_operator_scale_Int16x4_Float16_arg0)->typeSymbol = &Float16Type;
    Int16x4_operator_scale_Int16x4_Float16.name = "operator*"_c;
    Int16x4_operator_scale_Int16x4_Float16.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_scale_Int16x4_Float16)->returnTypeSymbol = &Int16x4Type;

    // operator*(u32)
    Int16x4_operator_scale_Int16x4_UInt32_arg0.name = "_arg0"_c;
    Int16x4_operator_scale_Int16x4_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Int16x4_operator_scale_Int16x4_UInt32_arg0)->typeSymbol = &UInt32Type;
    Int16x4_operator_scale_Int16x4_UInt32.name = "operator*"_c;
    Int16x4_operator_scale_Int16x4_UInt32.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_scale_Int16x4_UInt32)->returnTypeSymbol = &Int16x4Type;

    // operator*(u16)
    Int16x4_operator_scale_Int16x4_UInt16_arg0.name = "_arg0"_c;
    Int16x4_operator_scale_Int16x4_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Int16x4_operator_scale_Int16x4_UInt16_arg0)->typeSymbol = &UInt16Type;
    Int16x4_operator_scale_Int16x4_UInt16.name = "operator*"_c;
    Int16x4_operator_scale_Int16x4_UInt16.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_scale_Int16x4_UInt16)->returnTypeSymbol = &Int16x4Type;

    // operator*(i32)
    Int16x4_operator_scale_Int16x4_Int32_arg0.name = "_arg0"_c;
    Int16x4_operator_scale_Int16x4_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Int16x4_operator_scale_Int16x4_Int32_arg0)->typeSymbol = &Int32Type;
    Int16x4_operator_scale_Int16x4_Int32.name = "operator*"_c;
    Int16x4_operator_scale_Int16x4_Int32.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_scale_Int16x4_Int32)->returnTypeSymbol = &Int16x4Type;

    // operator*(i16)
    Int16x4_operator_scale_Int16x4_Int16_arg0.name = "_arg0"_c;
    Int16x4_operator_scale_Int16x4_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Int16x4_operator_scale_Int16x4_Int16_arg0)->typeSymbol = &Int16Type;
    Int16x4_operator_scale_Int16x4_Int16.name = "operator*"_c;
    Int16x4_operator_scale_Int16x4_Int16.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_scale_Int16x4_Int16)->returnTypeSymbol = &Int16x4Type;

    // operator|
    Int16x4_operator_or_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_or_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_or_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_or_Int16x4.name = "operator|"_c;
    Int16x4_operator_or_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_or_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator&
    Int16x4_operator_and_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_and_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_and_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_and_Int16x4.name = "operator&"_c;
    Int16x4_operator_and_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_and_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator^
    Int16x4_operator_xor_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_xor_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_xor_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_xor_Int16x4.name = "operator^"_c;
    Int16x4_operator_xor_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_xor_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator<<
    Int16x4_operator_lsh_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_lsh_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_lsh_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_lsh_Int16x4.name = "operator<<"_c;
    Int16x4_operator_lsh_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_lsh_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator>>
    Int16x4_operator_rsh_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_rsh_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_rsh_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_rsh_Int16x4.name = "operator>>"_c;
    Int16x4_operator_rsh_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_rsh_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator|=
    Int16x4_operator_orasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_orasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_orasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_orasg_Int16x4.name = "operator|="_c;
    Int16x4_operator_orasg_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_orasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator&=
    Int16x4_operator_andasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_andasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_andasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_andasg_Int16x4.name = "operator&="_c;
    Int16x4_operator_andasg_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_andasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator^=
    Int16x4_operator_xorasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_xorasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_xorasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_xorasg_Int16x4.name = "operator^="_c;
    Int16x4_operator_xorasg_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_xorasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator<<=
    Int16x4_operator_lshasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_lshasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_lshasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_lshasg_Int16x4.name = "operator<<="_c;
    Int16x4_operator_lshasg_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_lshasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    // operator>>=
    Int16x4_operator_rhsasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_rhsasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_rhsasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Int16x4_operator_rhsasg_Int16x4.name = "operator>>="_c;
    Int16x4_operator_rhsasg_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&Int16x4_operator_rhsasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "i16x4"_c, &Int16x4_convert_Float32x4 },
        std::pair{ "i16x4(f32x4)"_c, &Int16x4_convert_Float32x4 },
        std::pair{ "i16x4"_c, &Int16x4_splat_Float32 },
        std::pair{ "i16x4(f32)"_c, &Int16x4_splat_Float32 },
        std::pair{ "i16x4"_c, &Int16x4_convert_UInt32x4 },
        std::pair{ "i16x4(u32x4)"_c, &Int16x4_convert_UInt32x4 },
        std::pair{ "i16x4"_c, &Int16x4_splat_UInt32 },
        std::pair{ "i16x4(u32)"_c, &Int16x4_splat_UInt32 },
        std::pair{ "i16x4"_c, &Int16x4_convert_Int32x4 },
        std::pair{ "i16x4(i32x4)"_c, &Int16x4_convert_Int32x4 },
        std::pair{ "i16x4"_c, &Int16x4_splat_Int32 },
        std::pair{ "i16x4(i32)"_c, &Int16x4_splat_Int32 },
        std::pair{ "i16x4"_c, &Int16x4_convert_Bool8x4 },
        std::pair{ "i16x4(b8x4)"_c, &Int16x4_convert_Bool8x4 },
        std::pair{ "i16x4"_c, &Int16x4_splat_Bool8 },
        std::pair{ "i16x4(b8)"_c, &Int16x4_splat_Bool8 },
        std::pair{ "i16x4"_c, &Int16x4_convert_Float16x4 },
        std::pair{ "i16x4(f16x4)"_c, &Int16x4_convert_Float16x4 },
        std::pair{ "i16x4"_c, &Int16x4_splat_Float16 },
        std::pair{ "i16x4(f16)"_c, &Int16x4_splat_Float16 },
        std::pair{ "i16x4"_c, &Int16x4_convert_UInt16x4 },
        std::pair{ "i16x4(u16x4)"_c, &Int16x4_convert_UInt16x4 },
        std::pair{ "i16x4"_c, &Int16x4_splat_UInt16 },
        std::pair{ "i16x4(u16)"_c, &Int16x4_splat_UInt16 },
        std::pair{ "i16x4"_c, &Int16x4_convert_Int16x4 },
        std::pair{ "i16x4(i16x4)"_c, &Int16x4_convert_Int16x4 },
        std::pair{ "i16x4"_c, &Int16x4_splat_Int16 },
        std::pair{ "i16x4(i16)"_c, &Int16x4_splat_Int16 },
        std::pair{ "i16x4"_c, &Int16x4_ctor0_Int16_Int16_Int16_Int16},
        std::pair{ "i16x4(i16,i16,i16,i16)"_c, &Int16x4_ctor0_Int16_Int16_Int16_Int16},
        std::pair{ "i16x4"_c, &Int16x4_ctor1_Int16x2_Int16_Int16},
        std::pair{ "i16x4(i16x2,i16,i16)"_c, &Int16x4_ctor1_Int16x2_Int16_Int16},
        std::pair{ "i16x4"_c, &Int16x4_ctor2_Int16_Int16x2_Int16},
        std::pair{ "i16x4(i16,i16x2,i16)"_c, &Int16x4_ctor2_Int16_Int16x2_Int16},
        std::pair{ "i16x4"_c, &Int16x4_ctor3_Int16_Int16_Int16x2},
        std::pair{ "i16x4(i16,i16,i16x2)"_c, &Int16x4_ctor3_Int16_Int16_Int16x2},
        std::pair{ "i16x4"_c, &Int16x4_ctor4_Int16x3_Int16},
        std::pair{ "i16x4(i16x3,i16)"_c, &Int16x4_ctor4_Int16x3_Int16},
        std::pair{ "i16x4"_c, &Int16x4_ctor5_Int16_Int16x3},
        std::pair{ "i16x4(i16,i16x3)"_c, &Int16x4_ctor5_Int16_Int16x3},
        std::pair{ "operator[](i32)"_c, &Int16x4_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Int16x4_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Int16x4_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Int16x4_operator_index_UInt16},
        std::pair{ "operator+(i16x4)"_c, &Int16x4_operator_add_Int16x4},
        std::pair{ "operator-(i16x4)"_c, &Int16x4_operator_sub_Int16x4},
        std::pair{ "operator*(i16x4)"_c, &Int16x4_operator_mul_Int16x4},
        std::pair{ "operator/(i16x4)"_c, &Int16x4_operator_div_Int16x4},
        std::pair{ "operator%(i16x4)"_c, &Int16x4_operator_mod_Int16x4},
        std::pair{ "operator+=(i16x4)"_c, &Int16x4_operator_addasg_Int16x4},
        std::pair{ "operator-=(i16x4)"_c, &Int16x4_operator_subasg_Int16x4},
        std::pair{ "operator*=(i16x4)"_c, &Int16x4_operator_mulasg_Int16x4},
        std::pair{ "operator/=(i16x4)"_c, &Int16x4_operator_divasg_Int16x4},
        std::pair{ "operator<(i16x4)"_c, &Int16x4_operator_lt_Int16x4},
        std::pair{ "operator<=(i16x4)"_c, &Int16x4_operator_lte_Int16x4},
        std::pair{ "operator>(i16x4)"_c, &Int16x4_operator_gt_Int16x4},
        std::pair{ "operator>=(i16x4)"_c, &Int16x4_operator_gte_Int16x4},
        std::pair{ "operator==(i16x4)"_c, &Int16x4_operator_eq_Int16x4},
        std::pair{ "operator!=(i16x4)"_c, &Int16x4_operator_neq_Int16x4},
        std::pair{ "operator*(f32)"_c, &Int16x4_operator_scale_Int16x4_Float32},
        std::pair{ "operator*(f16)"_c, &Int16x4_operator_scale_Int16x4_Float16},
        std::pair{ "operator*(u32)"_c, &Int16x4_operator_scale_Int16x4_UInt32},
        std::pair{ "operator*(u16)"_c, &Int16x4_operator_scale_Int16x4_UInt16},
        std::pair{ "operator*(i32)"_c, &Int16x4_operator_scale_Int16x4_Int32},
        std::pair{ "operator*(i16)"_c, &Int16x4_operator_scale_Int16x4_Int16},
        std::pair{ "operator|(i16x4)"_c, &Int16x4_operator_or_Int16x4},
        std::pair{ "operator&(i16x4)"_c, &Int16x4_operator_and_Int16x4},
        std::pair{ "operator^(i16x4)"_c, &Int16x4_operator_xor_Int16x4},
        std::pair{ "operator<<(i16x4)"_c, &Int16x4_operator_lsh_Int16x4},
        std::pair{ "operator>>(i16x4)"_c, &Int16x4_operator_rsh_Int16x4},
        std::pair{ "operator|=(i16x4)"_c, &Int16x4_operator_orasg_Int16x4},
        std::pair{ "operator&=(i16x4)"_c, &Int16x4_operator_andasg_Int16x4},
        std::pair{ "operator^=(i16x4)"_c, &Int16x4_operator_xorasg_Int16x4},
        std::pair{ "operator<<=(i16x4)"_c, &Int16x4_operator_lshasg_Int16x4},
        std::pair{ "operator>>=(i16x4)"_c, &Int16x4_operator_rhsasg_Int16x4}
    }
    };   
}

Float32x2x2::Float32x2x2()
{
    this->name = "f32";
    this->columnSize = 2;
    this->rowSize = 2;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    // operator[](i32)
    Float32x2x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32x2x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x2x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x2x2_operator_index_Int32.name = "operator[]"_c;
    Float32x2x2_operator_index_Int32.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_index_Int32)->returnTypeSymbol = &Float32x2Type;

    // operator[](u32)
    Float32x2x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32x2x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x2x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x2x2_operator_index_UInt32.name = "operator[]"_c;
    Float32x2x2_operator_index_UInt32.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_index_UInt32)->returnTypeSymbol = &Float32x2Type;

    // operator[](i16)
    Float32x2x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32x2x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x2x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x2x2_operator_index_Int16.name = "operator[]"_c;
    Float32x2x2_operator_index_Int16.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_index_Int16)->returnTypeSymbol = &Float32x2Type;

    // operator[](u16)
    Float32x2x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32x2x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x2x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x2x2_operator_index_UInt16.name = "operator[]"_c;
    Float32x2x2_operator_index_UInt16.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_index_UInt16)->returnTypeSymbol = &Float32x2Type;

    // operator+
    Float32x2x2_operator_add_Float32x2x2_arg0.name = "_arg0"_c;
    Float32x2x2_operator_add_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_add_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Float32x2x2_operator_add_Float32x2x2.name = "operator+"_c;
    Float32x2x2_operator_add_Float32x2x2.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_add_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    // operator-
    Float32x2x2_operator_sub_Float32x2x2_arg0.name = "_arg0"_c;
    Float32x2x2_operator_sub_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_sub_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Float32x2x2_operator_sub_Float32x2x2.name = "operator-"_c;
    Float32x2x2_operator_sub_Float32x2x2.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_sub_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    // operator*
    Float32x2x2_operator_mul_Float32x2x2_arg0.name = "_arg0"_c;
    Float32x2x2_operator_mul_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_mul_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Float32x2x2_operator_mul_Float32x2x2.name = "operator*"_c;
    Float32x2x2_operator_mul_Float32x2x2.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_mul_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    // operator+=
    Float32x2x2_operator_addasg_Float32x2x2_arg0.name = "_arg0"_c;
    Float32x2x2_operator_addasg_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_addasg_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Float32x2x2_operator_addasg_Float32x2x2.name = "operator+="_c;
    Float32x2x2_operator_addasg_Float32x2x2.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_addasg_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    // operator-=
    Float32x2x2_operator_subasg_Float32x2x2_arg0.name = "_arg0"_c;
    Float32x2x2_operator_subasg_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_subasg_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Float32x2x2_operator_subasg_Float32x2x2.name = "operator-="_c;
    Float32x2x2_operator_subasg_Float32x2x2.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_subasg_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    // operator*=
    Float32x2x2_operator_mulasg_Float32x2x2_arg0.name = "_arg0"_c;
    Float32x2x2_operator_mulasg_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_mulasg_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Float32x2x2_operator_mulasg_Float32x2x2.name = "operator*="_c;
    Float32x2x2_operator_mulasg_Float32x2x2.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_mulasg_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    // operator*(f32)
    Float32x2x2_operator_scale_Float32x2x2_Float32_arg0.name = "_arg0"_c;
    Float32x2x2_operator_scale_Float32x2x2_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32x2x2_Float32_arg0)->typeSymbol = &Float32Type;
    Float32x2x2_operator_scale_Float32x2x2_Float32.name = "operator*"_c;
    Float32x2x2_operator_scale_Float32x2x2_Float32.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32x2x2_Float32)->returnTypeSymbol = &Float32x2x2Type;

    // operator*(f16)
    Float32x2x2_operator_scale_Float32x2x2_Float16_arg0.name = "_arg0"_c;
    Float32x2x2_operator_scale_Float32x2x2_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32x2x2_Float16_arg0)->typeSymbol = &Float16Type;
    Float32x2x2_operator_scale_Float32x2x2_Float16.name = "operator*"_c;
    Float32x2x2_operator_scale_Float32x2x2_Float16.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32x2x2_Float16)->returnTypeSymbol = &Float32x2x2Type;

    // operator*(u32)
    Float32x2x2_operator_scale_Float32x2x2_UInt32_arg0.name = "_arg0"_c;
    Float32x2x2_operator_scale_Float32x2x2_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32x2x2_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x2x2_operator_scale_Float32x2x2_UInt32.name = "operator*"_c;
    Float32x2x2_operator_scale_Float32x2x2_UInt32.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32x2x2_UInt32)->returnTypeSymbol = &Float32x2x2Type;

    // operator*(u16)
    Float32x2x2_operator_scale_Float32x2x2_UInt16_arg0.name = "_arg0"_c;
    Float32x2x2_operator_scale_Float32x2x2_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32x2x2_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x2x2_operator_scale_Float32x2x2_UInt16.name = "operator*"_c;
    Float32x2x2_operator_scale_Float32x2x2_UInt16.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32x2x2_UInt16)->returnTypeSymbol = &Float32x2x2Type;

    // operator*(i32)
    Float32x2x2_operator_scale_Float32x2x2_Int32_arg0.name = "_arg0"_c;
    Float32x2x2_operator_scale_Float32x2x2_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32x2x2_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x2x2_operator_scale_Float32x2x2_Int32.name = "operator*"_c;
    Float32x2x2_operator_scale_Float32x2x2_Int32.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32x2x2_Int32)->returnTypeSymbol = &Float32x2x2Type;

    // operator*(i16)
    Float32x2x2_operator_scale_Float32x2x2_Int16_arg0.name = "_arg0"_c;
    Float32x2x2_operator_scale_Float32x2x2_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32x2x2_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x2x2_operator_scale_Float32x2x2_Int16.name = "operator*"_c;
    Float32x2x2_operator_scale_Float32x2x2_Int16.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32x2x2_Int16)->returnTypeSymbol = &Float32x2x2Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f32x2x2"_c, &Float32x2x2_Float32x2_ctor},
        std::pair{ "f32x2x2"_c, &Float32x2x2_identity},
        std::pair{ "f32x2x2"_c, &Float32x2x2_Float32_4_ctor},
        std::pair{ "operator[](i32)"_c, &Float32x2x2_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float32x2x2_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float32x2x2_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float32x2x2_operator_index_UInt16},
        std::pair{ "operator+(f32x2x2)"_c, &Float32x2x2_operator_add_Float32x2x2},
        std::pair{ "operator-(f32x2x2)"_c, &Float32x2x2_operator_sub_Float32x2x2},
        std::pair{ "operator*(f32x2x2)"_c, &Float32x2x2_operator_mul_Float32x2x2},
        std::pair{ "operator+=(f32x2x2)"_c, &Float32x2x2_operator_addasg_Float32x2x2},
        std::pair{ "operator-=(f32x2x2)"_c, &Float32x2x2_operator_subasg_Float32x2x2},
        std::pair{ "operator*=(f32x2x2)"_c, &Float32x2x2_operator_mulasg_Float32x2x2},
        std::pair{ "operator*(f32)"_c, &Float32x2x2_operator_scale_Float32x2x2_Float32},
        std::pair{ "operator*(f16)"_c, &Float32x2x2_operator_scale_Float32x2x2_Float16},
        std::pair{ "operator*(u32)"_c, &Float32x2x2_operator_scale_Float32x2x2_UInt32},
        std::pair{ "operator*(u16)"_c, &Float32x2x2_operator_scale_Float32x2x2_UInt16},
        std::pair{ "operator*(i32)"_c, &Float32x2x2_operator_scale_Float32x2x2_Int32},
        std::pair{ "operator*(i16)"_c, &Float32x2x2_operator_scale_Float32x2x2_Int16}
    }
    };   
}

Float32x2x3::Float32x2x3()
{
    this->name = "f32";
    this->columnSize = 3;
    this->rowSize = 2;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    // operator[](i32)
    Float32x2x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32x2x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x2x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x2x3_operator_index_Int32.name = "operator[]"_c;
    Float32x2x3_operator_index_Int32.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_index_Int32)->returnTypeSymbol = &Float32x3Type;

    // operator[](u32)
    Float32x2x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32x2x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x2x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x2x3_operator_index_UInt32.name = "operator[]"_c;
    Float32x2x3_operator_index_UInt32.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_index_UInt32)->returnTypeSymbol = &Float32x3Type;

    // operator[](i16)
    Float32x2x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32x2x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x2x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x2x3_operator_index_Int16.name = "operator[]"_c;
    Float32x2x3_operator_index_Int16.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_index_Int16)->returnTypeSymbol = &Float32x3Type;

    // operator[](u16)
    Float32x2x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32x2x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x2x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x2x3_operator_index_UInt16.name = "operator[]"_c;
    Float32x2x3_operator_index_UInt16.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_index_UInt16)->returnTypeSymbol = &Float32x3Type;

    // operator+
    Float32x2x3_operator_add_Float32x2x3_arg0.name = "_arg0"_c;
    Float32x2x3_operator_add_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_add_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Float32x2x3_operator_add_Float32x2x3.name = "operator+"_c;
    Float32x2x3_operator_add_Float32x2x3.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_add_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    // operator-
    Float32x2x3_operator_sub_Float32x2x3_arg0.name = "_arg0"_c;
    Float32x2x3_operator_sub_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_sub_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Float32x2x3_operator_sub_Float32x2x3.name = "operator-"_c;
    Float32x2x3_operator_sub_Float32x2x3.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_sub_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    // operator*
    Float32x2x3_operator_mul_Float32x2x3_arg0.name = "_arg0"_c;
    Float32x2x3_operator_mul_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_mul_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Float32x2x3_operator_mul_Float32x2x3.name = "operator*"_c;
    Float32x2x3_operator_mul_Float32x2x3.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_mul_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    // operator+=
    Float32x2x3_operator_addasg_Float32x2x3_arg0.name = "_arg0"_c;
    Float32x2x3_operator_addasg_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_addasg_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Float32x2x3_operator_addasg_Float32x2x3.name = "operator+="_c;
    Float32x2x3_operator_addasg_Float32x2x3.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_addasg_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    // operator-=
    Float32x2x3_operator_subasg_Float32x2x3_arg0.name = "_arg0"_c;
    Float32x2x3_operator_subasg_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_subasg_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Float32x2x3_operator_subasg_Float32x2x3.name = "operator-="_c;
    Float32x2x3_operator_subasg_Float32x2x3.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_subasg_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    // operator*=
    Float32x2x3_operator_mulasg_Float32x2x3_arg0.name = "_arg0"_c;
    Float32x2x3_operator_mulasg_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_mulasg_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Float32x2x3_operator_mulasg_Float32x2x3.name = "operator*="_c;
    Float32x2x3_operator_mulasg_Float32x2x3.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_mulasg_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    // operator*(f32)
    Float32x2x3_operator_scale_Float32x2x3_Float32_arg0.name = "_arg0"_c;
    Float32x2x3_operator_scale_Float32x2x3_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32x2x3_Float32_arg0)->typeSymbol = &Float32Type;
    Float32x2x3_operator_scale_Float32x2x3_Float32.name = "operator*"_c;
    Float32x2x3_operator_scale_Float32x2x3_Float32.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32x2x3_Float32)->returnTypeSymbol = &Float32x2x3Type;

    // operator*(f16)
    Float32x2x3_operator_scale_Float32x2x3_Float16_arg0.name = "_arg0"_c;
    Float32x2x3_operator_scale_Float32x2x3_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32x2x3_Float16_arg0)->typeSymbol = &Float16Type;
    Float32x2x3_operator_scale_Float32x2x3_Float16.name = "operator*"_c;
    Float32x2x3_operator_scale_Float32x2x3_Float16.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32x2x3_Float16)->returnTypeSymbol = &Float32x2x3Type;

    // operator*(u32)
    Float32x2x3_operator_scale_Float32x2x3_UInt32_arg0.name = "_arg0"_c;
    Float32x2x3_operator_scale_Float32x2x3_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32x2x3_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x2x3_operator_scale_Float32x2x3_UInt32.name = "operator*"_c;
    Float32x2x3_operator_scale_Float32x2x3_UInt32.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32x2x3_UInt32)->returnTypeSymbol = &Float32x2x3Type;

    // operator*(u16)
    Float32x2x3_operator_scale_Float32x2x3_UInt16_arg0.name = "_arg0"_c;
    Float32x2x3_operator_scale_Float32x2x3_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32x2x3_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x2x3_operator_scale_Float32x2x3_UInt16.name = "operator*"_c;
    Float32x2x3_operator_scale_Float32x2x3_UInt16.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32x2x3_UInt16)->returnTypeSymbol = &Float32x2x3Type;

    // operator*(i32)
    Float32x2x3_operator_scale_Float32x2x3_Int32_arg0.name = "_arg0"_c;
    Float32x2x3_operator_scale_Float32x2x3_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32x2x3_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x2x3_operator_scale_Float32x2x3_Int32.name = "operator*"_c;
    Float32x2x3_operator_scale_Float32x2x3_Int32.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32x2x3_Int32)->returnTypeSymbol = &Float32x2x3Type;

    // operator*(i16)
    Float32x2x3_operator_scale_Float32x2x3_Int16_arg0.name = "_arg0"_c;
    Float32x2x3_operator_scale_Float32x2x3_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32x2x3_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x2x3_operator_scale_Float32x2x3_Int16.name = "operator*"_c;
    Float32x2x3_operator_scale_Float32x2x3_Int16.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32x2x3_Int16)->returnTypeSymbol = &Float32x2x3Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f32x2x3"_c, &Float32x2x3_Float32x3_ctor},
        std::pair{ "f32x2x3"_c, &Float32x2x3_identity},
        std::pair{ "f32x2x3"_c, &Float32x2x3_Float32_6_ctor},
        std::pair{ "operator[](i32)"_c, &Float32x2x3_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float32x2x3_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float32x2x3_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float32x2x3_operator_index_UInt16},
        std::pair{ "operator+(f32x2x3)"_c, &Float32x2x3_operator_add_Float32x2x3},
        std::pair{ "operator-(f32x2x3)"_c, &Float32x2x3_operator_sub_Float32x2x3},
        std::pair{ "operator*(f32x2x3)"_c, &Float32x2x3_operator_mul_Float32x2x3},
        std::pair{ "operator+=(f32x2x3)"_c, &Float32x2x3_operator_addasg_Float32x2x3},
        std::pair{ "operator-=(f32x2x3)"_c, &Float32x2x3_operator_subasg_Float32x2x3},
        std::pair{ "operator*=(f32x2x3)"_c, &Float32x2x3_operator_mulasg_Float32x2x3},
        std::pair{ "operator*(f32)"_c, &Float32x2x3_operator_scale_Float32x2x3_Float32},
        std::pair{ "operator*(f16)"_c, &Float32x2x3_operator_scale_Float32x2x3_Float16},
        std::pair{ "operator*(u32)"_c, &Float32x2x3_operator_scale_Float32x2x3_UInt32},
        std::pair{ "operator*(u16)"_c, &Float32x2x3_operator_scale_Float32x2x3_UInt16},
        std::pair{ "operator*(i32)"_c, &Float32x2x3_operator_scale_Float32x2x3_Int32},
        std::pair{ "operator*(i16)"_c, &Float32x2x3_operator_scale_Float32x2x3_Int16}
    }
    };   
}

Float32x2x4::Float32x2x4()
{
    this->name = "f32";
    this->columnSize = 4;
    this->rowSize = 2;
    this->byteSize = 32;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    // operator[](i32)
    Float32x2x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32x2x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x2x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x2x4_operator_index_Int32.name = "operator[]"_c;
    Float32x2x4_operator_index_Int32.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_index_Int32)->returnTypeSymbol = &Float32x4Type;

    // operator[](u32)
    Float32x2x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32x2x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x2x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x2x4_operator_index_UInt32.name = "operator[]"_c;
    Float32x2x4_operator_index_UInt32.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_index_UInt32)->returnTypeSymbol = &Float32x4Type;

    // operator[](i16)
    Float32x2x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32x2x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x2x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x2x4_operator_index_Int16.name = "operator[]"_c;
    Float32x2x4_operator_index_Int16.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_index_Int16)->returnTypeSymbol = &Float32x4Type;

    // operator[](u16)
    Float32x2x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32x2x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x2x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x2x4_operator_index_UInt16.name = "operator[]"_c;
    Float32x2x4_operator_index_UInt16.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_index_UInt16)->returnTypeSymbol = &Float32x4Type;

    // operator+
    Float32x2x4_operator_add_Float32x2x4_arg0.name = "_arg0"_c;
    Float32x2x4_operator_add_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_add_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Float32x2x4_operator_add_Float32x2x4.name = "operator+"_c;
    Float32x2x4_operator_add_Float32x2x4.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_add_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    // operator-
    Float32x2x4_operator_sub_Float32x2x4_arg0.name = "_arg0"_c;
    Float32x2x4_operator_sub_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_sub_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Float32x2x4_operator_sub_Float32x2x4.name = "operator-"_c;
    Float32x2x4_operator_sub_Float32x2x4.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_sub_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    // operator*
    Float32x2x4_operator_mul_Float32x2x4_arg0.name = "_arg0"_c;
    Float32x2x4_operator_mul_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_mul_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Float32x2x4_operator_mul_Float32x2x4.name = "operator*"_c;
    Float32x2x4_operator_mul_Float32x2x4.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_mul_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    // operator+=
    Float32x2x4_operator_addasg_Float32x2x4_arg0.name = "_arg0"_c;
    Float32x2x4_operator_addasg_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_addasg_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Float32x2x4_operator_addasg_Float32x2x4.name = "operator+="_c;
    Float32x2x4_operator_addasg_Float32x2x4.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_addasg_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    // operator-=
    Float32x2x4_operator_subasg_Float32x2x4_arg0.name = "_arg0"_c;
    Float32x2x4_operator_subasg_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_subasg_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Float32x2x4_operator_subasg_Float32x2x4.name = "operator-="_c;
    Float32x2x4_operator_subasg_Float32x2x4.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_subasg_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    // operator*=
    Float32x2x4_operator_mulasg_Float32x2x4_arg0.name = "_arg0"_c;
    Float32x2x4_operator_mulasg_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_mulasg_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Float32x2x4_operator_mulasg_Float32x2x4.name = "operator*="_c;
    Float32x2x4_operator_mulasg_Float32x2x4.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_mulasg_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    // operator*(f32)
    Float32x2x4_operator_scale_Float32x2x4_Float32_arg0.name = "_arg0"_c;
    Float32x2x4_operator_scale_Float32x2x4_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32x2x4_Float32_arg0)->typeSymbol = &Float32Type;
    Float32x2x4_operator_scale_Float32x2x4_Float32.name = "operator*"_c;
    Float32x2x4_operator_scale_Float32x2x4_Float32.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32x2x4_Float32)->returnTypeSymbol = &Float32x2x4Type;

    // operator*(f16)
    Float32x2x4_operator_scale_Float32x2x4_Float16_arg0.name = "_arg0"_c;
    Float32x2x4_operator_scale_Float32x2x4_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32x2x4_Float16_arg0)->typeSymbol = &Float16Type;
    Float32x2x4_operator_scale_Float32x2x4_Float16.name = "operator*"_c;
    Float32x2x4_operator_scale_Float32x2x4_Float16.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32x2x4_Float16)->returnTypeSymbol = &Float32x2x4Type;

    // operator*(u32)
    Float32x2x4_operator_scale_Float32x2x4_UInt32_arg0.name = "_arg0"_c;
    Float32x2x4_operator_scale_Float32x2x4_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32x2x4_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x2x4_operator_scale_Float32x2x4_UInt32.name = "operator*"_c;
    Float32x2x4_operator_scale_Float32x2x4_UInt32.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32x2x4_UInt32)->returnTypeSymbol = &Float32x2x4Type;

    // operator*(u16)
    Float32x2x4_operator_scale_Float32x2x4_UInt16_arg0.name = "_arg0"_c;
    Float32x2x4_operator_scale_Float32x2x4_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32x2x4_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x2x4_operator_scale_Float32x2x4_UInt16.name = "operator*"_c;
    Float32x2x4_operator_scale_Float32x2x4_UInt16.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32x2x4_UInt16)->returnTypeSymbol = &Float32x2x4Type;

    // operator*(i32)
    Float32x2x4_operator_scale_Float32x2x4_Int32_arg0.name = "_arg0"_c;
    Float32x2x4_operator_scale_Float32x2x4_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32x2x4_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x2x4_operator_scale_Float32x2x4_Int32.name = "operator*"_c;
    Float32x2x4_operator_scale_Float32x2x4_Int32.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32x2x4_Int32)->returnTypeSymbol = &Float32x2x4Type;

    // operator*(i16)
    Float32x2x4_operator_scale_Float32x2x4_Int16_arg0.name = "_arg0"_c;
    Float32x2x4_operator_scale_Float32x2x4_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32x2x4_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x2x4_operator_scale_Float32x2x4_Int16.name = "operator*"_c;
    Float32x2x4_operator_scale_Float32x2x4_Int16.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32x2x4_Int16)->returnTypeSymbol = &Float32x2x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f32x2x4"_c, &Float32x2x4_Float32x4_ctor},
        std::pair{ "f32x2x4"_c, &Float32x2x4_identity},
        std::pair{ "f32x2x4"_c, &Float32x2x4_Float32_8_ctor},
        std::pair{ "operator[](i32)"_c, &Float32x2x4_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float32x2x4_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float32x2x4_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float32x2x4_operator_index_UInt16},
        std::pair{ "operator+(f32x2x4)"_c, &Float32x2x4_operator_add_Float32x2x4},
        std::pair{ "operator-(f32x2x4)"_c, &Float32x2x4_operator_sub_Float32x2x4},
        std::pair{ "operator*(f32x2x4)"_c, &Float32x2x4_operator_mul_Float32x2x4},
        std::pair{ "operator+=(f32x2x4)"_c, &Float32x2x4_operator_addasg_Float32x2x4},
        std::pair{ "operator-=(f32x2x4)"_c, &Float32x2x4_operator_subasg_Float32x2x4},
        std::pair{ "operator*=(f32x2x4)"_c, &Float32x2x4_operator_mulasg_Float32x2x4},
        std::pair{ "operator*(f32)"_c, &Float32x2x4_operator_scale_Float32x2x4_Float32},
        std::pair{ "operator*(f16)"_c, &Float32x2x4_operator_scale_Float32x2x4_Float16},
        std::pair{ "operator*(u32)"_c, &Float32x2x4_operator_scale_Float32x2x4_UInt32},
        std::pair{ "operator*(u16)"_c, &Float32x2x4_operator_scale_Float32x2x4_UInt16},
        std::pair{ "operator*(i32)"_c, &Float32x2x4_operator_scale_Float32x2x4_Int32},
        std::pair{ "operator*(i16)"_c, &Float32x2x4_operator_scale_Float32x2x4_Int16}
    }
    };   
}

Float32x3x2::Float32x3x2()
{
    this->name = "f32";
    this->columnSize = 2;
    this->rowSize = 3;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    // operator[](i32)
    Float32x3x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32x3x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x3x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x3x2_operator_index_Int32.name = "operator[]"_c;
    Float32x3x2_operator_index_Int32.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_index_Int32)->returnTypeSymbol = &Float32x2Type;

    // operator[](u32)
    Float32x3x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32x3x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x3x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x3x2_operator_index_UInt32.name = "operator[]"_c;
    Float32x3x2_operator_index_UInt32.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_index_UInt32)->returnTypeSymbol = &Float32x2Type;

    // operator[](i16)
    Float32x3x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32x3x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x3x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x3x2_operator_index_Int16.name = "operator[]"_c;
    Float32x3x2_operator_index_Int16.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_index_Int16)->returnTypeSymbol = &Float32x2Type;

    // operator[](u16)
    Float32x3x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32x3x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x3x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x3x2_operator_index_UInt16.name = "operator[]"_c;
    Float32x3x2_operator_index_UInt16.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_index_UInt16)->returnTypeSymbol = &Float32x2Type;

    // operator+
    Float32x3x2_operator_add_Float32x3x2_arg0.name = "_arg0"_c;
    Float32x3x2_operator_add_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_add_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Float32x3x2_operator_add_Float32x3x2.name = "operator+"_c;
    Float32x3x2_operator_add_Float32x3x2.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_add_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    // operator-
    Float32x3x2_operator_sub_Float32x3x2_arg0.name = "_arg0"_c;
    Float32x3x2_operator_sub_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_sub_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Float32x3x2_operator_sub_Float32x3x2.name = "operator-"_c;
    Float32x3x2_operator_sub_Float32x3x2.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_sub_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    // operator*
    Float32x3x2_operator_mul_Float32x3x2_arg0.name = "_arg0"_c;
    Float32x3x2_operator_mul_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_mul_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Float32x3x2_operator_mul_Float32x3x2.name = "operator*"_c;
    Float32x3x2_operator_mul_Float32x3x2.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_mul_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    // operator+=
    Float32x3x2_operator_addasg_Float32x3x2_arg0.name = "_arg0"_c;
    Float32x3x2_operator_addasg_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_addasg_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Float32x3x2_operator_addasg_Float32x3x2.name = "operator+="_c;
    Float32x3x2_operator_addasg_Float32x3x2.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_addasg_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    // operator-=
    Float32x3x2_operator_subasg_Float32x3x2_arg0.name = "_arg0"_c;
    Float32x3x2_operator_subasg_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_subasg_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Float32x3x2_operator_subasg_Float32x3x2.name = "operator-="_c;
    Float32x3x2_operator_subasg_Float32x3x2.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_subasg_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    // operator*=
    Float32x3x2_operator_mulasg_Float32x3x2_arg0.name = "_arg0"_c;
    Float32x3x2_operator_mulasg_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_mulasg_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Float32x3x2_operator_mulasg_Float32x3x2.name = "operator*="_c;
    Float32x3x2_operator_mulasg_Float32x3x2.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_mulasg_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    // operator*(f32)
    Float32x3x2_operator_scale_Float32x3x2_Float32_arg0.name = "_arg0"_c;
    Float32x3x2_operator_scale_Float32x3x2_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32x3x2_Float32_arg0)->typeSymbol = &Float32Type;
    Float32x3x2_operator_scale_Float32x3x2_Float32.name = "operator*"_c;
    Float32x3x2_operator_scale_Float32x3x2_Float32.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32x3x2_Float32)->returnTypeSymbol = &Float32x3x2Type;

    // operator*(f16)
    Float32x3x2_operator_scale_Float32x3x2_Float16_arg0.name = "_arg0"_c;
    Float32x3x2_operator_scale_Float32x3x2_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32x3x2_Float16_arg0)->typeSymbol = &Float16Type;
    Float32x3x2_operator_scale_Float32x3x2_Float16.name = "operator*"_c;
    Float32x3x2_operator_scale_Float32x3x2_Float16.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32x3x2_Float16)->returnTypeSymbol = &Float32x3x2Type;

    // operator*(u32)
    Float32x3x2_operator_scale_Float32x3x2_UInt32_arg0.name = "_arg0"_c;
    Float32x3x2_operator_scale_Float32x3x2_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32x3x2_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x3x2_operator_scale_Float32x3x2_UInt32.name = "operator*"_c;
    Float32x3x2_operator_scale_Float32x3x2_UInt32.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32x3x2_UInt32)->returnTypeSymbol = &Float32x3x2Type;

    // operator*(u16)
    Float32x3x2_operator_scale_Float32x3x2_UInt16_arg0.name = "_arg0"_c;
    Float32x3x2_operator_scale_Float32x3x2_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32x3x2_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x3x2_operator_scale_Float32x3x2_UInt16.name = "operator*"_c;
    Float32x3x2_operator_scale_Float32x3x2_UInt16.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32x3x2_UInt16)->returnTypeSymbol = &Float32x3x2Type;

    // operator*(i32)
    Float32x3x2_operator_scale_Float32x3x2_Int32_arg0.name = "_arg0"_c;
    Float32x3x2_operator_scale_Float32x3x2_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32x3x2_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x3x2_operator_scale_Float32x3x2_Int32.name = "operator*"_c;
    Float32x3x2_operator_scale_Float32x3x2_Int32.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32x3x2_Int32)->returnTypeSymbol = &Float32x3x2Type;

    // operator*(i16)
    Float32x3x2_operator_scale_Float32x3x2_Int16_arg0.name = "_arg0"_c;
    Float32x3x2_operator_scale_Float32x3x2_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32x3x2_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x3x2_operator_scale_Float32x3x2_Int16.name = "operator*"_c;
    Float32x3x2_operator_scale_Float32x3x2_Int16.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32x3x2_Int16)->returnTypeSymbol = &Float32x3x2Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f32x3x2"_c, &Float32x3x2_Float32x2_ctor},
        std::pair{ "f32x3x2"_c, &Float32x3x2_identity},
        std::pair{ "f32x3x2"_c, &Float32x3x2_Float32_6_ctor},
        std::pair{ "operator[](i32)"_c, &Float32x3x2_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float32x3x2_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float32x3x2_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float32x3x2_operator_index_UInt16},
        std::pair{ "operator+(f32x3x2)"_c, &Float32x3x2_operator_add_Float32x3x2},
        std::pair{ "operator-(f32x3x2)"_c, &Float32x3x2_operator_sub_Float32x3x2},
        std::pair{ "operator*(f32x3x2)"_c, &Float32x3x2_operator_mul_Float32x3x2},
        std::pair{ "operator+=(f32x3x2)"_c, &Float32x3x2_operator_addasg_Float32x3x2},
        std::pair{ "operator-=(f32x3x2)"_c, &Float32x3x2_operator_subasg_Float32x3x2},
        std::pair{ "operator*=(f32x3x2)"_c, &Float32x3x2_operator_mulasg_Float32x3x2},
        std::pair{ "operator*(f32)"_c, &Float32x3x2_operator_scale_Float32x3x2_Float32},
        std::pair{ "operator*(f16)"_c, &Float32x3x2_operator_scale_Float32x3x2_Float16},
        std::pair{ "operator*(u32)"_c, &Float32x3x2_operator_scale_Float32x3x2_UInt32},
        std::pair{ "operator*(u16)"_c, &Float32x3x2_operator_scale_Float32x3x2_UInt16},
        std::pair{ "operator*(i32)"_c, &Float32x3x2_operator_scale_Float32x3x2_Int32},
        std::pair{ "operator*(i16)"_c, &Float32x3x2_operator_scale_Float32x3x2_Int16}
    }
    };   
}

Float32x3x3::Float32x3x3()
{
    this->name = "f32";
    this->columnSize = 3;
    this->rowSize = 3;
    this->byteSize = 36;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    // operator[](i32)
    Float32x3x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32x3x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x3x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x3x3_operator_index_Int32.name = "operator[]"_c;
    Float32x3x3_operator_index_Int32.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_index_Int32)->returnTypeSymbol = &Float32x3Type;

    // operator[](u32)
    Float32x3x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32x3x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x3x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x3x3_operator_index_UInt32.name = "operator[]"_c;
    Float32x3x3_operator_index_UInt32.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_index_UInt32)->returnTypeSymbol = &Float32x3Type;

    // operator[](i16)
    Float32x3x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32x3x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x3x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x3x3_operator_index_Int16.name = "operator[]"_c;
    Float32x3x3_operator_index_Int16.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_index_Int16)->returnTypeSymbol = &Float32x3Type;

    // operator[](u16)
    Float32x3x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32x3x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x3x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x3x3_operator_index_UInt16.name = "operator[]"_c;
    Float32x3x3_operator_index_UInt16.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_index_UInt16)->returnTypeSymbol = &Float32x3Type;

    // operator+
    Float32x3x3_operator_add_Float32x3x3_arg0.name = "_arg0"_c;
    Float32x3x3_operator_add_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_add_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Float32x3x3_operator_add_Float32x3x3.name = "operator+"_c;
    Float32x3x3_operator_add_Float32x3x3.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_add_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    // operator-
    Float32x3x3_operator_sub_Float32x3x3_arg0.name = "_arg0"_c;
    Float32x3x3_operator_sub_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_sub_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Float32x3x3_operator_sub_Float32x3x3.name = "operator-"_c;
    Float32x3x3_operator_sub_Float32x3x3.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_sub_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    // operator*
    Float32x3x3_operator_mul_Float32x3x3_arg0.name = "_arg0"_c;
    Float32x3x3_operator_mul_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_mul_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Float32x3x3_operator_mul_Float32x3x3.name = "operator*"_c;
    Float32x3x3_operator_mul_Float32x3x3.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_mul_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    // operator+=
    Float32x3x3_operator_addasg_Float32x3x3_arg0.name = "_arg0"_c;
    Float32x3x3_operator_addasg_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_addasg_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Float32x3x3_operator_addasg_Float32x3x3.name = "operator+="_c;
    Float32x3x3_operator_addasg_Float32x3x3.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_addasg_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    // operator-=
    Float32x3x3_operator_subasg_Float32x3x3_arg0.name = "_arg0"_c;
    Float32x3x3_operator_subasg_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_subasg_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Float32x3x3_operator_subasg_Float32x3x3.name = "operator-="_c;
    Float32x3x3_operator_subasg_Float32x3x3.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_subasg_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    // operator*=
    Float32x3x3_operator_mulasg_Float32x3x3_arg0.name = "_arg0"_c;
    Float32x3x3_operator_mulasg_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_mulasg_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Float32x3x3_operator_mulasg_Float32x3x3.name = "operator*="_c;
    Float32x3x3_operator_mulasg_Float32x3x3.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_mulasg_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    // operator*(f32)
    Float32x3x3_operator_scale_Float32x3x3_Float32_arg0.name = "_arg0"_c;
    Float32x3x3_operator_scale_Float32x3x3_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32x3x3_Float32_arg0)->typeSymbol = &Float32Type;
    Float32x3x3_operator_scale_Float32x3x3_Float32.name = "operator*"_c;
    Float32x3x3_operator_scale_Float32x3x3_Float32.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32x3x3_Float32)->returnTypeSymbol = &Float32x3x3Type;

    // operator*(f16)
    Float32x3x3_operator_scale_Float32x3x3_Float16_arg0.name = "_arg0"_c;
    Float32x3x3_operator_scale_Float32x3x3_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32x3x3_Float16_arg0)->typeSymbol = &Float16Type;
    Float32x3x3_operator_scale_Float32x3x3_Float16.name = "operator*"_c;
    Float32x3x3_operator_scale_Float32x3x3_Float16.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32x3x3_Float16)->returnTypeSymbol = &Float32x3x3Type;

    // operator*(u32)
    Float32x3x3_operator_scale_Float32x3x3_UInt32_arg0.name = "_arg0"_c;
    Float32x3x3_operator_scale_Float32x3x3_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32x3x3_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x3x3_operator_scale_Float32x3x3_UInt32.name = "operator*"_c;
    Float32x3x3_operator_scale_Float32x3x3_UInt32.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32x3x3_UInt32)->returnTypeSymbol = &Float32x3x3Type;

    // operator*(u16)
    Float32x3x3_operator_scale_Float32x3x3_UInt16_arg0.name = "_arg0"_c;
    Float32x3x3_operator_scale_Float32x3x3_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32x3x3_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x3x3_operator_scale_Float32x3x3_UInt16.name = "operator*"_c;
    Float32x3x3_operator_scale_Float32x3x3_UInt16.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32x3x3_UInt16)->returnTypeSymbol = &Float32x3x3Type;

    // operator*(i32)
    Float32x3x3_operator_scale_Float32x3x3_Int32_arg0.name = "_arg0"_c;
    Float32x3x3_operator_scale_Float32x3x3_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32x3x3_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x3x3_operator_scale_Float32x3x3_Int32.name = "operator*"_c;
    Float32x3x3_operator_scale_Float32x3x3_Int32.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32x3x3_Int32)->returnTypeSymbol = &Float32x3x3Type;

    // operator*(i16)
    Float32x3x3_operator_scale_Float32x3x3_Int16_arg0.name = "_arg0"_c;
    Float32x3x3_operator_scale_Float32x3x3_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32x3x3_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x3x3_operator_scale_Float32x3x3_Int16.name = "operator*"_c;
    Float32x3x3_operator_scale_Float32x3x3_Int16.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32x3x3_Int16)->returnTypeSymbol = &Float32x3x3Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f32x3x3"_c, &Float32x3x3_Float32x3_ctor},
        std::pair{ "f32x3x3"_c, &Float32x3x3_identity},
        std::pair{ "f32x3x3"_c, &Float32x3x3_Float32_9_ctor},
        std::pair{ "operator[](i32)"_c, &Float32x3x3_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float32x3x3_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float32x3x3_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float32x3x3_operator_index_UInt16},
        std::pair{ "operator+(f32x3x3)"_c, &Float32x3x3_operator_add_Float32x3x3},
        std::pair{ "operator-(f32x3x3)"_c, &Float32x3x3_operator_sub_Float32x3x3},
        std::pair{ "operator*(f32x3x3)"_c, &Float32x3x3_operator_mul_Float32x3x3},
        std::pair{ "operator+=(f32x3x3)"_c, &Float32x3x3_operator_addasg_Float32x3x3},
        std::pair{ "operator-=(f32x3x3)"_c, &Float32x3x3_operator_subasg_Float32x3x3},
        std::pair{ "operator*=(f32x3x3)"_c, &Float32x3x3_operator_mulasg_Float32x3x3},
        std::pair{ "operator*(f32)"_c, &Float32x3x3_operator_scale_Float32x3x3_Float32},
        std::pair{ "operator*(f16)"_c, &Float32x3x3_operator_scale_Float32x3x3_Float16},
        std::pair{ "operator*(u32)"_c, &Float32x3x3_operator_scale_Float32x3x3_UInt32},
        std::pair{ "operator*(u16)"_c, &Float32x3x3_operator_scale_Float32x3x3_UInt16},
        std::pair{ "operator*(i32)"_c, &Float32x3x3_operator_scale_Float32x3x3_Int32},
        std::pair{ "operator*(i16)"_c, &Float32x3x3_operator_scale_Float32x3x3_Int16}
    }
    };   
}

Float32x3x4::Float32x3x4()
{
    this->name = "f32";
    this->columnSize = 4;
    this->rowSize = 3;
    this->byteSize = 48;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    // operator[](i32)
    Float32x3x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32x3x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x3x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x3x4_operator_index_Int32.name = "operator[]"_c;
    Float32x3x4_operator_index_Int32.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_index_Int32)->returnTypeSymbol = &Float32x4Type;

    // operator[](u32)
    Float32x3x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32x3x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x3x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x3x4_operator_index_UInt32.name = "operator[]"_c;
    Float32x3x4_operator_index_UInt32.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_index_UInt32)->returnTypeSymbol = &Float32x4Type;

    // operator[](i16)
    Float32x3x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32x3x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x3x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x3x4_operator_index_Int16.name = "operator[]"_c;
    Float32x3x4_operator_index_Int16.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_index_Int16)->returnTypeSymbol = &Float32x4Type;

    // operator[](u16)
    Float32x3x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32x3x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x3x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x3x4_operator_index_UInt16.name = "operator[]"_c;
    Float32x3x4_operator_index_UInt16.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_index_UInt16)->returnTypeSymbol = &Float32x4Type;

    // operator+
    Float32x3x4_operator_add_Float32x3x4_arg0.name = "_arg0"_c;
    Float32x3x4_operator_add_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_add_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Float32x3x4_operator_add_Float32x3x4.name = "operator+"_c;
    Float32x3x4_operator_add_Float32x3x4.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_add_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    // operator-
    Float32x3x4_operator_sub_Float32x3x4_arg0.name = "_arg0"_c;
    Float32x3x4_operator_sub_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_sub_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Float32x3x4_operator_sub_Float32x3x4.name = "operator-"_c;
    Float32x3x4_operator_sub_Float32x3x4.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_sub_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    // operator*
    Float32x3x4_operator_mul_Float32x3x4_arg0.name = "_arg0"_c;
    Float32x3x4_operator_mul_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_mul_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Float32x3x4_operator_mul_Float32x3x4.name = "operator*"_c;
    Float32x3x4_operator_mul_Float32x3x4.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_mul_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    // operator+=
    Float32x3x4_operator_addasg_Float32x3x4_arg0.name = "_arg0"_c;
    Float32x3x4_operator_addasg_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_addasg_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Float32x3x4_operator_addasg_Float32x3x4.name = "operator+="_c;
    Float32x3x4_operator_addasg_Float32x3x4.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_addasg_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    // operator-=
    Float32x3x4_operator_subasg_Float32x3x4_arg0.name = "_arg0"_c;
    Float32x3x4_operator_subasg_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_subasg_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Float32x3x4_operator_subasg_Float32x3x4.name = "operator-="_c;
    Float32x3x4_operator_subasg_Float32x3x4.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_subasg_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    // operator*=
    Float32x3x4_operator_mulasg_Float32x3x4_arg0.name = "_arg0"_c;
    Float32x3x4_operator_mulasg_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_mulasg_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Float32x3x4_operator_mulasg_Float32x3x4.name = "operator*="_c;
    Float32x3x4_operator_mulasg_Float32x3x4.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_mulasg_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    // operator*(f32)
    Float32x3x4_operator_scale_Float32x3x4_Float32_arg0.name = "_arg0"_c;
    Float32x3x4_operator_scale_Float32x3x4_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32x3x4_Float32_arg0)->typeSymbol = &Float32Type;
    Float32x3x4_operator_scale_Float32x3x4_Float32.name = "operator*"_c;
    Float32x3x4_operator_scale_Float32x3x4_Float32.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32x3x4_Float32)->returnTypeSymbol = &Float32x3x4Type;

    // operator*(f16)
    Float32x3x4_operator_scale_Float32x3x4_Float16_arg0.name = "_arg0"_c;
    Float32x3x4_operator_scale_Float32x3x4_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32x3x4_Float16_arg0)->typeSymbol = &Float16Type;
    Float32x3x4_operator_scale_Float32x3x4_Float16.name = "operator*"_c;
    Float32x3x4_operator_scale_Float32x3x4_Float16.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32x3x4_Float16)->returnTypeSymbol = &Float32x3x4Type;

    // operator*(u32)
    Float32x3x4_operator_scale_Float32x3x4_UInt32_arg0.name = "_arg0"_c;
    Float32x3x4_operator_scale_Float32x3x4_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32x3x4_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x3x4_operator_scale_Float32x3x4_UInt32.name = "operator*"_c;
    Float32x3x4_operator_scale_Float32x3x4_UInt32.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32x3x4_UInt32)->returnTypeSymbol = &Float32x3x4Type;

    // operator*(u16)
    Float32x3x4_operator_scale_Float32x3x4_UInt16_arg0.name = "_arg0"_c;
    Float32x3x4_operator_scale_Float32x3x4_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32x3x4_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x3x4_operator_scale_Float32x3x4_UInt16.name = "operator*"_c;
    Float32x3x4_operator_scale_Float32x3x4_UInt16.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32x3x4_UInt16)->returnTypeSymbol = &Float32x3x4Type;

    // operator*(i32)
    Float32x3x4_operator_scale_Float32x3x4_Int32_arg0.name = "_arg0"_c;
    Float32x3x4_operator_scale_Float32x3x4_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32x3x4_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x3x4_operator_scale_Float32x3x4_Int32.name = "operator*"_c;
    Float32x3x4_operator_scale_Float32x3x4_Int32.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32x3x4_Int32)->returnTypeSymbol = &Float32x3x4Type;

    // operator*(i16)
    Float32x3x4_operator_scale_Float32x3x4_Int16_arg0.name = "_arg0"_c;
    Float32x3x4_operator_scale_Float32x3x4_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32x3x4_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x3x4_operator_scale_Float32x3x4_Int16.name = "operator*"_c;
    Float32x3x4_operator_scale_Float32x3x4_Int16.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32x3x4_Int16)->returnTypeSymbol = &Float32x3x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f32x3x4"_c, &Float32x3x4_Float32x4_ctor},
        std::pair{ "f32x3x4"_c, &Float32x3x4_identity},
        std::pair{ "f32x3x4"_c, &Float32x3x4_Float32_12_ctor},
        std::pair{ "operator[](i32)"_c, &Float32x3x4_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float32x3x4_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float32x3x4_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float32x3x4_operator_index_UInt16},
        std::pair{ "operator+(f32x3x4)"_c, &Float32x3x4_operator_add_Float32x3x4},
        std::pair{ "operator-(f32x3x4)"_c, &Float32x3x4_operator_sub_Float32x3x4},
        std::pair{ "operator*(f32x3x4)"_c, &Float32x3x4_operator_mul_Float32x3x4},
        std::pair{ "operator+=(f32x3x4)"_c, &Float32x3x4_operator_addasg_Float32x3x4},
        std::pair{ "operator-=(f32x3x4)"_c, &Float32x3x4_operator_subasg_Float32x3x4},
        std::pair{ "operator*=(f32x3x4)"_c, &Float32x3x4_operator_mulasg_Float32x3x4},
        std::pair{ "operator*(f32)"_c, &Float32x3x4_operator_scale_Float32x3x4_Float32},
        std::pair{ "operator*(f16)"_c, &Float32x3x4_operator_scale_Float32x3x4_Float16},
        std::pair{ "operator*(u32)"_c, &Float32x3x4_operator_scale_Float32x3x4_UInt32},
        std::pair{ "operator*(u16)"_c, &Float32x3x4_operator_scale_Float32x3x4_UInt16},
        std::pair{ "operator*(i32)"_c, &Float32x3x4_operator_scale_Float32x3x4_Int32},
        std::pair{ "operator*(i16)"_c, &Float32x3x4_operator_scale_Float32x3x4_Int16}
    }
    };   
}

Float32x4x2::Float32x4x2()
{
    this->name = "f32";
    this->columnSize = 2;
    this->rowSize = 4;
    this->byteSize = 32;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    // operator[](i32)
    Float32x4x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32x4x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x4x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x4x2_operator_index_Int32.name = "operator[]"_c;
    Float32x4x2_operator_index_Int32.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_index_Int32)->returnTypeSymbol = &Float32x2Type;

    // operator[](u32)
    Float32x4x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32x4x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x4x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x4x2_operator_index_UInt32.name = "operator[]"_c;
    Float32x4x2_operator_index_UInt32.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_index_UInt32)->returnTypeSymbol = &Float32x2Type;

    // operator[](i16)
    Float32x4x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32x4x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x4x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x4x2_operator_index_Int16.name = "operator[]"_c;
    Float32x4x2_operator_index_Int16.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_index_Int16)->returnTypeSymbol = &Float32x2Type;

    // operator[](u16)
    Float32x4x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32x4x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x4x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x4x2_operator_index_UInt16.name = "operator[]"_c;
    Float32x4x2_operator_index_UInt16.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_index_UInt16)->returnTypeSymbol = &Float32x2Type;

    // operator+
    Float32x4x2_operator_add_Float32x4x2_arg0.name = "_arg0"_c;
    Float32x4x2_operator_add_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_add_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Float32x4x2_operator_add_Float32x4x2.name = "operator+"_c;
    Float32x4x2_operator_add_Float32x4x2.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_add_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    // operator-
    Float32x4x2_operator_sub_Float32x4x2_arg0.name = "_arg0"_c;
    Float32x4x2_operator_sub_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_sub_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Float32x4x2_operator_sub_Float32x4x2.name = "operator-"_c;
    Float32x4x2_operator_sub_Float32x4x2.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_sub_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    // operator*
    Float32x4x2_operator_mul_Float32x4x2_arg0.name = "_arg0"_c;
    Float32x4x2_operator_mul_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_mul_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Float32x4x2_operator_mul_Float32x4x2.name = "operator*"_c;
    Float32x4x2_operator_mul_Float32x4x2.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_mul_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    // operator+=
    Float32x4x2_operator_addasg_Float32x4x2_arg0.name = "_arg0"_c;
    Float32x4x2_operator_addasg_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_addasg_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Float32x4x2_operator_addasg_Float32x4x2.name = "operator+="_c;
    Float32x4x2_operator_addasg_Float32x4x2.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_addasg_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    // operator-=
    Float32x4x2_operator_subasg_Float32x4x2_arg0.name = "_arg0"_c;
    Float32x4x2_operator_subasg_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_subasg_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Float32x4x2_operator_subasg_Float32x4x2.name = "operator-="_c;
    Float32x4x2_operator_subasg_Float32x4x2.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_subasg_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    // operator*=
    Float32x4x2_operator_mulasg_Float32x4x2_arg0.name = "_arg0"_c;
    Float32x4x2_operator_mulasg_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_mulasg_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Float32x4x2_operator_mulasg_Float32x4x2.name = "operator*="_c;
    Float32x4x2_operator_mulasg_Float32x4x2.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_mulasg_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    // operator*(f32)
    Float32x4x2_operator_scale_Float32x4x2_Float32_arg0.name = "_arg0"_c;
    Float32x4x2_operator_scale_Float32x4x2_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32x4x2_Float32_arg0)->typeSymbol = &Float32Type;
    Float32x4x2_operator_scale_Float32x4x2_Float32.name = "operator*"_c;
    Float32x4x2_operator_scale_Float32x4x2_Float32.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32x4x2_Float32)->returnTypeSymbol = &Float32x4x2Type;

    // operator*(f16)
    Float32x4x2_operator_scale_Float32x4x2_Float16_arg0.name = "_arg0"_c;
    Float32x4x2_operator_scale_Float32x4x2_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32x4x2_Float16_arg0)->typeSymbol = &Float16Type;
    Float32x4x2_operator_scale_Float32x4x2_Float16.name = "operator*"_c;
    Float32x4x2_operator_scale_Float32x4x2_Float16.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32x4x2_Float16)->returnTypeSymbol = &Float32x4x2Type;

    // operator*(u32)
    Float32x4x2_operator_scale_Float32x4x2_UInt32_arg0.name = "_arg0"_c;
    Float32x4x2_operator_scale_Float32x4x2_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32x4x2_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x4x2_operator_scale_Float32x4x2_UInt32.name = "operator*"_c;
    Float32x4x2_operator_scale_Float32x4x2_UInt32.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32x4x2_UInt32)->returnTypeSymbol = &Float32x4x2Type;

    // operator*(u16)
    Float32x4x2_operator_scale_Float32x4x2_UInt16_arg0.name = "_arg0"_c;
    Float32x4x2_operator_scale_Float32x4x2_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32x4x2_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x4x2_operator_scale_Float32x4x2_UInt16.name = "operator*"_c;
    Float32x4x2_operator_scale_Float32x4x2_UInt16.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32x4x2_UInt16)->returnTypeSymbol = &Float32x4x2Type;

    // operator*(i32)
    Float32x4x2_operator_scale_Float32x4x2_Int32_arg0.name = "_arg0"_c;
    Float32x4x2_operator_scale_Float32x4x2_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32x4x2_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x4x2_operator_scale_Float32x4x2_Int32.name = "operator*"_c;
    Float32x4x2_operator_scale_Float32x4x2_Int32.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32x4x2_Int32)->returnTypeSymbol = &Float32x4x2Type;

    // operator*(i16)
    Float32x4x2_operator_scale_Float32x4x2_Int16_arg0.name = "_arg0"_c;
    Float32x4x2_operator_scale_Float32x4x2_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32x4x2_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x4x2_operator_scale_Float32x4x2_Int16.name = "operator*"_c;
    Float32x4x2_operator_scale_Float32x4x2_Int16.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32x4x2_Int16)->returnTypeSymbol = &Float32x4x2Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f32x4x2"_c, &Float32x4x2_Float32x2_ctor},
        std::pair{ "f32x4x2"_c, &Float32x4x2_identity},
        std::pair{ "f32x4x2"_c, &Float32x4x2_Float32_8_ctor},
        std::pair{ "operator[](i32)"_c, &Float32x4x2_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float32x4x2_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float32x4x2_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float32x4x2_operator_index_UInt16},
        std::pair{ "operator+(f32x4x2)"_c, &Float32x4x2_operator_add_Float32x4x2},
        std::pair{ "operator-(f32x4x2)"_c, &Float32x4x2_operator_sub_Float32x4x2},
        std::pair{ "operator*(f32x4x2)"_c, &Float32x4x2_operator_mul_Float32x4x2},
        std::pair{ "operator+=(f32x4x2)"_c, &Float32x4x2_operator_addasg_Float32x4x2},
        std::pair{ "operator-=(f32x4x2)"_c, &Float32x4x2_operator_subasg_Float32x4x2},
        std::pair{ "operator*=(f32x4x2)"_c, &Float32x4x2_operator_mulasg_Float32x4x2},
        std::pair{ "operator*(f32)"_c, &Float32x4x2_operator_scale_Float32x4x2_Float32},
        std::pair{ "operator*(f16)"_c, &Float32x4x2_operator_scale_Float32x4x2_Float16},
        std::pair{ "operator*(u32)"_c, &Float32x4x2_operator_scale_Float32x4x2_UInt32},
        std::pair{ "operator*(u16)"_c, &Float32x4x2_operator_scale_Float32x4x2_UInt16},
        std::pair{ "operator*(i32)"_c, &Float32x4x2_operator_scale_Float32x4x2_Int32},
        std::pair{ "operator*(i16)"_c, &Float32x4x2_operator_scale_Float32x4x2_Int16}
    }
    };   
}

Float32x4x3::Float32x4x3()
{
    this->name = "f32";
    this->columnSize = 3;
    this->rowSize = 4;
    this->byteSize = 48;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    // operator[](i32)
    Float32x4x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32x4x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x4x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x4x3_operator_index_Int32.name = "operator[]"_c;
    Float32x4x3_operator_index_Int32.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_index_Int32)->returnTypeSymbol = &Float32x3Type;

    // operator[](u32)
    Float32x4x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32x4x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x4x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x4x3_operator_index_UInt32.name = "operator[]"_c;
    Float32x4x3_operator_index_UInt32.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_index_UInt32)->returnTypeSymbol = &Float32x3Type;

    // operator[](i16)
    Float32x4x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32x4x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x4x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x4x3_operator_index_Int16.name = "operator[]"_c;
    Float32x4x3_operator_index_Int16.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_index_Int16)->returnTypeSymbol = &Float32x3Type;

    // operator[](u16)
    Float32x4x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32x4x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x4x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x4x3_operator_index_UInt16.name = "operator[]"_c;
    Float32x4x3_operator_index_UInt16.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_index_UInt16)->returnTypeSymbol = &Float32x3Type;

    // operator+
    Float32x4x3_operator_add_Float32x4x3_arg0.name = "_arg0"_c;
    Float32x4x3_operator_add_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_add_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Float32x4x3_operator_add_Float32x4x3.name = "operator+"_c;
    Float32x4x3_operator_add_Float32x4x3.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_add_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    // operator-
    Float32x4x3_operator_sub_Float32x4x3_arg0.name = "_arg0"_c;
    Float32x4x3_operator_sub_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_sub_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Float32x4x3_operator_sub_Float32x4x3.name = "operator-"_c;
    Float32x4x3_operator_sub_Float32x4x3.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_sub_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    // operator*
    Float32x4x3_operator_mul_Float32x4x3_arg0.name = "_arg0"_c;
    Float32x4x3_operator_mul_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_mul_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Float32x4x3_operator_mul_Float32x4x3.name = "operator*"_c;
    Float32x4x3_operator_mul_Float32x4x3.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_mul_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    // operator+=
    Float32x4x3_operator_addasg_Float32x4x3_arg0.name = "_arg0"_c;
    Float32x4x3_operator_addasg_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_addasg_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Float32x4x3_operator_addasg_Float32x4x3.name = "operator+="_c;
    Float32x4x3_operator_addasg_Float32x4x3.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_addasg_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    // operator-=
    Float32x4x3_operator_subasg_Float32x4x3_arg0.name = "_arg0"_c;
    Float32x4x3_operator_subasg_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_subasg_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Float32x4x3_operator_subasg_Float32x4x3.name = "operator-="_c;
    Float32x4x3_operator_subasg_Float32x4x3.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_subasg_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    // operator*=
    Float32x4x3_operator_mulasg_Float32x4x3_arg0.name = "_arg0"_c;
    Float32x4x3_operator_mulasg_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_mulasg_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Float32x4x3_operator_mulasg_Float32x4x3.name = "operator*="_c;
    Float32x4x3_operator_mulasg_Float32x4x3.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_mulasg_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    // operator*(f32)
    Float32x4x3_operator_scale_Float32x4x3_Float32_arg0.name = "_arg0"_c;
    Float32x4x3_operator_scale_Float32x4x3_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32x4x3_Float32_arg0)->typeSymbol = &Float32Type;
    Float32x4x3_operator_scale_Float32x4x3_Float32.name = "operator*"_c;
    Float32x4x3_operator_scale_Float32x4x3_Float32.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32x4x3_Float32)->returnTypeSymbol = &Float32x4x3Type;

    // operator*(f16)
    Float32x4x3_operator_scale_Float32x4x3_Float16_arg0.name = "_arg0"_c;
    Float32x4x3_operator_scale_Float32x4x3_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32x4x3_Float16_arg0)->typeSymbol = &Float16Type;
    Float32x4x3_operator_scale_Float32x4x3_Float16.name = "operator*"_c;
    Float32x4x3_operator_scale_Float32x4x3_Float16.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32x4x3_Float16)->returnTypeSymbol = &Float32x4x3Type;

    // operator*(u32)
    Float32x4x3_operator_scale_Float32x4x3_UInt32_arg0.name = "_arg0"_c;
    Float32x4x3_operator_scale_Float32x4x3_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32x4x3_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x4x3_operator_scale_Float32x4x3_UInt32.name = "operator*"_c;
    Float32x4x3_operator_scale_Float32x4x3_UInt32.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32x4x3_UInt32)->returnTypeSymbol = &Float32x4x3Type;

    // operator*(u16)
    Float32x4x3_operator_scale_Float32x4x3_UInt16_arg0.name = "_arg0"_c;
    Float32x4x3_operator_scale_Float32x4x3_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32x4x3_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x4x3_operator_scale_Float32x4x3_UInt16.name = "operator*"_c;
    Float32x4x3_operator_scale_Float32x4x3_UInt16.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32x4x3_UInt16)->returnTypeSymbol = &Float32x4x3Type;

    // operator*(i32)
    Float32x4x3_operator_scale_Float32x4x3_Int32_arg0.name = "_arg0"_c;
    Float32x4x3_operator_scale_Float32x4x3_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32x4x3_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x4x3_operator_scale_Float32x4x3_Int32.name = "operator*"_c;
    Float32x4x3_operator_scale_Float32x4x3_Int32.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32x4x3_Int32)->returnTypeSymbol = &Float32x4x3Type;

    // operator*(i16)
    Float32x4x3_operator_scale_Float32x4x3_Int16_arg0.name = "_arg0"_c;
    Float32x4x3_operator_scale_Float32x4x3_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32x4x3_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x4x3_operator_scale_Float32x4x3_Int16.name = "operator*"_c;
    Float32x4x3_operator_scale_Float32x4x3_Int16.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32x4x3_Int16)->returnTypeSymbol = &Float32x4x3Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f32x4x3"_c, &Float32x4x3_Float32x3_ctor},
        std::pair{ "f32x4x3"_c, &Float32x4x3_identity},
        std::pair{ "f32x4x3"_c, &Float32x4x3_Float32_12_ctor},
        std::pair{ "operator[](i32)"_c, &Float32x4x3_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float32x4x3_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float32x4x3_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float32x4x3_operator_index_UInt16},
        std::pair{ "operator+(f32x4x3)"_c, &Float32x4x3_operator_add_Float32x4x3},
        std::pair{ "operator-(f32x4x3)"_c, &Float32x4x3_operator_sub_Float32x4x3},
        std::pair{ "operator*(f32x4x3)"_c, &Float32x4x3_operator_mul_Float32x4x3},
        std::pair{ "operator+=(f32x4x3)"_c, &Float32x4x3_operator_addasg_Float32x4x3},
        std::pair{ "operator-=(f32x4x3)"_c, &Float32x4x3_operator_subasg_Float32x4x3},
        std::pair{ "operator*=(f32x4x3)"_c, &Float32x4x3_operator_mulasg_Float32x4x3},
        std::pair{ "operator*(f32)"_c, &Float32x4x3_operator_scale_Float32x4x3_Float32},
        std::pair{ "operator*(f16)"_c, &Float32x4x3_operator_scale_Float32x4x3_Float16},
        std::pair{ "operator*(u32)"_c, &Float32x4x3_operator_scale_Float32x4x3_UInt32},
        std::pair{ "operator*(u16)"_c, &Float32x4x3_operator_scale_Float32x4x3_UInt16},
        std::pair{ "operator*(i32)"_c, &Float32x4x3_operator_scale_Float32x4x3_Int32},
        std::pair{ "operator*(i16)"_c, &Float32x4x3_operator_scale_Float32x4x3_Int16}
    }
    };   
}

Float32x4x4::Float32x4x4()
{
    this->name = "f32";
    this->columnSize = 4;
    this->rowSize = 4;
    this->byteSize = 64;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    // operator[](i32)
    Float32x4x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32x4x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x4x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x4x4_operator_index_Int32.name = "operator[]"_c;
    Float32x4x4_operator_index_Int32.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_index_Int32)->returnTypeSymbol = &Float32x4Type;

    // operator[](u32)
    Float32x4x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32x4x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x4x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x4x4_operator_index_UInt32.name = "operator[]"_c;
    Float32x4x4_operator_index_UInt32.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_index_UInt32)->returnTypeSymbol = &Float32x4Type;

    // operator[](i16)
    Float32x4x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32x4x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x4x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x4x4_operator_index_Int16.name = "operator[]"_c;
    Float32x4x4_operator_index_Int16.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_index_Int16)->returnTypeSymbol = &Float32x4Type;

    // operator[](u16)
    Float32x4x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32x4x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x4x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x4x4_operator_index_UInt16.name = "operator[]"_c;
    Float32x4x4_operator_index_UInt16.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_index_UInt16)->returnTypeSymbol = &Float32x4Type;

    // operator+
    Float32x4x4_operator_add_Float32x4x4_arg0.name = "_arg0"_c;
    Float32x4x4_operator_add_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_add_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Float32x4x4_operator_add_Float32x4x4.name = "operator+"_c;
    Float32x4x4_operator_add_Float32x4x4.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_add_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    // operator-
    Float32x4x4_operator_sub_Float32x4x4_arg0.name = "_arg0"_c;
    Float32x4x4_operator_sub_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_sub_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Float32x4x4_operator_sub_Float32x4x4.name = "operator-"_c;
    Float32x4x4_operator_sub_Float32x4x4.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_sub_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    // operator*
    Float32x4x4_operator_mul_Float32x4x4_arg0.name = "_arg0"_c;
    Float32x4x4_operator_mul_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_mul_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Float32x4x4_operator_mul_Float32x4x4.name = "operator*"_c;
    Float32x4x4_operator_mul_Float32x4x4.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_mul_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    // operator+=
    Float32x4x4_operator_addasg_Float32x4x4_arg0.name = "_arg0"_c;
    Float32x4x4_operator_addasg_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_addasg_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Float32x4x4_operator_addasg_Float32x4x4.name = "operator+="_c;
    Float32x4x4_operator_addasg_Float32x4x4.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_addasg_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    // operator-=
    Float32x4x4_operator_subasg_Float32x4x4_arg0.name = "_arg0"_c;
    Float32x4x4_operator_subasg_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_subasg_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Float32x4x4_operator_subasg_Float32x4x4.name = "operator-="_c;
    Float32x4x4_operator_subasg_Float32x4x4.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_subasg_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    // operator*=
    Float32x4x4_operator_mulasg_Float32x4x4_arg0.name = "_arg0"_c;
    Float32x4x4_operator_mulasg_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_mulasg_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Float32x4x4_operator_mulasg_Float32x4x4.name = "operator*="_c;
    Float32x4x4_operator_mulasg_Float32x4x4.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_mulasg_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    // operator*(f32)
    Float32x4x4_operator_scale_Float32x4x4_Float32_arg0.name = "_arg0"_c;
    Float32x4x4_operator_scale_Float32x4x4_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32x4x4_Float32_arg0)->typeSymbol = &Float32Type;
    Float32x4x4_operator_scale_Float32x4x4_Float32.name = "operator*"_c;
    Float32x4x4_operator_scale_Float32x4x4_Float32.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32x4x4_Float32)->returnTypeSymbol = &Float32x4x4Type;

    // operator*(f16)
    Float32x4x4_operator_scale_Float32x4x4_Float16_arg0.name = "_arg0"_c;
    Float32x4x4_operator_scale_Float32x4x4_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32x4x4_Float16_arg0)->typeSymbol = &Float16Type;
    Float32x4x4_operator_scale_Float32x4x4_Float16.name = "operator*"_c;
    Float32x4x4_operator_scale_Float32x4x4_Float16.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32x4x4_Float16)->returnTypeSymbol = &Float32x4x4Type;

    // operator*(u32)
    Float32x4x4_operator_scale_Float32x4x4_UInt32_arg0.name = "_arg0"_c;
    Float32x4x4_operator_scale_Float32x4x4_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32x4x4_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float32x4x4_operator_scale_Float32x4x4_UInt32.name = "operator*"_c;
    Float32x4x4_operator_scale_Float32x4x4_UInt32.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32x4x4_UInt32)->returnTypeSymbol = &Float32x4x4Type;

    // operator*(u16)
    Float32x4x4_operator_scale_Float32x4x4_UInt16_arg0.name = "_arg0"_c;
    Float32x4x4_operator_scale_Float32x4x4_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32x4x4_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float32x4x4_operator_scale_Float32x4x4_UInt16.name = "operator*"_c;
    Float32x4x4_operator_scale_Float32x4x4_UInt16.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32x4x4_UInt16)->returnTypeSymbol = &Float32x4x4Type;

    // operator*(i32)
    Float32x4x4_operator_scale_Float32x4x4_Int32_arg0.name = "_arg0"_c;
    Float32x4x4_operator_scale_Float32x4x4_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32x4x4_Int32_arg0)->typeSymbol = &Int32Type;
    Float32x4x4_operator_scale_Float32x4x4_Int32.name = "operator*"_c;
    Float32x4x4_operator_scale_Float32x4x4_Int32.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32x4x4_Int32)->returnTypeSymbol = &Float32x4x4Type;

    // operator*(i16)
    Float32x4x4_operator_scale_Float32x4x4_Int16_arg0.name = "_arg0"_c;
    Float32x4x4_operator_scale_Float32x4x4_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32x4x4_Int16_arg0)->typeSymbol = &Int16Type;
    Float32x4x4_operator_scale_Float32x4x4_Int16.name = "operator*"_c;
    Float32x4x4_operator_scale_Float32x4x4_Int16.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32x4x4_Int16)->returnTypeSymbol = &Float32x4x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f32x4x4"_c, &Float32x4x4_Float32x4_ctor},
        std::pair{ "f32x4x4"_c, &Float32x4x4_identity},
        std::pair{ "f32x4x4"_c, &Float32x4x4_Float32_16_ctor},
        std::pair{ "operator[](i32)"_c, &Float32x4x4_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float32x4x4_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float32x4x4_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float32x4x4_operator_index_UInt16},
        std::pair{ "operator+(f32x4x4)"_c, &Float32x4x4_operator_add_Float32x4x4},
        std::pair{ "operator-(f32x4x4)"_c, &Float32x4x4_operator_sub_Float32x4x4},
        std::pair{ "operator*(f32x4x4)"_c, &Float32x4x4_operator_mul_Float32x4x4},
        std::pair{ "operator+=(f32x4x4)"_c, &Float32x4x4_operator_addasg_Float32x4x4},
        std::pair{ "operator-=(f32x4x4)"_c, &Float32x4x4_operator_subasg_Float32x4x4},
        std::pair{ "operator*=(f32x4x4)"_c, &Float32x4x4_operator_mulasg_Float32x4x4},
        std::pair{ "operator*(f32)"_c, &Float32x4x4_operator_scale_Float32x4x4_Float32},
        std::pair{ "operator*(f16)"_c, &Float32x4x4_operator_scale_Float32x4x4_Float16},
        std::pair{ "operator*(u32)"_c, &Float32x4x4_operator_scale_Float32x4x4_UInt32},
        std::pair{ "operator*(u16)"_c, &Float32x4x4_operator_scale_Float32x4x4_UInt16},
        std::pair{ "operator*(i32)"_c, &Float32x4x4_operator_scale_Float32x4x4_Int32},
        std::pair{ "operator*(i16)"_c, &Float32x4x4_operator_scale_Float32x4x4_Int16}
    }
    };   
}

Float16x2x2::Float16x2x2()
{
    this->name = "f16";
    this->columnSize = 2;
    this->rowSize = 2;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    // operator[](i32)
    Float16x2x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16x2x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x2x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x2x2_operator_index_Int32.name = "operator[]"_c;
    Float16x2x2_operator_index_Int32.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_index_Int32)->returnTypeSymbol = &Float16x2Type;

    // operator[](u32)
    Float16x2x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16x2x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x2x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x2x2_operator_index_UInt32.name = "operator[]"_c;
    Float16x2x2_operator_index_UInt32.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_index_UInt32)->returnTypeSymbol = &Float16x2Type;

    // operator[](i16)
    Float16x2x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16x2x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x2x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x2x2_operator_index_Int16.name = "operator[]"_c;
    Float16x2x2_operator_index_Int16.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_index_Int16)->returnTypeSymbol = &Float16x2Type;

    // operator[](u16)
    Float16x2x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16x2x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x2x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x2x2_operator_index_UInt16.name = "operator[]"_c;
    Float16x2x2_operator_index_UInt16.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_index_UInt16)->returnTypeSymbol = &Float16x2Type;

    // operator+
    Float16x2x2_operator_add_Float16x2x2_arg0.name = "_arg0"_c;
    Float16x2x2_operator_add_Float16x2x2_arg0.type = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_add_Float16x2x2_arg0)->typeSymbol = &Float16x2x2Type;
    Float16x2x2_operator_add_Float16x2x2.name = "operator+"_c;
    Float16x2x2_operator_add_Float16x2x2.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_add_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    // operator-
    Float16x2x2_operator_sub_Float16x2x2_arg0.name = "_arg0"_c;
    Float16x2x2_operator_sub_Float16x2x2_arg0.type = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_sub_Float16x2x2_arg0)->typeSymbol = &Float16x2x2Type;
    Float16x2x2_operator_sub_Float16x2x2.name = "operator-"_c;
    Float16x2x2_operator_sub_Float16x2x2.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_sub_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    // operator*
    Float16x2x2_operator_mul_Float16x2x2_arg0.name = "_arg0"_c;
    Float16x2x2_operator_mul_Float16x2x2_arg0.type = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_mul_Float16x2x2_arg0)->typeSymbol = &Float16x2x2Type;
    Float16x2x2_operator_mul_Float16x2x2.name = "operator*"_c;
    Float16x2x2_operator_mul_Float16x2x2.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_mul_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    // operator+=
    Float16x2x2_operator_addasg_Float16x2x2_arg0.name = "_arg0"_c;
    Float16x2x2_operator_addasg_Float16x2x2_arg0.type = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_addasg_Float16x2x2_arg0)->typeSymbol = &Float16x2x2Type;
    Float16x2x2_operator_addasg_Float16x2x2.name = "operator+="_c;
    Float16x2x2_operator_addasg_Float16x2x2.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_addasg_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    // operator-=
    Float16x2x2_operator_subasg_Float16x2x2_arg0.name = "_arg0"_c;
    Float16x2x2_operator_subasg_Float16x2x2_arg0.type = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_subasg_Float16x2x2_arg0)->typeSymbol = &Float16x2x2Type;
    Float16x2x2_operator_subasg_Float16x2x2.name = "operator-="_c;
    Float16x2x2_operator_subasg_Float16x2x2.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_subasg_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    // operator*=
    Float16x2x2_operator_mulasg_Float16x2x2_arg0.name = "_arg0"_c;
    Float16x2x2_operator_mulasg_Float16x2x2_arg0.type = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_mulasg_Float16x2x2_arg0)->typeSymbol = &Float16x2x2Type;
    Float16x2x2_operator_mulasg_Float16x2x2.name = "operator*="_c;
    Float16x2x2_operator_mulasg_Float16x2x2.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_mulasg_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    // operator*(f32)
    Float16x2x2_operator_scale_Float16x2x2_Float32_arg0.name = "_arg0"_c;
    Float16x2x2_operator_scale_Float16x2x2_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16x2x2_Float32_arg0)->typeSymbol = &Float32Type;
    Float16x2x2_operator_scale_Float16x2x2_Float32.name = "operator*"_c;
    Float16x2x2_operator_scale_Float16x2x2_Float32.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16x2x2_Float32)->returnTypeSymbol = &Float16x2x2Type;

    // operator*(f16)
    Float16x2x2_operator_scale_Float16x2x2_Float16_arg0.name = "_arg0"_c;
    Float16x2x2_operator_scale_Float16x2x2_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16x2x2_Float16_arg0)->typeSymbol = &Float16Type;
    Float16x2x2_operator_scale_Float16x2x2_Float16.name = "operator*"_c;
    Float16x2x2_operator_scale_Float16x2x2_Float16.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16x2x2_Float16)->returnTypeSymbol = &Float16x2x2Type;

    // operator*(u32)
    Float16x2x2_operator_scale_Float16x2x2_UInt32_arg0.name = "_arg0"_c;
    Float16x2x2_operator_scale_Float16x2x2_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16x2x2_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x2x2_operator_scale_Float16x2x2_UInt32.name = "operator*"_c;
    Float16x2x2_operator_scale_Float16x2x2_UInt32.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16x2x2_UInt32)->returnTypeSymbol = &Float16x2x2Type;

    // operator*(u16)
    Float16x2x2_operator_scale_Float16x2x2_UInt16_arg0.name = "_arg0"_c;
    Float16x2x2_operator_scale_Float16x2x2_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16x2x2_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x2x2_operator_scale_Float16x2x2_UInt16.name = "operator*"_c;
    Float16x2x2_operator_scale_Float16x2x2_UInt16.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16x2x2_UInt16)->returnTypeSymbol = &Float16x2x2Type;

    // operator*(i32)
    Float16x2x2_operator_scale_Float16x2x2_Int32_arg0.name = "_arg0"_c;
    Float16x2x2_operator_scale_Float16x2x2_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16x2x2_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x2x2_operator_scale_Float16x2x2_Int32.name = "operator*"_c;
    Float16x2x2_operator_scale_Float16x2x2_Int32.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16x2x2_Int32)->returnTypeSymbol = &Float16x2x2Type;

    // operator*(i16)
    Float16x2x2_operator_scale_Float16x2x2_Int16_arg0.name = "_arg0"_c;
    Float16x2x2_operator_scale_Float16x2x2_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16x2x2_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x2x2_operator_scale_Float16x2x2_Int16.name = "operator*"_c;
    Float16x2x2_operator_scale_Float16x2x2_Int16.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16x2x2_Int16)->returnTypeSymbol = &Float16x2x2Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f16x2x2"_c, &Float16x2x2_Float16x2_ctor},
        std::pair{ "f16x2x2"_c, &Float16x2x2_identity},
        std::pair{ "f16x2x2"_c, &Float16x2x2_Float16_4_ctor},
        std::pair{ "operator[](i32)"_c, &Float16x2x2_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float16x2x2_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float16x2x2_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float16x2x2_operator_index_UInt16},
        std::pair{ "operator+(f16x2x2)"_c, &Float16x2x2_operator_add_Float16x2x2},
        std::pair{ "operator-(f16x2x2)"_c, &Float16x2x2_operator_sub_Float16x2x2},
        std::pair{ "operator*(f16x2x2)"_c, &Float16x2x2_operator_mul_Float16x2x2},
        std::pair{ "operator+=(f16x2x2)"_c, &Float16x2x2_operator_addasg_Float16x2x2},
        std::pair{ "operator-=(f16x2x2)"_c, &Float16x2x2_operator_subasg_Float16x2x2},
        std::pair{ "operator*=(f16x2x2)"_c, &Float16x2x2_operator_mulasg_Float16x2x2},
        std::pair{ "operator*(f32)"_c, &Float16x2x2_operator_scale_Float16x2x2_Float32},
        std::pair{ "operator*(f16)"_c, &Float16x2x2_operator_scale_Float16x2x2_Float16},
        std::pair{ "operator*(u32)"_c, &Float16x2x2_operator_scale_Float16x2x2_UInt32},
        std::pair{ "operator*(u16)"_c, &Float16x2x2_operator_scale_Float16x2x2_UInt16},
        std::pair{ "operator*(i32)"_c, &Float16x2x2_operator_scale_Float16x2x2_Int32},
        std::pair{ "operator*(i16)"_c, &Float16x2x2_operator_scale_Float16x2x2_Int16}
    }
    };   
}

Float16x2x3::Float16x2x3()
{
    this->name = "f16";
    this->columnSize = 3;
    this->rowSize = 2;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    // operator[](i32)
    Float16x2x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16x2x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x2x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x2x3_operator_index_Int32.name = "operator[]"_c;
    Float16x2x3_operator_index_Int32.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_index_Int32)->returnTypeSymbol = &Float16x3Type;

    // operator[](u32)
    Float16x2x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16x2x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x2x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x2x3_operator_index_UInt32.name = "operator[]"_c;
    Float16x2x3_operator_index_UInt32.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_index_UInt32)->returnTypeSymbol = &Float16x3Type;

    // operator[](i16)
    Float16x2x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16x2x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x2x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x2x3_operator_index_Int16.name = "operator[]"_c;
    Float16x2x3_operator_index_Int16.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_index_Int16)->returnTypeSymbol = &Float16x3Type;

    // operator[](u16)
    Float16x2x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16x2x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x2x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x2x3_operator_index_UInt16.name = "operator[]"_c;
    Float16x2x3_operator_index_UInt16.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_index_UInt16)->returnTypeSymbol = &Float16x3Type;

    // operator+
    Float16x2x3_operator_add_Float16x2x3_arg0.name = "_arg0"_c;
    Float16x2x3_operator_add_Float16x2x3_arg0.type = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_add_Float16x2x3_arg0)->typeSymbol = &Float16x2x3Type;
    Float16x2x3_operator_add_Float16x2x3.name = "operator+"_c;
    Float16x2x3_operator_add_Float16x2x3.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_add_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    // operator-
    Float16x2x3_operator_sub_Float16x2x3_arg0.name = "_arg0"_c;
    Float16x2x3_operator_sub_Float16x2x3_arg0.type = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_sub_Float16x2x3_arg0)->typeSymbol = &Float16x2x3Type;
    Float16x2x3_operator_sub_Float16x2x3.name = "operator-"_c;
    Float16x2x3_operator_sub_Float16x2x3.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_sub_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    // operator*
    Float16x2x3_operator_mul_Float16x2x3_arg0.name = "_arg0"_c;
    Float16x2x3_operator_mul_Float16x2x3_arg0.type = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_mul_Float16x2x3_arg0)->typeSymbol = &Float16x2x3Type;
    Float16x2x3_operator_mul_Float16x2x3.name = "operator*"_c;
    Float16x2x3_operator_mul_Float16x2x3.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_mul_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    // operator+=
    Float16x2x3_operator_addasg_Float16x2x3_arg0.name = "_arg0"_c;
    Float16x2x3_operator_addasg_Float16x2x3_arg0.type = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_addasg_Float16x2x3_arg0)->typeSymbol = &Float16x2x3Type;
    Float16x2x3_operator_addasg_Float16x2x3.name = "operator+="_c;
    Float16x2x3_operator_addasg_Float16x2x3.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_addasg_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    // operator-=
    Float16x2x3_operator_subasg_Float16x2x3_arg0.name = "_arg0"_c;
    Float16x2x3_operator_subasg_Float16x2x3_arg0.type = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_subasg_Float16x2x3_arg0)->typeSymbol = &Float16x2x3Type;
    Float16x2x3_operator_subasg_Float16x2x3.name = "operator-="_c;
    Float16x2x3_operator_subasg_Float16x2x3.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_subasg_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    // operator*=
    Float16x2x3_operator_mulasg_Float16x2x3_arg0.name = "_arg0"_c;
    Float16x2x3_operator_mulasg_Float16x2x3_arg0.type = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_mulasg_Float16x2x3_arg0)->typeSymbol = &Float16x2x3Type;
    Float16x2x3_operator_mulasg_Float16x2x3.name = "operator*="_c;
    Float16x2x3_operator_mulasg_Float16x2x3.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_mulasg_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    // operator*(f32)
    Float16x2x3_operator_scale_Float16x2x3_Float32_arg0.name = "_arg0"_c;
    Float16x2x3_operator_scale_Float16x2x3_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16x2x3_Float32_arg0)->typeSymbol = &Float32Type;
    Float16x2x3_operator_scale_Float16x2x3_Float32.name = "operator*"_c;
    Float16x2x3_operator_scale_Float16x2x3_Float32.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16x2x3_Float32)->returnTypeSymbol = &Float16x2x3Type;

    // operator*(f16)
    Float16x2x3_operator_scale_Float16x2x3_Float16_arg0.name = "_arg0"_c;
    Float16x2x3_operator_scale_Float16x2x3_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16x2x3_Float16_arg0)->typeSymbol = &Float16Type;
    Float16x2x3_operator_scale_Float16x2x3_Float16.name = "operator*"_c;
    Float16x2x3_operator_scale_Float16x2x3_Float16.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16x2x3_Float16)->returnTypeSymbol = &Float16x2x3Type;

    // operator*(u32)
    Float16x2x3_operator_scale_Float16x2x3_UInt32_arg0.name = "_arg0"_c;
    Float16x2x3_operator_scale_Float16x2x3_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16x2x3_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x2x3_operator_scale_Float16x2x3_UInt32.name = "operator*"_c;
    Float16x2x3_operator_scale_Float16x2x3_UInt32.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16x2x3_UInt32)->returnTypeSymbol = &Float16x2x3Type;

    // operator*(u16)
    Float16x2x3_operator_scale_Float16x2x3_UInt16_arg0.name = "_arg0"_c;
    Float16x2x3_operator_scale_Float16x2x3_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16x2x3_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x2x3_operator_scale_Float16x2x3_UInt16.name = "operator*"_c;
    Float16x2x3_operator_scale_Float16x2x3_UInt16.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16x2x3_UInt16)->returnTypeSymbol = &Float16x2x3Type;

    // operator*(i32)
    Float16x2x3_operator_scale_Float16x2x3_Int32_arg0.name = "_arg0"_c;
    Float16x2x3_operator_scale_Float16x2x3_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16x2x3_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x2x3_operator_scale_Float16x2x3_Int32.name = "operator*"_c;
    Float16x2x3_operator_scale_Float16x2x3_Int32.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16x2x3_Int32)->returnTypeSymbol = &Float16x2x3Type;

    // operator*(i16)
    Float16x2x3_operator_scale_Float16x2x3_Int16_arg0.name = "_arg0"_c;
    Float16x2x3_operator_scale_Float16x2x3_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16x2x3_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x2x3_operator_scale_Float16x2x3_Int16.name = "operator*"_c;
    Float16x2x3_operator_scale_Float16x2x3_Int16.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16x2x3_Int16)->returnTypeSymbol = &Float16x2x3Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f16x2x3"_c, &Float16x2x3_Float16x3_ctor},
        std::pair{ "f16x2x3"_c, &Float16x2x3_identity},
        std::pair{ "f16x2x3"_c, &Float16x2x3_Float16_6_ctor},
        std::pair{ "operator[](i32)"_c, &Float16x2x3_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float16x2x3_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float16x2x3_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float16x2x3_operator_index_UInt16},
        std::pair{ "operator+(f16x2x3)"_c, &Float16x2x3_operator_add_Float16x2x3},
        std::pair{ "operator-(f16x2x3)"_c, &Float16x2x3_operator_sub_Float16x2x3},
        std::pair{ "operator*(f16x2x3)"_c, &Float16x2x3_operator_mul_Float16x2x3},
        std::pair{ "operator+=(f16x2x3)"_c, &Float16x2x3_operator_addasg_Float16x2x3},
        std::pair{ "operator-=(f16x2x3)"_c, &Float16x2x3_operator_subasg_Float16x2x3},
        std::pair{ "operator*=(f16x2x3)"_c, &Float16x2x3_operator_mulasg_Float16x2x3},
        std::pair{ "operator*(f32)"_c, &Float16x2x3_operator_scale_Float16x2x3_Float32},
        std::pair{ "operator*(f16)"_c, &Float16x2x3_operator_scale_Float16x2x3_Float16},
        std::pair{ "operator*(u32)"_c, &Float16x2x3_operator_scale_Float16x2x3_UInt32},
        std::pair{ "operator*(u16)"_c, &Float16x2x3_operator_scale_Float16x2x3_UInt16},
        std::pair{ "operator*(i32)"_c, &Float16x2x3_operator_scale_Float16x2x3_Int32},
        std::pair{ "operator*(i16)"_c, &Float16x2x3_operator_scale_Float16x2x3_Int16}
    }
    };   
}

Float16x2x4::Float16x2x4()
{
    this->name = "f16";
    this->columnSize = 4;
    this->rowSize = 2;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    // operator[](i32)
    Float16x2x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16x2x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x2x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x2x4_operator_index_Int32.name = "operator[]"_c;
    Float16x2x4_operator_index_Int32.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_index_Int32)->returnTypeSymbol = &Float16x4Type;

    // operator[](u32)
    Float16x2x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16x2x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x2x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x2x4_operator_index_UInt32.name = "operator[]"_c;
    Float16x2x4_operator_index_UInt32.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_index_UInt32)->returnTypeSymbol = &Float16x4Type;

    // operator[](i16)
    Float16x2x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16x2x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x2x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x2x4_operator_index_Int16.name = "operator[]"_c;
    Float16x2x4_operator_index_Int16.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_index_Int16)->returnTypeSymbol = &Float16x4Type;

    // operator[](u16)
    Float16x2x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16x2x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x2x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x2x4_operator_index_UInt16.name = "operator[]"_c;
    Float16x2x4_operator_index_UInt16.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_index_UInt16)->returnTypeSymbol = &Float16x4Type;

    // operator+
    Float16x2x4_operator_add_Float16x2x4_arg0.name = "_arg0"_c;
    Float16x2x4_operator_add_Float16x2x4_arg0.type = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_add_Float16x2x4_arg0)->typeSymbol = &Float16x2x4Type;
    Float16x2x4_operator_add_Float16x2x4.name = "operator+"_c;
    Float16x2x4_operator_add_Float16x2x4.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_add_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    // operator-
    Float16x2x4_operator_sub_Float16x2x4_arg0.name = "_arg0"_c;
    Float16x2x4_operator_sub_Float16x2x4_arg0.type = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_sub_Float16x2x4_arg0)->typeSymbol = &Float16x2x4Type;
    Float16x2x4_operator_sub_Float16x2x4.name = "operator-"_c;
    Float16x2x4_operator_sub_Float16x2x4.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_sub_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    // operator*
    Float16x2x4_operator_mul_Float16x2x4_arg0.name = "_arg0"_c;
    Float16x2x4_operator_mul_Float16x2x4_arg0.type = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_mul_Float16x2x4_arg0)->typeSymbol = &Float16x2x4Type;
    Float16x2x4_operator_mul_Float16x2x4.name = "operator*"_c;
    Float16x2x4_operator_mul_Float16x2x4.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_mul_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    // operator+=
    Float16x2x4_operator_addasg_Float16x2x4_arg0.name = "_arg0"_c;
    Float16x2x4_operator_addasg_Float16x2x4_arg0.type = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_addasg_Float16x2x4_arg0)->typeSymbol = &Float16x2x4Type;
    Float16x2x4_operator_addasg_Float16x2x4.name = "operator+="_c;
    Float16x2x4_operator_addasg_Float16x2x4.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_addasg_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    // operator-=
    Float16x2x4_operator_subasg_Float16x2x4_arg0.name = "_arg0"_c;
    Float16x2x4_operator_subasg_Float16x2x4_arg0.type = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_subasg_Float16x2x4_arg0)->typeSymbol = &Float16x2x4Type;
    Float16x2x4_operator_subasg_Float16x2x4.name = "operator-="_c;
    Float16x2x4_operator_subasg_Float16x2x4.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_subasg_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    // operator*=
    Float16x2x4_operator_mulasg_Float16x2x4_arg0.name = "_arg0"_c;
    Float16x2x4_operator_mulasg_Float16x2x4_arg0.type = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_mulasg_Float16x2x4_arg0)->typeSymbol = &Float16x2x4Type;
    Float16x2x4_operator_mulasg_Float16x2x4.name = "operator*="_c;
    Float16x2x4_operator_mulasg_Float16x2x4.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_mulasg_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    // operator*(f32)
    Float16x2x4_operator_scale_Float16x2x4_Float32_arg0.name = "_arg0"_c;
    Float16x2x4_operator_scale_Float16x2x4_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16x2x4_Float32_arg0)->typeSymbol = &Float32Type;
    Float16x2x4_operator_scale_Float16x2x4_Float32.name = "operator*"_c;
    Float16x2x4_operator_scale_Float16x2x4_Float32.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16x2x4_Float32)->returnTypeSymbol = &Float16x2x4Type;

    // operator*(f16)
    Float16x2x4_operator_scale_Float16x2x4_Float16_arg0.name = "_arg0"_c;
    Float16x2x4_operator_scale_Float16x2x4_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16x2x4_Float16_arg0)->typeSymbol = &Float16Type;
    Float16x2x4_operator_scale_Float16x2x4_Float16.name = "operator*"_c;
    Float16x2x4_operator_scale_Float16x2x4_Float16.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16x2x4_Float16)->returnTypeSymbol = &Float16x2x4Type;

    // operator*(u32)
    Float16x2x4_operator_scale_Float16x2x4_UInt32_arg0.name = "_arg0"_c;
    Float16x2x4_operator_scale_Float16x2x4_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16x2x4_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x2x4_operator_scale_Float16x2x4_UInt32.name = "operator*"_c;
    Float16x2x4_operator_scale_Float16x2x4_UInt32.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16x2x4_UInt32)->returnTypeSymbol = &Float16x2x4Type;

    // operator*(u16)
    Float16x2x4_operator_scale_Float16x2x4_UInt16_arg0.name = "_arg0"_c;
    Float16x2x4_operator_scale_Float16x2x4_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16x2x4_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x2x4_operator_scale_Float16x2x4_UInt16.name = "operator*"_c;
    Float16x2x4_operator_scale_Float16x2x4_UInt16.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16x2x4_UInt16)->returnTypeSymbol = &Float16x2x4Type;

    // operator*(i32)
    Float16x2x4_operator_scale_Float16x2x4_Int32_arg0.name = "_arg0"_c;
    Float16x2x4_operator_scale_Float16x2x4_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16x2x4_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x2x4_operator_scale_Float16x2x4_Int32.name = "operator*"_c;
    Float16x2x4_operator_scale_Float16x2x4_Int32.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16x2x4_Int32)->returnTypeSymbol = &Float16x2x4Type;

    // operator*(i16)
    Float16x2x4_operator_scale_Float16x2x4_Int16_arg0.name = "_arg0"_c;
    Float16x2x4_operator_scale_Float16x2x4_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16x2x4_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x2x4_operator_scale_Float16x2x4_Int16.name = "operator*"_c;
    Float16x2x4_operator_scale_Float16x2x4_Int16.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16x2x4_Int16)->returnTypeSymbol = &Float16x2x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f16x2x4"_c, &Float16x2x4_Float16x4_ctor},
        std::pair{ "f16x2x4"_c, &Float16x2x4_identity},
        std::pair{ "f16x2x4"_c, &Float16x2x4_Float16_8_ctor},
        std::pair{ "operator[](i32)"_c, &Float16x2x4_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float16x2x4_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float16x2x4_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float16x2x4_operator_index_UInt16},
        std::pair{ "operator+(f16x2x4)"_c, &Float16x2x4_operator_add_Float16x2x4},
        std::pair{ "operator-(f16x2x4)"_c, &Float16x2x4_operator_sub_Float16x2x4},
        std::pair{ "operator*(f16x2x4)"_c, &Float16x2x4_operator_mul_Float16x2x4},
        std::pair{ "operator+=(f16x2x4)"_c, &Float16x2x4_operator_addasg_Float16x2x4},
        std::pair{ "operator-=(f16x2x4)"_c, &Float16x2x4_operator_subasg_Float16x2x4},
        std::pair{ "operator*=(f16x2x4)"_c, &Float16x2x4_operator_mulasg_Float16x2x4},
        std::pair{ "operator*(f32)"_c, &Float16x2x4_operator_scale_Float16x2x4_Float32},
        std::pair{ "operator*(f16)"_c, &Float16x2x4_operator_scale_Float16x2x4_Float16},
        std::pair{ "operator*(u32)"_c, &Float16x2x4_operator_scale_Float16x2x4_UInt32},
        std::pair{ "operator*(u16)"_c, &Float16x2x4_operator_scale_Float16x2x4_UInt16},
        std::pair{ "operator*(i32)"_c, &Float16x2x4_operator_scale_Float16x2x4_Int32},
        std::pair{ "operator*(i16)"_c, &Float16x2x4_operator_scale_Float16x2x4_Int16}
    }
    };   
}

Float16x3x2::Float16x3x2()
{
    this->name = "f16";
    this->columnSize = 2;
    this->rowSize = 3;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    // operator[](i32)
    Float16x3x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16x3x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x3x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x3x2_operator_index_Int32.name = "operator[]"_c;
    Float16x3x2_operator_index_Int32.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_index_Int32)->returnTypeSymbol = &Float16x2Type;

    // operator[](u32)
    Float16x3x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16x3x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x3x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x3x2_operator_index_UInt32.name = "operator[]"_c;
    Float16x3x2_operator_index_UInt32.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_index_UInt32)->returnTypeSymbol = &Float16x2Type;

    // operator[](i16)
    Float16x3x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16x3x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x3x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x3x2_operator_index_Int16.name = "operator[]"_c;
    Float16x3x2_operator_index_Int16.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_index_Int16)->returnTypeSymbol = &Float16x2Type;

    // operator[](u16)
    Float16x3x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16x3x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x3x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x3x2_operator_index_UInt16.name = "operator[]"_c;
    Float16x3x2_operator_index_UInt16.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_index_UInt16)->returnTypeSymbol = &Float16x2Type;

    // operator+
    Float16x3x2_operator_add_Float16x3x2_arg0.name = "_arg0"_c;
    Float16x3x2_operator_add_Float16x3x2_arg0.type = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_add_Float16x3x2_arg0)->typeSymbol = &Float16x3x2Type;
    Float16x3x2_operator_add_Float16x3x2.name = "operator+"_c;
    Float16x3x2_operator_add_Float16x3x2.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_add_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    // operator-
    Float16x3x2_operator_sub_Float16x3x2_arg0.name = "_arg0"_c;
    Float16x3x2_operator_sub_Float16x3x2_arg0.type = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_sub_Float16x3x2_arg0)->typeSymbol = &Float16x3x2Type;
    Float16x3x2_operator_sub_Float16x3x2.name = "operator-"_c;
    Float16x3x2_operator_sub_Float16x3x2.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_sub_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    // operator*
    Float16x3x2_operator_mul_Float16x3x2_arg0.name = "_arg0"_c;
    Float16x3x2_operator_mul_Float16x3x2_arg0.type = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_mul_Float16x3x2_arg0)->typeSymbol = &Float16x3x2Type;
    Float16x3x2_operator_mul_Float16x3x2.name = "operator*"_c;
    Float16x3x2_operator_mul_Float16x3x2.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_mul_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    // operator+=
    Float16x3x2_operator_addasg_Float16x3x2_arg0.name = "_arg0"_c;
    Float16x3x2_operator_addasg_Float16x3x2_arg0.type = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_addasg_Float16x3x2_arg0)->typeSymbol = &Float16x3x2Type;
    Float16x3x2_operator_addasg_Float16x3x2.name = "operator+="_c;
    Float16x3x2_operator_addasg_Float16x3x2.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_addasg_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    // operator-=
    Float16x3x2_operator_subasg_Float16x3x2_arg0.name = "_arg0"_c;
    Float16x3x2_operator_subasg_Float16x3x2_arg0.type = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_subasg_Float16x3x2_arg0)->typeSymbol = &Float16x3x2Type;
    Float16x3x2_operator_subasg_Float16x3x2.name = "operator-="_c;
    Float16x3x2_operator_subasg_Float16x3x2.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_subasg_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    // operator*=
    Float16x3x2_operator_mulasg_Float16x3x2_arg0.name = "_arg0"_c;
    Float16x3x2_operator_mulasg_Float16x3x2_arg0.type = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_mulasg_Float16x3x2_arg0)->typeSymbol = &Float16x3x2Type;
    Float16x3x2_operator_mulasg_Float16x3x2.name = "operator*="_c;
    Float16x3x2_operator_mulasg_Float16x3x2.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_mulasg_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    // operator*(f32)
    Float16x3x2_operator_scale_Float16x3x2_Float32_arg0.name = "_arg0"_c;
    Float16x3x2_operator_scale_Float16x3x2_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16x3x2_Float32_arg0)->typeSymbol = &Float32Type;
    Float16x3x2_operator_scale_Float16x3x2_Float32.name = "operator*"_c;
    Float16x3x2_operator_scale_Float16x3x2_Float32.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16x3x2_Float32)->returnTypeSymbol = &Float16x3x2Type;

    // operator*(f16)
    Float16x3x2_operator_scale_Float16x3x2_Float16_arg0.name = "_arg0"_c;
    Float16x3x2_operator_scale_Float16x3x2_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16x3x2_Float16_arg0)->typeSymbol = &Float16Type;
    Float16x3x2_operator_scale_Float16x3x2_Float16.name = "operator*"_c;
    Float16x3x2_operator_scale_Float16x3x2_Float16.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16x3x2_Float16)->returnTypeSymbol = &Float16x3x2Type;

    // operator*(u32)
    Float16x3x2_operator_scale_Float16x3x2_UInt32_arg0.name = "_arg0"_c;
    Float16x3x2_operator_scale_Float16x3x2_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16x3x2_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x3x2_operator_scale_Float16x3x2_UInt32.name = "operator*"_c;
    Float16x3x2_operator_scale_Float16x3x2_UInt32.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16x3x2_UInt32)->returnTypeSymbol = &Float16x3x2Type;

    // operator*(u16)
    Float16x3x2_operator_scale_Float16x3x2_UInt16_arg0.name = "_arg0"_c;
    Float16x3x2_operator_scale_Float16x3x2_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16x3x2_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x3x2_operator_scale_Float16x3x2_UInt16.name = "operator*"_c;
    Float16x3x2_operator_scale_Float16x3x2_UInt16.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16x3x2_UInt16)->returnTypeSymbol = &Float16x3x2Type;

    // operator*(i32)
    Float16x3x2_operator_scale_Float16x3x2_Int32_arg0.name = "_arg0"_c;
    Float16x3x2_operator_scale_Float16x3x2_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16x3x2_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x3x2_operator_scale_Float16x3x2_Int32.name = "operator*"_c;
    Float16x3x2_operator_scale_Float16x3x2_Int32.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16x3x2_Int32)->returnTypeSymbol = &Float16x3x2Type;

    // operator*(i16)
    Float16x3x2_operator_scale_Float16x3x2_Int16_arg0.name = "_arg0"_c;
    Float16x3x2_operator_scale_Float16x3x2_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16x3x2_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x3x2_operator_scale_Float16x3x2_Int16.name = "operator*"_c;
    Float16x3x2_operator_scale_Float16x3x2_Int16.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16x3x2_Int16)->returnTypeSymbol = &Float16x3x2Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f16x3x2"_c, &Float16x3x2_Float16x2_ctor},
        std::pair{ "f16x3x2"_c, &Float16x3x2_identity},
        std::pair{ "f16x3x2"_c, &Float16x3x2_Float16_6_ctor},
        std::pair{ "operator[](i32)"_c, &Float16x3x2_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float16x3x2_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float16x3x2_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float16x3x2_operator_index_UInt16},
        std::pair{ "operator+(f16x3x2)"_c, &Float16x3x2_operator_add_Float16x3x2},
        std::pair{ "operator-(f16x3x2)"_c, &Float16x3x2_operator_sub_Float16x3x2},
        std::pair{ "operator*(f16x3x2)"_c, &Float16x3x2_operator_mul_Float16x3x2},
        std::pair{ "operator+=(f16x3x2)"_c, &Float16x3x2_operator_addasg_Float16x3x2},
        std::pair{ "operator-=(f16x3x2)"_c, &Float16x3x2_operator_subasg_Float16x3x2},
        std::pair{ "operator*=(f16x3x2)"_c, &Float16x3x2_operator_mulasg_Float16x3x2},
        std::pair{ "operator*(f32)"_c, &Float16x3x2_operator_scale_Float16x3x2_Float32},
        std::pair{ "operator*(f16)"_c, &Float16x3x2_operator_scale_Float16x3x2_Float16},
        std::pair{ "operator*(u32)"_c, &Float16x3x2_operator_scale_Float16x3x2_UInt32},
        std::pair{ "operator*(u16)"_c, &Float16x3x2_operator_scale_Float16x3x2_UInt16},
        std::pair{ "operator*(i32)"_c, &Float16x3x2_operator_scale_Float16x3x2_Int32},
        std::pair{ "operator*(i16)"_c, &Float16x3x2_operator_scale_Float16x3x2_Int16}
    }
    };   
}

Float16x3x3::Float16x3x3()
{
    this->name = "f16";
    this->columnSize = 3;
    this->rowSize = 3;
    this->byteSize = 18;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    // operator[](i32)
    Float16x3x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16x3x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x3x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x3x3_operator_index_Int32.name = "operator[]"_c;
    Float16x3x3_operator_index_Int32.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_index_Int32)->returnTypeSymbol = &Float16x3Type;

    // operator[](u32)
    Float16x3x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16x3x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x3x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x3x3_operator_index_UInt32.name = "operator[]"_c;
    Float16x3x3_operator_index_UInt32.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_index_UInt32)->returnTypeSymbol = &Float16x3Type;

    // operator[](i16)
    Float16x3x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16x3x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x3x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x3x3_operator_index_Int16.name = "operator[]"_c;
    Float16x3x3_operator_index_Int16.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_index_Int16)->returnTypeSymbol = &Float16x3Type;

    // operator[](u16)
    Float16x3x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16x3x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x3x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x3x3_operator_index_UInt16.name = "operator[]"_c;
    Float16x3x3_operator_index_UInt16.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_index_UInt16)->returnTypeSymbol = &Float16x3Type;

    // operator+
    Float16x3x3_operator_add_Float16x3x3_arg0.name = "_arg0"_c;
    Float16x3x3_operator_add_Float16x3x3_arg0.type = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_add_Float16x3x3_arg0)->typeSymbol = &Float16x3x3Type;
    Float16x3x3_operator_add_Float16x3x3.name = "operator+"_c;
    Float16x3x3_operator_add_Float16x3x3.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_add_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    // operator-
    Float16x3x3_operator_sub_Float16x3x3_arg0.name = "_arg0"_c;
    Float16x3x3_operator_sub_Float16x3x3_arg0.type = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_sub_Float16x3x3_arg0)->typeSymbol = &Float16x3x3Type;
    Float16x3x3_operator_sub_Float16x3x3.name = "operator-"_c;
    Float16x3x3_operator_sub_Float16x3x3.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_sub_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    // operator*
    Float16x3x3_operator_mul_Float16x3x3_arg0.name = "_arg0"_c;
    Float16x3x3_operator_mul_Float16x3x3_arg0.type = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_mul_Float16x3x3_arg0)->typeSymbol = &Float16x3x3Type;
    Float16x3x3_operator_mul_Float16x3x3.name = "operator*"_c;
    Float16x3x3_operator_mul_Float16x3x3.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_mul_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    // operator+=
    Float16x3x3_operator_addasg_Float16x3x3_arg0.name = "_arg0"_c;
    Float16x3x3_operator_addasg_Float16x3x3_arg0.type = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_addasg_Float16x3x3_arg0)->typeSymbol = &Float16x3x3Type;
    Float16x3x3_operator_addasg_Float16x3x3.name = "operator+="_c;
    Float16x3x3_operator_addasg_Float16x3x3.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_addasg_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    // operator-=
    Float16x3x3_operator_subasg_Float16x3x3_arg0.name = "_arg0"_c;
    Float16x3x3_operator_subasg_Float16x3x3_arg0.type = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_subasg_Float16x3x3_arg0)->typeSymbol = &Float16x3x3Type;
    Float16x3x3_operator_subasg_Float16x3x3.name = "operator-="_c;
    Float16x3x3_operator_subasg_Float16x3x3.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_subasg_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    // operator*=
    Float16x3x3_operator_mulasg_Float16x3x3_arg0.name = "_arg0"_c;
    Float16x3x3_operator_mulasg_Float16x3x3_arg0.type = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_mulasg_Float16x3x3_arg0)->typeSymbol = &Float16x3x3Type;
    Float16x3x3_operator_mulasg_Float16x3x3.name = "operator*="_c;
    Float16x3x3_operator_mulasg_Float16x3x3.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_mulasg_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    // operator*(f32)
    Float16x3x3_operator_scale_Float16x3x3_Float32_arg0.name = "_arg0"_c;
    Float16x3x3_operator_scale_Float16x3x3_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16x3x3_Float32_arg0)->typeSymbol = &Float32Type;
    Float16x3x3_operator_scale_Float16x3x3_Float32.name = "operator*"_c;
    Float16x3x3_operator_scale_Float16x3x3_Float32.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16x3x3_Float32)->returnTypeSymbol = &Float16x3x3Type;

    // operator*(f16)
    Float16x3x3_operator_scale_Float16x3x3_Float16_arg0.name = "_arg0"_c;
    Float16x3x3_operator_scale_Float16x3x3_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16x3x3_Float16_arg0)->typeSymbol = &Float16Type;
    Float16x3x3_operator_scale_Float16x3x3_Float16.name = "operator*"_c;
    Float16x3x3_operator_scale_Float16x3x3_Float16.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16x3x3_Float16)->returnTypeSymbol = &Float16x3x3Type;

    // operator*(u32)
    Float16x3x3_operator_scale_Float16x3x3_UInt32_arg0.name = "_arg0"_c;
    Float16x3x3_operator_scale_Float16x3x3_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16x3x3_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x3x3_operator_scale_Float16x3x3_UInt32.name = "operator*"_c;
    Float16x3x3_operator_scale_Float16x3x3_UInt32.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16x3x3_UInt32)->returnTypeSymbol = &Float16x3x3Type;

    // operator*(u16)
    Float16x3x3_operator_scale_Float16x3x3_UInt16_arg0.name = "_arg0"_c;
    Float16x3x3_operator_scale_Float16x3x3_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16x3x3_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x3x3_operator_scale_Float16x3x3_UInt16.name = "operator*"_c;
    Float16x3x3_operator_scale_Float16x3x3_UInt16.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16x3x3_UInt16)->returnTypeSymbol = &Float16x3x3Type;

    // operator*(i32)
    Float16x3x3_operator_scale_Float16x3x3_Int32_arg0.name = "_arg0"_c;
    Float16x3x3_operator_scale_Float16x3x3_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16x3x3_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x3x3_operator_scale_Float16x3x3_Int32.name = "operator*"_c;
    Float16x3x3_operator_scale_Float16x3x3_Int32.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16x3x3_Int32)->returnTypeSymbol = &Float16x3x3Type;

    // operator*(i16)
    Float16x3x3_operator_scale_Float16x3x3_Int16_arg0.name = "_arg0"_c;
    Float16x3x3_operator_scale_Float16x3x3_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16x3x3_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x3x3_operator_scale_Float16x3x3_Int16.name = "operator*"_c;
    Float16x3x3_operator_scale_Float16x3x3_Int16.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16x3x3_Int16)->returnTypeSymbol = &Float16x3x3Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f16x3x3"_c, &Float16x3x3_Float16x3_ctor},
        std::pair{ "f16x3x3"_c, &Float16x3x3_identity},
        std::pair{ "f16x3x3"_c, &Float16x3x3_Float16_9_ctor},
        std::pair{ "operator[](i32)"_c, &Float16x3x3_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float16x3x3_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float16x3x3_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float16x3x3_operator_index_UInt16},
        std::pair{ "operator+(f16x3x3)"_c, &Float16x3x3_operator_add_Float16x3x3},
        std::pair{ "operator-(f16x3x3)"_c, &Float16x3x3_operator_sub_Float16x3x3},
        std::pair{ "operator*(f16x3x3)"_c, &Float16x3x3_operator_mul_Float16x3x3},
        std::pair{ "operator+=(f16x3x3)"_c, &Float16x3x3_operator_addasg_Float16x3x3},
        std::pair{ "operator-=(f16x3x3)"_c, &Float16x3x3_operator_subasg_Float16x3x3},
        std::pair{ "operator*=(f16x3x3)"_c, &Float16x3x3_operator_mulasg_Float16x3x3},
        std::pair{ "operator*(f32)"_c, &Float16x3x3_operator_scale_Float16x3x3_Float32},
        std::pair{ "operator*(f16)"_c, &Float16x3x3_operator_scale_Float16x3x3_Float16},
        std::pair{ "operator*(u32)"_c, &Float16x3x3_operator_scale_Float16x3x3_UInt32},
        std::pair{ "operator*(u16)"_c, &Float16x3x3_operator_scale_Float16x3x3_UInt16},
        std::pair{ "operator*(i32)"_c, &Float16x3x3_operator_scale_Float16x3x3_Int32},
        std::pair{ "operator*(i16)"_c, &Float16x3x3_operator_scale_Float16x3x3_Int16}
    }
    };   
}

Float16x3x4::Float16x3x4()
{
    this->name = "f16";
    this->columnSize = 4;
    this->rowSize = 3;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    // operator[](i32)
    Float16x3x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16x3x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x3x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x3x4_operator_index_Int32.name = "operator[]"_c;
    Float16x3x4_operator_index_Int32.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_index_Int32)->returnTypeSymbol = &Float16x4Type;

    // operator[](u32)
    Float16x3x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16x3x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x3x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x3x4_operator_index_UInt32.name = "operator[]"_c;
    Float16x3x4_operator_index_UInt32.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_index_UInt32)->returnTypeSymbol = &Float16x4Type;

    // operator[](i16)
    Float16x3x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16x3x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x3x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x3x4_operator_index_Int16.name = "operator[]"_c;
    Float16x3x4_operator_index_Int16.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_index_Int16)->returnTypeSymbol = &Float16x4Type;

    // operator[](u16)
    Float16x3x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16x3x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x3x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x3x4_operator_index_UInt16.name = "operator[]"_c;
    Float16x3x4_operator_index_UInt16.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_index_UInt16)->returnTypeSymbol = &Float16x4Type;

    // operator+
    Float16x3x4_operator_add_Float16x3x4_arg0.name = "_arg0"_c;
    Float16x3x4_operator_add_Float16x3x4_arg0.type = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_add_Float16x3x4_arg0)->typeSymbol = &Float16x3x4Type;
    Float16x3x4_operator_add_Float16x3x4.name = "operator+"_c;
    Float16x3x4_operator_add_Float16x3x4.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_add_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    // operator-
    Float16x3x4_operator_sub_Float16x3x4_arg0.name = "_arg0"_c;
    Float16x3x4_operator_sub_Float16x3x4_arg0.type = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_sub_Float16x3x4_arg0)->typeSymbol = &Float16x3x4Type;
    Float16x3x4_operator_sub_Float16x3x4.name = "operator-"_c;
    Float16x3x4_operator_sub_Float16x3x4.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_sub_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    // operator*
    Float16x3x4_operator_mul_Float16x3x4_arg0.name = "_arg0"_c;
    Float16x3x4_operator_mul_Float16x3x4_arg0.type = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_mul_Float16x3x4_arg0)->typeSymbol = &Float16x3x4Type;
    Float16x3x4_operator_mul_Float16x3x4.name = "operator*"_c;
    Float16x3x4_operator_mul_Float16x3x4.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_mul_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    // operator+=
    Float16x3x4_operator_addasg_Float16x3x4_arg0.name = "_arg0"_c;
    Float16x3x4_operator_addasg_Float16x3x4_arg0.type = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_addasg_Float16x3x4_arg0)->typeSymbol = &Float16x3x4Type;
    Float16x3x4_operator_addasg_Float16x3x4.name = "operator+="_c;
    Float16x3x4_operator_addasg_Float16x3x4.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_addasg_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    // operator-=
    Float16x3x4_operator_subasg_Float16x3x4_arg0.name = "_arg0"_c;
    Float16x3x4_operator_subasg_Float16x3x4_arg0.type = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_subasg_Float16x3x4_arg0)->typeSymbol = &Float16x3x4Type;
    Float16x3x4_operator_subasg_Float16x3x4.name = "operator-="_c;
    Float16x3x4_operator_subasg_Float16x3x4.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_subasg_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    // operator*=
    Float16x3x4_operator_mulasg_Float16x3x4_arg0.name = "_arg0"_c;
    Float16x3x4_operator_mulasg_Float16x3x4_arg0.type = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_mulasg_Float16x3x4_arg0)->typeSymbol = &Float16x3x4Type;
    Float16x3x4_operator_mulasg_Float16x3x4.name = "operator*="_c;
    Float16x3x4_operator_mulasg_Float16x3x4.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_mulasg_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    // operator*(f32)
    Float16x3x4_operator_scale_Float16x3x4_Float32_arg0.name = "_arg0"_c;
    Float16x3x4_operator_scale_Float16x3x4_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16x3x4_Float32_arg0)->typeSymbol = &Float32Type;
    Float16x3x4_operator_scale_Float16x3x4_Float32.name = "operator*"_c;
    Float16x3x4_operator_scale_Float16x3x4_Float32.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16x3x4_Float32)->returnTypeSymbol = &Float16x3x4Type;

    // operator*(f16)
    Float16x3x4_operator_scale_Float16x3x4_Float16_arg0.name = "_arg0"_c;
    Float16x3x4_operator_scale_Float16x3x4_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16x3x4_Float16_arg0)->typeSymbol = &Float16Type;
    Float16x3x4_operator_scale_Float16x3x4_Float16.name = "operator*"_c;
    Float16x3x4_operator_scale_Float16x3x4_Float16.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16x3x4_Float16)->returnTypeSymbol = &Float16x3x4Type;

    // operator*(u32)
    Float16x3x4_operator_scale_Float16x3x4_UInt32_arg0.name = "_arg0"_c;
    Float16x3x4_operator_scale_Float16x3x4_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16x3x4_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x3x4_operator_scale_Float16x3x4_UInt32.name = "operator*"_c;
    Float16x3x4_operator_scale_Float16x3x4_UInt32.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16x3x4_UInt32)->returnTypeSymbol = &Float16x3x4Type;

    // operator*(u16)
    Float16x3x4_operator_scale_Float16x3x4_UInt16_arg0.name = "_arg0"_c;
    Float16x3x4_operator_scale_Float16x3x4_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16x3x4_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x3x4_operator_scale_Float16x3x4_UInt16.name = "operator*"_c;
    Float16x3x4_operator_scale_Float16x3x4_UInt16.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16x3x4_UInt16)->returnTypeSymbol = &Float16x3x4Type;

    // operator*(i32)
    Float16x3x4_operator_scale_Float16x3x4_Int32_arg0.name = "_arg0"_c;
    Float16x3x4_operator_scale_Float16x3x4_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16x3x4_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x3x4_operator_scale_Float16x3x4_Int32.name = "operator*"_c;
    Float16x3x4_operator_scale_Float16x3x4_Int32.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16x3x4_Int32)->returnTypeSymbol = &Float16x3x4Type;

    // operator*(i16)
    Float16x3x4_operator_scale_Float16x3x4_Int16_arg0.name = "_arg0"_c;
    Float16x3x4_operator_scale_Float16x3x4_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16x3x4_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x3x4_operator_scale_Float16x3x4_Int16.name = "operator*"_c;
    Float16x3x4_operator_scale_Float16x3x4_Int16.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16x3x4_Int16)->returnTypeSymbol = &Float16x3x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f16x3x4"_c, &Float16x3x4_Float16x4_ctor},
        std::pair{ "f16x3x4"_c, &Float16x3x4_identity},
        std::pair{ "f16x3x4"_c, &Float16x3x4_Float16_12_ctor},
        std::pair{ "operator[](i32)"_c, &Float16x3x4_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float16x3x4_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float16x3x4_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float16x3x4_operator_index_UInt16},
        std::pair{ "operator+(f16x3x4)"_c, &Float16x3x4_operator_add_Float16x3x4},
        std::pair{ "operator-(f16x3x4)"_c, &Float16x3x4_operator_sub_Float16x3x4},
        std::pair{ "operator*(f16x3x4)"_c, &Float16x3x4_operator_mul_Float16x3x4},
        std::pair{ "operator+=(f16x3x4)"_c, &Float16x3x4_operator_addasg_Float16x3x4},
        std::pair{ "operator-=(f16x3x4)"_c, &Float16x3x4_operator_subasg_Float16x3x4},
        std::pair{ "operator*=(f16x3x4)"_c, &Float16x3x4_operator_mulasg_Float16x3x4},
        std::pair{ "operator*(f32)"_c, &Float16x3x4_operator_scale_Float16x3x4_Float32},
        std::pair{ "operator*(f16)"_c, &Float16x3x4_operator_scale_Float16x3x4_Float16},
        std::pair{ "operator*(u32)"_c, &Float16x3x4_operator_scale_Float16x3x4_UInt32},
        std::pair{ "operator*(u16)"_c, &Float16x3x4_operator_scale_Float16x3x4_UInt16},
        std::pair{ "operator*(i32)"_c, &Float16x3x4_operator_scale_Float16x3x4_Int32},
        std::pair{ "operator*(i16)"_c, &Float16x3x4_operator_scale_Float16x3x4_Int16}
    }
    };   
}

Float16x4x2::Float16x4x2()
{
    this->name = "f16";
    this->columnSize = 2;
    this->rowSize = 4;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    // operator[](i32)
    Float16x4x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16x4x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x4x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x4x2_operator_index_Int32.name = "operator[]"_c;
    Float16x4x2_operator_index_Int32.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_index_Int32)->returnTypeSymbol = &Float16x2Type;

    // operator[](u32)
    Float16x4x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16x4x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x4x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x4x2_operator_index_UInt32.name = "operator[]"_c;
    Float16x4x2_operator_index_UInt32.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_index_UInt32)->returnTypeSymbol = &Float16x2Type;

    // operator[](i16)
    Float16x4x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16x4x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x4x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x4x2_operator_index_Int16.name = "operator[]"_c;
    Float16x4x2_operator_index_Int16.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_index_Int16)->returnTypeSymbol = &Float16x2Type;

    // operator[](u16)
    Float16x4x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16x4x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x4x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x4x2_operator_index_UInt16.name = "operator[]"_c;
    Float16x4x2_operator_index_UInt16.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_index_UInt16)->returnTypeSymbol = &Float16x2Type;

    // operator+
    Float16x4x2_operator_add_Float16x4x2_arg0.name = "_arg0"_c;
    Float16x4x2_operator_add_Float16x4x2_arg0.type = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_add_Float16x4x2_arg0)->typeSymbol = &Float16x4x2Type;
    Float16x4x2_operator_add_Float16x4x2.name = "operator+"_c;
    Float16x4x2_operator_add_Float16x4x2.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_add_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    // operator-
    Float16x4x2_operator_sub_Float16x4x2_arg0.name = "_arg0"_c;
    Float16x4x2_operator_sub_Float16x4x2_arg0.type = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_sub_Float16x4x2_arg0)->typeSymbol = &Float16x4x2Type;
    Float16x4x2_operator_sub_Float16x4x2.name = "operator-"_c;
    Float16x4x2_operator_sub_Float16x4x2.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_sub_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    // operator*
    Float16x4x2_operator_mul_Float16x4x2_arg0.name = "_arg0"_c;
    Float16x4x2_operator_mul_Float16x4x2_arg0.type = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_mul_Float16x4x2_arg0)->typeSymbol = &Float16x4x2Type;
    Float16x4x2_operator_mul_Float16x4x2.name = "operator*"_c;
    Float16x4x2_operator_mul_Float16x4x2.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_mul_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    // operator+=
    Float16x4x2_operator_addasg_Float16x4x2_arg0.name = "_arg0"_c;
    Float16x4x2_operator_addasg_Float16x4x2_arg0.type = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_addasg_Float16x4x2_arg0)->typeSymbol = &Float16x4x2Type;
    Float16x4x2_operator_addasg_Float16x4x2.name = "operator+="_c;
    Float16x4x2_operator_addasg_Float16x4x2.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_addasg_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    // operator-=
    Float16x4x2_operator_subasg_Float16x4x2_arg0.name = "_arg0"_c;
    Float16x4x2_operator_subasg_Float16x4x2_arg0.type = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_subasg_Float16x4x2_arg0)->typeSymbol = &Float16x4x2Type;
    Float16x4x2_operator_subasg_Float16x4x2.name = "operator-="_c;
    Float16x4x2_operator_subasg_Float16x4x2.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_subasg_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    // operator*=
    Float16x4x2_operator_mulasg_Float16x4x2_arg0.name = "_arg0"_c;
    Float16x4x2_operator_mulasg_Float16x4x2_arg0.type = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_mulasg_Float16x4x2_arg0)->typeSymbol = &Float16x4x2Type;
    Float16x4x2_operator_mulasg_Float16x4x2.name = "operator*="_c;
    Float16x4x2_operator_mulasg_Float16x4x2.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_mulasg_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    // operator*(f32)
    Float16x4x2_operator_scale_Float16x4x2_Float32_arg0.name = "_arg0"_c;
    Float16x4x2_operator_scale_Float16x4x2_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16x4x2_Float32_arg0)->typeSymbol = &Float32Type;
    Float16x4x2_operator_scale_Float16x4x2_Float32.name = "operator*"_c;
    Float16x4x2_operator_scale_Float16x4x2_Float32.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16x4x2_Float32)->returnTypeSymbol = &Float16x4x2Type;

    // operator*(f16)
    Float16x4x2_operator_scale_Float16x4x2_Float16_arg0.name = "_arg0"_c;
    Float16x4x2_operator_scale_Float16x4x2_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16x4x2_Float16_arg0)->typeSymbol = &Float16Type;
    Float16x4x2_operator_scale_Float16x4x2_Float16.name = "operator*"_c;
    Float16x4x2_operator_scale_Float16x4x2_Float16.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16x4x2_Float16)->returnTypeSymbol = &Float16x4x2Type;

    // operator*(u32)
    Float16x4x2_operator_scale_Float16x4x2_UInt32_arg0.name = "_arg0"_c;
    Float16x4x2_operator_scale_Float16x4x2_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16x4x2_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x4x2_operator_scale_Float16x4x2_UInt32.name = "operator*"_c;
    Float16x4x2_operator_scale_Float16x4x2_UInt32.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16x4x2_UInt32)->returnTypeSymbol = &Float16x4x2Type;

    // operator*(u16)
    Float16x4x2_operator_scale_Float16x4x2_UInt16_arg0.name = "_arg0"_c;
    Float16x4x2_operator_scale_Float16x4x2_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16x4x2_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x4x2_operator_scale_Float16x4x2_UInt16.name = "operator*"_c;
    Float16x4x2_operator_scale_Float16x4x2_UInt16.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16x4x2_UInt16)->returnTypeSymbol = &Float16x4x2Type;

    // operator*(i32)
    Float16x4x2_operator_scale_Float16x4x2_Int32_arg0.name = "_arg0"_c;
    Float16x4x2_operator_scale_Float16x4x2_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16x4x2_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x4x2_operator_scale_Float16x4x2_Int32.name = "operator*"_c;
    Float16x4x2_operator_scale_Float16x4x2_Int32.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16x4x2_Int32)->returnTypeSymbol = &Float16x4x2Type;

    // operator*(i16)
    Float16x4x2_operator_scale_Float16x4x2_Int16_arg0.name = "_arg0"_c;
    Float16x4x2_operator_scale_Float16x4x2_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16x4x2_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x4x2_operator_scale_Float16x4x2_Int16.name = "operator*"_c;
    Float16x4x2_operator_scale_Float16x4x2_Int16.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16x4x2_Int16)->returnTypeSymbol = &Float16x4x2Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f16x4x2"_c, &Float16x4x2_Float16x2_ctor},
        std::pair{ "f16x4x2"_c, &Float16x4x2_identity},
        std::pair{ "f16x4x2"_c, &Float16x4x2_Float16_8_ctor},
        std::pair{ "operator[](i32)"_c, &Float16x4x2_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float16x4x2_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float16x4x2_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float16x4x2_operator_index_UInt16},
        std::pair{ "operator+(f16x4x2)"_c, &Float16x4x2_operator_add_Float16x4x2},
        std::pair{ "operator-(f16x4x2)"_c, &Float16x4x2_operator_sub_Float16x4x2},
        std::pair{ "operator*(f16x4x2)"_c, &Float16x4x2_operator_mul_Float16x4x2},
        std::pair{ "operator+=(f16x4x2)"_c, &Float16x4x2_operator_addasg_Float16x4x2},
        std::pair{ "operator-=(f16x4x2)"_c, &Float16x4x2_operator_subasg_Float16x4x2},
        std::pair{ "operator*=(f16x4x2)"_c, &Float16x4x2_operator_mulasg_Float16x4x2},
        std::pair{ "operator*(f32)"_c, &Float16x4x2_operator_scale_Float16x4x2_Float32},
        std::pair{ "operator*(f16)"_c, &Float16x4x2_operator_scale_Float16x4x2_Float16},
        std::pair{ "operator*(u32)"_c, &Float16x4x2_operator_scale_Float16x4x2_UInt32},
        std::pair{ "operator*(u16)"_c, &Float16x4x2_operator_scale_Float16x4x2_UInt16},
        std::pair{ "operator*(i32)"_c, &Float16x4x2_operator_scale_Float16x4x2_Int32},
        std::pair{ "operator*(i16)"_c, &Float16x4x2_operator_scale_Float16x4x2_Int16}
    }
    };   
}

Float16x4x3::Float16x4x3()
{
    this->name = "f16";
    this->columnSize = 3;
    this->rowSize = 4;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    // operator[](i32)
    Float16x4x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16x4x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x4x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x4x3_operator_index_Int32.name = "operator[]"_c;
    Float16x4x3_operator_index_Int32.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_index_Int32)->returnTypeSymbol = &Float16x3Type;

    // operator[](u32)
    Float16x4x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16x4x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x4x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x4x3_operator_index_UInt32.name = "operator[]"_c;
    Float16x4x3_operator_index_UInt32.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_index_UInt32)->returnTypeSymbol = &Float16x3Type;

    // operator[](i16)
    Float16x4x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16x4x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x4x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x4x3_operator_index_Int16.name = "operator[]"_c;
    Float16x4x3_operator_index_Int16.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_index_Int16)->returnTypeSymbol = &Float16x3Type;

    // operator[](u16)
    Float16x4x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16x4x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x4x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x4x3_operator_index_UInt16.name = "operator[]"_c;
    Float16x4x3_operator_index_UInt16.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_index_UInt16)->returnTypeSymbol = &Float16x3Type;

    // operator+
    Float16x4x3_operator_add_Float16x4x3_arg0.name = "_arg0"_c;
    Float16x4x3_operator_add_Float16x4x3_arg0.type = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_add_Float16x4x3_arg0)->typeSymbol = &Float16x4x3Type;
    Float16x4x3_operator_add_Float16x4x3.name = "operator+"_c;
    Float16x4x3_operator_add_Float16x4x3.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_add_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    // operator-
    Float16x4x3_operator_sub_Float16x4x3_arg0.name = "_arg0"_c;
    Float16x4x3_operator_sub_Float16x4x3_arg0.type = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_sub_Float16x4x3_arg0)->typeSymbol = &Float16x4x3Type;
    Float16x4x3_operator_sub_Float16x4x3.name = "operator-"_c;
    Float16x4x3_operator_sub_Float16x4x3.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_sub_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    // operator*
    Float16x4x3_operator_mul_Float16x4x3_arg0.name = "_arg0"_c;
    Float16x4x3_operator_mul_Float16x4x3_arg0.type = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_mul_Float16x4x3_arg0)->typeSymbol = &Float16x4x3Type;
    Float16x4x3_operator_mul_Float16x4x3.name = "operator*"_c;
    Float16x4x3_operator_mul_Float16x4x3.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_mul_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    // operator+=
    Float16x4x3_operator_addasg_Float16x4x3_arg0.name = "_arg0"_c;
    Float16x4x3_operator_addasg_Float16x4x3_arg0.type = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_addasg_Float16x4x3_arg0)->typeSymbol = &Float16x4x3Type;
    Float16x4x3_operator_addasg_Float16x4x3.name = "operator+="_c;
    Float16x4x3_operator_addasg_Float16x4x3.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_addasg_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    // operator-=
    Float16x4x3_operator_subasg_Float16x4x3_arg0.name = "_arg0"_c;
    Float16x4x3_operator_subasg_Float16x4x3_arg0.type = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_subasg_Float16x4x3_arg0)->typeSymbol = &Float16x4x3Type;
    Float16x4x3_operator_subasg_Float16x4x3.name = "operator-="_c;
    Float16x4x3_operator_subasg_Float16x4x3.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_subasg_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    // operator*=
    Float16x4x3_operator_mulasg_Float16x4x3_arg0.name = "_arg0"_c;
    Float16x4x3_operator_mulasg_Float16x4x3_arg0.type = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_mulasg_Float16x4x3_arg0)->typeSymbol = &Float16x4x3Type;
    Float16x4x3_operator_mulasg_Float16x4x3.name = "operator*="_c;
    Float16x4x3_operator_mulasg_Float16x4x3.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_mulasg_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    // operator*(f32)
    Float16x4x3_operator_scale_Float16x4x3_Float32_arg0.name = "_arg0"_c;
    Float16x4x3_operator_scale_Float16x4x3_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16x4x3_Float32_arg0)->typeSymbol = &Float32Type;
    Float16x4x3_operator_scale_Float16x4x3_Float32.name = "operator*"_c;
    Float16x4x3_operator_scale_Float16x4x3_Float32.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16x4x3_Float32)->returnTypeSymbol = &Float16x4x3Type;

    // operator*(f16)
    Float16x4x3_operator_scale_Float16x4x3_Float16_arg0.name = "_arg0"_c;
    Float16x4x3_operator_scale_Float16x4x3_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16x4x3_Float16_arg0)->typeSymbol = &Float16Type;
    Float16x4x3_operator_scale_Float16x4x3_Float16.name = "operator*"_c;
    Float16x4x3_operator_scale_Float16x4x3_Float16.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16x4x3_Float16)->returnTypeSymbol = &Float16x4x3Type;

    // operator*(u32)
    Float16x4x3_operator_scale_Float16x4x3_UInt32_arg0.name = "_arg0"_c;
    Float16x4x3_operator_scale_Float16x4x3_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16x4x3_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x4x3_operator_scale_Float16x4x3_UInt32.name = "operator*"_c;
    Float16x4x3_operator_scale_Float16x4x3_UInt32.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16x4x3_UInt32)->returnTypeSymbol = &Float16x4x3Type;

    // operator*(u16)
    Float16x4x3_operator_scale_Float16x4x3_UInt16_arg0.name = "_arg0"_c;
    Float16x4x3_operator_scale_Float16x4x3_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16x4x3_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x4x3_operator_scale_Float16x4x3_UInt16.name = "operator*"_c;
    Float16x4x3_operator_scale_Float16x4x3_UInt16.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16x4x3_UInt16)->returnTypeSymbol = &Float16x4x3Type;

    // operator*(i32)
    Float16x4x3_operator_scale_Float16x4x3_Int32_arg0.name = "_arg0"_c;
    Float16x4x3_operator_scale_Float16x4x3_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16x4x3_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x4x3_operator_scale_Float16x4x3_Int32.name = "operator*"_c;
    Float16x4x3_operator_scale_Float16x4x3_Int32.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16x4x3_Int32)->returnTypeSymbol = &Float16x4x3Type;

    // operator*(i16)
    Float16x4x3_operator_scale_Float16x4x3_Int16_arg0.name = "_arg0"_c;
    Float16x4x3_operator_scale_Float16x4x3_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16x4x3_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x4x3_operator_scale_Float16x4x3_Int16.name = "operator*"_c;
    Float16x4x3_operator_scale_Float16x4x3_Int16.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16x4x3_Int16)->returnTypeSymbol = &Float16x4x3Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f16x4x3"_c, &Float16x4x3_Float16x3_ctor},
        std::pair{ "f16x4x3"_c, &Float16x4x3_identity},
        std::pair{ "f16x4x3"_c, &Float16x4x3_Float16_12_ctor},
        std::pair{ "operator[](i32)"_c, &Float16x4x3_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float16x4x3_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float16x4x3_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float16x4x3_operator_index_UInt16},
        std::pair{ "operator+(f16x4x3)"_c, &Float16x4x3_operator_add_Float16x4x3},
        std::pair{ "operator-(f16x4x3)"_c, &Float16x4x3_operator_sub_Float16x4x3},
        std::pair{ "operator*(f16x4x3)"_c, &Float16x4x3_operator_mul_Float16x4x3},
        std::pair{ "operator+=(f16x4x3)"_c, &Float16x4x3_operator_addasg_Float16x4x3},
        std::pair{ "operator-=(f16x4x3)"_c, &Float16x4x3_operator_subasg_Float16x4x3},
        std::pair{ "operator*=(f16x4x3)"_c, &Float16x4x3_operator_mulasg_Float16x4x3},
        std::pair{ "operator*(f32)"_c, &Float16x4x3_operator_scale_Float16x4x3_Float32},
        std::pair{ "operator*(f16)"_c, &Float16x4x3_operator_scale_Float16x4x3_Float16},
        std::pair{ "operator*(u32)"_c, &Float16x4x3_operator_scale_Float16x4x3_UInt32},
        std::pair{ "operator*(u16)"_c, &Float16x4x3_operator_scale_Float16x4x3_UInt16},
        std::pair{ "operator*(i32)"_c, &Float16x4x3_operator_scale_Float16x4x3_Int32},
        std::pair{ "operator*(i16)"_c, &Float16x4x3_operator_scale_Float16x4x3_Int16}
    }
    };   
}

Float16x4x4::Float16x4x4()
{
    this->name = "f16";
    this->columnSize = 4;
    this->rowSize = 4;
    this->byteSize = 32;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    // operator[](i32)
    Float16x4x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16x4x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x4x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x4x4_operator_index_Int32.name = "operator[]"_c;
    Float16x4x4_operator_index_Int32.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_index_Int32)->returnTypeSymbol = &Float16x4Type;

    // operator[](u32)
    Float16x4x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16x4x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x4x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x4x4_operator_index_UInt32.name = "operator[]"_c;
    Float16x4x4_operator_index_UInt32.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_index_UInt32)->returnTypeSymbol = &Float16x4Type;

    // operator[](i16)
    Float16x4x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16x4x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x4x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x4x4_operator_index_Int16.name = "operator[]"_c;
    Float16x4x4_operator_index_Int16.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_index_Int16)->returnTypeSymbol = &Float16x4Type;

    // operator[](u16)
    Float16x4x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16x4x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x4x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x4x4_operator_index_UInt16.name = "operator[]"_c;
    Float16x4x4_operator_index_UInt16.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_index_UInt16)->returnTypeSymbol = &Float16x4Type;

    // operator+
    Float16x4x4_operator_add_Float16x4x4_arg0.name = "_arg0"_c;
    Float16x4x4_operator_add_Float16x4x4_arg0.type = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_add_Float16x4x4_arg0)->typeSymbol = &Float16x4x4Type;
    Float16x4x4_operator_add_Float16x4x4.name = "operator+"_c;
    Float16x4x4_operator_add_Float16x4x4.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_add_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    // operator-
    Float16x4x4_operator_sub_Float16x4x4_arg0.name = "_arg0"_c;
    Float16x4x4_operator_sub_Float16x4x4_arg0.type = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_sub_Float16x4x4_arg0)->typeSymbol = &Float16x4x4Type;
    Float16x4x4_operator_sub_Float16x4x4.name = "operator-"_c;
    Float16x4x4_operator_sub_Float16x4x4.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_sub_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    // operator*
    Float16x4x4_operator_mul_Float16x4x4_arg0.name = "_arg0"_c;
    Float16x4x4_operator_mul_Float16x4x4_arg0.type = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_mul_Float16x4x4_arg0)->typeSymbol = &Float16x4x4Type;
    Float16x4x4_operator_mul_Float16x4x4.name = "operator*"_c;
    Float16x4x4_operator_mul_Float16x4x4.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_mul_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    // operator+=
    Float16x4x4_operator_addasg_Float16x4x4_arg0.name = "_arg0"_c;
    Float16x4x4_operator_addasg_Float16x4x4_arg0.type = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_addasg_Float16x4x4_arg0)->typeSymbol = &Float16x4x4Type;
    Float16x4x4_operator_addasg_Float16x4x4.name = "operator+="_c;
    Float16x4x4_operator_addasg_Float16x4x4.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_addasg_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    // operator-=
    Float16x4x4_operator_subasg_Float16x4x4_arg0.name = "_arg0"_c;
    Float16x4x4_operator_subasg_Float16x4x4_arg0.type = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_subasg_Float16x4x4_arg0)->typeSymbol = &Float16x4x4Type;
    Float16x4x4_operator_subasg_Float16x4x4.name = "operator-="_c;
    Float16x4x4_operator_subasg_Float16x4x4.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_subasg_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    // operator*=
    Float16x4x4_operator_mulasg_Float16x4x4_arg0.name = "_arg0"_c;
    Float16x4x4_operator_mulasg_Float16x4x4_arg0.type = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_mulasg_Float16x4x4_arg0)->typeSymbol = &Float16x4x4Type;
    Float16x4x4_operator_mulasg_Float16x4x4.name = "operator*="_c;
    Float16x4x4_operator_mulasg_Float16x4x4.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_mulasg_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    // operator*(f32)
    Float16x4x4_operator_scale_Float16x4x4_Float32_arg0.name = "_arg0"_c;
    Float16x4x4_operator_scale_Float16x4x4_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16x4x4_Float32_arg0)->typeSymbol = &Float32Type;
    Float16x4x4_operator_scale_Float16x4x4_Float32.name = "operator*"_c;
    Float16x4x4_operator_scale_Float16x4x4_Float32.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16x4x4_Float32)->returnTypeSymbol = &Float16x4x4Type;

    // operator*(f16)
    Float16x4x4_operator_scale_Float16x4x4_Float16_arg0.name = "_arg0"_c;
    Float16x4x4_operator_scale_Float16x4x4_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16x4x4_Float16_arg0)->typeSymbol = &Float16Type;
    Float16x4x4_operator_scale_Float16x4x4_Float16.name = "operator*"_c;
    Float16x4x4_operator_scale_Float16x4x4_Float16.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16x4x4_Float16)->returnTypeSymbol = &Float16x4x4Type;

    // operator*(u32)
    Float16x4x4_operator_scale_Float16x4x4_UInt32_arg0.name = "_arg0"_c;
    Float16x4x4_operator_scale_Float16x4x4_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16x4x4_UInt32_arg0)->typeSymbol = &UInt32Type;
    Float16x4x4_operator_scale_Float16x4x4_UInt32.name = "operator*"_c;
    Float16x4x4_operator_scale_Float16x4x4_UInt32.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16x4x4_UInt32)->returnTypeSymbol = &Float16x4x4Type;

    // operator*(u16)
    Float16x4x4_operator_scale_Float16x4x4_UInt16_arg0.name = "_arg0"_c;
    Float16x4x4_operator_scale_Float16x4x4_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16x4x4_UInt16_arg0)->typeSymbol = &UInt16Type;
    Float16x4x4_operator_scale_Float16x4x4_UInt16.name = "operator*"_c;
    Float16x4x4_operator_scale_Float16x4x4_UInt16.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16x4x4_UInt16)->returnTypeSymbol = &Float16x4x4Type;

    // operator*(i32)
    Float16x4x4_operator_scale_Float16x4x4_Int32_arg0.name = "_arg0"_c;
    Float16x4x4_operator_scale_Float16x4x4_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16x4x4_Int32_arg0)->typeSymbol = &Int32Type;
    Float16x4x4_operator_scale_Float16x4x4_Int32.name = "operator*"_c;
    Float16x4x4_operator_scale_Float16x4x4_Int32.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16x4x4_Int32)->returnTypeSymbol = &Float16x4x4Type;

    // operator*(i16)
    Float16x4x4_operator_scale_Float16x4x4_Int16_arg0.name = "_arg0"_c;
    Float16x4x4_operator_scale_Float16x4x4_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16x4x4_Int16_arg0)->typeSymbol = &Int16Type;
    Float16x4x4_operator_scale_Float16x4x4_Int16.name = "operator*"_c;
    Float16x4x4_operator_scale_Float16x4x4_Int16.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16x4x4_Int16)->returnTypeSymbol = &Float16x4x4Type;

    this->scope.symbolLookup = StaticMap { 
    std::array{
        std::pair{ "f16x4x4"_c, &Float16x4x4_Float16x4_ctor},
        std::pair{ "f16x4x4"_c, &Float16x4x4_identity},
        std::pair{ "f16x4x4"_c, &Float16x4x4_Float16_16_ctor},
        std::pair{ "operator[](i32)"_c, &Float16x4x4_operator_index_Int32},
        std::pair{ "operator[](u32)"_c, &Float16x4x4_operator_index_UInt32},
        std::pair{ "operator[](i16)"_c, &Float16x4x4_operator_index_Int16},
        std::pair{ "operator[](u16)"_c, &Float16x4x4_operator_index_UInt16},
        std::pair{ "operator+(f16x4x4)"_c, &Float16x4x4_operator_add_Float16x4x4},
        std::pair{ "operator-(f16x4x4)"_c, &Float16x4x4_operator_sub_Float16x4x4},
        std::pair{ "operator*(f16x4x4)"_c, &Float16x4x4_operator_mul_Float16x4x4},
        std::pair{ "operator+=(f16x4x4)"_c, &Float16x4x4_operator_addasg_Float16x4x4},
        std::pair{ "operator-=(f16x4x4)"_c, &Float16x4x4_operator_subasg_Float16x4x4},
        std::pair{ "operator*=(f16x4x4)"_c, &Float16x4x4_operator_mulasg_Float16x4x4},
        std::pair{ "operator*(f32)"_c, &Float16x4x4_operator_scale_Float16x4x4_Float32},
        std::pair{ "operator*(f16)"_c, &Float16x4x4_operator_scale_Float16x4x4_Float16},
        std::pair{ "operator*(u32)"_c, &Float16x4x4_operator_scale_Float16x4x4_UInt32},
        std::pair{ "operator*(u16)"_c, &Float16x4x4_operator_scale_Float16x4x4_UInt16},
        std::pair{ "operator*(i32)"_c, &Float16x4x4_operator_scale_Float16x4x4_Int32},
        std::pair{ "operator*(i16)"_c, &Float16x4x4_operator_scale_Float16x4x4_Int16}
    }
    };   
}

} // namespace GPULang

