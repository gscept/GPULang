//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "types.h"
namespace GPULang
{
struct Namer
{
    Namer()
    {
        Float32Type.name = "f32"_c;
        UInt32Type.name = "u32"_c;
        Int32Type.name = "i32"_c;
        Bool8Type.name = "b8"_c;
        Float16Type.name = "f16"_c;
        UInt16Type.name = "u16"_c;
        Int16Type.name = "i16"_c;
        Float32x2Type.name = "f32x2"_c;
        UInt32x2Type.name = "u32x2"_c;
        Int32x2Type.name = "i32x2"_c;
        Bool8x2Type.name = "b8x2"_c;
        Float16x2Type.name = "f16x2"_c;
        UInt16x2Type.name = "u16x2"_c;
        Int16x2Type.name = "i16x2"_c;
        Float32x3Type.name = "f32x3"_c;
        UInt32x3Type.name = "u32x3"_c;
        Int32x3Type.name = "i32x3"_c;
        Bool8x3Type.name = "b8x3"_c;
        Float16x3Type.name = "f16x3"_c;
        UInt16x3Type.name = "u16x3"_c;
        Int16x3Type.name = "i16x3"_c;
        Float32x4Type.name = "f32x4"_c;
        UInt32x4Type.name = "u32x4"_c;
        Int32x4Type.name = "i32x4"_c;
        Bool8x4Type.name = "b8x4"_c;
        Float16x4Type.name = "f16x4"_c;
        UInt16x4Type.name = "u16x4"_c;
        Int16x4Type.name = "i16x4"_c;
        Float32x2x2Type.name = "f32x2x2"_c;
        Float32x2x3Type.name = "f32x2x3"_c;
        Float32x2x4Type.name = "f32x2x4"_c;
        Float32x3x2Type.name = "f32x3x2"_c;
        Float32x3x3Type.name = "f32x3x3"_c;
        Float32x3x4Type.name = "f32x3x4"_c;
        Float32x4x2Type.name = "f32x4x2"_c;
        Float32x4x3Type.name = "f32x4x3"_c;
        Float32x4x4Type.name = "f32x4x4"_c;
        Float16x2x2Type.name = "f16x2x2"_c;
        Float16x2x3Type.name = "f16x2x3"_c;
        Float16x2x4Type.name = "f16x2x4"_c;
        Float16x3x2Type.name = "f16x3x2"_c;
        Float16x3x3Type.name = "f16x3x3"_c;
        Float16x3x4Type.name = "f16x3x4"_c;
        Float16x4x2Type.name = "f16x4x2"_c;
        Float16x4x3Type.name = "f16x4x3"_c;
        Float16x4x4Type.name = "f16x4x4"_c;
        Texture1DType.name = "texture1D"_c;
        Texture1DArrayType.name = "texture1DArray"_c;
        Texture2DType.name = "texture2D"_c;
        Texture2DMSType.name = "texture2DMS"_c;
        Texture2DMSArrayType.name = "texture2DMSArray"_c;
        Texture2DArrayType.name = "texture2DArray"_c;
        Texture3DType.name = "texture3D"_c;
        TextureCubeType.name = "textureCube"_c;
        TextureCubeArrayType.name = "textureCubeArray"_c;
        PixelCacheType.name = "pixelCache"_c;
        PixelCacheMSType.name = "pixelCacheMS"_c;
        SamplerType.name = "sampler"_c;
        FunctionPtrType.name = "functionPtr"_c;
        AccelerationStructureType.name = "accelerationStructure"_c;
        VoidType.name = "void"_c;
    }
};
Namer namer;

/// f32 with UInt32
Variable Float32_convert_UInt32_arg0;
Function Float32_convert_UInt32;
inline constexpr std::array Float32_convert_UInt32_args = { &Float32_convert_UInt32_arg0 };

/// f32 with Int32
Variable Float32_convert_Int32_arg0;
Function Float32_convert_Int32;
inline constexpr std::array Float32_convert_Int32_args = { &Float32_convert_Int32_arg0 };

/// f32 with Float16
Variable Float32_convert_Float16_arg0;
Function Float32_convert_Float16;
inline constexpr std::array Float32_convert_Float16_args = { &Float32_convert_Float16_arg0 };

/// f32 with UInt16
Variable Float32_convert_UInt16_arg0;
Function Float32_convert_UInt16;
inline constexpr std::array Float32_convert_UInt16_args = { &Float32_convert_UInt16_arg0 };

/// f32 with Int16
Variable Float32_convert_Int16_arg0;
Function Float32_convert_Int16;
inline constexpr std::array Float32_convert_Int16_args = { &Float32_convert_Int16_arg0 };

/// f32 with Float32
Variable Float32_ctor0_arg0_Float32;
Function Float32_ctor0;
inline constexpr std::array Float32_ctor0_args = { &Float32_ctor0_arg0_Float32 };

/// operator[] with Int32
Variable Float32_operator_index_Int32_arg0;
Function Float32_operator_index_Int32;
inline constexpr std::array Float32_operator_index_Int32_args = { &Float32_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float32_operator_index_UInt32_arg0;
Function Float32_operator_index_UInt32;
inline constexpr std::array Float32_operator_index_UInt32_args = { &Float32_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float32_operator_index_Int16_arg0;
Function Float32_operator_index_Int16;
inline constexpr std::array Float32_operator_index_Int16_args = { &Float32_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float32_operator_index_UInt16_arg0;
Function Float32_operator_index_UInt16;
inline constexpr std::array Float32_operator_index_UInt16_args = { &Float32_operator_index_UInt16_arg0 };

/// operator+ with Float32
Variable Float32_operator_add_Float32_arg0;
Function Float32_operator_add_Float32;
inline constexpr std::array Float32_operator_add_Float32_args = { &Float32_operator_add_Float32_arg0 };

/// operator- with Float32
Variable Float32_operator_sub_Float32_arg0;
Function Float32_operator_sub_Float32;
inline constexpr std::array Float32_operator_sub_Float32_args = { &Float32_operator_sub_Float32_arg0 };

/// operator* with Float32
Variable Float32_operator_mul_Float32_arg0;
Function Float32_operator_mul_Float32;
inline constexpr std::array Float32_operator_mul_Float32_args = { &Float32_operator_mul_Float32_arg0 };

/// operator/ with Float32
Variable Float32_operator_div_Float32_arg0;
Function Float32_operator_div_Float32;
inline constexpr std::array Float32_operator_div_Float32_args = { &Float32_operator_div_Float32_arg0 };

/// operator% with Float32
Variable Float32_operator_mod_Float32_arg0;
Function Float32_operator_mod_Float32;
inline constexpr std::array Float32_operator_mod_Float32_args = { &Float32_operator_mod_Float32_arg0 };

/// operator+= with Float32
Variable Float32_operator_addasg_Float32_arg0;
Function Float32_operator_addasg_Float32;
inline constexpr std::array Float32_operator_addasg_Float32_args = { &Float32_operator_addasg_Float32_arg0 };

/// operator-= with Float32
Variable Float32_operator_subasg_Float32_arg0;
Function Float32_operator_subasg_Float32;
inline constexpr std::array Float32_operator_subasg_Float32_args = { &Float32_operator_subasg_Float32_arg0 };

/// operator*= with Float32
Variable Float32_operator_mulasg_Float32_arg0;
Function Float32_operator_mulasg_Float32;
inline constexpr std::array Float32_operator_mulasg_Float32_args = { &Float32_operator_mulasg_Float32_arg0 };

/// operator/= with Float32
Variable Float32_operator_divasg_Float32_arg0;
Function Float32_operator_divasg_Float32;
inline constexpr std::array Float32_operator_divasg_Float32_args = { &Float32_operator_divasg_Float32_arg0 };

/// operator< with Float32
Variable Float32_operator_lt_Float32_arg0;
Function Float32_operator_lt_Float32;
inline constexpr std::array Float32_operator_lt_Float32_args = { &Float32_operator_lt_Float32_arg0 };

/// operator<= with Float32
Variable Float32_operator_lte_Float32_arg0;
Function Float32_operator_lte_Float32;
inline constexpr std::array Float32_operator_lte_Float32_args = { &Float32_operator_lte_Float32_arg0 };

/// operator> with Float32
Variable Float32_operator_gt_Float32_arg0;
Function Float32_operator_gt_Float32;
inline constexpr std::array Float32_operator_gt_Float32_args = { &Float32_operator_gt_Float32_arg0 };

/// operator>= with Float32
Variable Float32_operator_gte_Float32_arg0;
Function Float32_operator_gte_Float32;
inline constexpr std::array Float32_operator_gte_Float32_args = { &Float32_operator_gte_Float32_arg0 };

/// operator== with Float32
Variable Float32_operator_eq_Float32_arg0;
Function Float32_operator_eq_Float32;
inline constexpr std::array Float32_operator_eq_Float32_args = { &Float32_operator_eq_Float32_arg0 };

/// operator!= with Float32
Variable Float32_operator_neq_Float32_arg0;
Function Float32_operator_neq_Float32;
inline constexpr std::array Float32_operator_neq_Float32_args = { &Float32_operator_neq_Float32_arg0 };

Float32::Float32()
{
    this->name = "f32";
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// f32 with UInt32
    Float32_convert_UInt32_arg0.name = "val"_c;
    Float32_convert_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32_convert_UInt32.documentation = "Convert u32 to f32"_c;
    Float32_convert_UInt32.name = "f32"_c;
    Float32_convert_UInt32.returnType = Type::FullType { Float32Type.name };
    Float32_convert_UInt32.parameters = Float32_convert_UInt32_args;
    Symbol::Resolved(&Float32_convert_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32_convert_UInt32)->returnTypeSymbol = &Float32Type;

    /// f32 with Int32
    Float32_convert_Int32_arg0.name = "val"_c;
    Float32_convert_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32_convert_Int32.documentation = "Convert i32 to f32"_c;
    Float32_convert_Int32.name = "f32"_c;
    Float32_convert_Int32.returnType = Type::FullType { Float32Type.name };
    Float32_convert_Int32.parameters = Float32_convert_Int32_args;
    Symbol::Resolved(&Float32_convert_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32_convert_Int32)->returnTypeSymbol = &Float32Type;

    /// f32 with Float16
    Float32_convert_Float16_arg0.name = "val"_c;
    Float32_convert_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float32_convert_Float16.documentation = "Convert f16 to f32"_c;
    Float32_convert_Float16.name = "f32"_c;
    Float32_convert_Float16.returnType = Type::FullType { Float32Type.name };
    Float32_convert_Float16.parameters = Float32_convert_Float16_args;
    Symbol::Resolved(&Float32_convert_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float32_convert_Float16)->returnTypeSymbol = &Float32Type;

    /// f32 with UInt16
    Float32_convert_UInt16_arg0.name = "val"_c;
    Float32_convert_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32_convert_UInt16.documentation = "Convert u16 to f32"_c;
    Float32_convert_UInt16.name = "f32"_c;
    Float32_convert_UInt16.returnType = Type::FullType { Float32Type.name };
    Float32_convert_UInt16.parameters = Float32_convert_UInt16_args;
    Symbol::Resolved(&Float32_convert_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32_convert_UInt16)->returnTypeSymbol = &Float32Type;

    /// f32 with Int16
    Float32_convert_Int16_arg0.name = "val"_c;
    Float32_convert_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32_convert_Int16.documentation = "Convert i16 to f32"_c;
    Float32_convert_Int16.name = "f32"_c;
    Float32_convert_Int16.returnType = Type::FullType { Float32Type.name };
    Float32_convert_Int16.parameters = Float32_convert_Int16_args;
    Symbol::Resolved(&Float32_convert_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32_convert_Int16)->returnTypeSymbol = &Float32Type;

    /// f32 with Float32
    Float32_ctor0_arg0_Float32.name = "_arg0"_c;
    Float32_ctor0_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32_ctor0.name = "f32"_c;
    Float32_ctor0.returnType = Type::FullType { Float32Type.name };
    Float32_ctor0.parameters = Float32_ctor0_args;
    Symbol::Resolved(&Float32_ctor0_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_ctor0)->returnTypeSymbol = &Float32Type;

    /// operator[] with Int32
    Float32_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32_operator_index_Int32.name = "operator[]"_c;
    Float32_operator_index_Int32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_index_Int32.parameters = Float32_operator_index_Int32_args;
    Symbol::Resolved(&Float32_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt32
    Float32_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32_operator_index_UInt32.name = "operator[]"_c;
    Float32_operator_index_UInt32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_index_UInt32.parameters = Float32_operator_index_UInt32_args;
    Symbol::Resolved(&Float32_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    /// operator[] with Int16
    Float32_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32_operator_index_Int16.name = "operator[]"_c;
    Float32_operator_index_Int16.returnType = Type::FullType { Float32Type.name };
    Float32_operator_index_Int16.parameters = Float32_operator_index_Int16_args;
    Symbol::Resolved(&Float32_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt16
    Float32_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32_operator_index_UInt16.name = "operator[]"_c;
    Float32_operator_index_UInt16.returnType = Type::FullType { Float32Type.name };
    Float32_operator_index_UInt16.parameters = Float32_operator_index_UInt16_args;
    Symbol::Resolved(&Float32_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    /// operator+ with Float32
    Float32_operator_add_Float32_arg0.name = "_arg0"_c;
    Float32_operator_add_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32_operator_add_Float32.name = "operator+"_c;
    Float32_operator_add_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_add_Float32.parameters = Float32_operator_add_Float32_args;
    Symbol::Resolved(&Float32_operator_add_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_add_Float32)->returnTypeSymbol = &Float32Type;

    /// operator- with Float32
    Float32_operator_sub_Float32_arg0.name = "_arg0"_c;
    Float32_operator_sub_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32_operator_sub_Float32.name = "operator-"_c;
    Float32_operator_sub_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_sub_Float32.parameters = Float32_operator_sub_Float32_args;
    Symbol::Resolved(&Float32_operator_sub_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_sub_Float32)->returnTypeSymbol = &Float32Type;

    /// operator* with Float32
    Float32_operator_mul_Float32_arg0.name = "_arg0"_c;
    Float32_operator_mul_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32_operator_mul_Float32.name = "operator*"_c;
    Float32_operator_mul_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_mul_Float32.parameters = Float32_operator_mul_Float32_args;
    Symbol::Resolved(&Float32_operator_mul_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_mul_Float32)->returnTypeSymbol = &Float32Type;

    /// operator/ with Float32
    Float32_operator_div_Float32_arg0.name = "_arg0"_c;
    Float32_operator_div_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32_operator_div_Float32.name = "operator/"_c;
    Float32_operator_div_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_div_Float32.parameters = Float32_operator_div_Float32_args;
    Symbol::Resolved(&Float32_operator_div_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_div_Float32)->returnTypeSymbol = &Float32Type;

    /// operator% with Float32
    Float32_operator_mod_Float32_arg0.name = "_arg0"_c;
    Float32_operator_mod_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32_operator_mod_Float32.name = "operator%"_c;
    Float32_operator_mod_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_mod_Float32.parameters = Float32_operator_mod_Float32_args;
    Symbol::Resolved(&Float32_operator_mod_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_mod_Float32)->returnTypeSymbol = &Float32Type;

    /// operator+= with Float32
    Float32_operator_addasg_Float32_arg0.name = "_arg0"_c;
    Float32_operator_addasg_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32_operator_addasg_Float32.name = "operator+="_c;
    Float32_operator_addasg_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_addasg_Float32.parameters = Float32_operator_addasg_Float32_args;
    Symbol::Resolved(&Float32_operator_addasg_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_addasg_Float32)->returnTypeSymbol = &Float32Type;

    /// operator-= with Float32
    Float32_operator_subasg_Float32_arg0.name = "_arg0"_c;
    Float32_operator_subasg_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32_operator_subasg_Float32.name = "operator-="_c;
    Float32_operator_subasg_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_subasg_Float32.parameters = Float32_operator_subasg_Float32_args;
    Symbol::Resolved(&Float32_operator_subasg_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_subasg_Float32)->returnTypeSymbol = &Float32Type;

    /// operator*= with Float32
    Float32_operator_mulasg_Float32_arg0.name = "_arg0"_c;
    Float32_operator_mulasg_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32_operator_mulasg_Float32.name = "operator*="_c;
    Float32_operator_mulasg_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_mulasg_Float32.parameters = Float32_operator_mulasg_Float32_args;
    Symbol::Resolved(&Float32_operator_mulasg_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_mulasg_Float32)->returnTypeSymbol = &Float32Type;

    /// operator/= with Float32
    Float32_operator_divasg_Float32_arg0.name = "_arg0"_c;
    Float32_operator_divasg_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32_operator_divasg_Float32.name = "operator/="_c;
    Float32_operator_divasg_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_divasg_Float32.parameters = Float32_operator_divasg_Float32_args;
    Symbol::Resolved(&Float32_operator_divasg_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_divasg_Float32)->returnTypeSymbol = &Float32Type;

    /// operator< with Float32
    Float32_operator_lt_Float32_arg0.name = "_arg0"_c;
    Float32_operator_lt_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32_operator_lt_Float32.name = "operator<"_c;
    Float32_operator_lt_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_lt_Float32.parameters = Float32_operator_lt_Float32_args;
    Symbol::Resolved(&Float32_operator_lt_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_lt_Float32)->returnTypeSymbol = &Float32Type;

    /// operator<= with Float32
    Float32_operator_lte_Float32_arg0.name = "_arg0"_c;
    Float32_operator_lte_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32_operator_lte_Float32.name = "operator<="_c;
    Float32_operator_lte_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_lte_Float32.parameters = Float32_operator_lte_Float32_args;
    Symbol::Resolved(&Float32_operator_lte_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_lte_Float32)->returnTypeSymbol = &Float32Type;

    /// operator> with Float32
    Float32_operator_gt_Float32_arg0.name = "_arg0"_c;
    Float32_operator_gt_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32_operator_gt_Float32.name = "operator>"_c;
    Float32_operator_gt_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_gt_Float32.parameters = Float32_operator_gt_Float32_args;
    Symbol::Resolved(&Float32_operator_gt_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_gt_Float32)->returnTypeSymbol = &Float32Type;

    /// operator>= with Float32
    Float32_operator_gte_Float32_arg0.name = "_arg0"_c;
    Float32_operator_gte_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32_operator_gte_Float32.name = "operator>="_c;
    Float32_operator_gte_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_gte_Float32.parameters = Float32_operator_gte_Float32_args;
    Symbol::Resolved(&Float32_operator_gte_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_gte_Float32)->returnTypeSymbol = &Float32Type;

    /// operator== with Float32
    Float32_operator_eq_Float32_arg0.name = "_arg0"_c;
    Float32_operator_eq_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32_operator_eq_Float32.name = "operator=="_c;
    Float32_operator_eq_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_eq_Float32.parameters = Float32_operator_eq_Float32_args;
    Symbol::Resolved(&Float32_operator_eq_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_eq_Float32)->returnTypeSymbol = &Float32Type;

    /// operator!= with Float32
    Float32_operator_neq_Float32_arg0.name = "_arg0"_c;
    Float32_operator_neq_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32_operator_neq_Float32.name = "operator!="_c;
    Float32_operator_neq_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_neq_Float32.parameters = Float32_operator_neq_Float32_args;
    Symbol::Resolved(&Float32_operator_neq_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_neq_Float32)->returnTypeSymbol = &Float32Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Float32_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32_operator_add_Float32 },
    std::pair{ "operator-"_c, &Float32_operator_sub_Float32 },
    std::pair{ "operator*"_c, &Float32_operator_mul_Float32 },
    std::pair{ "operator/"_c, &Float32_operator_div_Float32 },
    std::pair{ "operator%"_c, &Float32_operator_mod_Float32 },
    std::pair{ "operator+="_c, &Float32_operator_addasg_Float32 },
    std::pair{ "operator-="_c, &Float32_operator_subasg_Float32 },
    std::pair{ "operator*="_c, &Float32_operator_mulasg_Float32 },
    std::pair{ "operator/="_c, &Float32_operator_divasg_Float32 },
    std::pair{ "operator<"_c, &Float32_operator_lt_Float32 },
    std::pair{ "operator<="_c, &Float32_operator_lte_Float32 },
    std::pair{ "operator>"_c, &Float32_operator_gt_Float32 },
    std::pair{ "operator>="_c, &Float32_operator_gte_Float32 },
    std::pair{ "operator=="_c, &Float32_operator_eq_Float32 },
    std::pair{ "operator!="_c, &Float32_operator_neq_Float32 }
    } };
}
Float32 Float32Type;

/// u32 with Float32
Variable UInt32_convert_Float32_arg0;
Function UInt32_convert_Float32;
inline constexpr std::array UInt32_convert_Float32_args = { &UInt32_convert_Float32_arg0 };

/// u32 with Int32
Variable UInt32_convert_Int32_arg0;
Function UInt32_convert_Int32;
inline constexpr std::array UInt32_convert_Int32_args = { &UInt32_convert_Int32_arg0 };

/// u32 with Float16
Variable UInt32_convert_Float16_arg0;
Function UInt32_convert_Float16;
inline constexpr std::array UInt32_convert_Float16_args = { &UInt32_convert_Float16_arg0 };

/// u32 with UInt16
Variable UInt32_convert_UInt16_arg0;
Function UInt32_convert_UInt16;
inline constexpr std::array UInt32_convert_UInt16_args = { &UInt32_convert_UInt16_arg0 };

/// u32 with Int16
Variable UInt32_convert_Int16_arg0;
Function UInt32_convert_Int16;
inline constexpr std::array UInt32_convert_Int16_args = { &UInt32_convert_Int16_arg0 };

/// u32 with UInt32
Variable UInt32_ctor0_arg0_UInt32;
Function UInt32_ctor0;
inline constexpr std::array UInt32_ctor0_args = { &UInt32_ctor0_arg0_UInt32 };

/// operator[] with Int32
Variable UInt32_operator_index_Int32_arg0;
Function UInt32_operator_index_Int32;
inline constexpr std::array UInt32_operator_index_Int32_args = { &UInt32_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable UInt32_operator_index_UInt32_arg0;
Function UInt32_operator_index_UInt32;
inline constexpr std::array UInt32_operator_index_UInt32_args = { &UInt32_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable UInt32_operator_index_Int16_arg0;
Function UInt32_operator_index_Int16;
inline constexpr std::array UInt32_operator_index_Int16_args = { &UInt32_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable UInt32_operator_index_UInt16_arg0;
Function UInt32_operator_index_UInt16;
inline constexpr std::array UInt32_operator_index_UInt16_args = { &UInt32_operator_index_UInt16_arg0 };

/// operator+ with UInt32
Variable UInt32_operator_add_UInt32_arg0;
Function UInt32_operator_add_UInt32;
inline constexpr std::array UInt32_operator_add_UInt32_args = { &UInt32_operator_add_UInt32_arg0 };

/// operator- with UInt32
Variable UInt32_operator_sub_UInt32_arg0;
Function UInt32_operator_sub_UInt32;
inline constexpr std::array UInt32_operator_sub_UInt32_args = { &UInt32_operator_sub_UInt32_arg0 };

/// operator* with UInt32
Variable UInt32_operator_mul_UInt32_arg0;
Function UInt32_operator_mul_UInt32;
inline constexpr std::array UInt32_operator_mul_UInt32_args = { &UInt32_operator_mul_UInt32_arg0 };

/// operator/ with UInt32
Variable UInt32_operator_div_UInt32_arg0;
Function UInt32_operator_div_UInt32;
inline constexpr std::array UInt32_operator_div_UInt32_args = { &UInt32_operator_div_UInt32_arg0 };

/// operator% with UInt32
Variable UInt32_operator_mod_UInt32_arg0;
Function UInt32_operator_mod_UInt32;
inline constexpr std::array UInt32_operator_mod_UInt32_args = { &UInt32_operator_mod_UInt32_arg0 };

/// operator+= with UInt32
Variable UInt32_operator_addasg_UInt32_arg0;
Function UInt32_operator_addasg_UInt32;
inline constexpr std::array UInt32_operator_addasg_UInt32_args = { &UInt32_operator_addasg_UInt32_arg0 };

/// operator-= with UInt32
Variable UInt32_operator_subasg_UInt32_arg0;
Function UInt32_operator_subasg_UInt32;
inline constexpr std::array UInt32_operator_subasg_UInt32_args = { &UInt32_operator_subasg_UInt32_arg0 };

/// operator*= with UInt32
Variable UInt32_operator_mulasg_UInt32_arg0;
Function UInt32_operator_mulasg_UInt32;
inline constexpr std::array UInt32_operator_mulasg_UInt32_args = { &UInt32_operator_mulasg_UInt32_arg0 };

/// operator/= with UInt32
Variable UInt32_operator_divasg_UInt32_arg0;
Function UInt32_operator_divasg_UInt32;
inline constexpr std::array UInt32_operator_divasg_UInt32_args = { &UInt32_operator_divasg_UInt32_arg0 };

/// operator< with UInt32
Variable UInt32_operator_lt_UInt32_arg0;
Function UInt32_operator_lt_UInt32;
inline constexpr std::array UInt32_operator_lt_UInt32_args = { &UInt32_operator_lt_UInt32_arg0 };

/// operator<= with UInt32
Variable UInt32_operator_lte_UInt32_arg0;
Function UInt32_operator_lte_UInt32;
inline constexpr std::array UInt32_operator_lte_UInt32_args = { &UInt32_operator_lte_UInt32_arg0 };

/// operator> with UInt32
Variable UInt32_operator_gt_UInt32_arg0;
Function UInt32_operator_gt_UInt32;
inline constexpr std::array UInt32_operator_gt_UInt32_args = { &UInt32_operator_gt_UInt32_arg0 };

/// operator>= with UInt32
Variable UInt32_operator_gte_UInt32_arg0;
Function UInt32_operator_gte_UInt32;
inline constexpr std::array UInt32_operator_gte_UInt32_args = { &UInt32_operator_gte_UInt32_arg0 };

/// operator== with UInt32
Variable UInt32_operator_eq_UInt32_arg0;
Function UInt32_operator_eq_UInt32;
inline constexpr std::array UInt32_operator_eq_UInt32_args = { &UInt32_operator_eq_UInt32_arg0 };

/// operator!= with UInt32
Variable UInt32_operator_neq_UInt32_arg0;
Function UInt32_operator_neq_UInt32;
inline constexpr std::array UInt32_operator_neq_UInt32_args = { &UInt32_operator_neq_UInt32_arg0 };

/// operator| with UInt32
Variable UInt32_operator_or_UInt32_arg0;
Function UInt32_operator_or_UInt32;
inline constexpr std::array UInt32_operator_or_UInt32_args = { &UInt32_operator_or_UInt32_arg0 };

/// operator& with UInt32
Variable UInt32_operator_and_UInt32_arg0;
Function UInt32_operator_and_UInt32;
inline constexpr std::array UInt32_operator_and_UInt32_args = { &UInt32_operator_and_UInt32_arg0 };

/// operator^ with UInt32
Variable UInt32_operator_xor_UInt32_arg0;
Function UInt32_operator_xor_UInt32;
inline constexpr std::array UInt32_operator_xor_UInt32_args = { &UInt32_operator_xor_UInt32_arg0 };

/// operator<< with UInt32
Variable UInt32_operator_lsh_UInt32_arg0;
Function UInt32_operator_lsh_UInt32;
inline constexpr std::array UInt32_operator_lsh_UInt32_args = { &UInt32_operator_lsh_UInt32_arg0 };

/// operator>> with UInt32
Variable UInt32_operator_rsh_UInt32_arg0;
Function UInt32_operator_rsh_UInt32;
inline constexpr std::array UInt32_operator_rsh_UInt32_args = { &UInt32_operator_rsh_UInt32_arg0 };

/// operator|= with UInt32
Variable UInt32_operator_orasg_UInt32_arg0;
Function UInt32_operator_orasg_UInt32;
inline constexpr std::array UInt32_operator_orasg_UInt32_args = { &UInt32_operator_orasg_UInt32_arg0 };

/// operator&= with UInt32
Variable UInt32_operator_andasg_UInt32_arg0;
Function UInt32_operator_andasg_UInt32;
inline constexpr std::array UInt32_operator_andasg_UInt32_args = { &UInt32_operator_andasg_UInt32_arg0 };

/// operator^= with UInt32
Variable UInt32_operator_xorasg_UInt32_arg0;
Function UInt32_operator_xorasg_UInt32;
inline constexpr std::array UInt32_operator_xorasg_UInt32_args = { &UInt32_operator_xorasg_UInt32_arg0 };

/// operator<<= with UInt32
Variable UInt32_operator_lshasg_UInt32_arg0;
Function UInt32_operator_lshasg_UInt32;
inline constexpr std::array UInt32_operator_lshasg_UInt32_args = { &UInt32_operator_lshasg_UInt32_arg0 };

/// operator>>= with UInt32
Variable UInt32_operator_rhsasg_UInt32_arg0;
Function UInt32_operator_rhsasg_UInt32;
inline constexpr std::array UInt32_operator_rhsasg_UInt32_args = { &UInt32_operator_rhsasg_UInt32_arg0 };

UInt32::UInt32()
{
    this->name = "u32";
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    /// u32 with Float32
    UInt32_convert_Float32_arg0.name = "val"_c;
    UInt32_convert_Float32_arg0.type = Type::FullType{ Float32Type.name };
    UInt32_convert_Float32.documentation = "Convert f32 to u32"_c;
    UInt32_convert_Float32.name = "u32"_c;
    UInt32_convert_Float32.returnType = Type::FullType { UInt32Type.name };
    UInt32_convert_Float32.parameters = UInt32_convert_Float32_args;
    Symbol::Resolved(&UInt32_convert_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32_convert_Float32)->returnTypeSymbol = &UInt32Type;

    /// u32 with Int32
    UInt32_convert_Int32_arg0.name = "val"_c;
    UInt32_convert_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt32_convert_Int32.documentation = "Convert i32 to u32"_c;
    UInt32_convert_Int32.name = "u32"_c;
    UInt32_convert_Int32.returnType = Type::FullType { UInt32Type.name };
    UInt32_convert_Int32.parameters = UInt32_convert_Int32_args;
    Symbol::Resolved(&UInt32_convert_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32_convert_Int32)->returnTypeSymbol = &UInt32Type;

    /// u32 with Float16
    UInt32_convert_Float16_arg0.name = "val"_c;
    UInt32_convert_Float16_arg0.type = Type::FullType{ Float16Type.name };
    UInt32_convert_Float16.documentation = "Convert f16 to u32"_c;
    UInt32_convert_Float16.name = "u32"_c;
    UInt32_convert_Float16.returnType = Type::FullType { UInt32Type.name };
    UInt32_convert_Float16.parameters = UInt32_convert_Float16_args;
    Symbol::Resolved(&UInt32_convert_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt32_convert_Float16)->returnTypeSymbol = &UInt32Type;

    /// u32 with UInt16
    UInt32_convert_UInt16_arg0.name = "val"_c;
    UInt32_convert_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt32_convert_UInt16.documentation = "Convert u16 to u32"_c;
    UInt32_convert_UInt16.name = "u32"_c;
    UInt32_convert_UInt16.returnType = Type::FullType { UInt32Type.name };
    UInt32_convert_UInt16.parameters = UInt32_convert_UInt16_args;
    Symbol::Resolved(&UInt32_convert_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32_convert_UInt16)->returnTypeSymbol = &UInt32Type;

    /// u32 with Int16
    UInt32_convert_Int16_arg0.name = "val"_c;
    UInt32_convert_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt32_convert_Int16.documentation = "Convert i16 to u32"_c;
    UInt32_convert_Int16.name = "u32"_c;
    UInt32_convert_Int16.returnType = Type::FullType { UInt32Type.name };
    UInt32_convert_Int16.parameters = UInt32_convert_Int16_args;
    Symbol::Resolved(&UInt32_convert_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32_convert_Int16)->returnTypeSymbol = &UInt32Type;

    /// u32 with UInt32
    UInt32_ctor0_arg0_UInt32.name = "_arg0"_c;
    UInt32_ctor0_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32_ctor0.name = "u32"_c;
    UInt32_ctor0.returnType = Type::FullType { UInt32Type.name };
    UInt32_ctor0.parameters = UInt32_ctor0_args;
    Symbol::Resolved(&UInt32_ctor0_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_ctor0)->returnTypeSymbol = &UInt32Type;

    /// operator[] with Int32
    UInt32_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt32_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt32_operator_index_Int32.name = "operator[]"_c;
    UInt32_operator_index_Int32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_index_Int32.parameters = UInt32_operator_index_Int32_args;
    Symbol::Resolved(&UInt32_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt32
    UInt32_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_index_UInt32.name = "operator[]"_c;
    UInt32_operator_index_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_index_UInt32.parameters = UInt32_operator_index_UInt32_args;
    Symbol::Resolved(&UInt32_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with Int16
    UInt32_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt32_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt32_operator_index_Int16.name = "operator[]"_c;
    UInt32_operator_index_Int16.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_index_Int16.parameters = UInt32_operator_index_Int16_args;
    Symbol::Resolved(&UInt32_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt16
    UInt32_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt32_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt32_operator_index_UInt16.name = "operator[]"_c;
    UInt32_operator_index_UInt16.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_index_UInt16.parameters = UInt32_operator_index_UInt16_args;
    Symbol::Resolved(&UInt32_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    /// operator+ with UInt32
    UInt32_operator_add_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_add_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_add_UInt32.name = "operator+"_c;
    UInt32_operator_add_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_add_UInt32.parameters = UInt32_operator_add_UInt32_args;
    Symbol::Resolved(&UInt32_operator_add_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_add_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator- with UInt32
    UInt32_operator_sub_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_sub_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_sub_UInt32.name = "operator-"_c;
    UInt32_operator_sub_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_sub_UInt32.parameters = UInt32_operator_sub_UInt32_args;
    Symbol::Resolved(&UInt32_operator_sub_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_sub_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator* with UInt32
    UInt32_operator_mul_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_mul_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_mul_UInt32.name = "operator*"_c;
    UInt32_operator_mul_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_mul_UInt32.parameters = UInt32_operator_mul_UInt32_args;
    Symbol::Resolved(&UInt32_operator_mul_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_mul_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator/ with UInt32
    UInt32_operator_div_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_div_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_div_UInt32.name = "operator/"_c;
    UInt32_operator_div_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_div_UInt32.parameters = UInt32_operator_div_UInt32_args;
    Symbol::Resolved(&UInt32_operator_div_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_div_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator% with UInt32
    UInt32_operator_mod_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_mod_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_mod_UInt32.name = "operator%"_c;
    UInt32_operator_mod_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_mod_UInt32.parameters = UInt32_operator_mod_UInt32_args;
    Symbol::Resolved(&UInt32_operator_mod_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_mod_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator+= with UInt32
    UInt32_operator_addasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_addasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_addasg_UInt32.name = "operator+="_c;
    UInt32_operator_addasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_addasg_UInt32.parameters = UInt32_operator_addasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_addasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_addasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator-= with UInt32
    UInt32_operator_subasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_subasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_subasg_UInt32.name = "operator-="_c;
    UInt32_operator_subasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_subasg_UInt32.parameters = UInt32_operator_subasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_subasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_subasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator*= with UInt32
    UInt32_operator_mulasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_mulasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_mulasg_UInt32.name = "operator*="_c;
    UInt32_operator_mulasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_mulasg_UInt32.parameters = UInt32_operator_mulasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_mulasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_mulasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator/= with UInt32
    UInt32_operator_divasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_divasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_divasg_UInt32.name = "operator/="_c;
    UInt32_operator_divasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_divasg_UInt32.parameters = UInt32_operator_divasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_divasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_divasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator< with UInt32
    UInt32_operator_lt_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_lt_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_lt_UInt32.name = "operator<"_c;
    UInt32_operator_lt_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_lt_UInt32.parameters = UInt32_operator_lt_UInt32_args;
    Symbol::Resolved(&UInt32_operator_lt_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_lt_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator<= with UInt32
    UInt32_operator_lte_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_lte_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_lte_UInt32.name = "operator<="_c;
    UInt32_operator_lte_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_lte_UInt32.parameters = UInt32_operator_lte_UInt32_args;
    Symbol::Resolved(&UInt32_operator_lte_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_lte_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator> with UInt32
    UInt32_operator_gt_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_gt_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_gt_UInt32.name = "operator>"_c;
    UInt32_operator_gt_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_gt_UInt32.parameters = UInt32_operator_gt_UInt32_args;
    Symbol::Resolved(&UInt32_operator_gt_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_gt_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator>= with UInt32
    UInt32_operator_gte_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_gte_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_gte_UInt32.name = "operator>="_c;
    UInt32_operator_gte_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_gte_UInt32.parameters = UInt32_operator_gte_UInt32_args;
    Symbol::Resolved(&UInt32_operator_gte_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_gte_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator== with UInt32
    UInt32_operator_eq_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_eq_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_eq_UInt32.name = "operator=="_c;
    UInt32_operator_eq_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_eq_UInt32.parameters = UInt32_operator_eq_UInt32_args;
    Symbol::Resolved(&UInt32_operator_eq_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_eq_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator!= with UInt32
    UInt32_operator_neq_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_neq_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_neq_UInt32.name = "operator!="_c;
    UInt32_operator_neq_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_neq_UInt32.parameters = UInt32_operator_neq_UInt32_args;
    Symbol::Resolved(&UInt32_operator_neq_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_neq_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator| with UInt32
    UInt32_operator_or_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_or_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_or_UInt32.name = "operator|"_c;
    UInt32_operator_or_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_or_UInt32.parameters = UInt32_operator_or_UInt32_args;
    Symbol::Resolved(&UInt32_operator_or_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_or_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator& with UInt32
    UInt32_operator_and_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_and_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_and_UInt32.name = "operator&"_c;
    UInt32_operator_and_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_and_UInt32.parameters = UInt32_operator_and_UInt32_args;
    Symbol::Resolved(&UInt32_operator_and_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_and_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator^ with UInt32
    UInt32_operator_xor_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_xor_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_xor_UInt32.name = "operator^"_c;
    UInt32_operator_xor_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_xor_UInt32.parameters = UInt32_operator_xor_UInt32_args;
    Symbol::Resolved(&UInt32_operator_xor_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_xor_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator<< with UInt32
    UInt32_operator_lsh_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_lsh_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_lsh_UInt32.name = "operator<<"_c;
    UInt32_operator_lsh_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_lsh_UInt32.parameters = UInt32_operator_lsh_UInt32_args;
    Symbol::Resolved(&UInt32_operator_lsh_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_lsh_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator>> with UInt32
    UInt32_operator_rsh_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_rsh_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_rsh_UInt32.name = "operator>>"_c;
    UInt32_operator_rsh_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_rsh_UInt32.parameters = UInt32_operator_rsh_UInt32_args;
    Symbol::Resolved(&UInt32_operator_rsh_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_rsh_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator|= with UInt32
    UInt32_operator_orasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_orasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_orasg_UInt32.name = "operator|="_c;
    UInt32_operator_orasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_orasg_UInt32.parameters = UInt32_operator_orasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_orasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_orasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator&= with UInt32
    UInt32_operator_andasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_andasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_andasg_UInt32.name = "operator&="_c;
    UInt32_operator_andasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_andasg_UInt32.parameters = UInt32_operator_andasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_andasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_andasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator^= with UInt32
    UInt32_operator_xorasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_xorasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_xorasg_UInt32.name = "operator^="_c;
    UInt32_operator_xorasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_xorasg_UInt32.parameters = UInt32_operator_xorasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_xorasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_xorasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator<<= with UInt32
    UInt32_operator_lshasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_lshasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_lshasg_UInt32.name = "operator<<="_c;
    UInt32_operator_lshasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_lshasg_UInt32.parameters = UInt32_operator_lshasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_lshasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_lshasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator>>= with UInt32
    UInt32_operator_rhsasg_UInt32_arg0.name = "_arg0"_c;
    UInt32_operator_rhsasg_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_rhsasg_UInt32.name = "operator>>="_c;
    UInt32_operator_rhsasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_rhsasg_UInt32.parameters = UInt32_operator_rhsasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_rhsasg_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_rhsasg_UInt32)->returnTypeSymbol = &UInt32Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &UInt32_operator_index_Int32 },
    std::pair{ "operator[]"_c, &UInt32_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &UInt32_operator_index_Int16 },
    std::pair{ "operator[]"_c, &UInt32_operator_index_UInt16 },
    std::pair{ "operator+"_c, &UInt32_operator_add_UInt32 },
    std::pair{ "operator-"_c, &UInt32_operator_sub_UInt32 },
    std::pair{ "operator*"_c, &UInt32_operator_mul_UInt32 },
    std::pair{ "operator/"_c, &UInt32_operator_div_UInt32 },
    std::pair{ "operator%"_c, &UInt32_operator_mod_UInt32 },
    std::pair{ "operator+="_c, &UInt32_operator_addasg_UInt32 },
    std::pair{ "operator-="_c, &UInt32_operator_subasg_UInt32 },
    std::pair{ "operator*="_c, &UInt32_operator_mulasg_UInt32 },
    std::pair{ "operator/="_c, &UInt32_operator_divasg_UInt32 },
    std::pair{ "operator<"_c, &UInt32_operator_lt_UInt32 },
    std::pair{ "operator<="_c, &UInt32_operator_lte_UInt32 },
    std::pair{ "operator>"_c, &UInt32_operator_gt_UInt32 },
    std::pair{ "operator>="_c, &UInt32_operator_gte_UInt32 },
    std::pair{ "operator=="_c, &UInt32_operator_eq_UInt32 },
    std::pair{ "operator!="_c, &UInt32_operator_neq_UInt32 },
    std::pair{ "operator|"_c, &UInt32_operator_or_UInt32 },
    std::pair{ "operator&"_c, &UInt32_operator_and_UInt32 },
    std::pair{ "operator^"_c, &UInt32_operator_xor_UInt32 },
    std::pair{ "operator<<"_c, &UInt32_operator_lsh_UInt32 },
    std::pair{ "operator>>"_c, &UInt32_operator_rsh_UInt32 },
    std::pair{ "operator|="_c, &UInt32_operator_orasg_UInt32 },
    std::pair{ "operator&="_c, &UInt32_operator_andasg_UInt32 },
    std::pair{ "operator^="_c, &UInt32_operator_xorasg_UInt32 },
    std::pair{ "operator<<="_c, &UInt32_operator_lshasg_UInt32 },
    std::pair{ "operator>>="_c, &UInt32_operator_rhsasg_UInt32 }
    } };
}
UInt32 UInt32Type;

/// i32 with Float32
Variable Int32_convert_Float32_arg0;
Function Int32_convert_Float32;
inline constexpr std::array Int32_convert_Float32_args = { &Int32_convert_Float32_arg0 };

/// i32 with UInt32
Variable Int32_convert_UInt32_arg0;
Function Int32_convert_UInt32;
inline constexpr std::array Int32_convert_UInt32_args = { &Int32_convert_UInt32_arg0 };

/// i32 with Float16
Variable Int32_convert_Float16_arg0;
Function Int32_convert_Float16;
inline constexpr std::array Int32_convert_Float16_args = { &Int32_convert_Float16_arg0 };

/// i32 with UInt16
Variable Int32_convert_UInt16_arg0;
Function Int32_convert_UInt16;
inline constexpr std::array Int32_convert_UInt16_args = { &Int32_convert_UInt16_arg0 };

/// i32 with Int16
Variable Int32_convert_Int16_arg0;
Function Int32_convert_Int16;
inline constexpr std::array Int32_convert_Int16_args = { &Int32_convert_Int16_arg0 };

/// i32 with Int32
Variable Int32_ctor0_arg0_Int32;
Function Int32_ctor0;
inline constexpr std::array Int32_ctor0_args = { &Int32_ctor0_arg0_Int32 };

/// operator[] with Int32
Variable Int32_operator_index_Int32_arg0;
Function Int32_operator_index_Int32;
inline constexpr std::array Int32_operator_index_Int32_args = { &Int32_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Int32_operator_index_UInt32_arg0;
Function Int32_operator_index_UInt32;
inline constexpr std::array Int32_operator_index_UInt32_args = { &Int32_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Int32_operator_index_Int16_arg0;
Function Int32_operator_index_Int16;
inline constexpr std::array Int32_operator_index_Int16_args = { &Int32_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Int32_operator_index_UInt16_arg0;
Function Int32_operator_index_UInt16;
inline constexpr std::array Int32_operator_index_UInt16_args = { &Int32_operator_index_UInt16_arg0 };

/// operator+ with Int32
Variable Int32_operator_add_Int32_arg0;
Function Int32_operator_add_Int32;
inline constexpr std::array Int32_operator_add_Int32_args = { &Int32_operator_add_Int32_arg0 };

/// operator- with Int32
Variable Int32_operator_sub_Int32_arg0;
Function Int32_operator_sub_Int32;
inline constexpr std::array Int32_operator_sub_Int32_args = { &Int32_operator_sub_Int32_arg0 };

/// operator* with Int32
Variable Int32_operator_mul_Int32_arg0;
Function Int32_operator_mul_Int32;
inline constexpr std::array Int32_operator_mul_Int32_args = { &Int32_operator_mul_Int32_arg0 };

/// operator/ with Int32
Variable Int32_operator_div_Int32_arg0;
Function Int32_operator_div_Int32;
inline constexpr std::array Int32_operator_div_Int32_args = { &Int32_operator_div_Int32_arg0 };

/// operator% with Int32
Variable Int32_operator_mod_Int32_arg0;
Function Int32_operator_mod_Int32;
inline constexpr std::array Int32_operator_mod_Int32_args = { &Int32_operator_mod_Int32_arg0 };

/// operator+= with Int32
Variable Int32_operator_addasg_Int32_arg0;
Function Int32_operator_addasg_Int32;
inline constexpr std::array Int32_operator_addasg_Int32_args = { &Int32_operator_addasg_Int32_arg0 };

/// operator-= with Int32
Variable Int32_operator_subasg_Int32_arg0;
Function Int32_operator_subasg_Int32;
inline constexpr std::array Int32_operator_subasg_Int32_args = { &Int32_operator_subasg_Int32_arg0 };

/// operator*= with Int32
Variable Int32_operator_mulasg_Int32_arg0;
Function Int32_operator_mulasg_Int32;
inline constexpr std::array Int32_operator_mulasg_Int32_args = { &Int32_operator_mulasg_Int32_arg0 };

/// operator/= with Int32
Variable Int32_operator_divasg_Int32_arg0;
Function Int32_operator_divasg_Int32;
inline constexpr std::array Int32_operator_divasg_Int32_args = { &Int32_operator_divasg_Int32_arg0 };

/// operator< with Int32
Variable Int32_operator_lt_Int32_arg0;
Function Int32_operator_lt_Int32;
inline constexpr std::array Int32_operator_lt_Int32_args = { &Int32_operator_lt_Int32_arg0 };

/// operator<= with Int32
Variable Int32_operator_lte_Int32_arg0;
Function Int32_operator_lte_Int32;
inline constexpr std::array Int32_operator_lte_Int32_args = { &Int32_operator_lte_Int32_arg0 };

/// operator> with Int32
Variable Int32_operator_gt_Int32_arg0;
Function Int32_operator_gt_Int32;
inline constexpr std::array Int32_operator_gt_Int32_args = { &Int32_operator_gt_Int32_arg0 };

/// operator>= with Int32
Variable Int32_operator_gte_Int32_arg0;
Function Int32_operator_gte_Int32;
inline constexpr std::array Int32_operator_gte_Int32_args = { &Int32_operator_gte_Int32_arg0 };

/// operator== with Int32
Variable Int32_operator_eq_Int32_arg0;
Function Int32_operator_eq_Int32;
inline constexpr std::array Int32_operator_eq_Int32_args = { &Int32_operator_eq_Int32_arg0 };

/// operator!= with Int32
Variable Int32_operator_neq_Int32_arg0;
Function Int32_operator_neq_Int32;
inline constexpr std::array Int32_operator_neq_Int32_args = { &Int32_operator_neq_Int32_arg0 };

/// operator| with Int32
Variable Int32_operator_or_Int32_arg0;
Function Int32_operator_or_Int32;
inline constexpr std::array Int32_operator_or_Int32_args = { &Int32_operator_or_Int32_arg0 };

/// operator& with Int32
Variable Int32_operator_and_Int32_arg0;
Function Int32_operator_and_Int32;
inline constexpr std::array Int32_operator_and_Int32_args = { &Int32_operator_and_Int32_arg0 };

/// operator^ with Int32
Variable Int32_operator_xor_Int32_arg0;
Function Int32_operator_xor_Int32;
inline constexpr std::array Int32_operator_xor_Int32_args = { &Int32_operator_xor_Int32_arg0 };

/// operator<< with Int32
Variable Int32_operator_lsh_Int32_arg0;
Function Int32_operator_lsh_Int32;
inline constexpr std::array Int32_operator_lsh_Int32_args = { &Int32_operator_lsh_Int32_arg0 };

/// operator>> with Int32
Variable Int32_operator_rsh_Int32_arg0;
Function Int32_operator_rsh_Int32;
inline constexpr std::array Int32_operator_rsh_Int32_args = { &Int32_operator_rsh_Int32_arg0 };

/// operator|= with Int32
Variable Int32_operator_orasg_Int32_arg0;
Function Int32_operator_orasg_Int32;
inline constexpr std::array Int32_operator_orasg_Int32_args = { &Int32_operator_orasg_Int32_arg0 };

/// operator&= with Int32
Variable Int32_operator_andasg_Int32_arg0;
Function Int32_operator_andasg_Int32;
inline constexpr std::array Int32_operator_andasg_Int32_args = { &Int32_operator_andasg_Int32_arg0 };

/// operator^= with Int32
Variable Int32_operator_xorasg_Int32_arg0;
Function Int32_operator_xorasg_Int32;
inline constexpr std::array Int32_operator_xorasg_Int32_args = { &Int32_operator_xorasg_Int32_arg0 };

/// operator<<= with Int32
Variable Int32_operator_lshasg_Int32_arg0;
Function Int32_operator_lshasg_Int32;
inline constexpr std::array Int32_operator_lshasg_Int32_args = { &Int32_operator_lshasg_Int32_arg0 };

/// operator>>= with Int32
Variable Int32_operator_rhsasg_Int32_arg0;
Function Int32_operator_rhsasg_Int32;
inline constexpr std::array Int32_operator_rhsasg_Int32_args = { &Int32_operator_rhsasg_Int32_arg0 };

Int32::Int32()
{
    this->name = "i32";
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    /// i32 with Float32
    Int32_convert_Float32_arg0.name = "val"_c;
    Int32_convert_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Int32_convert_Float32.documentation = "Convert f32 to i32"_c;
    Int32_convert_Float32.name = "i32"_c;
    Int32_convert_Float32.returnType = Type::FullType { Int32Type.name };
    Int32_convert_Float32.parameters = Int32_convert_Float32_args;
    Symbol::Resolved(&Int32_convert_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32_convert_Float32)->returnTypeSymbol = &Int32Type;

    /// i32 with UInt32
    Int32_convert_UInt32_arg0.name = "val"_c;
    Int32_convert_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int32_convert_UInt32.documentation = "Convert u32 to i32"_c;
    Int32_convert_UInt32.name = "i32"_c;
    Int32_convert_UInt32.returnType = Type::FullType { Int32Type.name };
    Int32_convert_UInt32.parameters = Int32_convert_UInt32_args;
    Symbol::Resolved(&Int32_convert_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32_convert_UInt32)->returnTypeSymbol = &Int32Type;

    /// i32 with Float16
    Int32_convert_Float16_arg0.name = "val"_c;
    Int32_convert_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Int32_convert_Float16.documentation = "Convert f16 to i32"_c;
    Int32_convert_Float16.name = "i32"_c;
    Int32_convert_Float16.returnType = Type::FullType { Int32Type.name };
    Int32_convert_Float16.parameters = Int32_convert_Float16_args;
    Symbol::Resolved(&Int32_convert_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int32_convert_Float16)->returnTypeSymbol = &Int32Type;

    /// i32 with UInt16
    Int32_convert_UInt16_arg0.name = "val"_c;
    Int32_convert_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int32_convert_UInt16.documentation = "Convert u16 to i32"_c;
    Int32_convert_UInt16.name = "i32"_c;
    Int32_convert_UInt16.returnType = Type::FullType { Int32Type.name };
    Int32_convert_UInt16.parameters = Int32_convert_UInt16_args;
    Symbol::Resolved(&Int32_convert_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32_convert_UInt16)->returnTypeSymbol = &Int32Type;

    /// i32 with Int16
    Int32_convert_Int16_arg0.name = "val"_c;
    Int32_convert_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int32_convert_Int16.documentation = "Convert i16 to i32"_c;
    Int32_convert_Int16.name = "i32"_c;
    Int32_convert_Int16.returnType = Type::FullType { Int32Type.name };
    Int32_convert_Int16.parameters = Int32_convert_Int16_args;
    Symbol::Resolved(&Int32_convert_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32_convert_Int16)->returnTypeSymbol = &Int32Type;

    /// i32 with Int32
    Int32_ctor0_arg0_Int32.name = "_arg0"_c;
    Int32_ctor0_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32_ctor0.name = "i32"_c;
    Int32_ctor0.returnType = Type::FullType { Int32Type.name };
    Int32_ctor0.parameters = Int32_ctor0_args;
    Symbol::Resolved(&Int32_ctor0_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_ctor0)->returnTypeSymbol = &Int32Type;

    /// operator[] with Int32
    Int32_operator_index_Int32_arg0.name = "_arg0"_c;
    Int32_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_index_Int32.name = "operator[]"_c;
    Int32_operator_index_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_index_Int32.parameters = Int32_operator_index_Int32_args;
    Symbol::Resolved(&Int32_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt32
    Int32_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int32_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int32_operator_index_UInt32.name = "operator[]"_c;
    Int32_operator_index_UInt32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_index_UInt32.parameters = Int32_operator_index_UInt32_args;
    Symbol::Resolved(&Int32_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    /// operator[] with Int16
    Int32_operator_index_Int16_arg0.name = "_arg0"_c;
    Int32_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int32_operator_index_Int16.name = "operator[]"_c;
    Int32_operator_index_Int16.returnType = Type::FullType { Int32Type.name };
    Int32_operator_index_Int16.parameters = Int32_operator_index_Int16_args;
    Symbol::Resolved(&Int32_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt16
    Int32_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int32_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int32_operator_index_UInt16.name = "operator[]"_c;
    Int32_operator_index_UInt16.returnType = Type::FullType { Int32Type.name };
    Int32_operator_index_UInt16.parameters = Int32_operator_index_UInt16_args;
    Symbol::Resolved(&Int32_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    /// operator+ with Int32
    Int32_operator_add_Int32_arg0.name = "_arg0"_c;
    Int32_operator_add_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_add_Int32.name = "operator+"_c;
    Int32_operator_add_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_add_Int32.parameters = Int32_operator_add_Int32_args;
    Symbol::Resolved(&Int32_operator_add_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_add_Int32)->returnTypeSymbol = &Int32Type;

    /// operator- with Int32
    Int32_operator_sub_Int32_arg0.name = "_arg0"_c;
    Int32_operator_sub_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_sub_Int32.name = "operator-"_c;
    Int32_operator_sub_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_sub_Int32.parameters = Int32_operator_sub_Int32_args;
    Symbol::Resolved(&Int32_operator_sub_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_sub_Int32)->returnTypeSymbol = &Int32Type;

    /// operator* with Int32
    Int32_operator_mul_Int32_arg0.name = "_arg0"_c;
    Int32_operator_mul_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_mul_Int32.name = "operator*"_c;
    Int32_operator_mul_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_mul_Int32.parameters = Int32_operator_mul_Int32_args;
    Symbol::Resolved(&Int32_operator_mul_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_mul_Int32)->returnTypeSymbol = &Int32Type;

    /// operator/ with Int32
    Int32_operator_div_Int32_arg0.name = "_arg0"_c;
    Int32_operator_div_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_div_Int32.name = "operator/"_c;
    Int32_operator_div_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_div_Int32.parameters = Int32_operator_div_Int32_args;
    Symbol::Resolved(&Int32_operator_div_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_div_Int32)->returnTypeSymbol = &Int32Type;

    /// operator% with Int32
    Int32_operator_mod_Int32_arg0.name = "_arg0"_c;
    Int32_operator_mod_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_mod_Int32.name = "operator%"_c;
    Int32_operator_mod_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_mod_Int32.parameters = Int32_operator_mod_Int32_args;
    Symbol::Resolved(&Int32_operator_mod_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_mod_Int32)->returnTypeSymbol = &Int32Type;

    /// operator+= with Int32
    Int32_operator_addasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_addasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_addasg_Int32.name = "operator+="_c;
    Int32_operator_addasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_addasg_Int32.parameters = Int32_operator_addasg_Int32_args;
    Symbol::Resolved(&Int32_operator_addasg_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_addasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator-= with Int32
    Int32_operator_subasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_subasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_subasg_Int32.name = "operator-="_c;
    Int32_operator_subasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_subasg_Int32.parameters = Int32_operator_subasg_Int32_args;
    Symbol::Resolved(&Int32_operator_subasg_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_subasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator*= with Int32
    Int32_operator_mulasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_mulasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_mulasg_Int32.name = "operator*="_c;
    Int32_operator_mulasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_mulasg_Int32.parameters = Int32_operator_mulasg_Int32_args;
    Symbol::Resolved(&Int32_operator_mulasg_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_mulasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator/= with Int32
    Int32_operator_divasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_divasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_divasg_Int32.name = "operator/="_c;
    Int32_operator_divasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_divasg_Int32.parameters = Int32_operator_divasg_Int32_args;
    Symbol::Resolved(&Int32_operator_divasg_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_divasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator< with Int32
    Int32_operator_lt_Int32_arg0.name = "_arg0"_c;
    Int32_operator_lt_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_lt_Int32.name = "operator<"_c;
    Int32_operator_lt_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_lt_Int32.parameters = Int32_operator_lt_Int32_args;
    Symbol::Resolved(&Int32_operator_lt_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_lt_Int32)->returnTypeSymbol = &Int32Type;

    /// operator<= with Int32
    Int32_operator_lte_Int32_arg0.name = "_arg0"_c;
    Int32_operator_lte_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_lte_Int32.name = "operator<="_c;
    Int32_operator_lte_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_lte_Int32.parameters = Int32_operator_lte_Int32_args;
    Symbol::Resolved(&Int32_operator_lte_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_lte_Int32)->returnTypeSymbol = &Int32Type;

    /// operator> with Int32
    Int32_operator_gt_Int32_arg0.name = "_arg0"_c;
    Int32_operator_gt_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_gt_Int32.name = "operator>"_c;
    Int32_operator_gt_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_gt_Int32.parameters = Int32_operator_gt_Int32_args;
    Symbol::Resolved(&Int32_operator_gt_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_gt_Int32)->returnTypeSymbol = &Int32Type;

    /// operator>= with Int32
    Int32_operator_gte_Int32_arg0.name = "_arg0"_c;
    Int32_operator_gte_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_gte_Int32.name = "operator>="_c;
    Int32_operator_gte_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_gte_Int32.parameters = Int32_operator_gte_Int32_args;
    Symbol::Resolved(&Int32_operator_gte_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_gte_Int32)->returnTypeSymbol = &Int32Type;

    /// operator== with Int32
    Int32_operator_eq_Int32_arg0.name = "_arg0"_c;
    Int32_operator_eq_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_eq_Int32.name = "operator=="_c;
    Int32_operator_eq_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_eq_Int32.parameters = Int32_operator_eq_Int32_args;
    Symbol::Resolved(&Int32_operator_eq_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_eq_Int32)->returnTypeSymbol = &Int32Type;

    /// operator!= with Int32
    Int32_operator_neq_Int32_arg0.name = "_arg0"_c;
    Int32_operator_neq_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_neq_Int32.name = "operator!="_c;
    Int32_operator_neq_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_neq_Int32.parameters = Int32_operator_neq_Int32_args;
    Symbol::Resolved(&Int32_operator_neq_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_neq_Int32)->returnTypeSymbol = &Int32Type;

    /// operator| with Int32
    Int32_operator_or_Int32_arg0.name = "_arg0"_c;
    Int32_operator_or_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_or_Int32.name = "operator|"_c;
    Int32_operator_or_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_or_Int32.parameters = Int32_operator_or_Int32_args;
    Symbol::Resolved(&Int32_operator_or_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_or_Int32)->returnTypeSymbol = &Int32Type;

    /// operator& with Int32
    Int32_operator_and_Int32_arg0.name = "_arg0"_c;
    Int32_operator_and_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_and_Int32.name = "operator&"_c;
    Int32_operator_and_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_and_Int32.parameters = Int32_operator_and_Int32_args;
    Symbol::Resolved(&Int32_operator_and_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_and_Int32)->returnTypeSymbol = &Int32Type;

    /// operator^ with Int32
    Int32_operator_xor_Int32_arg0.name = "_arg0"_c;
    Int32_operator_xor_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_xor_Int32.name = "operator^"_c;
    Int32_operator_xor_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_xor_Int32.parameters = Int32_operator_xor_Int32_args;
    Symbol::Resolved(&Int32_operator_xor_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_xor_Int32)->returnTypeSymbol = &Int32Type;

    /// operator<< with Int32
    Int32_operator_lsh_Int32_arg0.name = "_arg0"_c;
    Int32_operator_lsh_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_lsh_Int32.name = "operator<<"_c;
    Int32_operator_lsh_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_lsh_Int32.parameters = Int32_operator_lsh_Int32_args;
    Symbol::Resolved(&Int32_operator_lsh_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_lsh_Int32)->returnTypeSymbol = &Int32Type;

    /// operator>> with Int32
    Int32_operator_rsh_Int32_arg0.name = "_arg0"_c;
    Int32_operator_rsh_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_rsh_Int32.name = "operator>>"_c;
    Int32_operator_rsh_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_rsh_Int32.parameters = Int32_operator_rsh_Int32_args;
    Symbol::Resolved(&Int32_operator_rsh_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_rsh_Int32)->returnTypeSymbol = &Int32Type;

    /// operator|= with Int32
    Int32_operator_orasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_orasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_orasg_Int32.name = "operator|="_c;
    Int32_operator_orasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_orasg_Int32.parameters = Int32_operator_orasg_Int32_args;
    Symbol::Resolved(&Int32_operator_orasg_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_orasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator&= with Int32
    Int32_operator_andasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_andasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_andasg_Int32.name = "operator&="_c;
    Int32_operator_andasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_andasg_Int32.parameters = Int32_operator_andasg_Int32_args;
    Symbol::Resolved(&Int32_operator_andasg_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_andasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator^= with Int32
    Int32_operator_xorasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_xorasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_xorasg_Int32.name = "operator^="_c;
    Int32_operator_xorasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_xorasg_Int32.parameters = Int32_operator_xorasg_Int32_args;
    Symbol::Resolved(&Int32_operator_xorasg_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_xorasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator<<= with Int32
    Int32_operator_lshasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_lshasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_lshasg_Int32.name = "operator<<="_c;
    Int32_operator_lshasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_lshasg_Int32.parameters = Int32_operator_lshasg_Int32_args;
    Symbol::Resolved(&Int32_operator_lshasg_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_lshasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator>>= with Int32
    Int32_operator_rhsasg_Int32_arg0.name = "_arg0"_c;
    Int32_operator_rhsasg_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32_operator_rhsasg_Int32.name = "operator>>="_c;
    Int32_operator_rhsasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_rhsasg_Int32.parameters = Int32_operator_rhsasg_Int32_args;
    Symbol::Resolved(&Int32_operator_rhsasg_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_rhsasg_Int32)->returnTypeSymbol = &Int32Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Int32_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int32_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int32_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int32_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int32_operator_add_Int32 },
    std::pair{ "operator-"_c, &Int32_operator_sub_Int32 },
    std::pair{ "operator*"_c, &Int32_operator_mul_Int32 },
    std::pair{ "operator/"_c, &Int32_operator_div_Int32 },
    std::pair{ "operator%"_c, &Int32_operator_mod_Int32 },
    std::pair{ "operator+="_c, &Int32_operator_addasg_Int32 },
    std::pair{ "operator-="_c, &Int32_operator_subasg_Int32 },
    std::pair{ "operator*="_c, &Int32_operator_mulasg_Int32 },
    std::pair{ "operator/="_c, &Int32_operator_divasg_Int32 },
    std::pair{ "operator<"_c, &Int32_operator_lt_Int32 },
    std::pair{ "operator<="_c, &Int32_operator_lte_Int32 },
    std::pair{ "operator>"_c, &Int32_operator_gt_Int32 },
    std::pair{ "operator>="_c, &Int32_operator_gte_Int32 },
    std::pair{ "operator=="_c, &Int32_operator_eq_Int32 },
    std::pair{ "operator!="_c, &Int32_operator_neq_Int32 },
    std::pair{ "operator|"_c, &Int32_operator_or_Int32 },
    std::pair{ "operator&"_c, &Int32_operator_and_Int32 },
    std::pair{ "operator^"_c, &Int32_operator_xor_Int32 },
    std::pair{ "operator<<"_c, &Int32_operator_lsh_Int32 },
    std::pair{ "operator>>"_c, &Int32_operator_rsh_Int32 },
    std::pair{ "operator|="_c, &Int32_operator_orasg_Int32 },
    std::pair{ "operator&="_c, &Int32_operator_andasg_Int32 },
    std::pair{ "operator^="_c, &Int32_operator_xorasg_Int32 },
    std::pair{ "operator<<="_c, &Int32_operator_lshasg_Int32 },
    std::pair{ "operator>>="_c, &Int32_operator_rhsasg_Int32 }
    } };
}
Int32 Int32Type;

/// b8 with UInt32
Variable Bool8_convert_UInt32_arg0;
Function Bool8_convert_UInt32;
inline constexpr std::array Bool8_convert_UInt32_args = { &Bool8_convert_UInt32_arg0 };

/// b8 with Int32
Variable Bool8_convert_Int32_arg0;
Function Bool8_convert_Int32;
inline constexpr std::array Bool8_convert_Int32_args = { &Bool8_convert_Int32_arg0 };

/// b8 with UInt16
Variable Bool8_convert_UInt16_arg0;
Function Bool8_convert_UInt16;
inline constexpr std::array Bool8_convert_UInt16_args = { &Bool8_convert_UInt16_arg0 };

/// b8 with Int16
Variable Bool8_convert_Int16_arg0;
Function Bool8_convert_Int16;
inline constexpr std::array Bool8_convert_Int16_args = { &Bool8_convert_Int16_arg0 };

/// b8 with Bool8
Variable Bool8_ctor0_arg0_Bool8;
Function Bool8_ctor0;
inline constexpr std::array Bool8_ctor0_args = { &Bool8_ctor0_arg0_Bool8 };

/// operator[] with Int32
Variable Bool8_operator_index_Int32_arg0;
Function Bool8_operator_index_Int32;
inline constexpr std::array Bool8_operator_index_Int32_args = { &Bool8_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Bool8_operator_index_UInt32_arg0;
Function Bool8_operator_index_UInt32;
inline constexpr std::array Bool8_operator_index_UInt32_args = { &Bool8_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Bool8_operator_index_Int16_arg0;
Function Bool8_operator_index_Int16;
inline constexpr std::array Bool8_operator_index_Int16_args = { &Bool8_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Bool8_operator_index_UInt16_arg0;
Function Bool8_operator_index_UInt16;
inline constexpr std::array Bool8_operator_index_UInt16_args = { &Bool8_operator_index_UInt16_arg0 };

/// operator|| with Bool8
Variable Bool8_operator_oror_Bool8_arg0;
Function Bool8_operator_oror_Bool8;
inline constexpr std::array Bool8_operator_oror_Bool8_args = { &Bool8_operator_oror_Bool8_arg0 };

/// operator&& with Bool8
Variable Bool8_operator_andand_Bool8_arg0;
Function Bool8_operator_andand_Bool8;
inline constexpr std::array Bool8_operator_andand_Bool8_args = { &Bool8_operator_andand_Bool8_arg0 };

/// operator== with Bool8
Variable Bool8_operator_eq_Bool8_arg0;
Function Bool8_operator_eq_Bool8;
inline constexpr std::array Bool8_operator_eq_Bool8_args = { &Bool8_operator_eq_Bool8_arg0 };

/// operator!= with Bool8
Variable Bool8_operator_neq_Bool8_arg0;
Function Bool8_operator_neq_Bool8;
inline constexpr std::array Bool8_operator_neq_Bool8_args = { &Bool8_operator_neq_Bool8_arg0 };

Bool8::Bool8()
{
    this->name = "b8";
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 1;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    /// b8 with UInt32
    Bool8_convert_UInt32_arg0.name = "val"_c;
    Bool8_convert_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Bool8_convert_UInt32.documentation = "Convert u32 to b8"_c;
    Bool8_convert_UInt32.name = "b8"_c;
    Bool8_convert_UInt32.returnType = Type::FullType { Bool8Type.name };
    Bool8_convert_UInt32.parameters = Bool8_convert_UInt32_args;
    Symbol::Resolved(&Bool8_convert_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8_convert_UInt32)->returnTypeSymbol = &Bool8Type;

    /// b8 with Int32
    Bool8_convert_Int32_arg0.name = "val"_c;
    Bool8_convert_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Bool8_convert_Int32.documentation = "Convert i32 to b8"_c;
    Bool8_convert_Int32.name = "b8"_c;
    Bool8_convert_Int32.returnType = Type::FullType { Bool8Type.name };
    Bool8_convert_Int32.parameters = Bool8_convert_Int32_args;
    Symbol::Resolved(&Bool8_convert_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8_convert_Int32)->returnTypeSymbol = &Bool8Type;

    /// b8 with UInt16
    Bool8_convert_UInt16_arg0.name = "val"_c;
    Bool8_convert_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Bool8_convert_UInt16.documentation = "Convert u16 to b8"_c;
    Bool8_convert_UInt16.name = "b8"_c;
    Bool8_convert_UInt16.returnType = Type::FullType { Bool8Type.name };
    Bool8_convert_UInt16.parameters = Bool8_convert_UInt16_args;
    Symbol::Resolved(&Bool8_convert_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8_convert_UInt16)->returnTypeSymbol = &Bool8Type;

    /// b8 with Int16
    Bool8_convert_Int16_arg0.name = "val"_c;
    Bool8_convert_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Bool8_convert_Int16.documentation = "Convert i16 to b8"_c;
    Bool8_convert_Int16.name = "b8"_c;
    Bool8_convert_Int16.returnType = Type::FullType { Bool8Type.name };
    Bool8_convert_Int16.parameters = Bool8_convert_Int16_args;
    Symbol::Resolved(&Bool8_convert_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8_convert_Int16)->returnTypeSymbol = &Bool8Type;

    /// b8 with Bool8
    Bool8_ctor0_arg0_Bool8.name = "_arg0"_c;
    Bool8_ctor0_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8_ctor0.name = "b8"_c;
    Bool8_ctor0.returnType = Type::FullType { Bool8Type.name };
    Bool8_ctor0.parameters = Bool8_ctor0_args;
    Symbol::Resolved(&Bool8_ctor0_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8_ctor0)->returnTypeSymbol = &Bool8Type;

    /// operator[] with Int32
    Bool8_operator_index_Int32_arg0.name = "_arg0"_c;
    Bool8_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Bool8_operator_index_Int32.name = "operator[]"_c;
    Bool8_operator_index_Int32.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_index_Int32.parameters = Bool8_operator_index_Int32_args;
    Symbol::Resolved(&Bool8_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt32
    Bool8_operator_index_UInt32_arg0.name = "_arg0"_c;
    Bool8_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Bool8_operator_index_UInt32.name = "operator[]"_c;
    Bool8_operator_index_UInt32.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_index_UInt32.parameters = Bool8_operator_index_UInt32_args;
    Symbol::Resolved(&Bool8_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with Int16
    Bool8_operator_index_Int16_arg0.name = "_arg0"_c;
    Bool8_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Bool8_operator_index_Int16.name = "operator[]"_c;
    Bool8_operator_index_Int16.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_index_Int16.parameters = Bool8_operator_index_Int16_args;
    Symbol::Resolved(&Bool8_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt16
    Bool8_operator_index_UInt16_arg0.name = "_arg0"_c;
    Bool8_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Bool8_operator_index_UInt16.name = "operator[]"_c;
    Bool8_operator_index_UInt16.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_index_UInt16.parameters = Bool8_operator_index_UInt16_args;
    Symbol::Resolved(&Bool8_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator|| with Bool8
    Bool8_operator_oror_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_oror_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Bool8_operator_oror_Bool8.name = "operator||"_c;
    Bool8_operator_oror_Bool8.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_oror_Bool8.parameters = Bool8_operator_oror_Bool8_args;
    Symbol::Resolved(&Bool8_operator_oror_Bool8_arg0)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8_operator_oror_Bool8)->returnTypeSymbol = &Bool8Type;

    /// operator&& with Bool8
    Bool8_operator_andand_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_andand_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Bool8_operator_andand_Bool8.name = "operator&&"_c;
    Bool8_operator_andand_Bool8.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_andand_Bool8.parameters = Bool8_operator_andand_Bool8_args;
    Symbol::Resolved(&Bool8_operator_andand_Bool8_arg0)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8_operator_andand_Bool8)->returnTypeSymbol = &Bool8Type;

    /// operator== with Bool8
    Bool8_operator_eq_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_eq_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Bool8_operator_eq_Bool8.name = "operator=="_c;
    Bool8_operator_eq_Bool8.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_eq_Bool8.parameters = Bool8_operator_eq_Bool8_args;
    Symbol::Resolved(&Bool8_operator_eq_Bool8_arg0)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8_operator_eq_Bool8)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Bool8
    Bool8_operator_neq_Bool8_arg0.name = "_arg0"_c;
    Bool8_operator_neq_Bool8_arg0.type = Type::FullType{ Bool8Type.name };
    Bool8_operator_neq_Bool8.name = "operator!="_c;
    Bool8_operator_neq_Bool8.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_neq_Bool8.parameters = Bool8_operator_neq_Bool8_args;
    Symbol::Resolved(&Bool8_operator_neq_Bool8_arg0)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8_operator_neq_Bool8)->returnTypeSymbol = &Bool8Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Bool8_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Bool8_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Bool8_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Bool8_operator_index_UInt16 },
    std::pair{ "operator||"_c, &Bool8_operator_oror_Bool8 },
    std::pair{ "operator&&"_c, &Bool8_operator_andand_Bool8 },
    std::pair{ "operator=="_c, &Bool8_operator_eq_Bool8 },
    std::pair{ "operator!="_c, &Bool8_operator_neq_Bool8 }
    } };
}
Bool8 Bool8Type;

/// f16 with Float32
Variable Float16_convert_Float32_arg0;
Function Float16_convert_Float32;
inline constexpr std::array Float16_convert_Float32_args = { &Float16_convert_Float32_arg0 };

/// f16 with UInt32
Variable Float16_convert_UInt32_arg0;
Function Float16_convert_UInt32;
inline constexpr std::array Float16_convert_UInt32_args = { &Float16_convert_UInt32_arg0 };

/// f16 with Int32
Variable Float16_convert_Int32_arg0;
Function Float16_convert_Int32;
inline constexpr std::array Float16_convert_Int32_args = { &Float16_convert_Int32_arg0 };

/// f16 with UInt16
Variable Float16_convert_UInt16_arg0;
Function Float16_convert_UInt16;
inline constexpr std::array Float16_convert_UInt16_args = { &Float16_convert_UInt16_arg0 };

/// f16 with Int16
Variable Float16_convert_Int16_arg0;
Function Float16_convert_Int16;
inline constexpr std::array Float16_convert_Int16_args = { &Float16_convert_Int16_arg0 };

/// f16 with Float16
Variable Float16_ctor0_arg0_Float16;
Function Float16_ctor0;
inline constexpr std::array Float16_ctor0_args = { &Float16_ctor0_arg0_Float16 };

/// operator[] with Int32
Variable Float16_operator_index_Int32_arg0;
Function Float16_operator_index_Int32;
inline constexpr std::array Float16_operator_index_Int32_args = { &Float16_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float16_operator_index_UInt32_arg0;
Function Float16_operator_index_UInt32;
inline constexpr std::array Float16_operator_index_UInt32_args = { &Float16_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float16_operator_index_Int16_arg0;
Function Float16_operator_index_Int16;
inline constexpr std::array Float16_operator_index_Int16_args = { &Float16_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float16_operator_index_UInt16_arg0;
Function Float16_operator_index_UInt16;
inline constexpr std::array Float16_operator_index_UInt16_args = { &Float16_operator_index_UInt16_arg0 };

/// operator+ with Float16
Variable Float16_operator_add_Float16_arg0;
Function Float16_operator_add_Float16;
inline constexpr std::array Float16_operator_add_Float16_args = { &Float16_operator_add_Float16_arg0 };

/// operator- with Float16
Variable Float16_operator_sub_Float16_arg0;
Function Float16_operator_sub_Float16;
inline constexpr std::array Float16_operator_sub_Float16_args = { &Float16_operator_sub_Float16_arg0 };

/// operator* with Float16
Variable Float16_operator_mul_Float16_arg0;
Function Float16_operator_mul_Float16;
inline constexpr std::array Float16_operator_mul_Float16_args = { &Float16_operator_mul_Float16_arg0 };

/// operator/ with Float16
Variable Float16_operator_div_Float16_arg0;
Function Float16_operator_div_Float16;
inline constexpr std::array Float16_operator_div_Float16_args = { &Float16_operator_div_Float16_arg0 };

/// operator% with Float16
Variable Float16_operator_mod_Float16_arg0;
Function Float16_operator_mod_Float16;
inline constexpr std::array Float16_operator_mod_Float16_args = { &Float16_operator_mod_Float16_arg0 };

/// operator+= with Float16
Variable Float16_operator_addasg_Float16_arg0;
Function Float16_operator_addasg_Float16;
inline constexpr std::array Float16_operator_addasg_Float16_args = { &Float16_operator_addasg_Float16_arg0 };

/// operator-= with Float16
Variable Float16_operator_subasg_Float16_arg0;
Function Float16_operator_subasg_Float16;
inline constexpr std::array Float16_operator_subasg_Float16_args = { &Float16_operator_subasg_Float16_arg0 };

/// operator*= with Float16
Variable Float16_operator_mulasg_Float16_arg0;
Function Float16_operator_mulasg_Float16;
inline constexpr std::array Float16_operator_mulasg_Float16_args = { &Float16_operator_mulasg_Float16_arg0 };

/// operator/= with Float16
Variable Float16_operator_divasg_Float16_arg0;
Function Float16_operator_divasg_Float16;
inline constexpr std::array Float16_operator_divasg_Float16_args = { &Float16_operator_divasg_Float16_arg0 };

/// operator< with Float16
Variable Float16_operator_lt_Float16_arg0;
Function Float16_operator_lt_Float16;
inline constexpr std::array Float16_operator_lt_Float16_args = { &Float16_operator_lt_Float16_arg0 };

/// operator<= with Float16
Variable Float16_operator_lte_Float16_arg0;
Function Float16_operator_lte_Float16;
inline constexpr std::array Float16_operator_lte_Float16_args = { &Float16_operator_lte_Float16_arg0 };

/// operator> with Float16
Variable Float16_operator_gt_Float16_arg0;
Function Float16_operator_gt_Float16;
inline constexpr std::array Float16_operator_gt_Float16_args = { &Float16_operator_gt_Float16_arg0 };

/// operator>= with Float16
Variable Float16_operator_gte_Float16_arg0;
Function Float16_operator_gte_Float16;
inline constexpr std::array Float16_operator_gte_Float16_args = { &Float16_operator_gte_Float16_arg0 };

/// operator== with Float16
Variable Float16_operator_eq_Float16_arg0;
Function Float16_operator_eq_Float16;
inline constexpr std::array Float16_operator_eq_Float16_args = { &Float16_operator_eq_Float16_arg0 };

/// operator!= with Float16
Variable Float16_operator_neq_Float16_arg0;
Function Float16_operator_neq_Float16;
inline constexpr std::array Float16_operator_neq_Float16_args = { &Float16_operator_neq_Float16_arg0 };

Float16::Float16()
{
    this->name = "f16";
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// f16 with Float32
    Float16_convert_Float32_arg0.name = "val"_c;
    Float16_convert_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float16_convert_Float32.documentation = "Convert f32 to f16"_c;
    Float16_convert_Float32.name = "f16"_c;
    Float16_convert_Float32.returnType = Type::FullType { Float16Type.name };
    Float16_convert_Float32.parameters = Float16_convert_Float32_args;
    Symbol::Resolved(&Float16_convert_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float16_convert_Float32)->returnTypeSymbol = &Float16Type;

    /// f16 with UInt32
    Float16_convert_UInt32_arg0.name = "val"_c;
    Float16_convert_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16_convert_UInt32.documentation = "Convert u32 to f16"_c;
    Float16_convert_UInt32.name = "f16"_c;
    Float16_convert_UInt32.returnType = Type::FullType { Float16Type.name };
    Float16_convert_UInt32.parameters = Float16_convert_UInt32_args;
    Symbol::Resolved(&Float16_convert_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16_convert_UInt32)->returnTypeSymbol = &Float16Type;

    /// f16 with Int32
    Float16_convert_Int32_arg0.name = "val"_c;
    Float16_convert_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16_convert_Int32.documentation = "Convert i32 to f16"_c;
    Float16_convert_Int32.name = "f16"_c;
    Float16_convert_Int32.returnType = Type::FullType { Float16Type.name };
    Float16_convert_Int32.parameters = Float16_convert_Int32_args;
    Symbol::Resolved(&Float16_convert_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16_convert_Int32)->returnTypeSymbol = &Float16Type;

    /// f16 with UInt16
    Float16_convert_UInt16_arg0.name = "val"_c;
    Float16_convert_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16_convert_UInt16.documentation = "Convert u16 to f16"_c;
    Float16_convert_UInt16.name = "f16"_c;
    Float16_convert_UInt16.returnType = Type::FullType { Float16Type.name };
    Float16_convert_UInt16.parameters = Float16_convert_UInt16_args;
    Symbol::Resolved(&Float16_convert_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16_convert_UInt16)->returnTypeSymbol = &Float16Type;

    /// f16 with Int16
    Float16_convert_Int16_arg0.name = "val"_c;
    Float16_convert_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16_convert_Int16.documentation = "Convert i16 to f16"_c;
    Float16_convert_Int16.name = "f16"_c;
    Float16_convert_Int16.returnType = Type::FullType { Float16Type.name };
    Float16_convert_Int16.parameters = Float16_convert_Int16_args;
    Symbol::Resolved(&Float16_convert_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16_convert_Int16)->returnTypeSymbol = &Float16Type;

    /// f16 with Float16
    Float16_ctor0_arg0_Float16.name = "_arg0"_c;
    Float16_ctor0_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16_ctor0.name = "f16"_c;
    Float16_ctor0.returnType = Type::FullType { Float16Type.name };
    Float16_ctor0.parameters = Float16_ctor0_args;
    Symbol::Resolved(&Float16_ctor0_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_ctor0)->returnTypeSymbol = &Float16Type;

    /// operator[] with Int32
    Float16_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16_operator_index_Int32.name = "operator[]"_c;
    Float16_operator_index_Int32.returnType = Type::FullType { Float16Type.name };
    Float16_operator_index_Int32.parameters = Float16_operator_index_Int32_args;
    Symbol::Resolved(&Float16_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt32
    Float16_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16_operator_index_UInt32.name = "operator[]"_c;
    Float16_operator_index_UInt32.returnType = Type::FullType { Float16Type.name };
    Float16_operator_index_UInt32.parameters = Float16_operator_index_UInt32_args;
    Symbol::Resolved(&Float16_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    /// operator[] with Int16
    Float16_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16_operator_index_Int16.name = "operator[]"_c;
    Float16_operator_index_Int16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_index_Int16.parameters = Float16_operator_index_Int16_args;
    Symbol::Resolved(&Float16_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt16
    Float16_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16_operator_index_UInt16.name = "operator[]"_c;
    Float16_operator_index_UInt16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_index_UInt16.parameters = Float16_operator_index_UInt16_args;
    Symbol::Resolved(&Float16_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    /// operator+ with Float16
    Float16_operator_add_Float16_arg0.name = "_arg0"_c;
    Float16_operator_add_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16_operator_add_Float16.name = "operator+"_c;
    Float16_operator_add_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_add_Float16.parameters = Float16_operator_add_Float16_args;
    Symbol::Resolved(&Float16_operator_add_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_add_Float16)->returnTypeSymbol = &Float16Type;

    /// operator- with Float16
    Float16_operator_sub_Float16_arg0.name = "_arg0"_c;
    Float16_operator_sub_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16_operator_sub_Float16.name = "operator-"_c;
    Float16_operator_sub_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_sub_Float16.parameters = Float16_operator_sub_Float16_args;
    Symbol::Resolved(&Float16_operator_sub_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_sub_Float16)->returnTypeSymbol = &Float16Type;

    /// operator* with Float16
    Float16_operator_mul_Float16_arg0.name = "_arg0"_c;
    Float16_operator_mul_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16_operator_mul_Float16.name = "operator*"_c;
    Float16_operator_mul_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_mul_Float16.parameters = Float16_operator_mul_Float16_args;
    Symbol::Resolved(&Float16_operator_mul_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_mul_Float16)->returnTypeSymbol = &Float16Type;

    /// operator/ with Float16
    Float16_operator_div_Float16_arg0.name = "_arg0"_c;
    Float16_operator_div_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16_operator_div_Float16.name = "operator/"_c;
    Float16_operator_div_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_div_Float16.parameters = Float16_operator_div_Float16_args;
    Symbol::Resolved(&Float16_operator_div_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_div_Float16)->returnTypeSymbol = &Float16Type;

    /// operator% with Float16
    Float16_operator_mod_Float16_arg0.name = "_arg0"_c;
    Float16_operator_mod_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16_operator_mod_Float16.name = "operator%"_c;
    Float16_operator_mod_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_mod_Float16.parameters = Float16_operator_mod_Float16_args;
    Symbol::Resolved(&Float16_operator_mod_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_mod_Float16)->returnTypeSymbol = &Float16Type;

    /// operator+= with Float16
    Float16_operator_addasg_Float16_arg0.name = "_arg0"_c;
    Float16_operator_addasg_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16_operator_addasg_Float16.name = "operator+="_c;
    Float16_operator_addasg_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_addasg_Float16.parameters = Float16_operator_addasg_Float16_args;
    Symbol::Resolved(&Float16_operator_addasg_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_addasg_Float16)->returnTypeSymbol = &Float16Type;

    /// operator-= with Float16
    Float16_operator_subasg_Float16_arg0.name = "_arg0"_c;
    Float16_operator_subasg_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16_operator_subasg_Float16.name = "operator-="_c;
    Float16_operator_subasg_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_subasg_Float16.parameters = Float16_operator_subasg_Float16_args;
    Symbol::Resolved(&Float16_operator_subasg_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_subasg_Float16)->returnTypeSymbol = &Float16Type;

    /// operator*= with Float16
    Float16_operator_mulasg_Float16_arg0.name = "_arg0"_c;
    Float16_operator_mulasg_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16_operator_mulasg_Float16.name = "operator*="_c;
    Float16_operator_mulasg_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_mulasg_Float16.parameters = Float16_operator_mulasg_Float16_args;
    Symbol::Resolved(&Float16_operator_mulasg_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_mulasg_Float16)->returnTypeSymbol = &Float16Type;

    /// operator/= with Float16
    Float16_operator_divasg_Float16_arg0.name = "_arg0"_c;
    Float16_operator_divasg_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16_operator_divasg_Float16.name = "operator/="_c;
    Float16_operator_divasg_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_divasg_Float16.parameters = Float16_operator_divasg_Float16_args;
    Symbol::Resolved(&Float16_operator_divasg_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_divasg_Float16)->returnTypeSymbol = &Float16Type;

    /// operator< with Float16
    Float16_operator_lt_Float16_arg0.name = "_arg0"_c;
    Float16_operator_lt_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16_operator_lt_Float16.name = "operator<"_c;
    Float16_operator_lt_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_lt_Float16.parameters = Float16_operator_lt_Float16_args;
    Symbol::Resolved(&Float16_operator_lt_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_lt_Float16)->returnTypeSymbol = &Float16Type;

    /// operator<= with Float16
    Float16_operator_lte_Float16_arg0.name = "_arg0"_c;
    Float16_operator_lte_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16_operator_lte_Float16.name = "operator<="_c;
    Float16_operator_lte_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_lte_Float16.parameters = Float16_operator_lte_Float16_args;
    Symbol::Resolved(&Float16_operator_lte_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_lte_Float16)->returnTypeSymbol = &Float16Type;

    /// operator> with Float16
    Float16_operator_gt_Float16_arg0.name = "_arg0"_c;
    Float16_operator_gt_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16_operator_gt_Float16.name = "operator>"_c;
    Float16_operator_gt_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_gt_Float16.parameters = Float16_operator_gt_Float16_args;
    Symbol::Resolved(&Float16_operator_gt_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_gt_Float16)->returnTypeSymbol = &Float16Type;

    /// operator>= with Float16
    Float16_operator_gte_Float16_arg0.name = "_arg0"_c;
    Float16_operator_gte_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16_operator_gte_Float16.name = "operator>="_c;
    Float16_operator_gte_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_gte_Float16.parameters = Float16_operator_gte_Float16_args;
    Symbol::Resolved(&Float16_operator_gte_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_gte_Float16)->returnTypeSymbol = &Float16Type;

    /// operator== with Float16
    Float16_operator_eq_Float16_arg0.name = "_arg0"_c;
    Float16_operator_eq_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16_operator_eq_Float16.name = "operator=="_c;
    Float16_operator_eq_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_eq_Float16.parameters = Float16_operator_eq_Float16_args;
    Symbol::Resolved(&Float16_operator_eq_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_eq_Float16)->returnTypeSymbol = &Float16Type;

    /// operator!= with Float16
    Float16_operator_neq_Float16_arg0.name = "_arg0"_c;
    Float16_operator_neq_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16_operator_neq_Float16.name = "operator!="_c;
    Float16_operator_neq_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_neq_Float16.parameters = Float16_operator_neq_Float16_args;
    Symbol::Resolved(&Float16_operator_neq_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_neq_Float16)->returnTypeSymbol = &Float16Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Float16_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16_operator_add_Float16 },
    std::pair{ "operator-"_c, &Float16_operator_sub_Float16 },
    std::pair{ "operator*"_c, &Float16_operator_mul_Float16 },
    std::pair{ "operator/"_c, &Float16_operator_div_Float16 },
    std::pair{ "operator%"_c, &Float16_operator_mod_Float16 },
    std::pair{ "operator+="_c, &Float16_operator_addasg_Float16 },
    std::pair{ "operator-="_c, &Float16_operator_subasg_Float16 },
    std::pair{ "operator*="_c, &Float16_operator_mulasg_Float16 },
    std::pair{ "operator/="_c, &Float16_operator_divasg_Float16 },
    std::pair{ "operator<"_c, &Float16_operator_lt_Float16 },
    std::pair{ "operator<="_c, &Float16_operator_lte_Float16 },
    std::pair{ "operator>"_c, &Float16_operator_gt_Float16 },
    std::pair{ "operator>="_c, &Float16_operator_gte_Float16 },
    std::pair{ "operator=="_c, &Float16_operator_eq_Float16 },
    std::pair{ "operator!="_c, &Float16_operator_neq_Float16 }
    } };
}
Float16 Float16Type;

/// u16 with Float32
Variable UInt16_convert_Float32_arg0;
Function UInt16_convert_Float32;
inline constexpr std::array UInt16_convert_Float32_args = { &UInt16_convert_Float32_arg0 };

/// u16 with UInt32
Variable UInt16_convert_UInt32_arg0;
Function UInt16_convert_UInt32;
inline constexpr std::array UInt16_convert_UInt32_args = { &UInt16_convert_UInt32_arg0 };

/// u16 with Int32
Variable UInt16_convert_Int32_arg0;
Function UInt16_convert_Int32;
inline constexpr std::array UInt16_convert_Int32_args = { &UInt16_convert_Int32_arg0 };

/// u16 with Float16
Variable UInt16_convert_Float16_arg0;
Function UInt16_convert_Float16;
inline constexpr std::array UInt16_convert_Float16_args = { &UInt16_convert_Float16_arg0 };

/// u16 with Int16
Variable UInt16_convert_Int16_arg0;
Function UInt16_convert_Int16;
inline constexpr std::array UInt16_convert_Int16_args = { &UInt16_convert_Int16_arg0 };

/// u16 with UInt16
Variable UInt16_ctor0_arg0_UInt16;
Function UInt16_ctor0;
inline constexpr std::array UInt16_ctor0_args = { &UInt16_ctor0_arg0_UInt16 };

/// operator[] with Int32
Variable UInt16_operator_index_Int32_arg0;
Function UInt16_operator_index_Int32;
inline constexpr std::array UInt16_operator_index_Int32_args = { &UInt16_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable UInt16_operator_index_UInt32_arg0;
Function UInt16_operator_index_UInt32;
inline constexpr std::array UInt16_operator_index_UInt32_args = { &UInt16_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable UInt16_operator_index_Int16_arg0;
Function UInt16_operator_index_Int16;
inline constexpr std::array UInt16_operator_index_Int16_args = { &UInt16_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable UInt16_operator_index_UInt16_arg0;
Function UInt16_operator_index_UInt16;
inline constexpr std::array UInt16_operator_index_UInt16_args = { &UInt16_operator_index_UInt16_arg0 };

/// operator+ with UInt16
Variable UInt16_operator_add_UInt16_arg0;
Function UInt16_operator_add_UInt16;
inline constexpr std::array UInt16_operator_add_UInt16_args = { &UInt16_operator_add_UInt16_arg0 };

/// operator- with UInt16
Variable UInt16_operator_sub_UInt16_arg0;
Function UInt16_operator_sub_UInt16;
inline constexpr std::array UInt16_operator_sub_UInt16_args = { &UInt16_operator_sub_UInt16_arg0 };

/// operator* with UInt16
Variable UInt16_operator_mul_UInt16_arg0;
Function UInt16_operator_mul_UInt16;
inline constexpr std::array UInt16_operator_mul_UInt16_args = { &UInt16_operator_mul_UInt16_arg0 };

/// operator/ with UInt16
Variable UInt16_operator_div_UInt16_arg0;
Function UInt16_operator_div_UInt16;
inline constexpr std::array UInt16_operator_div_UInt16_args = { &UInt16_operator_div_UInt16_arg0 };

/// operator% with UInt16
Variable UInt16_operator_mod_UInt16_arg0;
Function UInt16_operator_mod_UInt16;
inline constexpr std::array UInt16_operator_mod_UInt16_args = { &UInt16_operator_mod_UInt16_arg0 };

/// operator+= with UInt16
Variable UInt16_operator_addasg_UInt16_arg0;
Function UInt16_operator_addasg_UInt16;
inline constexpr std::array UInt16_operator_addasg_UInt16_args = { &UInt16_operator_addasg_UInt16_arg0 };

/// operator-= with UInt16
Variable UInt16_operator_subasg_UInt16_arg0;
Function UInt16_operator_subasg_UInt16;
inline constexpr std::array UInt16_operator_subasg_UInt16_args = { &UInt16_operator_subasg_UInt16_arg0 };

/// operator*= with UInt16
Variable UInt16_operator_mulasg_UInt16_arg0;
Function UInt16_operator_mulasg_UInt16;
inline constexpr std::array UInt16_operator_mulasg_UInt16_args = { &UInt16_operator_mulasg_UInt16_arg0 };

/// operator/= with UInt16
Variable UInt16_operator_divasg_UInt16_arg0;
Function UInt16_operator_divasg_UInt16;
inline constexpr std::array UInt16_operator_divasg_UInt16_args = { &UInt16_operator_divasg_UInt16_arg0 };

/// operator< with UInt16
Variable UInt16_operator_lt_UInt16_arg0;
Function UInt16_operator_lt_UInt16;
inline constexpr std::array UInt16_operator_lt_UInt16_args = { &UInt16_operator_lt_UInt16_arg0 };

/// operator<= with UInt16
Variable UInt16_operator_lte_UInt16_arg0;
Function UInt16_operator_lte_UInt16;
inline constexpr std::array UInt16_operator_lte_UInt16_args = { &UInt16_operator_lte_UInt16_arg0 };

/// operator> with UInt16
Variable UInt16_operator_gt_UInt16_arg0;
Function UInt16_operator_gt_UInt16;
inline constexpr std::array UInt16_operator_gt_UInt16_args = { &UInt16_operator_gt_UInt16_arg0 };

/// operator>= with UInt16
Variable UInt16_operator_gte_UInt16_arg0;
Function UInt16_operator_gte_UInt16;
inline constexpr std::array UInt16_operator_gte_UInt16_args = { &UInt16_operator_gte_UInt16_arg0 };

/// operator== with UInt16
Variable UInt16_operator_eq_UInt16_arg0;
Function UInt16_operator_eq_UInt16;
inline constexpr std::array UInt16_operator_eq_UInt16_args = { &UInt16_operator_eq_UInt16_arg0 };

/// operator!= with UInt16
Variable UInt16_operator_neq_UInt16_arg0;
Function UInt16_operator_neq_UInt16;
inline constexpr std::array UInt16_operator_neq_UInt16_args = { &UInt16_operator_neq_UInt16_arg0 };

/// operator| with UInt16
Variable UInt16_operator_or_UInt16_arg0;
Function UInt16_operator_or_UInt16;
inline constexpr std::array UInt16_operator_or_UInt16_args = { &UInt16_operator_or_UInt16_arg0 };

/// operator& with UInt16
Variable UInt16_operator_and_UInt16_arg0;
Function UInt16_operator_and_UInt16;
inline constexpr std::array UInt16_operator_and_UInt16_args = { &UInt16_operator_and_UInt16_arg0 };

/// operator^ with UInt16
Variable UInt16_operator_xor_UInt16_arg0;
Function UInt16_operator_xor_UInt16;
inline constexpr std::array UInt16_operator_xor_UInt16_args = { &UInt16_operator_xor_UInt16_arg0 };

/// operator<< with UInt16
Variable UInt16_operator_lsh_UInt16_arg0;
Function UInt16_operator_lsh_UInt16;
inline constexpr std::array UInt16_operator_lsh_UInt16_args = { &UInt16_operator_lsh_UInt16_arg0 };

/// operator>> with UInt16
Variable UInt16_operator_rsh_UInt16_arg0;
Function UInt16_operator_rsh_UInt16;
inline constexpr std::array UInt16_operator_rsh_UInt16_args = { &UInt16_operator_rsh_UInt16_arg0 };

/// operator|= with UInt16
Variable UInt16_operator_orasg_UInt16_arg0;
Function UInt16_operator_orasg_UInt16;
inline constexpr std::array UInt16_operator_orasg_UInt16_args = { &UInt16_operator_orasg_UInt16_arg0 };

/// operator&= with UInt16
Variable UInt16_operator_andasg_UInt16_arg0;
Function UInt16_operator_andasg_UInt16;
inline constexpr std::array UInt16_operator_andasg_UInt16_args = { &UInt16_operator_andasg_UInt16_arg0 };

/// operator^= with UInt16
Variable UInt16_operator_xorasg_UInt16_arg0;
Function UInt16_operator_xorasg_UInt16;
inline constexpr std::array UInt16_operator_xorasg_UInt16_args = { &UInt16_operator_xorasg_UInt16_arg0 };

/// operator<<= with UInt16
Variable UInt16_operator_lshasg_UInt16_arg0;
Function UInt16_operator_lshasg_UInt16;
inline constexpr std::array UInt16_operator_lshasg_UInt16_args = { &UInt16_operator_lshasg_UInt16_arg0 };

/// operator>>= with UInt16
Variable UInt16_operator_rhsasg_UInt16_arg0;
Function UInt16_operator_rhsasg_UInt16;
inline constexpr std::array UInt16_operator_rhsasg_UInt16_args = { &UInt16_operator_rhsasg_UInt16_arg0 };

UInt16::UInt16()
{
    this->name = "u16";
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    /// u16 with Float32
    UInt16_convert_Float32_arg0.name = "val"_c;
    UInt16_convert_Float32_arg0.type = Type::FullType{ Float32Type.name };
    UInt16_convert_Float32.documentation = "Convert f32 to u16"_c;
    UInt16_convert_Float32.name = "u16"_c;
    UInt16_convert_Float32.returnType = Type::FullType { UInt16Type.name };
    UInt16_convert_Float32.parameters = UInt16_convert_Float32_args;
    Symbol::Resolved(&UInt16_convert_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt16_convert_Float32)->returnTypeSymbol = &UInt16Type;

    /// u16 with UInt32
    UInt16_convert_UInt32_arg0.name = "val"_c;
    UInt16_convert_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt16_convert_UInt32.documentation = "Convert u32 to u16"_c;
    UInt16_convert_UInt32.name = "u16"_c;
    UInt16_convert_UInt32.returnType = Type::FullType { UInt16Type.name };
    UInt16_convert_UInt32.parameters = UInt16_convert_UInt32_args;
    Symbol::Resolved(&UInt16_convert_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16_convert_UInt32)->returnTypeSymbol = &UInt16Type;

    /// u16 with Int32
    UInt16_convert_Int32_arg0.name = "val"_c;
    UInt16_convert_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt16_convert_Int32.documentation = "Convert i32 to u16"_c;
    UInt16_convert_Int32.name = "u16"_c;
    UInt16_convert_Int32.returnType = Type::FullType { UInt16Type.name };
    UInt16_convert_Int32.parameters = UInt16_convert_Int32_args;
    Symbol::Resolved(&UInt16_convert_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16_convert_Int32)->returnTypeSymbol = &UInt16Type;

    /// u16 with Float16
    UInt16_convert_Float16_arg0.name = "val"_c;
    UInt16_convert_Float16_arg0.type = Type::FullType{ Float16Type.name };
    UInt16_convert_Float16.documentation = "Convert f16 to u16"_c;
    UInt16_convert_Float16.name = "u16"_c;
    UInt16_convert_Float16.returnType = Type::FullType { UInt16Type.name };
    UInt16_convert_Float16.parameters = UInt16_convert_Float16_args;
    Symbol::Resolved(&UInt16_convert_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16_convert_Float16)->returnTypeSymbol = &UInt16Type;

    /// u16 with Int16
    UInt16_convert_Int16_arg0.name = "val"_c;
    UInt16_convert_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt16_convert_Int16.documentation = "Convert i16 to u16"_c;
    UInt16_convert_Int16.name = "u16"_c;
    UInt16_convert_Int16.returnType = Type::FullType { UInt16Type.name };
    UInt16_convert_Int16.parameters = UInt16_convert_Int16_args;
    Symbol::Resolved(&UInt16_convert_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16_convert_Int16)->returnTypeSymbol = &UInt16Type;

    /// u16 with UInt16
    UInt16_ctor0_arg0_UInt16.name = "_arg0"_c;
    UInt16_ctor0_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16_ctor0.name = "u16"_c;
    UInt16_ctor0.returnType = Type::FullType { UInt16Type.name };
    UInt16_ctor0.parameters = UInt16_ctor0_args;
    Symbol::Resolved(&UInt16_ctor0_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_ctor0)->returnTypeSymbol = &UInt16Type;

    /// operator[] with Int32
    UInt16_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt16_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt16_operator_index_Int32.name = "operator[]"_c;
    UInt16_operator_index_Int32.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_index_Int32.parameters = UInt16_operator_index_Int32_args;
    Symbol::Resolved(&UInt16_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt32
    UInt16_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt16_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt16_operator_index_UInt32.name = "operator[]"_c;
    UInt16_operator_index_UInt32.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_index_UInt32.parameters = UInt16_operator_index_UInt32_args;
    Symbol::Resolved(&UInt16_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with Int16
    UInt16_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt16_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt16_operator_index_Int16.name = "operator[]"_c;
    UInt16_operator_index_Int16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_index_Int16.parameters = UInt16_operator_index_Int16_args;
    Symbol::Resolved(&UInt16_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt16
    UInt16_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_index_UInt16.name = "operator[]"_c;
    UInt16_operator_index_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_index_UInt16.parameters = UInt16_operator_index_UInt16_args;
    Symbol::Resolved(&UInt16_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator+ with UInt16
    UInt16_operator_add_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_add_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_add_UInt16.name = "operator+"_c;
    UInt16_operator_add_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_add_UInt16.parameters = UInt16_operator_add_UInt16_args;
    Symbol::Resolved(&UInt16_operator_add_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_add_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator- with UInt16
    UInt16_operator_sub_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_sub_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_sub_UInt16.name = "operator-"_c;
    UInt16_operator_sub_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_sub_UInt16.parameters = UInt16_operator_sub_UInt16_args;
    Symbol::Resolved(&UInt16_operator_sub_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_sub_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator* with UInt16
    UInt16_operator_mul_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_mul_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_mul_UInt16.name = "operator*"_c;
    UInt16_operator_mul_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_mul_UInt16.parameters = UInt16_operator_mul_UInt16_args;
    Symbol::Resolved(&UInt16_operator_mul_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_mul_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator/ with UInt16
    UInt16_operator_div_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_div_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_div_UInt16.name = "operator/"_c;
    UInt16_operator_div_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_div_UInt16.parameters = UInt16_operator_div_UInt16_args;
    Symbol::Resolved(&UInt16_operator_div_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_div_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator% with UInt16
    UInt16_operator_mod_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_mod_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_mod_UInt16.name = "operator%"_c;
    UInt16_operator_mod_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_mod_UInt16.parameters = UInt16_operator_mod_UInt16_args;
    Symbol::Resolved(&UInt16_operator_mod_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_mod_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator+= with UInt16
    UInt16_operator_addasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_addasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_addasg_UInt16.name = "operator+="_c;
    UInt16_operator_addasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_addasg_UInt16.parameters = UInt16_operator_addasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_addasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_addasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator-= with UInt16
    UInt16_operator_subasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_subasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_subasg_UInt16.name = "operator-="_c;
    UInt16_operator_subasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_subasg_UInt16.parameters = UInt16_operator_subasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_subasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_subasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator*= with UInt16
    UInt16_operator_mulasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_mulasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_mulasg_UInt16.name = "operator*="_c;
    UInt16_operator_mulasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_mulasg_UInt16.parameters = UInt16_operator_mulasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_mulasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_mulasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator/= with UInt16
    UInt16_operator_divasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_divasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_divasg_UInt16.name = "operator/="_c;
    UInt16_operator_divasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_divasg_UInt16.parameters = UInt16_operator_divasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_divasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_divasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator< with UInt16
    UInt16_operator_lt_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_lt_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_lt_UInt16.name = "operator<"_c;
    UInt16_operator_lt_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_lt_UInt16.parameters = UInt16_operator_lt_UInt16_args;
    Symbol::Resolved(&UInt16_operator_lt_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_lt_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator<= with UInt16
    UInt16_operator_lte_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_lte_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_lte_UInt16.name = "operator<="_c;
    UInt16_operator_lte_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_lte_UInt16.parameters = UInt16_operator_lte_UInt16_args;
    Symbol::Resolved(&UInt16_operator_lte_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_lte_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator> with UInt16
    UInt16_operator_gt_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_gt_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_gt_UInt16.name = "operator>"_c;
    UInt16_operator_gt_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_gt_UInt16.parameters = UInt16_operator_gt_UInt16_args;
    Symbol::Resolved(&UInt16_operator_gt_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_gt_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator>= with UInt16
    UInt16_operator_gte_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_gte_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_gte_UInt16.name = "operator>="_c;
    UInt16_operator_gte_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_gte_UInt16.parameters = UInt16_operator_gte_UInt16_args;
    Symbol::Resolved(&UInt16_operator_gte_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_gte_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator== with UInt16
    UInt16_operator_eq_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_eq_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_eq_UInt16.name = "operator=="_c;
    UInt16_operator_eq_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_eq_UInt16.parameters = UInt16_operator_eq_UInt16_args;
    Symbol::Resolved(&UInt16_operator_eq_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_eq_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator!= with UInt16
    UInt16_operator_neq_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_neq_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_neq_UInt16.name = "operator!="_c;
    UInt16_operator_neq_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_neq_UInt16.parameters = UInt16_operator_neq_UInt16_args;
    Symbol::Resolved(&UInt16_operator_neq_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_neq_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator| with UInt16
    UInt16_operator_or_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_or_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_or_UInt16.name = "operator|"_c;
    UInt16_operator_or_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_or_UInt16.parameters = UInt16_operator_or_UInt16_args;
    Symbol::Resolved(&UInt16_operator_or_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_or_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator& with UInt16
    UInt16_operator_and_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_and_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_and_UInt16.name = "operator&"_c;
    UInt16_operator_and_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_and_UInt16.parameters = UInt16_operator_and_UInt16_args;
    Symbol::Resolved(&UInt16_operator_and_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_and_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator^ with UInt16
    UInt16_operator_xor_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_xor_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_xor_UInt16.name = "operator^"_c;
    UInt16_operator_xor_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_xor_UInt16.parameters = UInt16_operator_xor_UInt16_args;
    Symbol::Resolved(&UInt16_operator_xor_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_xor_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator<< with UInt16
    UInt16_operator_lsh_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_lsh_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_lsh_UInt16.name = "operator<<"_c;
    UInt16_operator_lsh_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_lsh_UInt16.parameters = UInt16_operator_lsh_UInt16_args;
    Symbol::Resolved(&UInt16_operator_lsh_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_lsh_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator>> with UInt16
    UInt16_operator_rsh_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_rsh_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_rsh_UInt16.name = "operator>>"_c;
    UInt16_operator_rsh_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_rsh_UInt16.parameters = UInt16_operator_rsh_UInt16_args;
    Symbol::Resolved(&UInt16_operator_rsh_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_rsh_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator|= with UInt16
    UInt16_operator_orasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_orasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_orasg_UInt16.name = "operator|="_c;
    UInt16_operator_orasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_orasg_UInt16.parameters = UInt16_operator_orasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_orasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_orasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator&= with UInt16
    UInt16_operator_andasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_andasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_andasg_UInt16.name = "operator&="_c;
    UInt16_operator_andasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_andasg_UInt16.parameters = UInt16_operator_andasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_andasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_andasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator^= with UInt16
    UInt16_operator_xorasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_xorasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_xorasg_UInt16.name = "operator^="_c;
    UInt16_operator_xorasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_xorasg_UInt16.parameters = UInt16_operator_xorasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_xorasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_xorasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator<<= with UInt16
    UInt16_operator_lshasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_lshasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_lshasg_UInt16.name = "operator<<="_c;
    UInt16_operator_lshasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_lshasg_UInt16.parameters = UInt16_operator_lshasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_lshasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_lshasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator>>= with UInt16
    UInt16_operator_rhsasg_UInt16_arg0.name = "_arg0"_c;
    UInt16_operator_rhsasg_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_rhsasg_UInt16.name = "operator>>="_c;
    UInt16_operator_rhsasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_rhsasg_UInt16.parameters = UInt16_operator_rhsasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_rhsasg_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_rhsasg_UInt16)->returnTypeSymbol = &UInt16Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &UInt16_operator_index_Int32 },
    std::pair{ "operator[]"_c, &UInt16_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &UInt16_operator_index_Int16 },
    std::pair{ "operator[]"_c, &UInt16_operator_index_UInt16 },
    std::pair{ "operator+"_c, &UInt16_operator_add_UInt16 },
    std::pair{ "operator-"_c, &UInt16_operator_sub_UInt16 },
    std::pair{ "operator*"_c, &UInt16_operator_mul_UInt16 },
    std::pair{ "operator/"_c, &UInt16_operator_div_UInt16 },
    std::pair{ "operator%"_c, &UInt16_operator_mod_UInt16 },
    std::pair{ "operator+="_c, &UInt16_operator_addasg_UInt16 },
    std::pair{ "operator-="_c, &UInt16_operator_subasg_UInt16 },
    std::pair{ "operator*="_c, &UInt16_operator_mulasg_UInt16 },
    std::pair{ "operator/="_c, &UInt16_operator_divasg_UInt16 },
    std::pair{ "operator<"_c, &UInt16_operator_lt_UInt16 },
    std::pair{ "operator<="_c, &UInt16_operator_lte_UInt16 },
    std::pair{ "operator>"_c, &UInt16_operator_gt_UInt16 },
    std::pair{ "operator>="_c, &UInt16_operator_gte_UInt16 },
    std::pair{ "operator=="_c, &UInt16_operator_eq_UInt16 },
    std::pair{ "operator!="_c, &UInt16_operator_neq_UInt16 },
    std::pair{ "operator|"_c, &UInt16_operator_or_UInt16 },
    std::pair{ "operator&"_c, &UInt16_operator_and_UInt16 },
    std::pair{ "operator^"_c, &UInt16_operator_xor_UInt16 },
    std::pair{ "operator<<"_c, &UInt16_operator_lsh_UInt16 },
    std::pair{ "operator>>"_c, &UInt16_operator_rsh_UInt16 },
    std::pair{ "operator|="_c, &UInt16_operator_orasg_UInt16 },
    std::pair{ "operator&="_c, &UInt16_operator_andasg_UInt16 },
    std::pair{ "operator^="_c, &UInt16_operator_xorasg_UInt16 },
    std::pair{ "operator<<="_c, &UInt16_operator_lshasg_UInt16 },
    std::pair{ "operator>>="_c, &UInt16_operator_rhsasg_UInt16 }
    } };
}
UInt16 UInt16Type;

/// i16 with Float32
Variable Int16_convert_Float32_arg0;
Function Int16_convert_Float32;
inline constexpr std::array Int16_convert_Float32_args = { &Int16_convert_Float32_arg0 };

/// i16 with UInt32
Variable Int16_convert_UInt32_arg0;
Function Int16_convert_UInt32;
inline constexpr std::array Int16_convert_UInt32_args = { &Int16_convert_UInt32_arg0 };

/// i16 with Int32
Variable Int16_convert_Int32_arg0;
Function Int16_convert_Int32;
inline constexpr std::array Int16_convert_Int32_args = { &Int16_convert_Int32_arg0 };

/// i16 with Float16
Variable Int16_convert_Float16_arg0;
Function Int16_convert_Float16;
inline constexpr std::array Int16_convert_Float16_args = { &Int16_convert_Float16_arg0 };

/// i16 with UInt16
Variable Int16_convert_UInt16_arg0;
Function Int16_convert_UInt16;
inline constexpr std::array Int16_convert_UInt16_args = { &Int16_convert_UInt16_arg0 };

/// i16 with Int16
Variable Int16_ctor0_arg0_Int16;
Function Int16_ctor0;
inline constexpr std::array Int16_ctor0_args = { &Int16_ctor0_arg0_Int16 };

/// operator[] with Int32
Variable Int16_operator_index_Int32_arg0;
Function Int16_operator_index_Int32;
inline constexpr std::array Int16_operator_index_Int32_args = { &Int16_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Int16_operator_index_UInt32_arg0;
Function Int16_operator_index_UInt32;
inline constexpr std::array Int16_operator_index_UInt32_args = { &Int16_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Int16_operator_index_Int16_arg0;
Function Int16_operator_index_Int16;
inline constexpr std::array Int16_operator_index_Int16_args = { &Int16_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Int16_operator_index_UInt16_arg0;
Function Int16_operator_index_UInt16;
inline constexpr std::array Int16_operator_index_UInt16_args = { &Int16_operator_index_UInt16_arg0 };

/// operator+ with Int16
Variable Int16_operator_add_Int16_arg0;
Function Int16_operator_add_Int16;
inline constexpr std::array Int16_operator_add_Int16_args = { &Int16_operator_add_Int16_arg0 };

/// operator- with Int16
Variable Int16_operator_sub_Int16_arg0;
Function Int16_operator_sub_Int16;
inline constexpr std::array Int16_operator_sub_Int16_args = { &Int16_operator_sub_Int16_arg0 };

/// operator* with Int16
Variable Int16_operator_mul_Int16_arg0;
Function Int16_operator_mul_Int16;
inline constexpr std::array Int16_operator_mul_Int16_args = { &Int16_operator_mul_Int16_arg0 };

/// operator/ with Int16
Variable Int16_operator_div_Int16_arg0;
Function Int16_operator_div_Int16;
inline constexpr std::array Int16_operator_div_Int16_args = { &Int16_operator_div_Int16_arg0 };

/// operator% with Int16
Variable Int16_operator_mod_Int16_arg0;
Function Int16_operator_mod_Int16;
inline constexpr std::array Int16_operator_mod_Int16_args = { &Int16_operator_mod_Int16_arg0 };

/// operator+= with Int16
Variable Int16_operator_addasg_Int16_arg0;
Function Int16_operator_addasg_Int16;
inline constexpr std::array Int16_operator_addasg_Int16_args = { &Int16_operator_addasg_Int16_arg0 };

/// operator-= with Int16
Variable Int16_operator_subasg_Int16_arg0;
Function Int16_operator_subasg_Int16;
inline constexpr std::array Int16_operator_subasg_Int16_args = { &Int16_operator_subasg_Int16_arg0 };

/// operator*= with Int16
Variable Int16_operator_mulasg_Int16_arg0;
Function Int16_operator_mulasg_Int16;
inline constexpr std::array Int16_operator_mulasg_Int16_args = { &Int16_operator_mulasg_Int16_arg0 };

/// operator/= with Int16
Variable Int16_operator_divasg_Int16_arg0;
Function Int16_operator_divasg_Int16;
inline constexpr std::array Int16_operator_divasg_Int16_args = { &Int16_operator_divasg_Int16_arg0 };

/// operator< with Int16
Variable Int16_operator_lt_Int16_arg0;
Function Int16_operator_lt_Int16;
inline constexpr std::array Int16_operator_lt_Int16_args = { &Int16_operator_lt_Int16_arg0 };

/// operator<= with Int16
Variable Int16_operator_lte_Int16_arg0;
Function Int16_operator_lte_Int16;
inline constexpr std::array Int16_operator_lte_Int16_args = { &Int16_operator_lte_Int16_arg0 };

/// operator> with Int16
Variable Int16_operator_gt_Int16_arg0;
Function Int16_operator_gt_Int16;
inline constexpr std::array Int16_operator_gt_Int16_args = { &Int16_operator_gt_Int16_arg0 };

/// operator>= with Int16
Variable Int16_operator_gte_Int16_arg0;
Function Int16_operator_gte_Int16;
inline constexpr std::array Int16_operator_gte_Int16_args = { &Int16_operator_gte_Int16_arg0 };

/// operator== with Int16
Variable Int16_operator_eq_Int16_arg0;
Function Int16_operator_eq_Int16;
inline constexpr std::array Int16_operator_eq_Int16_args = { &Int16_operator_eq_Int16_arg0 };

/// operator!= with Int16
Variable Int16_operator_neq_Int16_arg0;
Function Int16_operator_neq_Int16;
inline constexpr std::array Int16_operator_neq_Int16_args = { &Int16_operator_neq_Int16_arg0 };

/// operator| with Int16
Variable Int16_operator_or_Int16_arg0;
Function Int16_operator_or_Int16;
inline constexpr std::array Int16_operator_or_Int16_args = { &Int16_operator_or_Int16_arg0 };

/// operator& with Int16
Variable Int16_operator_and_Int16_arg0;
Function Int16_operator_and_Int16;
inline constexpr std::array Int16_operator_and_Int16_args = { &Int16_operator_and_Int16_arg0 };

/// operator^ with Int16
Variable Int16_operator_xor_Int16_arg0;
Function Int16_operator_xor_Int16;
inline constexpr std::array Int16_operator_xor_Int16_args = { &Int16_operator_xor_Int16_arg0 };

/// operator<< with Int16
Variable Int16_operator_lsh_Int16_arg0;
Function Int16_operator_lsh_Int16;
inline constexpr std::array Int16_operator_lsh_Int16_args = { &Int16_operator_lsh_Int16_arg0 };

/// operator>> with Int16
Variable Int16_operator_rsh_Int16_arg0;
Function Int16_operator_rsh_Int16;
inline constexpr std::array Int16_operator_rsh_Int16_args = { &Int16_operator_rsh_Int16_arg0 };

/// operator|= with Int16
Variable Int16_operator_orasg_Int16_arg0;
Function Int16_operator_orasg_Int16;
inline constexpr std::array Int16_operator_orasg_Int16_args = { &Int16_operator_orasg_Int16_arg0 };

/// operator&= with Int16
Variable Int16_operator_andasg_Int16_arg0;
Function Int16_operator_andasg_Int16;
inline constexpr std::array Int16_operator_andasg_Int16_args = { &Int16_operator_andasg_Int16_arg0 };

/// operator^= with Int16
Variable Int16_operator_xorasg_Int16_arg0;
Function Int16_operator_xorasg_Int16;
inline constexpr std::array Int16_operator_xorasg_Int16_args = { &Int16_operator_xorasg_Int16_arg0 };

/// operator<<= with Int16
Variable Int16_operator_lshasg_Int16_arg0;
Function Int16_operator_lshasg_Int16;
inline constexpr std::array Int16_operator_lshasg_Int16_args = { &Int16_operator_lshasg_Int16_arg0 };

/// operator>>= with Int16
Variable Int16_operator_rhsasg_Int16_arg0;
Function Int16_operator_rhsasg_Int16;
inline constexpr std::array Int16_operator_rhsasg_Int16_args = { &Int16_operator_rhsasg_Int16_arg0 };

Int16::Int16()
{
    this->name = "i16";
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    /// i16 with Float32
    Int16_convert_Float32_arg0.name = "val"_c;
    Int16_convert_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Int16_convert_Float32.documentation = "Convert f32 to i16"_c;
    Int16_convert_Float32.name = "i16"_c;
    Int16_convert_Float32.returnType = Type::FullType { Int16Type.name };
    Int16_convert_Float32.parameters = Int16_convert_Float32_args;
    Symbol::Resolved(&Int16_convert_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int16_convert_Float32)->returnTypeSymbol = &Int16Type;

    /// i16 with UInt32
    Int16_convert_UInt32_arg0.name = "val"_c;
    Int16_convert_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int16_convert_UInt32.documentation = "Convert u32 to i16"_c;
    Int16_convert_UInt32.name = "i16"_c;
    Int16_convert_UInt32.returnType = Type::FullType { Int16Type.name };
    Int16_convert_UInt32.parameters = Int16_convert_UInt32_args;
    Symbol::Resolved(&Int16_convert_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16_convert_UInt32)->returnTypeSymbol = &Int16Type;

    /// i16 with Int32
    Int16_convert_Int32_arg0.name = "val"_c;
    Int16_convert_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int16_convert_Int32.documentation = "Convert i32 to i16"_c;
    Int16_convert_Int32.name = "i16"_c;
    Int16_convert_Int32.returnType = Type::FullType { Int16Type.name };
    Int16_convert_Int32.parameters = Int16_convert_Int32_args;
    Symbol::Resolved(&Int16_convert_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16_convert_Int32)->returnTypeSymbol = &Int16Type;

    /// i16 with Float16
    Int16_convert_Float16_arg0.name = "val"_c;
    Int16_convert_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Int16_convert_Float16.documentation = "Convert f16 to i16"_c;
    Int16_convert_Float16.name = "i16"_c;
    Int16_convert_Float16.returnType = Type::FullType { Int16Type.name };
    Int16_convert_Float16.parameters = Int16_convert_Float16_args;
    Symbol::Resolved(&Int16_convert_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16_convert_Float16)->returnTypeSymbol = &Int16Type;

    /// i16 with UInt16
    Int16_convert_UInt16_arg0.name = "val"_c;
    Int16_convert_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int16_convert_UInt16.documentation = "Convert u16 to i16"_c;
    Int16_convert_UInt16.name = "i16"_c;
    Int16_convert_UInt16.returnType = Type::FullType { Int16Type.name };
    Int16_convert_UInt16.parameters = Int16_convert_UInt16_args;
    Symbol::Resolved(&Int16_convert_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16_convert_UInt16)->returnTypeSymbol = &Int16Type;

    /// i16 with Int16
    Int16_ctor0_arg0_Int16.name = "_arg0"_c;
    Int16_ctor0_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16_ctor0.name = "i16"_c;
    Int16_ctor0.returnType = Type::FullType { Int16Type.name };
    Int16_ctor0.parameters = Int16_ctor0_args;
    Symbol::Resolved(&Int16_ctor0_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_ctor0)->returnTypeSymbol = &Int16Type;

    /// operator[] with Int32
    Int16_operator_index_Int32_arg0.name = "_arg0"_c;
    Int16_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int16_operator_index_Int32.name = "operator[]"_c;
    Int16_operator_index_Int32.returnType = Type::FullType { Int16Type.name };
    Int16_operator_index_Int32.parameters = Int16_operator_index_Int32_args;
    Symbol::Resolved(&Int16_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt32
    Int16_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int16_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int16_operator_index_UInt32.name = "operator[]"_c;
    Int16_operator_index_UInt32.returnType = Type::FullType { Int16Type.name };
    Int16_operator_index_UInt32.parameters = Int16_operator_index_UInt32_args;
    Symbol::Resolved(&Int16_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    /// operator[] with Int16
    Int16_operator_index_Int16_arg0.name = "_arg0"_c;
    Int16_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_index_Int16.name = "operator[]"_c;
    Int16_operator_index_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_index_Int16.parameters = Int16_operator_index_Int16_args;
    Symbol::Resolved(&Int16_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt16
    Int16_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int16_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int16_operator_index_UInt16.name = "operator[]"_c;
    Int16_operator_index_UInt16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_index_UInt16.parameters = Int16_operator_index_UInt16_args;
    Symbol::Resolved(&Int16_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    /// operator+ with Int16
    Int16_operator_add_Int16_arg0.name = "_arg0"_c;
    Int16_operator_add_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_add_Int16.name = "operator+"_c;
    Int16_operator_add_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_add_Int16.parameters = Int16_operator_add_Int16_args;
    Symbol::Resolved(&Int16_operator_add_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_add_Int16)->returnTypeSymbol = &Int16Type;

    /// operator- with Int16
    Int16_operator_sub_Int16_arg0.name = "_arg0"_c;
    Int16_operator_sub_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_sub_Int16.name = "operator-"_c;
    Int16_operator_sub_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_sub_Int16.parameters = Int16_operator_sub_Int16_args;
    Symbol::Resolved(&Int16_operator_sub_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_sub_Int16)->returnTypeSymbol = &Int16Type;

    /// operator* with Int16
    Int16_operator_mul_Int16_arg0.name = "_arg0"_c;
    Int16_operator_mul_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_mul_Int16.name = "operator*"_c;
    Int16_operator_mul_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_mul_Int16.parameters = Int16_operator_mul_Int16_args;
    Symbol::Resolved(&Int16_operator_mul_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_mul_Int16)->returnTypeSymbol = &Int16Type;

    /// operator/ with Int16
    Int16_operator_div_Int16_arg0.name = "_arg0"_c;
    Int16_operator_div_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_div_Int16.name = "operator/"_c;
    Int16_operator_div_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_div_Int16.parameters = Int16_operator_div_Int16_args;
    Symbol::Resolved(&Int16_operator_div_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_div_Int16)->returnTypeSymbol = &Int16Type;

    /// operator% with Int16
    Int16_operator_mod_Int16_arg0.name = "_arg0"_c;
    Int16_operator_mod_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_mod_Int16.name = "operator%"_c;
    Int16_operator_mod_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_mod_Int16.parameters = Int16_operator_mod_Int16_args;
    Symbol::Resolved(&Int16_operator_mod_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_mod_Int16)->returnTypeSymbol = &Int16Type;

    /// operator+= with Int16
    Int16_operator_addasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_addasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_addasg_Int16.name = "operator+="_c;
    Int16_operator_addasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_addasg_Int16.parameters = Int16_operator_addasg_Int16_args;
    Symbol::Resolved(&Int16_operator_addasg_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_addasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator-= with Int16
    Int16_operator_subasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_subasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_subasg_Int16.name = "operator-="_c;
    Int16_operator_subasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_subasg_Int16.parameters = Int16_operator_subasg_Int16_args;
    Symbol::Resolved(&Int16_operator_subasg_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_subasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator*= with Int16
    Int16_operator_mulasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_mulasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_mulasg_Int16.name = "operator*="_c;
    Int16_operator_mulasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_mulasg_Int16.parameters = Int16_operator_mulasg_Int16_args;
    Symbol::Resolved(&Int16_operator_mulasg_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_mulasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator/= with Int16
    Int16_operator_divasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_divasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_divasg_Int16.name = "operator/="_c;
    Int16_operator_divasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_divasg_Int16.parameters = Int16_operator_divasg_Int16_args;
    Symbol::Resolved(&Int16_operator_divasg_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_divasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator< with Int16
    Int16_operator_lt_Int16_arg0.name = "_arg0"_c;
    Int16_operator_lt_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_lt_Int16.name = "operator<"_c;
    Int16_operator_lt_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_lt_Int16.parameters = Int16_operator_lt_Int16_args;
    Symbol::Resolved(&Int16_operator_lt_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_lt_Int16)->returnTypeSymbol = &Int16Type;

    /// operator<= with Int16
    Int16_operator_lte_Int16_arg0.name = "_arg0"_c;
    Int16_operator_lte_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_lte_Int16.name = "operator<="_c;
    Int16_operator_lte_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_lte_Int16.parameters = Int16_operator_lte_Int16_args;
    Symbol::Resolved(&Int16_operator_lte_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_lte_Int16)->returnTypeSymbol = &Int16Type;

    /// operator> with Int16
    Int16_operator_gt_Int16_arg0.name = "_arg0"_c;
    Int16_operator_gt_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_gt_Int16.name = "operator>"_c;
    Int16_operator_gt_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_gt_Int16.parameters = Int16_operator_gt_Int16_args;
    Symbol::Resolved(&Int16_operator_gt_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_gt_Int16)->returnTypeSymbol = &Int16Type;

    /// operator>= with Int16
    Int16_operator_gte_Int16_arg0.name = "_arg0"_c;
    Int16_operator_gte_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_gte_Int16.name = "operator>="_c;
    Int16_operator_gte_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_gte_Int16.parameters = Int16_operator_gte_Int16_args;
    Symbol::Resolved(&Int16_operator_gte_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_gte_Int16)->returnTypeSymbol = &Int16Type;

    /// operator== with Int16
    Int16_operator_eq_Int16_arg0.name = "_arg0"_c;
    Int16_operator_eq_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_eq_Int16.name = "operator=="_c;
    Int16_operator_eq_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_eq_Int16.parameters = Int16_operator_eq_Int16_args;
    Symbol::Resolved(&Int16_operator_eq_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_eq_Int16)->returnTypeSymbol = &Int16Type;

    /// operator!= with Int16
    Int16_operator_neq_Int16_arg0.name = "_arg0"_c;
    Int16_operator_neq_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_neq_Int16.name = "operator!="_c;
    Int16_operator_neq_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_neq_Int16.parameters = Int16_operator_neq_Int16_args;
    Symbol::Resolved(&Int16_operator_neq_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_neq_Int16)->returnTypeSymbol = &Int16Type;

    /// operator| with Int16
    Int16_operator_or_Int16_arg0.name = "_arg0"_c;
    Int16_operator_or_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_or_Int16.name = "operator|"_c;
    Int16_operator_or_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_or_Int16.parameters = Int16_operator_or_Int16_args;
    Symbol::Resolved(&Int16_operator_or_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_or_Int16)->returnTypeSymbol = &Int16Type;

    /// operator& with Int16
    Int16_operator_and_Int16_arg0.name = "_arg0"_c;
    Int16_operator_and_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_and_Int16.name = "operator&"_c;
    Int16_operator_and_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_and_Int16.parameters = Int16_operator_and_Int16_args;
    Symbol::Resolved(&Int16_operator_and_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_and_Int16)->returnTypeSymbol = &Int16Type;

    /// operator^ with Int16
    Int16_operator_xor_Int16_arg0.name = "_arg0"_c;
    Int16_operator_xor_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_xor_Int16.name = "operator^"_c;
    Int16_operator_xor_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_xor_Int16.parameters = Int16_operator_xor_Int16_args;
    Symbol::Resolved(&Int16_operator_xor_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_xor_Int16)->returnTypeSymbol = &Int16Type;

    /// operator<< with Int16
    Int16_operator_lsh_Int16_arg0.name = "_arg0"_c;
    Int16_operator_lsh_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_lsh_Int16.name = "operator<<"_c;
    Int16_operator_lsh_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_lsh_Int16.parameters = Int16_operator_lsh_Int16_args;
    Symbol::Resolved(&Int16_operator_lsh_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_lsh_Int16)->returnTypeSymbol = &Int16Type;

    /// operator>> with Int16
    Int16_operator_rsh_Int16_arg0.name = "_arg0"_c;
    Int16_operator_rsh_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_rsh_Int16.name = "operator>>"_c;
    Int16_operator_rsh_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_rsh_Int16.parameters = Int16_operator_rsh_Int16_args;
    Symbol::Resolved(&Int16_operator_rsh_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_rsh_Int16)->returnTypeSymbol = &Int16Type;

    /// operator|= with Int16
    Int16_operator_orasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_orasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_orasg_Int16.name = "operator|="_c;
    Int16_operator_orasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_orasg_Int16.parameters = Int16_operator_orasg_Int16_args;
    Symbol::Resolved(&Int16_operator_orasg_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_orasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator&= with Int16
    Int16_operator_andasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_andasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_andasg_Int16.name = "operator&="_c;
    Int16_operator_andasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_andasg_Int16.parameters = Int16_operator_andasg_Int16_args;
    Symbol::Resolved(&Int16_operator_andasg_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_andasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator^= with Int16
    Int16_operator_xorasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_xorasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_xorasg_Int16.name = "operator^="_c;
    Int16_operator_xorasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_xorasg_Int16.parameters = Int16_operator_xorasg_Int16_args;
    Symbol::Resolved(&Int16_operator_xorasg_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_xorasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator<<= with Int16
    Int16_operator_lshasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_lshasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_lshasg_Int16.name = "operator<<="_c;
    Int16_operator_lshasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_lshasg_Int16.parameters = Int16_operator_lshasg_Int16_args;
    Symbol::Resolved(&Int16_operator_lshasg_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_lshasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator>>= with Int16
    Int16_operator_rhsasg_Int16_arg0.name = "_arg0"_c;
    Int16_operator_rhsasg_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16_operator_rhsasg_Int16.name = "operator>>="_c;
    Int16_operator_rhsasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_rhsasg_Int16.parameters = Int16_operator_rhsasg_Int16_args;
    Symbol::Resolved(&Int16_operator_rhsasg_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_rhsasg_Int16)->returnTypeSymbol = &Int16Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Int16_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16_operator_add_Int16 },
    std::pair{ "operator-"_c, &Int16_operator_sub_Int16 },
    std::pair{ "operator*"_c, &Int16_operator_mul_Int16 },
    std::pair{ "operator/"_c, &Int16_operator_div_Int16 },
    std::pair{ "operator%"_c, &Int16_operator_mod_Int16 },
    std::pair{ "operator+="_c, &Int16_operator_addasg_Int16 },
    std::pair{ "operator-="_c, &Int16_operator_subasg_Int16 },
    std::pair{ "operator*="_c, &Int16_operator_mulasg_Int16 },
    std::pair{ "operator/="_c, &Int16_operator_divasg_Int16 },
    std::pair{ "operator<"_c, &Int16_operator_lt_Int16 },
    std::pair{ "operator<="_c, &Int16_operator_lte_Int16 },
    std::pair{ "operator>"_c, &Int16_operator_gt_Int16 },
    std::pair{ "operator>="_c, &Int16_operator_gte_Int16 },
    std::pair{ "operator=="_c, &Int16_operator_eq_Int16 },
    std::pair{ "operator!="_c, &Int16_operator_neq_Int16 },
    std::pair{ "operator|"_c, &Int16_operator_or_Int16 },
    std::pair{ "operator&"_c, &Int16_operator_and_Int16 },
    std::pair{ "operator^"_c, &Int16_operator_xor_Int16 },
    std::pair{ "operator<<"_c, &Int16_operator_lsh_Int16 },
    std::pair{ "operator>>"_c, &Int16_operator_rsh_Int16 },
    std::pair{ "operator|="_c, &Int16_operator_orasg_Int16 },
    std::pair{ "operator&="_c, &Int16_operator_andasg_Int16 },
    std::pair{ "operator^="_c, &Int16_operator_xorasg_Int16 },
    std::pair{ "operator<<="_c, &Int16_operator_lshasg_Int16 },
    std::pair{ "operator>>="_c, &Int16_operator_rhsasg_Int16 }
    } };
}
Int16 Int16Type;

/// f32x2 with Float32x2
Variable Float32x2_convert_Float32x2_arg0;
Function Float32x2_convert_Float32x2;
inline constexpr std::array Float32x2_convert_Float32x2_args = { &Float32x2_convert_Float32x2_arg0 };

/// f32x2 with Float32
Variable Float32x2_splat_Float32_arg0;
Function Float32x2_splat_Float32;
inline constexpr std::array Float32x2_splat_Float32_args = { &Float32x2_splat_Float32_arg0 };

/// f32x2 with UInt32x2
Variable Float32x2_convert_UInt32x2_arg0;
Function Float32x2_convert_UInt32x2;
inline constexpr std::array Float32x2_convert_UInt32x2_args = { &Float32x2_convert_UInt32x2_arg0 };

/// f32x2 with UInt32
Variable Float32x2_splat_UInt32_arg0;
Function Float32x2_splat_UInt32;
inline constexpr std::array Float32x2_splat_UInt32_args = { &Float32x2_splat_UInt32_arg0 };

/// f32x2 with Int32x2
Variable Float32x2_convert_Int32x2_arg0;
Function Float32x2_convert_Int32x2;
inline constexpr std::array Float32x2_convert_Int32x2_args = { &Float32x2_convert_Int32x2_arg0 };

/// f32x2 with Int32
Variable Float32x2_splat_Int32_arg0;
Function Float32x2_splat_Int32;
inline constexpr std::array Float32x2_splat_Int32_args = { &Float32x2_splat_Int32_arg0 };

/// f32x2 with Float16x2
Variable Float32x2_convert_Float16x2_arg0;
Function Float32x2_convert_Float16x2;
inline constexpr std::array Float32x2_convert_Float16x2_args = { &Float32x2_convert_Float16x2_arg0 };

/// f32x2 with Float16
Variable Float32x2_splat_Float16_arg0;
Function Float32x2_splat_Float16;
inline constexpr std::array Float32x2_splat_Float16_args = { &Float32x2_splat_Float16_arg0 };

/// f32x2 with UInt16x2
Variable Float32x2_convert_UInt16x2_arg0;
Function Float32x2_convert_UInt16x2;
inline constexpr std::array Float32x2_convert_UInt16x2_args = { &Float32x2_convert_UInt16x2_arg0 };

/// f32x2 with UInt16
Variable Float32x2_splat_UInt16_arg0;
Function Float32x2_splat_UInt16;
inline constexpr std::array Float32x2_splat_UInt16_args = { &Float32x2_splat_UInt16_arg0 };

/// f32x2 with Int16x2
Variable Float32x2_convert_Int16x2_arg0;
Function Float32x2_convert_Int16x2;
inline constexpr std::array Float32x2_convert_Int16x2_args = { &Float32x2_convert_Int16x2_arg0 };

/// f32x2 with Int16
Variable Float32x2_splat_Int16_arg0;
Function Float32x2_splat_Int16;
inline constexpr std::array Float32x2_splat_Int16_args = { &Float32x2_splat_Int16_arg0 };

/// f32x2 with Float32, Float32
Variable Float32x2_ctor0_arg0_Float32;
Variable Float32x2_ctor0_arg1_Float32;
Function Float32x2_ctor0;
inline constexpr std::array Float32x2_ctor0_args = { &Float32x2_ctor0_arg0_Float32, &Float32x2_ctor0_arg1_Float32 };

/// operator[] with Int32
Variable Float32x2_operator_index_Int32_arg0;
Function Float32x2_operator_index_Int32;
inline constexpr std::array Float32x2_operator_index_Int32_args = { &Float32x2_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float32x2_operator_index_UInt32_arg0;
Function Float32x2_operator_index_UInt32;
inline constexpr std::array Float32x2_operator_index_UInt32_args = { &Float32x2_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float32x2_operator_index_Int16_arg0;
Function Float32x2_operator_index_Int16;
inline constexpr std::array Float32x2_operator_index_Int16_args = { &Float32x2_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float32x2_operator_index_UInt16_arg0;
Function Float32x2_operator_index_UInt16;
inline constexpr std::array Float32x2_operator_index_UInt16_args = { &Float32x2_operator_index_UInt16_arg0 };

/// operator+ with Float32x2
Variable Float32x2_operator_add_Float32x2_arg0;
Function Float32x2_operator_add_Float32x2;
inline constexpr std::array Float32x2_operator_add_Float32x2_args = { &Float32x2_operator_add_Float32x2_arg0 };

/// operator- with Float32x2
Variable Float32x2_operator_sub_Float32x2_arg0;
Function Float32x2_operator_sub_Float32x2;
inline constexpr std::array Float32x2_operator_sub_Float32x2_args = { &Float32x2_operator_sub_Float32x2_arg0 };

/// operator* with Float32x2
Variable Float32x2_operator_mul_Float32x2_arg0;
Function Float32x2_operator_mul_Float32x2;
inline constexpr std::array Float32x2_operator_mul_Float32x2_args = { &Float32x2_operator_mul_Float32x2_arg0 };

/// operator/ with Float32x2
Variable Float32x2_operator_div_Float32x2_arg0;
Function Float32x2_operator_div_Float32x2;
inline constexpr std::array Float32x2_operator_div_Float32x2_args = { &Float32x2_operator_div_Float32x2_arg0 };

/// operator% with Float32x2
Variable Float32x2_operator_mod_Float32x2_arg0;
Function Float32x2_operator_mod_Float32x2;
inline constexpr std::array Float32x2_operator_mod_Float32x2_args = { &Float32x2_operator_mod_Float32x2_arg0 };

/// operator+= with Float32x2
Variable Float32x2_operator_addasg_Float32x2_arg0;
Function Float32x2_operator_addasg_Float32x2;
inline constexpr std::array Float32x2_operator_addasg_Float32x2_args = { &Float32x2_operator_addasg_Float32x2_arg0 };

/// operator-= with Float32x2
Variable Float32x2_operator_subasg_Float32x2_arg0;
Function Float32x2_operator_subasg_Float32x2;
inline constexpr std::array Float32x2_operator_subasg_Float32x2_args = { &Float32x2_operator_subasg_Float32x2_arg0 };

/// operator*= with Float32x2
Variable Float32x2_operator_mulasg_Float32x2_arg0;
Function Float32x2_operator_mulasg_Float32x2;
inline constexpr std::array Float32x2_operator_mulasg_Float32x2_args = { &Float32x2_operator_mulasg_Float32x2_arg0 };

/// operator/= with Float32x2
Variable Float32x2_operator_divasg_Float32x2_arg0;
Function Float32x2_operator_divasg_Float32x2;
inline constexpr std::array Float32x2_operator_divasg_Float32x2_args = { &Float32x2_operator_divasg_Float32x2_arg0 };

/// operator< with Float32x2
Variable Float32x2_operator_lt_Float32x2_arg0;
Function Float32x2_operator_lt_Float32x2;
inline constexpr std::array Float32x2_operator_lt_Float32x2_args = { &Float32x2_operator_lt_Float32x2_arg0 };

/// operator<= with Float32x2
Variable Float32x2_operator_lte_Float32x2_arg0;
Function Float32x2_operator_lte_Float32x2;
inline constexpr std::array Float32x2_operator_lte_Float32x2_args = { &Float32x2_operator_lte_Float32x2_arg0 };

/// operator> with Float32x2
Variable Float32x2_operator_gt_Float32x2_arg0;
Function Float32x2_operator_gt_Float32x2;
inline constexpr std::array Float32x2_operator_gt_Float32x2_args = { &Float32x2_operator_gt_Float32x2_arg0 };

/// operator>= with Float32x2
Variable Float32x2_operator_gte_Float32x2_arg0;
Function Float32x2_operator_gte_Float32x2;
inline constexpr std::array Float32x2_operator_gte_Float32x2_args = { &Float32x2_operator_gte_Float32x2_arg0 };

/// operator== with Float32x2
Variable Float32x2_operator_eq_Float32x2_arg0;
Function Float32x2_operator_eq_Float32x2;
inline constexpr std::array Float32x2_operator_eq_Float32x2_args = { &Float32x2_operator_eq_Float32x2_arg0 };

/// operator!= with Float32x2
Variable Float32x2_operator_neq_Float32x2_arg0;
Function Float32x2_operator_neq_Float32x2;
inline constexpr std::array Float32x2_operator_neq_Float32x2_args = { &Float32x2_operator_neq_Float32x2_arg0 };

/// operator* with Float32
Variable Float32x2_operator_scale_Float32_arg0;
Function Float32x2_operator_scale_Float32;
inline constexpr std::array Float32x2_operator_scale_Float32_args = { &Float32x2_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable Float32x2_operator_scale_Float16_arg0;
Function Float32x2_operator_scale_Float16;
inline constexpr std::array Float32x2_operator_scale_Float16_args = { &Float32x2_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable Float32x2_operator_scale_UInt32_arg0;
Function Float32x2_operator_scale_UInt32;
inline constexpr std::array Float32x2_operator_scale_UInt32_args = { &Float32x2_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable Float32x2_operator_scale_UInt16_arg0;
Function Float32x2_operator_scale_UInt16;
inline constexpr std::array Float32x2_operator_scale_UInt16_args = { &Float32x2_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable Float32x2_operator_scale_Int32_arg0;
Function Float32x2_operator_scale_Int32;
inline constexpr std::array Float32x2_operator_scale_Int32_args = { &Float32x2_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable Float32x2_operator_scale_Int16_arg0;
Function Float32x2_operator_scale_Int16;
inline constexpr std::array Float32x2_operator_scale_Int16_args = { &Float32x2_operator_scale_Int16_arg0 };

/// operator* with Float32x2x2
Variable Float32x2_operator_mul_Float32x2x2_arg0;
Function Float32x2_operator_mul_Float32x2x2;
inline constexpr std::array Float32x2_operator_mul_Float32x2x2_args = { &Float32x2_operator_mul_Float32x2x2_arg0 };

/// operator* with Float32x2x3
Variable Float32x2_operator_mul_Float32x2x3_arg0;
Function Float32x2_operator_mul_Float32x2x3;
inline constexpr std::array Float32x2_operator_mul_Float32x2x3_args = { &Float32x2_operator_mul_Float32x2x3_arg0 };

/// operator* with Float32x2x4
Variable Float32x2_operator_mul_Float32x2x4_arg0;
Function Float32x2_operator_mul_Float32x2x4;
inline constexpr std::array Float32x2_operator_mul_Float32x2x4_args = { &Float32x2_operator_mul_Float32x2x4_arg0 };

Float32x2::Float32x2()
{
    this->name = "f32x2";
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// f32x2 with Float32x2
    Float32x2_convert_Float32x2_arg0.name = "val"_c;
    Float32x2_convert_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_convert_Float32x2.documentation = "Convert f32x2 to f32x2"_c;
    Float32x2_convert_Float32x2.name = "f32x2"_c;
    Float32x2_convert_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_convert_Float32x2.parameters = Float32x2_convert_Float32x2_args;
    Symbol::Resolved(&Float32x2_convert_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_convert_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Float32
    Float32x2_splat_Float32_arg0.name = "val"_c;
    Float32x2_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32x2_splat_Float32.documentation = "Splat f32x2 to f32x2"_c;
    Float32x2_splat_Float32.name = "f32x2"_c;
    Float32x2_splat_Float32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_Float32.parameters = Float32x2_splat_Float32_args;
    Symbol::Resolved(&Float32x2_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2_splat_Float32)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with UInt32x2
    Float32x2_convert_UInt32x2_arg0.name = "val"_c;
    Float32x2_convert_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Float32x2_convert_UInt32x2.documentation = "Convert u32x2 to f32x2"_c;
    Float32x2_convert_UInt32x2.name = "f32x2"_c;
    Float32x2_convert_UInt32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_convert_UInt32x2.parameters = Float32x2_convert_UInt32x2_args;
    Symbol::Resolved(&Float32x2_convert_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&Float32x2_convert_UInt32x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with UInt32
    Float32x2_splat_UInt32_arg0.name = "val"_c;
    Float32x2_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x2_splat_UInt32.documentation = "Splat u32x2 to f32x2"_c;
    Float32x2_splat_UInt32.name = "f32x2"_c;
    Float32x2_splat_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_UInt32.parameters = Float32x2_splat_UInt32_args;
    Symbol::Resolved(&Float32x2_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2_splat_UInt32)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Int32x2
    Float32x2_convert_Int32x2_arg0.name = "val"_c;
    Float32x2_convert_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Float32x2_convert_Int32x2.documentation = "Convert i32x2 to f32x2"_c;
    Float32x2_convert_Int32x2.name = "f32x2"_c;
    Float32x2_convert_Int32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_convert_Int32x2.parameters = Float32x2_convert_Int32x2_args;
    Symbol::Resolved(&Float32x2_convert_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Float32x2_convert_Int32x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Int32
    Float32x2_splat_Int32_arg0.name = "val"_c;
    Float32x2_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x2_splat_Int32.documentation = "Splat i32x2 to f32x2"_c;
    Float32x2_splat_Int32.name = "f32x2"_c;
    Float32x2_splat_Int32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_Int32.parameters = Float32x2_splat_Int32_args;
    Symbol::Resolved(&Float32x2_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2_splat_Int32)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Float16x2
    Float32x2_convert_Float16x2_arg0.name = "val"_c;
    Float32x2_convert_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float32x2_convert_Float16x2.documentation = "Convert f16x2 to f32x2"_c;
    Float32x2_convert_Float16x2.name = "f32x2"_c;
    Float32x2_convert_Float16x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_convert_Float16x2.parameters = Float32x2_convert_Float16x2_args;
    Symbol::Resolved(&Float32x2_convert_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float32x2_convert_Float16x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Float16
    Float32x2_splat_Float16_arg0.name = "val"_c;
    Float32x2_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float32x2_splat_Float16.documentation = "Splat f16x2 to f32x2"_c;
    Float32x2_splat_Float16.name = "f32x2"_c;
    Float32x2_splat_Float16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_Float16.parameters = Float32x2_splat_Float16_args;
    Symbol::Resolved(&Float32x2_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float32x2_splat_Float16)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with UInt16x2
    Float32x2_convert_UInt16x2_arg0.name = "val"_c;
    Float32x2_convert_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Float32x2_convert_UInt16x2.documentation = "Convert u16x2 to f32x2"_c;
    Float32x2_convert_UInt16x2.name = "f32x2"_c;
    Float32x2_convert_UInt16x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_convert_UInt16x2.parameters = Float32x2_convert_UInt16x2_args;
    Symbol::Resolved(&Float32x2_convert_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&Float32x2_convert_UInt16x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with UInt16
    Float32x2_splat_UInt16_arg0.name = "val"_c;
    Float32x2_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x2_splat_UInt16.documentation = "Splat u16x2 to f32x2"_c;
    Float32x2_splat_UInt16.name = "f32x2"_c;
    Float32x2_splat_UInt16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_UInt16.parameters = Float32x2_splat_UInt16_args;
    Symbol::Resolved(&Float32x2_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2_splat_UInt16)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Int16x2
    Float32x2_convert_Int16x2_arg0.name = "val"_c;
    Float32x2_convert_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Float32x2_convert_Int16x2.documentation = "Convert i16x2 to f32x2"_c;
    Float32x2_convert_Int16x2.name = "f32x2"_c;
    Float32x2_convert_Int16x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_convert_Int16x2.parameters = Float32x2_convert_Int16x2_args;
    Symbol::Resolved(&Float32x2_convert_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Float32x2_convert_Int16x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Int16
    Float32x2_splat_Int16_arg0.name = "val"_c;
    Float32x2_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x2_splat_Int16.documentation = "Splat i16x2 to f32x2"_c;
    Float32x2_splat_Int16.name = "f32x2"_c;
    Float32x2_splat_Int16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_Int16.parameters = Float32x2_splat_Int16_args;
    Symbol::Resolved(&Float32x2_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2_splat_Int16)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Float32, Float32
    Float32x2_ctor0_arg0_Float32.name = "_arg0"_c;
    Float32x2_ctor0_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32x2_ctor0_arg1_Float32.name = "_arg1"_c;
    Float32x2_ctor0_arg1_Float32.type = Type::FullType{ Float32Type.name };
    Float32x2_ctor0.name = "f32x2"_c;
    Float32x2_ctor0.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_ctor0.parameters = Float32x2_ctor0_args;
    Symbol::Resolved(&Float32x2_ctor0_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2_ctor0_arg1_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2_ctor0)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with Int32
    Float32x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x2_operator_index_Int32.name = "operator[]"_c;
    Float32x2_operator_index_Int32.returnType = Type::FullType { Float32Type.name };
    Float32x2_operator_index_Int32.parameters = Float32x2_operator_index_Int32_args;
    Symbol::Resolved(&Float32x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt32
    Float32x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x2_operator_index_UInt32.name = "operator[]"_c;
    Float32x2_operator_index_UInt32.returnType = Type::FullType { Float32Type.name };
    Float32x2_operator_index_UInt32.parameters = Float32x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    /// operator[] with Int16
    Float32x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x2_operator_index_Int16.name = "operator[]"_c;
    Float32x2_operator_index_Int16.returnType = Type::FullType { Float32Type.name };
    Float32x2_operator_index_Int16.parameters = Float32x2_operator_index_Int16_args;
    Symbol::Resolved(&Float32x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt16
    Float32x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x2_operator_index_UInt16.name = "operator[]"_c;
    Float32x2_operator_index_UInt16.returnType = Type::FullType { Float32Type.name };
    Float32x2_operator_index_UInt16.parameters = Float32x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    /// operator+ with Float32x2
    Float32x2_operator_add_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_add_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_add_Float32x2.name = "operator+"_c;
    Float32x2_operator_add_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_add_Float32x2.parameters = Float32x2_operator_add_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_add_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_add_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator- with Float32x2
    Float32x2_operator_sub_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_sub_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_sub_Float32x2.name = "operator-"_c;
    Float32x2_operator_sub_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_sub_Float32x2.parameters = Float32x2_operator_sub_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_sub_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_sub_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x2
    Float32x2_operator_mul_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_mul_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_mul_Float32x2.name = "operator*"_c;
    Float32x2_operator_mul_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_mul_Float32x2.parameters = Float32x2_operator_mul_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator/ with Float32x2
    Float32x2_operator_div_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_div_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_div_Float32x2.name = "operator/"_c;
    Float32x2_operator_div_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_div_Float32x2.parameters = Float32x2_operator_div_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_div_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_div_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator% with Float32x2
    Float32x2_operator_mod_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_mod_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_mod_Float32x2.name = "operator%"_c;
    Float32x2_operator_mod_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_mod_Float32x2.parameters = Float32x2_operator_mod_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_mod_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_mod_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator+= with Float32x2
    Float32x2_operator_addasg_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_addasg_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_addasg_Float32x2.name = "operator+="_c;
    Float32x2_operator_addasg_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_addasg_Float32x2.parameters = Float32x2_operator_addasg_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_addasg_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_addasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator-= with Float32x2
    Float32x2_operator_subasg_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_subasg_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_subasg_Float32x2.name = "operator-="_c;
    Float32x2_operator_subasg_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_subasg_Float32x2.parameters = Float32x2_operator_subasg_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_subasg_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_subasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator*= with Float32x2
    Float32x2_operator_mulasg_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_mulasg_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_mulasg_Float32x2.name = "operator*="_c;
    Float32x2_operator_mulasg_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_mulasg_Float32x2.parameters = Float32x2_operator_mulasg_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_mulasg_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_mulasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator/= with Float32x2
    Float32x2_operator_divasg_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_divasg_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_divasg_Float32x2.name = "operator/="_c;
    Float32x2_operator_divasg_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_divasg_Float32x2.parameters = Float32x2_operator_divasg_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_divasg_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_divasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator< with Float32x2
    Float32x2_operator_lt_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_lt_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_lt_Float32x2.name = "operator<"_c;
    Float32x2_operator_lt_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_lt_Float32x2.parameters = Float32x2_operator_lt_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_lt_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_lt_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator<= with Float32x2
    Float32x2_operator_lte_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_lte_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_lte_Float32x2.name = "operator<="_c;
    Float32x2_operator_lte_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_lte_Float32x2.parameters = Float32x2_operator_lte_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_lte_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_lte_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator> with Float32x2
    Float32x2_operator_gt_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_gt_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_gt_Float32x2.name = "operator>"_c;
    Float32x2_operator_gt_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_gt_Float32x2.parameters = Float32x2_operator_gt_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_gt_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_gt_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator>= with Float32x2
    Float32x2_operator_gte_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_gte_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_gte_Float32x2.name = "operator>="_c;
    Float32x2_operator_gte_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_gte_Float32x2.parameters = Float32x2_operator_gte_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_gte_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_gte_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator== with Float32x2
    Float32x2_operator_eq_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_eq_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_eq_Float32x2.name = "operator=="_c;
    Float32x2_operator_eq_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_eq_Float32x2.parameters = Float32x2_operator_eq_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_eq_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_eq_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator!= with Float32x2
    Float32x2_operator_neq_Float32x2_arg0.name = "_arg0"_c;
    Float32x2_operator_neq_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_neq_Float32x2.name = "operator!="_c;
    Float32x2_operator_neq_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_neq_Float32x2.parameters = Float32x2_operator_neq_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_neq_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_neq_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32
    Float32x2_operator_scale_Float32_arg0.name = "_arg0"_c;
    Float32x2_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32x2_operator_scale_Float32.name = "operator*"_c;
    Float32x2_operator_scale_Float32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_scale_Float32.parameters = Float32x2_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x2_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2_operator_scale_Float32)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float16
    Float32x2_operator_scale_Float16_arg0.name = "_arg0"_c;
    Float32x2_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float32x2_operator_scale_Float16.name = "operator*"_c;
    Float32x2_operator_scale_Float16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_scale_Float16.parameters = Float32x2_operator_scale_Float16_args;
    Symbol::Resolved(&Float32x2_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float32x2_operator_scale_Float16)->returnTypeSymbol = &Float32x2Type;

    /// operator* with UInt32
    Float32x2_operator_scale_UInt32_arg0.name = "_arg0"_c;
    Float32x2_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x2_operator_scale_UInt32.name = "operator*"_c;
    Float32x2_operator_scale_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_scale_UInt32.parameters = Float32x2_operator_scale_UInt32_args;
    Symbol::Resolved(&Float32x2_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2_operator_scale_UInt32)->returnTypeSymbol = &Float32x2Type;

    /// operator* with UInt16
    Float32x2_operator_scale_UInt16_arg0.name = "_arg0"_c;
    Float32x2_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x2_operator_scale_UInt16.name = "operator*"_c;
    Float32x2_operator_scale_UInt16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_scale_UInt16.parameters = Float32x2_operator_scale_UInt16_args;
    Symbol::Resolved(&Float32x2_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2_operator_scale_UInt16)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Int32
    Float32x2_operator_scale_Int32_arg0.name = "_arg0"_c;
    Float32x2_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x2_operator_scale_Int32.name = "operator*"_c;
    Float32x2_operator_scale_Int32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_scale_Int32.parameters = Float32x2_operator_scale_Int32_args;
    Symbol::Resolved(&Float32x2_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2_operator_scale_Int32)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Int16
    Float32x2_operator_scale_Int16_arg0.name = "_arg0"_c;
    Float32x2_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x2_operator_scale_Int16.name = "operator*"_c;
    Float32x2_operator_scale_Int16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_scale_Int16.parameters = Float32x2_operator_scale_Int16_args;
    Symbol::Resolved(&Float32x2_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2_operator_scale_Int16)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x2x2
    Float32x2_operator_mul_Float32x2x2_arg0.name = "_arg0"_c;
    Float32x2_operator_mul_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2_operator_mul_Float32x2x2.name = "operator*"_c;
    Float32x2_operator_mul_Float32x2x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_mul_Float32x2x2.parameters = Float32x2_operator_mul_Float32x2x2_args;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2x2)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x2x3
    Float32x2_operator_mul_Float32x2x3_arg0.name = "_arg0"_c;
    Float32x2_operator_mul_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2_operator_mul_Float32x2x3.name = "operator*"_c;
    Float32x2_operator_mul_Float32x2x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x2_operator_mul_Float32x2x3.parameters = Float32x2_operator_mul_Float32x2x3_args;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2x3)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x2x4
    Float32x2_operator_mul_Float32x2x4_arg0.name = "_arg0"_c;
    Float32x2_operator_mul_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2_operator_mul_Float32x2x4.name = "operator*"_c;
    Float32x2_operator_mul_Float32x2x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x2_operator_mul_Float32x2x4.parameters = Float32x2_operator_mul_Float32x2x4_args;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2x4)->returnTypeSymbol = &Float32x4Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Float32x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2_operator_add_Float32x2 },
    std::pair{ "operator-"_c, &Float32x2_operator_sub_Float32x2 },
    std::pair{ "operator*"_c, &Float32x2_operator_mul_Float32x2 },
    std::pair{ "operator/"_c, &Float32x2_operator_div_Float32x2 },
    std::pair{ "operator%"_c, &Float32x2_operator_mod_Float32x2 },
    std::pair{ "operator+="_c, &Float32x2_operator_addasg_Float32x2 },
    std::pair{ "operator-="_c, &Float32x2_operator_subasg_Float32x2 },
    std::pair{ "operator*="_c, &Float32x2_operator_mulasg_Float32x2 },
    std::pair{ "operator/="_c, &Float32x2_operator_divasg_Float32x2 },
    std::pair{ "operator<"_c, &Float32x2_operator_lt_Float32x2 },
    std::pair{ "operator<="_c, &Float32x2_operator_lte_Float32x2 },
    std::pair{ "operator>"_c, &Float32x2_operator_gt_Float32x2 },
    std::pair{ "operator>="_c, &Float32x2_operator_gte_Float32x2 },
    std::pair{ "operator=="_c, &Float32x2_operator_eq_Float32x2 },
    std::pair{ "operator!="_c, &Float32x2_operator_neq_Float32x2 },
    std::pair{ "operator*"_c, &Float32x2_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Float32x2_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Float32x2_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Float32x2_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Float32x2_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Float32x2_operator_scale_Int16 },
    std::pair{ "operator*"_c, &Float32x2_operator_mul_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2_operator_mul_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2_operator_mul_Float32x2x4 }
    } };
}
Float32x2 Float32x2Type;

/// u32x2 with Float32x2
Variable UInt32x2_convert_Float32x2_arg0;
Function UInt32x2_convert_Float32x2;
inline constexpr std::array UInt32x2_convert_Float32x2_args = { &UInt32x2_convert_Float32x2_arg0 };

/// u32x2 with Float32
Variable UInt32x2_splat_Float32_arg0;
Function UInt32x2_splat_Float32;
inline constexpr std::array UInt32x2_splat_Float32_args = { &UInt32x2_splat_Float32_arg0 };

/// u32x2 with UInt32x2
Variable UInt32x2_convert_UInt32x2_arg0;
Function UInt32x2_convert_UInt32x2;
inline constexpr std::array UInt32x2_convert_UInt32x2_args = { &UInt32x2_convert_UInt32x2_arg0 };

/// u32x2 with UInt32
Variable UInt32x2_splat_UInt32_arg0;
Function UInt32x2_splat_UInt32;
inline constexpr std::array UInt32x2_splat_UInt32_args = { &UInt32x2_splat_UInt32_arg0 };

/// u32x2 with Int32x2
Variable UInt32x2_convert_Int32x2_arg0;
Function UInt32x2_convert_Int32x2;
inline constexpr std::array UInt32x2_convert_Int32x2_args = { &UInt32x2_convert_Int32x2_arg0 };

/// u32x2 with Int32
Variable UInt32x2_splat_Int32_arg0;
Function UInt32x2_splat_Int32;
inline constexpr std::array UInt32x2_splat_Int32_args = { &UInt32x2_splat_Int32_arg0 };

/// u32x2 with Float16x2
Variable UInt32x2_convert_Float16x2_arg0;
Function UInt32x2_convert_Float16x2;
inline constexpr std::array UInt32x2_convert_Float16x2_args = { &UInt32x2_convert_Float16x2_arg0 };

/// u32x2 with Float16
Variable UInt32x2_splat_Float16_arg0;
Function UInt32x2_splat_Float16;
inline constexpr std::array UInt32x2_splat_Float16_args = { &UInt32x2_splat_Float16_arg0 };

/// u32x2 with UInt16x2
Variable UInt32x2_convert_UInt16x2_arg0;
Function UInt32x2_convert_UInt16x2;
inline constexpr std::array UInt32x2_convert_UInt16x2_args = { &UInt32x2_convert_UInt16x2_arg0 };

/// u32x2 with UInt16
Variable UInt32x2_splat_UInt16_arg0;
Function UInt32x2_splat_UInt16;
inline constexpr std::array UInt32x2_splat_UInt16_args = { &UInt32x2_splat_UInt16_arg0 };

/// u32x2 with Int16x2
Variable UInt32x2_convert_Int16x2_arg0;
Function UInt32x2_convert_Int16x2;
inline constexpr std::array UInt32x2_convert_Int16x2_args = { &UInt32x2_convert_Int16x2_arg0 };

/// u32x2 with Int16
Variable UInt32x2_splat_Int16_arg0;
Function UInt32x2_splat_Int16;
inline constexpr std::array UInt32x2_splat_Int16_args = { &UInt32x2_splat_Int16_arg0 };

/// u32x2 with UInt32, UInt32
Variable UInt32x2_ctor0_arg0_UInt32;
Variable UInt32x2_ctor0_arg1_UInt32;
Function UInt32x2_ctor0;
inline constexpr std::array UInt32x2_ctor0_args = { &UInt32x2_ctor0_arg0_UInt32, &UInt32x2_ctor0_arg1_UInt32 };

/// operator[] with Int32
Variable UInt32x2_operator_index_Int32_arg0;
Function UInt32x2_operator_index_Int32;
inline constexpr std::array UInt32x2_operator_index_Int32_args = { &UInt32x2_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable UInt32x2_operator_index_UInt32_arg0;
Function UInt32x2_operator_index_UInt32;
inline constexpr std::array UInt32x2_operator_index_UInt32_args = { &UInt32x2_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable UInt32x2_operator_index_Int16_arg0;
Function UInt32x2_operator_index_Int16;
inline constexpr std::array UInt32x2_operator_index_Int16_args = { &UInt32x2_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable UInt32x2_operator_index_UInt16_arg0;
Function UInt32x2_operator_index_UInt16;
inline constexpr std::array UInt32x2_operator_index_UInt16_args = { &UInt32x2_operator_index_UInt16_arg0 };

/// operator+ with UInt32x2
Variable UInt32x2_operator_add_UInt32x2_arg0;
Function UInt32x2_operator_add_UInt32x2;
inline constexpr std::array UInt32x2_operator_add_UInt32x2_args = { &UInt32x2_operator_add_UInt32x2_arg0 };

/// operator- with UInt32x2
Variable UInt32x2_operator_sub_UInt32x2_arg0;
Function UInt32x2_operator_sub_UInt32x2;
inline constexpr std::array UInt32x2_operator_sub_UInt32x2_args = { &UInt32x2_operator_sub_UInt32x2_arg0 };

/// operator* with UInt32x2
Variable UInt32x2_operator_mul_UInt32x2_arg0;
Function UInt32x2_operator_mul_UInt32x2;
inline constexpr std::array UInt32x2_operator_mul_UInt32x2_args = { &UInt32x2_operator_mul_UInt32x2_arg0 };

/// operator/ with UInt32x2
Variable UInt32x2_operator_div_UInt32x2_arg0;
Function UInt32x2_operator_div_UInt32x2;
inline constexpr std::array UInt32x2_operator_div_UInt32x2_args = { &UInt32x2_operator_div_UInt32x2_arg0 };

/// operator% with UInt32x2
Variable UInt32x2_operator_mod_UInt32x2_arg0;
Function UInt32x2_operator_mod_UInt32x2;
inline constexpr std::array UInt32x2_operator_mod_UInt32x2_args = { &UInt32x2_operator_mod_UInt32x2_arg0 };

/// operator+= with UInt32x2
Variable UInt32x2_operator_addasg_UInt32x2_arg0;
Function UInt32x2_operator_addasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_addasg_UInt32x2_args = { &UInt32x2_operator_addasg_UInt32x2_arg0 };

/// operator-= with UInt32x2
Variable UInt32x2_operator_subasg_UInt32x2_arg0;
Function UInt32x2_operator_subasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_subasg_UInt32x2_args = { &UInt32x2_operator_subasg_UInt32x2_arg0 };

/// operator*= with UInt32x2
Variable UInt32x2_operator_mulasg_UInt32x2_arg0;
Function UInt32x2_operator_mulasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_mulasg_UInt32x2_args = { &UInt32x2_operator_mulasg_UInt32x2_arg0 };

/// operator/= with UInt32x2
Variable UInt32x2_operator_divasg_UInt32x2_arg0;
Function UInt32x2_operator_divasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_divasg_UInt32x2_args = { &UInt32x2_operator_divasg_UInt32x2_arg0 };

/// operator< with UInt32x2
Variable UInt32x2_operator_lt_UInt32x2_arg0;
Function UInt32x2_operator_lt_UInt32x2;
inline constexpr std::array UInt32x2_operator_lt_UInt32x2_args = { &UInt32x2_operator_lt_UInt32x2_arg0 };

/// operator<= with UInt32x2
Variable UInt32x2_operator_lte_UInt32x2_arg0;
Function UInt32x2_operator_lte_UInt32x2;
inline constexpr std::array UInt32x2_operator_lte_UInt32x2_args = { &UInt32x2_operator_lte_UInt32x2_arg0 };

/// operator> with UInt32x2
Variable UInt32x2_operator_gt_UInt32x2_arg0;
Function UInt32x2_operator_gt_UInt32x2;
inline constexpr std::array UInt32x2_operator_gt_UInt32x2_args = { &UInt32x2_operator_gt_UInt32x2_arg0 };

/// operator>= with UInt32x2
Variable UInt32x2_operator_gte_UInt32x2_arg0;
Function UInt32x2_operator_gte_UInt32x2;
inline constexpr std::array UInt32x2_operator_gte_UInt32x2_args = { &UInt32x2_operator_gte_UInt32x2_arg0 };

/// operator== with UInt32x2
Variable UInt32x2_operator_eq_UInt32x2_arg0;
Function UInt32x2_operator_eq_UInt32x2;
inline constexpr std::array UInt32x2_operator_eq_UInt32x2_args = { &UInt32x2_operator_eq_UInt32x2_arg0 };

/// operator!= with UInt32x2
Variable UInt32x2_operator_neq_UInt32x2_arg0;
Function UInt32x2_operator_neq_UInt32x2;
inline constexpr std::array UInt32x2_operator_neq_UInt32x2_args = { &UInt32x2_operator_neq_UInt32x2_arg0 };

/// operator* with Float32
Variable UInt32x2_operator_scale_Float32_arg0;
Function UInt32x2_operator_scale_Float32;
inline constexpr std::array UInt32x2_operator_scale_Float32_args = { &UInt32x2_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable UInt32x2_operator_scale_Float16_arg0;
Function UInt32x2_operator_scale_Float16;
inline constexpr std::array UInt32x2_operator_scale_Float16_args = { &UInt32x2_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable UInt32x2_operator_scale_UInt32_arg0;
Function UInt32x2_operator_scale_UInt32;
inline constexpr std::array UInt32x2_operator_scale_UInt32_args = { &UInt32x2_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable UInt32x2_operator_scale_UInt16_arg0;
Function UInt32x2_operator_scale_UInt16;
inline constexpr std::array UInt32x2_operator_scale_UInt16_args = { &UInt32x2_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable UInt32x2_operator_scale_Int32_arg0;
Function UInt32x2_operator_scale_Int32;
inline constexpr std::array UInt32x2_operator_scale_Int32_args = { &UInt32x2_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable UInt32x2_operator_scale_Int16_arg0;
Function UInt32x2_operator_scale_Int16;
inline constexpr std::array UInt32x2_operator_scale_Int16_args = { &UInt32x2_operator_scale_Int16_arg0 };

/// operator| with UInt32x2
Variable UInt32x2_operator_or_UInt32x2_arg0;
Function UInt32x2_operator_or_UInt32x2;
inline constexpr std::array UInt32x2_operator_or_UInt32x2_args = { &UInt32x2_operator_or_UInt32x2_arg0 };

/// operator& with UInt32x2
Variable UInt32x2_operator_and_UInt32x2_arg0;
Function UInt32x2_operator_and_UInt32x2;
inline constexpr std::array UInt32x2_operator_and_UInt32x2_args = { &UInt32x2_operator_and_UInt32x2_arg0 };

/// operator^ with UInt32x2
Variable UInt32x2_operator_xor_UInt32x2_arg0;
Function UInt32x2_operator_xor_UInt32x2;
inline constexpr std::array UInt32x2_operator_xor_UInt32x2_args = { &UInt32x2_operator_xor_UInt32x2_arg0 };

/// operator<< with UInt32x2
Variable UInt32x2_operator_lsh_UInt32x2_arg0;
Function UInt32x2_operator_lsh_UInt32x2;
inline constexpr std::array UInt32x2_operator_lsh_UInt32x2_args = { &UInt32x2_operator_lsh_UInt32x2_arg0 };

/// operator>> with UInt32x2
Variable UInt32x2_operator_rsh_UInt32x2_arg0;
Function UInt32x2_operator_rsh_UInt32x2;
inline constexpr std::array UInt32x2_operator_rsh_UInt32x2_args = { &UInt32x2_operator_rsh_UInt32x2_arg0 };

/// operator|= with UInt32x2
Variable UInt32x2_operator_orasg_UInt32x2_arg0;
Function UInt32x2_operator_orasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_orasg_UInt32x2_args = { &UInt32x2_operator_orasg_UInt32x2_arg0 };

/// operator&= with UInt32x2
Variable UInt32x2_operator_andasg_UInt32x2_arg0;
Function UInt32x2_operator_andasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_andasg_UInt32x2_args = { &UInt32x2_operator_andasg_UInt32x2_arg0 };

/// operator^= with UInt32x2
Variable UInt32x2_operator_xorasg_UInt32x2_arg0;
Function UInt32x2_operator_xorasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_xorasg_UInt32x2_args = { &UInt32x2_operator_xorasg_UInt32x2_arg0 };

/// operator<<= with UInt32x2
Variable UInt32x2_operator_lshasg_UInt32x2_arg0;
Function UInt32x2_operator_lshasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_lshasg_UInt32x2_args = { &UInt32x2_operator_lshasg_UInt32x2_arg0 };

/// operator>>= with UInt32x2
Variable UInt32x2_operator_rhsasg_UInt32x2_arg0;
Function UInt32x2_operator_rhsasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_rhsasg_UInt32x2_args = { &UInt32x2_operator_rhsasg_UInt32x2_arg0 };

UInt32x2::UInt32x2()
{
    this->name = "u32x2";
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    /// u32x2 with Float32x2
    UInt32x2_convert_Float32x2_arg0.name = "val"_c;
    UInt32x2_convert_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    UInt32x2_convert_Float32x2.documentation = "Convert f32x2 to u32x2"_c;
    UInt32x2_convert_Float32x2.name = "u32x2"_c;
    UInt32x2_convert_Float32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_convert_Float32x2.parameters = UInt32x2_convert_Float32x2_args;
    Symbol::Resolved(&UInt32x2_convert_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&UInt32x2_convert_Float32x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Float32
    UInt32x2_splat_Float32_arg0.name = "val"_c;
    UInt32x2_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    UInt32x2_splat_Float32.documentation = "Splat f32x2 to u32x2"_c;
    UInt32x2_splat_Float32.name = "u32x2"_c;
    UInt32x2_splat_Float32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_Float32.parameters = UInt32x2_splat_Float32_args;
    Symbol::Resolved(&UInt32x2_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x2_splat_Float32)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with UInt32x2
    UInt32x2_convert_UInt32x2_arg0.name = "val"_c;
    UInt32x2_convert_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_convert_UInt32x2.documentation = "Convert u32x2 to u32x2"_c;
    UInt32x2_convert_UInt32x2.name = "u32x2"_c;
    UInt32x2_convert_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_convert_UInt32x2.parameters = UInt32x2_convert_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_convert_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_convert_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with UInt32
    UInt32x2_splat_UInt32_arg0.name = "val"_c;
    UInt32x2_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32x2_splat_UInt32.documentation = "Splat u32x2 to u32x2"_c;
    UInt32x2_splat_UInt32.name = "u32x2"_c;
    UInt32x2_splat_UInt32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_UInt32.parameters = UInt32x2_splat_UInt32_args;
    Symbol::Resolved(&UInt32x2_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x2_splat_UInt32)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Int32x2
    UInt32x2_convert_Int32x2_arg0.name = "val"_c;
    UInt32x2_convert_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    UInt32x2_convert_Int32x2.documentation = "Convert i32x2 to u32x2"_c;
    UInt32x2_convert_Int32x2.name = "u32x2"_c;
    UInt32x2_convert_Int32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_convert_Int32x2.parameters = UInt32x2_convert_Int32x2_args;
    Symbol::Resolved(&UInt32x2_convert_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&UInt32x2_convert_Int32x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Int32
    UInt32x2_splat_Int32_arg0.name = "val"_c;
    UInt32x2_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt32x2_splat_Int32.documentation = "Splat i32x2 to u32x2"_c;
    UInt32x2_splat_Int32.name = "u32x2"_c;
    UInt32x2_splat_Int32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_Int32.parameters = UInt32x2_splat_Int32_args;
    Symbol::Resolved(&UInt32x2_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x2_splat_Int32)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Float16x2
    UInt32x2_convert_Float16x2_arg0.name = "val"_c;
    UInt32x2_convert_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    UInt32x2_convert_Float16x2.documentation = "Convert f16x2 to u32x2"_c;
    UInt32x2_convert_Float16x2.name = "u32x2"_c;
    UInt32x2_convert_Float16x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_convert_Float16x2.parameters = UInt32x2_convert_Float16x2_args;
    Symbol::Resolved(&UInt32x2_convert_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&UInt32x2_convert_Float16x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Float16
    UInt32x2_splat_Float16_arg0.name = "val"_c;
    UInt32x2_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    UInt32x2_splat_Float16.documentation = "Splat f16x2 to u32x2"_c;
    UInt32x2_splat_Float16.name = "u32x2"_c;
    UInt32x2_splat_Float16.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_Float16.parameters = UInt32x2_splat_Float16_args;
    Symbol::Resolved(&UInt32x2_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt32x2_splat_Float16)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with UInt16x2
    UInt32x2_convert_UInt16x2_arg0.name = "val"_c;
    UInt32x2_convert_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt32x2_convert_UInt16x2.documentation = "Convert u16x2 to u32x2"_c;
    UInt32x2_convert_UInt16x2.name = "u32x2"_c;
    UInt32x2_convert_UInt16x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_convert_UInt16x2.parameters = UInt32x2_convert_UInt16x2_args;
    Symbol::Resolved(&UInt32x2_convert_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt32x2_convert_UInt16x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with UInt16
    UInt32x2_splat_UInt16_arg0.name = "val"_c;
    UInt32x2_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt32x2_splat_UInt16.documentation = "Splat u16x2 to u32x2"_c;
    UInt32x2_splat_UInt16.name = "u32x2"_c;
    UInt32x2_splat_UInt16.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_UInt16.parameters = UInt32x2_splat_UInt16_args;
    Symbol::Resolved(&UInt32x2_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x2_splat_UInt16)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Int16x2
    UInt32x2_convert_Int16x2_arg0.name = "val"_c;
    UInt32x2_convert_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    UInt32x2_convert_Int16x2.documentation = "Convert i16x2 to u32x2"_c;
    UInt32x2_convert_Int16x2.name = "u32x2"_c;
    UInt32x2_convert_Int16x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_convert_Int16x2.parameters = UInt32x2_convert_Int16x2_args;
    Symbol::Resolved(&UInt32x2_convert_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&UInt32x2_convert_Int16x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Int16
    UInt32x2_splat_Int16_arg0.name = "val"_c;
    UInt32x2_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt32x2_splat_Int16.documentation = "Splat i16x2 to u32x2"_c;
    UInt32x2_splat_Int16.name = "u32x2"_c;
    UInt32x2_splat_Int16.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_Int16.parameters = UInt32x2_splat_Int16_args;
    Symbol::Resolved(&UInt32x2_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x2_splat_Int16)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with UInt32, UInt32
    UInt32x2_ctor0_arg0_UInt32.name = "_arg0"_c;
    UInt32x2_ctor0_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x2_ctor0_arg1_UInt32.name = "_arg1"_c;
    UInt32x2_ctor0_arg1_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x2_ctor0.name = "u32x2"_c;
    UInt32x2_ctor0.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_ctor0.parameters = UInt32x2_ctor0_args;
    Symbol::Resolved(&UInt32x2_ctor0_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x2_ctor0_arg1_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x2_ctor0)->returnTypeSymbol = &UInt32x2Type;

    /// operator[] with Int32
    UInt32x2_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt32x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt32x2_operator_index_Int32.name = "operator[]"_c;
    UInt32x2_operator_index_Int32.returnType = Type::FullType { UInt32Type.name };
    UInt32x2_operator_index_Int32.parameters = UInt32x2_operator_index_Int32_args;
    Symbol::Resolved(&UInt32x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x2_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt32
    UInt32x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt32x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32x2_operator_index_UInt32.name = "operator[]"_c;
    UInt32x2_operator_index_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32x2_operator_index_UInt32.parameters = UInt32x2_operator_index_UInt32_args;
    Symbol::Resolved(&UInt32x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x2_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with Int16
    UInt32x2_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt32x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt32x2_operator_index_Int16.name = "operator[]"_c;
    UInt32x2_operator_index_Int16.returnType = Type::FullType { UInt32Type.name };
    UInt32x2_operator_index_Int16.parameters = UInt32x2_operator_index_Int16_args;
    Symbol::Resolved(&UInt32x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x2_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt16
    UInt32x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt32x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt32x2_operator_index_UInt16.name = "operator[]"_c;
    UInt32x2_operator_index_UInt16.returnType = Type::FullType { UInt32Type.name };
    UInt32x2_operator_index_UInt16.parameters = UInt32x2_operator_index_UInt16_args;
    Symbol::Resolved(&UInt32x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x2_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    /// operator+ with UInt32x2
    UInt32x2_operator_add_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_add_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_add_UInt32x2.name = "operator+"_c;
    UInt32x2_operator_add_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_add_UInt32x2.parameters = UInt32x2_operator_add_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_add_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_add_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator- with UInt32x2
    UInt32x2_operator_sub_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_sub_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_sub_UInt32x2.name = "operator-"_c;
    UInt32x2_operator_sub_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_sub_UInt32x2.parameters = UInt32x2_operator_sub_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_sub_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_sub_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator* with UInt32x2
    UInt32x2_operator_mul_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_mul_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_mul_UInt32x2.name = "operator*"_c;
    UInt32x2_operator_mul_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_mul_UInt32x2.parameters = UInt32x2_operator_mul_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_mul_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_mul_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator/ with UInt32x2
    UInt32x2_operator_div_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_div_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_div_UInt32x2.name = "operator/"_c;
    UInt32x2_operator_div_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_div_UInt32x2.parameters = UInt32x2_operator_div_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_div_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_div_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator% with UInt32x2
    UInt32x2_operator_mod_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_mod_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_mod_UInt32x2.name = "operator%"_c;
    UInt32x2_operator_mod_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_mod_UInt32x2.parameters = UInt32x2_operator_mod_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_mod_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_mod_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator+= with UInt32x2
    UInt32x2_operator_addasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_addasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_addasg_UInt32x2.name = "operator+="_c;
    UInt32x2_operator_addasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_addasg_UInt32x2.parameters = UInt32x2_operator_addasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_addasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_addasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator-= with UInt32x2
    UInt32x2_operator_subasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_subasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_subasg_UInt32x2.name = "operator-="_c;
    UInt32x2_operator_subasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_subasg_UInt32x2.parameters = UInt32x2_operator_subasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_subasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_subasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator*= with UInt32x2
    UInt32x2_operator_mulasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_mulasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_mulasg_UInt32x2.name = "operator*="_c;
    UInt32x2_operator_mulasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_mulasg_UInt32x2.parameters = UInt32x2_operator_mulasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_mulasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_mulasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator/= with UInt32x2
    UInt32x2_operator_divasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_divasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_divasg_UInt32x2.name = "operator/="_c;
    UInt32x2_operator_divasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_divasg_UInt32x2.parameters = UInt32x2_operator_divasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_divasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_divasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator< with UInt32x2
    UInt32x2_operator_lt_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_lt_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_lt_UInt32x2.name = "operator<"_c;
    UInt32x2_operator_lt_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_lt_UInt32x2.parameters = UInt32x2_operator_lt_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_lt_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_lt_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator<= with UInt32x2
    UInt32x2_operator_lte_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_lte_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_lte_UInt32x2.name = "operator<="_c;
    UInt32x2_operator_lte_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_lte_UInt32x2.parameters = UInt32x2_operator_lte_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_lte_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_lte_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator> with UInt32x2
    UInt32x2_operator_gt_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_gt_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_gt_UInt32x2.name = "operator>"_c;
    UInt32x2_operator_gt_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_gt_UInt32x2.parameters = UInt32x2_operator_gt_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_gt_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_gt_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator>= with UInt32x2
    UInt32x2_operator_gte_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_gte_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_gte_UInt32x2.name = "operator>="_c;
    UInt32x2_operator_gte_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_gte_UInt32x2.parameters = UInt32x2_operator_gte_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_gte_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_gte_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator== with UInt32x2
    UInt32x2_operator_eq_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_eq_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_eq_UInt32x2.name = "operator=="_c;
    UInt32x2_operator_eq_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_eq_UInt32x2.parameters = UInt32x2_operator_eq_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_eq_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_eq_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator!= with UInt32x2
    UInt32x2_operator_neq_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_neq_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_neq_UInt32x2.name = "operator!="_c;
    UInt32x2_operator_neq_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_neq_UInt32x2.parameters = UInt32x2_operator_neq_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_neq_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_neq_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator* with Float32
    UInt32x2_operator_scale_Float32_arg0.name = "_arg0"_c;
    UInt32x2_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    UInt32x2_operator_scale_Float32.name = "operator*"_c;
    UInt32x2_operator_scale_Float32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_scale_Float32.parameters = UInt32x2_operator_scale_Float32_args;
    Symbol::Resolved(&UInt32x2_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x2_operator_scale_Float32)->returnTypeSymbol = &UInt32x2Type;

    /// operator* with Float16
    UInt32x2_operator_scale_Float16_arg0.name = "_arg0"_c;
    UInt32x2_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    UInt32x2_operator_scale_Float16.name = "operator*"_c;
    UInt32x2_operator_scale_Float16.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_scale_Float16.parameters = UInt32x2_operator_scale_Float16_args;
    Symbol::Resolved(&UInt32x2_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt32x2_operator_scale_Float16)->returnTypeSymbol = &UInt32x2Type;

    /// operator* with UInt32
    UInt32x2_operator_scale_UInt32_arg0.name = "_arg0"_c;
    UInt32x2_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32x2_operator_scale_UInt32.name = "operator*"_c;
    UInt32x2_operator_scale_UInt32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_scale_UInt32.parameters = UInt32x2_operator_scale_UInt32_args;
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32)->returnTypeSymbol = &UInt32x2Type;

    /// operator* with UInt16
    UInt32x2_operator_scale_UInt16_arg0.name = "_arg0"_c;
    UInt32x2_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt32x2_operator_scale_UInt16.name = "operator*"_c;
    UInt32x2_operator_scale_UInt16.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_scale_UInt16.parameters = UInt32x2_operator_scale_UInt16_args;
    Symbol::Resolved(&UInt32x2_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x2_operator_scale_UInt16)->returnTypeSymbol = &UInt32x2Type;

    /// operator* with Int32
    UInt32x2_operator_scale_Int32_arg0.name = "_arg0"_c;
    UInt32x2_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt32x2_operator_scale_Int32.name = "operator*"_c;
    UInt32x2_operator_scale_Int32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_scale_Int32.parameters = UInt32x2_operator_scale_Int32_args;
    Symbol::Resolved(&UInt32x2_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x2_operator_scale_Int32)->returnTypeSymbol = &UInt32x2Type;

    /// operator* with Int16
    UInt32x2_operator_scale_Int16_arg0.name = "_arg0"_c;
    UInt32x2_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt32x2_operator_scale_Int16.name = "operator*"_c;
    UInt32x2_operator_scale_Int16.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_scale_Int16.parameters = UInt32x2_operator_scale_Int16_args;
    Symbol::Resolved(&UInt32x2_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x2_operator_scale_Int16)->returnTypeSymbol = &UInt32x2Type;

    /// operator| with UInt32x2
    UInt32x2_operator_or_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_or_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_or_UInt32x2.name = "operator|"_c;
    UInt32x2_operator_or_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_or_UInt32x2.parameters = UInt32x2_operator_or_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_or_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_or_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator& with UInt32x2
    UInt32x2_operator_and_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_and_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_and_UInt32x2.name = "operator&"_c;
    UInt32x2_operator_and_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_and_UInt32x2.parameters = UInt32x2_operator_and_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_and_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_and_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator^ with UInt32x2
    UInt32x2_operator_xor_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_xor_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_xor_UInt32x2.name = "operator^"_c;
    UInt32x2_operator_xor_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_xor_UInt32x2.parameters = UInt32x2_operator_xor_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_xor_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_xor_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator<< with UInt32x2
    UInt32x2_operator_lsh_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_lsh_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_lsh_UInt32x2.name = "operator<<"_c;
    UInt32x2_operator_lsh_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_lsh_UInt32x2.parameters = UInt32x2_operator_lsh_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_lsh_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_lsh_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator>> with UInt32x2
    UInt32x2_operator_rsh_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_rsh_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_rsh_UInt32x2.name = "operator>>"_c;
    UInt32x2_operator_rsh_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_rsh_UInt32x2.parameters = UInt32x2_operator_rsh_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_rsh_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_rsh_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator|= with UInt32x2
    UInt32x2_operator_orasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_orasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_orasg_UInt32x2.name = "operator|="_c;
    UInt32x2_operator_orasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_orasg_UInt32x2.parameters = UInt32x2_operator_orasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_orasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_orasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator&= with UInt32x2
    UInt32x2_operator_andasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_andasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_andasg_UInt32x2.name = "operator&="_c;
    UInt32x2_operator_andasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_andasg_UInt32x2.parameters = UInt32x2_operator_andasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_andasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_andasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator^= with UInt32x2
    UInt32x2_operator_xorasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_xorasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_xorasg_UInt32x2.name = "operator^="_c;
    UInt32x2_operator_xorasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_xorasg_UInt32x2.parameters = UInt32x2_operator_xorasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_xorasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_xorasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator<<= with UInt32x2
    UInt32x2_operator_lshasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_lshasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_lshasg_UInt32x2.name = "operator<<="_c;
    UInt32x2_operator_lshasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_lshasg_UInt32x2.parameters = UInt32x2_operator_lshasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_lshasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_lshasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator>>= with UInt32x2
    UInt32x2_operator_rhsasg_UInt32x2_arg0.name = "_arg0"_c;
    UInt32x2_operator_rhsasg_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_rhsasg_UInt32x2.name = "operator>>="_c;
    UInt32x2_operator_rhsasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_rhsasg_UInt32x2.parameters = UInt32x2_operator_rhsasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_rhsasg_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_rhsasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &UInt32x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &UInt32x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &UInt32x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &UInt32x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &UInt32x2_operator_add_UInt32x2 },
    std::pair{ "operator-"_c, &UInt32x2_operator_sub_UInt32x2 },
    std::pair{ "operator*"_c, &UInt32x2_operator_mul_UInt32x2 },
    std::pair{ "operator/"_c, &UInt32x2_operator_div_UInt32x2 },
    std::pair{ "operator%"_c, &UInt32x2_operator_mod_UInt32x2 },
    std::pair{ "operator+="_c, &UInt32x2_operator_addasg_UInt32x2 },
    std::pair{ "operator-="_c, &UInt32x2_operator_subasg_UInt32x2 },
    std::pair{ "operator*="_c, &UInt32x2_operator_mulasg_UInt32x2 },
    std::pair{ "operator/="_c, &UInt32x2_operator_divasg_UInt32x2 },
    std::pair{ "operator<"_c, &UInt32x2_operator_lt_UInt32x2 },
    std::pair{ "operator<="_c, &UInt32x2_operator_lte_UInt32x2 },
    std::pair{ "operator>"_c, &UInt32x2_operator_gt_UInt32x2 },
    std::pair{ "operator>="_c, &UInt32x2_operator_gte_UInt32x2 },
    std::pair{ "operator=="_c, &UInt32x2_operator_eq_UInt32x2 },
    std::pair{ "operator!="_c, &UInt32x2_operator_neq_UInt32x2 },
    std::pair{ "operator*"_c, &UInt32x2_operator_scale_Float32 },
    std::pair{ "operator*"_c, &UInt32x2_operator_scale_Float16 },
    std::pair{ "operator*"_c, &UInt32x2_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &UInt32x2_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &UInt32x2_operator_scale_Int32 },
    std::pair{ "operator*"_c, &UInt32x2_operator_scale_Int16 },
    std::pair{ "operator|"_c, &UInt32x2_operator_or_UInt32x2 },
    std::pair{ "operator&"_c, &UInt32x2_operator_and_UInt32x2 },
    std::pair{ "operator^"_c, &UInt32x2_operator_xor_UInt32x2 },
    std::pair{ "operator<<"_c, &UInt32x2_operator_lsh_UInt32x2 },
    std::pair{ "operator>>"_c, &UInt32x2_operator_rsh_UInt32x2 },
    std::pair{ "operator|="_c, &UInt32x2_operator_orasg_UInt32x2 },
    std::pair{ "operator&="_c, &UInt32x2_operator_andasg_UInt32x2 },
    std::pair{ "operator^="_c, &UInt32x2_operator_xorasg_UInt32x2 },
    std::pair{ "operator<<="_c, &UInt32x2_operator_lshasg_UInt32x2 },
    std::pair{ "operator>>="_c, &UInt32x2_operator_rhsasg_UInt32x2 }
    } };
}
UInt32x2 UInt32x2Type;

/// i32x2 with Float32x2
Variable Int32x2_convert_Float32x2_arg0;
Function Int32x2_convert_Float32x2;
inline constexpr std::array Int32x2_convert_Float32x2_args = { &Int32x2_convert_Float32x2_arg0 };

/// i32x2 with Float32
Variable Int32x2_splat_Float32_arg0;
Function Int32x2_splat_Float32;
inline constexpr std::array Int32x2_splat_Float32_args = { &Int32x2_splat_Float32_arg0 };

/// i32x2 with UInt32x2
Variable Int32x2_convert_UInt32x2_arg0;
Function Int32x2_convert_UInt32x2;
inline constexpr std::array Int32x2_convert_UInt32x2_args = { &Int32x2_convert_UInt32x2_arg0 };

/// i32x2 with UInt32
Variable Int32x2_splat_UInt32_arg0;
Function Int32x2_splat_UInt32;
inline constexpr std::array Int32x2_splat_UInt32_args = { &Int32x2_splat_UInt32_arg0 };

/// i32x2 with Int32x2
Variable Int32x2_convert_Int32x2_arg0;
Function Int32x2_convert_Int32x2;
inline constexpr std::array Int32x2_convert_Int32x2_args = { &Int32x2_convert_Int32x2_arg0 };

/// i32x2 with Int32
Variable Int32x2_splat_Int32_arg0;
Function Int32x2_splat_Int32;
inline constexpr std::array Int32x2_splat_Int32_args = { &Int32x2_splat_Int32_arg0 };

/// i32x2 with Float16x2
Variable Int32x2_convert_Float16x2_arg0;
Function Int32x2_convert_Float16x2;
inline constexpr std::array Int32x2_convert_Float16x2_args = { &Int32x2_convert_Float16x2_arg0 };

/// i32x2 with Float16
Variable Int32x2_splat_Float16_arg0;
Function Int32x2_splat_Float16;
inline constexpr std::array Int32x2_splat_Float16_args = { &Int32x2_splat_Float16_arg0 };

/// i32x2 with UInt16x2
Variable Int32x2_convert_UInt16x2_arg0;
Function Int32x2_convert_UInt16x2;
inline constexpr std::array Int32x2_convert_UInt16x2_args = { &Int32x2_convert_UInt16x2_arg0 };

/// i32x2 with UInt16
Variable Int32x2_splat_UInt16_arg0;
Function Int32x2_splat_UInt16;
inline constexpr std::array Int32x2_splat_UInt16_args = { &Int32x2_splat_UInt16_arg0 };

/// i32x2 with Int16x2
Variable Int32x2_convert_Int16x2_arg0;
Function Int32x2_convert_Int16x2;
inline constexpr std::array Int32x2_convert_Int16x2_args = { &Int32x2_convert_Int16x2_arg0 };

/// i32x2 with Int16
Variable Int32x2_splat_Int16_arg0;
Function Int32x2_splat_Int16;
inline constexpr std::array Int32x2_splat_Int16_args = { &Int32x2_splat_Int16_arg0 };

/// i32x2 with Int32, Int32
Variable Int32x2_ctor0_arg0_Int32;
Variable Int32x2_ctor0_arg1_Int32;
Function Int32x2_ctor0;
inline constexpr std::array Int32x2_ctor0_args = { &Int32x2_ctor0_arg0_Int32, &Int32x2_ctor0_arg1_Int32 };

/// operator[] with Int32
Variable Int32x2_operator_index_Int32_arg0;
Function Int32x2_operator_index_Int32;
inline constexpr std::array Int32x2_operator_index_Int32_args = { &Int32x2_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Int32x2_operator_index_UInt32_arg0;
Function Int32x2_operator_index_UInt32;
inline constexpr std::array Int32x2_operator_index_UInt32_args = { &Int32x2_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Int32x2_operator_index_Int16_arg0;
Function Int32x2_operator_index_Int16;
inline constexpr std::array Int32x2_operator_index_Int16_args = { &Int32x2_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Int32x2_operator_index_UInt16_arg0;
Function Int32x2_operator_index_UInt16;
inline constexpr std::array Int32x2_operator_index_UInt16_args = { &Int32x2_operator_index_UInt16_arg0 };

/// operator+ with Int32x2
Variable Int32x2_operator_add_Int32x2_arg0;
Function Int32x2_operator_add_Int32x2;
inline constexpr std::array Int32x2_operator_add_Int32x2_args = { &Int32x2_operator_add_Int32x2_arg0 };

/// operator- with Int32x2
Variable Int32x2_operator_sub_Int32x2_arg0;
Function Int32x2_operator_sub_Int32x2;
inline constexpr std::array Int32x2_operator_sub_Int32x2_args = { &Int32x2_operator_sub_Int32x2_arg0 };

/// operator* with Int32x2
Variable Int32x2_operator_mul_Int32x2_arg0;
Function Int32x2_operator_mul_Int32x2;
inline constexpr std::array Int32x2_operator_mul_Int32x2_args = { &Int32x2_operator_mul_Int32x2_arg0 };

/// operator/ with Int32x2
Variable Int32x2_operator_div_Int32x2_arg0;
Function Int32x2_operator_div_Int32x2;
inline constexpr std::array Int32x2_operator_div_Int32x2_args = { &Int32x2_operator_div_Int32x2_arg0 };

/// operator% with Int32x2
Variable Int32x2_operator_mod_Int32x2_arg0;
Function Int32x2_operator_mod_Int32x2;
inline constexpr std::array Int32x2_operator_mod_Int32x2_args = { &Int32x2_operator_mod_Int32x2_arg0 };

/// operator+= with Int32x2
Variable Int32x2_operator_addasg_Int32x2_arg0;
Function Int32x2_operator_addasg_Int32x2;
inline constexpr std::array Int32x2_operator_addasg_Int32x2_args = { &Int32x2_operator_addasg_Int32x2_arg0 };

/// operator-= with Int32x2
Variable Int32x2_operator_subasg_Int32x2_arg0;
Function Int32x2_operator_subasg_Int32x2;
inline constexpr std::array Int32x2_operator_subasg_Int32x2_args = { &Int32x2_operator_subasg_Int32x2_arg0 };

/// operator*= with Int32x2
Variable Int32x2_operator_mulasg_Int32x2_arg0;
Function Int32x2_operator_mulasg_Int32x2;
inline constexpr std::array Int32x2_operator_mulasg_Int32x2_args = { &Int32x2_operator_mulasg_Int32x2_arg0 };

/// operator/= with Int32x2
Variable Int32x2_operator_divasg_Int32x2_arg0;
Function Int32x2_operator_divasg_Int32x2;
inline constexpr std::array Int32x2_operator_divasg_Int32x2_args = { &Int32x2_operator_divasg_Int32x2_arg0 };

/// operator< with Int32x2
Variable Int32x2_operator_lt_Int32x2_arg0;
Function Int32x2_operator_lt_Int32x2;
inline constexpr std::array Int32x2_operator_lt_Int32x2_args = { &Int32x2_operator_lt_Int32x2_arg0 };

/// operator<= with Int32x2
Variable Int32x2_operator_lte_Int32x2_arg0;
Function Int32x2_operator_lte_Int32x2;
inline constexpr std::array Int32x2_operator_lte_Int32x2_args = { &Int32x2_operator_lte_Int32x2_arg0 };

/// operator> with Int32x2
Variable Int32x2_operator_gt_Int32x2_arg0;
Function Int32x2_operator_gt_Int32x2;
inline constexpr std::array Int32x2_operator_gt_Int32x2_args = { &Int32x2_operator_gt_Int32x2_arg0 };

/// operator>= with Int32x2
Variable Int32x2_operator_gte_Int32x2_arg0;
Function Int32x2_operator_gte_Int32x2;
inline constexpr std::array Int32x2_operator_gte_Int32x2_args = { &Int32x2_operator_gte_Int32x2_arg0 };

/// operator== with Int32x2
Variable Int32x2_operator_eq_Int32x2_arg0;
Function Int32x2_operator_eq_Int32x2;
inline constexpr std::array Int32x2_operator_eq_Int32x2_args = { &Int32x2_operator_eq_Int32x2_arg0 };

/// operator!= with Int32x2
Variable Int32x2_operator_neq_Int32x2_arg0;
Function Int32x2_operator_neq_Int32x2;
inline constexpr std::array Int32x2_operator_neq_Int32x2_args = { &Int32x2_operator_neq_Int32x2_arg0 };

/// operator* with Float32
Variable Int32x2_operator_scale_Float32_arg0;
Function Int32x2_operator_scale_Float32;
inline constexpr std::array Int32x2_operator_scale_Float32_args = { &Int32x2_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable Int32x2_operator_scale_Float16_arg0;
Function Int32x2_operator_scale_Float16;
inline constexpr std::array Int32x2_operator_scale_Float16_args = { &Int32x2_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable Int32x2_operator_scale_UInt32_arg0;
Function Int32x2_operator_scale_UInt32;
inline constexpr std::array Int32x2_operator_scale_UInt32_args = { &Int32x2_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable Int32x2_operator_scale_UInt16_arg0;
Function Int32x2_operator_scale_UInt16;
inline constexpr std::array Int32x2_operator_scale_UInt16_args = { &Int32x2_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable Int32x2_operator_scale_Int32_arg0;
Function Int32x2_operator_scale_Int32;
inline constexpr std::array Int32x2_operator_scale_Int32_args = { &Int32x2_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable Int32x2_operator_scale_Int16_arg0;
Function Int32x2_operator_scale_Int16;
inline constexpr std::array Int32x2_operator_scale_Int16_args = { &Int32x2_operator_scale_Int16_arg0 };

/// operator| with Int32x2
Variable Int32x2_operator_or_Int32x2_arg0;
Function Int32x2_operator_or_Int32x2;
inline constexpr std::array Int32x2_operator_or_Int32x2_args = { &Int32x2_operator_or_Int32x2_arg0 };

/// operator& with Int32x2
Variable Int32x2_operator_and_Int32x2_arg0;
Function Int32x2_operator_and_Int32x2;
inline constexpr std::array Int32x2_operator_and_Int32x2_args = { &Int32x2_operator_and_Int32x2_arg0 };

/// operator^ with Int32x2
Variable Int32x2_operator_xor_Int32x2_arg0;
Function Int32x2_operator_xor_Int32x2;
inline constexpr std::array Int32x2_operator_xor_Int32x2_args = { &Int32x2_operator_xor_Int32x2_arg0 };

/// operator<< with Int32x2
Variable Int32x2_operator_lsh_Int32x2_arg0;
Function Int32x2_operator_lsh_Int32x2;
inline constexpr std::array Int32x2_operator_lsh_Int32x2_args = { &Int32x2_operator_lsh_Int32x2_arg0 };

/// operator>> with Int32x2
Variable Int32x2_operator_rsh_Int32x2_arg0;
Function Int32x2_operator_rsh_Int32x2;
inline constexpr std::array Int32x2_operator_rsh_Int32x2_args = { &Int32x2_operator_rsh_Int32x2_arg0 };

/// operator|= with Int32x2
Variable Int32x2_operator_orasg_Int32x2_arg0;
Function Int32x2_operator_orasg_Int32x2;
inline constexpr std::array Int32x2_operator_orasg_Int32x2_args = { &Int32x2_operator_orasg_Int32x2_arg0 };

/// operator&= with Int32x2
Variable Int32x2_operator_andasg_Int32x2_arg0;
Function Int32x2_operator_andasg_Int32x2;
inline constexpr std::array Int32x2_operator_andasg_Int32x2_args = { &Int32x2_operator_andasg_Int32x2_arg0 };

/// operator^= with Int32x2
Variable Int32x2_operator_xorasg_Int32x2_arg0;
Function Int32x2_operator_xorasg_Int32x2;
inline constexpr std::array Int32x2_operator_xorasg_Int32x2_args = { &Int32x2_operator_xorasg_Int32x2_arg0 };

/// operator<<= with Int32x2
Variable Int32x2_operator_lshasg_Int32x2_arg0;
Function Int32x2_operator_lshasg_Int32x2;
inline constexpr std::array Int32x2_operator_lshasg_Int32x2_args = { &Int32x2_operator_lshasg_Int32x2_arg0 };

/// operator>>= with Int32x2
Variable Int32x2_operator_rhsasg_Int32x2_arg0;
Function Int32x2_operator_rhsasg_Int32x2;
inline constexpr std::array Int32x2_operator_rhsasg_Int32x2_args = { &Int32x2_operator_rhsasg_Int32x2_arg0 };

Int32x2::Int32x2()
{
    this->name = "i32x2";
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    /// i32x2 with Float32x2
    Int32x2_convert_Float32x2_arg0.name = "val"_c;
    Int32x2_convert_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Int32x2_convert_Float32x2.documentation = "Convert f32x2 to i32x2"_c;
    Int32x2_convert_Float32x2.name = "i32x2"_c;
    Int32x2_convert_Float32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_convert_Float32x2.parameters = Int32x2_convert_Float32x2_args;
    Symbol::Resolved(&Int32x2_convert_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Int32x2_convert_Float32x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Float32
    Int32x2_splat_Float32_arg0.name = "val"_c;
    Int32x2_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Int32x2_splat_Float32.documentation = "Splat f32x2 to i32x2"_c;
    Int32x2_splat_Float32.name = "i32x2"_c;
    Int32x2_splat_Float32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_Float32.parameters = Int32x2_splat_Float32_args;
    Symbol::Resolved(&Int32x2_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x2_splat_Float32)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with UInt32x2
    Int32x2_convert_UInt32x2_arg0.name = "val"_c;
    Int32x2_convert_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Int32x2_convert_UInt32x2.documentation = "Convert u32x2 to i32x2"_c;
    Int32x2_convert_UInt32x2.name = "i32x2"_c;
    Int32x2_convert_UInt32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_convert_UInt32x2.parameters = Int32x2_convert_UInt32x2_args;
    Symbol::Resolved(&Int32x2_convert_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&Int32x2_convert_UInt32x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with UInt32
    Int32x2_splat_UInt32_arg0.name = "val"_c;
    Int32x2_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int32x2_splat_UInt32.documentation = "Splat u32x2 to i32x2"_c;
    Int32x2_splat_UInt32.name = "i32x2"_c;
    Int32x2_splat_UInt32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_UInt32.parameters = Int32x2_splat_UInt32_args;
    Symbol::Resolved(&Int32x2_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x2_splat_UInt32)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Int32x2
    Int32x2_convert_Int32x2_arg0.name = "val"_c;
    Int32x2_convert_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_convert_Int32x2.documentation = "Convert i32x2 to i32x2"_c;
    Int32x2_convert_Int32x2.name = "i32x2"_c;
    Int32x2_convert_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_convert_Int32x2.parameters = Int32x2_convert_Int32x2_args;
    Symbol::Resolved(&Int32x2_convert_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_convert_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Int32
    Int32x2_splat_Int32_arg0.name = "val"_c;
    Int32x2_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32x2_splat_Int32.documentation = "Splat i32x2 to i32x2"_c;
    Int32x2_splat_Int32.name = "i32x2"_c;
    Int32x2_splat_Int32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_Int32.parameters = Int32x2_splat_Int32_args;
    Symbol::Resolved(&Int32x2_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x2_splat_Int32)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Float16x2
    Int32x2_convert_Float16x2_arg0.name = "val"_c;
    Int32x2_convert_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Int32x2_convert_Float16x2.documentation = "Convert f16x2 to i32x2"_c;
    Int32x2_convert_Float16x2.name = "i32x2"_c;
    Int32x2_convert_Float16x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_convert_Float16x2.parameters = Int32x2_convert_Float16x2_args;
    Symbol::Resolved(&Int32x2_convert_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Int32x2_convert_Float16x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Float16
    Int32x2_splat_Float16_arg0.name = "val"_c;
    Int32x2_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Int32x2_splat_Float16.documentation = "Splat f16x2 to i32x2"_c;
    Int32x2_splat_Float16.name = "i32x2"_c;
    Int32x2_splat_Float16.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_Float16.parameters = Int32x2_splat_Float16_args;
    Symbol::Resolved(&Int32x2_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int32x2_splat_Float16)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with UInt16x2
    Int32x2_convert_UInt16x2_arg0.name = "val"_c;
    Int32x2_convert_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Int32x2_convert_UInt16x2.documentation = "Convert u16x2 to i32x2"_c;
    Int32x2_convert_UInt16x2.name = "i32x2"_c;
    Int32x2_convert_UInt16x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_convert_UInt16x2.parameters = Int32x2_convert_UInt16x2_args;
    Symbol::Resolved(&Int32x2_convert_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&Int32x2_convert_UInt16x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with UInt16
    Int32x2_splat_UInt16_arg0.name = "val"_c;
    Int32x2_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int32x2_splat_UInt16.documentation = "Splat u16x2 to i32x2"_c;
    Int32x2_splat_UInt16.name = "i32x2"_c;
    Int32x2_splat_UInt16.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_UInt16.parameters = Int32x2_splat_UInt16_args;
    Symbol::Resolved(&Int32x2_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x2_splat_UInt16)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Int16x2
    Int32x2_convert_Int16x2_arg0.name = "val"_c;
    Int32x2_convert_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int32x2_convert_Int16x2.documentation = "Convert i16x2 to i32x2"_c;
    Int32x2_convert_Int16x2.name = "i32x2"_c;
    Int32x2_convert_Int16x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_convert_Int16x2.parameters = Int32x2_convert_Int16x2_args;
    Symbol::Resolved(&Int32x2_convert_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int32x2_convert_Int16x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Int16
    Int32x2_splat_Int16_arg0.name = "val"_c;
    Int32x2_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int32x2_splat_Int16.documentation = "Splat i16x2 to i32x2"_c;
    Int32x2_splat_Int16.name = "i32x2"_c;
    Int32x2_splat_Int16.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_Int16.parameters = Int32x2_splat_Int16_args;
    Symbol::Resolved(&Int32x2_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x2_splat_Int16)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Int32, Int32
    Int32x2_ctor0_arg0_Int32.name = "_arg0"_c;
    Int32x2_ctor0_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32x2_ctor0_arg1_Int32.name = "_arg1"_c;
    Int32x2_ctor0_arg1_Int32.type = Type::FullType{ Int32Type.name };
    Int32x2_ctor0.name = "i32x2"_c;
    Int32x2_ctor0.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_ctor0.parameters = Int32x2_ctor0_args;
    Symbol::Resolved(&Int32x2_ctor0_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x2_ctor0_arg1_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x2_ctor0)->returnTypeSymbol = &Int32x2Type;

    /// operator[] with Int32
    Int32x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Int32x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32x2_operator_index_Int32.name = "operator[]"_c;
    Int32x2_operator_index_Int32.returnType = Type::FullType { Int32Type.name };
    Int32x2_operator_index_Int32.parameters = Int32x2_operator_index_Int32_args;
    Symbol::Resolved(&Int32x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x2_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt32
    Int32x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int32x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int32x2_operator_index_UInt32.name = "operator[]"_c;
    Int32x2_operator_index_UInt32.returnType = Type::FullType { Int32Type.name };
    Int32x2_operator_index_UInt32.parameters = Int32x2_operator_index_UInt32_args;
    Symbol::Resolved(&Int32x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x2_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    /// operator[] with Int16
    Int32x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Int32x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int32x2_operator_index_Int16.name = "operator[]"_c;
    Int32x2_operator_index_Int16.returnType = Type::FullType { Int32Type.name };
    Int32x2_operator_index_Int16.parameters = Int32x2_operator_index_Int16_args;
    Symbol::Resolved(&Int32x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x2_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt16
    Int32x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int32x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int32x2_operator_index_UInt16.name = "operator[]"_c;
    Int32x2_operator_index_UInt16.returnType = Type::FullType { Int32Type.name };
    Int32x2_operator_index_UInt16.parameters = Int32x2_operator_index_UInt16_args;
    Symbol::Resolved(&Int32x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x2_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    /// operator+ with Int32x2
    Int32x2_operator_add_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_add_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_add_Int32x2.name = "operator+"_c;
    Int32x2_operator_add_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_add_Int32x2.parameters = Int32x2_operator_add_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_add_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_add_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator- with Int32x2
    Int32x2_operator_sub_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_sub_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_sub_Int32x2.name = "operator-"_c;
    Int32x2_operator_sub_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_sub_Int32x2.parameters = Int32x2_operator_sub_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_sub_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_sub_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator* with Int32x2
    Int32x2_operator_mul_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_mul_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_mul_Int32x2.name = "operator*"_c;
    Int32x2_operator_mul_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_mul_Int32x2.parameters = Int32x2_operator_mul_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_mul_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_mul_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator/ with Int32x2
    Int32x2_operator_div_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_div_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_div_Int32x2.name = "operator/"_c;
    Int32x2_operator_div_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_div_Int32x2.parameters = Int32x2_operator_div_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_div_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_div_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator% with Int32x2
    Int32x2_operator_mod_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_mod_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_mod_Int32x2.name = "operator%"_c;
    Int32x2_operator_mod_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_mod_Int32x2.parameters = Int32x2_operator_mod_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_mod_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_mod_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator+= with Int32x2
    Int32x2_operator_addasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_addasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_addasg_Int32x2.name = "operator+="_c;
    Int32x2_operator_addasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_addasg_Int32x2.parameters = Int32x2_operator_addasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_addasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_addasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator-= with Int32x2
    Int32x2_operator_subasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_subasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_subasg_Int32x2.name = "operator-="_c;
    Int32x2_operator_subasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_subasg_Int32x2.parameters = Int32x2_operator_subasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_subasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_subasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator*= with Int32x2
    Int32x2_operator_mulasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_mulasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_mulasg_Int32x2.name = "operator*="_c;
    Int32x2_operator_mulasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_mulasg_Int32x2.parameters = Int32x2_operator_mulasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_mulasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_mulasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator/= with Int32x2
    Int32x2_operator_divasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_divasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_divasg_Int32x2.name = "operator/="_c;
    Int32x2_operator_divasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_divasg_Int32x2.parameters = Int32x2_operator_divasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_divasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_divasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator< with Int32x2
    Int32x2_operator_lt_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_lt_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_lt_Int32x2.name = "operator<"_c;
    Int32x2_operator_lt_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_lt_Int32x2.parameters = Int32x2_operator_lt_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_lt_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_lt_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator<= with Int32x2
    Int32x2_operator_lte_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_lte_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_lte_Int32x2.name = "operator<="_c;
    Int32x2_operator_lte_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_lte_Int32x2.parameters = Int32x2_operator_lte_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_lte_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_lte_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator> with Int32x2
    Int32x2_operator_gt_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_gt_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_gt_Int32x2.name = "operator>"_c;
    Int32x2_operator_gt_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_gt_Int32x2.parameters = Int32x2_operator_gt_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_gt_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_gt_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator>= with Int32x2
    Int32x2_operator_gte_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_gte_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_gte_Int32x2.name = "operator>="_c;
    Int32x2_operator_gte_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_gte_Int32x2.parameters = Int32x2_operator_gte_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_gte_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_gte_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator== with Int32x2
    Int32x2_operator_eq_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_eq_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_eq_Int32x2.name = "operator=="_c;
    Int32x2_operator_eq_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_eq_Int32x2.parameters = Int32x2_operator_eq_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_eq_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_eq_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator!= with Int32x2
    Int32x2_operator_neq_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_neq_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_neq_Int32x2.name = "operator!="_c;
    Int32x2_operator_neq_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_neq_Int32x2.parameters = Int32x2_operator_neq_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_neq_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_neq_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator* with Float32
    Int32x2_operator_scale_Float32_arg0.name = "_arg0"_c;
    Int32x2_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Int32x2_operator_scale_Float32.name = "operator*"_c;
    Int32x2_operator_scale_Float32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_scale_Float32.parameters = Int32x2_operator_scale_Float32_args;
    Symbol::Resolved(&Int32x2_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x2_operator_scale_Float32)->returnTypeSymbol = &Int32x2Type;

    /// operator* with Float16
    Int32x2_operator_scale_Float16_arg0.name = "_arg0"_c;
    Int32x2_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Int32x2_operator_scale_Float16.name = "operator*"_c;
    Int32x2_operator_scale_Float16.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_scale_Float16.parameters = Int32x2_operator_scale_Float16_args;
    Symbol::Resolved(&Int32x2_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int32x2_operator_scale_Float16)->returnTypeSymbol = &Int32x2Type;

    /// operator* with UInt32
    Int32x2_operator_scale_UInt32_arg0.name = "_arg0"_c;
    Int32x2_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int32x2_operator_scale_UInt32.name = "operator*"_c;
    Int32x2_operator_scale_UInt32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_scale_UInt32.parameters = Int32x2_operator_scale_UInt32_args;
    Symbol::Resolved(&Int32x2_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x2_operator_scale_UInt32)->returnTypeSymbol = &Int32x2Type;

    /// operator* with UInt16
    Int32x2_operator_scale_UInt16_arg0.name = "_arg0"_c;
    Int32x2_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int32x2_operator_scale_UInt16.name = "operator*"_c;
    Int32x2_operator_scale_UInt16.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_scale_UInt16.parameters = Int32x2_operator_scale_UInt16_args;
    Symbol::Resolved(&Int32x2_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x2_operator_scale_UInt16)->returnTypeSymbol = &Int32x2Type;

    /// operator* with Int32
    Int32x2_operator_scale_Int32_arg0.name = "_arg0"_c;
    Int32x2_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32x2_operator_scale_Int32.name = "operator*"_c;
    Int32x2_operator_scale_Int32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_scale_Int32.parameters = Int32x2_operator_scale_Int32_args;
    Symbol::Resolved(&Int32x2_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x2_operator_scale_Int32)->returnTypeSymbol = &Int32x2Type;

    /// operator* with Int16
    Int32x2_operator_scale_Int16_arg0.name = "_arg0"_c;
    Int32x2_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int32x2_operator_scale_Int16.name = "operator*"_c;
    Int32x2_operator_scale_Int16.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_scale_Int16.parameters = Int32x2_operator_scale_Int16_args;
    Symbol::Resolved(&Int32x2_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x2_operator_scale_Int16)->returnTypeSymbol = &Int32x2Type;

    /// operator| with Int32x2
    Int32x2_operator_or_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_or_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_or_Int32x2.name = "operator|"_c;
    Int32x2_operator_or_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_or_Int32x2.parameters = Int32x2_operator_or_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_or_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_or_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator& with Int32x2
    Int32x2_operator_and_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_and_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_and_Int32x2.name = "operator&"_c;
    Int32x2_operator_and_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_and_Int32x2.parameters = Int32x2_operator_and_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_and_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_and_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator^ with Int32x2
    Int32x2_operator_xor_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_xor_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_xor_Int32x2.name = "operator^"_c;
    Int32x2_operator_xor_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_xor_Int32x2.parameters = Int32x2_operator_xor_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_xor_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_xor_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator<< with Int32x2
    Int32x2_operator_lsh_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_lsh_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_lsh_Int32x2.name = "operator<<"_c;
    Int32x2_operator_lsh_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_lsh_Int32x2.parameters = Int32x2_operator_lsh_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_lsh_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_lsh_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator>> with Int32x2
    Int32x2_operator_rsh_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_rsh_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_rsh_Int32x2.name = "operator>>"_c;
    Int32x2_operator_rsh_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_rsh_Int32x2.parameters = Int32x2_operator_rsh_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_rsh_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_rsh_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator|= with Int32x2
    Int32x2_operator_orasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_orasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_orasg_Int32x2.name = "operator|="_c;
    Int32x2_operator_orasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_orasg_Int32x2.parameters = Int32x2_operator_orasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_orasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_orasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator&= with Int32x2
    Int32x2_operator_andasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_andasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_andasg_Int32x2.name = "operator&="_c;
    Int32x2_operator_andasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_andasg_Int32x2.parameters = Int32x2_operator_andasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_andasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_andasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator^= with Int32x2
    Int32x2_operator_xorasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_xorasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_xorasg_Int32x2.name = "operator^="_c;
    Int32x2_operator_xorasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_xorasg_Int32x2.parameters = Int32x2_operator_xorasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_xorasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_xorasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator<<= with Int32x2
    Int32x2_operator_lshasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_lshasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_lshasg_Int32x2.name = "operator<<="_c;
    Int32x2_operator_lshasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_lshasg_Int32x2.parameters = Int32x2_operator_lshasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_lshasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_lshasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator>>= with Int32x2
    Int32x2_operator_rhsasg_Int32x2_arg0.name = "_arg0"_c;
    Int32x2_operator_rhsasg_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_rhsasg_Int32x2.name = "operator>>="_c;
    Int32x2_operator_rhsasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_rhsasg_Int32x2.parameters = Int32x2_operator_rhsasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_rhsasg_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_rhsasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Int32x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int32x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int32x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int32x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int32x2_operator_add_Int32x2 },
    std::pair{ "operator-"_c, &Int32x2_operator_sub_Int32x2 },
    std::pair{ "operator*"_c, &Int32x2_operator_mul_Int32x2 },
    std::pair{ "operator/"_c, &Int32x2_operator_div_Int32x2 },
    std::pair{ "operator%"_c, &Int32x2_operator_mod_Int32x2 },
    std::pair{ "operator+="_c, &Int32x2_operator_addasg_Int32x2 },
    std::pair{ "operator-="_c, &Int32x2_operator_subasg_Int32x2 },
    std::pair{ "operator*="_c, &Int32x2_operator_mulasg_Int32x2 },
    std::pair{ "operator/="_c, &Int32x2_operator_divasg_Int32x2 },
    std::pair{ "operator<"_c, &Int32x2_operator_lt_Int32x2 },
    std::pair{ "operator<="_c, &Int32x2_operator_lte_Int32x2 },
    std::pair{ "operator>"_c, &Int32x2_operator_gt_Int32x2 },
    std::pair{ "operator>="_c, &Int32x2_operator_gte_Int32x2 },
    std::pair{ "operator=="_c, &Int32x2_operator_eq_Int32x2 },
    std::pair{ "operator!="_c, &Int32x2_operator_neq_Int32x2 },
    std::pair{ "operator*"_c, &Int32x2_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int32x2_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int32x2_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int32x2_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int32x2_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int32x2_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int32x2_operator_or_Int32x2 },
    std::pair{ "operator&"_c, &Int32x2_operator_and_Int32x2 },
    std::pair{ "operator^"_c, &Int32x2_operator_xor_Int32x2 },
    std::pair{ "operator<<"_c, &Int32x2_operator_lsh_Int32x2 },
    std::pair{ "operator>>"_c, &Int32x2_operator_rsh_Int32x2 },
    std::pair{ "operator|="_c, &Int32x2_operator_orasg_Int32x2 },
    std::pair{ "operator&="_c, &Int32x2_operator_andasg_Int32x2 },
    std::pair{ "operator^="_c, &Int32x2_operator_xorasg_Int32x2 },
    std::pair{ "operator<<="_c, &Int32x2_operator_lshasg_Int32x2 },
    std::pair{ "operator>>="_c, &Int32x2_operator_rhsasg_Int32x2 }
    } };
}
Int32x2 Int32x2Type;

/// b8x2 with UInt32x2
Variable Bool8x2_convert_UInt32x2_arg0;
Function Bool8x2_convert_UInt32x2;
inline constexpr std::array Bool8x2_convert_UInt32x2_args = { &Bool8x2_convert_UInt32x2_arg0 };

/// b8x2 with UInt32
Variable Bool8x2_splat_UInt32_arg0;
Function Bool8x2_splat_UInt32;
inline constexpr std::array Bool8x2_splat_UInt32_args = { &Bool8x2_splat_UInt32_arg0 };

/// b8x2 with Int32x2
Variable Bool8x2_convert_Int32x2_arg0;
Function Bool8x2_convert_Int32x2;
inline constexpr std::array Bool8x2_convert_Int32x2_args = { &Bool8x2_convert_Int32x2_arg0 };

/// b8x2 with Int32
Variable Bool8x2_splat_Int32_arg0;
Function Bool8x2_splat_Int32;
inline constexpr std::array Bool8x2_splat_Int32_args = { &Bool8x2_splat_Int32_arg0 };

/// b8x2 with UInt16x2
Variable Bool8x2_convert_UInt16x2_arg0;
Function Bool8x2_convert_UInt16x2;
inline constexpr std::array Bool8x2_convert_UInt16x2_args = { &Bool8x2_convert_UInt16x2_arg0 };

/// b8x2 with UInt16
Variable Bool8x2_splat_UInt16_arg0;
Function Bool8x2_splat_UInt16;
inline constexpr std::array Bool8x2_splat_UInt16_args = { &Bool8x2_splat_UInt16_arg0 };

/// b8x2 with Int16x2
Variable Bool8x2_convert_Int16x2_arg0;
Function Bool8x2_convert_Int16x2;
inline constexpr std::array Bool8x2_convert_Int16x2_args = { &Bool8x2_convert_Int16x2_arg0 };

/// b8x2 with Int16
Variable Bool8x2_splat_Int16_arg0;
Function Bool8x2_splat_Int16;
inline constexpr std::array Bool8x2_splat_Int16_args = { &Bool8x2_splat_Int16_arg0 };

/// b8x2 with Bool8, Bool8
Variable Bool8x2_ctor0_arg0_Bool8;
Variable Bool8x2_ctor0_arg1_Bool8;
Function Bool8x2_ctor0;
inline constexpr std::array Bool8x2_ctor0_args = { &Bool8x2_ctor0_arg0_Bool8, &Bool8x2_ctor0_arg1_Bool8 };

/// operator[] with Int32
Variable Bool8x2_operator_index_Int32_arg0;
Function Bool8x2_operator_index_Int32;
inline constexpr std::array Bool8x2_operator_index_Int32_args = { &Bool8x2_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Bool8x2_operator_index_UInt32_arg0;
Function Bool8x2_operator_index_UInt32;
inline constexpr std::array Bool8x2_operator_index_UInt32_args = { &Bool8x2_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Bool8x2_operator_index_Int16_arg0;
Function Bool8x2_operator_index_Int16;
inline constexpr std::array Bool8x2_operator_index_Int16_args = { &Bool8x2_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Bool8x2_operator_index_UInt16_arg0;
Function Bool8x2_operator_index_UInt16;
inline constexpr std::array Bool8x2_operator_index_UInt16_args = { &Bool8x2_operator_index_UInt16_arg0 };

/// operator|| with Bool8x2
Variable Bool8x2_operator_oror_Bool8x2_arg0;
Function Bool8x2_operator_oror_Bool8x2;
inline constexpr std::array Bool8x2_operator_oror_Bool8x2_args = { &Bool8x2_operator_oror_Bool8x2_arg0 };

/// operator&& with Bool8x2
Variable Bool8x2_operator_andand_Bool8x2_arg0;
Function Bool8x2_operator_andand_Bool8x2;
inline constexpr std::array Bool8x2_operator_andand_Bool8x2_args = { &Bool8x2_operator_andand_Bool8x2_arg0 };

/// operator== with Bool8x2
Variable Bool8x2_operator_eq_Bool8x2_arg0;
Function Bool8x2_operator_eq_Bool8x2;
inline constexpr std::array Bool8x2_operator_eq_Bool8x2_args = { &Bool8x2_operator_eq_Bool8x2_arg0 };

/// operator!= with Bool8x2
Variable Bool8x2_operator_neq_Bool8x2_arg0;
Function Bool8x2_operator_neq_Bool8x2;
inline constexpr std::array Bool8x2_operator_neq_Bool8x2_args = { &Bool8x2_operator_neq_Bool8x2_arg0 };

Bool8x2::Bool8x2()
{
    this->name = "b8x2";
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    /// b8x2 with UInt32x2
    Bool8x2_convert_UInt32x2_arg0.name = "val"_c;
    Bool8x2_convert_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Bool8x2_convert_UInt32x2.documentation = "Convert u32x2 to b8x2"_c;
    Bool8x2_convert_UInt32x2.name = "b8x2"_c;
    Bool8x2_convert_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_convert_UInt32x2.parameters = Bool8x2_convert_UInt32x2_args;
    Symbol::Resolved(&Bool8x2_convert_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&Bool8x2_convert_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with UInt32
    Bool8x2_splat_UInt32_arg0.name = "val"_c;
    Bool8x2_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Bool8x2_splat_UInt32.documentation = "Splat u32x2 to b8x2"_c;
    Bool8x2_splat_UInt32.name = "b8x2"_c;
    Bool8x2_splat_UInt32.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_splat_UInt32.parameters = Bool8x2_splat_UInt32_args;
    Symbol::Resolved(&Bool8x2_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x2_splat_UInt32)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Int32x2
    Bool8x2_convert_Int32x2_arg0.name = "val"_c;
    Bool8x2_convert_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Bool8x2_convert_Int32x2.documentation = "Convert i32x2 to b8x2"_c;
    Bool8x2_convert_Int32x2.name = "b8x2"_c;
    Bool8x2_convert_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_convert_Int32x2.parameters = Bool8x2_convert_Int32x2_args;
    Symbol::Resolved(&Bool8x2_convert_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Bool8x2_convert_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Int32
    Bool8x2_splat_Int32_arg0.name = "val"_c;
    Bool8x2_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Bool8x2_splat_Int32.documentation = "Splat i32x2 to b8x2"_c;
    Bool8x2_splat_Int32.name = "b8x2"_c;
    Bool8x2_splat_Int32.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_splat_Int32.parameters = Bool8x2_splat_Int32_args;
    Symbol::Resolved(&Bool8x2_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x2_splat_Int32)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with UInt16x2
    Bool8x2_convert_UInt16x2_arg0.name = "val"_c;
    Bool8x2_convert_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Bool8x2_convert_UInt16x2.documentation = "Convert u16x2 to b8x2"_c;
    Bool8x2_convert_UInt16x2.name = "b8x2"_c;
    Bool8x2_convert_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_convert_UInt16x2.parameters = Bool8x2_convert_UInt16x2_args;
    Symbol::Resolved(&Bool8x2_convert_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&Bool8x2_convert_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with UInt16
    Bool8x2_splat_UInt16_arg0.name = "val"_c;
    Bool8x2_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Bool8x2_splat_UInt16.documentation = "Splat u16x2 to b8x2"_c;
    Bool8x2_splat_UInt16.name = "b8x2"_c;
    Bool8x2_splat_UInt16.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_splat_UInt16.parameters = Bool8x2_splat_UInt16_args;
    Symbol::Resolved(&Bool8x2_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x2_splat_UInt16)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Int16x2
    Bool8x2_convert_Int16x2_arg0.name = "val"_c;
    Bool8x2_convert_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Bool8x2_convert_Int16x2.documentation = "Convert i16x2 to b8x2"_c;
    Bool8x2_convert_Int16x2.name = "b8x2"_c;
    Bool8x2_convert_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_convert_Int16x2.parameters = Bool8x2_convert_Int16x2_args;
    Symbol::Resolved(&Bool8x2_convert_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Bool8x2_convert_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Int16
    Bool8x2_splat_Int16_arg0.name = "val"_c;
    Bool8x2_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Bool8x2_splat_Int16.documentation = "Splat i16x2 to b8x2"_c;
    Bool8x2_splat_Int16.name = "b8x2"_c;
    Bool8x2_splat_Int16.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_splat_Int16.parameters = Bool8x2_splat_Int16_args;
    Symbol::Resolved(&Bool8x2_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x2_splat_Int16)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Bool8, Bool8
    Bool8x2_ctor0_arg0_Bool8.name = "_arg0"_c;
    Bool8x2_ctor0_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x2_ctor0_arg1_Bool8.name = "_arg1"_c;
    Bool8x2_ctor0_arg1_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x2_ctor0.name = "b8x2"_c;
    Bool8x2_ctor0.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_ctor0.parameters = Bool8x2_ctor0_args;
    Symbol::Resolved(&Bool8x2_ctor0_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x2_ctor0_arg1_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x2_ctor0)->returnTypeSymbol = &Bool8x2Type;

    /// operator[] with Int32
    Bool8x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Bool8x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Bool8x2_operator_index_Int32.name = "operator[]"_c;
    Bool8x2_operator_index_Int32.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_index_Int32.parameters = Bool8x2_operator_index_Int32_args;
    Symbol::Resolved(&Bool8x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x2_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt32
    Bool8x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Bool8x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Bool8x2_operator_index_UInt32.name = "operator[]"_c;
    Bool8x2_operator_index_UInt32.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_index_UInt32.parameters = Bool8x2_operator_index_UInt32_args;
    Symbol::Resolved(&Bool8x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x2_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with Int16
    Bool8x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Bool8x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Bool8x2_operator_index_Int16.name = "operator[]"_c;
    Bool8x2_operator_index_Int16.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_index_Int16.parameters = Bool8x2_operator_index_Int16_args;
    Symbol::Resolved(&Bool8x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x2_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt16
    Bool8x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Bool8x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Bool8x2_operator_index_UInt16.name = "operator[]"_c;
    Bool8x2_operator_index_UInt16.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_index_UInt16.parameters = Bool8x2_operator_index_UInt16_args;
    Symbol::Resolved(&Bool8x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x2_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator|| with Bool8x2
    Bool8x2_operator_oror_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_oror_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Bool8x2_operator_oror_Bool8x2.name = "operator||"_c;
    Bool8x2_operator_oror_Bool8x2.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_oror_Bool8x2.parameters = Bool8x2_operator_oror_Bool8x2_args;
    Symbol::Resolved(&Bool8x2_operator_oror_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x2_operator_oror_Bool8x2)->returnTypeSymbol = &Bool8Type;

    /// operator&& with Bool8x2
    Bool8x2_operator_andand_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_andand_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Bool8x2_operator_andand_Bool8x2.name = "operator&&"_c;
    Bool8x2_operator_andand_Bool8x2.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_andand_Bool8x2.parameters = Bool8x2_operator_andand_Bool8x2_args;
    Symbol::Resolved(&Bool8x2_operator_andand_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x2_operator_andand_Bool8x2)->returnTypeSymbol = &Bool8Type;

    /// operator== with Bool8x2
    Bool8x2_operator_eq_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_eq_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Bool8x2_operator_eq_Bool8x2.name = "operator=="_c;
    Bool8x2_operator_eq_Bool8x2.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_eq_Bool8x2.parameters = Bool8x2_operator_eq_Bool8x2_args;
    Symbol::Resolved(&Bool8x2_operator_eq_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x2_operator_eq_Bool8x2)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Bool8x2
    Bool8x2_operator_neq_Bool8x2_arg0.name = "_arg0"_c;
    Bool8x2_operator_neq_Bool8x2_arg0.type = Type::FullType{ Bool8x2Type.name };
    Bool8x2_operator_neq_Bool8x2.name = "operator!="_c;
    Bool8x2_operator_neq_Bool8x2.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_neq_Bool8x2.parameters = Bool8x2_operator_neq_Bool8x2_args;
    Symbol::Resolved(&Bool8x2_operator_neq_Bool8x2_arg0)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x2_operator_neq_Bool8x2)->returnTypeSymbol = &Bool8Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Bool8x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Bool8x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Bool8x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Bool8x2_operator_index_UInt16 },
    std::pair{ "operator||"_c, &Bool8x2_operator_oror_Bool8x2 },
    std::pair{ "operator&&"_c, &Bool8x2_operator_andand_Bool8x2 },
    std::pair{ "operator=="_c, &Bool8x2_operator_eq_Bool8x2 },
    std::pair{ "operator!="_c, &Bool8x2_operator_neq_Bool8x2 }
    } };
}
Bool8x2 Bool8x2Type;

/// f16x2 with Float32x2
Variable Float16x2_convert_Float32x2_arg0;
Function Float16x2_convert_Float32x2;
inline constexpr std::array Float16x2_convert_Float32x2_args = { &Float16x2_convert_Float32x2_arg0 };

/// f16x2 with Float32
Variable Float16x2_splat_Float32_arg0;
Function Float16x2_splat_Float32;
inline constexpr std::array Float16x2_splat_Float32_args = { &Float16x2_splat_Float32_arg0 };

/// f16x2 with UInt32x2
Variable Float16x2_convert_UInt32x2_arg0;
Function Float16x2_convert_UInt32x2;
inline constexpr std::array Float16x2_convert_UInt32x2_args = { &Float16x2_convert_UInt32x2_arg0 };

/// f16x2 with UInt32
Variable Float16x2_splat_UInt32_arg0;
Function Float16x2_splat_UInt32;
inline constexpr std::array Float16x2_splat_UInt32_args = { &Float16x2_splat_UInt32_arg0 };

/// f16x2 with Int32x2
Variable Float16x2_convert_Int32x2_arg0;
Function Float16x2_convert_Int32x2;
inline constexpr std::array Float16x2_convert_Int32x2_args = { &Float16x2_convert_Int32x2_arg0 };

/// f16x2 with Int32
Variable Float16x2_splat_Int32_arg0;
Function Float16x2_splat_Int32;
inline constexpr std::array Float16x2_splat_Int32_args = { &Float16x2_splat_Int32_arg0 };

/// f16x2 with Float16x2
Variable Float16x2_convert_Float16x2_arg0;
Function Float16x2_convert_Float16x2;
inline constexpr std::array Float16x2_convert_Float16x2_args = { &Float16x2_convert_Float16x2_arg0 };

/// f16x2 with Float16
Variable Float16x2_splat_Float16_arg0;
Function Float16x2_splat_Float16;
inline constexpr std::array Float16x2_splat_Float16_args = { &Float16x2_splat_Float16_arg0 };

/// f16x2 with UInt16x2
Variable Float16x2_convert_UInt16x2_arg0;
Function Float16x2_convert_UInt16x2;
inline constexpr std::array Float16x2_convert_UInt16x2_args = { &Float16x2_convert_UInt16x2_arg0 };

/// f16x2 with UInt16
Variable Float16x2_splat_UInt16_arg0;
Function Float16x2_splat_UInt16;
inline constexpr std::array Float16x2_splat_UInt16_args = { &Float16x2_splat_UInt16_arg0 };

/// f16x2 with Int16x2
Variable Float16x2_convert_Int16x2_arg0;
Function Float16x2_convert_Int16x2;
inline constexpr std::array Float16x2_convert_Int16x2_args = { &Float16x2_convert_Int16x2_arg0 };

/// f16x2 with Int16
Variable Float16x2_splat_Int16_arg0;
Function Float16x2_splat_Int16;
inline constexpr std::array Float16x2_splat_Int16_args = { &Float16x2_splat_Int16_arg0 };

/// f16x2 with Float16, Float16
Variable Float16x2_ctor0_arg0_Float16;
Variable Float16x2_ctor0_arg1_Float16;
Function Float16x2_ctor0;
inline constexpr std::array Float16x2_ctor0_args = { &Float16x2_ctor0_arg0_Float16, &Float16x2_ctor0_arg1_Float16 };

/// operator[] with Int32
Variable Float16x2_operator_index_Int32_arg0;
Function Float16x2_operator_index_Int32;
inline constexpr std::array Float16x2_operator_index_Int32_args = { &Float16x2_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float16x2_operator_index_UInt32_arg0;
Function Float16x2_operator_index_UInt32;
inline constexpr std::array Float16x2_operator_index_UInt32_args = { &Float16x2_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float16x2_operator_index_Int16_arg0;
Function Float16x2_operator_index_Int16;
inline constexpr std::array Float16x2_operator_index_Int16_args = { &Float16x2_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float16x2_operator_index_UInt16_arg0;
Function Float16x2_operator_index_UInt16;
inline constexpr std::array Float16x2_operator_index_UInt16_args = { &Float16x2_operator_index_UInt16_arg0 };

/// operator+ with Float16x2
Variable Float16x2_operator_add_Float16x2_arg0;
Function Float16x2_operator_add_Float16x2;
inline constexpr std::array Float16x2_operator_add_Float16x2_args = { &Float16x2_operator_add_Float16x2_arg0 };

/// operator- with Float16x2
Variable Float16x2_operator_sub_Float16x2_arg0;
Function Float16x2_operator_sub_Float16x2;
inline constexpr std::array Float16x2_operator_sub_Float16x2_args = { &Float16x2_operator_sub_Float16x2_arg0 };

/// operator* with Float16x2
Variable Float16x2_operator_mul_Float16x2_arg0;
Function Float16x2_operator_mul_Float16x2;
inline constexpr std::array Float16x2_operator_mul_Float16x2_args = { &Float16x2_operator_mul_Float16x2_arg0 };

/// operator/ with Float16x2
Variable Float16x2_operator_div_Float16x2_arg0;
Function Float16x2_operator_div_Float16x2;
inline constexpr std::array Float16x2_operator_div_Float16x2_args = { &Float16x2_operator_div_Float16x2_arg0 };

/// operator% with Float16x2
Variable Float16x2_operator_mod_Float16x2_arg0;
Function Float16x2_operator_mod_Float16x2;
inline constexpr std::array Float16x2_operator_mod_Float16x2_args = { &Float16x2_operator_mod_Float16x2_arg0 };

/// operator+= with Float16x2
Variable Float16x2_operator_addasg_Float16x2_arg0;
Function Float16x2_operator_addasg_Float16x2;
inline constexpr std::array Float16x2_operator_addasg_Float16x2_args = { &Float16x2_operator_addasg_Float16x2_arg0 };

/// operator-= with Float16x2
Variable Float16x2_operator_subasg_Float16x2_arg0;
Function Float16x2_operator_subasg_Float16x2;
inline constexpr std::array Float16x2_operator_subasg_Float16x2_args = { &Float16x2_operator_subasg_Float16x2_arg0 };

/// operator*= with Float16x2
Variable Float16x2_operator_mulasg_Float16x2_arg0;
Function Float16x2_operator_mulasg_Float16x2;
inline constexpr std::array Float16x2_operator_mulasg_Float16x2_args = { &Float16x2_operator_mulasg_Float16x2_arg0 };

/// operator/= with Float16x2
Variable Float16x2_operator_divasg_Float16x2_arg0;
Function Float16x2_operator_divasg_Float16x2;
inline constexpr std::array Float16x2_operator_divasg_Float16x2_args = { &Float16x2_operator_divasg_Float16x2_arg0 };

/// operator< with Float16x2
Variable Float16x2_operator_lt_Float16x2_arg0;
Function Float16x2_operator_lt_Float16x2;
inline constexpr std::array Float16x2_operator_lt_Float16x2_args = { &Float16x2_operator_lt_Float16x2_arg0 };

/// operator<= with Float16x2
Variable Float16x2_operator_lte_Float16x2_arg0;
Function Float16x2_operator_lte_Float16x2;
inline constexpr std::array Float16x2_operator_lte_Float16x2_args = { &Float16x2_operator_lte_Float16x2_arg0 };

/// operator> with Float16x2
Variable Float16x2_operator_gt_Float16x2_arg0;
Function Float16x2_operator_gt_Float16x2;
inline constexpr std::array Float16x2_operator_gt_Float16x2_args = { &Float16x2_operator_gt_Float16x2_arg0 };

/// operator>= with Float16x2
Variable Float16x2_operator_gte_Float16x2_arg0;
Function Float16x2_operator_gte_Float16x2;
inline constexpr std::array Float16x2_operator_gte_Float16x2_args = { &Float16x2_operator_gte_Float16x2_arg0 };

/// operator== with Float16x2
Variable Float16x2_operator_eq_Float16x2_arg0;
Function Float16x2_operator_eq_Float16x2;
inline constexpr std::array Float16x2_operator_eq_Float16x2_args = { &Float16x2_operator_eq_Float16x2_arg0 };

/// operator!= with Float16x2
Variable Float16x2_operator_neq_Float16x2_arg0;
Function Float16x2_operator_neq_Float16x2;
inline constexpr std::array Float16x2_operator_neq_Float16x2_args = { &Float16x2_operator_neq_Float16x2_arg0 };

/// operator* with Float32
Variable Float16x2_operator_scale_Float32_arg0;
Function Float16x2_operator_scale_Float32;
inline constexpr std::array Float16x2_operator_scale_Float32_args = { &Float16x2_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable Float16x2_operator_scale_Float16_arg0;
Function Float16x2_operator_scale_Float16;
inline constexpr std::array Float16x2_operator_scale_Float16_args = { &Float16x2_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable Float16x2_operator_scale_UInt32_arg0;
Function Float16x2_operator_scale_UInt32;
inline constexpr std::array Float16x2_operator_scale_UInt32_args = { &Float16x2_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable Float16x2_operator_scale_UInt16_arg0;
Function Float16x2_operator_scale_UInt16;
inline constexpr std::array Float16x2_operator_scale_UInt16_args = { &Float16x2_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable Float16x2_operator_scale_Int32_arg0;
Function Float16x2_operator_scale_Int32;
inline constexpr std::array Float16x2_operator_scale_Int32_args = { &Float16x2_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable Float16x2_operator_scale_Int16_arg0;
Function Float16x2_operator_scale_Int16;
inline constexpr std::array Float16x2_operator_scale_Int16_args = { &Float16x2_operator_scale_Int16_arg0 };

/// operator* with Float32x2x2
Variable Float16x2_operator_mul_Float32x2x2_arg0;
Function Float16x2_operator_mul_Float32x2x2;
inline constexpr std::array Float16x2_operator_mul_Float32x2x2_args = { &Float16x2_operator_mul_Float32x2x2_arg0 };

/// operator* with Float32x2x3
Variable Float16x2_operator_mul_Float32x2x3_arg0;
Function Float16x2_operator_mul_Float32x2x3;
inline constexpr std::array Float16x2_operator_mul_Float32x2x3_args = { &Float16x2_operator_mul_Float32x2x3_arg0 };

/// operator* with Float32x2x4
Variable Float16x2_operator_mul_Float32x2x4_arg0;
Function Float16x2_operator_mul_Float32x2x4;
inline constexpr std::array Float16x2_operator_mul_Float32x2x4_args = { &Float16x2_operator_mul_Float32x2x4_arg0 };

Float16x2::Float16x2()
{
    this->name = "f16x2";
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// f16x2 with Float32x2
    Float16x2_convert_Float32x2_arg0.name = "val"_c;
    Float16x2_convert_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Float16x2_convert_Float32x2.documentation = "Convert f32x2 to f16x2"_c;
    Float16x2_convert_Float32x2.name = "f16x2"_c;
    Float16x2_convert_Float32x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_convert_Float32x2.parameters = Float16x2_convert_Float32x2_args;
    Symbol::Resolved(&Float16x2_convert_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float16x2_convert_Float32x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Float32
    Float16x2_splat_Float32_arg0.name = "val"_c;
    Float16x2_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float16x2_splat_Float32.documentation = "Splat f32x2 to f16x2"_c;
    Float16x2_splat_Float32.name = "f16x2"_c;
    Float16x2_splat_Float32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_Float32.parameters = Float16x2_splat_Float32_args;
    Symbol::Resolved(&Float16x2_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float16x2_splat_Float32)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with UInt32x2
    Float16x2_convert_UInt32x2_arg0.name = "val"_c;
    Float16x2_convert_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Float16x2_convert_UInt32x2.documentation = "Convert u32x2 to f16x2"_c;
    Float16x2_convert_UInt32x2.name = "f16x2"_c;
    Float16x2_convert_UInt32x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_convert_UInt32x2.parameters = Float16x2_convert_UInt32x2_args;
    Symbol::Resolved(&Float16x2_convert_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&Float16x2_convert_UInt32x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with UInt32
    Float16x2_splat_UInt32_arg0.name = "val"_c;
    Float16x2_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x2_splat_UInt32.documentation = "Splat u32x2 to f16x2"_c;
    Float16x2_splat_UInt32.name = "f16x2"_c;
    Float16x2_splat_UInt32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_UInt32.parameters = Float16x2_splat_UInt32_args;
    Symbol::Resolved(&Float16x2_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2_splat_UInt32)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Int32x2
    Float16x2_convert_Int32x2_arg0.name = "val"_c;
    Float16x2_convert_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Float16x2_convert_Int32x2.documentation = "Convert i32x2 to f16x2"_c;
    Float16x2_convert_Int32x2.name = "f16x2"_c;
    Float16x2_convert_Int32x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_convert_Int32x2.parameters = Float16x2_convert_Int32x2_args;
    Symbol::Resolved(&Float16x2_convert_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Float16x2_convert_Int32x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Int32
    Float16x2_splat_Int32_arg0.name = "val"_c;
    Float16x2_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x2_splat_Int32.documentation = "Splat i32x2 to f16x2"_c;
    Float16x2_splat_Int32.name = "f16x2"_c;
    Float16x2_splat_Int32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_Int32.parameters = Float16x2_splat_Int32_args;
    Symbol::Resolved(&Float16x2_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2_splat_Int32)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Float16x2
    Float16x2_convert_Float16x2_arg0.name = "val"_c;
    Float16x2_convert_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_convert_Float16x2.documentation = "Convert f16x2 to f16x2"_c;
    Float16x2_convert_Float16x2.name = "f16x2"_c;
    Float16x2_convert_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_convert_Float16x2.parameters = Float16x2_convert_Float16x2_args;
    Symbol::Resolved(&Float16x2_convert_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_convert_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Float16
    Float16x2_splat_Float16_arg0.name = "val"_c;
    Float16x2_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16x2_splat_Float16.documentation = "Splat f16x2 to f16x2"_c;
    Float16x2_splat_Float16.name = "f16x2"_c;
    Float16x2_splat_Float16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_Float16.parameters = Float16x2_splat_Float16_args;
    Symbol::Resolved(&Float16x2_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2_splat_Float16)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with UInt16x2
    Float16x2_convert_UInt16x2_arg0.name = "val"_c;
    Float16x2_convert_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Float16x2_convert_UInt16x2.documentation = "Convert u16x2 to f16x2"_c;
    Float16x2_convert_UInt16x2.name = "f16x2"_c;
    Float16x2_convert_UInt16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_convert_UInt16x2.parameters = Float16x2_convert_UInt16x2_args;
    Symbol::Resolved(&Float16x2_convert_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&Float16x2_convert_UInt16x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with UInt16
    Float16x2_splat_UInt16_arg0.name = "val"_c;
    Float16x2_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x2_splat_UInt16.documentation = "Splat u16x2 to f16x2"_c;
    Float16x2_splat_UInt16.name = "f16x2"_c;
    Float16x2_splat_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_UInt16.parameters = Float16x2_splat_UInt16_args;
    Symbol::Resolved(&Float16x2_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2_splat_UInt16)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Int16x2
    Float16x2_convert_Int16x2_arg0.name = "val"_c;
    Float16x2_convert_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Float16x2_convert_Int16x2.documentation = "Convert i16x2 to f16x2"_c;
    Float16x2_convert_Int16x2.name = "f16x2"_c;
    Float16x2_convert_Int16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_convert_Int16x2.parameters = Float16x2_convert_Int16x2_args;
    Symbol::Resolved(&Float16x2_convert_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Float16x2_convert_Int16x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Int16
    Float16x2_splat_Int16_arg0.name = "val"_c;
    Float16x2_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x2_splat_Int16.documentation = "Splat i16x2 to f16x2"_c;
    Float16x2_splat_Int16.name = "f16x2"_c;
    Float16x2_splat_Int16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_Int16.parameters = Float16x2_splat_Int16_args;
    Symbol::Resolved(&Float16x2_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2_splat_Int16)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Float16, Float16
    Float16x2_ctor0_arg0_Float16.name = "_arg0"_c;
    Float16x2_ctor0_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16x2_ctor0_arg1_Float16.name = "_arg1"_c;
    Float16x2_ctor0_arg1_Float16.type = Type::FullType{ Float16Type.name };
    Float16x2_ctor0.name = "f16x2"_c;
    Float16x2_ctor0.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_ctor0.parameters = Float16x2_ctor0_args;
    Symbol::Resolved(&Float16x2_ctor0_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2_ctor0_arg1_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2_ctor0)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with Int32
    Float16x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x2_operator_index_Int32.name = "operator[]"_c;
    Float16x2_operator_index_Int32.returnType = Type::FullType { Float16Type.name };
    Float16x2_operator_index_Int32.parameters = Float16x2_operator_index_Int32_args;
    Symbol::Resolved(&Float16x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt32
    Float16x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x2_operator_index_UInt32.name = "operator[]"_c;
    Float16x2_operator_index_UInt32.returnType = Type::FullType { Float16Type.name };
    Float16x2_operator_index_UInt32.parameters = Float16x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    /// operator[] with Int16
    Float16x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x2_operator_index_Int16.name = "operator[]"_c;
    Float16x2_operator_index_Int16.returnType = Type::FullType { Float16Type.name };
    Float16x2_operator_index_Int16.parameters = Float16x2_operator_index_Int16_args;
    Symbol::Resolved(&Float16x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt16
    Float16x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x2_operator_index_UInt16.name = "operator[]"_c;
    Float16x2_operator_index_UInt16.returnType = Type::FullType { Float16Type.name };
    Float16x2_operator_index_UInt16.parameters = Float16x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    /// operator+ with Float16x2
    Float16x2_operator_add_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_add_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_add_Float16x2.name = "operator+"_c;
    Float16x2_operator_add_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_add_Float16x2.parameters = Float16x2_operator_add_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_add_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_add_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator- with Float16x2
    Float16x2_operator_sub_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_sub_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_sub_Float16x2.name = "operator-"_c;
    Float16x2_operator_sub_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_sub_Float16x2.parameters = Float16x2_operator_sub_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_sub_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_sub_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float16x2
    Float16x2_operator_mul_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_mul_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_mul_Float16x2.name = "operator*"_c;
    Float16x2_operator_mul_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_mul_Float16x2.parameters = Float16x2_operator_mul_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_mul_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_mul_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator/ with Float16x2
    Float16x2_operator_div_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_div_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_div_Float16x2.name = "operator/"_c;
    Float16x2_operator_div_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_div_Float16x2.parameters = Float16x2_operator_div_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_div_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_div_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator% with Float16x2
    Float16x2_operator_mod_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_mod_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_mod_Float16x2.name = "operator%"_c;
    Float16x2_operator_mod_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_mod_Float16x2.parameters = Float16x2_operator_mod_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_mod_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_mod_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator+= with Float16x2
    Float16x2_operator_addasg_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_addasg_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_addasg_Float16x2.name = "operator+="_c;
    Float16x2_operator_addasg_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_addasg_Float16x2.parameters = Float16x2_operator_addasg_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_addasg_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_addasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator-= with Float16x2
    Float16x2_operator_subasg_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_subasg_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_subasg_Float16x2.name = "operator-="_c;
    Float16x2_operator_subasg_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_subasg_Float16x2.parameters = Float16x2_operator_subasg_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_subasg_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_subasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator*= with Float16x2
    Float16x2_operator_mulasg_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_mulasg_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_mulasg_Float16x2.name = "operator*="_c;
    Float16x2_operator_mulasg_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_mulasg_Float16x2.parameters = Float16x2_operator_mulasg_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_mulasg_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_mulasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator/= with Float16x2
    Float16x2_operator_divasg_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_divasg_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_divasg_Float16x2.name = "operator/="_c;
    Float16x2_operator_divasg_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_divasg_Float16x2.parameters = Float16x2_operator_divasg_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_divasg_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_divasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator< with Float16x2
    Float16x2_operator_lt_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_lt_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_lt_Float16x2.name = "operator<"_c;
    Float16x2_operator_lt_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_lt_Float16x2.parameters = Float16x2_operator_lt_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_lt_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_lt_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator<= with Float16x2
    Float16x2_operator_lte_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_lte_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_lte_Float16x2.name = "operator<="_c;
    Float16x2_operator_lte_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_lte_Float16x2.parameters = Float16x2_operator_lte_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_lte_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_lte_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator> with Float16x2
    Float16x2_operator_gt_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_gt_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_gt_Float16x2.name = "operator>"_c;
    Float16x2_operator_gt_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_gt_Float16x2.parameters = Float16x2_operator_gt_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_gt_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_gt_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator>= with Float16x2
    Float16x2_operator_gte_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_gte_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_gte_Float16x2.name = "operator>="_c;
    Float16x2_operator_gte_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_gte_Float16x2.parameters = Float16x2_operator_gte_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_gte_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_gte_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator== with Float16x2
    Float16x2_operator_eq_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_eq_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_eq_Float16x2.name = "operator=="_c;
    Float16x2_operator_eq_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_eq_Float16x2.parameters = Float16x2_operator_eq_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_eq_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_eq_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator!= with Float16x2
    Float16x2_operator_neq_Float16x2_arg0.name = "_arg0"_c;
    Float16x2_operator_neq_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_neq_Float16x2.name = "operator!="_c;
    Float16x2_operator_neq_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_neq_Float16x2.parameters = Float16x2_operator_neq_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_neq_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_neq_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float32
    Float16x2_operator_scale_Float32_arg0.name = "_arg0"_c;
    Float16x2_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float16x2_operator_scale_Float32.name = "operator*"_c;
    Float16x2_operator_scale_Float32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_scale_Float32.parameters = Float16x2_operator_scale_Float32_args;
    Symbol::Resolved(&Float16x2_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float16x2_operator_scale_Float32)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float16
    Float16x2_operator_scale_Float16_arg0.name = "_arg0"_c;
    Float16x2_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16x2_operator_scale_Float16.name = "operator*"_c;
    Float16x2_operator_scale_Float16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_scale_Float16.parameters = Float16x2_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x2_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2_operator_scale_Float16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with UInt32
    Float16x2_operator_scale_UInt32_arg0.name = "_arg0"_c;
    Float16x2_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x2_operator_scale_UInt32.name = "operator*"_c;
    Float16x2_operator_scale_UInt32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_scale_UInt32.parameters = Float16x2_operator_scale_UInt32_args;
    Symbol::Resolved(&Float16x2_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2_operator_scale_UInt32)->returnTypeSymbol = &Float16x2Type;

    /// operator* with UInt16
    Float16x2_operator_scale_UInt16_arg0.name = "_arg0"_c;
    Float16x2_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x2_operator_scale_UInt16.name = "operator*"_c;
    Float16x2_operator_scale_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_scale_UInt16.parameters = Float16x2_operator_scale_UInt16_args;
    Symbol::Resolved(&Float16x2_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2_operator_scale_UInt16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Int32
    Float16x2_operator_scale_Int32_arg0.name = "_arg0"_c;
    Float16x2_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x2_operator_scale_Int32.name = "operator*"_c;
    Float16x2_operator_scale_Int32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_scale_Int32.parameters = Float16x2_operator_scale_Int32_args;
    Symbol::Resolved(&Float16x2_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2_operator_scale_Int32)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Int16
    Float16x2_operator_scale_Int16_arg0.name = "_arg0"_c;
    Float16x2_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x2_operator_scale_Int16.name = "operator*"_c;
    Float16x2_operator_scale_Int16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_scale_Int16.parameters = Float16x2_operator_scale_Int16_args;
    Symbol::Resolved(&Float16x2_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2_operator_scale_Int16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float32x2x2
    Float16x2_operator_mul_Float32x2x2_arg0.name = "_arg0"_c;
    Float16x2_operator_mul_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Float16x2_operator_mul_Float32x2x2.name = "operator*"_c;
    Float16x2_operator_mul_Float32x2x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_mul_Float32x2x2.parameters = Float16x2_operator_mul_Float32x2x2_args;
    Symbol::Resolved(&Float16x2_operator_mul_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float16x2_operator_mul_Float32x2x2)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float32x2x3
    Float16x2_operator_mul_Float32x2x3_arg0.name = "_arg0"_c;
    Float16x2_operator_mul_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Float16x2_operator_mul_Float32x2x3.name = "operator*"_c;
    Float16x2_operator_mul_Float32x2x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x2_operator_mul_Float32x2x3.parameters = Float16x2_operator_mul_Float32x2x3_args;
    Symbol::Resolved(&Float16x2_operator_mul_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float16x2_operator_mul_Float32x2x3)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float32x2x4
    Float16x2_operator_mul_Float32x2x4_arg0.name = "_arg0"_c;
    Float16x2_operator_mul_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Float16x2_operator_mul_Float32x2x4.name = "operator*"_c;
    Float16x2_operator_mul_Float32x2x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x2_operator_mul_Float32x2x4.parameters = Float16x2_operator_mul_Float32x2x4_args;
    Symbol::Resolved(&Float16x2_operator_mul_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float16x2_operator_mul_Float32x2x4)->returnTypeSymbol = &Float16x4Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Float16x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2_operator_add_Float16x2 },
    std::pair{ "operator-"_c, &Float16x2_operator_sub_Float16x2 },
    std::pair{ "operator*"_c, &Float16x2_operator_mul_Float16x2 },
    std::pair{ "operator/"_c, &Float16x2_operator_div_Float16x2 },
    std::pair{ "operator%"_c, &Float16x2_operator_mod_Float16x2 },
    std::pair{ "operator+="_c, &Float16x2_operator_addasg_Float16x2 },
    std::pair{ "operator-="_c, &Float16x2_operator_subasg_Float16x2 },
    std::pair{ "operator*="_c, &Float16x2_operator_mulasg_Float16x2 },
    std::pair{ "operator/="_c, &Float16x2_operator_divasg_Float16x2 },
    std::pair{ "operator<"_c, &Float16x2_operator_lt_Float16x2 },
    std::pair{ "operator<="_c, &Float16x2_operator_lte_Float16x2 },
    std::pair{ "operator>"_c, &Float16x2_operator_gt_Float16x2 },
    std::pair{ "operator>="_c, &Float16x2_operator_gte_Float16x2 },
    std::pair{ "operator=="_c, &Float16x2_operator_eq_Float16x2 },
    std::pair{ "operator!="_c, &Float16x2_operator_neq_Float16x2 },
    std::pair{ "operator*"_c, &Float16x2_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Float16x2_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Float16x2_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Float16x2_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Float16x2_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Float16x2_operator_scale_Int16 },
    std::pair{ "operator*"_c, &Float16x2_operator_mul_Float32x2x2 },
    std::pair{ "operator*"_c, &Float16x2_operator_mul_Float32x2x3 },
    std::pair{ "operator*"_c, &Float16x2_operator_mul_Float32x2x4 }
    } };
}
Float16x2 Float16x2Type;

/// u16x2 with Float32x2
Variable UInt16x2_convert_Float32x2_arg0;
Function UInt16x2_convert_Float32x2;
inline constexpr std::array UInt16x2_convert_Float32x2_args = { &UInt16x2_convert_Float32x2_arg0 };

/// u16x2 with Float32
Variable UInt16x2_splat_Float32_arg0;
Function UInt16x2_splat_Float32;
inline constexpr std::array UInt16x2_splat_Float32_args = { &UInt16x2_splat_Float32_arg0 };

/// u16x2 with UInt32x2
Variable UInt16x2_convert_UInt32x2_arg0;
Function UInt16x2_convert_UInt32x2;
inline constexpr std::array UInt16x2_convert_UInt32x2_args = { &UInt16x2_convert_UInt32x2_arg0 };

/// u16x2 with UInt32
Variable UInt16x2_splat_UInt32_arg0;
Function UInt16x2_splat_UInt32;
inline constexpr std::array UInt16x2_splat_UInt32_args = { &UInt16x2_splat_UInt32_arg0 };

/// u16x2 with Int32x2
Variable UInt16x2_convert_Int32x2_arg0;
Function UInt16x2_convert_Int32x2;
inline constexpr std::array UInt16x2_convert_Int32x2_args = { &UInt16x2_convert_Int32x2_arg0 };

/// u16x2 with Int32
Variable UInt16x2_splat_Int32_arg0;
Function UInt16x2_splat_Int32;
inline constexpr std::array UInt16x2_splat_Int32_args = { &UInt16x2_splat_Int32_arg0 };

/// u16x2 with Float16x2
Variable UInt16x2_convert_Float16x2_arg0;
Function UInt16x2_convert_Float16x2;
inline constexpr std::array UInt16x2_convert_Float16x2_args = { &UInt16x2_convert_Float16x2_arg0 };

/// u16x2 with Float16
Variable UInt16x2_splat_Float16_arg0;
Function UInt16x2_splat_Float16;
inline constexpr std::array UInt16x2_splat_Float16_args = { &UInt16x2_splat_Float16_arg0 };

/// u16x2 with UInt16x2
Variable UInt16x2_convert_UInt16x2_arg0;
Function UInt16x2_convert_UInt16x2;
inline constexpr std::array UInt16x2_convert_UInt16x2_args = { &UInt16x2_convert_UInt16x2_arg0 };

/// u16x2 with UInt16
Variable UInt16x2_splat_UInt16_arg0;
Function UInt16x2_splat_UInt16;
inline constexpr std::array UInt16x2_splat_UInt16_args = { &UInt16x2_splat_UInt16_arg0 };

/// u16x2 with Int16x2
Variable UInt16x2_convert_Int16x2_arg0;
Function UInt16x2_convert_Int16x2;
inline constexpr std::array UInt16x2_convert_Int16x2_args = { &UInt16x2_convert_Int16x2_arg0 };

/// u16x2 with Int16
Variable UInt16x2_splat_Int16_arg0;
Function UInt16x2_splat_Int16;
inline constexpr std::array UInt16x2_splat_Int16_args = { &UInt16x2_splat_Int16_arg0 };

/// u16x2 with UInt16, UInt16
Variable UInt16x2_ctor0_arg0_UInt16;
Variable UInt16x2_ctor0_arg1_UInt16;
Function UInt16x2_ctor0;
inline constexpr std::array UInt16x2_ctor0_args = { &UInt16x2_ctor0_arg0_UInt16, &UInt16x2_ctor0_arg1_UInt16 };

/// operator[] with Int32
Variable UInt16x2_operator_index_Int32_arg0;
Function UInt16x2_operator_index_Int32;
inline constexpr std::array UInt16x2_operator_index_Int32_args = { &UInt16x2_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable UInt16x2_operator_index_UInt32_arg0;
Function UInt16x2_operator_index_UInt32;
inline constexpr std::array UInt16x2_operator_index_UInt32_args = { &UInt16x2_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable UInt16x2_operator_index_Int16_arg0;
Function UInt16x2_operator_index_Int16;
inline constexpr std::array UInt16x2_operator_index_Int16_args = { &UInt16x2_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable UInt16x2_operator_index_UInt16_arg0;
Function UInt16x2_operator_index_UInt16;
inline constexpr std::array UInt16x2_operator_index_UInt16_args = { &UInt16x2_operator_index_UInt16_arg0 };

/// operator+ with UInt16x2
Variable UInt16x2_operator_add_UInt16x2_arg0;
Function UInt16x2_operator_add_UInt16x2;
inline constexpr std::array UInt16x2_operator_add_UInt16x2_args = { &UInt16x2_operator_add_UInt16x2_arg0 };

/// operator- with UInt16x2
Variable UInt16x2_operator_sub_UInt16x2_arg0;
Function UInt16x2_operator_sub_UInt16x2;
inline constexpr std::array UInt16x2_operator_sub_UInt16x2_args = { &UInt16x2_operator_sub_UInt16x2_arg0 };

/// operator* with UInt16x2
Variable UInt16x2_operator_mul_UInt16x2_arg0;
Function UInt16x2_operator_mul_UInt16x2;
inline constexpr std::array UInt16x2_operator_mul_UInt16x2_args = { &UInt16x2_operator_mul_UInt16x2_arg0 };

/// operator/ with UInt16x2
Variable UInt16x2_operator_div_UInt16x2_arg0;
Function UInt16x2_operator_div_UInt16x2;
inline constexpr std::array UInt16x2_operator_div_UInt16x2_args = { &UInt16x2_operator_div_UInt16x2_arg0 };

/// operator% with UInt16x2
Variable UInt16x2_operator_mod_UInt16x2_arg0;
Function UInt16x2_operator_mod_UInt16x2;
inline constexpr std::array UInt16x2_operator_mod_UInt16x2_args = { &UInt16x2_operator_mod_UInt16x2_arg0 };

/// operator+= with UInt16x2
Variable UInt16x2_operator_addasg_UInt16x2_arg0;
Function UInt16x2_operator_addasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_addasg_UInt16x2_args = { &UInt16x2_operator_addasg_UInt16x2_arg0 };

/// operator-= with UInt16x2
Variable UInt16x2_operator_subasg_UInt16x2_arg0;
Function UInt16x2_operator_subasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_subasg_UInt16x2_args = { &UInt16x2_operator_subasg_UInt16x2_arg0 };

/// operator*= with UInt16x2
Variable UInt16x2_operator_mulasg_UInt16x2_arg0;
Function UInt16x2_operator_mulasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_mulasg_UInt16x2_args = { &UInt16x2_operator_mulasg_UInt16x2_arg0 };

/// operator/= with UInt16x2
Variable UInt16x2_operator_divasg_UInt16x2_arg0;
Function UInt16x2_operator_divasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_divasg_UInt16x2_args = { &UInt16x2_operator_divasg_UInt16x2_arg0 };

/// operator< with UInt16x2
Variable UInt16x2_operator_lt_UInt16x2_arg0;
Function UInt16x2_operator_lt_UInt16x2;
inline constexpr std::array UInt16x2_operator_lt_UInt16x2_args = { &UInt16x2_operator_lt_UInt16x2_arg0 };

/// operator<= with UInt16x2
Variable UInt16x2_operator_lte_UInt16x2_arg0;
Function UInt16x2_operator_lte_UInt16x2;
inline constexpr std::array UInt16x2_operator_lte_UInt16x2_args = { &UInt16x2_operator_lte_UInt16x2_arg0 };

/// operator> with UInt16x2
Variable UInt16x2_operator_gt_UInt16x2_arg0;
Function UInt16x2_operator_gt_UInt16x2;
inline constexpr std::array UInt16x2_operator_gt_UInt16x2_args = { &UInt16x2_operator_gt_UInt16x2_arg0 };

/// operator>= with UInt16x2
Variable UInt16x2_operator_gte_UInt16x2_arg0;
Function UInt16x2_operator_gte_UInt16x2;
inline constexpr std::array UInt16x2_operator_gte_UInt16x2_args = { &UInt16x2_operator_gte_UInt16x2_arg0 };

/// operator== with UInt16x2
Variable UInt16x2_operator_eq_UInt16x2_arg0;
Function UInt16x2_operator_eq_UInt16x2;
inline constexpr std::array UInt16x2_operator_eq_UInt16x2_args = { &UInt16x2_operator_eq_UInt16x2_arg0 };

/// operator!= with UInt16x2
Variable UInt16x2_operator_neq_UInt16x2_arg0;
Function UInt16x2_operator_neq_UInt16x2;
inline constexpr std::array UInt16x2_operator_neq_UInt16x2_args = { &UInt16x2_operator_neq_UInt16x2_arg0 };

/// operator* with Float32
Variable UInt16x2_operator_scale_Float32_arg0;
Function UInt16x2_operator_scale_Float32;
inline constexpr std::array UInt16x2_operator_scale_Float32_args = { &UInt16x2_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable UInt16x2_operator_scale_Float16_arg0;
Function UInt16x2_operator_scale_Float16;
inline constexpr std::array UInt16x2_operator_scale_Float16_args = { &UInt16x2_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable UInt16x2_operator_scale_UInt32_arg0;
Function UInt16x2_operator_scale_UInt32;
inline constexpr std::array UInt16x2_operator_scale_UInt32_args = { &UInt16x2_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable UInt16x2_operator_scale_UInt16_arg0;
Function UInt16x2_operator_scale_UInt16;
inline constexpr std::array UInt16x2_operator_scale_UInt16_args = { &UInt16x2_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable UInt16x2_operator_scale_Int32_arg0;
Function UInt16x2_operator_scale_Int32;
inline constexpr std::array UInt16x2_operator_scale_Int32_args = { &UInt16x2_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable UInt16x2_operator_scale_Int16_arg0;
Function UInt16x2_operator_scale_Int16;
inline constexpr std::array UInt16x2_operator_scale_Int16_args = { &UInt16x2_operator_scale_Int16_arg0 };

/// operator| with UInt16x2
Variable UInt16x2_operator_or_UInt16x2_arg0;
Function UInt16x2_operator_or_UInt16x2;
inline constexpr std::array UInt16x2_operator_or_UInt16x2_args = { &UInt16x2_operator_or_UInt16x2_arg0 };

/// operator& with UInt16x2
Variable UInt16x2_operator_and_UInt16x2_arg0;
Function UInt16x2_operator_and_UInt16x2;
inline constexpr std::array UInt16x2_operator_and_UInt16x2_args = { &UInt16x2_operator_and_UInt16x2_arg0 };

/// operator^ with UInt16x2
Variable UInt16x2_operator_xor_UInt16x2_arg0;
Function UInt16x2_operator_xor_UInt16x2;
inline constexpr std::array UInt16x2_operator_xor_UInt16x2_args = { &UInt16x2_operator_xor_UInt16x2_arg0 };

/// operator<< with UInt16x2
Variable UInt16x2_operator_lsh_UInt16x2_arg0;
Function UInt16x2_operator_lsh_UInt16x2;
inline constexpr std::array UInt16x2_operator_lsh_UInt16x2_args = { &UInt16x2_operator_lsh_UInt16x2_arg0 };

/// operator>> with UInt16x2
Variable UInt16x2_operator_rsh_UInt16x2_arg0;
Function UInt16x2_operator_rsh_UInt16x2;
inline constexpr std::array UInt16x2_operator_rsh_UInt16x2_args = { &UInt16x2_operator_rsh_UInt16x2_arg0 };

/// operator|= with UInt16x2
Variable UInt16x2_operator_orasg_UInt16x2_arg0;
Function UInt16x2_operator_orasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_orasg_UInt16x2_args = { &UInt16x2_operator_orasg_UInt16x2_arg0 };

/// operator&= with UInt16x2
Variable UInt16x2_operator_andasg_UInt16x2_arg0;
Function UInt16x2_operator_andasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_andasg_UInt16x2_args = { &UInt16x2_operator_andasg_UInt16x2_arg0 };

/// operator^= with UInt16x2
Variable UInt16x2_operator_xorasg_UInt16x2_arg0;
Function UInt16x2_operator_xorasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_xorasg_UInt16x2_args = { &UInt16x2_operator_xorasg_UInt16x2_arg0 };

/// operator<<= with UInt16x2
Variable UInt16x2_operator_lshasg_UInt16x2_arg0;
Function UInt16x2_operator_lshasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_lshasg_UInt16x2_args = { &UInt16x2_operator_lshasg_UInt16x2_arg0 };

/// operator>>= with UInt16x2
Variable UInt16x2_operator_rhsasg_UInt16x2_arg0;
Function UInt16x2_operator_rhsasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_rhsasg_UInt16x2_args = { &UInt16x2_operator_rhsasg_UInt16x2_arg0 };

UInt16x2::UInt16x2()
{
    this->name = "u16x2";
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    /// u16x2 with Float32x2
    UInt16x2_convert_Float32x2_arg0.name = "val"_c;
    UInt16x2_convert_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    UInt16x2_convert_Float32x2.documentation = "Convert f32x2 to u16x2"_c;
    UInt16x2_convert_Float32x2.name = "u16x2"_c;
    UInt16x2_convert_Float32x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_convert_Float32x2.parameters = UInt16x2_convert_Float32x2_args;
    Symbol::Resolved(&UInt16x2_convert_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&UInt16x2_convert_Float32x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Float32
    UInt16x2_splat_Float32_arg0.name = "val"_c;
    UInt16x2_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    UInt16x2_splat_Float32.documentation = "Splat f32x2 to u16x2"_c;
    UInt16x2_splat_Float32.name = "u16x2"_c;
    UInt16x2_splat_Float32.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_Float32.parameters = UInt16x2_splat_Float32_args;
    Symbol::Resolved(&UInt16x2_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt16x2_splat_Float32)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with UInt32x2
    UInt16x2_convert_UInt32x2_arg0.name = "val"_c;
    UInt16x2_convert_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    UInt16x2_convert_UInt32x2.documentation = "Convert u32x2 to u16x2"_c;
    UInt16x2_convert_UInt32x2.name = "u16x2"_c;
    UInt16x2_convert_UInt32x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_convert_UInt32x2.parameters = UInt16x2_convert_UInt32x2_args;
    Symbol::Resolved(&UInt16x2_convert_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt16x2_convert_UInt32x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with UInt32
    UInt16x2_splat_UInt32_arg0.name = "val"_c;
    UInt16x2_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt16x2_splat_UInt32.documentation = "Splat u32x2 to u16x2"_c;
    UInt16x2_splat_UInt32.name = "u16x2"_c;
    UInt16x2_splat_UInt32.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_UInt32.parameters = UInt16x2_splat_UInt32_args;
    Symbol::Resolved(&UInt16x2_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x2_splat_UInt32)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Int32x2
    UInt16x2_convert_Int32x2_arg0.name = "val"_c;
    UInt16x2_convert_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    UInt16x2_convert_Int32x2.documentation = "Convert i32x2 to u16x2"_c;
    UInt16x2_convert_Int32x2.name = "u16x2"_c;
    UInt16x2_convert_Int32x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_convert_Int32x2.parameters = UInt16x2_convert_Int32x2_args;
    Symbol::Resolved(&UInt16x2_convert_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&UInt16x2_convert_Int32x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Int32
    UInt16x2_splat_Int32_arg0.name = "val"_c;
    UInt16x2_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt16x2_splat_Int32.documentation = "Splat i32x2 to u16x2"_c;
    UInt16x2_splat_Int32.name = "u16x2"_c;
    UInt16x2_splat_Int32.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_Int32.parameters = UInt16x2_splat_Int32_args;
    Symbol::Resolved(&UInt16x2_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x2_splat_Int32)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Float16x2
    UInt16x2_convert_Float16x2_arg0.name = "val"_c;
    UInt16x2_convert_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    UInt16x2_convert_Float16x2.documentation = "Convert f16x2 to u16x2"_c;
    UInt16x2_convert_Float16x2.name = "u16x2"_c;
    UInt16x2_convert_Float16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_convert_Float16x2.parameters = UInt16x2_convert_Float16x2_args;
    Symbol::Resolved(&UInt16x2_convert_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&UInt16x2_convert_Float16x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Float16
    UInt16x2_splat_Float16_arg0.name = "val"_c;
    UInt16x2_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    UInt16x2_splat_Float16.documentation = "Splat f16x2 to u16x2"_c;
    UInt16x2_splat_Float16.name = "u16x2"_c;
    UInt16x2_splat_Float16.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_Float16.parameters = UInt16x2_splat_Float16_args;
    Symbol::Resolved(&UInt16x2_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x2_splat_Float16)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with UInt16x2
    UInt16x2_convert_UInt16x2_arg0.name = "val"_c;
    UInt16x2_convert_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_convert_UInt16x2.documentation = "Convert u16x2 to u16x2"_c;
    UInt16x2_convert_UInt16x2.name = "u16x2"_c;
    UInt16x2_convert_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_convert_UInt16x2.parameters = UInt16x2_convert_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_convert_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_convert_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with UInt16
    UInt16x2_splat_UInt16_arg0.name = "val"_c;
    UInt16x2_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16x2_splat_UInt16.documentation = "Splat u16x2 to u16x2"_c;
    UInt16x2_splat_UInt16.name = "u16x2"_c;
    UInt16x2_splat_UInt16.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_UInt16.parameters = UInt16x2_splat_UInt16_args;
    Symbol::Resolved(&UInt16x2_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x2_splat_UInt16)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Int16x2
    UInt16x2_convert_Int16x2_arg0.name = "val"_c;
    UInt16x2_convert_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    UInt16x2_convert_Int16x2.documentation = "Convert i16x2 to u16x2"_c;
    UInt16x2_convert_Int16x2.name = "u16x2"_c;
    UInt16x2_convert_Int16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_convert_Int16x2.parameters = UInt16x2_convert_Int16x2_args;
    Symbol::Resolved(&UInt16x2_convert_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&UInt16x2_convert_Int16x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Int16
    UInt16x2_splat_Int16_arg0.name = "val"_c;
    UInt16x2_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt16x2_splat_Int16.documentation = "Splat i16x2 to u16x2"_c;
    UInt16x2_splat_Int16.name = "u16x2"_c;
    UInt16x2_splat_Int16.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_Int16.parameters = UInt16x2_splat_Int16_args;
    Symbol::Resolved(&UInt16x2_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x2_splat_Int16)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with UInt16, UInt16
    UInt16x2_ctor0_arg0_UInt16.name = "_arg0"_c;
    UInt16x2_ctor0_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x2_ctor0_arg1_UInt16.name = "_arg1"_c;
    UInt16x2_ctor0_arg1_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x2_ctor0.name = "u16x2"_c;
    UInt16x2_ctor0.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_ctor0.parameters = UInt16x2_ctor0_args;
    Symbol::Resolved(&UInt16x2_ctor0_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x2_ctor0_arg1_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x2_ctor0)->returnTypeSymbol = &UInt16x2Type;

    /// operator[] with Int32
    UInt16x2_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt16x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt16x2_operator_index_Int32.name = "operator[]"_c;
    UInt16x2_operator_index_Int32.returnType = Type::FullType { UInt16Type.name };
    UInt16x2_operator_index_Int32.parameters = UInt16x2_operator_index_Int32_args;
    Symbol::Resolved(&UInt16x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x2_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt32
    UInt16x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt16x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt16x2_operator_index_UInt32.name = "operator[]"_c;
    UInt16x2_operator_index_UInt32.returnType = Type::FullType { UInt16Type.name };
    UInt16x2_operator_index_UInt32.parameters = UInt16x2_operator_index_UInt32_args;
    Symbol::Resolved(&UInt16x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x2_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with Int16
    UInt16x2_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt16x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt16x2_operator_index_Int16.name = "operator[]"_c;
    UInt16x2_operator_index_Int16.returnType = Type::FullType { UInt16Type.name };
    UInt16x2_operator_index_Int16.parameters = UInt16x2_operator_index_Int16_args;
    Symbol::Resolved(&UInt16x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x2_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt16
    UInt16x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt16x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16x2_operator_index_UInt16.name = "operator[]"_c;
    UInt16x2_operator_index_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16x2_operator_index_UInt16.parameters = UInt16x2_operator_index_UInt16_args;
    Symbol::Resolved(&UInt16x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x2_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator+ with UInt16x2
    UInt16x2_operator_add_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_add_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_add_UInt16x2.name = "operator+"_c;
    UInt16x2_operator_add_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_add_UInt16x2.parameters = UInt16x2_operator_add_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_add_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_add_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator- with UInt16x2
    UInt16x2_operator_sub_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_sub_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_sub_UInt16x2.name = "operator-"_c;
    UInt16x2_operator_sub_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_sub_UInt16x2.parameters = UInt16x2_operator_sub_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_sub_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_sub_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator* with UInt16x2
    UInt16x2_operator_mul_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_mul_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_mul_UInt16x2.name = "operator*"_c;
    UInt16x2_operator_mul_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_mul_UInt16x2.parameters = UInt16x2_operator_mul_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_mul_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_mul_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator/ with UInt16x2
    UInt16x2_operator_div_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_div_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_div_UInt16x2.name = "operator/"_c;
    UInt16x2_operator_div_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_div_UInt16x2.parameters = UInt16x2_operator_div_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_div_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_div_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator% with UInt16x2
    UInt16x2_operator_mod_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_mod_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_mod_UInt16x2.name = "operator%"_c;
    UInt16x2_operator_mod_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_mod_UInt16x2.parameters = UInt16x2_operator_mod_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_mod_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_mod_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator+= with UInt16x2
    UInt16x2_operator_addasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_addasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_addasg_UInt16x2.name = "operator+="_c;
    UInt16x2_operator_addasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_addasg_UInt16x2.parameters = UInt16x2_operator_addasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_addasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_addasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator-= with UInt16x2
    UInt16x2_operator_subasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_subasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_subasg_UInt16x2.name = "operator-="_c;
    UInt16x2_operator_subasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_subasg_UInt16x2.parameters = UInt16x2_operator_subasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_subasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_subasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator*= with UInt16x2
    UInt16x2_operator_mulasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_mulasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_mulasg_UInt16x2.name = "operator*="_c;
    UInt16x2_operator_mulasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_mulasg_UInt16x2.parameters = UInt16x2_operator_mulasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_mulasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_mulasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator/= with UInt16x2
    UInt16x2_operator_divasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_divasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_divasg_UInt16x2.name = "operator/="_c;
    UInt16x2_operator_divasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_divasg_UInt16x2.parameters = UInt16x2_operator_divasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_divasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_divasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator< with UInt16x2
    UInt16x2_operator_lt_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_lt_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_lt_UInt16x2.name = "operator<"_c;
    UInt16x2_operator_lt_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_lt_UInt16x2.parameters = UInt16x2_operator_lt_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_lt_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_lt_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator<= with UInt16x2
    UInt16x2_operator_lte_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_lte_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_lte_UInt16x2.name = "operator<="_c;
    UInt16x2_operator_lte_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_lte_UInt16x2.parameters = UInt16x2_operator_lte_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_lte_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_lte_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator> with UInt16x2
    UInt16x2_operator_gt_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_gt_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_gt_UInt16x2.name = "operator>"_c;
    UInt16x2_operator_gt_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_gt_UInt16x2.parameters = UInt16x2_operator_gt_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_gt_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_gt_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator>= with UInt16x2
    UInt16x2_operator_gte_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_gte_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_gte_UInt16x2.name = "operator>="_c;
    UInt16x2_operator_gte_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_gte_UInt16x2.parameters = UInt16x2_operator_gte_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_gte_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_gte_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator== with UInt16x2
    UInt16x2_operator_eq_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_eq_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_eq_UInt16x2.name = "operator=="_c;
    UInt16x2_operator_eq_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_eq_UInt16x2.parameters = UInt16x2_operator_eq_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_eq_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_eq_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator!= with UInt16x2
    UInt16x2_operator_neq_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_neq_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_neq_UInt16x2.name = "operator!="_c;
    UInt16x2_operator_neq_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_neq_UInt16x2.parameters = UInt16x2_operator_neq_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_neq_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_neq_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator* with Float32
    UInt16x2_operator_scale_Float32_arg0.name = "_arg0"_c;
    UInt16x2_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    UInt16x2_operator_scale_Float32.name = "operator*"_c;
    UInt16x2_operator_scale_Float32.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_scale_Float32.parameters = UInt16x2_operator_scale_Float32_args;
    Symbol::Resolved(&UInt16x2_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt16x2_operator_scale_Float32)->returnTypeSymbol = &UInt16x2Type;

    /// operator* with Float16
    UInt16x2_operator_scale_Float16_arg0.name = "_arg0"_c;
    UInt16x2_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    UInt16x2_operator_scale_Float16.name = "operator*"_c;
    UInt16x2_operator_scale_Float16.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_scale_Float16.parameters = UInt16x2_operator_scale_Float16_args;
    Symbol::Resolved(&UInt16x2_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x2_operator_scale_Float16)->returnTypeSymbol = &UInt16x2Type;

    /// operator* with UInt32
    UInt16x2_operator_scale_UInt32_arg0.name = "_arg0"_c;
    UInt16x2_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt16x2_operator_scale_UInt32.name = "operator*"_c;
    UInt16x2_operator_scale_UInt32.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_scale_UInt32.parameters = UInt16x2_operator_scale_UInt32_args;
    Symbol::Resolved(&UInt16x2_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x2_operator_scale_UInt32)->returnTypeSymbol = &UInt16x2Type;

    /// operator* with UInt16
    UInt16x2_operator_scale_UInt16_arg0.name = "_arg0"_c;
    UInt16x2_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16x2_operator_scale_UInt16.name = "operator*"_c;
    UInt16x2_operator_scale_UInt16.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_scale_UInt16.parameters = UInt16x2_operator_scale_UInt16_args;
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16)->returnTypeSymbol = &UInt16x2Type;

    /// operator* with Int32
    UInt16x2_operator_scale_Int32_arg0.name = "_arg0"_c;
    UInt16x2_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt16x2_operator_scale_Int32.name = "operator*"_c;
    UInt16x2_operator_scale_Int32.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_scale_Int32.parameters = UInt16x2_operator_scale_Int32_args;
    Symbol::Resolved(&UInt16x2_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x2_operator_scale_Int32)->returnTypeSymbol = &UInt16x2Type;

    /// operator* with Int16
    UInt16x2_operator_scale_Int16_arg0.name = "_arg0"_c;
    UInt16x2_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt16x2_operator_scale_Int16.name = "operator*"_c;
    UInt16x2_operator_scale_Int16.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_scale_Int16.parameters = UInt16x2_operator_scale_Int16_args;
    Symbol::Resolved(&UInt16x2_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x2_operator_scale_Int16)->returnTypeSymbol = &UInt16x2Type;

    /// operator| with UInt16x2
    UInt16x2_operator_or_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_or_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_or_UInt16x2.name = "operator|"_c;
    UInt16x2_operator_or_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_or_UInt16x2.parameters = UInt16x2_operator_or_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_or_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_or_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator& with UInt16x2
    UInt16x2_operator_and_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_and_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_and_UInt16x2.name = "operator&"_c;
    UInt16x2_operator_and_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_and_UInt16x2.parameters = UInt16x2_operator_and_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_and_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_and_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator^ with UInt16x2
    UInt16x2_operator_xor_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_xor_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_xor_UInt16x2.name = "operator^"_c;
    UInt16x2_operator_xor_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_xor_UInt16x2.parameters = UInt16x2_operator_xor_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_xor_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_xor_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator<< with UInt16x2
    UInt16x2_operator_lsh_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_lsh_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_lsh_UInt16x2.name = "operator<<"_c;
    UInt16x2_operator_lsh_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_lsh_UInt16x2.parameters = UInt16x2_operator_lsh_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_lsh_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_lsh_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator>> with UInt16x2
    UInt16x2_operator_rsh_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_rsh_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_rsh_UInt16x2.name = "operator>>"_c;
    UInt16x2_operator_rsh_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_rsh_UInt16x2.parameters = UInt16x2_operator_rsh_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_rsh_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_rsh_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator|= with UInt16x2
    UInt16x2_operator_orasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_orasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_orasg_UInt16x2.name = "operator|="_c;
    UInt16x2_operator_orasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_orasg_UInt16x2.parameters = UInt16x2_operator_orasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_orasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_orasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator&= with UInt16x2
    UInt16x2_operator_andasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_andasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_andasg_UInt16x2.name = "operator&="_c;
    UInt16x2_operator_andasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_andasg_UInt16x2.parameters = UInt16x2_operator_andasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_andasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_andasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator^= with UInt16x2
    UInt16x2_operator_xorasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_xorasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_xorasg_UInt16x2.name = "operator^="_c;
    UInt16x2_operator_xorasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_xorasg_UInt16x2.parameters = UInt16x2_operator_xorasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_xorasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_xorasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator<<= with UInt16x2
    UInt16x2_operator_lshasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_lshasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_lshasg_UInt16x2.name = "operator<<="_c;
    UInt16x2_operator_lshasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_lshasg_UInt16x2.parameters = UInt16x2_operator_lshasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_lshasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_lshasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator>>= with UInt16x2
    UInt16x2_operator_rhsasg_UInt16x2_arg0.name = "_arg0"_c;
    UInt16x2_operator_rhsasg_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_rhsasg_UInt16x2.name = "operator>>="_c;
    UInt16x2_operator_rhsasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_rhsasg_UInt16x2.parameters = UInt16x2_operator_rhsasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_rhsasg_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_rhsasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &UInt16x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &UInt16x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &UInt16x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &UInt16x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &UInt16x2_operator_add_UInt16x2 },
    std::pair{ "operator-"_c, &UInt16x2_operator_sub_UInt16x2 },
    std::pair{ "operator*"_c, &UInt16x2_operator_mul_UInt16x2 },
    std::pair{ "operator/"_c, &UInt16x2_operator_div_UInt16x2 },
    std::pair{ "operator%"_c, &UInt16x2_operator_mod_UInt16x2 },
    std::pair{ "operator+="_c, &UInt16x2_operator_addasg_UInt16x2 },
    std::pair{ "operator-="_c, &UInt16x2_operator_subasg_UInt16x2 },
    std::pair{ "operator*="_c, &UInt16x2_operator_mulasg_UInt16x2 },
    std::pair{ "operator/="_c, &UInt16x2_operator_divasg_UInt16x2 },
    std::pair{ "operator<"_c, &UInt16x2_operator_lt_UInt16x2 },
    std::pair{ "operator<="_c, &UInt16x2_operator_lte_UInt16x2 },
    std::pair{ "operator>"_c, &UInt16x2_operator_gt_UInt16x2 },
    std::pair{ "operator>="_c, &UInt16x2_operator_gte_UInt16x2 },
    std::pair{ "operator=="_c, &UInt16x2_operator_eq_UInt16x2 },
    std::pair{ "operator!="_c, &UInt16x2_operator_neq_UInt16x2 },
    std::pair{ "operator*"_c, &UInt16x2_operator_scale_Float32 },
    std::pair{ "operator*"_c, &UInt16x2_operator_scale_Float16 },
    std::pair{ "operator*"_c, &UInt16x2_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &UInt16x2_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &UInt16x2_operator_scale_Int32 },
    std::pair{ "operator*"_c, &UInt16x2_operator_scale_Int16 },
    std::pair{ "operator|"_c, &UInt16x2_operator_or_UInt16x2 },
    std::pair{ "operator&"_c, &UInt16x2_operator_and_UInt16x2 },
    std::pair{ "operator^"_c, &UInt16x2_operator_xor_UInt16x2 },
    std::pair{ "operator<<"_c, &UInt16x2_operator_lsh_UInt16x2 },
    std::pair{ "operator>>"_c, &UInt16x2_operator_rsh_UInt16x2 },
    std::pair{ "operator|="_c, &UInt16x2_operator_orasg_UInt16x2 },
    std::pair{ "operator&="_c, &UInt16x2_operator_andasg_UInt16x2 },
    std::pair{ "operator^="_c, &UInt16x2_operator_xorasg_UInt16x2 },
    std::pair{ "operator<<="_c, &UInt16x2_operator_lshasg_UInt16x2 },
    std::pair{ "operator>>="_c, &UInt16x2_operator_rhsasg_UInt16x2 }
    } };
}
UInt16x2 UInt16x2Type;

/// i16x2 with Float32x2
Variable Int16x2_convert_Float32x2_arg0;
Function Int16x2_convert_Float32x2;
inline constexpr std::array Int16x2_convert_Float32x2_args = { &Int16x2_convert_Float32x2_arg0 };

/// i16x2 with Float32
Variable Int16x2_splat_Float32_arg0;
Function Int16x2_splat_Float32;
inline constexpr std::array Int16x2_splat_Float32_args = { &Int16x2_splat_Float32_arg0 };

/// i16x2 with UInt32x2
Variable Int16x2_convert_UInt32x2_arg0;
Function Int16x2_convert_UInt32x2;
inline constexpr std::array Int16x2_convert_UInt32x2_args = { &Int16x2_convert_UInt32x2_arg0 };

/// i16x2 with UInt32
Variable Int16x2_splat_UInt32_arg0;
Function Int16x2_splat_UInt32;
inline constexpr std::array Int16x2_splat_UInt32_args = { &Int16x2_splat_UInt32_arg0 };

/// i16x2 with Int32x2
Variable Int16x2_convert_Int32x2_arg0;
Function Int16x2_convert_Int32x2;
inline constexpr std::array Int16x2_convert_Int32x2_args = { &Int16x2_convert_Int32x2_arg0 };

/// i16x2 with Int32
Variable Int16x2_splat_Int32_arg0;
Function Int16x2_splat_Int32;
inline constexpr std::array Int16x2_splat_Int32_args = { &Int16x2_splat_Int32_arg0 };

/// i16x2 with Float16x2
Variable Int16x2_convert_Float16x2_arg0;
Function Int16x2_convert_Float16x2;
inline constexpr std::array Int16x2_convert_Float16x2_args = { &Int16x2_convert_Float16x2_arg0 };

/// i16x2 with Float16
Variable Int16x2_splat_Float16_arg0;
Function Int16x2_splat_Float16;
inline constexpr std::array Int16x2_splat_Float16_args = { &Int16x2_splat_Float16_arg0 };

/// i16x2 with UInt16x2
Variable Int16x2_convert_UInt16x2_arg0;
Function Int16x2_convert_UInt16x2;
inline constexpr std::array Int16x2_convert_UInt16x2_args = { &Int16x2_convert_UInt16x2_arg0 };

/// i16x2 with UInt16
Variable Int16x2_splat_UInt16_arg0;
Function Int16x2_splat_UInt16;
inline constexpr std::array Int16x2_splat_UInt16_args = { &Int16x2_splat_UInt16_arg0 };

/// i16x2 with Int16x2
Variable Int16x2_convert_Int16x2_arg0;
Function Int16x2_convert_Int16x2;
inline constexpr std::array Int16x2_convert_Int16x2_args = { &Int16x2_convert_Int16x2_arg0 };

/// i16x2 with Int16
Variable Int16x2_splat_Int16_arg0;
Function Int16x2_splat_Int16;
inline constexpr std::array Int16x2_splat_Int16_args = { &Int16x2_splat_Int16_arg0 };

/// i16x2 with Int16, Int16
Variable Int16x2_ctor0_arg0_Int16;
Variable Int16x2_ctor0_arg1_Int16;
Function Int16x2_ctor0;
inline constexpr std::array Int16x2_ctor0_args = { &Int16x2_ctor0_arg0_Int16, &Int16x2_ctor0_arg1_Int16 };

/// operator[] with Int32
Variable Int16x2_operator_index_Int32_arg0;
Function Int16x2_operator_index_Int32;
inline constexpr std::array Int16x2_operator_index_Int32_args = { &Int16x2_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Int16x2_operator_index_UInt32_arg0;
Function Int16x2_operator_index_UInt32;
inline constexpr std::array Int16x2_operator_index_UInt32_args = { &Int16x2_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Int16x2_operator_index_Int16_arg0;
Function Int16x2_operator_index_Int16;
inline constexpr std::array Int16x2_operator_index_Int16_args = { &Int16x2_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Int16x2_operator_index_UInt16_arg0;
Function Int16x2_operator_index_UInt16;
inline constexpr std::array Int16x2_operator_index_UInt16_args = { &Int16x2_operator_index_UInt16_arg0 };

/// operator+ with Int16x2
Variable Int16x2_operator_add_Int16x2_arg0;
Function Int16x2_operator_add_Int16x2;
inline constexpr std::array Int16x2_operator_add_Int16x2_args = { &Int16x2_operator_add_Int16x2_arg0 };

/// operator- with Int16x2
Variable Int16x2_operator_sub_Int16x2_arg0;
Function Int16x2_operator_sub_Int16x2;
inline constexpr std::array Int16x2_operator_sub_Int16x2_args = { &Int16x2_operator_sub_Int16x2_arg0 };

/// operator* with Int16x2
Variable Int16x2_operator_mul_Int16x2_arg0;
Function Int16x2_operator_mul_Int16x2;
inline constexpr std::array Int16x2_operator_mul_Int16x2_args = { &Int16x2_operator_mul_Int16x2_arg0 };

/// operator/ with Int16x2
Variable Int16x2_operator_div_Int16x2_arg0;
Function Int16x2_operator_div_Int16x2;
inline constexpr std::array Int16x2_operator_div_Int16x2_args = { &Int16x2_operator_div_Int16x2_arg0 };

/// operator% with Int16x2
Variable Int16x2_operator_mod_Int16x2_arg0;
Function Int16x2_operator_mod_Int16x2;
inline constexpr std::array Int16x2_operator_mod_Int16x2_args = { &Int16x2_operator_mod_Int16x2_arg0 };

/// operator+= with Int16x2
Variable Int16x2_operator_addasg_Int16x2_arg0;
Function Int16x2_operator_addasg_Int16x2;
inline constexpr std::array Int16x2_operator_addasg_Int16x2_args = { &Int16x2_operator_addasg_Int16x2_arg0 };

/// operator-= with Int16x2
Variable Int16x2_operator_subasg_Int16x2_arg0;
Function Int16x2_operator_subasg_Int16x2;
inline constexpr std::array Int16x2_operator_subasg_Int16x2_args = { &Int16x2_operator_subasg_Int16x2_arg0 };

/// operator*= with Int16x2
Variable Int16x2_operator_mulasg_Int16x2_arg0;
Function Int16x2_operator_mulasg_Int16x2;
inline constexpr std::array Int16x2_operator_mulasg_Int16x2_args = { &Int16x2_operator_mulasg_Int16x2_arg0 };

/// operator/= with Int16x2
Variable Int16x2_operator_divasg_Int16x2_arg0;
Function Int16x2_operator_divasg_Int16x2;
inline constexpr std::array Int16x2_operator_divasg_Int16x2_args = { &Int16x2_operator_divasg_Int16x2_arg0 };

/// operator< with Int16x2
Variable Int16x2_operator_lt_Int16x2_arg0;
Function Int16x2_operator_lt_Int16x2;
inline constexpr std::array Int16x2_operator_lt_Int16x2_args = { &Int16x2_operator_lt_Int16x2_arg0 };

/// operator<= with Int16x2
Variable Int16x2_operator_lte_Int16x2_arg0;
Function Int16x2_operator_lte_Int16x2;
inline constexpr std::array Int16x2_operator_lte_Int16x2_args = { &Int16x2_operator_lte_Int16x2_arg0 };

/// operator> with Int16x2
Variable Int16x2_operator_gt_Int16x2_arg0;
Function Int16x2_operator_gt_Int16x2;
inline constexpr std::array Int16x2_operator_gt_Int16x2_args = { &Int16x2_operator_gt_Int16x2_arg0 };

/// operator>= with Int16x2
Variable Int16x2_operator_gte_Int16x2_arg0;
Function Int16x2_operator_gte_Int16x2;
inline constexpr std::array Int16x2_operator_gte_Int16x2_args = { &Int16x2_operator_gte_Int16x2_arg0 };

/// operator== with Int16x2
Variable Int16x2_operator_eq_Int16x2_arg0;
Function Int16x2_operator_eq_Int16x2;
inline constexpr std::array Int16x2_operator_eq_Int16x2_args = { &Int16x2_operator_eq_Int16x2_arg0 };

/// operator!= with Int16x2
Variable Int16x2_operator_neq_Int16x2_arg0;
Function Int16x2_operator_neq_Int16x2;
inline constexpr std::array Int16x2_operator_neq_Int16x2_args = { &Int16x2_operator_neq_Int16x2_arg0 };

/// operator* with Float32
Variable Int16x2_operator_scale_Float32_arg0;
Function Int16x2_operator_scale_Float32;
inline constexpr std::array Int16x2_operator_scale_Float32_args = { &Int16x2_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable Int16x2_operator_scale_Float16_arg0;
Function Int16x2_operator_scale_Float16;
inline constexpr std::array Int16x2_operator_scale_Float16_args = { &Int16x2_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable Int16x2_operator_scale_UInt32_arg0;
Function Int16x2_operator_scale_UInt32;
inline constexpr std::array Int16x2_operator_scale_UInt32_args = { &Int16x2_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable Int16x2_operator_scale_UInt16_arg0;
Function Int16x2_operator_scale_UInt16;
inline constexpr std::array Int16x2_operator_scale_UInt16_args = { &Int16x2_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable Int16x2_operator_scale_Int32_arg0;
Function Int16x2_operator_scale_Int32;
inline constexpr std::array Int16x2_operator_scale_Int32_args = { &Int16x2_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable Int16x2_operator_scale_Int16_arg0;
Function Int16x2_operator_scale_Int16;
inline constexpr std::array Int16x2_operator_scale_Int16_args = { &Int16x2_operator_scale_Int16_arg0 };

/// operator| with Int16x2
Variable Int16x2_operator_or_Int16x2_arg0;
Function Int16x2_operator_or_Int16x2;
inline constexpr std::array Int16x2_operator_or_Int16x2_args = { &Int16x2_operator_or_Int16x2_arg0 };

/// operator& with Int16x2
Variable Int16x2_operator_and_Int16x2_arg0;
Function Int16x2_operator_and_Int16x2;
inline constexpr std::array Int16x2_operator_and_Int16x2_args = { &Int16x2_operator_and_Int16x2_arg0 };

/// operator^ with Int16x2
Variable Int16x2_operator_xor_Int16x2_arg0;
Function Int16x2_operator_xor_Int16x2;
inline constexpr std::array Int16x2_operator_xor_Int16x2_args = { &Int16x2_operator_xor_Int16x2_arg0 };

/// operator<< with Int16x2
Variable Int16x2_operator_lsh_Int16x2_arg0;
Function Int16x2_operator_lsh_Int16x2;
inline constexpr std::array Int16x2_operator_lsh_Int16x2_args = { &Int16x2_operator_lsh_Int16x2_arg0 };

/// operator>> with Int16x2
Variable Int16x2_operator_rsh_Int16x2_arg0;
Function Int16x2_operator_rsh_Int16x2;
inline constexpr std::array Int16x2_operator_rsh_Int16x2_args = { &Int16x2_operator_rsh_Int16x2_arg0 };

/// operator|= with Int16x2
Variable Int16x2_operator_orasg_Int16x2_arg0;
Function Int16x2_operator_orasg_Int16x2;
inline constexpr std::array Int16x2_operator_orasg_Int16x2_args = { &Int16x2_operator_orasg_Int16x2_arg0 };

/// operator&= with Int16x2
Variable Int16x2_operator_andasg_Int16x2_arg0;
Function Int16x2_operator_andasg_Int16x2;
inline constexpr std::array Int16x2_operator_andasg_Int16x2_args = { &Int16x2_operator_andasg_Int16x2_arg0 };

/// operator^= with Int16x2
Variable Int16x2_operator_xorasg_Int16x2_arg0;
Function Int16x2_operator_xorasg_Int16x2;
inline constexpr std::array Int16x2_operator_xorasg_Int16x2_args = { &Int16x2_operator_xorasg_Int16x2_arg0 };

/// operator<<= with Int16x2
Variable Int16x2_operator_lshasg_Int16x2_arg0;
Function Int16x2_operator_lshasg_Int16x2;
inline constexpr std::array Int16x2_operator_lshasg_Int16x2_args = { &Int16x2_operator_lshasg_Int16x2_arg0 };

/// operator>>= with Int16x2
Variable Int16x2_operator_rhsasg_Int16x2_arg0;
Function Int16x2_operator_rhsasg_Int16x2;
inline constexpr std::array Int16x2_operator_rhsasg_Int16x2_args = { &Int16x2_operator_rhsasg_Int16x2_arg0 };

Int16x2::Int16x2()
{
    this->name = "i16x2";
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    /// i16x2 with Float32x2
    Int16x2_convert_Float32x2_arg0.name = "val"_c;
    Int16x2_convert_Float32x2_arg0.type = Type::FullType{ Float32x2Type.name };
    Int16x2_convert_Float32x2.documentation = "Convert f32x2 to i16x2"_c;
    Int16x2_convert_Float32x2.name = "i16x2"_c;
    Int16x2_convert_Float32x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_convert_Float32x2.parameters = Int16x2_convert_Float32x2_args;
    Symbol::Resolved(&Int16x2_convert_Float32x2_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Int16x2_convert_Float32x2)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Float32
    Int16x2_splat_Float32_arg0.name = "val"_c;
    Int16x2_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Int16x2_splat_Float32.documentation = "Splat f32x2 to i16x2"_c;
    Int16x2_splat_Float32.name = "i16x2"_c;
    Int16x2_splat_Float32.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_splat_Float32.parameters = Int16x2_splat_Float32_args;
    Symbol::Resolved(&Int16x2_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int16x2_splat_Float32)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with UInt32x2
    Int16x2_convert_UInt32x2_arg0.name = "val"_c;
    Int16x2_convert_UInt32x2_arg0.type = Type::FullType{ UInt32x2Type.name };
    Int16x2_convert_UInt32x2.documentation = "Convert u32x2 to i16x2"_c;
    Int16x2_convert_UInt32x2.name = "i16x2"_c;
    Int16x2_convert_UInt32x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_convert_UInt32x2.parameters = Int16x2_convert_UInt32x2_args;
    Symbol::Resolved(&Int16x2_convert_UInt32x2_arg0)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&Int16x2_convert_UInt32x2)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with UInt32
    Int16x2_splat_UInt32_arg0.name = "val"_c;
    Int16x2_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int16x2_splat_UInt32.documentation = "Splat u32x2 to i16x2"_c;
    Int16x2_splat_UInt32.name = "i16x2"_c;
    Int16x2_splat_UInt32.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_splat_UInt32.parameters = Int16x2_splat_UInt32_args;
    Symbol::Resolved(&Int16x2_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x2_splat_UInt32)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Int32x2
    Int16x2_convert_Int32x2_arg0.name = "val"_c;
    Int16x2_convert_Int32x2_arg0.type = Type::FullType{ Int32x2Type.name };
    Int16x2_convert_Int32x2.documentation = "Convert i32x2 to i16x2"_c;
    Int16x2_convert_Int32x2.name = "i16x2"_c;
    Int16x2_convert_Int32x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_convert_Int32x2.parameters = Int16x2_convert_Int32x2_args;
    Symbol::Resolved(&Int16x2_convert_Int32x2_arg0)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int16x2_convert_Int32x2)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Int32
    Int16x2_splat_Int32_arg0.name = "val"_c;
    Int16x2_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int16x2_splat_Int32.documentation = "Splat i32x2 to i16x2"_c;
    Int16x2_splat_Int32.name = "i16x2"_c;
    Int16x2_splat_Int32.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_splat_Int32.parameters = Int16x2_splat_Int32_args;
    Symbol::Resolved(&Int16x2_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x2_splat_Int32)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Float16x2
    Int16x2_convert_Float16x2_arg0.name = "val"_c;
    Int16x2_convert_Float16x2_arg0.type = Type::FullType{ Float16x2Type.name };
    Int16x2_convert_Float16x2.documentation = "Convert f16x2 to i16x2"_c;
    Int16x2_convert_Float16x2.name = "i16x2"_c;
    Int16x2_convert_Float16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_convert_Float16x2.parameters = Int16x2_convert_Float16x2_args;
    Symbol::Resolved(&Int16x2_convert_Float16x2_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Int16x2_convert_Float16x2)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Float16
    Int16x2_splat_Float16_arg0.name = "val"_c;
    Int16x2_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Int16x2_splat_Float16.documentation = "Splat f16x2 to i16x2"_c;
    Int16x2_splat_Float16.name = "i16x2"_c;
    Int16x2_splat_Float16.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_splat_Float16.parameters = Int16x2_splat_Float16_args;
    Symbol::Resolved(&Int16x2_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x2_splat_Float16)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with UInt16x2
    Int16x2_convert_UInt16x2_arg0.name = "val"_c;
    Int16x2_convert_UInt16x2_arg0.type = Type::FullType{ UInt16x2Type.name };
    Int16x2_convert_UInt16x2.documentation = "Convert u16x2 to i16x2"_c;
    Int16x2_convert_UInt16x2.name = "i16x2"_c;
    Int16x2_convert_UInt16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_convert_UInt16x2.parameters = Int16x2_convert_UInt16x2_args;
    Symbol::Resolved(&Int16x2_convert_UInt16x2_arg0)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&Int16x2_convert_UInt16x2)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with UInt16
    Int16x2_splat_UInt16_arg0.name = "val"_c;
    Int16x2_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int16x2_splat_UInt16.documentation = "Splat u16x2 to i16x2"_c;
    Int16x2_splat_UInt16.name = "i16x2"_c;
    Int16x2_splat_UInt16.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_splat_UInt16.parameters = Int16x2_splat_UInt16_args;
    Symbol::Resolved(&Int16x2_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x2_splat_UInt16)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Int16x2
    Int16x2_convert_Int16x2_arg0.name = "val"_c;
    Int16x2_convert_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_convert_Int16x2.documentation = "Convert i16x2 to i16x2"_c;
    Int16x2_convert_Int16x2.name = "i16x2"_c;
    Int16x2_convert_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_convert_Int16x2.parameters = Int16x2_convert_Int16x2_args;
    Symbol::Resolved(&Int16x2_convert_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_convert_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Int16
    Int16x2_splat_Int16_arg0.name = "val"_c;
    Int16x2_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16x2_splat_Int16.documentation = "Splat i16x2 to i16x2"_c;
    Int16x2_splat_Int16.name = "i16x2"_c;
    Int16x2_splat_Int16.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_splat_Int16.parameters = Int16x2_splat_Int16_args;
    Symbol::Resolved(&Int16x2_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x2_splat_Int16)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Int16, Int16
    Int16x2_ctor0_arg0_Int16.name = "_arg0"_c;
    Int16x2_ctor0_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x2_ctor0_arg1_Int16.name = "_arg1"_c;
    Int16x2_ctor0_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x2_ctor0.name = "i16x2"_c;
    Int16x2_ctor0.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_ctor0.parameters = Int16x2_ctor0_args;
    Symbol::Resolved(&Int16x2_ctor0_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x2_ctor0_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x2_ctor0)->returnTypeSymbol = &Int16x2Type;

    /// operator[] with Int32
    Int16x2_operator_index_Int32_arg0.name = "_arg0"_c;
    Int16x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int16x2_operator_index_Int32.name = "operator[]"_c;
    Int16x2_operator_index_Int32.returnType = Type::FullType { Int16Type.name };
    Int16x2_operator_index_Int32.parameters = Int16x2_operator_index_Int32_args;
    Symbol::Resolved(&Int16x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x2_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt32
    Int16x2_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int16x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int16x2_operator_index_UInt32.name = "operator[]"_c;
    Int16x2_operator_index_UInt32.returnType = Type::FullType { Int16Type.name };
    Int16x2_operator_index_UInt32.parameters = Int16x2_operator_index_UInt32_args;
    Symbol::Resolved(&Int16x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x2_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    /// operator[] with Int16
    Int16x2_operator_index_Int16_arg0.name = "_arg0"_c;
    Int16x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16x2_operator_index_Int16.name = "operator[]"_c;
    Int16x2_operator_index_Int16.returnType = Type::FullType { Int16Type.name };
    Int16x2_operator_index_Int16.parameters = Int16x2_operator_index_Int16_args;
    Symbol::Resolved(&Int16x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x2_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt16
    Int16x2_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int16x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int16x2_operator_index_UInt16.name = "operator[]"_c;
    Int16x2_operator_index_UInt16.returnType = Type::FullType { Int16Type.name };
    Int16x2_operator_index_UInt16.parameters = Int16x2_operator_index_UInt16_args;
    Symbol::Resolved(&Int16x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x2_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    /// operator+ with Int16x2
    Int16x2_operator_add_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_add_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_add_Int16x2.name = "operator+"_c;
    Int16x2_operator_add_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_add_Int16x2.parameters = Int16x2_operator_add_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_add_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_add_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator- with Int16x2
    Int16x2_operator_sub_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_sub_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_sub_Int16x2.name = "operator-"_c;
    Int16x2_operator_sub_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_sub_Int16x2.parameters = Int16x2_operator_sub_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_sub_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_sub_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator* with Int16x2
    Int16x2_operator_mul_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_mul_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_mul_Int16x2.name = "operator*"_c;
    Int16x2_operator_mul_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_mul_Int16x2.parameters = Int16x2_operator_mul_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_mul_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_mul_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator/ with Int16x2
    Int16x2_operator_div_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_div_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_div_Int16x2.name = "operator/"_c;
    Int16x2_operator_div_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_div_Int16x2.parameters = Int16x2_operator_div_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_div_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_div_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator% with Int16x2
    Int16x2_operator_mod_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_mod_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_mod_Int16x2.name = "operator%"_c;
    Int16x2_operator_mod_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_mod_Int16x2.parameters = Int16x2_operator_mod_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_mod_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_mod_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator+= with Int16x2
    Int16x2_operator_addasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_addasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_addasg_Int16x2.name = "operator+="_c;
    Int16x2_operator_addasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_addasg_Int16x2.parameters = Int16x2_operator_addasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_addasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_addasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator-= with Int16x2
    Int16x2_operator_subasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_subasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_subasg_Int16x2.name = "operator-="_c;
    Int16x2_operator_subasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_subasg_Int16x2.parameters = Int16x2_operator_subasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_subasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_subasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator*= with Int16x2
    Int16x2_operator_mulasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_mulasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_mulasg_Int16x2.name = "operator*="_c;
    Int16x2_operator_mulasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_mulasg_Int16x2.parameters = Int16x2_operator_mulasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_mulasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_mulasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator/= with Int16x2
    Int16x2_operator_divasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_divasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_divasg_Int16x2.name = "operator/="_c;
    Int16x2_operator_divasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_divasg_Int16x2.parameters = Int16x2_operator_divasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_divasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_divasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator< with Int16x2
    Int16x2_operator_lt_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_lt_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_lt_Int16x2.name = "operator<"_c;
    Int16x2_operator_lt_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_lt_Int16x2.parameters = Int16x2_operator_lt_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_lt_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_lt_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator<= with Int16x2
    Int16x2_operator_lte_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_lte_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_lte_Int16x2.name = "operator<="_c;
    Int16x2_operator_lte_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_lte_Int16x2.parameters = Int16x2_operator_lte_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_lte_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_lte_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator> with Int16x2
    Int16x2_operator_gt_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_gt_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_gt_Int16x2.name = "operator>"_c;
    Int16x2_operator_gt_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_gt_Int16x2.parameters = Int16x2_operator_gt_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_gt_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_gt_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator>= with Int16x2
    Int16x2_operator_gte_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_gte_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_gte_Int16x2.name = "operator>="_c;
    Int16x2_operator_gte_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_gte_Int16x2.parameters = Int16x2_operator_gte_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_gte_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_gte_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator== with Int16x2
    Int16x2_operator_eq_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_eq_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_eq_Int16x2.name = "operator=="_c;
    Int16x2_operator_eq_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_eq_Int16x2.parameters = Int16x2_operator_eq_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_eq_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_eq_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator!= with Int16x2
    Int16x2_operator_neq_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_neq_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_neq_Int16x2.name = "operator!="_c;
    Int16x2_operator_neq_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_neq_Int16x2.parameters = Int16x2_operator_neq_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_neq_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_neq_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator* with Float32
    Int16x2_operator_scale_Float32_arg0.name = "_arg0"_c;
    Int16x2_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Int16x2_operator_scale_Float32.name = "operator*"_c;
    Int16x2_operator_scale_Float32.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_scale_Float32.parameters = Int16x2_operator_scale_Float32_args;
    Symbol::Resolved(&Int16x2_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int16x2_operator_scale_Float32)->returnTypeSymbol = &Int16x2Type;

    /// operator* with Float16
    Int16x2_operator_scale_Float16_arg0.name = "_arg0"_c;
    Int16x2_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Int16x2_operator_scale_Float16.name = "operator*"_c;
    Int16x2_operator_scale_Float16.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_scale_Float16.parameters = Int16x2_operator_scale_Float16_args;
    Symbol::Resolved(&Int16x2_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x2_operator_scale_Float16)->returnTypeSymbol = &Int16x2Type;

    /// operator* with UInt32
    Int16x2_operator_scale_UInt32_arg0.name = "_arg0"_c;
    Int16x2_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int16x2_operator_scale_UInt32.name = "operator*"_c;
    Int16x2_operator_scale_UInt32.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_scale_UInt32.parameters = Int16x2_operator_scale_UInt32_args;
    Symbol::Resolved(&Int16x2_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x2_operator_scale_UInt32)->returnTypeSymbol = &Int16x2Type;

    /// operator* with UInt16
    Int16x2_operator_scale_UInt16_arg0.name = "_arg0"_c;
    Int16x2_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int16x2_operator_scale_UInt16.name = "operator*"_c;
    Int16x2_operator_scale_UInt16.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_scale_UInt16.parameters = Int16x2_operator_scale_UInt16_args;
    Symbol::Resolved(&Int16x2_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x2_operator_scale_UInt16)->returnTypeSymbol = &Int16x2Type;

    /// operator* with Int32
    Int16x2_operator_scale_Int32_arg0.name = "_arg0"_c;
    Int16x2_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int16x2_operator_scale_Int32.name = "operator*"_c;
    Int16x2_operator_scale_Int32.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_scale_Int32.parameters = Int16x2_operator_scale_Int32_args;
    Symbol::Resolved(&Int16x2_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x2_operator_scale_Int32)->returnTypeSymbol = &Int16x2Type;

    /// operator* with Int16
    Int16x2_operator_scale_Int16_arg0.name = "_arg0"_c;
    Int16x2_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16x2_operator_scale_Int16.name = "operator*"_c;
    Int16x2_operator_scale_Int16.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_scale_Int16.parameters = Int16x2_operator_scale_Int16_args;
    Symbol::Resolved(&Int16x2_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x2_operator_scale_Int16)->returnTypeSymbol = &Int16x2Type;

    /// operator| with Int16x2
    Int16x2_operator_or_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_or_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_or_Int16x2.name = "operator|"_c;
    Int16x2_operator_or_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_or_Int16x2.parameters = Int16x2_operator_or_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_or_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_or_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator& with Int16x2
    Int16x2_operator_and_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_and_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_and_Int16x2.name = "operator&"_c;
    Int16x2_operator_and_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_and_Int16x2.parameters = Int16x2_operator_and_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_and_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_and_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator^ with Int16x2
    Int16x2_operator_xor_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_xor_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_xor_Int16x2.name = "operator^"_c;
    Int16x2_operator_xor_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_xor_Int16x2.parameters = Int16x2_operator_xor_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_xor_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_xor_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator<< with Int16x2
    Int16x2_operator_lsh_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_lsh_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_lsh_Int16x2.name = "operator<<"_c;
    Int16x2_operator_lsh_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_lsh_Int16x2.parameters = Int16x2_operator_lsh_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_lsh_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_lsh_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator>> with Int16x2
    Int16x2_operator_rsh_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_rsh_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_rsh_Int16x2.name = "operator>>"_c;
    Int16x2_operator_rsh_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_rsh_Int16x2.parameters = Int16x2_operator_rsh_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_rsh_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_rsh_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator|= with Int16x2
    Int16x2_operator_orasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_orasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_orasg_Int16x2.name = "operator|="_c;
    Int16x2_operator_orasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_orasg_Int16x2.parameters = Int16x2_operator_orasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_orasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_orasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator&= with Int16x2
    Int16x2_operator_andasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_andasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_andasg_Int16x2.name = "operator&="_c;
    Int16x2_operator_andasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_andasg_Int16x2.parameters = Int16x2_operator_andasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_andasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_andasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator^= with Int16x2
    Int16x2_operator_xorasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_xorasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_xorasg_Int16x2.name = "operator^="_c;
    Int16x2_operator_xorasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_xorasg_Int16x2.parameters = Int16x2_operator_xorasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_xorasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_xorasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator<<= with Int16x2
    Int16x2_operator_lshasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_lshasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_lshasg_Int16x2.name = "operator<<="_c;
    Int16x2_operator_lshasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_lshasg_Int16x2.parameters = Int16x2_operator_lshasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_lshasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_lshasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator>>= with Int16x2
    Int16x2_operator_rhsasg_Int16x2_arg0.name = "_arg0"_c;
    Int16x2_operator_rhsasg_Int16x2_arg0.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_rhsasg_Int16x2.name = "operator>>="_c;
    Int16x2_operator_rhsasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_rhsasg_Int16x2.parameters = Int16x2_operator_rhsasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_rhsasg_Int16x2_arg0)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_rhsasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Int16x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x2_operator_add_Int16x2 },
    std::pair{ "operator-"_c, &Int16x2_operator_sub_Int16x2 },
    std::pair{ "operator*"_c, &Int16x2_operator_mul_Int16x2 },
    std::pair{ "operator/"_c, &Int16x2_operator_div_Int16x2 },
    std::pair{ "operator%"_c, &Int16x2_operator_mod_Int16x2 },
    std::pair{ "operator+="_c, &Int16x2_operator_addasg_Int16x2 },
    std::pair{ "operator-="_c, &Int16x2_operator_subasg_Int16x2 },
    std::pair{ "operator*="_c, &Int16x2_operator_mulasg_Int16x2 },
    std::pair{ "operator/="_c, &Int16x2_operator_divasg_Int16x2 },
    std::pair{ "operator<"_c, &Int16x2_operator_lt_Int16x2 },
    std::pair{ "operator<="_c, &Int16x2_operator_lte_Int16x2 },
    std::pair{ "operator>"_c, &Int16x2_operator_gt_Int16x2 },
    std::pair{ "operator>="_c, &Int16x2_operator_gte_Int16x2 },
    std::pair{ "operator=="_c, &Int16x2_operator_eq_Int16x2 },
    std::pair{ "operator!="_c, &Int16x2_operator_neq_Int16x2 },
    std::pair{ "operator*"_c, &Int16x2_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x2_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x2_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x2_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x2_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x2_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x2_operator_or_Int16x2 },
    std::pair{ "operator&"_c, &Int16x2_operator_and_Int16x2 },
    std::pair{ "operator^"_c, &Int16x2_operator_xor_Int16x2 },
    std::pair{ "operator<<"_c, &Int16x2_operator_lsh_Int16x2 },
    std::pair{ "operator>>"_c, &Int16x2_operator_rsh_Int16x2 },
    std::pair{ "operator|="_c, &Int16x2_operator_orasg_Int16x2 },
    std::pair{ "operator&="_c, &Int16x2_operator_andasg_Int16x2 },
    std::pair{ "operator^="_c, &Int16x2_operator_xorasg_Int16x2 },
    std::pair{ "operator<<="_c, &Int16x2_operator_lshasg_Int16x2 },
    std::pair{ "operator>>="_c, &Int16x2_operator_rhsasg_Int16x2 }
    } };
}
Int16x2 Int16x2Type;

/// f32x3 with Float32x3
Variable Float32x3_convert_Float32x3_arg0;
Function Float32x3_convert_Float32x3;
inline constexpr std::array Float32x3_convert_Float32x3_args = { &Float32x3_convert_Float32x3_arg0 };

/// f32x3 with Float32
Variable Float32x3_splat_Float32_arg0;
Function Float32x3_splat_Float32;
inline constexpr std::array Float32x3_splat_Float32_args = { &Float32x3_splat_Float32_arg0 };

/// f32x3 with UInt32x3
Variable Float32x3_convert_UInt32x3_arg0;
Function Float32x3_convert_UInt32x3;
inline constexpr std::array Float32x3_convert_UInt32x3_args = { &Float32x3_convert_UInt32x3_arg0 };

/// f32x3 with UInt32
Variable Float32x3_splat_UInt32_arg0;
Function Float32x3_splat_UInt32;
inline constexpr std::array Float32x3_splat_UInt32_args = { &Float32x3_splat_UInt32_arg0 };

/// f32x3 with Int32x3
Variable Float32x3_convert_Int32x3_arg0;
Function Float32x3_convert_Int32x3;
inline constexpr std::array Float32x3_convert_Int32x3_args = { &Float32x3_convert_Int32x3_arg0 };

/// f32x3 with Int32
Variable Float32x3_splat_Int32_arg0;
Function Float32x3_splat_Int32;
inline constexpr std::array Float32x3_splat_Int32_args = { &Float32x3_splat_Int32_arg0 };

/// f32x3 with Float16x3
Variable Float32x3_convert_Float16x3_arg0;
Function Float32x3_convert_Float16x3;
inline constexpr std::array Float32x3_convert_Float16x3_args = { &Float32x3_convert_Float16x3_arg0 };

/// f32x3 with Float16
Variable Float32x3_splat_Float16_arg0;
Function Float32x3_splat_Float16;
inline constexpr std::array Float32x3_splat_Float16_args = { &Float32x3_splat_Float16_arg0 };

/// f32x3 with UInt16x3
Variable Float32x3_convert_UInt16x3_arg0;
Function Float32x3_convert_UInt16x3;
inline constexpr std::array Float32x3_convert_UInt16x3_args = { &Float32x3_convert_UInt16x3_arg0 };

/// f32x3 with UInt16
Variable Float32x3_splat_UInt16_arg0;
Function Float32x3_splat_UInt16;
inline constexpr std::array Float32x3_splat_UInt16_args = { &Float32x3_splat_UInt16_arg0 };

/// f32x3 with Int16x3
Variable Float32x3_convert_Int16x3_arg0;
Function Float32x3_convert_Int16x3;
inline constexpr std::array Float32x3_convert_Int16x3_args = { &Float32x3_convert_Int16x3_arg0 };

/// f32x3 with Int16
Variable Float32x3_splat_Int16_arg0;
Function Float32x3_splat_Int16;
inline constexpr std::array Float32x3_splat_Int16_args = { &Float32x3_splat_Int16_arg0 };

/// f32x3 with Float32, Float32, Float32
Variable Float32x3_ctor0_arg0_Float32;
Variable Float32x3_ctor0_arg1_Float32;
Variable Float32x3_ctor0_arg2_Float32;
Function Float32x3_ctor0;
inline constexpr std::array Float32x3_ctor0_args = { &Float32x3_ctor0_arg0_Float32, &Float32x3_ctor0_arg1_Float32, &Float32x3_ctor0_arg2_Float32 };

/// f32x3 with Float32x2, Float32
Variable Float32x3_ctor1_arg0_Float32x2;
Variable Float32x3_ctor1_arg1_Float32;
Function Float32x3_ctor1;
inline constexpr std::array Float32x3_ctor1_args = { &Float32x3_ctor1_arg0_Float32x2, &Float32x3_ctor1_arg1_Float32 };

/// f32x3 with Float32, Float32x2
Variable Float32x3_ctor2_arg0_Float32;
Variable Float32x3_ctor2_arg1_Float32x2;
Function Float32x3_ctor2;
inline constexpr std::array Float32x3_ctor2_args = { &Float32x3_ctor2_arg0_Float32, &Float32x3_ctor2_arg1_Float32x2 };

/// operator[] with Int32
Variable Float32x3_operator_index_Int32_arg0;
Function Float32x3_operator_index_Int32;
inline constexpr std::array Float32x3_operator_index_Int32_args = { &Float32x3_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float32x3_operator_index_UInt32_arg0;
Function Float32x3_operator_index_UInt32;
inline constexpr std::array Float32x3_operator_index_UInt32_args = { &Float32x3_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float32x3_operator_index_Int16_arg0;
Function Float32x3_operator_index_Int16;
inline constexpr std::array Float32x3_operator_index_Int16_args = { &Float32x3_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float32x3_operator_index_UInt16_arg0;
Function Float32x3_operator_index_UInt16;
inline constexpr std::array Float32x3_operator_index_UInt16_args = { &Float32x3_operator_index_UInt16_arg0 };

/// operator+ with Float32x3
Variable Float32x3_operator_add_Float32x3_arg0;
Function Float32x3_operator_add_Float32x3;
inline constexpr std::array Float32x3_operator_add_Float32x3_args = { &Float32x3_operator_add_Float32x3_arg0 };

/// operator- with Float32x3
Variable Float32x3_operator_sub_Float32x3_arg0;
Function Float32x3_operator_sub_Float32x3;
inline constexpr std::array Float32x3_operator_sub_Float32x3_args = { &Float32x3_operator_sub_Float32x3_arg0 };

/// operator* with Float32x3
Variable Float32x3_operator_mul_Float32x3_arg0;
Function Float32x3_operator_mul_Float32x3;
inline constexpr std::array Float32x3_operator_mul_Float32x3_args = { &Float32x3_operator_mul_Float32x3_arg0 };

/// operator/ with Float32x3
Variable Float32x3_operator_div_Float32x3_arg0;
Function Float32x3_operator_div_Float32x3;
inline constexpr std::array Float32x3_operator_div_Float32x3_args = { &Float32x3_operator_div_Float32x3_arg0 };

/// operator% with Float32x3
Variable Float32x3_operator_mod_Float32x3_arg0;
Function Float32x3_operator_mod_Float32x3;
inline constexpr std::array Float32x3_operator_mod_Float32x3_args = { &Float32x3_operator_mod_Float32x3_arg0 };

/// operator+= with Float32x3
Variable Float32x3_operator_addasg_Float32x3_arg0;
Function Float32x3_operator_addasg_Float32x3;
inline constexpr std::array Float32x3_operator_addasg_Float32x3_args = { &Float32x3_operator_addasg_Float32x3_arg0 };

/// operator-= with Float32x3
Variable Float32x3_operator_subasg_Float32x3_arg0;
Function Float32x3_operator_subasg_Float32x3;
inline constexpr std::array Float32x3_operator_subasg_Float32x3_args = { &Float32x3_operator_subasg_Float32x3_arg0 };

/// operator*= with Float32x3
Variable Float32x3_operator_mulasg_Float32x3_arg0;
Function Float32x3_operator_mulasg_Float32x3;
inline constexpr std::array Float32x3_operator_mulasg_Float32x3_args = { &Float32x3_operator_mulasg_Float32x3_arg0 };

/// operator/= with Float32x3
Variable Float32x3_operator_divasg_Float32x3_arg0;
Function Float32x3_operator_divasg_Float32x3;
inline constexpr std::array Float32x3_operator_divasg_Float32x3_args = { &Float32x3_operator_divasg_Float32x3_arg0 };

/// operator< with Float32x3
Variable Float32x3_operator_lt_Float32x3_arg0;
Function Float32x3_operator_lt_Float32x3;
inline constexpr std::array Float32x3_operator_lt_Float32x3_args = { &Float32x3_operator_lt_Float32x3_arg0 };

/// operator<= with Float32x3
Variable Float32x3_operator_lte_Float32x3_arg0;
Function Float32x3_operator_lte_Float32x3;
inline constexpr std::array Float32x3_operator_lte_Float32x3_args = { &Float32x3_operator_lte_Float32x3_arg0 };

/// operator> with Float32x3
Variable Float32x3_operator_gt_Float32x3_arg0;
Function Float32x3_operator_gt_Float32x3;
inline constexpr std::array Float32x3_operator_gt_Float32x3_args = { &Float32x3_operator_gt_Float32x3_arg0 };

/// operator>= with Float32x3
Variable Float32x3_operator_gte_Float32x3_arg0;
Function Float32x3_operator_gte_Float32x3;
inline constexpr std::array Float32x3_operator_gte_Float32x3_args = { &Float32x3_operator_gte_Float32x3_arg0 };

/// operator== with Float32x3
Variable Float32x3_operator_eq_Float32x3_arg0;
Function Float32x3_operator_eq_Float32x3;
inline constexpr std::array Float32x3_operator_eq_Float32x3_args = { &Float32x3_operator_eq_Float32x3_arg0 };

/// operator!= with Float32x3
Variable Float32x3_operator_neq_Float32x3_arg0;
Function Float32x3_operator_neq_Float32x3;
inline constexpr std::array Float32x3_operator_neq_Float32x3_args = { &Float32x3_operator_neq_Float32x3_arg0 };

/// operator* with Float32
Variable Float32x3_operator_scale_Float32_arg0;
Function Float32x3_operator_scale_Float32;
inline constexpr std::array Float32x3_operator_scale_Float32_args = { &Float32x3_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable Float32x3_operator_scale_Float16_arg0;
Function Float32x3_operator_scale_Float16;
inline constexpr std::array Float32x3_operator_scale_Float16_args = { &Float32x3_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable Float32x3_operator_scale_UInt32_arg0;
Function Float32x3_operator_scale_UInt32;
inline constexpr std::array Float32x3_operator_scale_UInt32_args = { &Float32x3_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable Float32x3_operator_scale_UInt16_arg0;
Function Float32x3_operator_scale_UInt16;
inline constexpr std::array Float32x3_operator_scale_UInt16_args = { &Float32x3_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable Float32x3_operator_scale_Int32_arg0;
Function Float32x3_operator_scale_Int32;
inline constexpr std::array Float32x3_operator_scale_Int32_args = { &Float32x3_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable Float32x3_operator_scale_Int16_arg0;
Function Float32x3_operator_scale_Int16;
inline constexpr std::array Float32x3_operator_scale_Int16_args = { &Float32x3_operator_scale_Int16_arg0 };

/// operator* with Float32x3x2
Variable Float32x3_operator_mul_Float32x3x2_arg0;
Function Float32x3_operator_mul_Float32x3x2;
inline constexpr std::array Float32x3_operator_mul_Float32x3x2_args = { &Float32x3_operator_mul_Float32x3x2_arg0 };

/// operator* with Float32x3x3
Variable Float32x3_operator_mul_Float32x3x3_arg0;
Function Float32x3_operator_mul_Float32x3x3;
inline constexpr std::array Float32x3_operator_mul_Float32x3x3_args = { &Float32x3_operator_mul_Float32x3x3_arg0 };

/// operator* with Float32x3x4
Variable Float32x3_operator_mul_Float32x3x4_arg0;
Function Float32x3_operator_mul_Float32x3x4;
inline constexpr std::array Float32x3_operator_mul_Float32x3x4_args = { &Float32x3_operator_mul_Float32x3x4_arg0 };

Float32x3::Float32x3()
{
    this->name = "f32x3";
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// f32x3 with Float32x3
    Float32x3_convert_Float32x3_arg0.name = "val"_c;
    Float32x3_convert_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_convert_Float32x3.documentation = "Convert f32x3 to f32x3"_c;
    Float32x3_convert_Float32x3.name = "f32x3"_c;
    Float32x3_convert_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_convert_Float32x3.parameters = Float32x3_convert_Float32x3_args;
    Symbol::Resolved(&Float32x3_convert_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_convert_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Float32
    Float32x3_splat_Float32_arg0.name = "val"_c;
    Float32x3_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32x3_splat_Float32.documentation = "Splat f32x3 to f32x3"_c;
    Float32x3_splat_Float32.name = "f32x3"_c;
    Float32x3_splat_Float32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_splat_Float32.parameters = Float32x3_splat_Float32_args;
    Symbol::Resolved(&Float32x3_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3_splat_Float32)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with UInt32x3
    Float32x3_convert_UInt32x3_arg0.name = "val"_c;
    Float32x3_convert_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Float32x3_convert_UInt32x3.documentation = "Convert u32x3 to f32x3"_c;
    Float32x3_convert_UInt32x3.name = "f32x3"_c;
    Float32x3_convert_UInt32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_convert_UInt32x3.parameters = Float32x3_convert_UInt32x3_args;
    Symbol::Resolved(&Float32x3_convert_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&Float32x3_convert_UInt32x3)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with UInt32
    Float32x3_splat_UInt32_arg0.name = "val"_c;
    Float32x3_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x3_splat_UInt32.documentation = "Splat u32x3 to f32x3"_c;
    Float32x3_splat_UInt32.name = "f32x3"_c;
    Float32x3_splat_UInt32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_splat_UInt32.parameters = Float32x3_splat_UInt32_args;
    Symbol::Resolved(&Float32x3_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3_splat_UInt32)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Int32x3
    Float32x3_convert_Int32x3_arg0.name = "val"_c;
    Float32x3_convert_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Float32x3_convert_Int32x3.documentation = "Convert i32x3 to f32x3"_c;
    Float32x3_convert_Int32x3.name = "f32x3"_c;
    Float32x3_convert_Int32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_convert_Int32x3.parameters = Float32x3_convert_Int32x3_args;
    Symbol::Resolved(&Float32x3_convert_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Float32x3_convert_Int32x3)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Int32
    Float32x3_splat_Int32_arg0.name = "val"_c;
    Float32x3_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x3_splat_Int32.documentation = "Splat i32x3 to f32x3"_c;
    Float32x3_splat_Int32.name = "f32x3"_c;
    Float32x3_splat_Int32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_splat_Int32.parameters = Float32x3_splat_Int32_args;
    Symbol::Resolved(&Float32x3_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3_splat_Int32)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Float16x3
    Float32x3_convert_Float16x3_arg0.name = "val"_c;
    Float32x3_convert_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float32x3_convert_Float16x3.documentation = "Convert f16x3 to f32x3"_c;
    Float32x3_convert_Float16x3.name = "f32x3"_c;
    Float32x3_convert_Float16x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_convert_Float16x3.parameters = Float32x3_convert_Float16x3_args;
    Symbol::Resolved(&Float32x3_convert_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float32x3_convert_Float16x3)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Float16
    Float32x3_splat_Float16_arg0.name = "val"_c;
    Float32x3_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float32x3_splat_Float16.documentation = "Splat f16x3 to f32x3"_c;
    Float32x3_splat_Float16.name = "f32x3"_c;
    Float32x3_splat_Float16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_splat_Float16.parameters = Float32x3_splat_Float16_args;
    Symbol::Resolved(&Float32x3_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float32x3_splat_Float16)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with UInt16x3
    Float32x3_convert_UInt16x3_arg0.name = "val"_c;
    Float32x3_convert_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Float32x3_convert_UInt16x3.documentation = "Convert u16x3 to f32x3"_c;
    Float32x3_convert_UInt16x3.name = "f32x3"_c;
    Float32x3_convert_UInt16x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_convert_UInt16x3.parameters = Float32x3_convert_UInt16x3_args;
    Symbol::Resolved(&Float32x3_convert_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&Float32x3_convert_UInt16x3)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with UInt16
    Float32x3_splat_UInt16_arg0.name = "val"_c;
    Float32x3_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x3_splat_UInt16.documentation = "Splat u16x3 to f32x3"_c;
    Float32x3_splat_UInt16.name = "f32x3"_c;
    Float32x3_splat_UInt16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_splat_UInt16.parameters = Float32x3_splat_UInt16_args;
    Symbol::Resolved(&Float32x3_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x3_splat_UInt16)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Int16x3
    Float32x3_convert_Int16x3_arg0.name = "val"_c;
    Float32x3_convert_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Float32x3_convert_Int16x3.documentation = "Convert i16x3 to f32x3"_c;
    Float32x3_convert_Int16x3.name = "f32x3"_c;
    Float32x3_convert_Int16x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_convert_Int16x3.parameters = Float32x3_convert_Int16x3_args;
    Symbol::Resolved(&Float32x3_convert_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Float32x3_convert_Int16x3)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Int16
    Float32x3_splat_Int16_arg0.name = "val"_c;
    Float32x3_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x3_splat_Int16.documentation = "Splat i16x3 to f32x3"_c;
    Float32x3_splat_Int16.name = "f32x3"_c;
    Float32x3_splat_Int16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_splat_Int16.parameters = Float32x3_splat_Int16_args;
    Symbol::Resolved(&Float32x3_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x3_splat_Int16)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Float32, Float32, Float32
    Float32x3_ctor0_arg0_Float32.name = "_arg0"_c;
    Float32x3_ctor0_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32x3_ctor0_arg1_Float32.name = "_arg1"_c;
    Float32x3_ctor0_arg1_Float32.type = Type::FullType{ Float32Type.name };
    Float32x3_ctor0_arg2_Float32.name = "_arg2"_c;
    Float32x3_ctor0_arg2_Float32.type = Type::FullType{ Float32Type.name };
    Float32x3_ctor0.name = "f32x3"_c;
    Float32x3_ctor0.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_ctor0.parameters = Float32x3_ctor0_args;
    Symbol::Resolved(&Float32x3_ctor0_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3_ctor0_arg1_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3_ctor0_arg2_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3_ctor0)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Float32x2, Float32
    Float32x3_ctor1_arg0_Float32x2.name = "_arg0"_c;
    Float32x3_ctor1_arg0_Float32x2.type = Type::FullType{ Float32x2Type.name };
    Float32x3_ctor1_arg1_Float32.name = "_arg1"_c;
    Float32x3_ctor1_arg1_Float32.type = Type::FullType{ Float32Type.name };
    Float32x3_ctor1.name = "f32x3"_c;
    Float32x3_ctor1.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_ctor1.parameters = Float32x3_ctor1_args;
    Symbol::Resolved(&Float32x3_ctor1_arg0_Float32x2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x3_ctor1_arg1_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3_ctor1)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Float32, Float32x2
    Float32x3_ctor2_arg0_Float32.name = "_arg0"_c;
    Float32x3_ctor2_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32x3_ctor2_arg1_Float32x2.name = "_arg1"_c;
    Float32x3_ctor2_arg1_Float32x2.type = Type::FullType{ Float32x2Type.name };
    Float32x3_ctor2.name = "f32x3"_c;
    Float32x3_ctor2.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_ctor2.parameters = Float32x3_ctor2_args;
    Symbol::Resolved(&Float32x3_ctor2_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3_ctor2_arg1_Float32x2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x3_ctor2)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with Int32
    Float32x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x3_operator_index_Int32.name = "operator[]"_c;
    Float32x3_operator_index_Int32.returnType = Type::FullType { Float32Type.name };
    Float32x3_operator_index_Int32.parameters = Float32x3_operator_index_Int32_args;
    Symbol::Resolved(&Float32x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt32
    Float32x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x3_operator_index_UInt32.name = "operator[]"_c;
    Float32x3_operator_index_UInt32.returnType = Type::FullType { Float32Type.name };
    Float32x3_operator_index_UInt32.parameters = Float32x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    /// operator[] with Int16
    Float32x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x3_operator_index_Int16.name = "operator[]"_c;
    Float32x3_operator_index_Int16.returnType = Type::FullType { Float32Type.name };
    Float32x3_operator_index_Int16.parameters = Float32x3_operator_index_Int16_args;
    Symbol::Resolved(&Float32x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x3_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt16
    Float32x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x3_operator_index_UInt16.name = "operator[]"_c;
    Float32x3_operator_index_UInt16.returnType = Type::FullType { Float32Type.name };
    Float32x3_operator_index_UInt16.parameters = Float32x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x3_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    /// operator+ with Float32x3
    Float32x3_operator_add_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_add_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_add_Float32x3.name = "operator+"_c;
    Float32x3_operator_add_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_add_Float32x3.parameters = Float32x3_operator_add_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_add_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_add_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator- with Float32x3
    Float32x3_operator_sub_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_sub_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_sub_Float32x3.name = "operator-"_c;
    Float32x3_operator_sub_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_sub_Float32x3.parameters = Float32x3_operator_sub_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_sub_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_sub_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x3
    Float32x3_operator_mul_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_mul_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_mul_Float32x3.name = "operator*"_c;
    Float32x3_operator_mul_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_mul_Float32x3.parameters = Float32x3_operator_mul_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator/ with Float32x3
    Float32x3_operator_div_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_div_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_div_Float32x3.name = "operator/"_c;
    Float32x3_operator_div_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_div_Float32x3.parameters = Float32x3_operator_div_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_div_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_div_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator% with Float32x3
    Float32x3_operator_mod_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_mod_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_mod_Float32x3.name = "operator%"_c;
    Float32x3_operator_mod_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_mod_Float32x3.parameters = Float32x3_operator_mod_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_mod_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_mod_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator+= with Float32x3
    Float32x3_operator_addasg_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_addasg_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_addasg_Float32x3.name = "operator+="_c;
    Float32x3_operator_addasg_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_addasg_Float32x3.parameters = Float32x3_operator_addasg_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_addasg_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_addasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator-= with Float32x3
    Float32x3_operator_subasg_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_subasg_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_subasg_Float32x3.name = "operator-="_c;
    Float32x3_operator_subasg_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_subasg_Float32x3.parameters = Float32x3_operator_subasg_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_subasg_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_subasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator*= with Float32x3
    Float32x3_operator_mulasg_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_mulasg_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_mulasg_Float32x3.name = "operator*="_c;
    Float32x3_operator_mulasg_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_mulasg_Float32x3.parameters = Float32x3_operator_mulasg_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_mulasg_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_mulasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator/= with Float32x3
    Float32x3_operator_divasg_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_divasg_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_divasg_Float32x3.name = "operator/="_c;
    Float32x3_operator_divasg_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_divasg_Float32x3.parameters = Float32x3_operator_divasg_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_divasg_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_divasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator< with Float32x3
    Float32x3_operator_lt_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_lt_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_lt_Float32x3.name = "operator<"_c;
    Float32x3_operator_lt_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_lt_Float32x3.parameters = Float32x3_operator_lt_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_lt_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_lt_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator<= with Float32x3
    Float32x3_operator_lte_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_lte_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_lte_Float32x3.name = "operator<="_c;
    Float32x3_operator_lte_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_lte_Float32x3.parameters = Float32x3_operator_lte_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_lte_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_lte_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator> with Float32x3
    Float32x3_operator_gt_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_gt_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_gt_Float32x3.name = "operator>"_c;
    Float32x3_operator_gt_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_gt_Float32x3.parameters = Float32x3_operator_gt_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_gt_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_gt_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator>= with Float32x3
    Float32x3_operator_gte_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_gte_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_gte_Float32x3.name = "operator>="_c;
    Float32x3_operator_gte_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_gte_Float32x3.parameters = Float32x3_operator_gte_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_gte_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_gte_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator== with Float32x3
    Float32x3_operator_eq_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_eq_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_eq_Float32x3.name = "operator=="_c;
    Float32x3_operator_eq_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_eq_Float32x3.parameters = Float32x3_operator_eq_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_eq_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_eq_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator!= with Float32x3
    Float32x3_operator_neq_Float32x3_arg0.name = "_arg0"_c;
    Float32x3_operator_neq_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_neq_Float32x3.name = "operator!="_c;
    Float32x3_operator_neq_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_neq_Float32x3.parameters = Float32x3_operator_neq_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_neq_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_neq_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32
    Float32x3_operator_scale_Float32_arg0.name = "_arg0"_c;
    Float32x3_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32x3_operator_scale_Float32.name = "operator*"_c;
    Float32x3_operator_scale_Float32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_scale_Float32.parameters = Float32x3_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x3_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3_operator_scale_Float32)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float16
    Float32x3_operator_scale_Float16_arg0.name = "_arg0"_c;
    Float32x3_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float32x3_operator_scale_Float16.name = "operator*"_c;
    Float32x3_operator_scale_Float16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_scale_Float16.parameters = Float32x3_operator_scale_Float16_args;
    Symbol::Resolved(&Float32x3_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float32x3_operator_scale_Float16)->returnTypeSymbol = &Float32x3Type;

    /// operator* with UInt32
    Float32x3_operator_scale_UInt32_arg0.name = "_arg0"_c;
    Float32x3_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x3_operator_scale_UInt32.name = "operator*"_c;
    Float32x3_operator_scale_UInt32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_scale_UInt32.parameters = Float32x3_operator_scale_UInt32_args;
    Symbol::Resolved(&Float32x3_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3_operator_scale_UInt32)->returnTypeSymbol = &Float32x3Type;

    /// operator* with UInt16
    Float32x3_operator_scale_UInt16_arg0.name = "_arg0"_c;
    Float32x3_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x3_operator_scale_UInt16.name = "operator*"_c;
    Float32x3_operator_scale_UInt16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_scale_UInt16.parameters = Float32x3_operator_scale_UInt16_args;
    Symbol::Resolved(&Float32x3_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x3_operator_scale_UInt16)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Int32
    Float32x3_operator_scale_Int32_arg0.name = "_arg0"_c;
    Float32x3_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x3_operator_scale_Int32.name = "operator*"_c;
    Float32x3_operator_scale_Int32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_scale_Int32.parameters = Float32x3_operator_scale_Int32_args;
    Symbol::Resolved(&Float32x3_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3_operator_scale_Int32)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Int16
    Float32x3_operator_scale_Int16_arg0.name = "_arg0"_c;
    Float32x3_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x3_operator_scale_Int16.name = "operator*"_c;
    Float32x3_operator_scale_Int16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_scale_Int16.parameters = Float32x3_operator_scale_Int16_args;
    Symbol::Resolved(&Float32x3_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x3_operator_scale_Int16)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x3x2
    Float32x3_operator_mul_Float32x3x2_arg0.name = "_arg0"_c;
    Float32x3_operator_mul_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3_operator_mul_Float32x3x2.name = "operator*"_c;
    Float32x3_operator_mul_Float32x3x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x3_operator_mul_Float32x3x2.parameters = Float32x3_operator_mul_Float32x3x2_args;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3x2)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x3x3
    Float32x3_operator_mul_Float32x3x3_arg0.name = "_arg0"_c;
    Float32x3_operator_mul_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3_operator_mul_Float32x3x3.name = "operator*"_c;
    Float32x3_operator_mul_Float32x3x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_mul_Float32x3x3.parameters = Float32x3_operator_mul_Float32x3x3_args;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3x3)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x3x4
    Float32x3_operator_mul_Float32x3x4_arg0.name = "_arg0"_c;
    Float32x3_operator_mul_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3_operator_mul_Float32x3x4.name = "operator*"_c;
    Float32x3_operator_mul_Float32x3x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x3_operator_mul_Float32x3x4.parameters = Float32x3_operator_mul_Float32x3x4_args;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3x4)->returnTypeSymbol = &Float32x4Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Float32x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3_operator_add_Float32x3 },
    std::pair{ "operator-"_c, &Float32x3_operator_sub_Float32x3 },
    std::pair{ "operator*"_c, &Float32x3_operator_mul_Float32x3 },
    std::pair{ "operator/"_c, &Float32x3_operator_div_Float32x3 },
    std::pair{ "operator%"_c, &Float32x3_operator_mod_Float32x3 },
    std::pair{ "operator+="_c, &Float32x3_operator_addasg_Float32x3 },
    std::pair{ "operator-="_c, &Float32x3_operator_subasg_Float32x3 },
    std::pair{ "operator*="_c, &Float32x3_operator_mulasg_Float32x3 },
    std::pair{ "operator/="_c, &Float32x3_operator_divasg_Float32x3 },
    std::pair{ "operator<"_c, &Float32x3_operator_lt_Float32x3 },
    std::pair{ "operator<="_c, &Float32x3_operator_lte_Float32x3 },
    std::pair{ "operator>"_c, &Float32x3_operator_gt_Float32x3 },
    std::pair{ "operator>="_c, &Float32x3_operator_gte_Float32x3 },
    std::pair{ "operator=="_c, &Float32x3_operator_eq_Float32x3 },
    std::pair{ "operator!="_c, &Float32x3_operator_neq_Float32x3 },
    std::pair{ "operator*"_c, &Float32x3_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Float32x3_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Float32x3_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Float32x3_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Float32x3_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Float32x3_operator_scale_Int16 },
    std::pair{ "operator*"_c, &Float32x3_operator_mul_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3_operator_mul_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3_operator_mul_Float32x3x4 }
    } };
}
Float32x3 Float32x3Type;

/// u32x3 with Float32x3
Variable UInt32x3_convert_Float32x3_arg0;
Function UInt32x3_convert_Float32x3;
inline constexpr std::array UInt32x3_convert_Float32x3_args = { &UInt32x3_convert_Float32x3_arg0 };

/// u32x3 with Float32
Variable UInt32x3_splat_Float32_arg0;
Function UInt32x3_splat_Float32;
inline constexpr std::array UInt32x3_splat_Float32_args = { &UInt32x3_splat_Float32_arg0 };

/// u32x3 with UInt32x3
Variable UInt32x3_convert_UInt32x3_arg0;
Function UInt32x3_convert_UInt32x3;
inline constexpr std::array UInt32x3_convert_UInt32x3_args = { &UInt32x3_convert_UInt32x3_arg0 };

/// u32x3 with UInt32
Variable UInt32x3_splat_UInt32_arg0;
Function UInt32x3_splat_UInt32;
inline constexpr std::array UInt32x3_splat_UInt32_args = { &UInt32x3_splat_UInt32_arg0 };

/// u32x3 with Int32x3
Variable UInt32x3_convert_Int32x3_arg0;
Function UInt32x3_convert_Int32x3;
inline constexpr std::array UInt32x3_convert_Int32x3_args = { &UInt32x3_convert_Int32x3_arg0 };

/// u32x3 with Int32
Variable UInt32x3_splat_Int32_arg0;
Function UInt32x3_splat_Int32;
inline constexpr std::array UInt32x3_splat_Int32_args = { &UInt32x3_splat_Int32_arg0 };

/// u32x3 with Float16x3
Variable UInt32x3_convert_Float16x3_arg0;
Function UInt32x3_convert_Float16x3;
inline constexpr std::array UInt32x3_convert_Float16x3_args = { &UInt32x3_convert_Float16x3_arg0 };

/// u32x3 with Float16
Variable UInt32x3_splat_Float16_arg0;
Function UInt32x3_splat_Float16;
inline constexpr std::array UInt32x3_splat_Float16_args = { &UInt32x3_splat_Float16_arg0 };

/// u32x3 with UInt16x3
Variable UInt32x3_convert_UInt16x3_arg0;
Function UInt32x3_convert_UInt16x3;
inline constexpr std::array UInt32x3_convert_UInt16x3_args = { &UInt32x3_convert_UInt16x3_arg0 };

/// u32x3 with UInt16
Variable UInt32x3_splat_UInt16_arg0;
Function UInt32x3_splat_UInt16;
inline constexpr std::array UInt32x3_splat_UInt16_args = { &UInt32x3_splat_UInt16_arg0 };

/// u32x3 with Int16x3
Variable UInt32x3_convert_Int16x3_arg0;
Function UInt32x3_convert_Int16x3;
inline constexpr std::array UInt32x3_convert_Int16x3_args = { &UInt32x3_convert_Int16x3_arg0 };

/// u32x3 with Int16
Variable UInt32x3_splat_Int16_arg0;
Function UInt32x3_splat_Int16;
inline constexpr std::array UInt32x3_splat_Int16_args = { &UInt32x3_splat_Int16_arg0 };

/// u32x3 with UInt32, UInt32, UInt32
Variable UInt32x3_ctor0_arg0_UInt32;
Variable UInt32x3_ctor0_arg1_UInt32;
Variable UInt32x3_ctor0_arg2_UInt32;
Function UInt32x3_ctor0;
inline constexpr std::array UInt32x3_ctor0_args = { &UInt32x3_ctor0_arg0_UInt32, &UInt32x3_ctor0_arg1_UInt32, &UInt32x3_ctor0_arg2_UInt32 };

/// u32x3 with UInt32x2, UInt32
Variable UInt32x3_ctor1_arg0_UInt32x2;
Variable UInt32x3_ctor1_arg1_UInt32;
Function UInt32x3_ctor1;
inline constexpr std::array UInt32x3_ctor1_args = { &UInt32x3_ctor1_arg0_UInt32x2, &UInt32x3_ctor1_arg1_UInt32 };

/// u32x3 with UInt32, UInt32x2
Variable UInt32x3_ctor2_arg0_UInt32;
Variable UInt32x3_ctor2_arg1_UInt32x2;
Function UInt32x3_ctor2;
inline constexpr std::array UInt32x3_ctor2_args = { &UInt32x3_ctor2_arg0_UInt32, &UInt32x3_ctor2_arg1_UInt32x2 };

/// operator[] with Int32
Variable UInt32x3_operator_index_Int32_arg0;
Function UInt32x3_operator_index_Int32;
inline constexpr std::array UInt32x3_operator_index_Int32_args = { &UInt32x3_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable UInt32x3_operator_index_UInt32_arg0;
Function UInt32x3_operator_index_UInt32;
inline constexpr std::array UInt32x3_operator_index_UInt32_args = { &UInt32x3_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable UInt32x3_operator_index_Int16_arg0;
Function UInt32x3_operator_index_Int16;
inline constexpr std::array UInt32x3_operator_index_Int16_args = { &UInt32x3_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable UInt32x3_operator_index_UInt16_arg0;
Function UInt32x3_operator_index_UInt16;
inline constexpr std::array UInt32x3_operator_index_UInt16_args = { &UInt32x3_operator_index_UInt16_arg0 };

/// operator+ with UInt32x3
Variable UInt32x3_operator_add_UInt32x3_arg0;
Function UInt32x3_operator_add_UInt32x3;
inline constexpr std::array UInt32x3_operator_add_UInt32x3_args = { &UInt32x3_operator_add_UInt32x3_arg0 };

/// operator- with UInt32x3
Variable UInt32x3_operator_sub_UInt32x3_arg0;
Function UInt32x3_operator_sub_UInt32x3;
inline constexpr std::array UInt32x3_operator_sub_UInt32x3_args = { &UInt32x3_operator_sub_UInt32x3_arg0 };

/// operator* with UInt32x3
Variable UInt32x3_operator_mul_UInt32x3_arg0;
Function UInt32x3_operator_mul_UInt32x3;
inline constexpr std::array UInt32x3_operator_mul_UInt32x3_args = { &UInt32x3_operator_mul_UInt32x3_arg0 };

/// operator/ with UInt32x3
Variable UInt32x3_operator_div_UInt32x3_arg0;
Function UInt32x3_operator_div_UInt32x3;
inline constexpr std::array UInt32x3_operator_div_UInt32x3_args = { &UInt32x3_operator_div_UInt32x3_arg0 };

/// operator% with UInt32x3
Variable UInt32x3_operator_mod_UInt32x3_arg0;
Function UInt32x3_operator_mod_UInt32x3;
inline constexpr std::array UInt32x3_operator_mod_UInt32x3_args = { &UInt32x3_operator_mod_UInt32x3_arg0 };

/// operator+= with UInt32x3
Variable UInt32x3_operator_addasg_UInt32x3_arg0;
Function UInt32x3_operator_addasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_addasg_UInt32x3_args = { &UInt32x3_operator_addasg_UInt32x3_arg0 };

/// operator-= with UInt32x3
Variable UInt32x3_operator_subasg_UInt32x3_arg0;
Function UInt32x3_operator_subasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_subasg_UInt32x3_args = { &UInt32x3_operator_subasg_UInt32x3_arg0 };

/// operator*= with UInt32x3
Variable UInt32x3_operator_mulasg_UInt32x3_arg0;
Function UInt32x3_operator_mulasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_mulasg_UInt32x3_args = { &UInt32x3_operator_mulasg_UInt32x3_arg0 };

/// operator/= with UInt32x3
Variable UInt32x3_operator_divasg_UInt32x3_arg0;
Function UInt32x3_operator_divasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_divasg_UInt32x3_args = { &UInt32x3_operator_divasg_UInt32x3_arg0 };

/// operator< with UInt32x3
Variable UInt32x3_operator_lt_UInt32x3_arg0;
Function UInt32x3_operator_lt_UInt32x3;
inline constexpr std::array UInt32x3_operator_lt_UInt32x3_args = { &UInt32x3_operator_lt_UInt32x3_arg0 };

/// operator<= with UInt32x3
Variable UInt32x3_operator_lte_UInt32x3_arg0;
Function UInt32x3_operator_lte_UInt32x3;
inline constexpr std::array UInt32x3_operator_lte_UInt32x3_args = { &UInt32x3_operator_lte_UInt32x3_arg0 };

/// operator> with UInt32x3
Variable UInt32x3_operator_gt_UInt32x3_arg0;
Function UInt32x3_operator_gt_UInt32x3;
inline constexpr std::array UInt32x3_operator_gt_UInt32x3_args = { &UInt32x3_operator_gt_UInt32x3_arg0 };

/// operator>= with UInt32x3
Variable UInt32x3_operator_gte_UInt32x3_arg0;
Function UInt32x3_operator_gte_UInt32x3;
inline constexpr std::array UInt32x3_operator_gte_UInt32x3_args = { &UInt32x3_operator_gte_UInt32x3_arg0 };

/// operator== with UInt32x3
Variable UInt32x3_operator_eq_UInt32x3_arg0;
Function UInt32x3_operator_eq_UInt32x3;
inline constexpr std::array UInt32x3_operator_eq_UInt32x3_args = { &UInt32x3_operator_eq_UInt32x3_arg0 };

/// operator!= with UInt32x3
Variable UInt32x3_operator_neq_UInt32x3_arg0;
Function UInt32x3_operator_neq_UInt32x3;
inline constexpr std::array UInt32x3_operator_neq_UInt32x3_args = { &UInt32x3_operator_neq_UInt32x3_arg0 };

/// operator* with Float32
Variable UInt32x3_operator_scale_Float32_arg0;
Function UInt32x3_operator_scale_Float32;
inline constexpr std::array UInt32x3_operator_scale_Float32_args = { &UInt32x3_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable UInt32x3_operator_scale_Float16_arg0;
Function UInt32x3_operator_scale_Float16;
inline constexpr std::array UInt32x3_operator_scale_Float16_args = { &UInt32x3_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable UInt32x3_operator_scale_UInt32_arg0;
Function UInt32x3_operator_scale_UInt32;
inline constexpr std::array UInt32x3_operator_scale_UInt32_args = { &UInt32x3_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable UInt32x3_operator_scale_UInt16_arg0;
Function UInt32x3_operator_scale_UInt16;
inline constexpr std::array UInt32x3_operator_scale_UInt16_args = { &UInt32x3_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable UInt32x3_operator_scale_Int32_arg0;
Function UInt32x3_operator_scale_Int32;
inline constexpr std::array UInt32x3_operator_scale_Int32_args = { &UInt32x3_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable UInt32x3_operator_scale_Int16_arg0;
Function UInt32x3_operator_scale_Int16;
inline constexpr std::array UInt32x3_operator_scale_Int16_args = { &UInt32x3_operator_scale_Int16_arg0 };

/// operator| with UInt32x3
Variable UInt32x3_operator_or_UInt32x3_arg0;
Function UInt32x3_operator_or_UInt32x3;
inline constexpr std::array UInt32x3_operator_or_UInt32x3_args = { &UInt32x3_operator_or_UInt32x3_arg0 };

/// operator& with UInt32x3
Variable UInt32x3_operator_and_UInt32x3_arg0;
Function UInt32x3_operator_and_UInt32x3;
inline constexpr std::array UInt32x3_operator_and_UInt32x3_args = { &UInt32x3_operator_and_UInt32x3_arg0 };

/// operator^ with UInt32x3
Variable UInt32x3_operator_xor_UInt32x3_arg0;
Function UInt32x3_operator_xor_UInt32x3;
inline constexpr std::array UInt32x3_operator_xor_UInt32x3_args = { &UInt32x3_operator_xor_UInt32x3_arg0 };

/// operator<< with UInt32x3
Variable UInt32x3_operator_lsh_UInt32x3_arg0;
Function UInt32x3_operator_lsh_UInt32x3;
inline constexpr std::array UInt32x3_operator_lsh_UInt32x3_args = { &UInt32x3_operator_lsh_UInt32x3_arg0 };

/// operator>> with UInt32x3
Variable UInt32x3_operator_rsh_UInt32x3_arg0;
Function UInt32x3_operator_rsh_UInt32x3;
inline constexpr std::array UInt32x3_operator_rsh_UInt32x3_args = { &UInt32x3_operator_rsh_UInt32x3_arg0 };

/// operator|= with UInt32x3
Variable UInt32x3_operator_orasg_UInt32x3_arg0;
Function UInt32x3_operator_orasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_orasg_UInt32x3_args = { &UInt32x3_operator_orasg_UInt32x3_arg0 };

/// operator&= with UInt32x3
Variable UInt32x3_operator_andasg_UInt32x3_arg0;
Function UInt32x3_operator_andasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_andasg_UInt32x3_args = { &UInt32x3_operator_andasg_UInt32x3_arg0 };

/// operator^= with UInt32x3
Variable UInt32x3_operator_xorasg_UInt32x3_arg0;
Function UInt32x3_operator_xorasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_xorasg_UInt32x3_args = { &UInt32x3_operator_xorasg_UInt32x3_arg0 };

/// operator<<= with UInt32x3
Variable UInt32x3_operator_lshasg_UInt32x3_arg0;
Function UInt32x3_operator_lshasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_lshasg_UInt32x3_args = { &UInt32x3_operator_lshasg_UInt32x3_arg0 };

/// operator>>= with UInt32x3
Variable UInt32x3_operator_rhsasg_UInt32x3_arg0;
Function UInt32x3_operator_rhsasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_rhsasg_UInt32x3_args = { &UInt32x3_operator_rhsasg_UInt32x3_arg0 };

UInt32x3::UInt32x3()
{
    this->name = "u32x3";
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    /// u32x3 with Float32x3
    UInt32x3_convert_Float32x3_arg0.name = "val"_c;
    UInt32x3_convert_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    UInt32x3_convert_Float32x3.documentation = "Convert f32x3 to u32x3"_c;
    UInt32x3_convert_Float32x3.name = "u32x3"_c;
    UInt32x3_convert_Float32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_convert_Float32x3.parameters = UInt32x3_convert_Float32x3_args;
    Symbol::Resolved(&UInt32x3_convert_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&UInt32x3_convert_Float32x3)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Float32
    UInt32x3_splat_Float32_arg0.name = "val"_c;
    UInt32x3_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    UInt32x3_splat_Float32.documentation = "Splat f32x3 to u32x3"_c;
    UInt32x3_splat_Float32.name = "u32x3"_c;
    UInt32x3_splat_Float32.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_splat_Float32.parameters = UInt32x3_splat_Float32_args;
    Symbol::Resolved(&UInt32x3_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x3_splat_Float32)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with UInt32x3
    UInt32x3_convert_UInt32x3_arg0.name = "val"_c;
    UInt32x3_convert_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_convert_UInt32x3.documentation = "Convert u32x3 to u32x3"_c;
    UInt32x3_convert_UInt32x3.name = "u32x3"_c;
    UInt32x3_convert_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_convert_UInt32x3.parameters = UInt32x3_convert_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_convert_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_convert_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with UInt32
    UInt32x3_splat_UInt32_arg0.name = "val"_c;
    UInt32x3_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32x3_splat_UInt32.documentation = "Splat u32x3 to u32x3"_c;
    UInt32x3_splat_UInt32.name = "u32x3"_c;
    UInt32x3_splat_UInt32.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_splat_UInt32.parameters = UInt32x3_splat_UInt32_args;
    Symbol::Resolved(&UInt32x3_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_splat_UInt32)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Int32x3
    UInt32x3_convert_Int32x3_arg0.name = "val"_c;
    UInt32x3_convert_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    UInt32x3_convert_Int32x3.documentation = "Convert i32x3 to u32x3"_c;
    UInt32x3_convert_Int32x3.name = "u32x3"_c;
    UInt32x3_convert_Int32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_convert_Int32x3.parameters = UInt32x3_convert_Int32x3_args;
    Symbol::Resolved(&UInt32x3_convert_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&UInt32x3_convert_Int32x3)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Int32
    UInt32x3_splat_Int32_arg0.name = "val"_c;
    UInt32x3_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt32x3_splat_Int32.documentation = "Splat i32x3 to u32x3"_c;
    UInt32x3_splat_Int32.name = "u32x3"_c;
    UInt32x3_splat_Int32.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_splat_Int32.parameters = UInt32x3_splat_Int32_args;
    Symbol::Resolved(&UInt32x3_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x3_splat_Int32)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Float16x3
    UInt32x3_convert_Float16x3_arg0.name = "val"_c;
    UInt32x3_convert_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    UInt32x3_convert_Float16x3.documentation = "Convert f16x3 to u32x3"_c;
    UInt32x3_convert_Float16x3.name = "u32x3"_c;
    UInt32x3_convert_Float16x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_convert_Float16x3.parameters = UInt32x3_convert_Float16x3_args;
    Symbol::Resolved(&UInt32x3_convert_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&UInt32x3_convert_Float16x3)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Float16
    UInt32x3_splat_Float16_arg0.name = "val"_c;
    UInt32x3_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    UInt32x3_splat_Float16.documentation = "Splat f16x3 to u32x3"_c;
    UInt32x3_splat_Float16.name = "u32x3"_c;
    UInt32x3_splat_Float16.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_splat_Float16.parameters = UInt32x3_splat_Float16_args;
    Symbol::Resolved(&UInt32x3_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt32x3_splat_Float16)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with UInt16x3
    UInt32x3_convert_UInt16x3_arg0.name = "val"_c;
    UInt32x3_convert_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt32x3_convert_UInt16x3.documentation = "Convert u16x3 to u32x3"_c;
    UInt32x3_convert_UInt16x3.name = "u32x3"_c;
    UInt32x3_convert_UInt16x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_convert_UInt16x3.parameters = UInt32x3_convert_UInt16x3_args;
    Symbol::Resolved(&UInt32x3_convert_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt32x3_convert_UInt16x3)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with UInt16
    UInt32x3_splat_UInt16_arg0.name = "val"_c;
    UInt32x3_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt32x3_splat_UInt16.documentation = "Splat u16x3 to u32x3"_c;
    UInt32x3_splat_UInt16.name = "u32x3"_c;
    UInt32x3_splat_UInt16.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_splat_UInt16.parameters = UInt32x3_splat_UInt16_args;
    Symbol::Resolved(&UInt32x3_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x3_splat_UInt16)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Int16x3
    UInt32x3_convert_Int16x3_arg0.name = "val"_c;
    UInt32x3_convert_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    UInt32x3_convert_Int16x3.documentation = "Convert i16x3 to u32x3"_c;
    UInt32x3_convert_Int16x3.name = "u32x3"_c;
    UInt32x3_convert_Int16x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_convert_Int16x3.parameters = UInt32x3_convert_Int16x3_args;
    Symbol::Resolved(&UInt32x3_convert_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&UInt32x3_convert_Int16x3)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Int16
    UInt32x3_splat_Int16_arg0.name = "val"_c;
    UInt32x3_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt32x3_splat_Int16.documentation = "Splat i16x3 to u32x3"_c;
    UInt32x3_splat_Int16.name = "u32x3"_c;
    UInt32x3_splat_Int16.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_splat_Int16.parameters = UInt32x3_splat_Int16_args;
    Symbol::Resolved(&UInt32x3_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x3_splat_Int16)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with UInt32, UInt32, UInt32
    UInt32x3_ctor0_arg0_UInt32.name = "_arg0"_c;
    UInt32x3_ctor0_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x3_ctor0_arg1_UInt32.name = "_arg1"_c;
    UInt32x3_ctor0_arg1_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x3_ctor0_arg2_UInt32.name = "_arg2"_c;
    UInt32x3_ctor0_arg2_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x3_ctor0.name = "u32x3"_c;
    UInt32x3_ctor0.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_ctor0.parameters = UInt32x3_ctor0_args;
    Symbol::Resolved(&UInt32x3_ctor0_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_ctor0_arg1_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_ctor0_arg2_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_ctor0)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with UInt32x2, UInt32
    UInt32x3_ctor1_arg0_UInt32x2.name = "_arg0"_c;
    UInt32x3_ctor1_arg0_UInt32x2.type = Type::FullType{ UInt32x2Type.name };
    UInt32x3_ctor1_arg1_UInt32.name = "_arg1"_c;
    UInt32x3_ctor1_arg1_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x3_ctor1.name = "u32x3"_c;
    UInt32x3_ctor1.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_ctor1.parameters = UInt32x3_ctor1_args;
    Symbol::Resolved(&UInt32x3_ctor1_arg0_UInt32x2)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x3_ctor1_arg1_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_ctor1)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with UInt32, UInt32x2
    UInt32x3_ctor2_arg0_UInt32.name = "_arg0"_c;
    UInt32x3_ctor2_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x3_ctor2_arg1_UInt32x2.name = "_arg1"_c;
    UInt32x3_ctor2_arg1_UInt32x2.type = Type::FullType{ UInt32x2Type.name };
    UInt32x3_ctor2.name = "u32x3"_c;
    UInt32x3_ctor2.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_ctor2.parameters = UInt32x3_ctor2_args;
    Symbol::Resolved(&UInt32x3_ctor2_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_ctor2_arg1_UInt32x2)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x3_ctor2)->returnTypeSymbol = &UInt32x3Type;

    /// operator[] with Int32
    UInt32x3_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt32x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt32x3_operator_index_Int32.name = "operator[]"_c;
    UInt32x3_operator_index_Int32.returnType = Type::FullType { UInt32Type.name };
    UInt32x3_operator_index_Int32.parameters = UInt32x3_operator_index_Int32_args;
    Symbol::Resolved(&UInt32x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x3_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt32
    UInt32x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt32x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32x3_operator_index_UInt32.name = "operator[]"_c;
    UInt32x3_operator_index_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32x3_operator_index_UInt32.parameters = UInt32x3_operator_index_UInt32_args;
    Symbol::Resolved(&UInt32x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with Int16
    UInt32x3_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt32x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt32x3_operator_index_Int16.name = "operator[]"_c;
    UInt32x3_operator_index_Int16.returnType = Type::FullType { UInt32Type.name };
    UInt32x3_operator_index_Int16.parameters = UInt32x3_operator_index_Int16_args;
    Symbol::Resolved(&UInt32x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x3_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt16
    UInt32x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt32x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt32x3_operator_index_UInt16.name = "operator[]"_c;
    UInt32x3_operator_index_UInt16.returnType = Type::FullType { UInt32Type.name };
    UInt32x3_operator_index_UInt16.parameters = UInt32x3_operator_index_UInt16_args;
    Symbol::Resolved(&UInt32x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x3_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    /// operator+ with UInt32x3
    UInt32x3_operator_add_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_add_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_add_UInt32x3.name = "operator+"_c;
    UInt32x3_operator_add_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_add_UInt32x3.parameters = UInt32x3_operator_add_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_add_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_add_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator- with UInt32x3
    UInt32x3_operator_sub_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_sub_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_sub_UInt32x3.name = "operator-"_c;
    UInt32x3_operator_sub_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_sub_UInt32x3.parameters = UInt32x3_operator_sub_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_sub_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_sub_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator* with UInt32x3
    UInt32x3_operator_mul_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_mul_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_mul_UInt32x3.name = "operator*"_c;
    UInt32x3_operator_mul_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_mul_UInt32x3.parameters = UInt32x3_operator_mul_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_mul_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_mul_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator/ with UInt32x3
    UInt32x3_operator_div_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_div_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_div_UInt32x3.name = "operator/"_c;
    UInt32x3_operator_div_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_div_UInt32x3.parameters = UInt32x3_operator_div_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_div_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_div_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator% with UInt32x3
    UInt32x3_operator_mod_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_mod_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_mod_UInt32x3.name = "operator%"_c;
    UInt32x3_operator_mod_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_mod_UInt32x3.parameters = UInt32x3_operator_mod_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_mod_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_mod_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator+= with UInt32x3
    UInt32x3_operator_addasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_addasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_addasg_UInt32x3.name = "operator+="_c;
    UInt32x3_operator_addasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_addasg_UInt32x3.parameters = UInt32x3_operator_addasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_addasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_addasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator-= with UInt32x3
    UInt32x3_operator_subasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_subasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_subasg_UInt32x3.name = "operator-="_c;
    UInt32x3_operator_subasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_subasg_UInt32x3.parameters = UInt32x3_operator_subasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_subasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_subasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator*= with UInt32x3
    UInt32x3_operator_mulasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_mulasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_mulasg_UInt32x3.name = "operator*="_c;
    UInt32x3_operator_mulasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_mulasg_UInt32x3.parameters = UInt32x3_operator_mulasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_mulasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_mulasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator/= with UInt32x3
    UInt32x3_operator_divasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_divasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_divasg_UInt32x3.name = "operator/="_c;
    UInt32x3_operator_divasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_divasg_UInt32x3.parameters = UInt32x3_operator_divasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_divasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_divasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator< with UInt32x3
    UInt32x3_operator_lt_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_lt_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_lt_UInt32x3.name = "operator<"_c;
    UInt32x3_operator_lt_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_lt_UInt32x3.parameters = UInt32x3_operator_lt_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_lt_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_lt_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator<= with UInt32x3
    UInt32x3_operator_lte_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_lte_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_lte_UInt32x3.name = "operator<="_c;
    UInt32x3_operator_lte_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_lte_UInt32x3.parameters = UInt32x3_operator_lte_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_lte_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_lte_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator> with UInt32x3
    UInt32x3_operator_gt_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_gt_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_gt_UInt32x3.name = "operator>"_c;
    UInt32x3_operator_gt_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_gt_UInt32x3.parameters = UInt32x3_operator_gt_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_gt_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_gt_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator>= with UInt32x3
    UInt32x3_operator_gte_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_gte_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_gte_UInt32x3.name = "operator>="_c;
    UInt32x3_operator_gte_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_gte_UInt32x3.parameters = UInt32x3_operator_gte_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_gte_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_gte_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator== with UInt32x3
    UInt32x3_operator_eq_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_eq_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_eq_UInt32x3.name = "operator=="_c;
    UInt32x3_operator_eq_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_eq_UInt32x3.parameters = UInt32x3_operator_eq_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_eq_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_eq_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator!= with UInt32x3
    UInt32x3_operator_neq_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_neq_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_neq_UInt32x3.name = "operator!="_c;
    UInt32x3_operator_neq_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_neq_UInt32x3.parameters = UInt32x3_operator_neq_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_neq_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_neq_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator* with Float32
    UInt32x3_operator_scale_Float32_arg0.name = "_arg0"_c;
    UInt32x3_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    UInt32x3_operator_scale_Float32.name = "operator*"_c;
    UInt32x3_operator_scale_Float32.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_scale_Float32.parameters = UInt32x3_operator_scale_Float32_args;
    Symbol::Resolved(&UInt32x3_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x3_operator_scale_Float32)->returnTypeSymbol = &UInt32x3Type;

    /// operator* with Float16
    UInt32x3_operator_scale_Float16_arg0.name = "_arg0"_c;
    UInt32x3_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    UInt32x3_operator_scale_Float16.name = "operator*"_c;
    UInt32x3_operator_scale_Float16.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_scale_Float16.parameters = UInt32x3_operator_scale_Float16_args;
    Symbol::Resolved(&UInt32x3_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt32x3_operator_scale_Float16)->returnTypeSymbol = &UInt32x3Type;

    /// operator* with UInt32
    UInt32x3_operator_scale_UInt32_arg0.name = "_arg0"_c;
    UInt32x3_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32x3_operator_scale_UInt32.name = "operator*"_c;
    UInt32x3_operator_scale_UInt32.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_scale_UInt32.parameters = UInt32x3_operator_scale_UInt32_args;
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32)->returnTypeSymbol = &UInt32x3Type;

    /// operator* with UInt16
    UInt32x3_operator_scale_UInt16_arg0.name = "_arg0"_c;
    UInt32x3_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt32x3_operator_scale_UInt16.name = "operator*"_c;
    UInt32x3_operator_scale_UInt16.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_scale_UInt16.parameters = UInt32x3_operator_scale_UInt16_args;
    Symbol::Resolved(&UInt32x3_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x3_operator_scale_UInt16)->returnTypeSymbol = &UInt32x3Type;

    /// operator* with Int32
    UInt32x3_operator_scale_Int32_arg0.name = "_arg0"_c;
    UInt32x3_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt32x3_operator_scale_Int32.name = "operator*"_c;
    UInt32x3_operator_scale_Int32.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_scale_Int32.parameters = UInt32x3_operator_scale_Int32_args;
    Symbol::Resolved(&UInt32x3_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x3_operator_scale_Int32)->returnTypeSymbol = &UInt32x3Type;

    /// operator* with Int16
    UInt32x3_operator_scale_Int16_arg0.name = "_arg0"_c;
    UInt32x3_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt32x3_operator_scale_Int16.name = "operator*"_c;
    UInt32x3_operator_scale_Int16.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_scale_Int16.parameters = UInt32x3_operator_scale_Int16_args;
    Symbol::Resolved(&UInt32x3_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x3_operator_scale_Int16)->returnTypeSymbol = &UInt32x3Type;

    /// operator| with UInt32x3
    UInt32x3_operator_or_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_or_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_or_UInt32x3.name = "operator|"_c;
    UInt32x3_operator_or_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_or_UInt32x3.parameters = UInt32x3_operator_or_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_or_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_or_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator& with UInt32x3
    UInt32x3_operator_and_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_and_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_and_UInt32x3.name = "operator&"_c;
    UInt32x3_operator_and_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_and_UInt32x3.parameters = UInt32x3_operator_and_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_and_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_and_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator^ with UInt32x3
    UInt32x3_operator_xor_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_xor_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_xor_UInt32x3.name = "operator^"_c;
    UInt32x3_operator_xor_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_xor_UInt32x3.parameters = UInt32x3_operator_xor_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_xor_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_xor_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator<< with UInt32x3
    UInt32x3_operator_lsh_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_lsh_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_lsh_UInt32x3.name = "operator<<"_c;
    UInt32x3_operator_lsh_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_lsh_UInt32x3.parameters = UInt32x3_operator_lsh_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_lsh_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_lsh_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator>> with UInt32x3
    UInt32x3_operator_rsh_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_rsh_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_rsh_UInt32x3.name = "operator>>"_c;
    UInt32x3_operator_rsh_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_rsh_UInt32x3.parameters = UInt32x3_operator_rsh_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_rsh_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_rsh_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator|= with UInt32x3
    UInt32x3_operator_orasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_orasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_orasg_UInt32x3.name = "operator|="_c;
    UInt32x3_operator_orasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_orasg_UInt32x3.parameters = UInt32x3_operator_orasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_orasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_orasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator&= with UInt32x3
    UInt32x3_operator_andasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_andasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_andasg_UInt32x3.name = "operator&="_c;
    UInt32x3_operator_andasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_andasg_UInt32x3.parameters = UInt32x3_operator_andasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_andasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_andasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator^= with UInt32x3
    UInt32x3_operator_xorasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_xorasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_xorasg_UInt32x3.name = "operator^="_c;
    UInt32x3_operator_xorasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_xorasg_UInt32x3.parameters = UInt32x3_operator_xorasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_xorasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_xorasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator<<= with UInt32x3
    UInt32x3_operator_lshasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_lshasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_lshasg_UInt32x3.name = "operator<<="_c;
    UInt32x3_operator_lshasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_lshasg_UInt32x3.parameters = UInt32x3_operator_lshasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_lshasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_lshasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator>>= with UInt32x3
    UInt32x3_operator_rhsasg_UInt32x3_arg0.name = "_arg0"_c;
    UInt32x3_operator_rhsasg_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_rhsasg_UInt32x3.name = "operator>>="_c;
    UInt32x3_operator_rhsasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_rhsasg_UInt32x3.parameters = UInt32x3_operator_rhsasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_rhsasg_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_rhsasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &UInt32x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &UInt32x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &UInt32x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &UInt32x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &UInt32x3_operator_add_UInt32x3 },
    std::pair{ "operator-"_c, &UInt32x3_operator_sub_UInt32x3 },
    std::pair{ "operator*"_c, &UInt32x3_operator_mul_UInt32x3 },
    std::pair{ "operator/"_c, &UInt32x3_operator_div_UInt32x3 },
    std::pair{ "operator%"_c, &UInt32x3_operator_mod_UInt32x3 },
    std::pair{ "operator+="_c, &UInt32x3_operator_addasg_UInt32x3 },
    std::pair{ "operator-="_c, &UInt32x3_operator_subasg_UInt32x3 },
    std::pair{ "operator*="_c, &UInt32x3_operator_mulasg_UInt32x3 },
    std::pair{ "operator/="_c, &UInt32x3_operator_divasg_UInt32x3 },
    std::pair{ "operator<"_c, &UInt32x3_operator_lt_UInt32x3 },
    std::pair{ "operator<="_c, &UInt32x3_operator_lte_UInt32x3 },
    std::pair{ "operator>"_c, &UInt32x3_operator_gt_UInt32x3 },
    std::pair{ "operator>="_c, &UInt32x3_operator_gte_UInt32x3 },
    std::pair{ "operator=="_c, &UInt32x3_operator_eq_UInt32x3 },
    std::pair{ "operator!="_c, &UInt32x3_operator_neq_UInt32x3 },
    std::pair{ "operator*"_c, &UInt32x3_operator_scale_Float32 },
    std::pair{ "operator*"_c, &UInt32x3_operator_scale_Float16 },
    std::pair{ "operator*"_c, &UInt32x3_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &UInt32x3_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &UInt32x3_operator_scale_Int32 },
    std::pair{ "operator*"_c, &UInt32x3_operator_scale_Int16 },
    std::pair{ "operator|"_c, &UInt32x3_operator_or_UInt32x3 },
    std::pair{ "operator&"_c, &UInt32x3_operator_and_UInt32x3 },
    std::pair{ "operator^"_c, &UInt32x3_operator_xor_UInt32x3 },
    std::pair{ "operator<<"_c, &UInt32x3_operator_lsh_UInt32x3 },
    std::pair{ "operator>>"_c, &UInt32x3_operator_rsh_UInt32x3 },
    std::pair{ "operator|="_c, &UInt32x3_operator_orasg_UInt32x3 },
    std::pair{ "operator&="_c, &UInt32x3_operator_andasg_UInt32x3 },
    std::pair{ "operator^="_c, &UInt32x3_operator_xorasg_UInt32x3 },
    std::pair{ "operator<<="_c, &UInt32x3_operator_lshasg_UInt32x3 },
    std::pair{ "operator>>="_c, &UInt32x3_operator_rhsasg_UInt32x3 }
    } };
}
UInt32x3 UInt32x3Type;

/// i32x3 with Float32x3
Variable Int32x3_convert_Float32x3_arg0;
Function Int32x3_convert_Float32x3;
inline constexpr std::array Int32x3_convert_Float32x3_args = { &Int32x3_convert_Float32x3_arg0 };

/// i32x3 with Float32
Variable Int32x3_splat_Float32_arg0;
Function Int32x3_splat_Float32;
inline constexpr std::array Int32x3_splat_Float32_args = { &Int32x3_splat_Float32_arg0 };

/// i32x3 with UInt32x3
Variable Int32x3_convert_UInt32x3_arg0;
Function Int32x3_convert_UInt32x3;
inline constexpr std::array Int32x3_convert_UInt32x3_args = { &Int32x3_convert_UInt32x3_arg0 };

/// i32x3 with UInt32
Variable Int32x3_splat_UInt32_arg0;
Function Int32x3_splat_UInt32;
inline constexpr std::array Int32x3_splat_UInt32_args = { &Int32x3_splat_UInt32_arg0 };

/// i32x3 with Int32x3
Variable Int32x3_convert_Int32x3_arg0;
Function Int32x3_convert_Int32x3;
inline constexpr std::array Int32x3_convert_Int32x3_args = { &Int32x3_convert_Int32x3_arg0 };

/// i32x3 with Int32
Variable Int32x3_splat_Int32_arg0;
Function Int32x3_splat_Int32;
inline constexpr std::array Int32x3_splat_Int32_args = { &Int32x3_splat_Int32_arg0 };

/// i32x3 with Float16x3
Variable Int32x3_convert_Float16x3_arg0;
Function Int32x3_convert_Float16x3;
inline constexpr std::array Int32x3_convert_Float16x3_args = { &Int32x3_convert_Float16x3_arg0 };

/// i32x3 with Float16
Variable Int32x3_splat_Float16_arg0;
Function Int32x3_splat_Float16;
inline constexpr std::array Int32x3_splat_Float16_args = { &Int32x3_splat_Float16_arg0 };

/// i32x3 with UInt16x3
Variable Int32x3_convert_UInt16x3_arg0;
Function Int32x3_convert_UInt16x3;
inline constexpr std::array Int32x3_convert_UInt16x3_args = { &Int32x3_convert_UInt16x3_arg0 };

/// i32x3 with UInt16
Variable Int32x3_splat_UInt16_arg0;
Function Int32x3_splat_UInt16;
inline constexpr std::array Int32x3_splat_UInt16_args = { &Int32x3_splat_UInt16_arg0 };

/// i32x3 with Int16x3
Variable Int32x3_convert_Int16x3_arg0;
Function Int32x3_convert_Int16x3;
inline constexpr std::array Int32x3_convert_Int16x3_args = { &Int32x3_convert_Int16x3_arg0 };

/// i32x3 with Int16
Variable Int32x3_splat_Int16_arg0;
Function Int32x3_splat_Int16;
inline constexpr std::array Int32x3_splat_Int16_args = { &Int32x3_splat_Int16_arg0 };

/// i32x3 with Int32, Int32, Int32
Variable Int32x3_ctor0_arg0_Int32;
Variable Int32x3_ctor0_arg1_Int32;
Variable Int32x3_ctor0_arg2_Int32;
Function Int32x3_ctor0;
inline constexpr std::array Int32x3_ctor0_args = { &Int32x3_ctor0_arg0_Int32, &Int32x3_ctor0_arg1_Int32, &Int32x3_ctor0_arg2_Int32 };

/// i32x3 with Int32x2, Int32
Variable Int32x3_ctor1_arg0_Int32x2;
Variable Int32x3_ctor1_arg1_Int32;
Function Int32x3_ctor1;
inline constexpr std::array Int32x3_ctor1_args = { &Int32x3_ctor1_arg0_Int32x2, &Int32x3_ctor1_arg1_Int32 };

/// i32x3 with Int32, Int32x2
Variable Int32x3_ctor2_arg0_Int32;
Variable Int32x3_ctor2_arg1_Int32x2;
Function Int32x3_ctor2;
inline constexpr std::array Int32x3_ctor2_args = { &Int32x3_ctor2_arg0_Int32, &Int32x3_ctor2_arg1_Int32x2 };

/// operator[] with Int32
Variable Int32x3_operator_index_Int32_arg0;
Function Int32x3_operator_index_Int32;
inline constexpr std::array Int32x3_operator_index_Int32_args = { &Int32x3_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Int32x3_operator_index_UInt32_arg0;
Function Int32x3_operator_index_UInt32;
inline constexpr std::array Int32x3_operator_index_UInt32_args = { &Int32x3_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Int32x3_operator_index_Int16_arg0;
Function Int32x3_operator_index_Int16;
inline constexpr std::array Int32x3_operator_index_Int16_args = { &Int32x3_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Int32x3_operator_index_UInt16_arg0;
Function Int32x3_operator_index_UInt16;
inline constexpr std::array Int32x3_operator_index_UInt16_args = { &Int32x3_operator_index_UInt16_arg0 };

/// operator+ with Int32x3
Variable Int32x3_operator_add_Int32x3_arg0;
Function Int32x3_operator_add_Int32x3;
inline constexpr std::array Int32x3_operator_add_Int32x3_args = { &Int32x3_operator_add_Int32x3_arg0 };

/// operator- with Int32x3
Variable Int32x3_operator_sub_Int32x3_arg0;
Function Int32x3_operator_sub_Int32x3;
inline constexpr std::array Int32x3_operator_sub_Int32x3_args = { &Int32x3_operator_sub_Int32x3_arg0 };

/// operator* with Int32x3
Variable Int32x3_operator_mul_Int32x3_arg0;
Function Int32x3_operator_mul_Int32x3;
inline constexpr std::array Int32x3_operator_mul_Int32x3_args = { &Int32x3_operator_mul_Int32x3_arg0 };

/// operator/ with Int32x3
Variable Int32x3_operator_div_Int32x3_arg0;
Function Int32x3_operator_div_Int32x3;
inline constexpr std::array Int32x3_operator_div_Int32x3_args = { &Int32x3_operator_div_Int32x3_arg0 };

/// operator% with Int32x3
Variable Int32x3_operator_mod_Int32x3_arg0;
Function Int32x3_operator_mod_Int32x3;
inline constexpr std::array Int32x3_operator_mod_Int32x3_args = { &Int32x3_operator_mod_Int32x3_arg0 };

/// operator+= with Int32x3
Variable Int32x3_operator_addasg_Int32x3_arg0;
Function Int32x3_operator_addasg_Int32x3;
inline constexpr std::array Int32x3_operator_addasg_Int32x3_args = { &Int32x3_operator_addasg_Int32x3_arg0 };

/// operator-= with Int32x3
Variable Int32x3_operator_subasg_Int32x3_arg0;
Function Int32x3_operator_subasg_Int32x3;
inline constexpr std::array Int32x3_operator_subasg_Int32x3_args = { &Int32x3_operator_subasg_Int32x3_arg0 };

/// operator*= with Int32x3
Variable Int32x3_operator_mulasg_Int32x3_arg0;
Function Int32x3_operator_mulasg_Int32x3;
inline constexpr std::array Int32x3_operator_mulasg_Int32x3_args = { &Int32x3_operator_mulasg_Int32x3_arg0 };

/// operator/= with Int32x3
Variable Int32x3_operator_divasg_Int32x3_arg0;
Function Int32x3_operator_divasg_Int32x3;
inline constexpr std::array Int32x3_operator_divasg_Int32x3_args = { &Int32x3_operator_divasg_Int32x3_arg0 };

/// operator< with Int32x3
Variable Int32x3_operator_lt_Int32x3_arg0;
Function Int32x3_operator_lt_Int32x3;
inline constexpr std::array Int32x3_operator_lt_Int32x3_args = { &Int32x3_operator_lt_Int32x3_arg0 };

/// operator<= with Int32x3
Variable Int32x3_operator_lte_Int32x3_arg0;
Function Int32x3_operator_lte_Int32x3;
inline constexpr std::array Int32x3_operator_lte_Int32x3_args = { &Int32x3_operator_lte_Int32x3_arg0 };

/// operator> with Int32x3
Variable Int32x3_operator_gt_Int32x3_arg0;
Function Int32x3_operator_gt_Int32x3;
inline constexpr std::array Int32x3_operator_gt_Int32x3_args = { &Int32x3_operator_gt_Int32x3_arg0 };

/// operator>= with Int32x3
Variable Int32x3_operator_gte_Int32x3_arg0;
Function Int32x3_operator_gte_Int32x3;
inline constexpr std::array Int32x3_operator_gte_Int32x3_args = { &Int32x3_operator_gte_Int32x3_arg0 };

/// operator== with Int32x3
Variable Int32x3_operator_eq_Int32x3_arg0;
Function Int32x3_operator_eq_Int32x3;
inline constexpr std::array Int32x3_operator_eq_Int32x3_args = { &Int32x3_operator_eq_Int32x3_arg0 };

/// operator!= with Int32x3
Variable Int32x3_operator_neq_Int32x3_arg0;
Function Int32x3_operator_neq_Int32x3;
inline constexpr std::array Int32x3_operator_neq_Int32x3_args = { &Int32x3_operator_neq_Int32x3_arg0 };

/// operator* with Float32
Variable Int32x3_operator_scale_Float32_arg0;
Function Int32x3_operator_scale_Float32;
inline constexpr std::array Int32x3_operator_scale_Float32_args = { &Int32x3_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable Int32x3_operator_scale_Float16_arg0;
Function Int32x3_operator_scale_Float16;
inline constexpr std::array Int32x3_operator_scale_Float16_args = { &Int32x3_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable Int32x3_operator_scale_UInt32_arg0;
Function Int32x3_operator_scale_UInt32;
inline constexpr std::array Int32x3_operator_scale_UInt32_args = { &Int32x3_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable Int32x3_operator_scale_UInt16_arg0;
Function Int32x3_operator_scale_UInt16;
inline constexpr std::array Int32x3_operator_scale_UInt16_args = { &Int32x3_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable Int32x3_operator_scale_Int32_arg0;
Function Int32x3_operator_scale_Int32;
inline constexpr std::array Int32x3_operator_scale_Int32_args = { &Int32x3_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable Int32x3_operator_scale_Int16_arg0;
Function Int32x3_operator_scale_Int16;
inline constexpr std::array Int32x3_operator_scale_Int16_args = { &Int32x3_operator_scale_Int16_arg0 };

/// operator| with Int32x3
Variable Int32x3_operator_or_Int32x3_arg0;
Function Int32x3_operator_or_Int32x3;
inline constexpr std::array Int32x3_operator_or_Int32x3_args = { &Int32x3_operator_or_Int32x3_arg0 };

/// operator& with Int32x3
Variable Int32x3_operator_and_Int32x3_arg0;
Function Int32x3_operator_and_Int32x3;
inline constexpr std::array Int32x3_operator_and_Int32x3_args = { &Int32x3_operator_and_Int32x3_arg0 };

/// operator^ with Int32x3
Variable Int32x3_operator_xor_Int32x3_arg0;
Function Int32x3_operator_xor_Int32x3;
inline constexpr std::array Int32x3_operator_xor_Int32x3_args = { &Int32x3_operator_xor_Int32x3_arg0 };

/// operator<< with Int32x3
Variable Int32x3_operator_lsh_Int32x3_arg0;
Function Int32x3_operator_lsh_Int32x3;
inline constexpr std::array Int32x3_operator_lsh_Int32x3_args = { &Int32x3_operator_lsh_Int32x3_arg0 };

/// operator>> with Int32x3
Variable Int32x3_operator_rsh_Int32x3_arg0;
Function Int32x3_operator_rsh_Int32x3;
inline constexpr std::array Int32x3_operator_rsh_Int32x3_args = { &Int32x3_operator_rsh_Int32x3_arg0 };

/// operator|= with Int32x3
Variable Int32x3_operator_orasg_Int32x3_arg0;
Function Int32x3_operator_orasg_Int32x3;
inline constexpr std::array Int32x3_operator_orasg_Int32x3_args = { &Int32x3_operator_orasg_Int32x3_arg0 };

/// operator&= with Int32x3
Variable Int32x3_operator_andasg_Int32x3_arg0;
Function Int32x3_operator_andasg_Int32x3;
inline constexpr std::array Int32x3_operator_andasg_Int32x3_args = { &Int32x3_operator_andasg_Int32x3_arg0 };

/// operator^= with Int32x3
Variable Int32x3_operator_xorasg_Int32x3_arg0;
Function Int32x3_operator_xorasg_Int32x3;
inline constexpr std::array Int32x3_operator_xorasg_Int32x3_args = { &Int32x3_operator_xorasg_Int32x3_arg0 };

/// operator<<= with Int32x3
Variable Int32x3_operator_lshasg_Int32x3_arg0;
Function Int32x3_operator_lshasg_Int32x3;
inline constexpr std::array Int32x3_operator_lshasg_Int32x3_args = { &Int32x3_operator_lshasg_Int32x3_arg0 };

/// operator>>= with Int32x3
Variable Int32x3_operator_rhsasg_Int32x3_arg0;
Function Int32x3_operator_rhsasg_Int32x3;
inline constexpr std::array Int32x3_operator_rhsasg_Int32x3_args = { &Int32x3_operator_rhsasg_Int32x3_arg0 };

Int32x3::Int32x3()
{
    this->name = "i32x3";
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    /// i32x3 with Float32x3
    Int32x3_convert_Float32x3_arg0.name = "val"_c;
    Int32x3_convert_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Int32x3_convert_Float32x3.documentation = "Convert f32x3 to i32x3"_c;
    Int32x3_convert_Float32x3.name = "i32x3"_c;
    Int32x3_convert_Float32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_convert_Float32x3.parameters = Int32x3_convert_Float32x3_args;
    Symbol::Resolved(&Int32x3_convert_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Int32x3_convert_Float32x3)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Float32
    Int32x3_splat_Float32_arg0.name = "val"_c;
    Int32x3_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Int32x3_splat_Float32.documentation = "Splat f32x3 to i32x3"_c;
    Int32x3_splat_Float32.name = "i32x3"_c;
    Int32x3_splat_Float32.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_splat_Float32.parameters = Int32x3_splat_Float32_args;
    Symbol::Resolved(&Int32x3_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x3_splat_Float32)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with UInt32x3
    Int32x3_convert_UInt32x3_arg0.name = "val"_c;
    Int32x3_convert_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Int32x3_convert_UInt32x3.documentation = "Convert u32x3 to i32x3"_c;
    Int32x3_convert_UInt32x3.name = "i32x3"_c;
    Int32x3_convert_UInt32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_convert_UInt32x3.parameters = Int32x3_convert_UInt32x3_args;
    Symbol::Resolved(&Int32x3_convert_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&Int32x3_convert_UInt32x3)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with UInt32
    Int32x3_splat_UInt32_arg0.name = "val"_c;
    Int32x3_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int32x3_splat_UInt32.documentation = "Splat u32x3 to i32x3"_c;
    Int32x3_splat_UInt32.name = "i32x3"_c;
    Int32x3_splat_UInt32.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_splat_UInt32.parameters = Int32x3_splat_UInt32_args;
    Symbol::Resolved(&Int32x3_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x3_splat_UInt32)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Int32x3
    Int32x3_convert_Int32x3_arg0.name = "val"_c;
    Int32x3_convert_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_convert_Int32x3.documentation = "Convert i32x3 to i32x3"_c;
    Int32x3_convert_Int32x3.name = "i32x3"_c;
    Int32x3_convert_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_convert_Int32x3.parameters = Int32x3_convert_Int32x3_args;
    Symbol::Resolved(&Int32x3_convert_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_convert_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Int32
    Int32x3_splat_Int32_arg0.name = "val"_c;
    Int32x3_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32x3_splat_Int32.documentation = "Splat i32x3 to i32x3"_c;
    Int32x3_splat_Int32.name = "i32x3"_c;
    Int32x3_splat_Int32.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_splat_Int32.parameters = Int32x3_splat_Int32_args;
    Symbol::Resolved(&Int32x3_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_splat_Int32)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Float16x3
    Int32x3_convert_Float16x3_arg0.name = "val"_c;
    Int32x3_convert_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Int32x3_convert_Float16x3.documentation = "Convert f16x3 to i32x3"_c;
    Int32x3_convert_Float16x3.name = "i32x3"_c;
    Int32x3_convert_Float16x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_convert_Float16x3.parameters = Int32x3_convert_Float16x3_args;
    Symbol::Resolved(&Int32x3_convert_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Int32x3_convert_Float16x3)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Float16
    Int32x3_splat_Float16_arg0.name = "val"_c;
    Int32x3_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Int32x3_splat_Float16.documentation = "Splat f16x3 to i32x3"_c;
    Int32x3_splat_Float16.name = "i32x3"_c;
    Int32x3_splat_Float16.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_splat_Float16.parameters = Int32x3_splat_Float16_args;
    Symbol::Resolved(&Int32x3_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int32x3_splat_Float16)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with UInt16x3
    Int32x3_convert_UInt16x3_arg0.name = "val"_c;
    Int32x3_convert_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Int32x3_convert_UInt16x3.documentation = "Convert u16x3 to i32x3"_c;
    Int32x3_convert_UInt16x3.name = "i32x3"_c;
    Int32x3_convert_UInt16x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_convert_UInt16x3.parameters = Int32x3_convert_UInt16x3_args;
    Symbol::Resolved(&Int32x3_convert_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&Int32x3_convert_UInt16x3)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with UInt16
    Int32x3_splat_UInt16_arg0.name = "val"_c;
    Int32x3_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int32x3_splat_UInt16.documentation = "Splat u16x3 to i32x3"_c;
    Int32x3_splat_UInt16.name = "i32x3"_c;
    Int32x3_splat_UInt16.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_splat_UInt16.parameters = Int32x3_splat_UInt16_args;
    Symbol::Resolved(&Int32x3_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x3_splat_UInt16)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Int16x3
    Int32x3_convert_Int16x3_arg0.name = "val"_c;
    Int32x3_convert_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int32x3_convert_Int16x3.documentation = "Convert i16x3 to i32x3"_c;
    Int32x3_convert_Int16x3.name = "i32x3"_c;
    Int32x3_convert_Int16x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_convert_Int16x3.parameters = Int32x3_convert_Int16x3_args;
    Symbol::Resolved(&Int32x3_convert_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int32x3_convert_Int16x3)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Int16
    Int32x3_splat_Int16_arg0.name = "val"_c;
    Int32x3_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int32x3_splat_Int16.documentation = "Splat i16x3 to i32x3"_c;
    Int32x3_splat_Int16.name = "i32x3"_c;
    Int32x3_splat_Int16.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_splat_Int16.parameters = Int32x3_splat_Int16_args;
    Symbol::Resolved(&Int32x3_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x3_splat_Int16)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Int32, Int32, Int32
    Int32x3_ctor0_arg0_Int32.name = "_arg0"_c;
    Int32x3_ctor0_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32x3_ctor0_arg1_Int32.name = "_arg1"_c;
    Int32x3_ctor0_arg1_Int32.type = Type::FullType{ Int32Type.name };
    Int32x3_ctor0_arg2_Int32.name = "_arg2"_c;
    Int32x3_ctor0_arg2_Int32.type = Type::FullType{ Int32Type.name };
    Int32x3_ctor0.name = "i32x3"_c;
    Int32x3_ctor0.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_ctor0.parameters = Int32x3_ctor0_args;
    Symbol::Resolved(&Int32x3_ctor0_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_ctor0_arg1_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_ctor0_arg2_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_ctor0)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Int32x2, Int32
    Int32x3_ctor1_arg0_Int32x2.name = "_arg0"_c;
    Int32x3_ctor1_arg0_Int32x2.type = Type::FullType{ Int32x2Type.name };
    Int32x3_ctor1_arg1_Int32.name = "_arg1"_c;
    Int32x3_ctor1_arg1_Int32.type = Type::FullType{ Int32Type.name };
    Int32x3_ctor1.name = "i32x3"_c;
    Int32x3_ctor1.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_ctor1.parameters = Int32x3_ctor1_args;
    Symbol::Resolved(&Int32x3_ctor1_arg0_Int32x2)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x3_ctor1_arg1_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_ctor1)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Int32, Int32x2
    Int32x3_ctor2_arg0_Int32.name = "_arg0"_c;
    Int32x3_ctor2_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32x3_ctor2_arg1_Int32x2.name = "_arg1"_c;
    Int32x3_ctor2_arg1_Int32x2.type = Type::FullType{ Int32x2Type.name };
    Int32x3_ctor2.name = "i32x3"_c;
    Int32x3_ctor2.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_ctor2.parameters = Int32x3_ctor2_args;
    Symbol::Resolved(&Int32x3_ctor2_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_ctor2_arg1_Int32x2)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x3_ctor2)->returnTypeSymbol = &Int32x3Type;

    /// operator[] with Int32
    Int32x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Int32x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32x3_operator_index_Int32.name = "operator[]"_c;
    Int32x3_operator_index_Int32.returnType = Type::FullType { Int32Type.name };
    Int32x3_operator_index_Int32.parameters = Int32x3_operator_index_Int32_args;
    Symbol::Resolved(&Int32x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt32
    Int32x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int32x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int32x3_operator_index_UInt32.name = "operator[]"_c;
    Int32x3_operator_index_UInt32.returnType = Type::FullType { Int32Type.name };
    Int32x3_operator_index_UInt32.parameters = Int32x3_operator_index_UInt32_args;
    Symbol::Resolved(&Int32x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x3_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    /// operator[] with Int16
    Int32x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Int32x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int32x3_operator_index_Int16.name = "operator[]"_c;
    Int32x3_operator_index_Int16.returnType = Type::FullType { Int32Type.name };
    Int32x3_operator_index_Int16.parameters = Int32x3_operator_index_Int16_args;
    Symbol::Resolved(&Int32x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x3_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt16
    Int32x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int32x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int32x3_operator_index_UInt16.name = "operator[]"_c;
    Int32x3_operator_index_UInt16.returnType = Type::FullType { Int32Type.name };
    Int32x3_operator_index_UInt16.parameters = Int32x3_operator_index_UInt16_args;
    Symbol::Resolved(&Int32x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x3_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    /// operator+ with Int32x3
    Int32x3_operator_add_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_add_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_add_Int32x3.name = "operator+"_c;
    Int32x3_operator_add_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_add_Int32x3.parameters = Int32x3_operator_add_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_add_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_add_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator- with Int32x3
    Int32x3_operator_sub_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_sub_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_sub_Int32x3.name = "operator-"_c;
    Int32x3_operator_sub_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_sub_Int32x3.parameters = Int32x3_operator_sub_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_sub_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_sub_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator* with Int32x3
    Int32x3_operator_mul_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_mul_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_mul_Int32x3.name = "operator*"_c;
    Int32x3_operator_mul_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_mul_Int32x3.parameters = Int32x3_operator_mul_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_mul_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_mul_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator/ with Int32x3
    Int32x3_operator_div_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_div_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_div_Int32x3.name = "operator/"_c;
    Int32x3_operator_div_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_div_Int32x3.parameters = Int32x3_operator_div_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_div_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_div_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator% with Int32x3
    Int32x3_operator_mod_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_mod_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_mod_Int32x3.name = "operator%"_c;
    Int32x3_operator_mod_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_mod_Int32x3.parameters = Int32x3_operator_mod_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_mod_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_mod_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator+= with Int32x3
    Int32x3_operator_addasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_addasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_addasg_Int32x3.name = "operator+="_c;
    Int32x3_operator_addasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_addasg_Int32x3.parameters = Int32x3_operator_addasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_addasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_addasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator-= with Int32x3
    Int32x3_operator_subasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_subasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_subasg_Int32x3.name = "operator-="_c;
    Int32x3_operator_subasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_subasg_Int32x3.parameters = Int32x3_operator_subasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_subasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_subasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator*= with Int32x3
    Int32x3_operator_mulasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_mulasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_mulasg_Int32x3.name = "operator*="_c;
    Int32x3_operator_mulasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_mulasg_Int32x3.parameters = Int32x3_operator_mulasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_mulasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_mulasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator/= with Int32x3
    Int32x3_operator_divasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_divasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_divasg_Int32x3.name = "operator/="_c;
    Int32x3_operator_divasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_divasg_Int32x3.parameters = Int32x3_operator_divasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_divasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_divasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator< with Int32x3
    Int32x3_operator_lt_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_lt_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_lt_Int32x3.name = "operator<"_c;
    Int32x3_operator_lt_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_lt_Int32x3.parameters = Int32x3_operator_lt_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_lt_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_lt_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator<= with Int32x3
    Int32x3_operator_lte_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_lte_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_lte_Int32x3.name = "operator<="_c;
    Int32x3_operator_lte_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_lte_Int32x3.parameters = Int32x3_operator_lte_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_lte_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_lte_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator> with Int32x3
    Int32x3_operator_gt_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_gt_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_gt_Int32x3.name = "operator>"_c;
    Int32x3_operator_gt_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_gt_Int32x3.parameters = Int32x3_operator_gt_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_gt_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_gt_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator>= with Int32x3
    Int32x3_operator_gte_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_gte_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_gte_Int32x3.name = "operator>="_c;
    Int32x3_operator_gte_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_gte_Int32x3.parameters = Int32x3_operator_gte_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_gte_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_gte_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator== with Int32x3
    Int32x3_operator_eq_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_eq_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_eq_Int32x3.name = "operator=="_c;
    Int32x3_operator_eq_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_eq_Int32x3.parameters = Int32x3_operator_eq_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_eq_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_eq_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator!= with Int32x3
    Int32x3_operator_neq_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_neq_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_neq_Int32x3.name = "operator!="_c;
    Int32x3_operator_neq_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_neq_Int32x3.parameters = Int32x3_operator_neq_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_neq_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_neq_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator* with Float32
    Int32x3_operator_scale_Float32_arg0.name = "_arg0"_c;
    Int32x3_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Int32x3_operator_scale_Float32.name = "operator*"_c;
    Int32x3_operator_scale_Float32.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_scale_Float32.parameters = Int32x3_operator_scale_Float32_args;
    Symbol::Resolved(&Int32x3_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x3_operator_scale_Float32)->returnTypeSymbol = &Int32x3Type;

    /// operator* with Float16
    Int32x3_operator_scale_Float16_arg0.name = "_arg0"_c;
    Int32x3_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Int32x3_operator_scale_Float16.name = "operator*"_c;
    Int32x3_operator_scale_Float16.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_scale_Float16.parameters = Int32x3_operator_scale_Float16_args;
    Symbol::Resolved(&Int32x3_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int32x3_operator_scale_Float16)->returnTypeSymbol = &Int32x3Type;

    /// operator* with UInt32
    Int32x3_operator_scale_UInt32_arg0.name = "_arg0"_c;
    Int32x3_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int32x3_operator_scale_UInt32.name = "operator*"_c;
    Int32x3_operator_scale_UInt32.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_scale_UInt32.parameters = Int32x3_operator_scale_UInt32_args;
    Symbol::Resolved(&Int32x3_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x3_operator_scale_UInt32)->returnTypeSymbol = &Int32x3Type;

    /// operator* with UInt16
    Int32x3_operator_scale_UInt16_arg0.name = "_arg0"_c;
    Int32x3_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int32x3_operator_scale_UInt16.name = "operator*"_c;
    Int32x3_operator_scale_UInt16.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_scale_UInt16.parameters = Int32x3_operator_scale_UInt16_args;
    Symbol::Resolved(&Int32x3_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x3_operator_scale_UInt16)->returnTypeSymbol = &Int32x3Type;

    /// operator* with Int32
    Int32x3_operator_scale_Int32_arg0.name = "_arg0"_c;
    Int32x3_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32x3_operator_scale_Int32.name = "operator*"_c;
    Int32x3_operator_scale_Int32.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_scale_Int32.parameters = Int32x3_operator_scale_Int32_args;
    Symbol::Resolved(&Int32x3_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_operator_scale_Int32)->returnTypeSymbol = &Int32x3Type;

    /// operator* with Int16
    Int32x3_operator_scale_Int16_arg0.name = "_arg0"_c;
    Int32x3_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int32x3_operator_scale_Int16.name = "operator*"_c;
    Int32x3_operator_scale_Int16.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_scale_Int16.parameters = Int32x3_operator_scale_Int16_args;
    Symbol::Resolved(&Int32x3_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x3_operator_scale_Int16)->returnTypeSymbol = &Int32x3Type;

    /// operator| with Int32x3
    Int32x3_operator_or_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_or_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_or_Int32x3.name = "operator|"_c;
    Int32x3_operator_or_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_or_Int32x3.parameters = Int32x3_operator_or_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_or_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_or_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator& with Int32x3
    Int32x3_operator_and_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_and_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_and_Int32x3.name = "operator&"_c;
    Int32x3_operator_and_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_and_Int32x3.parameters = Int32x3_operator_and_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_and_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_and_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator^ with Int32x3
    Int32x3_operator_xor_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_xor_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_xor_Int32x3.name = "operator^"_c;
    Int32x3_operator_xor_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_xor_Int32x3.parameters = Int32x3_operator_xor_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_xor_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_xor_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator<< with Int32x3
    Int32x3_operator_lsh_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_lsh_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_lsh_Int32x3.name = "operator<<"_c;
    Int32x3_operator_lsh_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_lsh_Int32x3.parameters = Int32x3_operator_lsh_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_lsh_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_lsh_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator>> with Int32x3
    Int32x3_operator_rsh_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_rsh_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_rsh_Int32x3.name = "operator>>"_c;
    Int32x3_operator_rsh_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_rsh_Int32x3.parameters = Int32x3_operator_rsh_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_rsh_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_rsh_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator|= with Int32x3
    Int32x3_operator_orasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_orasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_orasg_Int32x3.name = "operator|="_c;
    Int32x3_operator_orasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_orasg_Int32x3.parameters = Int32x3_operator_orasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_orasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_orasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator&= with Int32x3
    Int32x3_operator_andasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_andasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_andasg_Int32x3.name = "operator&="_c;
    Int32x3_operator_andasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_andasg_Int32x3.parameters = Int32x3_operator_andasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_andasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_andasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator^= with Int32x3
    Int32x3_operator_xorasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_xorasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_xorasg_Int32x3.name = "operator^="_c;
    Int32x3_operator_xorasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_xorasg_Int32x3.parameters = Int32x3_operator_xorasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_xorasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_xorasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator<<= with Int32x3
    Int32x3_operator_lshasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_lshasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_lshasg_Int32x3.name = "operator<<="_c;
    Int32x3_operator_lshasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_lshasg_Int32x3.parameters = Int32x3_operator_lshasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_lshasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_lshasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator>>= with Int32x3
    Int32x3_operator_rhsasg_Int32x3_arg0.name = "_arg0"_c;
    Int32x3_operator_rhsasg_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_rhsasg_Int32x3.name = "operator>>="_c;
    Int32x3_operator_rhsasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_rhsasg_Int32x3.parameters = Int32x3_operator_rhsasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_rhsasg_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_rhsasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Int32x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int32x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int32x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int32x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int32x3_operator_add_Int32x3 },
    std::pair{ "operator-"_c, &Int32x3_operator_sub_Int32x3 },
    std::pair{ "operator*"_c, &Int32x3_operator_mul_Int32x3 },
    std::pair{ "operator/"_c, &Int32x3_operator_div_Int32x3 },
    std::pair{ "operator%"_c, &Int32x3_operator_mod_Int32x3 },
    std::pair{ "operator+="_c, &Int32x3_operator_addasg_Int32x3 },
    std::pair{ "operator-="_c, &Int32x3_operator_subasg_Int32x3 },
    std::pair{ "operator*="_c, &Int32x3_operator_mulasg_Int32x3 },
    std::pair{ "operator/="_c, &Int32x3_operator_divasg_Int32x3 },
    std::pair{ "operator<"_c, &Int32x3_operator_lt_Int32x3 },
    std::pair{ "operator<="_c, &Int32x3_operator_lte_Int32x3 },
    std::pair{ "operator>"_c, &Int32x3_operator_gt_Int32x3 },
    std::pair{ "operator>="_c, &Int32x3_operator_gte_Int32x3 },
    std::pair{ "operator=="_c, &Int32x3_operator_eq_Int32x3 },
    std::pair{ "operator!="_c, &Int32x3_operator_neq_Int32x3 },
    std::pair{ "operator*"_c, &Int32x3_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int32x3_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int32x3_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int32x3_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int32x3_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int32x3_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int32x3_operator_or_Int32x3 },
    std::pair{ "operator&"_c, &Int32x3_operator_and_Int32x3 },
    std::pair{ "operator^"_c, &Int32x3_operator_xor_Int32x3 },
    std::pair{ "operator<<"_c, &Int32x3_operator_lsh_Int32x3 },
    std::pair{ "operator>>"_c, &Int32x3_operator_rsh_Int32x3 },
    std::pair{ "operator|="_c, &Int32x3_operator_orasg_Int32x3 },
    std::pair{ "operator&="_c, &Int32x3_operator_andasg_Int32x3 },
    std::pair{ "operator^="_c, &Int32x3_operator_xorasg_Int32x3 },
    std::pair{ "operator<<="_c, &Int32x3_operator_lshasg_Int32x3 },
    std::pair{ "operator>>="_c, &Int32x3_operator_rhsasg_Int32x3 }
    } };
}
Int32x3 Int32x3Type;

/// b8x3 with UInt32x3
Variable Bool8x3_convert_UInt32x3_arg0;
Function Bool8x3_convert_UInt32x3;
inline constexpr std::array Bool8x3_convert_UInt32x3_args = { &Bool8x3_convert_UInt32x3_arg0 };

/// b8x3 with UInt32
Variable Bool8x3_splat_UInt32_arg0;
Function Bool8x3_splat_UInt32;
inline constexpr std::array Bool8x3_splat_UInt32_args = { &Bool8x3_splat_UInt32_arg0 };

/// b8x3 with Int32x3
Variable Bool8x3_convert_Int32x3_arg0;
Function Bool8x3_convert_Int32x3;
inline constexpr std::array Bool8x3_convert_Int32x3_args = { &Bool8x3_convert_Int32x3_arg0 };

/// b8x3 with Int32
Variable Bool8x3_splat_Int32_arg0;
Function Bool8x3_splat_Int32;
inline constexpr std::array Bool8x3_splat_Int32_args = { &Bool8x3_splat_Int32_arg0 };

/// b8x3 with UInt16x3
Variable Bool8x3_convert_UInt16x3_arg0;
Function Bool8x3_convert_UInt16x3;
inline constexpr std::array Bool8x3_convert_UInt16x3_args = { &Bool8x3_convert_UInt16x3_arg0 };

/// b8x3 with UInt16
Variable Bool8x3_splat_UInt16_arg0;
Function Bool8x3_splat_UInt16;
inline constexpr std::array Bool8x3_splat_UInt16_args = { &Bool8x3_splat_UInt16_arg0 };

/// b8x3 with Int16x3
Variable Bool8x3_convert_Int16x3_arg0;
Function Bool8x3_convert_Int16x3;
inline constexpr std::array Bool8x3_convert_Int16x3_args = { &Bool8x3_convert_Int16x3_arg0 };

/// b8x3 with Int16
Variable Bool8x3_splat_Int16_arg0;
Function Bool8x3_splat_Int16;
inline constexpr std::array Bool8x3_splat_Int16_args = { &Bool8x3_splat_Int16_arg0 };

/// b8x3 with Bool8, Bool8, Bool8
Variable Bool8x3_ctor0_arg0_Bool8;
Variable Bool8x3_ctor0_arg1_Bool8;
Variable Bool8x3_ctor0_arg2_Bool8;
Function Bool8x3_ctor0;
inline constexpr std::array Bool8x3_ctor0_args = { &Bool8x3_ctor0_arg0_Bool8, &Bool8x3_ctor0_arg1_Bool8, &Bool8x3_ctor0_arg2_Bool8 };

/// b8x3 with Bool8x2, Bool8
Variable Bool8x3_ctor1_arg0_Bool8x2;
Variable Bool8x3_ctor1_arg1_Bool8;
Function Bool8x3_ctor1;
inline constexpr std::array Bool8x3_ctor1_args = { &Bool8x3_ctor1_arg0_Bool8x2, &Bool8x3_ctor1_arg1_Bool8 };

/// b8x3 with Bool8, Bool8x2
Variable Bool8x3_ctor2_arg0_Bool8;
Variable Bool8x3_ctor2_arg1_Bool8x2;
Function Bool8x3_ctor2;
inline constexpr std::array Bool8x3_ctor2_args = { &Bool8x3_ctor2_arg0_Bool8, &Bool8x3_ctor2_arg1_Bool8x2 };

/// operator[] with Int32
Variable Bool8x3_operator_index_Int32_arg0;
Function Bool8x3_operator_index_Int32;
inline constexpr std::array Bool8x3_operator_index_Int32_args = { &Bool8x3_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Bool8x3_operator_index_UInt32_arg0;
Function Bool8x3_operator_index_UInt32;
inline constexpr std::array Bool8x3_operator_index_UInt32_args = { &Bool8x3_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Bool8x3_operator_index_Int16_arg0;
Function Bool8x3_operator_index_Int16;
inline constexpr std::array Bool8x3_operator_index_Int16_args = { &Bool8x3_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Bool8x3_operator_index_UInt16_arg0;
Function Bool8x3_operator_index_UInt16;
inline constexpr std::array Bool8x3_operator_index_UInt16_args = { &Bool8x3_operator_index_UInt16_arg0 };

/// operator|| with Bool8x3
Variable Bool8x3_operator_oror_Bool8x3_arg0;
Function Bool8x3_operator_oror_Bool8x3;
inline constexpr std::array Bool8x3_operator_oror_Bool8x3_args = { &Bool8x3_operator_oror_Bool8x3_arg0 };

/// operator&& with Bool8x3
Variable Bool8x3_operator_andand_Bool8x3_arg0;
Function Bool8x3_operator_andand_Bool8x3;
inline constexpr std::array Bool8x3_operator_andand_Bool8x3_args = { &Bool8x3_operator_andand_Bool8x3_arg0 };

/// operator== with Bool8x3
Variable Bool8x3_operator_eq_Bool8x3_arg0;
Function Bool8x3_operator_eq_Bool8x3;
inline constexpr std::array Bool8x3_operator_eq_Bool8x3_args = { &Bool8x3_operator_eq_Bool8x3_arg0 };

/// operator!= with Bool8x3
Variable Bool8x3_operator_neq_Bool8x3_arg0;
Function Bool8x3_operator_neq_Bool8x3;
inline constexpr std::array Bool8x3_operator_neq_Bool8x3_args = { &Bool8x3_operator_neq_Bool8x3_arg0 };

Bool8x3::Bool8x3()
{
    this->name = "b8x3";
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 3;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    /// b8x3 with UInt32x3
    Bool8x3_convert_UInt32x3_arg0.name = "val"_c;
    Bool8x3_convert_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Bool8x3_convert_UInt32x3.documentation = "Convert u32x3 to b8x3"_c;
    Bool8x3_convert_UInt32x3.name = "b8x3"_c;
    Bool8x3_convert_UInt32x3.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_convert_UInt32x3.parameters = Bool8x3_convert_UInt32x3_args;
    Symbol::Resolved(&Bool8x3_convert_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&Bool8x3_convert_UInt32x3)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with UInt32
    Bool8x3_splat_UInt32_arg0.name = "val"_c;
    Bool8x3_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Bool8x3_splat_UInt32.documentation = "Splat u32x3 to b8x3"_c;
    Bool8x3_splat_UInt32.name = "b8x3"_c;
    Bool8x3_splat_UInt32.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_splat_UInt32.parameters = Bool8x3_splat_UInt32_args;
    Symbol::Resolved(&Bool8x3_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x3_splat_UInt32)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Int32x3
    Bool8x3_convert_Int32x3_arg0.name = "val"_c;
    Bool8x3_convert_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Bool8x3_convert_Int32x3.documentation = "Convert i32x3 to b8x3"_c;
    Bool8x3_convert_Int32x3.name = "b8x3"_c;
    Bool8x3_convert_Int32x3.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_convert_Int32x3.parameters = Bool8x3_convert_Int32x3_args;
    Symbol::Resolved(&Bool8x3_convert_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Bool8x3_convert_Int32x3)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Int32
    Bool8x3_splat_Int32_arg0.name = "val"_c;
    Bool8x3_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Bool8x3_splat_Int32.documentation = "Splat i32x3 to b8x3"_c;
    Bool8x3_splat_Int32.name = "b8x3"_c;
    Bool8x3_splat_Int32.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_splat_Int32.parameters = Bool8x3_splat_Int32_args;
    Symbol::Resolved(&Bool8x3_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x3_splat_Int32)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with UInt16x3
    Bool8x3_convert_UInt16x3_arg0.name = "val"_c;
    Bool8x3_convert_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Bool8x3_convert_UInt16x3.documentation = "Convert u16x3 to b8x3"_c;
    Bool8x3_convert_UInt16x3.name = "b8x3"_c;
    Bool8x3_convert_UInt16x3.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_convert_UInt16x3.parameters = Bool8x3_convert_UInt16x3_args;
    Symbol::Resolved(&Bool8x3_convert_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&Bool8x3_convert_UInt16x3)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with UInt16
    Bool8x3_splat_UInt16_arg0.name = "val"_c;
    Bool8x3_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Bool8x3_splat_UInt16.documentation = "Splat u16x3 to b8x3"_c;
    Bool8x3_splat_UInt16.name = "b8x3"_c;
    Bool8x3_splat_UInt16.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_splat_UInt16.parameters = Bool8x3_splat_UInt16_args;
    Symbol::Resolved(&Bool8x3_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x3_splat_UInt16)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Int16x3
    Bool8x3_convert_Int16x3_arg0.name = "val"_c;
    Bool8x3_convert_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Bool8x3_convert_Int16x3.documentation = "Convert i16x3 to b8x3"_c;
    Bool8x3_convert_Int16x3.name = "b8x3"_c;
    Bool8x3_convert_Int16x3.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_convert_Int16x3.parameters = Bool8x3_convert_Int16x3_args;
    Symbol::Resolved(&Bool8x3_convert_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Bool8x3_convert_Int16x3)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Int16
    Bool8x3_splat_Int16_arg0.name = "val"_c;
    Bool8x3_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Bool8x3_splat_Int16.documentation = "Splat i16x3 to b8x3"_c;
    Bool8x3_splat_Int16.name = "b8x3"_c;
    Bool8x3_splat_Int16.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_splat_Int16.parameters = Bool8x3_splat_Int16_args;
    Symbol::Resolved(&Bool8x3_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x3_splat_Int16)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Bool8, Bool8, Bool8
    Bool8x3_ctor0_arg0_Bool8.name = "_arg0"_c;
    Bool8x3_ctor0_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x3_ctor0_arg1_Bool8.name = "_arg1"_c;
    Bool8x3_ctor0_arg1_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x3_ctor0_arg2_Bool8.name = "_arg2"_c;
    Bool8x3_ctor0_arg2_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x3_ctor0.name = "b8x3"_c;
    Bool8x3_ctor0.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_ctor0.parameters = Bool8x3_ctor0_args;
    Symbol::Resolved(&Bool8x3_ctor0_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x3_ctor0_arg1_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x3_ctor0_arg2_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x3_ctor0)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Bool8x2, Bool8
    Bool8x3_ctor1_arg0_Bool8x2.name = "_arg0"_c;
    Bool8x3_ctor1_arg0_Bool8x2.type = Type::FullType{ Bool8x2Type.name };
    Bool8x3_ctor1_arg1_Bool8.name = "_arg1"_c;
    Bool8x3_ctor1_arg1_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x3_ctor1.name = "b8x3"_c;
    Bool8x3_ctor1.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_ctor1.parameters = Bool8x3_ctor1_args;
    Symbol::Resolved(&Bool8x3_ctor1_arg0_Bool8x2)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x3_ctor1_arg1_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x3_ctor1)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Bool8, Bool8x2
    Bool8x3_ctor2_arg0_Bool8.name = "_arg0"_c;
    Bool8x3_ctor2_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x3_ctor2_arg1_Bool8x2.name = "_arg1"_c;
    Bool8x3_ctor2_arg1_Bool8x2.type = Type::FullType{ Bool8x2Type.name };
    Bool8x3_ctor2.name = "b8x3"_c;
    Bool8x3_ctor2.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_ctor2.parameters = Bool8x3_ctor2_args;
    Symbol::Resolved(&Bool8x3_ctor2_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x3_ctor2_arg1_Bool8x2)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x3_ctor2)->returnTypeSymbol = &Bool8x3Type;

    /// operator[] with Int32
    Bool8x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Bool8x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Bool8x3_operator_index_Int32.name = "operator[]"_c;
    Bool8x3_operator_index_Int32.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_index_Int32.parameters = Bool8x3_operator_index_Int32_args;
    Symbol::Resolved(&Bool8x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x3_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt32
    Bool8x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Bool8x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Bool8x3_operator_index_UInt32.name = "operator[]"_c;
    Bool8x3_operator_index_UInt32.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_index_UInt32.parameters = Bool8x3_operator_index_UInt32_args;
    Symbol::Resolved(&Bool8x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x3_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with Int16
    Bool8x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Bool8x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Bool8x3_operator_index_Int16.name = "operator[]"_c;
    Bool8x3_operator_index_Int16.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_index_Int16.parameters = Bool8x3_operator_index_Int16_args;
    Symbol::Resolved(&Bool8x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x3_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt16
    Bool8x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Bool8x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Bool8x3_operator_index_UInt16.name = "operator[]"_c;
    Bool8x3_operator_index_UInt16.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_index_UInt16.parameters = Bool8x3_operator_index_UInt16_args;
    Symbol::Resolved(&Bool8x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x3_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator|| with Bool8x3
    Bool8x3_operator_oror_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_oror_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Bool8x3_operator_oror_Bool8x3.name = "operator||"_c;
    Bool8x3_operator_oror_Bool8x3.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_oror_Bool8x3.parameters = Bool8x3_operator_oror_Bool8x3_args;
    Symbol::Resolved(&Bool8x3_operator_oror_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x3_operator_oror_Bool8x3)->returnTypeSymbol = &Bool8Type;

    /// operator&& with Bool8x3
    Bool8x3_operator_andand_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_andand_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Bool8x3_operator_andand_Bool8x3.name = "operator&&"_c;
    Bool8x3_operator_andand_Bool8x3.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_andand_Bool8x3.parameters = Bool8x3_operator_andand_Bool8x3_args;
    Symbol::Resolved(&Bool8x3_operator_andand_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x3_operator_andand_Bool8x3)->returnTypeSymbol = &Bool8Type;

    /// operator== with Bool8x3
    Bool8x3_operator_eq_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_eq_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Bool8x3_operator_eq_Bool8x3.name = "operator=="_c;
    Bool8x3_operator_eq_Bool8x3.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_eq_Bool8x3.parameters = Bool8x3_operator_eq_Bool8x3_args;
    Symbol::Resolved(&Bool8x3_operator_eq_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x3_operator_eq_Bool8x3)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Bool8x3
    Bool8x3_operator_neq_Bool8x3_arg0.name = "_arg0"_c;
    Bool8x3_operator_neq_Bool8x3_arg0.type = Type::FullType{ Bool8x3Type.name };
    Bool8x3_operator_neq_Bool8x3.name = "operator!="_c;
    Bool8x3_operator_neq_Bool8x3.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_neq_Bool8x3.parameters = Bool8x3_operator_neq_Bool8x3_args;
    Symbol::Resolved(&Bool8x3_operator_neq_Bool8x3_arg0)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x3_operator_neq_Bool8x3)->returnTypeSymbol = &Bool8Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Bool8x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Bool8x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Bool8x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Bool8x3_operator_index_UInt16 },
    std::pair{ "operator||"_c, &Bool8x3_operator_oror_Bool8x3 },
    std::pair{ "operator&&"_c, &Bool8x3_operator_andand_Bool8x3 },
    std::pair{ "operator=="_c, &Bool8x3_operator_eq_Bool8x3 },
    std::pair{ "operator!="_c, &Bool8x3_operator_neq_Bool8x3 }
    } };
}
Bool8x3 Bool8x3Type;

/// f16x3 with Float32x3
Variable Float16x3_convert_Float32x3_arg0;
Function Float16x3_convert_Float32x3;
inline constexpr std::array Float16x3_convert_Float32x3_args = { &Float16x3_convert_Float32x3_arg0 };

/// f16x3 with Float32
Variable Float16x3_splat_Float32_arg0;
Function Float16x3_splat_Float32;
inline constexpr std::array Float16x3_splat_Float32_args = { &Float16x3_splat_Float32_arg0 };

/// f16x3 with UInt32x3
Variable Float16x3_convert_UInt32x3_arg0;
Function Float16x3_convert_UInt32x3;
inline constexpr std::array Float16x3_convert_UInt32x3_args = { &Float16x3_convert_UInt32x3_arg0 };

/// f16x3 with UInt32
Variable Float16x3_splat_UInt32_arg0;
Function Float16x3_splat_UInt32;
inline constexpr std::array Float16x3_splat_UInt32_args = { &Float16x3_splat_UInt32_arg0 };

/// f16x3 with Int32x3
Variable Float16x3_convert_Int32x3_arg0;
Function Float16x3_convert_Int32x3;
inline constexpr std::array Float16x3_convert_Int32x3_args = { &Float16x3_convert_Int32x3_arg0 };

/// f16x3 with Int32
Variable Float16x3_splat_Int32_arg0;
Function Float16x3_splat_Int32;
inline constexpr std::array Float16x3_splat_Int32_args = { &Float16x3_splat_Int32_arg0 };

/// f16x3 with Float16x3
Variable Float16x3_convert_Float16x3_arg0;
Function Float16x3_convert_Float16x3;
inline constexpr std::array Float16x3_convert_Float16x3_args = { &Float16x3_convert_Float16x3_arg0 };

/// f16x3 with Float16
Variable Float16x3_splat_Float16_arg0;
Function Float16x3_splat_Float16;
inline constexpr std::array Float16x3_splat_Float16_args = { &Float16x3_splat_Float16_arg0 };

/// f16x3 with UInt16x3
Variable Float16x3_convert_UInt16x3_arg0;
Function Float16x3_convert_UInt16x3;
inline constexpr std::array Float16x3_convert_UInt16x3_args = { &Float16x3_convert_UInt16x3_arg0 };

/// f16x3 with UInt16
Variable Float16x3_splat_UInt16_arg0;
Function Float16x3_splat_UInt16;
inline constexpr std::array Float16x3_splat_UInt16_args = { &Float16x3_splat_UInt16_arg0 };

/// f16x3 with Int16x3
Variable Float16x3_convert_Int16x3_arg0;
Function Float16x3_convert_Int16x3;
inline constexpr std::array Float16x3_convert_Int16x3_args = { &Float16x3_convert_Int16x3_arg0 };

/// f16x3 with Int16
Variable Float16x3_splat_Int16_arg0;
Function Float16x3_splat_Int16;
inline constexpr std::array Float16x3_splat_Int16_args = { &Float16x3_splat_Int16_arg0 };

/// f16x3 with Float16, Float16, Float16
Variable Float16x3_ctor0_arg0_Float16;
Variable Float16x3_ctor0_arg1_Float16;
Variable Float16x3_ctor0_arg2_Float16;
Function Float16x3_ctor0;
inline constexpr std::array Float16x3_ctor0_args = { &Float16x3_ctor0_arg0_Float16, &Float16x3_ctor0_arg1_Float16, &Float16x3_ctor0_arg2_Float16 };

/// f16x3 with Float16x2, Float16
Variable Float16x3_ctor1_arg0_Float16x2;
Variable Float16x3_ctor1_arg1_Float16;
Function Float16x3_ctor1;
inline constexpr std::array Float16x3_ctor1_args = { &Float16x3_ctor1_arg0_Float16x2, &Float16x3_ctor1_arg1_Float16 };

/// f16x3 with Float16, Float16x2
Variable Float16x3_ctor2_arg0_Float16;
Variable Float16x3_ctor2_arg1_Float16x2;
Function Float16x3_ctor2;
inline constexpr std::array Float16x3_ctor2_args = { &Float16x3_ctor2_arg0_Float16, &Float16x3_ctor2_arg1_Float16x2 };

/// operator[] with Int32
Variable Float16x3_operator_index_Int32_arg0;
Function Float16x3_operator_index_Int32;
inline constexpr std::array Float16x3_operator_index_Int32_args = { &Float16x3_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float16x3_operator_index_UInt32_arg0;
Function Float16x3_operator_index_UInt32;
inline constexpr std::array Float16x3_operator_index_UInt32_args = { &Float16x3_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float16x3_operator_index_Int16_arg0;
Function Float16x3_operator_index_Int16;
inline constexpr std::array Float16x3_operator_index_Int16_args = { &Float16x3_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float16x3_operator_index_UInt16_arg0;
Function Float16x3_operator_index_UInt16;
inline constexpr std::array Float16x3_operator_index_UInt16_args = { &Float16x3_operator_index_UInt16_arg0 };

/// operator+ with Float16x3
Variable Float16x3_operator_add_Float16x3_arg0;
Function Float16x3_operator_add_Float16x3;
inline constexpr std::array Float16x3_operator_add_Float16x3_args = { &Float16x3_operator_add_Float16x3_arg0 };

/// operator- with Float16x3
Variable Float16x3_operator_sub_Float16x3_arg0;
Function Float16x3_operator_sub_Float16x3;
inline constexpr std::array Float16x3_operator_sub_Float16x3_args = { &Float16x3_operator_sub_Float16x3_arg0 };

/// operator* with Float16x3
Variable Float16x3_operator_mul_Float16x3_arg0;
Function Float16x3_operator_mul_Float16x3;
inline constexpr std::array Float16x3_operator_mul_Float16x3_args = { &Float16x3_operator_mul_Float16x3_arg0 };

/// operator/ with Float16x3
Variable Float16x3_operator_div_Float16x3_arg0;
Function Float16x3_operator_div_Float16x3;
inline constexpr std::array Float16x3_operator_div_Float16x3_args = { &Float16x3_operator_div_Float16x3_arg0 };

/// operator% with Float16x3
Variable Float16x3_operator_mod_Float16x3_arg0;
Function Float16x3_operator_mod_Float16x3;
inline constexpr std::array Float16x3_operator_mod_Float16x3_args = { &Float16x3_operator_mod_Float16x3_arg0 };

/// operator+= with Float16x3
Variable Float16x3_operator_addasg_Float16x3_arg0;
Function Float16x3_operator_addasg_Float16x3;
inline constexpr std::array Float16x3_operator_addasg_Float16x3_args = { &Float16x3_operator_addasg_Float16x3_arg0 };

/// operator-= with Float16x3
Variable Float16x3_operator_subasg_Float16x3_arg0;
Function Float16x3_operator_subasg_Float16x3;
inline constexpr std::array Float16x3_operator_subasg_Float16x3_args = { &Float16x3_operator_subasg_Float16x3_arg0 };

/// operator*= with Float16x3
Variable Float16x3_operator_mulasg_Float16x3_arg0;
Function Float16x3_operator_mulasg_Float16x3;
inline constexpr std::array Float16x3_operator_mulasg_Float16x3_args = { &Float16x3_operator_mulasg_Float16x3_arg0 };

/// operator/= with Float16x3
Variable Float16x3_operator_divasg_Float16x3_arg0;
Function Float16x3_operator_divasg_Float16x3;
inline constexpr std::array Float16x3_operator_divasg_Float16x3_args = { &Float16x3_operator_divasg_Float16x3_arg0 };

/// operator< with Float16x3
Variable Float16x3_operator_lt_Float16x3_arg0;
Function Float16x3_operator_lt_Float16x3;
inline constexpr std::array Float16x3_operator_lt_Float16x3_args = { &Float16x3_operator_lt_Float16x3_arg0 };

/// operator<= with Float16x3
Variable Float16x3_operator_lte_Float16x3_arg0;
Function Float16x3_operator_lte_Float16x3;
inline constexpr std::array Float16x3_operator_lte_Float16x3_args = { &Float16x3_operator_lte_Float16x3_arg0 };

/// operator> with Float16x3
Variable Float16x3_operator_gt_Float16x3_arg0;
Function Float16x3_operator_gt_Float16x3;
inline constexpr std::array Float16x3_operator_gt_Float16x3_args = { &Float16x3_operator_gt_Float16x3_arg0 };

/// operator>= with Float16x3
Variable Float16x3_operator_gte_Float16x3_arg0;
Function Float16x3_operator_gte_Float16x3;
inline constexpr std::array Float16x3_operator_gte_Float16x3_args = { &Float16x3_operator_gte_Float16x3_arg0 };

/// operator== with Float16x3
Variable Float16x3_operator_eq_Float16x3_arg0;
Function Float16x3_operator_eq_Float16x3;
inline constexpr std::array Float16x3_operator_eq_Float16x3_args = { &Float16x3_operator_eq_Float16x3_arg0 };

/// operator!= with Float16x3
Variable Float16x3_operator_neq_Float16x3_arg0;
Function Float16x3_operator_neq_Float16x3;
inline constexpr std::array Float16x3_operator_neq_Float16x3_args = { &Float16x3_operator_neq_Float16x3_arg0 };

/// operator* with Float32
Variable Float16x3_operator_scale_Float32_arg0;
Function Float16x3_operator_scale_Float32;
inline constexpr std::array Float16x3_operator_scale_Float32_args = { &Float16x3_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable Float16x3_operator_scale_Float16_arg0;
Function Float16x3_operator_scale_Float16;
inline constexpr std::array Float16x3_operator_scale_Float16_args = { &Float16x3_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable Float16x3_operator_scale_UInt32_arg0;
Function Float16x3_operator_scale_UInt32;
inline constexpr std::array Float16x3_operator_scale_UInt32_args = { &Float16x3_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable Float16x3_operator_scale_UInt16_arg0;
Function Float16x3_operator_scale_UInt16;
inline constexpr std::array Float16x3_operator_scale_UInt16_args = { &Float16x3_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable Float16x3_operator_scale_Int32_arg0;
Function Float16x3_operator_scale_Int32;
inline constexpr std::array Float16x3_operator_scale_Int32_args = { &Float16x3_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable Float16x3_operator_scale_Int16_arg0;
Function Float16x3_operator_scale_Int16;
inline constexpr std::array Float16x3_operator_scale_Int16_args = { &Float16x3_operator_scale_Int16_arg0 };

/// operator* with Float32x3x2
Variable Float16x3_operator_mul_Float32x3x2_arg0;
Function Float16x3_operator_mul_Float32x3x2;
inline constexpr std::array Float16x3_operator_mul_Float32x3x2_args = { &Float16x3_operator_mul_Float32x3x2_arg0 };

/// operator* with Float32x3x3
Variable Float16x3_operator_mul_Float32x3x3_arg0;
Function Float16x3_operator_mul_Float32x3x3;
inline constexpr std::array Float16x3_operator_mul_Float32x3x3_args = { &Float16x3_operator_mul_Float32x3x3_arg0 };

/// operator* with Float32x3x4
Variable Float16x3_operator_mul_Float32x3x4_arg0;
Function Float16x3_operator_mul_Float32x3x4;
inline constexpr std::array Float16x3_operator_mul_Float32x3x4_args = { &Float16x3_operator_mul_Float32x3x4_arg0 };

Float16x3::Float16x3()
{
    this->name = "f16x3";
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 6;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// f16x3 with Float32x3
    Float16x3_convert_Float32x3_arg0.name = "val"_c;
    Float16x3_convert_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Float16x3_convert_Float32x3.documentation = "Convert f32x3 to f16x3"_c;
    Float16x3_convert_Float32x3.name = "f16x3"_c;
    Float16x3_convert_Float32x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_convert_Float32x3.parameters = Float16x3_convert_Float32x3_args;
    Symbol::Resolved(&Float16x3_convert_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float16x3_convert_Float32x3)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Float32
    Float16x3_splat_Float32_arg0.name = "val"_c;
    Float16x3_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float16x3_splat_Float32.documentation = "Splat f32x3 to f16x3"_c;
    Float16x3_splat_Float32.name = "f16x3"_c;
    Float16x3_splat_Float32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_splat_Float32.parameters = Float16x3_splat_Float32_args;
    Symbol::Resolved(&Float16x3_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float16x3_splat_Float32)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with UInt32x3
    Float16x3_convert_UInt32x3_arg0.name = "val"_c;
    Float16x3_convert_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Float16x3_convert_UInt32x3.documentation = "Convert u32x3 to f16x3"_c;
    Float16x3_convert_UInt32x3.name = "f16x3"_c;
    Float16x3_convert_UInt32x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_convert_UInt32x3.parameters = Float16x3_convert_UInt32x3_args;
    Symbol::Resolved(&Float16x3_convert_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&Float16x3_convert_UInt32x3)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with UInt32
    Float16x3_splat_UInt32_arg0.name = "val"_c;
    Float16x3_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x3_splat_UInt32.documentation = "Splat u32x3 to f16x3"_c;
    Float16x3_splat_UInt32.name = "f16x3"_c;
    Float16x3_splat_UInt32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_splat_UInt32.parameters = Float16x3_splat_UInt32_args;
    Symbol::Resolved(&Float16x3_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x3_splat_UInt32)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Int32x3
    Float16x3_convert_Int32x3_arg0.name = "val"_c;
    Float16x3_convert_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Float16x3_convert_Int32x3.documentation = "Convert i32x3 to f16x3"_c;
    Float16x3_convert_Int32x3.name = "f16x3"_c;
    Float16x3_convert_Int32x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_convert_Int32x3.parameters = Float16x3_convert_Int32x3_args;
    Symbol::Resolved(&Float16x3_convert_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Float16x3_convert_Int32x3)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Int32
    Float16x3_splat_Int32_arg0.name = "val"_c;
    Float16x3_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x3_splat_Int32.documentation = "Splat i32x3 to f16x3"_c;
    Float16x3_splat_Int32.name = "f16x3"_c;
    Float16x3_splat_Int32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_splat_Int32.parameters = Float16x3_splat_Int32_args;
    Symbol::Resolved(&Float16x3_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x3_splat_Int32)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Float16x3
    Float16x3_convert_Float16x3_arg0.name = "val"_c;
    Float16x3_convert_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_convert_Float16x3.documentation = "Convert f16x3 to f16x3"_c;
    Float16x3_convert_Float16x3.name = "f16x3"_c;
    Float16x3_convert_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_convert_Float16x3.parameters = Float16x3_convert_Float16x3_args;
    Symbol::Resolved(&Float16x3_convert_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_convert_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Float16
    Float16x3_splat_Float16_arg0.name = "val"_c;
    Float16x3_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16x3_splat_Float16.documentation = "Splat f16x3 to f16x3"_c;
    Float16x3_splat_Float16.name = "f16x3"_c;
    Float16x3_splat_Float16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_splat_Float16.parameters = Float16x3_splat_Float16_args;
    Symbol::Resolved(&Float16x3_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3_splat_Float16)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with UInt16x3
    Float16x3_convert_UInt16x3_arg0.name = "val"_c;
    Float16x3_convert_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Float16x3_convert_UInt16x3.documentation = "Convert u16x3 to f16x3"_c;
    Float16x3_convert_UInt16x3.name = "f16x3"_c;
    Float16x3_convert_UInt16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_convert_UInt16x3.parameters = Float16x3_convert_UInt16x3_args;
    Symbol::Resolved(&Float16x3_convert_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&Float16x3_convert_UInt16x3)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with UInt16
    Float16x3_splat_UInt16_arg0.name = "val"_c;
    Float16x3_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x3_splat_UInt16.documentation = "Splat u16x3 to f16x3"_c;
    Float16x3_splat_UInt16.name = "f16x3"_c;
    Float16x3_splat_UInt16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_splat_UInt16.parameters = Float16x3_splat_UInt16_args;
    Symbol::Resolved(&Float16x3_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3_splat_UInt16)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Int16x3
    Float16x3_convert_Int16x3_arg0.name = "val"_c;
    Float16x3_convert_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Float16x3_convert_Int16x3.documentation = "Convert i16x3 to f16x3"_c;
    Float16x3_convert_Int16x3.name = "f16x3"_c;
    Float16x3_convert_Int16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_convert_Int16x3.parameters = Float16x3_convert_Int16x3_args;
    Symbol::Resolved(&Float16x3_convert_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Float16x3_convert_Int16x3)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Int16
    Float16x3_splat_Int16_arg0.name = "val"_c;
    Float16x3_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x3_splat_Int16.documentation = "Splat i16x3 to f16x3"_c;
    Float16x3_splat_Int16.name = "f16x3"_c;
    Float16x3_splat_Int16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_splat_Int16.parameters = Float16x3_splat_Int16_args;
    Symbol::Resolved(&Float16x3_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3_splat_Int16)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Float16, Float16, Float16
    Float16x3_ctor0_arg0_Float16.name = "_arg0"_c;
    Float16x3_ctor0_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16x3_ctor0_arg1_Float16.name = "_arg1"_c;
    Float16x3_ctor0_arg1_Float16.type = Type::FullType{ Float16Type.name };
    Float16x3_ctor0_arg2_Float16.name = "_arg2"_c;
    Float16x3_ctor0_arg2_Float16.type = Type::FullType{ Float16Type.name };
    Float16x3_ctor0.name = "f16x3"_c;
    Float16x3_ctor0.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_ctor0.parameters = Float16x3_ctor0_args;
    Symbol::Resolved(&Float16x3_ctor0_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3_ctor0_arg1_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3_ctor0_arg2_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3_ctor0)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Float16x2, Float16
    Float16x3_ctor1_arg0_Float16x2.name = "_arg0"_c;
    Float16x3_ctor1_arg0_Float16x2.type = Type::FullType{ Float16x2Type.name };
    Float16x3_ctor1_arg1_Float16.name = "_arg1"_c;
    Float16x3_ctor1_arg1_Float16.type = Type::FullType{ Float16Type.name };
    Float16x3_ctor1.name = "f16x3"_c;
    Float16x3_ctor1.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_ctor1.parameters = Float16x3_ctor1_args;
    Symbol::Resolved(&Float16x3_ctor1_arg0_Float16x2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x3_ctor1_arg1_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3_ctor1)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Float16, Float16x2
    Float16x3_ctor2_arg0_Float16.name = "_arg0"_c;
    Float16x3_ctor2_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16x3_ctor2_arg1_Float16x2.name = "_arg1"_c;
    Float16x3_ctor2_arg1_Float16x2.type = Type::FullType{ Float16x2Type.name };
    Float16x3_ctor2.name = "f16x3"_c;
    Float16x3_ctor2.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_ctor2.parameters = Float16x3_ctor2_args;
    Symbol::Resolved(&Float16x3_ctor2_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3_ctor2_arg1_Float16x2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x3_ctor2)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with Int32
    Float16x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x3_operator_index_Int32.name = "operator[]"_c;
    Float16x3_operator_index_Int32.returnType = Type::FullType { Float16Type.name };
    Float16x3_operator_index_Int32.parameters = Float16x3_operator_index_Int32_args;
    Symbol::Resolved(&Float16x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x3_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt32
    Float16x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x3_operator_index_UInt32.name = "operator[]"_c;
    Float16x3_operator_index_UInt32.returnType = Type::FullType { Float16Type.name };
    Float16x3_operator_index_UInt32.parameters = Float16x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x3_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    /// operator[] with Int16
    Float16x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x3_operator_index_Int16.name = "operator[]"_c;
    Float16x3_operator_index_Int16.returnType = Type::FullType { Float16Type.name };
    Float16x3_operator_index_Int16.parameters = Float16x3_operator_index_Int16_args;
    Symbol::Resolved(&Float16x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt16
    Float16x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x3_operator_index_UInt16.name = "operator[]"_c;
    Float16x3_operator_index_UInt16.returnType = Type::FullType { Float16Type.name };
    Float16x3_operator_index_UInt16.parameters = Float16x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    /// operator+ with Float16x3
    Float16x3_operator_add_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_add_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_add_Float16x3.name = "operator+"_c;
    Float16x3_operator_add_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_add_Float16x3.parameters = Float16x3_operator_add_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_add_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_add_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator- with Float16x3
    Float16x3_operator_sub_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_sub_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_sub_Float16x3.name = "operator-"_c;
    Float16x3_operator_sub_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_sub_Float16x3.parameters = Float16x3_operator_sub_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_sub_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_sub_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float16x3
    Float16x3_operator_mul_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_mul_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_mul_Float16x3.name = "operator*"_c;
    Float16x3_operator_mul_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_mul_Float16x3.parameters = Float16x3_operator_mul_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_mul_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_mul_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator/ with Float16x3
    Float16x3_operator_div_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_div_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_div_Float16x3.name = "operator/"_c;
    Float16x3_operator_div_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_div_Float16x3.parameters = Float16x3_operator_div_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_div_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_div_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator% with Float16x3
    Float16x3_operator_mod_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_mod_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_mod_Float16x3.name = "operator%"_c;
    Float16x3_operator_mod_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_mod_Float16x3.parameters = Float16x3_operator_mod_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_mod_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_mod_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator+= with Float16x3
    Float16x3_operator_addasg_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_addasg_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_addasg_Float16x3.name = "operator+="_c;
    Float16x3_operator_addasg_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_addasg_Float16x3.parameters = Float16x3_operator_addasg_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_addasg_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_addasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator-= with Float16x3
    Float16x3_operator_subasg_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_subasg_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_subasg_Float16x3.name = "operator-="_c;
    Float16x3_operator_subasg_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_subasg_Float16x3.parameters = Float16x3_operator_subasg_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_subasg_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_subasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator*= with Float16x3
    Float16x3_operator_mulasg_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_mulasg_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_mulasg_Float16x3.name = "operator*="_c;
    Float16x3_operator_mulasg_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_mulasg_Float16x3.parameters = Float16x3_operator_mulasg_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_mulasg_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_mulasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator/= with Float16x3
    Float16x3_operator_divasg_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_divasg_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_divasg_Float16x3.name = "operator/="_c;
    Float16x3_operator_divasg_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_divasg_Float16x3.parameters = Float16x3_operator_divasg_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_divasg_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_divasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator< with Float16x3
    Float16x3_operator_lt_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_lt_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_lt_Float16x3.name = "operator<"_c;
    Float16x3_operator_lt_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_lt_Float16x3.parameters = Float16x3_operator_lt_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_lt_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_lt_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator<= with Float16x3
    Float16x3_operator_lte_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_lte_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_lte_Float16x3.name = "operator<="_c;
    Float16x3_operator_lte_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_lte_Float16x3.parameters = Float16x3_operator_lte_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_lte_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_lte_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator> with Float16x3
    Float16x3_operator_gt_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_gt_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_gt_Float16x3.name = "operator>"_c;
    Float16x3_operator_gt_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_gt_Float16x3.parameters = Float16x3_operator_gt_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_gt_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_gt_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator>= with Float16x3
    Float16x3_operator_gte_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_gte_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_gte_Float16x3.name = "operator>="_c;
    Float16x3_operator_gte_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_gte_Float16x3.parameters = Float16x3_operator_gte_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_gte_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_gte_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator== with Float16x3
    Float16x3_operator_eq_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_eq_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_eq_Float16x3.name = "operator=="_c;
    Float16x3_operator_eq_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_eq_Float16x3.parameters = Float16x3_operator_eq_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_eq_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_eq_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator!= with Float16x3
    Float16x3_operator_neq_Float16x3_arg0.name = "_arg0"_c;
    Float16x3_operator_neq_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_neq_Float16x3.name = "operator!="_c;
    Float16x3_operator_neq_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_neq_Float16x3.parameters = Float16x3_operator_neq_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_neq_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_neq_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float32
    Float16x3_operator_scale_Float32_arg0.name = "_arg0"_c;
    Float16x3_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float16x3_operator_scale_Float32.name = "operator*"_c;
    Float16x3_operator_scale_Float32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_scale_Float32.parameters = Float16x3_operator_scale_Float32_args;
    Symbol::Resolved(&Float16x3_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float16x3_operator_scale_Float32)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float16
    Float16x3_operator_scale_Float16_arg0.name = "_arg0"_c;
    Float16x3_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16x3_operator_scale_Float16.name = "operator*"_c;
    Float16x3_operator_scale_Float16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_scale_Float16.parameters = Float16x3_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x3_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3_operator_scale_Float16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with UInt32
    Float16x3_operator_scale_UInt32_arg0.name = "_arg0"_c;
    Float16x3_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x3_operator_scale_UInt32.name = "operator*"_c;
    Float16x3_operator_scale_UInt32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_scale_UInt32.parameters = Float16x3_operator_scale_UInt32_args;
    Symbol::Resolved(&Float16x3_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x3_operator_scale_UInt32)->returnTypeSymbol = &Float16x3Type;

    /// operator* with UInt16
    Float16x3_operator_scale_UInt16_arg0.name = "_arg0"_c;
    Float16x3_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x3_operator_scale_UInt16.name = "operator*"_c;
    Float16x3_operator_scale_UInt16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_scale_UInt16.parameters = Float16x3_operator_scale_UInt16_args;
    Symbol::Resolved(&Float16x3_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3_operator_scale_UInt16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Int32
    Float16x3_operator_scale_Int32_arg0.name = "_arg0"_c;
    Float16x3_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x3_operator_scale_Int32.name = "operator*"_c;
    Float16x3_operator_scale_Int32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_scale_Int32.parameters = Float16x3_operator_scale_Int32_args;
    Symbol::Resolved(&Float16x3_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x3_operator_scale_Int32)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Int16
    Float16x3_operator_scale_Int16_arg0.name = "_arg0"_c;
    Float16x3_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x3_operator_scale_Int16.name = "operator*"_c;
    Float16x3_operator_scale_Int16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_scale_Int16.parameters = Float16x3_operator_scale_Int16_args;
    Symbol::Resolved(&Float16x3_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3_operator_scale_Int16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float32x3x2
    Float16x3_operator_mul_Float32x3x2_arg0.name = "_arg0"_c;
    Float16x3_operator_mul_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Float16x3_operator_mul_Float32x3x2.name = "operator*"_c;
    Float16x3_operator_mul_Float32x3x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x3_operator_mul_Float32x3x2.parameters = Float16x3_operator_mul_Float32x3x2_args;
    Symbol::Resolved(&Float16x3_operator_mul_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float16x3_operator_mul_Float32x3x2)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float32x3x3
    Float16x3_operator_mul_Float32x3x3_arg0.name = "_arg0"_c;
    Float16x3_operator_mul_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Float16x3_operator_mul_Float32x3x3.name = "operator*"_c;
    Float16x3_operator_mul_Float32x3x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_mul_Float32x3x3.parameters = Float16x3_operator_mul_Float32x3x3_args;
    Symbol::Resolved(&Float16x3_operator_mul_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float16x3_operator_mul_Float32x3x3)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float32x3x4
    Float16x3_operator_mul_Float32x3x4_arg0.name = "_arg0"_c;
    Float16x3_operator_mul_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Float16x3_operator_mul_Float32x3x4.name = "operator*"_c;
    Float16x3_operator_mul_Float32x3x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x3_operator_mul_Float32x3x4.parameters = Float16x3_operator_mul_Float32x3x4_args;
    Symbol::Resolved(&Float16x3_operator_mul_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float16x3_operator_mul_Float32x3x4)->returnTypeSymbol = &Float16x4Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Float16x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3_operator_add_Float16x3 },
    std::pair{ "operator-"_c, &Float16x3_operator_sub_Float16x3 },
    std::pair{ "operator*"_c, &Float16x3_operator_mul_Float16x3 },
    std::pair{ "operator/"_c, &Float16x3_operator_div_Float16x3 },
    std::pair{ "operator%"_c, &Float16x3_operator_mod_Float16x3 },
    std::pair{ "operator+="_c, &Float16x3_operator_addasg_Float16x3 },
    std::pair{ "operator-="_c, &Float16x3_operator_subasg_Float16x3 },
    std::pair{ "operator*="_c, &Float16x3_operator_mulasg_Float16x3 },
    std::pair{ "operator/="_c, &Float16x3_operator_divasg_Float16x3 },
    std::pair{ "operator<"_c, &Float16x3_operator_lt_Float16x3 },
    std::pair{ "operator<="_c, &Float16x3_operator_lte_Float16x3 },
    std::pair{ "operator>"_c, &Float16x3_operator_gt_Float16x3 },
    std::pair{ "operator>="_c, &Float16x3_operator_gte_Float16x3 },
    std::pair{ "operator=="_c, &Float16x3_operator_eq_Float16x3 },
    std::pair{ "operator!="_c, &Float16x3_operator_neq_Float16x3 },
    std::pair{ "operator*"_c, &Float16x3_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Float16x3_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Float16x3_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Float16x3_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Float16x3_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Float16x3_operator_scale_Int16 },
    std::pair{ "operator*"_c, &Float16x3_operator_mul_Float32x3x2 },
    std::pair{ "operator*"_c, &Float16x3_operator_mul_Float32x3x3 },
    std::pair{ "operator*"_c, &Float16x3_operator_mul_Float32x3x4 }
    } };
}
Float16x3 Float16x3Type;

/// u16x3 with Float32x3
Variable UInt16x3_convert_Float32x3_arg0;
Function UInt16x3_convert_Float32x3;
inline constexpr std::array UInt16x3_convert_Float32x3_args = { &UInt16x3_convert_Float32x3_arg0 };

/// u16x3 with Float32
Variable UInt16x3_splat_Float32_arg0;
Function UInt16x3_splat_Float32;
inline constexpr std::array UInt16x3_splat_Float32_args = { &UInt16x3_splat_Float32_arg0 };

/// u16x3 with UInt32x3
Variable UInt16x3_convert_UInt32x3_arg0;
Function UInt16x3_convert_UInt32x3;
inline constexpr std::array UInt16x3_convert_UInt32x3_args = { &UInt16x3_convert_UInt32x3_arg0 };

/// u16x3 with UInt32
Variable UInt16x3_splat_UInt32_arg0;
Function UInt16x3_splat_UInt32;
inline constexpr std::array UInt16x3_splat_UInt32_args = { &UInt16x3_splat_UInt32_arg0 };

/// u16x3 with Int32x3
Variable UInt16x3_convert_Int32x3_arg0;
Function UInt16x3_convert_Int32x3;
inline constexpr std::array UInt16x3_convert_Int32x3_args = { &UInt16x3_convert_Int32x3_arg0 };

/// u16x3 with Int32
Variable UInt16x3_splat_Int32_arg0;
Function UInt16x3_splat_Int32;
inline constexpr std::array UInt16x3_splat_Int32_args = { &UInt16x3_splat_Int32_arg0 };

/// u16x3 with Float16x3
Variable UInt16x3_convert_Float16x3_arg0;
Function UInt16x3_convert_Float16x3;
inline constexpr std::array UInt16x3_convert_Float16x3_args = { &UInt16x3_convert_Float16x3_arg0 };

/// u16x3 with Float16
Variable UInt16x3_splat_Float16_arg0;
Function UInt16x3_splat_Float16;
inline constexpr std::array UInt16x3_splat_Float16_args = { &UInt16x3_splat_Float16_arg0 };

/// u16x3 with UInt16x3
Variable UInt16x3_convert_UInt16x3_arg0;
Function UInt16x3_convert_UInt16x3;
inline constexpr std::array UInt16x3_convert_UInt16x3_args = { &UInt16x3_convert_UInt16x3_arg0 };

/// u16x3 with UInt16
Variable UInt16x3_splat_UInt16_arg0;
Function UInt16x3_splat_UInt16;
inline constexpr std::array UInt16x3_splat_UInt16_args = { &UInt16x3_splat_UInt16_arg0 };

/// u16x3 with Int16x3
Variable UInt16x3_convert_Int16x3_arg0;
Function UInt16x3_convert_Int16x3;
inline constexpr std::array UInt16x3_convert_Int16x3_args = { &UInt16x3_convert_Int16x3_arg0 };

/// u16x3 with Int16
Variable UInt16x3_splat_Int16_arg0;
Function UInt16x3_splat_Int16;
inline constexpr std::array UInt16x3_splat_Int16_args = { &UInt16x3_splat_Int16_arg0 };

/// u16x3 with UInt16, UInt16, UInt16
Variable UInt16x3_ctor0_arg0_UInt16;
Variable UInt16x3_ctor0_arg1_UInt16;
Variable UInt16x3_ctor0_arg2_UInt16;
Function UInt16x3_ctor0;
inline constexpr std::array UInt16x3_ctor0_args = { &UInt16x3_ctor0_arg0_UInt16, &UInt16x3_ctor0_arg1_UInt16, &UInt16x3_ctor0_arg2_UInt16 };

/// u16x3 with UInt16x2, UInt16
Variable UInt16x3_ctor1_arg0_UInt16x2;
Variable UInt16x3_ctor1_arg1_UInt16;
Function UInt16x3_ctor1;
inline constexpr std::array UInt16x3_ctor1_args = { &UInt16x3_ctor1_arg0_UInt16x2, &UInt16x3_ctor1_arg1_UInt16 };

/// u16x3 with UInt16, UInt16x2
Variable UInt16x3_ctor2_arg0_UInt16;
Variable UInt16x3_ctor2_arg1_UInt16x2;
Function UInt16x3_ctor2;
inline constexpr std::array UInt16x3_ctor2_args = { &UInt16x3_ctor2_arg0_UInt16, &UInt16x3_ctor2_arg1_UInt16x2 };

/// operator[] with Int32
Variable UInt16x3_operator_index_Int32_arg0;
Function UInt16x3_operator_index_Int32;
inline constexpr std::array UInt16x3_operator_index_Int32_args = { &UInt16x3_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable UInt16x3_operator_index_UInt32_arg0;
Function UInt16x3_operator_index_UInt32;
inline constexpr std::array UInt16x3_operator_index_UInt32_args = { &UInt16x3_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable UInt16x3_operator_index_Int16_arg0;
Function UInt16x3_operator_index_Int16;
inline constexpr std::array UInt16x3_operator_index_Int16_args = { &UInt16x3_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable UInt16x3_operator_index_UInt16_arg0;
Function UInt16x3_operator_index_UInt16;
inline constexpr std::array UInt16x3_operator_index_UInt16_args = { &UInt16x3_operator_index_UInt16_arg0 };

/// operator+ with UInt16x3
Variable UInt16x3_operator_add_UInt16x3_arg0;
Function UInt16x3_operator_add_UInt16x3;
inline constexpr std::array UInt16x3_operator_add_UInt16x3_args = { &UInt16x3_operator_add_UInt16x3_arg0 };

/// operator- with UInt16x3
Variable UInt16x3_operator_sub_UInt16x3_arg0;
Function UInt16x3_operator_sub_UInt16x3;
inline constexpr std::array UInt16x3_operator_sub_UInt16x3_args = { &UInt16x3_operator_sub_UInt16x3_arg0 };

/// operator* with UInt16x3
Variable UInt16x3_operator_mul_UInt16x3_arg0;
Function UInt16x3_operator_mul_UInt16x3;
inline constexpr std::array UInt16x3_operator_mul_UInt16x3_args = { &UInt16x3_operator_mul_UInt16x3_arg0 };

/// operator/ with UInt16x3
Variable UInt16x3_operator_div_UInt16x3_arg0;
Function UInt16x3_operator_div_UInt16x3;
inline constexpr std::array UInt16x3_operator_div_UInt16x3_args = { &UInt16x3_operator_div_UInt16x3_arg0 };

/// operator% with UInt16x3
Variable UInt16x3_operator_mod_UInt16x3_arg0;
Function UInt16x3_operator_mod_UInt16x3;
inline constexpr std::array UInt16x3_operator_mod_UInt16x3_args = { &UInt16x3_operator_mod_UInt16x3_arg0 };

/// operator+= with UInt16x3
Variable UInt16x3_operator_addasg_UInt16x3_arg0;
Function UInt16x3_operator_addasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_addasg_UInt16x3_args = { &UInt16x3_operator_addasg_UInt16x3_arg0 };

/// operator-= with UInt16x3
Variable UInt16x3_operator_subasg_UInt16x3_arg0;
Function UInt16x3_operator_subasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_subasg_UInt16x3_args = { &UInt16x3_operator_subasg_UInt16x3_arg0 };

/// operator*= with UInt16x3
Variable UInt16x3_operator_mulasg_UInt16x3_arg0;
Function UInt16x3_operator_mulasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_mulasg_UInt16x3_args = { &UInt16x3_operator_mulasg_UInt16x3_arg0 };

/// operator/= with UInt16x3
Variable UInt16x3_operator_divasg_UInt16x3_arg0;
Function UInt16x3_operator_divasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_divasg_UInt16x3_args = { &UInt16x3_operator_divasg_UInt16x3_arg0 };

/// operator< with UInt16x3
Variable UInt16x3_operator_lt_UInt16x3_arg0;
Function UInt16x3_operator_lt_UInt16x3;
inline constexpr std::array UInt16x3_operator_lt_UInt16x3_args = { &UInt16x3_operator_lt_UInt16x3_arg0 };

/// operator<= with UInt16x3
Variable UInt16x3_operator_lte_UInt16x3_arg0;
Function UInt16x3_operator_lte_UInt16x3;
inline constexpr std::array UInt16x3_operator_lte_UInt16x3_args = { &UInt16x3_operator_lte_UInt16x3_arg0 };

/// operator> with UInt16x3
Variable UInt16x3_operator_gt_UInt16x3_arg0;
Function UInt16x3_operator_gt_UInt16x3;
inline constexpr std::array UInt16x3_operator_gt_UInt16x3_args = { &UInt16x3_operator_gt_UInt16x3_arg0 };

/// operator>= with UInt16x3
Variable UInt16x3_operator_gte_UInt16x3_arg0;
Function UInt16x3_operator_gte_UInt16x3;
inline constexpr std::array UInt16x3_operator_gte_UInt16x3_args = { &UInt16x3_operator_gte_UInt16x3_arg0 };

/// operator== with UInt16x3
Variable UInt16x3_operator_eq_UInt16x3_arg0;
Function UInt16x3_operator_eq_UInt16x3;
inline constexpr std::array UInt16x3_operator_eq_UInt16x3_args = { &UInt16x3_operator_eq_UInt16x3_arg0 };

/// operator!= with UInt16x3
Variable UInt16x3_operator_neq_UInt16x3_arg0;
Function UInt16x3_operator_neq_UInt16x3;
inline constexpr std::array UInt16x3_operator_neq_UInt16x3_args = { &UInt16x3_operator_neq_UInt16x3_arg0 };

/// operator* with Float32
Variable UInt16x3_operator_scale_Float32_arg0;
Function UInt16x3_operator_scale_Float32;
inline constexpr std::array UInt16x3_operator_scale_Float32_args = { &UInt16x3_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable UInt16x3_operator_scale_Float16_arg0;
Function UInt16x3_operator_scale_Float16;
inline constexpr std::array UInt16x3_operator_scale_Float16_args = { &UInt16x3_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable UInt16x3_operator_scale_UInt32_arg0;
Function UInt16x3_operator_scale_UInt32;
inline constexpr std::array UInt16x3_operator_scale_UInt32_args = { &UInt16x3_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable UInt16x3_operator_scale_UInt16_arg0;
Function UInt16x3_operator_scale_UInt16;
inline constexpr std::array UInt16x3_operator_scale_UInt16_args = { &UInt16x3_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable UInt16x3_operator_scale_Int32_arg0;
Function UInt16x3_operator_scale_Int32;
inline constexpr std::array UInt16x3_operator_scale_Int32_args = { &UInt16x3_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable UInt16x3_operator_scale_Int16_arg0;
Function UInt16x3_operator_scale_Int16;
inline constexpr std::array UInt16x3_operator_scale_Int16_args = { &UInt16x3_operator_scale_Int16_arg0 };

/// operator| with UInt16x3
Variable UInt16x3_operator_or_UInt16x3_arg0;
Function UInt16x3_operator_or_UInt16x3;
inline constexpr std::array UInt16x3_operator_or_UInt16x3_args = { &UInt16x3_operator_or_UInt16x3_arg0 };

/// operator& with UInt16x3
Variable UInt16x3_operator_and_UInt16x3_arg0;
Function UInt16x3_operator_and_UInt16x3;
inline constexpr std::array UInt16x3_operator_and_UInt16x3_args = { &UInt16x3_operator_and_UInt16x3_arg0 };

/// operator^ with UInt16x3
Variable UInt16x3_operator_xor_UInt16x3_arg0;
Function UInt16x3_operator_xor_UInt16x3;
inline constexpr std::array UInt16x3_operator_xor_UInt16x3_args = { &UInt16x3_operator_xor_UInt16x3_arg0 };

/// operator<< with UInt16x3
Variable UInt16x3_operator_lsh_UInt16x3_arg0;
Function UInt16x3_operator_lsh_UInt16x3;
inline constexpr std::array UInt16x3_operator_lsh_UInt16x3_args = { &UInt16x3_operator_lsh_UInt16x3_arg0 };

/// operator>> with UInt16x3
Variable UInt16x3_operator_rsh_UInt16x3_arg0;
Function UInt16x3_operator_rsh_UInt16x3;
inline constexpr std::array UInt16x3_operator_rsh_UInt16x3_args = { &UInt16x3_operator_rsh_UInt16x3_arg0 };

/// operator|= with UInt16x3
Variable UInt16x3_operator_orasg_UInt16x3_arg0;
Function UInt16x3_operator_orasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_orasg_UInt16x3_args = { &UInt16x3_operator_orasg_UInt16x3_arg0 };

/// operator&= with UInt16x3
Variable UInt16x3_operator_andasg_UInt16x3_arg0;
Function UInt16x3_operator_andasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_andasg_UInt16x3_args = { &UInt16x3_operator_andasg_UInt16x3_arg0 };

/// operator^= with UInt16x3
Variable UInt16x3_operator_xorasg_UInt16x3_arg0;
Function UInt16x3_operator_xorasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_xorasg_UInt16x3_args = { &UInt16x3_operator_xorasg_UInt16x3_arg0 };

/// operator<<= with UInt16x3
Variable UInt16x3_operator_lshasg_UInt16x3_arg0;
Function UInt16x3_operator_lshasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_lshasg_UInt16x3_args = { &UInt16x3_operator_lshasg_UInt16x3_arg0 };

/// operator>>= with UInt16x3
Variable UInt16x3_operator_rhsasg_UInt16x3_arg0;
Function UInt16x3_operator_rhsasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_rhsasg_UInt16x3_args = { &UInt16x3_operator_rhsasg_UInt16x3_arg0 };

UInt16x3::UInt16x3()
{
    this->name = "u16x3";
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 6;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    /// u16x3 with Float32x3
    UInt16x3_convert_Float32x3_arg0.name = "val"_c;
    UInt16x3_convert_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    UInt16x3_convert_Float32x3.documentation = "Convert f32x3 to u16x3"_c;
    UInt16x3_convert_Float32x3.name = "u16x3"_c;
    UInt16x3_convert_Float32x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_convert_Float32x3.parameters = UInt16x3_convert_Float32x3_args;
    Symbol::Resolved(&UInt16x3_convert_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&UInt16x3_convert_Float32x3)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Float32
    UInt16x3_splat_Float32_arg0.name = "val"_c;
    UInt16x3_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    UInt16x3_splat_Float32.documentation = "Splat f32x3 to u16x3"_c;
    UInt16x3_splat_Float32.name = "u16x3"_c;
    UInt16x3_splat_Float32.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_splat_Float32.parameters = UInt16x3_splat_Float32_args;
    Symbol::Resolved(&UInt16x3_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt16x3_splat_Float32)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with UInt32x3
    UInt16x3_convert_UInt32x3_arg0.name = "val"_c;
    UInt16x3_convert_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    UInt16x3_convert_UInt32x3.documentation = "Convert u32x3 to u16x3"_c;
    UInt16x3_convert_UInt32x3.name = "u16x3"_c;
    UInt16x3_convert_UInt32x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_convert_UInt32x3.parameters = UInt16x3_convert_UInt32x3_args;
    Symbol::Resolved(&UInt16x3_convert_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt16x3_convert_UInt32x3)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with UInt32
    UInt16x3_splat_UInt32_arg0.name = "val"_c;
    UInt16x3_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt16x3_splat_UInt32.documentation = "Splat u32x3 to u16x3"_c;
    UInt16x3_splat_UInt32.name = "u16x3"_c;
    UInt16x3_splat_UInt32.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_splat_UInt32.parameters = UInt16x3_splat_UInt32_args;
    Symbol::Resolved(&UInt16x3_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x3_splat_UInt32)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Int32x3
    UInt16x3_convert_Int32x3_arg0.name = "val"_c;
    UInt16x3_convert_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    UInt16x3_convert_Int32x3.documentation = "Convert i32x3 to u16x3"_c;
    UInt16x3_convert_Int32x3.name = "u16x3"_c;
    UInt16x3_convert_Int32x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_convert_Int32x3.parameters = UInt16x3_convert_Int32x3_args;
    Symbol::Resolved(&UInt16x3_convert_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&UInt16x3_convert_Int32x3)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Int32
    UInt16x3_splat_Int32_arg0.name = "val"_c;
    UInt16x3_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt16x3_splat_Int32.documentation = "Splat i32x3 to u16x3"_c;
    UInt16x3_splat_Int32.name = "u16x3"_c;
    UInt16x3_splat_Int32.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_splat_Int32.parameters = UInt16x3_splat_Int32_args;
    Symbol::Resolved(&UInt16x3_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x3_splat_Int32)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Float16x3
    UInt16x3_convert_Float16x3_arg0.name = "val"_c;
    UInt16x3_convert_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    UInt16x3_convert_Float16x3.documentation = "Convert f16x3 to u16x3"_c;
    UInt16x3_convert_Float16x3.name = "u16x3"_c;
    UInt16x3_convert_Float16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_convert_Float16x3.parameters = UInt16x3_convert_Float16x3_args;
    Symbol::Resolved(&UInt16x3_convert_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&UInt16x3_convert_Float16x3)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Float16
    UInt16x3_splat_Float16_arg0.name = "val"_c;
    UInt16x3_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    UInt16x3_splat_Float16.documentation = "Splat f16x3 to u16x3"_c;
    UInt16x3_splat_Float16.name = "u16x3"_c;
    UInt16x3_splat_Float16.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_splat_Float16.parameters = UInt16x3_splat_Float16_args;
    Symbol::Resolved(&UInt16x3_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x3_splat_Float16)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with UInt16x3
    UInt16x3_convert_UInt16x3_arg0.name = "val"_c;
    UInt16x3_convert_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_convert_UInt16x3.documentation = "Convert u16x3 to u16x3"_c;
    UInt16x3_convert_UInt16x3.name = "u16x3"_c;
    UInt16x3_convert_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_convert_UInt16x3.parameters = UInt16x3_convert_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_convert_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_convert_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with UInt16
    UInt16x3_splat_UInt16_arg0.name = "val"_c;
    UInt16x3_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16x3_splat_UInt16.documentation = "Splat u16x3 to u16x3"_c;
    UInt16x3_splat_UInt16.name = "u16x3"_c;
    UInt16x3_splat_UInt16.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_splat_UInt16.parameters = UInt16x3_splat_UInt16_args;
    Symbol::Resolved(&UInt16x3_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_splat_UInt16)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Int16x3
    UInt16x3_convert_Int16x3_arg0.name = "val"_c;
    UInt16x3_convert_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    UInt16x3_convert_Int16x3.documentation = "Convert i16x3 to u16x3"_c;
    UInt16x3_convert_Int16x3.name = "u16x3"_c;
    UInt16x3_convert_Int16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_convert_Int16x3.parameters = UInt16x3_convert_Int16x3_args;
    Symbol::Resolved(&UInt16x3_convert_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&UInt16x3_convert_Int16x3)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Int16
    UInt16x3_splat_Int16_arg0.name = "val"_c;
    UInt16x3_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt16x3_splat_Int16.documentation = "Splat i16x3 to u16x3"_c;
    UInt16x3_splat_Int16.name = "u16x3"_c;
    UInt16x3_splat_Int16.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_splat_Int16.parameters = UInt16x3_splat_Int16_args;
    Symbol::Resolved(&UInt16x3_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x3_splat_Int16)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with UInt16, UInt16, UInt16
    UInt16x3_ctor0_arg0_UInt16.name = "_arg0"_c;
    UInt16x3_ctor0_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x3_ctor0_arg1_UInt16.name = "_arg1"_c;
    UInt16x3_ctor0_arg1_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x3_ctor0_arg2_UInt16.name = "_arg2"_c;
    UInt16x3_ctor0_arg2_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x3_ctor0.name = "u16x3"_c;
    UInt16x3_ctor0.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_ctor0.parameters = UInt16x3_ctor0_args;
    Symbol::Resolved(&UInt16x3_ctor0_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_ctor0_arg1_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_ctor0_arg2_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_ctor0)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with UInt16x2, UInt16
    UInt16x3_ctor1_arg0_UInt16x2.name = "_arg0"_c;
    UInt16x3_ctor1_arg0_UInt16x2.type = Type::FullType{ UInt16x2Type.name };
    UInt16x3_ctor1_arg1_UInt16.name = "_arg1"_c;
    UInt16x3_ctor1_arg1_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x3_ctor1.name = "u16x3"_c;
    UInt16x3_ctor1.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_ctor1.parameters = UInt16x3_ctor1_args;
    Symbol::Resolved(&UInt16x3_ctor1_arg0_UInt16x2)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x3_ctor1_arg1_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_ctor1)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with UInt16, UInt16x2
    UInt16x3_ctor2_arg0_UInt16.name = "_arg0"_c;
    UInt16x3_ctor2_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x3_ctor2_arg1_UInt16x2.name = "_arg1"_c;
    UInt16x3_ctor2_arg1_UInt16x2.type = Type::FullType{ UInt16x2Type.name };
    UInt16x3_ctor2.name = "u16x3"_c;
    UInt16x3_ctor2.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_ctor2.parameters = UInt16x3_ctor2_args;
    Symbol::Resolved(&UInt16x3_ctor2_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_ctor2_arg1_UInt16x2)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x3_ctor2)->returnTypeSymbol = &UInt16x3Type;

    /// operator[] with Int32
    UInt16x3_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt16x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt16x3_operator_index_Int32.name = "operator[]"_c;
    UInt16x3_operator_index_Int32.returnType = Type::FullType { UInt16Type.name };
    UInt16x3_operator_index_Int32.parameters = UInt16x3_operator_index_Int32_args;
    Symbol::Resolved(&UInt16x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x3_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt32
    UInt16x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt16x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt16x3_operator_index_UInt32.name = "operator[]"_c;
    UInt16x3_operator_index_UInt32.returnType = Type::FullType { UInt16Type.name };
    UInt16x3_operator_index_UInt32.parameters = UInt16x3_operator_index_UInt32_args;
    Symbol::Resolved(&UInt16x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x3_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with Int16
    UInt16x3_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt16x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt16x3_operator_index_Int16.name = "operator[]"_c;
    UInt16x3_operator_index_Int16.returnType = Type::FullType { UInt16Type.name };
    UInt16x3_operator_index_Int16.parameters = UInt16x3_operator_index_Int16_args;
    Symbol::Resolved(&UInt16x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x3_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt16
    UInt16x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt16x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16x3_operator_index_UInt16.name = "operator[]"_c;
    UInt16x3_operator_index_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16x3_operator_index_UInt16.parameters = UInt16x3_operator_index_UInt16_args;
    Symbol::Resolved(&UInt16x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator+ with UInt16x3
    UInt16x3_operator_add_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_add_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_add_UInt16x3.name = "operator+"_c;
    UInt16x3_operator_add_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_add_UInt16x3.parameters = UInt16x3_operator_add_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_add_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_add_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator- with UInt16x3
    UInt16x3_operator_sub_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_sub_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_sub_UInt16x3.name = "operator-"_c;
    UInt16x3_operator_sub_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_sub_UInt16x3.parameters = UInt16x3_operator_sub_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_sub_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_sub_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator* with UInt16x3
    UInt16x3_operator_mul_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_mul_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_mul_UInt16x3.name = "operator*"_c;
    UInt16x3_operator_mul_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_mul_UInt16x3.parameters = UInt16x3_operator_mul_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_mul_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_mul_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator/ with UInt16x3
    UInt16x3_operator_div_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_div_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_div_UInt16x3.name = "operator/"_c;
    UInt16x3_operator_div_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_div_UInt16x3.parameters = UInt16x3_operator_div_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_div_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_div_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator% with UInt16x3
    UInt16x3_operator_mod_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_mod_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_mod_UInt16x3.name = "operator%"_c;
    UInt16x3_operator_mod_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_mod_UInt16x3.parameters = UInt16x3_operator_mod_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_mod_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_mod_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator+= with UInt16x3
    UInt16x3_operator_addasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_addasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_addasg_UInt16x3.name = "operator+="_c;
    UInt16x3_operator_addasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_addasg_UInt16x3.parameters = UInt16x3_operator_addasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_addasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_addasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator-= with UInt16x3
    UInt16x3_operator_subasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_subasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_subasg_UInt16x3.name = "operator-="_c;
    UInt16x3_operator_subasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_subasg_UInt16x3.parameters = UInt16x3_operator_subasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_subasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_subasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator*= with UInt16x3
    UInt16x3_operator_mulasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_mulasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_mulasg_UInt16x3.name = "operator*="_c;
    UInt16x3_operator_mulasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_mulasg_UInt16x3.parameters = UInt16x3_operator_mulasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_mulasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_mulasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator/= with UInt16x3
    UInt16x3_operator_divasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_divasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_divasg_UInt16x3.name = "operator/="_c;
    UInt16x3_operator_divasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_divasg_UInt16x3.parameters = UInt16x3_operator_divasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_divasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_divasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator< with UInt16x3
    UInt16x3_operator_lt_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_lt_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_lt_UInt16x3.name = "operator<"_c;
    UInt16x3_operator_lt_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_lt_UInt16x3.parameters = UInt16x3_operator_lt_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_lt_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_lt_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator<= with UInt16x3
    UInt16x3_operator_lte_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_lte_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_lte_UInt16x3.name = "operator<="_c;
    UInt16x3_operator_lte_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_lte_UInt16x3.parameters = UInt16x3_operator_lte_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_lte_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_lte_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator> with UInt16x3
    UInt16x3_operator_gt_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_gt_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_gt_UInt16x3.name = "operator>"_c;
    UInt16x3_operator_gt_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_gt_UInt16x3.parameters = UInt16x3_operator_gt_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_gt_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_gt_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator>= with UInt16x3
    UInt16x3_operator_gte_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_gte_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_gte_UInt16x3.name = "operator>="_c;
    UInt16x3_operator_gte_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_gte_UInt16x3.parameters = UInt16x3_operator_gte_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_gte_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_gte_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator== with UInt16x3
    UInt16x3_operator_eq_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_eq_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_eq_UInt16x3.name = "operator=="_c;
    UInt16x3_operator_eq_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_eq_UInt16x3.parameters = UInt16x3_operator_eq_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_eq_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_eq_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator!= with UInt16x3
    UInt16x3_operator_neq_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_neq_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_neq_UInt16x3.name = "operator!="_c;
    UInt16x3_operator_neq_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_neq_UInt16x3.parameters = UInt16x3_operator_neq_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_neq_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_neq_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator* with Float32
    UInt16x3_operator_scale_Float32_arg0.name = "_arg0"_c;
    UInt16x3_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    UInt16x3_operator_scale_Float32.name = "operator*"_c;
    UInt16x3_operator_scale_Float32.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_scale_Float32.parameters = UInt16x3_operator_scale_Float32_args;
    Symbol::Resolved(&UInt16x3_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt16x3_operator_scale_Float32)->returnTypeSymbol = &UInt16x3Type;

    /// operator* with Float16
    UInt16x3_operator_scale_Float16_arg0.name = "_arg0"_c;
    UInt16x3_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    UInt16x3_operator_scale_Float16.name = "operator*"_c;
    UInt16x3_operator_scale_Float16.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_scale_Float16.parameters = UInt16x3_operator_scale_Float16_args;
    Symbol::Resolved(&UInt16x3_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x3_operator_scale_Float16)->returnTypeSymbol = &UInt16x3Type;

    /// operator* with UInt32
    UInt16x3_operator_scale_UInt32_arg0.name = "_arg0"_c;
    UInt16x3_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt16x3_operator_scale_UInt32.name = "operator*"_c;
    UInt16x3_operator_scale_UInt32.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_scale_UInt32.parameters = UInt16x3_operator_scale_UInt32_args;
    Symbol::Resolved(&UInt16x3_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x3_operator_scale_UInt32)->returnTypeSymbol = &UInt16x3Type;

    /// operator* with UInt16
    UInt16x3_operator_scale_UInt16_arg0.name = "_arg0"_c;
    UInt16x3_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16x3_operator_scale_UInt16.name = "operator*"_c;
    UInt16x3_operator_scale_UInt16.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_scale_UInt16.parameters = UInt16x3_operator_scale_UInt16_args;
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16)->returnTypeSymbol = &UInt16x3Type;

    /// operator* with Int32
    UInt16x3_operator_scale_Int32_arg0.name = "_arg0"_c;
    UInt16x3_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt16x3_operator_scale_Int32.name = "operator*"_c;
    UInt16x3_operator_scale_Int32.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_scale_Int32.parameters = UInt16x3_operator_scale_Int32_args;
    Symbol::Resolved(&UInt16x3_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x3_operator_scale_Int32)->returnTypeSymbol = &UInt16x3Type;

    /// operator* with Int16
    UInt16x3_operator_scale_Int16_arg0.name = "_arg0"_c;
    UInt16x3_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt16x3_operator_scale_Int16.name = "operator*"_c;
    UInt16x3_operator_scale_Int16.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_scale_Int16.parameters = UInt16x3_operator_scale_Int16_args;
    Symbol::Resolved(&UInt16x3_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x3_operator_scale_Int16)->returnTypeSymbol = &UInt16x3Type;

    /// operator| with UInt16x3
    UInt16x3_operator_or_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_or_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_or_UInt16x3.name = "operator|"_c;
    UInt16x3_operator_or_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_or_UInt16x3.parameters = UInt16x3_operator_or_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_or_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_or_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator& with UInt16x3
    UInt16x3_operator_and_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_and_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_and_UInt16x3.name = "operator&"_c;
    UInt16x3_operator_and_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_and_UInt16x3.parameters = UInt16x3_operator_and_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_and_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_and_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator^ with UInt16x3
    UInt16x3_operator_xor_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_xor_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_xor_UInt16x3.name = "operator^"_c;
    UInt16x3_operator_xor_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_xor_UInt16x3.parameters = UInt16x3_operator_xor_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_xor_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_xor_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator<< with UInt16x3
    UInt16x3_operator_lsh_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_lsh_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_lsh_UInt16x3.name = "operator<<"_c;
    UInt16x3_operator_lsh_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_lsh_UInt16x3.parameters = UInt16x3_operator_lsh_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_lsh_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_lsh_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator>> with UInt16x3
    UInt16x3_operator_rsh_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_rsh_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_rsh_UInt16x3.name = "operator>>"_c;
    UInt16x3_operator_rsh_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_rsh_UInt16x3.parameters = UInt16x3_operator_rsh_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_rsh_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_rsh_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator|= with UInt16x3
    UInt16x3_operator_orasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_orasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_orasg_UInt16x3.name = "operator|="_c;
    UInt16x3_operator_orasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_orasg_UInt16x3.parameters = UInt16x3_operator_orasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_orasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_orasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator&= with UInt16x3
    UInt16x3_operator_andasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_andasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_andasg_UInt16x3.name = "operator&="_c;
    UInt16x3_operator_andasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_andasg_UInt16x3.parameters = UInt16x3_operator_andasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_andasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_andasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator^= with UInt16x3
    UInt16x3_operator_xorasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_xorasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_xorasg_UInt16x3.name = "operator^="_c;
    UInt16x3_operator_xorasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_xorasg_UInt16x3.parameters = UInt16x3_operator_xorasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_xorasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_xorasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator<<= with UInt16x3
    UInt16x3_operator_lshasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_lshasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_lshasg_UInt16x3.name = "operator<<="_c;
    UInt16x3_operator_lshasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_lshasg_UInt16x3.parameters = UInt16x3_operator_lshasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_lshasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_lshasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator>>= with UInt16x3
    UInt16x3_operator_rhsasg_UInt16x3_arg0.name = "_arg0"_c;
    UInt16x3_operator_rhsasg_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_rhsasg_UInt16x3.name = "operator>>="_c;
    UInt16x3_operator_rhsasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_rhsasg_UInt16x3.parameters = UInt16x3_operator_rhsasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_rhsasg_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_rhsasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &UInt16x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &UInt16x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &UInt16x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &UInt16x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &UInt16x3_operator_add_UInt16x3 },
    std::pair{ "operator-"_c, &UInt16x3_operator_sub_UInt16x3 },
    std::pair{ "operator*"_c, &UInt16x3_operator_mul_UInt16x3 },
    std::pair{ "operator/"_c, &UInt16x3_operator_div_UInt16x3 },
    std::pair{ "operator%"_c, &UInt16x3_operator_mod_UInt16x3 },
    std::pair{ "operator+="_c, &UInt16x3_operator_addasg_UInt16x3 },
    std::pair{ "operator-="_c, &UInt16x3_operator_subasg_UInt16x3 },
    std::pair{ "operator*="_c, &UInt16x3_operator_mulasg_UInt16x3 },
    std::pair{ "operator/="_c, &UInt16x3_operator_divasg_UInt16x3 },
    std::pair{ "operator<"_c, &UInt16x3_operator_lt_UInt16x3 },
    std::pair{ "operator<="_c, &UInt16x3_operator_lte_UInt16x3 },
    std::pair{ "operator>"_c, &UInt16x3_operator_gt_UInt16x3 },
    std::pair{ "operator>="_c, &UInt16x3_operator_gte_UInt16x3 },
    std::pair{ "operator=="_c, &UInt16x3_operator_eq_UInt16x3 },
    std::pair{ "operator!="_c, &UInt16x3_operator_neq_UInt16x3 },
    std::pair{ "operator*"_c, &UInt16x3_operator_scale_Float32 },
    std::pair{ "operator*"_c, &UInt16x3_operator_scale_Float16 },
    std::pair{ "operator*"_c, &UInt16x3_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &UInt16x3_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &UInt16x3_operator_scale_Int32 },
    std::pair{ "operator*"_c, &UInt16x3_operator_scale_Int16 },
    std::pair{ "operator|"_c, &UInt16x3_operator_or_UInt16x3 },
    std::pair{ "operator&"_c, &UInt16x3_operator_and_UInt16x3 },
    std::pair{ "operator^"_c, &UInt16x3_operator_xor_UInt16x3 },
    std::pair{ "operator<<"_c, &UInt16x3_operator_lsh_UInt16x3 },
    std::pair{ "operator>>"_c, &UInt16x3_operator_rsh_UInt16x3 },
    std::pair{ "operator|="_c, &UInt16x3_operator_orasg_UInt16x3 },
    std::pair{ "operator&="_c, &UInt16x3_operator_andasg_UInt16x3 },
    std::pair{ "operator^="_c, &UInt16x3_operator_xorasg_UInt16x3 },
    std::pair{ "operator<<="_c, &UInt16x3_operator_lshasg_UInt16x3 },
    std::pair{ "operator>>="_c, &UInt16x3_operator_rhsasg_UInt16x3 }
    } };
}
UInt16x3 UInt16x3Type;

/// i16x3 with Float32x3
Variable Int16x3_convert_Float32x3_arg0;
Function Int16x3_convert_Float32x3;
inline constexpr std::array Int16x3_convert_Float32x3_args = { &Int16x3_convert_Float32x3_arg0 };

/// i16x3 with Float32
Variable Int16x3_splat_Float32_arg0;
Function Int16x3_splat_Float32;
inline constexpr std::array Int16x3_splat_Float32_args = { &Int16x3_splat_Float32_arg0 };

/// i16x3 with UInt32x3
Variable Int16x3_convert_UInt32x3_arg0;
Function Int16x3_convert_UInt32x3;
inline constexpr std::array Int16x3_convert_UInt32x3_args = { &Int16x3_convert_UInt32x3_arg0 };

/// i16x3 with UInt32
Variable Int16x3_splat_UInt32_arg0;
Function Int16x3_splat_UInt32;
inline constexpr std::array Int16x3_splat_UInt32_args = { &Int16x3_splat_UInt32_arg0 };

/// i16x3 with Int32x3
Variable Int16x3_convert_Int32x3_arg0;
Function Int16x3_convert_Int32x3;
inline constexpr std::array Int16x3_convert_Int32x3_args = { &Int16x3_convert_Int32x3_arg0 };

/// i16x3 with Int32
Variable Int16x3_splat_Int32_arg0;
Function Int16x3_splat_Int32;
inline constexpr std::array Int16x3_splat_Int32_args = { &Int16x3_splat_Int32_arg0 };

/// i16x3 with Float16x3
Variable Int16x3_convert_Float16x3_arg0;
Function Int16x3_convert_Float16x3;
inline constexpr std::array Int16x3_convert_Float16x3_args = { &Int16x3_convert_Float16x3_arg0 };

/// i16x3 with Float16
Variable Int16x3_splat_Float16_arg0;
Function Int16x3_splat_Float16;
inline constexpr std::array Int16x3_splat_Float16_args = { &Int16x3_splat_Float16_arg0 };

/// i16x3 with UInt16x3
Variable Int16x3_convert_UInt16x3_arg0;
Function Int16x3_convert_UInt16x3;
inline constexpr std::array Int16x3_convert_UInt16x3_args = { &Int16x3_convert_UInt16x3_arg0 };

/// i16x3 with UInt16
Variable Int16x3_splat_UInt16_arg0;
Function Int16x3_splat_UInt16;
inline constexpr std::array Int16x3_splat_UInt16_args = { &Int16x3_splat_UInt16_arg0 };

/// i16x3 with Int16x3
Variable Int16x3_convert_Int16x3_arg0;
Function Int16x3_convert_Int16x3;
inline constexpr std::array Int16x3_convert_Int16x3_args = { &Int16x3_convert_Int16x3_arg0 };

/// i16x3 with Int16
Variable Int16x3_splat_Int16_arg0;
Function Int16x3_splat_Int16;
inline constexpr std::array Int16x3_splat_Int16_args = { &Int16x3_splat_Int16_arg0 };

/// i16x3 with Int16, Int16, Int16
Variable Int16x3_ctor0_arg0_Int16;
Variable Int16x3_ctor0_arg1_Int16;
Variable Int16x3_ctor0_arg2_Int16;
Function Int16x3_ctor0;
inline constexpr std::array Int16x3_ctor0_args = { &Int16x3_ctor0_arg0_Int16, &Int16x3_ctor0_arg1_Int16, &Int16x3_ctor0_arg2_Int16 };

/// i16x3 with Int16x2, Int16
Variable Int16x3_ctor1_arg0_Int16x2;
Variable Int16x3_ctor1_arg1_Int16;
Function Int16x3_ctor1;
inline constexpr std::array Int16x3_ctor1_args = { &Int16x3_ctor1_arg0_Int16x2, &Int16x3_ctor1_arg1_Int16 };

/// i16x3 with Int16, Int16x2
Variable Int16x3_ctor2_arg0_Int16;
Variable Int16x3_ctor2_arg1_Int16x2;
Function Int16x3_ctor2;
inline constexpr std::array Int16x3_ctor2_args = { &Int16x3_ctor2_arg0_Int16, &Int16x3_ctor2_arg1_Int16x2 };

/// operator[] with Int32
Variable Int16x3_operator_index_Int32_arg0;
Function Int16x3_operator_index_Int32;
inline constexpr std::array Int16x3_operator_index_Int32_args = { &Int16x3_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Int16x3_operator_index_UInt32_arg0;
Function Int16x3_operator_index_UInt32;
inline constexpr std::array Int16x3_operator_index_UInt32_args = { &Int16x3_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Int16x3_operator_index_Int16_arg0;
Function Int16x3_operator_index_Int16;
inline constexpr std::array Int16x3_operator_index_Int16_args = { &Int16x3_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Int16x3_operator_index_UInt16_arg0;
Function Int16x3_operator_index_UInt16;
inline constexpr std::array Int16x3_operator_index_UInt16_args = { &Int16x3_operator_index_UInt16_arg0 };

/// operator+ with Int16x3
Variable Int16x3_operator_add_Int16x3_arg0;
Function Int16x3_operator_add_Int16x3;
inline constexpr std::array Int16x3_operator_add_Int16x3_args = { &Int16x3_operator_add_Int16x3_arg0 };

/// operator- with Int16x3
Variable Int16x3_operator_sub_Int16x3_arg0;
Function Int16x3_operator_sub_Int16x3;
inline constexpr std::array Int16x3_operator_sub_Int16x3_args = { &Int16x3_operator_sub_Int16x3_arg0 };

/// operator* with Int16x3
Variable Int16x3_operator_mul_Int16x3_arg0;
Function Int16x3_operator_mul_Int16x3;
inline constexpr std::array Int16x3_operator_mul_Int16x3_args = { &Int16x3_operator_mul_Int16x3_arg0 };

/// operator/ with Int16x3
Variable Int16x3_operator_div_Int16x3_arg0;
Function Int16x3_operator_div_Int16x3;
inline constexpr std::array Int16x3_operator_div_Int16x3_args = { &Int16x3_operator_div_Int16x3_arg0 };

/// operator% with Int16x3
Variable Int16x3_operator_mod_Int16x3_arg0;
Function Int16x3_operator_mod_Int16x3;
inline constexpr std::array Int16x3_operator_mod_Int16x3_args = { &Int16x3_operator_mod_Int16x3_arg0 };

/// operator+= with Int16x3
Variable Int16x3_operator_addasg_Int16x3_arg0;
Function Int16x3_operator_addasg_Int16x3;
inline constexpr std::array Int16x3_operator_addasg_Int16x3_args = { &Int16x3_operator_addasg_Int16x3_arg0 };

/// operator-= with Int16x3
Variable Int16x3_operator_subasg_Int16x3_arg0;
Function Int16x3_operator_subasg_Int16x3;
inline constexpr std::array Int16x3_operator_subasg_Int16x3_args = { &Int16x3_operator_subasg_Int16x3_arg0 };

/// operator*= with Int16x3
Variable Int16x3_operator_mulasg_Int16x3_arg0;
Function Int16x3_operator_mulasg_Int16x3;
inline constexpr std::array Int16x3_operator_mulasg_Int16x3_args = { &Int16x3_operator_mulasg_Int16x3_arg0 };

/// operator/= with Int16x3
Variable Int16x3_operator_divasg_Int16x3_arg0;
Function Int16x3_operator_divasg_Int16x3;
inline constexpr std::array Int16x3_operator_divasg_Int16x3_args = { &Int16x3_operator_divasg_Int16x3_arg0 };

/// operator< with Int16x3
Variable Int16x3_operator_lt_Int16x3_arg0;
Function Int16x3_operator_lt_Int16x3;
inline constexpr std::array Int16x3_operator_lt_Int16x3_args = { &Int16x3_operator_lt_Int16x3_arg0 };

/// operator<= with Int16x3
Variable Int16x3_operator_lte_Int16x3_arg0;
Function Int16x3_operator_lte_Int16x3;
inline constexpr std::array Int16x3_operator_lte_Int16x3_args = { &Int16x3_operator_lte_Int16x3_arg0 };

/// operator> with Int16x3
Variable Int16x3_operator_gt_Int16x3_arg0;
Function Int16x3_operator_gt_Int16x3;
inline constexpr std::array Int16x3_operator_gt_Int16x3_args = { &Int16x3_operator_gt_Int16x3_arg0 };

/// operator>= with Int16x3
Variable Int16x3_operator_gte_Int16x3_arg0;
Function Int16x3_operator_gte_Int16x3;
inline constexpr std::array Int16x3_operator_gte_Int16x3_args = { &Int16x3_operator_gte_Int16x3_arg0 };

/// operator== with Int16x3
Variable Int16x3_operator_eq_Int16x3_arg0;
Function Int16x3_operator_eq_Int16x3;
inline constexpr std::array Int16x3_operator_eq_Int16x3_args = { &Int16x3_operator_eq_Int16x3_arg0 };

/// operator!= with Int16x3
Variable Int16x3_operator_neq_Int16x3_arg0;
Function Int16x3_operator_neq_Int16x3;
inline constexpr std::array Int16x3_operator_neq_Int16x3_args = { &Int16x3_operator_neq_Int16x3_arg0 };

/// operator* with Float32
Variable Int16x3_operator_scale_Float32_arg0;
Function Int16x3_operator_scale_Float32;
inline constexpr std::array Int16x3_operator_scale_Float32_args = { &Int16x3_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable Int16x3_operator_scale_Float16_arg0;
Function Int16x3_operator_scale_Float16;
inline constexpr std::array Int16x3_operator_scale_Float16_args = { &Int16x3_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable Int16x3_operator_scale_UInt32_arg0;
Function Int16x3_operator_scale_UInt32;
inline constexpr std::array Int16x3_operator_scale_UInt32_args = { &Int16x3_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable Int16x3_operator_scale_UInt16_arg0;
Function Int16x3_operator_scale_UInt16;
inline constexpr std::array Int16x3_operator_scale_UInt16_args = { &Int16x3_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable Int16x3_operator_scale_Int32_arg0;
Function Int16x3_operator_scale_Int32;
inline constexpr std::array Int16x3_operator_scale_Int32_args = { &Int16x3_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable Int16x3_operator_scale_Int16_arg0;
Function Int16x3_operator_scale_Int16;
inline constexpr std::array Int16x3_operator_scale_Int16_args = { &Int16x3_operator_scale_Int16_arg0 };

/// operator| with Int16x3
Variable Int16x3_operator_or_Int16x3_arg0;
Function Int16x3_operator_or_Int16x3;
inline constexpr std::array Int16x3_operator_or_Int16x3_args = { &Int16x3_operator_or_Int16x3_arg0 };

/// operator& with Int16x3
Variable Int16x3_operator_and_Int16x3_arg0;
Function Int16x3_operator_and_Int16x3;
inline constexpr std::array Int16x3_operator_and_Int16x3_args = { &Int16x3_operator_and_Int16x3_arg0 };

/// operator^ with Int16x3
Variable Int16x3_operator_xor_Int16x3_arg0;
Function Int16x3_operator_xor_Int16x3;
inline constexpr std::array Int16x3_operator_xor_Int16x3_args = { &Int16x3_operator_xor_Int16x3_arg0 };

/// operator<< with Int16x3
Variable Int16x3_operator_lsh_Int16x3_arg0;
Function Int16x3_operator_lsh_Int16x3;
inline constexpr std::array Int16x3_operator_lsh_Int16x3_args = { &Int16x3_operator_lsh_Int16x3_arg0 };

/// operator>> with Int16x3
Variable Int16x3_operator_rsh_Int16x3_arg0;
Function Int16x3_operator_rsh_Int16x3;
inline constexpr std::array Int16x3_operator_rsh_Int16x3_args = { &Int16x3_operator_rsh_Int16x3_arg0 };

/// operator|= with Int16x3
Variable Int16x3_operator_orasg_Int16x3_arg0;
Function Int16x3_operator_orasg_Int16x3;
inline constexpr std::array Int16x3_operator_orasg_Int16x3_args = { &Int16x3_operator_orasg_Int16x3_arg0 };

/// operator&= with Int16x3
Variable Int16x3_operator_andasg_Int16x3_arg0;
Function Int16x3_operator_andasg_Int16x3;
inline constexpr std::array Int16x3_operator_andasg_Int16x3_args = { &Int16x3_operator_andasg_Int16x3_arg0 };

/// operator^= with Int16x3
Variable Int16x3_operator_xorasg_Int16x3_arg0;
Function Int16x3_operator_xorasg_Int16x3;
inline constexpr std::array Int16x3_operator_xorasg_Int16x3_args = { &Int16x3_operator_xorasg_Int16x3_arg0 };

/// operator<<= with Int16x3
Variable Int16x3_operator_lshasg_Int16x3_arg0;
Function Int16x3_operator_lshasg_Int16x3;
inline constexpr std::array Int16x3_operator_lshasg_Int16x3_args = { &Int16x3_operator_lshasg_Int16x3_arg0 };

/// operator>>= with Int16x3
Variable Int16x3_operator_rhsasg_Int16x3_arg0;
Function Int16x3_operator_rhsasg_Int16x3;
inline constexpr std::array Int16x3_operator_rhsasg_Int16x3_args = { &Int16x3_operator_rhsasg_Int16x3_arg0 };

Int16x3::Int16x3()
{
    this->name = "i16x3";
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 6;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    /// i16x3 with Float32x3
    Int16x3_convert_Float32x3_arg0.name = "val"_c;
    Int16x3_convert_Float32x3_arg0.type = Type::FullType{ Float32x3Type.name };
    Int16x3_convert_Float32x3.documentation = "Convert f32x3 to i16x3"_c;
    Int16x3_convert_Float32x3.name = "i16x3"_c;
    Int16x3_convert_Float32x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_convert_Float32x3.parameters = Int16x3_convert_Float32x3_args;
    Symbol::Resolved(&Int16x3_convert_Float32x3_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Int16x3_convert_Float32x3)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Float32
    Int16x3_splat_Float32_arg0.name = "val"_c;
    Int16x3_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Int16x3_splat_Float32.documentation = "Splat f32x3 to i16x3"_c;
    Int16x3_splat_Float32.name = "i16x3"_c;
    Int16x3_splat_Float32.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_splat_Float32.parameters = Int16x3_splat_Float32_args;
    Symbol::Resolved(&Int16x3_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int16x3_splat_Float32)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with UInt32x3
    Int16x3_convert_UInt32x3_arg0.name = "val"_c;
    Int16x3_convert_UInt32x3_arg0.type = Type::FullType{ UInt32x3Type.name };
    Int16x3_convert_UInt32x3.documentation = "Convert u32x3 to i16x3"_c;
    Int16x3_convert_UInt32x3.name = "i16x3"_c;
    Int16x3_convert_UInt32x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_convert_UInt32x3.parameters = Int16x3_convert_UInt32x3_args;
    Symbol::Resolved(&Int16x3_convert_UInt32x3_arg0)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&Int16x3_convert_UInt32x3)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with UInt32
    Int16x3_splat_UInt32_arg0.name = "val"_c;
    Int16x3_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int16x3_splat_UInt32.documentation = "Splat u32x3 to i16x3"_c;
    Int16x3_splat_UInt32.name = "i16x3"_c;
    Int16x3_splat_UInt32.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_splat_UInt32.parameters = Int16x3_splat_UInt32_args;
    Symbol::Resolved(&Int16x3_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x3_splat_UInt32)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Int32x3
    Int16x3_convert_Int32x3_arg0.name = "val"_c;
    Int16x3_convert_Int32x3_arg0.type = Type::FullType{ Int32x3Type.name };
    Int16x3_convert_Int32x3.documentation = "Convert i32x3 to i16x3"_c;
    Int16x3_convert_Int32x3.name = "i16x3"_c;
    Int16x3_convert_Int32x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_convert_Int32x3.parameters = Int16x3_convert_Int32x3_args;
    Symbol::Resolved(&Int16x3_convert_Int32x3_arg0)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int16x3_convert_Int32x3)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Int32
    Int16x3_splat_Int32_arg0.name = "val"_c;
    Int16x3_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int16x3_splat_Int32.documentation = "Splat i32x3 to i16x3"_c;
    Int16x3_splat_Int32.name = "i16x3"_c;
    Int16x3_splat_Int32.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_splat_Int32.parameters = Int16x3_splat_Int32_args;
    Symbol::Resolved(&Int16x3_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x3_splat_Int32)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Float16x3
    Int16x3_convert_Float16x3_arg0.name = "val"_c;
    Int16x3_convert_Float16x3_arg0.type = Type::FullType{ Float16x3Type.name };
    Int16x3_convert_Float16x3.documentation = "Convert f16x3 to i16x3"_c;
    Int16x3_convert_Float16x3.name = "i16x3"_c;
    Int16x3_convert_Float16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_convert_Float16x3.parameters = Int16x3_convert_Float16x3_args;
    Symbol::Resolved(&Int16x3_convert_Float16x3_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Int16x3_convert_Float16x3)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Float16
    Int16x3_splat_Float16_arg0.name = "val"_c;
    Int16x3_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Int16x3_splat_Float16.documentation = "Splat f16x3 to i16x3"_c;
    Int16x3_splat_Float16.name = "i16x3"_c;
    Int16x3_splat_Float16.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_splat_Float16.parameters = Int16x3_splat_Float16_args;
    Symbol::Resolved(&Int16x3_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x3_splat_Float16)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with UInt16x3
    Int16x3_convert_UInt16x3_arg0.name = "val"_c;
    Int16x3_convert_UInt16x3_arg0.type = Type::FullType{ UInt16x3Type.name };
    Int16x3_convert_UInt16x3.documentation = "Convert u16x3 to i16x3"_c;
    Int16x3_convert_UInt16x3.name = "i16x3"_c;
    Int16x3_convert_UInt16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_convert_UInt16x3.parameters = Int16x3_convert_UInt16x3_args;
    Symbol::Resolved(&Int16x3_convert_UInt16x3_arg0)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&Int16x3_convert_UInt16x3)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with UInt16
    Int16x3_splat_UInt16_arg0.name = "val"_c;
    Int16x3_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int16x3_splat_UInt16.documentation = "Splat u16x3 to i16x3"_c;
    Int16x3_splat_UInt16.name = "i16x3"_c;
    Int16x3_splat_UInt16.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_splat_UInt16.parameters = Int16x3_splat_UInt16_args;
    Symbol::Resolved(&Int16x3_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x3_splat_UInt16)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Int16x3
    Int16x3_convert_Int16x3_arg0.name = "val"_c;
    Int16x3_convert_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_convert_Int16x3.documentation = "Convert i16x3 to i16x3"_c;
    Int16x3_convert_Int16x3.name = "i16x3"_c;
    Int16x3_convert_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_convert_Int16x3.parameters = Int16x3_convert_Int16x3_args;
    Symbol::Resolved(&Int16x3_convert_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_convert_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Int16
    Int16x3_splat_Int16_arg0.name = "val"_c;
    Int16x3_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16x3_splat_Int16.documentation = "Splat i16x3 to i16x3"_c;
    Int16x3_splat_Int16.name = "i16x3"_c;
    Int16x3_splat_Int16.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_splat_Int16.parameters = Int16x3_splat_Int16_args;
    Symbol::Resolved(&Int16x3_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_splat_Int16)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Int16, Int16, Int16
    Int16x3_ctor0_arg0_Int16.name = "_arg0"_c;
    Int16x3_ctor0_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x3_ctor0_arg1_Int16.name = "_arg1"_c;
    Int16x3_ctor0_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x3_ctor0_arg2_Int16.name = "_arg2"_c;
    Int16x3_ctor0_arg2_Int16.type = Type::FullType{ Int16Type.name };
    Int16x3_ctor0.name = "i16x3"_c;
    Int16x3_ctor0.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_ctor0.parameters = Int16x3_ctor0_args;
    Symbol::Resolved(&Int16x3_ctor0_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_ctor0_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_ctor0_arg2_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_ctor0)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Int16x2, Int16
    Int16x3_ctor1_arg0_Int16x2.name = "_arg0"_c;
    Int16x3_ctor1_arg0_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x3_ctor1_arg1_Int16.name = "_arg1"_c;
    Int16x3_ctor1_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x3_ctor1.name = "i16x3"_c;
    Int16x3_ctor1.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_ctor1.parameters = Int16x3_ctor1_args;
    Symbol::Resolved(&Int16x3_ctor1_arg0_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x3_ctor1_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_ctor1)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Int16, Int16x2
    Int16x3_ctor2_arg0_Int16.name = "_arg0"_c;
    Int16x3_ctor2_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x3_ctor2_arg1_Int16x2.name = "_arg1"_c;
    Int16x3_ctor2_arg1_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x3_ctor2.name = "i16x3"_c;
    Int16x3_ctor2.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_ctor2.parameters = Int16x3_ctor2_args;
    Symbol::Resolved(&Int16x3_ctor2_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_ctor2_arg1_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x3_ctor2)->returnTypeSymbol = &Int16x3Type;

    /// operator[] with Int32
    Int16x3_operator_index_Int32_arg0.name = "_arg0"_c;
    Int16x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int16x3_operator_index_Int32.name = "operator[]"_c;
    Int16x3_operator_index_Int32.returnType = Type::FullType { Int16Type.name };
    Int16x3_operator_index_Int32.parameters = Int16x3_operator_index_Int32_args;
    Symbol::Resolved(&Int16x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x3_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt32
    Int16x3_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int16x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int16x3_operator_index_UInt32.name = "operator[]"_c;
    Int16x3_operator_index_UInt32.returnType = Type::FullType { Int16Type.name };
    Int16x3_operator_index_UInt32.parameters = Int16x3_operator_index_UInt32_args;
    Symbol::Resolved(&Int16x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x3_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    /// operator[] with Int16
    Int16x3_operator_index_Int16_arg0.name = "_arg0"_c;
    Int16x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16x3_operator_index_Int16.name = "operator[]"_c;
    Int16x3_operator_index_Int16.returnType = Type::FullType { Int16Type.name };
    Int16x3_operator_index_Int16.parameters = Int16x3_operator_index_Int16_args;
    Symbol::Resolved(&Int16x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt16
    Int16x3_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int16x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int16x3_operator_index_UInt16.name = "operator[]"_c;
    Int16x3_operator_index_UInt16.returnType = Type::FullType { Int16Type.name };
    Int16x3_operator_index_UInt16.parameters = Int16x3_operator_index_UInt16_args;
    Symbol::Resolved(&Int16x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x3_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    /// operator+ with Int16x3
    Int16x3_operator_add_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_add_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_add_Int16x3.name = "operator+"_c;
    Int16x3_operator_add_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_add_Int16x3.parameters = Int16x3_operator_add_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_add_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_add_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator- with Int16x3
    Int16x3_operator_sub_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_sub_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_sub_Int16x3.name = "operator-"_c;
    Int16x3_operator_sub_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_sub_Int16x3.parameters = Int16x3_operator_sub_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_sub_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_sub_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator* with Int16x3
    Int16x3_operator_mul_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_mul_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_mul_Int16x3.name = "operator*"_c;
    Int16x3_operator_mul_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_mul_Int16x3.parameters = Int16x3_operator_mul_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_mul_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_mul_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator/ with Int16x3
    Int16x3_operator_div_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_div_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_div_Int16x3.name = "operator/"_c;
    Int16x3_operator_div_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_div_Int16x3.parameters = Int16x3_operator_div_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_div_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_div_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator% with Int16x3
    Int16x3_operator_mod_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_mod_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_mod_Int16x3.name = "operator%"_c;
    Int16x3_operator_mod_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_mod_Int16x3.parameters = Int16x3_operator_mod_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_mod_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_mod_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator+= with Int16x3
    Int16x3_operator_addasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_addasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_addasg_Int16x3.name = "operator+="_c;
    Int16x3_operator_addasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_addasg_Int16x3.parameters = Int16x3_operator_addasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_addasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_addasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator-= with Int16x3
    Int16x3_operator_subasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_subasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_subasg_Int16x3.name = "operator-="_c;
    Int16x3_operator_subasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_subasg_Int16x3.parameters = Int16x3_operator_subasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_subasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_subasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator*= with Int16x3
    Int16x3_operator_mulasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_mulasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_mulasg_Int16x3.name = "operator*="_c;
    Int16x3_operator_mulasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_mulasg_Int16x3.parameters = Int16x3_operator_mulasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_mulasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_mulasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator/= with Int16x3
    Int16x3_operator_divasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_divasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_divasg_Int16x3.name = "operator/="_c;
    Int16x3_operator_divasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_divasg_Int16x3.parameters = Int16x3_operator_divasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_divasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_divasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator< with Int16x3
    Int16x3_operator_lt_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_lt_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_lt_Int16x3.name = "operator<"_c;
    Int16x3_operator_lt_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_lt_Int16x3.parameters = Int16x3_operator_lt_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_lt_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_lt_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator<= with Int16x3
    Int16x3_operator_lte_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_lte_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_lte_Int16x3.name = "operator<="_c;
    Int16x3_operator_lte_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_lte_Int16x3.parameters = Int16x3_operator_lte_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_lte_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_lte_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator> with Int16x3
    Int16x3_operator_gt_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_gt_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_gt_Int16x3.name = "operator>"_c;
    Int16x3_operator_gt_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_gt_Int16x3.parameters = Int16x3_operator_gt_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_gt_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_gt_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator>= with Int16x3
    Int16x3_operator_gte_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_gte_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_gte_Int16x3.name = "operator>="_c;
    Int16x3_operator_gte_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_gte_Int16x3.parameters = Int16x3_operator_gte_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_gte_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_gte_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator== with Int16x3
    Int16x3_operator_eq_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_eq_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_eq_Int16x3.name = "operator=="_c;
    Int16x3_operator_eq_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_eq_Int16x3.parameters = Int16x3_operator_eq_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_eq_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_eq_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator!= with Int16x3
    Int16x3_operator_neq_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_neq_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_neq_Int16x3.name = "operator!="_c;
    Int16x3_operator_neq_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_neq_Int16x3.parameters = Int16x3_operator_neq_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_neq_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_neq_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator* with Float32
    Int16x3_operator_scale_Float32_arg0.name = "_arg0"_c;
    Int16x3_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Int16x3_operator_scale_Float32.name = "operator*"_c;
    Int16x3_operator_scale_Float32.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_scale_Float32.parameters = Int16x3_operator_scale_Float32_args;
    Symbol::Resolved(&Int16x3_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int16x3_operator_scale_Float32)->returnTypeSymbol = &Int16x3Type;

    /// operator* with Float16
    Int16x3_operator_scale_Float16_arg0.name = "_arg0"_c;
    Int16x3_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Int16x3_operator_scale_Float16.name = "operator*"_c;
    Int16x3_operator_scale_Float16.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_scale_Float16.parameters = Int16x3_operator_scale_Float16_args;
    Symbol::Resolved(&Int16x3_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x3_operator_scale_Float16)->returnTypeSymbol = &Int16x3Type;

    /// operator* with UInt32
    Int16x3_operator_scale_UInt32_arg0.name = "_arg0"_c;
    Int16x3_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int16x3_operator_scale_UInt32.name = "operator*"_c;
    Int16x3_operator_scale_UInt32.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_scale_UInt32.parameters = Int16x3_operator_scale_UInt32_args;
    Symbol::Resolved(&Int16x3_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x3_operator_scale_UInt32)->returnTypeSymbol = &Int16x3Type;

    /// operator* with UInt16
    Int16x3_operator_scale_UInt16_arg0.name = "_arg0"_c;
    Int16x3_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int16x3_operator_scale_UInt16.name = "operator*"_c;
    Int16x3_operator_scale_UInt16.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_scale_UInt16.parameters = Int16x3_operator_scale_UInt16_args;
    Symbol::Resolved(&Int16x3_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x3_operator_scale_UInt16)->returnTypeSymbol = &Int16x3Type;

    /// operator* with Int32
    Int16x3_operator_scale_Int32_arg0.name = "_arg0"_c;
    Int16x3_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int16x3_operator_scale_Int32.name = "operator*"_c;
    Int16x3_operator_scale_Int32.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_scale_Int32.parameters = Int16x3_operator_scale_Int32_args;
    Symbol::Resolved(&Int16x3_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x3_operator_scale_Int32)->returnTypeSymbol = &Int16x3Type;

    /// operator* with Int16
    Int16x3_operator_scale_Int16_arg0.name = "_arg0"_c;
    Int16x3_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16x3_operator_scale_Int16.name = "operator*"_c;
    Int16x3_operator_scale_Int16.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_scale_Int16.parameters = Int16x3_operator_scale_Int16_args;
    Symbol::Resolved(&Int16x3_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_operator_scale_Int16)->returnTypeSymbol = &Int16x3Type;

    /// operator| with Int16x3
    Int16x3_operator_or_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_or_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_or_Int16x3.name = "operator|"_c;
    Int16x3_operator_or_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_or_Int16x3.parameters = Int16x3_operator_or_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_or_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_or_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator& with Int16x3
    Int16x3_operator_and_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_and_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_and_Int16x3.name = "operator&"_c;
    Int16x3_operator_and_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_and_Int16x3.parameters = Int16x3_operator_and_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_and_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_and_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator^ with Int16x3
    Int16x3_operator_xor_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_xor_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_xor_Int16x3.name = "operator^"_c;
    Int16x3_operator_xor_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_xor_Int16x3.parameters = Int16x3_operator_xor_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_xor_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_xor_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator<< with Int16x3
    Int16x3_operator_lsh_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_lsh_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_lsh_Int16x3.name = "operator<<"_c;
    Int16x3_operator_lsh_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_lsh_Int16x3.parameters = Int16x3_operator_lsh_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_lsh_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_lsh_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator>> with Int16x3
    Int16x3_operator_rsh_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_rsh_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_rsh_Int16x3.name = "operator>>"_c;
    Int16x3_operator_rsh_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_rsh_Int16x3.parameters = Int16x3_operator_rsh_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_rsh_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_rsh_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator|= with Int16x3
    Int16x3_operator_orasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_orasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_orasg_Int16x3.name = "operator|="_c;
    Int16x3_operator_orasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_orasg_Int16x3.parameters = Int16x3_operator_orasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_orasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_orasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator&= with Int16x3
    Int16x3_operator_andasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_andasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_andasg_Int16x3.name = "operator&="_c;
    Int16x3_operator_andasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_andasg_Int16x3.parameters = Int16x3_operator_andasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_andasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_andasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator^= with Int16x3
    Int16x3_operator_xorasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_xorasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_xorasg_Int16x3.name = "operator^="_c;
    Int16x3_operator_xorasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_xorasg_Int16x3.parameters = Int16x3_operator_xorasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_xorasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_xorasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator<<= with Int16x3
    Int16x3_operator_lshasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_lshasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_lshasg_Int16x3.name = "operator<<="_c;
    Int16x3_operator_lshasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_lshasg_Int16x3.parameters = Int16x3_operator_lshasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_lshasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_lshasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator>>= with Int16x3
    Int16x3_operator_rhsasg_Int16x3_arg0.name = "_arg0"_c;
    Int16x3_operator_rhsasg_Int16x3_arg0.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_rhsasg_Int16x3.name = "operator>>="_c;
    Int16x3_operator_rhsasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_rhsasg_Int16x3.parameters = Int16x3_operator_rhsasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_rhsasg_Int16x3_arg0)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_rhsasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Int16x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x3_operator_add_Int16x3 },
    std::pair{ "operator-"_c, &Int16x3_operator_sub_Int16x3 },
    std::pair{ "operator*"_c, &Int16x3_operator_mul_Int16x3 },
    std::pair{ "operator/"_c, &Int16x3_operator_div_Int16x3 },
    std::pair{ "operator%"_c, &Int16x3_operator_mod_Int16x3 },
    std::pair{ "operator+="_c, &Int16x3_operator_addasg_Int16x3 },
    std::pair{ "operator-="_c, &Int16x3_operator_subasg_Int16x3 },
    std::pair{ "operator*="_c, &Int16x3_operator_mulasg_Int16x3 },
    std::pair{ "operator/="_c, &Int16x3_operator_divasg_Int16x3 },
    std::pair{ "operator<"_c, &Int16x3_operator_lt_Int16x3 },
    std::pair{ "operator<="_c, &Int16x3_operator_lte_Int16x3 },
    std::pair{ "operator>"_c, &Int16x3_operator_gt_Int16x3 },
    std::pair{ "operator>="_c, &Int16x3_operator_gte_Int16x3 },
    std::pair{ "operator=="_c, &Int16x3_operator_eq_Int16x3 },
    std::pair{ "operator!="_c, &Int16x3_operator_neq_Int16x3 },
    std::pair{ "operator*"_c, &Int16x3_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x3_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x3_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x3_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x3_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x3_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x3_operator_or_Int16x3 },
    std::pair{ "operator&"_c, &Int16x3_operator_and_Int16x3 },
    std::pair{ "operator^"_c, &Int16x3_operator_xor_Int16x3 },
    std::pair{ "operator<<"_c, &Int16x3_operator_lsh_Int16x3 },
    std::pair{ "operator>>"_c, &Int16x3_operator_rsh_Int16x3 },
    std::pair{ "operator|="_c, &Int16x3_operator_orasg_Int16x3 },
    std::pair{ "operator&="_c, &Int16x3_operator_andasg_Int16x3 },
    std::pair{ "operator^="_c, &Int16x3_operator_xorasg_Int16x3 },
    std::pair{ "operator<<="_c, &Int16x3_operator_lshasg_Int16x3 },
    std::pair{ "operator>>="_c, &Int16x3_operator_rhsasg_Int16x3 }
    } };
}
Int16x3 Int16x3Type;

/// f32x4 with Float32x4
Variable Float32x4_convert_Float32x4_arg0;
Function Float32x4_convert_Float32x4;
inline constexpr std::array Float32x4_convert_Float32x4_args = { &Float32x4_convert_Float32x4_arg0 };

/// f32x4 with Float32
Variable Float32x4_splat_Float32_arg0;
Function Float32x4_splat_Float32;
inline constexpr std::array Float32x4_splat_Float32_args = { &Float32x4_splat_Float32_arg0 };

/// f32x4 with UInt32x4
Variable Float32x4_convert_UInt32x4_arg0;
Function Float32x4_convert_UInt32x4;
inline constexpr std::array Float32x4_convert_UInt32x4_args = { &Float32x4_convert_UInt32x4_arg0 };

/// f32x4 with UInt32
Variable Float32x4_splat_UInt32_arg0;
Function Float32x4_splat_UInt32;
inline constexpr std::array Float32x4_splat_UInt32_args = { &Float32x4_splat_UInt32_arg0 };

/// f32x4 with Int32x4
Variable Float32x4_convert_Int32x4_arg0;
Function Float32x4_convert_Int32x4;
inline constexpr std::array Float32x4_convert_Int32x4_args = { &Float32x4_convert_Int32x4_arg0 };

/// f32x4 with Int32
Variable Float32x4_splat_Int32_arg0;
Function Float32x4_splat_Int32;
inline constexpr std::array Float32x4_splat_Int32_args = { &Float32x4_splat_Int32_arg0 };

/// f32x4 with Float16x4
Variable Float32x4_convert_Float16x4_arg0;
Function Float32x4_convert_Float16x4;
inline constexpr std::array Float32x4_convert_Float16x4_args = { &Float32x4_convert_Float16x4_arg0 };

/// f32x4 with Float16
Variable Float32x4_splat_Float16_arg0;
Function Float32x4_splat_Float16;
inline constexpr std::array Float32x4_splat_Float16_args = { &Float32x4_splat_Float16_arg0 };

/// f32x4 with UInt16x4
Variable Float32x4_convert_UInt16x4_arg0;
Function Float32x4_convert_UInt16x4;
inline constexpr std::array Float32x4_convert_UInt16x4_args = { &Float32x4_convert_UInt16x4_arg0 };

/// f32x4 with UInt16
Variable Float32x4_splat_UInt16_arg0;
Function Float32x4_splat_UInt16;
inline constexpr std::array Float32x4_splat_UInt16_args = { &Float32x4_splat_UInt16_arg0 };

/// f32x4 with Int16x4
Variable Float32x4_convert_Int16x4_arg0;
Function Float32x4_convert_Int16x4;
inline constexpr std::array Float32x4_convert_Int16x4_args = { &Float32x4_convert_Int16x4_arg0 };

/// f32x4 with Int16
Variable Float32x4_splat_Int16_arg0;
Function Float32x4_splat_Int16;
inline constexpr std::array Float32x4_splat_Int16_args = { &Float32x4_splat_Int16_arg0 };

/// f32x4 with Float32, Float32, Float32, Float32
Variable Float32x4_ctor0_arg0_Float32;
Variable Float32x4_ctor0_arg1_Float32;
Variable Float32x4_ctor0_arg2_Float32;
Variable Float32x4_ctor0_arg3_Float32;
Function Float32x4_ctor0;
inline constexpr std::array Float32x4_ctor0_args = { &Float32x4_ctor0_arg0_Float32, &Float32x4_ctor0_arg1_Float32, &Float32x4_ctor0_arg2_Float32, &Float32x4_ctor0_arg3_Float32 };

/// f32x4 with Float32x2, Float32, Float32
Variable Float32x4_ctor1_arg0_Float32x2;
Variable Float32x4_ctor1_arg1_Float32;
Variable Float32x4_ctor1_arg2_Float32;
Function Float32x4_ctor1;
inline constexpr std::array Float32x4_ctor1_args = { &Float32x4_ctor1_arg0_Float32x2, &Float32x4_ctor1_arg1_Float32, &Float32x4_ctor1_arg2_Float32 };

/// f32x4 with Float32, Float32x2, Float32
Variable Float32x4_ctor2_arg0_Float32;
Variable Float32x4_ctor2_arg1_Float32x2;
Variable Float32x4_ctor2_arg2_Float32;
Function Float32x4_ctor2;
inline constexpr std::array Float32x4_ctor2_args = { &Float32x4_ctor2_arg0_Float32, &Float32x4_ctor2_arg1_Float32x2, &Float32x4_ctor2_arg2_Float32 };

/// f32x4 with Float32, Float32, Float32x2
Variable Float32x4_ctor3_arg0_Float32;
Variable Float32x4_ctor3_arg1_Float32;
Variable Float32x4_ctor3_arg2_Float32x2;
Function Float32x4_ctor3;
inline constexpr std::array Float32x4_ctor3_args = { &Float32x4_ctor3_arg0_Float32, &Float32x4_ctor3_arg1_Float32, &Float32x4_ctor3_arg2_Float32x2 };

/// f32x4 with Float32x3, Float32
Variable Float32x4_ctor4_arg0_Float32x3;
Variable Float32x4_ctor4_arg1_Float32;
Function Float32x4_ctor4;
inline constexpr std::array Float32x4_ctor4_args = { &Float32x4_ctor4_arg0_Float32x3, &Float32x4_ctor4_arg1_Float32 };

/// f32x4 with Float32, Float32x3
Variable Float32x4_ctor5_arg0_Float32;
Variable Float32x4_ctor5_arg1_Float32x3;
Function Float32x4_ctor5;
inline constexpr std::array Float32x4_ctor5_args = { &Float32x4_ctor5_arg0_Float32, &Float32x4_ctor5_arg1_Float32x3 };

/// operator[] with Int32
Variable Float32x4_operator_index_Int32_arg0;
Function Float32x4_operator_index_Int32;
inline constexpr std::array Float32x4_operator_index_Int32_args = { &Float32x4_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float32x4_operator_index_UInt32_arg0;
Function Float32x4_operator_index_UInt32;
inline constexpr std::array Float32x4_operator_index_UInt32_args = { &Float32x4_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float32x4_operator_index_Int16_arg0;
Function Float32x4_operator_index_Int16;
inline constexpr std::array Float32x4_operator_index_Int16_args = { &Float32x4_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float32x4_operator_index_UInt16_arg0;
Function Float32x4_operator_index_UInt16;
inline constexpr std::array Float32x4_operator_index_UInt16_args = { &Float32x4_operator_index_UInt16_arg0 };

/// operator+ with Float32x4
Variable Float32x4_operator_add_Float32x4_arg0;
Function Float32x4_operator_add_Float32x4;
inline constexpr std::array Float32x4_operator_add_Float32x4_args = { &Float32x4_operator_add_Float32x4_arg0 };

/// operator- with Float32x4
Variable Float32x4_operator_sub_Float32x4_arg0;
Function Float32x4_operator_sub_Float32x4;
inline constexpr std::array Float32x4_operator_sub_Float32x4_args = { &Float32x4_operator_sub_Float32x4_arg0 };

/// operator* with Float32x4
Variable Float32x4_operator_mul_Float32x4_arg0;
Function Float32x4_operator_mul_Float32x4;
inline constexpr std::array Float32x4_operator_mul_Float32x4_args = { &Float32x4_operator_mul_Float32x4_arg0 };

/// operator/ with Float32x4
Variable Float32x4_operator_div_Float32x4_arg0;
Function Float32x4_operator_div_Float32x4;
inline constexpr std::array Float32x4_operator_div_Float32x4_args = { &Float32x4_operator_div_Float32x4_arg0 };

/// operator% with Float32x4
Variable Float32x4_operator_mod_Float32x4_arg0;
Function Float32x4_operator_mod_Float32x4;
inline constexpr std::array Float32x4_operator_mod_Float32x4_args = { &Float32x4_operator_mod_Float32x4_arg0 };

/// operator+= with Float32x4
Variable Float32x4_operator_addasg_Float32x4_arg0;
Function Float32x4_operator_addasg_Float32x4;
inline constexpr std::array Float32x4_operator_addasg_Float32x4_args = { &Float32x4_operator_addasg_Float32x4_arg0 };

/// operator-= with Float32x4
Variable Float32x4_operator_subasg_Float32x4_arg0;
Function Float32x4_operator_subasg_Float32x4;
inline constexpr std::array Float32x4_operator_subasg_Float32x4_args = { &Float32x4_operator_subasg_Float32x4_arg0 };

/// operator*= with Float32x4
Variable Float32x4_operator_mulasg_Float32x4_arg0;
Function Float32x4_operator_mulasg_Float32x4;
inline constexpr std::array Float32x4_operator_mulasg_Float32x4_args = { &Float32x4_operator_mulasg_Float32x4_arg0 };

/// operator/= with Float32x4
Variable Float32x4_operator_divasg_Float32x4_arg0;
Function Float32x4_operator_divasg_Float32x4;
inline constexpr std::array Float32x4_operator_divasg_Float32x4_args = { &Float32x4_operator_divasg_Float32x4_arg0 };

/// operator< with Float32x4
Variable Float32x4_operator_lt_Float32x4_arg0;
Function Float32x4_operator_lt_Float32x4;
inline constexpr std::array Float32x4_operator_lt_Float32x4_args = { &Float32x4_operator_lt_Float32x4_arg0 };

/// operator<= with Float32x4
Variable Float32x4_operator_lte_Float32x4_arg0;
Function Float32x4_operator_lte_Float32x4;
inline constexpr std::array Float32x4_operator_lte_Float32x4_args = { &Float32x4_operator_lte_Float32x4_arg0 };

/// operator> with Float32x4
Variable Float32x4_operator_gt_Float32x4_arg0;
Function Float32x4_operator_gt_Float32x4;
inline constexpr std::array Float32x4_operator_gt_Float32x4_args = { &Float32x4_operator_gt_Float32x4_arg0 };

/// operator>= with Float32x4
Variable Float32x4_operator_gte_Float32x4_arg0;
Function Float32x4_operator_gte_Float32x4;
inline constexpr std::array Float32x4_operator_gte_Float32x4_args = { &Float32x4_operator_gte_Float32x4_arg0 };

/// operator== with Float32x4
Variable Float32x4_operator_eq_Float32x4_arg0;
Function Float32x4_operator_eq_Float32x4;
inline constexpr std::array Float32x4_operator_eq_Float32x4_args = { &Float32x4_operator_eq_Float32x4_arg0 };

/// operator!= with Float32x4
Variable Float32x4_operator_neq_Float32x4_arg0;
Function Float32x4_operator_neq_Float32x4;
inline constexpr std::array Float32x4_operator_neq_Float32x4_args = { &Float32x4_operator_neq_Float32x4_arg0 };

/// operator* with Float32
Variable Float32x4_operator_scale_Float32_arg0;
Function Float32x4_operator_scale_Float32;
inline constexpr std::array Float32x4_operator_scale_Float32_args = { &Float32x4_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable Float32x4_operator_scale_Float16_arg0;
Function Float32x4_operator_scale_Float16;
inline constexpr std::array Float32x4_operator_scale_Float16_args = { &Float32x4_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable Float32x4_operator_scale_UInt32_arg0;
Function Float32x4_operator_scale_UInt32;
inline constexpr std::array Float32x4_operator_scale_UInt32_args = { &Float32x4_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable Float32x4_operator_scale_UInt16_arg0;
Function Float32x4_operator_scale_UInt16;
inline constexpr std::array Float32x4_operator_scale_UInt16_args = { &Float32x4_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable Float32x4_operator_scale_Int32_arg0;
Function Float32x4_operator_scale_Int32;
inline constexpr std::array Float32x4_operator_scale_Int32_args = { &Float32x4_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable Float32x4_operator_scale_Int16_arg0;
Function Float32x4_operator_scale_Int16;
inline constexpr std::array Float32x4_operator_scale_Int16_args = { &Float32x4_operator_scale_Int16_arg0 };

/// operator* with Float32x4x2
Variable Float32x4_operator_mul_Float32x4x2_arg0;
Function Float32x4_operator_mul_Float32x4x2;
inline constexpr std::array Float32x4_operator_mul_Float32x4x2_args = { &Float32x4_operator_mul_Float32x4x2_arg0 };

/// operator* with Float32x4x3
Variable Float32x4_operator_mul_Float32x4x3_arg0;
Function Float32x4_operator_mul_Float32x4x3;
inline constexpr std::array Float32x4_operator_mul_Float32x4x3_args = { &Float32x4_operator_mul_Float32x4x3_arg0 };

/// operator* with Float32x4x4
Variable Float32x4_operator_mul_Float32x4x4_arg0;
Function Float32x4_operator_mul_Float32x4x4;
inline constexpr std::array Float32x4_operator_mul_Float32x4x4_args = { &Float32x4_operator_mul_Float32x4x4_arg0 };

Float32x4::Float32x4()
{
    this->name = "f32x4";
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// f32x4 with Float32x4
    Float32x4_convert_Float32x4_arg0.name = "val"_c;
    Float32x4_convert_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_convert_Float32x4.documentation = "Convert f32x4 to f32x4"_c;
    Float32x4_convert_Float32x4.name = "f32x4"_c;
    Float32x4_convert_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_convert_Float32x4.parameters = Float32x4_convert_Float32x4_args;
    Symbol::Resolved(&Float32x4_convert_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_convert_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float32
    Float32x4_splat_Float32_arg0.name = "val"_c;
    Float32x4_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32x4_splat_Float32.documentation = "Splat f32x4 to f32x4"_c;
    Float32x4_splat_Float32.name = "f32x4"_c;
    Float32x4_splat_Float32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_splat_Float32.parameters = Float32x4_splat_Float32_args;
    Symbol::Resolved(&Float32x4_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_splat_Float32)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with UInt32x4
    Float32x4_convert_UInt32x4_arg0.name = "val"_c;
    Float32x4_convert_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Float32x4_convert_UInt32x4.documentation = "Convert u32x4 to f32x4"_c;
    Float32x4_convert_UInt32x4.name = "f32x4"_c;
    Float32x4_convert_UInt32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_convert_UInt32x4.parameters = Float32x4_convert_UInt32x4_args;
    Symbol::Resolved(&Float32x4_convert_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&Float32x4_convert_UInt32x4)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with UInt32
    Float32x4_splat_UInt32_arg0.name = "val"_c;
    Float32x4_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x4_splat_UInt32.documentation = "Splat u32x4 to f32x4"_c;
    Float32x4_splat_UInt32.name = "f32x4"_c;
    Float32x4_splat_UInt32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_splat_UInt32.parameters = Float32x4_splat_UInt32_args;
    Symbol::Resolved(&Float32x4_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4_splat_UInt32)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Int32x4
    Float32x4_convert_Int32x4_arg0.name = "val"_c;
    Float32x4_convert_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Float32x4_convert_Int32x4.documentation = "Convert i32x4 to f32x4"_c;
    Float32x4_convert_Int32x4.name = "f32x4"_c;
    Float32x4_convert_Int32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_convert_Int32x4.parameters = Float32x4_convert_Int32x4_args;
    Symbol::Resolved(&Float32x4_convert_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Float32x4_convert_Int32x4)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Int32
    Float32x4_splat_Int32_arg0.name = "val"_c;
    Float32x4_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x4_splat_Int32.documentation = "Splat i32x4 to f32x4"_c;
    Float32x4_splat_Int32.name = "f32x4"_c;
    Float32x4_splat_Int32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_splat_Int32.parameters = Float32x4_splat_Int32_args;
    Symbol::Resolved(&Float32x4_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4_splat_Int32)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float16x4
    Float32x4_convert_Float16x4_arg0.name = "val"_c;
    Float32x4_convert_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float32x4_convert_Float16x4.documentation = "Convert f16x4 to f32x4"_c;
    Float32x4_convert_Float16x4.name = "f32x4"_c;
    Float32x4_convert_Float16x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_convert_Float16x4.parameters = Float32x4_convert_Float16x4_args;
    Symbol::Resolved(&Float32x4_convert_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float32x4_convert_Float16x4)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float16
    Float32x4_splat_Float16_arg0.name = "val"_c;
    Float32x4_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float32x4_splat_Float16.documentation = "Splat f16x4 to f32x4"_c;
    Float32x4_splat_Float16.name = "f32x4"_c;
    Float32x4_splat_Float16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_splat_Float16.parameters = Float32x4_splat_Float16_args;
    Symbol::Resolved(&Float32x4_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float32x4_splat_Float16)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with UInt16x4
    Float32x4_convert_UInt16x4_arg0.name = "val"_c;
    Float32x4_convert_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Float32x4_convert_UInt16x4.documentation = "Convert u16x4 to f32x4"_c;
    Float32x4_convert_UInt16x4.name = "f32x4"_c;
    Float32x4_convert_UInt16x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_convert_UInt16x4.parameters = Float32x4_convert_UInt16x4_args;
    Symbol::Resolved(&Float32x4_convert_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&Float32x4_convert_UInt16x4)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with UInt16
    Float32x4_splat_UInt16_arg0.name = "val"_c;
    Float32x4_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x4_splat_UInt16.documentation = "Splat u16x4 to f32x4"_c;
    Float32x4_splat_UInt16.name = "f32x4"_c;
    Float32x4_splat_UInt16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_splat_UInt16.parameters = Float32x4_splat_UInt16_args;
    Symbol::Resolved(&Float32x4_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x4_splat_UInt16)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Int16x4
    Float32x4_convert_Int16x4_arg0.name = "val"_c;
    Float32x4_convert_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Float32x4_convert_Int16x4.documentation = "Convert i16x4 to f32x4"_c;
    Float32x4_convert_Int16x4.name = "f32x4"_c;
    Float32x4_convert_Int16x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_convert_Int16x4.parameters = Float32x4_convert_Int16x4_args;
    Symbol::Resolved(&Float32x4_convert_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Float32x4_convert_Int16x4)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Int16
    Float32x4_splat_Int16_arg0.name = "val"_c;
    Float32x4_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x4_splat_Int16.documentation = "Splat i16x4 to f32x4"_c;
    Float32x4_splat_Int16.name = "f32x4"_c;
    Float32x4_splat_Int16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_splat_Int16.parameters = Float32x4_splat_Int16_args;
    Symbol::Resolved(&Float32x4_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x4_splat_Int16)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float32, Float32, Float32, Float32
    Float32x4_ctor0_arg0_Float32.name = "_arg0"_c;
    Float32x4_ctor0_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor0_arg1_Float32.name = "_arg1"_c;
    Float32x4_ctor0_arg1_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor0_arg2_Float32.name = "_arg2"_c;
    Float32x4_ctor0_arg2_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor0_arg3_Float32.name = "_arg3"_c;
    Float32x4_ctor0_arg3_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor0.name = "f32x4"_c;
    Float32x4_ctor0.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_ctor0.parameters = Float32x4_ctor0_args;
    Symbol::Resolved(&Float32x4_ctor0_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor0_arg1_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor0_arg2_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor0_arg3_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor0)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float32x2, Float32, Float32
    Float32x4_ctor1_arg0_Float32x2.name = "_arg0"_c;
    Float32x4_ctor1_arg0_Float32x2.type = Type::FullType{ Float32x2Type.name };
    Float32x4_ctor1_arg1_Float32.name = "_arg1"_c;
    Float32x4_ctor1_arg1_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor1_arg2_Float32.name = "_arg2"_c;
    Float32x4_ctor1_arg2_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor1.name = "f32x4"_c;
    Float32x4_ctor1.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_ctor1.parameters = Float32x4_ctor1_args;
    Symbol::Resolved(&Float32x4_ctor1_arg0_Float32x2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4_ctor1_arg1_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor1_arg2_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor1)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float32, Float32x2, Float32
    Float32x4_ctor2_arg0_Float32.name = "_arg0"_c;
    Float32x4_ctor2_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor2_arg1_Float32x2.name = "_arg1"_c;
    Float32x4_ctor2_arg1_Float32x2.type = Type::FullType{ Float32x2Type.name };
    Float32x4_ctor2_arg2_Float32.name = "_arg2"_c;
    Float32x4_ctor2_arg2_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor2.name = "f32x4"_c;
    Float32x4_ctor2.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_ctor2.parameters = Float32x4_ctor2_args;
    Symbol::Resolved(&Float32x4_ctor2_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor2_arg1_Float32x2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4_ctor2_arg2_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor2)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float32, Float32, Float32x2
    Float32x4_ctor3_arg0_Float32.name = "_arg0"_c;
    Float32x4_ctor3_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor3_arg1_Float32.name = "_arg1"_c;
    Float32x4_ctor3_arg1_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor3_arg2_Float32x2.name = "_arg2"_c;
    Float32x4_ctor3_arg2_Float32x2.type = Type::FullType{ Float32x2Type.name };
    Float32x4_ctor3.name = "f32x4"_c;
    Float32x4_ctor3.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_ctor3.parameters = Float32x4_ctor3_args;
    Symbol::Resolved(&Float32x4_ctor3_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor3_arg1_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor3_arg2_Float32x2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4_ctor3)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float32x3, Float32
    Float32x4_ctor4_arg0_Float32x3.name = "_arg0"_c;
    Float32x4_ctor4_arg0_Float32x3.type = Type::FullType{ Float32x3Type.name };
    Float32x4_ctor4_arg1_Float32.name = "_arg1"_c;
    Float32x4_ctor4_arg1_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor4.name = "f32x4"_c;
    Float32x4_ctor4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_ctor4.parameters = Float32x4_ctor4_args;
    Symbol::Resolved(&Float32x4_ctor4_arg0_Float32x3)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4_ctor4_arg1_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor4)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float32, Float32x3
    Float32x4_ctor5_arg0_Float32.name = "_arg0"_c;
    Float32x4_ctor5_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor5_arg1_Float32x3.name = "_arg1"_c;
    Float32x4_ctor5_arg1_Float32x3.type = Type::FullType{ Float32x3Type.name };
    Float32x4_ctor5.name = "f32x4"_c;
    Float32x4_ctor5.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_ctor5.parameters = Float32x4_ctor5_args;
    Symbol::Resolved(&Float32x4_ctor5_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor5_arg1_Float32x3)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4_ctor5)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with Int32
    Float32x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Float32x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x4_operator_index_Int32.name = "operator[]"_c;
    Float32x4_operator_index_Int32.returnType = Type::FullType { Float32Type.name };
    Float32x4_operator_index_Int32.parameters = Float32x4_operator_index_Int32_args;
    Symbol::Resolved(&Float32x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt32
    Float32x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float32x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x4_operator_index_UInt32.name = "operator[]"_c;
    Float32x4_operator_index_UInt32.returnType = Type::FullType { Float32Type.name };
    Float32x4_operator_index_UInt32.parameters = Float32x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    /// operator[] with Int16
    Float32x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Float32x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x4_operator_index_Int16.name = "operator[]"_c;
    Float32x4_operator_index_Int16.returnType = Type::FullType { Float32Type.name };
    Float32x4_operator_index_Int16.parameters = Float32x4_operator_index_Int16_args;
    Symbol::Resolved(&Float32x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x4_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt16
    Float32x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float32x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x4_operator_index_UInt16.name = "operator[]"_c;
    Float32x4_operator_index_UInt16.returnType = Type::FullType { Float32Type.name };
    Float32x4_operator_index_UInt16.parameters = Float32x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x4_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    /// operator+ with Float32x4
    Float32x4_operator_add_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_add_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_add_Float32x4.name = "operator+"_c;
    Float32x4_operator_add_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_add_Float32x4.parameters = Float32x4_operator_add_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_add_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_add_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator- with Float32x4
    Float32x4_operator_sub_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_sub_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_sub_Float32x4.name = "operator-"_c;
    Float32x4_operator_sub_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_sub_Float32x4.parameters = Float32x4_operator_sub_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_sub_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_sub_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Float32x4
    Float32x4_operator_mul_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_mul_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_mul_Float32x4.name = "operator*"_c;
    Float32x4_operator_mul_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_mul_Float32x4.parameters = Float32x4_operator_mul_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator/ with Float32x4
    Float32x4_operator_div_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_div_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_div_Float32x4.name = "operator/"_c;
    Float32x4_operator_div_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_div_Float32x4.parameters = Float32x4_operator_div_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_div_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_div_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator% with Float32x4
    Float32x4_operator_mod_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_mod_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_mod_Float32x4.name = "operator%"_c;
    Float32x4_operator_mod_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_mod_Float32x4.parameters = Float32x4_operator_mod_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_mod_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_mod_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator+= with Float32x4
    Float32x4_operator_addasg_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_addasg_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_addasg_Float32x4.name = "operator+="_c;
    Float32x4_operator_addasg_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_addasg_Float32x4.parameters = Float32x4_operator_addasg_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_addasg_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_addasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator-= with Float32x4
    Float32x4_operator_subasg_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_subasg_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_subasg_Float32x4.name = "operator-="_c;
    Float32x4_operator_subasg_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_subasg_Float32x4.parameters = Float32x4_operator_subasg_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_subasg_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_subasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator*= with Float32x4
    Float32x4_operator_mulasg_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_mulasg_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_mulasg_Float32x4.name = "operator*="_c;
    Float32x4_operator_mulasg_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_mulasg_Float32x4.parameters = Float32x4_operator_mulasg_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_mulasg_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_mulasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator/= with Float32x4
    Float32x4_operator_divasg_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_divasg_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_divasg_Float32x4.name = "operator/="_c;
    Float32x4_operator_divasg_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_divasg_Float32x4.parameters = Float32x4_operator_divasg_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_divasg_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_divasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator< with Float32x4
    Float32x4_operator_lt_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_lt_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_lt_Float32x4.name = "operator<"_c;
    Float32x4_operator_lt_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_lt_Float32x4.parameters = Float32x4_operator_lt_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_lt_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_lt_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator<= with Float32x4
    Float32x4_operator_lte_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_lte_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_lte_Float32x4.name = "operator<="_c;
    Float32x4_operator_lte_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_lte_Float32x4.parameters = Float32x4_operator_lte_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_lte_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_lte_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator> with Float32x4
    Float32x4_operator_gt_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_gt_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_gt_Float32x4.name = "operator>"_c;
    Float32x4_operator_gt_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_gt_Float32x4.parameters = Float32x4_operator_gt_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_gt_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_gt_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator>= with Float32x4
    Float32x4_operator_gte_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_gte_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_gte_Float32x4.name = "operator>="_c;
    Float32x4_operator_gte_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_gte_Float32x4.parameters = Float32x4_operator_gte_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_gte_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_gte_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator== with Float32x4
    Float32x4_operator_eq_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_eq_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_eq_Float32x4.name = "operator=="_c;
    Float32x4_operator_eq_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_eq_Float32x4.parameters = Float32x4_operator_eq_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_eq_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_eq_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator!= with Float32x4
    Float32x4_operator_neq_Float32x4_arg0.name = "_arg0"_c;
    Float32x4_operator_neq_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_neq_Float32x4.name = "operator!="_c;
    Float32x4_operator_neq_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_neq_Float32x4.parameters = Float32x4_operator_neq_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_neq_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_neq_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Float32
    Float32x4_operator_scale_Float32_arg0.name = "_arg0"_c;
    Float32x4_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32x4_operator_scale_Float32.name = "operator*"_c;
    Float32x4_operator_scale_Float32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_scale_Float32.parameters = Float32x4_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x4_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_operator_scale_Float32)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Float16
    Float32x4_operator_scale_Float16_arg0.name = "_arg0"_c;
    Float32x4_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float32x4_operator_scale_Float16.name = "operator*"_c;
    Float32x4_operator_scale_Float16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_scale_Float16.parameters = Float32x4_operator_scale_Float16_args;
    Symbol::Resolved(&Float32x4_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float32x4_operator_scale_Float16)->returnTypeSymbol = &Float32x4Type;

    /// operator* with UInt32
    Float32x4_operator_scale_UInt32_arg0.name = "_arg0"_c;
    Float32x4_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x4_operator_scale_UInt32.name = "operator*"_c;
    Float32x4_operator_scale_UInt32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_scale_UInt32.parameters = Float32x4_operator_scale_UInt32_args;
    Symbol::Resolved(&Float32x4_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4_operator_scale_UInt32)->returnTypeSymbol = &Float32x4Type;

    /// operator* with UInt16
    Float32x4_operator_scale_UInt16_arg0.name = "_arg0"_c;
    Float32x4_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x4_operator_scale_UInt16.name = "operator*"_c;
    Float32x4_operator_scale_UInt16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_scale_UInt16.parameters = Float32x4_operator_scale_UInt16_args;
    Symbol::Resolved(&Float32x4_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x4_operator_scale_UInt16)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Int32
    Float32x4_operator_scale_Int32_arg0.name = "_arg0"_c;
    Float32x4_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x4_operator_scale_Int32.name = "operator*"_c;
    Float32x4_operator_scale_Int32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_scale_Int32.parameters = Float32x4_operator_scale_Int32_args;
    Symbol::Resolved(&Float32x4_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4_operator_scale_Int32)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Int16
    Float32x4_operator_scale_Int16_arg0.name = "_arg0"_c;
    Float32x4_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x4_operator_scale_Int16.name = "operator*"_c;
    Float32x4_operator_scale_Int16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_scale_Int16.parameters = Float32x4_operator_scale_Int16_args;
    Symbol::Resolved(&Float32x4_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x4_operator_scale_Int16)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Float32x4x2
    Float32x4_operator_mul_Float32x4x2_arg0.name = "_arg0"_c;
    Float32x4_operator_mul_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4_operator_mul_Float32x4x2.name = "operator*"_c;
    Float32x4_operator_mul_Float32x4x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x4_operator_mul_Float32x4x2.parameters = Float32x4_operator_mul_Float32x4x2_args;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4x2)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x4x3
    Float32x4_operator_mul_Float32x4x3_arg0.name = "_arg0"_c;
    Float32x4_operator_mul_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4_operator_mul_Float32x4x3.name = "operator*"_c;
    Float32x4_operator_mul_Float32x4x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x4_operator_mul_Float32x4x3.parameters = Float32x4_operator_mul_Float32x4x3_args;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4x3)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x4x4
    Float32x4_operator_mul_Float32x4x4_arg0.name = "_arg0"_c;
    Float32x4_operator_mul_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4_operator_mul_Float32x4x4.name = "operator*"_c;
    Float32x4_operator_mul_Float32x4x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_mul_Float32x4x4.parameters = Float32x4_operator_mul_Float32x4x4_args;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4x4)->returnTypeSymbol = &Float32x4Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Float32x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4_operator_add_Float32x4 },
    std::pair{ "operator-"_c, &Float32x4_operator_sub_Float32x4 },
    std::pair{ "operator*"_c, &Float32x4_operator_mul_Float32x4 },
    std::pair{ "operator/"_c, &Float32x4_operator_div_Float32x4 },
    std::pair{ "operator%"_c, &Float32x4_operator_mod_Float32x4 },
    std::pair{ "operator+="_c, &Float32x4_operator_addasg_Float32x4 },
    std::pair{ "operator-="_c, &Float32x4_operator_subasg_Float32x4 },
    std::pair{ "operator*="_c, &Float32x4_operator_mulasg_Float32x4 },
    std::pair{ "operator/="_c, &Float32x4_operator_divasg_Float32x4 },
    std::pair{ "operator<"_c, &Float32x4_operator_lt_Float32x4 },
    std::pair{ "operator<="_c, &Float32x4_operator_lte_Float32x4 },
    std::pair{ "operator>"_c, &Float32x4_operator_gt_Float32x4 },
    std::pair{ "operator>="_c, &Float32x4_operator_gte_Float32x4 },
    std::pair{ "operator=="_c, &Float32x4_operator_eq_Float32x4 },
    std::pair{ "operator!="_c, &Float32x4_operator_neq_Float32x4 },
    std::pair{ "operator*"_c, &Float32x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Float32x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Float32x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Float32x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Float32x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Float32x4_operator_scale_Int16 },
    std::pair{ "operator*"_c, &Float32x4_operator_mul_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4_operator_mul_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4_operator_mul_Float32x4x4 }
    } };
}
Float32x4 Float32x4Type;

/// u32x4 with Float32x4
Variable UInt32x4_convert_Float32x4_arg0;
Function UInt32x4_convert_Float32x4;
inline constexpr std::array UInt32x4_convert_Float32x4_args = { &UInt32x4_convert_Float32x4_arg0 };

/// u32x4 with Float32
Variable UInt32x4_splat_Float32_arg0;
Function UInt32x4_splat_Float32;
inline constexpr std::array UInt32x4_splat_Float32_args = { &UInt32x4_splat_Float32_arg0 };

/// u32x4 with UInt32x4
Variable UInt32x4_convert_UInt32x4_arg0;
Function UInt32x4_convert_UInt32x4;
inline constexpr std::array UInt32x4_convert_UInt32x4_args = { &UInt32x4_convert_UInt32x4_arg0 };

/// u32x4 with UInt32
Variable UInt32x4_splat_UInt32_arg0;
Function UInt32x4_splat_UInt32;
inline constexpr std::array UInt32x4_splat_UInt32_args = { &UInt32x4_splat_UInt32_arg0 };

/// u32x4 with Int32x4
Variable UInt32x4_convert_Int32x4_arg0;
Function UInt32x4_convert_Int32x4;
inline constexpr std::array UInt32x4_convert_Int32x4_args = { &UInt32x4_convert_Int32x4_arg0 };

/// u32x4 with Int32
Variable UInt32x4_splat_Int32_arg0;
Function UInt32x4_splat_Int32;
inline constexpr std::array UInt32x4_splat_Int32_args = { &UInt32x4_splat_Int32_arg0 };

/// u32x4 with Float16x4
Variable UInt32x4_convert_Float16x4_arg0;
Function UInt32x4_convert_Float16x4;
inline constexpr std::array UInt32x4_convert_Float16x4_args = { &UInt32x4_convert_Float16x4_arg0 };

/// u32x4 with Float16
Variable UInt32x4_splat_Float16_arg0;
Function UInt32x4_splat_Float16;
inline constexpr std::array UInt32x4_splat_Float16_args = { &UInt32x4_splat_Float16_arg0 };

/// u32x4 with UInt16x4
Variable UInt32x4_convert_UInt16x4_arg0;
Function UInt32x4_convert_UInt16x4;
inline constexpr std::array UInt32x4_convert_UInt16x4_args = { &UInt32x4_convert_UInt16x4_arg0 };

/// u32x4 with UInt16
Variable UInt32x4_splat_UInt16_arg0;
Function UInt32x4_splat_UInt16;
inline constexpr std::array UInt32x4_splat_UInt16_args = { &UInt32x4_splat_UInt16_arg0 };

/// u32x4 with Int16x4
Variable UInt32x4_convert_Int16x4_arg0;
Function UInt32x4_convert_Int16x4;
inline constexpr std::array UInt32x4_convert_Int16x4_args = { &UInt32x4_convert_Int16x4_arg0 };

/// u32x4 with Int16
Variable UInt32x4_splat_Int16_arg0;
Function UInt32x4_splat_Int16;
inline constexpr std::array UInt32x4_splat_Int16_args = { &UInt32x4_splat_Int16_arg0 };

/// u32x4 with UInt32, UInt32, UInt32, UInt32
Variable UInt32x4_ctor0_arg0_UInt32;
Variable UInt32x4_ctor0_arg1_UInt32;
Variable UInt32x4_ctor0_arg2_UInt32;
Variable UInt32x4_ctor0_arg3_UInt32;
Function UInt32x4_ctor0;
inline constexpr std::array UInt32x4_ctor0_args = { &UInt32x4_ctor0_arg0_UInt32, &UInt32x4_ctor0_arg1_UInt32, &UInt32x4_ctor0_arg2_UInt32, &UInt32x4_ctor0_arg3_UInt32 };

/// u32x4 with UInt32x2, UInt32, UInt32
Variable UInt32x4_ctor1_arg0_UInt32x2;
Variable UInt32x4_ctor1_arg1_UInt32;
Variable UInt32x4_ctor1_arg2_UInt32;
Function UInt32x4_ctor1;
inline constexpr std::array UInt32x4_ctor1_args = { &UInt32x4_ctor1_arg0_UInt32x2, &UInt32x4_ctor1_arg1_UInt32, &UInt32x4_ctor1_arg2_UInt32 };

/// u32x4 with UInt32, UInt32x2, UInt32
Variable UInt32x4_ctor2_arg0_UInt32;
Variable UInt32x4_ctor2_arg1_UInt32x2;
Variable UInt32x4_ctor2_arg2_UInt32;
Function UInt32x4_ctor2;
inline constexpr std::array UInt32x4_ctor2_args = { &UInt32x4_ctor2_arg0_UInt32, &UInt32x4_ctor2_arg1_UInt32x2, &UInt32x4_ctor2_arg2_UInt32 };

/// u32x4 with UInt32, UInt32, UInt32x2
Variable UInt32x4_ctor3_arg0_UInt32;
Variable UInt32x4_ctor3_arg1_UInt32;
Variable UInt32x4_ctor3_arg2_UInt32x2;
Function UInt32x4_ctor3;
inline constexpr std::array UInt32x4_ctor3_args = { &UInt32x4_ctor3_arg0_UInt32, &UInt32x4_ctor3_arg1_UInt32, &UInt32x4_ctor3_arg2_UInt32x2 };

/// u32x4 with UInt32x3, UInt32
Variable UInt32x4_ctor4_arg0_UInt32x3;
Variable UInt32x4_ctor4_arg1_UInt32;
Function UInt32x4_ctor4;
inline constexpr std::array UInt32x4_ctor4_args = { &UInt32x4_ctor4_arg0_UInt32x3, &UInt32x4_ctor4_arg1_UInt32 };

/// u32x4 with UInt32, UInt32x3
Variable UInt32x4_ctor5_arg0_UInt32;
Variable UInt32x4_ctor5_arg1_UInt32x3;
Function UInt32x4_ctor5;
inline constexpr std::array UInt32x4_ctor5_args = { &UInt32x4_ctor5_arg0_UInt32, &UInt32x4_ctor5_arg1_UInt32x3 };

/// operator[] with Int32
Variable UInt32x4_operator_index_Int32_arg0;
Function UInt32x4_operator_index_Int32;
inline constexpr std::array UInt32x4_operator_index_Int32_args = { &UInt32x4_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable UInt32x4_operator_index_UInt32_arg0;
Function UInt32x4_operator_index_UInt32;
inline constexpr std::array UInt32x4_operator_index_UInt32_args = { &UInt32x4_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable UInt32x4_operator_index_Int16_arg0;
Function UInt32x4_operator_index_Int16;
inline constexpr std::array UInt32x4_operator_index_Int16_args = { &UInt32x4_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable UInt32x4_operator_index_UInt16_arg0;
Function UInt32x4_operator_index_UInt16;
inline constexpr std::array UInt32x4_operator_index_UInt16_args = { &UInt32x4_operator_index_UInt16_arg0 };

/// operator+ with UInt32x4
Variable UInt32x4_operator_add_UInt32x4_arg0;
Function UInt32x4_operator_add_UInt32x4;
inline constexpr std::array UInt32x4_operator_add_UInt32x4_args = { &UInt32x4_operator_add_UInt32x4_arg0 };

/// operator- with UInt32x4
Variable UInt32x4_operator_sub_UInt32x4_arg0;
Function UInt32x4_operator_sub_UInt32x4;
inline constexpr std::array UInt32x4_operator_sub_UInt32x4_args = { &UInt32x4_operator_sub_UInt32x4_arg0 };

/// operator* with UInt32x4
Variable UInt32x4_operator_mul_UInt32x4_arg0;
Function UInt32x4_operator_mul_UInt32x4;
inline constexpr std::array UInt32x4_operator_mul_UInt32x4_args = { &UInt32x4_operator_mul_UInt32x4_arg0 };

/// operator/ with UInt32x4
Variable UInt32x4_operator_div_UInt32x4_arg0;
Function UInt32x4_operator_div_UInt32x4;
inline constexpr std::array UInt32x4_operator_div_UInt32x4_args = { &UInt32x4_operator_div_UInt32x4_arg0 };

/// operator% with UInt32x4
Variable UInt32x4_operator_mod_UInt32x4_arg0;
Function UInt32x4_operator_mod_UInt32x4;
inline constexpr std::array UInt32x4_operator_mod_UInt32x4_args = { &UInt32x4_operator_mod_UInt32x4_arg0 };

/// operator+= with UInt32x4
Variable UInt32x4_operator_addasg_UInt32x4_arg0;
Function UInt32x4_operator_addasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_addasg_UInt32x4_args = { &UInt32x4_operator_addasg_UInt32x4_arg0 };

/// operator-= with UInt32x4
Variable UInt32x4_operator_subasg_UInt32x4_arg0;
Function UInt32x4_operator_subasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_subasg_UInt32x4_args = { &UInt32x4_operator_subasg_UInt32x4_arg0 };

/// operator*= with UInt32x4
Variable UInt32x4_operator_mulasg_UInt32x4_arg0;
Function UInt32x4_operator_mulasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_mulasg_UInt32x4_args = { &UInt32x4_operator_mulasg_UInt32x4_arg0 };

/// operator/= with UInt32x4
Variable UInt32x4_operator_divasg_UInt32x4_arg0;
Function UInt32x4_operator_divasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_divasg_UInt32x4_args = { &UInt32x4_operator_divasg_UInt32x4_arg0 };

/// operator< with UInt32x4
Variable UInt32x4_operator_lt_UInt32x4_arg0;
Function UInt32x4_operator_lt_UInt32x4;
inline constexpr std::array UInt32x4_operator_lt_UInt32x4_args = { &UInt32x4_operator_lt_UInt32x4_arg0 };

/// operator<= with UInt32x4
Variable UInt32x4_operator_lte_UInt32x4_arg0;
Function UInt32x4_operator_lte_UInt32x4;
inline constexpr std::array UInt32x4_operator_lte_UInt32x4_args = { &UInt32x4_operator_lte_UInt32x4_arg0 };

/// operator> with UInt32x4
Variable UInt32x4_operator_gt_UInt32x4_arg0;
Function UInt32x4_operator_gt_UInt32x4;
inline constexpr std::array UInt32x4_operator_gt_UInt32x4_args = { &UInt32x4_operator_gt_UInt32x4_arg0 };

/// operator>= with UInt32x4
Variable UInt32x4_operator_gte_UInt32x4_arg0;
Function UInt32x4_operator_gte_UInt32x4;
inline constexpr std::array UInt32x4_operator_gte_UInt32x4_args = { &UInt32x4_operator_gte_UInt32x4_arg0 };

/// operator== with UInt32x4
Variable UInt32x4_operator_eq_UInt32x4_arg0;
Function UInt32x4_operator_eq_UInt32x4;
inline constexpr std::array UInt32x4_operator_eq_UInt32x4_args = { &UInt32x4_operator_eq_UInt32x4_arg0 };

/// operator!= with UInt32x4
Variable UInt32x4_operator_neq_UInt32x4_arg0;
Function UInt32x4_operator_neq_UInt32x4;
inline constexpr std::array UInt32x4_operator_neq_UInt32x4_args = { &UInt32x4_operator_neq_UInt32x4_arg0 };

/// operator* with Float32
Variable UInt32x4_operator_scale_Float32_arg0;
Function UInt32x4_operator_scale_Float32;
inline constexpr std::array UInt32x4_operator_scale_Float32_args = { &UInt32x4_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable UInt32x4_operator_scale_Float16_arg0;
Function UInt32x4_operator_scale_Float16;
inline constexpr std::array UInt32x4_operator_scale_Float16_args = { &UInt32x4_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable UInt32x4_operator_scale_UInt32_arg0;
Function UInt32x4_operator_scale_UInt32;
inline constexpr std::array UInt32x4_operator_scale_UInt32_args = { &UInt32x4_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable UInt32x4_operator_scale_UInt16_arg0;
Function UInt32x4_operator_scale_UInt16;
inline constexpr std::array UInt32x4_operator_scale_UInt16_args = { &UInt32x4_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable UInt32x4_operator_scale_Int32_arg0;
Function UInt32x4_operator_scale_Int32;
inline constexpr std::array UInt32x4_operator_scale_Int32_args = { &UInt32x4_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable UInt32x4_operator_scale_Int16_arg0;
Function UInt32x4_operator_scale_Int16;
inline constexpr std::array UInt32x4_operator_scale_Int16_args = { &UInt32x4_operator_scale_Int16_arg0 };

/// operator| with UInt32x4
Variable UInt32x4_operator_or_UInt32x4_arg0;
Function UInt32x4_operator_or_UInt32x4;
inline constexpr std::array UInt32x4_operator_or_UInt32x4_args = { &UInt32x4_operator_or_UInt32x4_arg0 };

/// operator& with UInt32x4
Variable UInt32x4_operator_and_UInt32x4_arg0;
Function UInt32x4_operator_and_UInt32x4;
inline constexpr std::array UInt32x4_operator_and_UInt32x4_args = { &UInt32x4_operator_and_UInt32x4_arg0 };

/// operator^ with UInt32x4
Variable UInt32x4_operator_xor_UInt32x4_arg0;
Function UInt32x4_operator_xor_UInt32x4;
inline constexpr std::array UInt32x4_operator_xor_UInt32x4_args = { &UInt32x4_operator_xor_UInt32x4_arg0 };

/// operator<< with UInt32x4
Variable UInt32x4_operator_lsh_UInt32x4_arg0;
Function UInt32x4_operator_lsh_UInt32x4;
inline constexpr std::array UInt32x4_operator_lsh_UInt32x4_args = { &UInt32x4_operator_lsh_UInt32x4_arg0 };

/// operator>> with UInt32x4
Variable UInt32x4_operator_rsh_UInt32x4_arg0;
Function UInt32x4_operator_rsh_UInt32x4;
inline constexpr std::array UInt32x4_operator_rsh_UInt32x4_args = { &UInt32x4_operator_rsh_UInt32x4_arg0 };

/// operator|= with UInt32x4
Variable UInt32x4_operator_orasg_UInt32x4_arg0;
Function UInt32x4_operator_orasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_orasg_UInt32x4_args = { &UInt32x4_operator_orasg_UInt32x4_arg0 };

/// operator&= with UInt32x4
Variable UInt32x4_operator_andasg_UInt32x4_arg0;
Function UInt32x4_operator_andasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_andasg_UInt32x4_args = { &UInt32x4_operator_andasg_UInt32x4_arg0 };

/// operator^= with UInt32x4
Variable UInt32x4_operator_xorasg_UInt32x4_arg0;
Function UInt32x4_operator_xorasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_xorasg_UInt32x4_args = { &UInt32x4_operator_xorasg_UInt32x4_arg0 };

/// operator<<= with UInt32x4
Variable UInt32x4_operator_lshasg_UInt32x4_arg0;
Function UInt32x4_operator_lshasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_lshasg_UInt32x4_args = { &UInt32x4_operator_lshasg_UInt32x4_arg0 };

/// operator>>= with UInt32x4
Variable UInt32x4_operator_rhsasg_UInt32x4_arg0;
Function UInt32x4_operator_rhsasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_rhsasg_UInt32x4_args = { &UInt32x4_operator_rhsasg_UInt32x4_arg0 };

UInt32x4::UInt32x4()
{
    this->name = "u32x4";
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    /// u32x4 with Float32x4
    UInt32x4_convert_Float32x4_arg0.name = "val"_c;
    UInt32x4_convert_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    UInt32x4_convert_Float32x4.documentation = "Convert f32x4 to u32x4"_c;
    UInt32x4_convert_Float32x4.name = "u32x4"_c;
    UInt32x4_convert_Float32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_convert_Float32x4.parameters = UInt32x4_convert_Float32x4_args;
    Symbol::Resolved(&UInt32x4_convert_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&UInt32x4_convert_Float32x4)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Float32
    UInt32x4_splat_Float32_arg0.name = "val"_c;
    UInt32x4_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    UInt32x4_splat_Float32.documentation = "Splat f32x4 to u32x4"_c;
    UInt32x4_splat_Float32.name = "u32x4"_c;
    UInt32x4_splat_Float32.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_splat_Float32.parameters = UInt32x4_splat_Float32_args;
    Symbol::Resolved(&UInt32x4_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x4_splat_Float32)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32x4
    UInt32x4_convert_UInt32x4_arg0.name = "val"_c;
    UInt32x4_convert_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_convert_UInt32x4.documentation = "Convert u32x4 to u32x4"_c;
    UInt32x4_convert_UInt32x4.name = "u32x4"_c;
    UInt32x4_convert_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_convert_UInt32x4.parameters = UInt32x4_convert_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_convert_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_convert_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32
    UInt32x4_splat_UInt32_arg0.name = "val"_c;
    UInt32x4_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32x4_splat_UInt32.documentation = "Splat u32x4 to u32x4"_c;
    UInt32x4_splat_UInt32.name = "u32x4"_c;
    UInt32x4_splat_UInt32.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_splat_UInt32.parameters = UInt32x4_splat_UInt32_args;
    Symbol::Resolved(&UInt32x4_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_splat_UInt32)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Int32x4
    UInt32x4_convert_Int32x4_arg0.name = "val"_c;
    UInt32x4_convert_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    UInt32x4_convert_Int32x4.documentation = "Convert i32x4 to u32x4"_c;
    UInt32x4_convert_Int32x4.name = "u32x4"_c;
    UInt32x4_convert_Int32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_convert_Int32x4.parameters = UInt32x4_convert_Int32x4_args;
    Symbol::Resolved(&UInt32x4_convert_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&UInt32x4_convert_Int32x4)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Int32
    UInt32x4_splat_Int32_arg0.name = "val"_c;
    UInt32x4_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt32x4_splat_Int32.documentation = "Splat i32x4 to u32x4"_c;
    UInt32x4_splat_Int32.name = "u32x4"_c;
    UInt32x4_splat_Int32.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_splat_Int32.parameters = UInt32x4_splat_Int32_args;
    Symbol::Resolved(&UInt32x4_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x4_splat_Int32)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Float16x4
    UInt32x4_convert_Float16x4_arg0.name = "val"_c;
    UInt32x4_convert_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    UInt32x4_convert_Float16x4.documentation = "Convert f16x4 to u32x4"_c;
    UInt32x4_convert_Float16x4.name = "u32x4"_c;
    UInt32x4_convert_Float16x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_convert_Float16x4.parameters = UInt32x4_convert_Float16x4_args;
    Symbol::Resolved(&UInt32x4_convert_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&UInt32x4_convert_Float16x4)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Float16
    UInt32x4_splat_Float16_arg0.name = "val"_c;
    UInt32x4_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    UInt32x4_splat_Float16.documentation = "Splat f16x4 to u32x4"_c;
    UInt32x4_splat_Float16.name = "u32x4"_c;
    UInt32x4_splat_Float16.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_splat_Float16.parameters = UInt32x4_splat_Float16_args;
    Symbol::Resolved(&UInt32x4_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt32x4_splat_Float16)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt16x4
    UInt32x4_convert_UInt16x4_arg0.name = "val"_c;
    UInt32x4_convert_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt32x4_convert_UInt16x4.documentation = "Convert u16x4 to u32x4"_c;
    UInt32x4_convert_UInt16x4.name = "u32x4"_c;
    UInt32x4_convert_UInt16x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_convert_UInt16x4.parameters = UInt32x4_convert_UInt16x4_args;
    Symbol::Resolved(&UInt32x4_convert_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt32x4_convert_UInt16x4)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt16
    UInt32x4_splat_UInt16_arg0.name = "val"_c;
    UInt32x4_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt32x4_splat_UInt16.documentation = "Splat u16x4 to u32x4"_c;
    UInt32x4_splat_UInt16.name = "u32x4"_c;
    UInt32x4_splat_UInt16.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_splat_UInt16.parameters = UInt32x4_splat_UInt16_args;
    Symbol::Resolved(&UInt32x4_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x4_splat_UInt16)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Int16x4
    UInt32x4_convert_Int16x4_arg0.name = "val"_c;
    UInt32x4_convert_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    UInt32x4_convert_Int16x4.documentation = "Convert i16x4 to u32x4"_c;
    UInt32x4_convert_Int16x4.name = "u32x4"_c;
    UInt32x4_convert_Int16x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_convert_Int16x4.parameters = UInt32x4_convert_Int16x4_args;
    Symbol::Resolved(&UInt32x4_convert_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&UInt32x4_convert_Int16x4)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Int16
    UInt32x4_splat_Int16_arg0.name = "val"_c;
    UInt32x4_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt32x4_splat_Int16.documentation = "Splat i16x4 to u32x4"_c;
    UInt32x4_splat_Int16.name = "u32x4"_c;
    UInt32x4_splat_Int16.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_splat_Int16.parameters = UInt32x4_splat_Int16_args;
    Symbol::Resolved(&UInt32x4_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x4_splat_Int16)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32, UInt32, UInt32, UInt32
    UInt32x4_ctor0_arg0_UInt32.name = "_arg0"_c;
    UInt32x4_ctor0_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor0_arg1_UInt32.name = "_arg1"_c;
    UInt32x4_ctor0_arg1_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor0_arg2_UInt32.name = "_arg2"_c;
    UInt32x4_ctor0_arg2_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor0_arg3_UInt32.name = "_arg3"_c;
    UInt32x4_ctor0_arg3_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor0.name = "u32x4"_c;
    UInt32x4_ctor0.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_ctor0.parameters = UInt32x4_ctor0_args;
    Symbol::Resolved(&UInt32x4_ctor0_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor0_arg1_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor0_arg2_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor0_arg3_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor0)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32x2, UInt32, UInt32
    UInt32x4_ctor1_arg0_UInt32x2.name = "_arg0"_c;
    UInt32x4_ctor1_arg0_UInt32x2.type = Type::FullType{ UInt32x2Type.name };
    UInt32x4_ctor1_arg1_UInt32.name = "_arg1"_c;
    UInt32x4_ctor1_arg1_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor1_arg2_UInt32.name = "_arg2"_c;
    UInt32x4_ctor1_arg2_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor1.name = "u32x4"_c;
    UInt32x4_ctor1.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_ctor1.parameters = UInt32x4_ctor1_args;
    Symbol::Resolved(&UInt32x4_ctor1_arg0_UInt32x2)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x4_ctor1_arg1_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor1_arg2_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor1)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32, UInt32x2, UInt32
    UInt32x4_ctor2_arg0_UInt32.name = "_arg0"_c;
    UInt32x4_ctor2_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor2_arg1_UInt32x2.name = "_arg1"_c;
    UInt32x4_ctor2_arg1_UInt32x2.type = Type::FullType{ UInt32x2Type.name };
    UInt32x4_ctor2_arg2_UInt32.name = "_arg2"_c;
    UInt32x4_ctor2_arg2_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor2.name = "u32x4"_c;
    UInt32x4_ctor2.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_ctor2.parameters = UInt32x4_ctor2_args;
    Symbol::Resolved(&UInt32x4_ctor2_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor2_arg1_UInt32x2)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x4_ctor2_arg2_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor2)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32, UInt32, UInt32x2
    UInt32x4_ctor3_arg0_UInt32.name = "_arg0"_c;
    UInt32x4_ctor3_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor3_arg1_UInt32.name = "_arg1"_c;
    UInt32x4_ctor3_arg1_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor3_arg2_UInt32x2.name = "_arg2"_c;
    UInt32x4_ctor3_arg2_UInt32x2.type = Type::FullType{ UInt32x2Type.name };
    UInt32x4_ctor3.name = "u32x4"_c;
    UInt32x4_ctor3.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_ctor3.parameters = UInt32x4_ctor3_args;
    Symbol::Resolved(&UInt32x4_ctor3_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor3_arg1_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor3_arg2_UInt32x2)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x4_ctor3)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32x3, UInt32
    UInt32x4_ctor4_arg0_UInt32x3.name = "_arg0"_c;
    UInt32x4_ctor4_arg0_UInt32x3.type = Type::FullType{ UInt32x3Type.name };
    UInt32x4_ctor4_arg1_UInt32.name = "_arg1"_c;
    UInt32x4_ctor4_arg1_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor4.name = "u32x4"_c;
    UInt32x4_ctor4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_ctor4.parameters = UInt32x4_ctor4_args;
    Symbol::Resolved(&UInt32x4_ctor4_arg0_UInt32x3)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x4_ctor4_arg1_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor4)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32, UInt32x3
    UInt32x4_ctor5_arg0_UInt32.name = "_arg0"_c;
    UInt32x4_ctor5_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor5_arg1_UInt32x3.name = "_arg1"_c;
    UInt32x4_ctor5_arg1_UInt32x3.type = Type::FullType{ UInt32x3Type.name };
    UInt32x4_ctor5.name = "u32x4"_c;
    UInt32x4_ctor5.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_ctor5.parameters = UInt32x4_ctor5_args;
    Symbol::Resolved(&UInt32x4_ctor5_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor5_arg1_UInt32x3)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x4_ctor5)->returnTypeSymbol = &UInt32x4Type;

    /// operator[] with Int32
    UInt32x4_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt32x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt32x4_operator_index_Int32.name = "operator[]"_c;
    UInt32x4_operator_index_Int32.returnType = Type::FullType { UInt32Type.name };
    UInt32x4_operator_index_Int32.parameters = UInt32x4_operator_index_Int32_args;
    Symbol::Resolved(&UInt32x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x4_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt32
    UInt32x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt32x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32x4_operator_index_UInt32.name = "operator[]"_c;
    UInt32x4_operator_index_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32x4_operator_index_UInt32.parameters = UInt32x4_operator_index_UInt32_args;
    Symbol::Resolved(&UInt32x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with Int16
    UInt32x4_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt32x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt32x4_operator_index_Int16.name = "operator[]"_c;
    UInt32x4_operator_index_Int16.returnType = Type::FullType { UInt32Type.name };
    UInt32x4_operator_index_Int16.parameters = UInt32x4_operator_index_Int16_args;
    Symbol::Resolved(&UInt32x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x4_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt16
    UInt32x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt32x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt32x4_operator_index_UInt16.name = "operator[]"_c;
    UInt32x4_operator_index_UInt16.returnType = Type::FullType { UInt32Type.name };
    UInt32x4_operator_index_UInt16.parameters = UInt32x4_operator_index_UInt16_args;
    Symbol::Resolved(&UInt32x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x4_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    /// operator+ with UInt32x4
    UInt32x4_operator_add_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_add_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_add_UInt32x4.name = "operator+"_c;
    UInt32x4_operator_add_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_add_UInt32x4.parameters = UInt32x4_operator_add_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_add_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_add_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator- with UInt32x4
    UInt32x4_operator_sub_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_sub_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_sub_UInt32x4.name = "operator-"_c;
    UInt32x4_operator_sub_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_sub_UInt32x4.parameters = UInt32x4_operator_sub_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_sub_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_sub_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator* with UInt32x4
    UInt32x4_operator_mul_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_mul_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_mul_UInt32x4.name = "operator*"_c;
    UInt32x4_operator_mul_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_mul_UInt32x4.parameters = UInt32x4_operator_mul_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_mul_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_mul_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator/ with UInt32x4
    UInt32x4_operator_div_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_div_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_div_UInt32x4.name = "operator/"_c;
    UInt32x4_operator_div_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_div_UInt32x4.parameters = UInt32x4_operator_div_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_div_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_div_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator% with UInt32x4
    UInt32x4_operator_mod_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_mod_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_mod_UInt32x4.name = "operator%"_c;
    UInt32x4_operator_mod_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_mod_UInt32x4.parameters = UInt32x4_operator_mod_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_mod_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_mod_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator+= with UInt32x4
    UInt32x4_operator_addasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_addasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_addasg_UInt32x4.name = "operator+="_c;
    UInt32x4_operator_addasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_addasg_UInt32x4.parameters = UInt32x4_operator_addasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_addasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_addasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator-= with UInt32x4
    UInt32x4_operator_subasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_subasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_subasg_UInt32x4.name = "operator-="_c;
    UInt32x4_operator_subasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_subasg_UInt32x4.parameters = UInt32x4_operator_subasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_subasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_subasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator*= with UInt32x4
    UInt32x4_operator_mulasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_mulasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_mulasg_UInt32x4.name = "operator*="_c;
    UInt32x4_operator_mulasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_mulasg_UInt32x4.parameters = UInt32x4_operator_mulasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_mulasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_mulasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator/= with UInt32x4
    UInt32x4_operator_divasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_divasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_divasg_UInt32x4.name = "operator/="_c;
    UInt32x4_operator_divasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_divasg_UInt32x4.parameters = UInt32x4_operator_divasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_divasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_divasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator< with UInt32x4
    UInt32x4_operator_lt_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_lt_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_lt_UInt32x4.name = "operator<"_c;
    UInt32x4_operator_lt_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_lt_UInt32x4.parameters = UInt32x4_operator_lt_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_lt_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_lt_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator<= with UInt32x4
    UInt32x4_operator_lte_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_lte_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_lte_UInt32x4.name = "operator<="_c;
    UInt32x4_operator_lte_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_lte_UInt32x4.parameters = UInt32x4_operator_lte_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_lte_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_lte_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator> with UInt32x4
    UInt32x4_operator_gt_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_gt_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_gt_UInt32x4.name = "operator>"_c;
    UInt32x4_operator_gt_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_gt_UInt32x4.parameters = UInt32x4_operator_gt_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_gt_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_gt_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator>= with UInt32x4
    UInt32x4_operator_gte_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_gte_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_gte_UInt32x4.name = "operator>="_c;
    UInt32x4_operator_gte_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_gte_UInt32x4.parameters = UInt32x4_operator_gte_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_gte_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_gte_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator== with UInt32x4
    UInt32x4_operator_eq_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_eq_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_eq_UInt32x4.name = "operator=="_c;
    UInt32x4_operator_eq_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_eq_UInt32x4.parameters = UInt32x4_operator_eq_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_eq_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_eq_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator!= with UInt32x4
    UInt32x4_operator_neq_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_neq_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_neq_UInt32x4.name = "operator!="_c;
    UInt32x4_operator_neq_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_neq_UInt32x4.parameters = UInt32x4_operator_neq_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_neq_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_neq_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator* with Float32
    UInt32x4_operator_scale_Float32_arg0.name = "_arg0"_c;
    UInt32x4_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    UInt32x4_operator_scale_Float32.name = "operator*"_c;
    UInt32x4_operator_scale_Float32.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_scale_Float32.parameters = UInt32x4_operator_scale_Float32_args;
    Symbol::Resolved(&UInt32x4_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x4_operator_scale_Float32)->returnTypeSymbol = &UInt32x4Type;

    /// operator* with Float16
    UInt32x4_operator_scale_Float16_arg0.name = "_arg0"_c;
    UInt32x4_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    UInt32x4_operator_scale_Float16.name = "operator*"_c;
    UInt32x4_operator_scale_Float16.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_scale_Float16.parameters = UInt32x4_operator_scale_Float16_args;
    Symbol::Resolved(&UInt32x4_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt32x4_operator_scale_Float16)->returnTypeSymbol = &UInt32x4Type;

    /// operator* with UInt32
    UInt32x4_operator_scale_UInt32_arg0.name = "_arg0"_c;
    UInt32x4_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt32x4_operator_scale_UInt32.name = "operator*"_c;
    UInt32x4_operator_scale_UInt32.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_scale_UInt32.parameters = UInt32x4_operator_scale_UInt32_args;
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32)->returnTypeSymbol = &UInt32x4Type;

    /// operator* with UInt16
    UInt32x4_operator_scale_UInt16_arg0.name = "_arg0"_c;
    UInt32x4_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt32x4_operator_scale_UInt16.name = "operator*"_c;
    UInt32x4_operator_scale_UInt16.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_scale_UInt16.parameters = UInt32x4_operator_scale_UInt16_args;
    Symbol::Resolved(&UInt32x4_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x4_operator_scale_UInt16)->returnTypeSymbol = &UInt32x4Type;

    /// operator* with Int32
    UInt32x4_operator_scale_Int32_arg0.name = "_arg0"_c;
    UInt32x4_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt32x4_operator_scale_Int32.name = "operator*"_c;
    UInt32x4_operator_scale_Int32.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_scale_Int32.parameters = UInt32x4_operator_scale_Int32_args;
    Symbol::Resolved(&UInt32x4_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x4_operator_scale_Int32)->returnTypeSymbol = &UInt32x4Type;

    /// operator* with Int16
    UInt32x4_operator_scale_Int16_arg0.name = "_arg0"_c;
    UInt32x4_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt32x4_operator_scale_Int16.name = "operator*"_c;
    UInt32x4_operator_scale_Int16.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_scale_Int16.parameters = UInt32x4_operator_scale_Int16_args;
    Symbol::Resolved(&UInt32x4_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x4_operator_scale_Int16)->returnTypeSymbol = &UInt32x4Type;

    /// operator| with UInt32x4
    UInt32x4_operator_or_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_or_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_or_UInt32x4.name = "operator|"_c;
    UInt32x4_operator_or_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_or_UInt32x4.parameters = UInt32x4_operator_or_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_or_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_or_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator& with UInt32x4
    UInt32x4_operator_and_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_and_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_and_UInt32x4.name = "operator&"_c;
    UInt32x4_operator_and_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_and_UInt32x4.parameters = UInt32x4_operator_and_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_and_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_and_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator^ with UInt32x4
    UInt32x4_operator_xor_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_xor_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_xor_UInt32x4.name = "operator^"_c;
    UInt32x4_operator_xor_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_xor_UInt32x4.parameters = UInt32x4_operator_xor_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_xor_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_xor_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator<< with UInt32x4
    UInt32x4_operator_lsh_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_lsh_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_lsh_UInt32x4.name = "operator<<"_c;
    UInt32x4_operator_lsh_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_lsh_UInt32x4.parameters = UInt32x4_operator_lsh_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_lsh_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_lsh_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator>> with UInt32x4
    UInt32x4_operator_rsh_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_rsh_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_rsh_UInt32x4.name = "operator>>"_c;
    UInt32x4_operator_rsh_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_rsh_UInt32x4.parameters = UInt32x4_operator_rsh_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_rsh_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_rsh_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator|= with UInt32x4
    UInt32x4_operator_orasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_orasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_orasg_UInt32x4.name = "operator|="_c;
    UInt32x4_operator_orasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_orasg_UInt32x4.parameters = UInt32x4_operator_orasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_orasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_orasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator&= with UInt32x4
    UInt32x4_operator_andasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_andasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_andasg_UInt32x4.name = "operator&="_c;
    UInt32x4_operator_andasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_andasg_UInt32x4.parameters = UInt32x4_operator_andasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_andasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_andasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator^= with UInt32x4
    UInt32x4_operator_xorasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_xorasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_xorasg_UInt32x4.name = "operator^="_c;
    UInt32x4_operator_xorasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_xorasg_UInt32x4.parameters = UInt32x4_operator_xorasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_xorasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_xorasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator<<= with UInt32x4
    UInt32x4_operator_lshasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_lshasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_lshasg_UInt32x4.name = "operator<<="_c;
    UInt32x4_operator_lshasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_lshasg_UInt32x4.parameters = UInt32x4_operator_lshasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_lshasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_lshasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator>>= with UInt32x4
    UInt32x4_operator_rhsasg_UInt32x4_arg0.name = "_arg0"_c;
    UInt32x4_operator_rhsasg_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_rhsasg_UInt32x4.name = "operator>>="_c;
    UInt32x4_operator_rhsasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_rhsasg_UInt32x4.parameters = UInt32x4_operator_rhsasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_rhsasg_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_rhsasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &UInt32x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &UInt32x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &UInt32x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &UInt32x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &UInt32x4_operator_add_UInt32x4 },
    std::pair{ "operator-"_c, &UInt32x4_operator_sub_UInt32x4 },
    std::pair{ "operator*"_c, &UInt32x4_operator_mul_UInt32x4 },
    std::pair{ "operator/"_c, &UInt32x4_operator_div_UInt32x4 },
    std::pair{ "operator%"_c, &UInt32x4_operator_mod_UInt32x4 },
    std::pair{ "operator+="_c, &UInt32x4_operator_addasg_UInt32x4 },
    std::pair{ "operator-="_c, &UInt32x4_operator_subasg_UInt32x4 },
    std::pair{ "operator*="_c, &UInt32x4_operator_mulasg_UInt32x4 },
    std::pair{ "operator/="_c, &UInt32x4_operator_divasg_UInt32x4 },
    std::pair{ "operator<"_c, &UInt32x4_operator_lt_UInt32x4 },
    std::pair{ "operator<="_c, &UInt32x4_operator_lte_UInt32x4 },
    std::pair{ "operator>"_c, &UInt32x4_operator_gt_UInt32x4 },
    std::pair{ "operator>="_c, &UInt32x4_operator_gte_UInt32x4 },
    std::pair{ "operator=="_c, &UInt32x4_operator_eq_UInt32x4 },
    std::pair{ "operator!="_c, &UInt32x4_operator_neq_UInt32x4 },
    std::pair{ "operator*"_c, &UInt32x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &UInt32x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &UInt32x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &UInt32x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &UInt32x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &UInt32x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &UInt32x4_operator_or_UInt32x4 },
    std::pair{ "operator&"_c, &UInt32x4_operator_and_UInt32x4 },
    std::pair{ "operator^"_c, &UInt32x4_operator_xor_UInt32x4 },
    std::pair{ "operator<<"_c, &UInt32x4_operator_lsh_UInt32x4 },
    std::pair{ "operator>>"_c, &UInt32x4_operator_rsh_UInt32x4 },
    std::pair{ "operator|="_c, &UInt32x4_operator_orasg_UInt32x4 },
    std::pair{ "operator&="_c, &UInt32x4_operator_andasg_UInt32x4 },
    std::pair{ "operator^="_c, &UInt32x4_operator_xorasg_UInt32x4 },
    std::pair{ "operator<<="_c, &UInt32x4_operator_lshasg_UInt32x4 },
    std::pair{ "operator>>="_c, &UInt32x4_operator_rhsasg_UInt32x4 }
    } };
}
UInt32x4 UInt32x4Type;

/// i32x4 with Float32x4
Variable Int32x4_convert_Float32x4_arg0;
Function Int32x4_convert_Float32x4;
inline constexpr std::array Int32x4_convert_Float32x4_args = { &Int32x4_convert_Float32x4_arg0 };

/// i32x4 with Float32
Variable Int32x4_splat_Float32_arg0;
Function Int32x4_splat_Float32;
inline constexpr std::array Int32x4_splat_Float32_args = { &Int32x4_splat_Float32_arg0 };

/// i32x4 with UInt32x4
Variable Int32x4_convert_UInt32x4_arg0;
Function Int32x4_convert_UInt32x4;
inline constexpr std::array Int32x4_convert_UInt32x4_args = { &Int32x4_convert_UInt32x4_arg0 };

/// i32x4 with UInt32
Variable Int32x4_splat_UInt32_arg0;
Function Int32x4_splat_UInt32;
inline constexpr std::array Int32x4_splat_UInt32_args = { &Int32x4_splat_UInt32_arg0 };

/// i32x4 with Int32x4
Variable Int32x4_convert_Int32x4_arg0;
Function Int32x4_convert_Int32x4;
inline constexpr std::array Int32x4_convert_Int32x4_args = { &Int32x4_convert_Int32x4_arg0 };

/// i32x4 with Int32
Variable Int32x4_splat_Int32_arg0;
Function Int32x4_splat_Int32;
inline constexpr std::array Int32x4_splat_Int32_args = { &Int32x4_splat_Int32_arg0 };

/// i32x4 with Float16x4
Variable Int32x4_convert_Float16x4_arg0;
Function Int32x4_convert_Float16x4;
inline constexpr std::array Int32x4_convert_Float16x4_args = { &Int32x4_convert_Float16x4_arg0 };

/// i32x4 with Float16
Variable Int32x4_splat_Float16_arg0;
Function Int32x4_splat_Float16;
inline constexpr std::array Int32x4_splat_Float16_args = { &Int32x4_splat_Float16_arg0 };

/// i32x4 with UInt16x4
Variable Int32x4_convert_UInt16x4_arg0;
Function Int32x4_convert_UInt16x4;
inline constexpr std::array Int32x4_convert_UInt16x4_args = { &Int32x4_convert_UInt16x4_arg0 };

/// i32x4 with UInt16
Variable Int32x4_splat_UInt16_arg0;
Function Int32x4_splat_UInt16;
inline constexpr std::array Int32x4_splat_UInt16_args = { &Int32x4_splat_UInt16_arg0 };

/// i32x4 with Int16x4
Variable Int32x4_convert_Int16x4_arg0;
Function Int32x4_convert_Int16x4;
inline constexpr std::array Int32x4_convert_Int16x4_args = { &Int32x4_convert_Int16x4_arg0 };

/// i32x4 with Int16
Variable Int32x4_splat_Int16_arg0;
Function Int32x4_splat_Int16;
inline constexpr std::array Int32x4_splat_Int16_args = { &Int32x4_splat_Int16_arg0 };

/// i32x4 with Int32, Int32, Int32, Int32
Variable Int32x4_ctor0_arg0_Int32;
Variable Int32x4_ctor0_arg1_Int32;
Variable Int32x4_ctor0_arg2_Int32;
Variable Int32x4_ctor0_arg3_Int32;
Function Int32x4_ctor0;
inline constexpr std::array Int32x4_ctor0_args = { &Int32x4_ctor0_arg0_Int32, &Int32x4_ctor0_arg1_Int32, &Int32x4_ctor0_arg2_Int32, &Int32x4_ctor0_arg3_Int32 };

/// i32x4 with Int32x2, Int32, Int32
Variable Int32x4_ctor1_arg0_Int32x2;
Variable Int32x4_ctor1_arg1_Int32;
Variable Int32x4_ctor1_arg2_Int32;
Function Int32x4_ctor1;
inline constexpr std::array Int32x4_ctor1_args = { &Int32x4_ctor1_arg0_Int32x2, &Int32x4_ctor1_arg1_Int32, &Int32x4_ctor1_arg2_Int32 };

/// i32x4 with Int32, Int32x2, Int32
Variable Int32x4_ctor2_arg0_Int32;
Variable Int32x4_ctor2_arg1_Int32x2;
Variable Int32x4_ctor2_arg2_Int32;
Function Int32x4_ctor2;
inline constexpr std::array Int32x4_ctor2_args = { &Int32x4_ctor2_arg0_Int32, &Int32x4_ctor2_arg1_Int32x2, &Int32x4_ctor2_arg2_Int32 };

/// i32x4 with Int32, Int32, Int32x2
Variable Int32x4_ctor3_arg0_Int32;
Variable Int32x4_ctor3_arg1_Int32;
Variable Int32x4_ctor3_arg2_Int32x2;
Function Int32x4_ctor3;
inline constexpr std::array Int32x4_ctor3_args = { &Int32x4_ctor3_arg0_Int32, &Int32x4_ctor3_arg1_Int32, &Int32x4_ctor3_arg2_Int32x2 };

/// i32x4 with Int32x3, Int32
Variable Int32x4_ctor4_arg0_Int32x3;
Variable Int32x4_ctor4_arg1_Int32;
Function Int32x4_ctor4;
inline constexpr std::array Int32x4_ctor4_args = { &Int32x4_ctor4_arg0_Int32x3, &Int32x4_ctor4_arg1_Int32 };

/// i32x4 with Int32, Int32x3
Variable Int32x4_ctor5_arg0_Int32;
Variable Int32x4_ctor5_arg1_Int32x3;
Function Int32x4_ctor5;
inline constexpr std::array Int32x4_ctor5_args = { &Int32x4_ctor5_arg0_Int32, &Int32x4_ctor5_arg1_Int32x3 };

/// operator[] with Int32
Variable Int32x4_operator_index_Int32_arg0;
Function Int32x4_operator_index_Int32;
inline constexpr std::array Int32x4_operator_index_Int32_args = { &Int32x4_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Int32x4_operator_index_UInt32_arg0;
Function Int32x4_operator_index_UInt32;
inline constexpr std::array Int32x4_operator_index_UInt32_args = { &Int32x4_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Int32x4_operator_index_Int16_arg0;
Function Int32x4_operator_index_Int16;
inline constexpr std::array Int32x4_operator_index_Int16_args = { &Int32x4_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Int32x4_operator_index_UInt16_arg0;
Function Int32x4_operator_index_UInt16;
inline constexpr std::array Int32x4_operator_index_UInt16_args = { &Int32x4_operator_index_UInt16_arg0 };

/// operator+ with Int32x4
Variable Int32x4_operator_add_Int32x4_arg0;
Function Int32x4_operator_add_Int32x4;
inline constexpr std::array Int32x4_operator_add_Int32x4_args = { &Int32x4_operator_add_Int32x4_arg0 };

/// operator- with Int32x4
Variable Int32x4_operator_sub_Int32x4_arg0;
Function Int32x4_operator_sub_Int32x4;
inline constexpr std::array Int32x4_operator_sub_Int32x4_args = { &Int32x4_operator_sub_Int32x4_arg0 };

/// operator* with Int32x4
Variable Int32x4_operator_mul_Int32x4_arg0;
Function Int32x4_operator_mul_Int32x4;
inline constexpr std::array Int32x4_operator_mul_Int32x4_args = { &Int32x4_operator_mul_Int32x4_arg0 };

/// operator/ with Int32x4
Variable Int32x4_operator_div_Int32x4_arg0;
Function Int32x4_operator_div_Int32x4;
inline constexpr std::array Int32x4_operator_div_Int32x4_args = { &Int32x4_operator_div_Int32x4_arg0 };

/// operator% with Int32x4
Variable Int32x4_operator_mod_Int32x4_arg0;
Function Int32x4_operator_mod_Int32x4;
inline constexpr std::array Int32x4_operator_mod_Int32x4_args = { &Int32x4_operator_mod_Int32x4_arg0 };

/// operator+= with Int32x4
Variable Int32x4_operator_addasg_Int32x4_arg0;
Function Int32x4_operator_addasg_Int32x4;
inline constexpr std::array Int32x4_operator_addasg_Int32x4_args = { &Int32x4_operator_addasg_Int32x4_arg0 };

/// operator-= with Int32x4
Variable Int32x4_operator_subasg_Int32x4_arg0;
Function Int32x4_operator_subasg_Int32x4;
inline constexpr std::array Int32x4_operator_subasg_Int32x4_args = { &Int32x4_operator_subasg_Int32x4_arg0 };

/// operator*= with Int32x4
Variable Int32x4_operator_mulasg_Int32x4_arg0;
Function Int32x4_operator_mulasg_Int32x4;
inline constexpr std::array Int32x4_operator_mulasg_Int32x4_args = { &Int32x4_operator_mulasg_Int32x4_arg0 };

/// operator/= with Int32x4
Variable Int32x4_operator_divasg_Int32x4_arg0;
Function Int32x4_operator_divasg_Int32x4;
inline constexpr std::array Int32x4_operator_divasg_Int32x4_args = { &Int32x4_operator_divasg_Int32x4_arg0 };

/// operator< with Int32x4
Variable Int32x4_operator_lt_Int32x4_arg0;
Function Int32x4_operator_lt_Int32x4;
inline constexpr std::array Int32x4_operator_lt_Int32x4_args = { &Int32x4_operator_lt_Int32x4_arg0 };

/// operator<= with Int32x4
Variable Int32x4_operator_lte_Int32x4_arg0;
Function Int32x4_operator_lte_Int32x4;
inline constexpr std::array Int32x4_operator_lte_Int32x4_args = { &Int32x4_operator_lte_Int32x4_arg0 };

/// operator> with Int32x4
Variable Int32x4_operator_gt_Int32x4_arg0;
Function Int32x4_operator_gt_Int32x4;
inline constexpr std::array Int32x4_operator_gt_Int32x4_args = { &Int32x4_operator_gt_Int32x4_arg0 };

/// operator>= with Int32x4
Variable Int32x4_operator_gte_Int32x4_arg0;
Function Int32x4_operator_gte_Int32x4;
inline constexpr std::array Int32x4_operator_gte_Int32x4_args = { &Int32x4_operator_gte_Int32x4_arg0 };

/// operator== with Int32x4
Variable Int32x4_operator_eq_Int32x4_arg0;
Function Int32x4_operator_eq_Int32x4;
inline constexpr std::array Int32x4_operator_eq_Int32x4_args = { &Int32x4_operator_eq_Int32x4_arg0 };

/// operator!= with Int32x4
Variable Int32x4_operator_neq_Int32x4_arg0;
Function Int32x4_operator_neq_Int32x4;
inline constexpr std::array Int32x4_operator_neq_Int32x4_args = { &Int32x4_operator_neq_Int32x4_arg0 };

/// operator* with Float32
Variable Int32x4_operator_scale_Float32_arg0;
Function Int32x4_operator_scale_Float32;
inline constexpr std::array Int32x4_operator_scale_Float32_args = { &Int32x4_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable Int32x4_operator_scale_Float16_arg0;
Function Int32x4_operator_scale_Float16;
inline constexpr std::array Int32x4_operator_scale_Float16_args = { &Int32x4_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable Int32x4_operator_scale_UInt32_arg0;
Function Int32x4_operator_scale_UInt32;
inline constexpr std::array Int32x4_operator_scale_UInt32_args = { &Int32x4_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable Int32x4_operator_scale_UInt16_arg0;
Function Int32x4_operator_scale_UInt16;
inline constexpr std::array Int32x4_operator_scale_UInt16_args = { &Int32x4_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable Int32x4_operator_scale_Int32_arg0;
Function Int32x4_operator_scale_Int32;
inline constexpr std::array Int32x4_operator_scale_Int32_args = { &Int32x4_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable Int32x4_operator_scale_Int16_arg0;
Function Int32x4_operator_scale_Int16;
inline constexpr std::array Int32x4_operator_scale_Int16_args = { &Int32x4_operator_scale_Int16_arg0 };

/// operator| with Int32x4
Variable Int32x4_operator_or_Int32x4_arg0;
Function Int32x4_operator_or_Int32x4;
inline constexpr std::array Int32x4_operator_or_Int32x4_args = { &Int32x4_operator_or_Int32x4_arg0 };

/// operator& with Int32x4
Variable Int32x4_operator_and_Int32x4_arg0;
Function Int32x4_operator_and_Int32x4;
inline constexpr std::array Int32x4_operator_and_Int32x4_args = { &Int32x4_operator_and_Int32x4_arg0 };

/// operator^ with Int32x4
Variable Int32x4_operator_xor_Int32x4_arg0;
Function Int32x4_operator_xor_Int32x4;
inline constexpr std::array Int32x4_operator_xor_Int32x4_args = { &Int32x4_operator_xor_Int32x4_arg0 };

/// operator<< with Int32x4
Variable Int32x4_operator_lsh_Int32x4_arg0;
Function Int32x4_operator_lsh_Int32x4;
inline constexpr std::array Int32x4_operator_lsh_Int32x4_args = { &Int32x4_operator_lsh_Int32x4_arg0 };

/// operator>> with Int32x4
Variable Int32x4_operator_rsh_Int32x4_arg0;
Function Int32x4_operator_rsh_Int32x4;
inline constexpr std::array Int32x4_operator_rsh_Int32x4_args = { &Int32x4_operator_rsh_Int32x4_arg0 };

/// operator|= with Int32x4
Variable Int32x4_operator_orasg_Int32x4_arg0;
Function Int32x4_operator_orasg_Int32x4;
inline constexpr std::array Int32x4_operator_orasg_Int32x4_args = { &Int32x4_operator_orasg_Int32x4_arg0 };

/// operator&= with Int32x4
Variable Int32x4_operator_andasg_Int32x4_arg0;
Function Int32x4_operator_andasg_Int32x4;
inline constexpr std::array Int32x4_operator_andasg_Int32x4_args = { &Int32x4_operator_andasg_Int32x4_arg0 };

/// operator^= with Int32x4
Variable Int32x4_operator_xorasg_Int32x4_arg0;
Function Int32x4_operator_xorasg_Int32x4;
inline constexpr std::array Int32x4_operator_xorasg_Int32x4_args = { &Int32x4_operator_xorasg_Int32x4_arg0 };

/// operator<<= with Int32x4
Variable Int32x4_operator_lshasg_Int32x4_arg0;
Function Int32x4_operator_lshasg_Int32x4;
inline constexpr std::array Int32x4_operator_lshasg_Int32x4_args = { &Int32x4_operator_lshasg_Int32x4_arg0 };

/// operator>>= with Int32x4
Variable Int32x4_operator_rhsasg_Int32x4_arg0;
Function Int32x4_operator_rhsasg_Int32x4;
inline constexpr std::array Int32x4_operator_rhsasg_Int32x4_args = { &Int32x4_operator_rhsasg_Int32x4_arg0 };

Int32x4::Int32x4()
{
    this->name = "i32x4";
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    /// i32x4 with Float32x4
    Int32x4_convert_Float32x4_arg0.name = "val"_c;
    Int32x4_convert_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Int32x4_convert_Float32x4.documentation = "Convert f32x4 to i32x4"_c;
    Int32x4_convert_Float32x4.name = "i32x4"_c;
    Int32x4_convert_Float32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_convert_Float32x4.parameters = Int32x4_convert_Float32x4_args;
    Symbol::Resolved(&Int32x4_convert_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Int32x4_convert_Float32x4)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Float32
    Int32x4_splat_Float32_arg0.name = "val"_c;
    Int32x4_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Int32x4_splat_Float32.documentation = "Splat f32x4 to i32x4"_c;
    Int32x4_splat_Float32.name = "i32x4"_c;
    Int32x4_splat_Float32.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_splat_Float32.parameters = Int32x4_splat_Float32_args;
    Symbol::Resolved(&Int32x4_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x4_splat_Float32)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with UInt32x4
    Int32x4_convert_UInt32x4_arg0.name = "val"_c;
    Int32x4_convert_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Int32x4_convert_UInt32x4.documentation = "Convert u32x4 to i32x4"_c;
    Int32x4_convert_UInt32x4.name = "i32x4"_c;
    Int32x4_convert_UInt32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_convert_UInt32x4.parameters = Int32x4_convert_UInt32x4_args;
    Symbol::Resolved(&Int32x4_convert_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&Int32x4_convert_UInt32x4)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with UInt32
    Int32x4_splat_UInt32_arg0.name = "val"_c;
    Int32x4_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int32x4_splat_UInt32.documentation = "Splat u32x4 to i32x4"_c;
    Int32x4_splat_UInt32.name = "i32x4"_c;
    Int32x4_splat_UInt32.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_splat_UInt32.parameters = Int32x4_splat_UInt32_args;
    Symbol::Resolved(&Int32x4_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x4_splat_UInt32)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32x4
    Int32x4_convert_Int32x4_arg0.name = "val"_c;
    Int32x4_convert_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_convert_Int32x4.documentation = "Convert i32x4 to i32x4"_c;
    Int32x4_convert_Int32x4.name = "i32x4"_c;
    Int32x4_convert_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_convert_Int32x4.parameters = Int32x4_convert_Int32x4_args;
    Symbol::Resolved(&Int32x4_convert_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_convert_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32
    Int32x4_splat_Int32_arg0.name = "val"_c;
    Int32x4_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32x4_splat_Int32.documentation = "Splat i32x4 to i32x4"_c;
    Int32x4_splat_Int32.name = "i32x4"_c;
    Int32x4_splat_Int32.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_splat_Int32.parameters = Int32x4_splat_Int32_args;
    Symbol::Resolved(&Int32x4_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_splat_Int32)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Float16x4
    Int32x4_convert_Float16x4_arg0.name = "val"_c;
    Int32x4_convert_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Int32x4_convert_Float16x4.documentation = "Convert f16x4 to i32x4"_c;
    Int32x4_convert_Float16x4.name = "i32x4"_c;
    Int32x4_convert_Float16x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_convert_Float16x4.parameters = Int32x4_convert_Float16x4_args;
    Symbol::Resolved(&Int32x4_convert_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Int32x4_convert_Float16x4)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Float16
    Int32x4_splat_Float16_arg0.name = "val"_c;
    Int32x4_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Int32x4_splat_Float16.documentation = "Splat f16x4 to i32x4"_c;
    Int32x4_splat_Float16.name = "i32x4"_c;
    Int32x4_splat_Float16.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_splat_Float16.parameters = Int32x4_splat_Float16_args;
    Symbol::Resolved(&Int32x4_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int32x4_splat_Float16)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with UInt16x4
    Int32x4_convert_UInt16x4_arg0.name = "val"_c;
    Int32x4_convert_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Int32x4_convert_UInt16x4.documentation = "Convert u16x4 to i32x4"_c;
    Int32x4_convert_UInt16x4.name = "i32x4"_c;
    Int32x4_convert_UInt16x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_convert_UInt16x4.parameters = Int32x4_convert_UInt16x4_args;
    Symbol::Resolved(&Int32x4_convert_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&Int32x4_convert_UInt16x4)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with UInt16
    Int32x4_splat_UInt16_arg0.name = "val"_c;
    Int32x4_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int32x4_splat_UInt16.documentation = "Splat u16x4 to i32x4"_c;
    Int32x4_splat_UInt16.name = "i32x4"_c;
    Int32x4_splat_UInt16.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_splat_UInt16.parameters = Int32x4_splat_UInt16_args;
    Symbol::Resolved(&Int32x4_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x4_splat_UInt16)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int16x4
    Int32x4_convert_Int16x4_arg0.name = "val"_c;
    Int32x4_convert_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int32x4_convert_Int16x4.documentation = "Convert i16x4 to i32x4"_c;
    Int32x4_convert_Int16x4.name = "i32x4"_c;
    Int32x4_convert_Int16x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_convert_Int16x4.parameters = Int32x4_convert_Int16x4_args;
    Symbol::Resolved(&Int32x4_convert_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int32x4_convert_Int16x4)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int16
    Int32x4_splat_Int16_arg0.name = "val"_c;
    Int32x4_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int32x4_splat_Int16.documentation = "Splat i16x4 to i32x4"_c;
    Int32x4_splat_Int16.name = "i32x4"_c;
    Int32x4_splat_Int16.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_splat_Int16.parameters = Int32x4_splat_Int16_args;
    Symbol::Resolved(&Int32x4_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x4_splat_Int16)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32, Int32, Int32, Int32
    Int32x4_ctor0_arg0_Int32.name = "_arg0"_c;
    Int32x4_ctor0_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor0_arg1_Int32.name = "_arg1"_c;
    Int32x4_ctor0_arg1_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor0_arg2_Int32.name = "_arg2"_c;
    Int32x4_ctor0_arg2_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor0_arg3_Int32.name = "_arg3"_c;
    Int32x4_ctor0_arg3_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor0.name = "i32x4"_c;
    Int32x4_ctor0.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_ctor0.parameters = Int32x4_ctor0_args;
    Symbol::Resolved(&Int32x4_ctor0_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor0_arg1_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor0_arg2_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor0_arg3_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor0)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32x2, Int32, Int32
    Int32x4_ctor1_arg0_Int32x2.name = "_arg0"_c;
    Int32x4_ctor1_arg0_Int32x2.type = Type::FullType{ Int32x2Type.name };
    Int32x4_ctor1_arg1_Int32.name = "_arg1"_c;
    Int32x4_ctor1_arg1_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor1_arg2_Int32.name = "_arg2"_c;
    Int32x4_ctor1_arg2_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor1.name = "i32x4"_c;
    Int32x4_ctor1.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_ctor1.parameters = Int32x4_ctor1_args;
    Symbol::Resolved(&Int32x4_ctor1_arg0_Int32x2)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x4_ctor1_arg1_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor1_arg2_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor1)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32, Int32x2, Int32
    Int32x4_ctor2_arg0_Int32.name = "_arg0"_c;
    Int32x4_ctor2_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor2_arg1_Int32x2.name = "_arg1"_c;
    Int32x4_ctor2_arg1_Int32x2.type = Type::FullType{ Int32x2Type.name };
    Int32x4_ctor2_arg2_Int32.name = "_arg2"_c;
    Int32x4_ctor2_arg2_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor2.name = "i32x4"_c;
    Int32x4_ctor2.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_ctor2.parameters = Int32x4_ctor2_args;
    Symbol::Resolved(&Int32x4_ctor2_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor2_arg1_Int32x2)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x4_ctor2_arg2_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor2)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32, Int32, Int32x2
    Int32x4_ctor3_arg0_Int32.name = "_arg0"_c;
    Int32x4_ctor3_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor3_arg1_Int32.name = "_arg1"_c;
    Int32x4_ctor3_arg1_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor3_arg2_Int32x2.name = "_arg2"_c;
    Int32x4_ctor3_arg2_Int32x2.type = Type::FullType{ Int32x2Type.name };
    Int32x4_ctor3.name = "i32x4"_c;
    Int32x4_ctor3.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_ctor3.parameters = Int32x4_ctor3_args;
    Symbol::Resolved(&Int32x4_ctor3_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor3_arg1_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor3_arg2_Int32x2)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x4_ctor3)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32x3, Int32
    Int32x4_ctor4_arg0_Int32x3.name = "_arg0"_c;
    Int32x4_ctor4_arg0_Int32x3.type = Type::FullType{ Int32x3Type.name };
    Int32x4_ctor4_arg1_Int32.name = "_arg1"_c;
    Int32x4_ctor4_arg1_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor4.name = "i32x4"_c;
    Int32x4_ctor4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_ctor4.parameters = Int32x4_ctor4_args;
    Symbol::Resolved(&Int32x4_ctor4_arg0_Int32x3)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x4_ctor4_arg1_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor4)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32, Int32x3
    Int32x4_ctor5_arg0_Int32.name = "_arg0"_c;
    Int32x4_ctor5_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor5_arg1_Int32x3.name = "_arg1"_c;
    Int32x4_ctor5_arg1_Int32x3.type = Type::FullType{ Int32x3Type.name };
    Int32x4_ctor5.name = "i32x4"_c;
    Int32x4_ctor5.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_ctor5.parameters = Int32x4_ctor5_args;
    Symbol::Resolved(&Int32x4_ctor5_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor5_arg1_Int32x3)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x4_ctor5)->returnTypeSymbol = &Int32x4Type;

    /// operator[] with Int32
    Int32x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Int32x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32x4_operator_index_Int32.name = "operator[]"_c;
    Int32x4_operator_index_Int32.returnType = Type::FullType { Int32Type.name };
    Int32x4_operator_index_Int32.parameters = Int32x4_operator_index_Int32_args;
    Symbol::Resolved(&Int32x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt32
    Int32x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int32x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int32x4_operator_index_UInt32.name = "operator[]"_c;
    Int32x4_operator_index_UInt32.returnType = Type::FullType { Int32Type.name };
    Int32x4_operator_index_UInt32.parameters = Int32x4_operator_index_UInt32_args;
    Symbol::Resolved(&Int32x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x4_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    /// operator[] with Int16
    Int32x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Int32x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int32x4_operator_index_Int16.name = "operator[]"_c;
    Int32x4_operator_index_Int16.returnType = Type::FullType { Int32Type.name };
    Int32x4_operator_index_Int16.parameters = Int32x4_operator_index_Int16_args;
    Symbol::Resolved(&Int32x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x4_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt16
    Int32x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int32x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int32x4_operator_index_UInt16.name = "operator[]"_c;
    Int32x4_operator_index_UInt16.returnType = Type::FullType { Int32Type.name };
    Int32x4_operator_index_UInt16.parameters = Int32x4_operator_index_UInt16_args;
    Symbol::Resolved(&Int32x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x4_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    /// operator+ with Int32x4
    Int32x4_operator_add_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_add_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_add_Int32x4.name = "operator+"_c;
    Int32x4_operator_add_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_add_Int32x4.parameters = Int32x4_operator_add_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_add_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_add_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator- with Int32x4
    Int32x4_operator_sub_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_sub_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_sub_Int32x4.name = "operator-"_c;
    Int32x4_operator_sub_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_sub_Int32x4.parameters = Int32x4_operator_sub_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_sub_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_sub_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator* with Int32x4
    Int32x4_operator_mul_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_mul_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_mul_Int32x4.name = "operator*"_c;
    Int32x4_operator_mul_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_mul_Int32x4.parameters = Int32x4_operator_mul_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_mul_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_mul_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator/ with Int32x4
    Int32x4_operator_div_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_div_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_div_Int32x4.name = "operator/"_c;
    Int32x4_operator_div_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_div_Int32x4.parameters = Int32x4_operator_div_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_div_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_div_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator% with Int32x4
    Int32x4_operator_mod_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_mod_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_mod_Int32x4.name = "operator%"_c;
    Int32x4_operator_mod_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_mod_Int32x4.parameters = Int32x4_operator_mod_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_mod_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_mod_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator+= with Int32x4
    Int32x4_operator_addasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_addasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_addasg_Int32x4.name = "operator+="_c;
    Int32x4_operator_addasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_addasg_Int32x4.parameters = Int32x4_operator_addasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_addasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_addasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator-= with Int32x4
    Int32x4_operator_subasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_subasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_subasg_Int32x4.name = "operator-="_c;
    Int32x4_operator_subasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_subasg_Int32x4.parameters = Int32x4_operator_subasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_subasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_subasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator*= with Int32x4
    Int32x4_operator_mulasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_mulasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_mulasg_Int32x4.name = "operator*="_c;
    Int32x4_operator_mulasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_mulasg_Int32x4.parameters = Int32x4_operator_mulasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_mulasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_mulasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator/= with Int32x4
    Int32x4_operator_divasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_divasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_divasg_Int32x4.name = "operator/="_c;
    Int32x4_operator_divasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_divasg_Int32x4.parameters = Int32x4_operator_divasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_divasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_divasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator< with Int32x4
    Int32x4_operator_lt_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_lt_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_lt_Int32x4.name = "operator<"_c;
    Int32x4_operator_lt_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_lt_Int32x4.parameters = Int32x4_operator_lt_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_lt_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_lt_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator<= with Int32x4
    Int32x4_operator_lte_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_lte_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_lte_Int32x4.name = "operator<="_c;
    Int32x4_operator_lte_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_lte_Int32x4.parameters = Int32x4_operator_lte_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_lte_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_lte_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator> with Int32x4
    Int32x4_operator_gt_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_gt_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_gt_Int32x4.name = "operator>"_c;
    Int32x4_operator_gt_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_gt_Int32x4.parameters = Int32x4_operator_gt_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_gt_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_gt_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator>= with Int32x4
    Int32x4_operator_gte_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_gte_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_gte_Int32x4.name = "operator>="_c;
    Int32x4_operator_gte_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_gte_Int32x4.parameters = Int32x4_operator_gte_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_gte_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_gte_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator== with Int32x4
    Int32x4_operator_eq_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_eq_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_eq_Int32x4.name = "operator=="_c;
    Int32x4_operator_eq_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_eq_Int32x4.parameters = Int32x4_operator_eq_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_eq_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_eq_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator!= with Int32x4
    Int32x4_operator_neq_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_neq_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_neq_Int32x4.name = "operator!="_c;
    Int32x4_operator_neq_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_neq_Int32x4.parameters = Int32x4_operator_neq_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_neq_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_neq_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator* with Float32
    Int32x4_operator_scale_Float32_arg0.name = "_arg0"_c;
    Int32x4_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Int32x4_operator_scale_Float32.name = "operator*"_c;
    Int32x4_operator_scale_Float32.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_scale_Float32.parameters = Int32x4_operator_scale_Float32_args;
    Symbol::Resolved(&Int32x4_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x4_operator_scale_Float32)->returnTypeSymbol = &Int32x4Type;

    /// operator* with Float16
    Int32x4_operator_scale_Float16_arg0.name = "_arg0"_c;
    Int32x4_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Int32x4_operator_scale_Float16.name = "operator*"_c;
    Int32x4_operator_scale_Float16.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_scale_Float16.parameters = Int32x4_operator_scale_Float16_args;
    Symbol::Resolved(&Int32x4_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int32x4_operator_scale_Float16)->returnTypeSymbol = &Int32x4Type;

    /// operator* with UInt32
    Int32x4_operator_scale_UInt32_arg0.name = "_arg0"_c;
    Int32x4_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int32x4_operator_scale_UInt32.name = "operator*"_c;
    Int32x4_operator_scale_UInt32.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_scale_UInt32.parameters = Int32x4_operator_scale_UInt32_args;
    Symbol::Resolved(&Int32x4_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x4_operator_scale_UInt32)->returnTypeSymbol = &Int32x4Type;

    /// operator* with UInt16
    Int32x4_operator_scale_UInt16_arg0.name = "_arg0"_c;
    Int32x4_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int32x4_operator_scale_UInt16.name = "operator*"_c;
    Int32x4_operator_scale_UInt16.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_scale_UInt16.parameters = Int32x4_operator_scale_UInt16_args;
    Symbol::Resolved(&Int32x4_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x4_operator_scale_UInt16)->returnTypeSymbol = &Int32x4Type;

    /// operator* with Int32
    Int32x4_operator_scale_Int32_arg0.name = "_arg0"_c;
    Int32x4_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int32x4_operator_scale_Int32.name = "operator*"_c;
    Int32x4_operator_scale_Int32.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_scale_Int32.parameters = Int32x4_operator_scale_Int32_args;
    Symbol::Resolved(&Int32x4_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_operator_scale_Int32)->returnTypeSymbol = &Int32x4Type;

    /// operator* with Int16
    Int32x4_operator_scale_Int16_arg0.name = "_arg0"_c;
    Int32x4_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int32x4_operator_scale_Int16.name = "operator*"_c;
    Int32x4_operator_scale_Int16.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_scale_Int16.parameters = Int32x4_operator_scale_Int16_args;
    Symbol::Resolved(&Int32x4_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x4_operator_scale_Int16)->returnTypeSymbol = &Int32x4Type;

    /// operator| with Int32x4
    Int32x4_operator_or_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_or_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_or_Int32x4.name = "operator|"_c;
    Int32x4_operator_or_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_or_Int32x4.parameters = Int32x4_operator_or_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_or_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_or_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator& with Int32x4
    Int32x4_operator_and_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_and_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_and_Int32x4.name = "operator&"_c;
    Int32x4_operator_and_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_and_Int32x4.parameters = Int32x4_operator_and_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_and_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_and_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator^ with Int32x4
    Int32x4_operator_xor_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_xor_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_xor_Int32x4.name = "operator^"_c;
    Int32x4_operator_xor_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_xor_Int32x4.parameters = Int32x4_operator_xor_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_xor_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_xor_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator<< with Int32x4
    Int32x4_operator_lsh_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_lsh_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_lsh_Int32x4.name = "operator<<"_c;
    Int32x4_operator_lsh_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_lsh_Int32x4.parameters = Int32x4_operator_lsh_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_lsh_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_lsh_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator>> with Int32x4
    Int32x4_operator_rsh_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_rsh_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_rsh_Int32x4.name = "operator>>"_c;
    Int32x4_operator_rsh_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_rsh_Int32x4.parameters = Int32x4_operator_rsh_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_rsh_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_rsh_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator|= with Int32x4
    Int32x4_operator_orasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_orasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_orasg_Int32x4.name = "operator|="_c;
    Int32x4_operator_orasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_orasg_Int32x4.parameters = Int32x4_operator_orasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_orasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_orasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator&= with Int32x4
    Int32x4_operator_andasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_andasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_andasg_Int32x4.name = "operator&="_c;
    Int32x4_operator_andasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_andasg_Int32x4.parameters = Int32x4_operator_andasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_andasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_andasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator^= with Int32x4
    Int32x4_operator_xorasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_xorasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_xorasg_Int32x4.name = "operator^="_c;
    Int32x4_operator_xorasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_xorasg_Int32x4.parameters = Int32x4_operator_xorasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_xorasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_xorasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator<<= with Int32x4
    Int32x4_operator_lshasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_lshasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_lshasg_Int32x4.name = "operator<<="_c;
    Int32x4_operator_lshasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_lshasg_Int32x4.parameters = Int32x4_operator_lshasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_lshasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_lshasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator>>= with Int32x4
    Int32x4_operator_rhsasg_Int32x4_arg0.name = "_arg0"_c;
    Int32x4_operator_rhsasg_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_rhsasg_Int32x4.name = "operator>>="_c;
    Int32x4_operator_rhsasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_rhsasg_Int32x4.parameters = Int32x4_operator_rhsasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_rhsasg_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_rhsasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Int32x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int32x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int32x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int32x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int32x4_operator_add_Int32x4 },
    std::pair{ "operator-"_c, &Int32x4_operator_sub_Int32x4 },
    std::pair{ "operator*"_c, &Int32x4_operator_mul_Int32x4 },
    std::pair{ "operator/"_c, &Int32x4_operator_div_Int32x4 },
    std::pair{ "operator%"_c, &Int32x4_operator_mod_Int32x4 },
    std::pair{ "operator+="_c, &Int32x4_operator_addasg_Int32x4 },
    std::pair{ "operator-="_c, &Int32x4_operator_subasg_Int32x4 },
    std::pair{ "operator*="_c, &Int32x4_operator_mulasg_Int32x4 },
    std::pair{ "operator/="_c, &Int32x4_operator_divasg_Int32x4 },
    std::pair{ "operator<"_c, &Int32x4_operator_lt_Int32x4 },
    std::pair{ "operator<="_c, &Int32x4_operator_lte_Int32x4 },
    std::pair{ "operator>"_c, &Int32x4_operator_gt_Int32x4 },
    std::pair{ "operator>="_c, &Int32x4_operator_gte_Int32x4 },
    std::pair{ "operator=="_c, &Int32x4_operator_eq_Int32x4 },
    std::pair{ "operator!="_c, &Int32x4_operator_neq_Int32x4 },
    std::pair{ "operator*"_c, &Int32x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int32x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int32x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int32x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int32x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int32x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int32x4_operator_or_Int32x4 },
    std::pair{ "operator&"_c, &Int32x4_operator_and_Int32x4 },
    std::pair{ "operator^"_c, &Int32x4_operator_xor_Int32x4 },
    std::pair{ "operator<<"_c, &Int32x4_operator_lsh_Int32x4 },
    std::pair{ "operator>>"_c, &Int32x4_operator_rsh_Int32x4 },
    std::pair{ "operator|="_c, &Int32x4_operator_orasg_Int32x4 },
    std::pair{ "operator&="_c, &Int32x4_operator_andasg_Int32x4 },
    std::pair{ "operator^="_c, &Int32x4_operator_xorasg_Int32x4 },
    std::pair{ "operator<<="_c, &Int32x4_operator_lshasg_Int32x4 },
    std::pair{ "operator>>="_c, &Int32x4_operator_rhsasg_Int32x4 }
    } };
}
Int32x4 Int32x4Type;

/// b8x4 with UInt32x4
Variable Bool8x4_convert_UInt32x4_arg0;
Function Bool8x4_convert_UInt32x4;
inline constexpr std::array Bool8x4_convert_UInt32x4_args = { &Bool8x4_convert_UInt32x4_arg0 };

/// b8x4 with UInt32
Variable Bool8x4_splat_UInt32_arg0;
Function Bool8x4_splat_UInt32;
inline constexpr std::array Bool8x4_splat_UInt32_args = { &Bool8x4_splat_UInt32_arg0 };

/// b8x4 with Int32x4
Variable Bool8x4_convert_Int32x4_arg0;
Function Bool8x4_convert_Int32x4;
inline constexpr std::array Bool8x4_convert_Int32x4_args = { &Bool8x4_convert_Int32x4_arg0 };

/// b8x4 with Int32
Variable Bool8x4_splat_Int32_arg0;
Function Bool8x4_splat_Int32;
inline constexpr std::array Bool8x4_splat_Int32_args = { &Bool8x4_splat_Int32_arg0 };

/// b8x4 with UInt16x4
Variable Bool8x4_convert_UInt16x4_arg0;
Function Bool8x4_convert_UInt16x4;
inline constexpr std::array Bool8x4_convert_UInt16x4_args = { &Bool8x4_convert_UInt16x4_arg0 };

/// b8x4 with UInt16
Variable Bool8x4_splat_UInt16_arg0;
Function Bool8x4_splat_UInt16;
inline constexpr std::array Bool8x4_splat_UInt16_args = { &Bool8x4_splat_UInt16_arg0 };

/// b8x4 with Int16x4
Variable Bool8x4_convert_Int16x4_arg0;
Function Bool8x4_convert_Int16x4;
inline constexpr std::array Bool8x4_convert_Int16x4_args = { &Bool8x4_convert_Int16x4_arg0 };

/// b8x4 with Int16
Variable Bool8x4_splat_Int16_arg0;
Function Bool8x4_splat_Int16;
inline constexpr std::array Bool8x4_splat_Int16_args = { &Bool8x4_splat_Int16_arg0 };

/// b8x4 with Bool8, Bool8, Bool8, Bool8
Variable Bool8x4_ctor0_arg0_Bool8;
Variable Bool8x4_ctor0_arg1_Bool8;
Variable Bool8x4_ctor0_arg2_Bool8;
Variable Bool8x4_ctor0_arg3_Bool8;
Function Bool8x4_ctor0;
inline constexpr std::array Bool8x4_ctor0_args = { &Bool8x4_ctor0_arg0_Bool8, &Bool8x4_ctor0_arg1_Bool8, &Bool8x4_ctor0_arg2_Bool8, &Bool8x4_ctor0_arg3_Bool8 };

/// b8x4 with Bool8x2, Bool8, Bool8
Variable Bool8x4_ctor1_arg0_Bool8x2;
Variable Bool8x4_ctor1_arg1_Bool8;
Variable Bool8x4_ctor1_arg2_Bool8;
Function Bool8x4_ctor1;
inline constexpr std::array Bool8x4_ctor1_args = { &Bool8x4_ctor1_arg0_Bool8x2, &Bool8x4_ctor1_arg1_Bool8, &Bool8x4_ctor1_arg2_Bool8 };

/// b8x4 with Bool8, Bool8x2, Bool8
Variable Bool8x4_ctor2_arg0_Bool8;
Variable Bool8x4_ctor2_arg1_Bool8x2;
Variable Bool8x4_ctor2_arg2_Bool8;
Function Bool8x4_ctor2;
inline constexpr std::array Bool8x4_ctor2_args = { &Bool8x4_ctor2_arg0_Bool8, &Bool8x4_ctor2_arg1_Bool8x2, &Bool8x4_ctor2_arg2_Bool8 };

/// b8x4 with Bool8, Bool8, Bool8x2
Variable Bool8x4_ctor3_arg0_Bool8;
Variable Bool8x4_ctor3_arg1_Bool8;
Variable Bool8x4_ctor3_arg2_Bool8x2;
Function Bool8x4_ctor3;
inline constexpr std::array Bool8x4_ctor3_args = { &Bool8x4_ctor3_arg0_Bool8, &Bool8x4_ctor3_arg1_Bool8, &Bool8x4_ctor3_arg2_Bool8x2 };

/// b8x4 with Bool8x3, Bool8
Variable Bool8x4_ctor4_arg0_Bool8x3;
Variable Bool8x4_ctor4_arg1_Bool8;
Function Bool8x4_ctor4;
inline constexpr std::array Bool8x4_ctor4_args = { &Bool8x4_ctor4_arg0_Bool8x3, &Bool8x4_ctor4_arg1_Bool8 };

/// b8x4 with Bool8, Bool8x3
Variable Bool8x4_ctor5_arg0_Bool8;
Variable Bool8x4_ctor5_arg1_Bool8x3;
Function Bool8x4_ctor5;
inline constexpr std::array Bool8x4_ctor5_args = { &Bool8x4_ctor5_arg0_Bool8, &Bool8x4_ctor5_arg1_Bool8x3 };

/// operator[] with Int32
Variable Bool8x4_operator_index_Int32_arg0;
Function Bool8x4_operator_index_Int32;
inline constexpr std::array Bool8x4_operator_index_Int32_args = { &Bool8x4_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Bool8x4_operator_index_UInt32_arg0;
Function Bool8x4_operator_index_UInt32;
inline constexpr std::array Bool8x4_operator_index_UInt32_args = { &Bool8x4_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Bool8x4_operator_index_Int16_arg0;
Function Bool8x4_operator_index_Int16;
inline constexpr std::array Bool8x4_operator_index_Int16_args = { &Bool8x4_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Bool8x4_operator_index_UInt16_arg0;
Function Bool8x4_operator_index_UInt16;
inline constexpr std::array Bool8x4_operator_index_UInt16_args = { &Bool8x4_operator_index_UInt16_arg0 };

/// operator|| with Bool8x4
Variable Bool8x4_operator_oror_Bool8x4_arg0;
Function Bool8x4_operator_oror_Bool8x4;
inline constexpr std::array Bool8x4_operator_oror_Bool8x4_args = { &Bool8x4_operator_oror_Bool8x4_arg0 };

/// operator&& with Bool8x4
Variable Bool8x4_operator_andand_Bool8x4_arg0;
Function Bool8x4_operator_andand_Bool8x4;
inline constexpr std::array Bool8x4_operator_andand_Bool8x4_args = { &Bool8x4_operator_andand_Bool8x4_arg0 };

/// operator== with Bool8x4
Variable Bool8x4_operator_eq_Bool8x4_arg0;
Function Bool8x4_operator_eq_Bool8x4;
inline constexpr std::array Bool8x4_operator_eq_Bool8x4_args = { &Bool8x4_operator_eq_Bool8x4_arg0 };

/// operator!= with Bool8x4
Variable Bool8x4_operator_neq_Bool8x4_arg0;
Function Bool8x4_operator_neq_Bool8x4;
inline constexpr std::array Bool8x4_operator_neq_Bool8x4_args = { &Bool8x4_operator_neq_Bool8x4_arg0 };

Bool8x4::Bool8x4()
{
    this->name = "b8x4";
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    /// b8x4 with UInt32x4
    Bool8x4_convert_UInt32x4_arg0.name = "val"_c;
    Bool8x4_convert_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Bool8x4_convert_UInt32x4.documentation = "Convert u32x4 to b8x4"_c;
    Bool8x4_convert_UInt32x4.name = "b8x4"_c;
    Bool8x4_convert_UInt32x4.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_convert_UInt32x4.parameters = Bool8x4_convert_UInt32x4_args;
    Symbol::Resolved(&Bool8x4_convert_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&Bool8x4_convert_UInt32x4)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with UInt32
    Bool8x4_splat_UInt32_arg0.name = "val"_c;
    Bool8x4_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Bool8x4_splat_UInt32.documentation = "Splat u32x4 to b8x4"_c;
    Bool8x4_splat_UInt32.name = "b8x4"_c;
    Bool8x4_splat_UInt32.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_splat_UInt32.parameters = Bool8x4_splat_UInt32_args;
    Symbol::Resolved(&Bool8x4_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x4_splat_UInt32)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Int32x4
    Bool8x4_convert_Int32x4_arg0.name = "val"_c;
    Bool8x4_convert_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Bool8x4_convert_Int32x4.documentation = "Convert i32x4 to b8x4"_c;
    Bool8x4_convert_Int32x4.name = "b8x4"_c;
    Bool8x4_convert_Int32x4.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_convert_Int32x4.parameters = Bool8x4_convert_Int32x4_args;
    Symbol::Resolved(&Bool8x4_convert_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Bool8x4_convert_Int32x4)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Int32
    Bool8x4_splat_Int32_arg0.name = "val"_c;
    Bool8x4_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Bool8x4_splat_Int32.documentation = "Splat i32x4 to b8x4"_c;
    Bool8x4_splat_Int32.name = "b8x4"_c;
    Bool8x4_splat_Int32.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_splat_Int32.parameters = Bool8x4_splat_Int32_args;
    Symbol::Resolved(&Bool8x4_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x4_splat_Int32)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with UInt16x4
    Bool8x4_convert_UInt16x4_arg0.name = "val"_c;
    Bool8x4_convert_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Bool8x4_convert_UInt16x4.documentation = "Convert u16x4 to b8x4"_c;
    Bool8x4_convert_UInt16x4.name = "b8x4"_c;
    Bool8x4_convert_UInt16x4.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_convert_UInt16x4.parameters = Bool8x4_convert_UInt16x4_args;
    Symbol::Resolved(&Bool8x4_convert_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&Bool8x4_convert_UInt16x4)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with UInt16
    Bool8x4_splat_UInt16_arg0.name = "val"_c;
    Bool8x4_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Bool8x4_splat_UInt16.documentation = "Splat u16x4 to b8x4"_c;
    Bool8x4_splat_UInt16.name = "b8x4"_c;
    Bool8x4_splat_UInt16.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_splat_UInt16.parameters = Bool8x4_splat_UInt16_args;
    Symbol::Resolved(&Bool8x4_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x4_splat_UInt16)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Int16x4
    Bool8x4_convert_Int16x4_arg0.name = "val"_c;
    Bool8x4_convert_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Bool8x4_convert_Int16x4.documentation = "Convert i16x4 to b8x4"_c;
    Bool8x4_convert_Int16x4.name = "b8x4"_c;
    Bool8x4_convert_Int16x4.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_convert_Int16x4.parameters = Bool8x4_convert_Int16x4_args;
    Symbol::Resolved(&Bool8x4_convert_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Bool8x4_convert_Int16x4)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Int16
    Bool8x4_splat_Int16_arg0.name = "val"_c;
    Bool8x4_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Bool8x4_splat_Int16.documentation = "Splat i16x4 to b8x4"_c;
    Bool8x4_splat_Int16.name = "b8x4"_c;
    Bool8x4_splat_Int16.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_splat_Int16.parameters = Bool8x4_splat_Int16_args;
    Symbol::Resolved(&Bool8x4_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x4_splat_Int16)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Bool8, Bool8, Bool8, Bool8
    Bool8x4_ctor0_arg0_Bool8.name = "_arg0"_c;
    Bool8x4_ctor0_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor0_arg1_Bool8.name = "_arg1"_c;
    Bool8x4_ctor0_arg1_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor0_arg2_Bool8.name = "_arg2"_c;
    Bool8x4_ctor0_arg2_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor0_arg3_Bool8.name = "_arg3"_c;
    Bool8x4_ctor0_arg3_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor0.name = "b8x4"_c;
    Bool8x4_ctor0.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_ctor0.parameters = Bool8x4_ctor0_args;
    Symbol::Resolved(&Bool8x4_ctor0_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor0_arg1_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor0_arg2_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor0_arg3_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor0)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Bool8x2, Bool8, Bool8
    Bool8x4_ctor1_arg0_Bool8x2.name = "_arg0"_c;
    Bool8x4_ctor1_arg0_Bool8x2.type = Type::FullType{ Bool8x2Type.name };
    Bool8x4_ctor1_arg1_Bool8.name = "_arg1"_c;
    Bool8x4_ctor1_arg1_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor1_arg2_Bool8.name = "_arg2"_c;
    Bool8x4_ctor1_arg2_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor1.name = "b8x4"_c;
    Bool8x4_ctor1.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_ctor1.parameters = Bool8x4_ctor1_args;
    Symbol::Resolved(&Bool8x4_ctor1_arg0_Bool8x2)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x4_ctor1_arg1_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor1_arg2_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor1)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Bool8, Bool8x2, Bool8
    Bool8x4_ctor2_arg0_Bool8.name = "_arg0"_c;
    Bool8x4_ctor2_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor2_arg1_Bool8x2.name = "_arg1"_c;
    Bool8x4_ctor2_arg1_Bool8x2.type = Type::FullType{ Bool8x2Type.name };
    Bool8x4_ctor2_arg2_Bool8.name = "_arg2"_c;
    Bool8x4_ctor2_arg2_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor2.name = "b8x4"_c;
    Bool8x4_ctor2.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_ctor2.parameters = Bool8x4_ctor2_args;
    Symbol::Resolved(&Bool8x4_ctor2_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor2_arg1_Bool8x2)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x4_ctor2_arg2_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor2)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Bool8, Bool8, Bool8x2
    Bool8x4_ctor3_arg0_Bool8.name = "_arg0"_c;
    Bool8x4_ctor3_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor3_arg1_Bool8.name = "_arg1"_c;
    Bool8x4_ctor3_arg1_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor3_arg2_Bool8x2.name = "_arg2"_c;
    Bool8x4_ctor3_arg2_Bool8x2.type = Type::FullType{ Bool8x2Type.name };
    Bool8x4_ctor3.name = "b8x4"_c;
    Bool8x4_ctor3.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_ctor3.parameters = Bool8x4_ctor3_args;
    Symbol::Resolved(&Bool8x4_ctor3_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor3_arg1_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor3_arg2_Bool8x2)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x4_ctor3)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Bool8x3, Bool8
    Bool8x4_ctor4_arg0_Bool8x3.name = "_arg0"_c;
    Bool8x4_ctor4_arg0_Bool8x3.type = Type::FullType{ Bool8x3Type.name };
    Bool8x4_ctor4_arg1_Bool8.name = "_arg1"_c;
    Bool8x4_ctor4_arg1_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor4.name = "b8x4"_c;
    Bool8x4_ctor4.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_ctor4.parameters = Bool8x4_ctor4_args;
    Symbol::Resolved(&Bool8x4_ctor4_arg0_Bool8x3)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x4_ctor4_arg1_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor4)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Bool8, Bool8x3
    Bool8x4_ctor5_arg0_Bool8.name = "_arg0"_c;
    Bool8x4_ctor5_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor5_arg1_Bool8x3.name = "_arg1"_c;
    Bool8x4_ctor5_arg1_Bool8x3.type = Type::FullType{ Bool8x3Type.name };
    Bool8x4_ctor5.name = "b8x4"_c;
    Bool8x4_ctor5.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_ctor5.parameters = Bool8x4_ctor5_args;
    Symbol::Resolved(&Bool8x4_ctor5_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor5_arg1_Bool8x3)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x4_ctor5)->returnTypeSymbol = &Bool8x4Type;

    /// operator[] with Int32
    Bool8x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Bool8x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Bool8x4_operator_index_Int32.name = "operator[]"_c;
    Bool8x4_operator_index_Int32.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_index_Int32.parameters = Bool8x4_operator_index_Int32_args;
    Symbol::Resolved(&Bool8x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x4_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt32
    Bool8x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Bool8x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Bool8x4_operator_index_UInt32.name = "operator[]"_c;
    Bool8x4_operator_index_UInt32.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_index_UInt32.parameters = Bool8x4_operator_index_UInt32_args;
    Symbol::Resolved(&Bool8x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x4_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with Int16
    Bool8x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Bool8x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Bool8x4_operator_index_Int16.name = "operator[]"_c;
    Bool8x4_operator_index_Int16.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_index_Int16.parameters = Bool8x4_operator_index_Int16_args;
    Symbol::Resolved(&Bool8x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x4_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt16
    Bool8x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Bool8x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Bool8x4_operator_index_UInt16.name = "operator[]"_c;
    Bool8x4_operator_index_UInt16.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_index_UInt16.parameters = Bool8x4_operator_index_UInt16_args;
    Symbol::Resolved(&Bool8x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x4_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator|| with Bool8x4
    Bool8x4_operator_oror_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_oror_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Bool8x4_operator_oror_Bool8x4.name = "operator||"_c;
    Bool8x4_operator_oror_Bool8x4.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_oror_Bool8x4.parameters = Bool8x4_operator_oror_Bool8x4_args;
    Symbol::Resolved(&Bool8x4_operator_oror_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Bool8x4_operator_oror_Bool8x4)->returnTypeSymbol = &Bool8Type;

    /// operator&& with Bool8x4
    Bool8x4_operator_andand_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_andand_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Bool8x4_operator_andand_Bool8x4.name = "operator&&"_c;
    Bool8x4_operator_andand_Bool8x4.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_andand_Bool8x4.parameters = Bool8x4_operator_andand_Bool8x4_args;
    Symbol::Resolved(&Bool8x4_operator_andand_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Bool8x4_operator_andand_Bool8x4)->returnTypeSymbol = &Bool8Type;

    /// operator== with Bool8x4
    Bool8x4_operator_eq_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_eq_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Bool8x4_operator_eq_Bool8x4.name = "operator=="_c;
    Bool8x4_operator_eq_Bool8x4.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_eq_Bool8x4.parameters = Bool8x4_operator_eq_Bool8x4_args;
    Symbol::Resolved(&Bool8x4_operator_eq_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Bool8x4_operator_eq_Bool8x4)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Bool8x4
    Bool8x4_operator_neq_Bool8x4_arg0.name = "_arg0"_c;
    Bool8x4_operator_neq_Bool8x4_arg0.type = Type::FullType{ Bool8x4Type.name };
    Bool8x4_operator_neq_Bool8x4.name = "operator!="_c;
    Bool8x4_operator_neq_Bool8x4.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_neq_Bool8x4.parameters = Bool8x4_operator_neq_Bool8x4_args;
    Symbol::Resolved(&Bool8x4_operator_neq_Bool8x4_arg0)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Bool8x4_operator_neq_Bool8x4)->returnTypeSymbol = &Bool8Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Bool8x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Bool8x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Bool8x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Bool8x4_operator_index_UInt16 },
    std::pair{ "operator||"_c, &Bool8x4_operator_oror_Bool8x4 },
    std::pair{ "operator&&"_c, &Bool8x4_operator_andand_Bool8x4 },
    std::pair{ "operator=="_c, &Bool8x4_operator_eq_Bool8x4 },
    std::pair{ "operator!="_c, &Bool8x4_operator_neq_Bool8x4 }
    } };
}
Bool8x4 Bool8x4Type;

/// f16x4 with Float32x4
Variable Float16x4_convert_Float32x4_arg0;
Function Float16x4_convert_Float32x4;
inline constexpr std::array Float16x4_convert_Float32x4_args = { &Float16x4_convert_Float32x4_arg0 };

/// f16x4 with Float32
Variable Float16x4_splat_Float32_arg0;
Function Float16x4_splat_Float32;
inline constexpr std::array Float16x4_splat_Float32_args = { &Float16x4_splat_Float32_arg0 };

/// f16x4 with UInt32x4
Variable Float16x4_convert_UInt32x4_arg0;
Function Float16x4_convert_UInt32x4;
inline constexpr std::array Float16x4_convert_UInt32x4_args = { &Float16x4_convert_UInt32x4_arg0 };

/// f16x4 with UInt32
Variable Float16x4_splat_UInt32_arg0;
Function Float16x4_splat_UInt32;
inline constexpr std::array Float16x4_splat_UInt32_args = { &Float16x4_splat_UInt32_arg0 };

/// f16x4 with Int32x4
Variable Float16x4_convert_Int32x4_arg0;
Function Float16x4_convert_Int32x4;
inline constexpr std::array Float16x4_convert_Int32x4_args = { &Float16x4_convert_Int32x4_arg0 };

/// f16x4 with Int32
Variable Float16x4_splat_Int32_arg0;
Function Float16x4_splat_Int32;
inline constexpr std::array Float16x4_splat_Int32_args = { &Float16x4_splat_Int32_arg0 };

/// f16x4 with Float16x4
Variable Float16x4_convert_Float16x4_arg0;
Function Float16x4_convert_Float16x4;
inline constexpr std::array Float16x4_convert_Float16x4_args = { &Float16x4_convert_Float16x4_arg0 };

/// f16x4 with Float16
Variable Float16x4_splat_Float16_arg0;
Function Float16x4_splat_Float16;
inline constexpr std::array Float16x4_splat_Float16_args = { &Float16x4_splat_Float16_arg0 };

/// f16x4 with UInt16x4
Variable Float16x4_convert_UInt16x4_arg0;
Function Float16x4_convert_UInt16x4;
inline constexpr std::array Float16x4_convert_UInt16x4_args = { &Float16x4_convert_UInt16x4_arg0 };

/// f16x4 with UInt16
Variable Float16x4_splat_UInt16_arg0;
Function Float16x4_splat_UInt16;
inline constexpr std::array Float16x4_splat_UInt16_args = { &Float16x4_splat_UInt16_arg0 };

/// f16x4 with Int16x4
Variable Float16x4_convert_Int16x4_arg0;
Function Float16x4_convert_Int16x4;
inline constexpr std::array Float16x4_convert_Int16x4_args = { &Float16x4_convert_Int16x4_arg0 };

/// f16x4 with Int16
Variable Float16x4_splat_Int16_arg0;
Function Float16x4_splat_Int16;
inline constexpr std::array Float16x4_splat_Int16_args = { &Float16x4_splat_Int16_arg0 };

/// f16x4 with Float16, Float16, Float16, Float16
Variable Float16x4_ctor0_arg0_Float16;
Variable Float16x4_ctor0_arg1_Float16;
Variable Float16x4_ctor0_arg2_Float16;
Variable Float16x4_ctor0_arg3_Float16;
Function Float16x4_ctor0;
inline constexpr std::array Float16x4_ctor0_args = { &Float16x4_ctor0_arg0_Float16, &Float16x4_ctor0_arg1_Float16, &Float16x4_ctor0_arg2_Float16, &Float16x4_ctor0_arg3_Float16 };

/// f16x4 with Float16x2, Float16, Float16
Variable Float16x4_ctor1_arg0_Float16x2;
Variable Float16x4_ctor1_arg1_Float16;
Variable Float16x4_ctor1_arg2_Float16;
Function Float16x4_ctor1;
inline constexpr std::array Float16x4_ctor1_args = { &Float16x4_ctor1_arg0_Float16x2, &Float16x4_ctor1_arg1_Float16, &Float16x4_ctor1_arg2_Float16 };

/// f16x4 with Float16, Float16x2, Float16
Variable Float16x4_ctor2_arg0_Float16;
Variable Float16x4_ctor2_arg1_Float16x2;
Variable Float16x4_ctor2_arg2_Float16;
Function Float16x4_ctor2;
inline constexpr std::array Float16x4_ctor2_args = { &Float16x4_ctor2_arg0_Float16, &Float16x4_ctor2_arg1_Float16x2, &Float16x4_ctor2_arg2_Float16 };

/// f16x4 with Float16, Float16, Float16x2
Variable Float16x4_ctor3_arg0_Float16;
Variable Float16x4_ctor3_arg1_Float16;
Variable Float16x4_ctor3_arg2_Float16x2;
Function Float16x4_ctor3;
inline constexpr std::array Float16x4_ctor3_args = { &Float16x4_ctor3_arg0_Float16, &Float16x4_ctor3_arg1_Float16, &Float16x4_ctor3_arg2_Float16x2 };

/// f16x4 with Float16x3, Float16
Variable Float16x4_ctor4_arg0_Float16x3;
Variable Float16x4_ctor4_arg1_Float16;
Function Float16x4_ctor4;
inline constexpr std::array Float16x4_ctor4_args = { &Float16x4_ctor4_arg0_Float16x3, &Float16x4_ctor4_arg1_Float16 };

/// f16x4 with Float16, Float16x3
Variable Float16x4_ctor5_arg0_Float16;
Variable Float16x4_ctor5_arg1_Float16x3;
Function Float16x4_ctor5;
inline constexpr std::array Float16x4_ctor5_args = { &Float16x4_ctor5_arg0_Float16, &Float16x4_ctor5_arg1_Float16x3 };

/// operator[] with Int32
Variable Float16x4_operator_index_Int32_arg0;
Function Float16x4_operator_index_Int32;
inline constexpr std::array Float16x4_operator_index_Int32_args = { &Float16x4_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float16x4_operator_index_UInt32_arg0;
Function Float16x4_operator_index_UInt32;
inline constexpr std::array Float16x4_operator_index_UInt32_args = { &Float16x4_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float16x4_operator_index_Int16_arg0;
Function Float16x4_operator_index_Int16;
inline constexpr std::array Float16x4_operator_index_Int16_args = { &Float16x4_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float16x4_operator_index_UInt16_arg0;
Function Float16x4_operator_index_UInt16;
inline constexpr std::array Float16x4_operator_index_UInt16_args = { &Float16x4_operator_index_UInt16_arg0 };

/// operator+ with Float16x4
Variable Float16x4_operator_add_Float16x4_arg0;
Function Float16x4_operator_add_Float16x4;
inline constexpr std::array Float16x4_operator_add_Float16x4_args = { &Float16x4_operator_add_Float16x4_arg0 };

/// operator- with Float16x4
Variable Float16x4_operator_sub_Float16x4_arg0;
Function Float16x4_operator_sub_Float16x4;
inline constexpr std::array Float16x4_operator_sub_Float16x4_args = { &Float16x4_operator_sub_Float16x4_arg0 };

/// operator* with Float16x4
Variable Float16x4_operator_mul_Float16x4_arg0;
Function Float16x4_operator_mul_Float16x4;
inline constexpr std::array Float16x4_operator_mul_Float16x4_args = { &Float16x4_operator_mul_Float16x4_arg0 };

/// operator/ with Float16x4
Variable Float16x4_operator_div_Float16x4_arg0;
Function Float16x4_operator_div_Float16x4;
inline constexpr std::array Float16x4_operator_div_Float16x4_args = { &Float16x4_operator_div_Float16x4_arg0 };

/// operator% with Float16x4
Variable Float16x4_operator_mod_Float16x4_arg0;
Function Float16x4_operator_mod_Float16x4;
inline constexpr std::array Float16x4_operator_mod_Float16x4_args = { &Float16x4_operator_mod_Float16x4_arg0 };

/// operator+= with Float16x4
Variable Float16x4_operator_addasg_Float16x4_arg0;
Function Float16x4_operator_addasg_Float16x4;
inline constexpr std::array Float16x4_operator_addasg_Float16x4_args = { &Float16x4_operator_addasg_Float16x4_arg0 };

/// operator-= with Float16x4
Variable Float16x4_operator_subasg_Float16x4_arg0;
Function Float16x4_operator_subasg_Float16x4;
inline constexpr std::array Float16x4_operator_subasg_Float16x4_args = { &Float16x4_operator_subasg_Float16x4_arg0 };

/// operator*= with Float16x4
Variable Float16x4_operator_mulasg_Float16x4_arg0;
Function Float16x4_operator_mulasg_Float16x4;
inline constexpr std::array Float16x4_operator_mulasg_Float16x4_args = { &Float16x4_operator_mulasg_Float16x4_arg0 };

/// operator/= with Float16x4
Variable Float16x4_operator_divasg_Float16x4_arg0;
Function Float16x4_operator_divasg_Float16x4;
inline constexpr std::array Float16x4_operator_divasg_Float16x4_args = { &Float16x4_operator_divasg_Float16x4_arg0 };

/// operator< with Float16x4
Variable Float16x4_operator_lt_Float16x4_arg0;
Function Float16x4_operator_lt_Float16x4;
inline constexpr std::array Float16x4_operator_lt_Float16x4_args = { &Float16x4_operator_lt_Float16x4_arg0 };

/// operator<= with Float16x4
Variable Float16x4_operator_lte_Float16x4_arg0;
Function Float16x4_operator_lte_Float16x4;
inline constexpr std::array Float16x4_operator_lte_Float16x4_args = { &Float16x4_operator_lte_Float16x4_arg0 };

/// operator> with Float16x4
Variable Float16x4_operator_gt_Float16x4_arg0;
Function Float16x4_operator_gt_Float16x4;
inline constexpr std::array Float16x4_operator_gt_Float16x4_args = { &Float16x4_operator_gt_Float16x4_arg0 };

/// operator>= with Float16x4
Variable Float16x4_operator_gte_Float16x4_arg0;
Function Float16x4_operator_gte_Float16x4;
inline constexpr std::array Float16x4_operator_gte_Float16x4_args = { &Float16x4_operator_gte_Float16x4_arg0 };

/// operator== with Float16x4
Variable Float16x4_operator_eq_Float16x4_arg0;
Function Float16x4_operator_eq_Float16x4;
inline constexpr std::array Float16x4_operator_eq_Float16x4_args = { &Float16x4_operator_eq_Float16x4_arg0 };

/// operator!= with Float16x4
Variable Float16x4_operator_neq_Float16x4_arg0;
Function Float16x4_operator_neq_Float16x4;
inline constexpr std::array Float16x4_operator_neq_Float16x4_args = { &Float16x4_operator_neq_Float16x4_arg0 };

/// operator* with Float32
Variable Float16x4_operator_scale_Float32_arg0;
Function Float16x4_operator_scale_Float32;
inline constexpr std::array Float16x4_operator_scale_Float32_args = { &Float16x4_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable Float16x4_operator_scale_Float16_arg0;
Function Float16x4_operator_scale_Float16;
inline constexpr std::array Float16x4_operator_scale_Float16_args = { &Float16x4_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable Float16x4_operator_scale_UInt32_arg0;
Function Float16x4_operator_scale_UInt32;
inline constexpr std::array Float16x4_operator_scale_UInt32_args = { &Float16x4_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable Float16x4_operator_scale_UInt16_arg0;
Function Float16x4_operator_scale_UInt16;
inline constexpr std::array Float16x4_operator_scale_UInt16_args = { &Float16x4_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable Float16x4_operator_scale_Int32_arg0;
Function Float16x4_operator_scale_Int32;
inline constexpr std::array Float16x4_operator_scale_Int32_args = { &Float16x4_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable Float16x4_operator_scale_Int16_arg0;
Function Float16x4_operator_scale_Int16;
inline constexpr std::array Float16x4_operator_scale_Int16_args = { &Float16x4_operator_scale_Int16_arg0 };

/// operator* with Float32x4x2
Variable Float16x4_operator_mul_Float32x4x2_arg0;
Function Float16x4_operator_mul_Float32x4x2;
inline constexpr std::array Float16x4_operator_mul_Float32x4x2_args = { &Float16x4_operator_mul_Float32x4x2_arg0 };

/// operator* with Float32x4x3
Variable Float16x4_operator_mul_Float32x4x3_arg0;
Function Float16x4_operator_mul_Float32x4x3;
inline constexpr std::array Float16x4_operator_mul_Float32x4x3_args = { &Float16x4_operator_mul_Float32x4x3_arg0 };

/// operator* with Float32x4x4
Variable Float16x4_operator_mul_Float32x4x4_arg0;
Function Float16x4_operator_mul_Float32x4x4;
inline constexpr std::array Float16x4_operator_mul_Float32x4x4_args = { &Float16x4_operator_mul_Float32x4x4_arg0 };

Float16x4::Float16x4()
{
    this->name = "f16x4";
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// f16x4 with Float32x4
    Float16x4_convert_Float32x4_arg0.name = "val"_c;
    Float16x4_convert_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Float16x4_convert_Float32x4.documentation = "Convert f32x4 to f16x4"_c;
    Float16x4_convert_Float32x4.name = "f16x4"_c;
    Float16x4_convert_Float32x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_convert_Float32x4.parameters = Float16x4_convert_Float32x4_args;
    Symbol::Resolved(&Float16x4_convert_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float16x4_convert_Float32x4)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float32
    Float16x4_splat_Float32_arg0.name = "val"_c;
    Float16x4_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float16x4_splat_Float32.documentation = "Splat f32x4 to f16x4"_c;
    Float16x4_splat_Float32.name = "f16x4"_c;
    Float16x4_splat_Float32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_splat_Float32.parameters = Float16x4_splat_Float32_args;
    Symbol::Resolved(&Float16x4_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float16x4_splat_Float32)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with UInt32x4
    Float16x4_convert_UInt32x4_arg0.name = "val"_c;
    Float16x4_convert_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Float16x4_convert_UInt32x4.documentation = "Convert u32x4 to f16x4"_c;
    Float16x4_convert_UInt32x4.name = "f16x4"_c;
    Float16x4_convert_UInt32x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_convert_UInt32x4.parameters = Float16x4_convert_UInt32x4_args;
    Symbol::Resolved(&Float16x4_convert_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&Float16x4_convert_UInt32x4)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with UInt32
    Float16x4_splat_UInt32_arg0.name = "val"_c;
    Float16x4_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x4_splat_UInt32.documentation = "Splat u32x4 to f16x4"_c;
    Float16x4_splat_UInt32.name = "f16x4"_c;
    Float16x4_splat_UInt32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_splat_UInt32.parameters = Float16x4_splat_UInt32_args;
    Symbol::Resolved(&Float16x4_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x4_splat_UInt32)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Int32x4
    Float16x4_convert_Int32x4_arg0.name = "val"_c;
    Float16x4_convert_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Float16x4_convert_Int32x4.documentation = "Convert i32x4 to f16x4"_c;
    Float16x4_convert_Int32x4.name = "f16x4"_c;
    Float16x4_convert_Int32x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_convert_Int32x4.parameters = Float16x4_convert_Int32x4_args;
    Symbol::Resolved(&Float16x4_convert_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Float16x4_convert_Int32x4)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Int32
    Float16x4_splat_Int32_arg0.name = "val"_c;
    Float16x4_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x4_splat_Int32.documentation = "Splat i32x4 to f16x4"_c;
    Float16x4_splat_Int32.name = "f16x4"_c;
    Float16x4_splat_Int32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_splat_Int32.parameters = Float16x4_splat_Int32_args;
    Symbol::Resolved(&Float16x4_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x4_splat_Int32)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16x4
    Float16x4_convert_Float16x4_arg0.name = "val"_c;
    Float16x4_convert_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_convert_Float16x4.documentation = "Convert f16x4 to f16x4"_c;
    Float16x4_convert_Float16x4.name = "f16x4"_c;
    Float16x4_convert_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_convert_Float16x4.parameters = Float16x4_convert_Float16x4_args;
    Symbol::Resolved(&Float16x4_convert_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_convert_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16
    Float16x4_splat_Float16_arg0.name = "val"_c;
    Float16x4_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16x4_splat_Float16.documentation = "Splat f16x4 to f16x4"_c;
    Float16x4_splat_Float16.name = "f16x4"_c;
    Float16x4_splat_Float16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_splat_Float16.parameters = Float16x4_splat_Float16_args;
    Symbol::Resolved(&Float16x4_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_splat_Float16)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with UInt16x4
    Float16x4_convert_UInt16x4_arg0.name = "val"_c;
    Float16x4_convert_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Float16x4_convert_UInt16x4.documentation = "Convert u16x4 to f16x4"_c;
    Float16x4_convert_UInt16x4.name = "f16x4"_c;
    Float16x4_convert_UInt16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_convert_UInt16x4.parameters = Float16x4_convert_UInt16x4_args;
    Symbol::Resolved(&Float16x4_convert_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&Float16x4_convert_UInt16x4)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with UInt16
    Float16x4_splat_UInt16_arg0.name = "val"_c;
    Float16x4_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x4_splat_UInt16.documentation = "Splat u16x4 to f16x4"_c;
    Float16x4_splat_UInt16.name = "f16x4"_c;
    Float16x4_splat_UInt16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_splat_UInt16.parameters = Float16x4_splat_UInt16_args;
    Symbol::Resolved(&Float16x4_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4_splat_UInt16)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Int16x4
    Float16x4_convert_Int16x4_arg0.name = "val"_c;
    Float16x4_convert_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Float16x4_convert_Int16x4.documentation = "Convert i16x4 to f16x4"_c;
    Float16x4_convert_Int16x4.name = "f16x4"_c;
    Float16x4_convert_Int16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_convert_Int16x4.parameters = Float16x4_convert_Int16x4_args;
    Symbol::Resolved(&Float16x4_convert_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Float16x4_convert_Int16x4)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Int16
    Float16x4_splat_Int16_arg0.name = "val"_c;
    Float16x4_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x4_splat_Int16.documentation = "Splat i16x4 to f16x4"_c;
    Float16x4_splat_Int16.name = "f16x4"_c;
    Float16x4_splat_Int16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_splat_Int16.parameters = Float16x4_splat_Int16_args;
    Symbol::Resolved(&Float16x4_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4_splat_Int16)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16, Float16, Float16, Float16
    Float16x4_ctor0_arg0_Float16.name = "_arg0"_c;
    Float16x4_ctor0_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor0_arg1_Float16.name = "_arg1"_c;
    Float16x4_ctor0_arg1_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor0_arg2_Float16.name = "_arg2"_c;
    Float16x4_ctor0_arg2_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor0_arg3_Float16.name = "_arg3"_c;
    Float16x4_ctor0_arg3_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor0.name = "f16x4"_c;
    Float16x4_ctor0.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_ctor0.parameters = Float16x4_ctor0_args;
    Symbol::Resolved(&Float16x4_ctor0_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor0_arg1_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor0_arg2_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor0_arg3_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor0)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16x2, Float16, Float16
    Float16x4_ctor1_arg0_Float16x2.name = "_arg0"_c;
    Float16x4_ctor1_arg0_Float16x2.type = Type::FullType{ Float16x2Type.name };
    Float16x4_ctor1_arg1_Float16.name = "_arg1"_c;
    Float16x4_ctor1_arg1_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor1_arg2_Float16.name = "_arg2"_c;
    Float16x4_ctor1_arg2_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor1.name = "f16x4"_c;
    Float16x4_ctor1.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_ctor1.parameters = Float16x4_ctor1_args;
    Symbol::Resolved(&Float16x4_ctor1_arg0_Float16x2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4_ctor1_arg1_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor1_arg2_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor1)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16, Float16x2, Float16
    Float16x4_ctor2_arg0_Float16.name = "_arg0"_c;
    Float16x4_ctor2_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor2_arg1_Float16x2.name = "_arg1"_c;
    Float16x4_ctor2_arg1_Float16x2.type = Type::FullType{ Float16x2Type.name };
    Float16x4_ctor2_arg2_Float16.name = "_arg2"_c;
    Float16x4_ctor2_arg2_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor2.name = "f16x4"_c;
    Float16x4_ctor2.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_ctor2.parameters = Float16x4_ctor2_args;
    Symbol::Resolved(&Float16x4_ctor2_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor2_arg1_Float16x2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4_ctor2_arg2_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor2)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16, Float16, Float16x2
    Float16x4_ctor3_arg0_Float16.name = "_arg0"_c;
    Float16x4_ctor3_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor3_arg1_Float16.name = "_arg1"_c;
    Float16x4_ctor3_arg1_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor3_arg2_Float16x2.name = "_arg2"_c;
    Float16x4_ctor3_arg2_Float16x2.type = Type::FullType{ Float16x2Type.name };
    Float16x4_ctor3.name = "f16x4"_c;
    Float16x4_ctor3.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_ctor3.parameters = Float16x4_ctor3_args;
    Symbol::Resolved(&Float16x4_ctor3_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor3_arg1_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor3_arg2_Float16x2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4_ctor3)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16x3, Float16
    Float16x4_ctor4_arg0_Float16x3.name = "_arg0"_c;
    Float16x4_ctor4_arg0_Float16x3.type = Type::FullType{ Float16x3Type.name };
    Float16x4_ctor4_arg1_Float16.name = "_arg1"_c;
    Float16x4_ctor4_arg1_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor4.name = "f16x4"_c;
    Float16x4_ctor4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_ctor4.parameters = Float16x4_ctor4_args;
    Symbol::Resolved(&Float16x4_ctor4_arg0_Float16x3)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4_ctor4_arg1_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor4)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16, Float16x3
    Float16x4_ctor5_arg0_Float16.name = "_arg0"_c;
    Float16x4_ctor5_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor5_arg1_Float16x3.name = "_arg1"_c;
    Float16x4_ctor5_arg1_Float16x3.type = Type::FullType{ Float16x3Type.name };
    Float16x4_ctor5.name = "f16x4"_c;
    Float16x4_ctor5.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_ctor5.parameters = Float16x4_ctor5_args;
    Symbol::Resolved(&Float16x4_ctor5_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor5_arg1_Float16x3)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4_ctor5)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with Int32
    Float16x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Float16x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x4_operator_index_Int32.name = "operator[]"_c;
    Float16x4_operator_index_Int32.returnType = Type::FullType { Float16Type.name };
    Float16x4_operator_index_Int32.parameters = Float16x4_operator_index_Int32_args;
    Symbol::Resolved(&Float16x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x4_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt32
    Float16x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Float16x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x4_operator_index_UInt32.name = "operator[]"_c;
    Float16x4_operator_index_UInt32.returnType = Type::FullType { Float16Type.name };
    Float16x4_operator_index_UInt32.parameters = Float16x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x4_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    /// operator[] with Int16
    Float16x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Float16x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x4_operator_index_Int16.name = "operator[]"_c;
    Float16x4_operator_index_Int16.returnType = Type::FullType { Float16Type.name };
    Float16x4_operator_index_Int16.parameters = Float16x4_operator_index_Int16_args;
    Symbol::Resolved(&Float16x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt16
    Float16x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Float16x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x4_operator_index_UInt16.name = "operator[]"_c;
    Float16x4_operator_index_UInt16.returnType = Type::FullType { Float16Type.name };
    Float16x4_operator_index_UInt16.parameters = Float16x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    /// operator+ with Float16x4
    Float16x4_operator_add_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_add_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_add_Float16x4.name = "operator+"_c;
    Float16x4_operator_add_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_add_Float16x4.parameters = Float16x4_operator_add_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_add_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_add_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator- with Float16x4
    Float16x4_operator_sub_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_sub_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_sub_Float16x4.name = "operator-"_c;
    Float16x4_operator_sub_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_sub_Float16x4.parameters = Float16x4_operator_sub_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_sub_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_sub_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Float16x4
    Float16x4_operator_mul_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_mul_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_mul_Float16x4.name = "operator*"_c;
    Float16x4_operator_mul_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_mul_Float16x4.parameters = Float16x4_operator_mul_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_mul_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_mul_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator/ with Float16x4
    Float16x4_operator_div_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_div_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_div_Float16x4.name = "operator/"_c;
    Float16x4_operator_div_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_div_Float16x4.parameters = Float16x4_operator_div_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_div_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_div_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator% with Float16x4
    Float16x4_operator_mod_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_mod_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_mod_Float16x4.name = "operator%"_c;
    Float16x4_operator_mod_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_mod_Float16x4.parameters = Float16x4_operator_mod_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_mod_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_mod_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator+= with Float16x4
    Float16x4_operator_addasg_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_addasg_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_addasg_Float16x4.name = "operator+="_c;
    Float16x4_operator_addasg_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_addasg_Float16x4.parameters = Float16x4_operator_addasg_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_addasg_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_addasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator-= with Float16x4
    Float16x4_operator_subasg_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_subasg_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_subasg_Float16x4.name = "operator-="_c;
    Float16x4_operator_subasg_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_subasg_Float16x4.parameters = Float16x4_operator_subasg_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_subasg_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_subasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator*= with Float16x4
    Float16x4_operator_mulasg_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_mulasg_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_mulasg_Float16x4.name = "operator*="_c;
    Float16x4_operator_mulasg_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_mulasg_Float16x4.parameters = Float16x4_operator_mulasg_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_mulasg_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_mulasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator/= with Float16x4
    Float16x4_operator_divasg_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_divasg_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_divasg_Float16x4.name = "operator/="_c;
    Float16x4_operator_divasg_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_divasg_Float16x4.parameters = Float16x4_operator_divasg_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_divasg_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_divasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator< with Float16x4
    Float16x4_operator_lt_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_lt_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_lt_Float16x4.name = "operator<"_c;
    Float16x4_operator_lt_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_lt_Float16x4.parameters = Float16x4_operator_lt_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_lt_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_lt_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator<= with Float16x4
    Float16x4_operator_lte_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_lte_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_lte_Float16x4.name = "operator<="_c;
    Float16x4_operator_lte_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_lte_Float16x4.parameters = Float16x4_operator_lte_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_lte_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_lte_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator> with Float16x4
    Float16x4_operator_gt_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_gt_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_gt_Float16x4.name = "operator>"_c;
    Float16x4_operator_gt_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_gt_Float16x4.parameters = Float16x4_operator_gt_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_gt_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_gt_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator>= with Float16x4
    Float16x4_operator_gte_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_gte_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_gte_Float16x4.name = "operator>="_c;
    Float16x4_operator_gte_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_gte_Float16x4.parameters = Float16x4_operator_gte_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_gte_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_gte_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator== with Float16x4
    Float16x4_operator_eq_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_eq_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_eq_Float16x4.name = "operator=="_c;
    Float16x4_operator_eq_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_eq_Float16x4.parameters = Float16x4_operator_eq_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_eq_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_eq_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator!= with Float16x4
    Float16x4_operator_neq_Float16x4_arg0.name = "_arg0"_c;
    Float16x4_operator_neq_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_neq_Float16x4.name = "operator!="_c;
    Float16x4_operator_neq_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_neq_Float16x4.parameters = Float16x4_operator_neq_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_neq_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_neq_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Float32
    Float16x4_operator_scale_Float32_arg0.name = "_arg0"_c;
    Float16x4_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float16x4_operator_scale_Float32.name = "operator*"_c;
    Float16x4_operator_scale_Float32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_scale_Float32.parameters = Float16x4_operator_scale_Float32_args;
    Symbol::Resolved(&Float16x4_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float16x4_operator_scale_Float32)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Float16
    Float16x4_operator_scale_Float16_arg0.name = "_arg0"_c;
    Float16x4_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16x4_operator_scale_Float16.name = "operator*"_c;
    Float16x4_operator_scale_Float16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_scale_Float16.parameters = Float16x4_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x4_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_operator_scale_Float16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with UInt32
    Float16x4_operator_scale_UInt32_arg0.name = "_arg0"_c;
    Float16x4_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x4_operator_scale_UInt32.name = "operator*"_c;
    Float16x4_operator_scale_UInt32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_scale_UInt32.parameters = Float16x4_operator_scale_UInt32_args;
    Symbol::Resolved(&Float16x4_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x4_operator_scale_UInt32)->returnTypeSymbol = &Float16x4Type;

    /// operator* with UInt16
    Float16x4_operator_scale_UInt16_arg0.name = "_arg0"_c;
    Float16x4_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x4_operator_scale_UInt16.name = "operator*"_c;
    Float16x4_operator_scale_UInt16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_scale_UInt16.parameters = Float16x4_operator_scale_UInt16_args;
    Symbol::Resolved(&Float16x4_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4_operator_scale_UInt16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Int32
    Float16x4_operator_scale_Int32_arg0.name = "_arg0"_c;
    Float16x4_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x4_operator_scale_Int32.name = "operator*"_c;
    Float16x4_operator_scale_Int32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_scale_Int32.parameters = Float16x4_operator_scale_Int32_args;
    Symbol::Resolved(&Float16x4_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x4_operator_scale_Int32)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Int16
    Float16x4_operator_scale_Int16_arg0.name = "_arg0"_c;
    Float16x4_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x4_operator_scale_Int16.name = "operator*"_c;
    Float16x4_operator_scale_Int16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_scale_Int16.parameters = Float16x4_operator_scale_Int16_args;
    Symbol::Resolved(&Float16x4_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4_operator_scale_Int16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Float32x4x2
    Float16x4_operator_mul_Float32x4x2_arg0.name = "_arg0"_c;
    Float16x4_operator_mul_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Float16x4_operator_mul_Float32x4x2.name = "operator*"_c;
    Float16x4_operator_mul_Float32x4x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x4_operator_mul_Float32x4x2.parameters = Float16x4_operator_mul_Float32x4x2_args;
    Symbol::Resolved(&Float16x4_operator_mul_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float16x4_operator_mul_Float32x4x2)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float32x4x3
    Float16x4_operator_mul_Float32x4x3_arg0.name = "_arg0"_c;
    Float16x4_operator_mul_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Float16x4_operator_mul_Float32x4x3.name = "operator*"_c;
    Float16x4_operator_mul_Float32x4x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x4_operator_mul_Float32x4x3.parameters = Float16x4_operator_mul_Float32x4x3_args;
    Symbol::Resolved(&Float16x4_operator_mul_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float16x4_operator_mul_Float32x4x3)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float32x4x4
    Float16x4_operator_mul_Float32x4x4_arg0.name = "_arg0"_c;
    Float16x4_operator_mul_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Float16x4_operator_mul_Float32x4x4.name = "operator*"_c;
    Float16x4_operator_mul_Float32x4x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_mul_Float32x4x4.parameters = Float16x4_operator_mul_Float32x4x4_args;
    Symbol::Resolved(&Float16x4_operator_mul_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float16x4_operator_mul_Float32x4x4)->returnTypeSymbol = &Float16x4Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Float16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x4_operator_add_Float16x4 },
    std::pair{ "operator-"_c, &Float16x4_operator_sub_Float16x4 },
    std::pair{ "operator*"_c, &Float16x4_operator_mul_Float16x4 },
    std::pair{ "operator/"_c, &Float16x4_operator_div_Float16x4 },
    std::pair{ "operator%"_c, &Float16x4_operator_mod_Float16x4 },
    std::pair{ "operator+="_c, &Float16x4_operator_addasg_Float16x4 },
    std::pair{ "operator-="_c, &Float16x4_operator_subasg_Float16x4 },
    std::pair{ "operator*="_c, &Float16x4_operator_mulasg_Float16x4 },
    std::pair{ "operator/="_c, &Float16x4_operator_divasg_Float16x4 },
    std::pair{ "operator<"_c, &Float16x4_operator_lt_Float16x4 },
    std::pair{ "operator<="_c, &Float16x4_operator_lte_Float16x4 },
    std::pair{ "operator>"_c, &Float16x4_operator_gt_Float16x4 },
    std::pair{ "operator>="_c, &Float16x4_operator_gte_Float16x4 },
    std::pair{ "operator=="_c, &Float16x4_operator_eq_Float16x4 },
    std::pair{ "operator!="_c, &Float16x4_operator_neq_Float16x4 },
    std::pair{ "operator*"_c, &Float16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Float16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Float16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Float16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Float16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Float16x4_operator_scale_Int16 },
    std::pair{ "operator*"_c, &Float16x4_operator_mul_Float32x4x2 },
    std::pair{ "operator*"_c, &Float16x4_operator_mul_Float32x4x3 },
    std::pair{ "operator*"_c, &Float16x4_operator_mul_Float32x4x4 }
    } };
}
Float16x4 Float16x4Type;

/// u16x4 with Float32x4
Variable UInt16x4_convert_Float32x4_arg0;
Function UInt16x4_convert_Float32x4;
inline constexpr std::array UInt16x4_convert_Float32x4_args = { &UInt16x4_convert_Float32x4_arg0 };

/// u16x4 with Float32
Variable UInt16x4_splat_Float32_arg0;
Function UInt16x4_splat_Float32;
inline constexpr std::array UInt16x4_splat_Float32_args = { &UInt16x4_splat_Float32_arg0 };

/// u16x4 with UInt32x4
Variable UInt16x4_convert_UInt32x4_arg0;
Function UInt16x4_convert_UInt32x4;
inline constexpr std::array UInt16x4_convert_UInt32x4_args = { &UInt16x4_convert_UInt32x4_arg0 };

/// u16x4 with UInt32
Variable UInt16x4_splat_UInt32_arg0;
Function UInt16x4_splat_UInt32;
inline constexpr std::array UInt16x4_splat_UInt32_args = { &UInt16x4_splat_UInt32_arg0 };

/// u16x4 with Int32x4
Variable UInt16x4_convert_Int32x4_arg0;
Function UInt16x4_convert_Int32x4;
inline constexpr std::array UInt16x4_convert_Int32x4_args = { &UInt16x4_convert_Int32x4_arg0 };

/// u16x4 with Int32
Variable UInt16x4_splat_Int32_arg0;
Function UInt16x4_splat_Int32;
inline constexpr std::array UInt16x4_splat_Int32_args = { &UInt16x4_splat_Int32_arg0 };

/// u16x4 with Float16x4
Variable UInt16x4_convert_Float16x4_arg0;
Function UInt16x4_convert_Float16x4;
inline constexpr std::array UInt16x4_convert_Float16x4_args = { &UInt16x4_convert_Float16x4_arg0 };

/// u16x4 with Float16
Variable UInt16x4_splat_Float16_arg0;
Function UInt16x4_splat_Float16;
inline constexpr std::array UInt16x4_splat_Float16_args = { &UInt16x4_splat_Float16_arg0 };

/// u16x4 with UInt16x4
Variable UInt16x4_convert_UInt16x4_arg0;
Function UInt16x4_convert_UInt16x4;
inline constexpr std::array UInt16x4_convert_UInt16x4_args = { &UInt16x4_convert_UInt16x4_arg0 };

/// u16x4 with UInt16
Variable UInt16x4_splat_UInt16_arg0;
Function UInt16x4_splat_UInt16;
inline constexpr std::array UInt16x4_splat_UInt16_args = { &UInt16x4_splat_UInt16_arg0 };

/// u16x4 with Int16x4
Variable UInt16x4_convert_Int16x4_arg0;
Function UInt16x4_convert_Int16x4;
inline constexpr std::array UInt16x4_convert_Int16x4_args = { &UInt16x4_convert_Int16x4_arg0 };

/// u16x4 with Int16
Variable UInt16x4_splat_Int16_arg0;
Function UInt16x4_splat_Int16;
inline constexpr std::array UInt16x4_splat_Int16_args = { &UInt16x4_splat_Int16_arg0 };

/// u16x4 with UInt16, UInt16, UInt16, UInt16
Variable UInt16x4_ctor0_arg0_UInt16;
Variable UInt16x4_ctor0_arg1_UInt16;
Variable UInt16x4_ctor0_arg2_UInt16;
Variable UInt16x4_ctor0_arg3_UInt16;
Function UInt16x4_ctor0;
inline constexpr std::array UInt16x4_ctor0_args = { &UInt16x4_ctor0_arg0_UInt16, &UInt16x4_ctor0_arg1_UInt16, &UInt16x4_ctor0_arg2_UInt16, &UInt16x4_ctor0_arg3_UInt16 };

/// u16x4 with UInt16x2, UInt16, UInt16
Variable UInt16x4_ctor1_arg0_UInt16x2;
Variable UInt16x4_ctor1_arg1_UInt16;
Variable UInt16x4_ctor1_arg2_UInt16;
Function UInt16x4_ctor1;
inline constexpr std::array UInt16x4_ctor1_args = { &UInt16x4_ctor1_arg0_UInt16x2, &UInt16x4_ctor1_arg1_UInt16, &UInt16x4_ctor1_arg2_UInt16 };

/// u16x4 with UInt16, UInt16x2, UInt16
Variable UInt16x4_ctor2_arg0_UInt16;
Variable UInt16x4_ctor2_arg1_UInt16x2;
Variable UInt16x4_ctor2_arg2_UInt16;
Function UInt16x4_ctor2;
inline constexpr std::array UInt16x4_ctor2_args = { &UInt16x4_ctor2_arg0_UInt16, &UInt16x4_ctor2_arg1_UInt16x2, &UInt16x4_ctor2_arg2_UInt16 };

/// u16x4 with UInt16, UInt16, UInt16x2
Variable UInt16x4_ctor3_arg0_UInt16;
Variable UInt16x4_ctor3_arg1_UInt16;
Variable UInt16x4_ctor3_arg2_UInt16x2;
Function UInt16x4_ctor3;
inline constexpr std::array UInt16x4_ctor3_args = { &UInt16x4_ctor3_arg0_UInt16, &UInt16x4_ctor3_arg1_UInt16, &UInt16x4_ctor3_arg2_UInt16x2 };

/// u16x4 with UInt16x3, UInt16
Variable UInt16x4_ctor4_arg0_UInt16x3;
Variable UInt16x4_ctor4_arg1_UInt16;
Function UInt16x4_ctor4;
inline constexpr std::array UInt16x4_ctor4_args = { &UInt16x4_ctor4_arg0_UInt16x3, &UInt16x4_ctor4_arg1_UInt16 };

/// u16x4 with UInt16, UInt16x3
Variable UInt16x4_ctor5_arg0_UInt16;
Variable UInt16x4_ctor5_arg1_UInt16x3;
Function UInt16x4_ctor5;
inline constexpr std::array UInt16x4_ctor5_args = { &UInt16x4_ctor5_arg0_UInt16, &UInt16x4_ctor5_arg1_UInt16x3 };

/// operator[] with Int32
Variable UInt16x4_operator_index_Int32_arg0;
Function UInt16x4_operator_index_Int32;
inline constexpr std::array UInt16x4_operator_index_Int32_args = { &UInt16x4_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable UInt16x4_operator_index_UInt32_arg0;
Function UInt16x4_operator_index_UInt32;
inline constexpr std::array UInt16x4_operator_index_UInt32_args = { &UInt16x4_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable UInt16x4_operator_index_Int16_arg0;
Function UInt16x4_operator_index_Int16;
inline constexpr std::array UInt16x4_operator_index_Int16_args = { &UInt16x4_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable UInt16x4_operator_index_UInt16_arg0;
Function UInt16x4_operator_index_UInt16;
inline constexpr std::array UInt16x4_operator_index_UInt16_args = { &UInt16x4_operator_index_UInt16_arg0 };

/// operator+ with UInt16x4
Variable UInt16x4_operator_add_UInt16x4_arg0;
Function UInt16x4_operator_add_UInt16x4;
inline constexpr std::array UInt16x4_operator_add_UInt16x4_args = { &UInt16x4_operator_add_UInt16x4_arg0 };

/// operator- with UInt16x4
Variable UInt16x4_operator_sub_UInt16x4_arg0;
Function UInt16x4_operator_sub_UInt16x4;
inline constexpr std::array UInt16x4_operator_sub_UInt16x4_args = { &UInt16x4_operator_sub_UInt16x4_arg0 };

/// operator* with UInt16x4
Variable UInt16x4_operator_mul_UInt16x4_arg0;
Function UInt16x4_operator_mul_UInt16x4;
inline constexpr std::array UInt16x4_operator_mul_UInt16x4_args = { &UInt16x4_operator_mul_UInt16x4_arg0 };

/// operator/ with UInt16x4
Variable UInt16x4_operator_div_UInt16x4_arg0;
Function UInt16x4_operator_div_UInt16x4;
inline constexpr std::array UInt16x4_operator_div_UInt16x4_args = { &UInt16x4_operator_div_UInt16x4_arg0 };

/// operator% with UInt16x4
Variable UInt16x4_operator_mod_UInt16x4_arg0;
Function UInt16x4_operator_mod_UInt16x4;
inline constexpr std::array UInt16x4_operator_mod_UInt16x4_args = { &UInt16x4_operator_mod_UInt16x4_arg0 };

/// operator+= with UInt16x4
Variable UInt16x4_operator_addasg_UInt16x4_arg0;
Function UInt16x4_operator_addasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_addasg_UInt16x4_args = { &UInt16x4_operator_addasg_UInt16x4_arg0 };

/// operator-= with UInt16x4
Variable UInt16x4_operator_subasg_UInt16x4_arg0;
Function UInt16x4_operator_subasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_subasg_UInt16x4_args = { &UInt16x4_operator_subasg_UInt16x4_arg0 };

/// operator*= with UInt16x4
Variable UInt16x4_operator_mulasg_UInt16x4_arg0;
Function UInt16x4_operator_mulasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_mulasg_UInt16x4_args = { &UInt16x4_operator_mulasg_UInt16x4_arg0 };

/// operator/= with UInt16x4
Variable UInt16x4_operator_divasg_UInt16x4_arg0;
Function UInt16x4_operator_divasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_divasg_UInt16x4_args = { &UInt16x4_operator_divasg_UInt16x4_arg0 };

/// operator< with UInt16x4
Variable UInt16x4_operator_lt_UInt16x4_arg0;
Function UInt16x4_operator_lt_UInt16x4;
inline constexpr std::array UInt16x4_operator_lt_UInt16x4_args = { &UInt16x4_operator_lt_UInt16x4_arg0 };

/// operator<= with UInt16x4
Variable UInt16x4_operator_lte_UInt16x4_arg0;
Function UInt16x4_operator_lte_UInt16x4;
inline constexpr std::array UInt16x4_operator_lte_UInt16x4_args = { &UInt16x4_operator_lte_UInt16x4_arg0 };

/// operator> with UInt16x4
Variable UInt16x4_operator_gt_UInt16x4_arg0;
Function UInt16x4_operator_gt_UInt16x4;
inline constexpr std::array UInt16x4_operator_gt_UInt16x4_args = { &UInt16x4_operator_gt_UInt16x4_arg0 };

/// operator>= with UInt16x4
Variable UInt16x4_operator_gte_UInt16x4_arg0;
Function UInt16x4_operator_gte_UInt16x4;
inline constexpr std::array UInt16x4_operator_gte_UInt16x4_args = { &UInt16x4_operator_gte_UInt16x4_arg0 };

/// operator== with UInt16x4
Variable UInt16x4_operator_eq_UInt16x4_arg0;
Function UInt16x4_operator_eq_UInt16x4;
inline constexpr std::array UInt16x4_operator_eq_UInt16x4_args = { &UInt16x4_operator_eq_UInt16x4_arg0 };

/// operator!= with UInt16x4
Variable UInt16x4_operator_neq_UInt16x4_arg0;
Function UInt16x4_operator_neq_UInt16x4;
inline constexpr std::array UInt16x4_operator_neq_UInt16x4_args = { &UInt16x4_operator_neq_UInt16x4_arg0 };

/// operator* with Float32
Variable UInt16x4_operator_scale_Float32_arg0;
Function UInt16x4_operator_scale_Float32;
inline constexpr std::array UInt16x4_operator_scale_Float32_args = { &UInt16x4_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable UInt16x4_operator_scale_Float16_arg0;
Function UInt16x4_operator_scale_Float16;
inline constexpr std::array UInt16x4_operator_scale_Float16_args = { &UInt16x4_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable UInt16x4_operator_scale_UInt32_arg0;
Function UInt16x4_operator_scale_UInt32;
inline constexpr std::array UInt16x4_operator_scale_UInt32_args = { &UInt16x4_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable UInt16x4_operator_scale_UInt16_arg0;
Function UInt16x4_operator_scale_UInt16;
inline constexpr std::array UInt16x4_operator_scale_UInt16_args = { &UInt16x4_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable UInt16x4_operator_scale_Int32_arg0;
Function UInt16x4_operator_scale_Int32;
inline constexpr std::array UInt16x4_operator_scale_Int32_args = { &UInt16x4_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable UInt16x4_operator_scale_Int16_arg0;
Function UInt16x4_operator_scale_Int16;
inline constexpr std::array UInt16x4_operator_scale_Int16_args = { &UInt16x4_operator_scale_Int16_arg0 };

/// operator| with UInt16x4
Variable UInt16x4_operator_or_UInt16x4_arg0;
Function UInt16x4_operator_or_UInt16x4;
inline constexpr std::array UInt16x4_operator_or_UInt16x4_args = { &UInt16x4_operator_or_UInt16x4_arg0 };

/// operator& with UInt16x4
Variable UInt16x4_operator_and_UInt16x4_arg0;
Function UInt16x4_operator_and_UInt16x4;
inline constexpr std::array UInt16x4_operator_and_UInt16x4_args = { &UInt16x4_operator_and_UInt16x4_arg0 };

/// operator^ with UInt16x4
Variable UInt16x4_operator_xor_UInt16x4_arg0;
Function UInt16x4_operator_xor_UInt16x4;
inline constexpr std::array UInt16x4_operator_xor_UInt16x4_args = { &UInt16x4_operator_xor_UInt16x4_arg0 };

/// operator<< with UInt16x4
Variable UInt16x4_operator_lsh_UInt16x4_arg0;
Function UInt16x4_operator_lsh_UInt16x4;
inline constexpr std::array UInt16x4_operator_lsh_UInt16x4_args = { &UInt16x4_operator_lsh_UInt16x4_arg0 };

/// operator>> with UInt16x4
Variable UInt16x4_operator_rsh_UInt16x4_arg0;
Function UInt16x4_operator_rsh_UInt16x4;
inline constexpr std::array UInt16x4_operator_rsh_UInt16x4_args = { &UInt16x4_operator_rsh_UInt16x4_arg0 };

/// operator|= with UInt16x4
Variable UInt16x4_operator_orasg_UInt16x4_arg0;
Function UInt16x4_operator_orasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_orasg_UInt16x4_args = { &UInt16x4_operator_orasg_UInt16x4_arg0 };

/// operator&= with UInt16x4
Variable UInt16x4_operator_andasg_UInt16x4_arg0;
Function UInt16x4_operator_andasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_andasg_UInt16x4_args = { &UInt16x4_operator_andasg_UInt16x4_arg0 };

/// operator^= with UInt16x4
Variable UInt16x4_operator_xorasg_UInt16x4_arg0;
Function UInt16x4_operator_xorasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_xorasg_UInt16x4_args = { &UInt16x4_operator_xorasg_UInt16x4_arg0 };

/// operator<<= with UInt16x4
Variable UInt16x4_operator_lshasg_UInt16x4_arg0;
Function UInt16x4_operator_lshasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_lshasg_UInt16x4_args = { &UInt16x4_operator_lshasg_UInt16x4_arg0 };

/// operator>>= with UInt16x4
Variable UInt16x4_operator_rhsasg_UInt16x4_arg0;
Function UInt16x4_operator_rhsasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_rhsasg_UInt16x4_args = { &UInt16x4_operator_rhsasg_UInt16x4_arg0 };

UInt16x4::UInt16x4()
{
    this->name = "u16x4";
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    /// u16x4 with Float32x4
    UInt16x4_convert_Float32x4_arg0.name = "val"_c;
    UInt16x4_convert_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    UInt16x4_convert_Float32x4.documentation = "Convert f32x4 to u16x4"_c;
    UInt16x4_convert_Float32x4.name = "u16x4"_c;
    UInt16x4_convert_Float32x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_convert_Float32x4.parameters = UInt16x4_convert_Float32x4_args;
    Symbol::Resolved(&UInt16x4_convert_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&UInt16x4_convert_Float32x4)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Float32
    UInt16x4_splat_Float32_arg0.name = "val"_c;
    UInt16x4_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    UInt16x4_splat_Float32.documentation = "Splat f32x4 to u16x4"_c;
    UInt16x4_splat_Float32.name = "u16x4"_c;
    UInt16x4_splat_Float32.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_splat_Float32.parameters = UInt16x4_splat_Float32_args;
    Symbol::Resolved(&UInt16x4_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt16x4_splat_Float32)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt32x4
    UInt16x4_convert_UInt32x4_arg0.name = "val"_c;
    UInt16x4_convert_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    UInt16x4_convert_UInt32x4.documentation = "Convert u32x4 to u16x4"_c;
    UInt16x4_convert_UInt32x4.name = "u16x4"_c;
    UInt16x4_convert_UInt32x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_convert_UInt32x4.parameters = UInt16x4_convert_UInt32x4_args;
    Symbol::Resolved(&UInt16x4_convert_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt16x4_convert_UInt32x4)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt32
    UInt16x4_splat_UInt32_arg0.name = "val"_c;
    UInt16x4_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt16x4_splat_UInt32.documentation = "Splat u32x4 to u16x4"_c;
    UInt16x4_splat_UInt32.name = "u16x4"_c;
    UInt16x4_splat_UInt32.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_splat_UInt32.parameters = UInt16x4_splat_UInt32_args;
    Symbol::Resolved(&UInt16x4_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x4_splat_UInt32)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Int32x4
    UInt16x4_convert_Int32x4_arg0.name = "val"_c;
    UInt16x4_convert_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    UInt16x4_convert_Int32x4.documentation = "Convert i32x4 to u16x4"_c;
    UInt16x4_convert_Int32x4.name = "u16x4"_c;
    UInt16x4_convert_Int32x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_convert_Int32x4.parameters = UInt16x4_convert_Int32x4_args;
    Symbol::Resolved(&UInt16x4_convert_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&UInt16x4_convert_Int32x4)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Int32
    UInt16x4_splat_Int32_arg0.name = "val"_c;
    UInt16x4_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt16x4_splat_Int32.documentation = "Splat i32x4 to u16x4"_c;
    UInt16x4_splat_Int32.name = "u16x4"_c;
    UInt16x4_splat_Int32.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_splat_Int32.parameters = UInt16x4_splat_Int32_args;
    Symbol::Resolved(&UInt16x4_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x4_splat_Int32)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Float16x4
    UInt16x4_convert_Float16x4_arg0.name = "val"_c;
    UInt16x4_convert_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    UInt16x4_convert_Float16x4.documentation = "Convert f16x4 to u16x4"_c;
    UInt16x4_convert_Float16x4.name = "u16x4"_c;
    UInt16x4_convert_Float16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_convert_Float16x4.parameters = UInt16x4_convert_Float16x4_args;
    Symbol::Resolved(&UInt16x4_convert_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&UInt16x4_convert_Float16x4)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Float16
    UInt16x4_splat_Float16_arg0.name = "val"_c;
    UInt16x4_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    UInt16x4_splat_Float16.documentation = "Splat f16x4 to u16x4"_c;
    UInt16x4_splat_Float16.name = "u16x4"_c;
    UInt16x4_splat_Float16.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_splat_Float16.parameters = UInt16x4_splat_Float16_args;
    Symbol::Resolved(&UInt16x4_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x4_splat_Float16)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16x4
    UInt16x4_convert_UInt16x4_arg0.name = "val"_c;
    UInt16x4_convert_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_convert_UInt16x4.documentation = "Convert u16x4 to u16x4"_c;
    UInt16x4_convert_UInt16x4.name = "u16x4"_c;
    UInt16x4_convert_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_convert_UInt16x4.parameters = UInt16x4_convert_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_convert_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_convert_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16
    UInt16x4_splat_UInt16_arg0.name = "val"_c;
    UInt16x4_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16x4_splat_UInt16.documentation = "Splat u16x4 to u16x4"_c;
    UInt16x4_splat_UInt16.name = "u16x4"_c;
    UInt16x4_splat_UInt16.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_splat_UInt16.parameters = UInt16x4_splat_UInt16_args;
    Symbol::Resolved(&UInt16x4_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_splat_UInt16)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Int16x4
    UInt16x4_convert_Int16x4_arg0.name = "val"_c;
    UInt16x4_convert_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    UInt16x4_convert_Int16x4.documentation = "Convert i16x4 to u16x4"_c;
    UInt16x4_convert_Int16x4.name = "u16x4"_c;
    UInt16x4_convert_Int16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_convert_Int16x4.parameters = UInt16x4_convert_Int16x4_args;
    Symbol::Resolved(&UInt16x4_convert_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&UInt16x4_convert_Int16x4)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Int16
    UInt16x4_splat_Int16_arg0.name = "val"_c;
    UInt16x4_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt16x4_splat_Int16.documentation = "Splat i16x4 to u16x4"_c;
    UInt16x4_splat_Int16.name = "u16x4"_c;
    UInt16x4_splat_Int16.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_splat_Int16.parameters = UInt16x4_splat_Int16_args;
    Symbol::Resolved(&UInt16x4_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x4_splat_Int16)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16, UInt16, UInt16, UInt16
    UInt16x4_ctor0_arg0_UInt16.name = "_arg0"_c;
    UInt16x4_ctor0_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor0_arg1_UInt16.name = "_arg1"_c;
    UInt16x4_ctor0_arg1_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor0_arg2_UInt16.name = "_arg2"_c;
    UInt16x4_ctor0_arg2_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor0_arg3_UInt16.name = "_arg3"_c;
    UInt16x4_ctor0_arg3_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor0.name = "u16x4"_c;
    UInt16x4_ctor0.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_ctor0.parameters = UInt16x4_ctor0_args;
    Symbol::Resolved(&UInt16x4_ctor0_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor0_arg1_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor0_arg2_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor0_arg3_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor0)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16x2, UInt16, UInt16
    UInt16x4_ctor1_arg0_UInt16x2.name = "_arg0"_c;
    UInt16x4_ctor1_arg0_UInt16x2.type = Type::FullType{ UInt16x2Type.name };
    UInt16x4_ctor1_arg1_UInt16.name = "_arg1"_c;
    UInt16x4_ctor1_arg1_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor1_arg2_UInt16.name = "_arg2"_c;
    UInt16x4_ctor1_arg2_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor1.name = "u16x4"_c;
    UInt16x4_ctor1.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_ctor1.parameters = UInt16x4_ctor1_args;
    Symbol::Resolved(&UInt16x4_ctor1_arg0_UInt16x2)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x4_ctor1_arg1_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor1_arg2_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor1)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16, UInt16x2, UInt16
    UInt16x4_ctor2_arg0_UInt16.name = "_arg0"_c;
    UInt16x4_ctor2_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor2_arg1_UInt16x2.name = "_arg1"_c;
    UInt16x4_ctor2_arg1_UInt16x2.type = Type::FullType{ UInt16x2Type.name };
    UInt16x4_ctor2_arg2_UInt16.name = "_arg2"_c;
    UInt16x4_ctor2_arg2_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor2.name = "u16x4"_c;
    UInt16x4_ctor2.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_ctor2.parameters = UInt16x4_ctor2_args;
    Symbol::Resolved(&UInt16x4_ctor2_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor2_arg1_UInt16x2)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x4_ctor2_arg2_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor2)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16, UInt16, UInt16x2
    UInt16x4_ctor3_arg0_UInt16.name = "_arg0"_c;
    UInt16x4_ctor3_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor3_arg1_UInt16.name = "_arg1"_c;
    UInt16x4_ctor3_arg1_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor3_arg2_UInt16x2.name = "_arg2"_c;
    UInt16x4_ctor3_arg2_UInt16x2.type = Type::FullType{ UInt16x2Type.name };
    UInt16x4_ctor3.name = "u16x4"_c;
    UInt16x4_ctor3.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_ctor3.parameters = UInt16x4_ctor3_args;
    Symbol::Resolved(&UInt16x4_ctor3_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor3_arg1_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor3_arg2_UInt16x2)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x4_ctor3)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16x3, UInt16
    UInt16x4_ctor4_arg0_UInt16x3.name = "_arg0"_c;
    UInt16x4_ctor4_arg0_UInt16x3.type = Type::FullType{ UInt16x3Type.name };
    UInt16x4_ctor4_arg1_UInt16.name = "_arg1"_c;
    UInt16x4_ctor4_arg1_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor4.name = "u16x4"_c;
    UInt16x4_ctor4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_ctor4.parameters = UInt16x4_ctor4_args;
    Symbol::Resolved(&UInt16x4_ctor4_arg0_UInt16x3)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x4_ctor4_arg1_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor4)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16, UInt16x3
    UInt16x4_ctor5_arg0_UInt16.name = "_arg0"_c;
    UInt16x4_ctor5_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor5_arg1_UInt16x3.name = "_arg1"_c;
    UInt16x4_ctor5_arg1_UInt16x3.type = Type::FullType{ UInt16x3Type.name };
    UInt16x4_ctor5.name = "u16x4"_c;
    UInt16x4_ctor5.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_ctor5.parameters = UInt16x4_ctor5_args;
    Symbol::Resolved(&UInt16x4_ctor5_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor5_arg1_UInt16x3)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x4_ctor5)->returnTypeSymbol = &UInt16x4Type;

    /// operator[] with Int32
    UInt16x4_operator_index_Int32_arg0.name = "_arg0"_c;
    UInt16x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt16x4_operator_index_Int32.name = "operator[]"_c;
    UInt16x4_operator_index_Int32.returnType = Type::FullType { UInt16Type.name };
    UInt16x4_operator_index_Int32.parameters = UInt16x4_operator_index_Int32_args;
    Symbol::Resolved(&UInt16x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x4_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt32
    UInt16x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    UInt16x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt16x4_operator_index_UInt32.name = "operator[]"_c;
    UInt16x4_operator_index_UInt32.returnType = Type::FullType { UInt16Type.name };
    UInt16x4_operator_index_UInt32.parameters = UInt16x4_operator_index_UInt32_args;
    Symbol::Resolved(&UInt16x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x4_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with Int16
    UInt16x4_operator_index_Int16_arg0.name = "_arg0"_c;
    UInt16x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt16x4_operator_index_Int16.name = "operator[]"_c;
    UInt16x4_operator_index_Int16.returnType = Type::FullType { UInt16Type.name };
    UInt16x4_operator_index_Int16.parameters = UInt16x4_operator_index_Int16_args;
    Symbol::Resolved(&UInt16x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x4_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt16
    UInt16x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    UInt16x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16x4_operator_index_UInt16.name = "operator[]"_c;
    UInt16x4_operator_index_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16x4_operator_index_UInt16.parameters = UInt16x4_operator_index_UInt16_args;
    Symbol::Resolved(&UInt16x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator+ with UInt16x4
    UInt16x4_operator_add_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_add_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_add_UInt16x4.name = "operator+"_c;
    UInt16x4_operator_add_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_add_UInt16x4.parameters = UInt16x4_operator_add_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_add_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_add_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator- with UInt16x4
    UInt16x4_operator_sub_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_sub_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_sub_UInt16x4.name = "operator-"_c;
    UInt16x4_operator_sub_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_sub_UInt16x4.parameters = UInt16x4_operator_sub_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_sub_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_sub_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator* with UInt16x4
    UInt16x4_operator_mul_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_mul_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_mul_UInt16x4.name = "operator*"_c;
    UInt16x4_operator_mul_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_mul_UInt16x4.parameters = UInt16x4_operator_mul_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_mul_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_mul_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator/ with UInt16x4
    UInt16x4_operator_div_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_div_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_div_UInt16x4.name = "operator/"_c;
    UInt16x4_operator_div_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_div_UInt16x4.parameters = UInt16x4_operator_div_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_div_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_div_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator% with UInt16x4
    UInt16x4_operator_mod_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_mod_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_mod_UInt16x4.name = "operator%"_c;
    UInt16x4_operator_mod_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_mod_UInt16x4.parameters = UInt16x4_operator_mod_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_mod_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_mod_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator+= with UInt16x4
    UInt16x4_operator_addasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_addasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_addasg_UInt16x4.name = "operator+="_c;
    UInt16x4_operator_addasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_addasg_UInt16x4.parameters = UInt16x4_operator_addasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_addasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_addasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator-= with UInt16x4
    UInt16x4_operator_subasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_subasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_subasg_UInt16x4.name = "operator-="_c;
    UInt16x4_operator_subasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_subasg_UInt16x4.parameters = UInt16x4_operator_subasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_subasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_subasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator*= with UInt16x4
    UInt16x4_operator_mulasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_mulasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_mulasg_UInt16x4.name = "operator*="_c;
    UInt16x4_operator_mulasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_mulasg_UInt16x4.parameters = UInt16x4_operator_mulasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_mulasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_mulasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator/= with UInt16x4
    UInt16x4_operator_divasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_divasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_divasg_UInt16x4.name = "operator/="_c;
    UInt16x4_operator_divasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_divasg_UInt16x4.parameters = UInt16x4_operator_divasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_divasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_divasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator< with UInt16x4
    UInt16x4_operator_lt_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_lt_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_lt_UInt16x4.name = "operator<"_c;
    UInt16x4_operator_lt_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_lt_UInt16x4.parameters = UInt16x4_operator_lt_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_lt_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_lt_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator<= with UInt16x4
    UInt16x4_operator_lte_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_lte_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_lte_UInt16x4.name = "operator<="_c;
    UInt16x4_operator_lte_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_lte_UInt16x4.parameters = UInt16x4_operator_lte_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_lte_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_lte_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator> with UInt16x4
    UInt16x4_operator_gt_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_gt_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_gt_UInt16x4.name = "operator>"_c;
    UInt16x4_operator_gt_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_gt_UInt16x4.parameters = UInt16x4_operator_gt_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_gt_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_gt_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator>= with UInt16x4
    UInt16x4_operator_gte_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_gte_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_gte_UInt16x4.name = "operator>="_c;
    UInt16x4_operator_gte_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_gte_UInt16x4.parameters = UInt16x4_operator_gte_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_gte_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_gte_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator== with UInt16x4
    UInt16x4_operator_eq_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_eq_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_eq_UInt16x4.name = "operator=="_c;
    UInt16x4_operator_eq_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_eq_UInt16x4.parameters = UInt16x4_operator_eq_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_eq_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_eq_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator!= with UInt16x4
    UInt16x4_operator_neq_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_neq_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_neq_UInt16x4.name = "operator!="_c;
    UInt16x4_operator_neq_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_neq_UInt16x4.parameters = UInt16x4_operator_neq_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_neq_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_neq_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator* with Float32
    UInt16x4_operator_scale_Float32_arg0.name = "_arg0"_c;
    UInt16x4_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    UInt16x4_operator_scale_Float32.name = "operator*"_c;
    UInt16x4_operator_scale_Float32.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_scale_Float32.parameters = UInt16x4_operator_scale_Float32_args;
    Symbol::Resolved(&UInt16x4_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt16x4_operator_scale_Float32)->returnTypeSymbol = &UInt16x4Type;

    /// operator* with Float16
    UInt16x4_operator_scale_Float16_arg0.name = "_arg0"_c;
    UInt16x4_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    UInt16x4_operator_scale_Float16.name = "operator*"_c;
    UInt16x4_operator_scale_Float16.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_scale_Float16.parameters = UInt16x4_operator_scale_Float16_args;
    Symbol::Resolved(&UInt16x4_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x4_operator_scale_Float16)->returnTypeSymbol = &UInt16x4Type;

    /// operator* with UInt32
    UInt16x4_operator_scale_UInt32_arg0.name = "_arg0"_c;
    UInt16x4_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    UInt16x4_operator_scale_UInt32.name = "operator*"_c;
    UInt16x4_operator_scale_UInt32.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_scale_UInt32.parameters = UInt16x4_operator_scale_UInt32_args;
    Symbol::Resolved(&UInt16x4_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x4_operator_scale_UInt32)->returnTypeSymbol = &UInt16x4Type;

    /// operator* with UInt16
    UInt16x4_operator_scale_UInt16_arg0.name = "_arg0"_c;
    UInt16x4_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    UInt16x4_operator_scale_UInt16.name = "operator*"_c;
    UInt16x4_operator_scale_UInt16.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_scale_UInt16.parameters = UInt16x4_operator_scale_UInt16_args;
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16)->returnTypeSymbol = &UInt16x4Type;

    /// operator* with Int32
    UInt16x4_operator_scale_Int32_arg0.name = "_arg0"_c;
    UInt16x4_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    UInt16x4_operator_scale_Int32.name = "operator*"_c;
    UInt16x4_operator_scale_Int32.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_scale_Int32.parameters = UInt16x4_operator_scale_Int32_args;
    Symbol::Resolved(&UInt16x4_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x4_operator_scale_Int32)->returnTypeSymbol = &UInt16x4Type;

    /// operator* with Int16
    UInt16x4_operator_scale_Int16_arg0.name = "_arg0"_c;
    UInt16x4_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    UInt16x4_operator_scale_Int16.name = "operator*"_c;
    UInt16x4_operator_scale_Int16.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_scale_Int16.parameters = UInt16x4_operator_scale_Int16_args;
    Symbol::Resolved(&UInt16x4_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x4_operator_scale_Int16)->returnTypeSymbol = &UInt16x4Type;

    /// operator| with UInt16x4
    UInt16x4_operator_or_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_or_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_or_UInt16x4.name = "operator|"_c;
    UInt16x4_operator_or_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_or_UInt16x4.parameters = UInt16x4_operator_or_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_or_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_or_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator& with UInt16x4
    UInt16x4_operator_and_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_and_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_and_UInt16x4.name = "operator&"_c;
    UInt16x4_operator_and_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_and_UInt16x4.parameters = UInt16x4_operator_and_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_and_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_and_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator^ with UInt16x4
    UInt16x4_operator_xor_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_xor_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_xor_UInt16x4.name = "operator^"_c;
    UInt16x4_operator_xor_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_xor_UInt16x4.parameters = UInt16x4_operator_xor_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_xor_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_xor_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator<< with UInt16x4
    UInt16x4_operator_lsh_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_lsh_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_lsh_UInt16x4.name = "operator<<"_c;
    UInt16x4_operator_lsh_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_lsh_UInt16x4.parameters = UInt16x4_operator_lsh_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_lsh_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_lsh_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator>> with UInt16x4
    UInt16x4_operator_rsh_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_rsh_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_rsh_UInt16x4.name = "operator>>"_c;
    UInt16x4_operator_rsh_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_rsh_UInt16x4.parameters = UInt16x4_operator_rsh_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_rsh_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_rsh_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator|= with UInt16x4
    UInt16x4_operator_orasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_orasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_orasg_UInt16x4.name = "operator|="_c;
    UInt16x4_operator_orasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_orasg_UInt16x4.parameters = UInt16x4_operator_orasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_orasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_orasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator&= with UInt16x4
    UInt16x4_operator_andasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_andasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_andasg_UInt16x4.name = "operator&="_c;
    UInt16x4_operator_andasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_andasg_UInt16x4.parameters = UInt16x4_operator_andasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_andasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_andasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator^= with UInt16x4
    UInt16x4_operator_xorasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_xorasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_xorasg_UInt16x4.name = "operator^="_c;
    UInt16x4_operator_xorasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_xorasg_UInt16x4.parameters = UInt16x4_operator_xorasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_xorasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_xorasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator<<= with UInt16x4
    UInt16x4_operator_lshasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_lshasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_lshasg_UInt16x4.name = "operator<<="_c;
    UInt16x4_operator_lshasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_lshasg_UInt16x4.parameters = UInt16x4_operator_lshasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_lshasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_lshasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator>>= with UInt16x4
    UInt16x4_operator_rhsasg_UInt16x4_arg0.name = "_arg0"_c;
    UInt16x4_operator_rhsasg_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_rhsasg_UInt16x4.name = "operator>>="_c;
    UInt16x4_operator_rhsasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_rhsasg_UInt16x4.parameters = UInt16x4_operator_rhsasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_rhsasg_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_rhsasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &UInt16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &UInt16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &UInt16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &UInt16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &UInt16x4_operator_add_UInt16x4 },
    std::pair{ "operator-"_c, &UInt16x4_operator_sub_UInt16x4 },
    std::pair{ "operator*"_c, &UInt16x4_operator_mul_UInt16x4 },
    std::pair{ "operator/"_c, &UInt16x4_operator_div_UInt16x4 },
    std::pair{ "operator%"_c, &UInt16x4_operator_mod_UInt16x4 },
    std::pair{ "operator+="_c, &UInt16x4_operator_addasg_UInt16x4 },
    std::pair{ "operator-="_c, &UInt16x4_operator_subasg_UInt16x4 },
    std::pair{ "operator*="_c, &UInt16x4_operator_mulasg_UInt16x4 },
    std::pair{ "operator/="_c, &UInt16x4_operator_divasg_UInt16x4 },
    std::pair{ "operator<"_c, &UInt16x4_operator_lt_UInt16x4 },
    std::pair{ "operator<="_c, &UInt16x4_operator_lte_UInt16x4 },
    std::pair{ "operator>"_c, &UInt16x4_operator_gt_UInt16x4 },
    std::pair{ "operator>="_c, &UInt16x4_operator_gte_UInt16x4 },
    std::pair{ "operator=="_c, &UInt16x4_operator_eq_UInt16x4 },
    std::pair{ "operator!="_c, &UInt16x4_operator_neq_UInt16x4 },
    std::pair{ "operator*"_c, &UInt16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &UInt16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &UInt16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &UInt16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &UInt16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &UInt16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &UInt16x4_operator_or_UInt16x4 },
    std::pair{ "operator&"_c, &UInt16x4_operator_and_UInt16x4 },
    std::pair{ "operator^"_c, &UInt16x4_operator_xor_UInt16x4 },
    std::pair{ "operator<<"_c, &UInt16x4_operator_lsh_UInt16x4 },
    std::pair{ "operator>>"_c, &UInt16x4_operator_rsh_UInt16x4 },
    std::pair{ "operator|="_c, &UInt16x4_operator_orasg_UInt16x4 },
    std::pair{ "operator&="_c, &UInt16x4_operator_andasg_UInt16x4 },
    std::pair{ "operator^="_c, &UInt16x4_operator_xorasg_UInt16x4 },
    std::pair{ "operator<<="_c, &UInt16x4_operator_lshasg_UInt16x4 },
    std::pair{ "operator>>="_c, &UInt16x4_operator_rhsasg_UInt16x4 }
    } };
}
UInt16x4 UInt16x4Type;

/// i16x4 with Float32x4
Variable Int16x4_convert_Float32x4_arg0;
Function Int16x4_convert_Float32x4;
inline constexpr std::array Int16x4_convert_Float32x4_args = { &Int16x4_convert_Float32x4_arg0 };

/// i16x4 with Float32
Variable Int16x4_splat_Float32_arg0;
Function Int16x4_splat_Float32;
inline constexpr std::array Int16x4_splat_Float32_args = { &Int16x4_splat_Float32_arg0 };

/// i16x4 with UInt32x4
Variable Int16x4_convert_UInt32x4_arg0;
Function Int16x4_convert_UInt32x4;
inline constexpr std::array Int16x4_convert_UInt32x4_args = { &Int16x4_convert_UInt32x4_arg0 };

/// i16x4 with UInt32
Variable Int16x4_splat_UInt32_arg0;
Function Int16x4_splat_UInt32;
inline constexpr std::array Int16x4_splat_UInt32_args = { &Int16x4_splat_UInt32_arg0 };

/// i16x4 with Int32x4
Variable Int16x4_convert_Int32x4_arg0;
Function Int16x4_convert_Int32x4;
inline constexpr std::array Int16x4_convert_Int32x4_args = { &Int16x4_convert_Int32x4_arg0 };

/// i16x4 with Int32
Variable Int16x4_splat_Int32_arg0;
Function Int16x4_splat_Int32;
inline constexpr std::array Int16x4_splat_Int32_args = { &Int16x4_splat_Int32_arg0 };

/// i16x4 with Float16x4
Variable Int16x4_convert_Float16x4_arg0;
Function Int16x4_convert_Float16x4;
inline constexpr std::array Int16x4_convert_Float16x4_args = { &Int16x4_convert_Float16x4_arg0 };

/// i16x4 with Float16
Variable Int16x4_splat_Float16_arg0;
Function Int16x4_splat_Float16;
inline constexpr std::array Int16x4_splat_Float16_args = { &Int16x4_splat_Float16_arg0 };

/// i16x4 with UInt16x4
Variable Int16x4_convert_UInt16x4_arg0;
Function Int16x4_convert_UInt16x4;
inline constexpr std::array Int16x4_convert_UInt16x4_args = { &Int16x4_convert_UInt16x4_arg0 };

/// i16x4 with UInt16
Variable Int16x4_splat_UInt16_arg0;
Function Int16x4_splat_UInt16;
inline constexpr std::array Int16x4_splat_UInt16_args = { &Int16x4_splat_UInt16_arg0 };

/// i16x4 with Int16x4
Variable Int16x4_convert_Int16x4_arg0;
Function Int16x4_convert_Int16x4;
inline constexpr std::array Int16x4_convert_Int16x4_args = { &Int16x4_convert_Int16x4_arg0 };

/// i16x4 with Int16
Variable Int16x4_splat_Int16_arg0;
Function Int16x4_splat_Int16;
inline constexpr std::array Int16x4_splat_Int16_args = { &Int16x4_splat_Int16_arg0 };

/// i16x4 with Int16, Int16, Int16, Int16
Variable Int16x4_ctor0_arg0_Int16;
Variable Int16x4_ctor0_arg1_Int16;
Variable Int16x4_ctor0_arg2_Int16;
Variable Int16x4_ctor0_arg3_Int16;
Function Int16x4_ctor0;
inline constexpr std::array Int16x4_ctor0_args = { &Int16x4_ctor0_arg0_Int16, &Int16x4_ctor0_arg1_Int16, &Int16x4_ctor0_arg2_Int16, &Int16x4_ctor0_arg3_Int16 };

/// i16x4 with Int16x2, Int16, Int16
Variable Int16x4_ctor1_arg0_Int16x2;
Variable Int16x4_ctor1_arg1_Int16;
Variable Int16x4_ctor1_arg2_Int16;
Function Int16x4_ctor1;
inline constexpr std::array Int16x4_ctor1_args = { &Int16x4_ctor1_arg0_Int16x2, &Int16x4_ctor1_arg1_Int16, &Int16x4_ctor1_arg2_Int16 };

/// i16x4 with Int16, Int16x2, Int16
Variable Int16x4_ctor2_arg0_Int16;
Variable Int16x4_ctor2_arg1_Int16x2;
Variable Int16x4_ctor2_arg2_Int16;
Function Int16x4_ctor2;
inline constexpr std::array Int16x4_ctor2_args = { &Int16x4_ctor2_arg0_Int16, &Int16x4_ctor2_arg1_Int16x2, &Int16x4_ctor2_arg2_Int16 };

/// i16x4 with Int16, Int16, Int16x2
Variable Int16x4_ctor3_arg0_Int16;
Variable Int16x4_ctor3_arg1_Int16;
Variable Int16x4_ctor3_arg2_Int16x2;
Function Int16x4_ctor3;
inline constexpr std::array Int16x4_ctor3_args = { &Int16x4_ctor3_arg0_Int16, &Int16x4_ctor3_arg1_Int16, &Int16x4_ctor3_arg2_Int16x2 };

/// i16x4 with Int16x3, Int16
Variable Int16x4_ctor4_arg0_Int16x3;
Variable Int16x4_ctor4_arg1_Int16;
Function Int16x4_ctor4;
inline constexpr std::array Int16x4_ctor4_args = { &Int16x4_ctor4_arg0_Int16x3, &Int16x4_ctor4_arg1_Int16 };

/// i16x4 with Int16, Int16x3
Variable Int16x4_ctor5_arg0_Int16;
Variable Int16x4_ctor5_arg1_Int16x3;
Function Int16x4_ctor5;
inline constexpr std::array Int16x4_ctor5_args = { &Int16x4_ctor5_arg0_Int16, &Int16x4_ctor5_arg1_Int16x3 };

/// operator[] with Int32
Variable Int16x4_operator_index_Int32_arg0;
Function Int16x4_operator_index_Int32;
inline constexpr std::array Int16x4_operator_index_Int32_args = { &Int16x4_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Int16x4_operator_index_UInt32_arg0;
Function Int16x4_operator_index_UInt32;
inline constexpr std::array Int16x4_operator_index_UInt32_args = { &Int16x4_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Int16x4_operator_index_Int16_arg0;
Function Int16x4_operator_index_Int16;
inline constexpr std::array Int16x4_operator_index_Int16_args = { &Int16x4_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Int16x4_operator_index_UInt16_arg0;
Function Int16x4_operator_index_UInt16;
inline constexpr std::array Int16x4_operator_index_UInt16_args = { &Int16x4_operator_index_UInt16_arg0 };

/// operator+ with Int16x4
Variable Int16x4_operator_add_Int16x4_arg0;
Function Int16x4_operator_add_Int16x4;
inline constexpr std::array Int16x4_operator_add_Int16x4_args = { &Int16x4_operator_add_Int16x4_arg0 };

/// operator- with Int16x4
Variable Int16x4_operator_sub_Int16x4_arg0;
Function Int16x4_operator_sub_Int16x4;
inline constexpr std::array Int16x4_operator_sub_Int16x4_args = { &Int16x4_operator_sub_Int16x4_arg0 };

/// operator* with Int16x4
Variable Int16x4_operator_mul_Int16x4_arg0;
Function Int16x4_operator_mul_Int16x4;
inline constexpr std::array Int16x4_operator_mul_Int16x4_args = { &Int16x4_operator_mul_Int16x4_arg0 };

/// operator/ with Int16x4
Variable Int16x4_operator_div_Int16x4_arg0;
Function Int16x4_operator_div_Int16x4;
inline constexpr std::array Int16x4_operator_div_Int16x4_args = { &Int16x4_operator_div_Int16x4_arg0 };

/// operator% with Int16x4
Variable Int16x4_operator_mod_Int16x4_arg0;
Function Int16x4_operator_mod_Int16x4;
inline constexpr std::array Int16x4_operator_mod_Int16x4_args = { &Int16x4_operator_mod_Int16x4_arg0 };

/// operator+= with Int16x4
Variable Int16x4_operator_addasg_Int16x4_arg0;
Function Int16x4_operator_addasg_Int16x4;
inline constexpr std::array Int16x4_operator_addasg_Int16x4_args = { &Int16x4_operator_addasg_Int16x4_arg0 };

/// operator-= with Int16x4
Variable Int16x4_operator_subasg_Int16x4_arg0;
Function Int16x4_operator_subasg_Int16x4;
inline constexpr std::array Int16x4_operator_subasg_Int16x4_args = { &Int16x4_operator_subasg_Int16x4_arg0 };

/// operator*= with Int16x4
Variable Int16x4_operator_mulasg_Int16x4_arg0;
Function Int16x4_operator_mulasg_Int16x4;
inline constexpr std::array Int16x4_operator_mulasg_Int16x4_args = { &Int16x4_operator_mulasg_Int16x4_arg0 };

/// operator/= with Int16x4
Variable Int16x4_operator_divasg_Int16x4_arg0;
Function Int16x4_operator_divasg_Int16x4;
inline constexpr std::array Int16x4_operator_divasg_Int16x4_args = { &Int16x4_operator_divasg_Int16x4_arg0 };

/// operator< with Int16x4
Variable Int16x4_operator_lt_Int16x4_arg0;
Function Int16x4_operator_lt_Int16x4;
inline constexpr std::array Int16x4_operator_lt_Int16x4_args = { &Int16x4_operator_lt_Int16x4_arg0 };

/// operator<= with Int16x4
Variable Int16x4_operator_lte_Int16x4_arg0;
Function Int16x4_operator_lte_Int16x4;
inline constexpr std::array Int16x4_operator_lte_Int16x4_args = { &Int16x4_operator_lte_Int16x4_arg0 };

/// operator> with Int16x4
Variable Int16x4_operator_gt_Int16x4_arg0;
Function Int16x4_operator_gt_Int16x4;
inline constexpr std::array Int16x4_operator_gt_Int16x4_args = { &Int16x4_operator_gt_Int16x4_arg0 };

/// operator>= with Int16x4
Variable Int16x4_operator_gte_Int16x4_arg0;
Function Int16x4_operator_gte_Int16x4;
inline constexpr std::array Int16x4_operator_gte_Int16x4_args = { &Int16x4_operator_gte_Int16x4_arg0 };

/// operator== with Int16x4
Variable Int16x4_operator_eq_Int16x4_arg0;
Function Int16x4_operator_eq_Int16x4;
inline constexpr std::array Int16x4_operator_eq_Int16x4_args = { &Int16x4_operator_eq_Int16x4_arg0 };

/// operator!= with Int16x4
Variable Int16x4_operator_neq_Int16x4_arg0;
Function Int16x4_operator_neq_Int16x4;
inline constexpr std::array Int16x4_operator_neq_Int16x4_args = { &Int16x4_operator_neq_Int16x4_arg0 };

/// operator* with Float32
Variable Int16x4_operator_scale_Float32_arg0;
Function Int16x4_operator_scale_Float32;
inline constexpr std::array Int16x4_operator_scale_Float32_args = { &Int16x4_operator_scale_Float32_arg0 };

/// operator* with Float16
Variable Int16x4_operator_scale_Float16_arg0;
Function Int16x4_operator_scale_Float16;
inline constexpr std::array Int16x4_operator_scale_Float16_args = { &Int16x4_operator_scale_Float16_arg0 };

/// operator* with UInt32
Variable Int16x4_operator_scale_UInt32_arg0;
Function Int16x4_operator_scale_UInt32;
inline constexpr std::array Int16x4_operator_scale_UInt32_args = { &Int16x4_operator_scale_UInt32_arg0 };

/// operator* with UInt16
Variable Int16x4_operator_scale_UInt16_arg0;
Function Int16x4_operator_scale_UInt16;
inline constexpr std::array Int16x4_operator_scale_UInt16_args = { &Int16x4_operator_scale_UInt16_arg0 };

/// operator* with Int32
Variable Int16x4_operator_scale_Int32_arg0;
Function Int16x4_operator_scale_Int32;
inline constexpr std::array Int16x4_operator_scale_Int32_args = { &Int16x4_operator_scale_Int32_arg0 };

/// operator* with Int16
Variable Int16x4_operator_scale_Int16_arg0;
Function Int16x4_operator_scale_Int16;
inline constexpr std::array Int16x4_operator_scale_Int16_args = { &Int16x4_operator_scale_Int16_arg0 };

/// operator| with Int16x4
Variable Int16x4_operator_or_Int16x4_arg0;
Function Int16x4_operator_or_Int16x4;
inline constexpr std::array Int16x4_operator_or_Int16x4_args = { &Int16x4_operator_or_Int16x4_arg0 };

/// operator& with Int16x4
Variable Int16x4_operator_and_Int16x4_arg0;
Function Int16x4_operator_and_Int16x4;
inline constexpr std::array Int16x4_operator_and_Int16x4_args = { &Int16x4_operator_and_Int16x4_arg0 };

/// operator^ with Int16x4
Variable Int16x4_operator_xor_Int16x4_arg0;
Function Int16x4_operator_xor_Int16x4;
inline constexpr std::array Int16x4_operator_xor_Int16x4_args = { &Int16x4_operator_xor_Int16x4_arg0 };

/// operator<< with Int16x4
Variable Int16x4_operator_lsh_Int16x4_arg0;
Function Int16x4_operator_lsh_Int16x4;
inline constexpr std::array Int16x4_operator_lsh_Int16x4_args = { &Int16x4_operator_lsh_Int16x4_arg0 };

/// operator>> with Int16x4
Variable Int16x4_operator_rsh_Int16x4_arg0;
Function Int16x4_operator_rsh_Int16x4;
inline constexpr std::array Int16x4_operator_rsh_Int16x4_args = { &Int16x4_operator_rsh_Int16x4_arg0 };

/// operator|= with Int16x4
Variable Int16x4_operator_orasg_Int16x4_arg0;
Function Int16x4_operator_orasg_Int16x4;
inline constexpr std::array Int16x4_operator_orasg_Int16x4_args = { &Int16x4_operator_orasg_Int16x4_arg0 };

/// operator&= with Int16x4
Variable Int16x4_operator_andasg_Int16x4_arg0;
Function Int16x4_operator_andasg_Int16x4;
inline constexpr std::array Int16x4_operator_andasg_Int16x4_args = { &Int16x4_operator_andasg_Int16x4_arg0 };

/// operator^= with Int16x4
Variable Int16x4_operator_xorasg_Int16x4_arg0;
Function Int16x4_operator_xorasg_Int16x4;
inline constexpr std::array Int16x4_operator_xorasg_Int16x4_args = { &Int16x4_operator_xorasg_Int16x4_arg0 };

/// operator<<= with Int16x4
Variable Int16x4_operator_lshasg_Int16x4_arg0;
Function Int16x4_operator_lshasg_Int16x4;
inline constexpr std::array Int16x4_operator_lshasg_Int16x4_args = { &Int16x4_operator_lshasg_Int16x4_arg0 };

/// operator>>= with Int16x4
Variable Int16x4_operator_rhsasg_Int16x4_arg0;
Function Int16x4_operator_rhsasg_Int16x4;
inline constexpr std::array Int16x4_operator_rhsasg_Int16x4_args = { &Int16x4_operator_rhsasg_Int16x4_arg0 };

Int16x4::Int16x4()
{
    this->name = "i16x4";
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    /// i16x4 with Float32x4
    Int16x4_convert_Float32x4_arg0.name = "val"_c;
    Int16x4_convert_Float32x4_arg0.type = Type::FullType{ Float32x4Type.name };
    Int16x4_convert_Float32x4.documentation = "Convert f32x4 to i16x4"_c;
    Int16x4_convert_Float32x4.name = "i16x4"_c;
    Int16x4_convert_Float32x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_convert_Float32x4.parameters = Int16x4_convert_Float32x4_args;
    Symbol::Resolved(&Int16x4_convert_Float32x4_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Int16x4_convert_Float32x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Float32
    Int16x4_splat_Float32_arg0.name = "val"_c;
    Int16x4_splat_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Int16x4_splat_Float32.documentation = "Splat f32x4 to i16x4"_c;
    Int16x4_splat_Float32.name = "i16x4"_c;
    Int16x4_splat_Float32.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_Float32.parameters = Int16x4_splat_Float32_args;
    Symbol::Resolved(&Int16x4_splat_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int16x4_splat_Float32)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with UInt32x4
    Int16x4_convert_UInt32x4_arg0.name = "val"_c;
    Int16x4_convert_UInt32x4_arg0.type = Type::FullType{ UInt32x4Type.name };
    Int16x4_convert_UInt32x4.documentation = "Convert u32x4 to i16x4"_c;
    Int16x4_convert_UInt32x4.name = "i16x4"_c;
    Int16x4_convert_UInt32x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_convert_UInt32x4.parameters = Int16x4_convert_UInt32x4_args;
    Symbol::Resolved(&Int16x4_convert_UInt32x4_arg0)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&Int16x4_convert_UInt32x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with UInt32
    Int16x4_splat_UInt32_arg0.name = "val"_c;
    Int16x4_splat_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int16x4_splat_UInt32.documentation = "Splat u32x4 to i16x4"_c;
    Int16x4_splat_UInt32.name = "i16x4"_c;
    Int16x4_splat_UInt32.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_UInt32.parameters = Int16x4_splat_UInt32_args;
    Symbol::Resolved(&Int16x4_splat_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x4_splat_UInt32)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int32x4
    Int16x4_convert_Int32x4_arg0.name = "val"_c;
    Int16x4_convert_Int32x4_arg0.type = Type::FullType{ Int32x4Type.name };
    Int16x4_convert_Int32x4.documentation = "Convert i32x4 to i16x4"_c;
    Int16x4_convert_Int32x4.name = "i16x4"_c;
    Int16x4_convert_Int32x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_convert_Int32x4.parameters = Int16x4_convert_Int32x4_args;
    Symbol::Resolved(&Int16x4_convert_Int32x4_arg0)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int16x4_convert_Int32x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int32
    Int16x4_splat_Int32_arg0.name = "val"_c;
    Int16x4_splat_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int16x4_splat_Int32.documentation = "Splat i32x4 to i16x4"_c;
    Int16x4_splat_Int32.name = "i16x4"_c;
    Int16x4_splat_Int32.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_Int32.parameters = Int16x4_splat_Int32_args;
    Symbol::Resolved(&Int16x4_splat_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x4_splat_Int32)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Float16x4
    Int16x4_convert_Float16x4_arg0.name = "val"_c;
    Int16x4_convert_Float16x4_arg0.type = Type::FullType{ Float16x4Type.name };
    Int16x4_convert_Float16x4.documentation = "Convert f16x4 to i16x4"_c;
    Int16x4_convert_Float16x4.name = "i16x4"_c;
    Int16x4_convert_Float16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_convert_Float16x4.parameters = Int16x4_convert_Float16x4_args;
    Symbol::Resolved(&Int16x4_convert_Float16x4_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Int16x4_convert_Float16x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Float16
    Int16x4_splat_Float16_arg0.name = "val"_c;
    Int16x4_splat_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Int16x4_splat_Float16.documentation = "Splat f16x4 to i16x4"_c;
    Int16x4_splat_Float16.name = "i16x4"_c;
    Int16x4_splat_Float16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_Float16.parameters = Int16x4_splat_Float16_args;
    Symbol::Resolved(&Int16x4_splat_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x4_splat_Float16)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with UInt16x4
    Int16x4_convert_UInt16x4_arg0.name = "val"_c;
    Int16x4_convert_UInt16x4_arg0.type = Type::FullType{ UInt16x4Type.name };
    Int16x4_convert_UInt16x4.documentation = "Convert u16x4 to i16x4"_c;
    Int16x4_convert_UInt16x4.name = "i16x4"_c;
    Int16x4_convert_UInt16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_convert_UInt16x4.parameters = Int16x4_convert_UInt16x4_args;
    Symbol::Resolved(&Int16x4_convert_UInt16x4_arg0)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&Int16x4_convert_UInt16x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with UInt16
    Int16x4_splat_UInt16_arg0.name = "val"_c;
    Int16x4_splat_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int16x4_splat_UInt16.documentation = "Splat u16x4 to i16x4"_c;
    Int16x4_splat_UInt16.name = "i16x4"_c;
    Int16x4_splat_UInt16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_UInt16.parameters = Int16x4_splat_UInt16_args;
    Symbol::Resolved(&Int16x4_splat_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x4_splat_UInt16)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16x4
    Int16x4_convert_Int16x4_arg0.name = "val"_c;
    Int16x4_convert_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_convert_Int16x4.documentation = "Convert i16x4 to i16x4"_c;
    Int16x4_convert_Int16x4.name = "i16x4"_c;
    Int16x4_convert_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_convert_Int16x4.parameters = Int16x4_convert_Int16x4_args;
    Symbol::Resolved(&Int16x4_convert_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_convert_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16
    Int16x4_splat_Int16_arg0.name = "val"_c;
    Int16x4_splat_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16x4_splat_Int16.documentation = "Splat i16x4 to i16x4"_c;
    Int16x4_splat_Int16.name = "i16x4"_c;
    Int16x4_splat_Int16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_Int16.parameters = Int16x4_splat_Int16_args;
    Symbol::Resolved(&Int16x4_splat_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_splat_Int16)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16, Int16, Int16, Int16
    Int16x4_ctor0_arg0_Int16.name = "_arg0"_c;
    Int16x4_ctor0_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor0_arg1_Int16.name = "_arg1"_c;
    Int16x4_ctor0_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor0_arg2_Int16.name = "_arg2"_c;
    Int16x4_ctor0_arg2_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor0_arg3_Int16.name = "_arg3"_c;
    Int16x4_ctor0_arg3_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor0.name = "i16x4"_c;
    Int16x4_ctor0.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor0.parameters = Int16x4_ctor0_args;
    Symbol::Resolved(&Int16x4_ctor0_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor0_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor0_arg2_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor0_arg3_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor0)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16x2, Int16, Int16
    Int16x4_ctor1_arg0_Int16x2.name = "_arg0"_c;
    Int16x4_ctor1_arg0_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x4_ctor1_arg1_Int16.name = "_arg1"_c;
    Int16x4_ctor1_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor1_arg2_Int16.name = "_arg2"_c;
    Int16x4_ctor1_arg2_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor1.name = "i16x4"_c;
    Int16x4_ctor1.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor1.parameters = Int16x4_ctor1_args;
    Symbol::Resolved(&Int16x4_ctor1_arg0_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x4_ctor1_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor1_arg2_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor1)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16, Int16x2, Int16
    Int16x4_ctor2_arg0_Int16.name = "_arg0"_c;
    Int16x4_ctor2_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor2_arg1_Int16x2.name = "_arg1"_c;
    Int16x4_ctor2_arg1_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x4_ctor2_arg2_Int16.name = "_arg2"_c;
    Int16x4_ctor2_arg2_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor2.name = "i16x4"_c;
    Int16x4_ctor2.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor2.parameters = Int16x4_ctor2_args;
    Symbol::Resolved(&Int16x4_ctor2_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor2_arg1_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x4_ctor2_arg2_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor2)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16, Int16, Int16x2
    Int16x4_ctor3_arg0_Int16.name = "_arg0"_c;
    Int16x4_ctor3_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor3_arg1_Int16.name = "_arg1"_c;
    Int16x4_ctor3_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor3_arg2_Int16x2.name = "_arg2"_c;
    Int16x4_ctor3_arg2_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x4_ctor3.name = "i16x4"_c;
    Int16x4_ctor3.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor3.parameters = Int16x4_ctor3_args;
    Symbol::Resolved(&Int16x4_ctor3_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor3_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor3_arg2_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x4_ctor3)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16x3, Int16
    Int16x4_ctor4_arg0_Int16x3.name = "_arg0"_c;
    Int16x4_ctor4_arg0_Int16x3.type = Type::FullType{ Int16x3Type.name };
    Int16x4_ctor4_arg1_Int16.name = "_arg1"_c;
    Int16x4_ctor4_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor4.name = "i16x4"_c;
    Int16x4_ctor4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor4.parameters = Int16x4_ctor4_args;
    Symbol::Resolved(&Int16x4_ctor4_arg0_Int16x3)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x4_ctor4_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16, Int16x3
    Int16x4_ctor5_arg0_Int16.name = "_arg0"_c;
    Int16x4_ctor5_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor5_arg1_Int16x3.name = "_arg1"_c;
    Int16x4_ctor5_arg1_Int16x3.type = Type::FullType{ Int16x3Type.name };
    Int16x4_ctor5.name = "i16x4"_c;
    Int16x4_ctor5.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor5.parameters = Int16x4_ctor5_args;
    Symbol::Resolved(&Int16x4_ctor5_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor5_arg1_Int16x3)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x4_ctor5)->returnTypeSymbol = &Int16x4Type;

    /// operator[] with Int32
    Int16x4_operator_index_Int32_arg0.name = "_arg0"_c;
    Int16x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int16x4_operator_index_Int32.name = "operator[]"_c;
    Int16x4_operator_index_Int32.returnType = Type::FullType { Int16Type.name };
    Int16x4_operator_index_Int32.parameters = Int16x4_operator_index_Int32_args;
    Symbol::Resolved(&Int16x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x4_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt32
    Int16x4_operator_index_UInt32_arg0.name = "_arg0"_c;
    Int16x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int16x4_operator_index_UInt32.name = "operator[]"_c;
    Int16x4_operator_index_UInt32.returnType = Type::FullType { Int16Type.name };
    Int16x4_operator_index_UInt32.parameters = Int16x4_operator_index_UInt32_args;
    Symbol::Resolved(&Int16x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x4_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    /// operator[] with Int16
    Int16x4_operator_index_Int16_arg0.name = "_arg0"_c;
    Int16x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16x4_operator_index_Int16.name = "operator[]"_c;
    Int16x4_operator_index_Int16.returnType = Type::FullType { Int16Type.name };
    Int16x4_operator_index_Int16.parameters = Int16x4_operator_index_Int16_args;
    Symbol::Resolved(&Int16x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt16
    Int16x4_operator_index_UInt16_arg0.name = "_arg0"_c;
    Int16x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int16x4_operator_index_UInt16.name = "operator[]"_c;
    Int16x4_operator_index_UInt16.returnType = Type::FullType { Int16Type.name };
    Int16x4_operator_index_UInt16.parameters = Int16x4_operator_index_UInt16_args;
    Symbol::Resolved(&Int16x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x4_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    /// operator+ with Int16x4
    Int16x4_operator_add_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_add_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_add_Int16x4.name = "operator+"_c;
    Int16x4_operator_add_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_add_Int16x4.parameters = Int16x4_operator_add_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_add_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_add_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator- with Int16x4
    Int16x4_operator_sub_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_sub_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_sub_Int16x4.name = "operator-"_c;
    Int16x4_operator_sub_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_sub_Int16x4.parameters = Int16x4_operator_sub_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_sub_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_sub_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator* with Int16x4
    Int16x4_operator_mul_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_mul_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_mul_Int16x4.name = "operator*"_c;
    Int16x4_operator_mul_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_mul_Int16x4.parameters = Int16x4_operator_mul_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_mul_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_mul_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator/ with Int16x4
    Int16x4_operator_div_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_div_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_div_Int16x4.name = "operator/"_c;
    Int16x4_operator_div_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_div_Int16x4.parameters = Int16x4_operator_div_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_div_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_div_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator% with Int16x4
    Int16x4_operator_mod_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_mod_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_mod_Int16x4.name = "operator%"_c;
    Int16x4_operator_mod_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_mod_Int16x4.parameters = Int16x4_operator_mod_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_mod_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_mod_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator+= with Int16x4
    Int16x4_operator_addasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_addasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_addasg_Int16x4.name = "operator+="_c;
    Int16x4_operator_addasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_addasg_Int16x4.parameters = Int16x4_operator_addasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_addasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_addasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator-= with Int16x4
    Int16x4_operator_subasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_subasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_subasg_Int16x4.name = "operator-="_c;
    Int16x4_operator_subasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_subasg_Int16x4.parameters = Int16x4_operator_subasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_subasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_subasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator*= with Int16x4
    Int16x4_operator_mulasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_mulasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_mulasg_Int16x4.name = "operator*="_c;
    Int16x4_operator_mulasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_mulasg_Int16x4.parameters = Int16x4_operator_mulasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_mulasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_mulasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator/= with Int16x4
    Int16x4_operator_divasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_divasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_divasg_Int16x4.name = "operator/="_c;
    Int16x4_operator_divasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_divasg_Int16x4.parameters = Int16x4_operator_divasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_divasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_divasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator< with Int16x4
    Int16x4_operator_lt_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_lt_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_lt_Int16x4.name = "operator<"_c;
    Int16x4_operator_lt_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_lt_Int16x4.parameters = Int16x4_operator_lt_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_lt_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_lt_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator<= with Int16x4
    Int16x4_operator_lte_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_lte_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_lte_Int16x4.name = "operator<="_c;
    Int16x4_operator_lte_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_lte_Int16x4.parameters = Int16x4_operator_lte_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_lte_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_lte_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator> with Int16x4
    Int16x4_operator_gt_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_gt_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_gt_Int16x4.name = "operator>"_c;
    Int16x4_operator_gt_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_gt_Int16x4.parameters = Int16x4_operator_gt_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_gt_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_gt_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator>= with Int16x4
    Int16x4_operator_gte_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_gte_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_gte_Int16x4.name = "operator>="_c;
    Int16x4_operator_gte_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_gte_Int16x4.parameters = Int16x4_operator_gte_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_gte_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_gte_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator== with Int16x4
    Int16x4_operator_eq_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_eq_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_eq_Int16x4.name = "operator=="_c;
    Int16x4_operator_eq_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_eq_Int16x4.parameters = Int16x4_operator_eq_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_eq_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_eq_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator!= with Int16x4
    Int16x4_operator_neq_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_neq_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_neq_Int16x4.name = "operator!="_c;
    Int16x4_operator_neq_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_neq_Int16x4.parameters = Int16x4_operator_neq_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_neq_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_neq_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator* with Float32
    Int16x4_operator_scale_Float32_arg0.name = "_arg0"_c;
    Int16x4_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Int16x4_operator_scale_Float32.name = "operator*"_c;
    Int16x4_operator_scale_Float32.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_scale_Float32.parameters = Int16x4_operator_scale_Float32_args;
    Symbol::Resolved(&Int16x4_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int16x4_operator_scale_Float32)->returnTypeSymbol = &Int16x4Type;

    /// operator* with Float16
    Int16x4_operator_scale_Float16_arg0.name = "_arg0"_c;
    Int16x4_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Int16x4_operator_scale_Float16.name = "operator*"_c;
    Int16x4_operator_scale_Float16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_scale_Float16.parameters = Int16x4_operator_scale_Float16_args;
    Symbol::Resolved(&Int16x4_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x4_operator_scale_Float16)->returnTypeSymbol = &Int16x4Type;

    /// operator* with UInt32
    Int16x4_operator_scale_UInt32_arg0.name = "_arg0"_c;
    Int16x4_operator_scale_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Int16x4_operator_scale_UInt32.name = "operator*"_c;
    Int16x4_operator_scale_UInt32.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_scale_UInt32.parameters = Int16x4_operator_scale_UInt32_args;
    Symbol::Resolved(&Int16x4_operator_scale_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x4_operator_scale_UInt32)->returnTypeSymbol = &Int16x4Type;

    /// operator* with UInt16
    Int16x4_operator_scale_UInt16_arg0.name = "_arg0"_c;
    Int16x4_operator_scale_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Int16x4_operator_scale_UInt16.name = "operator*"_c;
    Int16x4_operator_scale_UInt16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_scale_UInt16.parameters = Int16x4_operator_scale_UInt16_args;
    Symbol::Resolved(&Int16x4_operator_scale_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x4_operator_scale_UInt16)->returnTypeSymbol = &Int16x4Type;

    /// operator* with Int32
    Int16x4_operator_scale_Int32_arg0.name = "_arg0"_c;
    Int16x4_operator_scale_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Int16x4_operator_scale_Int32.name = "operator*"_c;
    Int16x4_operator_scale_Int32.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_scale_Int32.parameters = Int16x4_operator_scale_Int32_args;
    Symbol::Resolved(&Int16x4_operator_scale_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x4_operator_scale_Int32)->returnTypeSymbol = &Int16x4Type;

    /// operator* with Int16
    Int16x4_operator_scale_Int16_arg0.name = "_arg0"_c;
    Int16x4_operator_scale_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Int16x4_operator_scale_Int16.name = "operator*"_c;
    Int16x4_operator_scale_Int16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_scale_Int16.parameters = Int16x4_operator_scale_Int16_args;
    Symbol::Resolved(&Int16x4_operator_scale_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_operator_scale_Int16)->returnTypeSymbol = &Int16x4Type;

    /// operator| with Int16x4
    Int16x4_operator_or_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_or_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_or_Int16x4.name = "operator|"_c;
    Int16x4_operator_or_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_or_Int16x4.parameters = Int16x4_operator_or_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_or_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_or_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator& with Int16x4
    Int16x4_operator_and_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_and_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_and_Int16x4.name = "operator&"_c;
    Int16x4_operator_and_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_and_Int16x4.parameters = Int16x4_operator_and_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_and_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_and_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator^ with Int16x4
    Int16x4_operator_xor_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_xor_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_xor_Int16x4.name = "operator^"_c;
    Int16x4_operator_xor_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_xor_Int16x4.parameters = Int16x4_operator_xor_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_xor_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_xor_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator<< with Int16x4
    Int16x4_operator_lsh_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_lsh_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_lsh_Int16x4.name = "operator<<"_c;
    Int16x4_operator_lsh_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_lsh_Int16x4.parameters = Int16x4_operator_lsh_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_lsh_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_lsh_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator>> with Int16x4
    Int16x4_operator_rsh_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_rsh_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_rsh_Int16x4.name = "operator>>"_c;
    Int16x4_operator_rsh_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_rsh_Int16x4.parameters = Int16x4_operator_rsh_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_rsh_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_rsh_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator|= with Int16x4
    Int16x4_operator_orasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_orasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_orasg_Int16x4.name = "operator|="_c;
    Int16x4_operator_orasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_orasg_Int16x4.parameters = Int16x4_operator_orasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_orasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_orasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator&= with Int16x4
    Int16x4_operator_andasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_andasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_andasg_Int16x4.name = "operator&="_c;
    Int16x4_operator_andasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_andasg_Int16x4.parameters = Int16x4_operator_andasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_andasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_andasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator^= with Int16x4
    Int16x4_operator_xorasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_xorasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_xorasg_Int16x4.name = "operator^="_c;
    Int16x4_operator_xorasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_xorasg_Int16x4.parameters = Int16x4_operator_xorasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_xorasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_xorasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator<<= with Int16x4
    Int16x4_operator_lshasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_lshasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_lshasg_Int16x4.name = "operator<<="_c;
    Int16x4_operator_lshasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_lshasg_Int16x4.parameters = Int16x4_operator_lshasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_lshasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_lshasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator>>= with Int16x4
    Int16x4_operator_rhsasg_Int16x4_arg0.name = "_arg0"_c;
    Int16x4_operator_rhsasg_Int16x4_arg0.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_rhsasg_Int16x4.name = "operator>>="_c;
    Int16x4_operator_rhsasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_rhsasg_Int16x4.parameters = Int16x4_operator_rhsasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_rhsasg_Int16x4_arg0)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_rhsasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    this->scope.symbolLookup = StaticMap { std::array{
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 }
    } };
}
Int16x4 Int16x4Type;

/// f32x2x2 with Float32x2, Float32x2
Variable Float32x2x2_Float32_2_ctor_arg0;
Variable Float32x2x2_Float32_2_ctor_arg1;
Function Float32x2x2_Float32_2_ctor;
inline constexpr std::array Float32x2x2_Float32_2_ctor_args = { &Float32x2x2_Float32_2_ctor_arg0, &Float32x2x2_Float32_2_ctor_arg1 };

/// f32x2x2
Function Float32x2x2_identity;

/// f32x2x2 with Float32, Float32, Float32, Float32
Variable Float32x2x2_raw_list_arg0;
Variable Float32x2x2_raw_list_arg1;
Variable Float32x2x2_raw_list_arg2;
Variable Float32x2x2_raw_list_arg3;
Function Float32x2x2_raw_list;
inline constexpr std::array Float32x2x2_raw_list_args = { &Float32x2x2_raw_list_arg0, &Float32x2x2_raw_list_arg1, &Float32x2x2_raw_list_arg2, &Float32x2x2_raw_list_arg3 };

/// operator[] with Int32
Variable Float32x2x2_operator_index_Int32_arg0;
Function Float32x2x2_operator_index_Int32;
inline constexpr std::array Float32x2x2_operator_index_Int32_args = { &Float32x2x2_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float32x2x2_operator_index_UInt32_arg0;
Function Float32x2x2_operator_index_UInt32;
inline constexpr std::array Float32x2x2_operator_index_UInt32_args = { &Float32x2x2_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float32x2x2_operator_index_Int16_arg0;
Function Float32x2x2_operator_index_Int16;
inline constexpr std::array Float32x2x2_operator_index_Int16_args = { &Float32x2x2_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float32x2x2_operator_index_UInt16_arg0;
Function Float32x2x2_operator_index_UInt16;
inline constexpr std::array Float32x2x2_operator_index_UInt16_args = { &Float32x2x2_operator_index_UInt16_arg0 };

/// operator+ with Float32x2x2
Variable Float32x2x2_operator_add_Float32x2x2_arg0;
Function Float32x2x2_operator_add_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_add_Float32x2x2_args = { &Float32x2x2_operator_add_Float32x2x2_arg0 };

/// operator- with Float32x2x2
Variable Float32x2x2_operator_sub_Float32x2x2_arg0;
Function Float32x2x2_operator_sub_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_sub_Float32x2x2_args = { &Float32x2x2_operator_sub_Float32x2x2_arg0 };

/// operator* with Float32x2x2
Variable Float32x2x2_operator_mul_Float32x2x2_arg0;
Function Float32x2x2_operator_mul_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_mul_Float32x2x2_args = { &Float32x2x2_operator_mul_Float32x2x2_arg0 };

/// operator+= with Float32x2x2
Variable Float32x2x2_operator_addasg_Float32x2x2_arg0;
Function Float32x2x2_operator_addasg_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_addasg_Float32x2x2_args = { &Float32x2x2_operator_addasg_Float32x2x2_arg0 };

/// operator-= with Float32x2x2
Variable Float32x2x2_operator_subasg_Float32x2x2_arg0;
Function Float32x2x2_operator_subasg_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_subasg_Float32x2x2_args = { &Float32x2x2_operator_subasg_Float32x2x2_arg0 };

/// operator*= with Float32x2x2
Variable Float32x2x2_operator_mulasg_Float32x2x2_arg0;
Function Float32x2x2_operator_mulasg_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_mulasg_Float32x2x2_args = { &Float32x2x2_operator_mulasg_Float32x2x2_arg0 };

/// operator* with Float32
Variable Float32x2x2_operator_scale_Float32_arg0;
Function Float32x2x2_operator_scale_Float32;
inline constexpr std::array Float32x2x2_operator_scale_Float32_args = { &Float32x2x2_operator_scale_Float32_arg0 };

Float32x2x2::Float32x2x2()
{
    this->name = "f32";
    this->columnSize = 2;
    this->rowSize = 2;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// f32x2x2 with Float32x2, Float32x2
    Float32x2x2_Float32_2_ctor_arg0.name = "_arg0"_c;
    Float32x2x2_Float32_2_ctor_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2x2_Float32_2_ctor_arg1.name = "_arg1"_c;
    Float32x2x2_Float32_2_ctor_arg1.type = Type::FullType{ Float32x2Type.name };
    Float32x2x2_Float32_2_ctor.name = "f32x2x2"_c;
    Float32x2x2_Float32_2_ctor.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_Float32_2_ctor.parameters = Float32x2x2_Float32_2_ctor_args;
    Symbol::Resolved(&Float32x2x2_Float32_2_ctor_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2x2_Float32_2_ctor_arg1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2x2_Float32_2_ctor)->returnTypeSymbol = &Float32x2x2Type;

    /// f32x2x2
    Float32x2x2_identity.name = "f32x2x2"_c;
    Float32x2x2_identity.returnType = Type::FullType { Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_identity)->returnTypeSymbol = &Float32x2x2Type;

    /// f32x2x2 with Float32, Float32, Float32, Float32
    Float32x2x2_raw_list_arg0.name = "_arg0"_c;
    Float32x2x2_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x2x2_raw_list_arg1.name = "_arg1"_c;
    Float32x2x2_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x2x2_raw_list_arg2.name = "_arg2"_c;
    Float32x2x2_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x2x2_raw_list_arg3.name = "_arg3"_c;
    Float32x2x2_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x2x2_raw_list.name = "f32x2x2"_c;
    Float32x2x2_raw_list.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_raw_list.parameters = Float32x2x2_raw_list_args;
    Symbol::Resolved(&Float32x2x2_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x2_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x2_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x2_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x2_raw_list)->returnTypeSymbol = &Float32x2x2Type;

    /// operator[] with Int32
    Float32x2x2_operator_index_Int32_arg0.name = "idx"_c;
    Float32x2x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x2x2_operator_index_Int32.name = "operator[]"_c;
    Float32x2x2_operator_index_Int32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x2_operator_index_Int32.parameters = Float32x2x2_operator_index_Int32_args;
    Symbol::Resolved(&Float32x2x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2x2_operator_index_Int32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt32
    Float32x2x2_operator_index_UInt32_arg0.name = "idx"_c;
    Float32x2x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x2x2_operator_index_UInt32.name = "operator[]"_c;
    Float32x2x2_operator_index_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x2_operator_index_UInt32.parameters = Float32x2x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with Int16
    Float32x2x2_operator_index_Int16_arg0.name = "idx"_c;
    Float32x2x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x2x2_operator_index_Int16.name = "operator[]"_c;
    Float32x2x2_operator_index_Int16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x2_operator_index_Int16.parameters = Float32x2x2_operator_index_Int16_args;
    Symbol::Resolved(&Float32x2x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2x2_operator_index_Int16)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt16
    Float32x2x2_operator_index_UInt16_arg0.name = "idx"_c;
    Float32x2x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x2x2_operator_index_UInt16.name = "operator[]"_c;
    Float32x2x2_operator_index_UInt16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x2_operator_index_UInt16.parameters = Float32x2x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt16)->returnTypeSymbol = &Float32x2Type;

    /// operator+ with Float32x2x2
    Float32x2x2_operator_add_Float32x2x2_arg0.name = "_arg0"_c;
    Float32x2x2_operator_add_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_add_Float32x2x2.name = "operator+"_c;
    Float32x2x2_operator_add_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_add_Float32x2x2.parameters = Float32x2x2_operator_add_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_add_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_add_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator- with Float32x2x2
    Float32x2x2_operator_sub_Float32x2x2_arg0.name = "_arg0"_c;
    Float32x2x2_operator_sub_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_sub_Float32x2x2.name = "operator-"_c;
    Float32x2x2_operator_sub_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_sub_Float32x2x2.parameters = Float32x2x2_operator_sub_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_sub_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_sub_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator* with Float32x2x2
    Float32x2x2_operator_mul_Float32x2x2_arg0.name = "_arg0"_c;
    Float32x2x2_operator_mul_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_mul_Float32x2x2.name = "operator*"_c;
    Float32x2x2_operator_mul_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_mul_Float32x2x2.parameters = Float32x2x2_operator_mul_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_mul_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_mul_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator+= with Float32x2x2
    Float32x2x2_operator_addasg_Float32x2x2_arg0.name = "_arg0"_c;
    Float32x2x2_operator_addasg_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_addasg_Float32x2x2.name = "operator+="_c;
    Float32x2x2_operator_addasg_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_addasg_Float32x2x2.parameters = Float32x2x2_operator_addasg_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_addasg_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_addasg_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator-= with Float32x2x2
    Float32x2x2_operator_subasg_Float32x2x2_arg0.name = "_arg0"_c;
    Float32x2x2_operator_subasg_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_subasg_Float32x2x2.name = "operator-="_c;
    Float32x2x2_operator_subasg_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_subasg_Float32x2x2.parameters = Float32x2x2_operator_subasg_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_subasg_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_subasg_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator*= with Float32x2x2
    Float32x2x2_operator_mulasg_Float32x2x2_arg0.name = "_arg0"_c;
    Float32x2x2_operator_mulasg_Float32x2x2_arg0.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_mulasg_Float32x2x2.name = "operator*="_c;
    Float32x2x2_operator_mulasg_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_mulasg_Float32x2x2.parameters = Float32x2x2_operator_mulasg_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_mulasg_Float32x2x2_arg0)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_mulasg_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator* with Float32
    Float32x2x2_operator_scale_Float32_arg0.name = "_arg0"_c;
    Float32x2x2_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32x2x2_operator_scale_Float32.name = "operator*"_c;
    Float32x2x2_operator_scale_Float32.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_scale_Float32.parameters = Float32x2x2_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32)->returnTypeSymbol = &Float32x2x2Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 46> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 }
    } };
}
Float32x2x2 Float32x2x2Type;

/// f32x2x3 with Float32x3, Float32x3
Variable Float32x2x3_Float32_3_ctor_arg0;
Variable Float32x2x3_Float32_3_ctor_arg1;
Function Float32x2x3_Float32_3_ctor;
inline constexpr std::array Float32x2x3_Float32_3_ctor_args = { &Float32x2x3_Float32_3_ctor_arg0, &Float32x2x3_Float32_3_ctor_arg1 };

/// f32x2x3
Function Float32x2x3_identity;

/// f32x2x3 with Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x2x3_raw_list_arg0;
Variable Float32x2x3_raw_list_arg1;
Variable Float32x2x3_raw_list_arg2;
Variable Float32x2x3_raw_list_arg3;
Variable Float32x2x3_raw_list_arg4;
Variable Float32x2x3_raw_list_arg5;
Function Float32x2x3_raw_list;
inline constexpr std::array Float32x2x3_raw_list_args = { &Float32x2x3_raw_list_arg0, &Float32x2x3_raw_list_arg1, &Float32x2x3_raw_list_arg2, &Float32x2x3_raw_list_arg3, &Float32x2x3_raw_list_arg4, &Float32x2x3_raw_list_arg5 };

/// operator[] with Int32
Variable Float32x2x3_operator_index_Int32_arg0;
Function Float32x2x3_operator_index_Int32;
inline constexpr std::array Float32x2x3_operator_index_Int32_args = { &Float32x2x3_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float32x2x3_operator_index_UInt32_arg0;
Function Float32x2x3_operator_index_UInt32;
inline constexpr std::array Float32x2x3_operator_index_UInt32_args = { &Float32x2x3_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float32x2x3_operator_index_Int16_arg0;
Function Float32x2x3_operator_index_Int16;
inline constexpr std::array Float32x2x3_operator_index_Int16_args = { &Float32x2x3_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float32x2x3_operator_index_UInt16_arg0;
Function Float32x2x3_operator_index_UInt16;
inline constexpr std::array Float32x2x3_operator_index_UInt16_args = { &Float32x2x3_operator_index_UInt16_arg0 };

/// operator+ with Float32x2x3
Variable Float32x2x3_operator_add_Float32x2x3_arg0;
Function Float32x2x3_operator_add_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_add_Float32x2x3_args = { &Float32x2x3_operator_add_Float32x2x3_arg0 };

/// operator- with Float32x2x3
Variable Float32x2x3_operator_sub_Float32x2x3_arg0;
Function Float32x2x3_operator_sub_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_sub_Float32x2x3_args = { &Float32x2x3_operator_sub_Float32x2x3_arg0 };

/// operator* with Float32x2x3
Variable Float32x2x3_operator_mul_Float32x2x3_arg0;
Function Float32x2x3_operator_mul_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_mul_Float32x2x3_args = { &Float32x2x3_operator_mul_Float32x2x3_arg0 };

/// operator+= with Float32x2x3
Variable Float32x2x3_operator_addasg_Float32x2x3_arg0;
Function Float32x2x3_operator_addasg_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_addasg_Float32x2x3_args = { &Float32x2x3_operator_addasg_Float32x2x3_arg0 };

/// operator-= with Float32x2x3
Variable Float32x2x3_operator_subasg_Float32x2x3_arg0;
Function Float32x2x3_operator_subasg_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_subasg_Float32x2x3_args = { &Float32x2x3_operator_subasg_Float32x2x3_arg0 };

/// operator*= with Float32x2x3
Variable Float32x2x3_operator_mulasg_Float32x2x3_arg0;
Function Float32x2x3_operator_mulasg_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_mulasg_Float32x2x3_args = { &Float32x2x3_operator_mulasg_Float32x2x3_arg0 };

/// operator* with Float32
Variable Float32x2x3_operator_scale_Float32_arg0;
Function Float32x2x3_operator_scale_Float32;
inline constexpr std::array Float32x2x3_operator_scale_Float32_args = { &Float32x2x3_operator_scale_Float32_arg0 };

Float32x2x3::Float32x2x3()
{
    this->name = "f32";
    this->columnSize = 3;
    this->rowSize = 2;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// f32x2x3 with Float32x3, Float32x3
    Float32x2x3_Float32_3_ctor_arg0.name = "_arg0"_c;
    Float32x2x3_Float32_3_ctor_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x2x3_Float32_3_ctor_arg1.name = "_arg1"_c;
    Float32x2x3_Float32_3_ctor_arg1.type = Type::FullType{ Float32x3Type.name };
    Float32x2x3_Float32_3_ctor.name = "f32x2x3"_c;
    Float32x2x3_Float32_3_ctor.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_Float32_3_ctor.parameters = Float32x2x3_Float32_3_ctor_args;
    Symbol::Resolved(&Float32x2x3_Float32_3_ctor_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x2x3_Float32_3_ctor_arg1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x2x3_Float32_3_ctor)->returnTypeSymbol = &Float32x2x3Type;

    /// f32x2x3
    Float32x2x3_identity.name = "f32x2x3"_c;
    Float32x2x3_identity.returnType = Type::FullType { Float32x2x3Type.name };
    Symbol::Resolved(&Float32x2x3_identity)->returnTypeSymbol = &Float32x2x3Type;

    /// f32x2x3 with Float32, Float32, Float32, Float32, Float32, Float32
    Float32x2x3_raw_list_arg0.name = "_arg0"_c;
    Float32x2x3_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list_arg1.name = "_arg1"_c;
    Float32x2x3_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list_arg2.name = "_arg2"_c;
    Float32x2x3_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list_arg3.name = "_arg3"_c;
    Float32x2x3_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list_arg4.name = "_arg4"_c;
    Float32x2x3_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list_arg5.name = "_arg5"_c;
    Float32x2x3_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list.name = "f32x2x3"_c;
    Float32x2x3_raw_list.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_raw_list.parameters = Float32x2x3_raw_list_args;
    Symbol::Resolved(&Float32x2x3_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list)->returnTypeSymbol = &Float32x2x3Type;

    /// operator[] with Int32
    Float32x2x3_operator_index_Int32_arg0.name = "idx"_c;
    Float32x2x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x2x3_operator_index_Int32.name = "operator[]"_c;
    Float32x2x3_operator_index_Int32.returnType = Type::FullType { Float32x3Type.name };
    Float32x2x3_operator_index_Int32.parameters = Float32x2x3_operator_index_Int32_args;
    Symbol::Resolved(&Float32x2x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2x3_operator_index_Int32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt32
    Float32x2x3_operator_index_UInt32_arg0.name = "idx"_c;
    Float32x2x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x2x3_operator_index_UInt32.name = "operator[]"_c;
    Float32x2x3_operator_index_UInt32.returnType = Type::FullType { Float32x3Type.name };
    Float32x2x3_operator_index_UInt32.parameters = Float32x2x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with Int16
    Float32x2x3_operator_index_Int16_arg0.name = "idx"_c;
    Float32x2x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x2x3_operator_index_Int16.name = "operator[]"_c;
    Float32x2x3_operator_index_Int16.returnType = Type::FullType { Float32x3Type.name };
    Float32x2x3_operator_index_Int16.parameters = Float32x2x3_operator_index_Int16_args;
    Symbol::Resolved(&Float32x2x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2x3_operator_index_Int16)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt16
    Float32x2x3_operator_index_UInt16_arg0.name = "idx"_c;
    Float32x2x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x2x3_operator_index_UInt16.name = "operator[]"_c;
    Float32x2x3_operator_index_UInt16.returnType = Type::FullType { Float32x3Type.name };
    Float32x2x3_operator_index_UInt16.parameters = Float32x2x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt16)->returnTypeSymbol = &Float32x3Type;

    /// operator+ with Float32x2x3
    Float32x2x3_operator_add_Float32x2x3_arg0.name = "_arg0"_c;
    Float32x2x3_operator_add_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_add_Float32x2x3.name = "operator+"_c;
    Float32x2x3_operator_add_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_add_Float32x2x3.parameters = Float32x2x3_operator_add_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_add_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_add_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator- with Float32x2x3
    Float32x2x3_operator_sub_Float32x2x3_arg0.name = "_arg0"_c;
    Float32x2x3_operator_sub_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_sub_Float32x2x3.name = "operator-"_c;
    Float32x2x3_operator_sub_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_sub_Float32x2x3.parameters = Float32x2x3_operator_sub_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_sub_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_sub_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator* with Float32x2x3
    Float32x2x3_operator_mul_Float32x2x3_arg0.name = "_arg0"_c;
    Float32x2x3_operator_mul_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_mul_Float32x2x3.name = "operator*"_c;
    Float32x2x3_operator_mul_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_mul_Float32x2x3.parameters = Float32x2x3_operator_mul_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_mul_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_mul_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator+= with Float32x2x3
    Float32x2x3_operator_addasg_Float32x2x3_arg0.name = "_arg0"_c;
    Float32x2x3_operator_addasg_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_addasg_Float32x2x3.name = "operator+="_c;
    Float32x2x3_operator_addasg_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_addasg_Float32x2x3.parameters = Float32x2x3_operator_addasg_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_addasg_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_addasg_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator-= with Float32x2x3
    Float32x2x3_operator_subasg_Float32x2x3_arg0.name = "_arg0"_c;
    Float32x2x3_operator_subasg_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_subasg_Float32x2x3.name = "operator-="_c;
    Float32x2x3_operator_subasg_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_subasg_Float32x2x3.parameters = Float32x2x3_operator_subasg_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_subasg_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_subasg_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator*= with Float32x2x3
    Float32x2x3_operator_mulasg_Float32x2x3_arg0.name = "_arg0"_c;
    Float32x2x3_operator_mulasg_Float32x2x3_arg0.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_mulasg_Float32x2x3.name = "operator*="_c;
    Float32x2x3_operator_mulasg_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_mulasg_Float32x2x3.parameters = Float32x2x3_operator_mulasg_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_mulasg_Float32x2x3_arg0)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_mulasg_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator* with Float32
    Float32x2x3_operator_scale_Float32_arg0.name = "_arg0"_c;
    Float32x2x3_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32x2x3_operator_scale_Float32.name = "operator*"_c;
    Float32x2x3_operator_scale_Float32.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_scale_Float32.parameters = Float32x2x3_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32)->returnTypeSymbol = &Float32x2x3Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 57> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 }
    } };
}
Float32x2x3 Float32x2x3Type;

/// f32x2x4 with Float32x4, Float32x4
Variable Float32x2x4_Float32_4_ctor_arg0;
Variable Float32x2x4_Float32_4_ctor_arg1;
Function Float32x2x4_Float32_4_ctor;
inline constexpr std::array Float32x2x4_Float32_4_ctor_args = { &Float32x2x4_Float32_4_ctor_arg0, &Float32x2x4_Float32_4_ctor_arg1 };

/// f32x2x4
Function Float32x2x4_identity;

/// f32x2x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x2x4_raw_list_arg0;
Variable Float32x2x4_raw_list_arg1;
Variable Float32x2x4_raw_list_arg2;
Variable Float32x2x4_raw_list_arg3;
Variable Float32x2x4_raw_list_arg4;
Variable Float32x2x4_raw_list_arg5;
Variable Float32x2x4_raw_list_arg6;
Variable Float32x2x4_raw_list_arg7;
Function Float32x2x4_raw_list;
inline constexpr std::array Float32x2x4_raw_list_args = { &Float32x2x4_raw_list_arg0, &Float32x2x4_raw_list_arg1, &Float32x2x4_raw_list_arg2, &Float32x2x4_raw_list_arg3, &Float32x2x4_raw_list_arg4, &Float32x2x4_raw_list_arg5, &Float32x2x4_raw_list_arg6, &Float32x2x4_raw_list_arg7 };

/// operator[] with Int32
Variable Float32x2x4_operator_index_Int32_arg0;
Function Float32x2x4_operator_index_Int32;
inline constexpr std::array Float32x2x4_operator_index_Int32_args = { &Float32x2x4_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float32x2x4_operator_index_UInt32_arg0;
Function Float32x2x4_operator_index_UInt32;
inline constexpr std::array Float32x2x4_operator_index_UInt32_args = { &Float32x2x4_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float32x2x4_operator_index_Int16_arg0;
Function Float32x2x4_operator_index_Int16;
inline constexpr std::array Float32x2x4_operator_index_Int16_args = { &Float32x2x4_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float32x2x4_operator_index_UInt16_arg0;
Function Float32x2x4_operator_index_UInt16;
inline constexpr std::array Float32x2x4_operator_index_UInt16_args = { &Float32x2x4_operator_index_UInt16_arg0 };

/// operator+ with Float32x2x4
Variable Float32x2x4_operator_add_Float32x2x4_arg0;
Function Float32x2x4_operator_add_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_add_Float32x2x4_args = { &Float32x2x4_operator_add_Float32x2x4_arg0 };

/// operator- with Float32x2x4
Variable Float32x2x4_operator_sub_Float32x2x4_arg0;
Function Float32x2x4_operator_sub_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_sub_Float32x2x4_args = { &Float32x2x4_operator_sub_Float32x2x4_arg0 };

/// operator* with Float32x2x4
Variable Float32x2x4_operator_mul_Float32x2x4_arg0;
Function Float32x2x4_operator_mul_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_mul_Float32x2x4_args = { &Float32x2x4_operator_mul_Float32x2x4_arg0 };

/// operator+= with Float32x2x4
Variable Float32x2x4_operator_addasg_Float32x2x4_arg0;
Function Float32x2x4_operator_addasg_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_addasg_Float32x2x4_args = { &Float32x2x4_operator_addasg_Float32x2x4_arg0 };

/// operator-= with Float32x2x4
Variable Float32x2x4_operator_subasg_Float32x2x4_arg0;
Function Float32x2x4_operator_subasg_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_subasg_Float32x2x4_args = { &Float32x2x4_operator_subasg_Float32x2x4_arg0 };

/// operator*= with Float32x2x4
Variable Float32x2x4_operator_mulasg_Float32x2x4_arg0;
Function Float32x2x4_operator_mulasg_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_mulasg_Float32x2x4_args = { &Float32x2x4_operator_mulasg_Float32x2x4_arg0 };

/// operator* with Float32
Variable Float32x2x4_operator_scale_Float32_arg0;
Function Float32x2x4_operator_scale_Float32;
inline constexpr std::array Float32x2x4_operator_scale_Float32_args = { &Float32x2x4_operator_scale_Float32_arg0 };

Float32x2x4::Float32x2x4()
{
    this->name = "f32";
    this->columnSize = 4;
    this->rowSize = 2;
    this->byteSize = 32;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// f32x2x4 with Float32x4, Float32x4
    Float32x2x4_Float32_4_ctor_arg0.name = "_arg0"_c;
    Float32x2x4_Float32_4_ctor_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x2x4_Float32_4_ctor_arg1.name = "_arg1"_c;
    Float32x2x4_Float32_4_ctor_arg1.type = Type::FullType{ Float32x4Type.name };
    Float32x2x4_Float32_4_ctor.name = "f32x2x4"_c;
    Float32x2x4_Float32_4_ctor.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_Float32_4_ctor.parameters = Float32x2x4_Float32_4_ctor_args;
    Symbol::Resolved(&Float32x2x4_Float32_4_ctor_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x2x4_Float32_4_ctor_arg1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x2x4_Float32_4_ctor)->returnTypeSymbol = &Float32x2x4Type;

    /// f32x2x4
    Float32x2x4_identity.name = "f32x2x4"_c;
    Float32x2x4_identity.returnType = Type::FullType { Float32x2x4Type.name };
    Symbol::Resolved(&Float32x2x4_identity)->returnTypeSymbol = &Float32x2x4Type;

    /// f32x2x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x2x4_raw_list_arg0.name = "_arg0"_c;
    Float32x2x4_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg1.name = "_arg1"_c;
    Float32x2x4_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg2.name = "_arg2"_c;
    Float32x2x4_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg3.name = "_arg3"_c;
    Float32x2x4_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg4.name = "_arg4"_c;
    Float32x2x4_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg5.name = "_arg5"_c;
    Float32x2x4_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg6.name = "_arg6"_c;
    Float32x2x4_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg7.name = "_arg7"_c;
    Float32x2x4_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list.name = "f32x2x4"_c;
    Float32x2x4_raw_list.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_raw_list.parameters = Float32x2x4_raw_list_args;
    Symbol::Resolved(&Float32x2x4_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list)->returnTypeSymbol = &Float32x2x4Type;

    /// operator[] with Int32
    Float32x2x4_operator_index_Int32_arg0.name = "idx"_c;
    Float32x2x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x2x4_operator_index_Int32.name = "operator[]"_c;
    Float32x2x4_operator_index_Int32.returnType = Type::FullType { Float32x4Type.name };
    Float32x2x4_operator_index_Int32.parameters = Float32x2x4_operator_index_Int32_args;
    Symbol::Resolved(&Float32x2x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2x4_operator_index_Int32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt32
    Float32x2x4_operator_index_UInt32_arg0.name = "idx"_c;
    Float32x2x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x2x4_operator_index_UInt32.name = "operator[]"_c;
    Float32x2x4_operator_index_UInt32.returnType = Type::FullType { Float32x4Type.name };
    Float32x2x4_operator_index_UInt32.parameters = Float32x2x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with Int16
    Float32x2x4_operator_index_Int16_arg0.name = "idx"_c;
    Float32x2x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x2x4_operator_index_Int16.name = "operator[]"_c;
    Float32x2x4_operator_index_Int16.returnType = Type::FullType { Float32x4Type.name };
    Float32x2x4_operator_index_Int16.parameters = Float32x2x4_operator_index_Int16_args;
    Symbol::Resolved(&Float32x2x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2x4_operator_index_Int16)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt16
    Float32x2x4_operator_index_UInt16_arg0.name = "idx"_c;
    Float32x2x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x2x4_operator_index_UInt16.name = "operator[]"_c;
    Float32x2x4_operator_index_UInt16.returnType = Type::FullType { Float32x4Type.name };
    Float32x2x4_operator_index_UInt16.parameters = Float32x2x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt16)->returnTypeSymbol = &Float32x4Type;

    /// operator+ with Float32x2x4
    Float32x2x4_operator_add_Float32x2x4_arg0.name = "_arg0"_c;
    Float32x2x4_operator_add_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_add_Float32x2x4.name = "operator+"_c;
    Float32x2x4_operator_add_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_add_Float32x2x4.parameters = Float32x2x4_operator_add_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_add_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_add_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator- with Float32x2x4
    Float32x2x4_operator_sub_Float32x2x4_arg0.name = "_arg0"_c;
    Float32x2x4_operator_sub_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_sub_Float32x2x4.name = "operator-"_c;
    Float32x2x4_operator_sub_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_sub_Float32x2x4.parameters = Float32x2x4_operator_sub_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_sub_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_sub_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator* with Float32x2x4
    Float32x2x4_operator_mul_Float32x2x4_arg0.name = "_arg0"_c;
    Float32x2x4_operator_mul_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_mul_Float32x2x4.name = "operator*"_c;
    Float32x2x4_operator_mul_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_mul_Float32x2x4.parameters = Float32x2x4_operator_mul_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_mul_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_mul_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator+= with Float32x2x4
    Float32x2x4_operator_addasg_Float32x2x4_arg0.name = "_arg0"_c;
    Float32x2x4_operator_addasg_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_addasg_Float32x2x4.name = "operator+="_c;
    Float32x2x4_operator_addasg_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_addasg_Float32x2x4.parameters = Float32x2x4_operator_addasg_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_addasg_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_addasg_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator-= with Float32x2x4
    Float32x2x4_operator_subasg_Float32x2x4_arg0.name = "_arg0"_c;
    Float32x2x4_operator_subasg_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_subasg_Float32x2x4.name = "operator-="_c;
    Float32x2x4_operator_subasg_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_subasg_Float32x2x4.parameters = Float32x2x4_operator_subasg_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_subasg_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_subasg_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator*= with Float32x2x4
    Float32x2x4_operator_mulasg_Float32x2x4_arg0.name = "_arg0"_c;
    Float32x2x4_operator_mulasg_Float32x2x4_arg0.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_mulasg_Float32x2x4.name = "operator*="_c;
    Float32x2x4_operator_mulasg_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_mulasg_Float32x2x4.parameters = Float32x2x4_operator_mulasg_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_mulasg_Float32x2x4_arg0)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_mulasg_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator* with Float32
    Float32x2x4_operator_scale_Float32_arg0.name = "_arg0"_c;
    Float32x2x4_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32x2x4_operator_scale_Float32.name = "operator*"_c;
    Float32x2x4_operator_scale_Float32.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_scale_Float32.parameters = Float32x2x4_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32)->returnTypeSymbol = &Float32x2x4Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 68> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 }
    } };
}
Float32x2x4 Float32x2x4Type;

/// f32x3x2 with Float32x2, Float32x2, Float32x2
Variable Float32x3x2_Float32_2_ctor_arg0;
Variable Float32x3x2_Float32_2_ctor_arg1;
Variable Float32x3x2_Float32_2_ctor_arg2;
Function Float32x3x2_Float32_2_ctor;
inline constexpr std::array Float32x3x2_Float32_2_ctor_args = { &Float32x3x2_Float32_2_ctor_arg0, &Float32x3x2_Float32_2_ctor_arg1, &Float32x3x2_Float32_2_ctor_arg2 };

/// f32x3x2
Function Float32x3x2_identity;

/// f32x3x2 with Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x3x2_raw_list_arg0;
Variable Float32x3x2_raw_list_arg1;
Variable Float32x3x2_raw_list_arg2;
Variable Float32x3x2_raw_list_arg3;
Variable Float32x3x2_raw_list_arg4;
Variable Float32x3x2_raw_list_arg5;
Function Float32x3x2_raw_list;
inline constexpr std::array Float32x3x2_raw_list_args = { &Float32x3x2_raw_list_arg0, &Float32x3x2_raw_list_arg1, &Float32x3x2_raw_list_arg2, &Float32x3x2_raw_list_arg3, &Float32x3x2_raw_list_arg4, &Float32x3x2_raw_list_arg5 };

/// operator[] with Int32
Variable Float32x3x2_operator_index_Int32_arg0;
Function Float32x3x2_operator_index_Int32;
inline constexpr std::array Float32x3x2_operator_index_Int32_args = { &Float32x3x2_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float32x3x2_operator_index_UInt32_arg0;
Function Float32x3x2_operator_index_UInt32;
inline constexpr std::array Float32x3x2_operator_index_UInt32_args = { &Float32x3x2_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float32x3x2_operator_index_Int16_arg0;
Function Float32x3x2_operator_index_Int16;
inline constexpr std::array Float32x3x2_operator_index_Int16_args = { &Float32x3x2_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float32x3x2_operator_index_UInt16_arg0;
Function Float32x3x2_operator_index_UInt16;
inline constexpr std::array Float32x3x2_operator_index_UInt16_args = { &Float32x3x2_operator_index_UInt16_arg0 };

/// operator+ with Float32x3x2
Variable Float32x3x2_operator_add_Float32x3x2_arg0;
Function Float32x3x2_operator_add_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_add_Float32x3x2_args = { &Float32x3x2_operator_add_Float32x3x2_arg0 };

/// operator- with Float32x3x2
Variable Float32x3x2_operator_sub_Float32x3x2_arg0;
Function Float32x3x2_operator_sub_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_sub_Float32x3x2_args = { &Float32x3x2_operator_sub_Float32x3x2_arg0 };

/// operator* with Float32x3x2
Variable Float32x3x2_operator_mul_Float32x3x2_arg0;
Function Float32x3x2_operator_mul_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_mul_Float32x3x2_args = { &Float32x3x2_operator_mul_Float32x3x2_arg0 };

/// operator+= with Float32x3x2
Variable Float32x3x2_operator_addasg_Float32x3x2_arg0;
Function Float32x3x2_operator_addasg_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_addasg_Float32x3x2_args = { &Float32x3x2_operator_addasg_Float32x3x2_arg0 };

/// operator-= with Float32x3x2
Variable Float32x3x2_operator_subasg_Float32x3x2_arg0;
Function Float32x3x2_operator_subasg_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_subasg_Float32x3x2_args = { &Float32x3x2_operator_subasg_Float32x3x2_arg0 };

/// operator*= with Float32x3x2
Variable Float32x3x2_operator_mulasg_Float32x3x2_arg0;
Function Float32x3x2_operator_mulasg_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_mulasg_Float32x3x2_args = { &Float32x3x2_operator_mulasg_Float32x3x2_arg0 };

/// operator* with Float32
Variable Float32x3x2_operator_scale_Float32_arg0;
Function Float32x3x2_operator_scale_Float32;
inline constexpr std::array Float32x3x2_operator_scale_Float32_args = { &Float32x3x2_operator_scale_Float32_arg0 };

Float32x3x2::Float32x3x2()
{
    this->name = "f32";
    this->columnSize = 2;
    this->rowSize = 3;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// f32x3x2 with Float32x2, Float32x2, Float32x2
    Float32x3x2_Float32_2_ctor_arg0.name = "_arg0"_c;
    Float32x3x2_Float32_2_ctor_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x3x2_Float32_2_ctor_arg1.name = "_arg1"_c;
    Float32x3x2_Float32_2_ctor_arg1.type = Type::FullType{ Float32x2Type.name };
    Float32x3x2_Float32_2_ctor_arg2.name = "_arg2"_c;
    Float32x3x2_Float32_2_ctor_arg2.type = Type::FullType{ Float32x2Type.name };
    Float32x3x2_Float32_2_ctor.name = "f32x3x2"_c;
    Float32x3x2_Float32_2_ctor.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_Float32_2_ctor.parameters = Float32x3x2_Float32_2_ctor_args;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor_arg1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor_arg2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor)->returnTypeSymbol = &Float32x3x2Type;

    /// f32x3x2
    Float32x3x2_identity.name = "f32x3x2"_c;
    Float32x3x2_identity.returnType = Type::FullType { Float32x3x2Type.name };
    Symbol::Resolved(&Float32x3x2_identity)->returnTypeSymbol = &Float32x3x2Type;

    /// f32x3x2 with Float32, Float32, Float32, Float32, Float32, Float32
    Float32x3x2_raw_list_arg0.name = "_arg0"_c;
    Float32x3x2_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list_arg1.name = "_arg1"_c;
    Float32x3x2_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list_arg2.name = "_arg2"_c;
    Float32x3x2_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list_arg3.name = "_arg3"_c;
    Float32x3x2_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list_arg4.name = "_arg4"_c;
    Float32x3x2_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list_arg5.name = "_arg5"_c;
    Float32x3x2_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list.name = "f32x3x2"_c;
    Float32x3x2_raw_list.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_raw_list.parameters = Float32x3x2_raw_list_args;
    Symbol::Resolved(&Float32x3x2_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list)->returnTypeSymbol = &Float32x3x2Type;

    /// operator[] with Int32
    Float32x3x2_operator_index_Int32_arg0.name = "idx"_c;
    Float32x3x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x3x2_operator_index_Int32.name = "operator[]"_c;
    Float32x3x2_operator_index_Int32.returnType = Type::FullType { Float32x2Type.name };
    Float32x3x2_operator_index_Int32.parameters = Float32x3x2_operator_index_Int32_args;
    Symbol::Resolved(&Float32x3x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3x2_operator_index_Int32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt32
    Float32x3x2_operator_index_UInt32_arg0.name = "idx"_c;
    Float32x3x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x3x2_operator_index_UInt32.name = "operator[]"_c;
    Float32x3x2_operator_index_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Float32x3x2_operator_index_UInt32.parameters = Float32x3x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with Int16
    Float32x3x2_operator_index_Int16_arg0.name = "idx"_c;
    Float32x3x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x3x2_operator_index_Int16.name = "operator[]"_c;
    Float32x3x2_operator_index_Int16.returnType = Type::FullType { Float32x2Type.name };
    Float32x3x2_operator_index_Int16.parameters = Float32x3x2_operator_index_Int16_args;
    Symbol::Resolved(&Float32x3x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x3x2_operator_index_Int16)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt16
    Float32x3x2_operator_index_UInt16_arg0.name = "idx"_c;
    Float32x3x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x3x2_operator_index_UInt16.name = "operator[]"_c;
    Float32x3x2_operator_index_UInt16.returnType = Type::FullType { Float32x2Type.name };
    Float32x3x2_operator_index_UInt16.parameters = Float32x3x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt16)->returnTypeSymbol = &Float32x2Type;

    /// operator+ with Float32x3x2
    Float32x3x2_operator_add_Float32x3x2_arg0.name = "_arg0"_c;
    Float32x3x2_operator_add_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_add_Float32x3x2.name = "operator+"_c;
    Float32x3x2_operator_add_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_add_Float32x3x2.parameters = Float32x3x2_operator_add_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_add_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_add_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator- with Float32x3x2
    Float32x3x2_operator_sub_Float32x3x2_arg0.name = "_arg0"_c;
    Float32x3x2_operator_sub_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_sub_Float32x3x2.name = "operator-"_c;
    Float32x3x2_operator_sub_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_sub_Float32x3x2.parameters = Float32x3x2_operator_sub_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_sub_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_sub_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator* with Float32x3x2
    Float32x3x2_operator_mul_Float32x3x2_arg0.name = "_arg0"_c;
    Float32x3x2_operator_mul_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_mul_Float32x3x2.name = "operator*"_c;
    Float32x3x2_operator_mul_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_mul_Float32x3x2.parameters = Float32x3x2_operator_mul_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_mul_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_mul_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator+= with Float32x3x2
    Float32x3x2_operator_addasg_Float32x3x2_arg0.name = "_arg0"_c;
    Float32x3x2_operator_addasg_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_addasg_Float32x3x2.name = "operator+="_c;
    Float32x3x2_operator_addasg_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_addasg_Float32x3x2.parameters = Float32x3x2_operator_addasg_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_addasg_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_addasg_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator-= with Float32x3x2
    Float32x3x2_operator_subasg_Float32x3x2_arg0.name = "_arg0"_c;
    Float32x3x2_operator_subasg_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_subasg_Float32x3x2.name = "operator-="_c;
    Float32x3x2_operator_subasg_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_subasg_Float32x3x2.parameters = Float32x3x2_operator_subasg_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_subasg_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_subasg_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator*= with Float32x3x2
    Float32x3x2_operator_mulasg_Float32x3x2_arg0.name = "_arg0"_c;
    Float32x3x2_operator_mulasg_Float32x3x2_arg0.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_mulasg_Float32x3x2.name = "operator*="_c;
    Float32x3x2_operator_mulasg_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_mulasg_Float32x3x2.parameters = Float32x3x2_operator_mulasg_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_mulasg_Float32x3x2_arg0)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_mulasg_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator* with Float32
    Float32x3x2_operator_scale_Float32_arg0.name = "_arg0"_c;
    Float32x3x2_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32x3x2_operator_scale_Float32.name = "operator*"_c;
    Float32x3x2_operator_scale_Float32.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_scale_Float32.parameters = Float32x3x2_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32)->returnTypeSymbol = &Float32x3x2Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 79> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 }
    } };
}
Float32x3x2 Float32x3x2Type;

/// f32x3x3 with Float32x3, Float32x3, Float32x3
Variable Float32x3x3_Float32_3_ctor_arg0;
Variable Float32x3x3_Float32_3_ctor_arg1;
Variable Float32x3x3_Float32_3_ctor_arg2;
Function Float32x3x3_Float32_3_ctor;
inline constexpr std::array Float32x3x3_Float32_3_ctor_args = { &Float32x3x3_Float32_3_ctor_arg0, &Float32x3x3_Float32_3_ctor_arg1, &Float32x3x3_Float32_3_ctor_arg2 };

/// f32x3x3
Function Float32x3x3_identity;

/// f32x3x3 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x3x3_raw_list_arg0;
Variable Float32x3x3_raw_list_arg1;
Variable Float32x3x3_raw_list_arg2;
Variable Float32x3x3_raw_list_arg3;
Variable Float32x3x3_raw_list_arg4;
Variable Float32x3x3_raw_list_arg5;
Variable Float32x3x3_raw_list_arg6;
Variable Float32x3x3_raw_list_arg7;
Variable Float32x3x3_raw_list_arg8;
Function Float32x3x3_raw_list;
inline constexpr std::array Float32x3x3_raw_list_args = { &Float32x3x3_raw_list_arg0, &Float32x3x3_raw_list_arg1, &Float32x3x3_raw_list_arg2, &Float32x3x3_raw_list_arg3, &Float32x3x3_raw_list_arg4, &Float32x3x3_raw_list_arg5, &Float32x3x3_raw_list_arg6, &Float32x3x3_raw_list_arg7, &Float32x3x3_raw_list_arg8 };

/// operator[] with Int32
Variable Float32x3x3_operator_index_Int32_arg0;
Function Float32x3x3_operator_index_Int32;
inline constexpr std::array Float32x3x3_operator_index_Int32_args = { &Float32x3x3_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float32x3x3_operator_index_UInt32_arg0;
Function Float32x3x3_operator_index_UInt32;
inline constexpr std::array Float32x3x3_operator_index_UInt32_args = { &Float32x3x3_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float32x3x3_operator_index_Int16_arg0;
Function Float32x3x3_operator_index_Int16;
inline constexpr std::array Float32x3x3_operator_index_Int16_args = { &Float32x3x3_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float32x3x3_operator_index_UInt16_arg0;
Function Float32x3x3_operator_index_UInt16;
inline constexpr std::array Float32x3x3_operator_index_UInt16_args = { &Float32x3x3_operator_index_UInt16_arg0 };

/// operator+ with Float32x3x3
Variable Float32x3x3_operator_add_Float32x3x3_arg0;
Function Float32x3x3_operator_add_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_add_Float32x3x3_args = { &Float32x3x3_operator_add_Float32x3x3_arg0 };

/// operator- with Float32x3x3
Variable Float32x3x3_operator_sub_Float32x3x3_arg0;
Function Float32x3x3_operator_sub_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_sub_Float32x3x3_args = { &Float32x3x3_operator_sub_Float32x3x3_arg0 };

/// operator* with Float32x3x3
Variable Float32x3x3_operator_mul_Float32x3x3_arg0;
Function Float32x3x3_operator_mul_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_mul_Float32x3x3_args = { &Float32x3x3_operator_mul_Float32x3x3_arg0 };

/// operator+= with Float32x3x3
Variable Float32x3x3_operator_addasg_Float32x3x3_arg0;
Function Float32x3x3_operator_addasg_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_addasg_Float32x3x3_args = { &Float32x3x3_operator_addasg_Float32x3x3_arg0 };

/// operator-= with Float32x3x3
Variable Float32x3x3_operator_subasg_Float32x3x3_arg0;
Function Float32x3x3_operator_subasg_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_subasg_Float32x3x3_args = { &Float32x3x3_operator_subasg_Float32x3x3_arg0 };

/// operator*= with Float32x3x3
Variable Float32x3x3_operator_mulasg_Float32x3x3_arg0;
Function Float32x3x3_operator_mulasg_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_mulasg_Float32x3x3_args = { &Float32x3x3_operator_mulasg_Float32x3x3_arg0 };

/// operator* with Float32
Variable Float32x3x3_operator_scale_Float32_arg0;
Function Float32x3x3_operator_scale_Float32;
inline constexpr std::array Float32x3x3_operator_scale_Float32_args = { &Float32x3x3_operator_scale_Float32_arg0 };

Float32x3x3::Float32x3x3()
{
    this->name = "f32";
    this->columnSize = 3;
    this->rowSize = 3;
    this->byteSize = 36;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// f32x3x3 with Float32x3, Float32x3, Float32x3
    Float32x3x3_Float32_3_ctor_arg0.name = "_arg0"_c;
    Float32x3x3_Float32_3_ctor_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3x3_Float32_3_ctor_arg1.name = "_arg1"_c;
    Float32x3x3_Float32_3_ctor_arg1.type = Type::FullType{ Float32x3Type.name };
    Float32x3x3_Float32_3_ctor_arg2.name = "_arg2"_c;
    Float32x3x3_Float32_3_ctor_arg2.type = Type::FullType{ Float32x3Type.name };
    Float32x3x3_Float32_3_ctor.name = "f32x3x3"_c;
    Float32x3x3_Float32_3_ctor.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_Float32_3_ctor.parameters = Float32x3x3_Float32_3_ctor_args;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor_arg1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor_arg2)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor)->returnTypeSymbol = &Float32x3x3Type;

    /// f32x3x3
    Float32x3x3_identity.name = "f32x3x3"_c;
    Float32x3x3_identity.returnType = Type::FullType { Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_identity)->returnTypeSymbol = &Float32x3x3Type;

    /// f32x3x3 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x3x3_raw_list_arg0.name = "_arg0"_c;
    Float32x3x3_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg1.name = "_arg1"_c;
    Float32x3x3_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg2.name = "_arg2"_c;
    Float32x3x3_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg3.name = "_arg3"_c;
    Float32x3x3_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg4.name = "_arg4"_c;
    Float32x3x3_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg5.name = "_arg5"_c;
    Float32x3x3_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg6.name = "_arg6"_c;
    Float32x3x3_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg7.name = "_arg7"_c;
    Float32x3x3_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg8.name = "_arg8"_c;
    Float32x3x3_raw_list_arg8.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list.name = "f32x3x3"_c;
    Float32x3x3_raw_list.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_raw_list.parameters = Float32x3x3_raw_list_args;
    Symbol::Resolved(&Float32x3x3_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg8)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list)->returnTypeSymbol = &Float32x3x3Type;

    /// operator[] with Int32
    Float32x3x3_operator_index_Int32_arg0.name = "idx"_c;
    Float32x3x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x3x3_operator_index_Int32.name = "operator[]"_c;
    Float32x3x3_operator_index_Int32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x3_operator_index_Int32.parameters = Float32x3x3_operator_index_Int32_args;
    Symbol::Resolved(&Float32x3x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3x3_operator_index_Int32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt32
    Float32x3x3_operator_index_UInt32_arg0.name = "idx"_c;
    Float32x3x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x3x3_operator_index_UInt32.name = "operator[]"_c;
    Float32x3x3_operator_index_UInt32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x3_operator_index_UInt32.parameters = Float32x3x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with Int16
    Float32x3x3_operator_index_Int16_arg0.name = "idx"_c;
    Float32x3x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x3x3_operator_index_Int16.name = "operator[]"_c;
    Float32x3x3_operator_index_Int16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x3_operator_index_Int16.parameters = Float32x3x3_operator_index_Int16_args;
    Symbol::Resolved(&Float32x3x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x3x3_operator_index_Int16)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt16
    Float32x3x3_operator_index_UInt16_arg0.name = "idx"_c;
    Float32x3x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x3x3_operator_index_UInt16.name = "operator[]"_c;
    Float32x3x3_operator_index_UInt16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x3_operator_index_UInt16.parameters = Float32x3x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt16)->returnTypeSymbol = &Float32x3Type;

    /// operator+ with Float32x3x3
    Float32x3x3_operator_add_Float32x3x3_arg0.name = "_arg0"_c;
    Float32x3x3_operator_add_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_add_Float32x3x3.name = "operator+"_c;
    Float32x3x3_operator_add_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_add_Float32x3x3.parameters = Float32x3x3_operator_add_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_add_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_add_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator- with Float32x3x3
    Float32x3x3_operator_sub_Float32x3x3_arg0.name = "_arg0"_c;
    Float32x3x3_operator_sub_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_sub_Float32x3x3.name = "operator-"_c;
    Float32x3x3_operator_sub_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_sub_Float32x3x3.parameters = Float32x3x3_operator_sub_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_sub_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_sub_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator* with Float32x3x3
    Float32x3x3_operator_mul_Float32x3x3_arg0.name = "_arg0"_c;
    Float32x3x3_operator_mul_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_mul_Float32x3x3.name = "operator*"_c;
    Float32x3x3_operator_mul_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_mul_Float32x3x3.parameters = Float32x3x3_operator_mul_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_mul_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_mul_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator+= with Float32x3x3
    Float32x3x3_operator_addasg_Float32x3x3_arg0.name = "_arg0"_c;
    Float32x3x3_operator_addasg_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_addasg_Float32x3x3.name = "operator+="_c;
    Float32x3x3_operator_addasg_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_addasg_Float32x3x3.parameters = Float32x3x3_operator_addasg_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_addasg_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_addasg_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator-= with Float32x3x3
    Float32x3x3_operator_subasg_Float32x3x3_arg0.name = "_arg0"_c;
    Float32x3x3_operator_subasg_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_subasg_Float32x3x3.name = "operator-="_c;
    Float32x3x3_operator_subasg_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_subasg_Float32x3x3.parameters = Float32x3x3_operator_subasg_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_subasg_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_subasg_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator*= with Float32x3x3
    Float32x3x3_operator_mulasg_Float32x3x3_arg0.name = "_arg0"_c;
    Float32x3x3_operator_mulasg_Float32x3x3_arg0.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_mulasg_Float32x3x3.name = "operator*="_c;
    Float32x3x3_operator_mulasg_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_mulasg_Float32x3x3.parameters = Float32x3x3_operator_mulasg_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_mulasg_Float32x3x3_arg0)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_mulasg_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator* with Float32
    Float32x3x3_operator_scale_Float32_arg0.name = "_arg0"_c;
    Float32x3x3_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32x3x3_operator_scale_Float32.name = "operator*"_c;
    Float32x3x3_operator_scale_Float32.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_scale_Float32.parameters = Float32x3x3_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32)->returnTypeSymbol = &Float32x3x3Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 90> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator-"_c, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator+="_c, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator-="_c, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator*="_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_scale_Float32 }
    } };
}
Float32x3x3 Float32x3x3Type;

/// f32x3x4 with Float32x4, Float32x4, Float32x4
Variable Float32x3x4_Float32_4_ctor_arg0;
Variable Float32x3x4_Float32_4_ctor_arg1;
Variable Float32x3x4_Float32_4_ctor_arg2;
Function Float32x3x4_Float32_4_ctor;
inline constexpr std::array Float32x3x4_Float32_4_ctor_args = { &Float32x3x4_Float32_4_ctor_arg0, &Float32x3x4_Float32_4_ctor_arg1, &Float32x3x4_Float32_4_ctor_arg2 };

/// f32x3x4
Function Float32x3x4_identity;

/// f32x3x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x3x4_raw_list_arg0;
Variable Float32x3x4_raw_list_arg1;
Variable Float32x3x4_raw_list_arg2;
Variable Float32x3x4_raw_list_arg3;
Variable Float32x3x4_raw_list_arg4;
Variable Float32x3x4_raw_list_arg5;
Variable Float32x3x4_raw_list_arg6;
Variable Float32x3x4_raw_list_arg7;
Variable Float32x3x4_raw_list_arg8;
Variable Float32x3x4_raw_list_arg9;
Variable Float32x3x4_raw_list_arg10;
Variable Float32x3x4_raw_list_arg11;
Function Float32x3x4_raw_list;
inline constexpr std::array Float32x3x4_raw_list_args = { &Float32x3x4_raw_list_arg0, &Float32x3x4_raw_list_arg1, &Float32x3x4_raw_list_arg2, &Float32x3x4_raw_list_arg3, &Float32x3x4_raw_list_arg4, &Float32x3x4_raw_list_arg5, &Float32x3x4_raw_list_arg6, &Float32x3x4_raw_list_arg7, &Float32x3x4_raw_list_arg8, &Float32x3x4_raw_list_arg9, &Float32x3x4_raw_list_arg10, &Float32x3x4_raw_list_arg11 };

/// operator[] with Int32
Variable Float32x3x4_operator_index_Int32_arg0;
Function Float32x3x4_operator_index_Int32;
inline constexpr std::array Float32x3x4_operator_index_Int32_args = { &Float32x3x4_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float32x3x4_operator_index_UInt32_arg0;
Function Float32x3x4_operator_index_UInt32;
inline constexpr std::array Float32x3x4_operator_index_UInt32_args = { &Float32x3x4_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float32x3x4_operator_index_Int16_arg0;
Function Float32x3x4_operator_index_Int16;
inline constexpr std::array Float32x3x4_operator_index_Int16_args = { &Float32x3x4_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float32x3x4_operator_index_UInt16_arg0;
Function Float32x3x4_operator_index_UInt16;
inline constexpr std::array Float32x3x4_operator_index_UInt16_args = { &Float32x3x4_operator_index_UInt16_arg0 };

/// operator+ with Float32x3x4
Variable Float32x3x4_operator_add_Float32x3x4_arg0;
Function Float32x3x4_operator_add_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_add_Float32x3x4_args = { &Float32x3x4_operator_add_Float32x3x4_arg0 };

/// operator- with Float32x3x4
Variable Float32x3x4_operator_sub_Float32x3x4_arg0;
Function Float32x3x4_operator_sub_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_sub_Float32x3x4_args = { &Float32x3x4_operator_sub_Float32x3x4_arg0 };

/// operator* with Float32x3x4
Variable Float32x3x4_operator_mul_Float32x3x4_arg0;
Function Float32x3x4_operator_mul_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_mul_Float32x3x4_args = { &Float32x3x4_operator_mul_Float32x3x4_arg0 };

/// operator+= with Float32x3x4
Variable Float32x3x4_operator_addasg_Float32x3x4_arg0;
Function Float32x3x4_operator_addasg_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_addasg_Float32x3x4_args = { &Float32x3x4_operator_addasg_Float32x3x4_arg0 };

/// operator-= with Float32x3x4
Variable Float32x3x4_operator_subasg_Float32x3x4_arg0;
Function Float32x3x4_operator_subasg_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_subasg_Float32x3x4_args = { &Float32x3x4_operator_subasg_Float32x3x4_arg0 };

/// operator*= with Float32x3x4
Variable Float32x3x4_operator_mulasg_Float32x3x4_arg0;
Function Float32x3x4_operator_mulasg_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_mulasg_Float32x3x4_args = { &Float32x3x4_operator_mulasg_Float32x3x4_arg0 };

/// operator* with Float32
Variable Float32x3x4_operator_scale_Float32_arg0;
Function Float32x3x4_operator_scale_Float32;
inline constexpr std::array Float32x3x4_operator_scale_Float32_args = { &Float32x3x4_operator_scale_Float32_arg0 };

Float32x3x4::Float32x3x4()
{
    this->name = "f32";
    this->columnSize = 4;
    this->rowSize = 3;
    this->byteSize = 48;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// f32x3x4 with Float32x4, Float32x4, Float32x4
    Float32x3x4_Float32_4_ctor_arg0.name = "_arg0"_c;
    Float32x3x4_Float32_4_ctor_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x3x4_Float32_4_ctor_arg1.name = "_arg1"_c;
    Float32x3x4_Float32_4_ctor_arg1.type = Type::FullType{ Float32x4Type.name };
    Float32x3x4_Float32_4_ctor_arg2.name = "_arg2"_c;
    Float32x3x4_Float32_4_ctor_arg2.type = Type::FullType{ Float32x4Type.name };
    Float32x3x4_Float32_4_ctor.name = "f32x3x4"_c;
    Float32x3x4_Float32_4_ctor.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_Float32_4_ctor.parameters = Float32x3x4_Float32_4_ctor_args;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor_arg1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor_arg2)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor)->returnTypeSymbol = &Float32x3x4Type;

    /// f32x3x4
    Float32x3x4_identity.name = "f32x3x4"_c;
    Float32x3x4_identity.returnType = Type::FullType { Float32x3x4Type.name };
    Symbol::Resolved(&Float32x3x4_identity)->returnTypeSymbol = &Float32x3x4Type;

    /// f32x3x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x3x4_raw_list_arg0.name = "_arg0"_c;
    Float32x3x4_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg1.name = "_arg1"_c;
    Float32x3x4_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg2.name = "_arg2"_c;
    Float32x3x4_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg3.name = "_arg3"_c;
    Float32x3x4_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg4.name = "_arg4"_c;
    Float32x3x4_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg5.name = "_arg5"_c;
    Float32x3x4_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg6.name = "_arg6"_c;
    Float32x3x4_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg7.name = "_arg7"_c;
    Float32x3x4_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg8.name = "_arg8"_c;
    Float32x3x4_raw_list_arg8.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg9.name = "_arg9"_c;
    Float32x3x4_raw_list_arg9.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg10.name = "_arg10"_c;
    Float32x3x4_raw_list_arg10.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg11.name = "_arg11"_c;
    Float32x3x4_raw_list_arg11.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list.name = "f32x3x4"_c;
    Float32x3x4_raw_list.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_raw_list.parameters = Float32x3x4_raw_list_args;
    Symbol::Resolved(&Float32x3x4_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg8)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg9)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg10)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg11)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list)->returnTypeSymbol = &Float32x3x4Type;

    /// operator[] with Int32
    Float32x3x4_operator_index_Int32_arg0.name = "idx"_c;
    Float32x3x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x3x4_operator_index_Int32.name = "operator[]"_c;
    Float32x3x4_operator_index_Int32.returnType = Type::FullType { Float32x4Type.name };
    Float32x3x4_operator_index_Int32.parameters = Float32x3x4_operator_index_Int32_args;
    Symbol::Resolved(&Float32x3x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3x4_operator_index_Int32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt32
    Float32x3x4_operator_index_UInt32_arg0.name = "idx"_c;
    Float32x3x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x3x4_operator_index_UInt32.name = "operator[]"_c;
    Float32x3x4_operator_index_UInt32.returnType = Type::FullType { Float32x4Type.name };
    Float32x3x4_operator_index_UInt32.parameters = Float32x3x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with Int16
    Float32x3x4_operator_index_Int16_arg0.name = "idx"_c;
    Float32x3x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x3x4_operator_index_Int16.name = "operator[]"_c;
    Float32x3x4_operator_index_Int16.returnType = Type::FullType { Float32x4Type.name };
    Float32x3x4_operator_index_Int16.parameters = Float32x3x4_operator_index_Int16_args;
    Symbol::Resolved(&Float32x3x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x3x4_operator_index_Int16)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt16
    Float32x3x4_operator_index_UInt16_arg0.name = "idx"_c;
    Float32x3x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x3x4_operator_index_UInt16.name = "operator[]"_c;
    Float32x3x4_operator_index_UInt16.returnType = Type::FullType { Float32x4Type.name };
    Float32x3x4_operator_index_UInt16.parameters = Float32x3x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt16)->returnTypeSymbol = &Float32x4Type;

    /// operator+ with Float32x3x4
    Float32x3x4_operator_add_Float32x3x4_arg0.name = "_arg0"_c;
    Float32x3x4_operator_add_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_add_Float32x3x4.name = "operator+"_c;
    Float32x3x4_operator_add_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_add_Float32x3x4.parameters = Float32x3x4_operator_add_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_add_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_add_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator- with Float32x3x4
    Float32x3x4_operator_sub_Float32x3x4_arg0.name = "_arg0"_c;
    Float32x3x4_operator_sub_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_sub_Float32x3x4.name = "operator-"_c;
    Float32x3x4_operator_sub_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_sub_Float32x3x4.parameters = Float32x3x4_operator_sub_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_sub_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_sub_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator* with Float32x3x4
    Float32x3x4_operator_mul_Float32x3x4_arg0.name = "_arg0"_c;
    Float32x3x4_operator_mul_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_mul_Float32x3x4.name = "operator*"_c;
    Float32x3x4_operator_mul_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_mul_Float32x3x4.parameters = Float32x3x4_operator_mul_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_mul_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_mul_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator+= with Float32x3x4
    Float32x3x4_operator_addasg_Float32x3x4_arg0.name = "_arg0"_c;
    Float32x3x4_operator_addasg_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_addasg_Float32x3x4.name = "operator+="_c;
    Float32x3x4_operator_addasg_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_addasg_Float32x3x4.parameters = Float32x3x4_operator_addasg_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_addasg_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_addasg_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator-= with Float32x3x4
    Float32x3x4_operator_subasg_Float32x3x4_arg0.name = "_arg0"_c;
    Float32x3x4_operator_subasg_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_subasg_Float32x3x4.name = "operator-="_c;
    Float32x3x4_operator_subasg_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_subasg_Float32x3x4.parameters = Float32x3x4_operator_subasg_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_subasg_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_subasg_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator*= with Float32x3x4
    Float32x3x4_operator_mulasg_Float32x3x4_arg0.name = "_arg0"_c;
    Float32x3x4_operator_mulasg_Float32x3x4_arg0.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_mulasg_Float32x3x4.name = "operator*="_c;
    Float32x3x4_operator_mulasg_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_mulasg_Float32x3x4.parameters = Float32x3x4_operator_mulasg_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_mulasg_Float32x3x4_arg0)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_mulasg_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator* with Float32
    Float32x3x4_operator_scale_Float32_arg0.name = "_arg0"_c;
    Float32x3x4_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32x3x4_operator_scale_Float32.name = "operator*"_c;
    Float32x3x4_operator_scale_Float32.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_scale_Float32.parameters = Float32x3x4_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32)->returnTypeSymbol = &Float32x3x4Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 101> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator-"_c, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator+="_c, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator-="_c, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator*="_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x4_operator_add_Float32x3x4 },
    std::pair{ "operator-"_c, &Float32x3x4_operator_sub_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_mul_Float32x3x4 },
    std::pair{ "operator+="_c, &Float32x3x4_operator_addasg_Float32x3x4 },
    std::pair{ "operator-="_c, &Float32x3x4_operator_subasg_Float32x3x4 },
    std::pair{ "operator*="_c, &Float32x3x4_operator_mulasg_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_scale_Float32 }
    } };
}
Float32x3x4 Float32x3x4Type;

/// f32x4x2 with Float32x2, Float32x2, Float32x2, Float32x2
Variable Float32x4x2_Float32_2_ctor_arg0;
Variable Float32x4x2_Float32_2_ctor_arg1;
Variable Float32x4x2_Float32_2_ctor_arg2;
Variable Float32x4x2_Float32_2_ctor_arg3;
Function Float32x4x2_Float32_2_ctor;
inline constexpr std::array Float32x4x2_Float32_2_ctor_args = { &Float32x4x2_Float32_2_ctor_arg0, &Float32x4x2_Float32_2_ctor_arg1, &Float32x4x2_Float32_2_ctor_arg2, &Float32x4x2_Float32_2_ctor_arg3 };

/// f32x4x2
Function Float32x4x2_identity;

/// f32x4x2 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x4x2_raw_list_arg0;
Variable Float32x4x2_raw_list_arg1;
Variable Float32x4x2_raw_list_arg2;
Variable Float32x4x2_raw_list_arg3;
Variable Float32x4x2_raw_list_arg4;
Variable Float32x4x2_raw_list_arg5;
Variable Float32x4x2_raw_list_arg6;
Variable Float32x4x2_raw_list_arg7;
Function Float32x4x2_raw_list;
inline constexpr std::array Float32x4x2_raw_list_args = { &Float32x4x2_raw_list_arg0, &Float32x4x2_raw_list_arg1, &Float32x4x2_raw_list_arg2, &Float32x4x2_raw_list_arg3, &Float32x4x2_raw_list_arg4, &Float32x4x2_raw_list_arg5, &Float32x4x2_raw_list_arg6, &Float32x4x2_raw_list_arg7 };

/// operator[] with Int32
Variable Float32x4x2_operator_index_Int32_arg0;
Function Float32x4x2_operator_index_Int32;
inline constexpr std::array Float32x4x2_operator_index_Int32_args = { &Float32x4x2_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float32x4x2_operator_index_UInt32_arg0;
Function Float32x4x2_operator_index_UInt32;
inline constexpr std::array Float32x4x2_operator_index_UInt32_args = { &Float32x4x2_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float32x4x2_operator_index_Int16_arg0;
Function Float32x4x2_operator_index_Int16;
inline constexpr std::array Float32x4x2_operator_index_Int16_args = { &Float32x4x2_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float32x4x2_operator_index_UInt16_arg0;
Function Float32x4x2_operator_index_UInt16;
inline constexpr std::array Float32x4x2_operator_index_UInt16_args = { &Float32x4x2_operator_index_UInt16_arg0 };

/// operator+ with Float32x4x2
Variable Float32x4x2_operator_add_Float32x4x2_arg0;
Function Float32x4x2_operator_add_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_add_Float32x4x2_args = { &Float32x4x2_operator_add_Float32x4x2_arg0 };

/// operator- with Float32x4x2
Variable Float32x4x2_operator_sub_Float32x4x2_arg0;
Function Float32x4x2_operator_sub_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_sub_Float32x4x2_args = { &Float32x4x2_operator_sub_Float32x4x2_arg0 };

/// operator* with Float32x4x2
Variable Float32x4x2_operator_mul_Float32x4x2_arg0;
Function Float32x4x2_operator_mul_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_mul_Float32x4x2_args = { &Float32x4x2_operator_mul_Float32x4x2_arg0 };

/// operator+= with Float32x4x2
Variable Float32x4x2_operator_addasg_Float32x4x2_arg0;
Function Float32x4x2_operator_addasg_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_addasg_Float32x4x2_args = { &Float32x4x2_operator_addasg_Float32x4x2_arg0 };

/// operator-= with Float32x4x2
Variable Float32x4x2_operator_subasg_Float32x4x2_arg0;
Function Float32x4x2_operator_subasg_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_subasg_Float32x4x2_args = { &Float32x4x2_operator_subasg_Float32x4x2_arg0 };

/// operator*= with Float32x4x2
Variable Float32x4x2_operator_mulasg_Float32x4x2_arg0;
Function Float32x4x2_operator_mulasg_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_mulasg_Float32x4x2_args = { &Float32x4x2_operator_mulasg_Float32x4x2_arg0 };

/// operator* with Float32
Variable Float32x4x2_operator_scale_Float32_arg0;
Function Float32x4x2_operator_scale_Float32;
inline constexpr std::array Float32x4x2_operator_scale_Float32_args = { &Float32x4x2_operator_scale_Float32_arg0 };

Float32x4x2::Float32x4x2()
{
    this->name = "f32";
    this->columnSize = 2;
    this->rowSize = 4;
    this->byteSize = 32;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// f32x4x2 with Float32x2, Float32x2, Float32x2, Float32x2
    Float32x4x2_Float32_2_ctor_arg0.name = "_arg0"_c;
    Float32x4x2_Float32_2_ctor_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x4x2_Float32_2_ctor_arg1.name = "_arg1"_c;
    Float32x4x2_Float32_2_ctor_arg1.type = Type::FullType{ Float32x2Type.name };
    Float32x4x2_Float32_2_ctor_arg2.name = "_arg2"_c;
    Float32x4x2_Float32_2_ctor_arg2.type = Type::FullType{ Float32x2Type.name };
    Float32x4x2_Float32_2_ctor_arg3.name = "_arg3"_c;
    Float32x4x2_Float32_2_ctor_arg3.type = Type::FullType{ Float32x2Type.name };
    Float32x4x2_Float32_2_ctor.name = "f32x4x2"_c;
    Float32x4x2_Float32_2_ctor.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_Float32_2_ctor.parameters = Float32x4x2_Float32_2_ctor_args;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor_arg1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor_arg2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor_arg3)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor)->returnTypeSymbol = &Float32x4x2Type;

    /// f32x4x2
    Float32x4x2_identity.name = "f32x4x2"_c;
    Float32x4x2_identity.returnType = Type::FullType { Float32x4x2Type.name };
    Symbol::Resolved(&Float32x4x2_identity)->returnTypeSymbol = &Float32x4x2Type;

    /// f32x4x2 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x4x2_raw_list_arg0.name = "_arg0"_c;
    Float32x4x2_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg1.name = "_arg1"_c;
    Float32x4x2_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg2.name = "_arg2"_c;
    Float32x4x2_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg3.name = "_arg3"_c;
    Float32x4x2_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg4.name = "_arg4"_c;
    Float32x4x2_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg5.name = "_arg5"_c;
    Float32x4x2_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg6.name = "_arg6"_c;
    Float32x4x2_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg7.name = "_arg7"_c;
    Float32x4x2_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list.name = "f32x4x2"_c;
    Float32x4x2_raw_list.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_raw_list.parameters = Float32x4x2_raw_list_args;
    Symbol::Resolved(&Float32x4x2_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list)->returnTypeSymbol = &Float32x4x2Type;

    /// operator[] with Int32
    Float32x4x2_operator_index_Int32_arg0.name = "idx"_c;
    Float32x4x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x4x2_operator_index_Int32.name = "operator[]"_c;
    Float32x4x2_operator_index_Int32.returnType = Type::FullType { Float32x2Type.name };
    Float32x4x2_operator_index_Int32.parameters = Float32x4x2_operator_index_Int32_args;
    Symbol::Resolved(&Float32x4x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4x2_operator_index_Int32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt32
    Float32x4x2_operator_index_UInt32_arg0.name = "idx"_c;
    Float32x4x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x4x2_operator_index_UInt32.name = "operator[]"_c;
    Float32x4x2_operator_index_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Float32x4x2_operator_index_UInt32.parameters = Float32x4x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with Int16
    Float32x4x2_operator_index_Int16_arg0.name = "idx"_c;
    Float32x4x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x4x2_operator_index_Int16.name = "operator[]"_c;
    Float32x4x2_operator_index_Int16.returnType = Type::FullType { Float32x2Type.name };
    Float32x4x2_operator_index_Int16.parameters = Float32x4x2_operator_index_Int16_args;
    Symbol::Resolved(&Float32x4x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x4x2_operator_index_Int16)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt16
    Float32x4x2_operator_index_UInt16_arg0.name = "idx"_c;
    Float32x4x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x4x2_operator_index_UInt16.name = "operator[]"_c;
    Float32x4x2_operator_index_UInt16.returnType = Type::FullType { Float32x2Type.name };
    Float32x4x2_operator_index_UInt16.parameters = Float32x4x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt16)->returnTypeSymbol = &Float32x2Type;

    /// operator+ with Float32x4x2
    Float32x4x2_operator_add_Float32x4x2_arg0.name = "_arg0"_c;
    Float32x4x2_operator_add_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_add_Float32x4x2.name = "operator+"_c;
    Float32x4x2_operator_add_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_add_Float32x4x2.parameters = Float32x4x2_operator_add_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_add_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_add_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator- with Float32x4x2
    Float32x4x2_operator_sub_Float32x4x2_arg0.name = "_arg0"_c;
    Float32x4x2_operator_sub_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_sub_Float32x4x2.name = "operator-"_c;
    Float32x4x2_operator_sub_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_sub_Float32x4x2.parameters = Float32x4x2_operator_sub_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_sub_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_sub_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator* with Float32x4x2
    Float32x4x2_operator_mul_Float32x4x2_arg0.name = "_arg0"_c;
    Float32x4x2_operator_mul_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_mul_Float32x4x2.name = "operator*"_c;
    Float32x4x2_operator_mul_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_mul_Float32x4x2.parameters = Float32x4x2_operator_mul_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_mul_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_mul_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator+= with Float32x4x2
    Float32x4x2_operator_addasg_Float32x4x2_arg0.name = "_arg0"_c;
    Float32x4x2_operator_addasg_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_addasg_Float32x4x2.name = "operator+="_c;
    Float32x4x2_operator_addasg_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_addasg_Float32x4x2.parameters = Float32x4x2_operator_addasg_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_addasg_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_addasg_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator-= with Float32x4x2
    Float32x4x2_operator_subasg_Float32x4x2_arg0.name = "_arg0"_c;
    Float32x4x2_operator_subasg_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_subasg_Float32x4x2.name = "operator-="_c;
    Float32x4x2_operator_subasg_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_subasg_Float32x4x2.parameters = Float32x4x2_operator_subasg_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_subasg_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_subasg_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator*= with Float32x4x2
    Float32x4x2_operator_mulasg_Float32x4x2_arg0.name = "_arg0"_c;
    Float32x4x2_operator_mulasg_Float32x4x2_arg0.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_mulasg_Float32x4x2.name = "operator*="_c;
    Float32x4x2_operator_mulasg_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_mulasg_Float32x4x2.parameters = Float32x4x2_operator_mulasg_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_mulasg_Float32x4x2_arg0)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_mulasg_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator* with Float32
    Float32x4x2_operator_scale_Float32_arg0.name = "_arg0"_c;
    Float32x4x2_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32x4x2_operator_scale_Float32.name = "operator*"_c;
    Float32x4x2_operator_scale_Float32.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_scale_Float32.parameters = Float32x4x2_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32)->returnTypeSymbol = &Float32x4x2Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 112> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator-"_c, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator+="_c, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator-="_c, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator*="_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x4_operator_add_Float32x3x4 },
    std::pair{ "operator-"_c, &Float32x3x4_operator_sub_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_mul_Float32x3x4 },
    std::pair{ "operator+="_c, &Float32x3x4_operator_addasg_Float32x3x4 },
    std::pair{ "operator-="_c, &Float32x3x4_operator_subasg_Float32x3x4 },
    std::pair{ "operator*="_c, &Float32x3x4_operator_mulasg_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x2_operator_add_Float32x4x2 },
    std::pair{ "operator-"_c, &Float32x4x2_operator_sub_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_mul_Float32x4x2 },
    std::pair{ "operator+="_c, &Float32x4x2_operator_addasg_Float32x4x2 },
    std::pair{ "operator-="_c, &Float32x4x2_operator_subasg_Float32x4x2 },
    std::pair{ "operator*="_c, &Float32x4x2_operator_mulasg_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_scale_Float32 }
    } };
}
Float32x4x2 Float32x4x2Type;

/// f32x4x3 with Float32x3, Float32x3, Float32x3, Float32x3
Variable Float32x4x3_Float32_3_ctor_arg0;
Variable Float32x4x3_Float32_3_ctor_arg1;
Variable Float32x4x3_Float32_3_ctor_arg2;
Variable Float32x4x3_Float32_3_ctor_arg3;
Function Float32x4x3_Float32_3_ctor;
inline constexpr std::array Float32x4x3_Float32_3_ctor_args = { &Float32x4x3_Float32_3_ctor_arg0, &Float32x4x3_Float32_3_ctor_arg1, &Float32x4x3_Float32_3_ctor_arg2, &Float32x4x3_Float32_3_ctor_arg3 };

/// f32x4x3
Function Float32x4x3_identity;

/// f32x4x3 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x4x3_raw_list_arg0;
Variable Float32x4x3_raw_list_arg1;
Variable Float32x4x3_raw_list_arg2;
Variable Float32x4x3_raw_list_arg3;
Variable Float32x4x3_raw_list_arg4;
Variable Float32x4x3_raw_list_arg5;
Variable Float32x4x3_raw_list_arg6;
Variable Float32x4x3_raw_list_arg7;
Variable Float32x4x3_raw_list_arg8;
Variable Float32x4x3_raw_list_arg9;
Variable Float32x4x3_raw_list_arg10;
Variable Float32x4x3_raw_list_arg11;
Function Float32x4x3_raw_list;
inline constexpr std::array Float32x4x3_raw_list_args = { &Float32x4x3_raw_list_arg0, &Float32x4x3_raw_list_arg1, &Float32x4x3_raw_list_arg2, &Float32x4x3_raw_list_arg3, &Float32x4x3_raw_list_arg4, &Float32x4x3_raw_list_arg5, &Float32x4x3_raw_list_arg6, &Float32x4x3_raw_list_arg7, &Float32x4x3_raw_list_arg8, &Float32x4x3_raw_list_arg9, &Float32x4x3_raw_list_arg10, &Float32x4x3_raw_list_arg11 };

/// operator[] with Int32
Variable Float32x4x3_operator_index_Int32_arg0;
Function Float32x4x3_operator_index_Int32;
inline constexpr std::array Float32x4x3_operator_index_Int32_args = { &Float32x4x3_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float32x4x3_operator_index_UInt32_arg0;
Function Float32x4x3_operator_index_UInt32;
inline constexpr std::array Float32x4x3_operator_index_UInt32_args = { &Float32x4x3_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float32x4x3_operator_index_Int16_arg0;
Function Float32x4x3_operator_index_Int16;
inline constexpr std::array Float32x4x3_operator_index_Int16_args = { &Float32x4x3_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float32x4x3_operator_index_UInt16_arg0;
Function Float32x4x3_operator_index_UInt16;
inline constexpr std::array Float32x4x3_operator_index_UInt16_args = { &Float32x4x3_operator_index_UInt16_arg0 };

/// operator+ with Float32x4x3
Variable Float32x4x3_operator_add_Float32x4x3_arg0;
Function Float32x4x3_operator_add_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_add_Float32x4x3_args = { &Float32x4x3_operator_add_Float32x4x3_arg0 };

/// operator- with Float32x4x3
Variable Float32x4x3_operator_sub_Float32x4x3_arg0;
Function Float32x4x3_operator_sub_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_sub_Float32x4x3_args = { &Float32x4x3_operator_sub_Float32x4x3_arg0 };

/// operator* with Float32x4x3
Variable Float32x4x3_operator_mul_Float32x4x3_arg0;
Function Float32x4x3_operator_mul_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_mul_Float32x4x3_args = { &Float32x4x3_operator_mul_Float32x4x3_arg0 };

/// operator+= with Float32x4x3
Variable Float32x4x3_operator_addasg_Float32x4x3_arg0;
Function Float32x4x3_operator_addasg_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_addasg_Float32x4x3_args = { &Float32x4x3_operator_addasg_Float32x4x3_arg0 };

/// operator-= with Float32x4x3
Variable Float32x4x3_operator_subasg_Float32x4x3_arg0;
Function Float32x4x3_operator_subasg_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_subasg_Float32x4x3_args = { &Float32x4x3_operator_subasg_Float32x4x3_arg0 };

/// operator*= with Float32x4x3
Variable Float32x4x3_operator_mulasg_Float32x4x3_arg0;
Function Float32x4x3_operator_mulasg_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_mulasg_Float32x4x3_args = { &Float32x4x3_operator_mulasg_Float32x4x3_arg0 };

/// operator* with Float32
Variable Float32x4x3_operator_scale_Float32_arg0;
Function Float32x4x3_operator_scale_Float32;
inline constexpr std::array Float32x4x3_operator_scale_Float32_args = { &Float32x4x3_operator_scale_Float32_arg0 };

Float32x4x3::Float32x4x3()
{
    this->name = "f32";
    this->columnSize = 3;
    this->rowSize = 4;
    this->byteSize = 48;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// f32x4x3 with Float32x3, Float32x3, Float32x3, Float32x3
    Float32x4x3_Float32_3_ctor_arg0.name = "_arg0"_c;
    Float32x4x3_Float32_3_ctor_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x4x3_Float32_3_ctor_arg1.name = "_arg1"_c;
    Float32x4x3_Float32_3_ctor_arg1.type = Type::FullType{ Float32x3Type.name };
    Float32x4x3_Float32_3_ctor_arg2.name = "_arg2"_c;
    Float32x4x3_Float32_3_ctor_arg2.type = Type::FullType{ Float32x3Type.name };
    Float32x4x3_Float32_3_ctor_arg3.name = "_arg3"_c;
    Float32x4x3_Float32_3_ctor_arg3.type = Type::FullType{ Float32x3Type.name };
    Float32x4x3_Float32_3_ctor.name = "f32x4x3"_c;
    Float32x4x3_Float32_3_ctor.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_Float32_3_ctor.parameters = Float32x4x3_Float32_3_ctor_args;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor_arg1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor_arg2)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor_arg3)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor)->returnTypeSymbol = &Float32x4x3Type;

    /// f32x4x3
    Float32x4x3_identity.name = "f32x4x3"_c;
    Float32x4x3_identity.returnType = Type::FullType { Float32x4x3Type.name };
    Symbol::Resolved(&Float32x4x3_identity)->returnTypeSymbol = &Float32x4x3Type;

    /// f32x4x3 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x4x3_raw_list_arg0.name = "_arg0"_c;
    Float32x4x3_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg1.name = "_arg1"_c;
    Float32x4x3_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg2.name = "_arg2"_c;
    Float32x4x3_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg3.name = "_arg3"_c;
    Float32x4x3_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg4.name = "_arg4"_c;
    Float32x4x3_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg5.name = "_arg5"_c;
    Float32x4x3_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg6.name = "_arg6"_c;
    Float32x4x3_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg7.name = "_arg7"_c;
    Float32x4x3_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg8.name = "_arg8"_c;
    Float32x4x3_raw_list_arg8.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg9.name = "_arg9"_c;
    Float32x4x3_raw_list_arg9.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg10.name = "_arg10"_c;
    Float32x4x3_raw_list_arg10.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg11.name = "_arg11"_c;
    Float32x4x3_raw_list_arg11.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list.name = "f32x4x3"_c;
    Float32x4x3_raw_list.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_raw_list.parameters = Float32x4x3_raw_list_args;
    Symbol::Resolved(&Float32x4x3_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg8)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg9)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg10)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg11)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list)->returnTypeSymbol = &Float32x4x3Type;

    /// operator[] with Int32
    Float32x4x3_operator_index_Int32_arg0.name = "idx"_c;
    Float32x4x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x4x3_operator_index_Int32.name = "operator[]"_c;
    Float32x4x3_operator_index_Int32.returnType = Type::FullType { Float32x3Type.name };
    Float32x4x3_operator_index_Int32.parameters = Float32x4x3_operator_index_Int32_args;
    Symbol::Resolved(&Float32x4x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4x3_operator_index_Int32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt32
    Float32x4x3_operator_index_UInt32_arg0.name = "idx"_c;
    Float32x4x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x4x3_operator_index_UInt32.name = "operator[]"_c;
    Float32x4x3_operator_index_UInt32.returnType = Type::FullType { Float32x3Type.name };
    Float32x4x3_operator_index_UInt32.parameters = Float32x4x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with Int16
    Float32x4x3_operator_index_Int16_arg0.name = "idx"_c;
    Float32x4x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x4x3_operator_index_Int16.name = "operator[]"_c;
    Float32x4x3_operator_index_Int16.returnType = Type::FullType { Float32x3Type.name };
    Float32x4x3_operator_index_Int16.parameters = Float32x4x3_operator_index_Int16_args;
    Symbol::Resolved(&Float32x4x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x4x3_operator_index_Int16)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt16
    Float32x4x3_operator_index_UInt16_arg0.name = "idx"_c;
    Float32x4x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x4x3_operator_index_UInt16.name = "operator[]"_c;
    Float32x4x3_operator_index_UInt16.returnType = Type::FullType { Float32x3Type.name };
    Float32x4x3_operator_index_UInt16.parameters = Float32x4x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt16)->returnTypeSymbol = &Float32x3Type;

    /// operator+ with Float32x4x3
    Float32x4x3_operator_add_Float32x4x3_arg0.name = "_arg0"_c;
    Float32x4x3_operator_add_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_add_Float32x4x3.name = "operator+"_c;
    Float32x4x3_operator_add_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_add_Float32x4x3.parameters = Float32x4x3_operator_add_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_add_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_add_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator- with Float32x4x3
    Float32x4x3_operator_sub_Float32x4x3_arg0.name = "_arg0"_c;
    Float32x4x3_operator_sub_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_sub_Float32x4x3.name = "operator-"_c;
    Float32x4x3_operator_sub_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_sub_Float32x4x3.parameters = Float32x4x3_operator_sub_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_sub_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_sub_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator* with Float32x4x3
    Float32x4x3_operator_mul_Float32x4x3_arg0.name = "_arg0"_c;
    Float32x4x3_operator_mul_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_mul_Float32x4x3.name = "operator*"_c;
    Float32x4x3_operator_mul_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_mul_Float32x4x3.parameters = Float32x4x3_operator_mul_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_mul_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_mul_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator+= with Float32x4x3
    Float32x4x3_operator_addasg_Float32x4x3_arg0.name = "_arg0"_c;
    Float32x4x3_operator_addasg_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_addasg_Float32x4x3.name = "operator+="_c;
    Float32x4x3_operator_addasg_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_addasg_Float32x4x3.parameters = Float32x4x3_operator_addasg_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_addasg_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_addasg_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator-= with Float32x4x3
    Float32x4x3_operator_subasg_Float32x4x3_arg0.name = "_arg0"_c;
    Float32x4x3_operator_subasg_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_subasg_Float32x4x3.name = "operator-="_c;
    Float32x4x3_operator_subasg_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_subasg_Float32x4x3.parameters = Float32x4x3_operator_subasg_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_subasg_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_subasg_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator*= with Float32x4x3
    Float32x4x3_operator_mulasg_Float32x4x3_arg0.name = "_arg0"_c;
    Float32x4x3_operator_mulasg_Float32x4x3_arg0.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_mulasg_Float32x4x3.name = "operator*="_c;
    Float32x4x3_operator_mulasg_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_mulasg_Float32x4x3.parameters = Float32x4x3_operator_mulasg_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_mulasg_Float32x4x3_arg0)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_mulasg_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator* with Float32
    Float32x4x3_operator_scale_Float32_arg0.name = "_arg0"_c;
    Float32x4x3_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32x4x3_operator_scale_Float32.name = "operator*"_c;
    Float32x4x3_operator_scale_Float32.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_scale_Float32.parameters = Float32x4x3_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32)->returnTypeSymbol = &Float32x4x3Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 123> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator-"_c, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator+="_c, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator-="_c, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator*="_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x4_operator_add_Float32x3x4 },
    std::pair{ "operator-"_c, &Float32x3x4_operator_sub_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_mul_Float32x3x4 },
    std::pair{ "operator+="_c, &Float32x3x4_operator_addasg_Float32x3x4 },
    std::pair{ "operator-="_c, &Float32x3x4_operator_subasg_Float32x3x4 },
    std::pair{ "operator*="_c, &Float32x3x4_operator_mulasg_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x2_operator_add_Float32x4x2 },
    std::pair{ "operator-"_c, &Float32x4x2_operator_sub_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_mul_Float32x4x2 },
    std::pair{ "operator+="_c, &Float32x4x2_operator_addasg_Float32x4x2 },
    std::pair{ "operator-="_c, &Float32x4x2_operator_subasg_Float32x4x2 },
    std::pair{ "operator*="_c, &Float32x4x2_operator_mulasg_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x3_operator_add_Float32x4x3 },
    std::pair{ "operator-"_c, &Float32x4x3_operator_sub_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_mul_Float32x4x3 },
    std::pair{ "operator+="_c, &Float32x4x3_operator_addasg_Float32x4x3 },
    std::pair{ "operator-="_c, &Float32x4x3_operator_subasg_Float32x4x3 },
    std::pair{ "operator*="_c, &Float32x4x3_operator_mulasg_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_scale_Float32 }
    } };
}
Float32x4x3 Float32x4x3Type;

/// f32x4x4 with Float32x4, Float32x4, Float32x4, Float32x4
Variable Float32x4x4_Float32_4_ctor_arg0;
Variable Float32x4x4_Float32_4_ctor_arg1;
Variable Float32x4x4_Float32_4_ctor_arg2;
Variable Float32x4x4_Float32_4_ctor_arg3;
Function Float32x4x4_Float32_4_ctor;
inline constexpr std::array Float32x4x4_Float32_4_ctor_args = { &Float32x4x4_Float32_4_ctor_arg0, &Float32x4x4_Float32_4_ctor_arg1, &Float32x4x4_Float32_4_ctor_arg2, &Float32x4x4_Float32_4_ctor_arg3 };

/// f32x4x4
Function Float32x4x4_identity;

/// f32x4x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x4x4_raw_list_arg0;
Variable Float32x4x4_raw_list_arg1;
Variable Float32x4x4_raw_list_arg2;
Variable Float32x4x4_raw_list_arg3;
Variable Float32x4x4_raw_list_arg4;
Variable Float32x4x4_raw_list_arg5;
Variable Float32x4x4_raw_list_arg6;
Variable Float32x4x4_raw_list_arg7;
Variable Float32x4x4_raw_list_arg8;
Variable Float32x4x4_raw_list_arg9;
Variable Float32x4x4_raw_list_arg10;
Variable Float32x4x4_raw_list_arg11;
Variable Float32x4x4_raw_list_arg12;
Variable Float32x4x4_raw_list_arg13;
Variable Float32x4x4_raw_list_arg14;
Variable Float32x4x4_raw_list_arg15;
Function Float32x4x4_raw_list;
inline constexpr std::array Float32x4x4_raw_list_args = { &Float32x4x4_raw_list_arg0, &Float32x4x4_raw_list_arg1, &Float32x4x4_raw_list_arg2, &Float32x4x4_raw_list_arg3, &Float32x4x4_raw_list_arg4, &Float32x4x4_raw_list_arg5, &Float32x4x4_raw_list_arg6, &Float32x4x4_raw_list_arg7, &Float32x4x4_raw_list_arg8, &Float32x4x4_raw_list_arg9, &Float32x4x4_raw_list_arg10, &Float32x4x4_raw_list_arg11, &Float32x4x4_raw_list_arg12, &Float32x4x4_raw_list_arg13, &Float32x4x4_raw_list_arg14, &Float32x4x4_raw_list_arg15 };

/// operator[] with Int32
Variable Float32x4x4_operator_index_Int32_arg0;
Function Float32x4x4_operator_index_Int32;
inline constexpr std::array Float32x4x4_operator_index_Int32_args = { &Float32x4x4_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float32x4x4_operator_index_UInt32_arg0;
Function Float32x4x4_operator_index_UInt32;
inline constexpr std::array Float32x4x4_operator_index_UInt32_args = { &Float32x4x4_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float32x4x4_operator_index_Int16_arg0;
Function Float32x4x4_operator_index_Int16;
inline constexpr std::array Float32x4x4_operator_index_Int16_args = { &Float32x4x4_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float32x4x4_operator_index_UInt16_arg0;
Function Float32x4x4_operator_index_UInt16;
inline constexpr std::array Float32x4x4_operator_index_UInt16_args = { &Float32x4x4_operator_index_UInt16_arg0 };

/// operator+ with Float32x4x4
Variable Float32x4x4_operator_add_Float32x4x4_arg0;
Function Float32x4x4_operator_add_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_add_Float32x4x4_args = { &Float32x4x4_operator_add_Float32x4x4_arg0 };

/// operator- with Float32x4x4
Variable Float32x4x4_operator_sub_Float32x4x4_arg0;
Function Float32x4x4_operator_sub_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_sub_Float32x4x4_args = { &Float32x4x4_operator_sub_Float32x4x4_arg0 };

/// operator* with Float32x4x4
Variable Float32x4x4_operator_mul_Float32x4x4_arg0;
Function Float32x4x4_operator_mul_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_mul_Float32x4x4_args = { &Float32x4x4_operator_mul_Float32x4x4_arg0 };

/// operator+= with Float32x4x4
Variable Float32x4x4_operator_addasg_Float32x4x4_arg0;
Function Float32x4x4_operator_addasg_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_addasg_Float32x4x4_args = { &Float32x4x4_operator_addasg_Float32x4x4_arg0 };

/// operator-= with Float32x4x4
Variable Float32x4x4_operator_subasg_Float32x4x4_arg0;
Function Float32x4x4_operator_subasg_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_subasg_Float32x4x4_args = { &Float32x4x4_operator_subasg_Float32x4x4_arg0 };

/// operator*= with Float32x4x4
Variable Float32x4x4_operator_mulasg_Float32x4x4_arg0;
Function Float32x4x4_operator_mulasg_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_mulasg_Float32x4x4_args = { &Float32x4x4_operator_mulasg_Float32x4x4_arg0 };

/// operator* with Float32
Variable Float32x4x4_operator_scale_Float32_arg0;
Function Float32x4x4_operator_scale_Float32;
inline constexpr std::array Float32x4x4_operator_scale_Float32_args = { &Float32x4x4_operator_scale_Float32_arg0 };

Float32x4x4::Float32x4x4()
{
    this->name = "f32";
    this->columnSize = 4;
    this->rowSize = 4;
    this->byteSize = 64;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// f32x4x4 with Float32x4, Float32x4, Float32x4, Float32x4
    Float32x4x4_Float32_4_ctor_arg0.name = "_arg0"_c;
    Float32x4x4_Float32_4_ctor_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4x4_Float32_4_ctor_arg1.name = "_arg1"_c;
    Float32x4x4_Float32_4_ctor_arg1.type = Type::FullType{ Float32x4Type.name };
    Float32x4x4_Float32_4_ctor_arg2.name = "_arg2"_c;
    Float32x4x4_Float32_4_ctor_arg2.type = Type::FullType{ Float32x4Type.name };
    Float32x4x4_Float32_4_ctor_arg3.name = "_arg3"_c;
    Float32x4x4_Float32_4_ctor_arg3.type = Type::FullType{ Float32x4Type.name };
    Float32x4x4_Float32_4_ctor.name = "f32x4x4"_c;
    Float32x4x4_Float32_4_ctor.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_Float32_4_ctor.parameters = Float32x4x4_Float32_4_ctor_args;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor_arg1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor_arg2)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor_arg3)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor)->returnTypeSymbol = &Float32x4x4Type;

    /// f32x4x4
    Float32x4x4_identity.name = "f32x4x4"_c;
    Float32x4x4_identity.returnType = Type::FullType { Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_identity)->returnTypeSymbol = &Float32x4x4Type;

    /// f32x4x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x4x4_raw_list_arg0.name = "_arg0"_c;
    Float32x4x4_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg1.name = "_arg1"_c;
    Float32x4x4_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg2.name = "_arg2"_c;
    Float32x4x4_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg3.name = "_arg3"_c;
    Float32x4x4_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg4.name = "_arg4"_c;
    Float32x4x4_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg5.name = "_arg5"_c;
    Float32x4x4_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg6.name = "_arg6"_c;
    Float32x4x4_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg7.name = "_arg7"_c;
    Float32x4x4_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg8.name = "_arg8"_c;
    Float32x4x4_raw_list_arg8.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg9.name = "_arg9"_c;
    Float32x4x4_raw_list_arg9.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg10.name = "_arg10"_c;
    Float32x4x4_raw_list_arg10.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg11.name = "_arg11"_c;
    Float32x4x4_raw_list_arg11.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg12.name = "_arg12"_c;
    Float32x4x4_raw_list_arg12.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg13.name = "_arg13"_c;
    Float32x4x4_raw_list_arg13.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg14.name = "_arg14"_c;
    Float32x4x4_raw_list_arg14.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg15.name = "_arg15"_c;
    Float32x4x4_raw_list_arg15.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list.name = "f32x4x4"_c;
    Float32x4x4_raw_list.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_raw_list.parameters = Float32x4x4_raw_list_args;
    Symbol::Resolved(&Float32x4x4_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg8)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg9)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg10)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg11)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg12)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg13)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg14)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg15)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list)->returnTypeSymbol = &Float32x4x4Type;

    /// operator[] with Int32
    Float32x4x4_operator_index_Int32_arg0.name = "idx"_c;
    Float32x4x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float32x4x4_operator_index_Int32.name = "operator[]"_c;
    Float32x4x4_operator_index_Int32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x4_operator_index_Int32.parameters = Float32x4x4_operator_index_Int32_args;
    Symbol::Resolved(&Float32x4x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4x4_operator_index_Int32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt32
    Float32x4x4_operator_index_UInt32_arg0.name = "idx"_c;
    Float32x4x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float32x4x4_operator_index_UInt32.name = "operator[]"_c;
    Float32x4x4_operator_index_UInt32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x4_operator_index_UInt32.parameters = Float32x4x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with Int16
    Float32x4x4_operator_index_Int16_arg0.name = "idx"_c;
    Float32x4x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float32x4x4_operator_index_Int16.name = "operator[]"_c;
    Float32x4x4_operator_index_Int16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x4_operator_index_Int16.parameters = Float32x4x4_operator_index_Int16_args;
    Symbol::Resolved(&Float32x4x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x4x4_operator_index_Int16)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt16
    Float32x4x4_operator_index_UInt16_arg0.name = "idx"_c;
    Float32x4x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float32x4x4_operator_index_UInt16.name = "operator[]"_c;
    Float32x4x4_operator_index_UInt16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x4_operator_index_UInt16.parameters = Float32x4x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt16)->returnTypeSymbol = &Float32x4Type;

    /// operator+ with Float32x4x4
    Float32x4x4_operator_add_Float32x4x4_arg0.name = "_arg0"_c;
    Float32x4x4_operator_add_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_add_Float32x4x4.name = "operator+"_c;
    Float32x4x4_operator_add_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_add_Float32x4x4.parameters = Float32x4x4_operator_add_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_add_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_add_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator- with Float32x4x4
    Float32x4x4_operator_sub_Float32x4x4_arg0.name = "_arg0"_c;
    Float32x4x4_operator_sub_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_sub_Float32x4x4.name = "operator-"_c;
    Float32x4x4_operator_sub_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_sub_Float32x4x4.parameters = Float32x4x4_operator_sub_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_sub_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_sub_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator* with Float32x4x4
    Float32x4x4_operator_mul_Float32x4x4_arg0.name = "_arg0"_c;
    Float32x4x4_operator_mul_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_mul_Float32x4x4.name = "operator*"_c;
    Float32x4x4_operator_mul_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_mul_Float32x4x4.parameters = Float32x4x4_operator_mul_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_mul_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_mul_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator+= with Float32x4x4
    Float32x4x4_operator_addasg_Float32x4x4_arg0.name = "_arg0"_c;
    Float32x4x4_operator_addasg_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_addasg_Float32x4x4.name = "operator+="_c;
    Float32x4x4_operator_addasg_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_addasg_Float32x4x4.parameters = Float32x4x4_operator_addasg_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_addasg_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_addasg_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator-= with Float32x4x4
    Float32x4x4_operator_subasg_Float32x4x4_arg0.name = "_arg0"_c;
    Float32x4x4_operator_subasg_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_subasg_Float32x4x4.name = "operator-="_c;
    Float32x4x4_operator_subasg_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_subasg_Float32x4x4.parameters = Float32x4x4_operator_subasg_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_subasg_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_subasg_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator*= with Float32x4x4
    Float32x4x4_operator_mulasg_Float32x4x4_arg0.name = "_arg0"_c;
    Float32x4x4_operator_mulasg_Float32x4x4_arg0.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_mulasg_Float32x4x4.name = "operator*="_c;
    Float32x4x4_operator_mulasg_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_mulasg_Float32x4x4.parameters = Float32x4x4_operator_mulasg_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_mulasg_Float32x4x4_arg0)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_mulasg_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator* with Float32
    Float32x4x4_operator_scale_Float32_arg0.name = "_arg0"_c;
    Float32x4x4_operator_scale_Float32_arg0.type = Type::FullType{ Float32Type.name };
    Float32x4x4_operator_scale_Float32.name = "operator*"_c;
    Float32x4x4_operator_scale_Float32.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_scale_Float32.parameters = Float32x4x4_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32)->returnTypeSymbol = &Float32x4x4Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 134> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator-"_c, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator+="_c, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator-="_c, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator*="_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x4_operator_add_Float32x3x4 },
    std::pair{ "operator-"_c, &Float32x3x4_operator_sub_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_mul_Float32x3x4 },
    std::pair{ "operator+="_c, &Float32x3x4_operator_addasg_Float32x3x4 },
    std::pair{ "operator-="_c, &Float32x3x4_operator_subasg_Float32x3x4 },
    std::pair{ "operator*="_c, &Float32x3x4_operator_mulasg_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x2_operator_add_Float32x4x2 },
    std::pair{ "operator-"_c, &Float32x4x2_operator_sub_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_mul_Float32x4x2 },
    std::pair{ "operator+="_c, &Float32x4x2_operator_addasg_Float32x4x2 },
    std::pair{ "operator-="_c, &Float32x4x2_operator_subasg_Float32x4x2 },
    std::pair{ "operator*="_c, &Float32x4x2_operator_mulasg_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x3_operator_add_Float32x4x3 },
    std::pair{ "operator-"_c, &Float32x4x3_operator_sub_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_mul_Float32x4x3 },
    std::pair{ "operator+="_c, &Float32x4x3_operator_addasg_Float32x4x3 },
    std::pair{ "operator-="_c, &Float32x4x3_operator_subasg_Float32x4x3 },
    std::pair{ "operator*="_c, &Float32x4x3_operator_mulasg_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x4_operator_add_Float32x4x4 },
    std::pair{ "operator-"_c, &Float32x4x4_operator_sub_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_mul_Float32x4x4 },
    std::pair{ "operator+="_c, &Float32x4x4_operator_addasg_Float32x4x4 },
    std::pair{ "operator-="_c, &Float32x4x4_operator_subasg_Float32x4x4 },
    std::pair{ "operator*="_c, &Float32x4x4_operator_mulasg_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_scale_Float32 }
    } };
}
Float32x4x4 Float32x4x4Type;

/// f16x2x2 with Float16x2, Float16x2
Variable Float16x2x2_Float16_2_ctor_arg0;
Variable Float16x2x2_Float16_2_ctor_arg1;
Function Float16x2x2_Float16_2_ctor;
inline constexpr std::array Float16x2x2_Float16_2_ctor_args = { &Float16x2x2_Float16_2_ctor_arg0, &Float16x2x2_Float16_2_ctor_arg1 };

/// f16x2x2
Function Float16x2x2_identity;

/// f16x2x2 with Float16, Float16, Float16, Float16
Variable Float16x2x2_raw_list_arg0;
Variable Float16x2x2_raw_list_arg1;
Variable Float16x2x2_raw_list_arg2;
Variable Float16x2x2_raw_list_arg3;
Function Float16x2x2_raw_list;
inline constexpr std::array Float16x2x2_raw_list_args = { &Float16x2x2_raw_list_arg0, &Float16x2x2_raw_list_arg1, &Float16x2x2_raw_list_arg2, &Float16x2x2_raw_list_arg3 };

/// operator[] with Int32
Variable Float16x2x2_operator_index_Int32_arg0;
Function Float16x2x2_operator_index_Int32;
inline constexpr std::array Float16x2x2_operator_index_Int32_args = { &Float16x2x2_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float16x2x2_operator_index_UInt32_arg0;
Function Float16x2x2_operator_index_UInt32;
inline constexpr std::array Float16x2x2_operator_index_UInt32_args = { &Float16x2x2_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float16x2x2_operator_index_Int16_arg0;
Function Float16x2x2_operator_index_Int16;
inline constexpr std::array Float16x2x2_operator_index_Int16_args = { &Float16x2x2_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float16x2x2_operator_index_UInt16_arg0;
Function Float16x2x2_operator_index_UInt16;
inline constexpr std::array Float16x2x2_operator_index_UInt16_args = { &Float16x2x2_operator_index_UInt16_arg0 };

/// operator+ with Float16x2x2
Variable Float16x2x2_operator_add_Float16x2x2_arg0;
Function Float16x2x2_operator_add_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_add_Float16x2x2_args = { &Float16x2x2_operator_add_Float16x2x2_arg0 };

/// operator- with Float16x2x2
Variable Float16x2x2_operator_sub_Float16x2x2_arg0;
Function Float16x2x2_operator_sub_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_sub_Float16x2x2_args = { &Float16x2x2_operator_sub_Float16x2x2_arg0 };

/// operator* with Float16x2x2
Variable Float16x2x2_operator_mul_Float16x2x2_arg0;
Function Float16x2x2_operator_mul_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_mul_Float16x2x2_args = { &Float16x2x2_operator_mul_Float16x2x2_arg0 };

/// operator+= with Float16x2x2
Variable Float16x2x2_operator_addasg_Float16x2x2_arg0;
Function Float16x2x2_operator_addasg_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_addasg_Float16x2x2_args = { &Float16x2x2_operator_addasg_Float16x2x2_arg0 };

/// operator-= with Float16x2x2
Variable Float16x2x2_operator_subasg_Float16x2x2_arg0;
Function Float16x2x2_operator_subasg_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_subasg_Float16x2x2_args = { &Float16x2x2_operator_subasg_Float16x2x2_arg0 };

/// operator*= with Float16x2x2
Variable Float16x2x2_operator_mulasg_Float16x2x2_arg0;
Function Float16x2x2_operator_mulasg_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_mulasg_Float16x2x2_args = { &Float16x2x2_operator_mulasg_Float16x2x2_arg0 };

/// operator* with Float16
Variable Float16x2x2_operator_scale_Float16_arg0;
Function Float16x2x2_operator_scale_Float16;
inline constexpr std::array Float16x2x2_operator_scale_Float16_args = { &Float16x2x2_operator_scale_Float16_arg0 };

Float16x2x2::Float16x2x2()
{
    this->name = "f16";
    this->columnSize = 2;
    this->rowSize = 2;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// f16x2x2 with Float16x2, Float16x2
    Float16x2x2_Float16_2_ctor_arg0.name = "_arg0"_c;
    Float16x2x2_Float16_2_ctor_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2x2_Float16_2_ctor_arg1.name = "_arg1"_c;
    Float16x2x2_Float16_2_ctor_arg1.type = Type::FullType{ Float16x2Type.name };
    Float16x2x2_Float16_2_ctor.name = "f16x2x2"_c;
    Float16x2x2_Float16_2_ctor.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_Float16_2_ctor.parameters = Float16x2x2_Float16_2_ctor_args;
    Symbol::Resolved(&Float16x2x2_Float16_2_ctor_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2x2_Float16_2_ctor_arg1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2x2_Float16_2_ctor)->returnTypeSymbol = &Float16x2x2Type;

    /// f16x2x2
    Float16x2x2_identity.name = "f16x2x2"_c;
    Float16x2x2_identity.returnType = Type::FullType { Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_identity)->returnTypeSymbol = &Float16x2x2Type;

    /// f16x2x2 with Float16, Float16, Float16, Float16
    Float16x2x2_raw_list_arg0.name = "_arg0"_c;
    Float16x2x2_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x2x2_raw_list_arg1.name = "_arg1"_c;
    Float16x2x2_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x2x2_raw_list_arg2.name = "_arg2"_c;
    Float16x2x2_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x2x2_raw_list_arg3.name = "_arg3"_c;
    Float16x2x2_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x2x2_raw_list.name = "f16x2x2"_c;
    Float16x2x2_raw_list.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_raw_list.parameters = Float16x2x2_raw_list_args;
    Symbol::Resolved(&Float16x2x2_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x2_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x2_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x2_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x2_raw_list)->returnTypeSymbol = &Float16x2x2Type;

    /// operator[] with Int32
    Float16x2x2_operator_index_Int32_arg0.name = "idx"_c;
    Float16x2x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x2x2_operator_index_Int32.name = "operator[]"_c;
    Float16x2x2_operator_index_Int32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x2_operator_index_Int32.parameters = Float16x2x2_operator_index_Int32_args;
    Symbol::Resolved(&Float16x2x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2x2_operator_index_Int32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt32
    Float16x2x2_operator_index_UInt32_arg0.name = "idx"_c;
    Float16x2x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x2x2_operator_index_UInt32.name = "operator[]"_c;
    Float16x2x2_operator_index_UInt32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x2_operator_index_UInt32.parameters = Float16x2x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with Int16
    Float16x2x2_operator_index_Int16_arg0.name = "idx"_c;
    Float16x2x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x2x2_operator_index_Int16.name = "operator[]"_c;
    Float16x2x2_operator_index_Int16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x2_operator_index_Int16.parameters = Float16x2x2_operator_index_Int16_args;
    Symbol::Resolved(&Float16x2x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2x2_operator_index_Int16)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt16
    Float16x2x2_operator_index_UInt16_arg0.name = "idx"_c;
    Float16x2x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x2x2_operator_index_UInt16.name = "operator[]"_c;
    Float16x2x2_operator_index_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x2_operator_index_UInt16.parameters = Float16x2x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt16)->returnTypeSymbol = &Float16x2Type;

    /// operator+ with Float16x2x2
    Float16x2x2_operator_add_Float16x2x2_arg0.name = "_arg0"_c;
    Float16x2x2_operator_add_Float16x2x2_arg0.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_add_Float16x2x2.name = "operator+"_c;
    Float16x2x2_operator_add_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_add_Float16x2x2.parameters = Float16x2x2_operator_add_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_add_Float16x2x2_arg0)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_add_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator- with Float16x2x2
    Float16x2x2_operator_sub_Float16x2x2_arg0.name = "_arg0"_c;
    Float16x2x2_operator_sub_Float16x2x2_arg0.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_sub_Float16x2x2.name = "operator-"_c;
    Float16x2x2_operator_sub_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_sub_Float16x2x2.parameters = Float16x2x2_operator_sub_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_sub_Float16x2x2_arg0)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_sub_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator* with Float16x2x2
    Float16x2x2_operator_mul_Float16x2x2_arg0.name = "_arg0"_c;
    Float16x2x2_operator_mul_Float16x2x2_arg0.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_mul_Float16x2x2.name = "operator*"_c;
    Float16x2x2_operator_mul_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_mul_Float16x2x2.parameters = Float16x2x2_operator_mul_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_mul_Float16x2x2_arg0)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_mul_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator+= with Float16x2x2
    Float16x2x2_operator_addasg_Float16x2x2_arg0.name = "_arg0"_c;
    Float16x2x2_operator_addasg_Float16x2x2_arg0.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_addasg_Float16x2x2.name = "operator+="_c;
    Float16x2x2_operator_addasg_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_addasg_Float16x2x2.parameters = Float16x2x2_operator_addasg_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_addasg_Float16x2x2_arg0)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_addasg_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator-= with Float16x2x2
    Float16x2x2_operator_subasg_Float16x2x2_arg0.name = "_arg0"_c;
    Float16x2x2_operator_subasg_Float16x2x2_arg0.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_subasg_Float16x2x2.name = "operator-="_c;
    Float16x2x2_operator_subasg_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_subasg_Float16x2x2.parameters = Float16x2x2_operator_subasg_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_subasg_Float16x2x2_arg0)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_subasg_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator*= with Float16x2x2
    Float16x2x2_operator_mulasg_Float16x2x2_arg0.name = "_arg0"_c;
    Float16x2x2_operator_mulasg_Float16x2x2_arg0.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_mulasg_Float16x2x2.name = "operator*="_c;
    Float16x2x2_operator_mulasg_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_mulasg_Float16x2x2.parameters = Float16x2x2_operator_mulasg_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_mulasg_Float16x2x2_arg0)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_mulasg_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator* with Float16
    Float16x2x2_operator_scale_Float16_arg0.name = "_arg0"_c;
    Float16x2x2_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16x2x2_operator_scale_Float16.name = "operator*"_c;
    Float16x2x2_operator_scale_Float16.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_scale_Float16.parameters = Float16x2x2_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16)->returnTypeSymbol = &Float16x2x2Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 145> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator-"_c, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator+="_c, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator-="_c, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator*="_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x4_operator_add_Float32x3x4 },
    std::pair{ "operator-"_c, &Float32x3x4_operator_sub_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_mul_Float32x3x4 },
    std::pair{ "operator+="_c, &Float32x3x4_operator_addasg_Float32x3x4 },
    std::pair{ "operator-="_c, &Float32x3x4_operator_subasg_Float32x3x4 },
    std::pair{ "operator*="_c, &Float32x3x4_operator_mulasg_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x2_operator_add_Float32x4x2 },
    std::pair{ "operator-"_c, &Float32x4x2_operator_sub_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_mul_Float32x4x2 },
    std::pair{ "operator+="_c, &Float32x4x2_operator_addasg_Float32x4x2 },
    std::pair{ "operator-="_c, &Float32x4x2_operator_subasg_Float32x4x2 },
    std::pair{ "operator*="_c, &Float32x4x2_operator_mulasg_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x3_operator_add_Float32x4x3 },
    std::pair{ "operator-"_c, &Float32x4x3_operator_sub_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_mul_Float32x4x3 },
    std::pair{ "operator+="_c, &Float32x4x3_operator_addasg_Float32x4x3 },
    std::pair{ "operator-="_c, &Float32x4x3_operator_subasg_Float32x4x3 },
    std::pair{ "operator*="_c, &Float32x4x3_operator_mulasg_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x4_operator_add_Float32x4x4 },
    std::pair{ "operator-"_c, &Float32x4x4_operator_sub_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_mul_Float32x4x4 },
    std::pair{ "operator+="_c, &Float32x4x4_operator_addasg_Float32x4x4 },
    std::pair{ "operator-="_c, &Float32x4x4_operator_subasg_Float32x4x4 },
    std::pair{ "operator*="_c, &Float32x4x4_operator_mulasg_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x2_operator_add_Float16x2x2 },
    std::pair{ "operator-"_c, &Float16x2x2_operator_sub_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_mul_Float16x2x2 },
    std::pair{ "operator+="_c, &Float16x2x2_operator_addasg_Float16x2x2 },
    std::pair{ "operator-="_c, &Float16x2x2_operator_subasg_Float16x2x2 },
    std::pair{ "operator*="_c, &Float16x2x2_operator_mulasg_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_scale_Float16 }
    } };
}
Float16x2x2 Float16x2x2Type;

/// f16x2x3 with Float16x3, Float16x3
Variable Float16x2x3_Float16_3_ctor_arg0;
Variable Float16x2x3_Float16_3_ctor_arg1;
Function Float16x2x3_Float16_3_ctor;
inline constexpr std::array Float16x2x3_Float16_3_ctor_args = { &Float16x2x3_Float16_3_ctor_arg0, &Float16x2x3_Float16_3_ctor_arg1 };

/// f16x2x3
Function Float16x2x3_identity;

/// f16x2x3 with Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x2x3_raw_list_arg0;
Variable Float16x2x3_raw_list_arg1;
Variable Float16x2x3_raw_list_arg2;
Variable Float16x2x3_raw_list_arg3;
Variable Float16x2x3_raw_list_arg4;
Variable Float16x2x3_raw_list_arg5;
Function Float16x2x3_raw_list;
inline constexpr std::array Float16x2x3_raw_list_args = { &Float16x2x3_raw_list_arg0, &Float16x2x3_raw_list_arg1, &Float16x2x3_raw_list_arg2, &Float16x2x3_raw_list_arg3, &Float16x2x3_raw_list_arg4, &Float16x2x3_raw_list_arg5 };

/// operator[] with Int32
Variable Float16x2x3_operator_index_Int32_arg0;
Function Float16x2x3_operator_index_Int32;
inline constexpr std::array Float16x2x3_operator_index_Int32_args = { &Float16x2x3_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float16x2x3_operator_index_UInt32_arg0;
Function Float16x2x3_operator_index_UInt32;
inline constexpr std::array Float16x2x3_operator_index_UInt32_args = { &Float16x2x3_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float16x2x3_operator_index_Int16_arg0;
Function Float16x2x3_operator_index_Int16;
inline constexpr std::array Float16x2x3_operator_index_Int16_args = { &Float16x2x3_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float16x2x3_operator_index_UInt16_arg0;
Function Float16x2x3_operator_index_UInt16;
inline constexpr std::array Float16x2x3_operator_index_UInt16_args = { &Float16x2x3_operator_index_UInt16_arg0 };

/// operator+ with Float16x2x3
Variable Float16x2x3_operator_add_Float16x2x3_arg0;
Function Float16x2x3_operator_add_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_add_Float16x2x3_args = { &Float16x2x3_operator_add_Float16x2x3_arg0 };

/// operator- with Float16x2x3
Variable Float16x2x3_operator_sub_Float16x2x3_arg0;
Function Float16x2x3_operator_sub_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_sub_Float16x2x3_args = { &Float16x2x3_operator_sub_Float16x2x3_arg0 };

/// operator* with Float16x2x3
Variable Float16x2x3_operator_mul_Float16x2x3_arg0;
Function Float16x2x3_operator_mul_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_mul_Float16x2x3_args = { &Float16x2x3_operator_mul_Float16x2x3_arg0 };

/// operator+= with Float16x2x3
Variable Float16x2x3_operator_addasg_Float16x2x3_arg0;
Function Float16x2x3_operator_addasg_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_addasg_Float16x2x3_args = { &Float16x2x3_operator_addasg_Float16x2x3_arg0 };

/// operator-= with Float16x2x3
Variable Float16x2x3_operator_subasg_Float16x2x3_arg0;
Function Float16x2x3_operator_subasg_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_subasg_Float16x2x3_args = { &Float16x2x3_operator_subasg_Float16x2x3_arg0 };

/// operator*= with Float16x2x3
Variable Float16x2x3_operator_mulasg_Float16x2x3_arg0;
Function Float16x2x3_operator_mulasg_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_mulasg_Float16x2x3_args = { &Float16x2x3_operator_mulasg_Float16x2x3_arg0 };

/// operator* with Float16
Variable Float16x2x3_operator_scale_Float16_arg0;
Function Float16x2x3_operator_scale_Float16;
inline constexpr std::array Float16x2x3_operator_scale_Float16_args = { &Float16x2x3_operator_scale_Float16_arg0 };

Float16x2x3::Float16x2x3()
{
    this->name = "f16";
    this->columnSize = 3;
    this->rowSize = 2;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// f16x2x3 with Float16x3, Float16x3
    Float16x2x3_Float16_3_ctor_arg0.name = "_arg0"_c;
    Float16x2x3_Float16_3_ctor_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x2x3_Float16_3_ctor_arg1.name = "_arg1"_c;
    Float16x2x3_Float16_3_ctor_arg1.type = Type::FullType{ Float16x3Type.name };
    Float16x2x3_Float16_3_ctor.name = "f16x2x3"_c;
    Float16x2x3_Float16_3_ctor.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_Float16_3_ctor.parameters = Float16x2x3_Float16_3_ctor_args;
    Symbol::Resolved(&Float16x2x3_Float16_3_ctor_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x2x3_Float16_3_ctor_arg1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x2x3_Float16_3_ctor)->returnTypeSymbol = &Float16x2x3Type;

    /// f16x2x3
    Float16x2x3_identity.name = "f16x2x3"_c;
    Float16x2x3_identity.returnType = Type::FullType { Float16x2x3Type.name };
    Symbol::Resolved(&Float16x2x3_identity)->returnTypeSymbol = &Float16x2x3Type;

    /// f16x2x3 with Float16, Float16, Float16, Float16, Float16, Float16
    Float16x2x3_raw_list_arg0.name = "_arg0"_c;
    Float16x2x3_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list_arg1.name = "_arg1"_c;
    Float16x2x3_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list_arg2.name = "_arg2"_c;
    Float16x2x3_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list_arg3.name = "_arg3"_c;
    Float16x2x3_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list_arg4.name = "_arg4"_c;
    Float16x2x3_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list_arg5.name = "_arg5"_c;
    Float16x2x3_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list.name = "f16x2x3"_c;
    Float16x2x3_raw_list.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_raw_list.parameters = Float16x2x3_raw_list_args;
    Symbol::Resolved(&Float16x2x3_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list)->returnTypeSymbol = &Float16x2x3Type;

    /// operator[] with Int32
    Float16x2x3_operator_index_Int32_arg0.name = "idx"_c;
    Float16x2x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x2x3_operator_index_Int32.name = "operator[]"_c;
    Float16x2x3_operator_index_Int32.returnType = Type::FullType { Float16x3Type.name };
    Float16x2x3_operator_index_Int32.parameters = Float16x2x3_operator_index_Int32_args;
    Symbol::Resolved(&Float16x2x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2x3_operator_index_Int32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt32
    Float16x2x3_operator_index_UInt32_arg0.name = "idx"_c;
    Float16x2x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x2x3_operator_index_UInt32.name = "operator[]"_c;
    Float16x2x3_operator_index_UInt32.returnType = Type::FullType { Float16x3Type.name };
    Float16x2x3_operator_index_UInt32.parameters = Float16x2x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with Int16
    Float16x2x3_operator_index_Int16_arg0.name = "idx"_c;
    Float16x2x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x2x3_operator_index_Int16.name = "operator[]"_c;
    Float16x2x3_operator_index_Int16.returnType = Type::FullType { Float16x3Type.name };
    Float16x2x3_operator_index_Int16.parameters = Float16x2x3_operator_index_Int16_args;
    Symbol::Resolved(&Float16x2x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2x3_operator_index_Int16)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt16
    Float16x2x3_operator_index_UInt16_arg0.name = "idx"_c;
    Float16x2x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x2x3_operator_index_UInt16.name = "operator[]"_c;
    Float16x2x3_operator_index_UInt16.returnType = Type::FullType { Float16x3Type.name };
    Float16x2x3_operator_index_UInt16.parameters = Float16x2x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt16)->returnTypeSymbol = &Float16x3Type;

    /// operator+ with Float16x2x3
    Float16x2x3_operator_add_Float16x2x3_arg0.name = "_arg0"_c;
    Float16x2x3_operator_add_Float16x2x3_arg0.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_add_Float16x2x3.name = "operator+"_c;
    Float16x2x3_operator_add_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_add_Float16x2x3.parameters = Float16x2x3_operator_add_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_add_Float16x2x3_arg0)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_add_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator- with Float16x2x3
    Float16x2x3_operator_sub_Float16x2x3_arg0.name = "_arg0"_c;
    Float16x2x3_operator_sub_Float16x2x3_arg0.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_sub_Float16x2x3.name = "operator-"_c;
    Float16x2x3_operator_sub_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_sub_Float16x2x3.parameters = Float16x2x3_operator_sub_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_sub_Float16x2x3_arg0)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_sub_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator* with Float16x2x3
    Float16x2x3_operator_mul_Float16x2x3_arg0.name = "_arg0"_c;
    Float16x2x3_operator_mul_Float16x2x3_arg0.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_mul_Float16x2x3.name = "operator*"_c;
    Float16x2x3_operator_mul_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_mul_Float16x2x3.parameters = Float16x2x3_operator_mul_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_mul_Float16x2x3_arg0)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_mul_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator+= with Float16x2x3
    Float16x2x3_operator_addasg_Float16x2x3_arg0.name = "_arg0"_c;
    Float16x2x3_operator_addasg_Float16x2x3_arg0.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_addasg_Float16x2x3.name = "operator+="_c;
    Float16x2x3_operator_addasg_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_addasg_Float16x2x3.parameters = Float16x2x3_operator_addasg_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_addasg_Float16x2x3_arg0)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_addasg_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator-= with Float16x2x3
    Float16x2x3_operator_subasg_Float16x2x3_arg0.name = "_arg0"_c;
    Float16x2x3_operator_subasg_Float16x2x3_arg0.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_subasg_Float16x2x3.name = "operator-="_c;
    Float16x2x3_operator_subasg_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_subasg_Float16x2x3.parameters = Float16x2x3_operator_subasg_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_subasg_Float16x2x3_arg0)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_subasg_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator*= with Float16x2x3
    Float16x2x3_operator_mulasg_Float16x2x3_arg0.name = "_arg0"_c;
    Float16x2x3_operator_mulasg_Float16x2x3_arg0.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_mulasg_Float16x2x3.name = "operator*="_c;
    Float16x2x3_operator_mulasg_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_mulasg_Float16x2x3.parameters = Float16x2x3_operator_mulasg_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_mulasg_Float16x2x3_arg0)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_mulasg_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator* with Float16
    Float16x2x3_operator_scale_Float16_arg0.name = "_arg0"_c;
    Float16x2x3_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16x2x3_operator_scale_Float16.name = "operator*"_c;
    Float16x2x3_operator_scale_Float16.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_scale_Float16.parameters = Float16x2x3_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16)->returnTypeSymbol = &Float16x2x3Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 156> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator-"_c, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator+="_c, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator-="_c, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator*="_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x4_operator_add_Float32x3x4 },
    std::pair{ "operator-"_c, &Float32x3x4_operator_sub_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_mul_Float32x3x4 },
    std::pair{ "operator+="_c, &Float32x3x4_operator_addasg_Float32x3x4 },
    std::pair{ "operator-="_c, &Float32x3x4_operator_subasg_Float32x3x4 },
    std::pair{ "operator*="_c, &Float32x3x4_operator_mulasg_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x2_operator_add_Float32x4x2 },
    std::pair{ "operator-"_c, &Float32x4x2_operator_sub_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_mul_Float32x4x2 },
    std::pair{ "operator+="_c, &Float32x4x2_operator_addasg_Float32x4x2 },
    std::pair{ "operator-="_c, &Float32x4x2_operator_subasg_Float32x4x2 },
    std::pair{ "operator*="_c, &Float32x4x2_operator_mulasg_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x3_operator_add_Float32x4x3 },
    std::pair{ "operator-"_c, &Float32x4x3_operator_sub_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_mul_Float32x4x3 },
    std::pair{ "operator+="_c, &Float32x4x3_operator_addasg_Float32x4x3 },
    std::pair{ "operator-="_c, &Float32x4x3_operator_subasg_Float32x4x3 },
    std::pair{ "operator*="_c, &Float32x4x3_operator_mulasg_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x4_operator_add_Float32x4x4 },
    std::pair{ "operator-"_c, &Float32x4x4_operator_sub_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_mul_Float32x4x4 },
    std::pair{ "operator+="_c, &Float32x4x4_operator_addasg_Float32x4x4 },
    std::pair{ "operator-="_c, &Float32x4x4_operator_subasg_Float32x4x4 },
    std::pair{ "operator*="_c, &Float32x4x4_operator_mulasg_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x2_operator_add_Float16x2x2 },
    std::pair{ "operator-"_c, &Float16x2x2_operator_sub_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_mul_Float16x2x2 },
    std::pair{ "operator+="_c, &Float16x2x2_operator_addasg_Float16x2x2 },
    std::pair{ "operator-="_c, &Float16x2x2_operator_subasg_Float16x2x2 },
    std::pair{ "operator*="_c, &Float16x2x2_operator_mulasg_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x3_operator_add_Float16x2x3 },
    std::pair{ "operator-"_c, &Float16x2x3_operator_sub_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_mul_Float16x2x3 },
    std::pair{ "operator+="_c, &Float16x2x3_operator_addasg_Float16x2x3 },
    std::pair{ "operator-="_c, &Float16x2x3_operator_subasg_Float16x2x3 },
    std::pair{ "operator*="_c, &Float16x2x3_operator_mulasg_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_scale_Float16 }
    } };
}
Float16x2x3 Float16x2x3Type;

/// f16x2x4 with Float16x4, Float16x4
Variable Float16x2x4_Float16_4_ctor_arg0;
Variable Float16x2x4_Float16_4_ctor_arg1;
Function Float16x2x4_Float16_4_ctor;
inline constexpr std::array Float16x2x4_Float16_4_ctor_args = { &Float16x2x4_Float16_4_ctor_arg0, &Float16x2x4_Float16_4_ctor_arg1 };

/// f16x2x4
Function Float16x2x4_identity;

/// f16x2x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x2x4_raw_list_arg0;
Variable Float16x2x4_raw_list_arg1;
Variable Float16x2x4_raw_list_arg2;
Variable Float16x2x4_raw_list_arg3;
Variable Float16x2x4_raw_list_arg4;
Variable Float16x2x4_raw_list_arg5;
Variable Float16x2x4_raw_list_arg6;
Variable Float16x2x4_raw_list_arg7;
Function Float16x2x4_raw_list;
inline constexpr std::array Float16x2x4_raw_list_args = { &Float16x2x4_raw_list_arg0, &Float16x2x4_raw_list_arg1, &Float16x2x4_raw_list_arg2, &Float16x2x4_raw_list_arg3, &Float16x2x4_raw_list_arg4, &Float16x2x4_raw_list_arg5, &Float16x2x4_raw_list_arg6, &Float16x2x4_raw_list_arg7 };

/// operator[] with Int32
Variable Float16x2x4_operator_index_Int32_arg0;
Function Float16x2x4_operator_index_Int32;
inline constexpr std::array Float16x2x4_operator_index_Int32_args = { &Float16x2x4_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float16x2x4_operator_index_UInt32_arg0;
Function Float16x2x4_operator_index_UInt32;
inline constexpr std::array Float16x2x4_operator_index_UInt32_args = { &Float16x2x4_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float16x2x4_operator_index_Int16_arg0;
Function Float16x2x4_operator_index_Int16;
inline constexpr std::array Float16x2x4_operator_index_Int16_args = { &Float16x2x4_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float16x2x4_operator_index_UInt16_arg0;
Function Float16x2x4_operator_index_UInt16;
inline constexpr std::array Float16x2x4_operator_index_UInt16_args = { &Float16x2x4_operator_index_UInt16_arg0 };

/// operator+ with Float16x2x4
Variable Float16x2x4_operator_add_Float16x2x4_arg0;
Function Float16x2x4_operator_add_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_add_Float16x2x4_args = { &Float16x2x4_operator_add_Float16x2x4_arg0 };

/// operator- with Float16x2x4
Variable Float16x2x4_operator_sub_Float16x2x4_arg0;
Function Float16x2x4_operator_sub_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_sub_Float16x2x4_args = { &Float16x2x4_operator_sub_Float16x2x4_arg0 };

/// operator* with Float16x2x4
Variable Float16x2x4_operator_mul_Float16x2x4_arg0;
Function Float16x2x4_operator_mul_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_mul_Float16x2x4_args = { &Float16x2x4_operator_mul_Float16x2x4_arg0 };

/// operator+= with Float16x2x4
Variable Float16x2x4_operator_addasg_Float16x2x4_arg0;
Function Float16x2x4_operator_addasg_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_addasg_Float16x2x4_args = { &Float16x2x4_operator_addasg_Float16x2x4_arg0 };

/// operator-= with Float16x2x4
Variable Float16x2x4_operator_subasg_Float16x2x4_arg0;
Function Float16x2x4_operator_subasg_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_subasg_Float16x2x4_args = { &Float16x2x4_operator_subasg_Float16x2x4_arg0 };

/// operator*= with Float16x2x4
Variable Float16x2x4_operator_mulasg_Float16x2x4_arg0;
Function Float16x2x4_operator_mulasg_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_mulasg_Float16x2x4_args = { &Float16x2x4_operator_mulasg_Float16x2x4_arg0 };

/// operator* with Float16
Variable Float16x2x4_operator_scale_Float16_arg0;
Function Float16x2x4_operator_scale_Float16;
inline constexpr std::array Float16x2x4_operator_scale_Float16_args = { &Float16x2x4_operator_scale_Float16_arg0 };

Float16x2x4::Float16x2x4()
{
    this->name = "f16";
    this->columnSize = 4;
    this->rowSize = 2;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// f16x2x4 with Float16x4, Float16x4
    Float16x2x4_Float16_4_ctor_arg0.name = "_arg0"_c;
    Float16x2x4_Float16_4_ctor_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x2x4_Float16_4_ctor_arg1.name = "_arg1"_c;
    Float16x2x4_Float16_4_ctor_arg1.type = Type::FullType{ Float16x4Type.name };
    Float16x2x4_Float16_4_ctor.name = "f16x2x4"_c;
    Float16x2x4_Float16_4_ctor.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_Float16_4_ctor.parameters = Float16x2x4_Float16_4_ctor_args;
    Symbol::Resolved(&Float16x2x4_Float16_4_ctor_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x2x4_Float16_4_ctor_arg1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x2x4_Float16_4_ctor)->returnTypeSymbol = &Float16x2x4Type;

    /// f16x2x4
    Float16x2x4_identity.name = "f16x2x4"_c;
    Float16x2x4_identity.returnType = Type::FullType { Float16x2x4Type.name };
    Symbol::Resolved(&Float16x2x4_identity)->returnTypeSymbol = &Float16x2x4Type;

    /// f16x2x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x2x4_raw_list_arg0.name = "_arg0"_c;
    Float16x2x4_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg1.name = "_arg1"_c;
    Float16x2x4_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg2.name = "_arg2"_c;
    Float16x2x4_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg3.name = "_arg3"_c;
    Float16x2x4_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg4.name = "_arg4"_c;
    Float16x2x4_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg5.name = "_arg5"_c;
    Float16x2x4_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg6.name = "_arg6"_c;
    Float16x2x4_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg7.name = "_arg7"_c;
    Float16x2x4_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list.name = "f16x2x4"_c;
    Float16x2x4_raw_list.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_raw_list.parameters = Float16x2x4_raw_list_args;
    Symbol::Resolved(&Float16x2x4_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list)->returnTypeSymbol = &Float16x2x4Type;

    /// operator[] with Int32
    Float16x2x4_operator_index_Int32_arg0.name = "idx"_c;
    Float16x2x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x2x4_operator_index_Int32.name = "operator[]"_c;
    Float16x2x4_operator_index_Int32.returnType = Type::FullType { Float16x4Type.name };
    Float16x2x4_operator_index_Int32.parameters = Float16x2x4_operator_index_Int32_args;
    Symbol::Resolved(&Float16x2x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2x4_operator_index_Int32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt32
    Float16x2x4_operator_index_UInt32_arg0.name = "idx"_c;
    Float16x2x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x2x4_operator_index_UInt32.name = "operator[]"_c;
    Float16x2x4_operator_index_UInt32.returnType = Type::FullType { Float16x4Type.name };
    Float16x2x4_operator_index_UInt32.parameters = Float16x2x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with Int16
    Float16x2x4_operator_index_Int16_arg0.name = "idx"_c;
    Float16x2x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x2x4_operator_index_Int16.name = "operator[]"_c;
    Float16x2x4_operator_index_Int16.returnType = Type::FullType { Float16x4Type.name };
    Float16x2x4_operator_index_Int16.parameters = Float16x2x4_operator_index_Int16_args;
    Symbol::Resolved(&Float16x2x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2x4_operator_index_Int16)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt16
    Float16x2x4_operator_index_UInt16_arg0.name = "idx"_c;
    Float16x2x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x2x4_operator_index_UInt16.name = "operator[]"_c;
    Float16x2x4_operator_index_UInt16.returnType = Type::FullType { Float16x4Type.name };
    Float16x2x4_operator_index_UInt16.parameters = Float16x2x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt16)->returnTypeSymbol = &Float16x4Type;

    /// operator+ with Float16x2x4
    Float16x2x4_operator_add_Float16x2x4_arg0.name = "_arg0"_c;
    Float16x2x4_operator_add_Float16x2x4_arg0.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_add_Float16x2x4.name = "operator+"_c;
    Float16x2x4_operator_add_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_add_Float16x2x4.parameters = Float16x2x4_operator_add_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_add_Float16x2x4_arg0)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_add_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator- with Float16x2x4
    Float16x2x4_operator_sub_Float16x2x4_arg0.name = "_arg0"_c;
    Float16x2x4_operator_sub_Float16x2x4_arg0.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_sub_Float16x2x4.name = "operator-"_c;
    Float16x2x4_operator_sub_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_sub_Float16x2x4.parameters = Float16x2x4_operator_sub_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_sub_Float16x2x4_arg0)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_sub_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator* with Float16x2x4
    Float16x2x4_operator_mul_Float16x2x4_arg0.name = "_arg0"_c;
    Float16x2x4_operator_mul_Float16x2x4_arg0.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_mul_Float16x2x4.name = "operator*"_c;
    Float16x2x4_operator_mul_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_mul_Float16x2x4.parameters = Float16x2x4_operator_mul_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_mul_Float16x2x4_arg0)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_mul_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator+= with Float16x2x4
    Float16x2x4_operator_addasg_Float16x2x4_arg0.name = "_arg0"_c;
    Float16x2x4_operator_addasg_Float16x2x4_arg0.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_addasg_Float16x2x4.name = "operator+="_c;
    Float16x2x4_operator_addasg_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_addasg_Float16x2x4.parameters = Float16x2x4_operator_addasg_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_addasg_Float16x2x4_arg0)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_addasg_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator-= with Float16x2x4
    Float16x2x4_operator_subasg_Float16x2x4_arg0.name = "_arg0"_c;
    Float16x2x4_operator_subasg_Float16x2x4_arg0.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_subasg_Float16x2x4.name = "operator-="_c;
    Float16x2x4_operator_subasg_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_subasg_Float16x2x4.parameters = Float16x2x4_operator_subasg_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_subasg_Float16x2x4_arg0)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_subasg_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator*= with Float16x2x4
    Float16x2x4_operator_mulasg_Float16x2x4_arg0.name = "_arg0"_c;
    Float16x2x4_operator_mulasg_Float16x2x4_arg0.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_mulasg_Float16x2x4.name = "operator*="_c;
    Float16x2x4_operator_mulasg_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_mulasg_Float16x2x4.parameters = Float16x2x4_operator_mulasg_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_mulasg_Float16x2x4_arg0)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_mulasg_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator* with Float16
    Float16x2x4_operator_scale_Float16_arg0.name = "_arg0"_c;
    Float16x2x4_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16x2x4_operator_scale_Float16.name = "operator*"_c;
    Float16x2x4_operator_scale_Float16.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_scale_Float16.parameters = Float16x2x4_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16)->returnTypeSymbol = &Float16x2x4Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 167> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator-"_c, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator+="_c, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator-="_c, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator*="_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x4_operator_add_Float32x3x4 },
    std::pair{ "operator-"_c, &Float32x3x4_operator_sub_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_mul_Float32x3x4 },
    std::pair{ "operator+="_c, &Float32x3x4_operator_addasg_Float32x3x4 },
    std::pair{ "operator-="_c, &Float32x3x4_operator_subasg_Float32x3x4 },
    std::pair{ "operator*="_c, &Float32x3x4_operator_mulasg_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x2_operator_add_Float32x4x2 },
    std::pair{ "operator-"_c, &Float32x4x2_operator_sub_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_mul_Float32x4x2 },
    std::pair{ "operator+="_c, &Float32x4x2_operator_addasg_Float32x4x2 },
    std::pair{ "operator-="_c, &Float32x4x2_operator_subasg_Float32x4x2 },
    std::pair{ "operator*="_c, &Float32x4x2_operator_mulasg_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x3_operator_add_Float32x4x3 },
    std::pair{ "operator-"_c, &Float32x4x3_operator_sub_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_mul_Float32x4x3 },
    std::pair{ "operator+="_c, &Float32x4x3_operator_addasg_Float32x4x3 },
    std::pair{ "operator-="_c, &Float32x4x3_operator_subasg_Float32x4x3 },
    std::pair{ "operator*="_c, &Float32x4x3_operator_mulasg_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x4_operator_add_Float32x4x4 },
    std::pair{ "operator-"_c, &Float32x4x4_operator_sub_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_mul_Float32x4x4 },
    std::pair{ "operator+="_c, &Float32x4x4_operator_addasg_Float32x4x4 },
    std::pair{ "operator-="_c, &Float32x4x4_operator_subasg_Float32x4x4 },
    std::pair{ "operator*="_c, &Float32x4x4_operator_mulasg_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x2_operator_add_Float16x2x2 },
    std::pair{ "operator-"_c, &Float16x2x2_operator_sub_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_mul_Float16x2x2 },
    std::pair{ "operator+="_c, &Float16x2x2_operator_addasg_Float16x2x2 },
    std::pair{ "operator-="_c, &Float16x2x2_operator_subasg_Float16x2x2 },
    std::pair{ "operator*="_c, &Float16x2x2_operator_mulasg_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x3_operator_add_Float16x2x3 },
    std::pair{ "operator-"_c, &Float16x2x3_operator_sub_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_mul_Float16x2x3 },
    std::pair{ "operator+="_c, &Float16x2x3_operator_addasg_Float16x2x3 },
    std::pair{ "operator-="_c, &Float16x2x3_operator_subasg_Float16x2x3 },
    std::pair{ "operator*="_c, &Float16x2x3_operator_mulasg_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x4_operator_add_Float16x2x4 },
    std::pair{ "operator-"_c, &Float16x2x4_operator_sub_Float16x2x4 },
    std::pair{ "operator*"_c, &Float16x2x4_operator_mul_Float16x2x4 },
    std::pair{ "operator+="_c, &Float16x2x4_operator_addasg_Float16x2x4 },
    std::pair{ "operator-="_c, &Float16x2x4_operator_subasg_Float16x2x4 },
    std::pair{ "operator*="_c, &Float16x2x4_operator_mulasg_Float16x2x4 },
    std::pair{ "operator*"_c, &Float16x2x4_operator_scale_Float16 }
    } };
}
Float16x2x4 Float16x2x4Type;

/// f16x3x2 with Float16x2, Float16x2, Float16x2
Variable Float16x3x2_Float16_2_ctor_arg0;
Variable Float16x3x2_Float16_2_ctor_arg1;
Variable Float16x3x2_Float16_2_ctor_arg2;
Function Float16x3x2_Float16_2_ctor;
inline constexpr std::array Float16x3x2_Float16_2_ctor_args = { &Float16x3x2_Float16_2_ctor_arg0, &Float16x3x2_Float16_2_ctor_arg1, &Float16x3x2_Float16_2_ctor_arg2 };

/// f16x3x2
Function Float16x3x2_identity;

/// f16x3x2 with Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x3x2_raw_list_arg0;
Variable Float16x3x2_raw_list_arg1;
Variable Float16x3x2_raw_list_arg2;
Variable Float16x3x2_raw_list_arg3;
Variable Float16x3x2_raw_list_arg4;
Variable Float16x3x2_raw_list_arg5;
Function Float16x3x2_raw_list;
inline constexpr std::array Float16x3x2_raw_list_args = { &Float16x3x2_raw_list_arg0, &Float16x3x2_raw_list_arg1, &Float16x3x2_raw_list_arg2, &Float16x3x2_raw_list_arg3, &Float16x3x2_raw_list_arg4, &Float16x3x2_raw_list_arg5 };

/// operator[] with Int32
Variable Float16x3x2_operator_index_Int32_arg0;
Function Float16x3x2_operator_index_Int32;
inline constexpr std::array Float16x3x2_operator_index_Int32_args = { &Float16x3x2_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float16x3x2_operator_index_UInt32_arg0;
Function Float16x3x2_operator_index_UInt32;
inline constexpr std::array Float16x3x2_operator_index_UInt32_args = { &Float16x3x2_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float16x3x2_operator_index_Int16_arg0;
Function Float16x3x2_operator_index_Int16;
inline constexpr std::array Float16x3x2_operator_index_Int16_args = { &Float16x3x2_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float16x3x2_operator_index_UInt16_arg0;
Function Float16x3x2_operator_index_UInt16;
inline constexpr std::array Float16x3x2_operator_index_UInt16_args = { &Float16x3x2_operator_index_UInt16_arg0 };

/// operator+ with Float16x3x2
Variable Float16x3x2_operator_add_Float16x3x2_arg0;
Function Float16x3x2_operator_add_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_add_Float16x3x2_args = { &Float16x3x2_operator_add_Float16x3x2_arg0 };

/// operator- with Float16x3x2
Variable Float16x3x2_operator_sub_Float16x3x2_arg0;
Function Float16x3x2_operator_sub_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_sub_Float16x3x2_args = { &Float16x3x2_operator_sub_Float16x3x2_arg0 };

/// operator* with Float16x3x2
Variable Float16x3x2_operator_mul_Float16x3x2_arg0;
Function Float16x3x2_operator_mul_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_mul_Float16x3x2_args = { &Float16x3x2_operator_mul_Float16x3x2_arg0 };

/// operator+= with Float16x3x2
Variable Float16x3x2_operator_addasg_Float16x3x2_arg0;
Function Float16x3x2_operator_addasg_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_addasg_Float16x3x2_args = { &Float16x3x2_operator_addasg_Float16x3x2_arg0 };

/// operator-= with Float16x3x2
Variable Float16x3x2_operator_subasg_Float16x3x2_arg0;
Function Float16x3x2_operator_subasg_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_subasg_Float16x3x2_args = { &Float16x3x2_operator_subasg_Float16x3x2_arg0 };

/// operator*= with Float16x3x2
Variable Float16x3x2_operator_mulasg_Float16x3x2_arg0;
Function Float16x3x2_operator_mulasg_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_mulasg_Float16x3x2_args = { &Float16x3x2_operator_mulasg_Float16x3x2_arg0 };

/// operator* with Float16
Variable Float16x3x2_operator_scale_Float16_arg0;
Function Float16x3x2_operator_scale_Float16;
inline constexpr std::array Float16x3x2_operator_scale_Float16_args = { &Float16x3x2_operator_scale_Float16_arg0 };

Float16x3x2::Float16x3x2()
{
    this->name = "f16";
    this->columnSize = 2;
    this->rowSize = 3;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// f16x3x2 with Float16x2, Float16x2, Float16x2
    Float16x3x2_Float16_2_ctor_arg0.name = "_arg0"_c;
    Float16x3x2_Float16_2_ctor_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x3x2_Float16_2_ctor_arg1.name = "_arg1"_c;
    Float16x3x2_Float16_2_ctor_arg1.type = Type::FullType{ Float16x2Type.name };
    Float16x3x2_Float16_2_ctor_arg2.name = "_arg2"_c;
    Float16x3x2_Float16_2_ctor_arg2.type = Type::FullType{ Float16x2Type.name };
    Float16x3x2_Float16_2_ctor.name = "f16x3x2"_c;
    Float16x3x2_Float16_2_ctor.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_Float16_2_ctor.parameters = Float16x3x2_Float16_2_ctor_args;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor_arg1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor_arg2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor)->returnTypeSymbol = &Float16x3x2Type;

    /// f16x3x2
    Float16x3x2_identity.name = "f16x3x2"_c;
    Float16x3x2_identity.returnType = Type::FullType { Float16x3x2Type.name };
    Symbol::Resolved(&Float16x3x2_identity)->returnTypeSymbol = &Float16x3x2Type;

    /// f16x3x2 with Float16, Float16, Float16, Float16, Float16, Float16
    Float16x3x2_raw_list_arg0.name = "_arg0"_c;
    Float16x3x2_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list_arg1.name = "_arg1"_c;
    Float16x3x2_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list_arg2.name = "_arg2"_c;
    Float16x3x2_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list_arg3.name = "_arg3"_c;
    Float16x3x2_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list_arg4.name = "_arg4"_c;
    Float16x3x2_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list_arg5.name = "_arg5"_c;
    Float16x3x2_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list.name = "f16x3x2"_c;
    Float16x3x2_raw_list.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_raw_list.parameters = Float16x3x2_raw_list_args;
    Symbol::Resolved(&Float16x3x2_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list)->returnTypeSymbol = &Float16x3x2Type;

    /// operator[] with Int32
    Float16x3x2_operator_index_Int32_arg0.name = "idx"_c;
    Float16x3x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x3x2_operator_index_Int32.name = "operator[]"_c;
    Float16x3x2_operator_index_Int32.returnType = Type::FullType { Float16x2Type.name };
    Float16x3x2_operator_index_Int32.parameters = Float16x3x2_operator_index_Int32_args;
    Symbol::Resolved(&Float16x3x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x3x2_operator_index_Int32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt32
    Float16x3x2_operator_index_UInt32_arg0.name = "idx"_c;
    Float16x3x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x3x2_operator_index_UInt32.name = "operator[]"_c;
    Float16x3x2_operator_index_UInt32.returnType = Type::FullType { Float16x2Type.name };
    Float16x3x2_operator_index_UInt32.parameters = Float16x3x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with Int16
    Float16x3x2_operator_index_Int16_arg0.name = "idx"_c;
    Float16x3x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x3x2_operator_index_Int16.name = "operator[]"_c;
    Float16x3x2_operator_index_Int16.returnType = Type::FullType { Float16x2Type.name };
    Float16x3x2_operator_index_Int16.parameters = Float16x3x2_operator_index_Int16_args;
    Symbol::Resolved(&Float16x3x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3x2_operator_index_Int16)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt16
    Float16x3x2_operator_index_UInt16_arg0.name = "idx"_c;
    Float16x3x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x3x2_operator_index_UInt16.name = "operator[]"_c;
    Float16x3x2_operator_index_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Float16x3x2_operator_index_UInt16.parameters = Float16x3x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt16)->returnTypeSymbol = &Float16x2Type;

    /// operator+ with Float16x3x2
    Float16x3x2_operator_add_Float16x3x2_arg0.name = "_arg0"_c;
    Float16x3x2_operator_add_Float16x3x2_arg0.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_add_Float16x3x2.name = "operator+"_c;
    Float16x3x2_operator_add_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_add_Float16x3x2.parameters = Float16x3x2_operator_add_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_add_Float16x3x2_arg0)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_add_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator- with Float16x3x2
    Float16x3x2_operator_sub_Float16x3x2_arg0.name = "_arg0"_c;
    Float16x3x2_operator_sub_Float16x3x2_arg0.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_sub_Float16x3x2.name = "operator-"_c;
    Float16x3x2_operator_sub_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_sub_Float16x3x2.parameters = Float16x3x2_operator_sub_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_sub_Float16x3x2_arg0)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_sub_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator* with Float16x3x2
    Float16x3x2_operator_mul_Float16x3x2_arg0.name = "_arg0"_c;
    Float16x3x2_operator_mul_Float16x3x2_arg0.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_mul_Float16x3x2.name = "operator*"_c;
    Float16x3x2_operator_mul_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_mul_Float16x3x2.parameters = Float16x3x2_operator_mul_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_mul_Float16x3x2_arg0)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_mul_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator+= with Float16x3x2
    Float16x3x2_operator_addasg_Float16x3x2_arg0.name = "_arg0"_c;
    Float16x3x2_operator_addasg_Float16x3x2_arg0.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_addasg_Float16x3x2.name = "operator+="_c;
    Float16x3x2_operator_addasg_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_addasg_Float16x3x2.parameters = Float16x3x2_operator_addasg_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_addasg_Float16x3x2_arg0)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_addasg_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator-= with Float16x3x2
    Float16x3x2_operator_subasg_Float16x3x2_arg0.name = "_arg0"_c;
    Float16x3x2_operator_subasg_Float16x3x2_arg0.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_subasg_Float16x3x2.name = "operator-="_c;
    Float16x3x2_operator_subasg_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_subasg_Float16x3x2.parameters = Float16x3x2_operator_subasg_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_subasg_Float16x3x2_arg0)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_subasg_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator*= with Float16x3x2
    Float16x3x2_operator_mulasg_Float16x3x2_arg0.name = "_arg0"_c;
    Float16x3x2_operator_mulasg_Float16x3x2_arg0.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_mulasg_Float16x3x2.name = "operator*="_c;
    Float16x3x2_operator_mulasg_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_mulasg_Float16x3x2.parameters = Float16x3x2_operator_mulasg_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_mulasg_Float16x3x2_arg0)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_mulasg_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator* with Float16
    Float16x3x2_operator_scale_Float16_arg0.name = "_arg0"_c;
    Float16x3x2_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16x3x2_operator_scale_Float16.name = "operator*"_c;
    Float16x3x2_operator_scale_Float16.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_scale_Float16.parameters = Float16x3x2_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16)->returnTypeSymbol = &Float16x3x2Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 178> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator-"_c, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator+="_c, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator-="_c, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator*="_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x4_operator_add_Float32x3x4 },
    std::pair{ "operator-"_c, &Float32x3x4_operator_sub_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_mul_Float32x3x4 },
    std::pair{ "operator+="_c, &Float32x3x4_operator_addasg_Float32x3x4 },
    std::pair{ "operator-="_c, &Float32x3x4_operator_subasg_Float32x3x4 },
    std::pair{ "operator*="_c, &Float32x3x4_operator_mulasg_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x2_operator_add_Float32x4x2 },
    std::pair{ "operator-"_c, &Float32x4x2_operator_sub_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_mul_Float32x4x2 },
    std::pair{ "operator+="_c, &Float32x4x2_operator_addasg_Float32x4x2 },
    std::pair{ "operator-="_c, &Float32x4x2_operator_subasg_Float32x4x2 },
    std::pair{ "operator*="_c, &Float32x4x2_operator_mulasg_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x3_operator_add_Float32x4x3 },
    std::pair{ "operator-"_c, &Float32x4x3_operator_sub_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_mul_Float32x4x3 },
    std::pair{ "operator+="_c, &Float32x4x3_operator_addasg_Float32x4x3 },
    std::pair{ "operator-="_c, &Float32x4x3_operator_subasg_Float32x4x3 },
    std::pair{ "operator*="_c, &Float32x4x3_operator_mulasg_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x4_operator_add_Float32x4x4 },
    std::pair{ "operator-"_c, &Float32x4x4_operator_sub_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_mul_Float32x4x4 },
    std::pair{ "operator+="_c, &Float32x4x4_operator_addasg_Float32x4x4 },
    std::pair{ "operator-="_c, &Float32x4x4_operator_subasg_Float32x4x4 },
    std::pair{ "operator*="_c, &Float32x4x4_operator_mulasg_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x2_operator_add_Float16x2x2 },
    std::pair{ "operator-"_c, &Float16x2x2_operator_sub_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_mul_Float16x2x2 },
    std::pair{ "operator+="_c, &Float16x2x2_operator_addasg_Float16x2x2 },
    std::pair{ "operator-="_c, &Float16x2x2_operator_subasg_Float16x2x2 },
    std::pair{ "operator*="_c, &Float16x2x2_operator_mulasg_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x3_operator_add_Float16x2x3 },
    std::pair{ "operator-"_c, &Float16x2x3_operator_sub_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_mul_Float16x2x3 },
    std::pair{ "operator+="_c, &Float16x2x3_operator_addasg_Float16x2x3 },
    std::pair{ "operator-="_c, &Float16x2x3_operator_subasg_Float16x2x3 },
    std::pair{ "operator*="_c, &Float16x2x3_operator_mulasg_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x4_operator_add_Float16x2x4 },
    std::pair{ "operator-"_c, &Float16x2x4_operator_sub_Float16x2x4 },
    std::pair{ "operator*"_c, &Float16x2x4_operator_mul_Float16x2x4 },
    std::pair{ "operator+="_c, &Float16x2x4_operator_addasg_Float16x2x4 },
    std::pair{ "operator-="_c, &Float16x2x4_operator_subasg_Float16x2x4 },
    std::pair{ "operator*="_c, &Float16x2x4_operator_mulasg_Float16x2x4 },
    std::pair{ "operator*"_c, &Float16x2x4_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3x2_operator_add_Float16x3x2 },
    std::pair{ "operator-"_c, &Float16x3x2_operator_sub_Float16x3x2 },
    std::pair{ "operator*"_c, &Float16x3x2_operator_mul_Float16x3x2 },
    std::pair{ "operator+="_c, &Float16x3x2_operator_addasg_Float16x3x2 },
    std::pair{ "operator-="_c, &Float16x3x2_operator_subasg_Float16x3x2 },
    std::pair{ "operator*="_c, &Float16x3x2_operator_mulasg_Float16x3x2 },
    std::pair{ "operator*"_c, &Float16x3x2_operator_scale_Float16 }
    } };
}
Float16x3x2 Float16x3x2Type;

/// f16x3x3 with Float16x3, Float16x3, Float16x3
Variable Float16x3x3_Float16_3_ctor_arg0;
Variable Float16x3x3_Float16_3_ctor_arg1;
Variable Float16x3x3_Float16_3_ctor_arg2;
Function Float16x3x3_Float16_3_ctor;
inline constexpr std::array Float16x3x3_Float16_3_ctor_args = { &Float16x3x3_Float16_3_ctor_arg0, &Float16x3x3_Float16_3_ctor_arg1, &Float16x3x3_Float16_3_ctor_arg2 };

/// f16x3x3
Function Float16x3x3_identity;

/// f16x3x3 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x3x3_raw_list_arg0;
Variable Float16x3x3_raw_list_arg1;
Variable Float16x3x3_raw_list_arg2;
Variable Float16x3x3_raw_list_arg3;
Variable Float16x3x3_raw_list_arg4;
Variable Float16x3x3_raw_list_arg5;
Variable Float16x3x3_raw_list_arg6;
Variable Float16x3x3_raw_list_arg7;
Variable Float16x3x3_raw_list_arg8;
Function Float16x3x3_raw_list;
inline constexpr std::array Float16x3x3_raw_list_args = { &Float16x3x3_raw_list_arg0, &Float16x3x3_raw_list_arg1, &Float16x3x3_raw_list_arg2, &Float16x3x3_raw_list_arg3, &Float16x3x3_raw_list_arg4, &Float16x3x3_raw_list_arg5, &Float16x3x3_raw_list_arg6, &Float16x3x3_raw_list_arg7, &Float16x3x3_raw_list_arg8 };

/// operator[] with Int32
Variable Float16x3x3_operator_index_Int32_arg0;
Function Float16x3x3_operator_index_Int32;
inline constexpr std::array Float16x3x3_operator_index_Int32_args = { &Float16x3x3_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float16x3x3_operator_index_UInt32_arg0;
Function Float16x3x3_operator_index_UInt32;
inline constexpr std::array Float16x3x3_operator_index_UInt32_args = { &Float16x3x3_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float16x3x3_operator_index_Int16_arg0;
Function Float16x3x3_operator_index_Int16;
inline constexpr std::array Float16x3x3_operator_index_Int16_args = { &Float16x3x3_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float16x3x3_operator_index_UInt16_arg0;
Function Float16x3x3_operator_index_UInt16;
inline constexpr std::array Float16x3x3_operator_index_UInt16_args = { &Float16x3x3_operator_index_UInt16_arg0 };

/// operator+ with Float16x3x3
Variable Float16x3x3_operator_add_Float16x3x3_arg0;
Function Float16x3x3_operator_add_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_add_Float16x3x3_args = { &Float16x3x3_operator_add_Float16x3x3_arg0 };

/// operator- with Float16x3x3
Variable Float16x3x3_operator_sub_Float16x3x3_arg0;
Function Float16x3x3_operator_sub_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_sub_Float16x3x3_args = { &Float16x3x3_operator_sub_Float16x3x3_arg0 };

/// operator* with Float16x3x3
Variable Float16x3x3_operator_mul_Float16x3x3_arg0;
Function Float16x3x3_operator_mul_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_mul_Float16x3x3_args = { &Float16x3x3_operator_mul_Float16x3x3_arg0 };

/// operator+= with Float16x3x3
Variable Float16x3x3_operator_addasg_Float16x3x3_arg0;
Function Float16x3x3_operator_addasg_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_addasg_Float16x3x3_args = { &Float16x3x3_operator_addasg_Float16x3x3_arg0 };

/// operator-= with Float16x3x3
Variable Float16x3x3_operator_subasg_Float16x3x3_arg0;
Function Float16x3x3_operator_subasg_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_subasg_Float16x3x3_args = { &Float16x3x3_operator_subasg_Float16x3x3_arg0 };

/// operator*= with Float16x3x3
Variable Float16x3x3_operator_mulasg_Float16x3x3_arg0;
Function Float16x3x3_operator_mulasg_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_mulasg_Float16x3x3_args = { &Float16x3x3_operator_mulasg_Float16x3x3_arg0 };

/// operator* with Float16
Variable Float16x3x3_operator_scale_Float16_arg0;
Function Float16x3x3_operator_scale_Float16;
inline constexpr std::array Float16x3x3_operator_scale_Float16_args = { &Float16x3x3_operator_scale_Float16_arg0 };

Float16x3x3::Float16x3x3()
{
    this->name = "f16";
    this->columnSize = 3;
    this->rowSize = 3;
    this->byteSize = 18;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// f16x3x3 with Float16x3, Float16x3, Float16x3
    Float16x3x3_Float16_3_ctor_arg0.name = "_arg0"_c;
    Float16x3x3_Float16_3_ctor_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3x3_Float16_3_ctor_arg1.name = "_arg1"_c;
    Float16x3x3_Float16_3_ctor_arg1.type = Type::FullType{ Float16x3Type.name };
    Float16x3x3_Float16_3_ctor_arg2.name = "_arg2"_c;
    Float16x3x3_Float16_3_ctor_arg2.type = Type::FullType{ Float16x3Type.name };
    Float16x3x3_Float16_3_ctor.name = "f16x3x3"_c;
    Float16x3x3_Float16_3_ctor.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_Float16_3_ctor.parameters = Float16x3x3_Float16_3_ctor_args;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor_arg1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor_arg2)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor)->returnTypeSymbol = &Float16x3x3Type;

    /// f16x3x3
    Float16x3x3_identity.name = "f16x3x3"_c;
    Float16x3x3_identity.returnType = Type::FullType { Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_identity)->returnTypeSymbol = &Float16x3x3Type;

    /// f16x3x3 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x3x3_raw_list_arg0.name = "_arg0"_c;
    Float16x3x3_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg1.name = "_arg1"_c;
    Float16x3x3_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg2.name = "_arg2"_c;
    Float16x3x3_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg3.name = "_arg3"_c;
    Float16x3x3_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg4.name = "_arg4"_c;
    Float16x3x3_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg5.name = "_arg5"_c;
    Float16x3x3_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg6.name = "_arg6"_c;
    Float16x3x3_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg7.name = "_arg7"_c;
    Float16x3x3_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg8.name = "_arg8"_c;
    Float16x3x3_raw_list_arg8.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list.name = "f16x3x3"_c;
    Float16x3x3_raw_list.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_raw_list.parameters = Float16x3x3_raw_list_args;
    Symbol::Resolved(&Float16x3x3_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg8)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list)->returnTypeSymbol = &Float16x3x3Type;

    /// operator[] with Int32
    Float16x3x3_operator_index_Int32_arg0.name = "idx"_c;
    Float16x3x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x3x3_operator_index_Int32.name = "operator[]"_c;
    Float16x3x3_operator_index_Int32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x3_operator_index_Int32.parameters = Float16x3x3_operator_index_Int32_args;
    Symbol::Resolved(&Float16x3x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x3x3_operator_index_Int32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt32
    Float16x3x3_operator_index_UInt32_arg0.name = "idx"_c;
    Float16x3x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x3x3_operator_index_UInt32.name = "operator[]"_c;
    Float16x3x3_operator_index_UInt32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x3_operator_index_UInt32.parameters = Float16x3x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with Int16
    Float16x3x3_operator_index_Int16_arg0.name = "idx"_c;
    Float16x3x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x3x3_operator_index_Int16.name = "operator[]"_c;
    Float16x3x3_operator_index_Int16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x3_operator_index_Int16.parameters = Float16x3x3_operator_index_Int16_args;
    Symbol::Resolved(&Float16x3x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3x3_operator_index_Int16)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt16
    Float16x3x3_operator_index_UInt16_arg0.name = "idx"_c;
    Float16x3x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x3x3_operator_index_UInt16.name = "operator[]"_c;
    Float16x3x3_operator_index_UInt16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x3_operator_index_UInt16.parameters = Float16x3x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt16)->returnTypeSymbol = &Float16x3Type;

    /// operator+ with Float16x3x3
    Float16x3x3_operator_add_Float16x3x3_arg0.name = "_arg0"_c;
    Float16x3x3_operator_add_Float16x3x3_arg0.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_add_Float16x3x3.name = "operator+"_c;
    Float16x3x3_operator_add_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_add_Float16x3x3.parameters = Float16x3x3_operator_add_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_add_Float16x3x3_arg0)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_add_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator- with Float16x3x3
    Float16x3x3_operator_sub_Float16x3x3_arg0.name = "_arg0"_c;
    Float16x3x3_operator_sub_Float16x3x3_arg0.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_sub_Float16x3x3.name = "operator-"_c;
    Float16x3x3_operator_sub_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_sub_Float16x3x3.parameters = Float16x3x3_operator_sub_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_sub_Float16x3x3_arg0)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_sub_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator* with Float16x3x3
    Float16x3x3_operator_mul_Float16x3x3_arg0.name = "_arg0"_c;
    Float16x3x3_operator_mul_Float16x3x3_arg0.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_mul_Float16x3x3.name = "operator*"_c;
    Float16x3x3_operator_mul_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_mul_Float16x3x3.parameters = Float16x3x3_operator_mul_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_mul_Float16x3x3_arg0)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_mul_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator+= with Float16x3x3
    Float16x3x3_operator_addasg_Float16x3x3_arg0.name = "_arg0"_c;
    Float16x3x3_operator_addasg_Float16x3x3_arg0.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_addasg_Float16x3x3.name = "operator+="_c;
    Float16x3x3_operator_addasg_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_addasg_Float16x3x3.parameters = Float16x3x3_operator_addasg_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_addasg_Float16x3x3_arg0)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_addasg_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator-= with Float16x3x3
    Float16x3x3_operator_subasg_Float16x3x3_arg0.name = "_arg0"_c;
    Float16x3x3_operator_subasg_Float16x3x3_arg0.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_subasg_Float16x3x3.name = "operator-="_c;
    Float16x3x3_operator_subasg_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_subasg_Float16x3x3.parameters = Float16x3x3_operator_subasg_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_subasg_Float16x3x3_arg0)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_subasg_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator*= with Float16x3x3
    Float16x3x3_operator_mulasg_Float16x3x3_arg0.name = "_arg0"_c;
    Float16x3x3_operator_mulasg_Float16x3x3_arg0.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_mulasg_Float16x3x3.name = "operator*="_c;
    Float16x3x3_operator_mulasg_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_mulasg_Float16x3x3.parameters = Float16x3x3_operator_mulasg_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_mulasg_Float16x3x3_arg0)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_mulasg_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator* with Float16
    Float16x3x3_operator_scale_Float16_arg0.name = "_arg0"_c;
    Float16x3x3_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16x3x3_operator_scale_Float16.name = "operator*"_c;
    Float16x3x3_operator_scale_Float16.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_scale_Float16.parameters = Float16x3x3_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16)->returnTypeSymbol = &Float16x3x3Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 189> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator-"_c, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator+="_c, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator-="_c, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator*="_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x4_operator_add_Float32x3x4 },
    std::pair{ "operator-"_c, &Float32x3x4_operator_sub_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_mul_Float32x3x4 },
    std::pair{ "operator+="_c, &Float32x3x4_operator_addasg_Float32x3x4 },
    std::pair{ "operator-="_c, &Float32x3x4_operator_subasg_Float32x3x4 },
    std::pair{ "operator*="_c, &Float32x3x4_operator_mulasg_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x2_operator_add_Float32x4x2 },
    std::pair{ "operator-"_c, &Float32x4x2_operator_sub_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_mul_Float32x4x2 },
    std::pair{ "operator+="_c, &Float32x4x2_operator_addasg_Float32x4x2 },
    std::pair{ "operator-="_c, &Float32x4x2_operator_subasg_Float32x4x2 },
    std::pair{ "operator*="_c, &Float32x4x2_operator_mulasg_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x3_operator_add_Float32x4x3 },
    std::pair{ "operator-"_c, &Float32x4x3_operator_sub_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_mul_Float32x4x3 },
    std::pair{ "operator+="_c, &Float32x4x3_operator_addasg_Float32x4x3 },
    std::pair{ "operator-="_c, &Float32x4x3_operator_subasg_Float32x4x3 },
    std::pair{ "operator*="_c, &Float32x4x3_operator_mulasg_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x4_operator_add_Float32x4x4 },
    std::pair{ "operator-"_c, &Float32x4x4_operator_sub_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_mul_Float32x4x4 },
    std::pair{ "operator+="_c, &Float32x4x4_operator_addasg_Float32x4x4 },
    std::pair{ "operator-="_c, &Float32x4x4_operator_subasg_Float32x4x4 },
    std::pair{ "operator*="_c, &Float32x4x4_operator_mulasg_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x2_operator_add_Float16x2x2 },
    std::pair{ "operator-"_c, &Float16x2x2_operator_sub_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_mul_Float16x2x2 },
    std::pair{ "operator+="_c, &Float16x2x2_operator_addasg_Float16x2x2 },
    std::pair{ "operator-="_c, &Float16x2x2_operator_subasg_Float16x2x2 },
    std::pair{ "operator*="_c, &Float16x2x2_operator_mulasg_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x3_operator_add_Float16x2x3 },
    std::pair{ "operator-"_c, &Float16x2x3_operator_sub_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_mul_Float16x2x3 },
    std::pair{ "operator+="_c, &Float16x2x3_operator_addasg_Float16x2x3 },
    std::pair{ "operator-="_c, &Float16x2x3_operator_subasg_Float16x2x3 },
    std::pair{ "operator*="_c, &Float16x2x3_operator_mulasg_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x4_operator_add_Float16x2x4 },
    std::pair{ "operator-"_c, &Float16x2x4_operator_sub_Float16x2x4 },
    std::pair{ "operator*"_c, &Float16x2x4_operator_mul_Float16x2x4 },
    std::pair{ "operator+="_c, &Float16x2x4_operator_addasg_Float16x2x4 },
    std::pair{ "operator-="_c, &Float16x2x4_operator_subasg_Float16x2x4 },
    std::pair{ "operator*="_c, &Float16x2x4_operator_mulasg_Float16x2x4 },
    std::pair{ "operator*"_c, &Float16x2x4_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3x2_operator_add_Float16x3x2 },
    std::pair{ "operator-"_c, &Float16x3x2_operator_sub_Float16x3x2 },
    std::pair{ "operator*"_c, &Float16x3x2_operator_mul_Float16x3x2 },
    std::pair{ "operator+="_c, &Float16x3x2_operator_addasg_Float16x3x2 },
    std::pair{ "operator-="_c, &Float16x3x2_operator_subasg_Float16x3x2 },
    std::pair{ "operator*="_c, &Float16x3x2_operator_mulasg_Float16x3x2 },
    std::pair{ "operator*"_c, &Float16x3x2_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3x3_operator_add_Float16x3x3 },
    std::pair{ "operator-"_c, &Float16x3x3_operator_sub_Float16x3x3 },
    std::pair{ "operator*"_c, &Float16x3x3_operator_mul_Float16x3x3 },
    std::pair{ "operator+="_c, &Float16x3x3_operator_addasg_Float16x3x3 },
    std::pair{ "operator-="_c, &Float16x3x3_operator_subasg_Float16x3x3 },
    std::pair{ "operator*="_c, &Float16x3x3_operator_mulasg_Float16x3x3 },
    std::pair{ "operator*"_c, &Float16x3x3_operator_scale_Float16 }
    } };
}
Float16x3x3 Float16x3x3Type;

/// f16x3x4 with Float16x4, Float16x4, Float16x4
Variable Float16x3x4_Float16_4_ctor_arg0;
Variable Float16x3x4_Float16_4_ctor_arg1;
Variable Float16x3x4_Float16_4_ctor_arg2;
Function Float16x3x4_Float16_4_ctor;
inline constexpr std::array Float16x3x4_Float16_4_ctor_args = { &Float16x3x4_Float16_4_ctor_arg0, &Float16x3x4_Float16_4_ctor_arg1, &Float16x3x4_Float16_4_ctor_arg2 };

/// f16x3x4
Function Float16x3x4_identity;

/// f16x3x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x3x4_raw_list_arg0;
Variable Float16x3x4_raw_list_arg1;
Variable Float16x3x4_raw_list_arg2;
Variable Float16x3x4_raw_list_arg3;
Variable Float16x3x4_raw_list_arg4;
Variable Float16x3x4_raw_list_arg5;
Variable Float16x3x4_raw_list_arg6;
Variable Float16x3x4_raw_list_arg7;
Variable Float16x3x4_raw_list_arg8;
Variable Float16x3x4_raw_list_arg9;
Variable Float16x3x4_raw_list_arg10;
Variable Float16x3x4_raw_list_arg11;
Function Float16x3x4_raw_list;
inline constexpr std::array Float16x3x4_raw_list_args = { &Float16x3x4_raw_list_arg0, &Float16x3x4_raw_list_arg1, &Float16x3x4_raw_list_arg2, &Float16x3x4_raw_list_arg3, &Float16x3x4_raw_list_arg4, &Float16x3x4_raw_list_arg5, &Float16x3x4_raw_list_arg6, &Float16x3x4_raw_list_arg7, &Float16x3x4_raw_list_arg8, &Float16x3x4_raw_list_arg9, &Float16x3x4_raw_list_arg10, &Float16x3x4_raw_list_arg11 };

/// operator[] with Int32
Variable Float16x3x4_operator_index_Int32_arg0;
Function Float16x3x4_operator_index_Int32;
inline constexpr std::array Float16x3x4_operator_index_Int32_args = { &Float16x3x4_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float16x3x4_operator_index_UInt32_arg0;
Function Float16x3x4_operator_index_UInt32;
inline constexpr std::array Float16x3x4_operator_index_UInt32_args = { &Float16x3x4_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float16x3x4_operator_index_Int16_arg0;
Function Float16x3x4_operator_index_Int16;
inline constexpr std::array Float16x3x4_operator_index_Int16_args = { &Float16x3x4_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float16x3x4_operator_index_UInt16_arg0;
Function Float16x3x4_operator_index_UInt16;
inline constexpr std::array Float16x3x4_operator_index_UInt16_args = { &Float16x3x4_operator_index_UInt16_arg0 };

/// operator+ with Float16x3x4
Variable Float16x3x4_operator_add_Float16x3x4_arg0;
Function Float16x3x4_operator_add_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_add_Float16x3x4_args = { &Float16x3x4_operator_add_Float16x3x4_arg0 };

/// operator- with Float16x3x4
Variable Float16x3x4_operator_sub_Float16x3x4_arg0;
Function Float16x3x4_operator_sub_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_sub_Float16x3x4_args = { &Float16x3x4_operator_sub_Float16x3x4_arg0 };

/// operator* with Float16x3x4
Variable Float16x3x4_operator_mul_Float16x3x4_arg0;
Function Float16x3x4_operator_mul_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_mul_Float16x3x4_args = { &Float16x3x4_operator_mul_Float16x3x4_arg0 };

/// operator+= with Float16x3x4
Variable Float16x3x4_operator_addasg_Float16x3x4_arg0;
Function Float16x3x4_operator_addasg_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_addasg_Float16x3x4_args = { &Float16x3x4_operator_addasg_Float16x3x4_arg0 };

/// operator-= with Float16x3x4
Variable Float16x3x4_operator_subasg_Float16x3x4_arg0;
Function Float16x3x4_operator_subasg_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_subasg_Float16x3x4_args = { &Float16x3x4_operator_subasg_Float16x3x4_arg0 };

/// operator*= with Float16x3x4
Variable Float16x3x4_operator_mulasg_Float16x3x4_arg0;
Function Float16x3x4_operator_mulasg_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_mulasg_Float16x3x4_args = { &Float16x3x4_operator_mulasg_Float16x3x4_arg0 };

/// operator* with Float16
Variable Float16x3x4_operator_scale_Float16_arg0;
Function Float16x3x4_operator_scale_Float16;
inline constexpr std::array Float16x3x4_operator_scale_Float16_args = { &Float16x3x4_operator_scale_Float16_arg0 };

Float16x3x4::Float16x3x4()
{
    this->name = "f16";
    this->columnSize = 4;
    this->rowSize = 3;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// f16x3x4 with Float16x4, Float16x4, Float16x4
    Float16x3x4_Float16_4_ctor_arg0.name = "_arg0"_c;
    Float16x3x4_Float16_4_ctor_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x3x4_Float16_4_ctor_arg1.name = "_arg1"_c;
    Float16x3x4_Float16_4_ctor_arg1.type = Type::FullType{ Float16x4Type.name };
    Float16x3x4_Float16_4_ctor_arg2.name = "_arg2"_c;
    Float16x3x4_Float16_4_ctor_arg2.type = Type::FullType{ Float16x4Type.name };
    Float16x3x4_Float16_4_ctor.name = "f16x3x4"_c;
    Float16x3x4_Float16_4_ctor.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_Float16_4_ctor.parameters = Float16x3x4_Float16_4_ctor_args;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor_arg1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor_arg2)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor)->returnTypeSymbol = &Float16x3x4Type;

    /// f16x3x4
    Float16x3x4_identity.name = "f16x3x4"_c;
    Float16x3x4_identity.returnType = Type::FullType { Float16x3x4Type.name };
    Symbol::Resolved(&Float16x3x4_identity)->returnTypeSymbol = &Float16x3x4Type;

    /// f16x3x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x3x4_raw_list_arg0.name = "_arg0"_c;
    Float16x3x4_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg1.name = "_arg1"_c;
    Float16x3x4_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg2.name = "_arg2"_c;
    Float16x3x4_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg3.name = "_arg3"_c;
    Float16x3x4_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg4.name = "_arg4"_c;
    Float16x3x4_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg5.name = "_arg5"_c;
    Float16x3x4_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg6.name = "_arg6"_c;
    Float16x3x4_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg7.name = "_arg7"_c;
    Float16x3x4_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg8.name = "_arg8"_c;
    Float16x3x4_raw_list_arg8.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg9.name = "_arg9"_c;
    Float16x3x4_raw_list_arg9.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg10.name = "_arg10"_c;
    Float16x3x4_raw_list_arg10.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg11.name = "_arg11"_c;
    Float16x3x4_raw_list_arg11.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list.name = "f16x3x4"_c;
    Float16x3x4_raw_list.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_raw_list.parameters = Float16x3x4_raw_list_args;
    Symbol::Resolved(&Float16x3x4_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg8)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg9)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg10)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg11)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list)->returnTypeSymbol = &Float16x3x4Type;

    /// operator[] with Int32
    Float16x3x4_operator_index_Int32_arg0.name = "idx"_c;
    Float16x3x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x3x4_operator_index_Int32.name = "operator[]"_c;
    Float16x3x4_operator_index_Int32.returnType = Type::FullType { Float16x4Type.name };
    Float16x3x4_operator_index_Int32.parameters = Float16x3x4_operator_index_Int32_args;
    Symbol::Resolved(&Float16x3x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x3x4_operator_index_Int32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt32
    Float16x3x4_operator_index_UInt32_arg0.name = "idx"_c;
    Float16x3x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x3x4_operator_index_UInt32.name = "operator[]"_c;
    Float16x3x4_operator_index_UInt32.returnType = Type::FullType { Float16x4Type.name };
    Float16x3x4_operator_index_UInt32.parameters = Float16x3x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with Int16
    Float16x3x4_operator_index_Int16_arg0.name = "idx"_c;
    Float16x3x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x3x4_operator_index_Int16.name = "operator[]"_c;
    Float16x3x4_operator_index_Int16.returnType = Type::FullType { Float16x4Type.name };
    Float16x3x4_operator_index_Int16.parameters = Float16x3x4_operator_index_Int16_args;
    Symbol::Resolved(&Float16x3x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3x4_operator_index_Int16)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt16
    Float16x3x4_operator_index_UInt16_arg0.name = "idx"_c;
    Float16x3x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x3x4_operator_index_UInt16.name = "operator[]"_c;
    Float16x3x4_operator_index_UInt16.returnType = Type::FullType { Float16x4Type.name };
    Float16x3x4_operator_index_UInt16.parameters = Float16x3x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt16)->returnTypeSymbol = &Float16x4Type;

    /// operator+ with Float16x3x4
    Float16x3x4_operator_add_Float16x3x4_arg0.name = "_arg0"_c;
    Float16x3x4_operator_add_Float16x3x4_arg0.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_add_Float16x3x4.name = "operator+"_c;
    Float16x3x4_operator_add_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_add_Float16x3x4.parameters = Float16x3x4_operator_add_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_add_Float16x3x4_arg0)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_add_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator- with Float16x3x4
    Float16x3x4_operator_sub_Float16x3x4_arg0.name = "_arg0"_c;
    Float16x3x4_operator_sub_Float16x3x4_arg0.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_sub_Float16x3x4.name = "operator-"_c;
    Float16x3x4_operator_sub_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_sub_Float16x3x4.parameters = Float16x3x4_operator_sub_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_sub_Float16x3x4_arg0)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_sub_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator* with Float16x3x4
    Float16x3x4_operator_mul_Float16x3x4_arg0.name = "_arg0"_c;
    Float16x3x4_operator_mul_Float16x3x4_arg0.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_mul_Float16x3x4.name = "operator*"_c;
    Float16x3x4_operator_mul_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_mul_Float16x3x4.parameters = Float16x3x4_operator_mul_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_mul_Float16x3x4_arg0)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_mul_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator+= with Float16x3x4
    Float16x3x4_operator_addasg_Float16x3x4_arg0.name = "_arg0"_c;
    Float16x3x4_operator_addasg_Float16x3x4_arg0.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_addasg_Float16x3x4.name = "operator+="_c;
    Float16x3x4_operator_addasg_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_addasg_Float16x3x4.parameters = Float16x3x4_operator_addasg_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_addasg_Float16x3x4_arg0)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_addasg_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator-= with Float16x3x4
    Float16x3x4_operator_subasg_Float16x3x4_arg0.name = "_arg0"_c;
    Float16x3x4_operator_subasg_Float16x3x4_arg0.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_subasg_Float16x3x4.name = "operator-="_c;
    Float16x3x4_operator_subasg_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_subasg_Float16x3x4.parameters = Float16x3x4_operator_subasg_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_subasg_Float16x3x4_arg0)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_subasg_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator*= with Float16x3x4
    Float16x3x4_operator_mulasg_Float16x3x4_arg0.name = "_arg0"_c;
    Float16x3x4_operator_mulasg_Float16x3x4_arg0.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_mulasg_Float16x3x4.name = "operator*="_c;
    Float16x3x4_operator_mulasg_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_mulasg_Float16x3x4.parameters = Float16x3x4_operator_mulasg_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_mulasg_Float16x3x4_arg0)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_mulasg_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator* with Float16
    Float16x3x4_operator_scale_Float16_arg0.name = "_arg0"_c;
    Float16x3x4_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16x3x4_operator_scale_Float16.name = "operator*"_c;
    Float16x3x4_operator_scale_Float16.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_scale_Float16.parameters = Float16x3x4_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16)->returnTypeSymbol = &Float16x3x4Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 200> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator-"_c, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator+="_c, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator-="_c, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator*="_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x4_operator_add_Float32x3x4 },
    std::pair{ "operator-"_c, &Float32x3x4_operator_sub_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_mul_Float32x3x4 },
    std::pair{ "operator+="_c, &Float32x3x4_operator_addasg_Float32x3x4 },
    std::pair{ "operator-="_c, &Float32x3x4_operator_subasg_Float32x3x4 },
    std::pair{ "operator*="_c, &Float32x3x4_operator_mulasg_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x2_operator_add_Float32x4x2 },
    std::pair{ "operator-"_c, &Float32x4x2_operator_sub_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_mul_Float32x4x2 },
    std::pair{ "operator+="_c, &Float32x4x2_operator_addasg_Float32x4x2 },
    std::pair{ "operator-="_c, &Float32x4x2_operator_subasg_Float32x4x2 },
    std::pair{ "operator*="_c, &Float32x4x2_operator_mulasg_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x3_operator_add_Float32x4x3 },
    std::pair{ "operator-"_c, &Float32x4x3_operator_sub_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_mul_Float32x4x3 },
    std::pair{ "operator+="_c, &Float32x4x3_operator_addasg_Float32x4x3 },
    std::pair{ "operator-="_c, &Float32x4x3_operator_subasg_Float32x4x3 },
    std::pair{ "operator*="_c, &Float32x4x3_operator_mulasg_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x4_operator_add_Float32x4x4 },
    std::pair{ "operator-"_c, &Float32x4x4_operator_sub_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_mul_Float32x4x4 },
    std::pair{ "operator+="_c, &Float32x4x4_operator_addasg_Float32x4x4 },
    std::pair{ "operator-="_c, &Float32x4x4_operator_subasg_Float32x4x4 },
    std::pair{ "operator*="_c, &Float32x4x4_operator_mulasg_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x2_operator_add_Float16x2x2 },
    std::pair{ "operator-"_c, &Float16x2x2_operator_sub_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_mul_Float16x2x2 },
    std::pair{ "operator+="_c, &Float16x2x2_operator_addasg_Float16x2x2 },
    std::pair{ "operator-="_c, &Float16x2x2_operator_subasg_Float16x2x2 },
    std::pair{ "operator*="_c, &Float16x2x2_operator_mulasg_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x3_operator_add_Float16x2x3 },
    std::pair{ "operator-"_c, &Float16x2x3_operator_sub_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_mul_Float16x2x3 },
    std::pair{ "operator+="_c, &Float16x2x3_operator_addasg_Float16x2x3 },
    std::pair{ "operator-="_c, &Float16x2x3_operator_subasg_Float16x2x3 },
    std::pair{ "operator*="_c, &Float16x2x3_operator_mulasg_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x4_operator_add_Float16x2x4 },
    std::pair{ "operator-"_c, &Float16x2x4_operator_sub_Float16x2x4 },
    std::pair{ "operator*"_c, &Float16x2x4_operator_mul_Float16x2x4 },
    std::pair{ "operator+="_c, &Float16x2x4_operator_addasg_Float16x2x4 },
    std::pair{ "operator-="_c, &Float16x2x4_operator_subasg_Float16x2x4 },
    std::pair{ "operator*="_c, &Float16x2x4_operator_mulasg_Float16x2x4 },
    std::pair{ "operator*"_c, &Float16x2x4_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3x2_operator_add_Float16x3x2 },
    std::pair{ "operator-"_c, &Float16x3x2_operator_sub_Float16x3x2 },
    std::pair{ "operator*"_c, &Float16x3x2_operator_mul_Float16x3x2 },
    std::pair{ "operator+="_c, &Float16x3x2_operator_addasg_Float16x3x2 },
    std::pair{ "operator-="_c, &Float16x3x2_operator_subasg_Float16x3x2 },
    std::pair{ "operator*="_c, &Float16x3x2_operator_mulasg_Float16x3x2 },
    std::pair{ "operator*"_c, &Float16x3x2_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3x3_operator_add_Float16x3x3 },
    std::pair{ "operator-"_c, &Float16x3x3_operator_sub_Float16x3x3 },
    std::pair{ "operator*"_c, &Float16x3x3_operator_mul_Float16x3x3 },
    std::pair{ "operator+="_c, &Float16x3x3_operator_addasg_Float16x3x3 },
    std::pair{ "operator-="_c, &Float16x3x3_operator_subasg_Float16x3x3 },
    std::pair{ "operator*="_c, &Float16x3x3_operator_mulasg_Float16x3x3 },
    std::pair{ "operator*"_c, &Float16x3x3_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3x4_operator_add_Float16x3x4 },
    std::pair{ "operator-"_c, &Float16x3x4_operator_sub_Float16x3x4 },
    std::pair{ "operator*"_c, &Float16x3x4_operator_mul_Float16x3x4 },
    std::pair{ "operator+="_c, &Float16x3x4_operator_addasg_Float16x3x4 },
    std::pair{ "operator-="_c, &Float16x3x4_operator_subasg_Float16x3x4 },
    std::pair{ "operator*="_c, &Float16x3x4_operator_mulasg_Float16x3x4 },
    std::pair{ "operator*"_c, &Float16x3x4_operator_scale_Float16 }
    } };
}
Float16x3x4 Float16x3x4Type;

/// f16x4x2 with Float16x2, Float16x2, Float16x2, Float16x2
Variable Float16x4x2_Float16_2_ctor_arg0;
Variable Float16x4x2_Float16_2_ctor_arg1;
Variable Float16x4x2_Float16_2_ctor_arg2;
Variable Float16x4x2_Float16_2_ctor_arg3;
Function Float16x4x2_Float16_2_ctor;
inline constexpr std::array Float16x4x2_Float16_2_ctor_args = { &Float16x4x2_Float16_2_ctor_arg0, &Float16x4x2_Float16_2_ctor_arg1, &Float16x4x2_Float16_2_ctor_arg2, &Float16x4x2_Float16_2_ctor_arg3 };

/// f16x4x2
Function Float16x4x2_identity;

/// f16x4x2 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x4x2_raw_list_arg0;
Variable Float16x4x2_raw_list_arg1;
Variable Float16x4x2_raw_list_arg2;
Variable Float16x4x2_raw_list_arg3;
Variable Float16x4x2_raw_list_arg4;
Variable Float16x4x2_raw_list_arg5;
Variable Float16x4x2_raw_list_arg6;
Variable Float16x4x2_raw_list_arg7;
Function Float16x4x2_raw_list;
inline constexpr std::array Float16x4x2_raw_list_args = { &Float16x4x2_raw_list_arg0, &Float16x4x2_raw_list_arg1, &Float16x4x2_raw_list_arg2, &Float16x4x2_raw_list_arg3, &Float16x4x2_raw_list_arg4, &Float16x4x2_raw_list_arg5, &Float16x4x2_raw_list_arg6, &Float16x4x2_raw_list_arg7 };

/// operator[] with Int32
Variable Float16x4x2_operator_index_Int32_arg0;
Function Float16x4x2_operator_index_Int32;
inline constexpr std::array Float16x4x2_operator_index_Int32_args = { &Float16x4x2_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float16x4x2_operator_index_UInt32_arg0;
Function Float16x4x2_operator_index_UInt32;
inline constexpr std::array Float16x4x2_operator_index_UInt32_args = { &Float16x4x2_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float16x4x2_operator_index_Int16_arg0;
Function Float16x4x2_operator_index_Int16;
inline constexpr std::array Float16x4x2_operator_index_Int16_args = { &Float16x4x2_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float16x4x2_operator_index_UInt16_arg0;
Function Float16x4x2_operator_index_UInt16;
inline constexpr std::array Float16x4x2_operator_index_UInt16_args = { &Float16x4x2_operator_index_UInt16_arg0 };

/// operator+ with Float16x4x2
Variable Float16x4x2_operator_add_Float16x4x2_arg0;
Function Float16x4x2_operator_add_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_add_Float16x4x2_args = { &Float16x4x2_operator_add_Float16x4x2_arg0 };

/// operator- with Float16x4x2
Variable Float16x4x2_operator_sub_Float16x4x2_arg0;
Function Float16x4x2_operator_sub_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_sub_Float16x4x2_args = { &Float16x4x2_operator_sub_Float16x4x2_arg0 };

/// operator* with Float16x4x2
Variable Float16x4x2_operator_mul_Float16x4x2_arg0;
Function Float16x4x2_operator_mul_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_mul_Float16x4x2_args = { &Float16x4x2_operator_mul_Float16x4x2_arg0 };

/// operator+= with Float16x4x2
Variable Float16x4x2_operator_addasg_Float16x4x2_arg0;
Function Float16x4x2_operator_addasg_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_addasg_Float16x4x2_args = { &Float16x4x2_operator_addasg_Float16x4x2_arg0 };

/// operator-= with Float16x4x2
Variable Float16x4x2_operator_subasg_Float16x4x2_arg0;
Function Float16x4x2_operator_subasg_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_subasg_Float16x4x2_args = { &Float16x4x2_operator_subasg_Float16x4x2_arg0 };

/// operator*= with Float16x4x2
Variable Float16x4x2_operator_mulasg_Float16x4x2_arg0;
Function Float16x4x2_operator_mulasg_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_mulasg_Float16x4x2_args = { &Float16x4x2_operator_mulasg_Float16x4x2_arg0 };

/// operator* with Float16
Variable Float16x4x2_operator_scale_Float16_arg0;
Function Float16x4x2_operator_scale_Float16;
inline constexpr std::array Float16x4x2_operator_scale_Float16_args = { &Float16x4x2_operator_scale_Float16_arg0 };

Float16x4x2::Float16x4x2()
{
    this->name = "f16";
    this->columnSize = 2;
    this->rowSize = 4;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// f16x4x2 with Float16x2, Float16x2, Float16x2, Float16x2
    Float16x4x2_Float16_2_ctor_arg0.name = "_arg0"_c;
    Float16x4x2_Float16_2_ctor_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x4x2_Float16_2_ctor_arg1.name = "_arg1"_c;
    Float16x4x2_Float16_2_ctor_arg1.type = Type::FullType{ Float16x2Type.name };
    Float16x4x2_Float16_2_ctor_arg2.name = "_arg2"_c;
    Float16x4x2_Float16_2_ctor_arg2.type = Type::FullType{ Float16x2Type.name };
    Float16x4x2_Float16_2_ctor_arg3.name = "_arg3"_c;
    Float16x4x2_Float16_2_ctor_arg3.type = Type::FullType{ Float16x2Type.name };
    Float16x4x2_Float16_2_ctor.name = "f16x4x2"_c;
    Float16x4x2_Float16_2_ctor.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_Float16_2_ctor.parameters = Float16x4x2_Float16_2_ctor_args;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor_arg1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor_arg2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor_arg3)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor)->returnTypeSymbol = &Float16x4x2Type;

    /// f16x4x2
    Float16x4x2_identity.name = "f16x4x2"_c;
    Float16x4x2_identity.returnType = Type::FullType { Float16x4x2Type.name };
    Symbol::Resolved(&Float16x4x2_identity)->returnTypeSymbol = &Float16x4x2Type;

    /// f16x4x2 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x4x2_raw_list_arg0.name = "_arg0"_c;
    Float16x4x2_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg1.name = "_arg1"_c;
    Float16x4x2_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg2.name = "_arg2"_c;
    Float16x4x2_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg3.name = "_arg3"_c;
    Float16x4x2_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg4.name = "_arg4"_c;
    Float16x4x2_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg5.name = "_arg5"_c;
    Float16x4x2_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg6.name = "_arg6"_c;
    Float16x4x2_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg7.name = "_arg7"_c;
    Float16x4x2_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list.name = "f16x4x2"_c;
    Float16x4x2_raw_list.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_raw_list.parameters = Float16x4x2_raw_list_args;
    Symbol::Resolved(&Float16x4x2_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list)->returnTypeSymbol = &Float16x4x2Type;

    /// operator[] with Int32
    Float16x4x2_operator_index_Int32_arg0.name = "idx"_c;
    Float16x4x2_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x4x2_operator_index_Int32.name = "operator[]"_c;
    Float16x4x2_operator_index_Int32.returnType = Type::FullType { Float16x2Type.name };
    Float16x4x2_operator_index_Int32.parameters = Float16x4x2_operator_index_Int32_args;
    Symbol::Resolved(&Float16x4x2_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x4x2_operator_index_Int32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt32
    Float16x4x2_operator_index_UInt32_arg0.name = "idx"_c;
    Float16x4x2_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x4x2_operator_index_UInt32.name = "operator[]"_c;
    Float16x4x2_operator_index_UInt32.returnType = Type::FullType { Float16x2Type.name };
    Float16x4x2_operator_index_UInt32.parameters = Float16x4x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with Int16
    Float16x4x2_operator_index_Int16_arg0.name = "idx"_c;
    Float16x4x2_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x4x2_operator_index_Int16.name = "operator[]"_c;
    Float16x4x2_operator_index_Int16.returnType = Type::FullType { Float16x2Type.name };
    Float16x4x2_operator_index_Int16.parameters = Float16x4x2_operator_index_Int16_args;
    Symbol::Resolved(&Float16x4x2_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4x2_operator_index_Int16)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt16
    Float16x4x2_operator_index_UInt16_arg0.name = "idx"_c;
    Float16x4x2_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x4x2_operator_index_UInt16.name = "operator[]"_c;
    Float16x4x2_operator_index_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Float16x4x2_operator_index_UInt16.parameters = Float16x4x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt16)->returnTypeSymbol = &Float16x2Type;

    /// operator+ with Float16x4x2
    Float16x4x2_operator_add_Float16x4x2_arg0.name = "_arg0"_c;
    Float16x4x2_operator_add_Float16x4x2_arg0.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_add_Float16x4x2.name = "operator+"_c;
    Float16x4x2_operator_add_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_add_Float16x4x2.parameters = Float16x4x2_operator_add_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_add_Float16x4x2_arg0)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_add_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator- with Float16x4x2
    Float16x4x2_operator_sub_Float16x4x2_arg0.name = "_arg0"_c;
    Float16x4x2_operator_sub_Float16x4x2_arg0.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_sub_Float16x4x2.name = "operator-"_c;
    Float16x4x2_operator_sub_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_sub_Float16x4x2.parameters = Float16x4x2_operator_sub_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_sub_Float16x4x2_arg0)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_sub_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator* with Float16x4x2
    Float16x4x2_operator_mul_Float16x4x2_arg0.name = "_arg0"_c;
    Float16x4x2_operator_mul_Float16x4x2_arg0.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_mul_Float16x4x2.name = "operator*"_c;
    Float16x4x2_operator_mul_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_mul_Float16x4x2.parameters = Float16x4x2_operator_mul_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_mul_Float16x4x2_arg0)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_mul_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator+= with Float16x4x2
    Float16x4x2_operator_addasg_Float16x4x2_arg0.name = "_arg0"_c;
    Float16x4x2_operator_addasg_Float16x4x2_arg0.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_addasg_Float16x4x2.name = "operator+="_c;
    Float16x4x2_operator_addasg_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_addasg_Float16x4x2.parameters = Float16x4x2_operator_addasg_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_addasg_Float16x4x2_arg0)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_addasg_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator-= with Float16x4x2
    Float16x4x2_operator_subasg_Float16x4x2_arg0.name = "_arg0"_c;
    Float16x4x2_operator_subasg_Float16x4x2_arg0.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_subasg_Float16x4x2.name = "operator-="_c;
    Float16x4x2_operator_subasg_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_subasg_Float16x4x2.parameters = Float16x4x2_operator_subasg_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_subasg_Float16x4x2_arg0)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_subasg_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator*= with Float16x4x2
    Float16x4x2_operator_mulasg_Float16x4x2_arg0.name = "_arg0"_c;
    Float16x4x2_operator_mulasg_Float16x4x2_arg0.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_mulasg_Float16x4x2.name = "operator*="_c;
    Float16x4x2_operator_mulasg_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_mulasg_Float16x4x2.parameters = Float16x4x2_operator_mulasg_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_mulasg_Float16x4x2_arg0)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_mulasg_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator* with Float16
    Float16x4x2_operator_scale_Float16_arg0.name = "_arg0"_c;
    Float16x4x2_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16x4x2_operator_scale_Float16.name = "operator*"_c;
    Float16x4x2_operator_scale_Float16.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_scale_Float16.parameters = Float16x4x2_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16)->returnTypeSymbol = &Float16x4x2Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 211> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator-"_c, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator+="_c, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator-="_c, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator*="_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x4_operator_add_Float32x3x4 },
    std::pair{ "operator-"_c, &Float32x3x4_operator_sub_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_mul_Float32x3x4 },
    std::pair{ "operator+="_c, &Float32x3x4_operator_addasg_Float32x3x4 },
    std::pair{ "operator-="_c, &Float32x3x4_operator_subasg_Float32x3x4 },
    std::pair{ "operator*="_c, &Float32x3x4_operator_mulasg_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x2_operator_add_Float32x4x2 },
    std::pair{ "operator-"_c, &Float32x4x2_operator_sub_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_mul_Float32x4x2 },
    std::pair{ "operator+="_c, &Float32x4x2_operator_addasg_Float32x4x2 },
    std::pair{ "operator-="_c, &Float32x4x2_operator_subasg_Float32x4x2 },
    std::pair{ "operator*="_c, &Float32x4x2_operator_mulasg_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x3_operator_add_Float32x4x3 },
    std::pair{ "operator-"_c, &Float32x4x3_operator_sub_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_mul_Float32x4x3 },
    std::pair{ "operator+="_c, &Float32x4x3_operator_addasg_Float32x4x3 },
    std::pair{ "operator-="_c, &Float32x4x3_operator_subasg_Float32x4x3 },
    std::pair{ "operator*="_c, &Float32x4x3_operator_mulasg_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x4_operator_add_Float32x4x4 },
    std::pair{ "operator-"_c, &Float32x4x4_operator_sub_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_mul_Float32x4x4 },
    std::pair{ "operator+="_c, &Float32x4x4_operator_addasg_Float32x4x4 },
    std::pair{ "operator-="_c, &Float32x4x4_operator_subasg_Float32x4x4 },
    std::pair{ "operator*="_c, &Float32x4x4_operator_mulasg_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x2_operator_add_Float16x2x2 },
    std::pair{ "operator-"_c, &Float16x2x2_operator_sub_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_mul_Float16x2x2 },
    std::pair{ "operator+="_c, &Float16x2x2_operator_addasg_Float16x2x2 },
    std::pair{ "operator-="_c, &Float16x2x2_operator_subasg_Float16x2x2 },
    std::pair{ "operator*="_c, &Float16x2x2_operator_mulasg_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x3_operator_add_Float16x2x3 },
    std::pair{ "operator-"_c, &Float16x2x3_operator_sub_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_mul_Float16x2x3 },
    std::pair{ "operator+="_c, &Float16x2x3_operator_addasg_Float16x2x3 },
    std::pair{ "operator-="_c, &Float16x2x3_operator_subasg_Float16x2x3 },
    std::pair{ "operator*="_c, &Float16x2x3_operator_mulasg_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x4_operator_add_Float16x2x4 },
    std::pair{ "operator-"_c, &Float16x2x4_operator_sub_Float16x2x4 },
    std::pair{ "operator*"_c, &Float16x2x4_operator_mul_Float16x2x4 },
    std::pair{ "operator+="_c, &Float16x2x4_operator_addasg_Float16x2x4 },
    std::pair{ "operator-="_c, &Float16x2x4_operator_subasg_Float16x2x4 },
    std::pair{ "operator*="_c, &Float16x2x4_operator_mulasg_Float16x2x4 },
    std::pair{ "operator*"_c, &Float16x2x4_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3x2_operator_add_Float16x3x2 },
    std::pair{ "operator-"_c, &Float16x3x2_operator_sub_Float16x3x2 },
    std::pair{ "operator*"_c, &Float16x3x2_operator_mul_Float16x3x2 },
    std::pair{ "operator+="_c, &Float16x3x2_operator_addasg_Float16x3x2 },
    std::pair{ "operator-="_c, &Float16x3x2_operator_subasg_Float16x3x2 },
    std::pair{ "operator*="_c, &Float16x3x2_operator_mulasg_Float16x3x2 },
    std::pair{ "operator*"_c, &Float16x3x2_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3x3_operator_add_Float16x3x3 },
    std::pair{ "operator-"_c, &Float16x3x3_operator_sub_Float16x3x3 },
    std::pair{ "operator*"_c, &Float16x3x3_operator_mul_Float16x3x3 },
    std::pair{ "operator+="_c, &Float16x3x3_operator_addasg_Float16x3x3 },
    std::pair{ "operator-="_c, &Float16x3x3_operator_subasg_Float16x3x3 },
    std::pair{ "operator*="_c, &Float16x3x3_operator_mulasg_Float16x3x3 },
    std::pair{ "operator*"_c, &Float16x3x3_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3x4_operator_add_Float16x3x4 },
    std::pair{ "operator-"_c, &Float16x3x4_operator_sub_Float16x3x4 },
    std::pair{ "operator*"_c, &Float16x3x4_operator_mul_Float16x3x4 },
    std::pair{ "operator+="_c, &Float16x3x4_operator_addasg_Float16x3x4 },
    std::pair{ "operator-="_c, &Float16x3x4_operator_subasg_Float16x3x4 },
    std::pair{ "operator*="_c, &Float16x3x4_operator_mulasg_Float16x3x4 },
    std::pair{ "operator*"_c, &Float16x3x4_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x4x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x4x2_operator_add_Float16x4x2 },
    std::pair{ "operator-"_c, &Float16x4x2_operator_sub_Float16x4x2 },
    std::pair{ "operator*"_c, &Float16x4x2_operator_mul_Float16x4x2 },
    std::pair{ "operator+="_c, &Float16x4x2_operator_addasg_Float16x4x2 },
    std::pair{ "operator-="_c, &Float16x4x2_operator_subasg_Float16x4x2 },
    std::pair{ "operator*="_c, &Float16x4x2_operator_mulasg_Float16x4x2 },
    std::pair{ "operator*"_c, &Float16x4x2_operator_scale_Float16 }
    } };
}
Float16x4x2 Float16x4x2Type;

/// f16x4x3 with Float16x3, Float16x3, Float16x3, Float16x3
Variable Float16x4x3_Float16_3_ctor_arg0;
Variable Float16x4x3_Float16_3_ctor_arg1;
Variable Float16x4x3_Float16_3_ctor_arg2;
Variable Float16x4x3_Float16_3_ctor_arg3;
Function Float16x4x3_Float16_3_ctor;
inline constexpr std::array Float16x4x3_Float16_3_ctor_args = { &Float16x4x3_Float16_3_ctor_arg0, &Float16x4x3_Float16_3_ctor_arg1, &Float16x4x3_Float16_3_ctor_arg2, &Float16x4x3_Float16_3_ctor_arg3 };

/// f16x4x3
Function Float16x4x3_identity;

/// f16x4x3 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x4x3_raw_list_arg0;
Variable Float16x4x3_raw_list_arg1;
Variable Float16x4x3_raw_list_arg2;
Variable Float16x4x3_raw_list_arg3;
Variable Float16x4x3_raw_list_arg4;
Variable Float16x4x3_raw_list_arg5;
Variable Float16x4x3_raw_list_arg6;
Variable Float16x4x3_raw_list_arg7;
Variable Float16x4x3_raw_list_arg8;
Variable Float16x4x3_raw_list_arg9;
Variable Float16x4x3_raw_list_arg10;
Variable Float16x4x3_raw_list_arg11;
Function Float16x4x3_raw_list;
inline constexpr std::array Float16x4x3_raw_list_args = { &Float16x4x3_raw_list_arg0, &Float16x4x3_raw_list_arg1, &Float16x4x3_raw_list_arg2, &Float16x4x3_raw_list_arg3, &Float16x4x3_raw_list_arg4, &Float16x4x3_raw_list_arg5, &Float16x4x3_raw_list_arg6, &Float16x4x3_raw_list_arg7, &Float16x4x3_raw_list_arg8, &Float16x4x3_raw_list_arg9, &Float16x4x3_raw_list_arg10, &Float16x4x3_raw_list_arg11 };

/// operator[] with Int32
Variable Float16x4x3_operator_index_Int32_arg0;
Function Float16x4x3_operator_index_Int32;
inline constexpr std::array Float16x4x3_operator_index_Int32_args = { &Float16x4x3_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float16x4x3_operator_index_UInt32_arg0;
Function Float16x4x3_operator_index_UInt32;
inline constexpr std::array Float16x4x3_operator_index_UInt32_args = { &Float16x4x3_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float16x4x3_operator_index_Int16_arg0;
Function Float16x4x3_operator_index_Int16;
inline constexpr std::array Float16x4x3_operator_index_Int16_args = { &Float16x4x3_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float16x4x3_operator_index_UInt16_arg0;
Function Float16x4x3_operator_index_UInt16;
inline constexpr std::array Float16x4x3_operator_index_UInt16_args = { &Float16x4x3_operator_index_UInt16_arg0 };

/// operator+ with Float16x4x3
Variable Float16x4x3_operator_add_Float16x4x3_arg0;
Function Float16x4x3_operator_add_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_add_Float16x4x3_args = { &Float16x4x3_operator_add_Float16x4x3_arg0 };

/// operator- with Float16x4x3
Variable Float16x4x3_operator_sub_Float16x4x3_arg0;
Function Float16x4x3_operator_sub_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_sub_Float16x4x3_args = { &Float16x4x3_operator_sub_Float16x4x3_arg0 };

/// operator* with Float16x4x3
Variable Float16x4x3_operator_mul_Float16x4x3_arg0;
Function Float16x4x3_operator_mul_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_mul_Float16x4x3_args = { &Float16x4x3_operator_mul_Float16x4x3_arg0 };

/// operator+= with Float16x4x3
Variable Float16x4x3_operator_addasg_Float16x4x3_arg0;
Function Float16x4x3_operator_addasg_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_addasg_Float16x4x3_args = { &Float16x4x3_operator_addasg_Float16x4x3_arg0 };

/// operator-= with Float16x4x3
Variable Float16x4x3_operator_subasg_Float16x4x3_arg0;
Function Float16x4x3_operator_subasg_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_subasg_Float16x4x3_args = { &Float16x4x3_operator_subasg_Float16x4x3_arg0 };

/// operator*= with Float16x4x3
Variable Float16x4x3_operator_mulasg_Float16x4x3_arg0;
Function Float16x4x3_operator_mulasg_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_mulasg_Float16x4x3_args = { &Float16x4x3_operator_mulasg_Float16x4x3_arg0 };

/// operator* with Float16
Variable Float16x4x3_operator_scale_Float16_arg0;
Function Float16x4x3_operator_scale_Float16;
inline constexpr std::array Float16x4x3_operator_scale_Float16_args = { &Float16x4x3_operator_scale_Float16_arg0 };

Float16x4x3::Float16x4x3()
{
    this->name = "f16";
    this->columnSize = 3;
    this->rowSize = 4;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// f16x4x3 with Float16x3, Float16x3, Float16x3, Float16x3
    Float16x4x3_Float16_3_ctor_arg0.name = "_arg0"_c;
    Float16x4x3_Float16_3_ctor_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x4x3_Float16_3_ctor_arg1.name = "_arg1"_c;
    Float16x4x3_Float16_3_ctor_arg1.type = Type::FullType{ Float16x3Type.name };
    Float16x4x3_Float16_3_ctor_arg2.name = "_arg2"_c;
    Float16x4x3_Float16_3_ctor_arg2.type = Type::FullType{ Float16x3Type.name };
    Float16x4x3_Float16_3_ctor_arg3.name = "_arg3"_c;
    Float16x4x3_Float16_3_ctor_arg3.type = Type::FullType{ Float16x3Type.name };
    Float16x4x3_Float16_3_ctor.name = "f16x4x3"_c;
    Float16x4x3_Float16_3_ctor.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_Float16_3_ctor.parameters = Float16x4x3_Float16_3_ctor_args;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor_arg1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor_arg2)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor_arg3)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor)->returnTypeSymbol = &Float16x4x3Type;

    /// f16x4x3
    Float16x4x3_identity.name = "f16x4x3"_c;
    Float16x4x3_identity.returnType = Type::FullType { Float16x4x3Type.name };
    Symbol::Resolved(&Float16x4x3_identity)->returnTypeSymbol = &Float16x4x3Type;

    /// f16x4x3 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x4x3_raw_list_arg0.name = "_arg0"_c;
    Float16x4x3_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg1.name = "_arg1"_c;
    Float16x4x3_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg2.name = "_arg2"_c;
    Float16x4x3_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg3.name = "_arg3"_c;
    Float16x4x3_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg4.name = "_arg4"_c;
    Float16x4x3_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg5.name = "_arg5"_c;
    Float16x4x3_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg6.name = "_arg6"_c;
    Float16x4x3_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg7.name = "_arg7"_c;
    Float16x4x3_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg8.name = "_arg8"_c;
    Float16x4x3_raw_list_arg8.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg9.name = "_arg9"_c;
    Float16x4x3_raw_list_arg9.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg10.name = "_arg10"_c;
    Float16x4x3_raw_list_arg10.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg11.name = "_arg11"_c;
    Float16x4x3_raw_list_arg11.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list.name = "f16x4x3"_c;
    Float16x4x3_raw_list.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_raw_list.parameters = Float16x4x3_raw_list_args;
    Symbol::Resolved(&Float16x4x3_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg8)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg9)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg10)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg11)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list)->returnTypeSymbol = &Float16x4x3Type;

    /// operator[] with Int32
    Float16x4x3_operator_index_Int32_arg0.name = "idx"_c;
    Float16x4x3_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x4x3_operator_index_Int32.name = "operator[]"_c;
    Float16x4x3_operator_index_Int32.returnType = Type::FullType { Float16x3Type.name };
    Float16x4x3_operator_index_Int32.parameters = Float16x4x3_operator_index_Int32_args;
    Symbol::Resolved(&Float16x4x3_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x4x3_operator_index_Int32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt32
    Float16x4x3_operator_index_UInt32_arg0.name = "idx"_c;
    Float16x4x3_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x4x3_operator_index_UInt32.name = "operator[]"_c;
    Float16x4x3_operator_index_UInt32.returnType = Type::FullType { Float16x3Type.name };
    Float16x4x3_operator_index_UInt32.parameters = Float16x4x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with Int16
    Float16x4x3_operator_index_Int16_arg0.name = "idx"_c;
    Float16x4x3_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x4x3_operator_index_Int16.name = "operator[]"_c;
    Float16x4x3_operator_index_Int16.returnType = Type::FullType { Float16x3Type.name };
    Float16x4x3_operator_index_Int16.parameters = Float16x4x3_operator_index_Int16_args;
    Symbol::Resolved(&Float16x4x3_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4x3_operator_index_Int16)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt16
    Float16x4x3_operator_index_UInt16_arg0.name = "idx"_c;
    Float16x4x3_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x4x3_operator_index_UInt16.name = "operator[]"_c;
    Float16x4x3_operator_index_UInt16.returnType = Type::FullType { Float16x3Type.name };
    Float16x4x3_operator_index_UInt16.parameters = Float16x4x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt16)->returnTypeSymbol = &Float16x3Type;

    /// operator+ with Float16x4x3
    Float16x4x3_operator_add_Float16x4x3_arg0.name = "_arg0"_c;
    Float16x4x3_operator_add_Float16x4x3_arg0.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_add_Float16x4x3.name = "operator+"_c;
    Float16x4x3_operator_add_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_add_Float16x4x3.parameters = Float16x4x3_operator_add_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_add_Float16x4x3_arg0)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_add_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator- with Float16x4x3
    Float16x4x3_operator_sub_Float16x4x3_arg0.name = "_arg0"_c;
    Float16x4x3_operator_sub_Float16x4x3_arg0.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_sub_Float16x4x3.name = "operator-"_c;
    Float16x4x3_operator_sub_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_sub_Float16x4x3.parameters = Float16x4x3_operator_sub_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_sub_Float16x4x3_arg0)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_sub_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator* with Float16x4x3
    Float16x4x3_operator_mul_Float16x4x3_arg0.name = "_arg0"_c;
    Float16x4x3_operator_mul_Float16x4x3_arg0.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_mul_Float16x4x3.name = "operator*"_c;
    Float16x4x3_operator_mul_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_mul_Float16x4x3.parameters = Float16x4x3_operator_mul_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_mul_Float16x4x3_arg0)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_mul_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator+= with Float16x4x3
    Float16x4x3_operator_addasg_Float16x4x3_arg0.name = "_arg0"_c;
    Float16x4x3_operator_addasg_Float16x4x3_arg0.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_addasg_Float16x4x3.name = "operator+="_c;
    Float16x4x3_operator_addasg_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_addasg_Float16x4x3.parameters = Float16x4x3_operator_addasg_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_addasg_Float16x4x3_arg0)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_addasg_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator-= with Float16x4x3
    Float16x4x3_operator_subasg_Float16x4x3_arg0.name = "_arg0"_c;
    Float16x4x3_operator_subasg_Float16x4x3_arg0.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_subasg_Float16x4x3.name = "operator-="_c;
    Float16x4x3_operator_subasg_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_subasg_Float16x4x3.parameters = Float16x4x3_operator_subasg_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_subasg_Float16x4x3_arg0)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_subasg_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator*= with Float16x4x3
    Float16x4x3_operator_mulasg_Float16x4x3_arg0.name = "_arg0"_c;
    Float16x4x3_operator_mulasg_Float16x4x3_arg0.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_mulasg_Float16x4x3.name = "operator*="_c;
    Float16x4x3_operator_mulasg_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_mulasg_Float16x4x3.parameters = Float16x4x3_operator_mulasg_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_mulasg_Float16x4x3_arg0)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_mulasg_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator* with Float16
    Float16x4x3_operator_scale_Float16_arg0.name = "_arg0"_c;
    Float16x4x3_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16x4x3_operator_scale_Float16.name = "operator*"_c;
    Float16x4x3_operator_scale_Float16.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_scale_Float16.parameters = Float16x4x3_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16)->returnTypeSymbol = &Float16x4x3Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 222> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator-"_c, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator+="_c, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator-="_c, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator*="_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x4_operator_add_Float32x3x4 },
    std::pair{ "operator-"_c, &Float32x3x4_operator_sub_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_mul_Float32x3x4 },
    std::pair{ "operator+="_c, &Float32x3x4_operator_addasg_Float32x3x4 },
    std::pair{ "operator-="_c, &Float32x3x4_operator_subasg_Float32x3x4 },
    std::pair{ "operator*="_c, &Float32x3x4_operator_mulasg_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x2_operator_add_Float32x4x2 },
    std::pair{ "operator-"_c, &Float32x4x2_operator_sub_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_mul_Float32x4x2 },
    std::pair{ "operator+="_c, &Float32x4x2_operator_addasg_Float32x4x2 },
    std::pair{ "operator-="_c, &Float32x4x2_operator_subasg_Float32x4x2 },
    std::pair{ "operator*="_c, &Float32x4x2_operator_mulasg_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x3_operator_add_Float32x4x3 },
    std::pair{ "operator-"_c, &Float32x4x3_operator_sub_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_mul_Float32x4x3 },
    std::pair{ "operator+="_c, &Float32x4x3_operator_addasg_Float32x4x3 },
    std::pair{ "operator-="_c, &Float32x4x3_operator_subasg_Float32x4x3 },
    std::pair{ "operator*="_c, &Float32x4x3_operator_mulasg_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x4_operator_add_Float32x4x4 },
    std::pair{ "operator-"_c, &Float32x4x4_operator_sub_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_mul_Float32x4x4 },
    std::pair{ "operator+="_c, &Float32x4x4_operator_addasg_Float32x4x4 },
    std::pair{ "operator-="_c, &Float32x4x4_operator_subasg_Float32x4x4 },
    std::pair{ "operator*="_c, &Float32x4x4_operator_mulasg_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x2_operator_add_Float16x2x2 },
    std::pair{ "operator-"_c, &Float16x2x2_operator_sub_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_mul_Float16x2x2 },
    std::pair{ "operator+="_c, &Float16x2x2_operator_addasg_Float16x2x2 },
    std::pair{ "operator-="_c, &Float16x2x2_operator_subasg_Float16x2x2 },
    std::pair{ "operator*="_c, &Float16x2x2_operator_mulasg_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x3_operator_add_Float16x2x3 },
    std::pair{ "operator-"_c, &Float16x2x3_operator_sub_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_mul_Float16x2x3 },
    std::pair{ "operator+="_c, &Float16x2x3_operator_addasg_Float16x2x3 },
    std::pair{ "operator-="_c, &Float16x2x3_operator_subasg_Float16x2x3 },
    std::pair{ "operator*="_c, &Float16x2x3_operator_mulasg_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x4_operator_add_Float16x2x4 },
    std::pair{ "operator-"_c, &Float16x2x4_operator_sub_Float16x2x4 },
    std::pair{ "operator*"_c, &Float16x2x4_operator_mul_Float16x2x4 },
    std::pair{ "operator+="_c, &Float16x2x4_operator_addasg_Float16x2x4 },
    std::pair{ "operator-="_c, &Float16x2x4_operator_subasg_Float16x2x4 },
    std::pair{ "operator*="_c, &Float16x2x4_operator_mulasg_Float16x2x4 },
    std::pair{ "operator*"_c, &Float16x2x4_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3x2_operator_add_Float16x3x2 },
    std::pair{ "operator-"_c, &Float16x3x2_operator_sub_Float16x3x2 },
    std::pair{ "operator*"_c, &Float16x3x2_operator_mul_Float16x3x2 },
    std::pair{ "operator+="_c, &Float16x3x2_operator_addasg_Float16x3x2 },
    std::pair{ "operator-="_c, &Float16x3x2_operator_subasg_Float16x3x2 },
    std::pair{ "operator*="_c, &Float16x3x2_operator_mulasg_Float16x3x2 },
    std::pair{ "operator*"_c, &Float16x3x2_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3x3_operator_add_Float16x3x3 },
    std::pair{ "operator-"_c, &Float16x3x3_operator_sub_Float16x3x3 },
    std::pair{ "operator*"_c, &Float16x3x3_operator_mul_Float16x3x3 },
    std::pair{ "operator+="_c, &Float16x3x3_operator_addasg_Float16x3x3 },
    std::pair{ "operator-="_c, &Float16x3x3_operator_subasg_Float16x3x3 },
    std::pair{ "operator*="_c, &Float16x3x3_operator_mulasg_Float16x3x3 },
    std::pair{ "operator*"_c, &Float16x3x3_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3x4_operator_add_Float16x3x4 },
    std::pair{ "operator-"_c, &Float16x3x4_operator_sub_Float16x3x4 },
    std::pair{ "operator*"_c, &Float16x3x4_operator_mul_Float16x3x4 },
    std::pair{ "operator+="_c, &Float16x3x4_operator_addasg_Float16x3x4 },
    std::pair{ "operator-="_c, &Float16x3x4_operator_subasg_Float16x3x4 },
    std::pair{ "operator*="_c, &Float16x3x4_operator_mulasg_Float16x3x4 },
    std::pair{ "operator*"_c, &Float16x3x4_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x4x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x4x2_operator_add_Float16x4x2 },
    std::pair{ "operator-"_c, &Float16x4x2_operator_sub_Float16x4x2 },
    std::pair{ "operator*"_c, &Float16x4x2_operator_mul_Float16x4x2 },
    std::pair{ "operator+="_c, &Float16x4x2_operator_addasg_Float16x4x2 },
    std::pair{ "operator-="_c, &Float16x4x2_operator_subasg_Float16x4x2 },
    std::pair{ "operator*="_c, &Float16x4x2_operator_mulasg_Float16x4x2 },
    std::pair{ "operator*"_c, &Float16x4x2_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x4x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x4x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x4x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x4x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x4x3_operator_add_Float16x4x3 },
    std::pair{ "operator-"_c, &Float16x4x3_operator_sub_Float16x4x3 },
    std::pair{ "operator*"_c, &Float16x4x3_operator_mul_Float16x4x3 },
    std::pair{ "operator+="_c, &Float16x4x3_operator_addasg_Float16x4x3 },
    std::pair{ "operator-="_c, &Float16x4x3_operator_subasg_Float16x4x3 },
    std::pair{ "operator*="_c, &Float16x4x3_operator_mulasg_Float16x4x3 },
    std::pair{ "operator*"_c, &Float16x4x3_operator_scale_Float16 }
    } };
}
Float16x4x3 Float16x4x3Type;

/// f16x4x4 with Float16x4, Float16x4, Float16x4, Float16x4
Variable Float16x4x4_Float16_4_ctor_arg0;
Variable Float16x4x4_Float16_4_ctor_arg1;
Variable Float16x4x4_Float16_4_ctor_arg2;
Variable Float16x4x4_Float16_4_ctor_arg3;
Function Float16x4x4_Float16_4_ctor;
inline constexpr std::array Float16x4x4_Float16_4_ctor_args = { &Float16x4x4_Float16_4_ctor_arg0, &Float16x4x4_Float16_4_ctor_arg1, &Float16x4x4_Float16_4_ctor_arg2, &Float16x4x4_Float16_4_ctor_arg3 };

/// f16x4x4
Function Float16x4x4_identity;

/// f16x4x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x4x4_raw_list_arg0;
Variable Float16x4x4_raw_list_arg1;
Variable Float16x4x4_raw_list_arg2;
Variable Float16x4x4_raw_list_arg3;
Variable Float16x4x4_raw_list_arg4;
Variable Float16x4x4_raw_list_arg5;
Variable Float16x4x4_raw_list_arg6;
Variable Float16x4x4_raw_list_arg7;
Variable Float16x4x4_raw_list_arg8;
Variable Float16x4x4_raw_list_arg9;
Variable Float16x4x4_raw_list_arg10;
Variable Float16x4x4_raw_list_arg11;
Variable Float16x4x4_raw_list_arg12;
Variable Float16x4x4_raw_list_arg13;
Variable Float16x4x4_raw_list_arg14;
Variable Float16x4x4_raw_list_arg15;
Function Float16x4x4_raw_list;
inline constexpr std::array Float16x4x4_raw_list_args = { &Float16x4x4_raw_list_arg0, &Float16x4x4_raw_list_arg1, &Float16x4x4_raw_list_arg2, &Float16x4x4_raw_list_arg3, &Float16x4x4_raw_list_arg4, &Float16x4x4_raw_list_arg5, &Float16x4x4_raw_list_arg6, &Float16x4x4_raw_list_arg7, &Float16x4x4_raw_list_arg8, &Float16x4x4_raw_list_arg9, &Float16x4x4_raw_list_arg10, &Float16x4x4_raw_list_arg11, &Float16x4x4_raw_list_arg12, &Float16x4x4_raw_list_arg13, &Float16x4x4_raw_list_arg14, &Float16x4x4_raw_list_arg15 };

/// operator[] with Int32
Variable Float16x4x4_operator_index_Int32_arg0;
Function Float16x4x4_operator_index_Int32;
inline constexpr std::array Float16x4x4_operator_index_Int32_args = { &Float16x4x4_operator_index_Int32_arg0 };

/// operator[] with UInt32
Variable Float16x4x4_operator_index_UInt32_arg0;
Function Float16x4x4_operator_index_UInt32;
inline constexpr std::array Float16x4x4_operator_index_UInt32_args = { &Float16x4x4_operator_index_UInt32_arg0 };

/// operator[] with Int16
Variable Float16x4x4_operator_index_Int16_arg0;
Function Float16x4x4_operator_index_Int16;
inline constexpr std::array Float16x4x4_operator_index_Int16_args = { &Float16x4x4_operator_index_Int16_arg0 };

/// operator[] with UInt16
Variable Float16x4x4_operator_index_UInt16_arg0;
Function Float16x4x4_operator_index_UInt16;
inline constexpr std::array Float16x4x4_operator_index_UInt16_args = { &Float16x4x4_operator_index_UInt16_arg0 };

/// operator+ with Float16x4x4
Variable Float16x4x4_operator_add_Float16x4x4_arg0;
Function Float16x4x4_operator_add_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_add_Float16x4x4_args = { &Float16x4x4_operator_add_Float16x4x4_arg0 };

/// operator- with Float16x4x4
Variable Float16x4x4_operator_sub_Float16x4x4_arg0;
Function Float16x4x4_operator_sub_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_sub_Float16x4x4_args = { &Float16x4x4_operator_sub_Float16x4x4_arg0 };

/// operator* with Float16x4x4
Variable Float16x4x4_operator_mul_Float16x4x4_arg0;
Function Float16x4x4_operator_mul_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_mul_Float16x4x4_args = { &Float16x4x4_operator_mul_Float16x4x4_arg0 };

/// operator+= with Float16x4x4
Variable Float16x4x4_operator_addasg_Float16x4x4_arg0;
Function Float16x4x4_operator_addasg_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_addasg_Float16x4x4_args = { &Float16x4x4_operator_addasg_Float16x4x4_arg0 };

/// operator-= with Float16x4x4
Variable Float16x4x4_operator_subasg_Float16x4x4_arg0;
Function Float16x4x4_operator_subasg_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_subasg_Float16x4x4_args = { &Float16x4x4_operator_subasg_Float16x4x4_arg0 };

/// operator*= with Float16x4x4
Variable Float16x4x4_operator_mulasg_Float16x4x4_arg0;
Function Float16x4x4_operator_mulasg_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_mulasg_Float16x4x4_args = { &Float16x4x4_operator_mulasg_Float16x4x4_arg0 };

/// operator* with Float16
Variable Float16x4x4_operator_scale_Float16_arg0;
Function Float16x4x4_operator_scale_Float16;
inline constexpr std::array Float16x4x4_operator_scale_Float16_args = { &Float16x4x4_operator_scale_Float16_arg0 };

Float16x4x4::Float16x4x4()
{
    this->name = "f16";
    this->columnSize = 4;
    this->rowSize = 4;
    this->byteSize = 32;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// f16x4x4 with Float16x4, Float16x4, Float16x4, Float16x4
    Float16x4x4_Float16_4_ctor_arg0.name = "_arg0"_c;
    Float16x4x4_Float16_4_ctor_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4x4_Float16_4_ctor_arg1.name = "_arg1"_c;
    Float16x4x4_Float16_4_ctor_arg1.type = Type::FullType{ Float16x4Type.name };
    Float16x4x4_Float16_4_ctor_arg2.name = "_arg2"_c;
    Float16x4x4_Float16_4_ctor_arg2.type = Type::FullType{ Float16x4Type.name };
    Float16x4x4_Float16_4_ctor_arg3.name = "_arg3"_c;
    Float16x4x4_Float16_4_ctor_arg3.type = Type::FullType{ Float16x4Type.name };
    Float16x4x4_Float16_4_ctor.name = "f16x4x4"_c;
    Float16x4x4_Float16_4_ctor.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_Float16_4_ctor.parameters = Float16x4x4_Float16_4_ctor_args;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor_arg1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor_arg2)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor_arg3)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor)->returnTypeSymbol = &Float16x4x4Type;

    /// f16x4x4
    Float16x4x4_identity.name = "f16x4x4"_c;
    Float16x4x4_identity.returnType = Type::FullType { Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_identity)->returnTypeSymbol = &Float16x4x4Type;

    /// f16x4x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x4x4_raw_list_arg0.name = "_arg0"_c;
    Float16x4x4_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg1.name = "_arg1"_c;
    Float16x4x4_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg2.name = "_arg2"_c;
    Float16x4x4_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg3.name = "_arg3"_c;
    Float16x4x4_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg4.name = "_arg4"_c;
    Float16x4x4_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg5.name = "_arg5"_c;
    Float16x4x4_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg6.name = "_arg6"_c;
    Float16x4x4_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg7.name = "_arg7"_c;
    Float16x4x4_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg8.name = "_arg8"_c;
    Float16x4x4_raw_list_arg8.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg9.name = "_arg9"_c;
    Float16x4x4_raw_list_arg9.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg10.name = "_arg10"_c;
    Float16x4x4_raw_list_arg10.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg11.name = "_arg11"_c;
    Float16x4x4_raw_list_arg11.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg12.name = "_arg12"_c;
    Float16x4x4_raw_list_arg12.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg13.name = "_arg13"_c;
    Float16x4x4_raw_list_arg13.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg14.name = "_arg14"_c;
    Float16x4x4_raw_list_arg14.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg15.name = "_arg15"_c;
    Float16x4x4_raw_list_arg15.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list.name = "f16x4x4"_c;
    Float16x4x4_raw_list.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_raw_list.parameters = Float16x4x4_raw_list_args;
    Symbol::Resolved(&Float16x4x4_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg8)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg9)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg10)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg11)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg12)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg13)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg14)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg15)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list)->returnTypeSymbol = &Float16x4x4Type;

    /// operator[] with Int32
    Float16x4x4_operator_index_Int32_arg0.name = "idx"_c;
    Float16x4x4_operator_index_Int32_arg0.type = Type::FullType{ Int32Type.name };
    Float16x4x4_operator_index_Int32.name = "operator[]"_c;
    Float16x4x4_operator_index_Int32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x4_operator_index_Int32.parameters = Float16x4x4_operator_index_Int32_args;
    Symbol::Resolved(&Float16x4x4_operator_index_Int32_arg0)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x4x4_operator_index_Int32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt32
    Float16x4x4_operator_index_UInt32_arg0.name = "idx"_c;
    Float16x4x4_operator_index_UInt32_arg0.type = Type::FullType{ UInt32Type.name };
    Float16x4x4_operator_index_UInt32.name = "operator[]"_c;
    Float16x4x4_operator_index_UInt32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x4_operator_index_UInt32.parameters = Float16x4x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt32_arg0)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with Int16
    Float16x4x4_operator_index_Int16_arg0.name = "idx"_c;
    Float16x4x4_operator_index_Int16_arg0.type = Type::FullType{ Int16Type.name };
    Float16x4x4_operator_index_Int16.name = "operator[]"_c;
    Float16x4x4_operator_index_Int16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x4_operator_index_Int16.parameters = Float16x4x4_operator_index_Int16_args;
    Symbol::Resolved(&Float16x4x4_operator_index_Int16_arg0)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4x4_operator_index_Int16)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt16
    Float16x4x4_operator_index_UInt16_arg0.name = "idx"_c;
    Float16x4x4_operator_index_UInt16_arg0.type = Type::FullType{ UInt16Type.name };
    Float16x4x4_operator_index_UInt16.name = "operator[]"_c;
    Float16x4x4_operator_index_UInt16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x4_operator_index_UInt16.parameters = Float16x4x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt16_arg0)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt16)->returnTypeSymbol = &Float16x4Type;

    /// operator+ with Float16x4x4
    Float16x4x4_operator_add_Float16x4x4_arg0.name = "_arg0"_c;
    Float16x4x4_operator_add_Float16x4x4_arg0.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_add_Float16x4x4.name = "operator+"_c;
    Float16x4x4_operator_add_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_add_Float16x4x4.parameters = Float16x4x4_operator_add_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_add_Float16x4x4_arg0)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_add_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator- with Float16x4x4
    Float16x4x4_operator_sub_Float16x4x4_arg0.name = "_arg0"_c;
    Float16x4x4_operator_sub_Float16x4x4_arg0.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_sub_Float16x4x4.name = "operator-"_c;
    Float16x4x4_operator_sub_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_sub_Float16x4x4.parameters = Float16x4x4_operator_sub_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_sub_Float16x4x4_arg0)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_sub_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator* with Float16x4x4
    Float16x4x4_operator_mul_Float16x4x4_arg0.name = "_arg0"_c;
    Float16x4x4_operator_mul_Float16x4x4_arg0.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_mul_Float16x4x4.name = "operator*"_c;
    Float16x4x4_operator_mul_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_mul_Float16x4x4.parameters = Float16x4x4_operator_mul_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_mul_Float16x4x4_arg0)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_mul_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator+= with Float16x4x4
    Float16x4x4_operator_addasg_Float16x4x4_arg0.name = "_arg0"_c;
    Float16x4x4_operator_addasg_Float16x4x4_arg0.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_addasg_Float16x4x4.name = "operator+="_c;
    Float16x4x4_operator_addasg_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_addasg_Float16x4x4.parameters = Float16x4x4_operator_addasg_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_addasg_Float16x4x4_arg0)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_addasg_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator-= with Float16x4x4
    Float16x4x4_operator_subasg_Float16x4x4_arg0.name = "_arg0"_c;
    Float16x4x4_operator_subasg_Float16x4x4_arg0.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_subasg_Float16x4x4.name = "operator-="_c;
    Float16x4x4_operator_subasg_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_subasg_Float16x4x4.parameters = Float16x4x4_operator_subasg_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_subasg_Float16x4x4_arg0)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_subasg_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator*= with Float16x4x4
    Float16x4x4_operator_mulasg_Float16x4x4_arg0.name = "_arg0"_c;
    Float16x4x4_operator_mulasg_Float16x4x4_arg0.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_mulasg_Float16x4x4.name = "operator*="_c;
    Float16x4x4_operator_mulasg_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_mulasg_Float16x4x4.parameters = Float16x4x4_operator_mulasg_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_mulasg_Float16x4x4_arg0)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_mulasg_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator* with Float16
    Float16x4x4_operator_scale_Float16_arg0.name = "_arg0"_c;
    Float16x4x4_operator_scale_Float16_arg0.type = Type::FullType{ Float16Type.name };
    Float16x4x4_operator_scale_Float16.name = "operator*"_c;
    Float16x4x4_operator_scale_Float16.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_scale_Float16.parameters = Float16x4x4_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16)->returnTypeSymbol = &Float16x4x4Type;

    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 233> {
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
    std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
    std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
    std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
    std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
    std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
    std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
    std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
    std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
    std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
    std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
    std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
    std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
    std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int32 },
    std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
    std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
    std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
    std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
    std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
    std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
    std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
    std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
    std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
    std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
    std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
    std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
    std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
    std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
    std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
    std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
    std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
    std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
    std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
    std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
    std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
    std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
    std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
    std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
    std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
    std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
    std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
    std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
    std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
    std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
    std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x3_operator_add_Float32x3x3 },
    std::pair{ "operator-"_c, &Float32x3x3_operator_sub_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_mul_Float32x3x3 },
    std::pair{ "operator+="_c, &Float32x3x3_operator_addasg_Float32x3x3 },
    std::pair{ "operator-="_c, &Float32x3x3_operator_subasg_Float32x3x3 },
    std::pair{ "operator*="_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
    std::pair{ "operator*"_c, &Float32x3x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x3x4_operator_add_Float32x3x4 },
    std::pair{ "operator-"_c, &Float32x3x4_operator_sub_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_mul_Float32x3x4 },
    std::pair{ "operator+="_c, &Float32x3x4_operator_addasg_Float32x3x4 },
    std::pair{ "operator-="_c, &Float32x3x4_operator_subasg_Float32x3x4 },
    std::pair{ "operator*="_c, &Float32x3x4_operator_mulasg_Float32x3x4 },
    std::pair{ "operator*"_c, &Float32x3x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x2_operator_add_Float32x4x2 },
    std::pair{ "operator-"_c, &Float32x4x2_operator_sub_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_mul_Float32x4x2 },
    std::pair{ "operator+="_c, &Float32x4x2_operator_addasg_Float32x4x2 },
    std::pair{ "operator-="_c, &Float32x4x2_operator_subasg_Float32x4x2 },
    std::pair{ "operator*="_c, &Float32x4x2_operator_mulasg_Float32x4x2 },
    std::pair{ "operator*"_c, &Float32x4x2_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x3_operator_add_Float32x4x3 },
    std::pair{ "operator-"_c, &Float32x4x3_operator_sub_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_mul_Float32x4x3 },
    std::pair{ "operator+="_c, &Float32x4x3_operator_addasg_Float32x4x3 },
    std::pair{ "operator-="_c, &Float32x4x3_operator_subasg_Float32x4x3 },
    std::pair{ "operator*="_c, &Float32x4x3_operator_mulasg_Float32x4x3 },
    std::pair{ "operator*"_c, &Float32x4x3_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float32x4x4_operator_add_Float32x4x4 },
    std::pair{ "operator-"_c, &Float32x4x4_operator_sub_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_mul_Float32x4x4 },
    std::pair{ "operator+="_c, &Float32x4x4_operator_addasg_Float32x4x4 },
    std::pair{ "operator-="_c, &Float32x4x4_operator_subasg_Float32x4x4 },
    std::pair{ "operator*="_c, &Float32x4x4_operator_mulasg_Float32x4x4 },
    std::pair{ "operator*"_c, &Float32x4x4_operator_scale_Float32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x2_operator_add_Float16x2x2 },
    std::pair{ "operator-"_c, &Float16x2x2_operator_sub_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_mul_Float16x2x2 },
    std::pair{ "operator+="_c, &Float16x2x2_operator_addasg_Float16x2x2 },
    std::pair{ "operator-="_c, &Float16x2x2_operator_subasg_Float16x2x2 },
    std::pair{ "operator*="_c, &Float16x2x2_operator_mulasg_Float16x2x2 },
    std::pair{ "operator*"_c, &Float16x2x2_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x3_operator_add_Float16x2x3 },
    std::pair{ "operator-"_c, &Float16x2x3_operator_sub_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_mul_Float16x2x3 },
    std::pair{ "operator+="_c, &Float16x2x3_operator_addasg_Float16x2x3 },
    std::pair{ "operator-="_c, &Float16x2x3_operator_subasg_Float16x2x3 },
    std::pair{ "operator*="_c, &Float16x2x3_operator_mulasg_Float16x2x3 },
    std::pair{ "operator*"_c, &Float16x2x3_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x2x4_operator_add_Float16x2x4 },
    std::pair{ "operator-"_c, &Float16x2x4_operator_sub_Float16x2x4 },
    std::pair{ "operator*"_c, &Float16x2x4_operator_mul_Float16x2x4 },
    std::pair{ "operator+="_c, &Float16x2x4_operator_addasg_Float16x2x4 },
    std::pair{ "operator-="_c, &Float16x2x4_operator_subasg_Float16x2x4 },
    std::pair{ "operator*="_c, &Float16x2x4_operator_mulasg_Float16x2x4 },
    std::pair{ "operator*"_c, &Float16x2x4_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3x2_operator_add_Float16x3x2 },
    std::pair{ "operator-"_c, &Float16x3x2_operator_sub_Float16x3x2 },
    std::pair{ "operator*"_c, &Float16x3x2_operator_mul_Float16x3x2 },
    std::pair{ "operator+="_c, &Float16x3x2_operator_addasg_Float16x3x2 },
    std::pair{ "operator-="_c, &Float16x3x2_operator_subasg_Float16x3x2 },
    std::pair{ "operator*="_c, &Float16x3x2_operator_mulasg_Float16x3x2 },
    std::pair{ "operator*"_c, &Float16x3x2_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3x3_operator_add_Float16x3x3 },
    std::pair{ "operator-"_c, &Float16x3x3_operator_sub_Float16x3x3 },
    std::pair{ "operator*"_c, &Float16x3x3_operator_mul_Float16x3x3 },
    std::pair{ "operator+="_c, &Float16x3x3_operator_addasg_Float16x3x3 },
    std::pair{ "operator-="_c, &Float16x3x3_operator_subasg_Float16x3x3 },
    std::pair{ "operator*="_c, &Float16x3x3_operator_mulasg_Float16x3x3 },
    std::pair{ "operator*"_c, &Float16x3x3_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x3x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x3x4_operator_add_Float16x3x4 },
    std::pair{ "operator-"_c, &Float16x3x4_operator_sub_Float16x3x4 },
    std::pair{ "operator*"_c, &Float16x3x4_operator_mul_Float16x3x4 },
    std::pair{ "operator+="_c, &Float16x3x4_operator_addasg_Float16x3x4 },
    std::pair{ "operator-="_c, &Float16x3x4_operator_subasg_Float16x3x4 },
    std::pair{ "operator*="_c, &Float16x3x4_operator_mulasg_Float16x3x4 },
    std::pair{ "operator*"_c, &Float16x3x4_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x4x2_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x4x2_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x4x2_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x4x2_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x4x2_operator_add_Float16x4x2 },
    std::pair{ "operator-"_c, &Float16x4x2_operator_sub_Float16x4x2 },
    std::pair{ "operator*"_c, &Float16x4x2_operator_mul_Float16x4x2 },
    std::pair{ "operator+="_c, &Float16x4x2_operator_addasg_Float16x4x2 },
    std::pair{ "operator-="_c, &Float16x4x2_operator_subasg_Float16x4x2 },
    std::pair{ "operator*="_c, &Float16x4x2_operator_mulasg_Float16x4x2 },
    std::pair{ "operator*"_c, &Float16x4x2_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x4x3_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x4x3_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x4x3_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x4x3_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x4x3_operator_add_Float16x4x3 },
    std::pair{ "operator-"_c, &Float16x4x3_operator_sub_Float16x4x3 },
    std::pair{ "operator*"_c, &Float16x4x3_operator_mul_Float16x4x3 },
    std::pair{ "operator+="_c, &Float16x4x3_operator_addasg_Float16x4x3 },
    std::pair{ "operator-="_c, &Float16x4x3_operator_subasg_Float16x4x3 },
    std::pair{ "operator*="_c, &Float16x4x3_operator_mulasg_Float16x4x3 },
    std::pair{ "operator*"_c, &Float16x4x3_operator_scale_Float16 },
    std::pair{ "operator[]"_c, &Float16x4x4_operator_index_Int32 },
    std::pair{ "operator[]"_c, &Float16x4x4_operator_index_UInt32 },
    std::pair{ "operator[]"_c, &Float16x4x4_operator_index_Int16 },
    std::pair{ "operator[]"_c, &Float16x4x4_operator_index_UInt16 },
    std::pair{ "operator+"_c, &Float16x4x4_operator_add_Float16x4x4 },
    std::pair{ "operator-"_c, &Float16x4x4_operator_sub_Float16x4x4 },
    std::pair{ "operator*"_c, &Float16x4x4_operator_mul_Float16x4x4 },
    std::pair{ "operator+="_c, &Float16x4x4_operator_addasg_Float16x4x4 },
    std::pair{ "operator-="_c, &Float16x4x4_operator_subasg_Float16x4x4 },
    std::pair{ "operator*="_c, &Float16x4x4_operator_mulasg_Float16x4x4 },
    std::pair{ "operator*"_c, &Float16x4x4_operator_scale_Float16 }
    } };
}
Float16x4x4 Float16x4x4Type;

Texture1D::Texture1D()
{
    this->name = "texture1D";
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture1D;
    this->builtin = true;
};
Texture1D Texture1DType;

Texture1DArray::Texture1DArray()
{
    this->name = "texture1DArray";
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture1D;
    this->builtin = true;
};
Texture1DArray Texture1DArrayType;

Texture2D::Texture2D()
{
    this->name = "texture2D";
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture2D;
    this->builtin = true;
};
Texture2D Texture2DType;

Texture2DMS::Texture2DMS()
{
    this->name = "texture2DMS";
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture2D;
    this->builtin = true;
};
Texture2DMS Texture2DMSType;

Texture2DMSArray::Texture2DMSArray()
{
    this->name = "texture2DMSArray";
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture2D;
    this->builtin = true;
};
Texture2DMSArray Texture2DMSArrayType;

Texture2DArray::Texture2DArray()
{
    this->name = "texture2DArray";
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture2D;
    this->builtin = true;
};
Texture2DArray Texture2DArrayType;

Texture3D::Texture3D()
{
    this->name = "texture3D";
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture3D;
    this->builtin = true;
};
Texture3D Texture3DType;

TextureCube::TextureCube()
{
    this->name = "textureCube";
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::TextureCube;
    this->builtin = true;
};
TextureCube TextureCubeType;

TextureCubeArray::TextureCubeArray()
{
    this->name = "textureCubeArray";
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::TextureCube;
    this->builtin = true;
};
TextureCubeArray TextureCubeArrayType;

PixelCache::PixelCache()
{
    this->name = "pixelCache";
    this->category = Type::PixelCacheCategory;
    this->baseType = TypeCode::PixelCache;
    this->builtin = true;
};
PixelCache PixelCacheType;

PixelCacheMS::PixelCacheMS()
{
    this->name = "pixelCacheMS";
    this->category = Type::PixelCacheCategory;
    this->baseType = TypeCode::PixelCache;
    this->builtin = true;
};
PixelCacheMS PixelCacheMSType;

Sampler::Sampler()
{
    this->name = "sampler";
    this->category = Type::SamplerCategory;
    this->baseType = TypeCode::Sampler;
    this->builtin = true;
};
Sampler SamplerType;

FunctionPtr::FunctionPtr()
{
    this->name = "functionPtr";
    this->builtin = true;
};
FunctionPtr FunctionPtrType;

AccelerationStructure::AccelerationStructure()
{
    this->name = "accelerationStructure";
    this->category = Type::AccelerationStructureCategory;
    this->baseType = TypeCode::AccelerationStructure;
    this->builtin = true;
};
AccelerationStructure AccelerationStructureType;

Void::Void()
{
    this->name = "void";
    this->category = Type::VoidCategory;
    this->baseType = TypeCode::Void;
    this->builtin = true;
};
Void VoidType;

EnumExpression CompareModeLess;
EnumExpression CompareModeLessEqual;
EnumExpression CompareModeGreater;
EnumExpression CompareModeGreaterEqual;
EnumExpression CompareModeEqual;
EnumExpression CompareModeNotEqual;
EnumExpression CompareModeAlways;
EnumExpression CompareModeNever;
CompareMode::CompareMode()
{
    this->name = "CompareMode";
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    CompareModeLess.value = 0x0;
    CompareModeLess.type = Type::FullType{ CompareModeType.name, true };
    CompareModeLess.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeLess)->type = this;
    CompareModeLessEqual.value = 0x1;
    CompareModeLessEqual.type = Type::FullType{ CompareModeType.name, true };
    CompareModeLessEqual.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeLessEqual)->type = this;
    CompareModeGreater.value = 0x2;
    CompareModeGreater.type = Type::FullType{ CompareModeType.name, true };
    CompareModeGreater.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeGreater)->type = this;
    CompareModeGreaterEqual.value = 0x3;
    CompareModeGreaterEqual.type = Type::FullType{ CompareModeType.name, true };
    CompareModeGreaterEqual.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeGreaterEqual)->type = this;
    CompareModeEqual.value = 0x4;
    CompareModeEqual.type = Type::FullType{ CompareModeType.name, true };
    CompareModeEqual.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeEqual)->type = this;
    CompareModeNotEqual.value = 0x5;
    CompareModeNotEqual.type = Type::FullType{ CompareModeType.name, true };
    CompareModeNotEqual.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeNotEqual)->type = this;
    CompareModeAlways.value = 0x6;
    CompareModeAlways.type = Type::FullType{ CompareModeType.name, true };
    CompareModeAlways.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeAlways)->type = this;
    CompareModeNever.value = 0x7;
    CompareModeNever.type = Type::FullType{ CompareModeType.name, true };
    CompareModeNever.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeNever)->type = this;
    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 8>{
        std::pair{ "Less"_c, &CompareModeLess },
        std::pair{ "LessEqual"_c, &CompareModeLessEqual },
        std::pair{ "Greater"_c, &CompareModeGreater },
        std::pair{ "GreaterEqual"_c, &CompareModeGreaterEqual },
        std::pair{ "Equal"_c, &CompareModeEqual },
        std::pair{ "NotEqual"_c, &CompareModeNotEqual },
        std::pair{ "Always"_c, &CompareModeAlways },
        std::pair{ "Never"_c, &CompareModeNever },
    }};
};
CompareMode CompareModeType;

EnumExpression StencilOpKeep;
EnumExpression StencilOpZero;
EnumExpression StencilOpReplace;
EnumExpression StencilOpIncrement;
EnumExpression StencilOpDecrement;
EnumExpression StencilOpInvert;
EnumExpression StencilOpIncrementWrap;
EnumExpression StencilOpDecrementWrap;
StencilOp::StencilOp()
{
    this->name = "StencilOp";
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    StencilOpKeep.value = 0x0;
    StencilOpKeep.type = Type::FullType{ StencilOpType.name, true };
    StencilOpKeep.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpKeep)->type = this;
    StencilOpZero.value = 0x1;
    StencilOpZero.type = Type::FullType{ StencilOpType.name, true };
    StencilOpZero.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpZero)->type = this;
    StencilOpReplace.value = 0x2;
    StencilOpReplace.type = Type::FullType{ StencilOpType.name, true };
    StencilOpReplace.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpReplace)->type = this;
    StencilOpIncrement.value = 0x3;
    StencilOpIncrement.type = Type::FullType{ StencilOpType.name, true };
    StencilOpIncrement.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpIncrement)->type = this;
    StencilOpDecrement.value = 0x4;
    StencilOpDecrement.type = Type::FullType{ StencilOpType.name, true };
    StencilOpDecrement.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpDecrement)->type = this;
    StencilOpInvert.value = 0x5;
    StencilOpInvert.type = Type::FullType{ StencilOpType.name, true };
    StencilOpInvert.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpInvert)->type = this;
    StencilOpIncrementWrap.value = 0x6;
    StencilOpIncrementWrap.type = Type::FullType{ StencilOpType.name, true };
    StencilOpIncrementWrap.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpIncrementWrap)->type = this;
    StencilOpDecrementWrap.value = 0x7;
    StencilOpDecrementWrap.type = Type::FullType{ StencilOpType.name, true };
    StencilOpDecrementWrap.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpDecrementWrap)->type = this;
    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 8>{
        std::pair{ "Keep"_c, &StencilOpKeep },
        std::pair{ "Zero"_c, &StencilOpZero },
        std::pair{ "Replace"_c, &StencilOpReplace },
        std::pair{ "Increment"_c, &StencilOpIncrement },
        std::pair{ "Decrement"_c, &StencilOpDecrement },
        std::pair{ "Invert"_c, &StencilOpInvert },
        std::pair{ "IncrementWrap"_c, &StencilOpIncrementWrap },
        std::pair{ "DecrementWrap"_c, &StencilOpDecrementWrap },
    }};
};
StencilOp StencilOpType;

EnumExpression ExecutionScopeGlobal;
EnumExpression ExecutionScopeDevice;
EnumExpression ExecutionScopeWorkgroup;
EnumExpression ExecutionScopeSubgroup;
EnumExpression ExecutionScopeInvocation;
EnumExpression ExecutionScopeQueue;
ExecutionScope::ExecutionScope()
{
    this->name = "ExecutionScope";
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    ExecutionScopeGlobal.value = 0x0;
    ExecutionScopeGlobal.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeGlobal.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ExecutionScopeGlobal)->type = this;
    ExecutionScopeDevice.value = 0x1;
    ExecutionScopeDevice.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeDevice.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ExecutionScopeDevice)->type = this;
    ExecutionScopeWorkgroup.value = 0x2;
    ExecutionScopeWorkgroup.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeWorkgroup.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ExecutionScopeWorkgroup)->type = this;
    ExecutionScopeSubgroup.value = 0x3;
    ExecutionScopeSubgroup.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeSubgroup.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ExecutionScopeSubgroup)->type = this;
    ExecutionScopeInvocation.value = 0x4;
    ExecutionScopeInvocation.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeInvocation.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ExecutionScopeInvocation)->type = this;
    ExecutionScopeQueue.value = 0x5;
    ExecutionScopeQueue.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeQueue.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ExecutionScopeQueue)->type = this;
    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 6>{
        std::pair{ "Global"_c, &ExecutionScopeGlobal },
        std::pair{ "Device"_c, &ExecutionScopeDevice },
        std::pair{ "Workgroup"_c, &ExecutionScopeWorkgroup },
        std::pair{ "Subgroup"_c, &ExecutionScopeSubgroup },
        std::pair{ "Invocation"_c, &ExecutionScopeInvocation },
        std::pair{ "Queue"_c, &ExecutionScopeQueue },
    }};
};
ExecutionScope ExecutionScopeType;

EnumExpression MemorySemanticsAcquire;
EnumExpression MemorySemanticsRelease;
EnumExpression MemorySemanticsAcquireRelease;
EnumExpression MemorySemanticsSequentiallyConsistent;
EnumExpression MemorySemanticsRelaxed;
MemorySemantics::MemorySemantics()
{
    this->name = "MemorySemantics";
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    MemorySemanticsAcquire.value = 1;
    MemorySemanticsAcquire.type = Type::FullType{ MemorySemanticsType.name, true };
    MemorySemanticsAcquire.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&MemorySemanticsAcquire)->type = this;
    MemorySemanticsRelease.value = 2;
    MemorySemanticsRelease.type = Type::FullType{ MemorySemanticsType.name, true };
    MemorySemanticsRelease.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&MemorySemanticsRelease)->type = this;
    MemorySemanticsAcquireRelease.value = 4;
    MemorySemanticsAcquireRelease.type = Type::FullType{ MemorySemanticsType.name, true };
    MemorySemanticsAcquireRelease.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&MemorySemanticsAcquireRelease)->type = this;
    MemorySemanticsSequentiallyConsistent.value = 8;
    MemorySemanticsSequentiallyConsistent.type = Type::FullType{ MemorySemanticsType.name, true };
    MemorySemanticsSequentiallyConsistent.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&MemorySemanticsSequentiallyConsistent)->type = this;
    MemorySemanticsRelaxed.value = 16;
    MemorySemanticsRelaxed.type = Type::FullType{ MemorySemanticsType.name, true };
    MemorySemanticsRelaxed.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&MemorySemanticsRelaxed)->type = this;
    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 5>{
        std::pair{ "Acquire"_c, &MemorySemanticsAcquire },
        std::pair{ "Release"_c, &MemorySemanticsRelease },
        std::pair{ "AcquireRelease"_c, &MemorySemanticsAcquireRelease },
        std::pair{ "SequentiallyConsistent"_c, &MemorySemanticsSequentiallyConsistent },
        std::pair{ "Relaxed"_c, &MemorySemanticsRelaxed },
    }};
};
MemorySemantics MemorySemanticsType;

EnumExpression PolygonModeFill;
EnumExpression PolygonModeLine;
EnumExpression PolygonModePoint;
PolygonMode::PolygonMode()
{
    this->name = "PolygonMode";
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    PolygonModeFill.value = 1;
    PolygonModeFill.type = Type::FullType{ PolygonModeType.name, true };
    PolygonModeFill.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&PolygonModeFill)->type = this;
    PolygonModeLine.value = 2;
    PolygonModeLine.type = Type::FullType{ PolygonModeType.name, true };
    PolygonModeLine.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&PolygonModeLine)->type = this;
    PolygonModePoint.value = 4;
    PolygonModePoint.type = Type::FullType{ PolygonModeType.name, true };
    PolygonModePoint.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&PolygonModePoint)->type = this;
    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 3>{
        std::pair{ "Fill"_c, &PolygonModeFill },
        std::pair{ "Line"_c, &PolygonModeLine },
        std::pair{ "Point"_c, &PolygonModePoint },
    }};
};
PolygonMode PolygonModeType;

EnumExpression CullModeNone;
EnumExpression CullModeFront;
EnumExpression CullModeBack;
EnumExpression CullModeFrontAndBack;
CullMode::CullMode()
{
    this->name = "CullMode";
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    CullModeNone.value = 0x0;
    CullModeNone.type = Type::FullType{ CullModeType.name, true };
    CullModeNone.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CullModeNone)->type = this;
    CullModeFront.value = 1;
    CullModeFront.type = Type::FullType{ CullModeType.name, true };
    CullModeFront.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CullModeFront)->type = this;
    CullModeBack.value = 2;
    CullModeBack.type = Type::FullType{ CullModeType.name, true };
    CullModeBack.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CullModeBack)->type = this;
    CullModeFrontAndBack.value = 3;
    CullModeFrontAndBack.type = Type::FullType{ CullModeType.name, true };
    CullModeFrontAndBack.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CullModeFrontAndBack)->type = this;
    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 4>{
        std::pair{ "None"_c, &CullModeNone },
        std::pair{ "Front"_c, &CullModeFront },
        std::pair{ "Back"_c, &CullModeBack },
        std::pair{ "FrontAndBack"_c, &CullModeFrontAndBack },
    }};
};
CullMode CullModeType;

EnumExpression WindingOrderClockwise;
EnumExpression WindingOrderCounterClockwise;
WindingOrder::WindingOrder()
{
    this->name = "WindingOrder";
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    WindingOrderClockwise.value = 0x0;
    WindingOrderClockwise.type = Type::FullType{ WindingOrderType.name, true };
    WindingOrderClockwise.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&WindingOrderClockwise)->type = this;
    WindingOrderCounterClockwise.value = 1;
    WindingOrderCounterClockwise.type = Type::FullType{ WindingOrderType.name, true };
    WindingOrderCounterClockwise.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&WindingOrderCounterClockwise)->type = this;
    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 2>{
        std::pair{ "Clockwise"_c, &WindingOrderClockwise },
        std::pair{ "CounterClockwise"_c, &WindingOrderCounterClockwise },
    }};
};
WindingOrder WindingOrderType;

EnumExpression LogicOpAnd;
EnumExpression LogicOpAndInverted;
EnumExpression LogicOpAndReverse;
EnumExpression LogicOpClear;
EnumExpression LogicOpCopy;
EnumExpression LogicOpCopyInverted;
EnumExpression LogicOpEquivalence;
EnumExpression LogicOpInvert;
EnumExpression LogicOpNand;
EnumExpression LogicOpNo;
EnumExpression LogicOpNor;
EnumExpression LogicOpOr;
EnumExpression LogicOpOrInverted;
EnumExpression LogicOpOrReverse;
EnumExpression LogicOpSet;
EnumExpression LogicOpXor;
LogicOp::LogicOp()
{
    this->name = "LogicOp";
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    LogicOpAnd.value = 0x0;
    LogicOpAnd.type = Type::FullType{ LogicOpType.name, true };
    LogicOpAnd.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpAnd)->type = this;
    LogicOpAndInverted.value = 0x1;
    LogicOpAndInverted.type = Type::FullType{ LogicOpType.name, true };
    LogicOpAndInverted.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpAndInverted)->type = this;
    LogicOpAndReverse.value = 0x2;
    LogicOpAndReverse.type = Type::FullType{ LogicOpType.name, true };
    LogicOpAndReverse.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpAndReverse)->type = this;
    LogicOpClear.value = 0x3;
    LogicOpClear.type = Type::FullType{ LogicOpType.name, true };
    LogicOpClear.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpClear)->type = this;
    LogicOpCopy.value = 0x4;
    LogicOpCopy.type = Type::FullType{ LogicOpType.name, true };
    LogicOpCopy.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpCopy)->type = this;
    LogicOpCopyInverted.value = 0x5;
    LogicOpCopyInverted.type = Type::FullType{ LogicOpType.name, true };
    LogicOpCopyInverted.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpCopyInverted)->type = this;
    LogicOpEquivalence.value = 0x6;
    LogicOpEquivalence.type = Type::FullType{ LogicOpType.name, true };
    LogicOpEquivalence.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpEquivalence)->type = this;
    LogicOpInvert.value = 0x7;
    LogicOpInvert.type = Type::FullType{ LogicOpType.name, true };
    LogicOpInvert.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpInvert)->type = this;
    LogicOpNand.value = 0x8;
    LogicOpNand.type = Type::FullType{ LogicOpType.name, true };
    LogicOpNand.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpNand)->type = this;
    LogicOpNo.value = 0x9;
    LogicOpNo.type = Type::FullType{ LogicOpType.name, true };
    LogicOpNo.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpNo)->type = this;
    LogicOpNor.value = 0xa;
    LogicOpNor.type = Type::FullType{ LogicOpType.name, true };
    LogicOpNor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpNor)->type = this;
    LogicOpOr.value = 0xb;
    LogicOpOr.type = Type::FullType{ LogicOpType.name, true };
    LogicOpOr.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpOr)->type = this;
    LogicOpOrInverted.value = 0xc;
    LogicOpOrInverted.type = Type::FullType{ LogicOpType.name, true };
    LogicOpOrInverted.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpOrInverted)->type = this;
    LogicOpOrReverse.value = 0xd;
    LogicOpOrReverse.type = Type::FullType{ LogicOpType.name, true };
    LogicOpOrReverse.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpOrReverse)->type = this;
    LogicOpSet.value = 0xe;
    LogicOpSet.type = Type::FullType{ LogicOpType.name, true };
    LogicOpSet.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpSet)->type = this;
    LogicOpXor.value = 0xf;
    LogicOpXor.type = Type::FullType{ LogicOpType.name, true };
    LogicOpXor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpXor)->type = this;
    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 16>{
        std::pair{ "And"_c, &LogicOpAnd },
        std::pair{ "AndInverted"_c, &LogicOpAndInverted },
        std::pair{ "AndReverse"_c, &LogicOpAndReverse },
        std::pair{ "Clear"_c, &LogicOpClear },
        std::pair{ "Copy"_c, &LogicOpCopy },
        std::pair{ "CopyInverted"_c, &LogicOpCopyInverted },
        std::pair{ "Equivalence"_c, &LogicOpEquivalence },
        std::pair{ "Invert"_c, &LogicOpInvert },
        std::pair{ "Nand"_c, &LogicOpNand },
        std::pair{ "No"_c, &LogicOpNo },
        std::pair{ "Nor"_c, &LogicOpNor },
        std::pair{ "Or"_c, &LogicOpOr },
        std::pair{ "OrInverted"_c, &LogicOpOrInverted },
        std::pair{ "OrReverse"_c, &LogicOpOrReverse },
        std::pair{ "Set"_c, &LogicOpSet },
        std::pair{ "Xor"_c, &LogicOpXor },
    }};
};
LogicOp LogicOpType;

EnumExpression BlendFactorZero;
EnumExpression BlendFactorOne;
EnumExpression BlendFactorSourceColor;
EnumExpression BlendFactorOneMinusSourceColor;
EnumExpression BlendFactorSourceAlpha;
EnumExpression BlendFactorOneMinusSourceAlpha;
EnumExpression BlendFactorDestinationColor;
EnumExpression BlendFactorOneMinusDestinationColor;
EnumExpression BlendFactorDestinationAlpha;
EnumExpression BlendFactorOneMinusDestinationAlpha;
EnumExpression BlendFactorConstantColor;
EnumExpression BlendFactorOneMinusConstantColor;
EnumExpression BlendFactorConstantAlpha;
EnumExpression BlendFactorOneMinusConstantAlpha;
BlendFactor::BlendFactor()
{
    this->name = "BlendFactor";
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    BlendFactorZero.value = 0x0;
    BlendFactorZero.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorZero.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorZero)->type = this;
    BlendFactorOne.value = 0x1;
    BlendFactorOne.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOne.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorOne)->type = this;
    BlendFactorSourceColor.value = 0x2;
    BlendFactorSourceColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorSourceColor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorSourceColor)->type = this;
    BlendFactorOneMinusSourceColor.value = 0x3;
    BlendFactorOneMinusSourceColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusSourceColor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorOneMinusSourceColor)->type = this;
    BlendFactorSourceAlpha.value = 0x4;
    BlendFactorSourceAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorSourceAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorSourceAlpha)->type = this;
    BlendFactorOneMinusSourceAlpha.value = 0x5;
    BlendFactorOneMinusSourceAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusSourceAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorOneMinusSourceAlpha)->type = this;
    BlendFactorDestinationColor.value = 0x6;
    BlendFactorDestinationColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorDestinationColor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorDestinationColor)->type = this;
    BlendFactorOneMinusDestinationColor.value = 0x7;
    BlendFactorOneMinusDestinationColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusDestinationColor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorOneMinusDestinationColor)->type = this;
    BlendFactorDestinationAlpha.value = 0x8;
    BlendFactorDestinationAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorDestinationAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorDestinationAlpha)->type = this;
    BlendFactorOneMinusDestinationAlpha.value = 0x9;
    BlendFactorOneMinusDestinationAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusDestinationAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorOneMinusDestinationAlpha)->type = this;
    BlendFactorConstantColor.value = 0xa;
    BlendFactorConstantColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorConstantColor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorConstantColor)->type = this;
    BlendFactorOneMinusConstantColor.value = 0xb;
    BlendFactorOneMinusConstantColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusConstantColor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorOneMinusConstantColor)->type = this;
    BlendFactorConstantAlpha.value = 0xc;
    BlendFactorConstantAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorConstantAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorConstantAlpha)->type = this;
    BlendFactorOneMinusConstantAlpha.value = 0xd;
    BlendFactorOneMinusConstantAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusConstantAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorOneMinusConstantAlpha)->type = this;
    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 14>{
        std::pair{ "Zero"_c, &BlendFactorZero },
        std::pair{ "One"_c, &BlendFactorOne },
        std::pair{ "SourceColor"_c, &BlendFactorSourceColor },
        std::pair{ "OneMinusSourceColor"_c, &BlendFactorOneMinusSourceColor },
        std::pair{ "SourceAlpha"_c, &BlendFactorSourceAlpha },
        std::pair{ "OneMinusSourceAlpha"_c, &BlendFactorOneMinusSourceAlpha },
        std::pair{ "DestinationColor"_c, &BlendFactorDestinationColor },
        std::pair{ "OneMinusDestinationColor"_c, &BlendFactorOneMinusDestinationColor },
        std::pair{ "DestinationAlpha"_c, &BlendFactorDestinationAlpha },
        std::pair{ "OneMinusDestinationAlpha"_c, &BlendFactorOneMinusDestinationAlpha },
        std::pair{ "ConstantColor"_c, &BlendFactorConstantColor },
        std::pair{ "OneMinusConstantColor"_c, &BlendFactorOneMinusConstantColor },
        std::pair{ "ConstantAlpha"_c, &BlendFactorConstantAlpha },
        std::pair{ "OneMinusConstantAlpha"_c, &BlendFactorOneMinusConstantAlpha },
    }};
};
BlendFactor BlendFactorType;

EnumExpression BlendOperationAdd;
EnumExpression BlendOperationSubtract;
EnumExpression BlendOperationReverseSubtract;
EnumExpression BlendOperationMin;
EnumExpression BlendOperationMax;
BlendOperation::BlendOperation()
{
    this->name = "BlendOperation";
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    BlendOperationAdd.value = 0x0;
    BlendOperationAdd.type = Type::FullType{ BlendOperationType.name, true };
    BlendOperationAdd.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendOperationAdd)->type = this;
    BlendOperationSubtract.value = 0x1;
    BlendOperationSubtract.type = Type::FullType{ BlendOperationType.name, true };
    BlendOperationSubtract.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendOperationSubtract)->type = this;
    BlendOperationReverseSubtract.value = 0x2;
    BlendOperationReverseSubtract.type = Type::FullType{ BlendOperationType.name, true };
    BlendOperationReverseSubtract.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendOperationReverseSubtract)->type = this;
    BlendOperationMin.value = 0x3;
    BlendOperationMin.type = Type::FullType{ BlendOperationType.name, true };
    BlendOperationMin.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendOperationMin)->type = this;
    BlendOperationMax.value = 0x4;
    BlendOperationMax.type = Type::FullType{ BlendOperationType.name, true };
    BlendOperationMax.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendOperationMax)->type = this;
    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 5>{
        std::pair{ "Add"_c, &BlendOperationAdd },
        std::pair{ "Subtract"_c, &BlendOperationSubtract },
        std::pair{ "ReverseSubtract"_c, &BlendOperationReverseSubtract },
        std::pair{ "Min"_c, &BlendOperationMin },
        std::pair{ "Max"_c, &BlendOperationMax },
    }};
};
BlendOperation BlendOperationType;

EnumExpression BlendColorMaskNone;
EnumExpression BlendColorMaskR;
EnumExpression BlendColorMaskRG;
EnumExpression BlendColorMaskRGB;
EnumExpression BlendColorMaskRGBA;
BlendColorMask::BlendColorMask()
{
    this->name = "BlendColorMask";
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    BlendColorMaskNone.value = 0x0;
    BlendColorMaskNone.type = Type::FullType{ BlendColorMaskType.name, true };
    BlendColorMaskNone.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendColorMaskNone)->type = this;
    BlendColorMaskR.value = 1;
    BlendColorMaskR.type = Type::FullType{ BlendColorMaskType.name, true };
    BlendColorMaskR.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendColorMaskR)->type = this;
    BlendColorMaskRG.value = 3;
    BlendColorMaskRG.type = Type::FullType{ BlendColorMaskType.name, true };
    BlendColorMaskRG.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendColorMaskRG)->type = this;
    BlendColorMaskRGB.value = 7;
    BlendColorMaskRGB.type = Type::FullType{ BlendColorMaskType.name, true };
    BlendColorMaskRGB.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendColorMaskRGB)->type = this;
    BlendColorMaskRGBA.value = 15;
    BlendColorMaskRGBA.type = Type::FullType{ BlendColorMaskType.name, true };
    BlendColorMaskRGBA.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendColorMaskRGBA)->type = this;
    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 5>{
        std::pair{ "None"_c, &BlendColorMaskNone },
        std::pair{ "R"_c, &BlendColorMaskR },
        std::pair{ "RG"_c, &BlendColorMaskRG },
        std::pair{ "RGB"_c, &BlendColorMaskRGB },
        std::pair{ "RGBA"_c, &BlendColorMaskRGBA },
    }};
};
BlendColorMask BlendColorMaskType;

EnumExpression FilterModePoint;
EnumExpression FilterModeLinear;
EnumExpression FilterModeMinMagMipmapLinear;
EnumExpression FilterModeMinMagLinearMipPoint;
EnumExpression FilterModeMinLinearMagMipPoint;
EnumExpression FilterModeMinMagMipPoint;
EnumExpression FilterModeMinMagPointMipLinear;
EnumExpression FilterModeMinPointMagMipLinear;
EnumExpression FilterModeMinLinearMagPointMipLinear;
EnumExpression FilterModeMinPointMagLinearMipPoint;
FilterMode::FilterMode()
{
    this->name = "FilterMode";
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    FilterModePoint.value = 0x0;
    FilterModePoint.type = Type::FullType{ FilterModeType.name, true };
    FilterModePoint.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModePoint)->type = this;
    FilterModeLinear.value = 0x1;
    FilterModeLinear.type = Type::FullType{ FilterModeType.name, true };
    FilterModeLinear.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeLinear)->type = this;
    FilterModeMinMagMipmapLinear.value = 0x2;
    FilterModeMinMagMipmapLinear.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinMagMipmapLinear.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinMagMipmapLinear)->type = this;
    FilterModeMinMagLinearMipPoint.value = 0x3;
    FilterModeMinMagLinearMipPoint.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinMagLinearMipPoint.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinMagLinearMipPoint)->type = this;
    FilterModeMinLinearMagMipPoint.value = 0x4;
    FilterModeMinLinearMagMipPoint.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinLinearMagMipPoint.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinLinearMagMipPoint)->type = this;
    FilterModeMinMagMipPoint.value = 0x5;
    FilterModeMinMagMipPoint.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinMagMipPoint.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinMagMipPoint)->type = this;
    FilterModeMinMagPointMipLinear.value = 0x6;
    FilterModeMinMagPointMipLinear.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinMagPointMipLinear.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinMagPointMipLinear)->type = this;
    FilterModeMinPointMagMipLinear.value = 0x7;
    FilterModeMinPointMagMipLinear.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinPointMagMipLinear.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinPointMagMipLinear)->type = this;
    FilterModeMinLinearMagPointMipLinear.value = 0x8;
    FilterModeMinLinearMagPointMipLinear.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinLinearMagPointMipLinear.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinLinearMagPointMipLinear)->type = this;
    FilterModeMinPointMagLinearMipPoint.value = 0x9;
    FilterModeMinPointMagLinearMipPoint.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinPointMagLinearMipPoint.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinPointMagLinearMipPoint)->type = this;
    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 10>{
        std::pair{ "Point"_c, &FilterModePoint },
        std::pair{ "Linear"_c, &FilterModeLinear },
        std::pair{ "MinMagMipmapLinear"_c, &FilterModeMinMagMipmapLinear },
        std::pair{ "MinMagLinearMipPoint"_c, &FilterModeMinMagLinearMipPoint },
        std::pair{ "MinLinearMagMipPoint"_c, &FilterModeMinLinearMagMipPoint },
        std::pair{ "MinMagMipPoint"_c, &FilterModeMinMagMipPoint },
        std::pair{ "MinMagPointMipLinear"_c, &FilterModeMinMagPointMipLinear },
        std::pair{ "MinPointMagMipLinear"_c, &FilterModeMinPointMagMipLinear },
        std::pair{ "MinLinearMagPointMipLinear"_c, &FilterModeMinLinearMagPointMipLinear },
        std::pair{ "MinPointMagLinearMipPoint"_c, &FilterModeMinPointMagLinearMipPoint },
    }};
};
FilterMode FilterModeType;

EnumExpression AddressModeRepeat;
EnumExpression AddressModeMirror;
EnumExpression AddressModeClamp;
EnumExpression AddressModeBorder;
AddressMode::AddressMode()
{
    this->name = "AddressMode";
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    AddressModeRepeat.value = 0x0;
    AddressModeRepeat.type = Type::FullType{ AddressModeType.name, true };
    AddressModeRepeat.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AddressModeRepeat)->type = this;
    AddressModeMirror.value = 0x1;
    AddressModeMirror.type = Type::FullType{ AddressModeType.name, true };
    AddressModeMirror.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AddressModeMirror)->type = this;
    AddressModeClamp.value = 0x2;
    AddressModeClamp.type = Type::FullType{ AddressModeType.name, true };
    AddressModeClamp.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AddressModeClamp)->type = this;
    AddressModeBorder.value = 0x3;
    AddressModeBorder.type = Type::FullType{ AddressModeType.name, true };
    AddressModeBorder.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AddressModeBorder)->type = this;
    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 4>{
        std::pair{ "Repeat"_c, &AddressModeRepeat },
        std::pair{ "Mirror"_c, &AddressModeMirror },
        std::pair{ "Clamp"_c, &AddressModeClamp },
        std::pair{ "Border"_c, &AddressModeBorder },
    }};
};
AddressMode AddressModeType;

EnumExpression BorderColorTransparent;
EnumExpression BorderColorBlack;
EnumExpression BorderColorWhite;
BorderColor::BorderColor()
{
    this->name = "BorderColor";
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    BorderColorTransparent.value = 0x0;
    BorderColorTransparent.type = Type::FullType{ BorderColorType.name, true };
    BorderColorTransparent.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BorderColorTransparent)->type = this;
    BorderColorBlack.value = 0x1;
    BorderColorBlack.type = Type::FullType{ BorderColorType.name, true };
    BorderColorBlack.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BorderColorBlack)->type = this;
    BorderColorWhite.value = 0x2;
    BorderColorWhite.type = Type::FullType{ BorderColorType.name, true };
    BorderColorWhite.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BorderColorWhite)->type = this;
    this->scope.symbolLookup = StaticMap { std::array<std::pair<ConstantString, Symbol*>, 3>{
        std::pair{ "Transparent"_c, &BorderColorTransparent },
        std::pair{ "Black"_c, &BorderColorBlack },
        std::pair{ "White"_c, &BorderColorWhite },
    }};
};
BorderColor BorderColorType;

Variable StencilStateFail;
Variable StencilStatePass;
Variable StencilStateDepthFail;
Variable StencilStateCompareFunction;
Variable StencilStateCompareMask;
Variable StencilStateWriteMask;
Variable StencilStateReference;
StencilState::StencilState()
{
    this->name = "StencilState";
    this->builtin = true;
    StencilStateFail.name = "Fail"_c;
    StencilStateFail.type = Type::FullType{ StencilOpType.name };
    Symbol::Resolved(&StencilStateFail)->typeSymbol = &StencilOpType;

    StencilStatePass.name = "Pass"_c;
    StencilStatePass.type = Type::FullType{ StencilOpType.name };
    Symbol::Resolved(&StencilStatePass)->typeSymbol = &StencilOpType;

    StencilStateDepthFail.name = "DepthFail"_c;
    StencilStateDepthFail.type = Type::FullType{ StencilOpType.name };
    Symbol::Resolved(&StencilStateDepthFail)->typeSymbol = &StencilOpType;

    StencilStateCompareFunction.name = "CompareFunction"_c;
    StencilStateCompareFunction.type = Type::FullType{ CompareModeType.name };
    Symbol::Resolved(&StencilStateCompareFunction)->typeSymbol = &CompareModeType;

    StencilStateCompareMask.name = "CompareMask"_c;
    StencilStateCompareMask.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilStateCompareMask)->typeSymbol = &UInt32Type;

    StencilStateWriteMask.name = "WriteMask"_c;
    StencilStateWriteMask.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilStateWriteMask)->typeSymbol = &UInt32Type;

    StencilStateReference.name = "Reference"_c;
    StencilStateReference.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilStateReference)->typeSymbol = &UInt32Type;

    this->scope.symbolLookup = StaticMap { std::array{
        std::pair{ "Fail"_c, &StencilStateFail },
        std::pair{ "Pass"_c, &StencilStatePass },
        std::pair{ "DepthFail"_c, &StencilStateDepthFail },
        std::pair{ "CompareFunction"_c, &StencilStateCompareFunction },
        std::pair{ "CompareMask"_c, &StencilStateCompareMask },
        std::pair{ "WriteMask"_c, &StencilStateWriteMask },
        std::pair{ "Reference"_c, &StencilStateReference },
    }};
};
StencilState StencilStateType;

Variable RenderStateDepthClampEnabled;
Variable RenderStateDepthTestEnabled;
Variable RenderStateDepthWriteEnabled;
Variable RenderStateDepthBiasEnabled;
Variable RenderStateDepthBiasConstantFactor;
Variable RenderStateDepthBiasClamp;
Variable RenderStateDepthBiasSlopeFactor;
Variable RenderStateDepthTestFunction;
Variable RenderStateDepthBoundsTestEnabled;
Variable RenderStateDepthBoundsMin;
Variable RenderStateDepthBoundsMax;
Variable RenderStateNoRasterization;
Variable RenderStatePolygonMode;
Variable RenderStateCullMode;
Variable RenderStateWindingOrder;
Variable RenderStateStencilEnabled;
Variable RenderStateStencilFront;
Variable RenderStateStencilBack;
Variable RenderStateLogicOpEnabled;
Variable RenderStateLogicOp;
Variable RenderStateBlendEnabled;
IntExpression RenderStateBlendEnabledArraySize(8);
Variable RenderStateSourceBlend;
IntExpression RenderStateSourceBlendArraySize(8);
Variable RenderStateDestinationBlend;
IntExpression RenderStateDestinationBlendArraySize(8);
Variable RenderStateSourceAlphaBlend;
IntExpression RenderStateSourceAlphaBlendArraySize(8);
Variable RenderStateDestinationAlphaBlend;
IntExpression RenderStateDestinationAlphaBlendArraySize(8);
Variable RenderStateColorBlendOp;
IntExpression RenderStateColorBlendOpArraySize(8);
Variable RenderStateAlphaBlendOp;
IntExpression RenderStateAlphaBlendOpArraySize(8);
Variable RenderStateMask;
IntExpression RenderStateMaskArraySize(8);
RenderState::RenderState()
{
    this->name = "RenderState";
    this->builtin = true;
    RenderStateDepthClampEnabled.name = "DepthClampEnabled"_c;
    RenderStateDepthClampEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateDepthClampEnabled)->typeSymbol = &Bool8Type;

    RenderStateDepthTestEnabled.name = "DepthTestEnabled"_c;
    RenderStateDepthTestEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateDepthTestEnabled)->typeSymbol = &Bool8Type;

    RenderStateDepthWriteEnabled.name = "DepthWriteEnabled"_c;
    RenderStateDepthWriteEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateDepthWriteEnabled)->typeSymbol = &Bool8Type;

    RenderStateDepthBiasEnabled.name = "DepthBiasEnabled"_c;
    RenderStateDepthBiasEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateDepthBiasEnabled)->typeSymbol = &Bool8Type;

    RenderStateDepthBiasConstantFactor.name = "DepthBiasConstantFactor"_c;
    RenderStateDepthBiasConstantFactor.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&RenderStateDepthBiasConstantFactor)->typeSymbol = &Float32Type;

    RenderStateDepthBiasClamp.name = "DepthBiasClamp"_c;
    RenderStateDepthBiasClamp.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&RenderStateDepthBiasClamp)->typeSymbol = &Float32Type;

    RenderStateDepthBiasSlopeFactor.name = "DepthBiasSlopeFactor"_c;
    RenderStateDepthBiasSlopeFactor.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&RenderStateDepthBiasSlopeFactor)->typeSymbol = &Float32Type;

    RenderStateDepthTestFunction.name = "DepthTestFunction"_c;
    RenderStateDepthTestFunction.type = Type::FullType{ CompareModeType.name };
    Symbol::Resolved(&RenderStateDepthTestFunction)->typeSymbol = &CompareModeType;

    RenderStateDepthBoundsTestEnabled.name = "DepthBoundsTestEnabled"_c;
    RenderStateDepthBoundsTestEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateDepthBoundsTestEnabled)->typeSymbol = &Bool8Type;

    RenderStateDepthBoundsMin.name = "DepthBoundsMin"_c;
    RenderStateDepthBoundsMin.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&RenderStateDepthBoundsMin)->typeSymbol = &Float32Type;

    RenderStateDepthBoundsMax.name = "DepthBoundsMax"_c;
    RenderStateDepthBoundsMax.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&RenderStateDepthBoundsMax)->typeSymbol = &Float32Type;

    RenderStateNoRasterization.name = "NoRasterization"_c;
    RenderStateNoRasterization.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateNoRasterization)->typeSymbol = &Bool8Type;

    RenderStatePolygonMode.name = "PolygonMode"_c;
    RenderStatePolygonMode.type = Type::FullType{ PolygonModeType.name };
    Symbol::Resolved(&RenderStatePolygonMode)->typeSymbol = &PolygonModeType;

    RenderStateCullMode.name = "CullMode"_c;
    RenderStateCullMode.type = Type::FullType{ CullModeType.name };
    Symbol::Resolved(&RenderStateCullMode)->typeSymbol = &CullModeType;

    RenderStateWindingOrder.name = "WindingOrder"_c;
    RenderStateWindingOrder.type = Type::FullType{ WindingOrderType.name };
    Symbol::Resolved(&RenderStateWindingOrder)->typeSymbol = &WindingOrderType;

    RenderStateStencilEnabled.name = "StencilEnabled"_c;
    RenderStateStencilEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateStencilEnabled)->typeSymbol = &Bool8Type;

    RenderStateStencilFront.name = "StencilFront"_c;
    RenderStateStencilFront.type = Type::FullType{ StencilStateType.name };
    Symbol::Resolved(&RenderStateStencilFront)->typeSymbol = &StencilStateType;

    RenderStateStencilBack.name = "StencilBack"_c;
    RenderStateStencilBack.type = Type::FullType{ StencilStateType.name };
    Symbol::Resolved(&RenderStateStencilBack)->typeSymbol = &StencilStateType;

    RenderStateLogicOpEnabled.name = "LogicOpEnabled"_c;
    RenderStateLogicOpEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateLogicOpEnabled)->typeSymbol = &Bool8Type;

    RenderStateLogicOp.name = "LogicOp"_c;
    RenderStateLogicOp.type = Type::FullType{ LogicOpType.name };
    Symbol::Resolved(&RenderStateLogicOp)->typeSymbol = &LogicOpType;

    RenderStateBlendEnabled.name = "BlendEnabled"_c;
    RenderStateBlendEnabled.type = Type::FullType{ Bool8Type.name, {Type::FullType::Modifier::Array}, {&RenderStateBlendEnabledArraySize} };
    Symbol::Resolved(&RenderStateBlendEnabled)->typeSymbol = &Bool8Type;

    RenderStateSourceBlend.name = "SourceBlend"_c;
    RenderStateSourceBlend.type = Type::FullType{ BlendFactorType.name, {Type::FullType::Modifier::Array}, {&RenderStateSourceBlendArraySize} };
    Symbol::Resolved(&RenderStateSourceBlend)->typeSymbol = &BlendFactorType;

    RenderStateDestinationBlend.name = "DestinationBlend"_c;
    RenderStateDestinationBlend.type = Type::FullType{ BlendFactorType.name, {Type::FullType::Modifier::Array}, {&RenderStateDestinationBlendArraySize} };
    Symbol::Resolved(&RenderStateDestinationBlend)->typeSymbol = &BlendFactorType;

    RenderStateSourceAlphaBlend.name = "SourceAlphaBlend"_c;
    RenderStateSourceAlphaBlend.type = Type::FullType{ BlendFactorType.name, {Type::FullType::Modifier::Array}, {&RenderStateSourceAlphaBlendArraySize} };
    Symbol::Resolved(&RenderStateSourceAlphaBlend)->typeSymbol = &BlendFactorType;

    RenderStateDestinationAlphaBlend.name = "DestinationAlphaBlend"_c;
    RenderStateDestinationAlphaBlend.type = Type::FullType{ BlendFactorType.name, {Type::FullType::Modifier::Array}, {&RenderStateDestinationAlphaBlendArraySize} };
    Symbol::Resolved(&RenderStateDestinationAlphaBlend)->typeSymbol = &BlendFactorType;

    RenderStateColorBlendOp.name = "ColorBlendOp"_c;
    RenderStateColorBlendOp.type = Type::FullType{ BlendOperationType.name, {Type::FullType::Modifier::Array}, {&RenderStateColorBlendOpArraySize} };
    Symbol::Resolved(&RenderStateColorBlendOp)->typeSymbol = &BlendOperationType;

    RenderStateAlphaBlendOp.name = "AlphaBlendOp"_c;
    RenderStateAlphaBlendOp.type = Type::FullType{ BlendOperationType.name, {Type::FullType::Modifier::Array}, {&RenderStateAlphaBlendOpArraySize} };
    Symbol::Resolved(&RenderStateAlphaBlendOp)->typeSymbol = &BlendOperationType;

    RenderStateMask.name = "Mask"_c;
    RenderStateMask.type = Type::FullType{ BlendColorMaskType.name, {Type::FullType::Modifier::Array}, {&RenderStateMaskArraySize} };
    Symbol::Resolved(&RenderStateMask)->typeSymbol = &BlendColorMaskType;

    this->scope.symbolLookup = StaticMap { std::array{
        std::pair{ "DepthClampEnabled"_c, &RenderStateDepthClampEnabled },
        std::pair{ "DepthTestEnabled"_c, &RenderStateDepthTestEnabled },
        std::pair{ "DepthWriteEnabled"_c, &RenderStateDepthWriteEnabled },
        std::pair{ "DepthBiasEnabled"_c, &RenderStateDepthBiasEnabled },
        std::pair{ "DepthBiasConstantFactor"_c, &RenderStateDepthBiasConstantFactor },
        std::pair{ "DepthBiasClamp"_c, &RenderStateDepthBiasClamp },
        std::pair{ "DepthBiasSlopeFactor"_c, &RenderStateDepthBiasSlopeFactor },
        std::pair{ "DepthTestFunction"_c, &RenderStateDepthTestFunction },
        std::pair{ "DepthBoundsTestEnabled"_c, &RenderStateDepthBoundsTestEnabled },
        std::pair{ "DepthBoundsMin"_c, &RenderStateDepthBoundsMin },
        std::pair{ "DepthBoundsMax"_c, &RenderStateDepthBoundsMax },
        std::pair{ "NoRasterization"_c, &RenderStateNoRasterization },
        std::pair{ "PolygonMode"_c, &RenderStatePolygonMode },
        std::pair{ "CullMode"_c, &RenderStateCullMode },
        std::pair{ "WindingOrder"_c, &RenderStateWindingOrder },
        std::pair{ "StencilEnabled"_c, &RenderStateStencilEnabled },
        std::pair{ "StencilFront"_c, &RenderStateStencilFront },
        std::pair{ "StencilBack"_c, &RenderStateStencilBack },
        std::pair{ "LogicOpEnabled"_c, &RenderStateLogicOpEnabled },
        std::pair{ "LogicOp"_c, &RenderStateLogicOp },
        std::pair{ "BlendEnabled"_c, &RenderStateBlendEnabled },
        std::pair{ "SourceBlend"_c, &RenderStateSourceBlend },
        std::pair{ "DestinationBlend"_c, &RenderStateDestinationBlend },
        std::pair{ "SourceAlphaBlend"_c, &RenderStateSourceAlphaBlend },
        std::pair{ "DestinationAlphaBlend"_c, &RenderStateDestinationAlphaBlend },
        std::pair{ "ColorBlendOp"_c, &RenderStateColorBlendOp },
        std::pair{ "AlphaBlendOp"_c, &RenderStateAlphaBlendOp },
        std::pair{ "Mask"_c, &RenderStateMask },
    }};
};
RenderState RenderStateType;

Variable SamplerStateAddress;
Variable SamplerStateAddressU;
Variable SamplerStateAddressV;
Variable SamplerStateAddressW;
Variable SamplerStateFilter;
Variable SamplerStateMinFilter;
Variable SamplerStateMagFilter;
Variable SamplerStateMipFilter;
Variable SamplerStateMipLodBias;
Variable SamplerStateAnisotropyEnabled;
Variable SamplerStateMaxAnisotropy;
Variable SamplerStateCompareEnabled;
Variable SamplerStateCompareFunction;
Variable SamplerStateMinLod;
Variable SamplerStateMaxLod;
Variable SamplerStateBorderColor;
Variable SamplerStateUnnormalizedSamplingEnabled;
SamplerState::SamplerState()
{
    this->name = "SamplerState";
    this->builtin = true;
    SamplerStateAddress.name = "Address"_c;
    SamplerStateAddress.type = Type::FullType{ AddressModeType.name };
    Symbol::Resolved(&SamplerStateAddress)->typeSymbol = &AddressModeType;

    SamplerStateAddressU.name = "AddressU"_c;
    SamplerStateAddressU.type = Type::FullType{ AddressModeType.name };
    Symbol::Resolved(&SamplerStateAddressU)->typeSymbol = &AddressModeType;

    SamplerStateAddressV.name = "AddressV"_c;
    SamplerStateAddressV.type = Type::FullType{ AddressModeType.name };
    Symbol::Resolved(&SamplerStateAddressV)->typeSymbol = &AddressModeType;

    SamplerStateAddressW.name = "AddressW"_c;
    SamplerStateAddressW.type = Type::FullType{ AddressModeType.name };
    Symbol::Resolved(&SamplerStateAddressW)->typeSymbol = &AddressModeType;

    SamplerStateFilter.name = "Filter"_c;
    SamplerStateFilter.type = Type::FullType{ FilterModeType.name };
    Symbol::Resolved(&SamplerStateFilter)->typeSymbol = &FilterModeType;

    SamplerStateMinFilter.name = "MinFilter"_c;
    SamplerStateMinFilter.type = Type::FullType{ FilterModeType.name };
    Symbol::Resolved(&SamplerStateMinFilter)->typeSymbol = &FilterModeType;

    SamplerStateMagFilter.name = "MagFilter"_c;
    SamplerStateMagFilter.type = Type::FullType{ FilterModeType.name };
    Symbol::Resolved(&SamplerStateMagFilter)->typeSymbol = &FilterModeType;

    SamplerStateMipFilter.name = "MipFilter"_c;
    SamplerStateMipFilter.type = Type::FullType{ FilterModeType.name };
    Symbol::Resolved(&SamplerStateMipFilter)->typeSymbol = &FilterModeType;

    SamplerStateMipLodBias.name = "MipLodBias"_c;
    SamplerStateMipLodBias.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&SamplerStateMipLodBias)->typeSymbol = &Float32Type;

    SamplerStateAnisotropyEnabled.name = "AnisotropyEnabled"_c;
    SamplerStateAnisotropyEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&SamplerStateAnisotropyEnabled)->typeSymbol = &Bool8Type;

    SamplerStateMaxAnisotropy.name = "MaxAnisotropy"_c;
    SamplerStateMaxAnisotropy.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SamplerStateMaxAnisotropy)->typeSymbol = &UInt32Type;

    SamplerStateCompareEnabled.name = "CompareEnabled"_c;
    SamplerStateCompareEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&SamplerStateCompareEnabled)->typeSymbol = &Bool8Type;

    SamplerStateCompareFunction.name = "CompareFunction"_c;
    SamplerStateCompareFunction.type = Type::FullType{ CompareModeType.name };
    Symbol::Resolved(&SamplerStateCompareFunction)->typeSymbol = &CompareModeType;

    SamplerStateMinLod.name = "MinLod"_c;
    SamplerStateMinLod.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&SamplerStateMinLod)->typeSymbol = &Float32Type;

    SamplerStateMaxLod.name = "MaxLod"_c;
    SamplerStateMaxLod.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&SamplerStateMaxLod)->typeSymbol = &Float32Type;

    SamplerStateBorderColor.name = "BorderColor"_c;
    SamplerStateBorderColor.type = Type::FullType{ BorderColorType.name };
    Symbol::Resolved(&SamplerStateBorderColor)->typeSymbol = &BorderColorType;

    SamplerStateUnnormalizedSamplingEnabled.name = "UnnormalizedSamplingEnabled"_c;
    SamplerStateUnnormalizedSamplingEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&SamplerStateUnnormalizedSamplingEnabled)->typeSymbol = &Bool8Type;

    this->scope.symbolLookup = StaticMap { std::array{
        std::pair{ "Address"_c, &SamplerStateAddress },
        std::pair{ "AddressU"_c, &SamplerStateAddressU },
        std::pair{ "AddressV"_c, &SamplerStateAddressV },
        std::pair{ "AddressW"_c, &SamplerStateAddressW },
        std::pair{ "Filter"_c, &SamplerStateFilter },
        std::pair{ "MinFilter"_c, &SamplerStateMinFilter },
        std::pair{ "MagFilter"_c, &SamplerStateMagFilter },
        std::pair{ "MipFilter"_c, &SamplerStateMipFilter },
        std::pair{ "MipLodBias"_c, &SamplerStateMipLodBias },
        std::pair{ "AnisotropyEnabled"_c, &SamplerStateAnisotropyEnabled },
        std::pair{ "MaxAnisotropy"_c, &SamplerStateMaxAnisotropy },
        std::pair{ "CompareEnabled"_c, &SamplerStateCompareEnabled },
        std::pair{ "CompareFunction"_c, &SamplerStateCompareFunction },
        std::pair{ "MinLod"_c, &SamplerStateMinLod },
        std::pair{ "MaxLod"_c, &SamplerStateMaxLod },
        std::pair{ "BorderColor"_c, &SamplerStateBorderColor },
        std::pair{ "UnnormalizedSamplingEnabled"_c, &SamplerStateUnnormalizedSamplingEnabled },
    }};
};
SamplerState SamplerStateType;

Variable ProgramVertexShader;
Variable ProgramHullShader;
Variable ProgramDomainShader;
Variable ProgramGeometryShader;
Variable ProgramPixelShader;
Variable ProgramComputeShader;
Variable ProgramTaskShader;
Variable ProgramMeshShader;
Variable ProgramRayGenerationShader;
Variable ProgramRayAnyHitShader;
Variable ProgramRayClosestHitShader;
Variable ProgramRayMissShader;
Variable ProgramRayIntersectionShader;
Variable ProgramRayCallableShader;
Variable ProgramRenderState;
Program::Program()
{
    this->name = "Program";
    this->builtin = true;
    ProgramVertexShader.name = "VertexShader"_c;
    ProgramVertexShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramVertexShader)->typeSymbol = &FunctionPtrType;

    ProgramHullShader.name = "HullShader"_c;
    ProgramHullShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramHullShader)->typeSymbol = &FunctionPtrType;

    ProgramDomainShader.name = "DomainShader"_c;
    ProgramDomainShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramDomainShader)->typeSymbol = &FunctionPtrType;

    ProgramGeometryShader.name = "GeometryShader"_c;
    ProgramGeometryShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramGeometryShader)->typeSymbol = &FunctionPtrType;

    ProgramPixelShader.name = "PixelShader"_c;
    ProgramPixelShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramPixelShader)->typeSymbol = &FunctionPtrType;

    ProgramComputeShader.name = "ComputeShader"_c;
    ProgramComputeShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramComputeShader)->typeSymbol = &FunctionPtrType;

    ProgramTaskShader.name = "TaskShader"_c;
    ProgramTaskShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramTaskShader)->typeSymbol = &FunctionPtrType;

    ProgramMeshShader.name = "MeshShader"_c;
    ProgramMeshShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramMeshShader)->typeSymbol = &FunctionPtrType;

    ProgramRayGenerationShader.name = "RayGenerationShader"_c;
    ProgramRayGenerationShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayGenerationShader)->typeSymbol = &FunctionPtrType;

    ProgramRayAnyHitShader.name = "RayAnyHitShader"_c;
    ProgramRayAnyHitShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayAnyHitShader)->typeSymbol = &FunctionPtrType;

    ProgramRayClosestHitShader.name = "RayClosestHitShader"_c;
    ProgramRayClosestHitShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayClosestHitShader)->typeSymbol = &FunctionPtrType;

    ProgramRayMissShader.name = "RayMissShader"_c;
    ProgramRayMissShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayMissShader)->typeSymbol = &FunctionPtrType;

    ProgramRayIntersectionShader.name = "RayIntersectionShader"_c;
    ProgramRayIntersectionShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayIntersectionShader)->typeSymbol = &FunctionPtrType;

    ProgramRayCallableShader.name = "RayCallableShader"_c;
    ProgramRayCallableShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayCallableShader)->typeSymbol = &FunctionPtrType;

    ProgramRenderState.name = "RenderState"_c;
    ProgramRenderState.type = Type::FullType{ RenderStateType.name };
    Symbol::Resolved(&ProgramRenderState)->typeSymbol = &RenderStateType;

    this->scope.symbolLookup = StaticMap { std::array{
        std::pair{ "VertexShader"_c, &ProgramVertexShader },
        std::pair{ "HullShader"_c, &ProgramHullShader },
        std::pair{ "DomainShader"_c, &ProgramDomainShader },
        std::pair{ "GeometryShader"_c, &ProgramGeometryShader },
        std::pair{ "PixelShader"_c, &ProgramPixelShader },
        std::pair{ "ComputeShader"_c, &ProgramComputeShader },
        std::pair{ "TaskShader"_c, &ProgramTaskShader },
        std::pair{ "MeshShader"_c, &ProgramMeshShader },
        std::pair{ "RayGenerationShader"_c, &ProgramRayGenerationShader },
        std::pair{ "RayAnyHitShader"_c, &ProgramRayAnyHitShader },
        std::pair{ "RayClosestHitShader"_c, &ProgramRayClosestHitShader },
        std::pair{ "RayMissShader"_c, &ProgramRayMissShader },
        std::pair{ "RayIntersectionShader"_c, &ProgramRayIntersectionShader },
        std::pair{ "RayCallableShader"_c, &ProgramRayCallableShader },
        std::pair{ "RenderState"_c, &ProgramRenderState },
    }};
};
Program ProgramType;


} // namespace GPULang

